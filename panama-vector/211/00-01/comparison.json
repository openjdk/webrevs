{"files":[{"patch":"@@ -900,0 +900,4 @@\n+    static byte valueOf(int i) {\n+        return (byte) i;\n+    }\n+\n@@ -953,1 +957,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -957,1 +961,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -961,1 +965,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static byte valueOf(int i) {\n+        return (byte) i;\n+    }\n+\n@@ -953,1 +957,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -957,1 +961,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -961,1 +965,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static byte valueOf(int i) {\n+        return (byte) i;\n+    }\n+\n@@ -953,1 +957,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -957,1 +961,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -961,1 +965,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static byte valueOf(int i) {\n+        return (byte) i;\n+    }\n+\n@@ -953,1 +957,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -957,1 +961,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -961,1 +965,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -905,0 +905,4 @@\n+    static byte valueOf(int i) {\n+        return (byte) i;\n+    }\n+\n@@ -958,1 +962,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -962,1 +966,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -966,1 +970,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -973,0 +973,4 @@\n+    static double valueOf(int i) {\n+        return (double) i;\n+    }\n+\n@@ -991,1 +995,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -995,1 +999,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -999,1 +1003,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1033,0 +1037,4 @@\n+    static double valueOf(long i) {\n+        return (double) i;\n+    }\n+\n@@ -1036,1 +1044,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1038,1 +1046,1 @@\n-            withToString(\"double[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1040,1 +1048,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1042,1 +1050,1 @@\n-            withToString(\"double[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1044,1 +1052,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1046,1 +1054,1 @@\n-            withToString(\"double[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1071,1 +1079,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1075,1 +1083,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1079,1 +1087,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -973,0 +973,4 @@\n+    static double valueOf(int i) {\n+        return (double) i;\n+    }\n+\n@@ -991,1 +995,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -995,1 +999,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -999,1 +1003,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1033,0 +1037,4 @@\n+    static double valueOf(long i) {\n+        return (double) i;\n+    }\n+\n@@ -1036,1 +1044,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1038,1 +1046,1 @@\n-            withToString(\"double[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1040,1 +1048,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1042,1 +1050,1 @@\n-            withToString(\"double[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1044,1 +1052,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1046,1 +1054,1 @@\n-            withToString(\"double[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1071,1 +1079,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1075,1 +1083,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1079,1 +1087,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -973,0 +973,4 @@\n+    static double valueOf(int i) {\n+        return (double) i;\n+    }\n+\n@@ -991,1 +995,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -995,1 +999,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -999,1 +1003,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1033,0 +1037,4 @@\n+    static double valueOf(long i) {\n+        return (double) i;\n+    }\n+\n@@ -1036,1 +1044,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1038,1 +1046,1 @@\n-            withToString(\"double[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1040,1 +1048,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1042,1 +1050,1 @@\n-            withToString(\"double[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1044,1 +1052,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1046,1 +1054,1 @@\n-            withToString(\"double[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1071,1 +1079,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1075,1 +1083,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1079,1 +1087,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -973,0 +973,4 @@\n+    static double valueOf(int i) {\n+        return (double) i;\n+    }\n+\n@@ -991,1 +995,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -995,1 +999,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -999,1 +1003,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1033,0 +1037,4 @@\n+    static double valueOf(long i) {\n+        return (double) i;\n+    }\n+\n@@ -1036,1 +1044,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1038,1 +1046,1 @@\n-            withToString(\"double[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1040,1 +1048,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1042,1 +1050,1 @@\n-            withToString(\"double[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1044,1 +1052,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1046,1 +1054,1 @@\n-            withToString(\"double[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1071,1 +1079,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1075,1 +1083,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1079,1 +1087,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -978,0 +978,4 @@\n+    static double valueOf(int i) {\n+        return (double) i;\n+    }\n+\n@@ -996,1 +1000,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1000,1 +1004,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1004,1 +1008,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1038,0 +1042,4 @@\n+    static double valueOf(long i) {\n+        return (double) i;\n+    }\n+\n@@ -1041,1 +1049,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1043,1 +1051,1 @@\n-            withToString(\"double[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1045,1 +1053,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1047,1 +1055,1 @@\n-            withToString(\"double[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1049,1 +1057,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1051,1 +1059,1 @@\n-            withToString(\"double[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1076,1 +1084,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1080,1 +1088,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1084,1 +1092,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -973,0 +973,4 @@\n+    static float valueOf(int i) {\n+        return (float) i;\n+    }\n+\n@@ -991,1 +995,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -995,1 +999,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -999,1 +1003,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1033,0 +1037,4 @@\n+    static float valueOf(long i) {\n+        return (float) i;\n+    }\n+\n@@ -1036,1 +1044,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1038,1 +1046,1 @@\n-            withToString(\"float[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1040,1 +1048,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1042,1 +1050,1 @@\n-            withToString(\"float[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1044,1 +1052,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1046,1 +1054,1 @@\n-            withToString(\"float[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1082,1 +1090,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1086,1 +1094,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1090,1 +1098,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -973,0 +973,4 @@\n+    static float valueOf(int i) {\n+        return (float) i;\n+    }\n+\n@@ -991,1 +995,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -995,1 +999,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -999,1 +1003,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1033,0 +1037,4 @@\n+    static float valueOf(long i) {\n+        return (float) i;\n+    }\n+\n@@ -1036,1 +1044,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1038,1 +1046,1 @@\n-            withToString(\"float[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1040,1 +1048,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1042,1 +1050,1 @@\n-            withToString(\"float[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1044,1 +1052,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1046,1 +1054,1 @@\n-            withToString(\"float[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1082,1 +1090,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1086,1 +1094,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1090,1 +1098,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -973,0 +973,4 @@\n+    static float valueOf(int i) {\n+        return (float) i;\n+    }\n+\n@@ -991,1 +995,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -995,1 +999,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -999,1 +1003,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1033,0 +1037,4 @@\n+    static float valueOf(long i) {\n+        return (float) i;\n+    }\n+\n@@ -1036,1 +1044,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1038,1 +1046,1 @@\n-            withToString(\"float[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1040,1 +1048,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1042,1 +1050,1 @@\n-            withToString(\"float[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1044,1 +1052,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1046,1 +1054,1 @@\n-            withToString(\"float[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1082,1 +1090,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1086,1 +1094,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1090,1 +1098,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -973,0 +973,4 @@\n+    static float valueOf(int i) {\n+        return (float) i;\n+    }\n+\n@@ -991,1 +995,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -995,1 +999,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -999,1 +1003,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1033,0 +1037,4 @@\n+    static float valueOf(long i) {\n+        return (float) i;\n+    }\n+\n@@ -1036,1 +1044,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1038,1 +1046,1 @@\n-            withToString(\"float[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1040,1 +1048,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1042,1 +1050,1 @@\n-            withToString(\"float[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1044,1 +1052,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1046,1 +1054,1 @@\n-            withToString(\"float[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1082,1 +1090,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1086,1 +1094,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1090,1 +1098,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -978,0 +978,4 @@\n+    static float valueOf(int i) {\n+        return (float) i;\n+    }\n+\n@@ -996,1 +1000,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1000,1 +1004,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1004,1 +1008,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1038,0 +1042,4 @@\n+    static float valueOf(long i) {\n+        return (float) i;\n+    }\n+\n@@ -1041,1 +1049,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1043,1 +1051,1 @@\n-            withToString(\"float[i * 5]\", (int s) -> {\n+            withToString(\"Halffloat[i * 5]\", (int s) -> {\n@@ -1045,1 +1053,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1047,1 +1055,1 @@\n-            withToString(\"float[i + 1]\", (int s) -> {\n+            withToString(\"Halffloat[i + 1]\", (int s) -> {\n@@ -1049,1 +1057,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1051,1 +1059,1 @@\n-            withToString(\"float[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n@@ -1087,1 +1095,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1091,1 +1099,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1095,1 +1103,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -976,0 +976,4 @@\n+    static short valueOf(int i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -994,1 +998,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -998,1 +1002,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1002,1 +1006,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1036,0 +1040,4 @@\n+    static short valueOf(long i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -1039,1 +1047,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1043,1 +1051,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1047,1 +1055,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1085,1 +1093,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1089,1 +1097,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1093,1 +1101,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -2468,0 +2476,24 @@\n+    static short blend(short a, short b, boolean mask) {\n+        return mask ? b : a;\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void blendHalffloat128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Halffloat128VectorTests::blend);\n+    }\n+\n@@ -2666,1 +2698,1 @@\n-       \/\/ assertBroadcastLongArraysEquals(r, a, b, mask, Halffloat128VectorTests::blend);\n+        assertBroadcastLongArraysEquals(r, a, b, mask, Halffloat128VectorTests::blend);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat128VectorTests.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -976,0 +976,4 @@\n+    static short valueOf(int i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -994,1 +998,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -998,1 +1002,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1002,1 +1006,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1036,0 +1040,4 @@\n+    static short valueOf(long i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -1039,1 +1047,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1043,1 +1051,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1047,1 +1055,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1085,1 +1093,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1089,1 +1097,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1093,1 +1101,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -2468,0 +2476,24 @@\n+    static short blend(short a, short b, boolean mask) {\n+        return mask ? b : a;\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void blendHalffloat256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Halffloat256VectorTests::blend);\n+    }\n+\n@@ -2666,1 +2698,1 @@\n-       \/\/ assertBroadcastLongArraysEquals(r, a, b, mask, Halffloat256VectorTests::blend);\n+        assertBroadcastLongArraysEquals(r, a, b, mask, Halffloat256VectorTests::blend);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat256VectorTests.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -976,0 +976,4 @@\n+    static short valueOf(int i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -994,1 +998,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -998,1 +1002,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1002,1 +1006,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1036,0 +1040,4 @@\n+    static short valueOf(long i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -1039,1 +1047,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1043,1 +1051,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1047,1 +1055,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1085,1 +1093,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1089,1 +1097,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1093,1 +1101,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -2468,0 +2476,24 @@\n+    static short blend(short a, short b, boolean mask) {\n+        return mask ? b : a;\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void blendHalffloat512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Halffloat512VectorTests::blend);\n+    }\n+\n@@ -2666,1 +2698,1 @@\n-       \/\/ assertBroadcastLongArraysEquals(r, a, b, mask, Halffloat512VectorTests::blend);\n+        assertBroadcastLongArraysEquals(r, a, b, mask, Halffloat512VectorTests::blend);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat512VectorTests.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -976,0 +976,4 @@\n+    static short valueOf(int i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -994,1 +998,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -998,1 +1002,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1002,1 +1006,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1036,0 +1040,4 @@\n+    static short valueOf(long i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -1039,1 +1047,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1043,1 +1051,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1047,1 +1055,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1085,1 +1093,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1089,1 +1097,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1093,1 +1101,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -2468,0 +2476,24 @@\n+    static short blend(short a, short b, boolean mask) {\n+        return mask ? b : a;\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void blendHalffloat64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Halffloat64VectorTests::blend);\n+    }\n+\n@@ -2666,1 +2698,1 @@\n-       \/\/ assertBroadcastLongArraysEquals(r, a, b, mask, Halffloat64VectorTests::blend);\n+        assertBroadcastLongArraysEquals(r, a, b, mask, Halffloat64VectorTests::blend);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat64VectorTests.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -981,0 +981,4 @@\n+    static short valueOf(int i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -999,1 +1003,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1003,1 +1007,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1007,1 +1011,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1041,0 +1045,4 @@\n+    static short valueOf(long i) {\n+        return (short) Halffloat.valueOf(i);\n+    }\n+\n@@ -1044,1 +1052,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1048,1 +1056,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1052,1 +1060,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1090,1 +1098,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1094,1 +1102,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1098,1 +1106,1 @@\n-                            i -> (((short)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -2473,0 +2481,24 @@\n+    static short blend(short a, short b, boolean mask) {\n+        return mask ? b : a;\n+    }\n+\n+    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n+    static void blendHalffloatMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, HalffloatMaxVectorTests::blend);\n+    }\n+\n@@ -2671,1 +2703,1 @@\n-       \/\/ assertBroadcastLongArraysEquals(r, a, b, mask, HalffloatMaxVectorTests::blend);\n+        assertBroadcastLongArraysEquals(r, a, b, mask, HalffloatMaxVectorTests::blend);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/HalffloatMaxVectorTests.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static int valueOf(int i) {\n+        return (int) i;\n+    }\n+\n@@ -943,1 +947,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -947,1 +951,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -951,1 +955,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static int valueOf(int i) {\n+        return (int) i;\n+    }\n+\n@@ -943,1 +947,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -947,1 +951,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -951,1 +955,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static int valueOf(int i) {\n+        return (int) i;\n+    }\n+\n@@ -943,1 +947,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -947,1 +951,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -951,1 +955,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static int valueOf(int i) {\n+        return (int) i;\n+    }\n+\n@@ -943,1 +947,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -947,1 +951,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -951,1 +955,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -905,0 +905,4 @@\n+    static int valueOf(int i) {\n+        return (int) i;\n+    }\n+\n@@ -948,1 +952,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -952,1 +956,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -956,1 +960,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -857,0 +857,4 @@\n+    static long valueOf(int i) {\n+        return (long) i;\n+    }\n+\n@@ -875,1 +879,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -879,1 +883,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -883,1 +887,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -933,1 +937,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -937,1 +941,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -941,1 +945,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -857,0 +857,4 @@\n+    static long valueOf(int i) {\n+        return (long) i;\n+    }\n+\n@@ -875,1 +879,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -879,1 +883,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -883,1 +887,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -933,1 +937,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -937,1 +941,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -941,1 +945,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -857,0 +857,4 @@\n+    static long valueOf(int i) {\n+        return (long) i;\n+    }\n+\n@@ -875,1 +879,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -879,1 +883,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -883,1 +887,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -933,1 +937,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -937,1 +941,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -941,1 +945,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -857,0 +857,4 @@\n+    static long valueOf(int i) {\n+        return (long) i;\n+    }\n+\n@@ -875,1 +879,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -879,1 +883,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -883,1 +887,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -933,1 +937,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -937,1 +941,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -941,1 +945,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -862,0 +862,4 @@\n+    static long valueOf(int i) {\n+        return (long) i;\n+    }\n+\n@@ -880,1 +884,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -884,1 +888,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -888,1 +892,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -938,1 +942,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -942,1 +946,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -946,1 +950,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static short valueOf(int i) {\n+        return (short) i;\n+    }\n+\n@@ -943,1 +947,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -947,1 +951,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -951,1 +955,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static short valueOf(int i) {\n+        return (short) i;\n+    }\n+\n@@ -943,1 +947,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -947,1 +951,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -951,1 +955,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static short valueOf(int i) {\n+        return (short) i;\n+    }\n+\n@@ -943,1 +947,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -947,1 +951,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -951,1 +955,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,0 +900,4 @@\n+    static short valueOf(int i) {\n+        return (short) i;\n+    }\n+\n@@ -943,1 +947,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -947,1 +951,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -951,1 +955,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -905,0 +905,4 @@\n+    static short valueOf(int i) {\n+        return (short) i;\n+    }\n+\n@@ -948,1 +952,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -952,1 +956,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -956,1 +960,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -615,0 +615,1 @@\n+  gen_op_tmpl $blend \"blend\" \"Halffloat\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,0 +67,2 @@\n+    ClassType=$type\n+    LayoutType=$TYPE\n@@ -114,0 +116,2 @@\n+        ClassType=Halffloat\n+        LayoutType=SHORT\n@@ -124,2 +128,2 @@\n-    args=\"$args -Dbitstype=$bitstype -DBitstype=$Bitstype -DBoxbitstype=$Boxbitstype -DElementType=$Type -DVecEleType=$VecEleType\"\n-    args=\"$args -Dfptype=$fptype -DFptype=$Fptype -DBoxfptype=$Boxfptype\"\n+    args=\"$args -Dbitstype=$bitstype -DBitstype=$Bitstype -DBoxbitstype=$Boxbitstype -DElementType=$Type -DVecEleType=$VecEleType -DClassType=$ClassType\"\n+    args=\"$args -Dfptype=$fptype -DFptype=$Fptype -DBoxfptype=$Boxfptype -DLayoutType=$LayoutType\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-tests.sh","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -248,3 +248,0 @@\n-#if[Halffloat]\n-       \/\/ assertBroadcastLongArraysEquals(r, a, b, mask, $vectorteststype$::blend);\n-#else[Halffloat]\n@@ -252,1 +249,0 @@\n-#end[Halffloat]\n@@ -628,5 +624,1 @@\n-#if[Halffloat]\n-        VectorSpecies species = vsh.withLanes(Halffloat.class);\n-#else[Halffloat]\n-        VectorSpecies species = vsh.withLanes($type$.class);\n-#end[Halffloat]\n+        VectorSpecies species = vsh.withLanes($ClassType$.class);\n@@ -639,5 +631,1 @@\n-#if[Halffloat]\n-        assert(av.species().elementType() == Halffloat.class);\n-#else[Halffloat]\n-        assert(av.species().elementType() == $type$.class);\n-#end[Halffloat]\n+        assert(av.species().elementType() == $ClassType$.class);\n@@ -661,5 +649,1 @@\n-#if[Halffloat]\n-        VectorSpecies species = av.species().withLanes(Halffloat.class);\n-#else[Halffloat]\n-        VectorSpecies species = av.species().withLanes($type$.class);\n-#end[Halffloat]\n+        VectorSpecies species = av.species().withLanes($ClassType$.class);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1038,0 +1038,8 @@\n+    static $type$ valueOf(int i) {\n+#if[Halffloat]\n+        return (short) Halffloat.valueOf(i);\n+#else[Halffloat]\n+        return ($type$) i;\n+#end[Halffloat]\n+    }\n+\n@@ -1056,14 +1064,1 @@\n-#if[Halffloat]\n-            withToString(\"Halffloat[-i * 5]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> Halffloat.valueOf(-i * 5));\n-            }),\n-            withToString(\"Halffloat[i * 5]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> Halffloat.valueOf(i * 5));\n-            }),\n-            withToString(\"Halffloat[i + 1]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> ((($type$)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n-            }),\n-            withToString(\"Halffloat[intCornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"$ClassType$[-i * 5]\", (int s) -> {\n@@ -1071,6 +1066,1 @@\n-                            i -> ($type$)intCornerCaseValue(i));\n-            })\n-#else[Halffloat]\n-            withToString(\"$type$[-i * 5]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> ($type$)(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1078,1 +1068,1 @@\n-            withToString(\"$type$[i * 5]\", (int s) -> {\n+            withToString(\"$ClassType$[i * 5]\", (int s) -> {\n@@ -1080,1 +1070,1 @@\n-                            i -> ($type$)(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1082,1 +1072,1 @@\n-            withToString(\"$type$[i + 1]\", (int s) -> {\n+            withToString(\"$ClassType$[i + 1]\", (int s) -> {\n@@ -1084,1 +1074,1 @@\n-                            i -> ((($type$)(i + 1) == 0) ? 1 : ($type$)(i + 1)));\n+                            i -> ((($type$)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1086,1 +1076,1 @@\n-            withToString(\"$type$[intCornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"$ClassType$[intCornerCaseValue(i)]\", (int s) -> {\n@@ -1090,1 +1080,0 @@\n-#end[Halffloat]\n@@ -1127,1 +1116,1 @@\n-    static final List<IntFunction<$type$[]>> LONG_$TYPE$_GENERATORS = List.of(\n+    static $type$ valueOf(long i) {\n@@ -1129,1 +1118,8 @@\n-            withToString(\"Halffloat[-i * 5]\", (int s) -> {\n+        return (short) Halffloat.valueOf(i);\n+#else[Halffloat]\n+        return ($type$) i;\n+#end[Halffloat]\n+    }\n+\n+    static final List<IntFunction<$type$[]>> LONG_$TYPE$_GENERATORS = List.of(\n+            withToString(\"$ClassType$[-i * 5]\", (int s) -> {\n@@ -1131,1 +1127,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1135,1 +1131,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1139,1 +1135,1 @@\n-                            i -> ((($type$)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> ((($type$)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1145,18 +1141,0 @@\n-#else[Halffloat]\n-            withToString(\"$type$[-i * 5]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> ($type$)(-i * 5));\n-            }),\n-            withToString(\"$type$[i * 5]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> ($type$)(i * 5));\n-            }),\n-            withToString(\"$type$[i + 1]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> ((($type$)(i + 1) == 0) ? 1 : ($type$)(i + 1)));\n-            }),\n-            withToString(\"$type$[cornerCaseValue(i)]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> ($type$)longCornerCaseValue(i));\n-            })\n-#end[Halffloat]\n@@ -1217,2 +1195,1 @@\n-#if[Halffloat]\n-            withToString(\"Halffloat[-i * 5]\", (int s) -> {\n+            withToString(\"$ClassType$[-i * 5]\", (int s) -> {\n@@ -1220,1 +1197,1 @@\n-                            i -> Halffloat.valueOf(-i * 5));\n+                            i -> valueOf(-i * 5));\n@@ -1222,1 +1199,1 @@\n-            withToString(\"Halffloat[i * 5]\", (int s) -> {\n+            withToString(\"$ClassType$[i * 5]\", (int s) -> {\n@@ -1224,1 +1201,1 @@\n-                            i -> Halffloat.valueOf(i * 5));\n+                            i -> valueOf(i * 5));\n@@ -1226,1 +1203,1 @@\n-            withToString(\"Halffloat[i + 1]\", (int s) -> {\n+            withToString(\"$ClassType$[i + 1]\", (int s) -> {\n@@ -1228,1 +1205,1 @@\n-                            i -> ((($type$)(i + 1) == 0) ? Halffloat.valueOf(1) : Halffloat.valueOf(i + 1)));\n+                            i -> ((($type$)(i + 1) == 0) ? valueOf(1) : valueOf(i + 1)));\n@@ -1230,18 +1207,1 @@\n-            withToString(\"Halffloat[cornerCaseValue(i)]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> cornerCaseValue(i));\n-            })\n-#else[Halffloat]\n-            withToString(\"$type$[-i * 5]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> ($type$)(-i * 5));\n-            }),\n-            withToString(\"$type$[i * 5]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> ($type$)(i * 5));\n-            }),\n-            withToString(\"$type$[i + 1]\", (int s) -> {\n-                return fill(s * BUFFER_REPS,\n-                            i -> ((($type$)(i + 1) == 0) ? 1 : ($type$)(i + 1)));\n-            }),\n-            withToString(\"$type$[cornerCaseValue(i)]\", (int s) -> {\n+            withToString(\"$ClassType$[cornerCaseValue(i)]\", (int s) -> {\n@@ -1251,1 +1211,0 @@\n-#end[Halffloat]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":34,"deletions":75,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -250,5 +250,1 @@\n-#if[Halffloat]\n-            ms.set(ValueLayout.JAVA_SHORT, i * SPECIES.elementSize() \/ 8 , a[i]);\n-#else[Halffloat]\n-            ms.set(ValueLayout.JAVA_$TYPE$, i * SPECIES.elementSize() \/ 8 , a[i]);\n-#end[Halffloat]\n+            ms.set(ValueLayout.JAVA_$LayoutType$, i * SPECIES.elementSize() \/ 8 , a[i]);\n@@ -260,5 +256,1 @@\n-#if[Halffloat]\n-        return ms.toArray(ValueLayout.JAVA_SHORT);\n-#else[Halffloat]\n-        return ms.toArray(ValueLayout.JAVA_$TYPE$);\n-#end[Halffloat]\n+        return ms.toArray(ValueLayout.JAVA_$LayoutType$);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -729,0 +729,19 @@\n+\n+    @Benchmark\n+    public void blend(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Halffloat128Vector.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -729,0 +729,19 @@\n+\n+    @Benchmark\n+    public void blend(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Halffloat256Vector.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -729,0 +729,19 @@\n+\n+    @Benchmark\n+    public void blend(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Halffloat512Vector.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -729,0 +729,19 @@\n+\n+    @Benchmark\n+    public void blend(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Halffloat64Vector.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -729,0 +729,19 @@\n+\n+    @Benchmark\n+    public void blend(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                av.blend(bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/HalffloatMaxVector.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -474,0 +474,19 @@\n+\n+    @Benchmark\n+    public void blend(Blackhole bh) {\n+        short[] as = fa.apply(size);\n+        short[] bs = fb.apply(size);\n+        short[] rs = fr.apply(size);\n+        boolean[] ms = fm.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < as.length; i++) {\n+                short a = as[i];\n+                short b = bs[i];\n+                boolean m = ms[i % ms.length];\n+                rs[i] = (m ? b : a);\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/HalffloatScalar.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}