{"files":[{"patch":"@@ -328,0 +328,1 @@\n+  const TypeInt*     opr_type     = gvn().type(argument(5))->isa_int();\n@@ -330,1 +331,1 @@\n-  if (opr          == nullptr || !opr->is_con() ||\n+  if (opr          == nullptr || !opr->is_con() || !opr_type->is_con() ||\n@@ -334,1 +335,1 @@\n-    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: opr=%s opr_type = %s vclass=%s etype=%s vlen=%s\",\n@@ -336,0 +337,1 @@\n+                    NodeClassNames[argument(5)->Opcode()],\n@@ -343,1 +345,2 @@\n-  if (!elem_type->is_primitive_type()) {\n+  if (!elem_type->is_primitive_type() ||\n+      opr_type->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -256,2 +256,1 @@\n-            } else if (value.basicType != T_SHORT) {\n-                \/\/ FIXME: Support asFloating for short to be Halffloat\n+            } else {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LaneType.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4146,2 +4146,1 @@\n-        \/\/ asFloating() will throw UnsupportedOperationException for the unsupported type short\n-        throw new AssertionError(\"Cannot reach here\");\n+        return (HalffloatVector) asVectorRaw(flt);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5590,1 +5590,1 @@\n-#if[!byteOrShort]\n+#if[!byte]\n@@ -5592,1 +5592,1 @@\n-#else[!byteOrShort]\n+#else[!byte]\n@@ -5595,1 +5595,1 @@\n-#end[!byteOrShort]\n+#end[!byte]\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/gen-src.sh","additions":0,"deletions":0,"binary":false,"changes":0,"status":"modified"},{"patch":"@@ -297,0 +297,17 @@\n+    static Short float16_conversion_adapter(Number in) {\n+        if (in.getClass() == Short.class)\n+            return Float16.float16ToRawShortBits(Float16.valueOf(in.shortValue()));\n+        else if (in.getClass() == Integer.class)\n+            return Float16.float16ToRawShortBits(Float16.valueOf(in.intValue()));\n+        else if (in.getClass() == Long.class)\n+            return Float16.float16ToRawShortBits(Float16.valueOf(in.longValue()));\n+        else if (in.getClass() == Float.class)\n+            return Float16.float16ToRawShortBits(Float16.valueOf(in.floatValue()));\n+        else if (in.getClass() == Double.class)\n+            return Float16.float16ToRawShortBits(Float16.valueOf(in.doubleValue()));\n+        else if (in.getClass() == Byte.class)\n+            return Float16.float16ToRawShortBits(Float16.valueOf(in.byteValue()));\n+        else\n+            throw new IllegalStateException();\n+    }\n+\n@@ -306,2 +323,1 @@\n-        \/\/ Treat halffloat as float.\n-        else if (to == float.class || to == Float16.class)\n+        else if (to == float.class)\n@@ -309,0 +325,2 @@\n+        else if (to == Float16.class)\n+            return (N) -> float16_conversion_adapter(N);\n@@ -381,1 +399,1 @@\n-                v = (Number) Float.float16ToFloat(v.shortValue());\n+                v = (Number) Float16.shortBitsToFloat16(v.shortValue());\n@@ -385,1 +403,1 @@\n-                v = (Number) Float16.valueOf(v.floatValue());\n+                v = (Number) v.shortValue();\n@@ -492,0 +510,1 @@\n+\n@@ -507,1 +526,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorConversionTest.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -332,0 +332,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -335,1 +336,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -339,2 +342,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -366,0 +368,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -369,0 +372,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -370,1 +375,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -376,1 +381,0 @@\n-            int idx = i + j;\n@@ -378,1 +382,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -380,1 +384,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -345,0 +345,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -348,1 +349,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -352,2 +355,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -379,0 +381,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -382,0 +385,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -383,1 +388,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -389,1 +394,0 @@\n-            int idx = i + j;\n@@ -391,1 +395,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -393,1 +397,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -849,1 +853,1 @@\n-            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1161,1 +1165,1 @@\n-        return  Double.doubleToLongBits(e);\n+        return Double.doubleToLongBits(e);\n@@ -1179,1 +1183,1 @@\n-                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> ((double)0.01 + ((double)i \/ (i + 1))));\n@@ -1183,1 +1187,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((double)0.01 + ((double)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -345,0 +345,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -348,1 +349,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -352,2 +355,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -379,0 +381,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -382,0 +385,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -383,1 +388,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -389,1 +394,0 @@\n-            int idx = i + j;\n@@ -391,1 +395,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -393,1 +397,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -849,1 +853,1 @@\n-            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1161,1 +1165,1 @@\n-        return  Double.doubleToLongBits(e);\n+        return Double.doubleToLongBits(e);\n@@ -1179,1 +1183,1 @@\n-                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> ((double)0.01 + ((double)i \/ (i + 1))));\n@@ -1183,1 +1187,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((double)0.01 + ((double)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -345,0 +345,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -348,1 +349,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -352,2 +355,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -379,0 +381,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -382,0 +385,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -383,1 +388,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -389,1 +394,0 @@\n-            int idx = i + j;\n@@ -391,1 +395,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -393,1 +397,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -849,1 +853,1 @@\n-            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1161,1 +1165,1 @@\n-        return  Double.doubleToLongBits(e);\n+        return Double.doubleToLongBits(e);\n@@ -1179,1 +1183,1 @@\n-                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> ((double)0.01 + ((double)i \/ (i + 1))));\n@@ -1183,1 +1187,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((double)0.01 + ((double)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -345,0 +345,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -348,1 +349,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -352,2 +355,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -379,0 +381,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -382,0 +385,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -383,1 +388,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -389,1 +394,0 @@\n-            int idx = i + j;\n@@ -391,1 +395,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -393,1 +397,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -849,1 +853,1 @@\n-            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1161,1 +1165,1 @@\n-        return  Double.doubleToLongBits(e);\n+        return Double.doubleToLongBits(e);\n@@ -1179,1 +1183,1 @@\n-                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> ((double)0.01 + ((double)i \/ (i + 1))));\n@@ -1183,1 +1187,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((double)0.01 + ((double)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -350,0 +350,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -353,1 +354,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -357,2 +360,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -384,0 +386,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -387,0 +390,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -388,1 +393,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -394,1 +399,0 @@\n-            int idx = i + j;\n@@ -396,1 +400,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -398,1 +402,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -854,1 +858,1 @@\n-            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Double.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1166,1 +1170,1 @@\n-        return  Double.doubleToLongBits(e);\n+        return Double.doubleToLongBits(e);\n@@ -1184,1 +1188,1 @@\n-                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> ((double)0.01 + ((double)i \/ (i + 1))));\n@@ -1188,1 +1192,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((double)0.01 + ((double)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -345,0 +345,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -348,1 +349,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -352,2 +355,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -379,0 +381,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -382,0 +385,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -383,1 +388,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -389,1 +394,0 @@\n-            int idx = i + j;\n@@ -391,1 +395,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -393,1 +397,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -849,1 +853,1 @@\n-            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1172,1 +1176,1 @@\n-        return  Float.floatToIntBits(e);\n+        return Float.floatToIntBits(e);\n@@ -1190,1 +1194,1 @@\n-                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> ((float)0.01 + ((float)i \/ (i + 1))));\n@@ -1194,1 +1198,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((float)0.01 + ((float)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -345,0 +345,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -348,1 +349,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -352,2 +355,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -379,0 +381,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -382,0 +385,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -383,1 +388,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -389,1 +394,0 @@\n-            int idx = i + j;\n@@ -391,1 +395,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -393,1 +397,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -849,1 +853,1 @@\n-            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1172,1 +1176,1 @@\n-        return  Float.floatToIntBits(e);\n+        return Float.floatToIntBits(e);\n@@ -1190,1 +1194,1 @@\n-                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> ((float)0.01 + ((float)i \/ (i + 1))));\n@@ -1194,1 +1198,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((float)0.01 + ((float)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -345,0 +345,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -348,1 +349,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -352,2 +355,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -379,0 +381,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -382,0 +385,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -383,1 +388,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -389,1 +394,0 @@\n-            int idx = i + j;\n@@ -391,1 +395,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -393,1 +397,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -849,1 +853,1 @@\n-            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1172,1 +1176,1 @@\n-        return  Float.floatToIntBits(e);\n+        return Float.floatToIntBits(e);\n@@ -1190,1 +1194,1 @@\n-                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> ((float)0.01 + ((float)i \/ (i + 1))));\n@@ -1194,1 +1198,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((float)0.01 + ((float)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -345,0 +345,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -348,1 +349,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -352,2 +355,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -379,0 +381,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -382,0 +385,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -383,1 +388,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -389,1 +394,0 @@\n-            int idx = i + j;\n@@ -391,1 +395,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -393,1 +397,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -849,1 +853,1 @@\n-            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1172,1 +1176,1 @@\n-        return  Float.floatToIntBits(e);\n+        return Float.floatToIntBits(e);\n@@ -1190,1 +1194,1 @@\n-                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> ((float)0.01 + ((float)i \/ (i + 1))));\n@@ -1194,1 +1198,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((float)0.01 + ((float)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -350,0 +350,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -353,1 +354,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -357,2 +360,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -384,0 +386,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -387,0 +390,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -388,1 +393,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -394,1 +399,0 @@\n-            int idx = i + j;\n@@ -396,1 +400,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -398,1 +402,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -854,1 +858,1 @@\n-            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -1177,1 +1181,1 @@\n-        return  Float.floatToIntBits(e);\n+        return Float.floatToIntBits(e);\n@@ -1195,1 +1199,1 @@\n-                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> ((float)0.01 + ((float)i \/ (i + 1))));\n@@ -1199,1 +1203,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : ((float)0.01 + ((float)i \/ (i + 1))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.incubator.vector.Float16;\n+import jdk.incubator.vector.HalffloatVector;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat128VectorLoadStoreTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Halffloat128VectorTests\n+ * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:TieredStopAtLevel=3 Halffloat128VectorTests\n@@ -77,2 +77,2 @@\n-            short ir = Float16.shortToRawShortBits(r[i]);\n-            short ia = Float16.shortToRawShortBits(a[i]);\n+            short ir = r[i];\n+            short ia = a[i];\n@@ -346,0 +346,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -349,1 +350,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -353,2 +356,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -380,0 +382,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -383,0 +386,2 @@\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -384,1 +389,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -390,1 +395,0 @@\n-            int idx = i + j;\n@@ -392,1 +396,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -394,1 +398,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -834,1 +838,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0 ||\n@@ -838,1 +842,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n@@ -848,1 +852,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0 ||\n@@ -852,1 +856,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -863,2 +867,2 @@\n-                Assert.assertTrue(Float16.compare(r[i],\n-                                  mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                                  Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0 ||\n@@ -869,2 +873,2 @@\n-            Assert.assertTrue(Float16.compare(r[i],\n-                              mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0,\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                              Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0,\n@@ -1175,1 +1179,1 @@\n-        return  Float16.shortToShortBits(e);\n+        return e;\n@@ -1191,1 +1195,1 @@\n-            withToString(\"short[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1193,1 +1197,1 @@\n-                            i -> (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1195,1 +1199,1 @@\n-            withToString(\"short[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01f + (i \/ (i + 1))]\", (int s) -> {\n@@ -1197,1 +1201,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1467,8 +1471,8 @@\n-            case 0  -> Float16.MAX_VALUE;\n-            case 1  -> Float16.MIN_VALUE;\n-            case 2  -> Float16.NEGATIVE_INFINITY;\n-            case 3  -> Float16.POSITIVE_INFINITY;\n-            case 4  -> Float16.NaN;\n-            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n-            case 6  -> (short)0.0;\n-            default -> (short)-0.0;\n+            case 0  -> Float16.float16ToRawShortBits(Float16.MAX_VALUE);\n+            case 1  -> Float16.float16ToRawShortBits(Float16.MIN_VALUE);\n+            case 2  -> Float16.float16ToRawShortBits(Float16.NEGATIVE_INFINITY);\n+            case 3  -> Float16.float16ToRawShortBits(Float16.POSITIVE_INFINITY);\n+            case 4  -> Float16.float16ToRawShortBits(Float16.NaN);\n+            case 5  -> Float16.float16ToRawShortBits(Float16.shortBitsToFloat16((short)0x7FFA));\n+            case 6  -> ((short)0.0);\n+            default -> ((short)-0.0);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat128VectorTests.java","additions":35,"deletions":31,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.incubator.vector.Float16;\n+import jdk.incubator.vector.HalffloatVector;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat256VectorLoadStoreTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Halffloat256VectorTests\n+ * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:TieredStopAtLevel=3 Halffloat256VectorTests\n@@ -77,2 +77,2 @@\n-            short ir = Float16.shortToRawShortBits(r[i]);\n-            short ia = Float16.shortToRawShortBits(a[i]);\n+            short ir = r[i];\n+            short ia = a[i];\n@@ -346,0 +346,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -349,1 +350,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -353,2 +356,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -380,0 +382,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -383,0 +386,2 @@\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -384,1 +389,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -390,1 +395,0 @@\n-            int idx = i + j;\n@@ -392,1 +396,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -394,1 +398,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -834,1 +838,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0 ||\n@@ -838,1 +842,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n@@ -848,1 +852,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0 ||\n@@ -852,1 +856,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -863,2 +867,2 @@\n-                Assert.assertTrue(Float16.compare(r[i],\n-                                  mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                                  Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0 ||\n@@ -869,2 +873,2 @@\n-            Assert.assertTrue(Float16.compare(r[i],\n-                              mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0,\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                              Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0,\n@@ -1175,1 +1179,1 @@\n-        return  Float16.shortToShortBits(e);\n+        return e;\n@@ -1191,1 +1195,1 @@\n-            withToString(\"short[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1193,1 +1197,1 @@\n-                            i -> (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1195,1 +1199,1 @@\n-            withToString(\"short[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01f + (i \/ (i + 1))]\", (int s) -> {\n@@ -1197,1 +1201,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1467,8 +1471,8 @@\n-            case 0  -> Float16.MAX_VALUE;\n-            case 1  -> Float16.MIN_VALUE;\n-            case 2  -> Float16.NEGATIVE_INFINITY;\n-            case 3  -> Float16.POSITIVE_INFINITY;\n-            case 4  -> Float16.NaN;\n-            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n-            case 6  -> (short)0.0;\n-            default -> (short)-0.0;\n+            case 0  -> Float16.float16ToRawShortBits(Float16.MAX_VALUE);\n+            case 1  -> Float16.float16ToRawShortBits(Float16.MIN_VALUE);\n+            case 2  -> Float16.float16ToRawShortBits(Float16.NEGATIVE_INFINITY);\n+            case 3  -> Float16.float16ToRawShortBits(Float16.POSITIVE_INFINITY);\n+            case 4  -> Float16.float16ToRawShortBits(Float16.NaN);\n+            case 5  -> Float16.float16ToRawShortBits(Float16.shortBitsToFloat16((short)0x7FFA));\n+            case 6  -> ((short)0.0);\n+            default -> ((short)-0.0);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat256VectorTests.java","additions":35,"deletions":31,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.incubator.vector.Float16;\n+import jdk.incubator.vector.HalffloatVector;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat512VectorLoadStoreTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Halffloat512VectorTests\n+ * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:TieredStopAtLevel=3 Halffloat512VectorTests\n@@ -77,2 +77,2 @@\n-            short ir = Float16.shortToRawShortBits(r[i]);\n-            short ia = Float16.shortToRawShortBits(a[i]);\n+            short ir = r[i];\n+            short ia = a[i];\n@@ -346,0 +346,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -349,1 +350,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -353,2 +356,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -380,0 +382,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -383,0 +386,2 @@\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -384,1 +389,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -390,1 +395,0 @@\n-            int idx = i + j;\n@@ -392,1 +396,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -394,1 +398,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -834,1 +838,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0 ||\n@@ -838,1 +842,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n@@ -848,1 +852,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0 ||\n@@ -852,1 +856,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -863,2 +867,2 @@\n-                Assert.assertTrue(Float16.compare(r[i],\n-                                  mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                                  Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0 ||\n@@ -869,2 +873,2 @@\n-            Assert.assertTrue(Float16.compare(r[i],\n-                              mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0,\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                              Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0,\n@@ -1175,1 +1179,1 @@\n-        return  Float16.shortToShortBits(e);\n+        return e;\n@@ -1191,1 +1195,1 @@\n-            withToString(\"short[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1193,1 +1197,1 @@\n-                            i -> (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1195,1 +1199,1 @@\n-            withToString(\"short[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01f + (i \/ (i + 1))]\", (int s) -> {\n@@ -1197,1 +1201,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1467,8 +1471,8 @@\n-            case 0  -> Float16.MAX_VALUE;\n-            case 1  -> Float16.MIN_VALUE;\n-            case 2  -> Float16.NEGATIVE_INFINITY;\n-            case 3  -> Float16.POSITIVE_INFINITY;\n-            case 4  -> Float16.NaN;\n-            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n-            case 6  -> (short)0.0;\n-            default -> (short)-0.0;\n+            case 0  -> Float16.float16ToRawShortBits(Float16.MAX_VALUE);\n+            case 1  -> Float16.float16ToRawShortBits(Float16.MIN_VALUE);\n+            case 2  -> Float16.float16ToRawShortBits(Float16.NEGATIVE_INFINITY);\n+            case 3  -> Float16.float16ToRawShortBits(Float16.POSITIVE_INFINITY);\n+            case 4  -> Float16.float16ToRawShortBits(Float16.NaN);\n+            case 5  -> Float16.float16ToRawShortBits(Float16.shortBitsToFloat16((short)0x7FFA));\n+            case 6  -> ((short)0.0);\n+            default -> ((short)-0.0);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat512VectorTests.java","additions":35,"deletions":31,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.incubator.vector.Float16;\n+import jdk.incubator.vector.HalffloatVector;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat64VectorLoadStoreTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation Halffloat64VectorTests\n+ * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:TieredStopAtLevel=3 Halffloat64VectorTests\n@@ -77,2 +77,2 @@\n-            short ir = Float16.shortToRawShortBits(r[i]);\n-            short ia = Float16.shortToRawShortBits(a[i]);\n+            short ir = r[i];\n+            short ia = a[i];\n@@ -346,0 +346,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -349,1 +350,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -353,2 +356,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -380,0 +382,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -383,0 +386,2 @@\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -384,1 +389,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -390,1 +395,0 @@\n-            int idx = i + j;\n@@ -392,1 +396,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -394,1 +398,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -834,1 +838,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0 ||\n@@ -838,1 +842,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n@@ -848,1 +852,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0 ||\n@@ -852,1 +856,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -863,2 +867,2 @@\n-                Assert.assertTrue(Float16.compare(r[i],\n-                                  mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                                  Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0 ||\n@@ -869,2 +873,2 @@\n-            Assert.assertTrue(Float16.compare(r[i],\n-                              mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0,\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                              Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0,\n@@ -1175,1 +1179,1 @@\n-        return  Float16.shortToShortBits(e);\n+        return e;\n@@ -1191,1 +1195,1 @@\n-            withToString(\"short[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1193,1 +1197,1 @@\n-                            i -> (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1195,1 +1199,1 @@\n-            withToString(\"short[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01f + (i \/ (i + 1))]\", (int s) -> {\n@@ -1197,1 +1201,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1467,8 +1471,8 @@\n-            case 0  -> Float16.MAX_VALUE;\n-            case 1  -> Float16.MIN_VALUE;\n-            case 2  -> Float16.NEGATIVE_INFINITY;\n-            case 3  -> Float16.POSITIVE_INFINITY;\n-            case 4  -> Float16.NaN;\n-            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n-            case 6  -> (short)0.0;\n-            default -> (short)-0.0;\n+            case 0  -> Float16.float16ToRawShortBits(Float16.MAX_VALUE);\n+            case 1  -> Float16.float16ToRawShortBits(Float16.MIN_VALUE);\n+            case 2  -> Float16.float16ToRawShortBits(Float16.NEGATIVE_INFINITY);\n+            case 3  -> Float16.float16ToRawShortBits(Float16.POSITIVE_INFINITY);\n+            case 4  -> Float16.float16ToRawShortBits(Float16.NaN);\n+            case 5  -> Float16.float16ToRawShortBits(Float16.shortBitsToFloat16((short)0x7FFA));\n+            case 6  -> ((short)0.0);\n+            default -> ((short)-0.0);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat64VectorTests.java","additions":35,"deletions":31,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import jdk.incubator.vector.Float16;\n+import jdk.incubator.vector.HalffloatVector;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/HalffloatMaxVectorLoadStoreTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation HalffloatMaxVectorTests\n+ * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:TieredStopAtLevel=3 HalffloatMaxVectorTests\n@@ -82,2 +82,2 @@\n-            short ir = Float16.shortToRawShortBits(r[i]);\n-            short ia = Float16.shortToRawShortBits(a[i]);\n+            short ir = r[i];\n+            short ia = a[i];\n@@ -351,0 +351,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -354,1 +355,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -358,2 +361,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -385,0 +387,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -388,0 +391,2 @@\n+                    idx = Float16.shortBitsToFloat16(order[i+j]).intValue();\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -389,1 +394,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -395,1 +400,0 @@\n-            int idx = i + j;\n@@ -397,1 +401,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -399,1 +403,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -839,1 +843,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0 ||\n@@ -843,1 +847,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n@@ -853,1 +857,1 @@\n-                Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0 ||\n@@ -857,1 +861,1 @@\n-            Assert.assertTrue(Float16.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]), Float16.shortBitsToFloat16(mathf.apply(a[i], b[i]))) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -868,2 +872,2 @@\n-                Assert.assertTrue(Float16.compare(r[i],\n-                                  mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0 ||\n+                Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                                  Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0 ||\n@@ -874,2 +878,2 @@\n-            Assert.assertTrue(Float16.compare(r[i],\n-                              mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0,\n+            Assert.assertTrue(Float16.compare(Float16.shortBitsToFloat16(r[i]),\n+                              Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()]))) == 0,\n@@ -1180,1 +1184,1 @@\n-        return  Float16.shortToShortBits(e);\n+        return e;\n@@ -1196,1 +1200,1 @@\n-            withToString(\"short[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[0.01 + (i \/ (i + 1))]\", (int s) -> {\n@@ -1198,1 +1202,1 @@\n-                            i -> (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1200,1 +1204,1 @@\n-            withToString(\"short[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+            withToString(\"Float16[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01f + (i \/ (i + 1))]\", (int s) -> {\n@@ -1202,1 +1206,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : (short)0.01 + ((short)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n@@ -1472,8 +1476,8 @@\n-            case 0  -> Float16.MAX_VALUE;\n-            case 1  -> Float16.MIN_VALUE;\n-            case 2  -> Float16.NEGATIVE_INFINITY;\n-            case 3  -> Float16.POSITIVE_INFINITY;\n-            case 4  -> Float16.NaN;\n-            case 5  -> Double.longBitsToDouble(0x7FF123456789ABCDL);\n-            case 6  -> (short)0.0;\n-            default -> (short)-0.0;\n+            case 0  -> Float16.float16ToRawShortBits(Float16.MAX_VALUE);\n+            case 1  -> Float16.float16ToRawShortBits(Float16.MIN_VALUE);\n+            case 2  -> Float16.float16ToRawShortBits(Float16.NEGATIVE_INFINITY);\n+            case 3  -> Float16.float16ToRawShortBits(Float16.POSITIVE_INFINITY);\n+            case 4  -> Float16.float16ToRawShortBits(Float16.NaN);\n+            case 5  -> Float16.float16ToRawShortBits(Float16.shortBitsToFloat16((short)0x7FFA));\n+            case 6  -> ((short)0.0);\n+            default -> ((short)-0.0);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/HalffloatMaxVectorTests.java","additions":35,"deletions":31,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -332,0 +332,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -335,1 +336,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -339,2 +342,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -366,0 +368,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -369,0 +372,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -370,1 +375,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -376,1 +381,0 @@\n-            int idx = i + j;\n@@ -378,1 +382,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -380,1 +384,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -284,0 +284,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -287,1 +288,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -291,2 +294,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -318,0 +320,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -321,0 +324,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -322,1 +327,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -328,1 +333,0 @@\n-            int idx = i + j;\n@@ -330,1 +334,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -332,1 +336,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -284,0 +284,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -287,1 +288,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -291,2 +294,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -318,0 +320,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -321,0 +324,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -322,1 +327,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -328,1 +333,0 @@\n-            int idx = i + j;\n@@ -330,1 +334,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -332,1 +336,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -284,0 +284,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -287,1 +288,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -291,2 +294,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -318,0 +320,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -321,0 +324,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -322,1 +327,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -328,1 +333,0 @@\n-            int idx = i + j;\n@@ -330,1 +334,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -332,1 +336,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -284,0 +284,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -287,1 +288,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -291,2 +294,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -318,0 +320,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -321,0 +324,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -322,1 +327,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -328,1 +333,0 @@\n-            int idx = i + j;\n@@ -330,1 +334,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -332,1 +336,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -289,0 +289,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -292,1 +293,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -296,2 +299,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -323,0 +325,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -326,0 +329,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -327,1 +332,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -333,1 +338,0 @@\n-            int idx = i + j;\n@@ -335,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -337,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -330,1 +331,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -334,2 +337,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -361,0 +363,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -364,0 +367,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -365,1 +370,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -371,1 +376,0 @@\n-            int idx = i + j;\n@@ -373,1 +377,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +379,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -332,0 +332,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -335,1 +336,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -339,2 +342,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -366,0 +368,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -369,0 +372,2 @@\n+                    idx = (int)order[i+j];\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -370,1 +375,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -376,1 +381,0 @@\n-            int idx = i + j;\n@@ -378,1 +382,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -380,1 +384,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+    fpkind=\"\"\n@@ -95,0 +96,1 @@\n+        fpkind=FP32\n@@ -104,0 +106,1 @@\n+        fpkind=FP64\n@@ -115,0 +118,1 @@\n+        fpkind=FP16\n@@ -123,1 +127,1 @@\n-    args=\"$args -K$kind -K$Type -DBoxtype=$Boxtype -DWideboxtype=$Wideboxtype -DMaxValue=$MaxValue -DMinValue=$MinValue\"\n+    args=\"$args -K$fpkind -K$kind -K$Type -DBoxtype=$Boxtype -DWideboxtype=$Wideboxtype -DMaxValue=$MaxValue -DMinValue=$MinValue\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-tests.sh","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:-TieredCompilation $vectorteststype$\n+ * @run testng\/othervm\/timeout=300 -ea -esa -Xbatch -XX:{#if[FP16]?TieredStopAtLevel=3:-TieredCompilation} $vectorteststype$\n@@ -118,2 +118,2 @@\n-            $bitstype$ ir = $Wideboxtype$.$type$ToRaw$Bitstype$Bits(r[i]);\n-            $bitstype$ ia = $Wideboxtype$.$type$ToRaw$Bitstype$Bits(a[i]);\n+            $bitstype$ ir = {#if[FP16]?r[i]:$Wideboxtype$.$type$ToRaw$Bitstype$Bits(r[i])};\n+            $bitstype$ ia = {#if[FP16]?a[i]:$Wideboxtype$.$type$ToRaw$Bitstype$Bits(a[i])};\n@@ -428,0 +428,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -431,1 +432,3 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    idx = {#if[FP16]?Float16.shortBitsToFloat16(order[i+j]).intValue():(int)order[i+j]};\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n+                    Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -435,2 +438,1 @@\n-            int idx = i + j;\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index]);\n@@ -462,0 +464,1 @@\n+        int idx = 0, wrapped_index = 0;\n@@ -465,0 +468,2 @@\n+                    idx = {#if[FP16]?Float16.shortBitsToFloat16(order[i+j]).intValue():(int)order[i+j]};\n+                    wrapped_index = Integer.remainderUnsigned(idx, vector_len);\n@@ -466,1 +471,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i+j], a[i+wrapped_index]);\n@@ -472,1 +477,0 @@\n-            int idx = i + j;\n@@ -474,1 +478,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], a[i+wrapped_index], \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -476,1 +480,1 @@\n-                Assert.assertEquals(r[i+j], ($type$)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i+j], ($type$)0, \"at index #\" + idx + \", input = \" + a[i+wrapped_index] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -936,1 +940,1 @@\n-                Assert.assertTrue($Wideboxtype$.compare(r[i], mathf.apply(a[i])) == 0 ||\n+                Assert.assertTrue($Wideboxtype$.compare({#if[FP16]?Float16.shortBitsToFloat16(r[i]):r[i]}, {#if[FP16]?Float16.shortBitsToFloat16(mathf.apply(a[i])):mathf.apply(a[i])}) == 0 ||\n@@ -940,1 +944,1 @@\n-            Assert.assertTrue($Wideboxtype$.compare(r[i], mathf.apply(a[i])) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n+            Assert.assertTrue($Wideboxtype$.compare({#if[FP16]?Float16.shortBitsToFloat16(r[i]):r[i]}, {#if[FP16]?Float16.shortBitsToFloat16(mathf.apply(a[i])):mathf.apply(a[i])}) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i]));\n@@ -950,1 +954,1 @@\n-                Assert.assertTrue($Wideboxtype$.compare(r[i], mathf.apply(a[i], b[i])) == 0 ||\n+                Assert.assertTrue($Wideboxtype$.compare({#if[FP16]?Float16.shortBitsToFloat16(r[i]):r[i]}, {#if[FP16]?Float16.shortBitsToFloat16(mathf.apply(a[i], b[i])):mathf.apply(a[i], b[i])}) == 0 ||\n@@ -954,1 +958,1 @@\n-            Assert.assertTrue($Wideboxtype$.compare(r[i], mathf.apply(a[i], b[i])) == 0, \"at index #\" + i + \", input1 = \" + a[i] + \", input2 = \" + b[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n+            Assert.assertTrue($Wideboxtype$.compare({#if[FP16]?Float16.shortBitsToFloat16(r[i]):r[i]}, {#if[FP16]?Float16.shortBitsToFloat16(mathf.apply(a[i], b[i])):mathf.apply(a[i], b[i])}) == 0, \"at index #\" + i + \", input = \" + a[i] + \", actual = \" + r[i] + \", expected = \" + mathf.apply(a[i], b[i]));\n@@ -965,2 +969,2 @@\n-                Assert.assertTrue($Wideboxtype$.compare(r[i],\n-                                  mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0 ||\n+                Assert.assertTrue($Wideboxtype$.compare({#if[FP16]?Float16.shortBitsToFloat16(r[i]):r[i]},\n+                                  {#if[FP16]?Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])):mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])}) == 0 ||\n@@ -971,2 +975,2 @@\n-            Assert.assertTrue($Wideboxtype$.compare(r[i],\n-                              mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])) == 0,\n+            Assert.assertTrue($Wideboxtype$.compare({#if[FP16]?Float16.shortBitsToFloat16(r[i]):r[i]},\n+                              {#if[FP16]?Float16.shortBitsToFloat16(mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])):mathf.apply(a[i], b[(i \/ SPECIES.length()) * SPECIES.length()])}) == 0,\n@@ -1320,1 +1324,5 @@\n-        return {#if[FP]? $Wideboxtype$.$type$To$Bitstype$Bits(e): e};\n+#if[FP16]\n+        return e;\n+#else[FP16]\n+        return {#if[FP]?$Wideboxtype$.$type$To$Bitstype$Bits(e): e};\n+#end[FP16]\n@@ -1337,0 +1345,10 @@\n+#if[FP16]\n+            withToString(\"$Wideboxtype$[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n+            }),\n+            withToString(\"$Wideboxtype$[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01f + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : Float.floatToFloat16((0.01f + ((float)i \/ (i + 1)))));\n+            }),\n+#else[FP16]\n@@ -1339,1 +1357,1 @@\n-                            i -> ($type$)0.01 + (($type$)i \/ (i + 1)));\n+                            i -> (($type$)0.01 + (($type$)i \/ (i + 1))));\n@@ -1343,1 +1361,1 @@\n-                            i -> i % 17 == 0 ? cornerCaseValue(i) : ($type$)0.01 + (($type$)i \/ (i + 1)));\n+                            i -> (i % 17 == 0) ? cornerCaseValue(i) : (($type$)0.01 + (($type$)i \/ (i + 1))));\n@@ -1345,0 +1363,1 @@\n+#end[FP16]\n@@ -1734,0 +1753,12 @@\n+#if[FP16]\n+        return switch(i % 8) {\n+            case 0  -> Float16.float16ToRawShortBits($Wideboxtype$.MAX_VALUE);\n+            case 1  -> Float16.float16ToRawShortBits($Wideboxtype$.MIN_VALUE);\n+            case 2  -> Float16.float16ToRawShortBits($Wideboxtype$.NEGATIVE_INFINITY);\n+            case 3  -> Float16.float16ToRawShortBits($Wideboxtype$.POSITIVE_INFINITY);\n+            case 4  -> Float16.float16ToRawShortBits($Wideboxtype$.NaN);\n+            case 5  -> Float16.float16ToRawShortBits(Float16.shortBitsToFloat16((short)0x7FFA));\n+            case 6  -> (($type$)0.0);\n+            default -> (($type$)-0.0);\n+        };\n+#else[FP16]\n@@ -1748,0 +1779,1 @@\n+#end[FP16]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":53,"deletions":21,"binary":false,"changes":74,"status":"modified"}]}