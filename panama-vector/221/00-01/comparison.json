{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i,1)));\n+        ss = fillInt(size, i -> RAND.nextInt(Math.max(i,1)));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,1 @@\n-        s = fillInt(size, i -> RANDOM.nextInt(SPECIES.length()));\n+        s = fillInt(size, i -> RAND.nextInt(SPECIES.length()));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-            l |= ((long) input[(i << 2) + 1] << 8);\n+            l |= ((int) input[(i << 2) + 1] << 8);\n@@ -70,1 +70,1 @@\n-            l |= ((long) input[(i << 2) + 2] << 16);\n+            l |= ((int) input[(i << 2) + 2] << 16);\n@@ -72,1 +72,1 @@\n-            l |= ((long) input[(i << 2) + 3] << 24);\n+            l |= ((int) input[(i << 2) + 3] << 24);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/bigdata\/VectorDistance.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -368,1 +368,1 @@\n-            result[i] += Character.digit(str.charAt(2 * i + 1), 16);\n+            result[i] += (byte) Character.digit(str.charAt(2 * i + 1), 16);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/ChaChaBench.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,1 +171,1 @@\n-            dst[3] += (v1 & 0x3F) << 2;\n+            dst[3] += (byte) ((v1 & 0x3F) << 2);\n@@ -179,1 +179,1 @@\n-            dst[6] += (v2 & 0xF) << 4;\n+            dst[6] += (byte) ((v2 & 0xF) << 4);\n@@ -187,1 +187,1 @@\n-            dst[9] += (v3 & 0x3) << 6;\n+            dst[9] += (byte) ((v3 & 0x3) << 6);\n@@ -269,3 +269,3 @@\n-            keyBytes[4] &= 252;\n-            keyBytes[8] &= 252;\n-            keyBytes[12] &= 252;\n+            keyBytes[4] &= (byte) 252;\n+            keyBytes[8] &= (byte) 252;\n+            keyBytes[12] &= (byte) 252;\n@@ -517,1 +517,1 @@\n-            result[i] = (byte) Character.digit(str.charAt(2 * i), 16);\n+            result[i] = (byte) (Character.digit(str.charAt(2 * i), 16));\n@@ -519,1 +519,1 @@\n-            result[i] += Character.digit(str.charAt(2 * i + 1), 16);\n+            result[i] += (byte) (Character.digit(str.charAt(2 * i + 1), 16));\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/Poly1305Bench.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}