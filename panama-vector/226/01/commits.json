[{"commit":{"message":"Merge branch 'master' of http:\/\/github.com\/openjdk\/panama-vector into merge_master"},"files":[{"filename":".jcheck\/conf"}],"sha":"ab709b56f2d90081844aa4a5df1a3927deacc37d"},{"commit":{"message":"8345798: Update VectorAPI Benchmarks\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"09c25ccdf48a433afe95a5efd4ad6d7cc535fbf0"},{"commit":{"message":"Merge"},"files":[{"filename":".jcheck\/conf"}],"sha":"227055df4fe477588e8884864d012bcd294cb0d4"},{"commit":{"message":"8343779: Cannot build Vector API JMH benchmarks on vectorIntrinsics branch\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/bigdata\/VectorDistance.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/ChaChaBench.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/Poly1305Bench.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/AbstractVectorBenchmark.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/PopulationCount.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/SortVector.java"}],"sha":"6c94580f060a64d4f130807dff3e1d0ca1f6f8a9"},{"commit":{"message":"Merge"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"}],"sha":"a92e325bc348a44f761cb335dbab8bdf7be93b72"},{"commit":{"message":"Merge"},"files":[{"filename":".jcheck\/conf"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/ChaChaBench.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/Poly1305Bench.java"}],"sha":"cac0842ac230fcf5fb7ee7c097c3dcd830d2448f"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: jbhateja"},"files":[{"filename":".jcheck\/conf"}],"sha":"b044e652cc662a127b435d8a88ed522de306a450"},{"commit":{"message":"Add @since 19 tags\n\nReviewed-by: sviswanathan"},"files":[],"sha":"2aade73adeabdf6a924136b17fd96ccc95c1d160"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: jbhateja"},"files":[],"sha":"2225f6ad0ac940236ff2ecb8d6a6d2e1a94940cd"},{"commit":{"message":"8285013: AArch64: [vectorapi] Backend support of ExpandV for SVE2\n\nReviewed-by: njian"},"files":[],"sha":"35d92ab6b57cf633d6fcd97afb57f31ae890fb0d"},{"commit":{"message":"Removing extra newlines and spaces from generated test cases\n\nReviewed-by: jbhateja"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Broadcast.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Rearrange.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Ternary-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-footer.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-footer.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"40ac81496a4d22da694af7dd747de78b9ff42cae"},{"commit":{"message":"Compress\/expand op spec.\n\nReviewed-by: jbhateja"},"files":[],"sha":"e6d37c444274a51db4eb7c44791dd4348170079c"},{"commit":{"message":"8284459: Add x86 back-end implementation for LEADING and TRAILING ZEROS COUNT operations\n\nReviewed-by: eliu, sviswanathan"},"files":[],"sha":"f0b78ab233493a62be41192ac62419cf551954fa"},{"commit":{"message":"Use Integer\/Long compress and expand.\n\nReviewed-by: sviswanathan"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Shift-Const-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Shift-Masked-Const-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Shift-Const-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Shift-Masked-Const-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"01a1477dc2c4e43843be3efce3cf8e170fca5ebf"},{"commit":{"message":"Remove `byte[]` and `ByteBuffer` access methods.\n\nReviewed-by: sviswanathan"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/ChaChaBench.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/Poly1305Bench.java"}],"sha":"97858e054b12347c3e146f0dd5104f235b7b6307"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: eliu, jbhateja"},"files":[],"sha":"63d4dbca3b8be7b71a4fd43a369a3b46e90c9a58"},{"commit":{"message":"8284197: AArch64: Add backend implementations for vector reverse bits\/bytes\n\nCo-authored-by: Xiaohong Gong <xgong@openjdk.org>\nReviewed-by: njian"},"files":[],"sha":"a7d36c52c8fd1757caf6416d7809445034322a4d"},{"commit":{"message":"Fix benchmark compilation failiure\n\nReviewed-by: mcimadamore"},"files":[],"sha":"55705f6653d8847c92de9104b9951f0f3631018c"},{"commit":{"message":"8283598: [vectorapi] Add new vector operation for compress and expand bits\n\nReviewed-by: psandoz, sviswanathan"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"5fe7992818440bb3a16ac11f6f019ea020ab025f"},{"commit":{"message":"8283709: Add x86 back-end implementation for bit BIT_COUNT operation\n\nReviewed-by: xgong, sviswanathan"},"files":[],"sha":"1bc4187c72ed945c7f7bd62c95624477ea52b76d"},{"commit":{"message":"8283413: Add C2 mid-end and x86 back-end implementation for bit REVERSE and REVERSE_BYTES operation\n\nReviewed-by: xgong, sviswanathan, eliu"},"files":[],"sha":"86ac3730c1cebf016f7396645df265bfa46d9795"},{"commit":{"message":"8283749: AArch64: Add the backend support for vector bitcount\n\nReviewed-by: njian"},"files":[],"sha":"fa5c1577a813b605c1bab4f34dec8b6a89ca802f"},{"commit":{"message":"Load store memory segment\n\nReviewed-by: mcimadamore"},"files":[],"sha":"0e89b38a9a98a0dcf4039bc5ee4cb995cd244fba"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan"},"files":[],"sha":"a1fd3fe930945adf51680d3e56607751bb79b902"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-CompressExpand.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-op.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"f876f035baa4340c2935912f86789dadc11bccd5"},{"commit":{"message":"8283316: Add new vector operation REVERSE_BYTES\n\nReviewed-by: eliu, jbhateja"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"b98dbd7d8bbffd3f46fbedb98d0cb29a93ad7950"},{"commit":{"message":"8283145: [vector] Add the compiler IR and aarch64 support for count leading and trailing zeros\n\nReviewed-by: njian, jbhateja"},"files":[],"sha":"03e4da702273ac4c54d1a0badf970ec1c625cffe"},{"commit":{"message":"8282942: [vector] Trivial code style updates\n\nReviewed-by: psandoz"},"files":[],"sha":"701e6babf14b5abb991c14847c27c65b8ff1555e"},{"commit":{"message":"8282915: [vectorapi] Add new vector operation for reverse bits operation\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"f4b5db3929be5fa3df8a7432d18c8e491516cecd"},{"commit":{"message":"8282389: Add new vector operations to count leading and trailing zeros.\n\nReviewed-by: jbhateja, psandoz"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"801f1fde51e55b6371ece0e3696cf1d4a2c333ce"},{"commit":{"message":"Fix compilation error in perf reduction tests\n\nReviewed-by: xgong"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-Masked-op-func.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-op-func.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"}],"sha":"d829111a909e7f6a5942201ad299875551080ded"},{"commit":{"message":"Post mainline merge fixes\n\nReviewed-by: sviswanathan"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"499efe6343780d3083099875c8a3d3d2f68534e3"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan"},"files":[{"filename":".jcheck\/conf"}],"sha":"5ed820253f1ea82c7996d76d5e9c9592f24161b7"},{"commit":{"message":"8281562:[vectorapi] Add support for popcount operation\n\nReviewed-by: sviswanathan, psandoz"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"0ad2b19f75e6bbaac5f38f60290dfc92d2118bc0"},{"commit":{"message":"8278468: AArch64: [vectorapi] SVE backend support for CompressM and CompressV(B\/H)\n\nReviewed-by: njian"},"files":[],"sha":"bf5e00d9fd20a17106e7b3615c22b5cbe20b031d"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: jbhateja"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"}],"sha":"36d6356d32e0fd08da2780f2bd6042cf5db50eb4"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: njian"},"files":[],"sha":"a4f3250e54e2b43382f26e1d6fb49c644ff22f9a"},{"commit":{"message":"Update asmtest.out.h due to incorrect merge\n\nReviewed-by: eliu"},"files":[],"sha":"fd3666a35293ad86090758600cae2c9665af99ca"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics+compress\n\nReviewed-by: jbhateja"},"files":[],"sha":"e16d2f5341f631b9e782ea84af09219d637d5b60"},{"commit":{"message":"Compress JavaDoc.\n\nReviewed-by: sviswanathan"},"files":[],"sha":"b4bb8f23acd554a68a0b5e8a35f936cb1bc17b93"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics\n\nReviewed-by: eliu"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"083d5eb81bc8fe701fde4802f47b7fab784095e7"},{"commit":{"message":"8276083: Incremental patch to further optimize new compress\/expand APIs over X86\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-CompressExpand.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-CompressExpand.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"821635cfc31c2839656c0a337a8531fbd00334e3"},{"commit":{"message":"8275231: Intrinsify VectorMask.compress API for X86 target.\n\nReviewed-by: sviswanathan"},"files":[],"sha":"3702867909f03ece29f54130bf7896447ec23312"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics\n\nReviewed-by: sviswanathan"},"files":[],"sha":"f4fd460587588d3cc0828a8fef109cfe6a296b03"},{"commit":{"message":"8275255: AArch64: Backend support for compress VectorAPI\n\nReviewed-by: njian"},"files":[],"sha":"fc8c5f7ac68361d39954da522591faab7399dc1f"},{"commit":{"message":"8274975: Add micro benchmark: ALIBABA selective store use case\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/bigdata\/SelectiveStore.java"}],"sha":"8f0fc0d21542ae41b92472101823a2a70732953a"},{"commit":{"message":"8274971: Add VectorMask.compress API\n\nReviewed-by: psandoz, jbhateja"},"files":[],"sha":"bb6cccbc4e7936bee4b0169a88c35b631d57b6fa"},{"commit":{"message":"8274889: Intrinsify Vector.expand\/compress APIs for X86\n\nCo-authored-by: Jatin Bhateja <jbhateja@openjdk.org>\nReviewed-by: eliu"},"files":[],"sha":"3fa2895333dba5175801430346e5fe8bb4a51d56"},{"commit":{"message":"8274837: Intel backend support for compress VectorAPI\n\nReviewed-by: sviswanathan"},"files":[],"sha":"4c89f839dd74dece4147c2d1d717dc0b31458084"},{"commit":{"message":"8274839: Intrinsic support for compress & expand VectorAPI\n\nReviewed-by: sviswanathan"},"files":[],"sha":"63a9fe9d6d1982d3fe759c856ab417c3ff33bc55"},{"commit":{"message":"8274936: Remove compress(m, v) and expand(m, v) flavor from Vector API\n\nReviewed-by: psandoz"},"files":[],"sha":"9028dc4876bbbb16f7242b7bee27942641e65899"},{"commit":{"message":"8274664: Add support for compress\/expand api methods\n\nReviewed-by: psandoz"},"files":[],"sha":"be08abfa2c258d829b4f1cb4f492d560af83919e"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan"},"files":[],"sha":"b744b39d42a8fa73b59456d860c117788d442d5c"},{"commit":{"message":"Update perf tests.\n\nReviewed-by: sviswanathan"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"}],"sha":"83aaf148db60ce528f9154cbf931f690bccced88"},{"commit":{"message":"Make method package private.\n\nReviewed-by: sviswanathan"},"files":[],"sha":"63daf7f4298090b37baa2188912d161bac660e50"},{"commit":{"message":"8275025: Unable to inline vectmask convert\n\nReviewed-by: jbhateja"},"files":[],"sha":"d67afb1e27ec0b93a3cce0f82e5090280194cdf5"},{"commit":{"message":"8274569: X86 backend related incorrectness issues in legacy store mask patterns\n\nCo-authored-by: Jatin Bhateja <jbhateja@openjdk.org>\nCo-authored-by: Jie Fu <jiefu@openjdk.org>\nReviewed-by: sviswanathan"},"files":[],"sha":"a7c26670cec4823ee793ce837da41689a5540254"},{"commit":{"message":"Fix typo in VectorMask.laneIsSet\n\nReviewed-by: sviswanathan"},"files":[],"sha":"bcd3d49ec20f61b637f63039089d56913607550d"},{"commit":{"message":"8274631: assert(false) failed: bad AD file with -XX:UseKNLSetting\n\nReviewed-by: psandoz"},"files":[],"sha":"cec4dad4d28b714b48c6f60f0f60186b07c3cceb"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan, eliu, jbhateja"},"files":[],"sha":"79dc88db8b3c8fb522771c34cfc95ab828a0ae2a"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics+mask\n\nReviewed-by: eliu, jbhateja"},"files":[],"sha":"bfea1ea814d3bb0af5c2be0232254907d323f12b"},{"commit":{"message":"8274342: AArch64: [vector] AArch64 SVE backend code cleanup\n\nReviewed-by: njian"},"files":[],"sha":"17b430956541ddc07f0d549ca98ac0e65f0b2a81"},{"commit":{"message":"8274331: [Vector API] Build failure on MacOS after JDK-8273949\n\nReviewed-by: njian, jbhateja"},"files":[],"sha":"9ba59cc36e87cf2eeeac94f98f4a4b0854a8fc59"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics\n\nReviewed-by: eliu, sviswanathan"},"files":[],"sha":"b4d6d5c4d55647977e60212c61fcd5e90d08e59f"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: jbhateja"},"files":[],"sha":"98a7a541285059a47df94d115a060cf911dfa91c"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: eliu"},"files":[],"sha":"4e318de158f001f0aae31e1547488cf12034b281"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: jbhateja, psandoz"},"files":[],"sha":"beed6675d95fe71ee30f6e2adc4f708b57fa55fd"},{"commit":{"message":"8263532: C2: Improve vector box elimination for Phi nodes\n\nReviewed-by: psandoz"},"files":[],"sha":"dca538de7effc2e8594f680a1c0322c7177f8ed5"},{"commit":{"message":"8274236: Cleanups related to X86 masking support.\n\nReviewed-by: sviswanathan"},"files":[],"sha":"a6189c78453ffce1690b015691cad22490fc7a2d"},{"commit":{"message":"8273949: Intrinsic creation for VectorMask.toLong operation.\n\nReviewed-by: psandoz, sviswanathan, eliu"},"files":[],"sha":"0e7348dd9b81a7310357c600131fb99bd9f74ccd"},{"commit":{"message":"8273264: AArch64: [vector] Add missing rules for VectorMaskCast\n\nCo-authored-by: Ningsheng Jian <njian@openjdk.org>\nReviewed-by: njian, psandoz"},"files":[],"sha":"b44662abce715e9a669144ecd515b3cef04ae923"},{"commit":{"message":"8273406: Optimize various masked vector operations for AVX512 target.\n\nReviewed-by: sviswanathan"},"files":[],"sha":"ce330956ee226efd263306ed6beba3c722e375f5"},{"commit":{"message":"8273367: [Vector API] Fix a regression of rearrange intrinsic after JDK-8272479\n\nReviewed-by: njian"},"files":[],"sha":"d65687c0fb62f4b64897b928fdf22dc97e985bc9"},{"commit":{"message":"8273371: [Vector API] Crash in Assembler::evpermd when code-gen for masked rearrange operation on AVX512\n\nReviewed-by: jbhateja"},"files":[],"sha":"4d66ded490265bd4165d0256dfd5c7540f8074ac"},{"commit":{"message":"8273205: [Vector API] Crash in C2_MacroAssembler::vprotate_var after JDK-8271366\n\nReviewed-by: njian, jbhateja"},"files":[],"sha":"31e21b60c08e30f54d7c0d7ee7369f3a28dd6eae"},{"commit":{"message":"8272745: VectorAPI: Vector\/Mask type cleanup for masked vector intrinsics\n\nCo-authored-by: Paul Sandoz <psandoz@openjdk.org>\nReviewed-by: psandoz"},"files":[],"sha":"859a75726d6b0b818cf45ba82eb6c3b42d7252cd"},{"commit":{"message":"8273159: Remove LoadVectorMaskNode\/StoreVectorMaskNode\n\nCo-authored-by: Xiaohong Gong <xgong@openjdk.org>\nCo-authored-by: Ningsheng Jian <njian@openjdk.org>\nReviewed-by: eliu, sviswanathan"},"files":[],"sha":"5aa3a72ceb8f65b4643b8dca6024d7779fee381a"},{"commit":{"message":"8272869: AArch64: Mark masked rearrange operation as unsupported\n\nReviewed-by: njian"},"files":[],"sha":"ef694cdcc36be03ef386244656993fdf59b25cda"},{"commit":{"message":"8272971: Intrinsification of VectorMask.cast operation for all compatible vector species\n\nReviewed-by: sviswanathan, psandoz"},"files":[],"sha":"d5eb1297b9181b77a9d06952186e59cae7a3cd79"},{"commit":{"message":"8270349: Initial X86 backend support for optimizing masking operations on AVX512 targets.\n\nReviewed-by: sviswanathan"},"files":[],"sha":"60aa8ca6dc0b3f1a3ee517db167f9660012858cd"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics\n\nCo-authored-by: Ningsheng Jian <njian@openjdk.org>"},"files":[],"sha":"c1950c63ae2081427b2438b9658435a1a853697f"},{"commit":{"message":"Merge panama-vector:master\n\nCo-authored-by: Ningsheng Jian <njian@openjdk.org>"},"files":[],"sha":"3b21593199cbb11cb4019ef53c831fd087a0ba50"},{"commit":{"message":"Optimize mem barriers for ByteBuffer cases\n\nReviewed-by: psandoz, vlivanov"},"files":[],"sha":"18eda964a6eaaabd060492e371b1475ec2e9531b"},{"commit":{"message":"8272100: VectorAPI: modify existing implementation of masked neg and not operation.\n\nReviewed-by: xgong"},"files":[],"sha":"bf5918da2a40a6966ba4a6473a6a487ee9035ad0"},{"commit":{"message":"8272479: Java API and IR changes for masked rearrange operation\n\nReviewed-by: psandoz"},"files":[],"sha":"50ae3b8c7e849532a459a9ab6d2ee794925784bf"},{"commit":{"message":"8271539: Add masking support for load\/store from\/into byte array\/buffer\n\nReviewed-by: psandoz"},"files":[],"sha":"16d2b994dafa8583070326b276775180b40d45c3"},{"commit":{"message":"8271313: AArch64: SVE backend support for masking operations with predicate feature\n\nCo-authored-by: Eric Liu <eliu@openjdk.org>\nCo-authored-by: Ningsheng Jian <njian@openjdk.org>\nReviewed-by: njian"},"files":[],"sha":"163c1d53d6de77f140f1f905c94f7123f6d2be8d"},{"commit":{"message":"8271273: Java API and IR changes for masked compare operation\n\nReviewed-by: xgong"},"files":[],"sha":"df552629eea3a01d201bc3f2d2b26549936e13a2"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics\n\nReviewed-by: sviswanathan"},"files":[],"sha":"6d7b4c24ba249843376e41eca6cee78480353cce"},{"commit":{"message":"8271009: AArch64: Wrap duplicated SVE instructions into a single method\n\nReviewed-by: njian, xgong"},"files":[],"sha":"a0f9d863f12c1a29e65d2d145fc2520b8ffcec41"},{"commit":{"message":"8271005: AArch64: Add SVE codegen for VectorMask reduction nodes\n\nReviewed-by: njian, eliu"},"files":[],"sha":"4839fdf6a3f27467447edc46326bc874d8a7404f"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: xgong, sviswanathan"},"files":[],"sha":"b849706796ec50618fa01766b33a404337e74887"},{"commit":{"message":"8269264: Some more cleanups for Vector API SVE support\n\nReviewed-by: xgong"},"files":[],"sha":"e8e72698338e2d434adf9ec49c749be93dcee083"},{"commit":{"message":"8270264: Add the masking support for vector lanewiseShift\n\nReviewed-by: jbhateja, psandoz"},"files":[],"sha":"8c686a6980909f2ec4c73cd86bdb812d368f41a8"},{"commit":{"message":"8266287: Basic mask IR implementation for the Vector API masking feature support\n\nReviewed-by: sviswanathan"},"files":[],"sha":"e53ea26ec99b92490874f51a6393f84f260ca94f"},{"commit":{"message":"8269282: Add masking support for vector gather_load\/scatter_store\n\nReviewed-by: jbhateja"},"files":[],"sha":"1da8f2e294c732140f894ee83dca78570f3a5767"},{"commit":{"message":"8269343: Masked vector arithmetic intrinsics failed to be inlined randomly\n\nReviewed-by: psandoz"},"files":[],"sha":"14075353a7ed48e9f2de2e0beb59d8731ddc1daf"},{"commit":{"message":"8267368: Add masking support for reduction vector intrinsics\n\nReviewed-by: psandoz"},"files":[],"sha":"aff1e3d900057dd5dea21c73aac70b4e1c2de1c2"},{"commit":{"message":"8268154: Add masking support for vector load intrinsics\n\nReviewed-by: jbhateja, psandoz"},"files":[],"sha":"1c913048a9150e8e8d43844349157a10199311be"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics"},"files":[],"sha":"14ed85b5136fbebe75b2f150892486b0319bee6c"},{"commit":{"message":"Merge panama-vector:master\n\nCo-authored-by: Ningsheng Jian <njian@openjdk.org>"},"files":[],"sha":"d353bd93982689302a33e2008c33c5465f2cc001"},{"commit":{"message":"8244490: [vector] Move Vector API micro benchmarks under test\/micro\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/BENCHMARKS.md"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/bigdata\/BooleanArrayCheck.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/bigdata\/ValueRangeCheckAndCastL2I.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/bigdata\/VectorDistance.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/ChaChaBench.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/crypto\/Poly1305Bench.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/AbstractVectorBenchmark.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Merge.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/PopulationCount.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/SortVector.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/SumOfUnsignedBytes.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/utf8\/DecodeBench.java"}],"sha":"86a8d382758915aa2ef44cfff8902b2f3dea0d7e"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics\n\nReviewed-by: njian"},"files":[],"sha":"440827537d36818d6a9ec55cc9841a98ef09c78e"},{"commit":{"message":"8266286: Add LoadVectorGather and StoreVectorScatter's partial version\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nReviewed-by: xgong, njian"},"files":[],"sha":"73e78a3700b5586e6252e779885d9a1eab9ba645"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan"},"files":[],"sha":"5f57f548f1c4e5f46c702fda87db6dc282a9f1d1"},{"commit":{"message":"8267224: Vector API SVE codegen cleanups\n\nReviewed-by: xgong"},"files":[],"sha":"34ca5490d876b7263e6e602c41d4df4d0c2c26b7"},{"commit":{"message":"8266775: Add VectorLoadConst node implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nReviewed-by: xgong, njian"},"files":[],"sha":"0b2f1aac54a740a22f1d422f3e4e8615bbc1cdc2"},{"commit":{"message":"Correct specification for length-invariance.\n\nReviewed-by: sviswanathan"},"files":[],"sha":"106b69abb150ed3fb1a43791cbd45c5e2e623744"},{"commit":{"message":"Merge panama-vector:master"},"files":[],"sha":"a47e184cfd90963695f90a6d6ceff485ef624fb3"},{"commit":{"message":"8265916: Add StoreVectorScatter nodes implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nReviewed-by: xgong"},"files":[],"sha":"3c6bc2e03eb9fcb43ec68391422d13c9e9f06352"},{"commit":{"message":"8265482: [vector] loading\/storing byte vector from\/to boolean[]\n\nReviewed-by: sviswanathan"},"files":[],"sha":"ab4fa585052c709fe1ba56135306e1b35042a77b"},{"commit":{"message":"8265817: Add LoadVectorGather nodes implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: Ai Jiaming <ajiaming1@huawei.com>\nReviewed-by: xgong"},"files":[],"sha":"37df2b12d84c57071d1f17258f139eb8b0acdf4d"},{"commit":{"message":"8265312: [vector] Add unsigned comparison operators\n\nReviewed-by: sviswanathan, jbhateja"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"}],"sha":"128f9438ef53460b56a05b6f4d40c7d8f3b76eb9"},{"commit":{"message":"8265321: Add Rearrange nodes implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nReviewed-by: njian"},"files":[],"sha":"6d5c8bd41f40d24c588caaeee4c72475f392e477"},{"commit":{"message":"Refine elem to array elem check. (#69)\n"},"files":[],"sha":"a6e9e0318a94db1f4b9e652e8b85d7e825e85fd0"},{"commit":{"message":"8265196: Add LoadShuffle nodes implementation for Arm SVE\n\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nReviewed-by: njian, xgong"},"files":[],"sha":"3e8f093843d6197c7a89b5aa1be7a2c11f5732c3"},{"commit":{"message":"8265107: Fix effect problems\n\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nReviewed-by: xgong"},"files":[],"sha":"dfba4c482415db0eeea0ed134c7c99acc9eb6804"},{"commit":{"message":"8264579: Use NEON vector load\/store to access small size memory\n\nReviewed-by: xgong"},"files":[],"sha":"1d819fd60bb937189002dc52d446f7907044bb8f"},{"commit":{"message":"8264882: Build failure without C2 on x86_32\/aarch64\/ppc\/s390\/arm\n\nReviewed-by: psandoz"},"files":[],"sha":"0091ec328b9964edcf8c722b1351feb1f464f078"},{"commit":{"message":"8263424: Extend vector size support for SVE\n\nReviewed-by: xgong, whuang"},"files":[],"sha":"ccc85efab859dfba313b7c54e6b9d1e389983d16"},{"commit":{"message":"8264820: jdk\/incubator\/vector\/FloatMaxVectorTests.java fails on AVX512 due to incorrect vector_exp_float512 entry\n\nReviewed-by: sviswanathan"},"files":[],"sha":"c1e71cca24b158f8c7c9126efd45a903b3e37e33"},{"commit":{"message":"8266621: Add masking support for unary\/ternary vector intrinsics\n\nReviewed-by: psandoz, vlivanov"},"files":[],"sha":"24b52623ac073069a08943be5319178e4404be60"},{"commit":{"message":"8264563: Add masked vector intrinsics for binary\/store operations\n\nCo-authored-by: Ningsheng Jian <njian@openjdk.org>\nReviewed-by: jbhateja, sviswanathan, vlivanov, whuang"},"files":[],"sha":"3739cc849cac3c3237f6eaf3ff1f06f8befd80b5"},{"commit":{"message":"8265109: SVE predicate register allocation support for vectorIntrinsics\n\nReviewed-by: sviswanathan"},"files":[],"sha":"e6b7ba22d1334a1697bc88edc09fd5441ba02e1a"},{"commit":{"message":"Merge panama-vector:vectorIntrinsics"},"files":[],"sha":"ea999efe02e4524c349961eeab32acc27fc331fa"},{"commit":{"message":"Merge panama-vector:master"},"files":[],"sha":"d6eb1b8ba45ee37dc985050322857418bdd8a864"},{"commit":{"message":"8264469: Add Insert float nodes implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nReviewed-by: njian, xgong"},"files":[],"sha":"b6a5e165014af6941150222929d25b0d9d664cab"},{"commit":{"message":"8264811: Fix inconsistence of m4 and ad files after merge\n\nReviewed-by: xgong"},"files":[],"sha":"cc3f2ea537e0e5d27fc70ee87ce84fdf71683b40"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: njian"},"files":[],"sha":"a1be5e4422d6657ae326d2b8b8e801fa8af4b08b"},{"commit":{"message":"8264427: StubRoutines::vectorizedMismatch is missing for C1 compiler after JDK-8264321\n\nReviewed-by: sviswanathan"},"files":[],"sha":"8bfdcaaedd2b385e45880d162bd22acfbe02fa0d"},{"commit":{"message":"8264153: Add Insert integer nodes implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nReviewed-by: njian"},"files":[],"sha":"84bc8373a300c431e304f81b360e3f904ddfa678"},{"commit":{"message":"8264321: Create a separate library for x86 Intel SVML assembly intrinsics\n\nCo-authored-by: Magnus Ihse Bursie <ihse@openjdk.org>\nCo-authored-by: Sandhya Viswanathan <sviswanathan@openjdk.org>\nReviewed-by: psandoz"},"files":[],"sha":"dc12612cd174299f39504cbd00a8bc600fcb5903"},{"commit":{"message":"8263930: Add \"VectorTest\" implementation for Arm SVE\n\nReviewed-by: njian, whuang"},"files":[],"sha":"3569e39e057bd4889689b3a671512a4a33cced77"},{"commit":{"message":"8263644: Add Extract float nodes implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nReviewed-by: xgong, njian"},"files":[],"sha":"47334c5b96163c7abe13d38f551d4df4454e93cf"},{"commit":{"message":"8263417: Add Extract integer nodes implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nReviewed-by: njian"},"files":[],"sha":"864a62c1f32f023c9cb6f0b23c05a47bc00f96fd"},{"commit":{"message":"8263149: Adding benchmarks for Vector API\n\nReviewed-by: sviswanathan, njian, xgong"},"files":[],"sha":"5165981487afa3cb510d8fc7d5c4b935fc948bc8"},{"commit":{"message":"8263348: Add cast nodes from double precision float types to interger types implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nReviewed-by: njian"},"files":[],"sha":"a9c9f75d9bd2add8329552ff0d33aeadec4a1872"},{"commit":{"message":"8263001: Add cast nodes from single precision float types to interger types implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nReviewed-by: njian"},"files":[],"sha":"78176f7f1e5a50fed5dc2c620b0dfa5202ab755f"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan"},"files":[],"sha":"c00a1dcfc58b04c46c263364b2fd60ab7f54c88a"},{"commit":{"message":"8262275: Math vector stubs are not called for double64 vectors\n\nReviewed-by: sviswanathan"},"files":[],"sha":"0b1b15e24cd21bfd075eb867bffb74d26dbb2a63"},{"commit":{"message":"8262498: More than 50% performance degradation of pow operator due to call with svml intrinsic after JDK-8261267\n\nReviewed-by: sviswanathan"},"files":[],"sha":"0523be610045207c8380bbcbb970db37b06ef593"},{"commit":{"message":"8262492: Add cast nodes between float types implementation for Arm SVE\n\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nReviewed-by: njian"},"files":[],"sha":"97fef5c054d32edded3c54cddf8d7c23c64b0005"},{"commit":{"message":"8261108: Add cast nodes from integer types to float types implementation for Arm SVE\n\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nCo-authored-by: Ai Jiaming <aijiaming1@huawei.com>\nCo-authored-by: Wang Huang <whuang@openjdk.org>\nReviewed-by: njian"},"files":[],"sha":"721b5f5bca70841dad463b5c83d20af97fdebdd1"},{"commit":{"message":"8261394: [vector] Crash with \"assert(Matcher::vector_size_supported(elem_bt, length)) failed: length in range\"\n\nReviewed-by: njian, jiefu, sviswanathan"},"files":[],"sha":"e901c4d96fc61ba73098ee796efa144c89ea409b"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan, xgong"},"files":[],"sha":"335be9fa72a8277deb3c97261c03772341135cf0"},{"commit":{"message":"8261267: Math vector stubs are not called from jitted code\n\nReviewed-by: vlivanov"},"files":[],"sha":"3e06fc00bce50aca5c9afdc26c9d10497550a944"},{"commit":{"message":"8259536: Add cast nodes between interger types implementation for Arm SVE\n\nReviewed-by: njian, xgong"},"files":[],"sha":"f53ee78bd0521b0dd03f9423da2f3f6dcad9436d"},{"commit":{"message":"8260668: vectorIntrinsics windows build problem\n\nReviewed-by: ihse, psandoz"},"files":[],"sha":"6381e8d373e4d1322dbf861274e73b6089c12c9a"},{"commit":{"message":"Merge panama-vector:master"},"files":[],"sha":"fcc36ceb0408b60d683ed8628cf03dd828b7b706"},{"commit":{"message":"8259604: Change the implementation of loadV_partial and storeV_partial in Aarch64-SVE backend\n\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nReviewed-by: njian"},"files":[],"sha":"ca9fad515d06dd0dd0c36b39d37258b4eff3b4e5"},{"commit":{"message":"8258072: Add Reinterpret nodes implementation for Arm SVE\n\nCo-authored-by: He Xuejin <hexuejin2@huawei.com>\nReviewed-by: njian, xgong"},"files":[],"sha":"2db19a41a3ee61d1b9db17776a14a3bf5703e43c"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan"},"files":[],"sha":"31344a9f001cca8ec4e4bbfd7443ba00fea10d53"},{"commit":{"message":"Add utf8 decoding benchmarks\n\nReviewed-by: sviswanathan"},"files":[],"sha":"c1cc01ac90ed55986b88d09317191cd726ce1671"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: sviswanathan"},"files":[],"sha":"5c0623498e0e64c5c602a8de3b0ed891b788d2fe"},{"commit":{"message":"Load\/store short vectors from\/to char[]\n\nReviewed-by: sviswanathan"},"files":[],"sha":"5a4fd789fc30c0928faf880a385d57906e51b11f"},{"commit":{"message":"Conversion test refactor\n\nReviewed-by: sviswanathan"},"files":[],"sha":"f8e7d220b77e5bdffd425029d99f7de9066bc169"},{"commit":{"message":"Conversion test refactor\n\nReviewed-by: sviswanathan"},"files":[],"sha":"576f2227d3fed3dc8304e2cbb0db9861f20c0546"},{"commit":{"message":"8253585: Add basic vector mask implementation for Arm SVE\n\nReviewed-by: njian, whuang"},"files":[],"sha":"1db3735064499dbfe637479d6c6bba71c8f08af8"},{"commit":{"message":"8255437: [vector] jdk\/incubator\/vector\/SelectFromByteMaxVectorTests fails with Arm SVE 2048-bits\n\nReviewed-by: psandoz"},"files":[],"sha":"bccabae35d3f61a41e2b3d98a904485723766850"},{"commit":{"message":"8255280: Fix trivial merge conflicts for JDK-8253211\n\nReviewed-by: psandoz"},"files":[],"sha":"c802deb599d4ac466e3c658687eb255d0c09444e"},{"commit":{"message":"8254826: Add reduction nodes implementation for Arm SVE\n\nCo-authored-by: Huang Wang <wanghuang3@huawei.com>\nCo-authored-by: Xuejin He <hexuejin2@huawei.com>\nReviewed-by: njian"},"files":[],"sha":"86eae24bdd230763c33f22fa5bbd69bd926d262a"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: psandoz"},"files":[],"sha":"f4a565351a92e6b07f7bf96b4746841303087684"},{"commit":{"message":"8252943: [vector] jdk\/incubator\/vector\/PreferredSpeciesTest.java fails with \"expected [S_256_BIT] but found [S_128_BIT]\"\n\nReviewed-by: psandoz"},"files":[],"sha":"44489877a94d8fa4b554d1a7720279db9c08024b"},{"commit":{"message":"Merge panama-vector:vector-unstable\n\nReviewed-by: psandoz"},"files":[],"sha":"f5353e6650d9c6ecf2930e549f7aec379e167f21"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: psandoz"},"files":[],"sha":"64583f26de5e2f4287ee3f9e4032e3496bdff522"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: psandoz"},"files":[],"sha":"82755606b23e7dedfcadd57709a28b11e3453704"},{"commit":{"message":"Merge panama-vector:vector-unstable\n\nReviewed-by: psandoz"},"files":[],"sha":"40c2915ae39950a61d9cd0299e075daa20df45b4"},{"commit":{"message":"Merge panama-vector:master\n\nReviewed-by: psandoz"},"files":[],"sha":"fb1b6534d7302b9f1b58ce9b139272f4a8ab23b8"},{"commit":{"message":"Update conf\n\nMake same as for in branch `vectorIntrinsics`"},"files":[],"sha":"58742cc5ebbfa4ec91293ece5b2fd3f8c1caedd3"},{"commit":{"message":"8253680: Vector API VectorMask and VectorSpecies tests for coverage\n\nReviewed-by: njian, psandoz"},"files":[],"sha":"3dc682bb1bf5de81b7be8530c4a1360306f62c62"},{"commit":{"message":"8253623: Fastdebug JVM crashes with Vector API when PrintAssembly is turned on\n\nCo-authored-by: Huang Wang <wanghuang3@huawei.com>\nReviewed-by: vlivanov, psandoz"},"files":[],"sha":"15a2e2d7cff313f0ecf8e52655b898485e8d58de"},{"commit":{"message":"8253211: Make sure jvm does not crash with Arm SVE and Vector API\n\nReviewed-by: vlivanov"},"files":[],"sha":"e27a8781a4fa83c4574f1d04dbe02c74d29fcc79"},{"commit":{"message":"Merge panama-vector:vector-unstable\n\nReviewed-by: psandoz"},"files":[],"sha":"925350ff4d41bdc2fab90f0a3e0bf74e9ed36c54"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"95cd392cf34469db4d5dbc8fbca28008797225cf"},{"commit":{"message":"Update jconf\n\nRemove the merge check"},"files":[{"filename":".jcheck\/conf"}],"sha":"d6763b5408ed7fa7ea035b20ab78758130972768"},{"commit":{"message":"8253319: jcheck merge check is too strict\n\nReviewed-by: njian"},"files":[{"filename":".jcheck\/conf"}],"sha":"c0254370a23f3f472f8cf1d5140bca1eb0824eaa"},{"commit":{"message":"8252964: [vectorIntrinsics] jdk\/incubator\/vector\/Short64VectorTests.java crashes on AVX512 machines\n\nReviewed-by: sviswanathan"},"files":[],"sha":"1af35c357066743935bd3f48ce3610a41761f89a"},{"commit":{"message":"Manual merge with vector-unstable"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"30aeaded5a4c01960c5149c0c1f8ad118e3656fd"},{"commit":{"message":"[vector] Remove extra whitespace to remove git warning message"},"files":[],"sha":"8290e82f05b0a12f56858e5e980697049d3fddbd"},{"commit":{"message":"[vector] Cleanup: Remove extra whitespace to pass jcheck and unused file"},"files":[],"sha":"105bcaf9e2a5309122a2f1553bf35b4cad45a30c"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"4b9a45d63809ec6a1cde096a953c48b2edb9c249"},{"commit":{"message":"Update aarch64-asmtest.py and regenerate code for assembler_aarch64.cpp\n\nResolve manual merge conflicts on assembler-aarch64.cpp\n"},"files":[],"sha":"1fc2e430e610dd8c80144d48e697ef4691f0a5cf"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"2a4162f0a25efc9aa7e89b1c153529739ba71050"},{"commit":{"message":"[vector] Merge fix"},"files":[],"sha":"6915b843bbef4fc8dd3eddf2bf6584b4c32e35ed"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"6e718b03c806dc0f717e36547c1325cd4992ab5a"},{"commit":{"message":"Address CSR review comments\n\nReviewed-by: sviswanathan"},"files":[],"sha":"e4300023828060e4b8f602b4965b6549bc080377"},{"commit":{"message":"Minor cleanups in shared code"},"files":[],"sha":"9f1a28d58b8b29dedfc36869e18b9271cde35340"},{"commit":{"message":"More cleanups and minor bug fixes in hotspot shared code"},"files":[],"sha":"c16c1e20227b4ca50c7fdbb6c2bb2635fb5cff36"},{"commit":{"message":"Miscellaneous cleanups in hotspot and build code"},"files":[],"sha":"a1050c389c3e764319f45c7f8fdf434a09aa6a80"},{"commit":{"message":"Miscellaneous cleanups in hotspot code"},"files":[],"sha":"8b103664aa9c71f80b5e3e37a1c667669c2a96a4"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"7e6d8e49f78d2fc1e4d9c52adff88c95976bd78c"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"accf1885c60382a7fc3b21bab45981ad45be5295"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"fe0785eed59fa0c2238a6c4217d2be1a21212c31"},{"commit":{"message":"[vector] Address review comments for AArch64 backend changes\n\n1. Seperate newly added NEON instructions to a new ad file\n   aarch64_neon.ad\n2. Add assembler tests for NEON instructions. Trailing spaces\n   in the python script are also removed.\n"},"files":[],"sha":"86cd6e6b4114c2f543a4bb576f77db1e2d8c6e23"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"d923961cbe29167cde397b1455f81575cc108233"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"7b86fc0e41d91f985f62a64877d5d90779d06541"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"6b941c6b9298fed79109a5aea2340f5580639e55"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"098b4da400c54b5f8d4ae87b0aaef95a20a200cb"},{"commit":{"message":"[vector] Undo workaround fix\n\nReviewed-by: psandoz"},"files":[],"sha":"4a2c26e806b909219f32c28e1522d45a5fbd0b1f"},{"commit":{"message":"8244866: Build of vectorIntrinsics branch fails on Windows\n\nReviewed-by: psandoz, sviswanathan"},"files":[],"sha":"3c5bf0492e72247e740075d90325d38c5cdeaa91"},{"commit":{"message":"Fix build failure in vector-unstable branch on AArch64\n\nReviewed-by: sviswanathan"},"files":[],"sha":"5275e4e493c0d3b838036b66fdf34ed84dce0c8f"},{"commit":{"message":"Merge from vectorIntrinsics"},"files":[],"sha":"e0eb2226e58100edb61af4998adffeb49db8db6c"},{"commit":{"message":"Remove AArch64 SVE related code"},"files":[],"sha":"3c9ca520fb11a51c5079618e8bf4c3b5e19a5a7e"},{"commit":{"message":"Fix code conflict in AArch64 backend with jdk master which is introduced by code rebase"},"files":[],"sha":"078f7853e527b466841959bddd2eec5bd760c1cc"},{"commit":{"message":"Move all vector operations which are not in jdk master to\n\nRefactor vector operations in aarch64 backend\naarch64_neon_ad.m4 and place generated instructions to the end of aarch64.ad.\nThis change is to minimize conflict when merging Vector API to jdk\nmaster. In reduction operations, identify scalar\/vector input as isrc\/\nvsrc to make code clear. Jdk master also uses such naming style.\n"},"files":[],"sha":"b1764e55f37978aaf814931844a2189ae60386aa"},{"commit":{"message":"[vector] Fix 32 bit build issue due to merge"},"files":[],"sha":"38d2418c5c68f38a64a811978a474a72d077c919"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"cf1fc27c68dc42cf1b6b01d6b59a7196b9aaabf9"},{"commit":{"message":"Remove benchmarks and perf templates"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"f09aeac3b8bd47af67f043c7b3c80840e6079c15"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"5c42a2f7cbd57fd3836fc904735db584007da907"},{"commit":{"message":"Fix build and jtreg test failures introduced by code merge\n\nAArch64: Fix jtreg failures about vector shift\n"},"files":[],"sha":"ea8ac23c5597da927dd80772f3a69e333789fcb0"},{"commit":{"message":"Fix 32 bit build issue after cleanup"},"files":[],"sha":"b2ebea0cfab343ff569196d4b202b5b327c18e8d"},{"commit":{"message":"Fix x86.ad todos"},"files":[],"sha":"90753732e0ee34957d1b1c5eec39da853cab55b0"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"f44c494d959846088b193c6611593fc799338197"},{"commit":{"message":"8242018: Build of vectorIntrinsics branch fails on Windows and Linux"},"files":[],"sha":"ed7c4cb7fe2a8a3340dbbe7293a1aeb49adf222b"},{"commit":{"message":"Different cleanups in backend C2 support"},"files":[],"sha":"204979bfba50ce98fa1426fa7cd925eea6991d28"},{"commit":{"message":"Fix build failure on aarch64"},"files":[],"sha":"92a5992a90620c8e8a2c3df2cfd88dc46452db03"},{"commit":{"message":"Miscellaneous cleanups in hotspot"},"files":[],"sha":"e4ac417e350b862afceac07cfff9c2f5214018aa"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"4ba2b77b21083172628135071960aae8f9cddc8b"},{"commit":{"message":"Remove leftovers from SVML removal"},"files":[],"sha":"64ec464b62a153913fb2fa30d63b0a117aa736e5"},{"commit":{"message":"Remove SVML stubs and their support"},"files":[],"sha":"e3605d102051fa796f63c3341c5a4439c3caf293"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"dab7d8fd65f70fc29bf382a5929873ab2d004737"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"eecf1671ffbb28926f9d29dcb3ace6ebcc1328e4"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"8ec328c2e48b1b82e343d50a5098354f0b34e7a2"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"a79f65fa72ddbabc49ab4ad20d03728e3338dda6"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"c11310151d340d37d6c67f850dfadc5999b09bd0"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"aa671711cb3ce9cb04585422ece392d38823ddc0"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"2c8bd63463670cd6e0ed00051b6b9d0c886795ee"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"dc3bcb1f5bcd883d62608996aee527adb644a7fa"},{"commit":{"message":"[vector][generic-opers] Folding following groups of instruction patters using generic operands\n\n  Shift-logical left\/right,\n  Shift-arithmetic right,\n  Vector-[CAST\/COMPARE\/FMA\/NOT\/TEST]\n  Vector-Store-Mask\n"},"files":[],"sha":"1eb7f6232435c1eaad317bfa4be6540f03cf40ed"},{"commit":{"message":"Generic Operands Support for MinMax and Reduction nodes"},"files":[],"sha":"e62270debf595d42caa3ded8072b31717b3156ff"},{"commit":{"message":"Generic Operands Support for Reduction nodes"},"files":[],"sha":"b95faf8b918558623b4f28caf8320a5bb41b7653"},{"commit":{"message":"[vector][generic-opers-infra] Code re-factoring to perform generic operand resolution to a concrete operand right after matcher\n\n         invocation during register mask initialization.\n"},"files":[],"sha":"3a7dbb727ae2ef1df9ce1f800f4df280a3b62e4b"},{"commit":{"message":"[vector][generic-opers] Converting instruction patterns for vector convert and compare operation to use generic operands"},"files":[],"sha":"a5a6dd024be52e94263690d2bec6f94fbd4b2c7b"},{"commit":{"message":"Generic Operands Support for VectorLoad"},"files":[],"sha":"28c0b0074736f2c710fbedfa7207f763ce0f7dc8"},{"commit":{"message":"Generic Operands Support for VectorBlend"},"files":[],"sha":"6c8c344b858bb6cc082a4007922da2dd5557337f"},{"commit":{"message":"[vector][generic-opers] Changes for build failures on non-X86 targets and some code-refactoring\n\nReviewed-by: sandhya.viswanathan@intel.com\n"},"files":[],"sha":"98a0182ad90cdb88b3917333d98fec0fdff4086a"},{"commit":{"message":"Infrastructure changes for generic vector operands, includes following:-\n\n         1) Creation of new generic operands vecG and legVecG along\n            with the chain instructions MoveLegVecG2VecG and MoveVecG2LegVecG.\n         2) Post-selection stage for its resolution to concrete vector operands.\n         3) All the changes are currently enabled only for X86 target.\nReviewed-by: sandhya.viswanathan@intel.com\n"},"files":[],"sha":"a38430c14836eb23297dc57c6bc96e8c1be46696"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"43c392945a4e749200015c0fe493dfd641c756c2"},{"commit":{"message":"8252498: [vectorIntrinsics] Update the jmh version for vector benchmark\n\nReviewed-by: psandoz"},"files":[],"sha":"9c2c5f8a085d28b0c69dea4671afee5798318fb2"},{"commit":{"message":"[vector] Tests for VectorShape, VectorShuffle, VectorSpecies and AbstractSpecies\n\nReviewed-by: psandoz"},"files":[],"sha":"ad2b2bf67e27b3904a7bb0f27bb7621387c514f0"},{"commit":{"message":"[vector] Tests for toDoubleArray, reinterpretAsBytes, reduceLanesToLong\n\nReviewed-by: psandoz"},"files":[],"sha":"477d8c5a2be8d674e44f8addcca55ce6bb778438"},{"commit":{"message":"8251853: [vector] Sigsegv in GraphKit::dead_locals_are_killed()"},"files":[],"sha":"c57245621567ede7d49fc779357e18d2a870628d"},{"commit":{"message":"Improve late inlining for virtual calls"},"files":[],"sha":"f58af126e29da151fc2a20338203a135dfe421e3"},{"commit":{"message":"Minor cleanups in incremental inlining"},"files":[],"sha":"272b57e3b53c5df5dd655decfb93ac9f4ae5efc9"},{"commit":{"message":"8251315: [vector] assert(_callee == __null) failed: repeated inlining attempt"},"files":[],"sha":"676907d06eaba153ff72f24414475cf84c3367bd"},{"commit":{"message":"8250740: Crash in Compile::inline_incrementally_virtual_one()"},"files":[],"sha":"f2eea0e8ca04aa23dab1f3c79ea81c48891b0c31"},{"commit":{"message":"Address CSR review comments\n\nReviewed-by: sviswanathan"},"files":[],"sha":"f9e11e597128fae17ef8924722eca6212325820d"},{"commit":{"message":"Restore lazy cleanup during incremental inlining. Fix incremental inlining of virtual calls"},"files":[],"sha":"aa7a13d9865011e22bfd569912fd558eedf65d36"},{"commit":{"message":"[vector] Miscellaneous tests to complete coverage of X-Vector.java\n\nReviewed-by: psandoz"},"files":[],"sha":"be6928c6bc3c76fac5e740c8bc6485ff4ae6ab4c"},{"commit":{"message":"Include header for definition of java_lang_Class\n\nReviewed-by: njian"},"files":[],"sha":"f5e7ee779eed3d733f22624aecd31b6f2494ce38"},{"commit":{"message":"[vector] Miscellaneous cleanup"},"files":[],"sha":"0039b823c4ae0e31dbdc4dc7b36f21b0ac82cc1e"},{"commit":{"message":"[vector] Merge cleanup"},"files":[],"sha":"03582177a87c41f8256afe76c2a890cc2a359acb"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"967f9e57000d1e8563f8895e3d829b0af0190c5a"},{"commit":{"message":"Correct typos in doc of full service ops\n\nReviewed-by: chegar, sviswanathan"},"files":[],"sha":"e8fbac4cc73d49d462e8ea4d3614a452037c0b4a"},{"commit":{"message":"Identify vector intrinsics to be investigated for Graal\n\nReviewed-by: srukmannagar"},"files":[],"sha":"5766bad6c830e72fef10dbe0f983f65cbbf224f3"},{"commit":{"message":"[vector] Address review comments for AArch64 backend changes\n\n1. Seperate newly added NEON instructions to a new ad file\n   aarch64_neon.ad\n2. Add assembler tests for NEON instructions. Trailing spaces\n   in the python script are also removed.\n"},"files":[],"sha":"435db060d0756c8af5db86071acedd254eb8e049"},{"commit":{"message":"Enable call devirtualization during post-parse phase"},"files":[],"sha":"c5500b4b74fb1cb074ff4ba42e24622b7b46fc30"},{"commit":{"message":"Fix a typo LibraryCallKit::inline_vector_broadcast_coerced()"},"files":[],"sha":"2ff56e2cc57845c12b48d927dff16ba9edfe0750"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"5814e7bf553d44c3a54d403b1af050e6b24a30c0"},{"commit":{"message":"8244867: 2 vector api tests crash with assert(is_reference_type(basic_type())) failed: wrong type\n\nAdding safety checks to prevent intrinsification if class arguments of non-primitive types are uninitialized.\n\nReviewed-by: psandoz, sviswanathan"},"files":[],"sha":"c14d3aa402da72547e3576be10962c8b55daac08"},{"commit":{"message":"[vector] Fixed a typo"},"files":[],"sha":"bfd0c3a77ea869b369afabdaa6f9d429b362af47"},{"commit":{"message":"Rename reduction test methods\n\nReviewed-by: sviswanathan"},"files":[],"sha":"cc9dd509b8390aa108fb95096465f0b5a3e684b9"},{"commit":{"message":"[vector] Miscellaneous tests to complete coverage of X-VectorBits.java plus fix\n\nReviewed-by: psandoz"},"files":[],"sha":"8d9008a049e97cd1f71c9fa5af379a97357d2ca2"},{"commit":{"message":"[vector] fma, sqrt, pow and broadcast long tests for coverage\n\nReviewed-by: psandoz"},"files":[],"sha":"fb861777e6351c2fa86d2ee3c7d49b92b3657941"},{"commit":{"message":"[vector] Additional tests for comparison ops to bring the coverage up\n\nReviewed-by: psandoz"},"files":[],"sha":"624bff58c5745a0e7824ffe8a51482b9aebb446b"},{"commit":{"message":"[vector] Additional tests for ternary ops to bring the coverage up\n\nReviewed-by: psandoz"},"files":[],"sha":"4c18205efc230ab0f5faca3d43f977ac8b69ece2"},{"commit":{"message":"[vector] Additional tests for binary\/unary ops to bring the coverage up\n\nReviewed-by: psandoz"},"files":[],"sha":"79f2edce6e997f4b9e418dee72b38baff45b2592"},{"commit":{"message":"Correct license headers\n\nReviewed-by: jlaskey"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"e029eba741c0246d259952b7defe9d223a105ac3"},{"commit":{"message":"[vector] Undo workaround fix\n\nReviewed-by: psandoz"},"files":[],"sha":"18c099d898e7bc544eca46f911532f2f3f9b2646"},{"commit":{"message":"8244866: Build of vectorIntrinsics branch fails on Windows\n\nReviewed-by: psandoz, sviswanathan"},"files":[],"sha":"377a5b4a0d6b05929161aa0752610c5905f5f4c6"},{"commit":{"message":"Add vector test to tier3 test group\n\nReviewed-by: epavlova"},"files":[],"sha":"707c4b642301859fe5e605b1b690b3ea39938a34"},{"commit":{"message":"Remove AArch64 SVE related code"},"files":[],"sha":"a1ab203584559f78027c5247c3f8c7c5b9375d3f"},{"commit":{"message":"Fix code conflict in AArch64 backend with jdk master which is introduced by code rebase"},"files":[],"sha":"ed192c0289d09615106b552bf9b665112f821a1c"},{"commit":{"message":"Move all vector operations which are not in jdk master to\n\nRefactor vector operations in aarch64 backend\naarch64_neon_ad.m4 and place generated instructions to the end of aarch64.ad.\nThis change is to minimize conflict when merging Vector API to jdk\nmaster. In reduction operations, identify scalar\/vector input as isrc\/\nvsrc to make code clear. Jdk master also uses such naming style.\n"},"files":[],"sha":"e22103ff3bf378e66c5baf56972742f04b64710c"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"c3d32353ee12b4ea4031baf6da950b5194967d7f"},{"commit":{"message":"Ensure stores to RO buffer throw exception\n\nReviewed-by: sviswanathan"},"files":[],"sha":"e7d2b4fb7ad81c846b7836dec3256de9660a9a28"},{"commit":{"message":"Unify load\/store code and add test\n\nReviewed-by: sviswanathan"},"files":[],"sha":"411eb95145bbf1ddb5aebfc0a6f9cd8f94ea4f1c"},{"commit":{"message":"And note on hardware platform limitations\n\nReviewed-by: sviswanathan"},"files":[],"sha":"b06a1938037084988746b5f33b5b6605155e85b2"},{"commit":{"message":"Remove Vector.fromValues\n\nReviewed-by: sviswanathan"},"files":[],"sha":"308d157396be046a9b1aa507aa3e12bae8010b4e"},{"commit":{"message":"Remove VLENGTH term from package doc\n\nReviewed-by: jrose, sviswanathan"},"files":[],"sha":"91cc6486a257eed86e530652614512be89207cc4"},{"commit":{"message":"Fix AArch64 build failures\n\nReviewed-by: psandoz"},"files":[],"sha":"96816570f60f3f1a9c1055d5934897706a9f49c0"},{"commit":{"message":"Clarify the equivalent behavior of Vector.reduceLanesToLong\n\nReviewed-by: jrose"},"files":[],"sha":"c57e7318e349be151b7bf434c3085f5943c7df4a"},{"commit":{"message":"Improve full-service specification\n\nReviewed-by: jrose"},"files":[],"sha":"aa2faa1119348f36fbd2d2a5a63b1b6b3b8d4702"},{"commit":{"message":"Add ref to AArch64\n\nReviewed-by: yzhang"},"files":[],"sha":"7310462dc9e7f8111fdd0bdd30e9fd494d838091"},{"commit":{"message":"Strengthen ETYPE and VLENGTH specification\n\nReviewed-by: jrose"},"files":[],"sha":"14bce7fa8fcf212063d2a0bcc14cbbc53043c69a"},{"commit":{"message":"Remove VectorSpecies.arrayType and hide genericElementType\n\nReviewed-by: sviswanathan"},"files":[],"sha":"40e50352bb9831859f1d235084576bdfa695059d"},{"commit":{"message":"Replace IllegalArgumentE with UnsupportedOE for zero arg methods,\n\nReviewed-by: sviswanathan"},"files":[],"sha":"d06f4403d5c1a6f4965835243c4c12717ad0fc93"},{"commit":{"message":"Consistently use method name eq and reference equals\n\nReviewed-by: sviswanathan"},"files":[],"sha":"474669931e5e47e78d2f31633538c9789fa9b14f"},{"commit":{"message":"Reduce to\/fromByteArray methods accepting ByteOrder\n\nReviewed-by: sviswanathan"},"files":[],"sha":"a44f8315a4cb9265302fb207925c56c22d328eef"},{"commit":{"message":"8244269: vector api tests crashed with \"assert(is_location()) failed: must be\"\n\nReviewed-by: psandoz"},"files":[],"sha":"0072a552b5e077442eb319147b1c0a3166fec08c"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"36343ab4a1fb0d5d52738ae24e2e4c115db61eab"},{"commit":{"message":"Make generation of perf tests optional"},"files":[],"sha":"fcaeee8281fea0bb2aebaa1ffd0a525cf10ed97f"},{"commit":{"message":"Add back div op integral vectors, with tests"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"0ad6cea7cfe76a36294eafb7d7a1ca3a81e3eaa0"},{"commit":{"message":"Set minimum size of byte vector to 4 on aarch64"},"files":[],"sha":"89b9a2caa2d15d542eb98936d6cf9631c7954dec"},{"commit":{"message":"[vectorIntrinsics] ByteArray tests and fix\n\nReviewed-by: psandoz"},"files":[],"sha":"567e032f65964b1c0a70b959d97a0d786500517d"},{"commit":{"message":"[vectorIntrinsics] Fix postmerge issue"},"files":[],"sha":"807148ffe578d936679b3dd0631664dc89a2ee15"},{"commit":{"message":"Split conversion tests into separate test source files"},"files":[],"sha":"624d1db3cb1454daa63c81b57134c6b9dc4128dc"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"5a4c9cc34bfc5daefed2188f5cb48cd130983f0b"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"96df9a81fd9026cf906d0b5c4be7a3586b40887f"},{"commit":{"message":"Remove div operations from integral vectors"},"files":[],"sha":"59e0b4bb9d283b9c455492f81e24a9423dfaa2e6"},{"commit":{"message":"Test fromValues and toArray()"},"files":[],"sha":"ac5c89faa35d8817a75579d56a18f4bf0d31b739"},{"commit":{"message":"Remove unnecessary node AbsV"},"files":[],"sha":"23d5eba8892ecdda8b81533988f2a9334e689bdd"},{"commit":{"message":"[vectorIntrinsics] Benchmark related fixes"},"files":[],"sha":"bea4c8df6b80160c5a5c2e24fc07055bc88b2b37"},{"commit":{"message":"Remove VShiftV nodes"},"files":[],"sha":"e7fad749186bb6b345d1d938a6d3092b9f9ae138"},{"commit":{"message":"Fix VectorInsert implementation on x86"},"files":[],"sha":"d69b93769c723cf578f0399b18f8019496afbb8c"},{"commit":{"message":"Fix masked gather load and add masked gather\/scatter tests"},"files":[],"sha":"93567d56a8af69ab73d88918912e6d343848e583"},{"commit":{"message":"Unify VectorMaskCmp shape between x86 and aarch64"},"files":[],"sha":"8956d00d8fe758e84261cba5b282cb9c6cd60325"},{"commit":{"message":"Remove JVM support for bitwise NOT"},"files":[],"sha":"3e1e23c22293b7a6f63f10fdc292f11bec4f37ce"},{"commit":{"message":"Extract\/Insert does not intrinsify"},"files":[],"sha":"276ffc9481045eb1a1fbee93c1d189b6fe42382a"},{"commit":{"message":"Don't dump IR for unused VectorBox nodes"},"files":[],"sha":"4e504c1b6edddb10344db5febf58d10cd050eb45"},{"commit":{"message":"Add missing @ForceInline on public API methods"},"files":[],"sha":"ad0da4f45735fb767dd0079748a32d5df5195e20"},{"commit":{"message":"Merge"},"files":[],"sha":"5c94c8a47072a0ad511a02267d09bbcefd43dba0"},{"commit":{"message":"Fix 32 bit build issue after cleanup"},"files":[],"sha":"68505fc2990e94a432c0518c847937895438faf1"},{"commit":{"message":"Fix x86.ad todos"},"files":[],"sha":"3e87fb2ef4a99c0bba26574ec96906886dbd7bc4"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"f89f24942a5976f216db5466fd6e78b40595ad46"},{"commit":{"message":"8242018: Build of vectorIntrinsics branch fails on Windows and Linux"},"files":[],"sha":"013a77b3291d6975d40e45baa1212f75754f81e3"},{"commit":{"message":"Fix build failure on aarch64"},"files":[],"sha":"edfff38d4dbf6f4e5a6e613d4e2bce543fbb5999"},{"commit":{"message":"Miscellaneous cleanups in hotspot"},"files":[],"sha":"bbd5111bcd5d5f4080f241c42ce9448819ea9015"},{"commit":{"message":"Different cleanups in backend C2 support"},"files":[],"sha":"09ddaeb5cc2dca1cdeaf8a107586f03983059273"},{"commit":{"message":"Fix build and jtreg test failures introduced by code merge\n\nAArch64: Fix jtreg failures about vector shift\n"},"files":[],"sha":"4cfa7ac37a98e3146f8f440506916dc89c8a17de"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"7144ebba54653332c512db1a27d6774c1cc3e54d"},{"commit":{"message":"[vectorIntrinsics] Post merge cleanup for x86 code gen"},"files":[],"sha":"d0f5d2045a3b16ac323bb6380fbf9b9b0dc79893"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"ac5b0e854b5d4365826eb9bcd216e56d94b2cb77"},{"commit":{"message":"[vectorIntrinsics] FP MinMax reduction cleanup for x86 code gen"},"files":[],"sha":"660255925f1c905b70775f781a28bd57addc6047"},{"commit":{"message":"[vectorIntrinsics] Miscellaneous cleanup for x86 code gen\n\nReviewed-by: vlivanov, srukmannagar"},"files":[],"sha":"80e6a4f52254ecd9a79152da6bbb76eb9b52ddc9"},{"commit":{"message":"[vectorIntrinsics] Variable shift code gen cleanup for x86\n\nReviewed-by: vlivanov, srukmannagar"},"files":[],"sha":"5f97e7ffdd7041032cc3aff92021e13ac73342de"},{"commit":{"message":"Fix build failure"},"files":[],"sha":"fe1d57f1d625cf87567de03a2672ec67fb697599"},{"commit":{"message":"Cleanup code for SVML support"},"files":[],"sha":"90b6886682372197935aa2a8ef0b773071f79115"},{"commit":{"message":"[vectorIntrinsics] Vector cast cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"551224d8782ea71fc44794c02e85d91427015993"},{"commit":{"message":"Trust final fields in jdk\/incubator\/vector package"},"files":[],"sha":"3e3a27c568944a0b836595fa6cc10e32e3ec4a46"},{"commit":{"message":"Some cleanups in Java code"},"files":[],"sha":"43d95811eb5f8551012eb64f5356bf21ab480225"},{"commit":{"message":"Fix -XX:+PrintInlining"},"files":[],"sha":"317b6ea35fef50051ccaea428abb8aaf70e2fcb5"},{"commit":{"message":"New JVM interface for Vector API support"},"files":[],"sha":"07456255bc657ef215273b623bab86d4fcd18b6b"},{"commit":{"message":"[vectorIntrinsics] Reinterpret cleanup for x86\n\nReviewed-by: srukmannagar, vlivanov"},"files":[],"sha":"645c894e1f1e5e37a3d95dc90820b084983f94d4"},{"commit":{"message":"Reduction cleanup for x86"},"files":[],"sha":"0416a659dc8545b2908f68ad5b4edb3f887a9c6e"},{"commit":{"message":"[vectorIntrinsics] LoadMask\/StoreMask cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"68f32ef3879dac20d36f4b617b5e836ae2f70079"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"38f61f02b7b8c33db0b7dae7b87adf535f936ce4"},{"commit":{"message":"[vectorIntrinsics] VectorTest cleanup\n\nReviewed-by: psandoz, srukmannagar"},"files":[],"sha":"f7b90bda5059981280f65e4bea849174acff5204"},{"commit":{"message":"[vectorIntrinsics] Shuffle\/Rearrange code generation cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"5883f09ad835213c80e2a81d94da8f08dc079310"},{"commit":{"message":"Support non power-of-two and 2048-bit vector length for gather load\/scatter store\n\nSummary:\n  1. For gather load\/scatter store, int array is used for index map. New index\n     shape calculation function is added.\n  2. Use a gather mask to control index vector loading for long\/double gather\n     load\/scatter store.\n  3. Gather load and scatter store is a pair of similar operations. One solution\n     should be applied to them.\n  4. Some assertions that vector length is power of two are removed.\n  5. Add comments for gather load intrinsification.\n"},"files":[],"sha":"825e2b2bca6d90fd519adbf2a406c1d523c4266d"},{"commit":{"message":"[vectorIntrinsics] Fix for test\/hotspot\/jtreg\/compiler\/loopopts\/TestOverunrolling.java failure\n\nReviewed-by: srukmannagar"},"files":[],"sha":"208239ac1bbaf3152fa0ac047017afdcd734f1a8"},{"commit":{"message":"[vectorIntrinsics] Revert support non power-of-two and 2048-bit vector length for gather load\/scatter store"},"files":[],"sha":"9d51ffa7c829b7464534e0fe4f11845e95262db0"},{"commit":{"message":"[vector] Blend cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"b77db51afb473e4ff122d13d720358c35dadfa5d"},{"commit":{"message":"Support non power-of-two and 2048-bit vector length for gather load\/scatter store\n\nSummary:\n  1. For gather load\/scatter store, int array is used for index map. New index\n     shape calculation function is added.\n  2. Use a gather mask to control index vector loading for long\/double gather\n     load\/scatter store.\n  3. Gather load and scatter store is a pair of similar operations. One solution\n     should be applied to them.\n  4. Some assertions that vector length is power of two are removed.\n  5. Add comments for gather load intrinsification.\n"},"files":[],"sha":"70208c23f56fc23b35200b0eda7952cf9f533648"},{"commit":{"message":"Stop the leakage of abstract types in public API"},"files":[],"sha":"025ca1749da4791426712d016fce4ab67533c3c2"},{"commit":{"message":"Store Mask Support for VectorAPI"},"files":[],"sha":"c5e60f7f8004050f297e08a5770902c8301674be"},{"commit":{"message":"Vector API 32-bit Fixes"},"files":[],"sha":"63dc13b387d5b8b4c588987926ccde5eb4621f23"},{"commit":{"message":"Fix reduce_add2F\/reduce_add2D for incorrect associativity\n\nThe implementation of these two nodes on AArch64 accumulate it's arguments in\nthe wrong order, as the addition of floating point values doesn't obey\nassociative law.\n\n"},"files":[],"sha":"7649b7af70f0de7f0573d537d0652e94d429c023"},{"commit":{"message":"Fix jtreg failure compiler\/vectorization\/TestNaNVector.java\n\nAArch64 UseSVE is also changed, as we will have both SVE1 and SVE2 in future.\n"},"files":[],"sha":"9b8fecbc3e026be71c3f329831207a8e3f34b598"},{"commit":{"message":"Vector API SSE2 Fixes"},"files":[],"sha":"a70aac768d34d6e83e51bed1a171af04af5b1331"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"cdb757d966ad174188f84e7b90470bfdc9f21a3c"},{"commit":{"message":"[vector] Extract cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"d599d50f20ebdd9ea775a16abd8d4256e5ae3ca1"},{"commit":{"message":"Add support for VectorCast nodes\n\n1. Add backend support for nodes VectorCast{B,S,I,L,F,D}2X on AArch64;\n2. Add functions to encode assembly instructions\n   fcvtl\/fcvtn\/scvtfs\/scvtfd\/scvtfv\/sshll\/sshll2\/sxtl, which are\n   needed when adding support for these nodes.\n\n"},"files":[],"sha":"9fc8b003ed7120f841d83a8c5931b0bf3ed09344"},{"commit":{"message":"SSE Fixes for VectorAPI"},"files":[],"sha":"a63bb616696b4a2368318b3c4f48f8696623a6c3"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"cbf01fa49ea91f85f6faa594273c12cffe769416"},{"commit":{"message":"Fixing invocation options, verified intrinsics creation\n\n[vector] Long execution time of VectorConversion tests.\n\nReviewed-by: sviswanathan"},"files":[],"sha":"141b25f1907e9439d3709f8b0a79e052e9699d6c"},{"commit":{"message":"[vector] Vector compare and miscellaneous cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"f544fe0747790ac7155146de8a470a153a72c5b2"},{"commit":{"message":"[vector] Consistency across floatign point and integral minmax macro instruction\n\nReviewed-by: jrose"},"files":[],"sha":"1a880ff3121dee1a0af51eb7963e3dd939d21a52"},{"commit":{"message":"[vector] Scatter\/gather cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"f9897a7bdd023b3227ec3881a6bd7afd6217f335"},{"commit":{"message":"[vector] Vector min\/max cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"9be8f85fa7108b9107d64c7916adf444678ca221"},{"commit":{"message":"[vector] Remove jcheck warnings\n\nReviewed-by: srukmannagar"},"files":[],"sha":"49a2ab4ed09398ff2bfb9f8b94ddbc99c14ba106"},{"commit":{"message":"[vector] VectorInsert support cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"823aefbdc66e48900821bdc541697474bbc3376e"},{"commit":{"message":"Merge Fix for VectorAPI"},"files":[],"sha":"bb4b7f9ed6bcab3c0e2b56d2513a73d36f35b2ef"},{"commit":{"message":"[vector] Reduction support cleanup for x86\n\nReviewed-by: srukmannagar"},"files":[],"sha":"34bf38fc1ca1df2d97758937def5fb3a68f267eb"},{"commit":{"message":"KNLFixes for VectorAPI"},"files":[],"sha":"64c206a036c9ed7af2defe361a23bf0968de4686"},{"commit":{"message":"Fix the issue that java files are different from template\n\nIn gen_srch.sh, unused definition longOrDouble64 is removed too.\n"},"files":[],"sha":"9f97a83b5f4de535bc8e02fe3b5a08e5016925d3"},{"commit":{"message":"Generic Operands Support for VectorAPI 7"},"files":[],"sha":"f3bdba9b46d372353e87a2fd7f2bbf18c7f4f4ca"},{"commit":{"message":"Generic Operands Support for VectorAPI 6"},"files":[],"sha":"e94f6238acf2e98d0b43967392fe1e49e8c50cf6"},{"commit":{"message":"Generic operands support for VectorLoadConst, VectorLoadShuffle and VectorRearrange\n\nReviewed-by: sviswanathan, srukmannagar"},"files":[],"sha":"10a3f1523c522fa7f4dd2f665b285112829095a3"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"cba18fe44b22af72557e195ed726ff876a6ec1cf"},{"commit":{"message":"Generic Operands Support for VectorAPI 5"},"files":[],"sha":"33557808baced47645a288301fec29d46449ac61"},{"commit":{"message":"Generic operands support for VectorMaskCmp and VectorBlend\n\nReviewed-by: sviswanathan"},"files":[],"sha":"56bf3819b9aeb639a47909cffc7c341c03ee1589"},{"commit":{"message":"Generic operands support for VectorReinterpret nodes\n\nReviewed-by: sviswanathan"},"files":[],"sha":"6b68573af967453e58fd25f39ecec2f95b308b9a"},{"commit":{"message":"Generic operands support for Variable shift and Cast nodes\n\nReviewed-by: sviswanathan"},"files":[],"sha":"7ff15f936d2d8470c8989ddb8cb3008f1e72b51b"},{"commit":{"message":"[vector] 8236507 : Long512VectorTests Failure on CLX\n\nAssociated legacy register class with legVecZ operand, this will constrain RA\nto allocate vector register from lower register bank.\nReviewed-by: paul.sandoz@oracle.com,sandhya.viswanathan@intel.com\n"},"files":[],"sha":"065300c0905d0318d27eb63ac2046a05b7de94c2"},{"commit":{"message":"Generic Operands Support for VectorAPI"},"files":[],"sha":"360f44e084684906887e6d23124cec629b1aa3b5"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"f3a7464bbad2e202b22d22ec716186aed12ba474"},{"commit":{"message":"Fix jmh comparison tests that can not reflect real performance\n\nUsing \"and\" operation with false initial value makes the computation optimized\naway.\n\n"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Test.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Test.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"597d5b44284d91c07f621a86af140cce0c5553fc"},{"commit":{"message":"[vector] Intrinsic creation for missing cases of iotaShuffle API\n\n Apart from one case (start =0 and scale = 1) where we are directly loading from\n initialized memory containing iota indices, all other cases are now intrinsified.\n\nReviewed-by:sandhya.viswanathan@intel.com,john.r.rose@oracle.com\n"},"files":[],"sha":"b7cb1a6df05664c35dd133bbeed7f38fe200afb3"},{"commit":{"message":"Fix release build failure\n\nDebug code shouldn't be placed into product code.\n"},"files":[],"sha":"1691beec7258f738664ed51c6766bf2bbe262de0"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"5b5fbb24ba74cddba1005bde1727fa696fe509d0"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"3252d7bec8b2317f4be8b9e096bb0ae4452dd661"},{"commit":{"message":"KNL Fixes for VectorAPI Part 2"},"files":[],"sha":"be6474b02c63492f3b421c29ff744eb371da0eb1"},{"commit":{"message":"[vector] Fix for failing MinShort64Test unit test\n\nRegister class of  temporary operand for rsmin4S_reduction_reg pattern was vecS, hence was allocated from a vector registers. It's user instructions expected a scalar register,  there is an encoding overlap b\/w encodings of vector and scalar registers. Scalar register having same enoding as RA's allocated a vector register was already allocated, thus a write over it corrupted its contents and resulted into a segment violation in subsequent memory write where this register was used in register-indirect addressing mode.\n\nReviewed-by: paul.sandoz@oracle.com\n\nCo-authored-by: Sandhya Viswanathan <sandhya.viswanathan@intel.com>"},"files":[],"sha":"2c0579ad66688cff22f2274c125be07b1744a671"},{"commit":{"message":"Fix compiler errors"},"files":[],"sha":"763f4efcc20be8f84029cfe8c11f5fd3310e2de1"},{"commit":{"message":"[vector] Removing generic operand related changes, these will not be merged through\n\n mainline patches for JDK-8230015, JDK-8234391, JDK-8234392 and JDK-8234394 once they are\n reviewed by community.\n"},"files":[],"sha":"50726e922bab01766162bdc1e28fc0a97725d3f0"},{"commit":{"message":"Some fine-tunes for AArch64 reduce_add operations\n\nAs reduce_add operation can be applied to signed values, we should use\nsign-extension when possible. And using addp\/faddp instead of add\/fadd can\nreduce one instruction.\n\n"},"files":[],"sha":"4c1156f3ad91c38b179c2821f0beb469614be2db"},{"commit":{"message":"[vector] Unit tests creation for following conversion APIs\n\n         Exhaustively covers various test points for different species, types, and parts combinations\n  - convert\n  - convertShape\n  - castShape\n  - reinterpretShape\nReviewed-by: paul.sandoz@oracle.com\n"},"files":[],"sha":"94749adad34b99a14e175f4e77cfa8d3418ac7a1"},{"commit":{"message":"KNL Fixes for VectorAPI"},"files":[],"sha":"0bb7db6caa40ec30172c43166152a0047e3b97a8"},{"commit":{"message":"Clarify shuffle iota when not wrapping"},"files":[],"sha":"64cceda82281b79960b9d466d3d58121bcac761b"},{"commit":{"message":"[vector] Enable intrinisc for 512-width anyTrue\/allTrue"},"files":[],"sha":"459daf7ada591fd87d225221655705167d857c67"},{"commit":{"message":"[vector]fix benchmark build failure due to identical test name"},"files":[],"sha":"2a9190863b5c408c069823fe1a809746a772e090"},{"commit":{"message":"[vector] Fix jtreg test failures in float\/double min and iota shuffle load"},"files":[],"sha":"131a2fd1679e939713f98354a5b15a99f6edb6f9"},{"commit":{"message":"Minor javadoc cleanups"},"files":[],"sha":"d92ebe27b7c6f09ee3cd1b21b1a7173ab68fd5bb"},{"commit":{"message":"REINTERPRET_D2L should be specified in terms of doubleToRawLongBits"},"files":[],"sha":"418c2f9550afbd6515a0d51ee2ada1063007d113"},{"commit":{"message":"Finesse restrictions on floating point operations"},"files":[],"sha":"6c284b26821d77ffabece4b9b8c2846e8b6cd856"},{"commit":{"message":"Remove Vector.random\/toList\/single"},"files":[],"sha":"e9909ff98ccf939b5118792ad5c632a2909162a2"},{"commit":{"message":"Fix compiler error for in-class initialization of non-static data member"},"files":[],"sha":"220480b457bf81f742c2bcc88b5e1e42c03551b6"},{"commit":{"message":"Fix shuffleToVector intrinsics by using castNode"},"files":[],"sha":"8d5740023d57be579adf41012403cecbad154e50"},{"commit":{"message":"Respecify Vector.random to not depend on ThreadLocalRandom"},"files":[],"sha":"7fe8fa2a2b1bb1ff94c0c8a499d4c15540be6eba"},{"commit":{"message":"Change the name of getElements() to vec() and clone argument value to\n\nFix the issue that unslice modifies the argument vector\navoid it being modified\n"},"files":[],"sha":"cf0cafb4226d2fabb65e22e461f2ce2283bacaf4"},{"commit":{"message":"Fix documentation of into\/fromByteBuffer"},"files":[],"sha":"9fe7457036ef129c2a0a913aa95fad6d8f541644"},{"commit":{"message":"Simple cleanups"},"files":[],"sha":"6d4bc53e58d5308790c21d2f01a512dbd65d21e3"},{"commit":{"message":"Slice and unslice tests"},"files":[],"sha":"a2dbc26325934757211f41c26f4c4f149fb7cc76"},{"commit":{"message":"KNL Bug Fixes for VectorAPI"},"files":[],"sha":"d91612be7421319e15dda4f8c320c5f6339fd9f2"},{"commit":{"message":"Remove useless line and trailing spaces in template and rerun gen-src.sh\n\nUpdate the changes for CSR review comments\nto generate java files.\n"},"files":[],"sha":"71894dfc575964400b10b7a32d541fdbcf26a992"},{"commit":{"message":"[vector] Vector API slice(int origin) test fails"},"files":[],"sha":"1db0ee76d8be53eaeffc8d929558b367e6d56e71"},{"commit":{"message":"Implement VectorShuffle rearrange and iota for AArch64 NEON"},"files":[],"sha":"f8b2b9f23d5135f7e9c59e97227e54e7bfb59d89"},{"commit":{"message":"Add test case for vector shuffle operations with C2"},"files":[],"sha":"4ba570fa61eeee56f971dc7919e142b74c44aafb"},{"commit":{"message":"[vector][generic-opers-infra] Code re-factoring to perform generic operand resolution to a concrete operand right after matcher\n\n         invocation during register mask initialization.\n"},"files":[],"sha":"3aa16309fa5049ac081ed18aab21c3ef0935b65f"},{"commit":{"message":"8223348: [vector] CSR review comments\n\nAddress some comments from CSR review.\n\nReviewed-by: sviswanathan"},"files":[],"sha":"256e1bd3197079bfad282f0993ed99b75f3aa653"},{"commit":{"message":"[vector][generic-opers] Changes for build failures on non-X86 targets and some code-refactoring\n\nReviewed-by: sandhya.viswanathan@intel.com\n"},"files":[],"sha":"f29cd8898e659197fc97a7018c4173ed282af154"},{"commit":{"message":"Update jtreg test cases to make sure that C2 is used"},"files":[],"sha":"ac55a53a20139fb18372bc502f7618843667df38"},{"commit":{"message":"Infrastructure changes for generic vector operands, includes following:-\n\n         1) Creation of new generic operands vecG and legVecG along\n            with the chain instructions MoveLegVecG2VecG and MoveVecG2LegVecG.\n         2) Post-selection stage for its resolution to concrete vector operands.\n         3) All the changes are currently enabled only for X86 target.\nReviewed-by: sandhya.viswanathan@intel.com\n"},"files":[],"sha":"4c41e02f467303c100cd82d2738fbdea3a8bd208"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"de65a6682bb61a2ae5c769b26a3ebd0c2cdb5896"},{"commit":{"message":"Add matching rule for SqrtVF"},"files":[],"sha":"8dd87a2d955cfd59be52fedc89ab8c502da04307"},{"commit":{"message":"AbsV node are seperated to AbsVB\/AbsVS\/AbsVI\/AbsVL. Instruction\n\nUpdate AbsV match rule for AArch64 NEON\nencodings are also updated.\n"},"files":[],"sha":"080633e7ed87bdd76a2cd12d8f67f58b335ff061"},{"commit":{"message":"Fix bug with ternary operators + broadcast (generated files)"},"files":[],"sha":"a2313afc584e747254c50558e6337215e2003db5"},{"commit":{"message":"Fix bug with ternary operators + broadcast"},"files":[],"sha":"275b3c534a36f066470a8fa80055e67d700b5f86"},{"commit":{"message":"Variable Shift for Byte and Short Fixes"},"files":[],"sha":"3dbe91e25f4dceee1dad5b15e0cd0492b95cc7ec"},{"commit":{"message":"Fix Merge issue for Windows build"},"files":[],"sha":"ddd54b6efd9a85a723ddb19d1f49d06a8afbdd1f"},{"commit":{"message":"8226918: Fix Vector API single jtreg failures for AArch64 NEON\n\nIn float\/double insert instructions, use different vector\nregister for dst to avoid register conflict.\n\nReviewed-by: njian"},"files":[],"sha":"a6f0730b2097d8f5a7056212aac01449f41a728f"},{"commit":{"message":"Fix AArch64 assembler issue after manual merge with default"},"files":[],"sha":"194750c23b2c2b1d61c99dc20564ef6a5d3813cb"},{"commit":{"message":"Implement the missing matching rule for multiply long\n\nImplement VectorAPI multiply long for AArch64 NEON\n\nReviewed-by: yzhang"},"files":[],"sha":"e832b022b6537ccbe08203724fa46d227b8849c0"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"49fccd9014ab3aedbcb1b4bcb7115ad6fd815df5"},{"commit":{"message":"Fix build failure in AArch64 platform"},"files":[],"sha":"59f302413b65ff6a791c4281e9e15f899be3a169"},{"commit":{"message":"Combining logical compare rules"},"files":[],"sha":"cb4d96da428ee7b3c1d60251296a3e37445c99cd"},{"commit":{"message":"Disable Variable Shift for Byte and Short"},"files":[],"sha":"abba79b6b06a2aaa5128cce75a0d818b83e8f65d"},{"commit":{"message":"Disabling Variable Shift for VectorAPI"},"files":[],"sha":"4268345af330c6b6f83d0c6c9035fe8cd5775753"},{"commit":{"message":"Variable Shift Support for Byte and Short Datatypes in VectorAPI"},"files":[],"sha":"fed90216496870c43dcde4f641b74d6df7caf755"},{"commit":{"message":"Fix duplicate declaration due to merge"},"files":[],"sha":"539932426b1dbe6fa6dd132c96d1185bf66e37e9"},{"commit":{"message":"Fix elementType() to return primitive type instead of boxed type"},"files":[],"sha":"347d13109c5d504b7b9e1e3a7ecb77b6f2132b83"},{"commit":{"message":"Update templates to fix jmh benchmark failures. In vector benchmarks,\n\nFix jmh benchmark build failures.\n\"and\" operation is used. To align with vector benchmarks, scalar benchmarks\nshould also use \"and\" operation.\n"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Broadcast.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Test.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Zero.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"}],"sha":"445e3f04ab559c959b897a7688c5290df71e74b3"},{"commit":{"message":"Corrected typo"},"files":[],"sha":"6ab070c5c9c5ece6065753c90781183347b6bc02"},{"commit":{"message":"Separate variable shift handling from constant shift handling"},"files":[],"sha":"f219f53a3c0cfc57fb7f5e5169e8cd3cccacda00"},{"commit":{"message":"Fix typo"},"files":[],"sha":"57c5f225b93c14be53b513f20dc3c3dbef7ce361"},{"commit":{"message":"Fixed javadoc syntactic errors"},"files":[],"sha":"9661dc3b002000cb801a19902fca729fd2ad3ec6"},{"commit":{"message":"Mask Operations Fix for VectorAPI"},"files":[],"sha":"52b4d73f03e37a49151ac5a4ea7ccd03bdf38d45"},{"commit":{"message":"Fix minor merge issue"},"files":[],"sha":"2e683d6a641daff9b4f8fec04c783172b30a2cf0"},{"commit":{"message":"Manual merge with vector-unstable"},"files":[],"sha":"9b158acce77c56db76feadbf6df64fa70acfa7b7"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"b971fe1d0974e2341d7974e078741a03ec09c3a5"},{"commit":{"message":"Fix for VectorHash Test"},"files":[],"sha":"9fccb92ea36a8bf2d2956064dbbf5d2ced3ba390"},{"commit":{"message":"Add jtreg tests for broadcast zero and maskFromArray"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Broadcast.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Zero.template"}],"sha":"723d54e5696a352d439685047705646e3ee00190"},{"commit":{"message":"Add zip\/unzip shuffle factories; add rearrange tests, fix bugs"},"files":[],"sha":"092e68f882d24c09fbc0429c64aacbb08d743625"},{"commit":{"message":"Fix vector compare performance regression"},"files":[],"sha":"fa246ec17918f48cff5fe5a783c42d4034e12a60"},{"commit":{"message":"Added example for masked loops along with necessary code changes"},"files":[],"sha":"5e64fce5f2de7a4d82b2d5e8e4a89c3178483b15"},{"commit":{"message":"Improve docs for lanewise, scatter, gather methods; add toIntArray (helper for scatter\/gather)"},"files":[],"sha":"a69821fcf80c97087d0998dee988cb31d69fc8aa"},{"commit":{"message":"Improve VectorOperators documentation"},"files":[],"sha":"5546506ebe9661bb1cfa733c6441d7f2abe5b88b"},{"commit":{"message":"Add Vector.test API points, add boolean to iotaShuffle, small fixes"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Test.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Test.template"}],"sha":"a689733bcc14ff299880edd97cc04e709b995ed8"},{"commit":{"message":"Remove elementType, elementSize, shape, length etc methods from AbstarctVector.java\n\nContributed by: john.r.rose@oracle.com\n"},"files":[],"sha":"412f844e23efe892de757a510b113e031e3d40e0"},{"commit":{"message":"VectorHash fix and other small fixes to improve performance\n\nContributed by:vladimir.x.ivanov@oracle.com, sandhya.viswaanathan@intel.com\n"},"files":[],"sha":"16cf4ece0328c0bfadb5de51b2dbbb4b64c7629f"},{"commit":{"message":"Minor punctuation fixes"},"files":[],"sha":"ea27ba15488f21161a55c382414d4f390e07e9a6"},{"commit":{"message":"Javadoc Corrections"},"files":[],"sha":"be53cecc87c3f367dc3a362cd0e164bd6911e786"},{"commit":{"message":"Javadoc corrections"},"files":[],"sha":"699dbe5f5ac1324a5b92b94490e7eb14b72de46f"},{"commit":{"message":"Remove deprecated APIs and update test and jdk benchmarks accordingly"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-Masked-op.template"}],"sha":"d96da23837d4922ca9d56d66ce68a3d34d478beb"},{"commit":{"message":"Fix aggressive reboxing"},"files":[],"sha":"496628b93a8ef9807197ba47d9203fd2c8625b86"},{"commit":{"message":"Changed zero() to broadcast"},"files":[],"sha":"1d17553fcc91d27e5d69240a9b8659d4492870ed"},{"commit":{"message":"Update ChaChaBench and Poly1305Bench"},"files":[],"sha":"267fe1f9870b126cc42d38e19fdede5a8b069738"},{"commit":{"message":"Update jdk benchmarks for new API format"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-Max-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-Min-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Max-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Min-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-op.template"}],"sha":"d13da1f5a13dc8c264306d660c5dc0492e283563"},{"commit":{"message":"Preserve type information for vector values"},"files":[],"sha":"d59d828662c43f933bfd7fa09144f796467f4bbc"},{"commit":{"message":"Extend modifier discipline to non-public methods"},"files":[],"sha":"6fd5cef85fe8c132b1d80ae54ceebbf8e4306cb3"},{"commit":{"message":"Improve modifier discipline in X-Vector.java; ensure @ForceInline is present"},"files":[],"sha":"209cd50cfef385de112ae4d62e4aff1541fda7e5"},{"commit":{"message":"Minor javadoc edits"},"files":[],"sha":"3a80aaee8912f09024703f993808e04a567c44b3"},{"commit":{"message":"Changed test framework and tests to use new api methods"},"files":[],"sha":"a440e128a6cc99be22a3f1c5cbc6dda80f7f2295"},{"commit":{"message":"Apply shiftLanes implementation to slice\/unslice"},"files":[],"sha":"851b04c9356c2cd1e12fab6a9a062ac326f0da07"},{"commit":{"message":"Manual merge with vectorIntrinsics"},"files":[],"sha":"c59826deeb9f8855b8db5ab9f330aa8d3579f14c"},{"commit":{"message":"8224988: Fix for failing regressions over Skylake\n\nDiscrepancy b\/w operand type and usage withing instruction encode block is fixed.\n  Register allocator may allocate VecX operand from higher register-bank for target supporting\n  AVX512, but its user instruction expects it to be allocated always from lower register-bank.\n\nReviewed-by: vdeshpande"},"files":[],"sha":"c3aabcdb5c95ebe005b5f6bb7f3de33fd21fc757"},{"commit":{"message":"JDK-8224988: Elemental shift and rotate operations speedup\n\nPatch is having following changes:-\n     A) Intrinsification of two vector APIs:\n       1) VectorShuffle.shuffleIota(VectorSpecies, int)\n       2) VectorShuffle.toVector()\n     B) Re-implimentation of following vector APIs using above intrinsified APIs.\n       1) Vector.shiftLanesLeft(int)\n       2) Vector.shiftLanesRight(int)\n       3) Vector.rotateLanesLeft(int)\n       4) Vector.rotateLanesRight(int)\n\nReviewed-by: sviswanathan, kkharbas, johnr"},"files":[],"sha":"9431145337fc50a16d5d3351e553211f1566a6f9"},{"commit":{"message":"8225018: [vector] 9 unit tests for Vector API failed on SkyLake with assert \"(((dst_enc < 16 && nds_enc < 16 ...\"\n\n9 unit tests for Vector API failed on SkyLake with assert \"(((dst_enc < 16 && nds_enc < 16 ...\"\n\nReviewed-by: vlivanov"},"files":[],"sha":"ecdac918593245f60ce0799d9bd3484ac8029b71"},{"commit":{"message":"Add tests for masked scatter, gather and single apis"},"files":[],"sha":"074fb4425aed65e4ac9fde4763c18aac0c87516e"},{"commit":{"message":"Small update to JDK-8221429"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-Max-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-Min-op.template"}],"sha":"6a1d55a2e1c6c87f71c86adbdf27e6491e62db68"},{"commit":{"message":"Add tests for masked reductions and masked min max and fix for masked minLanes and maxLanes for FP"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-Max-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-Min-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-op.template"}],"sha":"79adde47c40cec95a2727204358171a4ee190989"},{"commit":{"message":"More details for [1] : the fromElementType passed to reinterpret() was not same as the element type of vector. Because of which expand_vunbox_node() could not find the vec[] field in the class\"\n\n1. FIRST_NON_ZERO operation caused crash 2. added masking for shift operations on IntegerVectors and LongVector\n"},"files":[],"sha":"82174f92240157c4befd6e47244dc92afcea6eda"},{"commit":{"message":"Reverting previous push, some inadvertent changes had been pushed"},"files":[],"sha":"5ccce7d5616c192eff66c8163ac5baea4ca69823"},{"commit":{"message":"More details for [1] : the fromElementType passed to reinterpret() was not same as the element type of vector. Because of which expand_vunbox_node() could not find the vec[] field in the class\"\n\n1. FIRST_NON_ZERO operation caused crash 2. added masking for shift operations on IntegerVectors and LongVector\n"},"files":[],"sha":"b713cd0c36294ad012743ef087a61cb4f7fa3cc1"},{"commit":{"message":"(part 2 of previous: the generated files)"},"files":[],"sha":"83972668ebdcb9b2a4d13a066d811915613c410d"},{"commit":{"message":"Improve documentation regarding masking.  Add missing masked compare methods"},"files":[],"sha":"ce3dd005ea10c6efa22ba571de53b5a3c120548d"},{"commit":{"message":"(part 2 of previous: the generated files)"},"files":[],"sha":"d0f48f11b528221b07781b5b1f2e142eb0619074"},{"commit":{"message":"Consolidate package-info narrative into Vector.  Add a few more ETYPE-specific methods (at least one each of unary, binary, ternary), for better EOU and discoverability"},"files":[],"sha":"3379b1ff0b83ce083b52f2f7e0293713d220b0d8"},{"commit":{"message":"BitCombiner is not the right primitive"},"files":[],"sha":"dcbae2a4c476fb0f25b66adc953293d4079605fe"},{"commit":{"message":"Refine and complete Vector API preparing for CSR (part 3: new files)"},"files":[],"sha":"7d5157877192600da68f683e8fd58766d892a19c"},{"commit":{"message":"Refine and complete Vector API preparing for CSR (part 2: generated files)"},"files":[],"sha":"d79239a98df2c34425b637c6649e030c875ccb89"},{"commit":{"message":"Refine and complete Vector API preparing for CSR (part 1: true source files)"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"f617a6ad85fca10386ea7cc6a35705237c0ad6c6"},{"commit":{"message":"JDK-8223330: Test jdk\/incubator\/vector\/VectorReshapeTests.java failed on fastdebug build\n\nFix for VectorReshapeTests in VectorAPI\n"},"files":[],"sha":"e419cf40bf61d0d5d8d18c666beed502e25b58ce"},{"commit":{"message":"8222897: [vector] Renaming of shift, rotate operations. Few other api changes\n\nRenaming of shift, rotate operations. Few other api changes.\n\nReviewed-by: jrose, briangoetz"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"144043ac33a5be87ddda22a8ceb3416c92fc5378"},{"commit":{"message":"8222933: [vector] Test failures after api change in JDK-8222752\n\nTest failure becaues of renaming get() and getElement() functions to lane() in changeset http:\/\/hg.openjdk.java.net\/panama\/dev\/rev\/82514a6254e6\n\nReviewed-by: sviswanathan"},"files":[],"sha":"d8a7df21251a11680cfa7e2ef8335684f7716623"},{"commit":{"message":"Fix for Reverted Masked Reductions"},"files":[],"sha":"e6e554e1bdf957ddfb48175464a6b76722bf1b69"},{"commit":{"message":"8222752: [vector] Javadoc changes for Vector api\n\nJavadoc changes for Vector api\n\nReviewed-by: jrose, briangoetz, vlivanov, sviswanathan"},"files":[],"sha":"9a063ea2bba21c12e807ff2da795b03ca83d387b"},{"commit":{"message":"8222755: [vector] Add files which were left out while pushing changeset for 8222584\n\nAdd files which were left out while pushing changeset for 8222584\n\nReviewed-by: briangoetz, vlivanov"},"files":[],"sha":"d903a75a26f4cf4b0a43814de454567d756326d0"},{"commit":{"message":"JDK-8222584: [vector] Refactoring api for mask, shuffle creation and move inner class to top-level\n\nRefactoring api for mask, shuffle creation and move inner classes to top-level\n\nReviewed-by: briangoetz, vlivanov"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"94ee46adc51e17d9d8c06cda3b1d81673ad14cad"},{"commit":{"message":"8221812: Fine-tune jmh test for vector api\n\nTo compare performance of vector api and auto vectorization, vector\napi and scalar test cases are updated to keep aligned.\n\nReviewed-by: vlivanov"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-op-math.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Blend-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-BoolReduction-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Rearrange.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Max-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Min-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Shift-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Shift-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Ternary-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Ternary-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-math.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-op-math.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"47216bdfb88afee306c13abafde8f7185c7ba6ac"},{"commit":{"message":"8221808: Fix jmh build failure about SumOfUnsignedBytes.java\n\nReviewed-by: vlivanov"},"files":[],"sha":"19f89305f54c056b1e89cce1220bbaafe024e941"},{"commit":{"message":"JDK-8222290: [vector] Implement Species flattening\n\nChange the species hierarchy to make it flatter, remove XxxNnnSpecie and provide Species<Xxx>\nContributed-by: briangoetz, kkharbas, sviswanathan\n\nReviewed-by: vlivanov"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"c02702f8dbcf38759ec3f5f4fd13eab03c8837b7"},{"commit":{"message":"JDK-8221932: [vector] Add x86 optimized implementation for float\/double Min\/Max reduction\n\nCode gen support for x86 and corrected initial value in API implementation\n\nReviewed-by: sviswanathan"},"files":[],"sha":"823ef72ba5d11a3f527951d7369fd9f06b6f6d74"},{"commit":{"message":"8221634: CheckCastPP hinders vector box elimination"},"files":[],"sha":"1f74e0b088ecdeb88dd37de9121c4d9322c509cc"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"e967ce1dce95246cdbfb4f5ad23745361a28a168"},{"commit":{"message":"8219878: Vectorized Poly1305 benchmark\n\nReviewed-by: sviswanathan, vlivanov"},"files":[],"sha":"07a55b2e405f76b000fee3d0238845cd941d1bb1"},{"commit":{"message":"8221176: [vector] Masked reductions are broken\n\nReviewed-by: vlivanov"},"files":[],"sha":"6793e6b2d8f2c8d344578527c794a80253f77ec3"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"73ab9893fea912c3d8adab552662fed3ade2dd9d"},{"commit":{"message":"Removed subAll() and few javadoc changes"},"files":[],"sha":"0b68de5d9f1377e1b8eca9423393b1f5dc1e2570"},{"commit":{"message":"Implement vector api get\/with for AArch64 NEON"},"files":[],"sha":"108e5fad63cbcb67765ddc595b816c7e89dce8dc"},{"commit":{"message":"To make condition flags architecture independent, reuse BoolTest flags instead\n\nImplement vector api anyTrue\/allTrue for AArch64 NEON\nof x86 condition flags. AnyTrue\/allTrue instructions are also added to AArch64 backend.\n"},"files":[],"sha":"081c2851f73a73164bd7b2d389d2736e6c6ae183"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"614bd9ee0581ee74acc62a5cb66a24aa4ff2461c"},{"commit":{"message":"Fix for a bug in fromArray()"},"files":[],"sha":"43053ad791a9f41e525f708096d040134c5f0493"},{"commit":{"message":"Float\/Double min\/max implementation for x86"},"files":[],"sha":"0357665ebe2058b174438033acdaf25a16fd50b0"},{"commit":{"message":"Fix Long min reduction with AVX512"},"files":[],"sha":"99ab8d8360a24510282219aca369738ce7ae9e74"},{"commit":{"message":"Fix shiftR for Byte 128 and 512"},"files":[],"sha":"44a5449b8ed39098ed4ae6af2f65cf86b76e78dc"},{"commit":{"message":"Species alignment with value types phase 1\n\nContributed-by: goetz, sviswanathan\n"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Compare.template"}],"sha":"ab3594d4e44f1554548211ba60de71430d2bc395"},{"commit":{"message":"Some variants of EVEX-encoded vpsraq require AVX512VL"},"files":[],"sha":"cd6a0d67c4eeac5285d3a6057ca1057243708af7"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"66507a02795f6f6ab8cb5b89654e49d63d569cb7"},{"commit":{"message":"Fix ByteVector\/ShortVector.shiftR"},"files":[],"sha":"8a6987f216c159573c0638f66f5d64a3ad4448ac"},{"commit":{"message":"Missing memory barriers in LibraryCallKit::inline_vector_mem_operation()"},"files":[],"sha":"7d19a69ef97bc075c84a30b9b70ee7ab5396c621"},{"commit":{"message":" Ensure intrinsics are parameterized with non-capturing lambdas"},"files":[],"sha":"80aaa5a9a45d9bbc6f072002a69b4f28712dff68"},{"commit":{"message":"Add test cases that check the final result of reduction operations\n\nFine-tune test cases for reduction operations\nAlso fixed some indentation errors.\n"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-BoolReduction-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Max-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Min-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Ternary-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-wrapper.template"}],"sha":"50553e9f912fc87aab52cbaeaa8b5537b97faf9c"},{"commit":{"message":"8218750: Vectorized ChaCha20 Benchmark"},"files":[],"sha":"7b9b14b0ed2f8a6177bb725d02bb08e2bc1c070d"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"0b2a130f04aefe061b4ecac9ecc1e8465d59fda6"},{"commit":{"message":"Adjust benchmarks to API change"},"files":[],"sha":"44b52a304cedbee33f8abb2167ec1d0f8bbd12d2"},{"commit":{"message":"Fix compilation error due to missing include"},"files":[],"sha":"f739531c724b6c9d15e7c3fa2f26ae6c36e006cf"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"5387800321c3727c3489011d786a1d3c7d9085ae"},{"commit":{"message":"Small patch to rationalize species\/shape factories\n\nReviewed-by: sviswanathan"},"files":[],"sha":"3ef232774273762f8f6229fd478e50f84953b549"},{"commit":{"message":"Small fixes to make all tests pass on x86\n\nReviewed-by: vlivanov"},"files":[],"sha":"fdd93970003ab577c698ef8f88e3cb129f8883a1"},{"commit":{"message":"Implement Vector API andAll\/orAll\/xorAll for AArch64 NEON"},"files":[],"sha":"0c7f09a52213be6c44eef54cc37922a5c77a30df"},{"commit":{"message":"Wrong offset is computed in Mask.maskFromArray()"},"files":[],"sha":"27845ce7fd11fd447498d245f38baadcab732166"},{"commit":{"message":"API changes for rebracket, reshape, resize and cast\n\nReviewed-by: vlivanov, goetz"},"files":[],"sha":"ea22fd128b9d6f3e96ab114a58b741c4741be2dc"},{"commit":{"message":"Support long addAll() for AVX < 3\n\nReviewed-by: vlivanov"},"files":[],"sha":"7eafb07a726c6b87a1b4fdc0d1dd297185e94b32"},{"commit":{"message":"Fix memory access intrinsics for Vector.Mask"},"files":[],"sha":"fa0b7260fbc6c19f00aea64e558b05ae095f7d5a"},{"commit":{"message":"Vector.rearrange() breaks vector box elimination due to lambda capturing in default implementation"},"files":[],"sha":"a4b88fde54251b5e89295d4fdd1fe807bb2dbfde"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"e7e8529a7403a63e3a420d904df0a1a239f9e4a2"},{"commit":{"message":"Contant Shift support for Byte and Short datatypes in VectorAPI"},"files":[],"sha":"58e22bfb807553d6e61f3d20d240586d993536b2"},{"commit":{"message":"Add four-byte vectorization support for vector shift and mul\n\nFix byte vector test failures about bad ad file and unsupported vector size for AArch64\n"},"files":[],"sha":"56533104e5077a5f29a36a4fd0b88c9b4011ac98"},{"commit":{"message":"Use Math.min()\/Math.max() instead of \"((a > b) ? a : b)\". Because the\n\nUpdate max\/min\/maxAll\/minAll Vector Api implementations and test cases\nresult of latter implementation is affected by sequence of (a, b) if NaN is one\nof inputs.\n"},"files":[],"sha":"481e3cc9b33a1d3cd9c8d67dcb3d648fb892e4ff"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"090d6a561219c1bbf53efa446c4d5bd10a1be3eb"},{"commit":{"message":"Implement Vector API maxAll\/minAll for all data types for AArch64 NEON\n\nCo-authored-by: Lauren Walkowski <lauren.walkowski@arm.com>"},"files":[],"sha":"e390635af3f344cd0361d82b030e39b2bff49bd7"},{"commit":{"message":"Update gen-*.sh scripts according to Spp changes"},"files":[],"sha":"d5cb5c1587109f2b12236c345c70fd5fe6f18cc4"},{"commit":{"message":"Fix register classes for inputs of vptest"},"files":[],"sha":"e31f964fd6a898040a3427a01cfc68052fefbaef"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"d6fe9c35651bc523d5239bd6fcd7bd3da83ac054"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"e6ac47ff27a221196f19a20f5b4e94a739c9991b"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"8289bd3a6224b699edfbe9ce85e26881ff098fea"},{"commit":{"message":"Fix wrong indices in scatter\/gather intrinsic due to long argument"},"files":[],"sha":"aabba37f03772e6300443f4e0d7cae33a6f42c9a"},{"commit":{"message":"Add \"local\" keyword for local variables in functions of scripts\n\nThere is a local variable and a global variable with the same name.\nTo protect global variables' content, \"local\" keyword is added to\nall local variables.\n"},"files":[],"sha":"8fc3db31394c69bc4dc89be5741c0c255108d03e"},{"commit":{"message":"Fix memory aliasing detection in presence of vector accesses"},"files":[],"sha":"b25025929a87150676a1be893b54d955009a35ef"},{"commit":{"message":"New benchmark: PopulationCount"},"files":[],"sha":"71451e17e16a1b344b69bd09c4c08630dd351d52"},{"commit":{"message":"New benchmark: SortVector"},"files":[],"sha":"17558bf3f53af7ff9812ea273e25e59ee1978c04"},{"commit":{"message":"Gather\/scatter cleanups"},"files":[],"sha":"718a28ad34a5835dd54b30765c31486e9f770654"},{"commit":{"message":"Fix headers"},"files":[],"sha":"51b4ed7cf213442208247c9866260a7f31dddef4"},{"commit":{"message":"New benchmarks: Merge, SumOfUBytes"},"files":[],"sha":"bb1fcc12c3617076c8d2aa59e064bed8e796d085"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"8fbf4b583d9239e6f95f0014c9de463a163f119a"},{"commit":{"message":"Erroneous materialization attempt of zero vector constants"},"files":[],"sha":"0c1d6bce932572458e048bad74b377f844787896"},{"commit":{"message":"Remove redundant boxing in tests"},"files":[],"sha":"028fe46796f538a00929a70e064245a706b9638d"},{"commit":{"message":"Update vector benchmarks after Shape removal"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"1cd96484dcc00863eaf5a0364adc04530df96bb7"},{"commit":{"message":"Add loadmask\/bsl\/storemask instructions to implement mask support in AArch64 backend\n\nAdd Vector API mask support and comparisons for all data types for AArch64 NEON\nAnd add compare eq\/ne\/lt\/le\/gt\/ge instructions to generate mask in AArch64 backend.\n"},"files":[],"sha":"dd2b561334c7f15623a371b4c97adda2c73847ab"},{"commit":{"message":"Changes to Fix failing Windows build"},"files":[],"sha":"88524f0da3456428a1d558c6a8f3164fd021510c"},{"commit":{"message":"Scatter Fix for all types"},"files":[],"sha":"3181820ceb127d2e06c6394e0086fddeb59f49b2"},{"commit":{"message":"Scatter Gather Intrinsics Support for VectorAPI"},"files":[],"sha":"9a9fbc6701a054f7f8e350adbfcd563326b374a4"},{"commit":{"message":"Scatter Gather Intrinsics Support for VectorAPI"},"files":[],"sha":"769b6ebdbb8e8b6246830cee0854ff9031c58a42"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"de3435572d8d53ffe6e6810d4e64d8ccd6e4e9c3"},{"commit":{"message":"Add reduce_add8B\/16B\/4S\/8S\/2L, reduce_mul8B\/16B\/4S\/8S\/2L and mul8B\/16B in AArch64 backend\n\nImplement VectorAPI mulAll() and addAll() for AArch64 NEON\n"},"files":[],"sha":"ff0dec1312fc2aa4d363b44abcb4256db876b133"},{"commit":{"message":"Eliminate Shape parameter from vector classes; turn Shape into an enum"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"ce236a3a987f0393f756f5bac889ed8b403f8b71"},{"commit":{"message":"Update generated files"},"files":[],"sha":"3fdfdd2a765f494158dc2fd774e8b386209310c7"},{"commit":{"message":"Benchmarks: cleanups, scalar variants"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-op-math.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Blend-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-BoolReduction-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Compare.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Rearrange.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Shift-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Shift-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Ternary-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Ternary-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-Masked-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-math.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-op-math.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-op.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-footer.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"3e43b267bffc19030740a983fa127c31a0d2010d"},{"commit":{"message":"JMH project for Vector API benchmarks"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-footer.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-wrapper.template"}],"sha":"f554f17d96db291842ba0a55da461c87a2cb58df"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"8c963e64339a950adc28e7d1aa3f17ccd31b3dd2"},{"commit":{"message":"Fix Javadoc errors"},"files":[],"sha":"0b758a31776641d7398dd08e23a80c3766cb5b62"},{"commit":{"message":"VectorAPI SSE Fixes"},"files":[],"sha":"66cf6ba671c20b2682da9304de918d92814b77e6"},{"commit":{"message":"Missing GVN on newly created VectorNode::shift_count()"},"files":[],"sha":"4bcb11f06e06189ba815714148384d0da3c118b8"},{"commit":{"message":"Missing GVN on newly created VectorInsertNode"},"files":[],"sha":"9997bf7582a47556ad80514552c105d4a85b4123"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"bbe7b8be60de5731c4f1de3a7df12c4bec6f0216"},{"commit":{"message":"Fix jtreg vector reshape failures for AArch64 NEON"},"files":[],"sha":"dc7a5bae74fdca1b082335a87f97e471f4ae79a8"},{"commit":{"message":"MaskFromArray intrinsic"},"files":[],"sha":"c6ee8d4d1bca20fd898d1b903ac94c96fede7ce2"},{"commit":{"message":"Add Max vector shapes to fit Arm SVE better\n\nCo-authored-by: Joshua Zhu <joshua.zhu@arm.com>\nReviewed-by: vlivanov"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"}],"sha":"6a7bff46d8e0275af0ec8614cba5ede73333a8df"},{"commit":{"message":"Passing target vector class from argument instead of calculating the target vector shape\n\nCo-authored-by: Joshua Zhu <joshua.zhu@arm.com>\nReviewed-by: vlivanov"},"files":[],"sha":"bc30c74f567f293fcba17786b8ecd83a51617856"},{"commit":{"message":"Implement vector max and min for AArch64 NEON"},"files":[],"sha":"92805cc3edcb055dba975f1423c5fe53973261e7"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"9b6b121735945acf43fff1fe3ba7efee13b84575"},{"commit":{"message":"VectorAPI: dos2unix x86 SVML assembly routines"},"files":[],"sha":"0a3c1731f188c39b8c12ec5652abc336b68c6df1"},{"commit":{"message":"VectorAPI: Fix x86-64 AVX512 cos and sin routines"},"files":[],"sha":"18f2133714ff8ca0768bd39d96aad9385709951f"},{"commit":{"message":"Migrate from Unsafe.getObject() to Unsafe.getReference() to avoid warnings"},"files":[],"sha":"ec5faeaa6eeed8ea8870e5242a5e18507469d2d7"},{"commit":{"message":"Manual merge"},"files":[],"sha":"250418443ccbccfb42faa6b76fb617e52eff27ac"},{"commit":{"message":"AArch64: SVE changes"},"files":[],"sha":"7b2b00e742cbdb4a4a5ddb4289cfac609e8e2720"},{"commit":{"message":"VectorAPI: Crash fixes in SVML for Windows"},"files":[],"sha":"4b1ed17ad276e147eedd6a62cbded55b54a0a590"},{"commit":{"message":"Implement Vector API abs and not for AArch64 NEON\n\nAdd vabs8B\/16B\/4S\/8S\/2I\/4I\/2L and vnot8b\/16B instructions to AArch64 backend\nto implement Vector API abs() and not().\n"},"files":[],"sha":"9138b6ef625971b8e124ba1a4912ad0c5e89b1e2"},{"commit":{"message":"Manual merge"},"files":[],"sha":"c91636dc9cf89583e50ecbe7889f0a1dfebb0b3c"},{"commit":{"message":"Add vector_size_supported check for long64\/double64\n\nFix AArch64 build failure and jtreg long64\/double64 failures for AArch64 NEON\n"},"files":[],"sha":"5fcc4f80a35726063a36915cb6d704dad05fec7a"},{"commit":{"message":"Move x86 check in x86 Matcher"},"files":[],"sha":"b591971a6c91b3e9fc065a12c3ba4296b8fdb605"},{"commit":{"message":"VectorAPI: disable SVML routines for KNL on Windows"},"files":[],"sha":"e74a6b09e1919ddce99ba5391f8608444fd77970"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"9140d84790dc6ce11884e2cc2609b23d62de68ec"},{"commit":{"message":"Fix vpermb encoding"},"files":[],"sha":"b5c676aa322627898bbc25d31ad0065d9c577119"},{"commit":{"message":"Fix SVML Windows build issues"},"files":[],"sha":"9a0db356b4d054663c284fa451429515f4063bfa"},{"commit":{"message":"VectorAPI Cleanup"},"files":[],"sha":"02d3cf5c630301345bb0686778bf51f21a72bb0a"},{"commit":{"message":"Shift, Gather, Scatter API and Test Changes for VectorAPI"},"files":[],"sha":"32c75e82b422d7eb1450c7292e8e850ebd5cf72f"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"f4e9d999daa97cb025c1446d5adcd8d7e08196a8"},{"commit":{"message":"Build Fix for VectorAPI Shift"},"files":[],"sha":"7c9bee7c97d0efee9d2c3f53048a8be215780cb8"},{"commit":{"message":"VectorAPI shift and gather Generation Changes"},"files":[],"sha":"4b51f33461c45bfa6075fbe65710efe00dbc9e7d"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"31051e586fcf07022122081dd51a8c39c79d62cf"},{"commit":{"message":"Linux SVML Support Fix for file extension"},"files":[],"sha":"dcfeaa11234e97530b647010540cfbfa3b325497"},{"commit":{"message":"Linux SVML Support for VectorAPI"},"files":[],"sha":"8e720f1268a8e0af390b8fc51e566c2a61cae425"},{"commit":{"message":"Fix vpshuf* assembler compiler warning"},"files":[],"sha":"862b9ac47e45c80953b7d025e2b1c8803a908458"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"779249046ae83509e8db57f9792d300df266377d"},{"commit":{"message":"Build Fix for get"},"files":[],"sha":"f6ffd1bfd4cd4ddf94f503e3e1578e1bfc428485"},{"commit":{"message":"Get Fix for VectorAPI"},"files":[],"sha":"c416df3a9d25910fe0de3903147183a3cfec79d5"},{"commit":{"message":"Fix rearrange32s"},"files":[],"sha":"30c069aaf111ed32277516e2adf5603484021220"},{"commit":{"message":"Intrinsics for rearrange"},"files":[],"sha":"7ab595544529e89db7d23e997d7841311fae898c"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"0920abe7074444171761ad56baff0f70143bd9e0"},{"commit":{"message":"Workaround svml k1 clobbering"},"files":[],"sha":"57393d254ddd4443acc0deababd0935f845f343f"},{"commit":{"message":"Fix byte reductions incorrect register usage"},"files":[],"sha":"4a566a3dd53faf446833bc08903e2e341998d670"},{"commit":{"message":"Fix extract for 16f, 4d, and 16d"},"files":[],"sha":"27a88e5b0badaadae2263f2f9d6765e2002a3933"},{"commit":{"message":"Improve get intrinsic testing and fix failures"},"files":[],"sha":"66b23aca101484e72522fc78d0e89a745247b97f"},{"commit":{"message":"Fix byte512 max all intrinsic"},"files":[],"sha":"15f109a21c40763d8142176b2cfdb45a6be020a3"},{"commit":{"message":"Fix cast byte to double in AVX512"},"files":[],"sha":"5d2f82a52eba8833b2e428ef2b9c40357dae516f"},{"commit":{"message":"Make sure extract64x is marked as being evex"},"files":[],"sha":"a659d35de79d079986a9f4dca7b9a1cfaf1dbb50"},{"commit":{"message":"Fix trivial misspelling in cast ad format"},"files":[],"sha":"0d41a960f7124d48c9bd1d3004012af0c6d6d139"},{"commit":{"message":"Remove redundant MaxV and MinV matcher entries"},"files":[],"sha":"85d36fdc6529c2510cdeeb60d36700c558d06bd8"},{"commit":{"message":"Add more verbosity to svml testing output"},"files":[],"sha":"e8918690851ab66d0bc52deea7706918197a3b63"},{"commit":{"message":"Rearrange tests"},"files":[],"sha":"07481f581813bc10bb7438cf6517fabe7a50c116"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"02de6de93138a1d241b3f2d8750856617ffd8c8e"},{"commit":{"message":"Arithmetic Right Shift Fix for SKL"},"files":[],"sha":"760bc046864bca492b8a5a618eb5646d863e38d6"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"7d44e6adc19520157c55996b4b720848f198277d"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"6274b6c67d44167816856e09cdc7f7858447d043"},{"commit":{"message":"VectorAPI: JMH performance testing infrastructure"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-footer.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template"},{"filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-wrapper.template"}],"sha":"495a45e9a88b12102e0ac0df755a6fa0cbd2598d"},{"commit":{"message":"Long256 Mul fix for VectorAPI"},"files":[],"sha":"2a6a57c73da49e88abbeb49e1e8f80bd5225db8d"},{"commit":{"message":"Fix math test failures due to missing breaks"},"files":[],"sha":"6215d0bf8a2bc7ec52d22015b53a891198447eaa"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"849f7a3b9b9e74bbe33b391c932c57dc38b6b141"},{"commit":{"message":"Windows Support and Linux fix for SVML"},"files":[],"sha":"ad837a33d98aa0e6d5bfd02d807f8181db8bd3e1"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"035b2e7064542d945f2fc104702da1ed5936888b"},{"commit":{"message":"SVML Linux .s files and Windows build fix"},"files":[],"sha":"23a5e36f84304c4473e45a43e94eb8bb2ca5d509"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"236a0eb24a28b8857e92f81156e240c55dd3c426"},{"commit":{"message":"SVML Linux"},"files":[],"sha":"5788b5a333f822b666d8d169a6f9a03a6df0167d"},{"commit":{"message":" SKL Fixes - 3"},"files":[],"sha":"d637f5f204f29fff3757a42bedecfac49332f99b"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"5b5836a409a7f46eeca91b08452f61581a663928"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"f45611130b5834c442b7328a1cdc3d260bc7b8d4"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"0aea15fd88db3dc5aa85afccc4cdbf4ba4cd0ec6"},{"commit":{"message":"Merge"},"files":[],"sha":"f05fa061abbeb941a95ad09ec8ed8cc168de9502"},{"commit":{"message":"SKL Fixes - 2"},"files":[],"sha":"09a1f60b1e413a7078804ae0705659610fd45cad"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"033fbbfb667bb7d36352c1bbf4d0a879c78c02e1"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"ae9d07f4b52ef18b760e277f6ce8d38ff7d2e991"},{"commit":{"message":"VectorAPI Get Intrinsic Implementation"},"files":[],"sha":"575052a5a6001fc618ef4ada9bfade4041cff2e9"},{"commit":{"message":"Manual merge with default - fix merge error"},"files":[],"sha":"5cee1b78f11850f7192385b725a7aea51bec50f7"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"b35cf91d2a733064aa7863edc1f82baeb4618e72"},{"commit":{"message":"SKL Fixes for VectorAPI"},"files":[],"sha":"fda9da2e9e5b1cdd4fbf52529998ca5aaea9bc4b"},{"commit":{"message":"Exp implementation for Windows"},"files":[],"sha":"f4cc1fe09e14d5dc9eee574e9181df61f8cded6d"},{"commit":{"message":"VectorAPI: Shift operations testing coverage (2\/2)"},"files":[],"sha":"a74f353ad0eed52c14dcc67898a2f838e2f830c3"},{"commit":{"message":"VectorAPI: Shift operations testing coverage (1\/2)"},"files":[],"sha":"f529b35d850e041032f6b6e14252caa45e576fe4"},{"commit":{"message":"Reduce cast implementation"},"files":[],"sha":"518a18db6df209ed644460d82e96650dcb7cd0b0"},{"commit":{"message":"Shuffle constructors for iota and index mapping"},"files":[],"sha":"0190d48eca2ec851e17f9a8ac746f0c7f5fa1e07"},{"commit":{"message":"Merge"},"files":[],"sha":"115749d38281a018a8b40ae48789fdf3cc498efe"},{"commit":{"message":"VectorAPI: FMA operation testing coverage"},"files":[],"sha":"a61bfb275f42bae931d90b3e6d54d461237d7185"},{"commit":{"message":"Vector inserts: different refactorings"},"files":[],"sha":"2cf06ce542bfe08f5d0f6b778e38a63896c1155c"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"63dc460048d2be2b9baaa05aa8cb27e539e4ebc3"},{"commit":{"message":"VectorInsert Fixes"},"files":[],"sha":"2171489f6496019fa9a2244701687c973d8165d1"},{"commit":{"message":"- add methods to convert between Shuffle and Vector of the\n\nsame length\n- remove the Mask and Shuffle reshape\/resize\/rebracket methods\n- add cast to Mask and Shuffle that convert only to type\/shape\ncombination with the same length\n- modify Vector.cast that converts only to type\/shape combination\nwith the same length\n- change the specification of Shuffle to ensure lane elements\nwill be within the range of (0, length].\n- change the signature of Vector.shuffle to conform to the\nspecification changes of Shuffle\n- rename Vector shuffle and swizzle methods to rearrange\n- Add Shuffle.rearrange\n"},"files":[],"sha":"a9b420f7e8b82d4257577a675802d5dae801dfc6"},{"commit":{"message":"VectorAPI: Adding missing BoolReduction templates"},"files":[],"sha":"ec99ba99daa0dc7b7f2e2a67d9684b6af03e45fb"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"47f169142c82968adbbab03bbe31865327adfcad"},{"commit":{"message":"VectorInsert Intrinsics for VectorAPI"},"files":[],"sha":"1791bd89d3b5a314a974a847b6bda61bead249e3"},{"commit":{"message":"Fix MulReductionVLNode::ideal_reg()"},"files":[],"sha":"faf60e2e04fe624cc2e633c7e60c61750a7cc914"},{"commit":{"message":"Fix FMA intrinsic"},"files":[],"sha":"bfbc74d217ad63688bd84c9ecb58a87a4f10701c"},{"commit":{"message":"VectorAPI: anyTrue and allTrue test coverage"},"files":[],"sha":"5dd10f4d7f7fe25a0108a00ae82dcafb487125bb"},{"commit":{"message":"Few test framework improvements\n\n- Increase default vector loop count from 10 to 100\n- Print inputs when a test case fails (not just index)\n- Swap assertEquals call inputs because as per testng API,\nexpected is second value. Thus, the intrinsic result should\nbe the \"actual\" value while \"expected\" needs to be the scalar\ncalculation.\n"},"files":[],"sha":"648abc97b6f0462e90798578a792a6e3d42c1641"},{"commit":{"message":"Fix int64 max reduction"},"files":[],"sha":"862f689440374368b2bdaeef117b905a99d2414b"},{"commit":{"message":"Add corner condition test generators"},"files":[],"sha":"c6769e89afb4ceb65ba4aedcf024c993f0f1c273"},{"commit":{"message":"Merge"},"files":[],"sha":"c2f8df2ba242820cabb263c7d9eea11c7f427700"},{"commit":{"message":"Fix vector api tests for UseSSE=2"},"files":[],"sha":"43672ced03468eb690107b4ea1cf0a03cddefd2a"},{"commit":{"message":"Fix UseSSE=3 issues"},"files":[],"sha":"47fafd6dc73c0da364e4f816833552966b696a5a"},{"commit":{"message":"Fix more UseAVX=0 issues: pabs, long128 max, short128 min"},"files":[],"sha":"2f2a46fa3e36ede2aaff102246d5bfc9f78f386c"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"ba15368a540943b95309dab31056767c9e34f30c"},{"commit":{"message":"Remove stray debug printing"},"files":[],"sha":"aecc321113ca6b6d05c21e5019fdd54cb4049491"},{"commit":{"message":"Fix pabsd encoding"},"files":[],"sha":"c477e01f8694ceb14e325b236231c7e15496dcb4"},{"commit":{"message":"Intrinsification for math routines using optimized assembly"},"files":[],"sha":"7443e5944b064c7c6989e08507e2b867ecdc2b58"},{"commit":{"message":"Add FP math tests"},"files":[],"sha":"55d24f99941f0dc969b656e9a824b9c329513073"},{"commit":{"message":"Fix variable shift count masking\n\nThe java implementation implicitly truncates the shift count. The x86 vector instructions\nsaturate instead. Thus, we need to mask off the shift counts in vector before we intrinsify.\n"},"files":[],"sha":"729701ffca28551f497b8df41ef4fe2ab79f3127"},{"commit":{"message":"Fix pabsb and pabsw encoding"},"files":[],"sha":"04a09561ab0427b7ec90634eaa3606e0c08fc549"},{"commit":{"message":"Fix inline_vector_extract not registering node with gvn"},"files":[],"sha":"94f27131b385922f1f0bd5ff97ff91785b8c5363"},{"commit":{"message":"Fix more UseAVX=0 failures"},"files":[],"sha":"d228d5a95094f4911304d8821d694d2b27ed0483"},{"commit":{"message":"Mask accepting methods to use blend"},"files":[],"sha":"ea4e3185dab0ae378f0940650345dd5ad448e050"},{"commit":{"message":"Optimize the implementation of single"},"files":[],"sha":"3579e52b4718e43e5843805aeb18150ffd3b428a"},{"commit":{"message":"Unifiy load\/store access for arrays and buffers\n\nCleanup code removing unnecessary casts.\n"},"files":[],"sha":"2d516269345c23e188a02ae107f0be0920af9b64"},{"commit":{"message":"Load\/store tests\n\nRemove relative load\/store operations on buffers.\n"},"files":[],"sha":"f46c29524a0fa2ee33d5e06ed67af91f0d08ab53"},{"commit":{"message":"Intrinsification support for with and get"},"files":[],"sha":"87ce1459147db7243ebb9e6ec636cead32410d1c"},{"commit":{"message":"Synchronize code generated from templates"},"files":[],"sha":"219d240b8ed07438b530febd96f2bbab204cf579"},{"commit":{"message":"Intrinsic for mulAll for byte and short"},"files":[],"sha":"da28e08faf1c385a0c318cc356de55de815118b1"},{"commit":{"message":"Fix some test failures with UseAVX=0 and UseAVX=1"},"files":[],"sha":"7cc4decc539e54d13d64ebce188ca981d10cf083"},{"commit":{"message":"VectorAPI Intrinsics for Min and Max Reduction"},"files":[],"sha":"a29748e47baaa5c65a2a53bb9f2ee2f0c7313b10"},{"commit":{"message":"Add reduction operations accepting a mask"},"files":[],"sha":"39edb74754bea9bbe71ba8e031ce9e3393a0bb61"},{"commit":{"message":"Optimize bit rotate operations composing from bit shifting operations"},"files":[],"sha":"50cdc1255bc53ea5fc889b7a10daaae79ba618fd"},{"commit":{"message":"Remove saturation operations"},"files":[],"sha":"2d395171dda01a1ae5bf2949fee683c936c50642"},{"commit":{"message":"Restrict bit shifting and rotating operations to int and long"},"files":[],"sha":"b5d8d14224a0f86e9e2220de4a14ec2832f3be86"},{"commit":{"message":"Make methods abstract on public primitive vector types that are\n\noveridden on the private concrete vector types, thus ensuring\nthere is just one non-intrinsic implementation.\n"},"files":[],"sha":"c1ef399700246ae0309ff32da3dec0615f095eca"},{"commit":{"message":"Into operations should not capture this"},"files":[],"sha":"66e8d9d399c06604df103d76bb3f3289942ba05a"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"a31cf6775ed56d7ebd428963fa744def621bc66c"},{"commit":{"message":"Add a test that currently only reports if a non-abstract method\n\non primitive vector or species class is:\n1) overridden by a method on a concrete implementation; or\n2) is not overridden on a concrete implementation.\nThe first case implies the method can be abstract, the\nsecond case may imply a missing intrinsic or is non-optimal\nfor the primtive type and shape.\n"},"files":[],"sha":"79e6fa34ddc097857afb0c608abc96968220c939"},{"commit":{"message":"Docs for floating point operations"},"files":[],"sha":"90e2b029f338e10cab424b33377835b705942ed0"},{"commit":{"message":"Documentation for bitwise and reduction operations"},"files":[],"sha":"4dc9d244500dbb9bb83ab0998c49ae9f24b20d05"},{"commit":{"message":"Documentation of Vector operations and those of sub-types for input scalars"},"files":[],"sha":"8d2d3e596e5b41dff6b42a90d165e4e276a0f864"},{"commit":{"message":"Change Vector.speciesInstance to Vector.species\n\nPatched X-VectorBits.java.template to be consistent with\ngenerated source.\n"},"files":[],"sha":"40758c7bc8ac4797ba996196c5fceb97cd5920f0"},{"commit":{"message":"OrAll and XorAll intrinsics for short and byte"},"files":[],"sha":"e7182e7e112a6535a2f563cb3f2ea4aea78ee63b"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"753ed59acc8c6a15d0eb38769e9457785df6e801"},{"commit":{"message":"VectorAPI: Neg intrinsics for byte, short and long types"},"files":[],"sha":"06e89e592f38c79d0ffcb9e21f84f1b4cc3e553f"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"bec17878cf588193a54c8687582ac3c5f2dfa72f"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"45a89400704aac1be3125f79c441062a33838f12"},{"commit":{"message":"Implement fromByteArray, intoByteArray, fromByteBuffer, intoByteBuffer, scalars"},"files":[],"sha":"dab480c6e7bc3cad569f103a9d2a0c5062f0c941"},{"commit":{"message":"Support for mask not"},"files":[],"sha":"356d86b12bbf7f2cff6a22881ab93272464cd664"},{"commit":{"message":"Fix for min and max intrinsics"},"files":[],"sha":"37df42001d3740409d03a32defb4ed5f683f3e05"},{"commit":{"message":"SubAll intrinsics for byte and short types"},"files":[],"sha":"bec9f705b430d331d6d686aa39116539153fad15"},{"commit":{"message":"SubAll intrinsics for float+double"},"files":[],"sha":"737410625c99c3129b9cf74c6d51fcd1ce5da2e2"},{"commit":{"message":"Fix release build"},"files":[],"sha":"32a6ec9eb905730153ce1ec101cdab810244ff74"},{"commit":{"message":"Fix for min and max intrinsics"},"files":[],"sha":"b43c1ca5a17e8b91b85093bffdcd2c94cbd17522"},{"commit":{"message":"Fix min\/max for long assert failure"},"files":[],"sha":"cc7afd1130fa6ba17d2830342b76bcba2c4a27e6"},{"commit":{"message":"Vector cast support"},"files":[],"sha":"6eada2eda1cea79b303069f5227131444611e39b"},{"commit":{"message":"Vector cast tests"},"files":[],"sha":"caef23c327d6a03bd226185503784175830b09c0"},{"commit":{"message":"Variable Shift vector Intrinsics for int and long"},"files":[],"sha":"c5155bcd3fc725ae4c93dd378c08939894dbe1b8"},{"commit":{"message":"Abs intrinsic for byte, short and long"},"files":[],"sha":"3c1f0b675c9155bf50783e18c180ba2403629331"},{"commit":{"message":"VectorIntrinsics::reinterpret() computes wrong resulting box type for vector masks"},"files":[],"sha":"583742bb8b4bec61898f551323d31d6c6a8d27a3"},{"commit":{"message":"Fix includes when building w\/o precompiled headers"},"files":[],"sha":"e7096c8f20d251c98e660a32ecd7227cc27d4794"},{"commit":{"message":"Variable Shift vector Intrinsics for int and long"},"files":[],"sha":"28102fb86bcbc349d34161479713c051363c38bb"},{"commit":{"message":"Min and Max vector Intrinsics for all types and sizes"},"files":[],"sha":"f809e6602a27902f9d08ec38ec860bb5dc87dc1c"},{"commit":{"message":"Intrinsic support for resize and rebracket\n\n-Cleaned up rebracket, resize, and reshape implementations\n-Implemented resize\n-Moved rebracket intrinsic implementation to species\n-Added resize tests\n-Fixed issue with vector phi merges\n"},"files":[],"sha":"f4304a6cdd76c56a278c981ce25b807b8f2243e5"},{"commit":{"message":"ByteBuffers need to use native order\n\nAll ByteBuffers need to use native order since intrinsification leads\nto use of vector operations with native order. Additionally, using\nnative order means there is no preferential treatment to ordering\nthat would create unnecessary overheads.\n"},"files":[],"sha":"9233cb3e4a1e9b2fb4986538b47346d95837b7b9"},{"commit":{"message":"More docs\n\nAdded Species.shuffleFromVector(IntVector ).\n"},"files":[],"sha":"9065919bd19c06be802d7469082b8129645a9824"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"b4f3646142629445459a412ea60d886f9535ce5f"},{"commit":{"message":"Manual merge with default"},"files":[],"sha":"c321c3fa0d42c91b57a486b1dab704aa934b3a91"},{"commit":{"message":"More docs"},"files":[],"sha":"a4ca58ee9b29f7ae2863bfee2f085ee344fb1890"},{"commit":{"message":"More JavaDoc"},"files":[],"sha":"a4c6a27ef9ff4d656372f781d283f049dbb3e0ec"},{"commit":{"message":"Fix sqrt vector intrinsic and add test for sqrt with small fix to test infra for windows\/cygwin"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"}],"sha":"273cf11f0babc6088b2c16314120a5c8a62e71ca"},{"commit":{"message":"AddAll & andAll vector Intrinsics for byte and short"},"files":[],"sha":"6bc6b6fa07bde07b18f6230b2dac9b0d54c71178"},{"commit":{"message":"Testing infra: Custom loop iteration count"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"}],"sha":"4deb9dc88c4222905a2a8d7b828b99274011b6e2"},{"commit":{"message":"Fix issues after conversion to use primitive types\n\n-class for rebracket for the \"to\" conversion was wrongfully changed\n-hotspot implementation for rebracket required boxed type\n-preferredSpeciesInstance did not change its call to include primitive type\n"},"files":[],"sha":"ad387c4f1686ec5479ec9ef06dc4514dfe24ece2"},{"commit":{"message":"Element type is changed to be a primitive type and not\n\nthe boxed type.\n"},"files":[],"sha":"81fd6c1b263f2b6c351d58e6442c79c5c308d0a8"},{"commit":{"message":"Add species methods on vector sub-types which can be used to\n\navoid casting a returned species to its sub-type.\n"},"files":[],"sha":"3524f4a49236e5fa0b2fcc225bbfcd1f2ecbe128"},{"commit":{"message":"Clean up variable shifts and intOrLong flag\n\nTwo changes contained in this patch:\n- intOrlong has been renamed to be consistent with others. It is now intOrLong.\nThis led to a place where it was intended to be used to correctly generate now.\n- variable shifts are only supported for int and long. This was added from\na recommendation on panama but initial discussion and plan was specifically\nspecified only for int and long.\n"},"files":[],"sha":"2314c2e84e68261908626a892b768e259cf2dc35"},{"commit":{"message":"Testing Reduction ops"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"}],"sha":"7f866514ecd9c7107887afd4c87fd0e0c11c6364"},{"commit":{"message":"Documentation for TSpecies.fromArray"},"files":[],"sha":"e95d99c8a342ccc074460f1e0053d7c0d6c3f73f"},{"commit":{"message":"More docs"},"files":[],"sha":"c05f9799ee0c4feffdfe666fb315450e962f46fa"},{"commit":{"message":"SubAll intrinsic implementation"},"files":[],"sha":"6764f93d0a8fbe9c47589bf5cc04b559a87bf508"},{"commit":{"message":"Expand doc on Vector and operations"},"files":[],"sha":"2fbb78c7476a5876ebc259e75c9dca884f9b5d55"},{"commit":{"message":"A start on JavaDoc of Vector"},"files":[],"sha":"5cfa94a23d5c5d95e8609e42ae4bc30474b43fed"},{"commit":{"message":"OrAll & xorAll for Int\/Long intrinsics"},"files":[],"sha":"4d1c747dc7fd7d99d3f1a644bde0ac113ab340fd"},{"commit":{"message":"Ensure covariant overrides for methods of Vector sub-types"},"files":[],"sha":"c8dfde072c66d9487f8422d5d0c634bff4cf2d61"},{"commit":{"message":"Make Vector\/Species\/Shape abstract classes and thereby consistent\n\nwith the public sub-types for primitive specializations and Mask\/Shuffle.\nAll classes are only extensible from within the same package.\nThis design decision may be revisted, especially when sealing is possible.\nAs such the design will not be perturbed to make it hard to swtich back\nfrom classes to interfaces.\n"},"files":[],"sha":"8a470db49985448665d1302974e1d501507bf8fb"},{"commit":{"message":"Remove unused NotNode::Value()"},"files":[],"sha":"a7d1be6889203db6f84f03176649cf9a0f0d781b"},{"commit":{"message":"Intrinsic for not for all types and sizes"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"}],"sha":"52a17d123a4a552158264b3ce6adb48e54e62f9e"},{"commit":{"message":"Make test method fully generic to shape"},"files":[],"sha":"75b931dc69bf24f5a03e347a75ecfa5baa0ecf9e"},{"commit":{"message":"Vector hash algorithm generic to single shape"},"files":[],"sha":"b7694def7a465fa1a89e3cae6a49cd706e280dc8"},{"commit":{"message":"Methods have been added to create Mask or Shuffle\n\nfrom an array at a index, and likewise store values\ninto an array at an index.\n\nFor consistency *Vector.toArray methods are added.\n\nMethods have been renamed for consistency:\n\n constantMask -> maskFromValues\n trueMask -> maskAllTrue\n falseMask -> maskAllFalse\n constantShuffle -> shuffleFromValues\n"},"files":[],"sha":"538c0191f75bad8ed49ee5a33a3a92d821d7b350"},{"commit":{"message":"Moved floorMod, floorDiv, and div on integral operations to the\n\nhelper classes, since these cannot be optimized on x86 right now.\nThe operations floorDiv and div were merged into div, since the\nimplementations were the same, and floorMod was renamed to mod.\n"},"files":[],"sha":"7b5d306a390df02ca0851296da5dcb2afaf01305"},{"commit":{"message":"Testing Infrastructure minor bug fixing"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"}],"sha":"e777a4a8e39d09f14d62c652e470d00c4720c996"},{"commit":{"message":"Vector API Blend 512 support\n\nReviewed-by:rlupusoru\n"},"files":[],"sha":"e8d103fc89ba44c77c616ceeaed53dc0378ef2bf"},{"commit":{"message":"Refactor tests to use data providers"},"files":[],"sha":"09933cf13ca0494a17f81aa1c89936e65ad8e8a4"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"fcc80de44fab620425cf84155d3ed0484a01c38c"},{"commit":{"message":"Intrinsics for all Vector API comparisons (<,>,<=,>=,==,!=) for all types and sizes"},"files":[],"sha":"cc71a038e06abaa701fc3f6137887449a93dd54f"},{"commit":{"message":"Fix shift count operand issue"},"files":[],"sha":"e270fd24b46516e5997aa3dc9f671829e3bd64d3"},{"commit":{"message":"Intrinsic for andAll for long and byte"},"files":[],"sha":"c468fbf37b4809102b7c1b1f587ea5a1cd4be726"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"aff3b698b32e252a6216389a97bc72ddb839f565"},{"commit":{"message":"Fix repeated vector box expansion attempts"},"files":[],"sha":"ec59c11a8d24032aeec456349e207f96fb7a169d"},{"commit":{"message":"Move reshape\/cast functionality to species. Methods on Vector\/Mask\/Shuffle\n\ndefer to species.\n"},"files":[],"sha":"94dc02204971d6c6874a5fcf42ec9ce6e11bee89"},{"commit":{"message":"Fix for byte mul"},"files":[],"sha":"612bebde313b000dca2a7b0bbec6b34cd02eeed3"},{"commit":{"message":"Add missing changes in VectorBits.java after mask rematerialization support"},"files":[],"sha":"04e22012517ee66587f79a544ad1bf6355c7d106"},{"commit":{"message":"Use custom assertions to avoid creation of assertion messages\n\nthat can result in more GC and slowing down test execution.\n"},"files":[],"sha":"1bef2e38a9ee05da8922bf642c03d0e8d3120a95"},{"commit":{"message":"C2: Improve diagnosability"},"files":[],"sha":"ec7475542e186639c0bdfca9254959c1ea7f5ecc"},{"commit":{"message":"Rematerialization support for vector masks\n\nContributed-by: vlivanov, rlupusoru\n"},"files":[],"sha":"5c22701fc333f650c43f8569c85d2affe802ee42"},{"commit":{"message":"Port the rest of vector operations to generalized intrinsics\n\nContributed-by: vlivanov, rlupusoru\n"},"files":[],"sha":"6d4dc349136cea16947b6b76834e28f6ae76d801"},{"commit":{"message":"Fix compiler warning"},"files":[],"sha":"57ecaadfb940c37e28f23a348f39ca0f963fed3c"},{"commit":{"message":"Intrinsics for abs(), neg(), sqrt(), and fma()"},"files":[],"sha":"af7fe8043020e6e03e83fbd111b792d2b85b0a5c"},{"commit":{"message":"Vector intrinsics for long and byte mul"},"files":[],"sha":"80d0b60139cad8a6eca8c7b3939b48f79d265039"},{"commit":{"message":"Define concrete Shuffle implementations for type and shape\n\nClean up Shuffle interface.\n"},"files":[],"sha":"3b9a53378ee012e9831489e7d8ec99e8c8eac065"},{"commit":{"message":"Fix missing include after merge"},"files":[],"sha":"5bd63c8ae7be84a352cbf15d831aad815885afb2"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"b9119d1f1fa3290e447384d04b33cc5c0a1498dc"},{"commit":{"message":"Temporary fix for aliasing problems between scalar and vector accesses into backing array"},"files":[],"sha":"35319eee85adf253365186140e4a148683994b78"},{"commit":{"message":"Fix vneg2I_reg and vneg4I_reg AD rules"},"files":[],"sha":"c0185f8f21e32a165875fde2c3f670001dee93cc"},{"commit":{"message":"Support for masks in AVX512 + more mask enhancements including complete boxing\n\n-AVX512 mask support by converting k mask to vector registers\n-Improved architecture featurea checking\n-Complete mask boxing support\n-Fix for generalized intrinsics mulAll\n"},"files":[],"sha":"eae24a7dbc4b45a27e343058bf925065140d4006"},{"commit":{"message":"Dependent shift operations\n\nShift operations with masks.\n"},"files":[],"sha":"7b9cc24cb50788fdfc674bc09e8aaf59ef0deec5"},{"commit":{"message":"Binary operations accepting a scalar value\n\nImplementations are pushed down to the concrete implementations\nto directly access the species.\n"},"files":[],"sha":"e02240a2b160abd435ed8fbe9818f83c344d40c3"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"d150e57fdfc394992ded8d0b650f6f615dcf54fe"},{"commit":{"message":"Fixes for generalized intrinsics\n\n-trueMask\/falseMask calling itself leading to StackOverflow\n-Incorrect mask or\/and default implementation\n-Incorrect starting value for mulAll\n"},"files":[],"sha":"032111e4fff693ee886ba2a72cc235328552909b"},{"commit":{"message":"Improve array range checks for vector accesses"},"files":[],"sha":"b880b8e1d38bbb3313b2331cc3f437153d7cc230"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"5a078d9b3b804246625f29c201171a9e9ecd9b01"},{"commit":{"message":"Vector API Testing Infrastructure"},"files":[{"filename":"test\/jdk\/jdk\/incubator\/vector\/config.sh"}],"sha":"8a47df51af4e68e2b7bcadcef2909b5d7afbcc62"},{"commit":{"message":"Improve JVMState dump output"},"files":[],"sha":"a52f7e740b97082034a43b1321645d893ce403c3"},{"commit":{"message":"Improve C2 EA diagnostic output"},"files":[],"sha":"1eed5ed123acf082991b7e3faa95b680cf543a82"},{"commit":{"message":"Vector box elimination improvements"},"files":[],"sha":"b125b8f4a5b3a158a99213286c99367ae66efbb2"},{"commit":{"message":"Generalized intrinsics for vector operations (first batch)"},"files":[],"sha":"c9bb459a4dc373c2435143fd797409fea130adba"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"86bbf37490cd59016ef8e04e5f6f1f9e73804bc4"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"cf2266756f7eb3862ec8c870bf5ce26eace6ba7f"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"c394db06989b4f7ed90633b30fffd4056ac5a46a"},{"commit":{"message":"Move operations that are not candidates for intrinsification to a helper class"},"files":[],"sha":"f33a0788519a3abaf506048537d3dcb0751227cc"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"499bdf5e7de79f9dc8473504b81b13cf2b7a9a5c"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"0182e1d921811a81717e34edfa0ad0c54a82b711"},{"commit":{"message":"Automatic merge with default"},"files":[],"sha":"0264fe4785c705e6145b1f1d19eba3d0f33a0dc5"},{"commit":{"message":"Manual merge with default\n\nMerged vectorIntrinsics branch with default.\nTrivial conflicts had to be addressed:\n-assembler conflicts around blending and comparisons generating masks\n-use of new proj_out_or_null in cases where null was allowed\n"},"files":[],"sha":"c66be32a00baba9b6d9b1a0b30a77015e61ef2a7"},{"commit":{"message":"Make Vector.Shape non-generic. As previously expressed it was not offering\n\nany additional value with regards to ensuring Vectors with the same\ntype parameters can interoperate. As a result declarations are simpler.\n"},"files":[],"sha":"337553a75965b89fdbca6d31310a26b148364252"},{"commit":{"message":"Add note to consider methods for leading\/trailing zeros on mask"},"files":[],"sha":"3310224c69aa252092693f415b0a6c93b4ac66ba"},{"commit":{"message":"Add a method to obtain a preferred vector species, selecting\n\nthe maximum sized shape for the element type supported by the\nhardware.\n"},"files":[],"sha":"7dcaeed613e63f6c961efb4c4bfee108c146d830"},{"commit":{"message":"Fix build error due to utility method being used in non-assert scenario"},"files":[],"sha":"c359510d56dac8b710faabb5aded9d5926f053e6"},{"commit":{"message":"Neg, MulAll, and Abs support for int, float, and double"},"files":[],"sha":"6da9ac00acafe56a49f659134f0e96bdb66c912c"},{"commit":{"message":"Blend and improved mask support\n\n- Mask loading from boolean array is complete for all combinations\n- Blending is supported for all possible types and sizes (except 512)\n- Masked loads, stores, and several binary operations are now supported via\nuse of blend\n- Fix for a memory ordering issue\n- Fix for rebracketing intrinsification which requires shape retention\n"},"files":[],"sha":"2bb5da4f407e2b1de45df11089c51db7eb9786c3"},{"commit":{"message":"Fix mismatch index computation in VectorArrays.mismatch()"},"files":[],"sha":"bb074dde60532184b1dd8cfc4b7f05176d5c6c44"},{"commit":{"message":"Fix IGV"},"files":[],"sha":"d44b0d3de1eaace718598ef7f212e6a78b9258ed"},{"commit":{"message":"Fix path to Spp in gen-src.sh"},"files":[],"sha":"73fd3e1ae84715a6f052cbd8016a25c2f4b5167e"},{"commit":{"message":"Fix build w\/ precompiled headers turned off"},"files":[],"sha":"631c44e6607d287daad06398233921f2da89aa5e"},{"commit":{"message":"Integer greaterThan implementation has been further optimized"},"files":[],"sha":"08b32b6cf2d72a318ccabd48e62165878311e2fd"},{"commit":{"message":"Fix compile error after readability fix"},"files":[],"sha":"0f6d967f37caa61793206b303fbcaae7ac2c98dd"},{"commit":{"message":"When mask type is boolean, no need to insert mask transition nodes"},"files":[],"sha":"718b6460f8f9e871147a4e93ebbf3931d1a91cf9"},{"commit":{"message":"Add todo comments to keep track of 3 concerns"},"files":[],"sha":"7f18833cff185e67fcf8999d18401d3bf8a24294"},{"commit":{"message":"Fix some readability issues in vector intrinsics dispatcher"},"files":[],"sha":"5a0e2703d9d45d4327922e0742856387e96e088a"},{"commit":{"message":"Update VectorLoadMask and VectorUnloadMask with information about desired mask size"},"files":[],"sha":"b6e3e1fe238ff7eb5e2075180de0f8cd1cd10f2d"},{"commit":{"message":"Add all Vector API class information to ciType\n\nThis work adds all Vector API classes to be recognized as a special type.\nThere is a lot of code repetition so at some point using a macro to expand\nwould be useful.\n"},"files":[],"sha":"839e9ce735f43cd7e05afc09552b18b64d79a3b2"},{"commit":{"message":"Add missing byte, short, and long to class name recovery technique"},"files":[],"sha":"ca77e48f8768cfc185e06121b7291a85a405cc7a"},{"commit":{"message":"Add hotspot intrinsic flag to greaterThan, or, xor, and, shiftL, shiftR, AShiftR"},"files":[],"sha":"54ad17004e3de943c1dcbe2d77ee4aa03925a5d1"},{"commit":{"message":"Implement IntVector and, or, xor, shiftL, shiftR, AShiftR"},"files":[],"sha":"db0ba325ee81c4037f9e4030507b5a17b93b6444"},{"commit":{"message":"Add greaterThan support for float and int"},"files":[],"sha":"4e547068db90a44751936efa84dd9086110f90b6"},{"commit":{"message":"Add support for simple Vector rebracket that does not change resulting shape"},"files":[],"sha":"d4078f2edc81ff8183916c35863c84955251f40e"},{"commit":{"message":"Make vector stores change memory state\n\nTo help maintain proper ordering and also prevent weird memory\ncontrol being created (also due to fact that VectorBox exposes\na memory projection), simply create a new memory state when\nstores are involved.\n"},"files":[],"sha":"6b8d1a1b4c0375e52667c4e6a4c7a4a00686ef9c"},{"commit":{"message":"Add flag to capture missing intrinsics when running application\n\nThe flag -XX:+DebugVectorApiMissingIntrinsics is useful to find\nwhat Vector API methods are not intrinsified. This tends to print\nmore than necessary including lambda methods which are called due\nto higher level API functionality being called, but it is a good\nguide to help detect what is missing.\n"},"files":[],"sha":"d060ee2830b75e611983c37250adb69ecb815a52"},{"commit":{"message":"Mark trueMask and falseMask as hotspot intrinsics"},"files":[],"sha":"d08ba1f28e92c1d7a54c260e3235c530b1e45401"},{"commit":{"message":"Add support for mask ops and mask making\n\nAdded support for code generation for or\/and operation on masks.\n\nAlso, fixed the issue related to intrinsification of calls to trueMask\nand falseMask. Unfortunately, due to the way intrinsics dispatch works,\nI needed to add an intrinsic for every class currently supported - this\nshould be cleaned up in future.\n"},"files":[],"sha":"ba7482b3e5b81098ffb663899f8bdd19271c5c39"},{"commit":{"message":"Add more diagnostic error messages when DebugVectorApi is set"},"files":[],"sha":"520b16470d6c4cd0dcd8edfab9de240631ebbc4e"},{"commit":{"message":"Generate vector from a sequence of scalar values\n\nCurrently implemented using varargs so as not to expose\nthe concrete type+shape implementations.\n"},"files":[],"sha":"d4562987e72fa75a724160142fc82269590847b6"},{"commit":{"message":"Support larger index mapping arrays by providing an offset to\n\nthe gather\/scatter from\/into array.\n"},"files":[],"sha":"af585c516fe930f684da10d7879b62e97725d8bb"},{"commit":{"message":"Gather\/scatter with from\/toArray for primitive arrays\n\nAn int[] array provides a relative mapping from vector indexes\nto array indexes. The mapping array length may be greater than\nthe vector length.\nTODO: ByteBuffer\/byte[]\n"},"files":[],"sha":"65c4bfad38709a9ff2149d7bd0fb6ccf8cba0496"},{"commit":{"message":"Fix IGV dump when incremental inlining fails"},"files":[],"sha":"fe05a8a13e178e662d325e6adbfea17515527131"},{"commit":{"message":"Swap blend instruction operands to match updated API semantics"},"files":[],"sha":"cbad21a64afc83f26195171836a6ccc0a612ae08"},{"commit":{"message":"Add sanity check for Vector API class before trying to intrinsify\n\nLast commit accidentally removed the check that recovered type must\nbe known Vector API class. This is because mapping information like\ntype and size must be recovered and this is only possible with a\nmanual mapping at this time. This check should not be needed when\nVector API intrinsification support is complete.\n"},"files":[],"sha":"750f30fb06934d3ddb2b07ed76ad176e7f9f9c9b"},{"commit":{"message":"Blend needs to select second source when mask is true\n\nThe blend operation currently selects from the first operand when mask bits\nare set to true. This patch updates it so it selects from second source instead.\nAlthough it can be argued both ways, this change will keep the blend operation\nconsistent with all others that use mask. Namely, the thought process works as\nfollows: if mask is true, apply operation. In case of blend, it should be the\nsame: if mask is true, apply operation. Since the operation to be applied is blend,\nit means that when mask is true, the blending should be happening. So therefore,\nwhen mask is true, select from second operand. When mask is false, keep original\nresult (aka no blend happened).\n\nIn addition to correcting semantic intent to be consistent with rest of API using\nmasks, this change also makes it consistent with x86 blend instruction which uses\nsimilar logic and selects from second source when mask is true.\n"},"files":[],"sha":"3bb875fb8e02f6a0cda04c03830a43a32d430c34"},{"commit":{"message":"Use correct Java operators for arithmetic shift right (>>)\n\nand logical shift right (>>>)\n"},"files":[],"sha":"3156ebe4e0afa682b95c376a50ae52a301551f06"},{"commit":{"message":"Finish boxing support for masks\n\nAfter mask specialization for type and shape, the compiler has now\nbeen updated to support the new specialized classes. This work includes\nbeing able to recover information to know what kind of mask to create.\nBoxing support is fully implemented now.\n"},"files":[],"sha":"33ed54c1096779578432866daea3ef1bcbd67161"},{"commit":{"message":"Introduce C2-specific query: getMaxVectorSize()"},"files":[],"sha":"3b911e5e70d055eff7d29afb568ae60189924a97"},{"commit":{"message":"Fix build issues on Solaris"},"files":[],"sha":"5a43147d87fadfd6950dd41a5c4e1c8a4940cadd"},{"commit":{"message":"Reduction all operations should prefix with the scalar operation name"},"files":[],"sha":"18b9895607eb9040a34d4cd5b844ff58e8c803cb"},{"commit":{"message":"Specialize masks"},"files":[],"sha":"4868483bd12f290d9143002a9a4f70254e55d5af"},{"commit":{"message":"Add support for generation of VectorBox\n\nVectorBox is unconditionally placed in graph along with allocations\nduring the initial intrinsifications. However, VectorBox is considered\nfor elimination when its output object is not being used.\n\nIn order to also deal with VectorMask boxing, additional nodes have\nbeen added to \"convert\" between internal representation of masks\nto the array representation used in GenericMask.\n"},"files":[],"sha":"e128c6db33d1d795c45e70c63ddf1e6a1b3885c7"},{"commit":{"message":"Fix issue with zero index for shuffle\/swizzle"},"files":[],"sha":"95cd60295575049d68895e308690686958cfbdad"},{"commit":{"message":"Vector API: trueMask, falseMask, non-abstract zero\n\n-trueMask and falseMask methods were added to be able to initialize masks.\n-zero method was made non-abstract due to limitation in how intrinsics dispatching works.\n"},"files":[],"sha":"df9810cbdd8b0df5d56ffb655d55e99f34bd0078"},{"commit":{"message":"Vector API: Derive return box type from receiver\n\nCurrently, Vector API requires for the type profile to be adequate to recover\ntypes from return profile. This means using -XX:TypeProfileLevel=121.\nHowever, it is possible to recover type from receiver by deriving it based\non method and receiver type.\n"},"files":[],"sha":"3331bf7e42db5fd5de7b17b14415a1db5081b9c2"},{"commit":{"message":"Vector Unbox, masking support, and more for Vector API\n\n- Adds support to generate vptest and a node that represents these semantics. This\nis used for mask checking methods \"anyTrue\" and \"allTrue\".\n- Added enum bounds for Vector API methods to improve robustness in checking whether\na method is a Vector API method.\n- Fixed several bugs related to wrong class being set for VectorBox. Namely, the\nreceiver type was always set as the class, but in reality, the return type was correct.\n- Added some more support around masks and some casting.\n- Added support for Vector unboxing: generation of vector phis and also actually unbox\nfrom Vector object.\n- Added flag to turn off unstable_if speculation named \"DisableUnstableIfOpt\". This is\nuseful when testing because it reduces chances of getting to runtime from deopt.\n- Added disabled support for allocations for VectorBox. This is not yet enabled because\nVectorBox nodes are removed but leave behind the allocations which adds overhead.\n- For mask support, it was ensured that VectorBox and VectorUnbox also work with it.\n- Invariant nodes should be hoistable now.\n- Now support int128, int256, int512, float128, float256, float512, and double128,\ndouble256, and double512.\n"},"files":[],"sha":"f4d59ff92acf2a65ef38ffa20b606e81870750d7"},{"commit":{"message":"Vector API tests"},"files":[],"sha":"c0f81edf67d65da7cb0a22c549673a0db4816e2d"},{"commit":{"message":"Intrinsic-based Vector API"},"files":[],"sha":"80038edca57a5439ec66f54ce1639042ab846978"}]