{"files":[{"patch":"@@ -212,1 +212,2 @@\n-    if ((ecmaMode.isStrict() || (valueForNode.m_type && !(valueForNode.m_type & ~SpecObject))) && valueForNode.m_structure.isFinite()) {\n+    bool onlyObjects = valueForNode.m_type && !(valueForNode.m_type & ~SpecObject);\n+    if ((ecmaMode.isStrict() || onlyObjects) && valueForNode.m_structure.isFinite()) {\n@@ -229,0 +230,2 @@\n+\n+        \/\/ This is correct for strict mode even if this can have non objects, since the right semantics is Identity.\n@@ -231,1 +234,3 @@\n-        if (allStructuresAreJSScope) {\n+\n+        \/\/ But this folding is available only if input is always an object.\n+        if (onlyObjects && allStructuresAreJSScope) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGAbstractInterpreterInlines.h","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    if (guard == FetchHeaders::Guard::RequestNoCors && !combinedValue.isEmpty() && !isSimpleHeader(name, combinedValue))\n+    if (guard == FetchHeaders::Guard::RequestNoCors && !isSimpleHeader(name, combinedValue))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchHeaders.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -441,1 +441,1 @@\n-    if (expectedCategory == CalculationCategory::Other) {\n+    if (!expectedCategory || expectedCategory == CalculationCategory::Other) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/calc\/CSSCalcOperationNode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6748,1 +6748,1 @@\n-        auto* document = allDocumentsMap().get(documentID);\n+        RefPtr document = allDocumentsMap().get(documentID);\n@@ -6762,1 +6762,2 @@\n-    Vector<Task> pendingTasks = WTFMove(m_pendingTasks);\n+    Ref protectedThis { *this };\n+    auto pendingTasks = std::exchange(m_pendingTasks, Vector<Task> { });\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"EventLoop.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLInputElement.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-        if (m_shouldCallSourcesChanged)\n+        if (m_shouldCallSourcesChanged && parent)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLSourceElement.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-static const URL& blockedPageURL()\n+const URL& ContentFilter::blockedPageURL()\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ContentFilter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,0 +82,2 @@\n+    WEBCORE_EXPORT static const URL& blockedPageURL();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ContentFilter.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,2 +113,2 @@\n-    const char* mimeTypes[] = {\n-        \"video\/holepunch\"\n+    const ASCIILiteral mimeTypes[] = {\n+        \"video\/holepunch\"_s\n@@ -118,1 +118,1 @@\n-        cache.get().add(String(mimeTypes[i]));\n+        cache.get().add(mimeTypes[i]);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/holepunch\/MediaPlayerPrivateHolePunch.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,3 @@\n+#if USE(GTK4)\n+    unsigned numThreads = 1;\n+#else\n@@ -41,0 +44,1 @@\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/nicosia\/NicosiaPaintingEngine.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -375,1 +375,0 @@\n-    auto domainIterator = m_navigatedToWithLinkDecorationByPrevalentResource.find(*pageID);\n@@ -377,0 +376,4 @@\n+    if (!pageID)\n+        return std::nullopt;\n+\n+    auto domainIterator = m_navigatedToWithLinkDecorationByPrevalentResource.find(*pageID);\n@@ -385,0 +388,1 @@\n+    auto domainIterator = m_navigatedToWithLinkDecorationByPrevalentResource.find(*pageID);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/network\/NetworkStorageSession.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    bool wasRolledBackBySqlite() const;\n+    WEBCORE_EXPORT bool wasRolledBackBySqlite() const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/sql\/SQLiteTransaction.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3265,1 +3265,1 @@\n-            paintList(negativeZOrderLayers(), currentContext, localPaintingInfo, localPaintFlags);\n+            paintList(negativeZOrderLayers(), currentContext, paintingInfo, localPaintFlags);\n@@ -3282,1 +3282,1 @@\n-            paintList(normalFlowLayers(), currentContext, localPaintingInfo, localPaintFlags);\n+            paintList(normalFlowLayers(), currentContext, paintingInfo, localPaintFlags);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-    void* result;\n+    void* result = nullptr;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/bmalloc\/bmalloc\/DebugHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}