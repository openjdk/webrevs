{"files":[{"patch":"@@ -40,0 +40,2 @@\n+\n+import javafx.application.Application;\n@@ -41,1 +43,2 @@\n-import junit.framework.AssertionFailedError;\n+import javafx.stage.Stage;\n+\n@@ -44,0 +47,2 @@\n+import junit.framework.AssertionFailedError;\n+\n@@ -48,2 +53,3 @@\n-\n-    \/\/ Test timeout value in milliseconds\n+    \/** Default startup timeout value in seconds *\/\n+    public static final int STARTUP_TIMEOUT = 15;\n+    \/** Test timeout value in milliseconds *\/\n@@ -297,0 +303,96 @@\n+\n+    \/**\n+     * Launches an FX application, at the same time ensuring that it has been\n+     * actually launched within {@link #STARTUP_TIMEOUT} (15 seconds).\n+     * <p>\n+     * The application being started must call {@link CountdownLatch#countDown()} once to signal\n+     * its successful start (for example, by setting a handler for {@link javafx.stage.WindowEvent.WINDOW_SHOWN} event\n+     * on its primary Stage).\n+     *\n+     * @param startupLatch - a latch used to communicate successful start of the application\n+     * @param applicationClass - application to launch\n+     * @param args - command line arguments\n+     *\/\n+    public static <T extends Application> void launch (\n+            CountDownLatch startupLatch,\n+            Class<T> applicationClass,\n+            String... args) {\n+        launch(startupLatch, STARTUP_TIMEOUT, applicationClass, args);\n+    }\n+\n+    \/**\n+     * Launches an FX application, at the same time ensuring that it has been\n+     * actually launched within the specified time.\n+     * <p>\n+     * The application being started must call {@link java.util.concurrent.CountdownLatch#countDown()} once to signal\n+     * its successful start (for example, by setting a handler for {@link javafx.stage.WindowEvent.WINDOW_SHOWN} event\n+     * on its primary Stage).\n+     *\n+     * @param startupLatch - a latch used to communicate successful start of the application\n+     * @param timeoutSeconds - timeout in seconds after which the test fails\n+     * @param applicationClass - application to launch\n+     * @param args - command line arguments\n+     *\/\n+    public static <T extends Application> void launch (\n+            CountDownLatch startupLatch,\n+            int timeoutSeconds,\n+            Class<T> applicationClass,\n+            String... args) {\n+\n+        new Thread(() -> {\n+            Application.launch(applicationClass, args);\n+        }).start();\n+\n+        String msg = \"Failed to launch FX application \" + applicationClass + \" within \" + timeoutSeconds + \" sec.\";\n+        try {\n+            Assert.assertTrue(msg, startupLatch.await(timeoutSeconds, TimeUnit.SECONDS));\n+        } catch (InterruptedException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    \/**\n+     * Starts the JavaFX runtime, invoking the specified Runnable on the JavaFX application thread.\n+     * This Runnable must call {@link java.util.concurrent.CountDownLatch#countDown()} once to signal\n+     * its successful start, otherwise an exception will be thrown when no such signal is received\n+     * within {@link #STARTUP_TIMEOUT} (15 seconds).\n+     *\n+     * @param startupLatch - a latch used to communicate successful start of the application\n+     * @param r - code to invoke on the application thread.\n+     *\/\n+    public static void startup(CountDownLatch startupLatch, Runnable r) {\n+        Platform.startup(r);\n+        try {\n+            String msg = \"Timeout waiting for FX runtime to start\";\n+            Assert.assertTrue(msg, startupLatch.await(STARTUP_TIMEOUT, TimeUnit.SECONDS));\n+        } catch (InterruptedException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    \/**\n+     * This synchronous method first hides all the specified stages (ignoring any\n+     * null Stages) in the platform thread, then calls {@link Platform.exit()}.\n+     *\/\n+    public static void shutdown(Stage... stages) {\n+        runAndWait(() -> {\n+            for (Stage s : stages) {\n+                if (s != null) {\n+                    s.hide();\n+                }\n+            }\n+            Platform.exit();\n+        });\n+    }\n+\n+    \/**\n+     * Calls CountDownLatch.await() with the specified timeout (in seconds).\n+     * Throws an exception if await() returns false or the process gets interrupted.\n+     *\/\n+    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n+        try {\n+            Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n+        } catch (InterruptedException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/util\/Util.java","additions":105,"deletions":3,"binary":false,"changes":108,"status":"modified"}]}