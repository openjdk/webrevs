{"files":[{"patch":"@@ -931,0 +931,7 @@\n+\n+                        if (is_raw_image) {\n+                            guchar* origdata = data;\n+                            data = (guchar*) convert_BGRA_to_RGBA((const int*) data, w * 4, h);\n+                            g_free(origdata);\n+                        }\n+\n@@ -1067,15 +1074,1 @@\n-    cairo_surface_t* cairo_surface;\n-\n-    guchar* pixels = is_raw_image\n-            ? (guchar*) convert_BGRA_to_RGBA((const int*) gdk_pixbuf_get_pixels(pixbuf),\n-                                                gdk_pixbuf_get_rowstride(pixbuf),\n-                                                height)\n-            : gdk_pixbuf_get_pixels(pixbuf);\n-\n-    cairo_surface = cairo_image_surface_create_for_data(\n-            pixels,\n-            CAIRO_FORMAT_ARGB32,\n-            width, height, width * 4);\n-\n-    cairo_set_source_surface(context, cairo_surface, 0, 0);\n-    cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);\n+    gdk_cairo_set_source_pixbuf(context, pixbuf, 0, 0);\n@@ -1084,3 +1077,0 @@\n-    if (is_raw_image) {\n-        g_free(pixels);\n-    }\n@@ -1088,1 +1078,0 @@\n-    cairo_surface_destroy(cairo_surface);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.cpp","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javafx.application.Application;\n+import javafx.embed.swing.SwingFXUtils;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.input.Dragboard;\n+import javafx.scene.input.TransferMode;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+\n+import java.awt.image.BufferedImage;\n+\n+public class DndTestDragViewRawImage extends Application {\n+    Image image = createImage(240, 240);\n+\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+\n+    @Override\n+    public void start(Stage stage) {\n+        ImageView imageView = new ImageView(image);\n+        imageView.setOnDragDetected(event -> {\n+            ClipboardContent content = new ClipboardContent();\n+            content.putImage(image);\n+            Dragboard dragboard = imageView.startDragAndDrop(TransferMode.ANY);\n+            dragboard.setContent(content);\n+            dragboard.setDragView(image);\n+        });\n+\n+        Label label = new Label(\"Click the image and drag. \" +\n+                \"The drag image displayed with the cursor (drag view) \" +\n+                \"should match the source image\");\n+\n+        VBox vBox = new VBox(label, imageView);\n+        vBox.setSpacing(5.0);\n+        vBox.setAlignment(Pos.CENTER);\n+        stage.setScene(new Scene(vBox, 480, 480));\n+        stage.setTitle(\"Drag View Image Colors\");\n+        stage.show();\n+    }\n+\n+    private static Image createImage(int width, int height) {\n+        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n+        for (int y = 0; y < height; y++) {\n+            for (int x = 0; x < width; x++) {\n+                if (x < width * 0.33) {\n+                    image.setRGB(x, y, 0xFF0000);\n+                } else if (x < width * 0.66) {\n+                    image.setRGB(x, y, 0x00FF00);\n+                } else {\n+                    image.setRGB(x, y, 0x0000FF);\n+                }\n+            }\n+        }\n+        return SwingFXUtils.toFXImage(image, null);\n+    }\n+}\n","filename":"tests\/manual\/dnd\/DndTestDragViewRawImage.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}