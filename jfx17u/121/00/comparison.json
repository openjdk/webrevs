{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -201,3 +201,2 @@\n-     * <p>Convenience method to inform if the given index is currently selected\n-     * in this SelectionModel. Is functionally equivalent to calling\n-     * <code>getSelectedIndices().contains(index)<\/code>.\n+     * This method tests whether the given index is currently selected\n+     * in this SelectionModel.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/SelectionModel.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2815,4 +2815,0 @@\n-        @Override public boolean isSelected(int index) {\n-            return isSelected(index, null);\n-        }\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -444,1 +444,1 @@\n-        boolean isSelected = getTreeTableView().getSelectionModel().isSelected(index);\n+        boolean isSelected = getTreeTableView().getSelectionModel().isSelected(index, null);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableRow.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3167,4 +3167,0 @@\n-        @Override public boolean isSelected(int index) {\n-            return isSelected(index, null);\n-        }\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -717,1 +717,1 @@\n-            assertFalse(sm.isSelected(row));\n+            assertTrue(sm.isSelected(row));\n@@ -790,1 +790,1 @@\n-            assertFalse(sm.isSelected(0));\n+            assertTrue(sm.isSelected(0));\n@@ -816,1 +816,1 @@\n-            assertFalse(sm.isSelected(0));\n+            assertTrue(sm.isSelected(0));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewMouseInputTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,2 @@\n+import javafx.scene.control.cell.PropertyValueFactory;\n+import test.com.sun.javafx.scene.control.test.Person;\n@@ -175,1 +177,1 @@\n-        assertFalse(model.isSelected(3));\n+        assertTrue(model.isSelected(3));\n@@ -188,1 +190,1 @@\n-        assertFalse(model.isSelected(3));\n+        assertTrue(model.isSelected(3));\n@@ -525,0 +527,46 @@\n+    @Test\n+    public void selectIndividualCells() {\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.setCellSelectionEnabled(true);\n+        model.clearSelection();\n+\n+        model.select(0, col0);\n+        assertTrue(cells(model), model.isSelected(0));\n+        assertFalse(cells(model), model.isSelected(1));\n+        assertFalse(cells(model), model.isSelected(2));\n+\n+        model.select(1, col0);\n+        model.select(1, col1);\n+        assertTrue(cells(model), model.isSelected(0));\n+        assertTrue(cells(model), model.isSelected(1));\n+        assertFalse(cells(model), model.isSelected(2));\n+\n+        model.select(2, col0);\n+        model.select(2, col1);\n+        model.select(2, col2);\n+        assertTrue(cells(model), model.isSelected(0));\n+        assertTrue(cells(model), model.isSelected(1));\n+        assertTrue(cells(model), model.isSelected(2));\n+\n+        assertFalse(cells(model), model.isSelected(3));\n+\n+        assertEquals(6, model.getSelectedCells().size());\n+\n+        model.clearSelection(0, col0);\n+        assertFalse(cells(model), model.isSelected(0));\n+\n+        model.clearSelection(1, col0);\n+        assertTrue(cells(model), model.isSelected(1));\n+        model.clearSelection(1, col1);\n+        assertFalse(cells(model), model.isSelected(1));\n+\n+        model.clearSelection(2, col0);\n+        assertTrue(cells(model), model.isSelected(2));\n+        model.clearSelection(2, col1);\n+        assertTrue(cells(model), model.isSelected(2));\n+        model.clearSelection(2, col2);\n+        assertFalse(cells(model), model.isSelected(2));\n+\n+        assertEquals(0, model.getSelectedCells().size());\n+    }\n+\n@@ -855,0 +903,92 @@\n+\n+    \/**\n+     * Analysing failing tests when fixing JDK-8219720.\n+     *\n+     * Suspect: isSelected(int row) violates contract.\n+     *\n+     * @see #selectRowWhenInSingleCellSelectionMode()\n+     * @see #selectRowWhenInSingleCellSelectionMode2()\n+     *\/\n+    @Test\n+    public void testSelectRowWhenInSingleCellSelectionModeIsSelected() {\n+        model.setSelectionMode(SelectionMode.SINGLE);\n+        model.setCellSelectionEnabled(true);\n+        model.select(3);\n+        \/\/ test against contract\n+        assertEquals(\"selected index\", 3, model.getSelectedIndex());\n+        assertTrue(\"contained in selected indices\", model.getSelectedIndices().contains(3));\n+        \/\/ test against spec\n+        assertEquals(\"is selected index\", model.getSelectedIndices().contains(3), model.isSelected(3));\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnMultipleCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.MULTIPLE, true);\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnMultipleNotCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.MULTIPLE, false);\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnSingleCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.SINGLE, true);\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnSingleNotCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.SINGLE, false);\n+    }\n+\n+    public void assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode mode, boolean cellEnabled) {\n+        TableView<Person> table = createPersonTableView();\n+\n+        TableView.TableViewSelectionModel<Person> sm = table.getSelectionModel();\n+        sm.setCellSelectionEnabled(cellEnabled);\n+        sm.setSelectionMode(mode);\n+        int row = 1;\n+        int col = table.getColumns().size() - 1;\n+        assertRowSelectionAfterSelectAndHideColumn(table, row, col);\n+    }\n+\n+    private void assertRowSelectionAfterSelectAndHideColumn(TableView<Person> table, int row, int col) {\n+        TableViewSelectionModel<Person> sm = table.getSelectionModel();\n+        TableColumn<Person, ?> column = table.getColumns().get(col);\n+\n+        sm.select(row, column);\n+        assertTrue(\"sanity: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n+        assertTrue(\"sanity: row must be selected\" , sm.isSelected(row));\n+        column.setVisible(false);\n+        assertTrue(\"after hiding column: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n+        assertTrue(\"after hiding column: row must be selected\" , sm.isSelected(row));\n+    }\n+\n+    \/**\n+     * Creates and returns a TableView with Persons and columns for all their properties.\n+     *\/\n+    private TableView<Person> createPersonTableView() {\n+        final ObservableList<Person> data =\n+                FXCollections.observableArrayList(\n+                        new Person(\"Jacob\", \"Smith\", \"jacob.smith@example.com\"),\n+                        new Person(\"Isabella\", \"Johnson\", \"isabella.johnson@example.com\"),\n+                        new Person(\"Ethan\", \"Williams\", \"ethan.williams@example.com\"),\n+                        new Person(\"Emma\", \"Jones\", \"emma.jones@example.com\"),\n+                        new Person(\"Michael\", \"Brown\", \"michael.brown@example.com\"));\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setItems(data);\n+\n+        TableColumn<Person, String> firstNameCol = new TableColumn(\"First Name\");\n+        firstNameCol.setCellValueFactory(new PropertyValueFactory<Person, String>(\"firstName\"));\n+\n+        TableColumn<Person, String> lastNameCol = new TableColumn(\"Last Name\");\n+        lastNameCol.setCellValueFactory(new PropertyValueFactory<Person, String>(\"lastName\"));\n+\n+        TableColumn<Person, String> emailCol = new TableColumn(\"Email\");\n+        emailCol.setCellValueFactory(new PropertyValueFactory<Person, String>(\"email\"));\n+\n+        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);\n+\n+        return table;\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewSelectionModelImplTest.java","additions":143,"deletions":3,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -892,1 +892,1 @@\n-            assertFalse(sm.isSelected(row));\n+            assertTrue(sm.isSelected(row));\n@@ -969,1 +969,1 @@\n-            assertFalse(sm.isSelected(0));\n+            assertTrue(sm.isSelected(0));\n@@ -995,1 +995,1 @@\n-            assertFalse(sm.isSelected(0));\n+            assertTrue(sm.isSelected(0));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewMouseInputTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,8 +28,8 @@\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.beans.property.ReadOnlyObjectWrapper;\n-import javafx.beans.property.ReadOnlyStringWrapper;\n-import javafx.beans.property.SimpleStringProperty;\n-import javafx.beans.value.ObservableValue;\n-import javafx.collections.ListChangeListener;\n-import javafx.scene.control.TreeTableView.TreeTableViewSelectionModel;\n-import javafx.util.Callback;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n@@ -42,2 +42,5 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import com.sun.javafx.tk.Toolkit;\n+\n+import javafx.beans.property.ReadOnlyStringWrapper;\n+import javafx.beans.value.ObservableValue;\n+import javafx.collections.ListChangeListener;\n@@ -51,0 +54,1 @@\n+import javafx.scene.control.TreeTableView.TreeTableViewSelectionModel;\n@@ -52,2 +56,3 @@\n-\n-import static org.junit.Assert.*;\n+import javafx.scene.control.cell.TreeItemPropertyValueFactory;\n+import javafx.util.Callback;\n+import test.com.sun.javafx.scene.control.test.Person;\n@@ -137,1 +142,1 @@\n-        assertFalse(model.isSelected(3));\n+        assertTrue(model.isSelected(3));\n@@ -151,1 +156,1 @@\n-        assertFalse(model.isSelected(3));\n+        assertTrue(model.isSelected(3));\n@@ -488,0 +493,46 @@\n+    @Test\n+    public void selectIndividualCells() {\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.setCellSelectionEnabled(true);\n+        model.clearSelection();\n+\n+        model.select(0, col0);\n+        assertTrue(cells(model), model.isSelected(0));\n+        assertFalse(cells(model), model.isSelected(1));\n+        assertFalse(cells(model), model.isSelected(2));\n+\n+        model.select(1, col0);\n+        model.select(1, col1);\n+        assertTrue(cells(model), model.isSelected(0));\n+        assertTrue(cells(model), model.isSelected(1));\n+        assertFalse(cells(model), model.isSelected(2));\n+\n+        model.select(2, col0);\n+        model.select(2, col1);\n+        model.select(2, col2);\n+        assertTrue(cells(model), model.isSelected(0));\n+        assertTrue(cells(model), model.isSelected(1));\n+        assertTrue(cells(model), model.isSelected(2));\n+\n+        assertFalse(cells(model), model.isSelected(3));\n+\n+        assertEquals(6, model.getSelectedCells().size());\n+\n+        model.clearSelection(0, col0);\n+        assertFalse(cells(model), model.isSelected(0));\n+\n+        model.clearSelection(1, col0);\n+        assertTrue(cells(model), model.isSelected(1));\n+        model.clearSelection(1, col1);\n+        assertFalse(cells(model), model.isSelected(1));\n+\n+        model.clearSelection(2, col0);\n+        assertTrue(cells(model), model.isSelected(2));\n+        model.clearSelection(2, col1);\n+        assertTrue(cells(model), model.isSelected(2));\n+        model.clearSelection(2, col2);\n+        assertFalse(cells(model), model.isSelected(2));\n+\n+        assertEquals(0, model.getSelectedCells().size());\n+    }\n+\n@@ -954,0 +1005,94 @@\n+\n+    \/**\n+     * Analysing failing tests when fixing JDK-8219720.\n+     *\n+     * Suspect: isSelected(int row) violates contract.\n+     *\n+     * @see #selectRowWhenInSingleCellSelectionMode()\n+     * @see #selectRowWhenInSingleCellSelectionMode2()\n+     *\/\n+    @Test\n+    public void testSelectRowWhenInSingleCellSelectionModeIsSelected() {\n+        model.setSelectionMode(SelectionMode.SINGLE);\n+        model.setCellSelectionEnabled(true);\n+        model.select(3);\n+        \/\/ test against contract\n+        assertEquals(\"selected index\", 3, model.getSelectedIndex());\n+        assertTrue(\"contained in selected indices\", model.getSelectedIndices().contains(3));\n+        \/\/ test against spec\n+        assertEquals(\"is selected index\", model.getSelectedIndices().contains(3), model.isSelected(3));\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnMultipleCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.MULTIPLE, true);\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnMultipleNotCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.MULTIPLE, false);\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnSingleCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.SINGLE, true);\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnSingleNotCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.SINGLE, false);\n+    }\n+\n+    public void assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode mode, boolean cellEnabled) {\n+        TreeTableView<Person> table = createPersonTreeTableView();\n+\n+        TreeTableViewSelectionModel<Person> sm = table.getSelectionModel();\n+        sm.setCellSelectionEnabled(cellEnabled);\n+        sm.setSelectionMode(mode);\n+        int row = 1;\n+        int col = table.getColumns().size() - 1;\n+        assertRowSelectionAfterSelectAndHideColumn(table, row, col);\n+    }\n+\n+    private void assertRowSelectionAfterSelectAndHideColumn(TreeTableView<Person> table, int row, int col) {\n+        TreeTableViewSelectionModel<Person> sm = table.getSelectionModel();\n+        TreeTableColumn<Person, ?> column = table.getColumns().get(col);\n+\n+        sm.select(row, column);\n+        assertTrue(\"sanity: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n+        assertTrue(\"sanity: row must be selected\" , sm.isSelected(row));\n+        column.setVisible(false);\n+        assertTrue(\"after hiding column: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n+        assertTrue(\"after hiding column: row must be selected\" , sm.isSelected(row));\n+    }\n+\n+    \/**\n+     * Creates and returns a TreeTableView with Persons and columns for all their properties.\n+     *\/\n+    private TreeTableView<Person> createPersonTreeTableView() {\n+        TreeItem<Person> root = new TreeItem<>();\n+        root.setExpanded(true);\n+        root.getChildren().addAll(\n+            new TreeItem<Person>(new Person(\"Jacob\", \"Smith\", \"jacob.smith@example.com\")),\n+            new TreeItem<Person>(new Person(\"Isabella\", \"Johnson\", \"isabella.johnson@example.com\")),\n+            new TreeItem<Person>(new Person(\"Ethan\", \"Williams\", \"ethan.williams@example.com\")),\n+            new TreeItem<Person>(new Person(\"Emma\", \"Jones\", \"emma.jones@example.com\")),\n+            new TreeItem<Person>(new Person(\"Michael\", \"Brown\", \"michael.brown@example.com\"))\n+        );\n+\n+        TreeTableView<Person> table = new TreeTableView<>();\n+        table.setRoot(root);\n+\n+        TreeTableColumn<Person, String> firstNameCol = new TreeTableColumn(\"First Name\");\n+        firstNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<Person, String>(\"firstName\"));\n+\n+        TreeTableColumn<Person, String> lastNameCol = new TreeTableColumn(\"Last Name\");\n+        lastNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<Person, String>(\"lastName\"));\n+\n+        TreeTableColumn<Person, String> emailCol = new TreeTableColumn(\"Email\");\n+        emailCol.setCellValueFactory(new TreeItemPropertyValueFactory<Person, String>(\"email\"));\n+\n+        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);\n+\n+        return table;\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewSelectionModelImplTest.java","additions":160,"deletions":15,"binary":false,"changes":175,"status":"modified"}]}