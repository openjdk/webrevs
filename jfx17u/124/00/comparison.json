{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -819,4 +819,16 @@\n-            case ROW_INDEX: return getIndex();\n-            case COLUMN_INDEX: return columnIndex;\n-            case SELECTED: return isInCellSelectionMode() ? isSelected() : getTableRow().isSelected();\n-            default: return super.queryAccessibleAttribute(attribute, parameters);\n+        case ROW_INDEX:\n+            return getIndex();\n+        case COLUMN_INDEX:\n+            return columnIndex;\n+        case SELECTED:\n+            if (isInCellSelectionMode()) {\n+                return isSelected();\n+            } else {\n+                if(getTableRow() == null) {\n+                    return null;\n+                } else {\n+                    return getTableRow().isSelected();\n+                }\n+            }\n+        default:\n+            return super.queryAccessibleAttribute(attribute, parameters);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableCell.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1793,4 +1793,9 @@\n-                for (TableRow<S> row : rows) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    ObservableList<Node> cells = (ObservableList<Node>)row.queryAccessibleAttribute(attribute, parameters);\n-                    if (cells != null) selection.addAll(cells);\n+                if (rows != null) {\n+                    for (TableRow<S> row: rows) {\n+                        @SuppressWarnings(\"unchecked\")\n+                        ObservableList<Node> cells =\n+                            (ObservableList<Node>)row.queryAccessibleAttribute(attribute, parameters);\n+                        if (cells != null) {\n+                            selection.addAll(cells);\n+                        }\n+                    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -848,4 +848,16 @@\n-            case ROW_INDEX: return getIndex();\n-            case COLUMN_INDEX: return columnIndex;\n-            case SELECTED: return isInCellSelectionMode() ? isSelected() : getTableRow().isSelected();\n-            default: return super.queryAccessibleAttribute(attribute, parameters);\n+        case ROW_INDEX:\n+            return getIndex();\n+        case COLUMN_INDEX:\n+            return columnIndex;\n+        case SELECTED:\n+            if (isInCellSelectionMode()) {\n+                return isSelected();\n+            } else {\n+                if (getTableRow() == null) {\n+                    return null;\n+                } else {\n+                    return getTableRow().isSelected();\n+                }\n+            }\n+        default:\n+            return super.queryAccessibleAttribute(attribute, parameters);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableCell.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,24 +28,0 @@\n-import com.sun.javafx.collections.MappingChange;\n-import com.sun.javafx.collections.NonIterableChange;\n-import com.sun.javafx.scene.control.Properties;\n-import com.sun.javafx.scene.control.SelectedCellsMap;\n-\n-import com.sun.javafx.scene.control.behavior.TableCellBehavior;\n-import com.sun.javafx.scene.control.behavior.TableCellBehaviorBase;\n-import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n-\n-import javafx.beans.property.DoubleProperty;\n-import javafx.css.CssMetaData;\n-import javafx.css.PseudoClass;\n-\n-import javafx.css.converter.SizeConverter;\n-import com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList;\n-import com.sun.javafx.scene.control.TableColumnComparatorBase;\n-\n-import javafx.css.Styleable;\n-import javafx.css.StyleableDoubleProperty;\n-import javafx.css.StyleableProperty;\n-import javafx.event.WeakEventHandler;\n-\n-import javafx.scene.control.skin.TreeTableViewSkin;\n-\n@@ -72,0 +48,1 @@\n+import javafx.beans.property.DoubleProperty;\n@@ -88,0 +65,6 @@\n+import javafx.css.CssMetaData;\n+import javafx.css.PseudoClass;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableDoubleProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.css.converter.SizeConverter;\n@@ -91,0 +74,1 @@\n+import javafx.event.WeakEventHandler;\n@@ -94,0 +78,1 @@\n+import javafx.scene.control.skin.TreeTableViewSkin;\n@@ -97,0 +82,10 @@\n+import com.sun.javafx.collections.MappingChange;\n+import com.sun.javafx.collections.NonIterableChange;\n+import com.sun.javafx.scene.control.Properties;\n+import com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList;\n+import com.sun.javafx.scene.control.SelectedCellsMap;\n+import com.sun.javafx.scene.control.TableColumnComparatorBase;\n+import com.sun.javafx.scene.control.behavior.TableCellBehavior;\n+import com.sun.javafx.scene.control.behavior.TableCellBehaviorBase;\n+import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n+\n@@ -2132,1 +2127,2 @@\n-                ObservableList<TreeTableRow<S>> rows = (ObservableList<TreeTableRow<S>>)super.queryAccessibleAttribute(attribute, parameters);\n+                ObservableList<TreeTableRow<S>> rows =\n+                    (ObservableList<TreeTableRow<S>>)super.queryAccessibleAttribute(attribute, parameters);\n@@ -2134,4 +2130,8 @@\n-                for (TreeTableRow<S> row : rows) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    ObservableList<Node> cells = (ObservableList<Node>)row.queryAccessibleAttribute(attribute, parameters);\n-                    if (cells != null) selection.addAll(cells);\n+                if (rows != null) {\n+                    for (TreeTableRow<S> row: rows) {\n+                        @SuppressWarnings(\"unchecked\")\n+                        List<Node> cells = (List<Node>)row.queryAccessibleAttribute(attribute, parameters);\n+                        if (cells != null) {\n+                            selection.addAll(cells);\n+                        }\n+                    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1020,0 +1020,3 @@\n+                if (fm == null) {\n+                    return null;\n+                }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkinBase.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -5955,1 +5955,0 @@\n-    @Ignore(\"JDK-8296413\")\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,0 +109,1 @@\n+import javafx.scene.control.Label;\n@@ -7102,1 +7103,0 @@\n-    @Ignore(\"JDK-8296413\")\n@@ -7104,1 +7104,1 @@\n-    public void testQueryAccessibleAttributeFocusItemWithNullFocusModel() {\n+    public void testQueryAccessibleAttributeSelectedItemsWithNullSelectionModel_Placeholder() {\n@@ -7109,0 +7109,3 @@\n+        \/\/ Should be a placeholder label\n+        assertTrue(result instanceof Label);\n+    }\n@@ -7110,3 +7113,31 @@\n-        \/\/ TODO it seems to return a Label; possibly the placeholder label.\n-        \/\/ we need to check whether it's what is expected, whether TableView should use the same logic\n-        \/\/ And also check whether it *is* a placeholder label, see TreeTableView:2146\n+    @Test\n+    public void testQueryAccessibleAttributeFocusItemWithNullFocusModel() {\n+        \/\/ with rows\n+        treeTableView.setRoot(new TreeItem(\"Root\"));\n+        treeTableView.getRoot().setExpanded(true);\n+        for (int i = 0; i < 4; i++) {\n+            TreeItem parent = new TreeItem(\"item - \" + i);\n+            treeTableView.getRoot().getChildren().add(parent);\n+        }\n+\n+        \/\/ with columns\n+        for (int i = 0; i < 10; i++) {\n+            TreeTableColumn<String, String> c = new TreeTableColumn<>(\"C\" + i);\n+            c.setCellValueFactory(value -> new SimpleStringProperty(value.getValue().getValue()));\n+            treeTableView.getColumns().add(c);\n+        }\n+\n+        treeTableView.setFocusModel(null);\n+\n+        stageLoader = new StageLoader(treeTableView);\n+\n+        Object result = treeTableView.queryAccessibleAttribute(AccessibleAttribute.FOCUS_ITEM);\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void testQueryAccessibleAttributeFocusItemWithNullFocusModelPlaceholder() {\n+        treeTableView.setFocusModel(null);\n+        stageLoader = new StageLoader(treeTableView);\n+\n+        Object result = treeTableView.queryAccessibleAttribute(AccessibleAttribute.FOCUS_ITEM);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":37,"deletions":6,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.skin;\n+\n+import static org.junit.Assert.assertNotNull;\n+import java.util.Collection;\n+import java.util.List;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Control;\n+import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;\n+\n+\/**\n+ * Tests whether queryAccessibleAttribute() in every Control handles all of the\n+ * AccessibleAttribute values without throwing an exception.\n+ *\/\n+@RunWith(Parameterized.class)\n+public class QueryAccessibleAttributeTest {\n+    private Class<Node> nodeClass;\n+    private Node node;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> nodesUnderTest() {\n+        List<Class<Control>> cs = ControlSkinFactory.getControlClasses();\n+        return ControlSkinFactory.asArrays(cs);\n+    }\n+\n+    public QueryAccessibleAttributeTest(Class<Node> nodeClass) {\n+        this.nodeClass = nodeClass;\n+    }\n+\n+    @Before\n+    public void setup() {\n+        Thread.currentThread().setUncaughtExceptionHandler((thread, err) -> {\n+            if (err instanceof RuntimeException) {\n+                throw (RuntimeException)err;\n+            } else {\n+                Thread.currentThread().getThreadGroup().uncaughtException(thread, err);\n+            }\n+        });\n+\n+        node = createNode(nodeClass);\n+        assertNotNull(node);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        Thread.currentThread().setUncaughtExceptionHandler(null);\n+    }\n+\n+    protected static <T extends Node> T createNode(Class<T> controlClass) {\n+        try {\n+            return controlClass.getDeclaredConstructor().newInstance();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Test\n+    public void queryAllAttributes() {\n+        for (AccessibleAttribute a: AccessibleAttribute.values()) {\n+            \/\/ should throw no exceptions\n+            Object val = node.queryAccessibleAttribute(a);\n+        }\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/QueryAccessibleAttributeTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}