{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.function.Predicate;\n@@ -68,0 +69,8 @@\n+\n+    public void clear() {\n+        backingList.clear();\n+    }\n+\n+    public void removeIf(Predicate<? super E> predicate) {\n+        backingList.removeIf(predicate);\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/SizeLimitedList.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-    private final SizeLimitedList<TablePositionBase> selectionHistory = new SizeLimitedList<>(10);\n+    private final SizeLimitedList<TablePositionBase> selectionHistory = new SizeLimitedList<>(50);\n@@ -79,0 +79,4 @@\n+                if (selectionHistory.size() > 0) {\n+                    \/\/ whenever the selection is replaced, reset the selection history\n+                    resetSelectionHistory();\n+                }\n@@ -256,1 +260,1 @@\n-        setSelectionPathDeviated(false);\n+        resetSelectionHistory();\n@@ -433,0 +437,6 @@\n+    private void resetSelectionHistory() {\n+        setSelectionPathDeviated(false);\n+        selectionHistory.clear();\n+        selectionHistory.add(getAnchor());\n+    }\n+\n@@ -709,0 +719,3 @@\n+            \/\/ remove deselected cell from selection history, if present\n+            selectionHistory.removeIf(i -> i.getRow() == cellRowToClear && i.getColumn() == focusedCell.getColumn());\n+\n@@ -768,3 +781,2 @@\n-            ObservableList<? extends TablePositionBase> selectedCells = getSelectedCells();\n-            if (selectedCells.size() >= 2) {\n-                TablePositionBase<TC> secondToLastSelectedCell = selectedCells.get(selectedCells.size() - 2);\n+            if (selectionHistory.size() >= 2) {\n+                TablePositionBase<TC> secondToLastSelectedCell = selectionHistory.get(1);\n@@ -781,0 +793,3 @@\n+            \/\/ remove deselected cell from selection history, if present\n+            selectionHistory.removeIf(i -> i.getRow() == focusedCellRow && i.getTableColumn().equals(cellColumnToClear));\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TableViewBehaviorBase.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -860,1 +860,0 @@\n-    @Ignore(\"Bug persists\")\n@@ -867,0 +866,1 @@\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col1)\n@@ -868,3 +868,2 @@\n-        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col3)\n-        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col3)\n-        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (3, col3)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (3, col2)\n@@ -875,1 +874,1 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col3)\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n@@ -880,1 +879,1 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col3)\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n@@ -885,2 +884,2 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col3)\n-        assertFalse(debug(), sm.isSelected(1, col2));\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col2)\n+        assertFalse(sm.isSelected(1, col2));\n@@ -890,1 +889,1 @@\n-        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col2)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col1)\n@@ -894,0 +893,110 @@\n+    @Test public void testSelectionPathDeviationWorks2() {\n+        \/\/ select vertically, then select two items horizontally, then go back\n+        \/\/ in opposite direction\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearAndSelect(1, col2);\n+\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);   \/\/ select (2, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col2)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col1)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col0)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col0)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col1)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+    }\n+\n+    @Test public void testSelectionPathDeviationWorks3() {\n+        \/\/ select horizontally, then select one item vertically, then start\n+        \/\/ another selection and go back in opposite direction\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearAndSelect(1, col0);\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col1)\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col2)\n+        assertTrue(sm.isSelected(1, col0));\n+        assertTrue(sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n+        assertTrue(sm.isSelected(1, col0));\n+        assertTrue(sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+\n+        \/\/ new selection: anchor changes\n+        sm.clearAndSelect(3, col0);\n+        assertFalse(sm.isSelected(1, col0));\n+        assertFalse(sm.isSelected(1, col1));\n+        assertFalse(sm.isSelected(1, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col1)\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (4, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (5, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(4, col2));\n+        assertTrue(sm.isSelected(5, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (5, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (4, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col1)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewKeyInputTest.java","additions":119,"deletions":10,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -911,1 +911,0 @@\n-    @Ignore(\"Bug persists\")\n@@ -918,0 +917,1 @@\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col1)\n@@ -919,3 +919,2 @@\n-        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col3)\n-        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col3)\n-        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (3, col3)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (3, col2)\n@@ -926,1 +925,1 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col3)\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n@@ -931,1 +930,1 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col3)\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n@@ -936,2 +935,2 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col3)\n-        assertFalse(debug(), sm.isSelected(1, col2));\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col2)\n+        assertFalse(sm.isSelected(1, col2));\n@@ -941,1 +940,1 @@\n-        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col2)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col1)\n@@ -945,0 +944,110 @@\n+    @Test public void testSelectionPathDeviationWorks2() {\n+        \/\/ select vertically, then select two items horizontally, then go back\n+        \/\/ in opposite direction\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearAndSelect(1, col2);\n+\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);   \/\/ select (2, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col2)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col1)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col0)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col0)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col1)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+    }\n+\n+    @Test public void testSelectionPathDeviationWorks3() {\n+        \/\/ select horizontally, then select one item vertically, then start\n+        \/\/ another selection and go back in opposite direction\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearAndSelect(1, col0);\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col1)\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col2)\n+        assertTrue(sm.isSelected(1, col0));\n+        assertTrue(sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n+        assertTrue(sm.isSelected(1, col0));\n+        assertTrue(sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+\n+        \/\/ new selection: anchor changes\n+        sm.clearAndSelect(3, col0);\n+        assertFalse(sm.isSelected(1, col0));\n+        assertFalse(sm.isSelected(1, col1));\n+        assertFalse(sm.isSelected(1, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col1)\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (4, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (5, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(4, col2));\n+        assertTrue(sm.isSelected(5, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (5, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (4, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col1)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewKeyInputTest.java","additions":119,"deletions":10,"binary":false,"changes":129,"status":"modified"}]}