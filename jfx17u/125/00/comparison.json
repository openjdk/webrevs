{"files":[{"patch":"@@ -70,4 +70,1 @@\n-    \/\/ pageSize is effectively a constant so this isn't really variable.\n-    IGNORE_CLANG_WARNINGS_BEGIN(\"vla\")\n-    MincoreBufferType pagedBits[numberOfPagesInMarkedBlock];\n-    IGNORE_CLANG_WARNINGS_END\n+    Vector<MincoreBufferType, 16> pagedBits(numberOfPagesInMarkedBlock, MincoreBufferType { });\n@@ -79,1 +76,2 @@\n-        auto markedBlockSizeInBytes = static_cast<size_t>(reinterpret_cast<char*>(handle->end()) - reinterpret_cast<char*>(handle->start()));\n+        auto* pageStart = handle->pageStart();\n+        auto markedBlockSizeInBytes = handle->backingStorageSize();\n@@ -82,1 +80,1 @@\n-        auto result = mincore(handle->start(), markedBlockSizeInBytes, pagedBits);\n+        auto result = mincore(pageStart, markedBlockSizeInBytes, pagedBits.data());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/heap\/BlockDirectory.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -172,0 +172,2 @@\n+        size_t backingStorageSize() { return bitwise_cast<uintptr_t>(end()) - bitwise_cast<uintptr_t>(pageStart()); }\n+\n@@ -205,0 +207,1 @@\n+        void* pageStart() const { return &m_block->atoms()[0]; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/heap\/MarkedBlock.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1307,1 +1307,2 @@\n-                    propertyName = &m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n+                    propertyName = m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n+                    failIfFalse(propertyName, \"Cannot parse big int property name\");\n@@ -3014,2 +3015,2 @@\n-            ident = &m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n-            ASSERT(ident);\n+            ident = m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n+            failIfFalse(ident, \"Cannot parse big int property name\");\n@@ -3261,2 +3262,2 @@\n-                ident = &m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n-                ASSERT(ident);\n+                ident = m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n+                failIfFalse(ident, \"Cannot parse big int property name\");\n@@ -4519,1 +4520,2 @@\n-        const Identifier* ident = &m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n+        const Identifier* ident = m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n+        failIfFalse(ident, \"Cannot parse big int property name\");\n@@ -4611,1 +4613,2 @@\n-        stringPropertyName = &m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n+        stringPropertyName = m_parserArena.identifierArena().makeBigIntDecimalIdentifier(const_cast<VM&>(m_vm), *m_token.m_data.bigIntString, m_token.m_data.radix);\n+        failIfFalse(stringPropertyName, \"Cannot parse big int property name\");\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/parser\/Parser.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-const Identifier& IdentifierArena::makeBigIntDecimalIdentifier(VM& vm, const Identifier& identifier, uint8_t radix)\n+const Identifier* IdentifierArena::makeBigIntDecimalIdentifier(VM& vm, const Identifier& identifier, uint8_t radix)\n@@ -85,1 +85,1 @@\n-        return identifier;\n+        return &identifier;\n@@ -92,0 +92,6 @@\n+    if (bigInt.isEmpty()) {\n+        \/\/ Handle out-of-memory or other failures by returning null, since\n+        \/\/ we don't have a global object to throw exceptions to in this scope.\n+        return nullptr;\n+    }\n+\n@@ -109,1 +115,1 @@\n-    return m_identifiers.last();\n+    return &m_identifiers.last();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/parser\/ParserArena.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        const Identifier& makeBigIntDecimalIdentifier(VM&, const Identifier&, uint8_t radix);\n+        const Identifier* makeBigIntDecimalIdentifier(VM&, const Identifier&, uint8_t radix);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/parser\/ParserArena.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,0 +67,2 @@\n+    VM& vm = globalObject->vm();\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n@@ -68,1 +70,2 @@\n-    return done.toBoolean(globalObject);\n+    RETURN_IF_EXCEPTION(scope, true);\n+    RELEASE_AND_RETURN(scope, done.toBoolean(globalObject));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/IteratorOperations.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -307,6 +307,2 @@\n-    MediaTime a = *this;\n-\n-    if (a.hasDoubleValue()) {\n-        a.m_timeValueAsDouble *= rhs;\n-        return a;\n-    }\n+    if (hasDoubleValue())\n+        return MediaTime::createWithDouble(m_timeValueAsDouble * rhs);\n@@ -314,0 +310,1 @@\n+    MediaTime a = *this;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/MediaTime.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1316,0 +1316,6 @@\n+\n+#if (PLATFORM(GTK) || PLATFORM(WPE)) && defined(__has_include)\n+#if __has_include(<gio\/gdesktopappinfo.h>)\n+#define HAVE_GDESKTOPAPPINFO 1\n+#endif\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/PlatformHave.h","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2005-2019 Apple Inc. All rights reserved.\n+ * Copyright (C) 2005-2022 Apple Inc. All rights reserved.\n@@ -51,1 +51,2 @@\n-constexpr auto scriptCodeLimit = static_cast<UScriptCode>(256);\n+constexpr auto scriptCodeLimit = static_cast<UScriptCode>(255);\n+\n@@ -119,0 +120,10 @@\n+template<> bool isLookalikeCharacterOfScriptType<USCRIPT_THAI>(UChar32 codePoint)\n+{\n+    switch (codePoint) {\n+    case 0x0E01: \/\/ THAI CHARACTER KO KAI\n+        return true;\n+    default:\n+        return false;\n+    }\n+}\n+\n@@ -166,0 +177,14 @@\n+template <>\n+bool isLookalikeSequence<USCRIPT_ARABIC>(const std::optional<UChar32>& previousCodePoint, UChar32 codePoint)\n+{\n+    auto isArabicDiacritic = [](UChar32 codePoint) {\n+        return 0x064B <= codePoint && codePoint <= 0x065F;\n+    };\n+    auto isArabicCodePoint = [](const std::optional<UChar32>& codePoint) {\n+        if (!codePoint)\n+            return false;\n+        return ublock_getCode(*codePoint) == UBLOCK_ARABIC;\n+    };\n+    return isArabicDiacritic(codePoint) && !isArabicCodePoint(previousCodePoint);\n+}\n+\n@@ -179,1 +204,4 @@\n-    if (!u_isprint(codePoint) || u_isUWhiteSpace(codePoint) || u_hasBinaryProperty(codePoint, UCHAR_DEFAULT_IGNORABLE_CODE_POINT))\n+    if (!u_isprint(codePoint)\n+        || u_isUWhiteSpace(codePoint)\n+        || u_hasBinaryProperty(codePoint, UCHAR_DEFAULT_IGNORABLE_CODE_POINT)\n+        || ublock_getCode(codePoint) == UBLOCK_IPA_EXTENSIONS)\n@@ -186,1 +214,0 @@\n-    case 0x00ED: \/* LATIN SMALL LETTER I WITH ACUTE *\/\n@@ -193,2 +220,0 @@\n-    case 0x0274: \/* LATIN LETTER SMALL CAPITAL N *\/\n-    case 0x027E: \/* LATIN SMALL LETTER R WITH FISHHOOK *\/\n@@ -315,1 +340,3 @@\n-            || isLookalikeSequence<USCRIPT_CANADIAN_ABORIGINAL>(previousCodePoint, codePoint);\n+            || isLookalikeSequence<USCRIPT_CANADIAN_ABORIGINAL>(previousCodePoint, codePoint)\n+            || isLookalikeSequence<USCRIPT_THAI>(previousCodePoint, codePoint)\n+            || isLookalikeSequence<USCRIPT_ARABIC>(previousCodePoint, codePoint);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/URLHelpers.cpp","additions":34,"deletions":7,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1784,1 +1784,1 @@\n-    static Vector<DestinationItemType> map(SourceType source, const MapFunction& mapFunction)\n+    static Vector<DestinationItemType> map(const SourceType& source, const MapFunction& mapFunction)\n@@ -1844,1 +1844,1 @@\n-    static Vector<DestinationItemType> compactMap(SourceType source, const MapFunction& mapFunction)\n+    static Vector<DestinationItemType> compactMap(const SourceType& source, const MapFunction& mapFunction)\n@@ -1863,1 +1863,1 @@\n-    static Vector<DestinationItemType> compactMap(SourceType source, const MapFunction& mapFunction)\n+    static Vector<DestinationItemType> compactMap(SourceType&& source, const MapFunction& mapFunction)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/Vector.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include <atomic>\n@@ -33,1 +34,6 @@\n-\/\/ This macro is helpful for testing how many intermediate Strings are created while evaluating an\n+#if defined(NDEBUG)\n+#define WTF_STRINGTYPEADAPTER_COPIED_WTF_STRING() do { } while (0)\n+#else\n+#define WTF_STRINGTYPEADAPTER_COPIED_WTF_STRING() do { ++WTF::Detail::wtfStringCopyCount; } while (0)\n+namespace WTF::Detail {\n+\/\/ This variable is helpful for testing how many intermediate Strings are created while evaluating an\n@@ -35,2 +41,2 @@\n-#ifndef WTF_STRINGTYPEADAPTER_COPIED_WTF_STRING\n-#define WTF_STRINGTYPEADAPTER_COPIED_WTF_STRING() ((void)0)\n+WTF_EXPORT_PRIVATE extern std::atomic<int> wtfStringCopyCount;\n+}\n@@ -249,1 +255,1 @@\n-    StringTypeAdapter(std::tuple<StringTypes...> tuple)\n+    StringTypeAdapter(const std::tuple<StringTypes...>& tuple)\n@@ -260,1 +266,1 @@\n-        std::apply([&](StringTypes... strings) {\n+        std::apply([&](const StringTypes&... strings) {\n@@ -263,1 +269,1 @@\n-                StringTypeAdapter<StringTypes>(strings).writeTo(destination + (offset * sizeof(CharacterType))),\n+                StringTypeAdapter<StringTypes>(strings).writeTo(destination + offset),\n@@ -270,1 +276,1 @@\n-    static unsigned computeLength(StringTypes... strings)\n+    static unsigned computeLength(const StringTypes&... strings)\n@@ -275,1 +281,1 @@\n-    static bool computeIs8Bit(StringTypes... strings)\n+    static bool computeIs8Bit(const StringTypes&... strings)\n@@ -279,2 +285,1 @@\n-\n-    std::tuple<StringTypes...> m_tuple;\n+    const std::tuple<StringTypes...>& m_tuple;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/text\/StringConcatenate.h","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-    ALWAYS_INLINE const UChar* characters16() const { ASSERT(!is8Bit()); return m_data16; }\n+    ALWAYS_INLINE const UChar* characters16() const { ASSERT(!is8Bit() || isEmpty()); return m_data16; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/text\/StringImpl.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -555,0 +555,6 @@\n+#if !defined(NDEBUG)\n+namespace Detail {\n+std::atomic<int> wtfStringCopyCount;\n+}\n+#endif\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/text\/StringView.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-    ASSERT(!is8Bit());\n+    ASSERT(!is8Bit() || isEmpty());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/text\/StringView.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,2 @@\n-    auto requestOrException = requestFromInfo(WTFMove(info), options.ignoreMethod);\n+    bool requestValidationFailed = false;\n+    auto requestOrException = requestFromInfo(WTFMove(info), options.ignoreMethod, &requestValidationFailed);\n@@ -104,0 +105,1 @@\n+        if (requestValidationFailed)\n@@ -105,0 +107,2 @@\n+        else\n+            callback(requestOrException.releaseException());\n@@ -138,1 +142,2 @@\n-        auto requestOrException = requestFromInfo(WTFMove(info.value()), options.ignoreMethod);\n+        bool requestValidationFailed = false;\n+        auto requestOrException = requestFromInfo(WTFMove(info.value()), options.ignoreMethod, &requestValidationFailed);\n@@ -140,0 +145,1 @@\n+            if (requestValidationFailed)\n@@ -141,0 +147,2 @@\n+            else\n+                promise.reject(requestOrException.releaseException());\n@@ -221,1 +229,1 @@\n-ExceptionOr<Ref<FetchRequest>> DOMCache::requestFromInfo(RequestInfo&& info, bool ignoreMethod)\n+ExceptionOr<Ref<FetchRequest>> DOMCache::requestFromInfo(RequestInfo&& info, bool ignoreMethod, bool* requestValidationFailed)\n@@ -226,1 +234,3 @@\n-        if (request->method() != \"GET\"_s && !ignoreMethod)\n+        if (request->method() != \"GET\"_s && !ignoreMethod) {\n+            if (requestValidationFailed)\n+                *requestValidationFailed = true;\n@@ -228,2 +238,7 @@\n-    } else\n-        request = FetchRequest::create(*scriptExecutionContext(), WTFMove(info), { }).releaseReturnValue();\n+        }\n+    } else {\n+        auto result = FetchRequest::create(*scriptExecutionContext(), WTFMove(info), { });\n+        if (result.hasException())\n+            return result.releaseException();\n+        request = result.releaseReturnValue();\n+    }\n@@ -231,1 +246,3 @@\n-    if (!request->url().protocolIsInHTTPFamily())\n+    if (!request->url().protocolIsInHTTPFamily()) {\n+        if (requestValidationFailed)\n+            *requestValidationFailed = true;\n@@ -233,0 +250,1 @@\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/cache\/DOMCache.cpp","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    ExceptionOr<Ref<FetchRequest>> requestFromInfo(RequestInfo&&, bool ignoreMethod);\n+    ExceptionOr<Ref<FetchRequest>> requestFromInfo(RequestInfo&&, bool ignoreMethod, bool* requestValidationFailed = nullptr);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/cache\/DOMCache.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+    options.contentEncodingSniffingPolicy = ContentEncodingSniffingPolicy::Disable;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchLoader.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-            connectionProxy().abortOpenAndUpgradeNeeded(data.databaseConnectionIdentifier(), IDBResourceIdentifier::emptyValue());\n+            connectionProxy().abortOpenAndUpgradeNeeded(data.databaseConnectionIdentifier(), std::nullopt);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/IDBOpenDBRequest.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -635,0 +635,5 @@\n+        if (!m_openDBRequest) {\n+            ASSERT(m_isStopped);\n+            return;\n+        }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/IDBTransaction.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-void IDBConnectionProxy::abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const IDBResourceIdentifier& transactionIdentifier)\n+void IDBConnectionProxy::abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const std::optional<IDBResourceIdentifier>& transactionIdentifier)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/client\/IDBConnectionProxy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-    void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const IDBResourceIdentifier& transactionIdentifier);\n+    void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const std::optional<IDBResourceIdentifier>& transactionIdentifier);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/client\/IDBConnectionProxy.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -490,1 +490,1 @@\n-void IDBConnectionToServer::abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const IDBResourceIdentifier& transactionIdentifier)\n+void IDBConnectionToServer::abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const std::optional<IDBResourceIdentifier>& transactionIdentifier)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/client\/IDBConnectionToServer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-    void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const IDBResourceIdentifier& transactionIdentifier);\n+    void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const std::optional<IDBResourceIdentifier>& transactionIdentifier);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/client\/IDBConnectionToServer.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    virtual void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const IDBResourceIdentifier& transactionIdentifier) = 0;\n+    virtual void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const std::optional<IDBResourceIdentifier>& transactionIdentifier) = 0;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/client\/IDBConnectionToServerDelegate.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -458,1 +458,1 @@\n-void IDBServer::abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const IDBResourceIdentifier& transactionIdentifier)\n+void IDBServer::abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const std::optional<IDBResourceIdentifier>& transactionIdentifier)\n@@ -464,2 +464,2 @@\n-    auto transaction = m_transactions.get(transactionIdentifier);\n-    if (transaction)\n+    if (transactionIdentifier) {\n+        if (auto transaction = m_transactions.get(*transactionIdentifier))\n@@ -467,0 +467,1 @@\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/IDBServer.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    WEBCORE_EXPORT void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const IDBResourceIdentifier& transactionIdentifier);\n+    WEBCORE_EXPORT void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const std::optional<IDBResourceIdentifier>& transactionIdentifier);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/IDBServer.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,9 +95,0 @@\n-\n-    \/\/ If this MemoryIndex belongs to an object store that will not get restored if this transaction aborts,\n-    \/\/ then we can forget about it altogether.\n-    auto& objectStore = index->objectStore();\n-    if (auto deletedObjectStore = m_deletedObjectStores.get(objectStore.info().name())) {\n-        if (deletedObjectStore != &objectStore)\n-            return;\n-    }\n-\n@@ -127,1 +118,0 @@\n-\n@@ -130,0 +120,10 @@\n+    \/\/ If the store removed is previously added in this transaction, we don't need to\n+    \/\/ keep it for transaction abort.\n+    if (auto addedObjectStore = m_versionChangeAddedObjectStores.take(&objectStore.get())) {\n+        \/\/ We don't need to track its indexes either.\n+        m_deletedIndexes.removeIf([identifier = objectStore->info().identifier()](auto& entry) {\n+            return entry.value->objectStore().info().identifier() == identifier;\n+        });\n+        return;\n+    }\n+\n@@ -219,1 +219,1 @@\n-        iterator.key->rename(iterator.value);\n+        m_backingStore.renameObjectStoreForVersionChangeAbort(*iterator.key, iterator.value);\n@@ -224,0 +224,3 @@\n+    m_deletedIndexes.removeIf([&](auto& entry) {\n+        return m_versionChangeAddedObjectStores.contains(&entry.value->objectStore());\n+    });\n@@ -264,1 +267,2 @@\n-    for (auto& index : m_deletedIndexes.values())\n+    for (auto& index : m_deletedIndexes.values()) {\n+        RELEASE_ASSERT(m_backingStore.hasObjectStore(index->info().objectStoreIdentifier()));\n@@ -266,0 +270,1 @@\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/MemoryBackingStoreTransaction.cpp","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -313,0 +313,12 @@\n+void MemoryIDBBackingStore::renameObjectStoreForVersionChangeAbort(MemoryObjectStore& objectStore, const String& oldName)\n+{\n+    LOG(IndexedDB, \"MemoryIDBBackingStore::renameObjectStoreForVersionChangeAbort\");\n+\n+    auto identifier = objectStore.info().identifier();\n+    auto currentName = objectStore.info().name();\n+    m_objectStoresByName.remove(currentName);\n+    m_objectStoresByName.set(oldName, &objectStore);\n+    m_databaseInfo->renameObjectStore(identifier, oldName);\n+    objectStore.rename(oldName);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/MemoryIDBBackingStore.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+    bool hasObjectStore(uint64_t objectStoreIdentifier) { return !!infoForObjectStore(objectStoreIdentifier); }\n@@ -50,0 +51,1 @@\n+    void renameObjectStoreForVersionChangeAbort(MemoryObjectStore&, const String& oldName);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/MemoryIDBBackingStore.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"MediaRecorderPrivate.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediarecorder\/MediaRecorderProvider.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    if (m_cachedImage->loadFailedOrCanceled() || m_cachedImage->errorOccurred() || !m_cachedImage->image() || !m_cachedImage->image()->data() || m_cachedImage->image()->data()->isEmpty()) {\n+    if (m_cachedImage->loadFailedOrCanceled() || m_cachedImage->errorOccurred() || !m_cachedImage->image()) {\n@@ -79,11 +79,1 @@\n-    \/\/ Sanitize the image by decoding it into a BitmapImage.\n-    RefPtr<FragmentedSharedBuffer> bufferToSanitize = m_cachedImage->image()->data();\n-    auto bitmapImage = BitmapImage::create();\n-    bitmapImage->setData(WTFMove(bufferToSanitize), true);\n-    auto imageBuffer = ImageBuffer::create(bitmapImage->size(), RenderingPurpose::Unspecified, 1, DestinationColorSpace::SRGB(), PixelFormat::BGRA8);\n-    if (!imageBuffer) {\n-        m_callback(nullptr);\n-        return;\n-    }\n-    imageBuffer->context().drawImage(bitmapImage.get(), FloatPoint::zero());\n-    m_callback(bitmapImage.ptr());\n+    m_callback(m_cachedImage->image());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediasession\/MediaMetadata.cpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-    m_private->evictCodedFrames(size, maximumBufferSize(), m_source->currentTime(), m_source->duration(), m_source->isEnded());\n+    m_private->evictCodedFrames(size, maximumBufferSize(), m_source->currentTime(), m_source->isEnded());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediasource\/SourceBuffer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,0 +158,1 @@\n+#if ENABLE(WEBGL)\n@@ -160,0 +161,1 @@\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/CanvasCaptureMediaStreamTrack.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,0 +95,5 @@\n+    inheritsBorderRadius()\n+    {\n+        return false;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/modern-media-controls\/controls\/adwaita-layout-traits.js","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -6,1 +6,0 @@\n-    border-radius: inherit;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/modern-media-controls\/controls\/ios-inline-media-controls.css","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -88,0 +88,5 @@\n+    inheritsBorderRadius()\n+    {\n+        return true;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/modern-media-controls\/controls\/ios-layout-traits.js","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -105,0 +105,5 @@\n+\n+    inheritsBorderRadius()\n+    {\n+        throw \"Derived class must implement this function.\";\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/modern-media-controls\/controls\/layout-traits.js","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -95,0 +95,5 @@\n+    inheritsBorderRadius()\n+    {\n+        return false;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/modern-media-controls\/controls\/macos-layout-traits.js","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-    border-radius: inherit;\n@@ -94,0 +93,5 @@\n+.media-controls-container:has(.media-controls.inherits-border-radius),\n+.media-controls.inherits-border-radius {\n+    border-radius: inherit;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/modern-media-controls\/controls\/media-controls.css","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+        if (layoutTraits?.inheritsBorderRadius())\n+            this.element.classList.add(\"inherits-border-radius\");\n+\n@@ -60,1 +63,1 @@\n-        if (this.layoutTraits.supportsPiP())\n+        if (this.layoutTraits?.supportsPiP())\n@@ -65,1 +68,1 @@\n-        if (this.layoutTraits.supportsAirPlay()) {\n+        if (this.layoutTraits?.supportsAirPlay()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/modern-media-controls\/controls\/media-controls.js","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -88,0 +88,5 @@\n+    inheritsBorderRadius()\n+    {\n+        return false;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/modern-media-controls\/controls\/watchos-layout-traits.js","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    if (@getByIdDirectPrivate(underlyingSource, \"pull\") !== @undefined) {\n+    if (underlyingSource.@pull !== @undefined) {\n@@ -54,1 +54,1 @@\n-        @setupReadableStreamDefaultController(this, underlyingSource, size, highWaterMark !== @undefined ? highWaterMark : 1, @getByIdDirectPrivate(underlyingSource, \"start\"), @getByIdDirectPrivate(underlyingSource, \"pull\"), @getByIdDirectPrivate(underlyingSource, \"cancel\"));\n+        @setupReadableStreamDefaultController(this, underlyingSource, size, highWaterMark !== @undefined ? highWaterMark : 1, underlyingSource.@start, underlyingSource.@pull, underlyingSource.@cancel);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/streams\/ReadableStream.js","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,3 +33,3 @@\n-    [Custom] Promise<undefined> start(ReadableStreamDefaultController controller);\n-    [Custom] Promise<undefined> pull(ReadableStreamDefaultController controller);\n-    undefined cancel(any reason);\n+    [Custom, PrivateIdentifier] Promise<undefined> start(ReadableStreamDefaultController controller);\n+    [Custom, PrivateIdentifier] Promise<undefined> pull(ReadableStreamDefaultController controller);\n+    [PrivateIdentifier] undefined cancel(any reason);\n@@ -38,1 +38,1 @@\n-    [CachedAttribute, CustomGetter] readonly attribute any controller;\n+    [CachedAttribute, CustomGetter, PrivateIdentifier] readonly attribute any controller;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/streams\/ReadableStreamSource.idl","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (C) 2010, Google Inc. All rights reserved.\n+ * Copyright (C) 2010-2014 Google Inc. All rights reserved.\n+ * Copyright (C) 2023 Apple Inc. All rights reserved.\n@@ -232,0 +233,1 @@\n+        m_isEnabled = false;\n@@ -234,1 +236,0 @@\n-        m_isEnabled = false;\n@@ -243,0 +244,1 @@\n+        m_isEnabled = true;\n@@ -245,1 +247,0 @@\n-        m_isEnabled = true;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioNodeOutput.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include <wtf\/CheckedArithmetic.h>\n@@ -83,1 +84,6 @@\n-    m_buffer.grow(writePosition + maxLength);\n+    CheckedSize bufferSize = maxLength;\n+    bufferSize += writePosition;\n+    if (bufferSize.hasOverflowed())\n+        return false;\n+\n+    m_buffer.grow(bufferSize.value());\n@@ -89,1 +95,1 @@\n-    m_buffer.shrink(writePosition + maxLength - m_stream->avail_out);\n+    m_buffer.shrink(bufferSize.value() - m_stream->avail_out);\n@@ -97,1 +103,6 @@\n-        m_buffer.grow(writePosition + bufferIncrementUnit);\n+        CheckedSize bufferSize = writePosition;\n+        bufferSize += bufferIncrementUnit;\n+        if (bufferSize.hasOverflowed())\n+            return false;\n+\n+        m_buffer.grow(bufferSize.value());\n@@ -150,1 +161,6 @@\n-        m_buffer.grow(writePosition + bufferIncrementUnit);\n+        CheckedSize bufferSize = writePosition;\n+        bufferSize += bufferIncrementUnit;\n+        if (bufferSize.hasOverflowed())\n+            return false;\n+\n+        m_buffer.grow(bufferSize.value());\n@@ -182,1 +198,6 @@\n-        m_buffer.grow(writePosition + bufferIncrementUnit);\n+        CheckedSize bufferSize = writePosition;\n+        bufferSize += bufferIncrementUnit;\n+        if (bufferSize.hasOverflowed())\n+            return false;\n+\n+        m_buffer.grow(bufferSize.value());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/websockets\/WebSocketDeflater.cpp","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -295,0 +295,8 @@\n+\n+#if USE(ATSPI)\n+                \/\/ When using ATSPI, an accessibility object with 'StaticText' role is ignored.\n+                \/\/ Its content is exposed by its parent.\n+                \/\/ Treat such elements as having accessible content.\n+                if (axObject->roleValue() == AccessibilityRole::StaticText)\n+                    return true;\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/AXObjectCache.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+    if (!m_renderer)\n+        return false;\n+\n@@ -91,0 +94,5 @@\n+    \/\/ Collapsed is the \"default\" state, so if the renderer doesn't exist\n+    \/\/ this makes slightly more sense than returning false.\n+    if (!m_renderer)\n+        return true;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/AccessibilityMenuList.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,2 @@\n-            } else\n+            } else {\n+                UNUSED_PARAM(operationName);\n@@ -48,0 +49,1 @@\n+            }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSDOMOperationReturningPromise.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -188,0 +188,2 @@\n+    Ref protectedThis { *this };\n+\n@@ -211,2 +213,0 @@\n-    Ref<JSEventListener> protectedThis(*this);\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSEventListener.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        return adoptRef(*new CSSCustomPropertyValue(name, { WTFMove(value) }));\n+        return adoptRef(*new CSSCustomPropertyValue(name, VariantValue { std::in_place_type<Ref<CSSVariableReferenceValue>>, WTFMove(value) }));\n@@ -59,1 +59,1 @@\n-        return adoptRef(*new CSSCustomPropertyValue(name, { WTFMove(value) }));\n+        return adoptRef(*new CSSCustomPropertyValue(name, VariantValue { std::in_place_type<Ref<CSSVariableData>>, WTFMove(value) }));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/CSSCustomPropertyValue.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-    } if (o.match() == Tag) {\n+    } else if (o.match() == Tag) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/CSSSelector.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#include \"Quirks.h\"\n@@ -185,6 +184,0 @@\n-    String familyNameToUse = family;\n-    \/\/ FIXME: Quirks currently aren't present on Workers, but should likely be inherited\n-    \/\/        from the parent Document where applicable.\n-    if (familyNameToUse.contains('\\'') && is<Document>(context) && downcast<Document>(context).quirks().shouldStripQuotationMarkInFontFaceSetFamily())\n-        familyNameToUse = family.removeCharacters([](auto character) { return character == '\\''; });\n-\n@@ -194,1 +187,1 @@\n-    list->append(context.cssValuePool().createFontFamilyValue(familyNameToUse));\n+    list->append(context.cssValuePool().createFontFamilyValue(family));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/FontFace.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-    if (!frame.settings().resolutionMediaFeatureEnabled() || frame.document()->quirks().shouldDisableResolutionMediaQuery())\n+    if (!frame.settings().resolutionMediaFeatureEnabled())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/MediaQueryEvaluator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-    background-color: white;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/fullscreen.css","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -830,2 +830,2 @@\n-    for (auto& intersectionObserver : intersectionObservers) {\n-        if (intersectionObserver)\n+    for (auto& weakIntersectionObserver : intersectionObservers) {\n+        if (RefPtr intersectionObserver = weakIntersectionObserver.get())\n@@ -836,2 +836,2 @@\n-    for (auto& resizeObserver : resizeObservers) {\n-        if (resizeObserver)\n+    for (auto& weakResizeObserver : resizeObservers) {\n+        if (RefPtr resizeObserver = weakResizeObserver.get())\n@@ -3034,1 +3034,2 @@\n-        if (isNavigating)\n+        \/\/ Null-checking m_frame again as `policyChecker().stopCheck()` may have cleared it.\n+        if (isNavigating && m_frame)\n@@ -4438,2 +4439,6 @@\n-        if (auto* scrollableAreas = frameView->scrollableAreas()) {\n-            for (auto* scrollableArea : *scrollableAreas) {\n+        HashSet<ScrollableArea*> scrollableAreasToUpdate;\n+        if (auto userScrollableAreas = frameView->scrollableAreas())\n+            scrollableAreasToUpdate.add(userScrollableAreas->begin(), userScrollableAreas->end());\n+        if (auto nonUserScrollableAreas = frameView->scrollableAreasForAnimatedScroll())\n+            scrollableAreasToUpdate.add(nonUserScrollableAreas->begin(), nonUserScrollableAreas->end());\n+        for (auto* scrollableArea : scrollableAreasToUpdate) {\n@@ -4443,1 +4448,0 @@\n-        }\n@@ -9089,1 +9093,1 @@\n-    if (!element->isConnected() || &element->document() != this)\n+    if (&element->document() != this)\n@@ -9270,0 +9274,5 @@\n+bool Document::lazyImageLoadingEnabled() const\n+{\n+    return m_settings->lazyImageLoadingEnabled() && !m_quirks->shouldDisableLazyImageLoadingQuirk();\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.cpp","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1696,0 +1696,2 @@\n+    \/\/ This should be used over the settings lazy loading image flag due to a quirk, which may occur causing website images to fail to load properly.\n+    bool lazyImageLoadingEnabled() const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -590,0 +590,2 @@\n+        if (start.isNull() || end.isNull())\n+            return;\n@@ -602,0 +604,2 @@\n+        if (start.isNull() || end.isNull())\n+            return;\n@@ -1259,0 +1263,2 @@\n+    ASSERT(position.isNotNull());\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/ApplyStyleCommand.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (C) 2005, 2006, 2007, 2008 Apple Inc. All rights reserved.\n+ * Copyright (C) 2005-2022 Apple Inc. All rights reserved.\n+ * Copyright (C) 2014 Google Inc. All rights reserved.\n@@ -611,1 +612,4 @@\n-    ASSERT(canHaveChildrenForEditing(parent));\n+    \/\/ When cloneParagraphUnderNewElement() clones the fallback content of an OBJECT element,\n+    \/\/ the ASSERT below may fire since the return value of canHaveChildrenForEditing is not reliable\n+    \/\/ until the render object of the OBJECT is created. Hence we ignore this check for OBJECTs.\n+    ASSERT(canHaveChildrenForEditing(parent) || parent->hasTagName(objectTag));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/CompositeEditCommand.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -983,1 +983,1 @@\n-    if (!m_selectionToDelete.isNonOrphanedRange())\n+    if (!m_selectionToDelete.isNonOrphanedRange() || !m_selectionToDelete.isContentEditable())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/DeleteSelectionCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -722,0 +722,8 @@\n+static bool selectionIsOrphanedOrBelongsToWrongDocument(const VisibleSelection& selection, RefPtr<Document>&& document)\n+{\n+    if (selection.isOrphan())\n+        return true;\n+    RefPtr documentOfSelection = selection.document();\n+    return document && documentOfSelection && document != documentOfSelection;\n+}\n+\n@@ -769,0 +777,2 @@\n+    if (selectionIsOrphanedOrBelongsToWrongDocument(m_selection, m_document.get()))\n+        clear();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/FrameSelection.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -121,0 +121,4 @@\n+        if (!targetBlockquote->hasEditableStyle()) {\n+            removeNode(*targetBlockquote);\n+            return;\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/IndentOutdentCommand.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (C) 2006, 2010 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2022 Apple Inc. All rights reserved.\n+ * Copyright (C) 2015 Google Inc. All rights reserved.\n@@ -178,1 +179,1 @@\n-                        if (endOfSelection.isNull())\n+                        if (endOfSelection.isNull() || !endOfSelection.rootEditableElement())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/InsertListCommand.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2009, 2010, 2011 Google Inc. All rights reserved.\n+ * Copyright (C) 2009-2022 Google Inc. All rights reserved.\n@@ -837,0 +837,3 @@\n+    if (!protectedAncestor->parentNode()->hasEditableStyle())\n+        return;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/ReplaceSelectionCommand.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -691,3 +691,3 @@\n-        if (auto* child = firstChild(*n))\n-            next = child;\n-        else if (auto* sibling = nextSibling(*n))\n+\n+        auto advanceToAncestorSibling = [&]() {\n+            if (auto* sibling = nextSibling(*n)) {\n@@ -695,1 +695,2 @@\n-        else {\n+                return;\n+            }\n@@ -700,2 +701,1 @@\n-                    break;\n-                }\n+                    return;\n@@ -704,0 +704,7 @@\n+        };\n+\n+        if (auto* child = firstChild(*n))\n+            next = child;\n+        else\n+            advanceToAncestorSibling();\n+\n@@ -712,3 +719,4 @@\n-        if (!enterNode(*n))\n-            next = nextSkippingChildren(*n);\n-        else if (!hasChildNodes(*n))\n+        if (!enterNode(*n)) {\n+            exitedAncestors.clear();\n+            advanceToAncestorSibling();\n+        } else if (!hasChildNodes(*n))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/markup.cpp","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-static void firePageShowAndPopStateEvents(Page& page)\n+static void firePageShowEvent(Page& page)\n@@ -100,4 +100,0 @@\n-\n-        auto* historyItem = child->loader().history().currentItem();\n-        if (historyItem && historyItem->stateObject())\n-            document->dispatchPopstateEvent(historyItem->stateObject());\n@@ -172,1 +168,1 @@\n-    firePageShowAndPopStateEvents(page);\n+    firePageShowEvent(page);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/history\/CachedPage.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-    return !element()->isDisabledOrReadOnly() && element()->isRequired() && value.isEmpty();\n+    return element()->isMutable() && element()->isRequired() && value.isEmpty();\n@@ -291,1 +291,1 @@\n-    if (element()->isDisabledOrReadOnly() || !element()->renderer() || !UserGestureIndicator::processingUserGesture())\n+    if (!element()->isMutable() || !element()->renderer() || !UserGestureIndicator::processingUserGesture())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/BaseDateAndTimeInputType.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -98,3 +98,0 @@\n-    if (element()->isReadOnly())\n-        return false;\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/ColorInputType.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"FileChooser.h\"\n@@ -343,1 +344,1 @@\n-    m_fileChooser = FileChooser::create(this, fileChooserSettings());\n+    m_fileChooser = FileChooser::create(*this, fileChooserSettings());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/FileInputType.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"FileChooser.h\"\n@@ -98,2 +99,0 @@\n-\/\/ ----------------------------------------------------------------------------\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/FormController.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * Copyright (C) 2003, 2006, 2008, 2010 Apple Inc. All rights reserved.\n+ * Copyright (C) 2003-2022 Apple Inc. All rights reserved.\n@@ -193,1 +193,1 @@\n-    else if (name == faceAttr) {\n+    else if (name == faceAttr && !value.isEmpty()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLFontElement.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    , m_isReadOnly(false)\n+    , m_hasReadOnlyAttribute(false)\n@@ -170,4 +170,5 @@\n-        bool newReadOnly = !value.isNull();\n-        if (m_isReadOnly != newReadOnly) {\n-            Style::PseudoClassChangeInvalidation readOnlyInvalidation(*this, { { CSSSelector::PseudoClassReadOnly, newReadOnly }, { CSSSelector::PseudoClassReadWrite, !newReadOnly } });\n-            m_isReadOnly = newReadOnly;\n+        bool newHasReadOnlyAttribute = !value.isNull();\n+        if (m_hasReadOnlyAttribute != newHasReadOnlyAttribute) {\n+            bool newMatchesReadWrite = supportsReadOnly() && !newHasReadOnlyAttribute;\n+            Style::PseudoClassChangeInvalidation readWriteInvalidation(*this, { { CSSSelector::PseudoClassReadWrite, newMatchesReadWrite }, { CSSSelector::PseudoClassReadOnly, !newMatchesReadWrite } });\n+            m_hasReadOnlyAttribute = newHasReadOnlyAttribute;\n@@ -380,1 +381,2 @@\n-    return m_dataListAncestorState == NotInsideDataList && !isDisabledOrReadOnly();\n+    \/\/ readonly bars constraint validation for *all* <input> elements, regardless of the <input> type, for compat reasons.\n+    return m_dataListAncestorState == NotInsideDataList && !isDisabledFormControl() && !m_hasReadOnlyAttribute;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLFormControlElement.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -116,2 +116,4 @@\n-    bool isReadOnly() const { return m_isReadOnly; }\n-    bool isDisabledOrReadOnly() const { return isDisabledFormControl() || m_isReadOnly; }\n+    virtual bool supportsReadOnly() const { return false; }\n+    bool isReadOnly() const { return supportsReadOnly() && m_hasReadOnlyAttribute; }\n+    bool isMutable() const { return !isDisabledFormControl() && !isReadOnly(); }\n+    void updateReadOnlyState();\n@@ -200,1 +202,1 @@\n-    unsigned m_isReadOnly : 1;\n+    unsigned m_hasReadOnlyAttribute : 1;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLFormControlElement.h","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -136,1 +136,2 @@\n-        if (equalIgnoringFragmentIdentifier(frame->document()->url(), completeURL)) {\n+        \/\/ Use creationURL() because url() can be changed via History.replaceState() so it's not reliable.\n+        if (equalIgnoringFragmentIdentifier(frame->document()->creationURL(), completeURL)) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLFrameOwnerElement.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    [CEReactions, EnabledBySetting=LazyImageLoadingEnabled, ImplementedAs=loadingForBindings] attribute [AtomString] DOMString loading;\n+    [CEReactions, DisabledByQuirk=shouldDisableLazyImageLoading, EnabledBySetting=LazyImageLoadingEnabled, ImplementedAs=loadingForBindings] attribute [AtomString] DOMString loading;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLImageElement.idl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"FileChooser.h\"\n@@ -211,5 +212,0 @@\n-HTMLElement* HTMLInputElement::capsLockIndicatorElement() const\n-{\n-    return m_inputType->capsLockIndicatorElement();\n-}\n-\n@@ -546,0 +542,4 @@\n+    bool didSupportReadOnly = m_inputType->supportsReadOnly();\n+    bool willSupportReadOnly = newType->supportsReadOnly();\n+    std::optional<Style::PseudoClassChangeInvalidation> readWriteInvalidation;\n+\n@@ -565,0 +565,5 @@\n+    if (UNLIKELY(didSupportReadOnly != willSupportReadOnly && hasAttributeWithoutSynchronization(readonlyAttr))) {\n+        emplace(readWriteInvalidation, *this, { { CSSSelector::PseudoClassReadWrite, !willSupportReadOnly }, { CSSSelector::PseudoClassReadOnly, willSupportReadOnly } });\n+        readOnlyStateChanged();\n+    }\n+\n@@ -836,0 +841,5 @@\n+bool HTMLInputElement::supportsReadOnly() const\n+{\n+    return m_inputType->supportsReadOnly();\n+}\n+\n@@ -1279,1 +1289,1 @@\n-    if (isDisabledOrReadOnly())\n+    if (!isMutable())\n@@ -1360,5 +1370,0 @@\n-String HTMLInputElement::accept() const\n-{\n-    return attributeWithoutSynchronization(acceptAttr);\n-}\n-\n@@ -1538,1 +1543,1 @@\n-    return m_inputType->supportsReadOnly() && !isDisabledOrReadOnly();\n+    return supportsReadOnly() && isMutable();\n@@ -1739,1 +1744,2 @@\n-    m_inputType->dataListMayHaveChanged();\n+    auto protectedInputType = m_inputType;\n+    protectedInputType->dataListMayHaveChanged();\n@@ -1955,1 +1961,1 @@\n-        return MediaCaptureTypeNone;\n+        return MediaCaptureType::MediaCaptureTypeNone;\n@@ -1959,1 +1965,1 @@\n-        return MediaCaptureTypeNone;\n+        return MediaCaptureType::MediaCaptureTypeNone;\n@@ -1962,1 +1968,1 @@\n-        return MediaCaptureTypeUser;\n+        return MediaCaptureType::MediaCaptureTypeUser;\n@@ -1964,1 +1970,1 @@\n-    return MediaCaptureTypeEnvironment;\n+    return MediaCaptureType::MediaCaptureTypeEnvironment;\n@@ -1968,8 +1974,0 @@\n-bool HTMLInputElement::isInRequiredRadioButtonGroup()\n-{\n-    ASSERT(isRadioButton());\n-    if (auto* buttons = radioButtonGroups())\n-        return buttons->isInRequiredGroup(*this);\n-    return false;\n-}\n-\n@@ -2064,1 +2062,4 @@\n-    m_element->dataListMayHaveChanged();\n+    m_element->document().eventLoop().queueTask(TaskSource::DOMManipulation, [element = m_element] {\n+        if (element)\n+            element->dataListMayHaveChanged();\n+    });\n@@ -2068,9 +2069,1 @@\n-ExceptionOr<void> HTMLInputElement::setRangeText(const String& replacement)\n-{\n-    if (!m_inputType->supportsSelectionAPI())\n-        return Exception { InvalidStateError };\n-\n-    return HTMLTextFormControlElement::setRangeText(replacement);\n-}\n-\n-ExceptionOr<void> HTMLInputElement::setRangeText(const String& replacement, unsigned start, unsigned end, const String& selectionMode)\n+ExceptionOr<void> HTMLInputElement::setRangeText(StringView replacement, unsigned start, unsigned end, const String& selectionMode)\n@@ -2188,1 +2181,1 @@\n-    if (hasAutoFillStrongPasswordButton() && !isDisabledOrReadOnly()) {\n+    if (hasAutoFillStrongPasswordButton() && isMutable()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLInputElement.cpp","additions":29,"deletions":36,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"FileChooser.h\"\n@@ -29,1 +28,0 @@\n-#include \"SelectionRestorationMode.h\"\n@@ -31,2 +29,0 @@\n-#include <wtf\/WeakPtr.h>\n-#include \"ElementInlines.h\"\n@@ -48,0 +44,7 @@\n+struct FileChooserFileInfo;\n+\n+enum class AnyStepHandling : bool;\n+enum class DateComponentsType : uint8_t;\n+enum class MediaCaptureType : uint8_t;\n+enum class SelectionRestorationMode : uint8_t;\n+\n@@ -55,2 +58,0 @@\n-enum class AnyStepHandling : bool;\n-enum class DateComponentsType : uint8_t;\n@@ -65,0 +66,44 @@\n+    bool checked() const { return m_isChecked; }\n+    WEBCORE_EXPORT void setChecked(bool);\n+    WEBCORE_EXPORT FileList* files();\n+    WEBCORE_EXPORT void setFiles(RefPtr<FileList>&&, WasSetByJavaScript = WasSetByJavaScript::No);\n+    FileList* filesForBindings() { return files(); }\n+    void setFilesForBindings(RefPtr<FileList>&& fileList) { return setFiles(WTFMove(fileList), WasSetByJavaScript::Yes); }\n+    WEBCORE_EXPORT unsigned height() const;\n+    WEBCORE_EXPORT void setHeight(unsigned);\n+    bool indeterminate() const { return m_isIndeterminate; }\n+    WEBCORE_EXPORT void setIndeterminate(bool);\n+#if ENABLE(DATALIST_ELEMENT)\n+    WEBCORE_EXPORT RefPtr<HTMLElement> list() const;\n+#endif\n+    unsigned size() const { return m_size; }\n+    WEBCORE_EXPORT ExceptionOr<void> setSize(unsigned);\n+    WEBCORE_EXPORT const AtomString& defaultValue() const;\n+    WEBCORE_EXPORT void setDefaultValue(const AtomString&);\n+    WEBCORE_EXPORT void setType(const AtomString&);\n+    WEBCORE_EXPORT String value() const final;\n+    WEBCORE_EXPORT ExceptionOr<void> setValue(const String&, TextFieldEventBehavior = DispatchNoEvent, TextControlSetValueSelection = TextControlSetValueSelection::SetSelectionToEnd) final;\n+    void setValueForUser(const String& value) { setValue(value, DispatchInputAndChangeEvent); }\n+    WEBCORE_EXPORT WallTime valueAsDate() const;\n+    WEBCORE_EXPORT ExceptionOr<void> setValueAsDate(WallTime);\n+    #if PLATFORM(JAVA)\n+    WEBCORE_EXPORT ExceptionOr<void> setValueAsDate(double value);\n+    #endif\n+    WEBCORE_EXPORT double valueAsNumber() const;\n+    WEBCORE_EXPORT ExceptionOr<void> setValueAsNumber(double, TextFieldEventBehavior = DispatchNoEvent);\n+    WEBCORE_EXPORT ExceptionOr<void> stepUp(int = 1);\n+    WEBCORE_EXPORT ExceptionOr<void> stepDown(int = 1);\n+    WEBCORE_EXPORT unsigned width() const;\n+    WEBCORE_EXPORT void setWidth(unsigned);\n+    WEBCORE_EXPORT String validationMessage() const final;\n+    std::optional<unsigned> selectionStartForBindings() const;\n+    ExceptionOr<void> setSelectionStartForBindings(std::optional<unsigned>);\n+    std::optional<unsigned> selectionEndForBindings() const;\n+    ExceptionOr<void> setSelectionEndForBindings(std::optional<unsigned>);\n+    ExceptionOr<String> selectionDirectionForBindings() const;\n+    ExceptionOr<void> setSelectionDirectionForBindings(const String&);\n+    using HTMLTextFormControlElement::setRangeText;\n+    WEBCORE_EXPORT ExceptionOr<void> setRangeText(StringView, unsigned start, unsigned end, const String& selectionMode) final;\n+    ExceptionOr<void> setSelectionRangeForBindings(unsigned start, unsigned end, const String& direction);\n+    ExceptionOr<void> showPicker();\n+\n@@ -78,1 +123,0 @@\n-    WEBCORE_EXPORT String validationMessage() const final;\n@@ -95,3 +139,0 @@\n-    WEBCORE_EXPORT ExceptionOr<void> stepUp(int = 1);\n-    WEBCORE_EXPORT ExceptionOr<void> stepDown(int = 1);\n-\n@@ -141,1 +182,0 @@\n-    HTMLElement* capsLockIndicatorElement() const;\n@@ -152,6 +192,0 @@\n-    bool checked() const { return m_isChecked; }\n-    WEBCORE_EXPORT void setChecked(bool);\n-\n-    \/\/ 'indeterminate' is a state independent of the checked state that causes the control to draw in a way that hides the actual state.\n-    bool indeterminate() const { return m_isIndeterminate; }\n-    WEBCORE_EXPORT void setIndeterminate(bool);\n@@ -163,1 +197,0 @@\n-    unsigned size() const { return m_size; }\n@@ -167,5 +200,0 @@\n-    WEBCORE_EXPORT void setType(const AtomString&);\n-\n-    WEBCORE_EXPORT String value() const final;\n-    WEBCORE_EXPORT ExceptionOr<void> setValue(const String&, TextFieldEventBehavior = DispatchNoEvent, TextControlSetValueSelection = TextControlSetValueSelection::SetSelectionToEnd) final;\n-    void setValueForUser(const String& value) { setValue(value, DispatchChangeEvent); }\n@@ -186,9 +214,0 @@\n-    WEBCORE_EXPORT WallTime valueAsDate() const;\n-    WEBCORE_EXPORT ExceptionOr<void> setValueAsDate(WallTime);\n-    #if PLATFORM(JAVA)\n-    WEBCORE_EXPORT ExceptionOr<void> setValueAsDate(double value);\n-    #endif\n-\n-    WEBCORE_EXPORT double valueAsNumber() const;\n-    WEBCORE_EXPORT ExceptionOr<void> setValueAsNumber(double, TextFieldEventBehavior = DispatchNoEvent);\n-\n@@ -202,2 +221,0 @@\n-    bool canHaveSelection() const;\n-\n@@ -210,3 +227,0 @@\n-    \/\/ FIXME: For isActivatedSubmit and setActivatedSubmit, we should use the NVI-idiom here by making\n-    \/\/ it private virtual in all classes and expose a public method in HTMLFormControlElement to call\n-    \/\/ the private virtual method.\n@@ -225,3 +239,0 @@\n-    WEBCORE_EXPORT const AtomString& defaultValue() const;\n-    WEBCORE_EXPORT void setDefaultValue(const AtomString&);\n-\n@@ -230,1 +241,0 @@\n-    String accept() const;\n@@ -233,2 +243,0 @@\n-    WEBCORE_EXPORT ExceptionOr<void> setSize(unsigned);\n-\n@@ -255,5 +263,0 @@\n-    WEBCORE_EXPORT FileList* files();\n-    WEBCORE_EXPORT void setFiles(RefPtr<FileList>&&, WasSetByJavaScript = WasSetByJavaScript::No);\n-    FileList* filesForBindings() { return files(); }\n-    void setFilesForBindings(RefPtr<FileList>&& fileList) { return setFiles(WTFMove(fileList), WasSetByJavaScript::Yes); }\n-\n@@ -261,1 +264,1 @@\n-    \/\/ Returns true if the given DragData has more than one dropped files.\n+    \/\/ Returns true if the given DragData has more than one dropped file.\n@@ -268,2 +271,1 @@\n-    \/\/ These functions are used for rendering the input active during a\n-    \/\/ drag-and-drop operation.\n+    \/\/ These functions are used for rendering the input active during a drag-and-drop operation.\n@@ -279,1 +281,0 @@\n-    WEBCORE_EXPORT RefPtr<HTMLElement> list() const;\n@@ -287,1 +288,0 @@\n-    bool isInRequiredRadioButtonGroup();\n@@ -290,1 +290,0 @@\n-\n@@ -316,5 +315,0 @@\n-    WEBCORE_EXPORT unsigned height() const;\n-    WEBCORE_EXPORT unsigned width() const;\n-    WEBCORE_EXPORT void setHeight(unsigned);\n-    WEBCORE_EXPORT void setWidth(unsigned);\n-\n@@ -334,2 +328,0 @@\n-    WEBCORE_EXPORT ExceptionOr<void> setRangeText(const String& replacement) final;\n-    WEBCORE_EXPORT ExceptionOr<void> setRangeText(const String& replacement, unsigned start, unsigned end, const String& selectionMode) final;\n@@ -343,12 +335,0 @@\n-    void invalidateStyleOnFocusChangeIfNeeded();\n-\n-    std::optional<unsigned> selectionStartForBindings() const;\n-    ExceptionOr<void> setSelectionStartForBindings(std::optional<unsigned>);\n-\n-    std::optional<unsigned> selectionEndForBindings() const;\n-    ExceptionOr<void> setSelectionEndForBindings(std::optional<unsigned>);\n-\n-    ExceptionOr<String> selectionDirectionForBindings() const;\n-    ExceptionOr<void> setSelectionDirectionForBindings(const String&);\n-\n-    ExceptionOr<void> setSelectionRangeForBindings(unsigned start, unsigned end, const String& direction);\n@@ -360,4 +340,0 @@\n-    void updateUserAgentShadowTree() final;\n-\n-    ExceptionOr<void> showPicker();\n-\n@@ -370,1 +346,1 @@\n-    enum AutoCompleteSetting { Uninitialized, On, Off };\n+    enum AutoCompleteSetting : uint8_t { Uninitialized, On, Off };\n@@ -401,0 +377,1 @@\n+    bool canHaveSelection() const;\n@@ -435,0 +412,1 @@\n+    bool supportsReadOnly() const final;\n@@ -470,0 +448,3 @@\n+    void invalidateStyleOnFocusChangeIfNeeded();\n+\n+    void updateUserAgentShadowTree() final;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLInputElement.h","additions":59,"deletions":78,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -421,0 +421,1 @@\n+    , m_currentIdentifier(MediaUniqueIdentifier::generate())\n@@ -1197,0 +1198,4 @@\n+#if ENABLE(ENCRYPTED_MEDIA)\n+    m_playbackBlockedWaitingForKey = false;\n+#endif\n+\n@@ -3270,3 +3275,3 @@\n-    \/\/ Always notify the media engine of a seek if the source is not closed. This ensures that the source is\n-    \/\/ always in a flushed state when the 'seeking' event fires.\n-    if (m_mediaSource && !m_mediaSource->isClosed())\n+    \/\/ Always notify the media engine of a seek if the source is not closed and there is seekable ranges.\n+    \/\/ This ensures that the source is always in a flushed state when the 'seeking' event fires.\n+    if (m_mediaSource && !m_mediaSource->isClosed() && seekableRanges->length())\n@@ -4607,2 +4612,0 @@\n-\n-    m_processingPreferenceChange = false;\n@@ -4728,0 +4731,3 @@\n+\n+        if (m_mediaControlsHost)\n+            m_mediaControlsHost->updateCaptionDisplaySizes();\n@@ -4867,0 +4873,2 @@\n+    m_processingPreferenceChange = false;\n+\n@@ -5880,2 +5888,1 @@\n-    auto* context = scriptExecutionContext();\n-    if (!context || context->activeDOMObjectsAreStopped())\n+    if (isSuspended())\n@@ -6479,1 +6486,1 @@\n-    if (document().activeDOMObjectsAreSuspended() || document().activeDOMObjectsAreStopped()) {\n+    if (isSuspended()) {\n@@ -6727,1 +6734,1 @@\n-    if (document().activeDOMObjectsAreStopped())\n+    if (isSuspended())\n@@ -7820,1 +7827,1 @@\n-    if (!m_mediaControlsHost || document().activeDOMObjectsAreSuspended() || document().activeDOMObjectsAreStopped())\n+    if (!m_mediaControlsHost || isSuspended())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLMediaElement.cpp","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -251,0 +251,1 @@\n+    Vector<Ref<HTMLDataListElement>> ancestors;\n@@ -252,1 +253,3 @@\n-        dataList.optionElementChildrenChanged();\n+        ancestors.append(dataList);\n+    for (auto& dataList : ancestors)\n+        dataList->optionElementChildrenChanged();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLOptionElement.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * Copyright (C) 2004-2019 Apple Inc. All rights reserved.\n+ * Copyright (C) 2004-2022 Apple Inc. All rights reserved.\n@@ -59,3 +59,0 @@\n-static const int defaultRows = 2;\n-static const int defaultCols = 20;\n-\n@@ -64,1 +61,1 @@\n-static inline unsigned computeLengthForSubmission(StringView text, unsigned numberOfLineBreaks)\n+static unsigned computeLengthForSubmission(StringView text, unsigned numberOfLineBreaks)\n@@ -80,1 +77,1 @@\n-static inline unsigned computeLengthForSubmission(StringView text)\n+static unsigned computeLengthForSubmission(StringView text)\n@@ -85,1 +82,1 @@\n-static inline unsigned upperBoundForLengthForSubmission(StringView text, unsigned numberOfLineBreaks)\n+static unsigned upperBoundForLengthForSubmission(StringView text, unsigned numberOfLineBreaks)\n@@ -90,4 +87,2 @@\n-HTMLTextAreaElement::HTMLTextAreaElement(const QualifiedName& tagName, Document& document, HTMLFormElement* form)\n-    : HTMLTextFormControlElement(tagName, document, form)\n-    , m_rows(defaultRows)\n-    , m_cols(defaultCols)\n+HTMLTextAreaElement::HTMLTextAreaElement(Document& document, HTMLFormElement* form)\n+    : HTMLTextFormControlElement(textareaTag, document, form)\n@@ -95,1 +90,0 @@\n-    ASSERT(hasTagName(textareaTag));\n@@ -101,1 +95,2 @@\n-    auto textArea = adoptRef(*new HTMLTextAreaElement(tagName, document, form));\n+    ASSERT_UNUSED(tagName, tagName == textareaTag);\n+    auto textArea = adoptRef(*new HTMLTextAreaElement(document, form));\n@@ -118,2 +113,1 @@\n-    static MainThreadNeverDestroyed<const AtomString> textarea(\"textarea\"_s);\n-    return textarea;\n+    return textareaTag->localName();\n@@ -149,1 +143,0 @@\n-\n@@ -158,1 +151,1 @@\n-        if (shouldWrapText()) {\n+        if (m_wrap != NoWrap) {\n@@ -200,11 +193,2 @@\n-    } else if (name == maxlengthAttr)\n-        maxLengthAttributeChanged(value);\n-    else if (name == minlengthAttr)\n-        minLengthAttributeChanged(value);\n-    else\n-        HTMLTextFormControlElement::parseAttribute(name, value);\n-}\n-\n-void HTMLTextAreaElement::maxLengthAttributeChanged(const AtomString& newValue)\n-{\n-    internalSetMaxLength(parseHTMLNonNegativeInteger(newValue).value_or(-1));\n+    } else if (name == maxlengthAttr) {\n+        internalSetMaxLength(parseHTMLNonNegativeInteger(value).value_or(-1));\n@@ -212,5 +196,2 @@\n-}\n-\n-void HTMLTextAreaElement::minLengthAttributeChanged(const AtomString& newValue)\n-{\n-    internalSetMinLength(parseHTMLNonNegativeInteger(newValue).value_or(-1));\n+    } else if (name == minlengthAttr) {\n+        internalSetMinLength(parseHTMLNonNegativeInteger(value).value_or(-1));\n@@ -218,0 +199,2 @@\n+    } else\n+        HTMLTextFormControlElement::parseAttribute(name, value);\n@@ -230,1 +213,1 @@\n-    Ref<HTMLTextAreaElement> protectedThis(*this);\n+    Ref protectedThis(*this);\n@@ -234,5 +217,2 @@\n-\n-    auto& dirnameAttrValue = attributeWithoutSynchronization(dirnameAttr);\n-    if (!dirnameAttrValue.isNull())\n-        formData.append(dirnameAttrValue, directionForFormData());\n-\n+    if (auto& dirname = attributeWithoutSynchronization(dirnameAttr); !dirname.isNull())\n+        formData.append(dirname, directionForFormData());\n@@ -247,21 +227,0 @@\n-bool HTMLTextAreaElement::hasCustomFocusLogic() const\n-{\n-    return true;\n-}\n-\n-int HTMLTextAreaElement::defaultTabIndex() const\n-{\n-    return 0;\n-}\n-\n-bool HTMLTextAreaElement::isKeyboardFocusable(KeyboardEvent*) const\n-{\n-    \/\/ If a given text area can be focused at all, then it will always be keyboard focusable.\n-    return isFocusable();\n-}\n-\n-bool HTMLTextAreaElement::isMouseFocusable() const\n-{\n-    return isFocusable();\n-}\n-\n@@ -309,1 +268,1 @@\n-    int signedMaxLength = effectiveMaxLength();\n+    int signedMaxLength = maxLength();\n@@ -331,6 +290,2 @@\n-    event.setText(sanitizeUserInputValue(event.text(), appendableLength));\n-}\n-\n-String HTMLTextAreaElement::sanitizeUserInputValue(const String& proposedValue, unsigned maxLength)\n-{\n-    return proposedValue.left(numCodeUnitsInGraphemeClusters(proposedValue, maxLength));\n+    auto text = event.text();\n+    event.setText(text.left(numCodeUnitsInGraphemeClusters(text, appendableLength)));\n@@ -341,1 +296,1 @@\n-    RefPtr<ShadowRoot> root = userAgentShadowRoot();\n+    RefPtr root = userAgentShadowRoot();\n@@ -344,1 +299,0 @@\n-\n@@ -353,5 +307,0 @@\n-void HTMLTextAreaElement::rendererWillBeDestroyed()\n-{\n-    updateValue();\n-}\n-\n@@ -453,1 +402,1 @@\n-        return validationMessageTooLongText(computeLengthForSubmission(value()), effectiveMaxLength());\n+        return validationMessageTooLongText(computeLengthForSubmission(value()), maxLength());\n@@ -460,1 +409,1 @@\n-    return willValidate() && valueMissing(value());\n+    return willValidate() && valueMissing({ });\n@@ -465,1 +414,20 @@\n-    return willValidate() && tooShort(value(), CheckDirtyFlag);\n+    return willValidate() && tooShort({ }, CheckDirtyFlag);\n+}\n+\n+bool HTMLTextAreaElement::tooLong() const\n+{\n+    return willValidate() && tooLong({ }, CheckDirtyFlag);\n+}\n+\n+bool HTMLTextAreaElement::valueMissing(StringView value) const\n+{\n+    if (!(isRequired() && isMutable()))\n+        return false;\n+    if (value.isNull())\n+        value = this->value();\n+    return value.isEmpty();\n+}\n+\n+bool HTMLTextAreaElement::isValidValue(StringView candidate) const\n+{\n+    return !valueMissing(candidate) && !tooShort(candidate, IgnoreDirtyFlag) && !tooLong(candidate, IgnoreDirtyFlag);\n@@ -479,0 +447,3 @@\n+    if (value.isNull())\n+        value = this->value();\n+\n@@ -491,5 +462,0 @@\n-bool HTMLTextAreaElement::tooLong() const\n-{\n-    return willValidate() && tooLong(value(), CheckDirtyFlag);\n-}\n-\n@@ -503,1 +469,1 @@\n-    int max = effectiveMaxLength();\n+    int max = maxLength();\n@@ -507,0 +473,3 @@\n+    if (value.isNull())\n+        value = this->value();\n+\n@@ -509,1 +478,1 @@\n-    unsigned unsignedMax = static_cast<unsigned>(max);\n+    unsigned unsignedMax = max;\n@@ -515,5 +484,0 @@\n-bool HTMLTextAreaElement::isValidValue(const String& candidate) const\n-{\n-    return !valueMissing(candidate) && !tooShort(candidate, IgnoreDirtyFlag) && !tooLong(candidate, IgnoreDirtyFlag);\n-}\n-\n@@ -536,15 +500,0 @@\n-bool HTMLTextAreaElement::shouldUseInputMethod()\n-{\n-    return true;\n-}\n-\n-HTMLElement* HTMLTextAreaElement::placeholderElement() const\n-{\n-    return m_placeholder.get();\n-}\n-\n-bool HTMLTextAreaElement::matchesReadWritePseudoClass() const\n-{\n-    return !isDisabledOrReadOnly();\n-}\n-\n@@ -568,5 +517,0 @@\n-bool HTMLTextAreaElement::willRespondToMouseClickEventsWithEditability(Editability) const\n-{\n-    return !isDisabledFormControl();\n-}\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLTextAreaElement.cpp","additions":53,"deletions":109,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * Copyright (C) 2004, 2005, 2006, 2007, 2010 Apple Inc. All rights reserved.\n+ * Copyright (C) 2004-2022 Apple Inc. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"SelectionRestorationMode.h\"\n@@ -33,1 +32,2 @@\n-class VisibleSelection;\n+\n+enum class SelectionRestorationMode : uint8_t;\n@@ -41,1 +41,0 @@\n-    unsigned cols() const { return m_cols; }\n@@ -43,5 +42,3 @@\n-\n-    bool shouldWrapText() const { return m_wrap != NoWrap; }\n-\n-    WEBCORE_EXPORT String value() const final;\n-    WEBCORE_EXPORT ExceptionOr<void> setValue(const String&, TextFieldEventBehavior = DispatchNoEvent, TextControlSetValueSelection = TextControlSetValueSelection::SetSelectionToEnd) final;\n+    WEBCORE_EXPORT void setRows(unsigned);\n+    unsigned cols() const { return m_cols; }\n+    WEBCORE_EXPORT void setCols(unsigned);\n@@ -50,3 +47,3 @@\n-    int textLength() const { return value().length(); }\n-    int effectiveMaxLength() const { return maxLength(); }\n-    \/\/ For ValidityState\n+    WEBCORE_EXPORT String value() const final;\n+    WEBCORE_EXPORT ExceptionOr<void> setValue(const String&, TextFieldEventBehavior = DispatchNoEvent, TextControlSetValueSelection = TextControlSetValueSelection::SetSelectionToEnd) final;\n+    unsigned textLength() const { return value().length(); }\n@@ -54,11 +51,0 @@\n-    bool valueMissing() const final;\n-    bool tooShort() const final;\n-    bool tooLong() const final;\n-    bool isValidValue(const String&) const;\n-\n-    WEBCORE_EXPORT RefPtr<TextControlInnerTextElement> innerTextElement() const final;\n-    WEBCORE_EXPORT RefPtr<TextControlInnerTextElement> innerTextElementCreatingShadowSubtreeIfNeeded() final;\n-    RenderStyle createInnerTextStyle(const RenderStyle&) final;\n-    void copyNonAttributePropertiesFromElement(const Element&) final;\n-\n-    void rendererWillBeDestroyed();\n@@ -66,2 +52,1 @@\n-    WEBCORE_EXPORT void setCols(unsigned);\n-    WEBCORE_EXPORT void setRows(unsigned);\n+    void rendererWillBeDestroyed() { updateValue(); }\n@@ -69,3 +54,1 @@\n-    bool willRespondToMouseClickEventsWithEditability(Editability) const final;\n-\n-    RenderTextControlMultiLine* renderer() const;\n+    WEBCORE_EXPORT RefPtr<TextControlInnerTextElement> innerTextElement() const final;\n@@ -74,3 +57,1 @@\n-    HTMLTextAreaElement(const QualifiedName&, Document&, HTMLFormElement*);\n-\n-    enum WrapMethod { NoWrap, SoftWrap, HardWrap };\n+    HTMLTextAreaElement(Document&, HTMLFormElement*);\n@@ -80,3 +61,0 @@\n-    void maxLengthAttributeChanged(const AtomString& newValue);\n-    void minLengthAttributeChanged(const AtomString& newValue);\n-\n@@ -84,1 +62,0 @@\n-    static String sanitizeUserInputValue(const String&, unsigned maxLength);\n@@ -89,0 +66,2 @@\n+    bool supportsReadOnly() const final { return true; }\n+\n@@ -90,1 +69,1 @@\n-    HTMLElement* placeholderElement() const final;\n+    HTMLElement* placeholderElement() const final { return m_placeholder.get(); }\n@@ -120,4 +99,4 @@\n-    bool hasCustomFocusLogic() const final;\n-    int defaultTabIndex() const final;\n-    bool isMouseFocusable() const final;\n-    bool isKeyboardFocusable(KeyboardEvent*) const final;\n+    bool hasCustomFocusLogic() const final { return true; }\n+    int defaultTabIndex() const final { return 0; }\n+    bool isMouseFocusable() const final { return isFocusable(); }\n+    bool isKeyboardFocusable(KeyboardEvent*) const final { return isFocusable(); }\n@@ -126,1 +105,1 @@\n-    bool accessKeyAction(bool sendMouseEvents) final;\n+    bool accessKeyAction(bool) final;\n@@ -128,2 +107,2 @@\n-    bool shouldUseInputMethod() final;\n-    bool matchesReadWritePseudoClass() const final;\n+    bool shouldUseInputMethod() final { return true; }\n+    bool matchesReadWritePseudoClass() const final { return isMutable(); }\n@@ -131,3 +110,4 @@\n-    bool valueMissing(const String& value) const { return isRequiredFormControl() && !isDisabledOrReadOnly() && value.isEmpty(); }\n-    bool tooShort(StringView, NeedsToCheckDirtyFlag) const;\n-    bool tooLong(StringView, NeedsToCheckDirtyFlag) const;\n+    bool valueMissing() const final;\n+    bool tooShort() const final;\n+    bool tooLong() const final;\n+    bool isValidValue(StringView) const;\n@@ -135,3 +115,19 @@\n-    unsigned m_rows;\n-    unsigned m_cols;\n-    WrapMethod m_wrap { SoftWrap };\n+    bool valueMissing(StringView valueOverride) const;\n+    bool tooShort(StringView valueOverride, NeedsToCheckDirtyFlag) const;\n+    bool tooLong(StringView valueOverride, NeedsToCheckDirtyFlag) const;\n+\n+    RefPtr<TextControlInnerTextElement> innerTextElementCreatingShadowSubtreeIfNeeded() final;\n+    RenderStyle createInnerTextStyle(const RenderStyle&) final;\n+    void copyNonAttributePropertiesFromElement(const Element&) final;\n+\n+    bool willRespondToMouseClickEventsWithEditability(Editability) const final { return !isDisabledFormControl(); }\n+\n+    RenderTextControlMultiLine* renderer() const;\n+\n+    enum WrapMethod : uint8_t { NoWrap, SoftWrap, HardWrap };\n+\n+    static constexpr unsigned defaultRows = 2;\n+    static constexpr unsigned defaultCols = 20;\n+\n+    unsigned m_rows { defaultRows };\n+    unsigned m_cols { defaultCols };\n@@ -140,2 +136,3 @@\n-    mutable bool m_isDirty { false };\n-    mutable bool m_wasModifiedByUser { false };\n+    WrapMethod m_wrap { SoftWrap };\n+    mutable uint8_t m_isDirty { false }; \/\/ uint8_t for better packing on Windows\n+    mutable uint8_t m_wasModifiedByUser { false }; \/\/ uint8_t for better packing on Windows\n@@ -144,1 +141,1 @@\n-} \/\/namespace\n+} \/\/ namespace\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLTextAreaElement.h","additions":49,"deletions":52,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-ExceptionOr<void> HTMLTextFormControlElement::setRangeText(const String& replacement)\n+ExceptionOr<void> HTMLTextFormControlElement::setRangeText(StringView replacement)\n@@ -246,1 +246,1 @@\n-ExceptionOr<void> HTMLTextFormControlElement::setRangeText(const String& replacement, unsigned start, unsigned end, const String& selectionMode)\n+ExceptionOr<void> HTMLTextFormControlElement::setRangeText(StringView replacement, unsigned start, unsigned end, const String& selectionMode)\n@@ -576,1 +576,1 @@\n-    return !isDisabledOrReadOnly();\n+    return isMutable();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLTextFormControlElement.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,2 +80,2 @@\n-    WEBCORE_EXPORT virtual ExceptionOr<void> setRangeText(const String& replacement);\n-    WEBCORE_EXPORT virtual ExceptionOr<void> setRangeText(const String& replacement, unsigned start, unsigned end, const String& selectionMode);\n+    WEBCORE_EXPORT ExceptionOr<void> setRangeText(StringView replacement);\n+    WEBCORE_EXPORT virtual ExceptionOr<void> setRangeText(StringView replacement, unsigned start, unsigned end, const String& selectionMode);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLTextFormControlElement.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -370,3 +370,0 @@\n-    if (document().quirks().needsAkamaiMediaPlayerQuirk(*this))\n-        return isFullscreen() || isChangingVideoFullscreenMode();\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLVideoElement.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -323,1 +323,0 @@\n-    virtual HTMLElement* capsLockIndicatorElement() const { return nullptr; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/InputType.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -423,3 +423,0 @@\n-    if (topDocument.hasHadUserInteraction() && document.quirks().shouldAutoplayForArbitraryUserGesture())\n-        return { };\n-\n@@ -1225,1 +1222,1 @@\n-            artwork = NowPlayingInfoArtwork { sessionMetadata->artworkSrc(), sessionMetadata->artworkImage()->mimeType(), sessionMetadata->artworkImage()->data() };\n+            artwork = NowPlayingInfoArtwork { sessionMetadata->artworkSrc(), sessionMetadata->artworkImage()->mimeType(), sessionMetadata->artworkImage() };\n@@ -1280,1 +1277,0 @@\n-        document.topDocument().hasHadUserInteraction() && document.quirks().shouldAutoplayForArbitraryUserGesture(),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/MediaElementSession.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-    if (element()->isDisabledOrReadOnly())\n+    if (!element()->isMutable())\n@@ -148,1 +148,1 @@\n-        protectedInputElement->setValueForUser(emptyString());\n+        protectedInputElement->setValue(emptyString(), DispatchChangeEvent);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/SearchInputType.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-    return !element()->isDisabledOrReadOnly() && element()->isRequired() && value.isEmpty();\n+    return element()->isMutable() && element()->isRequired() && value.isEmpty();\n@@ -216,1 +216,1 @@\n-    if (element()->isDisabledOrReadOnly())\n+    if (!element()->isMutable())\n@@ -410,5 +410,0 @@\n-HTMLElement* TextFieldInputType::capsLockIndicatorElement() const\n-{\n-    return m_capsLockIndicator.get();\n-}\n-\n@@ -490,0 +485,2 @@\n+    if (!element())\n+        return;\n@@ -769,1 +766,1 @@\n-    return !element()->isDisabledOrReadOnly();\n+    return element()->isMutable();\n@@ -784,1 +781,1 @@\n-    if (element()->isDisabledOrReadOnly())\n+    if (!element()->isMutable())\n@@ -812,1 +809,1 @@\n-    return !element()->isDisabledOrReadOnly() && element()->autoFillButtonType() != AutoFillButtonType::None;\n+    return element()->isMutable() && element()->autoFillButtonType() != AutoFillButtonType::None;\n@@ -903,1 +900,2 @@\n-\n+    if (!element())\n+        return;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/TextFieldInputType.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-    HTMLElement* capsLockIndicatorElement() const final;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/TextFieldInputType.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5353,0 +5353,8 @@\n+    CheckedSize imagePixelByteLength(imageExtractor.imageWidth());\n+    imagePixelByteLength *= imageExtractor.imageHeight();\n+    imagePixelByteLength *= 4u;\n+    GCGLsizei byteLength = 0;\n+    if (imagePixelByteLength.hasOverflowed() || !convertSafely(imagePixelByteLength, byteLength)) {\n+        synthesizeGLError(GraphicsContextGL::INVALID_OPERATION, functionName, \"image too large\");\n+        return;\n+    }\n@@ -5355,1 +5363,0 @@\n-    GCGLsizei byteLength = 0;\n@@ -5358,1 +5365,0 @@\n-        byteLength = imageExtractor.imageWidth() * imageExtractor.imageHeight() * 4;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/canvas\/WebGLRenderingContextBase.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-            if (m_document.settings().lazyImageLoadingEnabled()) {\n+            if (m_document.lazyImageLoadingEnabled()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/parser\/HTMLPreloadScanner.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-    if (input->isReadOnly() || input->isDisabledFormControl()) {\n+    if (!input->isMutable()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/shadow\/SliderThumbElement.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-    if (!input || input->isDisabledOrReadOnly()) {\n+    if (!input || !input->isMutable()) {\n@@ -337,1 +337,1 @@\n-        input->setValueForUser(emptyString());\n+        input->setValue(emptyString(), DispatchChangeEvent);\n@@ -350,1 +350,1 @@\n-    if (input && !input->isDisabledOrReadOnly())\n+    if (input && input->isMutable())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/shadow\/TextControlInnerElements.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1341,2 +1341,0 @@\n-        object.setString(\"line\"_s, autoAtom());\n-    else\n@@ -1344,0 +1342,2 @@\n+    else\n+        object.setString(\"line\"_s, autoAtom());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/track\/VTTCue.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -707,0 +707,4 @@\n+#endif \/\/ ENABLE(WEBGL)\n+\n+#if ENABLE(WEBGL2)\n+\n@@ -714,4 +718,0 @@\n-#endif \/\/ ENABLE(WEBGL)\n-\n-#if ENABLE(WEBGL2)\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/InspectorCanvas.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -125,1 +125,0 @@\n-    macro(WebGLVertexArrayObject*) \\\n@@ -135,0 +134,1 @@\n+    macro(WebGLVertexArrayObject*) \\\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/InspectorCanvasCallTracer.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1205,2 +1205,5 @@\n-    if (!frameLoader())\n-        return {};\n+    if (!frameLoader()) {\n+        ResourceError error;\n+        error.setType(ResourceError::Type::Cancellation);\n+        return error;\n+    }\n@@ -1208,1 +1211,3 @@\n-    return frameLoader()->client().interruptedForPolicyChangeError(request());\n+    auto error = frameLoader()->client().interruptedForPolicyChangeError(request());\n+    error.setType(ResourceError::Type::Cancellation);\n+    return error;\n@@ -1213,3 +1218,1 @@\n-    ResourceError error = interruptedForPolicyChangeError();\n-    error.setType(ResourceError::Type::Cancellation);\n-    cancelMainResourceLoad(error);\n+    cancelMainResourceLoad(interruptedForPolicyChangeError());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/DocumentLoader.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-#include \"FileChooser.h\"\n@@ -215,1 +214,1 @@\n-        void abortOpenAndUpgradeNeeded(uint64_t, const IDBResourceIdentifier&) final { }\n+        void abortOpenAndUpgradeNeeded(uint64_t, const std::optional<IDBResourceIdentifier>&) final { }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/EmptyClients.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -244,2 +244,0 @@\n-    ASSERT(m_method == Method::Post || m_method == Method::Get);\n-\n@@ -250,1 +248,1 @@\n-    if (!requestURL.protocolIsJavaScript())\n+    if (m_method == Method::Get && !requestURL.protocolIsJavaScript())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FormSubmission.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -739,5 +739,0 @@\n-    if (m_pendingStateObject) {\n-        m_frame.document()->statePopped(*m_pendingStateObject);\n-        m_pendingStateObject = nullptr;\n-    }\n-\n@@ -1139,0 +1134,2 @@\n+        history().updateBackForwardListForFragmentScroll();\n+\n@@ -1144,2 +1141,0 @@\n-\n-        history().updateBackForwardListForFragmentScroll();\n@@ -1191,0 +1186,5 @@\n+    if (auto* parentFrame = m_frame.tree().parent(); parentFrame\n+        && (m_frame.document()->processingLoadEvent() || m_frame.document()->loadEventFinished())\n+        && !m_frame.document()->securityOrigin().isSameOriginAs(parentFrame->document()->securityOrigin()))\n+        m_frame.document()->dispatchWindowLoadEvent();\n+\n@@ -2223,4 +2223,0 @@\n-            \/\/ For cached pages, CachedFrame::restore will take care of firing the popstate event with the history item's state object\n-            if (history().currentItem() && !cachedPage)\n-                m_pendingStateObject = history().currentItem()->stateObject();\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.cpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -472,3 +472,0 @@\n-\n-    RefPtr<SerializedScriptValue> m_pendingStateObject;\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.h","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -863,0 +863,3 @@\n+    \/\/ Get a HistoryItem tree for the current frame tree.\n+    Ref<HistoryItem> topItem = m_frame.mainFrame().loader().history().createItemTree(m_frame, false);\n+\n@@ -867,3 +870,0 @@\n-    \/\/ Get a HistoryItem tree for the current frame tree.\n-    Ref<HistoryItem> topItem = m_frame.mainFrame().loader().history().createItemTree(m_frame, false);\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/HistoryController.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-                if (imageElement.isLazyLoadable() && document.settings().lazyImageLoadingEnabled()) {\n+                if (imageElement.isLazyLoadable() && document.lazyImageLoadingEnabled()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ImageLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-    m_handle = ResourceHandle::create(frameLoader()->networkingContext(), m_request, this, m_defersLoading, m_options.sniffContent == ContentSniffingPolicy::SniffContent, m_options.sniffContentEncoding == ContentEncodingSniffingPolicy::Sniff, WTFMove(sourceOrigin), isMainFrameNavigation);\n+    m_handle = ResourceHandle::create(frameLoader()->networkingContext(), m_request, this, m_defersLoading, m_options.sniffContent == ContentSniffingPolicy::SniffContent, m_options.contentEncodingSniffingPolicy, WTFMove(sourceOrigin), isMainFrameNavigation);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ResourceLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-    bool shouldSniffContentEncoding() const { return m_options.sniffContentEncoding == ContentEncodingSniffingPolicy::Sniff; }\n+    ContentEncodingSniffingPolicy contentEncodingSniffingPolicy() const { return m_options.contentEncodingSniffingPolicy; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ResourceLoader.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,2 +129,0 @@\n-\/\/ FIXME: These options are named poorly. We only implement force disabling content encoding sniffing, not enabling it,\n-\/\/ and even that only on some platforms.\n@@ -132,2 +130,2 @@\n-    Sniff,\n-    DoNotSniff\n+    Default,\n+    Disable\n@@ -166,1 +164,1 @@\n-        , sniffContentEncoding(ContentEncodingSniffingPolicy::Sniff)\n+        , contentEncodingSniffingPolicy(ContentEncodingSniffingPolicy::Default)\n@@ -187,1 +185,1 @@\n-        , sniffContentEncoding(ContentEncodingSniffingPolicy::Sniff)\n+        , contentEncodingSniffingPolicy(ContentEncodingSniffingPolicy::Default)\n@@ -221,1 +219,1 @@\n-    ContentEncodingSniffingPolicy sniffContentEncoding : bitWidthOfContentEncodingSniffingPolicy;\n+    ContentEncodingSniffingPolicy contentEncodingSniffingPolicy : bitWidthOfContentEncodingSniffingPolicy;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ResourceLoaderOptions.h","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -282,0 +282,3 @@\n+    if (m_frame.tree().depth() >= Page::maxFrameDepth)\n+        return nullptr;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/SubframeLoader.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+    copy.contentEncodingSniffingPolicy = this->contentEncodingSniffingPolicy;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ThreadableLoader.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -90,2 +90,2 @@\n-    auto* frame = this->frame();\n-    if (!frame)\n+    auto* window = this->window();\n+    if (!window)\n@@ -93,1 +93,1 @@\n-    return frame->document();\n+    return window->document();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/appcache\/DOMApplicationCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-#include \"FileChooser.h\"\n-#include \"FileIconLoader.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Chrome.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (C) 2006-2020 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2023 Apple Inc. All rights reserved.\n+ * Copyright (C) 2013 Google Inc. All rights reserved.\n@@ -433,0 +434,1 @@\n+    m_touchPressed = false;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/EventHandler.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -462,0 +462,8 @@\n+unsigned FrameTree::depth() const\n+{\n+    unsigned depth = 0;\n+    for (auto* parent = &m_thisFrame; parent; parent = parent->tree().parent())\n+        depth++;\n+    return depth;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/FrameTree.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+    unsigned depth() const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/FrameTree.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3579,1 +3579,6 @@\n-    frame().selection().updateAppearanceAfterLayout();\n+\n+    if (auto& selection = frame().selection(); selection.isFocusedAndActive()) {\n+        \/\/ FIXME (247041): We should be able to remove this appearance update altogether,\n+        \/\/ and instead defer updates until the next rendering update.\n+        selection.updateAppearanceAfterLayout();\n+    }\n@@ -5367,0 +5372,14 @@\n+void FrameView::addScrollableAreaForAnimatedScroll(ScrollableArea* scrollableArea)\n+{\n+    if (!m_scrollableAreasForAnimatedScroll)\n+        m_scrollableAreasForAnimatedScroll = makeUnique<ScrollableAreaSet>();\n+\n+    m_scrollableAreasForAnimatedScroll->add(scrollableArea);\n+}\n+\n+void FrameView::removeScrollableAreaForAnimatedScroll(ScrollableArea* scrollableArea)\n+{\n+    if (m_scrollableAreasForAnimatedScroll)\n+        m_scrollableAreasForAnimatedScroll->remove(scrollableArea);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/FrameView.cpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -598,0 +598,4 @@\n+    void addScrollableAreaForAnimatedScroll(ScrollableArea*);\n+    void removeScrollableAreaForAnimatedScroll(ScrollableArea*);\n+    const ScrollableAreaSet* scrollableAreasForAnimatedScroll() const { return m_scrollableAreasForAnimatedScroll.get(); }\n+\n@@ -980,0 +984,1 @@\n+    std::unique_ptr<ScrollableAreaSet> m_scrollableAreasForAnimatedScroll;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/FrameView.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -596,1 +596,1 @@\n-#if USE(LIBWEBRTC)\n+#if ENABLE(WEB_RTC)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Page.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -689,1 +689,4 @@\n-    static const int maxNumberOfFrames = 1000;\n+    static constexpr int maxNumberOfFrames = 1000;\n+\n+    \/\/ Don't allow more than a certain frame depth to avoid stack exhaustion.\n+    static constexpr int maxFrameDepth = 32;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Page.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"HTMLCollection.h\"\n@@ -151,13 +152,0 @@\n-bool Quirks::shouldAutoplayForArbitraryUserGesture() const\n-{\n-#if PLATFORM(MAC)\n-    return needsQuirks() && allowedAutoplayQuirks(*m_document).contains(AutoplayQuirk::ArbitraryUserGestures);\n-#else\n-    if (!needsQuirks())\n-        return false;\n-\n-    auto domain = RegistrableDomain { m_document->topDocument().url() };\n-    return domain == \"twitter.com\"_s || domain == \"facebook.com\"_s;\n-#endif\n-}\n-\n@@ -228,8 +216,0 @@\n-bool Quirks::shouldDisableResolutionMediaQuery() const\n-{\n-    if (!needsQuirks())\n-        return false;\n-    auto host = m_document->url().host();\n-    return equalLettersIgnoringASCIICase(host, \"www.hotels.com\"_s);\n-}\n-\n@@ -245,9 +225,0 @@\n-bool Quirks::shouldStripQuotationMarkInFontFaceSetFamily() const\n-{\n-    if (!needsQuirks())\n-        return false;\n-\n-    auto host = m_document->topDocument().url().host();\n-    return equalLettersIgnoringASCIICase(host, \"docs.google.com\"_s);\n-}\n-\n@@ -397,2 +368,0 @@\n-        if ((host == \"desmos.com\"_s || host.endsWith(\".desmos.com\"_s)) && startsWithLettersIgnoringASCIICase(url.path(), \"\/calculator\/\"_s))\n-            return ShouldDispatchSimulatedMouseEvents::Yes;\n@@ -1299,28 +1268,0 @@\n-\/\/ FIXME: remove this once rdar:\/\/66739450 has been fixed.\n-bool Quirks::needsAkamaiMediaPlayerQuirk(const HTMLVideoElement& element) const\n-{\n-#if PLATFORM(IOS_FAMILY)\n-    \/\/ Akamai Media Player begins polling `webkitDisplayingFullscreen` every 100ms immediately after calling\n-    \/\/ `webkitEnterFullscreen` and exits fullscreen as soon as it returns false. r262456 changed the HTMLMediaPlayer state\n-    \/\/ machine so `webkitDisplayingFullscreen` doesn't return true until the fullscreen window has been opened in the\n-    \/\/ UI process, which causes Akamai Media Player to frequently exit fullscreen mode immediately.\n-\n-    static NeverDestroyed<const AtomString> akamaiHTML5(MAKE_STATIC_STRING_IMPL(\"akamai-html5\"));\n-    static NeverDestroyed<const AtomString> akamaiMediaElement(MAKE_STATIC_STRING_IMPL(\"akamai-media-element\"));\n-    static NeverDestroyed<const AtomString> ampHTML5(MAKE_STATIC_STRING_IMPL(\"amp-html5\"));\n-    static NeverDestroyed<const AtomString> ampMediaElement(MAKE_STATIC_STRING_IMPL(\"amp-media-element\"));\n-\n-    if (!needsQuirks())\n-        return false;\n-\n-    if (!element.hasClass())\n-        return false;\n-\n-    auto& classNames = element.classNames();\n-    return (classNames.contains(akamaiHTML5) && classNames.contains(akamaiMediaElement)) || (classNames.contains(ampHTML5) && classNames.contains(ampMediaElement));\n-#else\n-    UNUSED_PARAM(element);\n-    return false;\n-#endif\n-}\n-\n@@ -1339,15 +1280,0 @@\n-bool Quirks::needsBlackFullscreenBackgroundQuirk() const\n-{\n-    \/\/ MLB.com sets a black background-color on the :backdrop pseudo element, which WebKit does not yet support. This\n-    \/\/ quirk can be removed once support for :backdrop psedue element is added.\n-    if (!needsQuirks())\n-        return false;\n-\n-    if (!m_needsBlackFullscreenBackgroundQuirk) {\n-        auto host = m_document->topDocument().url().host();\n-        m_needsBlackFullscreenBackgroundQuirk = equalLettersIgnoringASCIICase(host, \"mlb.com\"_s) || host.endsWithIgnoringASCIICase(\".mlb.com\"_s);\n-    }\n-\n-    return *m_needsBlackFullscreenBackgroundQuirk;\n-}\n-\n@@ -1532,1 +1458,4 @@\n-        m_shouldExposeShowModalDialog = domain == \"pandora.com\"_s;\n+        \/\/ Marcus: <rdar:\/\/101086391>.\n+        \/\/ Pandora: <rdar:\/\/100243111>.\n+        \/\/ Soundcloud: <rdar:\/\/102913500>.\n+        m_shouldExposeShowModalDialog = domain == \"pandora.com\"_s || domain == \"marcus.com\"_s || domain == \"soundcloud.com\"_s;\n@@ -1537,0 +1466,27 @@\n+bool Quirks::shouldDisableLazyImageLoadingQuirk() const\n+{\n+    \/\/ Images are displaying as fully grey when loaded lazily in significant percentage of page loads.\n+    \/\/ This issue is not observed when lazy image loading is disabled, and has been fixed in future Gatsby versions.\n+    \/\/ This quirk is only applied to IKEA.com when \"<meta name=\"generator\" content=\"Gatsby 4.24.1\" \/>\" is present.\n+    \/\/ This quirk can be removed once the gatsby version has been upgraded.\n+    \/\/ Further discussion can be found here https:\/\/github.com\/webcompat\/web-bugs\/issues\/113635.\n+\n+    if (!needsQuirks())\n+        return false;\n+\n+    if (m_shouldDisableLazyImageLoadingQuirk)\n+        return m_shouldDisableLazyImageLoadingQuirk.value();\n+\n+    m_shouldDisableLazyImageLoadingQuirk = false;\n+\n+    if (RegistrableDomain(m_document->url()).string() != \"ikea.com\"_s)\n+        return false;\n+\n+    auto* metaElement = m_document->getElementsByTagName(\"meta\"_s)->namedItem(\"generator\"_s);\n+\n+    if (metaElement && metaElement->getAttribute(\"content\"_s) == \"Gatsby 4.24.1\"_s)\n+        m_shouldDisableLazyImageLoadingQuirk = true;\n+\n+    return m_shouldDisableLazyImageLoadingQuirk.value();\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Quirks.cpp","additions":32,"deletions":76,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include <optional>\n@@ -63,1 +64,0 @@\n-    bool shouldAutoplayForArbitraryUserGesture() const;\n@@ -66,1 +66,0 @@\n-    bool shouldStripQuotationMarkInFontFaceSetFamily() const;\n@@ -84,1 +83,0 @@\n-    bool shouldDisableResolutionMediaQuery() const;\n@@ -136,1 +134,0 @@\n-    bool needsAkamaiMediaPlayerQuirk(const HTMLVideoElement&) const;\n@@ -139,2 +136,0 @@\n-    bool needsBlackFullscreenBackgroundQuirk() const;\n-\n@@ -168,0 +163,2 @@\n+    bool shouldDisableLazyImageLoadingQuirk() const;\n+\n@@ -222,0 +219,1 @@\n+    mutable std::optional<bool> m_shouldDisableLazyImageLoadingQuirk;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Quirks.h","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -168,0 +168,11 @@\n+        auto makeValidHTTPHeaderIfNeeded = [this](auto& header) {\n+            \/\/ If coming from an existing HTTP header it should be valid already.\n+            if (m_isHeaderDelivered)\n+                return header;\n+\n+            \/\/ Newlines are valid in http-equiv but not in HTTP header value.\n+            auto returnValue = makeStringByReplacingAll(header, '\\n', \"\"_s);\n+            returnValue = makeStringByReplacingAll(returnValue, '\\r', \"\"_s);\n+            return returnValue;\n+        };\n+\n@@ -169,2 +180,2 @@\n-        result.m_headers = m_policies.map([](auto& policy) {\n-            return std::pair { policy->header(), policy->headerType() };\n+        result.m_headers = m_policies.map([&makeValidHTTPHeaderIfNeeded](auto& policy) {\n+            return std::pair { makeValidHTTPHeaderIfNeeded(policy->header()), policy->headerType() };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/csp\/ContentSecurityPolicy.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"HTTPParsers.h\"\n@@ -436,0 +437,7 @@\n+    \/\/ A meta tag delievered CSP could contain invalid HTTP header values depending on how it was formatted in the document.\n+    \/\/ We want to store the CSP as a valid HTTP header for e.g. blob URL inheritance.\n+    if (policyFrom == ContentSecurityPolicy::PolicyFrom::HTTPEquivMeta) {\n+        m_header = stripLeadingAndTrailingHTTPSpaces(policy).removeCharacters([](auto c) {\n+            return c == 0x00 || c == '\\r' || c == '\\n';\n+        });\n+    } else\n@@ -437,0 +445,1 @@\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/csp\/ContentSecurityPolicyDirectiveList.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -446,1 +446,1 @@\n-    if (auto* scrollableArea = frameView->scrollableAreaForScrollingNodeID(scrollingNodeID))\n+    if (auto* scrollableArea = frameView->scrollableAreaForScrollingNodeID(scrollingNodeID)) {\n@@ -448,0 +448,2 @@\n+        scrollableArea->animatedScrollDidEnd();\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/scrolling\/AsyncScrollingCoordinator.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-FileChooser::FileChooser(FileChooserClient* client, const FileChooserSettings& settings)\n-    : m_client(client)\n+FileChooser::FileChooser(FileChooserClient& client, const FileChooserSettings& settings)\n+    : m_client(&client)\n@@ -40,1 +40,1 @@\n-Ref<FileChooser> FileChooser::create(FileChooserClient* client, const FileChooserSettings& settings)\n+Ref<FileChooser> FileChooser::create(FileChooserClient& client, const FileChooserSettings& settings)\n@@ -77,2 +77,0 @@\n-\/\/ FIXME: This function is almost identical to FileChooser::chooseFiles(). We should merge this function\n-\/\/ with FileChooser::chooseFiles() and hence remove the PLATFORM(IOS_FAMILY)-guard.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/FileChooser.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,3 @@\n-enum MediaCaptureType {\n+class Icon;\n+\n+enum class MediaCaptureType : uint8_t {\n@@ -45,3 +47,0 @@\n-class FileChooser;\n-class Icon;\n-\n@@ -64,1 +63,1 @@\n-    MediaCaptureType mediaCaptureType { MediaCaptureTypeNone };\n+    MediaCaptureType mediaCaptureType { MediaCaptureType::MediaCaptureTypeNone };\n@@ -77,1 +76,1 @@\n-    static Ref<FileChooser> create(FileChooserClient*, const FileChooserSettings&);\n+    static Ref<FileChooser> create(FileChooserClient&, const FileChooserSettings&);\n@@ -85,2 +84,1 @@\n-    \/\/ FIXME: This function is almost identical to FileChooser::chooseFiles(). We should merge this\n-    \/\/ function with FileChooser::chooseFiles() and hence remove the PLATFORM(IOS_FAMILY)-guard.\n+    \/\/ FIXME: This function is almost identical to FileChooser::chooseFiles(). We should merge this in and remove this one.\n@@ -96,1 +94,1 @@\n-    FileChooser(FileChooserClient*, const FileChooserSettings&);\n+    FileChooser(FileChooserClient&, const FileChooserSettings&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/FileChooser.h","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -7,0 +7,1 @@\n+        \"${WEBCORE_DIR}\/platform\/gstreamer\"\n@@ -68,0 +69,2 @@\n+        platform\/gstreamer\/GStreamerCodecUtilities.cpp\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/GStreamer.cmake","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        m_nowPlayingInfoArtwork = ArtworkCache { nowPlayingInfo.artwork->src, nowPlayingInfo.artwork->imageData };\n+        m_nowPlayingInfoArtwork = ArtworkCache { nowPlayingInfo.artwork->src, nowPlayingInfo.artwork->image };\n@@ -87,1 +87,1 @@\n-        m_nowPlayingInfo->artwork->imageData = nullptr;\n+        m_nowPlayingInfo->artwork->image = nullptr;\n@@ -98,1 +98,1 @@\n-    if (nowPlayingInfo.artwork && !nowPlayingInfo.artwork->imageData) {\n+    if (nowPlayingInfo.artwork && !nowPlayingInfo.artwork->image) {\n@@ -101,1 +101,1 @@\n-        nowPlayingInfoRebuilt.artwork->imageData = m_nowPlayingInfoArtwork->imageData;\n+        nowPlayingInfoRebuilt.artwork->image = m_nowPlayingInfoArtwork->image;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/NowPlayingManager.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+class Image;\n@@ -73,1 +74,1 @@\n-        RefPtr<FragmentedSharedBuffer> imageData;\n+        RefPtr<Image> image;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/NowPlayingManager.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -286,0 +286,1 @@\n+    m_scrollableArea.animatedScrollDidEnd();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/ScrollAnimator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -409,0 +409,10 @@\n+\n+template<> struct EnumTraits<WebCore::ScrollDirection> {\n+    using values = EnumValues<\n+        WebCore::ScrollDirection,\n+        WebCore::ScrollDirection::ScrollUp,\n+        WebCore::ScrollDirection::ScrollDown,\n+        WebCore::ScrollDirection::ScrollLeft,\n+        WebCore::ScrollDirection::ScrollRight\n+    >;\n+};\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/ScrollTypes.h","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -283,0 +283,1 @@\n+    virtual void animatedScrollDidEnd() { };\n@@ -389,0 +390,1 @@\n+    virtual bool needsAnimatedScroll() const { return false; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/ScrollableArea.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,0 +54,3 @@\n+    if (m_fontCache)\n+        m_fontCache->invalidate();\n+    m_fontCache = nullptr;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/ThreadGlobalData.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,0 +109,2 @@\n+    bool m_destroyed { false };\n+\n@@ -128,1 +130,0 @@\n-    bool m_destroyed { false };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/ThreadGlobalData.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-void ThemeAdwaita::paintArrow(GraphicsContext& graphicsContext, ArrowDirection direction, bool useDarkAppearance)\n+void ThemeAdwaita::paintArrow(GraphicsContext& graphicsContext, const FloatRect& rect, ArrowDirection direction, bool useDarkAppearance)\n@@ -137,0 +137,15 @@\n+    auto offset = rect.location();\n+    float size;\n+    if (rect.width() > rect.height()) {\n+        size = rect.height();\n+        offset.move((rect.width() - size) \/ 2, 0);\n+    } else {\n+        size = rect.width();\n+        offset.move(0, (rect.height() - size) \/ 2);\n+    }\n+    float zoomFactor = size \/ arrowSize;\n+    auto transform = [&](FloatPoint point) {\n+        point.scale(zoomFactor);\n+        point.moveBy(offset);\n+        return point;\n+    };\n@@ -140,3 +155,3 @@\n-        path.moveTo({ 3, 6 });\n-        path.addLineTo({ 13, 6 });\n-        path.addLineTo({ 8, 11 });\n+        path.moveTo(transform({ 3, 6 }));\n+        path.addLineTo(transform({ 13, 6 }));\n+        path.addLineTo(transform({ 8, 11 }));\n@@ -145,3 +160,3 @@\n-        path.moveTo({ 3, 10 });\n-        path.addLineTo({ 8, 5 });\n-        path.addLineTo({ 13, 10});\n+        path.moveTo(transform({ 3, 10 }));\n+        path.addLineTo(transform({ 8, 5 }));\n+        path.addLineTo(transform({ 13, 10 }));\n@@ -166,1 +181,1 @@\n-            buttonSize.width = Length(12, LengthType::Fixed);\n+            buttonSize.width = Length(12 * zoomFactor, LengthType::Fixed);\n@@ -168,1 +183,1 @@\n-            buttonSize.height = Length(12, LengthType::Fixed);\n+            buttonSize.height = Length(12 * zoomFactor, LengthType::Fixed);\n@@ -174,1 +189,1 @@\n-            spinButtonSize.width = Length(static_cast<int>(arrowSize), LengthType::Fixed);\n+            spinButtonSize.width = Length(static_cast<int>(arrowSize * zoomFactor), LengthType::Fixed);\n@@ -495,8 +510,1 @@\n-        GraphicsContextStateSaver buttonStateSaver(graphicsContext);\n-        if (buttonRect.height() > arrowSize)\n-            graphicsContext.translate(buttonRect.x(), buttonRect.y() + (buttonRect.height() \/ 2.0) - (arrowSize \/ 2.));\n-        else {\n-            graphicsContext.translate(buttonRect.x(), buttonRect.y());\n-            graphicsContext.scale(FloatSize::narrowPrecision(buttonRect.width() \/ arrowSize, buttonRect.height() \/ arrowSize));\n-        }\n-        paintArrow(graphicsContext, ArrowDirection::Up, useDarkAppearance);\n+        paintArrow(graphicsContext, buttonRect, ArrowDirection::Up, useDarkAppearance);\n@@ -513,0 +521,2 @@\n+            else\n+                graphicsContext.setFillColor(spinButtonBackgroundColor);\n@@ -517,8 +527,1 @@\n-        GraphicsContextStateSaver buttonStateSaver(graphicsContext);\n-        if (buttonRect.height() > arrowSize)\n-            graphicsContext.translate(buttonRect.x(), buttonRect.y() + (buttonRect.height() \/ 2.0) - (arrowSize \/ 2.));\n-        else {\n-            graphicsContext.translate(buttonRect.x(), buttonRect.y());\n-            graphicsContext.scale(FloatSize::narrowPrecision(buttonRect.width() \/ arrowSize, buttonRect.height() \/ arrowSize));\n-        }\n-        paintArrow(graphicsContext, ArrowDirection::Down, useDarkAppearance);\n+        paintArrow(graphicsContext, buttonRect, ArrowDirection::Down, useDarkAppearance);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/adwaita\/ThemeAdwaita.cpp","additions":29,"deletions":26,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    static void paintArrow(GraphicsContext&, ArrowDirection, bool);\n+    static void paintArrow(GraphicsContext&, const FloatRect&, ArrowDirection, bool);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/adwaita\/ThemeAdwaita.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-        if (*m_stepPosition == StepPosition::End && !otherSteps.m_stepPosition)\n+        if (!otherSteps.m_stepPosition && *m_stepPosition == StepPosition::End)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/animation\/TimingFunction.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"Image.h\"\n@@ -29,1 +30,0 @@\n-#include \"SharedBuffer.h\"\n@@ -39,1 +39,1 @@\n-    RefPtr<FragmentedSharedBuffer> imageData;\n+    RefPtr<Image> image;\n@@ -57,1 +57,2 @@\n-    encoder << src << mimeType << imageData;\n+    \/\/ Encoder of RefPtr<Image> will automatically decode the image and convert it to a BitmapImage\/ShareableBitmap.\n+    encoder << src << mimeType << image;\n@@ -62,7 +63,3 @@\n-    String src;\n-    if (!decoder.decode(src))\n-        return { };\n-\n-    String mimeType;\n-    if (!decoder.decode(mimeType))\n-        return { };\n+    auto src = decoder.template decode<String>();\n+    auto mimeType = decoder.template decode<String>();\n+    auto image = decoder.template decode<RefPtr<Image>>();\n@@ -70,3 +67,2 @@\n-    RefPtr<FragmentedSharedBuffer> imageData;\n-    if (!decoder.decode(imageData))\n-        return { };\n+    if (UNLIKELY(!decoder.isValid()))\n+        return std::nullopt;\n@@ -74,1 +70,1 @@\n-    return NowPlayingInfoArtwork { WTFMove(src), WTFMove(mimeType), WTFMove(imageData) };\n+    return { { WTFMove(*src), WTFMove(*mimeType), WTFMove(*image) } };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/NowPlayingInfo.h","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-    void setPlayer(MediaPlayer* player) { ASSERT(isMainThread()); m_player = player; }\n+    void setPlayer(WeakPtr<MediaPlayer>&& player) { ASSERT(isMainThread()); m_player = WTFMove(player); }\n@@ -266,4 +266,1 @@\n-    \/\/ FIXME: WeakPtr for the m_player? This is accessed from background and main threads, it's\n-    \/\/ concerning we could be accessing it in the middle of a shutdown on the main-thread, eh?\n-    \/\/ As a CDMProxy, we ***should*** be turned off before this pointer ever goes bad.\n-    MediaPlayer* m_player { nullptr }; \/\/ FIXME: MainThread<T>?\n+    WeakPtr<MediaPlayer> m_player;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/encryptedmedia\/CDMProxy.h","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -198,1 +198,0 @@\n-private:\n@@ -200,0 +199,2 @@\n+\n+private:\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/FontCache.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-    bool hasHadUserInteractionAndQuirksContainsShouldAutoplayForArbitraryUserGesture { false };\n@@ -94,1 +93,0 @@\n-            && hasHadUserInteractionAndQuirksContainsShouldAutoplayForArbitraryUserGesture == other.hasHadUserInteractionAndQuirksContainsShouldAutoplayForArbitraryUserGesture\n@@ -142,1 +140,0 @@\n-    encoder << hasHadUserInteractionAndQuirksContainsShouldAutoplayForArbitraryUserGesture;\n@@ -226,3 +223,0 @@\n-    if (!decoder.decode(info.hasHadUserInteractionAndQuirksContainsShouldAutoplayForArbitraryUserGesture))\n-        return { };\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/MediaUsageInfo.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -140,0 +140,8 @@\n+MediaTime PlatformTimeRanges::minimumBufferedTime() const\n+{\n+    if (!length())\n+        return MediaTime::invalidTime();\n+\n+    return m_ranges[0].m_start;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/PlatformTimeRanges.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+    MediaTime minimumBufferedTime() const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/PlatformTimeRanges.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+static const unsigned evictionAlgorithmInitialTimeChunk = 30000;\n+static const unsigned evictionAlgorithmTimeChunkLowThreshold = 3000;\n@@ -358,0 +360,15 @@\n+MediaTime SourceBufferPrivate::findPreviousSyncSamplePresentationTime(const MediaTime& time)\n+{\n+    MediaTime previousSyncSamplePresentationTime = time;\n+    for (auto& trackBufferKeyValue : m_trackBufferMap) {\n+        TrackBuffer& trackBuffer = trackBufferKeyValue.value;\n+        auto sampleIterator = trackBuffer.samples().decodeOrder().findSyncSamplePriorToPresentationTime(time);\n+        if (sampleIterator == trackBuffer.samples().decodeOrder().rend())\n+            continue;\n+        const MediaTime& samplePresentationTime = sampleIterator->first.second;\n+        if (samplePresentationTime < time)\n+            previousSyncSamplePresentationTime = samplePresentationTime;\n+    }\n+    return previousSyncSamplePresentationTime;\n+}\n+\n@@ -404,1 +421,1 @@\n-void SourceBufferPrivate::evictCodedFrames(uint64_t newDataSize, uint64_t maximumBufferSize, const MediaTime& currentTime, const MediaTime& duration, bool isEnded)\n+void SourceBufferPrivate::evictCodedFrames(uint64_t newDataSize, uint64_t maximumBufferSize, const MediaTime& currentTime, bool isEnded)\n@@ -415,1 +432,2 @@\n-    if (!isBufferFullFor(newDataSize, maximumBufferSize))\n+    bool isBufferFull = isBufferFullFor(newDataSize, maximumBufferSize);\n+    if (!isBufferFull)\n@@ -421,4 +439,2 @@\n-    \/\/ NOTE: begin by removing data from the beginning of the buffered ranges, 30 seconds at\n-    \/\/ a time, up to 30 seconds before currentTime.\n-    MediaTime thirtySeconds = MediaTime(30, 1);\n-    MediaTime maximumRangeEnd = currentTime - thirtySeconds;\n+    \/\/ NOTE: begin by removing data from the beginning of the buffered ranges, timeChunk seconds at\n+    \/\/ a time, up to timeChunk seconds before currentTime.\n@@ -431,1 +447,1 @@\n-    MediaTime rangeStart = MediaTime::invalidTime();\n+    const auto& buffered = m_buffered->ranges();\n@@ -433,8 +449,4 @@\n-    for (auto& trackBuffer : m_trackBufferMap.values()) {\n-        auto iter = trackBuffer.get().samples().presentationOrder().findSampleContainingOrAfterPresentationTime(MediaTime::zeroTime());\n-        if (iter != trackBuffer.get().samples().presentationOrder().end()) {\n-            MediaTime startTime = iter->first;\n-            if (rangeStart.isInvalid() || startTime < rangeStart)\n-                rangeStart = startTime;\n-        }\n-    }\n+    unsigned timeChunkAsMilliseconds = evictionAlgorithmInitialTimeChunk;\n+    do {\n+        const MediaTime timeChunk = MediaTime(timeChunkAsMilliseconds, 1000);\n+        const MediaTime maximumRangeEnd = std::min(currentTime - timeChunk, findPreviousSyncSamplePresentationTime(currentTime));\n@@ -442,2 +454,6 @@\n-    if (rangeStart.isInvalid())\n-        rangeStart = MediaTime::zeroTime();\n+        do {\n+            MediaTime rangeStart = buffered.minimumBufferedTime();\n+            MediaTime rangeEnd = std::min(rangeStart + timeChunk, maximumRangeEnd);\n+\n+            if (rangeStart >= rangeEnd)\n+                break;\n@@ -445,2 +461,0 @@\n-    MediaTime rangeEnd = rangeStart + thirtySeconds;\n-    while (rangeStart < maximumRangeEnd) {\n@@ -449,2 +463,3 @@\n-        removeCodedFrames(rangeStart, std::min(rangeEnd, maximumRangeEnd), currentTime, isEnded);\n-        if (!isBufferFullFor(newDataSize, maximumBufferSize)) {\n+            removeCodedFrames(rangeStart, rangeEnd, currentTime, isEnded);\n+            MediaTime newRangeStart = buffered.minimumBufferedTime();\n+            if (newRangeStart == rangeStart)\n@@ -452,1 +467,0 @@\n-        }\n@@ -454,3 +468,2 @@\n-        rangeStart += thirtySeconds;\n-        rangeEnd += thirtySeconds;\n-    }\n+            isBufferFull = isBufferFullFor(newDataSize, maximumBufferSize);\n+        } while (isBufferFull);\n@@ -458,6 +471,2 @@\n-    if (!isBufferFullFor(newDataSize, maximumBufferSize)) {\n-#if !RELEASE_LOG_DISABLED\n-        DEBUG_LOG(LOGIDENTIFIER, \"evicted \", initialBufferedSize - totalTrackBufferSizeInBytes());\n-#endif\n-        return;\n-    }\n+        timeChunkAsMilliseconds \/= 2;\n+    } while (isBufferFull && timeChunkAsMilliseconds >= evictionAlgorithmTimeChunkLowThreshold);\n@@ -465,6 +474,1 @@\n-    \/\/ If there still isn't enough free space and there buffers in time ranges after the current range (ie. there is a gap after\n-    \/\/ the current buffered range), delete 30 seconds at a time from duration back to the current time range or 30 seconds after\n-    \/\/ currenTime whichever we hit first.\n-    auto buffered = m_buffered->ranges().copyWithEpsilon(timeFudgeFactor());\n-    uint64_t currentTimeRange = buffered.findWithEpsilon(currentTime, timeFudgeFactor());\n-    if (!buffered.length() || currentTimeRange == buffered.length() - 1) {\n+    if (!isBufferFull) {\n@@ -472,1 +476,1 @@\n-        ERROR_LOG(LOGIDENTIFIER, \"FAILED to free enough after evicting \", initialBufferedSize - totalTrackBufferSizeInBytes());\n+        DEBUG_LOG(LOGIDENTIFIER, \"evicted \", initialBufferedSize - totalTrackBufferSizeInBytes());\n@@ -477,9 +481,19 @@\n-    MediaTime minimumRangeStart =\n-        currentTimeRange == notFound ? currentTime + thirtySeconds : std::max(currentTime + thirtySeconds, buffered.end(currentTimeRange));\n-\n-    rangeEnd = duration;\n-    if (!rangeEnd.isFinite()) {\n-        rangeEnd = buffered.maximumBufferedTime();\n-#if !RELEASE_LOG_DISABLED\n-        DEBUG_LOG(LOGIDENTIFIER, \"MediaSource duration is not a finite value, using maximum buffered time: \", rangeEnd);\n-#endif\n+    timeChunkAsMilliseconds = evictionAlgorithmInitialTimeChunk;\n+    do {\n+        const MediaTime timeChunk = MediaTime(timeChunkAsMilliseconds, 1000);\n+        const MediaTime minimumRangeStart = currentTime + timeChunk;\n+\n+        do {\n+            MediaTime rangeEnd = buffered.maximumBufferedTime();\n+            MediaTime rangeStart = std::max(minimumRangeStart, rangeEnd - timeChunk);\n+\n+            if (rangeStart >= rangeEnd)\n+                break;\n+\n+            \/\/ Do not evict data from the time range that contains currentTime.\n+            size_t currentTimeRange = buffered.find(currentTime);\n+            size_t startTimeRange = buffered.find(rangeStart);\n+            if (currentTimeRange != notFound && startTimeRange == currentTimeRange) {\n+                size_t endTimeRange = buffered.find(rangeEnd);\n+                if (endTimeRange == currentTimeRange)\n+                    break;\n@@ -488,2 +502,0 @@\n-    rangeStart = rangeEnd - thirtySeconds;\n-    while (rangeEnd > minimumRangeStart) {\n@@ -492,3 +504,3 @@\n-        removeCodedFrames(std::max(minimumRangeStart, rangeStart), rangeEnd, currentTime, isEnded);\n-\n-        if (!isBufferFullFor(newDataSize, maximumBufferSize)) {\n+            removeCodedFrames(rangeStart, rangeEnd, currentTime, isEnded);\n+            MediaTime newRangeEnd = buffered.maximumBufferedTime();\n+            if (newRangeEnd == rangeEnd)\n@@ -496,1 +508,0 @@\n-        }\n@@ -498,2 +509,11 @@\n-        rangeStart -= thirtySeconds;\n-        rangeEnd -= thirtySeconds;\n+            isBufferFull = isBufferFullFor(newDataSize, maximumBufferSize);\n+        } while (isBufferFull);\n+\n+        timeChunkAsMilliseconds \/= 2;\n+    } while (isBufferFull && timeChunkAsMilliseconds >= evictionAlgorithmTimeChunkLowThreshold);\n+\n+    if (!isBufferFull) {\n+#if !RELEASE_LOG_DISABLED\n+        DEBUG_LOG(LOGIDENTIFIER, \"evicted \", initialBufferedSize - totalTrackBufferSizeInBytes());\n+#endif\n+        return;\n@@ -503,1 +523,0 @@\n-    if (isBufferFullFor(newDataSize, maximumBufferSize))\n@@ -505,2 +524,0 @@\n-    else\n-        DEBUG_LOG(LOGIDENTIFIER, \"evicted \", initialBufferedSize - totalTrackBufferSizeInBytes());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/SourceBufferPrivate.cpp","additions":75,"deletions":58,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-    WEBCORE_EXPORT virtual void evictCodedFrames(uint64_t newDataSize, uint64_t maximumBufferSize, const MediaTime& currentTime, const MediaTime& duration, bool isEnded);\n+    WEBCORE_EXPORT virtual void evictCodedFrames(uint64_t newDataSize, uint64_t maximumBufferSize, const MediaTime& currentTime, bool isEnded);\n@@ -167,0 +167,1 @@\n+    MediaTime findPreviousSyncSamplePresentationTime(const MediaTime&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/SourceBufferPrivate.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -518,3 +518,0 @@\n-    case zeroWidthNoBreakSpace:\n-    case zeroWidthNonJoiner:\n-    case zeroWidthJoiner:\n@@ -540,0 +537,3 @@\n+    case zeroWidthNoBreakSpace:\n+    case zeroWidthNonJoiner:\n+    case zeroWidthJoiner:\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/WidthIterator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-        << \"FilterEffect \" << filterName() << \" \" << this << \" apply():\"\n+        << \"FilterEffect \" << filterName() << \" \" << this << \" apply(): \" << *this\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/filters\/FilterEffect.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include <wtf\/text\/TextStream.h>\n@@ -73,0 +74,5 @@\n+TextStream& operator<<(TextStream& ts, const FilterFunction& filterFunction)\n+{\n+    return filterFunction.externalRepresentation(ts, FilterRepresentation::Debugging);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/filters\/FilterFunction.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,0 +105,2 @@\n+WEBCORE_EXPORT TextStream& operator<<(TextStream&, const FilterFunction&);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/filters\/FilterFunction.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-void FEConvolveMatrixSoftwareApplier::applyPlatform(PaintingData& paintingData) const\n+void FEConvolveMatrixSoftwareApplier::setInteriorPixels(PaintingData& paintingData, int clipRight, int clipBottom)\n@@ -251,3 +251,4 @@\n-    \/\/ Drawing fully covered pixels\n-    int clipRight = paintingData.width - paintingData.kernelSize.width();\n-    int clipBottom = paintingData.height - paintingData.kernelSize.height();\n+    static constexpr int minimalRectDimension = 100 * 100; \/\/ Empirical data limit for parallel jobs\n+    int stride = 0;\n+    if (int iterations = paintingData.width * paintingData.height \/ minimalRectDimension)\n+        stride = clipBottom \/ iterations;\n@@ -255,3 +256,2 @@\n-    if (clipRight < 0 || clipBottom < 0) {\n-        \/\/ Rare situation, not optimized for speed\n-        setOuterPixels(paintingData, 0, 0, paintingData.width, paintingData.height);\n+    if (!stride) {\n+        setInteriorPixels(paintingData, clipRight, clipBottom, 0, clipBottom);\n@@ -261,4 +261,0 @@\n-    static constexpr int minimalRectDimension = (100 * 100); \/\/ Empirical data limit for parallel jobs\n-\n-    if (int iterations = (paintingData.width * paintingData.height) \/ minimalRectDimension) {\n-        int stride = clipBottom \/ iterations;\n@@ -268,2 +264,2 @@\n-            int yStart = (stride * index);\n-            int yEnd = std::min<int>(stride * (index + 1), clipBottom);\n+        int yStart = stride * index;\n+        int yEnd = std::min<int>(yStart + stride, clipBottom);\n@@ -273,2 +269,1 @@\n-    } else\n-        setInteriorPixels(paintingData, clipRight, clipBottom, 0, clipBottom);\n+}\n@@ -276,0 +271,12 @@\n+void FEConvolveMatrixSoftwareApplier::applyPlatform(PaintingData& paintingData) const\n+{\n+    \/\/ Drawing fully covered pixels\n+    int clipRight = paintingData.width - paintingData.kernelSize.width();\n+    int clipBottom = paintingData.height - paintingData.kernelSize.height();\n+\n+    if (clipRight < 0 || clipBottom < 0) {\n+        \/\/ Rare situation, not optimized for speed\n+        setOuterPixels(paintingData, 0, 0, paintingData.width, paintingData.height);\n+        return;\n+    }\n+    setInteriorPixels(paintingData, clipRight, clipBottom);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/filters\/software\/FEConvolveMatrixSoftwareApplier.cpp","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-\n+    static void setInteriorPixels(PaintingData&, int clipRight, int clipBottom);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/filters\/software\/FEConvolveMatrixSoftwareApplier.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,3 +40,0 @@\n-#if USE(GTK4)\n-    unsigned numThreads = 4;\n-#else\n@@ -44,1 +41,0 @@\n-#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/nicosia\/NicosiaPaintingEngine.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-    if (!supportsSizeAndFrameRate(WTFMove(width), WTFMove(height), WTFMove(frameRate))) {\n+    if (!supportsSizeAndFrameRate(width, height, WTFMove(frameRate))) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mediastream\/RealtimeMediaSource.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"GUniquePtrGStreamer.h\"\n@@ -119,1 +120,1 @@\n-        virtual std::optional<uint64_t> queryDecodedVideoFramesCount() { return std::nullopt; }\n+        virtual GUniquePtr<GstStructure> queryAdditionalStats() { return nullptr; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mediastream\/RealtimeMediaSource.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-    : ResourceHandle { nullptr, request, client, false \/* defersLoading *\/, false \/* shouldContentSniff *\/, true \/* shouldContentEncodingSniff *\/, nullptr \/* sourceOrigin *\/, false \/* isMainFrameNavigation *\/ }\n+    : ResourceHandle { nullptr, request, client, false \/* defersLoading *\/, false \/* shouldContentSniff *\/, ContentEncodingSniffingPolicy::Default, nullptr \/* sourceOrigin *\/, false \/* isMainFrameNavigation *\/ }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/network\/BlobResourceHandle.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,2 +80,2 @@\n-ResourceHandle::ResourceHandle(NetworkingContext* context, const ResourceRequest& request, ResourceHandleClient* client, bool defersLoading, bool shouldContentSniff, bool shouldContentEncodingSniff, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation)\n-    : d(makeUnique<ResourceHandleInternal>(this, context, request, client, defersLoading, shouldContentSniff && shouldContentSniffURL(request.url()), shouldContentEncodingSniff, WTFMove(sourceOrigin), isMainFrameNavigation))\n+ResourceHandle::ResourceHandle(NetworkingContext* context, const ResourceRequest& request, ResourceHandleClient* client, bool defersLoading, bool shouldContentSniff, ContentEncodingSniffingPolicy contentEncodingSniffingPolicy, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation)\n+    : d(makeUnique<ResourceHandleInternal>(this, context, request, client, defersLoading, shouldContentSniff && shouldContentSniffURL(request.url()), contentEncodingSniffingPolicy, WTFMove(sourceOrigin), isMainFrameNavigation))\n@@ -94,1 +94,1 @@\n-RefPtr<ResourceHandle> ResourceHandle::create(NetworkingContext* context, const ResourceRequest& request, ResourceHandleClient* client, bool defersLoading, bool shouldContentSniff, bool shouldContentEncodingSniff, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation)\n+RefPtr<ResourceHandle> ResourceHandle::create(NetworkingContext* context, const ResourceRequest& request, ResourceHandleClient* client, bool defersLoading, bool shouldContentSniff, ContentEncodingSniffingPolicy contentEncodingSniffingPolicy, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation)\n@@ -101,1 +101,1 @@\n-    auto newHandle = adoptRef(*new ResourceHandle(context, request, client, defersLoading, shouldContentSniff, shouldContentEncodingSniff, WTFMove(sourceOrigin), isMainFrameNavigation));\n+    auto newHandle = adoptRef(*new ResourceHandle(context, request, client, defersLoading, shouldContentSniff, contentEncodingSniffingPolicy, WTFMove(sourceOrigin), isMainFrameNavigation));\n@@ -273,1 +273,1 @@\n-bool ResourceHandle::shouldContentEncodingSniff() const\n+ContentEncodingSniffingPolicy ResourceHandle::contentEncodingSniffingPolicy() const\n@@ -275,1 +275,1 @@\n-    return d->m_shouldContentEncodingSniff;\n+    return d->m_contentEncodingSniffingPolicy;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/network\/ResourceHandle.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"ResourceLoaderOptions.h\"\n@@ -98,1 +99,1 @@\n-    WEBCORE_EXPORT static RefPtr<ResourceHandle> create(NetworkingContext*, const ResourceRequest&, ResourceHandleClient*, bool defersLoading, bool shouldContentSniff, bool shouldContentEncodingSniff, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation);\n+    WEBCORE_EXPORT static RefPtr<ResourceHandle> create(NetworkingContext*, const ResourceRequest&, ResourceHandleClient*, bool defersLoading, bool shouldContentSniff, ContentEncodingSniffingPolicy, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation);\n@@ -158,1 +159,1 @@\n-    bool shouldContentEncodingSniff() const;\n+    ContentEncodingSniffingPolicy contentEncodingSniffingPolicy() const;\n@@ -217,1 +218,1 @@\n-    ResourceHandle(NetworkingContext*, const ResourceRequest&, ResourceHandleClient*, bool defersLoading, bool shouldContentSniff, bool shouldContentEncodingSniff, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation);\n+    ResourceHandle(NetworkingContext*, const ResourceRequest&, ResourceHandleClient*, bool defersLoading, bool shouldContentSniff, ContentEncodingSniffingPolicy, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation);\n@@ -243,1 +244,1 @@\n-    void createCFURLConnection(bool shouldUseCredentialStorage, bool shouldContentSniff, bool shouldContentEncodingSniff, RefPtr<SynchronousLoaderMessageQueue>&&, CFDictionaryRef clientProperties);\n+    void createCFURLConnection(bool shouldUseCredentialStorage, bool shouldContentSniff, ContentEncodingSniffingPolicy, RefPtr<SynchronousLoaderMessageQueue>&&, CFDictionaryRef clientProperties);\n@@ -247,1 +248,1 @@\n-    void createNSURLConnection(id delegate, bool shouldUseCredentialStorage, bool shouldContentSniff, bool shouldContentEncodingSniff, SchedulingBehavior);\n+    void createNSURLConnection(id delegate, bool shouldUseCredentialStorage, bool shouldContentSniff, ContentEncodingSniffingPolicy, SchedulingBehavior);\n@@ -251,1 +252,1 @@\n-    void createNSURLConnection(id delegate, bool shouldUseCredentialStorage, bool shouldContentSniff, bool shouldContentEncodingSniff, SchedulingBehavior, NSDictionary *connectionProperties);\n+    void createNSURLConnection(id delegate, bool shouldUseCredentialStorage, bool shouldContentSniff, ContentEncodingSniffingPolicy, SchedulingBehavior, NSDictionary *connectionProperties);\n@@ -255,1 +256,1 @@\n-    NSURLRequest *applySniffingPoliciesIfNeeded(NSURLRequest *, bool shouldContentSniff, bool shouldContentEncodingSniff);\n+    NSURLRequest *applySniffingPoliciesIfNeeded(NSURLRequest *, bool shouldContentSniff, ContentEncodingSniffingPolicy);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/network\/ResourceHandle.h","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    ResourceHandleInternal(ResourceHandle* loader, NetworkingContext* context, const ResourceRequest& request, ResourceHandleClient* client, bool defersLoading, bool shouldContentSniff, bool shouldContentEncodingSniff, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation)\n+    ResourceHandleInternal(ResourceHandle* loader, NetworkingContext* context, const ResourceRequest& request, ResourceHandleClient* client, bool defersLoading, bool shouldContentSniff, ContentEncodingSniffingPolicy contentEncodingSniffingPolicy, RefPtr<SecurityOrigin>&& sourceOrigin, bool isMainFrameNavigation)\n@@ -80,1 +80,1 @@\n-        , m_shouldContentEncodingSniff(shouldContentEncodingSniff)\n+        , m_contentEncodingSniffingPolicy(contentEncodingSniffingPolicy)\n@@ -114,1 +114,1 @@\n-    bool m_shouldContentEncodingSniff;\n+    ContentEncodingSniffingPolicy m_contentEncodingSniffingPolicy;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/network\/ResourceHandleInternal.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2006-2022 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2023 Apple Inc. All rights reserved.\n@@ -636,0 +636,2 @@\n+    int autoVacuumMode = AutoVacuumNone;\n+    {\n@@ -639,2 +641,2 @@\n-\n-    int autoVacuumMode = statement->columnInt(0);\n+        autoVacuumMode = statement->columnInt(0);\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/sql\/SQLiteDatabase.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,2 +3,2 @@\n- * Copyright (C) 2003, 2004, 2006, 2007, 2008 Apple Inc.  All right reserved.\n- * Copyright (C) 2011 Google, Inc.  All rights reserved.\n+ * Copyright (C) 2003-2023 Apple Inc.  All right reserved.\n+ * Copyright (C) 2011-2014 Google, Inc.  All rights reserved.\n@@ -169,1 +169,1 @@\n-        while (previousRun->next() != toReplace)\n+        while (previousRun->next() && previousRun->next() != toReplace)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/text\/BidiRunList.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-\n-    if (!filter->buildFilterFunctions(renderer, operations, targetBoundingBox, destinationContext))\n+    if (!filter->buildFilterFunctions(renderer, operations, targetBoundingBox, destinationContext)) {\n+        LOG_WITH_STREAM(Filters, stream << \"CSSFilter::create: failed to build filters \" << operations);\n@@ -53,0 +53,3 @@\n+    }\n+\n+    LOG_WITH_STREAM(Filters, stream << \"CSSFilter::create built filter \" << filter.get() << \" for \" << operations);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/CSSFilter.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1072,1 +1072,2 @@\n-    bool needsBlockDirectionLocationSetBeforeLayout = r.needsLayout() && view().frameView().layoutContext().layoutState()->needsBlockDirectionLocationSetBeforeLayout();\n+    auto* layoutState = view().frameView().layoutContext().layoutState();\n+    bool needsBlockDirectionLocationSetBeforeLayout = r.needsLayout() && layoutState && layoutState->needsBlockDirectionLocationSetBeforeLayout();\n@@ -1104,1 +1105,1 @@\n-    if (view().frameView().layoutContext().layoutState()->isPaginated() && is<RenderBlockFlow>(*this))\n+    if (layoutState && layoutState->isPaginated() && is<RenderBlockFlow>(*this))\n@@ -1135,1 +1136,1 @@\n-    if (needsLayout() || !layoutState->isPaginated())\n+    if (needsLayout() || !layoutState || !layoutState->isPaginated())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderBlock.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3262,0 +3262,2 @@\n+    if (is<RenderReplaced>(this))\n+        return computeReplacedLogicalHeightUsing(heightType, height) + borderAndPaddingLogicalHeight();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderBox.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (C) 2003, 2006, 2007, 2009, 2013 Apple Inc. All rights reserved.\n+ * Copyright (C) 2003-2022 Apple Inc. All rights reserved.\n@@ -135,1 +135,2 @@\n-    virtual void paint(PaintInfo&, const LayoutPoint&) = 0;\n+    \/\/ paintOffset is the offset from the origin of the GraphicsContext at which to paint the current object.\n+    virtual void paint(PaintInfo&, const LayoutPoint& paintOffset) = 0;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderElement.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -535,1 +535,2 @@\n-                auto textRun = RenderBlock::constructTextRun(document().displayStringModifiedByEncoding(m_altText), style(), ExpansionBehavior::defaultBehavior(), RespectDirection | RespectDirectionOverride);\n+                auto encodedDisplayString = document().displayStringModifiedByEncoding(m_altText);\n+                auto textRun = RenderBlock::constructTextRun(encodedDisplayString, style(), ExpansionBehavior::defaultBehavior(), RespectDirection | RespectDirectionOverride);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderImage.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1020,1 +1020,1 @@\n-    m_behavesAsFixed = flags.contains(SeenFixedLayer);\n+    setBehavesAsFixed(flags.contains(SeenFixedLayer));\n@@ -1044,1 +1044,1 @@\n-        m_behavesAsFixed = true;\n+        setBehavesAsFixed(true);\n@@ -1498,0 +1498,8 @@\n+void RenderLayer::setBehavesAsFixed(bool behavesAsFixed)\n+{\n+    if (m_behavesAsFixed != behavesAsFixed && renderer().isFixedPositioned())\n+        setNeedsCompositingConfigurationUpdate();\n+\n+    m_behavesAsFixed = behavesAsFixed;\n+}\n+\n@@ -5307,1 +5315,1 @@\n-    updateFiltersAfterStyleChange();\n+    updateFiltersAfterStyleChange(diff, oldStyle);\n@@ -5429,1 +5437,1 @@\n-void RenderLayer::updateFiltersAfterStyleChange()\n+void RenderLayer::updateFiltersAfterStyleChange(StyleDifference diff, const RenderStyle* oldStyle)\n@@ -5443,0 +5451,3 @@\n+\n+    if (diff >= StyleDifference::RepaintLayer && oldStyle && oldStyle->filter() != renderer().style().filter())\n+        clearLayerFilters();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayer.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -539,0 +539,1 @@\n+    void setBehavesAsFixed(bool);\n@@ -1160,1 +1161,1 @@\n-    void updateFiltersAfterStyleChange();\n+    void updateFiltersAfterStyleChange(StyleDifference, const RenderStyle* oldStyle);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayer.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3012,0 +3012,3 @@\n+    if (renderer().style().imageRendering() == ImageRendering::CrispEdges || renderer().style().imageRendering() == ImageRendering::Pixelated)\n+        return false;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayerBacking.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1760,0 +1760,4 @@\n+\n+        \/\/ image rendering mode can determine whether we use device pixel ratio for the backing store.\n+        if (oldStyle && oldStyle->imageRendering() != newStyle.imageRendering())\n+            layer.setNeedsCompositingConfigurationUpdate();\n@@ -2959,0 +2963,19 @@\n+        if (clipRect.isInfinite())\n+            return;\n+\n+        auto infiniteRect = LayoutRect::infiniteRect();\n+        auto renderableInfiniteRect = [] {\n+            \/\/ Return a infinite-like rect whose values are such that, when converted to float pixel values, they can reasonably represent device pixels.\n+            return LayoutRect(LayoutUnit::nearlyMin() \/ 32, LayoutUnit::nearlyMin() \/ 32, LayoutUnit::nearlyMax() \/ 16, LayoutUnit::nearlyMax() \/ 16);\n+        }();\n+\n+        if (clipRect.width() == infiniteRect.width()) {\n+            clipRect.setX(renderableInfiniteRect.x());\n+            clipRect.setWidth(renderableInfiniteRect.width());\n+        }\n+\n+        if (clipRect.height() == infiniteRect.height()) {\n+            clipRect.setY(renderableInfiniteRect.y());\n+            clipRect.setHeight(renderableInfiniteRect.height());\n+        }\n+\n@@ -3467,1 +3490,1 @@\n-    if (!layer.behavesAsFixed())\n+    if (!(layer.renderer().isFixedPositioned() && layer.behavesAsFixed()))\n@@ -4305,1 +4328,1 @@\n-        if (auto* horizontalScrollbar = m_renderView.frameView().verticalScrollbar())\n+        if (auto* horizontalScrollbar = m_renderView.frameView().horizontalScrollbar())\n@@ -4502,1 +4525,0 @@\n-    ASSERT(layer.backing()->viewportAnchorLayer());\n@@ -4504,0 +4526,4 @@\n+    if (!anchorLayer) {\n+        ASSERT_NOT_REACHED();\n+        return { };\n+    }\n@@ -4540,1 +4566,0 @@\n-    ASSERT(layer.backing()->viewportAnchorLayer());\n@@ -4542,0 +4567,4 @@\n+    if (!anchorLayer) {\n+        ASSERT_NOT_REACHED();\n+        return { };\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayerCompositor.cpp","additions":33,"deletions":4,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -90,0 +90,5 @@\n+    if (m_isRegisteredForAnimatedScroll) {\n+        renderer.view().frameView().removeScrollableAreaForAnimatedScroll(this);\n+        m_isRegisteredForAnimatedScroll = false;\n+    }\n+\n@@ -282,3 +287,0 @@\n-\n-    registerScrollableArea();\n-\n@@ -294,1 +296,2 @@\n-    if (options.animated == ScrollIsAnimated::Yes)\n+    if (options.animated == ScrollIsAnimated::Yes) {\n+        registerScrollableAreaForAnimatedScroll();\n@@ -296,1 +299,1 @@\n-    else if (!requestScrollPositionUpdate(snappedPosition, options.type, options.clamping))\n+    } else if (!requestScrollPositionUpdate(snappedPosition, options.type, options.clamping))\n@@ -1077,1 +1080,11 @@\n-    m_hasCompositedScrollableOverflow = canUseCompositedScrolling() && (hasScrollableHorizontalOverflow() || hasScrollableVerticalOverflow());\n+    bool hasCompositedScrollableOverflow = canUseCompositedScrolling() && (hasScrollableHorizontalOverflow() || hasScrollableVerticalOverflow());\n+    if (hasCompositedScrollableOverflow == m_hasCompositedScrollableOverflow)\n+        return;\n+\n+    \/\/ Whether this layer does composited scrolling affects the configuration of descendant sticky layers. We have to\n+    \/\/ dirty from the enclosing stacking context because overflow scroll doesn't create stacking context so those\n+    \/\/ containing block descendants may not be paint-order descendants, and the compositing dirty bits on RenderLayer act in paint order.\n+    if (auto* paintParent = m_layer.stackingContext())\n+        paintParent->setDescendantsNeedUpdateBackingAndHierarchyTraversal();\n+\n+    m_hasCompositedScrollableOverflow = hasCompositedScrollableOverflow;\n@@ -1676,1 +1689,1 @@\n-void RenderLayerScrollableArea::registerScrollableArea()\n+void RenderLayerScrollableArea::registerScrollableAreaForAnimatedScroll()\n@@ -1680,1 +1693,0 @@\n-\n@@ -1682,2 +1694,2 @@\n-        frameView.addScrollableArea(this);\n-        m_registeredScrollableArea = true;\n+        frameView.addScrollableAreaForAnimatedScroll(this);\n+        m_isRegisteredForAnimatedScroll = true;\n@@ -1909,0 +1921,10 @@\n+void RenderLayerScrollableArea::animatedScrollDidEnd()\n+{\n+    if (m_isRegisteredForAnimatedScroll) {\n+        auto& renderer = m_layer.renderer();\n+        FrameView& frameView = renderer.view().frameView();\n+        m_isRegisteredForAnimatedScroll = false;\n+        frameView.removeScrollableAreaForAnimatedScroll(this);\n+    }\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayerScrollableArea.cpp","additions":32,"deletions":10,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -107,0 +107,2 @@\n+    bool needsAnimatedScroll() const final { return m_isRegisteredForAnimatedScroll; }\n+\n@@ -244,0 +246,1 @@\n+    void animatedScrollDidEnd() final;\n@@ -272,1 +275,1 @@\n-    void registerScrollableArea();\n+    void registerScrollableAreaForAnimatedScroll();\n@@ -287,0 +290,2 @@\n+    bool m_isRegisteredForAnimatedScroll { false };\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayerScrollableArea.h","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -398,1 +398,3 @@\n-    auto& itemStyle = *listItemElement->computedStyle();\n+    auto itemStyle = listItemElement->computedStyle();\n+    if (!itemStyle)\n+        return;\n@@ -400,1 +402,1 @@\n-    if (itemStyle.visibility() == Visibility::Hidden)\n+    if (itemStyle->visibility() == Visibility::Hidden)\n@@ -414,1 +416,1 @@\n-    Color textColor = itemStyle.visitedDependentColorWithColorFilter(CSSPropertyColor);\n+    Color textColor = itemStyle->visitedDependentColorWithColorFilter(CSSPropertyColor);\n@@ -425,1 +427,1 @@\n-    TextRun textRun(itemText, 0, 0, ExpansionBehavior::allowRightOnly(), itemStyle.direction(), isOverride(itemStyle.unicodeBidi()), true);\n+    TextRun textRun(itemText, 0, 0, ExpansionBehavior::allowRightOnly(), itemStyle->direction(), isOverride(itemStyle->unicodeBidi()), true);\n@@ -428,1 +430,1 @@\n-    r.move(itemOffsetForAlignment(textRun, &itemStyle, itemFont, r));\n+    r.move(itemOffsetForAlignment(textRun, itemStyle, itemFont, r));\n@@ -445,1 +447,3 @@\n-    auto& itemStyle = *listItemElement->computedStyle();\n+    auto itemStyle = listItemElement->computedStyle();\n+    if (!itemStyle)\n+        return;\n@@ -454,1 +458,1 @@\n-        backColor = itemStyle.visitedDependentColorWithColorFilter(CSSPropertyBackgroundColor);\n+        backColor = itemStyle->visitedDependentColorWithColorFilter(CSSPropertyBackgroundColor);\n@@ -457,1 +461,1 @@\n-    if (itemStyle.visibility() == Visibility::Hidden)\n+    if (itemStyle->visibility() == Visibility::Hidden)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderListBox.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (C) 2012 Apple Inc.  All rights reserved.\n+ * Copyright (C) 2012-2022 Apple Inc.  All rights reserved.\n+ * Copyright (C) 2015 Google Inc.  All rights reserved.\n@@ -244,0 +245,7 @@\n+    if (m_computedColumnHeight >= m_maxColumnHeight) {\n+        \/\/ We cannot stretch any further. We'll just have to live with the overflowing columns. This\n+        \/\/ typically happens if the max column height is less than the height of the tallest piece\n+        \/\/ of unbreakable content (e.g. lines).\n+        return m_computedColumnHeight;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderMultiColumnSet.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * Copyright (C) 2003-2020 Apple Inc. All rights reserved.\n+ * Copyright (C) 2003-2022 Apple Inc. All rights reserved.\n@@ -719,2 +719,1 @@\n-    \/\/ possible bounding box for the selection.\n-    LayoutRect selectionRect(bool clipToVisibleContent = true) { return selectionRectForRepaint(nullptr, clipToVisibleContent); }\n+    \/\/ possible bounding box for the selection. The rect returned is in the coordinate space of the paint invalidation container's backing.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderObject.h","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -7,1 +7,2 @@\n- * Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2014 Apple Inc. All rights reserved.\n+ * Copyright (C) 2003-2022 Apple Inc. All rights reserved.\n+ * Copyright (C) 2015 Google Inc. All rights reserved.\n@@ -420,0 +421,1 @@\n+        section->layoutRows();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderTable.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,2 @@\n-    if (!element)\n+    if (!element) {\n+        style.setEffectiveAppearance(NoControlPart);\n@@ -92,0 +93,1 @@\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderTheme.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,3 +95,0 @@\n-#if ENABLE(FULLSCREEN_API)\n-    virtual String extraFullScreenStyleSheet() { return String(); }\n-#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderTheme.h","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -344,0 +344,1 @@\n+        auto zoomedArrowSize = menuListButtonArrowSize * renderObject.style().effectiveZoom();\n@@ -346,1 +347,1 @@\n-            arrowRect.move(arrowRect.width() - (menuListButtonArrowSize + textFieldBorderSize * 2), (arrowRect.height() \/ 2.) - (menuListButtonArrowSize \/ 2.));\n+            arrowRect.move(arrowRect.width() - (zoomedArrowSize + textFieldBorderSize * 2), 0);\n@@ -348,8 +349,3 @@\n-            fieldRect.move(textFieldBorderSize * 2, (arrowRect.height() \/ 2.) - (menuListButtonArrowSize \/ 2.));\n-        arrowRect.setWidth(menuListButtonArrowSize);\n-        arrowRect.setHeight(menuListButtonArrowSize);\n-        {\n-            GraphicsContextStateSaver arrowStateSaver(graphicsContext);\n-            graphicsContext.translate(arrowRect.x(), arrowRect.y());\n-            ThemeAdwaita::paintArrow(graphicsContext, ThemeAdwaita::ArrowDirection::Down, renderObject.useDarkAppearance());\n-        }\n+            fieldRect.move(textFieldBorderSize * 2, 0);\n+        arrowRect.setWidth(zoomedArrowSize);\n+        ThemeAdwaita::paintArrow(graphicsContext, arrowRect, ThemeAdwaita::ArrowDirection::Down, renderObject.useDarkAppearance());\n@@ -407,2 +403,3 @@\n-    int leftPadding = menuListButtonPadding + (style.direction() == TextDirection::RTL ? menuListButtonArrowSize : 0);\n-    int rightPadding = menuListButtonPadding + (style.direction() == TextDirection::LTR ? menuListButtonArrowSize : 0);\n+    auto zoomedArrowSize = menuListButtonArrowSize * style.effectiveZoom();\n+    int leftPadding = menuListButtonPadding + (style.direction() == TextDirection::RTL ? zoomedArrowSize : 0);\n+    int rightPadding = menuListButtonPadding + (style.direction() == TextDirection::LTR ? zoomedArrowSize : 0);\n@@ -428,0 +425,1 @@\n+    auto zoomedArrowSize = menuListButtonArrowSize * renderObject.style().effectiveZoom();\n@@ -431,1 +429,1 @@\n-        fieldRect.move(fieldRect.width() - (menuListButtonArrowSize + menuListButtonPadding), (fieldRect.height() \/ 2.) - (menuListButtonArrowSize \/ 2));\n+        fieldRect.move(fieldRect.width() - (zoomedArrowSize + menuListButtonPadding), 0);\n@@ -433,8 +431,3 @@\n-        fieldRect.move(menuListButtonPadding, (fieldRect.height() \/ 2.) - (menuListButtonArrowSize \/ 2));\n-    fieldRect.setWidth(menuListButtonArrowSize);\n-    fieldRect.setHeight(menuListButtonArrowSize);\n-    {\n-        GraphicsContextStateSaver arrowStateSaver(graphicsContext);\n-        graphicsContext.translate(fieldRect.x(), fieldRect.y());\n-        ThemeAdwaita::paintArrow(graphicsContext, ThemeAdwaita::ArrowDirection::Down, renderObject.useDarkAppearance());\n-    }\n+        fieldRect.move(menuListButtonPadding, 0);\n+    fieldRect.setWidth(zoomedArrowSize);\n+    ThemeAdwaita::paintArrow(graphicsContext, fieldRect, ThemeAdwaita::ArrowDirection::Down, renderObject.useDarkAppearance());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderThemeAdwaita.cpp","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (C) 2004-2020 Apple Inc. All rights reserved.\n+ * Copyright (C) 2004-2022 Apple Inc. All rights reserved.\n@@ -341,2 +341,3 @@\n-        \/\/ FIXME: selectionRect() is in absolute, not painting coordinates.\n-        paintInfo.context().fillRect(snappedIntRect(selectionRect()), selectionBackgroundColor());\n+        LayoutRect rect = localSelectionRect();\n+        rect.moveBy(adjustedPaintOffset);\n+        paintInfo.context().fillRect(snappedIntRect(rect), selectionBackgroundColor());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderWidget.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-#include \"Quirks.h\"\n@@ -233,6 +232,1 @@\n-        StringBuilder fullscreenRules;\n-        fullscreenRules.appendCharacters(fullscreenUserAgentStyleSheet, sizeof(fullscreenUserAgentStyleSheet));\n-        fullscreenRules.append(RenderTheme::singleton().extraFullScreenStyleSheet());\n-        if (element.document().quirks().needsBlackFullscreenBackgroundQuirk())\n-            fullscreenRules.append(\":-webkit-full-screen { background-color: black; }\"_s);\n-        fullscreenStyleSheet = parseUASheet(fullscreenRules.toString());\n+        fullscreenStyleSheet = parseUASheet(StringImpl::createWithoutCopying(fullscreenUserAgentStyleSheet, sizeof(fullscreenUserAgentStyleSheet)));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/style\/UserAgentStyle.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -116,0 +116,3 @@\n+    if (!ancestor)\n+        return false;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/svg\/SVGForeignObjectElement.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4667,1 +4667,0 @@\n-        info.value().hasHadUserInteractionAndQuirksContainsShouldAutoplayForArbitraryUserGesture,\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/testing\/Internals.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1061,1 +1061,0 @@\n-        bool hasHadUserInteractionAndQuirksContainsShouldAutoplayForArbitraryUserGesture;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/testing\/Internals.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -180,1 +180,0 @@\n-    boolean hasHadUserInteractionAndQuirksContainsShouldAutoplayForArbitraryUserGesture;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/testing\/Internals.idl","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,3 +63,1 @@\n-    if (!m_clientIdentifier)\n-        return;\n-\n+    if (m_didAddToWorkerScriptLoaderMap)\n@@ -67,0 +65,1 @@\n+\n@@ -144,0 +143,1 @@\n+    m_clientIdentifier = clientIdentifier;\n@@ -165,1 +165,1 @@\n-        options.clientIdentifier = m_clientIdentifier = clientIdentifier;\n+        options.clientIdentifier = clientIdentifier;\n@@ -169,1 +169,1 @@\n-        else\n+        else {\n@@ -171,0 +171,2 @@\n+            m_didAddToWorkerScriptLoaderMap = true;\n+        }\n@@ -176,1 +178,1 @@\n-        m_userAgentForSharedWorker = scriptExecutionContext.userAgent(scriptRequest.url());\n+        m_userAgentForSharedWorker = scriptExecutionContext.userAgent(m_url);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerScriptLoader.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -140,0 +140,1 @@\n+    bool m_didAddToWorkerScriptLoaderMap { false };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerScriptLoader.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-bool RegistrationDatabase::openSQLiteDatabase(const String& fullFilename)\n+void RegistrationDatabase::openSQLiteDatabase(const String& fullFilename, CompletionHandler<void(bool)>&& completionHandler)\n@@ -213,1 +213,1 @@\n-        return false;\n+        return completionHandler(false);\n@@ -221,1 +221,2 @@\n-    auto doRecoveryAttempt = [&] {\n+    auto doRecoveryAttempt = [this, protectedThis = Ref { *this }, fullFilename] {\n+        ASSERT(!isMainThread());\n@@ -231,1 +232,1 @@\n-        return false;\n+        return completionHandler(false);\n@@ -234,3 +235,4 @@\n-    errorMessage = importRecords();\n-    if (!errorMessage.isNull()) {\n-        RELEASE_LOG_ERROR(ServiceWorker, \"importRecords failed, reason: %\" PUBLIC_LOG_STRING, errorMessage.utf8().data());\n+    importRecords([completionHandler = WTFMove(completionHandler), doRecoveryAttempt = WTFMove(doRecoveryAttempt)] (String error) mutable {\n+        ASSERT(!isMainThread());\n+        if (!error.isNull()) {\n+            RELEASE_LOG_ERROR(ServiceWorker, \"importRecords failed, reason: %\" PUBLIC_LOG_STRING, error.utf8().data());\n@@ -238,1 +240,1 @@\n-        return false;\n+            return completionHandler(false);\n@@ -240,1 +242,2 @@\n-    return true;\n+        completionHandler(true);\n+    });\n@@ -261,2 +264,6 @@\n-        if (!openSQLiteDatabase(m_databaseFilePath)) {\n-            callOnMainThread([this, protectedThis = Ref { *this }] {\n+        return openSQLiteDatabase(m_databaseFilePath, [this, protectedThis = Ref { *this }] (bool success) mutable {\n+            ASSERT(!isMainThread());\n+            callOnMainThread([this, protectedThis = WTFMove(protectedThis), success] {\n+                if (success)\n+                    databaseOpenedAndRecordsImported();\n+                else\n@@ -265,2 +272,1 @@\n-            return;\n-        }\n+        });\n@@ -374,2 +380,2 @@\n-    postTaskToWorkQueue([this, protectedThis = Ref { *this }, pushCounter, updatedRegistrations = WTFMove(updatedRegistrations), removedRegistrations = WTFMove(removedRegistrations), completionHandler = WTFMove(completionHandler)]() mutable {\n-        bool success = doPushChanges(updatedRegistrations, removedRegistrations);\n+    postTaskToWorkQueue([this, protectedThis = Ref { *this }, pushCounter, updatedRegistrations = WTFMove(updatedRegistrations), removedRegistrations = WTFMove(removedRegistrations), completionHandler = WTFMove(completionHandler)] () mutable {\n+        doPushChanges(WTFMove(updatedRegistrations), WTFMove(removedRegistrations), [this, protectedThis = WTFMove(protectedThis), pushCounter, completionHandler = WTFMove(completionHandler)] (bool success, Vector<ServiceWorkerContextData>&& updatedRegistrations, Vector<ServiceWorkerRegistrationKey>&& removedRegistrations) mutable {\n@@ -377,2 +383,2 @@\n-            updatedRegistrations.clear();\n-            removedRegistrations.clear();\n+                ASSERT(updatedRegistrations.isEmpty());\n+                ASSERT(removedRegistrations.isEmpty());\n@@ -390,0 +396,1 @@\n+    });\n@@ -414,1 +421,1 @@\n-bool RegistrationDatabase::doPushChanges(const Vector<ServiceWorkerContextData>& updatedRegistrations, const Vector<ServiceWorkerRegistrationKey>& removedRegistrations)\n+void RegistrationDatabase::doPushChanges(Vector<ServiceWorkerContextData>&& updatedRegistrations, Vector<ServiceWorkerRegistrationKey>&& removedRegistrations, CompletionHandler<void(bool, Vector<ServiceWorkerContextData>&&, Vector<ServiceWorkerRegistrationKey>&&)>&& completionHandler)\n@@ -417,4 +424,12 @@\n-        openSQLiteDatabase(m_databaseFilePath);\n-        if (!m_database)\n-            return false;\n-    }\n+        openSQLiteDatabase(m_databaseFilePath, [this, protectedThis = Ref { *this }, updatedRegistrations = WTFMove(updatedRegistrations), removedRegistrations = WTFMove(removedRegistrations), completionHandler = WTFMove(completionHandler)] (bool success) mutable {\n+            if (!success || !m_database)\n+                return completionHandler(false, WTFMove(updatedRegistrations), WTFMove(removedRegistrations));\n+            doPushChangesWithOpenDatabase(WTFMove(updatedRegistrations), WTFMove(removedRegistrations), WTFMove(completionHandler));\n+        });\n+    } else\n+        doPushChangesWithOpenDatabase(WTFMove(updatedRegistrations), WTFMove(removedRegistrations), WTFMove(completionHandler));\n+}\n+\n+void RegistrationDatabase::doPushChangesWithOpenDatabase(Vector<ServiceWorkerContextData>&& updatedRegistrations, Vector<ServiceWorkerRegistrationKey>&& removedRegistrations, CompletionHandler<void(bool, Vector<ServiceWorkerContextData>&&, Vector<ServiceWorkerRegistrationKey>&&)>&& completionHandler)\n+{\n+    ASSERT(m_database);\n@@ -428,1 +443,1 @@\n-        return false;\n+        return completionHandler(false, WTFMove(updatedRegistrations), WTFMove(removedRegistrations));\n@@ -438,1 +453,1 @@\n-            return false;\n+            return completionHandler(false, WTFMove(updatedRegistrations), WTFMove(removedRegistrations));\n@@ -477,1 +492,1 @@\n-            return false;\n+            return completionHandler(false, WTFMove(updatedRegistrations), WTFMove(removedRegistrations));\n@@ -484,1 +499,1 @@\n-            return false;\n+            return completionHandler(false, WTFMove(updatedRegistrations), WTFMove(removedRegistrations));\n@@ -500,1 +515,1 @@\n-    return true;\n+    return completionHandler(true, { }, { });\n@@ -503,1 +518,1 @@\n-String RegistrationDatabase::importRecords()\n+void RegistrationDatabase::importRecords(CompletionHandler<void(String)>&& completionHandler)\n@@ -510,1 +525,1 @@\n-        return makeString(\"Failed to prepare statement to retrieve registrations from records table (\", m_database->lastError(), \") - \", m_database->lastErrorMsg());\n+        return completionHandler(makeString(\"Failed to prepare statement to retrieve registrations from records table (\", m_database->lastError(), \") - \", m_database->lastErrorMsg()));\n@@ -512,1 +527,24 @@\n-    int result = sql->step();\n+    struct CallbackAggregatorWithErrorString : public ThreadSafeRefCounted<CallbackAggregatorWithErrorString> {\n+        static Ref<CallbackAggregatorWithErrorString> create(CompletionHandler<void(String)>&& completionHandler)\n+        {\n+            return adoptRef(*new CallbackAggregatorWithErrorString(WTFMove(completionHandler)));\n+        }\n+        void setError(const String& error)\n+        {\n+            ASSERT(!isMainThread());\n+            m_error = error;\n+        }\n+        ~CallbackAggregatorWithErrorString()\n+        {\n+            ASSERT(!isMainThread());\n+            m_completionHandler(m_error);\n+        }\n+    private:\n+        CallbackAggregatorWithErrorString(CompletionHandler<void(String)>&& completionHandler)\n+            : m_completionHandler(WTFMove(completionHandler)) { }\n+\n+        CompletionHandler<void(String)> m_completionHandler;\n+        String m_error;\n+    };\n+\n+    auto aggregator = CallbackAggregatorWithErrorString::create(WTFMove(completionHandler));\n@@ -514,0 +552,1 @@\n+    int result = sql->step();\n@@ -611,2 +650,4 @@\n-        callOnMainThread([protectedThis = Ref { *this }, contextData = WTFMove(contextData).isolatedCopy()]() mutable {\n-            protectedThis->addRegistrationToStore(WTFMove(contextData));\n+        callOnMainThread([this, protectedThis = Ref { *this }, aggregator, contextData = WTFMove(contextData).isolatedCopy()] () mutable {\n+            addRegistrationToStore(WTFMove(contextData), [this, protectedThis = WTFMove(protectedThis), aggregator = WTFMove(aggregator)] () mutable {\n+                postTaskToWorkQueue([aggregator = WTFMove(aggregator)] { });\n+            });\n@@ -617,3 +658,1 @@\n-        return makeString(\"Failed to import at least one registration from records table (\", m_database->lastError(), \") - \", m_database->lastErrorMsg());\n-\n-    return { };\n+        aggregator->setError(makeString(\"Failed to import at least one registration from records table (\", m_database->lastError(), \") - \", m_database->lastErrorMsg()));\n@@ -622,1 +661,1 @@\n-void RegistrationDatabase::addRegistrationToStore(ServiceWorkerContextData&& context)\n+void RegistrationDatabase::addRegistrationToStore(ServiceWorkerContextData&& context, CompletionHandler<void()>&& completionHandler)\n@@ -624,0 +663,2 @@\n+    ASSERT(isMainThread());\n+\n@@ -625,1 +666,3 @@\n-        m_store->addRegistrationFromDatabase(WTFMove(context));\n+        m_store->addRegistrationFromDatabase(WTFMove(context), WTFMove(completionHandler));\n+    else\n+        completionHandler();\n@@ -630,0 +673,1 @@\n+    ASSERT(isMainThread());\n@@ -636,0 +680,1 @@\n+    ASSERT(isMainThread());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/RegistrationDatabase.cpp","additions":82,"deletions":37,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    bool openSQLiteDatabase(const String& fullFilename);\n+    void openSQLiteDatabase(const String& fullFilename, CompletionHandler<void(bool)>&&);\n@@ -74,1 +74,1 @@\n-    String importRecords();\n+    void importRecords(CompletionHandler<void(String)>&&);\n@@ -76,1 +76,2 @@\n-    bool doPushChanges(const Vector<ServiceWorkerContextData>&, const Vector<ServiceWorkerRegistrationKey>&);\n+    void doPushChanges(Vector<ServiceWorkerContextData>&&, Vector<ServiceWorkerRegistrationKey>&&, CompletionHandler<void(bool, Vector<ServiceWorkerContextData>&&, Vector<ServiceWorkerRegistrationKey>&&)>&&);\n+    void doPushChangesWithOpenDatabase(Vector<ServiceWorkerContextData>&&, Vector<ServiceWorkerRegistrationKey>&&, CompletionHandler<void(bool, Vector<ServiceWorkerContextData>&&, Vector<ServiceWorkerRegistrationKey>&&)>&&);\n@@ -82,1 +83,1 @@\n-    void addRegistrationToStore(ServiceWorkerContextData&&);\n+    void addRegistrationToStore(ServiceWorkerContextData&&, CompletionHandler<void()>&&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/RegistrationDatabase.h","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-void RegistrationStore::addRegistrationFromDatabase(ServiceWorkerContextData&& data)\n+void RegistrationStore::addRegistrationFromDatabase(ServiceWorkerContextData&& data, CompletionHandler<void()>&& completionHandler)\n@@ -124,0 +124,1 @@\n+    ASSERT(isMainThread());\n@@ -126,1 +127,1 @@\n-        return;\n+        return completionHandler();\n@@ -128,1 +129,1 @@\n-    m_server.addRegistrationFromStore(WTFMove(data));\n+    m_server.addRegistrationFromStore(WTFMove(data), WTFMove(completionHandler));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/RegistrationStore.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    void addRegistrationFromDatabase(ServiceWorkerContextData&&);\n+    void addRegistrationFromDatabase(ServiceWorkerContextData&&, CompletionHandler<void()>&&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/RegistrationStore.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-void SWServer::addRegistrationFromStore(ServiceWorkerContextData&& data)\n+void SWServer::addRegistrationFromStore(ServiceWorkerContextData&& data, CompletionHandler<void()>&& completionHandler)\n@@ -189,0 +189,2 @@\n+    ASSERT(isMainThread());\n+\n@@ -195,1 +197,2 @@\n-    validateRegistrationDomain(registrableDomain, ServiceWorkerJobType::Register, m_scopeToRegistrationMap.contains(data.registration.key), [this, weakThis = WeakPtr { *this }, data = WTFMove(data)] (bool isValid) mutable {\n+    validateRegistrationDomain(registrableDomain, ServiceWorkerJobType::Register, m_scopeToRegistrationMap.contains(data.registration.key), [this, weakThis = WeakPtr { *this }, data = WTFMove(data), completionHandler = WTFMove(completionHandler)] (bool isValid) mutable {\n+        ASSERT(isMainThread());\n@@ -197,1 +200,1 @@\n-            return;\n+            return completionHandler();\n@@ -208,0 +211,1 @@\n+        completionHandler();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/SWServer.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-    void addRegistrationFromStore(ServiceWorkerContextData&&);\n+    void addRegistrationFromStore(ServiceWorkerContextData&&, CompletionHandler<void()>&&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/SWServer.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -628,1 +628,1 @@\n-    options.sniffContentEncoding = ContentEncodingSniffingPolicy::DoNotSniff;\n+    options.contentEncodingSniffingPolicy = ContentEncodingSniffingPolicy::Disable;\n@@ -934,0 +934,7 @@\n+    \/\/ Make sure that didSendData() was called at least one before marking the load as complete\n+    \/\/ so that a progress events get fired on m_upload.\n+    if (m_uploadListenerFlag && m_requestEntityBody && !m_wasDidSendDataCalledForTotalBytes) {\n+        auto bodyLength = m_requestEntityBody->lengthInBytes();\n+        didSendData(bodyLength, bodyLength);\n+    }\n+\n@@ -963,0 +970,1 @@\n+        m_wasDidSendDataCalledForTotalBytes = true;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XMLHttpRequest.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -258,0 +258,1 @@\n+    bool m_wasDidSendDataCalledForTotalBytes { false };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XMLHttpRequest.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -455,1 +455,1 @@\n-void InProcessIDBServer::abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const WebCore::IDBResourceIdentifier& transactionIdentifier)\n+void InProcessIDBServer::abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const std::optional<WebCore::IDBResourceIdentifier>& transactionIdentifier)\n@@ -457,1 +457,4 @@\n-    dispatchTask([this, protectedThis = Ref { *this }, databaseConnectionIdentifier, transactionIdentifier = transactionIdentifier.isolatedCopy()] {\n+    std::optional<WebCore::IDBResourceIdentifier> transactionIdentifierCopy;\n+    if (transactionIdentifier)\n+        transactionIdentifierCopy = transactionIdentifier->isolatedCopy();\n+    dispatchTask([this, protectedThis = Ref { *this }, databaseConnectionIdentifier, transactionIdentifier = WTFMove(transactionIdentifierCopy)] {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/Storage\/InProcessIDBServer.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const WebCore::IDBResourceIdentifier& transactionIdentifier) final;\n+    void abortOpenAndUpgradeNeeded(uint64_t databaseConnectionIdentifier, const std::optional<WebCore::IDBResourceIdentifier>& transactionIdentifier) final;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/Storage\/InProcessIDBServer.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include <WebCore\/ResourceLoaderOptions.h>\n@@ -53,2 +54,1 @@\n-        bool shouldContentEncodingSniff = true;\n-        m_handle = WebCore::ResourceHandle::create(networkingContext, request, this, defersLoading, shouldContentSniff, shouldContentEncodingSniff, nullptr, false);\n+        m_handle = WebCore::ResourceHandle::create(networkingContext, request, this, defersLoading, shouldContentSniff, WebCore::ContentEncodingSniffingPolicy::Default, nullptr, false);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/WebCoreSupport\/PingHandle.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -265,0 +265,1 @@\n+            get_property(dep_gir_lib TARGET \"gir-${dep}\" PROPERTY GI_GIR_LIBRARY)\n@@ -274,0 +275,3 @@\n+            if (dep_gir_lib)\n+                list(APPEND scanner_flags \"--library=${dep_gir_lib}\")\n+            endif ()\n@@ -340,1 +344,1 @@\n-        COMMAND ${CMAKE_COMMAND} -E env \"CC=${CMAKE_C_COMPILER}\"\n+        COMMAND ${CMAKE_COMMAND} -E env \"CC=${CMAKE_C_COMPILER}\" \"CFLAGS=${CMAKE_C_FLAGS}\"\n@@ -398,0 +402,1 @@\n+    set_property(TARGET \"gir-${namespace}\" PROPERTY GI_GIR_LIBRARY \"$<TARGET_FILE_BASE_NAME:${opt_TARGET}>\")\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/FindGI.cmake","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-    if (EXISTS \"${WPE_INCLUDE_DIR}\/wpe\/version.h\")\n-        file(READ \"${WPE_INCLUDE_DIR}\/wpe\/version.h\" WPE_VERSION_CONTENT)\n+    if (EXISTS \"${WPE_INCLUDE_DIR}\/wpe\/libwpe-version.h\")\n+        file(READ \"${WPE_INCLUDE_DIR}\/wpe\/libwpe-version.h\" WPE_VERSION_CONTENT)\n@@ -75,1 +75,1 @@\n-        string(REGEX MATCH \"#define +WPE_MAJOR_VERSION +\\\\(([0-9]+)\\\\)\" _dummy \"${WPE_VERSION_CONTENT}\")\n+        string(REGEX MATCH \"#define +WPE_MAJOR_VERSION +([0-9]+)\" _dummy \"${WPE_VERSION_CONTENT}\")\n@@ -78,1 +78,1 @@\n-        string(REGEX MATCH \"#define +WPE_MINOR_VERSION +\\\\(([0-9]+)\\\\)\" _dummy \"${WPE_VERSION_CONTENT}\")\n+        string(REGEX MATCH \"#define +WPE_MINOR_VERSION +([0-9]+)\" _dummy \"${WPE_VERSION_CONTENT}\")\n@@ -81,1 +81,1 @@\n-        string(REGEX MATCH \"#define +WPE_MICRO_VERSION +\\\\(([0-9]+)\\\\)\" _dummy \"${WPE_VERSION_CONTENT}\")\n+        string(REGEX MATCH \"#define +WPE_MICRO_VERSION +([0-9]+)\" _dummy \"${WPE_VERSION_CONTENT}\")\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/FindWPE.cmake","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-          if (USE_GSTREAMER_WEB_RTC)\n+          if (USE_GSTREAMER_WEBRTC)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/GStreamerChecks.cmake","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        find_package(WPE REQUIRED)\n+        find_package(WPE 1.14.0 REQUIRED)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/OptionsPlayStation.cmake","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}