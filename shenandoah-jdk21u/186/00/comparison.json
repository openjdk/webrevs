{"files":[{"patch":"@@ -4697,0 +4697,1 @@\n+            !BarrierSet::barrier_set()->is_a(BarrierSet::ShenandoahBarrierSet) &&\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -386,1 +386,2 @@\n-  __ load_byte_map_base(rscratch1);\n+  Address curr_ct_holder_addr(rthread, in_bytes(ShenandoahThreadLocalData::card_table_offset()));\n+  __ ldr(rscratch1, curr_ct_holder_addr);\n@@ -641,1 +642,2 @@\n-  __ load_byte_map_base(scratch);\n+  Address curr_ct_holder_addr(rthread, in_bytes(ShenandoahThreadLocalData::card_table_offset()));\n+  __ ldr(scratch, curr_ct_holder_addr);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -591,3 +591,0 @@\n-\n-  ShenandoahBarrierSet* ctbs = ShenandoahBarrierSet::barrier_set();\n-  CardTable* ct = ctbs->card_table();\n@@ -602,1 +599,1 @@\n-  __ load_const_optimized(tmp, (address)ct->byte_map_base(), R0);\n+  __ ld(tmp, in_bytes(ShenandoahThreadLocalData::card_table_offset()), R16_thread); \/* tmp = *[R16_thread + card_table_offset] *\/\n@@ -801,1 +798,2 @@\n-  __ add_const_optimized(addr, addr, (address)ct->byte_map_base(), R0);\n+  __ ld(R0, in_bytes(ShenandoahThreadLocalData::card_table_offset()), R16_thread);\n+  __ add(addr, addr, R0);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -389,0 +389,21 @@\n+void ShenandoahBarrierSetAssembler::store_check(MacroAssembler* masm, Register obj) {\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+\n+  __ srli(obj, obj, CardTable::card_shift());\n+\n+  assert(CardTable::dirty_card_val() == 0, \"must be\");\n+\n+  __ load_byte_map_base(t1);\n+  __ add(t1, obj, t1);\n+\n+  if (UseCondCardMark) {\n+    Label L_already_dirty;\n+    __ lbu(t0, Address(t1));\n+    __ beqz(t0, L_already_dirty);\n+    __ sb(zr, Address(t1));\n+    __ bind(L_already_dirty);\n+  } else {\n+    __ sb(zr, Address(t1));\n+  }\n+}\n+\n@@ -531,0 +552,32 @@\n+void ShenandoahBarrierSetAssembler::gen_write_ref_array_post_barrier(MacroAssembler* masm, DecoratorSet decorators,\n+                                                                     Register start, Register count, Register tmp, RegSet saved_regs) {\n+  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+\n+  Label L_loop, L_done;\n+  const Register end = count;\n+\n+  \/\/ Zero count? Nothing to do.\n+  __ beqz(count, L_done);\n+\n+  \/\/ end = start + count << LogBytesPerHeapOop\n+  \/\/ last element address to make inclusive\n+  __ shadd(end, count, start, tmp, LogBytesPerHeapOop);\n+  __ subi(end, end, BytesPerHeapOop);\n+  __ srli(start, start, CardTable::card_shift());\n+  __ srli(end, end, CardTable::card_shift());\n+\n+  \/\/ number of bytes to copy\n+  __ sub(count, end, start);\n+\n+  Address curr_ct_holder_addr(xthread, in_bytes(ShenandoahThreadLocalData::card_table_offset()));\n+  __ ld(tmp, curr_ct_holder_addr);\n+  __ add(start, start, tmp);\n+\n+  __ bind(L_loop);\n+  __ add(tmp, start, count);\n+  __ sb(zr, Address(tmp));\n+  __ subi(count, count, 1);\n+  __ bgez(count, L_loop);\n+  __ bind(L_done);\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2878,0 +2878,1 @@\n+            !BarrierSet::barrier_set()->is_a(BarrierSet::ShenandoahBarrierSet) &&\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+  SHENANDOAHGC_ONLY(assert(!UseShenandoahGC, \"Shenandoah byte_map_base is not constant.\");)\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/cardTableBarrierSetAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -618,4 +618,0 @@\n-\n-  ShenandoahBarrierSet* ctbs = ShenandoahBarrierSet::barrier_set();\n-  CardTable* ct = ctbs->card_table();\n-\n@@ -624,1 +620,4 @@\n-  Address card_addr;\n+  \/\/ We'll use this register as the TLS base address and also later on\n+  \/\/ to hold the byte_map_base.\n+  Register thread = LP64_ONLY(r15_thread) NOT_LP64(rcx);\n+  Register tmp = LP64_ONLY(rscratch1) NOT_LP64(rdx);\n@@ -626,16 +625,8 @@\n-  \/\/ The calculation for byte_map_base is as follows:\n-  \/\/ byte_map_base = _byte_map - (uintptr_t(low_bound) >> card_shift);\n-  \/\/ So this essentially converts an address to a displacement and it will\n-  \/\/ never need to be relocated. On 64-bit however the value may be too\n-  \/\/ large for a 32-bit displacement.\n-  intptr_t byte_map_base = (intptr_t)ct->byte_map_base();\n-  if (__ is_simm32(byte_map_base)) {\n-    card_addr = Address(noreg, obj, Address::times_1, byte_map_base);\n-  } else {\n-    \/\/ By doing it as an ExternalAddress 'byte_map_base' could be converted to a rip-relative\n-    \/\/ displacement and done in a single instruction given favorable mapping and a\n-    \/\/ smarter version of as_Address. However, 'ExternalAddress' generates a relocation\n-    \/\/ entry and that entry is not properly handled by the relocation code.\n-    AddressLiteral cardtable((address)byte_map_base, relocInfo::none);\n-    Address index(noreg, obj, Address::times_1);\n-    card_addr = __ as_Address(ArrayAddress(cardtable, index), rscratch1);\n+#ifndef _LP64\n+  \/\/ The next two ifs are just to get temporary registers to use for TLS and card table base.\n+  if (thread == obj) {\n+    thread = rdx;\n+    tmp = rsi;\n+  }\n+  if (tmp == obj) {\n+    tmp = rsi;\n@@ -644,0 +635,9 @@\n+  __ push(thread);\n+  __ push(tmp);\n+  __ get_thread(thread);\n+#endif\n+\n+  Address curr_ct_holder_addr(thread, in_bytes(ShenandoahThreadLocalData::card_table_offset()));\n+  __ movptr(tmp, curr_ct_holder_addr);\n+  Address card_addr(tmp, obj, Address::times_1);\n+\n@@ -654,0 +654,5 @@\n+\n+#ifndef _LP64\n+  __ pop(tmp);\n+  __ pop(thread);\n+#endif\n@@ -909,4 +914,0 @@\n-  ShenandoahBarrierSet* bs = ShenandoahBarrierSet::barrier_set();\n-  CardTable* ct = bs->card_table();\n-  intptr_t disp = (intptr_t) ct->byte_map_base();\n-\n@@ -922,0 +923,4 @@\n+  const Register thread = r15_thread;\n+  Address curr_ct_holder_addr(thread, in_bytes(ShenandoahThreadLocalData::card_table_offset()));\n+  __ movptr(tmp, curr_ct_holder_addr);\n+\n@@ -928,1 +933,0 @@\n-  __ mov64(tmp, disp);\n@@ -936,0 +940,6 @@\n+  const Register thread = tmp;\n+  __ get_thread(thread);\n+\n+  Address curr_ct_holder_addr(thread, in_bytes(ShenandoahThreadLocalData::byte_map_base_offset()));\n+  __ movptr(tmp, curr_ct_holder_addr);\n+\n@@ -941,0 +951,2 @@\n+  __ addptr(addr, tmp);\n+\n@@ -942,1 +954,1 @@\n-  Address cardtable(addr, count, Address::times_1, disp);\n+  Address cardtable(addr, count, Address::times_1, 0);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":39,"deletions":27,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -49,0 +50,1 @@\n+  assert(!UseShenandoahGC, \"Shenandoah byte_map_base is not constant.\");\n","filename":"src\/hotspot\/share\/ci\/ciUtilities.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+  SHENANDOAHGC_ONLY(assert(!UseShenandoahGC, \"Shenandoah byte_map_base is not constant.\");)\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/cardTableBarrierSetC1.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -308,4 +308,6 @@\n-  BarrierSet* bs = BarrierSet::barrier_set();\n-  ShenandoahBarrierSet* ctbs = barrier_set_cast<ShenandoahBarrierSet>(bs);\n-  CardTable* ct = ctbs->card_table();\n-  LIR_Const* card_table_base = new LIR_Const(ct->byte_map_base());\n+  LIR_Opr thrd = gen->getThreadPointer();\n+  const int curr_ct_holder_offset = in_bytes(ShenandoahThreadLocalData::card_table_offset());\n+  LIR_Address* curr_ct_holder_addr = new LIR_Address(thrd, curr_ct_holder_offset, T_ADDRESS);\n+  LIR_Opr curr_ct_holder_ptr_reg = gen->new_register(T_ADDRESS);\n+  __ move(curr_ct_holder_addr, curr_ct_holder_ptr_reg);\n+\n@@ -335,7 +337,1 @@\n-  LIR_Address* card_addr;\n-  if (gen->can_inline_as_constant(card_table_base)) {\n-    card_addr = new LIR_Address(tmp, card_table_base->as_jint(), T_BYTE);\n-  } else {\n-    card_addr = new LIR_Address(tmp, gen->load_constant(card_table_base), T_BYTE);\n-  }\n-\n+  LIR_Address* card_addr = new LIR_Address(curr_ct_holder_ptr_reg, tmp, T_BYTE);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -436,11 +436,0 @@\n-Node* ShenandoahBarrierSetC2::byte_map_base_node(GraphKit* kit) const {\n-  BarrierSet* bs = BarrierSet::barrier_set();\n-  ShenandoahBarrierSet* ctbs = barrier_set_cast<ShenandoahBarrierSet>(bs);\n-  CardTable::CardValue* card_table_base = ctbs->card_table()->byte_map_base();\n-  if (card_table_base != nullptr) {\n-    return kit->makecon(TypeRawPtr::make((address)card_table_base));\n-  } else {\n-    return kit->null();\n-  }\n-}\n-\n@@ -484,0 +473,2 @@\n+  Node* tls = __ thread(); \/\/ ThreadLocalStorage\n+\n@@ -487,0 +478,4 @@\n+  Node* curr_ct_holder_offset = __ ConX(in_bytes(ShenandoahThreadLocalData::card_table_offset()));\n+  Node* curr_ct_holder_addr  = __ AddP(__ top(), tls, curr_ct_holder_offset);\n+  Node* curr_ct_base_addr = __ load( __ ctrl(), curr_ct_holder_addr, TypeRawPtr::NOTNULL, T_ADDRESS, Compile::AliasIdxRaw);\n+\n@@ -491,1 +486,1 @@\n-  Node* card_adr = __ AddP(__ top(), byte_map_base_node(kit), card_offset );\n+  Node* card_adr = __ AddP(__ top(), curr_ct_base_addr, card_offset);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -70,2 +70,0 @@\n-  Node* byte_map_base_node(GraphKit* kit) const;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,0 +110,5 @@\n+  if (ShenandoahCardBarrier) {\n+    \/\/ Every thread always have a pointer to the _current_ _write_ version of the card table.\n+    \/\/ The JIT'ed code will use this address (+card entry offset) to mark the card as dirty.\n+    ShenandoahThreadLocalData::set_card_table(thread, _card_table->write_byte_map_base());\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,0 +73,10 @@\n+  CardValue* swap_read_and_write_tables() {\n+    swap(_read_byte_map, _write_byte_map);\n+    swap(_read_byte_map_base, _write_byte_map_base);\n+\n+    _byte_map = _write_byte_map;\n+    _byte_map_base = _write_byte_map_base;\n+\n+    return _byte_map_base;\n+  }\n+\n@@ -77,0 +87,4 @@\n+  CardValue* read_byte_map_base() {\n+    return _read_byte_map_base;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.hpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -419,0 +419,4 @@\n+\n+  if (heap->mode()->is_generational()) {\n+    heap->old_generation()->card_scan()->mark_read_table_as_clean();\n+  }\n@@ -683,1 +687,0 @@\n-\n@@ -686,1 +689,0 @@\n-      \/\/ The current implementation of swap_remembered_set() copies the write-card-table to the read-card-table.\n@@ -688,1 +690,1 @@\n-      _generation->swap_remembered_set();\n+      _generation->swap_card_tables();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  \/\/ and workers for net VM operation\n+  \/\/ and workers for next VM operation\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-        _generation->swap_remembered_set();\n+        _generation->swap_card_tables();\n@@ -175,1 +175,1 @@\n-          \/\/ and this degenerated cycle. These pointers need to be included the 'read' table\n+          \/\/ and this degenerated cycle. These pointers need to be included in the 'read' table\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,14 +100,0 @@\n-class ShenandoahCopyWriteCardTableToRead: public ShenandoahHeapRegionClosure {\n-private:\n-  ShenandoahScanRemembered* _scanner;\n-public:\n-  ShenandoahCopyWriteCardTableToRead(ShenandoahScanRemembered* scanner) : _scanner(scanner) {}\n-\n-  void heap_region_do(ShenandoahHeapRegion* region) override {\n-    assert(region->is_old(), \"Don't waste time doing this for non-old regions\");\n-    _scanner->reset_remset(region->bottom(), ShenandoahHeapRegion::region_size_words());\n-  }\n-\n-  bool is_thread_safe() override { return true; }\n-};\n-\n@@ -234,5 +220,5 @@\n-\/\/ The ideal is to swap the remembered set so the safepoint effort is no more than a few pointer manipulations.\n-\/\/ However, limitations in the implementation of the mutator write-barrier make it difficult to simply change the\n-\/\/ location of the card table.  So the interim implementation of swap_remembered_set will copy the write-table\n-\/\/ onto the read-table and will then clear the write-table.\n-void ShenandoahGeneration::swap_remembered_set() {\n+\/\/ Swap the read and write card table pointers prior to the next remset scan.\n+\/\/ This avoids the need to synchronize reads of the table by the GC workers\n+\/\/ doing remset scanning, on the one hand, with the dirtying of the table by\n+\/\/ mutators on the other.\n+void ShenandoahGeneration::swap_card_tables() {\n@@ -245,2 +231,1 @@\n-  ShenandoahCopyWriteCardTableToRead task(old_generation->card_scan());\n-  old_generation->parallel_heap_region_iterate(&task);\n+  old_generation->card_scan()->swap_card_tables();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":6,"deletions":21,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-  void swap_remembered_set();\n+  void swap_card_tables();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,0 +92,5 @@\n+\n+  ShenandoahScanRemembered* scanner = heap->old_generation()->card_scan();\n+  scanner->mark_read_table_as_clean();\n+  scanner->swap_card_tables();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/threads.hpp\"\n@@ -73,12 +74,0 @@\n-void ShenandoahDirectCardMarkRememberedSet::mark_card_as_clean(size_t card_index) {\n-  CardValue* bp = &(_card_table->write_byte_map())[card_index];\n-  bp[0] = CardTable::clean_card_val();\n-}\n-\n-void ShenandoahDirectCardMarkRememberedSet::mark_range_as_clean(size_t card_index, size_t num_cards) {\n-  CardValue* bp = &(_card_table->write_byte_map())[card_index];\n-  while (num_cards-- > 0) {\n-    *bp++ = CardTable::clean_card_val();\n-  }\n-}\n-\n@@ -115,6 +104,0 @@\n-void ShenandoahDirectCardMarkRememberedSet::mark_card_as_clean(HeapWord* p) {\n-  size_t index = card_index_for_addr(p);\n-  CardValue* bp = &(_card_table->write_byte_map())[index];\n-  bp[0] = CardTable::clean_card_val();\n-}\n-\n@@ -133,0 +116,12 @@\n+void ShenandoahDirectCardMarkRememberedSet::mark_read_table_as_clean() {\n+  CardValue* read_table = _card_table->read_byte_map();\n+  CardValue* bp = &(read_table)[0];\n+  CardValue* end_bp = &(read_table)[_card_table->last_valid_index()];\n+\n+  while (bp <= end_bp) {\n+    *bp++ = CardTable::clean_card_val();\n+  }\n+\n+  log_info(gc, barrier)(\"Cleaned read_table from \" PTR_FORMAT \" to \" PTR_FORMAT, p2i(&(read_table)[0]), p2i(end_bp));\n+}\n+\n@@ -332,2 +327,2 @@\n-void ShenandoahScanRemembered::mark_card_as_clean(HeapWord* p) {\n-  _rs->mark_card_as_clean(p);\n+void ShenandoahScanRemembered::mark_range_as_clean(HeapWord* p, size_t num_heap_words) {\n+  _rs->mark_range_as_clean(p, num_heap_words);\n@@ -336,2 +331,2 @@\n-void ShenandoahScanRemembered:: mark_range_as_clean(HeapWord* p, size_t num_heap_words) {\n-  _rs->mark_range_as_clean(p, num_heap_words);\n+void ShenandoahScanRemembered::mark_read_table_as_clean() {\n+  _rs->mark_read_table_as_clean();\n@@ -625,0 +620,2 @@\n+\n+  log_info(gc, remset)(\"Finished merging write_table into read_table.\");\n@@ -627,3 +624,3 @@\n-\/\/ Destructively copy the write table to the read table, and clean the write table.\n-void ShenandoahDirectCardMarkRememberedSet::reset_remset(HeapWord* start, size_t word_count) {\n-  size_t start_index = card_index_for_addr(start);\n+void ShenandoahDirectCardMarkRememberedSet::swap_card_tables() {\n+  CardTable::CardValue* new_ptr = _card_table->swap_read_and_write_tables();\n+\n@@ -631,2 +628,7 @@\n-  \/\/ avoid querying card_index_for_addr() for an address past end of heap\n-  size_t end_index = card_index_for_addr(start + word_count - 1) + 1;\n+  CardValue* start_bp = &(_card_table->write_byte_map())[0];\n+  CardValue* end_bp = &(new_ptr)[_card_table->last_valid_index()];\n+\n+  while (start_bp <= end_bp) {\n+    assert(*start_bp == CardTable::clean_card_val(), \"Should be clean: \" PTR_FORMAT, p2i(start_bp));\n+    start_bp++;\n+  }\n@@ -634,2 +636,0 @@\n-  assert(start_index % ((size_t)1 << LogCardValsPerIntPtr) == 0, \"Expected a multiple of CardValsPerIntPtr\");\n-  assert(end_index % ((size_t)1 << LogCardValsPerIntPtr) == 0, \"Expected a multiple of CardValsPerIntPtr\");\n@@ -637,3 +637,7 @@\n-  \/\/ We'll access in groups of intptr_t worth of card entries\n-  intptr_t* const read_table  = (intptr_t*) &(_card_table->read_byte_map())[start_index];\n-  intptr_t* const write_table = (intptr_t*) &(_card_table->write_byte_map())[start_index];\n+  struct SwapTLSCardTable : public ThreadClosure {\n+    CardTable::CardValue* _new_ptr;\n+    SwapTLSCardTable(CardTable::CardValue* np) : _new_ptr(np) {}\n+    virtual void do_thread(Thread* t) {\n+      ShenandoahThreadLocalData::set_card_table(t, _new_ptr);\n+    }\n+  } swap_it(new_ptr);\n@@ -641,3 +645,2 @@\n-  \/\/ Avoid division, use shift instead\n-  assert(word_count % ((size_t)1 << (LogCardSizeInWords + LogCardValsPerIntPtr)) == 0, \"Expected a multiple of CardSizeInWords*CardValsPerIntPtr\");\n-  size_t const num = word_count >> (LogCardSizeInWords + LogCardValsPerIntPtr);\n+  \/\/ Iterate on threads and adjust thread local data\n+  Threads::threads_do(&swap_it);\n@@ -645,4 +648,1 @@\n-  for (size_t i = 0; i < num; i++) {\n-    read_table[i]  = write_table[i];\n-    write_table[i] = CardTable::clean_card_row_val();\n-  }\n+  log_info(gc, barrier)(\"Current write_card_table: \" PTR_FORMAT, p2i(swap_it._new_ptr));\n@@ -952,1 +952,0 @@\n-        \/\/ First, clear the remembered set for all spanned humongous regions\n@@ -954,2 +953,0 @@\n-        size_t region_span = num_regions * ShenandoahHeapRegion::region_size_words();\n-        scanner->reset_remset(r->bottom(), region_span);\n@@ -968,2 +965,0 @@\n-        \/\/ First, clear the remembered set\n-        scanner->reset_remset(r->bottom(), ShenandoahHeapRegion::region_size_words());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":39,"deletions":44,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -242,1 +242,0 @@\n-  inline void mark_card_as_clean(HeapWord* p);\n@@ -245,0 +244,3 @@\n+  \/\/ See comment in ShenandoahScanRemembered\n+  inline void mark_read_table_as_clean();\n+\n@@ -249,2 +251,2 @@\n-  \/\/ Destructively copy the write table to the read table, and clean the write table.\n-  void reset_remset(HeapWord* start, size_t word_count);\n+  \/\/ See comment in ShenandoahScanRemembered\n+  void swap_card_tables();\n@@ -761,1 +763,0 @@\n-  void mark_card_as_clean(HeapWord* p);\n@@ -764,1 +765,10 @@\n-  void reset_remset(HeapWord* start, size_t word_count) { _rs->reset_remset(start, word_count); }\n+  \/\/ This method is used to concurrently clean the \"read\" card table -\n+  \/\/ currently, as part of the reset phase. Later on the pointers to the \"read\"\n+  \/\/ and \"write\" card tables are swapped everywhere to enable the GC to\n+  \/\/ concurrently operate on the \"read\" table while mutators effect changes on\n+  \/\/ the \"write\" table.\n+  void mark_read_table_as_clean();\n+\n+  \/\/ Swaps read and write card tables pointers in effect setting a clean card\n+  \/\/ table for the next GC cycle.\n+  void swap_card_tables() { _rs->swap_card_tables(); }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  _card_table(nullptr),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,3 @@\n+  \/\/ Current active CardTable's byte_map_base for this thread.\n+  CardTable::CardValue*   _card_table;\n+\n@@ -125,0 +128,11 @@\n+  static void set_card_table(Thread* thread, CardTable::CardValue* ct) {\n+    assert(ct != nullptr, \"trying to set thread local card_table pointer to nullptr.\");\n+    data(thread)->_card_table = ct;\n+  }\n+\n+  static CardTable::CardValue* card_table(Thread* thread) {\n+    CardTable::CardValue* ct = data(thread)->_card_table;\n+    assert(ct != nullptr, \"returning a null thread local card_table pointer.\");\n+    return ct;\n+  }\n+\n@@ -287,0 +301,4 @@\n+\n+  static ByteSize card_table_offset() {\n+    return Thread::gc_data_offset() + byte_offset_of(ShenandoahThreadLocalData, _card_table);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1270,1 +1270,1 @@\n-                                         _message, \"clean card should be dirty\", __FILE__, __LINE__);\n+                                         _message, \"clean card, it should be dirty.\", __FILE__, __LINE__);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}