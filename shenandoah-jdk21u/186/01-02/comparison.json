{"files":[{"patch":"@@ -84,0 +84,7 @@\n+void ShenandoahBarrierSetAssembler::arraycopy_epilogue(MacroAssembler* masm, DecoratorSet decorators, bool is_oop,\n+                                                       Register start, Register count, Register tmp, RegSet saved_regs) {\n+  if (ShenandoahCardBarrier && is_oop) {\n+    gen_write_ref_array_post_barrier(masm, decorators, start, count, tmp, saved_regs);\n+  }\n+}\n+\n@@ -115,1 +122,0 @@\n-  Address in_progress(thread, in_bytes(ShenandoahThreadLocalData::satb_mark_queue_active_offset()));\n@@ -120,7 +126,4 @@\n-  if (in_bytes(SATBMarkQueue::byte_width_of_active()) == 4) {\n-    __ lwu(tmp1, in_progress);\n-  } else {\n-    assert(in_bytes(SATBMarkQueue::byte_width_of_active()) == 1, \"Assumption\");\n-    __ lbu(tmp1, in_progress);\n-  }\n-  __ beqz(tmp1, done);\n+  Address gc_state(xthread, in_bytes(ShenandoahThreadLocalData::gc_state_offset()));\n+  __ lbu(t1, gc_state);\n+  __ test_bit(t1, t1, ShenandoahHeap::MARKING_BITPOS);\n+  __ beqz(t1, done);\n@@ -142,1 +145,1 @@\n-  __ sub(tmp1, tmp1, wordSize);        \/\/ tmp := tmp - wordSize\n+  __ subi(tmp1, tmp1, wordSize);       \/\/ tmp := tmp - wordSize\n@@ -396,1 +399,2 @@\n-  __ load_byte_map_base(t1);\n+  Address curr_ct_holder_addr(xthread, in_bytes(ShenandoahThreadLocalData::card_table_offset()));\n+  __ ld(t1, curr_ct_holder_addr);\n@@ -435,10 +439,6 @@\n-  if (val == noreg) {\n-    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp3, 0), noreg, noreg, noreg, noreg);\n-  } else {\n-    \/\/ Barrier needs uncompressed oop for region cross check.\n-    Register new_val = val;\n-    if (UseCompressedOops) {\n-      new_val = t1;\n-      __ mv(new_val, val);\n-    }\n-    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp3, 0), val, noreg, noreg, noreg);\n+  BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp3, 0), val, noreg, noreg, noreg);\n+\n+  bool in_heap = (decorators & IN_HEAP) != 0;\n+  bool needs_post_barrier = (val != noreg) && in_heap && ShenandoahCardBarrier;\n+  if (needs_post_barrier) {\n+    store_check(masm, tmp3);\n@@ -694,1 +694,1 @@\n-  __ sub(tmp, tmp, wordSize);\n+  __ subi(tmp, tmp, wordSize);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+  void store_check(MacroAssembler* masm, Register obj);\n+\n@@ -64,0 +66,4 @@\n+  void gen_write_ref_array_post_barrier(MacroAssembler* masm, DecoratorSet decorators,\n+                                        Register start, Register count,\n+                                        Register tmp, RegSet saved_regs);\n+\n@@ -78,0 +84,3 @@\n+  virtual void arraycopy_epilogue(MacroAssembler* masm, DecoratorSet decorators, bool is_oop,\n+                                  Register start, Register count, Register tmp, RegSet saved_regs);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -943,1 +943,1 @@\n-  Address curr_ct_holder_addr(thread, in_bytes(ShenandoahThreadLocalData::byte_map_base_offset()));\n+  Address curr_ct_holder_addr(thread, in_bytes(ShenandoahThreadLocalData::card_table_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}