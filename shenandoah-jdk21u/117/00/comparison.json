{"files":[{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahRootProcessor.hpp\"\n@@ -34,1 +33,1 @@\n-ShenandoahEvacuationStats::ShenandoahEvacuationStats(bool generational)\n+ShenandoahEvacuationStats::ShenandoahEvacuationStats()\n@@ -37,1 +36,1 @@\n-    _use_age_table(generational && (ShenandoahGenerationalCensusAtEvac || !ShenandoahGenerationalAdaptiveTenuring)) {\n+    _use_age_table(ShenandoahGenerationalCensusAtEvac || !ShenandoahGenerationalAdaptiveTenuring) {\n@@ -84,0 +83,1 @@\n+#ifndef PRODUCT\n@@ -92,0 +92,1 @@\n+#endif\n@@ -112,8 +113,6 @@\n-  if (_generational) {\n-    ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n-    AgeTable young_region_ages(false);\n-    for (uint i = 0; i < heap->num_regions(); ++i) {\n-      ShenandoahHeapRegion* r = heap->get_region(i);\n-      if (r->is_young()) {\n-        young_region_ages.add(r->age(), r->get_live_data_words());\n-      }\n+  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n+  AgeTable young_region_ages(false);\n+  for (uint i = 0; i < heap->num_regions(); ++i) {\n+    ShenandoahHeapRegion* r = heap->get_region(i);\n+    if (r->is_young()) {\n+      young_region_ages.add(r->age(), r->get_live_data_words());\n@@ -121,4 +120,0 @@\n-    uint tenuring_threshold = heap->age_census()->tenuring_threshold();\n-    st->print(\"Young regions: \");\n-    young_region_ages.print_on(st, tenuring_threshold);\n-    st->cr();\n@@ -126,0 +121,4 @@\n+  uint tenuring_threshold = heap->age_census()->tenuring_threshold();\n+  st->print(\"Young regions: \");\n+  young_region_ages.print_on(st, tenuring_threshold);\n+  st->cr();\n@@ -132,1 +131,1 @@\n-  virtual void do_thread(Thread* thread) override {\n+  void do_thread(Thread* thread) override {\n@@ -140,1 +139,1 @@\n-  ShenandoahEvacuationStats mutators(_generational), workers(_generational);\n+  ShenandoahEvacuationStats mutators, workers;\n@@ -152,1 +151,1 @@\n-  if (_generational && (ShenandoahGenerationalCensusAtEvac || !ShenandoahGenerationalAdaptiveTenuring)) {\n+  if (ShenandoahGenerationalCensusAtEvac || !ShenandoahGenerationalAdaptiveTenuring) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacTracker.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  ShenandoahEvacuationStats(bool generational);\n+  ShenandoahEvacuationStats();\n@@ -62,1 +62,0 @@\n-  bool _generational;\n@@ -68,4 +67,1 @@\n-  ShenandoahEvacuationTracker(bool generational) :\n-   _generational(generational),\n-   _workers_global(generational),\n-   _mutators_global(generational) {}\n+  ShenandoahEvacuationTracker() = default;\n@@ -79,2 +75,2 @@\n-                                   ShenandoahEvacuationStats* workers,\n-                                   ShenandoahEvacuationStats* mutators);\n+                            ShenandoahEvacuationStats* workers,\n+                            ShenandoahEvacuationStats* mutators);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacTracker.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n@@ -343,1 +344,1 @@\n-void ShenandoahGenerationalControlThread::process_phase_timings(const ShenandoahHeap* heap) {\n+void ShenandoahGenerationalControlThread::process_phase_timings(const ShenandoahGenerationalHeap* heap) {\n@@ -397,3 +398,3 @@\n-void ShenandoahGenerationalControlThread::service_concurrent_normal_cycle(ShenandoahHeap* heap,\n-                                                              const ShenandoahGenerationType generation,\n-                                                              GCCause::Cause cause) {\n+void ShenandoahGenerationalControlThread::service_concurrent_normal_cycle(ShenandoahGenerationalHeap* heap,\n+                                                                          const ShenandoahGenerationType generation,\n+                                                                          GCCause::Cause cause) {\n@@ -427,1 +428,1 @@\n-void ShenandoahGenerationalControlThread::service_concurrent_old_cycle(ShenandoahHeap* heap, GCCause::Cause &cause) {\n+void ShenandoahGenerationalControlThread::service_concurrent_old_cycle(ShenandoahGenerationalHeap* heap, GCCause::Cause &cause) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.hpp\"\n@@ -37,0 +37,3 @@\n+class ShenandoahGeneration;\n+class ShenandoahGenerationalHeap;\n+class ShenandoahHeap;\n@@ -104,1 +107,1 @@\n-  void process_phase_timings(const ShenandoahHeap* heap);\n+  void process_phase_timings(const ShenandoahGenerationalHeap* heap);\n@@ -106,1 +109,1 @@\n-  void service_concurrent_normal_cycle(ShenandoahHeap* heap,\n+  void service_concurrent_normal_cycle(ShenandoahGenerationalHeap* heap,\n@@ -110,1 +113,1 @@\n-  void service_concurrent_old_cycle(ShenandoahHeap* heap,\n+  void service_concurrent_old_cycle(ShenandoahGenerationalHeap* heap,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+  _evac_tracker(new ShenandoahEvacuationTracker()),\n@@ -117,0 +118,12 @@\n+void ShenandoahGenerationalHeap::print_tracing_info() const {\n+  ShenandoahHeap::print_tracing_info();\n+\n+  LogTarget(Info, gc, stats) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    ls.cr();\n+    ls.cr();\n+    evac_tracker()->print_global_on(&ls);\n+  }\n+}\n+\n@@ -320,1 +333,1 @@\n-  evac_tracker()->begin_evacuation(thread, size * HeapWordSize);\n+  NOT_PRODUCT(evac_tracker()->begin_evacuation(thread, size * HeapWordSize));\n@@ -342,1 +355,1 @@\n-    evac_tracker()->end_evacuation(thread, size * HeapWordSize);\n+    NOT_PRODUCT(evac_tracker()->end_evacuation(thread, size * HeapWordSize));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+  void print_tracing_info() const override;\n+\n@@ -64,0 +66,2 @@\n+  \/\/ Used primarily to look for failed evacuation attempts.\n+  ShenandoahEvacuationTracker*  _evac_tracker;\n@@ -79,0 +83,4 @@\n+  ShenandoahEvacuationTracker* evac_tracker() const {\n+    return _evac_tracker;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -519,1 +519,0 @@\n-  _evac_tracker = new ShenandoahEvacuationTracker(mode()->is_generational());\n@@ -554,1 +553,0 @@\n-  _evac_tracker(nullptr),\n@@ -1251,7 +1249,0 @@\n-      if ((copy == nullptr) && (size < ShenandoahThreadLocalData::gclab_size(thread))) {\n-        \/\/ GCLAB allocation failed because we are bumping up against the limit on young evacuation reserve.  Try resetting\n-        \/\/ the desired GCLAB size and retry GCLAB allocation to avoid cascading of shared memory allocations.\n-        ShenandoahThreadLocalData::set_gclab_size(thread, PLAB::min_size());\n-        copy = allocate_from_gclab(thread, size);\n-        \/\/ If we still get nullptr, we'll try a shared allocation below.\n-      }\n@@ -1259,1 +1250,0 @@\n-\n@@ -1279,1 +1269,0 @@\n-  _evac_tracker->begin_evacuation(thread, size * HeapWordSize);\n@@ -1282,2 +1271,0 @@\n-  oop copy_val = cast_to_oop(copy);\n-\n@@ -1285,2 +1272,1 @@\n-  ContinuationGCSupport::relativize_stack_chunk(copy_val);\n-\n+  oop copy_val = cast_to_oop(copy);\n@@ -1290,1 +1276,1 @@\n-    _evac_tracker->end_evacuation(thread, size * HeapWordSize);\n+    ContinuationGCSupport::relativize_stack_chunk(copy_val);\n@@ -1537,4 +1523,0 @@\n-    ls.cr();\n-\n-    evac_tracker()->print_global_on(&ls);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -512,1 +512,0 @@\n-  ShenandoahEvacuationTracker*  _evac_tracker;\n@@ -537,1 +536,0 @@\n-  ShenandoahEvacuationTracker* evac_tracker()    const { return _evac_tracker;      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,2 +49,3 @@\n-  bool gen_mode = ShenandoahHeap::heap()->mode()->is_generational();\n-  _evacuation_stats = new ShenandoahEvacuationStats(gen_mode);\n+  if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+    _evacuation_stats = new ShenandoahEvacuationStats();\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -155,0 +155,1 @@\n+    shenandoah_assert_generational();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}