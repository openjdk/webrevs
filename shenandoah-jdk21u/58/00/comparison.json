{"files":[{"patch":"@@ -228,1 +228,1 @@\n-  const uint tenuring_threshold = ShenandoahHeap::heap()->age_census()->tenuring_threshold();\n+  const uint tenuring_threshold = ShenandoahGenerationalHeap::heap()->age_census()->tenuring_threshold();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"utilities\/numberSeq.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  _heap->card_scan()->mark_range_as_dirty(aligned_start, (aligned_end - aligned_start));\n+  _heap->old_generation()->card_scan()->mark_range_as_dirty(aligned_start, (aligned_end - aligned_start));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/g1\/g1RegionToSpaceMapper.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"memory\/virtualspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -100,1 +101,1 @@\n-    if (ShenandoahHeap::heap()->mode()->is_generational() && r->age() >= ShenandoahHeap::heap()->age_census()->tenuring_threshold()) {\n+    if (ShenandoahHeap::heap()->mode()->is_generational() && r->age() >= ShenandoahGenerationalHeap::heap()->age_census()->tenuring_threshold()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-#ifndef LINUX_X86_64_SERVER_SLOWDEBUG_SHENANDOAHCONTROLLER_HPP\n-#define LINUX_X86_64_SERVER_SLOWDEBUG_SHENANDOAHCONTROLLER_HPP\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHCONTROLLER_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHCONTROLLER_HPP\n@@ -105,1 +105,1 @@\n-#endif \/\/LINUX_X86_64_SERVER_SLOWDEBUG_SHENANDOAHCONTROLLER_HPP\n+#endif \/\/SHARE_GC_SHENANDOAH_SHENANDOAHCONTROLLER_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahController.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -93,1 +93,2 @@\n-    _age_table->print_on(st, ShenandoahHeap::heap()->age_census()->tenuring_threshold());\n+    shenandoah_assert_generational();\n+    _age_table->print_on(st, ShenandoahGenerationalHeap::heap()->age_census()->tenuring_threshold());\n@@ -111,1 +112,0 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -113,0 +113,1 @@\n+    ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n@@ -157,1 +158,1 @@\n-    ShenandoahHeap::heap()->age_census()->update_census(0, _mutators_global.age_table(), _workers_global.age_table());\n+    ShenandoahGenerationalHeap::heap()->age_census()->update_census(0, _mutators_global.age_table(), _workers_global.age_table());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacTracker.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -731,1 +731,1 @@\n-      _heap->clear_cards_for(r);\n+      _heap->old_generation()->clear_cards_for(r);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-  ShenandoahHeap* _heap;\n@@ -95,1 +94,1 @@\n-  ShenandoahMergeWriteTable() : _heap(ShenandoahHeap::heap()), _scanner(_heap->card_scan()) {}\n+  ShenandoahMergeWriteTable(RememberedScanner* scanner) : _scanner(scanner) {}\n@@ -97,1 +96,1 @@\n-  virtual void heap_region_do(ShenandoahHeapRegion* r) override {\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n@@ -102,1 +101,1 @@\n-  virtual bool is_thread_safe() override {\n+  bool is_thread_safe() override {\n@@ -107,1 +106,1 @@\n-class ShenandoahSquirrelAwayCardTable: public ShenandoahHeapRegionClosure {\n+class ShenandoahCopyWriteCardTableToRead: public ShenandoahHeapRegionClosure {\n@@ -109,1 +108,0 @@\n-  ShenandoahHeap* _heap;\n@@ -112,3 +110,1 @@\n-  ShenandoahSquirrelAwayCardTable() :\n-    _heap(ShenandoahHeap::heap()),\n-    _scanner(_heap->card_scan()) {}\n+  ShenandoahCopyWriteCardTableToRead(RememberedScanner* scanner) : _scanner(scanner) {}\n@@ -116,1 +112,1 @@\n-  void heap_region_do(ShenandoahHeapRegion* region) {\n+  void heap_region_do(ShenandoahHeapRegion* region) override {\n@@ -121,1 +117,1 @@\n-  bool is_thread_safe() { return true; }\n+  bool is_thread_safe() override { return true; }\n@@ -210,1 +206,1 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n@@ -214,3 +210,4 @@\n-  \/\/ TODO: Eventually, we want replace this with a constant-time exchange of pointers.\n-  ShenandoahSquirrelAwayCardTable task;\n-  heap->old_generation()->parallel_heap_region_iterate(&task);\n+  \/\/ TODO: Eventually, we want to replace this with a constant-time exchange of pointers.\n+  ShenandoahOldGeneration* old_generation = heap->old_generation();\n+  ShenandoahCopyWriteCardTableToRead task(old_generation->card_scan());\n+  old_generation->parallel_heap_region_iterate(&task);\n@@ -224,1 +221,1 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n@@ -228,2 +225,3 @@\n-  ShenandoahMergeWriteTable task;\n-  heap->old_generation()->parallel_heap_region_iterate(&task);\n+  ShenandoahOldGeneration* old_generation = heap->old_generation();\n+  ShenandoahMergeWriteTable task(old_generation->card_scan());\n+  old_generation->parallel_heap_region_iterate(&task);\n@@ -684,1 +682,2 @@\n-    heap->age_census()->update_census(age0_pop);\n+    ShenandoahAgeCensus* census = ShenandoahGenerationalHeap::heap()->age_census();\n+    census->update_census(age0_pop);\n@@ -687,1 +686,1 @@\n-    size_t total_census = heap->age_census()->get_total();\n+    size_t total_census = census->get_total();\n@@ -842,1 +841,1 @@\n-  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  ShenandoahGenerationalHeap* const heap = ShenandoahGenerationalHeap::heap();\n@@ -852,2 +851,3 @@\n-    assert(heap->card_scan() != nullptr, \"Not generational\");\n-    heap->card_scan()->log_card_stats(nworkers, CARD_STAT_SCAN_RS);\n+    RememberedScanner* scanner = heap->old_generation()->card_scan();\n+    assert(scanner != nullptr, \"Not generational\");\n+    scanner->log_card_stats(nworkers, CARD_STAT_SCAN_RS);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-    assert(region->age() >= _heap->age_census()->tenuring_threshold(), \"Only promote regions that are sufficiently aged\");\n+    assert(region->age() >= _tenuring_threshold, \"Only promote regions that are sufficiently aged\");\n@@ -143,0 +143,3 @@\n+  ShenandoahOldGeneration* const old_gen = _heap->old_generation();\n+  ShenandoahYoungGeneration* const young_gen = _heap->young_generation();\n+\n@@ -150,2 +153,3 @@\n-  _heap->card_scan()->reset_object_range(region->bottom(), region->end());\n-  _heap->card_scan()->mark_range_as_dirty(region->bottom(), region->get_top_before_promote() - region->bottom());\n+  RememberedScanner* const scanner = old_gen->card_scan();\n+  scanner->reset_object_range(region->bottom(), region->end());\n+  scanner->mark_range_as_dirty(region->bottom(), region->get_top_before_promote() - region->bottom());\n@@ -160,1 +164,1 @@\n-      _heap->card_scan()->register_object_without_lock(obj_addr);\n+      scanner->register_object_without_lock(obj_addr);\n@@ -168,1 +172,1 @@\n-      _heap->card_scan()->register_object_without_lock(obj_addr);\n+      scanner->register_object_without_lock(obj_addr);\n@@ -175,2 +179,0 @@\n-  ShenandoahOldGeneration* const old_gen = _heap->old_generation();\n-  ShenandoahYoungGeneration* const young_gen = _heap->young_generation();\n@@ -220,1 +222,1 @@\n-  assert(region->age() >= _heap->age_census()->tenuring_threshold(), \"Only promote regions that are sufficiently aged\");\n+  assert(region->age() >= _tenuring_threshold, \"Only promote regions that are sufficiently aged\");\n@@ -234,2 +236,2 @@\n-  ShenandoahGeneration* const old_generation = _heap->old_generation();\n-  ShenandoahGeneration* const young_generation = _heap->young_generation();\n+  ShenandoahOldGeneration* const old_gen = _heap->old_generation();\n+  ShenandoahGeneration* const young_gen = _heap->young_generation();\n@@ -245,3 +247,3 @@\n-    young_generation->decrease_used(used_bytes);\n-    young_generation->decrease_humongous_waste(humongous_waste);\n-    young_generation->decrease_affiliated_region_count(spanned_regions);\n+    young_gen->decrease_used(used_bytes);\n+    young_gen->decrease_humongous_waste(humongous_waste);\n+    young_gen->decrease_affiliated_region_count(spanned_regions);\n@@ -263,3 +265,3 @@\n-    old_generation->increase_affiliated_region_count(spanned_regions);\n-    old_generation->increase_used(used_bytes);\n-    old_generation->increase_humongous_waste(humongous_waste);\n+    old_gen->increase_affiliated_region_count(spanned_regions);\n+    old_gen->increase_used(used_bytes);\n+    old_gen->increase_humongous_waste(humongous_waste);\n@@ -270,1 +272,2 @@\n-  _heap->card_scan()->reset_object_range(humongous_bottom, humongous_bottom + spanned_regions * ShenandoahHeapRegion::region_size_words());\n+  RememberedScanner* const scanner = old_gen->card_scan();\n+  scanner->reset_object_range(humongous_bottom, humongous_bottom + spanned_regions * ShenandoahHeapRegion::region_size_words());\n@@ -272,1 +275,1 @@\n-  _heap->card_scan()->register_object_without_lock(humongous_bottom);\n+  scanner->register_object_without_lock(humongous_bottom);\n@@ -278,1 +281,1 @@\n-    _heap->card_scan()->mark_range_as_clean(humongous_bottom, obj->size());\n+    scanner->mark_range_as_clean(humongous_bottom, obj->size());\n@@ -282,1 +285,1 @@\n-    _heap->card_scan()->mark_range_as_dirty(humongous_bottom, obj->size());\n+    scanner->mark_range_as_dirty(humongous_bottom, obj->size());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -102,0 +103,1 @@\n+  _age_census(nullptr),\n@@ -111,0 +113,5 @@\n+void ShenandoahGenerationalHeap::post_initialize() {\n+  ShenandoahHeap::post_initialize();\n+  _age_census = new ShenandoahAgeCensus();\n+}\n+\n@@ -526,1 +533,1 @@\n-    card_scan()->register_object_without_lock(top);\n+    old_generation()->card_scan()->register_object_without_lock(top);\n@@ -718,1 +725,1 @@\n-  ShenandoahHeap* _heap;\n+  ShenandoahGenerationalHeap* _heap;\n@@ -726,1 +733,1 @@\n-          _heap(ShenandoahHeap::heap()),\n+          _heap(ShenandoahGenerationalHeap::heap()),\n@@ -820,1 +827,1 @@\n-      RememberedScanner* scanner = _heap->card_scan();\n+      RememberedScanner* scanner = _heap->old_generation()->card_scan();\n@@ -942,2 +949,3 @@\n-    assert(card_scan() != nullptr, \"Card table must exist when card stats are enabled\");\n-    card_scan()->log_card_stats(nworkers, CARD_STAT_UPDATE_REFS);\n+    RememberedScanner* card_scan = old_generation()->card_scan();\n+    assert(card_scan != nullptr, \"Card table must exist when card stats are enabled\");\n+    card_scan->log_card_stats(nworkers, CARD_STAT_UPDATE_REFS);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+class PLAB;\n@@ -32,0 +33,1 @@\n+class ShenandoahAgeCensus;\n@@ -36,0 +38,1 @@\n+  void post_initialize() override;\n@@ -42,0 +45,1 @@\n+private:\n@@ -44,0 +48,1 @@\n+  \/\/ True when regions and objects should be aged during the current cycle\n@@ -45,0 +50,4 @@\n+  \/\/ Age census used for adapting tenuring threshold\n+  ShenandoahAgeCensus* _age_census;\n+\n+public:\n@@ -53,0 +62,5 @@\n+  \/\/ Return the age census object for young gen\n+  ShenandoahAgeCensus* age_census() const {\n+    return _age_census;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.hpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -133,1 +134,1 @@\n-    ShenandoahHeap::heap()->age_census()->reset_local();\n+    ShenandoahGenerationalHeap::heap()->age_census()->reset_local();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -45,1 +44,0 @@\n-#include \"gc\/shenandoah\/shenandoahCardTable.hpp\"\n@@ -193,3 +191,0 @@\n-  \/\/ Now we know the number of regions and heap sizes, initialize the heuristics.\n-  initialize_heuristics_generations();\n-\n@@ -235,9 +230,2 @@\n-  \/\/\n-  \/\/ After reserving the Java heap, create the card table, barriers, and workers, in dependency order\n-  \/\/\n-  if (mode()->is_generational()) {\n-    ShenandoahDirectCardMarkRememberedSet *rs;\n-    ShenandoahCardTable* card_table = ShenandoahBarrierSet::barrier_set()->card_table();\n-    size_t card_count = card_table->cards_required(heap_rs.size() \/ HeapWordSize);\n-    rs = new ShenandoahDirectCardMarkRememberedSet(ShenandoahBarrierSet::barrier_set()->card_table(), card_count);\n-    _card_scan = new ShenandoahScanRemembered<ShenandoahDirectCardMarkRememberedSet>(rs);\n+  \/\/ Now we know the number of regions and heap sizes, initialize the heuristics.\n+  initialize_heuristics();\n@@ -245,3 +233,1 @@\n-    \/\/ Age census structure\n-    _age_census = new ShenandoahAgeCensus();\n-  }\n+  assert(_heap_region.byte_size() == heap_rs.size(), \"Need to know reserved size for card table\");\n@@ -249,0 +235,3 @@\n+  \/\/\n+  \/\/ Worker threads must be initialized after the barrier is configured\n+  \/\/\n@@ -500,1 +489,1 @@\n-void ShenandoahHeap::initialize_heuristics_generations() {\n+void ShenandoahHeap::initialize_mode() {\n@@ -527,0 +516,1 @@\n+}\n@@ -528,0 +518,1 @@\n+void ShenandoahHeap::initialize_heuristics() {\n@@ -568,1 +559,0 @@\n-  _age_census(nullptr),\n@@ -576,0 +566,1 @@\n+  _gc_mode(nullptr),\n@@ -597,2 +588,1 @@\n-  _collection_set(nullptr),\n-  _card_scan(nullptr)\n+  _collection_set(nullptr)\n@@ -600,0 +590,2 @@\n+  \/\/ Initialize GC mode early, many subsequent initialization procedures depend on it\n+  initialize_mode();\n@@ -1118,1 +1110,1 @@\n-      card_scan()->register_object(result);\n+      old_generation()->card_scan()->register_object(result);\n@@ -2499,2 +2491,1 @@\n-    ShenandoahOldHeuristics* old_heuristics = old_gen->heuristics();\n-    old_heuristics->trigger_maybe(first_old_region, last_old_region, old_region_count, num_regions());\n+    old_gen->heuristics()->trigger_maybe(first_old_region, last_old_region, old_region_count, num_regions());\n@@ -2709,12 +2700,0 @@\n-\n-void ShenandoahHeap::clear_cards_for(ShenandoahHeapRegion* region) {\n-  if (mode()->is_generational()) {\n-    _card_scan->mark_range_as_empty(region->bottom(), pointer_delta(region->end(), region->bottom()));\n-  }\n-}\n-\n-void ShenandoahHeap::mark_card_as_dirty(void* location) {\n-  if (mode()->is_generational()) {\n-    _card_scan->mark_card_as_dirty((HeapWord*)location);\n-  }\n-}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":15,"deletions":36,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/ageTable.hpp\"\n@@ -34,1 +33,0 @@\n-#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -36,1 +34,0 @@\n-#include \"gc\/shenandoah\/shenandoahAsserts.hpp\"\n@@ -46,1 +43,0 @@\n-#include \"gc\/shenandoah\/shenandoahScanRemembered.hpp\"\n@@ -56,1 +52,0 @@\n-class PLAB;\n@@ -58,1 +53,0 @@\n-class ShenandoahRegulatorThread;\n@@ -65,2 +59,0 @@\n-class ShenandoahOldHeuristics;\n-class ShenandoahYoungHeuristics;\n@@ -68,0 +60,1 @@\n+class ShenandoahMode;\n@@ -77,1 +70,0 @@\n-class ShenandoahMode;\n@@ -183,1 +175,2 @@\n-  void initialize_heuristics_generations();\n+  void initialize_mode();\n+  void initialize_heuristics();\n@@ -348,2 +341,0 @@\n-  ShenandoahAgeCensus* _age_census;    \/\/ Age census used for adapting tenuring threshold in generational mode\n-\n@@ -396,3 +387,0 @@\n-  \/\/ Return the age census object for young gen (in generational mode)\n-  inline ShenandoahAgeCensus* age_census() const;\n-\n@@ -739,10 +727,0 @@\n-\/\/ ---------- Generational support\n-\/\/\n-private:\n-  RememberedScanner* _card_scan;\n-\n-public:\n-  inline RememberedScanner* card_scan() { return _card_scan; }\n-  void clear_cards_for(ShenandoahHeapRegion* region);\n-  void mark_card_as_dirty(void* location);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":3,"deletions":25,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -300,6 +300,0 @@\n-inline ShenandoahAgeCensus* ShenandoahHeap::age_census() const {\n-  assert(mode()->is_generational(), \"Only in generational mode\");\n-  assert(_age_census != nullptr, \"Error: not initialized\");\n-  return _age_census;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -467,1 +467,1 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n@@ -496,1 +496,1 @@\n-      heap->card_scan()->coalesce_objects(obj_addr, fill_size);\n+      heap->old_generation()->card_scan()->coalesce_objects(obj_addr, fill_size);\n@@ -518,1 +518,1 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n@@ -527,1 +527,1 @@\n-  RememberedScanner* scanner = ShenandoahHeap::heap()->card_scan();\n+  RememberedScanner* scanner = heap->old_generation()->card_scan();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahGenerationalHeap.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahOldGeneration.hpp\"\n@@ -67,1 +69,1 @@\n-      ShenandoahHeap::heap()->card_scan()->register_object(orig_top);\n+      ShenandoahGenerationalHeap::heap()->old_generation()->card_scan()->register_object(orig_top);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,0 +101,3 @@\n+  template <class T>\n+  static void mark_non_generational_ref(T *p, ShenandoahObjToScanQueue* q, ShenandoahMarkingContext* const mark_context, bool weak);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -36,0 +37,1 @@\n+#include \"gc\/shenandoah\/shenandoahOldGeneration.hpp\"\n@@ -37,0 +39,1 @@\n+#include \"gc\/shenandoah\/shenandoahScanRemembered.inline.hpp\"\n@@ -124,2 +127,3 @@\n-      CENSUS_NOISE(heap->age_census()->add(age, region->age(), region->youth(), size, worker_id);)\n-      NO_CENSUS_NOISE(heap->age_census()->add(age, region->age(), size, worker_id);)\n+      ShenandoahAgeCensus* const census = ShenandoahGenerationalHeap::heap()->age_census();\n+      CENSUS_NOISE(census->add(age, region->age(), region->youth(), size, worker_id);)\n+      NO_CENSUS_NOISE(census->add(age, region->age(), size, worker_id);)\n@@ -283,1 +287,3 @@\n-  } else if (GENERATION == OLD) {\n+  }\n+\n+  if (GENERATION == OLD) {\n@@ -285,4 +291,0 @@\n-  } else if (GENERATION == GLOBAL || GENERATION == NON_GEN) {\n-    return true;\n-  } else {\n-    return false;\n@@ -290,0 +292,4 @@\n+\n+  assert((GENERATION == GLOBAL || GENERATION == NON_GEN), \"Unexpected generation type\");\n+  assert(heap->is_in(obj), \"Object must be in heap\");\n+  return true;\n@@ -301,1 +307,1 @@\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n+    ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n@@ -314,1 +320,1 @@\n-        heap->mark_card_as_dirty((HeapWord*)p);\n+        heap->old_generation()->mark_card_as_dirty((HeapWord*)p);\n@@ -317,1 +323,1 @@\n-        heap->mark_card_as_dirty((HeapWord*)p);\n+        heap->old_generation()->mark_card_as_dirty((HeapWord*)p);\n@@ -325,2 +331,2 @@\n-      \/\/ TODO:  Rethink this: may be redundant with dirtying of cards identified during young-gen remembered set scanning\n-      \/\/ and by mutator write barriers.  Assert\n+      \/\/ TODO: Rethink this: may be redundant with dirtying of cards identified during young-gen remembered set scanning\n+      \/\/ and by mutator write barriers.\n@@ -329,1 +335,3 @@\n-        heap->mark_card_as_dirty(p);\n+        \/\/ TODO: This assert _should not_ pop, but it does. We need to figure out why.\n+        \/\/ assert(heap->old_generation()->card_scan()->is_card_dirty((HeapWord*)p), \"Card should already be marked.\");\n+        heap->old_generation()->mark_card_as_dirty(p);\n@@ -335,0 +343,26 @@\n+template<>\n+inline void ShenandoahMark::mark_through_ref<oop, ShenandoahGenerationType::NON_GEN>(oop *p, ShenandoahObjToScanQueue* q, ShenandoahObjToScanQueue* old_q, ShenandoahMarkingContext* const mark_context, bool weak) {\n+  mark_non_generational_ref(p, q, mark_context, weak);\n+}\n+\n+template<>\n+inline void ShenandoahMark::mark_through_ref<narrowOop, ShenandoahGenerationType::NON_GEN>(narrowOop *p, ShenandoahObjToScanQueue* q, ShenandoahObjToScanQueue* old_q, ShenandoahMarkingContext* const mark_context, bool weak) {\n+  mark_non_generational_ref(p, q, mark_context, weak);\n+}\n+\n+template<class T>\n+inline void ShenandoahMark::mark_non_generational_ref(T* p, ShenandoahObjToScanQueue* q,\n+                                                      ShenandoahMarkingContext* const mark_context, bool weak) {\n+  oop o = RawAccess<>::oop_load(p);\n+  if (!CompressedOops::is_null(o)) {\n+    oop obj = CompressedOops::decode_not_null(o);\n+\n+    shenandoah_assert_not_forwarded(p, obj);\n+    shenandoah_assert_not_in_cset_except(p, obj, ShenandoahHeap::heap()->cancelled_gc());\n+\n+    mark_ref(q, mark_context, weak, obj);\n+\n+    shenandoah_assert_marked(p, obj);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":47,"deletions":13,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -183,0 +183,1 @@\n+    _card_scan(nullptr),\n@@ -190,0 +191,8 @@\n+\n+  if (ShenandoahCardBarrier) {\n+    \/\/ TODO: Old and young generations should only be instantiated for generational mode\n+    ShenandoahCardTable* card_table = ShenandoahBarrierSet::barrier_set()->card_table();\n+    size_t card_count = card_table->cards_required(ShenandoahHeap::heap()->reserved_region().word_size());\n+    auto rs = new ShenandoahDirectCardMarkRememberedSet(card_table, card_count);\n+    _card_scan = new ShenandoahScanRemembered<ShenandoahDirectCardMarkRememberedSet>(rs);\n+  }\n@@ -390,1 +399,1 @@\n-  uint coalesce_and_fill_regions_count = heuristics()->get_coalesce_and_fill_candidates(_coalesce_and_fill_region_array);\n+  uint coalesce_and_fill_regions_count = _old_heuristics->get_coalesce_and_fill_candidates(_coalesce_and_fill_region_array);\n@@ -598,2 +607,2 @@\n-  assert(!heuristics()->has_coalesce_and_fill_candidates(), \"Cannot have coalesce and fill candidates in IDLE\");\n-  assert(heuristics()->unprocessed_old_collection_candidates() == 0, \"Cannot have mixed collection candidates in IDLE\");\n+  assert(!_old_heuristics->has_coalesce_and_fill_candidates(), \"Cannot have coalesce and fill candidates in IDLE\");\n+  assert(_old_heuristics->unprocessed_old_collection_candidates() == 0, \"Cannot have mixed collection candidates in IDLE\");\n@@ -662,3 +671,0 @@\n-  auto heap = ShenandoahGenerationalHeap::heap();\n-  auto card_scan = heap->card_scan();\n-\n@@ -666,1 +672,1 @@\n-  card_scan->register_object_without_lock(obj);\n+  _card_scan->register_object_without_lock(obj);\n@@ -672,1 +678,1 @@\n-  card_scan->mark_range_as_dirty(obj, words);\n+  _card_scan->mark_range_as_dirty(obj, words);\n@@ -775,0 +781,8 @@\n+\n+void ShenandoahOldGeneration::clear_cards_for(ShenandoahHeapRegion* region) {\n+  _card_scan->mark_range_as_empty(region->bottom(), pointer_delta(region->end(), region->bottom()));\n+}\n+\n+void ShenandoahOldGeneration::mark_card_as_dirty(void* location) {\n+  _card_scan->mark_card_as_dirty((HeapWord*)location);\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahScanRemembered.hpp\"\n@@ -36,0 +37,1 @@\n+class ShenandoahOldHeuristics;\n@@ -177,0 +179,12 @@\n+private:\n+  RememberedScanner* _card_scan;\n+\n+public:\n+  RememberedScanner* card_scan() { return _card_scan; }\n+\n+  \/\/ Clear cards for given region\n+  void clear_cards_for(ShenandoahHeapRegion* region);\n+\n+  \/\/ Mark card for this location as dirty\n+  void mark_card_as_dirty(void* location);\n+\n@@ -302,0 +316,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -65,2 +65,0 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  assert(heap->is_in_or_null(value), \"Should be in heap\");\n@@ -68,0 +66,2 @@\n+  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n+  assert(heap->is_in_or_null(value), \"Should be in heap\");\n@@ -76,1 +76,1 @@\n-    heap->card_scan()->mark_card_as_dirty(reinterpret_cast<HeapWord*>(field));\n+    heap->old_generation()->mark_card_as_dirty(field);\n@@ -389,1 +389,0 @@\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -439,1 +438,1 @@\n-    heap->card_scan()->mark_range_as_dirty(cast_from_oop<HeapWord*>(reference), reference->size());\n+    heap->old_generation()->card_scan()->mark_range_as_dirty(cast_from_oop<HeapWord*>(reference), reference->size());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    heap->card_scan()->roots_do(oops);\n+    ShenandoahGenerationalHeap::heap()->old_generation()->card_scan()->roots_do(oops);\n@@ -98,1 +98,1 @@\n-    heap->card_scan()->roots_do(oops);\n+    ShenandoahGenerationalHeap::heap()->old_generation()->card_scan()->roots_do(oops);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootVerifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-  ShenandoahHeap*    const _heap;\n-  RememberedScanner* const _scanner;\n+  ShenandoahGenerationalHeap* const _heap;\n+  RememberedScanner*          const _scanner;\n@@ -45,2 +45,2 @@\n-          _heap(ShenandoahHeap::heap()),\n-          _scanner(_heap->card_scan()) {}\n+          _heap(ShenandoahGenerationalHeap::heap()),\n+          _scanner(_heap->old_generation()->card_scan()) {}\n@@ -164,2 +164,2 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  RememberedScanner* scanner = heap->card_scan();\n+  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n+  RememberedScanner* scanner = heap->old_generation()->card_scan();\n@@ -414,2 +414,2 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  RememberedScanner* scanner = heap->card_scan();\n+  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n+  RememberedScanner* scanner = heap->old_generation()->card_scan();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1257,3 +1257,3 @@\n-  bool               const _init_mark;\n-  ShenandoahHeap*    const _heap;\n-  RememberedScanner* const _scanner;\n+  bool                        const _init_mark;\n+  ShenandoahGenerationalHeap* const _heap;\n+  RememberedScanner*          const _scanner;\n@@ -1265,2 +1265,2 @@\n-            _heap(ShenandoahHeap::heap()),\n-            _scanner(_heap->card_scan()) {}\n+            _heap(ShenandoahGenerationalHeap::heap()),\n+            _scanner(_heap->old_generation()->card_scan()) {}\n@@ -1292,1 +1292,1 @@\n-  RememberedScanner* scanner = _heap->card_scan();\n+  RememberedScanner* scanner = ShenandoahGenerationalHeap::heap()->old_generation()->card_scan();\n@@ -1349,1 +1349,1 @@\n-  RememberedScanner* scanner = _heap->card_scan();\n+  RememberedScanner* scanner = ShenandoahGenerationalHeap::heap()->old_generation()->card_scan();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/shenandoah\/shenandoahAgeCensus.hpp\"\n@@ -113,1 +114,1 @@\n-  ShenandoahHeap::heap()->age_census()->reset_local();\n+  ShenandoahGenerationalHeap::heap()->age_census()->reset_local();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}