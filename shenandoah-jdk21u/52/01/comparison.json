{"files":[{"patch":"@@ -145,3 +145,5 @@\n-\/\/ Default value if probing is not implemented for a certain platform: 128TB\n-static const size_t DEFAULT_MAX_ADDRESS_BIT = 47;\n-\/\/ Minimum value returned, if probing fails: 64GB\n+\/\/ Default value if probing is not implemented for a certain platform\n+\/\/ Max address bit is restricted by implicit assumptions in the code, for instance\n+\/\/ the bit layout of XForwardingEntry or Partial array entry (see XMarkStackEntry) in mark stack\n+static const size_t DEFAULT_MAX_ADDRESS_BIT = 46;\n+\/\/ Minimum value returned, if probing fails\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/x\/xGlobals_aarch64.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,3 +39,5 @@\n-\/\/ Default value if probing is not implemented for a certain platform: 128TB\n-static const size_t DEFAULT_MAX_ADDRESS_BIT = 47;\n-\/\/ Minimum value returned, if probing fails: 64GB\n+\/\/ Default value if probing is not implemented for a certain platform\n+\/\/ Max address bit is restricted by implicit assumptions in the code, for instance\n+\/\/ the bit layout of XForwardingEntry or Partial array entry (see XMarkStackEntry) in mark stack\n+static const size_t DEFAULT_MAX_ADDRESS_BIT = 46;\n+\/\/ Minimum value returned, if probing fail\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zAddress_aarch64.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2000,1 +2000,1 @@\n-  Events::log(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with protection modes %x\", p2i(addr), p2i(addr+size), prot);\n+  Events::log_memprotect(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with protection modes %x\", p2i(addr), p2i(addr+size), prot);\n@@ -2150,9 +2150,0 @@\n-\/\/ Used to convert frequent JVM_Yield() to nops\n-bool os::dont_yield() {\n-  return DontYieldALot;\n-}\n-\n-void os::naked_yield() {\n-  sched_yield();\n-}\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1514,1 +1514,1 @@\n-  Events::log(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with protection modes %x\", p2i(addr), p2i(addr+size), prot);\n+  Events::log_memprotect(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with protection modes %x\", p2i(addr), p2i(addr+size), prot);\n@@ -1616,1 +1616,1 @@\n-  Events::log(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with PROT_NONE\", p2i(addr), p2i(addr+size));\n+  Events::log_memprotect(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with PROT_NONE\", p2i(addr), p2i(addr+size));\n@@ -1686,1 +1686,1 @@\n-  Events::log(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with protection modes %x\", p2i(bottom), p2i(bottom+size), prot);\n+  Events::log_memprotect(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with protection modes %x\", p2i(bottom), p2i(bottom+size), prot);\n@@ -1787,9 +1787,0 @@\n-\/\/ Used to convert frequent JVM_Yield() to nops\n-bool os::dont_yield() {\n-  return DontYieldALot;\n-}\n-\n-void os::naked_yield() {\n-  sched_yield();\n-}\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3554,1 +3554,1 @@\n-  Events::log(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with protection modes %x\", p2i(bottom), p2i(bottom+size), prot);\n+  Events::log_memprotect(nullptr, \"Protecting memory [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] with protection modes %x\", p2i(bottom), p2i(bottom+size), prot);\n@@ -4245,19 +4245,0 @@\n-\/\/ Used to convert frequent JVM_Yield() to nops\n-bool os::dont_yield() {\n-  return DontYieldALot;\n-}\n-\n-\/\/ Linux CFS scheduler (since 2.6.23) does not guarantee sched_yield(2) will\n-\/\/ actually give up the CPU. Since skip buddy (v2.6.28):\n-\/\/\n-\/\/ * Sets the yielding task as skip buddy for current CPU's run queue.\n-\/\/ * Picks next from run queue, if empty, picks a skip buddy (can be the yielding task).\n-\/\/ * Clears skip buddies for this run queue (yielding task no longer a skip buddy).\n-\/\/\n-\/\/ An alternative is calling os::naked_short_nanosleep with a small number to avoid\n-\/\/ getting re-scheduled immediately.\n-\/\/\n-void os::naked_yield() {\n-  sched_yield();\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+  #elif defined(ARM32)\n+  #define SYS_membarrier 389\n","filename":"src\/hotspot\/os\/linux\/systemMemoryBarrier_linux.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -843,0 +843,8 @@\n+bool os::dont_yield() {\n+  return DontYieldALot;\n+}\n+\n+void os::naked_yield() {\n+  sched_yield();\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1453,1 +1453,1 @@\n-  Events::log(Thread::current(), \"flushing nmethod \" INTPTR_FORMAT, p2i(this));\n+  Events::log_nmethod_flush(Thread::current(), \"flushing %s nmethod \" INTPTR_FORMAT, is_osr_method() ? \"osr\" : \"\", p2i(this));\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -279,0 +279,3 @@\n+  MinOldSize = MIN3(MaxOldSize,\n+                    InitialHeapSize - initial_young_size,\n+                    MinHeapSize - MinNewSize);\n@@ -290,1 +293,0 @@\n-    MinOldSize = GenAlignment;\n@@ -292,1 +294,1 @@\n-    \/\/ MaxOldSize has already been made consistent above.\n+    \/\/ MaxOldSize and MinOldSize have already been made consistent above.\n@@ -307,0 +309,3 @@\n+    } else if (initial_old_size < MinOldSize) {\n+      log_warning(gc, ergo)(\"Inconsistency between initial old size and minimum old size\");\n+      MinOldSize = initial_old_size;\n@@ -308,2 +313,0 @@\n-\n-    MinOldSize = MIN2(initial_old_size, MinHeapSize - MinNewSize);\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -136,0 +136,4 @@\n+inline bool operator<=(zoffset_end first, zoffset second) {\n+  return untype(first) <= untype(second);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zAddress.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-  zoffset _start;\n-  zoffset _end;\n-  bool    _committed;\n+  zoffset     _start;\n+  zoffset_end _end;\n+  bool        _committed;\n@@ -44,1 +44,1 @@\n-  zoffset end() const;\n+  zoffset_end end() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zPhysicalMemory.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    _end(zoffset(UINTPTR_MAX)),\n+    _end(zoffset_end(UINTPTR_MAX)),\n@@ -39,1 +39,1 @@\n-    _end(start + size),\n+    _end(to_zoffset_end(start, size)),\n@@ -46,1 +46,1 @@\n-inline zoffset ZPhysicalMemorySegment::end() const {\n+inline zoffset_end ZPhysicalMemorySegment::end() const {\n","filename":"src\/hotspot\/share\/gc\/z\/zPhysicalMemory.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+#include \"utilities\/events.hpp\"\n@@ -398,0 +399,2 @@\n+  Events::log(thread, \"Before exit entered\");\n+\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -826,4 +826,4 @@\n-\/\/ vm_exit() when the program calls System.exit() to return a value or when\n-\/\/ there is a serious error in VM. The two shutdown paths are not exactly\n-\/\/ the same, but they share Shutdown.shutdown() at Java level and before_exit()\n-\/\/ and VM_Exit op at VM level.\n+\/\/ vm_exit(), when the program calls System.exit() to return a value, or when\n+\/\/ there is a serious error in VM.\n+\/\/ These two separate shutdown paths are not exactly the same, but they share\n+\/\/ Shutdown.shutdown() at Java level and before_exit() and VM_Exit op at VM level.\n@@ -1320,4 +1320,1 @@\n-  cl.do_thread(VMThread::vm_thread());\n-  Universe::heap()->gc_threads_do(&cl);\n-  cl.do_thread(WatcherThread::watcher_thread());\n-  cl.do_thread(AsyncLogWriter::instance());\n+  non_java_threads_do(&cl);\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+StringEventLog* Events::_memprotect_messages = nullptr;\n+StringEventLog* Events::_nmethod_flush_messages = nullptr;\n@@ -98,0 +100,2 @@\n+    _nmethod_flush_messages = new StringEventLog(\"Nmethod flushes\", \"nmethodflushes\");\n+    _memprotect_messages = new StringEventLog(\"Memory protections\", \"memprotects\");\n","filename":"src\/hotspot\/share\/utilities\/events.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -223,0 +223,6 @@\n+  \/\/ A log for memory protection related messages\n+  static StringEventLog* _memprotect_messages;\n+\n+  \/\/ A log for nmethod flush operations\n+  static StringEventLog* _nmethod_flush_messages;\n+\n@@ -262,0 +268,4 @@\n+  static void log_memprotect(Thread* thread, const char* format, ...) ATTRIBUTE_PRINTF(2, 3);\n+\n+  static void log_nmethod_flush(Thread* thread, const char* format, ...) ATTRIBUTE_PRINTF(2, 3);\n+\n@@ -293,0 +303,18 @@\n+inline void Events::log_memprotect(Thread* thread, const char* format, ...) {\n+  if (LogEvents && _memprotect_messages != nullptr) {\n+    va_list ap;\n+    va_start(ap, format);\n+    _memprotect_messages->logv(thread, format, ap);\n+    va_end(ap);\n+  }\n+}\n+\n+inline void Events::log_nmethod_flush(Thread* thread, const char* format, ...) {\n+  if (LogEvents && _nmethod_flush_messages != nullptr) {\n+    va_list ap;\n+    va_start(ap, format);\n+    _nmethod_flush_messages->logv(thread, format, ap);\n+    va_end(ap);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/events.hpp","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -498,0 +498,2 @@\n+    JLI_TraceLauncher(\"Attempt to get JRE path from launcher executable path\\n\");\n+\n@@ -505,12 +507,0 @@\n-        \/* ensure storage for path + \/jre + NULL *\/\n-        if ((JLI_StrLen(path) + 4  + 1) > (size_t) pathsize) {\n-            JLI_TraceLauncher(\"Insufficient space to store JRE path\\n\");\n-            return JNI_FALSE;\n-        }\n-        \/* Does the app ship a private JRE in <apphome>\/jre directory? *\/\n-        JLI_Snprintf(libjava, sizeof(libjava), \"%s\/jre\/lib\/\" JAVA_DLL, path);\n-        if (access(libjava, F_OK) == 0) {\n-            JLI_StrCat(path, \"\/jre\");\n-            JLI_TraceLauncher(\"JRE path is %s\\n\", path);\n-            return JNI_TRUE;\n-        }\n@@ -519,0 +509,2 @@\n+    JLI_TraceLauncher(\"Attempt to get JRE path from shared lib of the image\\n\");\n+\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,4 +52,0 @@\n-#ifdef USE_REGISTRY_LOOKUP\n-jboolean GetPublicJREHome(char *buf, jint bufsize);\n-#endif\n-\n@@ -303,0 +299,2 @@\n+    JLI_TraceLauncher(\"Attempt to get JRE path from launcher executable path\\n\");\n+\n@@ -310,12 +308,0 @@\n-        \/* ensure storage for path + \\jre + NULL *\/\n-        if ((JLI_StrLen(path) + 4 + 1) > (size_t) pathsize) {\n-            JLI_TraceLauncher(\"Insufficient space to store JRE path\\n\");\n-            return JNI_FALSE;\n-        }\n-        \/* Does this app ship a private JRE in <apphome>\\jre directory? *\/\n-        JLI_Snprintf(javadll, sizeof (javadll), \"%s\\\\jre\\\\bin\\\\\" JAVA_DLL, path);\n-        if (stat(javadll, &s) == 0) {\n-            JLI_StrCat(path, \"\\\\jre\");\n-            JLI_TraceLauncher(\"JRE path is %s\\n\", path);\n-            return JNI_TRUE;\n-        }\n@@ -324,0 +310,2 @@\n+    JLI_TraceLauncher(\"Attempt to get JRE path from shared lib of the image\\n\");\n+\n@@ -333,8 +321,0 @@\n-#ifdef USE_REGISTRY_LOOKUP\n-    \/* Lookup public JRE using Windows registry. *\/\n-    if (GetPublicJREHome(path, pathsize)) {\n-        JLI_TraceLauncher(\"JRE path is %s\\n\", path);\n-        return JNI_TRUE;\n-    }\n-#endif\n-\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":5,"deletions":25,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1128,1 +1128,4 @@\n-                            newIcon = getIcon(size, size);\n+                            newIcon2 = getIcon(size, size);\n+                            if (newIcon2 != null) {\n+                                newIcon = newIcon2;\n+                            }\n@@ -1195,0 +1198,3 @@\n+                    if (newIcon == null) {\n+                        return null;\n+                    }\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/shell\/Win32ShellFolder2.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -204,0 +204,18 @@\n+        libProvidersLookup.setPackageLookup(file -> {\n+            Path realPath = file.toRealPath();\n+\n+            try {\n+                \/\/ Try the real path first as it works better on newer Ubuntu versions\n+                return findProvidingPackages(realPath);\n+            } catch (IOException ex) {\n+                \/\/ Try the default path if differ\n+                if (!realPath.toString().equals(file.toString())) {\n+                    return findProvidingPackages(file);\n+                } else {\n+                    throw ex;\n+                }\n+            }\n+        });\n+    }\n+\n+    private static Stream<String> findProvidingPackages(Path file) throws IOException {\n@@ -246,18 +264,16 @@\n-        libProvidersLookup.setPackageLookup(file -> {\n-            Set<String> archPackages = new HashSet<>();\n-            Set<String> otherPackages = new HashSet<>();\n-\n-            Executor.of(TOOL_DPKG, \"-S\", file.toString())\n-                    .saveOutput(true).executeExpectSuccess()\n-                    .getOutput().forEach(line -> {\n-                        Matcher matcher = PACKAGE_NAME_REGEX.matcher(line);\n-                        if (matcher.find()) {\n-                            String name = matcher.group(1);\n-                            if (name.endsWith(\":\" + DEB_ARCH)) {\n-                                \/\/ Strip arch suffix\n-                                name = name.substring(0,\n-                                        name.length() - (DEB_ARCH.length() + 1));\n-                                archPackages.add(name);\n-                            } else {\n-                                otherPackages.add(name);\n-                            }\n+        Set<String> archPackages = new HashSet<>();\n+        Set<String> otherPackages = new HashSet<>();\n+\n+        Executor.of(TOOL_DPKG, \"-S\", file.toString())\n+                .saveOutput(true).executeExpectSuccess()\n+                .getOutput().forEach(line -> {\n+                    Matcher matcher = PACKAGE_NAME_REGEX.matcher(line);\n+                    if (matcher.find()) {\n+                        String name = matcher.group(1);\n+                        if (name.endsWith(\":\" + DEB_ARCH)) {\n+                            \/\/ Strip arch suffix\n+                            name = name.substring(0,\n+                                    name.length() - (DEB_ARCH.length() + 1));\n+                            archPackages.add(name);\n+                        } else {\n+                            otherPackages.add(name);\n@@ -265,1 +281,2 @@\n-                    });\n+                    }\n+                });\n@@ -267,5 +284,4 @@\n-            if (!archPackages.isEmpty()) {\n-                return archPackages.stream();\n-            }\n-            return otherPackages.stream();\n-        });\n+        if (!archPackages.isEmpty()) {\n+            return archPackages.stream();\n+        }\n+        return otherPackages.stream();\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxDebBundler.java","additions":41,"deletions":25,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -28,0 +28,18 @@\n+class ZAddressOffsetMaxSetter {\n+private:\n+  const size_t _old_max;\n+  const size_t _old_mask;\n+\n+public:\n+  ZAddressOffsetMaxSetter()\n+    : _old_max(ZAddressOffsetMax),\n+      _old_mask(ZAddressOffsetMask) {\n+    ZAddressOffsetMax = size_t(16) * G * 1024;\n+    ZAddressOffsetMask = ZAddressOffsetMax - 1;\n+  }\n+  ~ZAddressOffsetMaxSetter() {\n+    ZAddressOffsetMax = _old_max;\n+    ZAddressOffsetMask = _old_mask;\n+  }\n+};\n+\n@@ -29,0 +47,2 @@\n+  ZAddressOffsetMaxSetter setter;\n+\n@@ -55,0 +75,2 @@\n+  ZAddressOffsetMaxSetter setter;\n+\n@@ -117,0 +139,2 @@\n+  ZAddressOffsetMaxSetter setter;\n+\n@@ -133,0 +157,2 @@\n+  ZAddressOffsetMaxSetter setter;\n+\n@@ -161,0 +187,2 @@\n+  ZAddressOffsetMaxSetter setter;\n+\n@@ -175,0 +203,17 @@\n+\n+TEST(ZPhysicalMemoryTest, limits) {\n+  ZAddressOffsetMaxSetter setter;\n+\n+  const size_t HalfZAddressOffsetMax = ZAddressOffsetMax >> 1;\n+  ZPhysicalMemory pmem0;\n+  pmem0.add_segment(ZPhysicalMemorySegment(zoffset(0), HalfZAddressOffsetMax, true));\n+  pmem0.add_segment(ZPhysicalMemorySegment(zoffset(HalfZAddressOffsetMax), HalfZAddressOffsetMax, false));\n+  EXPECT_EQ(pmem0.nsegments(), 2);\n+  EXPECT_EQ(pmem0.size(), ZAddressOffsetMax);\n+\n+  ZPhysicalMemory pmem1 = pmem0.split_committed();\n+  EXPECT_EQ(pmem0.nsegments(), 1);\n+  EXPECT_EQ(pmem0.size(), HalfZAddressOffsetMax);\n+  EXPECT_EQ(pmem1.nsegments(), 1);\n+  EXPECT_EQ(pmem1.size(), HalfZAddressOffsetMax);\n+}\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zPhysicalMemory.cpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-serviceability\/dcmd\/gc\/RunFinalizationTest.java 8227120 linux-all,windows-x64,aix-ppc64\n+serviceability\/dcmd\/gc\/RunFinalizationTest.java 8227120 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary run CTW for all classes from jdk.crypto.ec module\n- *\n- * @library \/test\/lib \/ \/testlibrary\/ctw\/src\n- * @modules java.base\/jdk.internal.access\n- *          java.base\/jdk.internal.jimage\n- *          java.base\/jdk.internal.misc\n- *          java.base\/jdk.internal.reflect\n- * @modules jdk.crypto.ec\n- *\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run driver\/timeout=7200 sun.hotspot.tools.ctw.CtwRunner modules:jdk.crypto.ec\n- *\/\n","filename":"test\/hotspot\/jtreg\/applications\/ctw\/modules\/jdk_crypto_ec.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -69,1 +69,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -78,1 +78,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/TestAgeOutput.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+    OutputAnalyzer output = ProcessTools.executeTestJava(\n@@ -45,1 +45,0 @@\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAt.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+    OutputAnalyzer output = ProcessTools.executeTestJava(\n@@ -54,1 +54,0 @@\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtError.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,2 +63,1 @@\n-      ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(flags);\n-      OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+      OutputAnalyzer output = ProcessTools.executeTestJava(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtMultiple.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -50,1 +50,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/TestCardTablePageCommits.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -70,1 +70,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/TestNumWorkerOutput.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,3 +51,1 @@\n-        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(testArguments);\n-\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeTestJava(testArguments);\n","filename":"test\/hotspot\/jtreg\/gc\/TestPLABAdaptToMinTLABSize.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer analyzer = ProcessTools.executeLimitedTestJava(\n@@ -104,1 +104,0 @@\n-        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/TestSmallHeap.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+    OutputAnalyzer output = ProcessTools.executeTestJava(\n@@ -46,1 +46,0 @@\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifyDuringStartup.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,2 +60,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(vmOpts);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifySilently.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,2 +62,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(vmOpts);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifySubSet.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -84,0 +85,16 @@\n+\n+    static public OutputAnalyzer executeLimitedTestJava(List<String> arguments) throws Exception {\n+        return executeLimitedTestJava(arguments.toArray(String[]::new));\n+    }\n+\n+    static public OutputAnalyzer executeLimitedTestJava(String... arguments) throws Exception {\n+        return ProcessTools.executeLimitedTestJava(withDefaults(arguments));\n+    }\n+\n+    static public OutputAnalyzer executeTestJava(List<String> arguments) throws Exception {\n+        return executeTestJava(arguments.toArray(String[]::new));\n+    }\n+\n+    static public OutputAnalyzer executeTestJava(String... arguments) throws Exception {\n+        return ProcessTools.executeTestJava(withDefaults(arguments));\n+    }\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/GCArguments.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(\n+        OutputAnalyzer output = GCArguments.executeTestJava(\n@@ -71,2 +71,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestAggressiveHeap.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,3 +44,4 @@\n-            OutputAnalyzer output = runJava(\"-XX:CompressedClassSpaceSize=1g\",\n-                                            \"-XX:-UseCompressedClassPointers\",\n-                                            \"-version\");\n+            OutputAnalyzer output = GCArguments.executeTestJava(\n+                \"-XX:CompressedClassSpaceSize=1g\",\n+                \"-XX:-UseCompressedClassPointers\",\n+                \"-version\");\n@@ -52,5 +53,0 @@\n-\n-    private static OutputAnalyzer runJava(String ... args) throws Exception {\n-        ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(args);\n-        return new OutputAnalyzer(pb.start());\n-    }\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestCompressedClassFlags.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,8 +43,7 @@\n-        ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(\"-XX:-UseSerialGC\",\n-                                                                     \"-XX:-UseParallelGC\",\n-                                                                     \"-XX:-UseG1GC\",\n-                                                                     \"-XX:-UseZGC\",\n-                                                                     \"-XX:+UnlockExperimentalVMOptions\",\n-                                                                     \"-XX:-UseShenandoahGC\",\n-                                                                     \"-version\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = GCArguments.executeTestJava(\"-XX:-UseSerialGC\",\n+                                                            \"-XX:-UseParallelGC\",\n+                                                            \"-XX:-UseG1GC\",\n+                                                            \"-XX:-UseZGC\",\n+                                                            \"-XX:+UnlockExperimentalVMOptions\",\n+                                                            \"-XX:-UseShenandoahGC\",\n+                                                            \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestDisableDefaultGC.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -81,2 +81,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(vmOpts);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeTestJava(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1ConcMarkStepDurationMillis.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -72,2 +72,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(vmOpts);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeTestJava(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1ConcRefinementThreads.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,2 +56,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(flagList);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeTestJava(flagList);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1HeapRegionSize.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-        ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(\"-XX:+UseG1GC\", flag, \"-version\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = GCArguments.executeTestJava(\"-XX:+UseG1GC\", flag, \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1PercentageOptions.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,2 +51,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(flagList);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeTestJava(flagList);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1RemSetFlags.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(\n+    OutputAnalyzer output = GCArguments.executeTestJava(\n@@ -55,1 +55,0 @@\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestHeapFreeRatio.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(\n+    OutputAnalyzer output = GCArguments.executeTestJava(\n@@ -51,1 +51,0 @@\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -61,1 +60,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(\n+    OutputAnalyzer output = GCArguments.executeTestJava(\n@@ -68,1 +67,0 @@\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestInitialTenuringThreshold.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(gcflag,\n+    OutputAnalyzer output = GCArguments.executeTestJava(gcflag,\n@@ -120,1 +120,0 @@\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -211,2 +210,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(finalargs.toArray(String[]::new));\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeTestJava(finalargs.toArray(String[]::new));\n@@ -311,2 +309,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(flags);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeTestJava(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxHeapSizeTools.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -101,2 +101,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createLimitedTestJavaProcessBuilder(vmOptions);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n+        OutputAnalyzer analyzer = GCArguments.executeLimitedTestJava(vmOptions);\n@@ -126,2 +125,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createLimitedTestJavaProcessBuilder(vmOptions);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n+        OutputAnalyzer analyzer = GCArguments.executeLimitedTestJava(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxMinHeapFreeRatioFlags.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,2 +98,1 @@\n-    ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(finalargs);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeTestJava(finalargs);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxNewSize.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,2 +64,1 @@\n-    ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(args);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeLimitedTestJava(args);\n@@ -87,2 +86,1 @@\n-    ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(args);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeLimitedTestJava(args);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxRAMFlags.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,2 +105,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createLimitedTestJavaProcessBuilder(vmOptions);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n+        OutputAnalyzer analyzer = GCArguments.executeLimitedTestJava(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMinAndInitialSurvivorRatioFlags.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,2 +85,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createLimitedTestJavaProcessBuilder(vmOptions);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n+        OutputAnalyzer analyzer = GCArguments.executeLimitedTestJava(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewRatioFlag.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        OutputAnalyzer analyzer = startVM(options, newSize, maxNewSize, heapSize, maxHeapSize, expectedNewSize, expectedMaxNewSize);\n+        OutputAnalyzer analyzer = executeLimitedTestJava(options, newSize, maxNewSize, heapSize, maxHeapSize, expectedNewSize, expectedMaxNewSize);\n@@ -147,1 +147,1 @@\n-    private static OutputAnalyzer startVM(LinkedList<String> options,\n+    private static OutputAnalyzer executeLimitedTestJava(LinkedList<String> options,\n@@ -169,3 +169,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createLimitedTestJavaProcessBuilder(vmOptions);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n-        return analyzer;\n+        return GCArguments.executeLimitedTestJava(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewSizeFlags.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,8 +68,7 @@\n-    ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(\"-XX:+UseSerialGC\",\n-                                                                        \"-Xms96M\",\n-                                                                        \"-Xmx128M\",\n-                                                                        \"-XX:NewRatio=2\",\n-                                                                        \"-Xlog:gc+heap+ergo=debug\",\n-                                                                        \"-XX:NewSizeThreadIncrease=\"+expectedValue,\n-                                                                        GCTest.class.getName());\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeLimitedTestJava(\"-XX:+UseSerialGC\",\n+                                                               \"-Xms96M\",\n+                                                               \"-Xmx128M\",\n+                                                               \"-XX:NewRatio=2\",\n+                                                               \"-Xlog:gc+heap+ergo=debug\",\n+                                                               \"-XX:NewSizeThreadIncrease=\"+expectedValue,\n+                                                               GCTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewSizeThreadIncrease.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -164,2 +164,1 @@\n-    ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(vmOpts);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeLimitedTestJava(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestObjectTenuringFlags.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(\n+    OutputAnalyzer output = GCArguments.executeLimitedTestJava(\n@@ -62,1 +62,0 @@\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -97,1 +96,1 @@\n-      ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(\n+      OutputAnalyzer output = GCArguments.executeLimitedTestJava(\n@@ -102,1 +101,0 @@\n-      OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -127,2 +125,1 @@\n-    ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(flags);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeLimitedTestJava(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelGCThreads.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -80,3 +80,1 @@\n-        ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(result);\n-\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = GCArguments.executeLimitedTestJava(result);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelRefProc.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = GCArguments.executeLimitedTestJava(\n@@ -52,1 +52,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSelectDefaultGC.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    ProcessBuilder pb_enabled = GCArguments.createLimitedTestJavaProcessBuilder(\n+    OutputAnalyzer analyzer = GCArguments.executeLimitedTestJava(\n@@ -71,1 +71,0 @@\n-    OutputAnalyzer analyzer = new OutputAnalyzer(pb_enabled.start());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSmallInitialHeapWithLargePageAndNUMA.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -90,2 +90,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createLimitedTestJavaProcessBuilder(vmOptions);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n+        OutputAnalyzer analyzer = GCArguments.executeLimitedTestJava(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSurvivorRatioFlag.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -119,2 +119,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createLimitedTestJavaProcessBuilder(vmOptions);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n+        OutputAnalyzer analyzer = GCArguments.executeLimitedTestJava(vmOptions);\n@@ -154,2 +153,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createLimitedTestJavaProcessBuilder(vmOptions);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n+        OutputAnalyzer analyzer = GCArguments.executeLimitedTestJava(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestTargetSurvivorRatioFlag.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(\n+    OutputAnalyzer outputWithError = GCArguments.executeLimitedTestJava(\n@@ -47,1 +47,0 @@\n-    OutputAnalyzer outputWithError = new OutputAnalyzer(pb.start());\n@@ -53,1 +52,1 @@\n-    pb = GCArguments.createLimitedTestJavaProcessBuilder(\n+    outputWithError = GCArguments.executeLimitedTestJava(\n@@ -57,1 +56,0 @@\n-    outputWithError = new OutputAnalyzer(pb.start());\n@@ -64,1 +62,1 @@\n-    pb = GCArguments.createLimitedTestJavaProcessBuilder(\n+    OutputAnalyzer outputWithNoError = GCArguments.executeLimitedTestJava(\n@@ -68,1 +66,0 @@\n-    OutputAnalyzer outputWithNoError = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUnrecognizedVMOptionsHandling.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -96,2 +96,1 @@\n-    ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(finalargs);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeLimitedTestJava(finalargs);\n@@ -160,2 +159,1 @@\n-    ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(flags);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = GCArguments.executeLimitedTestJava(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsErgoTools.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,3 +62,2 @@\n-    String cmd = ProcessTools.getCommandLine(ProcessTools.createTestJavaProcessBuilder(args.toArray(String[]::new)));\n-    ProcessBuilder pb = new ProcessBuilder(\"sh\", \"-c\", ulimit_prefix + \";\" + cmd);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    String cmd = ProcessTools.getCommandLine(ProcessTools.createTestJavaProcessBuilder(args));\n+    OutputAnalyzer output = ProcessTools.executeProcess(\"sh\", \"-c\", ulimit_prefix + \";\" + cmd);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsFlagsWithUlimit.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        ProcessBuilder pb = GCArguments.createTestJavaProcessBuilder(\n+        OutputAnalyzer output = GCArguments.executeTestJava(\n@@ -46,1 +46,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseNUMAInterleaving.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -102,2 +102,1 @@\n-        ProcessBuilder pb = GCArguments.createLimitedTestJavaProcessBuilder(vmOpts);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer analyzer = GCArguments.executeLimitedTestJava(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestVerifyBeforeAndAfterGCFlags.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+    return ProcessTools.executeLimitedTestJava(\n@@ -60,1 +60,0 @@\n-    return new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/class_unloading\/TestG1ClassUnloadingHWM.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(args);\n-    OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer out = ProcessTools.executeLimitedTestJava(args);\n@@ -47,2 +46,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(args);\n-    OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer out = ProcessTools.executeLimitedTestJava(args);\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestDieDefault.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,2 +41,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(args);\n-    OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer out = ProcessTools.executeLimitedTestJava(args);\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestDieWithHeapDump.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,2 +42,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(args);\n-    OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer out = ProcessTools.executeLimitedTestJava(args);\n@@ -50,2 +49,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(args);\n-    OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer out = ProcessTools.executeLimitedTestJava(args);\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestDieWithOnError.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-    ProcessBuilder pb_enabled = ProcessTools.createLimitedTestJavaProcessBuilder(baseArgs);\n-    verifyDynamicNumberOfGCThreads(new OutputAnalyzer(pb_enabled.start()));\n+    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(baseArgs);\n+    verifyDynamicNumberOfGCThreads(output);\n@@ -79,2 +79,2 @@\n-    pb_enabled = ProcessTools.createLimitedTestJavaProcessBuilder(parRefArgs);\n-    verifyDynamicNumberOfGCThreads(new OutputAnalyzer(pb_enabled.start()));\n+    output = ProcessTools.executeLimitedTestJava(parRefArgs);\n+    verifyDynamicNumberOfGCThreads(output);\n","filename":"test\/hotspot\/jtreg\/gc\/ergonomics\/TestDynamicNumberOfGCThreads.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    ProcessBuilder pb_enabled = ProcessTools.createLimitedTestJavaProcessBuilder(\n+    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -80,1 +80,1 @@\n-    verifyDynamicNumberOfGCThreads(new OutputAnalyzer(pb_enabled.start()), threadName);\n+    verifyDynamicNumberOfGCThreads(output, threadName);\n","filename":"test\/hotspot\/jtreg\/gc\/ergonomics\/TestInitialGCThreadLogging.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(testArguments);\n+    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(testArguments);\n@@ -54,1 +54,0 @@\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/Test2GbHeap.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -93,2 +93,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegions.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -135,1 +135,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsClearMarkBits.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -68,1 +68,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsLog.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -105,2 +105,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsWithRefs.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,9 +46,9 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                                             \"-Xmx32M\",\n-                                                                             \"-Xmn16M\",\n-                                                                             \"-XX:+G1EvacuationFailureALot\",\n-                                                                             \"-XX:G1EvacuationFailureALotCount=100\",\n-                                                                             \"-XX:G1EvacuationFailureALotInterval=1\",\n-                                                                             \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                                             \"-Xlog:gc\",\n-                                                                             GCTestWithEvacuationFailure.class.getName());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                    \"-Xmx32M\",\n+                                                                    \"-Xmn16M\",\n+                                                                    \"-XX:+G1EvacuationFailureALot\",\n+                                                                    \"-XX:G1EvacuationFailureALotCount=100\",\n+                                                                    \"-XX:G1EvacuationFailureALotInterval=1\",\n+                                                                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                    \"-Xlog:gc\",\n+                                                                    GCTestWithEvacuationFailure.class.getName());\n@@ -56,1 +56,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEvacuationFailure.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -57,2 +57,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(arguments);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(arguments);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestG1SkipCompaction.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,10 +44,8 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                                         \"-Xms128M\",\n-                                                                         \"-Xmx128M\",\n-                                                                         \"-Xmn16M\",\n-                                                                         \"-XX:G1HeapRegionSize=1M\",\n-                                                                         \"-Xlog:gc+phases=trace,gc+humongous=trace\",\n-                                                                         \"-XX:+UnlockExperimentalVMOptions\",\n-                                                                         GCWithHumongousObjectTest.class.getName());\n-\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                \"-Xms128M\",\n+                                                                \"-Xmx128M\",\n+                                                                \"-Xmn16M\",\n+                                                                \"-XX:G1HeapRegionSize=1M\",\n+                                                                \"-Xlog:gc+phases=trace,gc+humongous=trace\",\n+                                                                \"-XX:+UnlockExperimentalVMOptions\",\n+                                                                GCWithHumongousObjectTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestG1TraceEagerReclaimHumongousObjects.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -220,3 +220,3 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                                             \"-Xmx10M\",\n-                                                                             GCTest.class.getName());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                    \"-Xmx10M\",\n+                                                                    GCTest.class.getName());\n@@ -224,1 +224,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -228,4 +227,4 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                              \"-Xmx10M\",\n-                                                              \"-Xlog:gc+phases=debug\",\n-                                                              GCTest.class.getName());\n+        output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                     \"-Xmx10M\",\n+                                                     \"-Xlog:gc+phases=debug\",\n+                                                     GCTest.class.getName());\n@@ -233,1 +232,0 @@\n-        output = new OutputAnalyzer(pb.start());\n@@ -236,4 +234,4 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                              \"-Xmx10M\",\n-                                                              \"-Xlog:gc+phases=trace\",\n-                                                              GCTest.class.getName());\n+        output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                     \"-Xmx10M\",\n+                                                     \"-Xlog:gc+phases=trace\",\n+                                                     GCTest.class.getName());\n@@ -241,1 +239,0 @@\n-        output = new OutputAnalyzer(pb.start());\n@@ -255,5 +252,4 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                                             \"-Xmx10M\",\n-                                                                             \"-Xlog:gc+refine+stats=debug\",\n-                                                                             GCTest.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                    \"-Xmx10M\",\n+                                                                    \"-Xlog:gc+refine+stats=debug\",\n+                                                                    GCTest.class.getName());\n@@ -271,11 +267,10 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                                             \"-Xmx32M\",\n-                                                                             \"-Xmn16M\",\n-                                                                             \"-XX:+G1EvacuationFailureALot\",\n-                                                                             \"-XX:G1EvacuationFailureALotCount=100\",\n-                                                                             \"-XX:G1EvacuationFailureALotInterval=1\",\n-                                                                             \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                                             \"-Xlog:gc+phases=debug\",\n-                                                                             GCTestWithEvacuationFailure.class.getName());\n-\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                    \"-Xmx32M\",\n+                                                                    \"-Xmn16M\",\n+                                                                    \"-XX:+G1EvacuationFailureALot\",\n+                                                                    \"-XX:G1EvacuationFailureALotCount=100\",\n+                                                                    \"-XX:G1EvacuationFailureALotInterval=1\",\n+                                                                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                    \"-Xlog:gc+phases=debug\",\n+                                                                    GCTestWithEvacuationFailure.class.getName());\n+\n@@ -285,7 +280,7 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                              \"-Xmx32M\",\n-                                                              \"-Xmn16M\",\n-                                                              \"-Xms32M\",\n-                                                              \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                              \"-Xlog:gc+phases=trace\",\n-                                                              GCTestWithEvacuationFailure.class.getName());\n+        output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                     \"-Xmx32M\",\n+                                                     \"-Xmn16M\",\n+                                                     \"-Xms32M\",\n+                                                     \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                     \"-Xlog:gc+phases=trace\",\n+                                                     GCTestWithEvacuationFailure.class.getName());\n@@ -293,1 +288,0 @@\n-        output = new OutputAnalyzer(pb.start());\n@@ -304,9 +298,8 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                                             \"-Xmx10M\",\n-                                                                             \"-Xbootclasspath\/a:.\",\n-                                                                             \"-Xlog:gc*=debug\",\n-                                                                             \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                                             \"-XX:+WhiteBoxAPI\",\n-                                                                             GCTestWithConcurrentStart.class.getName());\n-\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                    \"-Xmx10M\",\n+                                                                    \"-Xbootclasspath\/a:.\",\n+                                                                    \"-Xlog:gc*=debug\",\n+                                                                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                    \"-XX:+WhiteBoxAPI\",\n+                                                                    GCTestWithConcurrentStart.class.getName());\n+\n@@ -318,9 +311,8 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                                             \"-Xmx10M\",\n-                                                                             \"-Xbootclasspath\/a:.\",\n-                                                                             \"-Xlog:gc+ergo+heap=debug\",\n-                                                                             \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                                             \"-XX:+WhiteBoxAPI\",\n-                                                                             GCTest.class.getName());\n-\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                    \"-Xmx10M\",\n+                                                                    \"-Xbootclasspath\/a:.\",\n+                                                                    \"-Xlog:gc+ergo+heap=debug\",\n+                                                                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                    \"-XX:+WhiteBoxAPI\",\n+                                                                    GCTest.class.getName());\n+\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestGCLogMessages.java","additions":48,"deletions":56,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @requires vm.flagless\n@@ -48,1 +49,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -57,1 +58,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousAllocConcurrentStart.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -58,1 +58,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousAllocNearlyFullRegion.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,2 +109,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(finalargs);\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(finalargs);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousCodeCacheRoots.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -73,1 +73,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousConcurrentStartUndo.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        ProcessBuilder pb;\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(getOpts(heapsize, true));\n@@ -125,4 +125,0 @@\n-        \/\/ Test with large page enabled.\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(getOpts(heapsize, true));\n-\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -140,1 +136,1 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(getOpts(heapsize, false));\n+        output = ProcessTools.executeLimitedTestJava(getOpts(heapsize, false));\n@@ -142,1 +138,0 @@\n-        output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -88,1 +88,0 @@\n-        ProcessBuilder pb;\n@@ -90,6 +89,6 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                              \"-XX:G1HeapRegionSize=\" + regionSize,\n-                                                              \"-Xmx128m\",\n-                                                              \"-Xlog:gc+init,pagesize,gc+heap+coops=debug\",\n-                                                              \"-XX:+UseLargePages\",\n-                                                              \"-version\");\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                    \"-XX:G1HeapRegionSize=\" + regionSize,\n+                                                                    \"-Xmx128m\",\n+                                                                    \"-Xlog:gc+init,pagesize,gc+heap+coops=debug\",\n+                                                                    \"-XX:+UseLargePages\",\n+                                                                    \"-version\");\n@@ -97,1 +96,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -103,6 +101,6 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                              \"-XX:G1HeapRegionSize=\" + regionSize,\n-                                                              \"-Xmx128m\",\n-                                                              \"-Xlog:gc+init,pagesize,gc+heap+coops=debug\",\n-                                                              \"-XX:-UseLargePages\",\n-                                                              \"-version\");\n+        output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                     \"-XX:G1HeapRegionSize=\" + regionSize,\n+                                                     \"-Xmx128m\",\n+                                                     \"-Xlog:gc+init,pagesize,gc+heap+coops=debug\",\n+                                                     \"-XX:-UseLargePages\",\n+                                                     \"-version\");\n@@ -110,1 +108,0 @@\n-        output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForHeap.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -53,3 +53,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(testArguments);\n-\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(testArguments);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestMarkStackSizes.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,3 +112,1 @@\n-        ProcessBuilder procBuilder =  ProcessTools.createLimitedTestJavaProcessBuilder(basicOpts);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n-        return analyzer;\n+        return ProcessTools.executeLimitedTestJava(basicOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestMixedGCLiveThreshold.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+    return ProcessTools.executeLimitedTestJava(\n@@ -53,1 +53,0 @@\n-    return new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestOneEdenRegionAfterGC.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,2 +62,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(arguments);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(arguments);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPLABOutput.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,2 +65,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(testArguments);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(testArguments);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPLABSizeBounds.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,5 +43,5 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                                             \"-XX:G1PeriodicGCInterval=0\",\n-                                                                             \"-Xlog:gc+init,gc+periodic=debug\",\n-                                                                             \"-Xmx10M\",\n-                                                                             GCTest.class.getName());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                    \"-XX:G1PeriodicGCInterval=0\",\n+                                                                    \"-Xlog:gc+init,gc+periodic=debug\",\n+                                                                    \"-Xmx10M\",\n+                                                                    GCTest.class.getName());\n@@ -49,1 +49,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -54,5 +53,5 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                              \"-XX:G1PeriodicGCInterval=100\",\n-                                                              \"-Xlog:gc+init,gc+periodic=debug\",\n-                                                              \"-Xmx10M\",\n-                                                              GCTest.class.getName());\n+        output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                     \"-XX:G1PeriodicGCInterval=100\",\n+                                                     \"-Xlog:gc+init,gc+periodic=debug\",\n+                                                     \"-Xmx10M\",\n+                                                     GCTest.class.getName());\n@@ -60,1 +59,0 @@\n-        output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPeriodicLogMessages.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -72,2 +72,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(finalargs);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(finalargs);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPrintRegionRememberedSetInfo.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,8 +47,6 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UseG1GC\",\n-                                                                         \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                                         \"-Xlog:gc+remset+exit=trace\",\n-                                                                         \"-XX:G1ConcRefinementThreads=\" + refinementThreads,\n-                                                                         \"-XX:ParallelGCThreads=\" + workerThreads,\n-                                                                         \"-version\");\n-\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UseG1GC\",\n+                                                                \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                \"-Xlog:gc+remset+exit=trace\",\n+                                                                \"-XX:G1ConcRefinementThreads=\" + refinementThreads,\n+                                                                \"-XX:ParallelGCThreads=\" + workerThreads,\n+                                                                \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestRemsetLoggingThreads.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -80,2 +80,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(finalargs);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(finalargs);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestRemsetLoggingTools.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,2 +53,0 @@\n-        ProcessBuilder pb;\n-\n@@ -62,2 +60,2 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(dump_args);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(dump_args);\n+\n@@ -75,2 +73,1 @@\n-            pb = ProcessTools.createLimitedTestJavaProcessBuilder(load_args.toArray(new String[0]));\n-            output = new OutputAnalyzer(pb.start());\n+            output = ProcessTools.executeLimitedTestJava(load_args.toArray(new String[0]));\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSharedArchiveWithPreTouch.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(opts);\n+        OutputAnalyzer output = ProcessTools.executeTestJava(opts);\n@@ -93,1 +93,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -77,1 +77,0 @@\n-        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkDefragmentedHeap.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,11 +43,10 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xbootclasspath\/a:.\",\n-                                                                             \"-XX:+UseG1GC\",\n-                                                                             \"-XX:+UnlockExperimentalVMOptions\",\n-                                                                             \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                                             \"-XX:+WhiteBoxAPI\",\n-                                                                             \"-XX:G1MixedGCLiveThresholdPercent=20\",\n-                                                                             \"-Xlog:gc+marking=debug,gc+phases=debug,gc+remset+tracking=trace\",\n-                                                                             \"-Xms10M\",\n-                                                                             \"-Xmx10M\",\n-                                                                             GCTest.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-Xbootclasspath\/a:.\",\n+                                                                    \"-XX:+UseG1GC\",\n+                                                                    \"-XX:+UnlockExperimentalVMOptions\",\n+                                                                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                    \"-XX:+WhiteBoxAPI\",\n+                                                                    \"-XX:G1MixedGCLiveThresholdPercent=20\",\n+                                                                    \"-Xlog:gc+marking=debug,gc+phases=debug,gc+remset+tracking=trace\",\n+                                                                    \"-Xms10M\",\n+                                                                    \"-Xmx10M\",\n+                                                                    GCTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSkipRebuildRemsetPhase.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -181,4 +181,1 @@\n-        ProcessBuilder procBuilder =  ProcessTools.createLimitedTestJavaProcessBuilder(basicOpts);\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n-\n-        return analyzer;\n+        return ProcessTools.executeLimitedTestJava(basicOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestVerifyGCType.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    public static void main(String[] args) throws IOException {\n+    public static void main(String[] args) throws Exception {\n@@ -50,1 +50,1 @@\n-    public static void generateClassLoader(long regionSize, Path wrkDir) throws IOException {\n+    public static void generateClassLoader(long regionSize, Path wrkDir) throws Exception {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/ClassLoaderGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,2 +78,1 @@\n-     * @throws IOException\n-     * @throws ClassNotFoundException\n+     * @throws Exception\n@@ -83,1 +82,1 @@\n-            throws IOException, ClassNotFoundException {\n+            throws Exception {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/G1SampleClass.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -143,3 +143,1 @@\n-    public static void main(String[] args) throws ClassNotFoundException, InstantiationException,\n-            IllegalAccessException, IOException, NoSuchMethodException, InvocationTargetException {\n-\n+    public static void main(String[] args) throws Exception {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/TestHumongousClassLoader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,2 +85,1 @@\n-    public static void main(String[] args) throws ClassNotFoundException, InstantiationException,\n-            IllegalAccessException, IOException {\n+    public static void main(String[] args) throws Exception {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/TestHumongousNonArrayAllocation.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -93,2 +93,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(testOpts);\n-        return new OutputAnalyzer(pb.start());\n+        return ProcessTools.executeLimitedTestJava(testOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/mixedgc\/TestLogging.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-        ProcessBuilder pb_enabled = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -198,1 +198,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb_enabled.start());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/numa\/TestG1NUMATouchRegions.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,2 +45,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+PrintGC\", DoGC.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+PrintGC\", DoGC.class.getName());\n@@ -55,2 +54,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+PrintGCDetails\", DoGC.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+PrintGCDetails\", DoGC.class.getName());\n@@ -66,2 +64,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xloggc:\" + fileName, DoGC.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-Xloggc:\" + fileName, DoGC.class.getName());\n@@ -83,2 +80,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+PrintGCDetails\", \"-Xloggc:\" + fileName, DoGC.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+PrintGCDetails\", \"-Xloggc:\" + fileName, DoGC.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestDeprecatedPrintFlags.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -76,3 +76,3 @@\n-    ProcessBuilder pb_default =\n-      ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\", \"-XX:+\" + gcFlag, \"-Xlog:gc\", \"-Xmx10M\", GCTest.class.getName());\n-    verifyContainsGCIDs(new OutputAnalyzer(pb_default.start()));\n+    OutputAnalyzer output =\n+      ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\", \"-XX:+\" + gcFlag, \"-Xlog:gc\", \"-Xmx10M\", GCTest.class.getName());\n+    verifyContainsGCIDs(output);\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestGCId.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -97,10 +97,0 @@\n-    ProcessBuilder pb =\n-      ProcessTools.createTestJavaProcessBuilder(\n-          \"-Xlog:gc*\",\n-          \"-Xbootclasspath\/a:.\",\n-          \"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-XX:+WhiteBoxAPI\",\n-          \"-Xmx1000M\",\n-          \"-Xms1000M\",\n-          testSrc, StressMetaSpace.class.getName());\n-\n@@ -109,1 +99,9 @@\n-      output = new OutputAnalyzer(pb.start());\n+      output = ProcessTools.executeTestJava(\n+            \"-Xlog:gc*\",\n+            \"-Xbootclasspath\/a:.\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+WhiteBoxAPI\",\n+            \"-Xmx1000M\",\n+            \"-Xms1000M\",\n+            testSrc, StressMetaSpace.class.getName());\n+\n@@ -114,1 +112,3 @@\n-      output.reportDiagnosticSummary();\n+      if (output != null) {\n+          output.reportDiagnosticSummary();\n+      }\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestMetaSpaceLog.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -70,5 +70,4 @@\n-        ProcessBuilder pb_enabled = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:gc+ref+phases=debug\",\n-                                                                                     \"-XX:+UseG1GC\",\n-                                                                                     \"-Xmx32M\",\n-                                                                                     GCTest.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb_enabled.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-Xlog:gc+ref+phases=debug\",\n+                                                                    \"-XX:+UseG1GC\",\n+                                                                    \"-Xmx32M\",\n+                                                                    GCTest.class.getName());\n@@ -98,8 +97,7 @@\n-        ProcessBuilder pb_enabled = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:gc+phases+ref=debug\",\n-                                                                                     \"-XX:+UseG1GC\",\n-                                                                                     \"-Xmx32M\",\n-                                                                                     \"-XX:\" + (parallelRefProcEnabled ? \"+\" : \"-\") + \"ParallelRefProcEnabled\",\n-                                                                                     \"-XX:-UseDynamicNumberOfGCThreads\",\n-                                                                                     \"-XX:ParallelGCThreads=2\",\n-                                                                                     GCTest.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb_enabled.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-Xlog:gc+phases+ref=debug\",\n+                                                                    \"-XX:+UseG1GC\",\n+                                                                    \"-Xmx32M\",\n+                                                                    \"-XX:\" + (parallelRefProcEnabled ? \"+\" : \"-\") + \"ParallelRefProcEnabled\",\n+                                                                    \"-XX:-UseDynamicNumberOfGCThreads\",\n+                                                                    \"-XX:ParallelGCThreads=2\",\n+                                                                    GCTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestPrintReferences.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -80,3 +80,2 @@\n-        Process p = pb.start();\n-        p.waitFor();\n-        int exitValue = p.exitValue();\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        int exitValue = output.getExitValue();\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/CompressedClassSpaceSizeInJmapHeap.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+    return ProcessTools.executeLimitedTestJava(\n@@ -93,1 +93,0 @@\n-    return new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspaceSizeFlags.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -122,2 +122,1 @@\n-    final ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(jvmArgs);\n-    final OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    final OutputAnalyzer output = ProcessTools.executeLimitedTestJava(jvmArgs);\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestSizeTransitions.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,2 +44,1 @@\n-    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xmx128m\", \"-Xmn100m\", \"-XX:+UseSerialGC\", \"-Xlog:gc\", HeapFiller.class.getName());\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-Xmx128m\", \"-Xmn100m\", \"-XX:+UseSerialGC\", \"-Xlog:gc\", HeapFiller.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/serial\/HeapChangeLogging.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-                    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xms128m\",\n+                    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-Xms128m\",\n@@ -78,1 +78,0 @@\n-                    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestEvilSyncBug.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -143,0 +143,1 @@\n+import jdk.test.lib.process.ProcessTools;\n@@ -157,5 +158,1 @@\n-            ProcessBuilder pb = new ProcessBuilder(jcmd.getCommand());\n-            Process jcmdProc = pb.start();\n-\n-            OutputAnalyzer output = new OutputAnalyzer(jcmdProc);\n-            jcmdProc.waitFor();\n+            OutputAnalyzer output = ProcessTools.executeProcess(jcmd.getCommand());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestJcmdHeapDump.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(cmds);\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(cmds);\n@@ -47,1 +47,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestObjItrWithHeapDump.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(cmds);\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(cmds);\n@@ -48,1 +48,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestPeriodicGC.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,3 +103,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(pbArgs.toArray(new String[0]));\n-\n-        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer analyzer = ProcessTools.executeLimitedTestJava(pbArgs.toArray(new String[0]));\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestClassLoaderLeak.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer analyzer = ProcessTools.executeLimitedTestJava(\n@@ -73,1 +73,0 @@\n-            OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestThreadFailure.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -56,1 +56,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -60,1 +59,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -67,1 +66,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -71,1 +69,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -78,1 +76,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -86,1 +83,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -93,1 +90,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -97,1 +93,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -104,1 +100,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -108,1 +103,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -115,1 +110,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -119,1 +113,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -126,1 +120,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestArgumentRanges.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -46,2 +46,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(cmds);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(cmds);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestClassUnloadingArguments.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -70,1 +70,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -80,1 +79,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -88,1 +87,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -98,1 +96,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -106,1 +104,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -116,1 +113,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -124,1 +121,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -134,1 +130,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -143,1 +139,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestExplicitGC.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -73,1 +73,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestExplicitGCNoConcurrent.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -63,1 +63,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -76,1 +75,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -84,1 +83,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -97,1 +95,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -105,1 +103,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestHeuristicsUnlock.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -46,1 +46,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -54,1 +53,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -60,1 +59,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -65,1 +63,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -71,1 +69,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestHumongousThresholdArgs.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -47,2 +47,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(cmds);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(cmds);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestLoopMiningArguments.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -64,1 +64,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -77,1 +76,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -85,1 +84,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -98,1 +96,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -106,1 +104,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestModeUnlock.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -53,1 +53,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -58,1 +57,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -63,1 +62,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -68,1 +66,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -74,1 +72,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -80,1 +77,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -86,1 +83,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -91,1 +87,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -97,1 +93,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -103,1 +98,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -109,1 +104,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -114,1 +108,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -120,1 +114,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -125,1 +118,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -131,1 +124,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -137,1 +129,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -143,1 +135,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -148,1 +139,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -154,1 +145,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -163,1 +153,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -169,1 +159,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -175,1 +164,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -182,1 +171,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -187,1 +175,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -193,1 +181,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -199,1 +186,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -205,1 +192,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -214,1 +200,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -220,1 +206,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -226,1 +211,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -233,1 +218,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestRegionSizeArgs.java","additions":16,"deletions":32,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -92,2 +92,1 @@\n-                    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(conf.toArray(new String[0]));\n-                    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+                    OutputAnalyzer output = ProcessTools.executeLimitedTestJava(conf.toArray(new String[0]));\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestSelectiveBarrierFlags.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -47,1 +47,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -52,1 +51,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -58,1 +57,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -63,1 +61,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockExperimentalVMOptions\",\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\"-XX:+UnlockExperimentalVMOptions\",\n@@ -69,1 +67,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestSoftMaxHeapSize.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -56,1 +56,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestThreadCounts.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -49,1 +49,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -56,1 +55,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -64,1 +63,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestThreadCountsOverride.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -75,1 +75,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -84,1 +83,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -93,1 +92,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestWrongBarrierDisable.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -67,1 +67,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n@@ -76,1 +75,1 @@\n-            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n@@ -85,1 +84,0 @@\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestWrongBarrierEnable.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(baseargs);\n-        verifySymbolMemoryUsageNotTooHigh(new OutputAnalyzer(pb.start()));\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(baseargs);\n+        verifySymbolMemoryUsageNotTooHigh(output);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestReclaimStringsLeaksMemory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -104,2 +104,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(options);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(options);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressG1Humongous.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,2 +62,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(options);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeLimitedTestJava(options);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressG1Uncommit.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -302,2 +302,1 @@\n-        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(args);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeTestJava(args);\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTools.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.test.lib.process.ProcessTools;\n@@ -92,1 +93,1 @@\n-    public static void compileClass(String className, Path root, String source) throws IOException {\n+    public static void compileClass(String className, Path root, String source) throws Exception {\n@@ -103,2 +104,1 @@\n-        ProcessBuilder pb = new ProcessBuilder(jar.getCommand());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        OutputAnalyzer output = ProcessTools.executeProcess(jar.getCommand());\n@@ -202,2 +202,1 @@\n-     * @throws IOException\n-     * @throws ClassNotFoundException\n+     * @throws Exception\n@@ -207,1 +206,1 @@\n-            throws IOException, ClassNotFoundException {\n+            throws Exception {\n@@ -246,1 +245,1 @@\n-     * @throws IOException if cannot write or read to workDir\n+     * @throws Exception if cannot write or read to workDir\n@@ -250,1 +249,1 @@\n-                                                    String prefix) throws IOException {\n+                                                    String prefix) throws Exception {\n","filename":"test\/hotspot\/jtreg\/gc\/testlibrary\/Helpers.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+        OutputAnalyzer output = ProcessTools.executeTestJava(\n@@ -54,1 +54,0 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/whitebox\/TestWBGC.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,11 +44,11 @@\n-        ProcessTools.executeProcess(ProcessTools.createLimitedTestJavaProcessBuilder(\n-                \"-XX:+UseZGC\",\n-                \"-XX:-ZGenerational\",\n-                \"-Xlog:gc*\",\n-                \"-Xms32M\",\n-                \"-Xmx32M\",\n-                \"-XX:AllocateHeapAt=\" + directory,\n-                \"-version\"))\n-            .shouldContain(exists ? heapBackingFile : failedToCreateFile)\n-            .shouldNotContain(exists ? failedToCreateFile : heapBackingFile)\n-            .shouldHaveExitValue(exists ? 0 : 1);\n+        ProcessTools.executeLimitedTestJava(\n+            \"-XX:+UseZGC\",\n+            \"-XX:-ZGenerational\",\n+            \"-Xlog:gc*\",\n+            \"-Xms32M\",\n+            \"-Xmx32M\",\n+            \"-XX:AllocateHeapAt=\" + directory,\n+            \"-version\")\n+                .shouldContain(exists ? heapBackingFile : failedToCreateFile)\n+                .shouldNotContain(exists ? failedToCreateFile : heapBackingFile)\n+                .shouldHaveExitValue(exists ? 0 : 1);\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestAllocateHeapAt.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -71,11 +71,11 @@\n-        ProcessTools.executeProcess(ProcessTools.createLimitedTestJavaProcessBuilder(\n-                                    \"-XX:+UseZGC\",\n-                                    \"-XX:-ZGenerational\",\n-                                    \"-Xms128M\",\n-                                    \"-Xmx128M\",\n-                                    \"-Xlog:gc,gc+init,gc+heap=debug\",\n-                                    Test.class.getName()))\n-                    .outputTo(System.out)\n-                    .errorTo(System.out)\n-                    .shouldContain(\"Page Cache Flushed:\")\n-                    .shouldHaveExitValue(0);\n+        ProcessTools.executeLimitedTestJava(\n+            \"-XX:+UseZGC\",\n+            \"-XX:-ZGenerational\",\n+            \"-Xms128M\",\n+            \"-Xmx128M\",\n+            \"-Xlog:gc,gc+init,gc+heap=debug\",\n+            Test.class.getName())\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .shouldContain(\"Page Cache Flushed:\")\n+                .shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestPageCacheFlush.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -56,10 +56,10 @@\n-            ProcessTools.executeProcess(ProcessTools.createLimitedTestJavaProcessBuilder(\n-                                        \"-XX:+UseZGC\",\n-                                        \"-XX:-ZGenerational\",\n-                                        \"-Xlog:gc,gc+init,gc+reloc,gc+heap\",\n-                                        \"-Xmx\" + maxCapacity,\n-                                        Test.class.getName()))\n-                .outputTo(System.out)\n-                .errorTo(System.out)\n-                .shouldContain(\"Success\")\n-                .shouldHaveExitValue(0);\n+            ProcessTools.executeLimitedTestJava(\n+                \"-XX:+UseZGC\",\n+                \"-XX:-ZGenerational\",\n+                \"-Xlog:gc,gc+init,gc+reloc,gc+heap\",\n+                \"-Xmx\" + maxCapacity,\n+                Test.class.getName())\n+                    .outputTo(System.out)\n+                    .errorTo(System.out)\n+                    .shouldContain(\"Success\")\n+                    .shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/gc\/x\/TestSmallHeap.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -44,11 +44,11 @@\n-        ProcessTools.executeProcess(ProcessTools.createLimitedTestJavaProcessBuilder(\n-                \"-XX:+UseZGC\",\n-                \"-XX:+ZGenerational\",\n-                \"-Xlog:gc*\",\n-                \"-Xms32M\",\n-                \"-Xmx32M\",\n-                \"-XX:AllocateHeapAt=\" + directory,\n-                \"-version\"))\n-            .shouldContain(exists ? heapBackingFile : failedToCreateFile)\n-            .shouldNotContain(exists ? failedToCreateFile : heapBackingFile)\n-            .shouldHaveExitValue(exists ? 0 : 1);\n+        ProcessTools.executeLimitedTestJava(\n+            \"-XX:+UseZGC\",\n+            \"-XX:+ZGenerational\",\n+            \"-Xlog:gc*\",\n+            \"-Xms32M\",\n+            \"-Xmx32M\",\n+            \"-XX:AllocateHeapAt=\" + directory,\n+            \"-version\")\n+                .shouldContain(exists ? heapBackingFile : failedToCreateFile)\n+                .shouldNotContain(exists ? failedToCreateFile : heapBackingFile)\n+                .shouldHaveExitValue(exists ? 0 : 1);\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestAllocateHeapAt.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -71,11 +71,11 @@\n-        ProcessTools.executeProcess(ProcessTools.createLimitedTestJavaProcessBuilder(\n-                                    \"-XX:+UseZGC\",\n-                                    \"-XX:+ZGenerational\",\n-                                    \"-Xms128M\",\n-                                    \"-Xmx128M\",\n-                                    \"-Xlog:gc,gc+init,gc+heap=debug\",\n-                                    Test.class.getName()))\n-                    .outputTo(System.out)\n-                    .errorTo(System.out)\n-                    .shouldContain(\"Page Cache Flushed:\")\n-                    .shouldHaveExitValue(0);\n+        ProcessTools.executeLimitedTestJava(\n+            \"-XX:+UseZGC\",\n+            \"-XX:+ZGenerational\",\n+            \"-Xms128M\",\n+            \"-Xmx128M\",\n+            \"-Xlog:gc,gc+init,gc+heap=debug\",\n+            Test.class.getName())\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .shouldContain(\"Page Cache Flushed:\")\n+                .shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestPageCacheFlush.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -56,10 +56,10 @@\n-            ProcessTools.executeProcess(ProcessTools.createLimitedTestJavaProcessBuilder(\n-                                        \"-XX:+UseZGC\",\n-                                        \"-XX:+ZGenerational\",\n-                                        \"-Xlog:gc,gc+init,gc+reloc,gc+heap\",\n-                                        \"-Xmx\" + maxCapacity,\n-                                        Test.class.getName()))\n-                .outputTo(System.out)\n-                .errorTo(System.out)\n-                .shouldContain(\"Success\")\n-                .shouldHaveExitValue(0);\n+            ProcessTools.executeLimitedTestJava(\n+                \"-XX:+UseZGC\",\n+                \"-XX:+ZGenerational\",\n+                \"-Xlog:gc,gc+init,gc+reloc,gc+heap\",\n+                \"-Xmx\" + maxCapacity,\n+                Test.class.getName())\n+                    .outputTo(System.out)\n+                    .errorTo(System.out)\n+                    .shouldContain(\"Success\")\n+                    .shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestSmallHeap.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -48,11 +48,11 @@\n-        OutputAnalyzer oa = ProcessTools.executeProcess(ProcessTools.createTestJavaProcessBuilder(\n-                                                        \"-XX:+UseZGC\",\n-                                                        \"-XX:+ZGenerational\",\n-                                                        \"-Xms\" + XmsInM + \"M\",\n-                                                        \"-Xmx\" + XmxInM + \"M\",\n-                                                        \"-Xlog:gc,gc+init\",\n-                                                        \"-XX:ZForceDiscontiguousHeapReservations=\" + n,\n-                                                        \"-version\"))\n-                                        .outputTo(System.out)\n-                                        .errorTo(System.out)\n-                                        .shouldHaveExitValue(0);\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(\n+            \"-XX:+UseZGC\",\n+            \"-XX:+ZGenerational\",\n+            \"-Xms\" + XmsInM + \"M\",\n+            \"-Xmx\" + XmxInM + \"M\",\n+            \"-Xlog:gc,gc+init\",\n+            \"-XX:ZForceDiscontiguousHeapReservations=\" + n,\n+            \"-version\")\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestZForceDiscontiguousHeapReservations.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -71,15 +71,15 @@\n-        OutputAnalyzer oa = ProcessTools.executeProcess(ProcessTools.createTestJavaProcessBuilder(\n-                                                        \"-XX:+UseZGC\",\n-                                                        \"-XX:+ZGenerational\",\n-                                                        \"-Xms\" + XmsInM + \"M\",\n-                                                        \"-Xmx\" + XmxInM + \"M\",\n-                                                        \"-Xlog:gc,gc+init\",\n-                                                        \"-XX:ZForceDiscontiguousHeapReservations=\" + zForceDiscontiguousHeapReservations,\n-                                                        \"-XX:NativeMemoryTracking=detail\",\n-                                                        \"-XX:+PrintNMTStatistics\",\n-                                                        Test.class.getName(),\n-                                                        Integer.toString(zForceDiscontiguousHeapReservations),\n-                                                        Integer.toString(XmxInM)))\n-                                        .outputTo(System.out)\n-                                        .errorTo(System.out)\n-                                        .shouldHaveExitValue(0);\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(\n+            \"-XX:+UseZGC\",\n+            \"-XX:+ZGenerational\",\n+            \"-Xms\" + XmsInM + \"M\",\n+            \"-Xmx\" + XmxInM + \"M\",\n+            \"-Xlog:gc,gc+init\",\n+            \"-XX:ZForceDiscontiguousHeapReservations=\" + zForceDiscontiguousHeapReservations,\n+            \"-XX:NativeMemoryTracking=detail\",\n+            \"-XX:+PrintNMTStatistics\",\n+            Test.class.getName(),\n+            Integer.toString(zForceDiscontiguousHeapReservations),\n+            Integer.toString(XmxInM))\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestZNMT.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,274 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import javax.swing.Icon;\n+import javax.swing.UIManager;\n+import javax.swing.filechooser.FileSystemView;\n+\n+\/*\n+ * @test\n+ * @bug 8320692\n+ * @requires (os.family == \"windows\")\n+ * @summary NullPointerException is thrown for .exe file without icon\n+ * @run main\/othervm NoIconExeNPE\n+ *\/\n+public class NoIconExeNPE {\n+\n+    \/**\n+     * Bytes of a short {@code Hello.exe} which has no icon.\n+     *\/\n+    private static final byte[] bytes = {\n+            (byte) 0x4d, (byte) 0x5a, (byte) 0x80, (byte) 0x00, (byte) 0x01,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00,\n+            (byte) 0x10, (byte) 0x00, (byte) 0xff, (byte) 0xff, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x40, (byte) 0x01, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x40,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0e,\n+            (byte) 0x1f, (byte) 0xba, (byte) 0x0e, (byte) 0x00, (byte) 0xb4,\n+            (byte) 0x09, (byte) 0xcd, (byte) 0x21, (byte) 0xb8, (byte) 0x01,\n+            (byte) 0x4c, (byte) 0xcd, (byte) 0x21, (byte) 0x54, (byte) 0x68,\n+            (byte) 0x69, (byte) 0x73, (byte) 0x20, (byte) 0x70, (byte) 0x72,\n+            (byte) 0x6f, (byte) 0x67, (byte) 0x72, (byte) 0x61, (byte) 0x6d,\n+            (byte) 0x20, (byte) 0x63, (byte) 0x61, (byte) 0x6e, (byte) 0x6e,\n+            (byte) 0x6f, (byte) 0x74, (byte) 0x20, (byte) 0x62, (byte) 0x65,\n+            (byte) 0x20, (byte) 0x72, (byte) 0x75, (byte) 0x6e, (byte) 0x20,\n+            (byte) 0x69, (byte) 0x6e, (byte) 0x20, (byte) 0x44, (byte) 0x4f,\n+            (byte) 0x53, (byte) 0x20, (byte) 0x6d, (byte) 0x6f, (byte) 0x64,\n+            (byte) 0x65, (byte) 0x2e, (byte) 0x0d, (byte) 0x0a, (byte) 0x24,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x50, (byte) 0x45,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x4c, (byte) 0x01, (byte) 0x01,\n+            (byte) 0x00, (byte) 0x55, (byte) 0x96, (byte) 0x96, (byte) 0x65,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xe0, (byte) 0x00,\n+            (byte) 0x0f, (byte) 0x01, (byte) 0x0b, (byte) 0x01, (byte) 0x01,\n+            (byte) 0x49, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x40, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x20,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00,\n+            (byte) 0x00, (byte) 0xac, (byte) 0xa3, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00,\n+            (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x40, (byte) 0x10, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x86, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x2e, (byte) 0x74, (byte) 0x65, (byte) 0x78,\n+            (byte) 0x74, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xc6,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x60, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x6a, (byte) 0x00, (byte) 0x68,\n+            (byte) 0x29, (byte) 0x10, (byte) 0x40, (byte) 0x00, (byte) 0x68,\n+            (byte) 0x1c, (byte) 0x10, (byte) 0x40, (byte) 0x00, (byte) 0x6a,\n+            (byte) 0x00, (byte) 0xff, (byte) 0x15, (byte) 0x88, (byte) 0x10,\n+            (byte) 0x40, (byte) 0x00, (byte) 0x6a, (byte) 0x00, (byte) 0xff,\n+            (byte) 0x15, (byte) 0x80, (byte) 0x10, (byte) 0x40, (byte) 0x00,\n+            (byte) 0x48, (byte) 0x65, (byte) 0x6c, (byte) 0x6c, (byte) 0x6f,\n+            (byte) 0x20, (byte) 0x57, (byte) 0x6f, (byte) 0x72, (byte) 0x6c,\n+            (byte) 0x64, (byte) 0x21, (byte) 0x00, (byte) 0x48, (byte) 0x65,\n+            (byte) 0x6c, (byte) 0x6c, (byte) 0x6f, (byte) 0x20, (byte) 0x66,\n+            (byte) 0x61, (byte) 0x73, (byte) 0x6d, (byte) 0x00, (byte) 0x90,\n+            (byte) 0x90, (byte) 0x90, (byte) 0x90, (byte) 0x90, (byte) 0x90,\n+            (byte) 0x90, (byte) 0x90, (byte) 0x90, (byte) 0x90, (byte) 0x90,\n+            (byte) 0x90, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x90, (byte) 0x10,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0x10, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x9d, (byte) 0x10,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x10, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x90, (byte) 0x90, (byte) 0x90, (byte) 0x90,\n+            (byte) 0xa8, (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xb8, (byte) 0x10,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x6b, (byte) 0x65, (byte) 0x72, (byte) 0x6e,\n+            (byte) 0x65, (byte) 0x6c, (byte) 0x33, (byte) 0x32, (byte) 0x2e,\n+            (byte) 0x64, (byte) 0x6c, (byte) 0x6c, (byte) 0x00, (byte) 0x75,\n+            (byte) 0x73, (byte) 0x65, (byte) 0x72, (byte) 0x33, (byte) 0x32,\n+            (byte) 0x2e, (byte) 0x64, (byte) 0x6c, (byte) 0x6c, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x45, (byte) 0x78, (byte) 0x69,\n+            (byte) 0x74, (byte) 0x50, (byte) 0x72, (byte) 0x6f, (byte) 0x63,\n+            (byte) 0x65, (byte) 0x73, (byte) 0x73, (byte) 0x00, (byte) 0x90,\n+            (byte) 0x90, (byte) 0x00, (byte) 0x00, (byte) 0x4d, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x73, (byte) 0x61, (byte) 0x67, (byte) 0x65,\n+            (byte) 0x42, (byte) 0x6f, (byte) 0x78, (byte) 0x41, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        final Path temp = Files.createTempDirectory(\"no-icon\");\n+        final Path hello = temp.resolve(\"Hello.exe\");\n+\n+        try {\n+            try (OutputStream out = Files.newOutputStream(hello)) {\n+                out.write(bytes);\n+            }\n+\n+            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+\n+            FileSystemView fsv = FileSystemView.getFileSystemView();\n+            \/\/ No NullPointerException is expected\n+            Icon icon = fsv.getSystemIcon(hello.toFile());\n+            if (icon == null) {\n+                throw new RuntimeException(\"Null icon returned by FileSystemView.getSystemIcon()\");\n+            }\n+        } finally {\n+            Files.deleteIfExists(hello);\n+            Files.delete(temp);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSystemView\/NoIconExeNPE.java","additions":274,"deletions":0,"binary":false,"changes":274,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * @run main\/othervm -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=540 -Xmx512m jdk.jpackage.test.Main\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/MacAppStoreJlinkOptionsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n- * @run main\/othervm\/timeout=1400 -Xmx512m jdk.jpackage.test.Main\n+ * @run main\/othervm\/timeout=1400 jdk.jpackage.test.Main\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimeImageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}