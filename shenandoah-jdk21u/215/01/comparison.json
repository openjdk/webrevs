{"files":[{"patch":"@@ -704,1 +704,6 @@\n-    \/\/ mm is used for book keeping\n+    \/\/ mm is the memory state at the safepoint (when it's a MergeMem)\n+    \/\/ no_side_effect_since_safepoint() goes over the memory state at the backedge. It resets the mm input for each\n+    \/\/ component of the memory state it encounters so it points to the base memory. Once no_side_effect_since_safepoint()\n+    \/\/ is done, if no side effect after the safepoint was found, mm should transform to the base memory: the states at\n+    \/\/ the backedge and safepoint are the same so all components of the memory state at the safepoint should have been\n+    \/\/ reset.\n@@ -711,1 +716,6 @@\n-        if (mms.alias_idx() != Compile::AliasIdxBot && loop != get_loop(ctrl_or_self(mms.memory()))) {\n+        \/\/ Loop invariant memory state won't be reset by no_side_effect_since_safepoint(). Do it here.\n+        \/\/ Escape Analysis can add state to mm that it doesn't add to the backedge memory Phis, breaking verification\n+        \/\/ code that relies on mm. Clear that extra state here.\n+        if (mms.alias_idx() != Compile::AliasIdxBot &&\n+            (loop != get_loop(ctrl_or_self(mms.memory())) ||\n+             (mms.adr_type()->isa_oop_ptr() && mms.adr_type()->is_known_instance()))) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3128,2 +3128,2 @@\n-const TypeRawPtr *TypeRawPtr::make( address bits ) {\n-  assert( bits, \"Use TypePtr for null\" );\n+const TypeRawPtr *TypeRawPtr::make(address bits) {\n+  assert(bits != nullptr, \"Use TypePtr for null\");\n@@ -3218,1 +3218,0 @@\n-  case TypePtr::Null:\n@@ -3220,3 +3219,11 @@\n-    address bits = _bits+offset;\n-    if ( bits == 0 ) return TypePtr::NULL_PTR;\n-    return make( bits );\n+    uintptr_t bits = (uintptr_t)_bits;\n+    uintptr_t sum = bits + offset;\n+    if (( offset < 0 )\n+        ? ( sum > bits )        \/\/ Underflow?\n+        : ( sum < bits )) {     \/\/ Overflow?\n+      return BOTTOM;\n+    } else if ( sum == 0 ) {\n+      return TypePtr::NULL_PTR;\n+    } else {\n+      return make( (address)sum );\n+    }\n@@ -3226,1 +3233,0 @@\n-  return nullptr;                  \/\/ Lint noise\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -280,0 +280,34 @@\n+    \/**\n+     * Repeatedly invokes acquire, if its execution throws an Error or a Runtime Exception,\n+     * using an Unsafe.park-based backoff\n+     * @param node which to reacquire\n+     * @param arg the acquire argument\n+     *\/\n+    private final void reacquire(Node node, long arg) {\n+        try {\n+            acquire(node, arg, false, false, false, 0L);\n+        } catch (Error | RuntimeException firstEx) {\n+            \/\/ While we currently do not emit an JFR events in this situation, mainly\n+            \/\/ because the conditions under which this happens are such that it\n+            \/\/ cannot be presumed to be possible to actually allocate an event, and\n+            \/\/ using a preconstructed one would have limited value in serviceability.\n+            \/\/ Having said that, the following place would be the more appropriate\n+            \/\/ place to put such logic:\n+            \/\/     emit JFR event\n+\n+            for (long nanos = 1L;;) {\n+                U.park(false, nanos); \/\/ must use Unsafe park to sleep\n+                if (nanos < 1L << 30)            \/\/ max about 1 second\n+                    nanos <<= 1;\n+\n+                try {\n+                    acquire(node, arg, false, false, false, 0L);\n+                } catch (Error | RuntimeException ignored) {\n+                    continue;\n+                }\n+\n+                throw firstEx;\n+            }\n+        }\n+    }\n+\n@@ -1297,1 +1331,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n@@ -1344,1 +1378,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n@@ -1387,1 +1421,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n@@ -1431,1 +1465,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n@@ -1476,1 +1510,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/locks\/AbstractQueuedLongSynchronizer.java","additions":39,"deletions":5,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -659,0 +659,34 @@\n+    \/**\n+     * Repeatedly invokes acquire, if its execution throws an Error or a Runtime Exception,\n+     * using an Unsafe.park-based backoff\n+     * @param node which to reacquire\n+     * @param arg the acquire argument\n+     *\/\n+    private final void reacquire(Node node, int arg) {\n+        try {\n+            acquire(node, arg, false, false, false, 0L);\n+        } catch (Error | RuntimeException firstEx) {\n+            \/\/ While we currently do not emit an JFR events in this situation, mainly\n+            \/\/ because the conditions under which this happens are such that it\n+            \/\/ cannot be presumed to be possible to actually allocate an event, and\n+            \/\/ using a preconstructed one would have limited value in serviceability.\n+            \/\/ Having said that, the following place would be the more appropriate\n+            \/\/ place to put such logic:\n+            \/\/     emit JFR event\n+\n+            for (long nanos = 1L;;) {\n+                U.park(false, nanos); \/\/ must use Unsafe park to sleep\n+                if (nanos < 1L << 30)            \/\/ max about 1 second\n+                    nanos <<= 1;\n+\n+                try {\n+                    acquire(node, arg, false, false, false, 0L);\n+                } catch (Error | RuntimeException ignored) {\n+                    continue;\n+                }\n+\n+                throw firstEx;\n+            }\n+        }\n+    }\n+\n@@ -1676,1 +1710,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n@@ -1723,1 +1757,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n@@ -1766,1 +1800,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n@@ -1810,1 +1844,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n@@ -1855,1 +1889,1 @@\n-            acquire(node, savedState, false, false, false, 0L);\n+            reacquire(node, savedState);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/locks\/AbstractQueuedSynchronizer.java","additions":39,"deletions":5,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-            return new SSLException(reason, cause);\n+            return new SSLException(\"(\" + description + \") \" + reason, cause);\n@@ -128,1 +128,1 @@\n-            return new SSLProtocolException(reason, cause);\n+            return new SSLProtocolException(\"(\" + description + \") \" + reason, cause);\n@@ -130,1 +130,1 @@\n-            return new SSLHandshakeException(reason, cause);\n+            return new SSLHandshakeException(\"(\" + description + \") \" + reason, cause);\n@@ -132,1 +132,1 @@\n-            return new SSLException(reason, cause);\n+            return new SSLException(\"(\" + description + \") \" + reason, cause);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Alert.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -384,1 +384,1 @@\n-                    throw shc.conContext.fatal(Alert.BAD_CERTIFICATE,\n+                    throw shc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n@@ -1166,1 +1166,1 @@\n-                    throw shc.conContext.fatal(Alert.BAD_CERTIFICATE,\n+                    throw shc.conContext.fatal(Alert.CERTIFICATE_REQUIRED,\n@@ -1190,1 +1190,1 @@\n-                throw chc.conContext.fatal(Alert.BAD_CERTIFICATE,\n+                throw chc.conContext.fatal(Alert.DECODE_ERROR,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -312,1 +313,1 @@\n-                ProtocolVersion.valueOf(Short.toUnsignedInt(buf.getShort()));\n+                ProtocolVersion.valueOf(Record.getInt16(buf));\n@@ -319,1 +320,1 @@\n-                CipherSuite.valueOf(Short.toUnsignedInt(buf.getShort()));\n+                CipherSuite.valueOf(Record.getInt16(buf));\n@@ -323,1 +324,1 @@\n-        int i = Byte.toUnsignedInt(buf.get());\n+        int i = Record.getInt8(buf);\n@@ -326,1 +327,1 @@\n-                    Short.toUnsignedInt(buf.getShort())));\n+                    Record.getInt16(buf)));\n@@ -331,1 +332,1 @@\n-        i = Byte.toUnsignedInt(buf.get());\n+        i = Record.getInt8(buf);\n@@ -335,1 +336,1 @@\n-                    Short.toUnsignedInt(buf.getShort())));\n+                    Record.getInt16(buf)));\n@@ -340,11 +341,3 @@\n-        byte[] b;\n-        i = Short.toUnsignedInt(buf.getShort());\n-        if (i > 0) {\n-            b = new byte[i];\n-            \/\/ Get algorithm string\n-            buf.get(b, 0, i);\n-            \/\/ Encoded length\n-            i = Short.toUnsignedInt(buf.getShort());\n-            \/\/ Encoded SecretKey\n-            b = new byte[i];\n-            buf.get(b);\n+        byte[] b = Record.getBytes16(buf);\n+        if (b.length > 0) {\n+            b = Record.getBytes16(buf);\n@@ -357,4 +350,2 @@\n-        i = buf.get();\n-        if (i > 0) {\n-            b = new byte[i];\n-            buf.get(b);\n+        b = Record.getBytes8(buf);\n+        if (b.length > 0) {\n@@ -367,10 +358,3 @@\n-        i = buf.get();\n-        if (i > 0) {\n-            b = new byte[i];\n-            \/\/ Get algorithm string\n-            buf.get(b, 0, i);\n-            \/\/ Encoded length\n-            i = Short.toUnsignedInt(buf.getShort());\n-            \/\/ Encoded SecretKey\n-            b = new byte[i];\n-            buf.get(b);\n+        b = Record.getBytes8(buf);\n+        if (b.length > 0) {\n+            b = Record.getBytes16(buf);\n@@ -381,0 +365,1 @@\n+\n@@ -382,1 +367,1 @@\n-        this.useExtendedMasterSecret = (buf.get() != 0);\n+        this.useExtendedMasterSecret = (Record.getInt8(buf) != 0);\n@@ -385,2 +370,2 @@\n-        i = buf.get();\n-        if (i == 0) {\n+        b = Record.getBytes8(buf);\n+        if (b.length == 0) {\n@@ -389,2 +374,0 @@\n-            b = new byte[i];\n-            buf.get(b);\n@@ -395,2 +378,2 @@\n-        i = buf.get();  \/\/ length\n-        if (i == 0) {\n+        b = Record.getBytes8(buf);\n+        if (b.length == 0) {\n@@ -399,2 +382,0 @@\n-            b = new byte[i];\n-            buf.get(b, 0, b.length);\n@@ -405,1 +386,1 @@\n-        int len = Short.toUnsignedInt(buf.getShort());\n+        int len = Record.getInt16(buf);\n@@ -411,3 +392,1 @@\n-                int l = buf.get();\n-                b = new byte[l];\n-                buf.get(b, 0, l);\n+                b = Record.getBytes8(buf);\n@@ -418,1 +397,0 @@\n-\n@@ -428,1 +406,1 @@\n-        len = Short.toUnsignedInt(buf.getShort());\n+        len = Record.getInt16(buf);\n@@ -435,2 +413,1 @@\n-            b = new byte[Short.toUnsignedInt(buf.getShort())];\n-            buf.get(b);\n+            b = Record.getBytes16(buf);\n@@ -441,2 +418,2 @@\n-        i = Byte.toUnsignedInt(buf.get());\n-        if (i == 0) {\n+        b = Record.getBytes8(buf);\n+        if (b.length == 0) {\n@@ -445,2 +422,0 @@\n-            b = new byte[i];\n-            buf.get(b, 0, i);\n@@ -449,1 +424,1 @@\n-        this.port = Short.toUnsignedInt(buf.getShort());\n+        this.port = Record.getInt16(buf);\n@@ -452,1 +427,1 @@\n-        i = buf.get();\n+        i = Record.getInt8(buf);\n@@ -471,1 +446,1 @@\n-        switch (buf.get()) {\n+        switch (Record.getInt8(buf)) {\n@@ -493,3 +468,1 @@\n-                i = buf.get();\n-                b = new byte[i];\n-                buf.get(b, 0 , i);\n+                b = Record.getBytes8(buf);\n@@ -497,2 +470,0 @@\n-                \/\/ Get length of encoding\n-                i = Short.toUnsignedInt(buf.getShort());\n@@ -500,2 +471,1 @@\n-                b = new byte[i];\n-                buf.get(b);\n+                b = Record.getBytes16(buf);\n@@ -504,2 +474,1 @@\n-                this.pskIdentity = new byte[buf.get()];\n-                buf.get(pskIdentity);\n+                this.pskIdentity = Record.getBytes8(buf);\n@@ -516,0 +485,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSessionImpl.java","additions":34,"deletions":64,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static sun.security.ssl.SignatureScheme.CERTIFICATE_SCOPE;\n@@ -36,0 +37,1 @@\n+import javax.net.ssl.SSLException;\n@@ -279,24 +281,2 @@\n-            \/\/ update the context\n-            List<SignatureScheme> sss =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            shc.sslConfig,\n-                            shc.algorithmConstraints, shc.negotiatedProtocol,\n-                            spec.signatureSchemes,\n-                            HANDSHAKE_SCOPE);\n-\n-            if (sss == null || sss.isEmpty()) {\n-                throw shc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n-                        \"No supported signature algorithm\");\n-            }\n-            shc.peerRequestedSignatureSchemes = sss;\n-\n-            \/\/ If no \"signature_algorithms_cert\" extension is present, then\n-            \/\/ the \"signature_algorithms\" extension also applies to\n-            \/\/ signatures appearing in certificates.\n-            SignatureSchemesSpec certSpec =\n-                    (SignatureSchemesSpec)shc.handshakeExtensions.get(\n-                            SSLExtension.CH_SIGNATURE_ALGORITHMS_CERT);\n-            if (certSpec == null) {\n-                shc.peerRequestedCertSignSchemes = sss;\n-                shc.handshakeSession.setPeerSupportedSignatureAlgorithms(sss);\n-            }\n+            updateHandshakeContext(shc, spec.signatureSchemes,\n+                    SSLExtension.CH_SIGNATURE_ALGORITHMS_CERT);\n@@ -510,24 +490,2 @@\n-            \/\/ update the context\n-            List<SignatureScheme> sss =\n-                    SignatureScheme.getSupportedAlgorithms(\n-                            chc.sslConfig,\n-                            chc.algorithmConstraints, chc.negotiatedProtocol,\n-                            spec.signatureSchemes,\n-                            HANDSHAKE_SCOPE);\n-\n-            if (sss == null || sss.isEmpty()) {\n-                throw chc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n-                        \"No supported signature algorithm\");\n-            }\n-            chc.peerRequestedSignatureSchemes = sss;\n-\n-            \/\/ If no \"signature_algorithms_cert\" extension is present, then\n-            \/\/ the \"signature_algorithms\" extension also applies to\n-            \/\/ signatures appearing in certificates.\n-            SignatureSchemesSpec certSpec =\n-                    (SignatureSchemesSpec)chc.handshakeExtensions.get(\n-                            SSLExtension.CR_SIGNATURE_ALGORITHMS_CERT);\n-            if (certSpec == null) {\n-                chc.peerRequestedCertSignSchemes = sss;\n-                chc.handshakeSession.setPeerSupportedSignatureAlgorithms(sss);\n-            }\n+            updateHandshakeContext(chc, spec.signatureSchemes,\n+                    SSLExtension.CR_SIGNATURE_ALGORITHMS_CERT);\n@@ -556,0 +514,45 @@\n+\n+    \/\/ Updates given HandshakeContext with peer signature schemes.\n+    private static void updateHandshakeContext(HandshakeContext hc,\n+            int[] signatureSchemes, SSLExtension signatureAlgorithmsCertExt)\n+            throws SSLException {\n+        List<SignatureScheme> handshakeSS =\n+                SignatureScheme.getSupportedAlgorithms(\n+                        hc.sslConfig,\n+                        hc.algorithmConstraints,\n+                        hc.negotiatedProtocol,\n+                        signatureSchemes,\n+                        HANDSHAKE_SCOPE);\n+\n+        if (handshakeSS.isEmpty()) {\n+            throw hc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n+                    \"No supported signature algorithm\");\n+        }\n+\n+        hc.peerRequestedSignatureSchemes = handshakeSS;\n+\n+        \/\/ If no \"signature_algorithms_cert\" extension is present, then\n+        \/\/ the \"signature_algorithms\" extension also applies to\n+        \/\/ signatures appearing in certificates.\n+        SignatureSchemesSpec certSpec =\n+                (SignatureSchemesSpec) hc.handshakeExtensions.get(\n+                        signatureAlgorithmsCertExt);\n+\n+        if (certSpec == null) {\n+            List<SignatureScheme> certSS =\n+                    SignatureScheme.getSupportedAlgorithms(\n+                            hc.sslConfig,\n+                            hc.algorithmConstraints,\n+                            hc.negotiatedProtocol,\n+                            signatureSchemes,\n+                            CERTIFICATE_SCOPE);\n+\n+            if (certSS.isEmpty()) {\n+                throw hc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n+                        \"No supported signature algorithm\");\n+            }\n+\n+            hc.peerRequestedCertSignSchemes = certSS;\n+            hc.handshakeSession.setPeerSupportedSignatureAlgorithms(certSS);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureAlgorithmsExtension.java","additions":51,"deletions":48,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,0 +67,1 @@\n+import sun.lwawt.LWKeyboardFocusManagerPeer;\n@@ -1060,0 +1061,5 @@\n+\n+        Window currFocus = LWKeyboardFocusManagerPeer.getInstance().getCurrentFocusedWindow();\n+        if (!blocked && (target == currFocus)) {\n+            requestWindowFocus();\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformWindow.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-runtime\/classFileParserBug\/TestEmptyBootstrapMethodsAttr.java JDK-8346442 generic-all\n+runtime\/classFileParserBug\/TestEmptyBootstrapMethodsAttr.java 8346442 generic-all\n@@ -102,1 +102,1 @@\n-runtime\/logging\/LoaderConstraintsTest.java JDK-8346442 generic-all\n+runtime\/logging\/LoaderConstraintsTest.java 8346442 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-Virtual.txt","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8336702\n+ * @summary C2 compilation fails with \"all memory state should have been processed\" assert\n+ *\n+ * @run main\/othervm TestSafePointWithEAState\n+ *\n+ *\/\n+\n+public class TestSafePointWithEAState {\n+    int[] b = new int[400];\n+\n+    void c() {\n+        int e;\n+        float f;\n+        for (long d = 0; d < 5000; d++) {\n+            e = 1;\n+            while ((e += 3) < 200) {\n+                if (d < b.length) {\n+                    for (int g = 0; g < 10000; ++g) ;\n+                }\n+            }\n+            synchronized (TestSafePointWithEAState.class) {\n+                f = new h(e).n;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] m) {\n+        TestSafePointWithEAState o = new TestSafePointWithEAState();\n+        o.c();\n+    }\n+}\n+\n+class h {\n+    float n;\n+    h(float n) {\n+        this.n = n;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/longcountedloops\/TestSafePointWithEAState.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -119,2 +119,3 @@\n-                                     \"|(java.lang.OutOfMemoryError: Java heap space)\" +\n-                                     \"|(Initial heap size set to a larger value than the maximum heap size))\";\n+                                     \"|(Initial heap size set to a larger value than the maximum heap size)\" +\n+                                     \"|(java.lang.OutOfMemoryError)\" +\n+                                     \"|(Error: A JNI error has occurred, please check your installation and try again))\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestParallelGCWithCDS.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -451,1 +451,0 @@\n-java\/awt\/Frame\/DisposeParentGC\/DisposeParentGC.java 8079786 macosx-all\n@@ -818,1 +817,0 @@\n-java\/awt\/print\/Dialog\/RestoreActiveWindowTest\/RestoreActiveWindowTest.java 8185429 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,3 @@\n- * @comment Don't allow -Xcomp or -Xint as they impact memory useage and number of iterations\n- * @requires (vm.compMode == \"Xmixed\")\n+ * @comment Don't allow -Xcomp or -Xint as they impact memory useage and number of iterations.\n+ *          Require compressed oops because not doing so increases memory usage.\n+ * @requires (vm.compMode == \"Xmixed\") & vm.opt.final.UseCompressedOops\n","filename":"test\/jdk\/com\/sun\/jdi\/ThreadMemoryLeakTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+\n+\/*\n+ * @test\n+ * @bug 7161437\n+ * @summary We should support \"apple.awt.fileDialogForDirectories\" property.\n+ * @requires (os.family == \"mac\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FileDialogForDirectories\n+ *\/\n+\n+public class FileDialogForDirectories {\n+\n+    private static JFrame initialize() {\n+        System.setProperty(\"apple.awt.fileDialogForDirectories\", \"true\");\n+\n+        JFrame frame = new JFrame(\"Directory File Dialog Test Frame\");\n+        frame.setLayout(new BorderLayout());\n+        JTextArea textOutput = new JTextArea(8, 30);\n+        textOutput.setLineWrap(true);\n+        JScrollPane textScrollPane = new JScrollPane(textOutput);\n+        frame.add(textScrollPane, BorderLayout.CENTER);\n+\n+        FileDialog fd = new FileDialog(new Frame(), \"Open\");\n+\n+        Button showBtn = new Button(\"Show File Dialog\");\n+        showBtn.addActionListener(e -> {\n+            fd.setVisible(true);\n+            String output = fd.getFile();\n+            if (output != null) {\n+                textOutput.append(output + \" is selected\\n\");\n+                textOutput.setCaretPosition(textOutput.getText().length());\n+            }\n+        });\n+        frame.add(showBtn, BorderLayout.NORTH);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        String instructions = \"\"\"\n+                1) Click on 'Show File Dialog' button. A file dialog will come up.\n+                2) Check that files can't be selected.\n+                3) Check that directories can be selected.\n+                4) Repeat steps 1 - 3 a few times for different files and directories.\n+                5) If it's true then the press Pass, otherwise press Fail.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Directory File Dialog Test Instructions\")\n+                .instructions(instructions)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(40)\n+                .testUI(FileDialogForDirectories::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForDirectories.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -1,47 +0,0 @@\n-<!--\n- Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--\n-  @test\n-  @bug 7161437\n-  @summary We should support \"apple.awt.fileDialogForDirectories\" property.\n-  @author Sergey Bylokhov area=awt.filedialog\n-  @library ..\/..\/regtesthelpers\n-  @library \/test\/lib\n-  @build Sysout\n-  @build jdk.test.lib.Platform\n-  @run applet\/manual=yesno FileDialogForDirectories.html\n-  -->\n-<head>\n-    <title> FileDialogForDirectories <\/title>\n-<\/head>\n-<body>\n-\n-<h1>FileDialogForDirectories<br>Bug ID: 7161437<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"FileDialogForDirectories.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForDirectories\/FileDialogForDirectories.html","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-import jdk.test.lib.Platform;\n-import test.java.awt.regtesthelpers.Sysout;\n-\n-import java.applet.Applet;\n-import java.awt.Button;\n-import java.awt.FileDialog;\n-import java.awt.Frame;\n-import java.awt.GridLayout;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-\n-public class FileDialogForDirectories extends Applet implements ActionListener {\n-    private volatile Button showBtn;\n-    private volatile FileDialog fd;\n-\n-    @Override\n-    public void init() {\n-        if (!Platform.isOSX()) {\n-            Sysout.createDialogWithInstructions(new String[]{\n-                    \"Press PASS, this test is for MacOS X only.\"});\n-            return;\n-        }\n-\n-        System.setProperty(\"apple.awt.fileDialogForDirectories\", \"true\");\n-\n-        setLayout(new GridLayout(1, 1));\n-\n-        fd = new FileDialog(new Frame(), \"Open\");\n-\n-        showBtn = new Button(\"Show File Dialog\");\n-        showBtn.addActionListener(this);\n-        add(showBtn);\n-        String[] instructions = {\n-                \"1) Click on 'Show File Dialog' button. A file dialog will come up.\",\n-                \"2) Check that files can't be selected.\",\n-                \"3) Check that directories can be selected.\",\n-                \"4) Repeat steps 1 - 3 a few times for different files and directories.\",\n-                \"5) If it's true then the test passed, otherwise it failed.\"};\n-        Sysout.createDialogWithInstructions(instructions);\n-    }\/\/End  init()\n-\n-    @Override\n-    public void start() {\n-        setSize(200, 200);\n-        show();\n-    }\/\/ start()\n-\n-    @Override\n-    public void actionPerformed(ActionEvent e) {\n-        if (e.getSource() == showBtn) {\n-            fd.setVisible(true);\n-            String output = fd.getFile();\n-            if (output != null) {\n-                Sysout.println(output + \" is selected\");\n-            }\n-        }\n-    }\n-}\/\/ class ManualYesNoTest\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForDirectories\/FileDialogForDirectories.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JButton;\n+\n+\/*\n+ * @test\n+ * @bug 8026869\n+ * @summary Support apple.awt.use-file-dialog-packages property.\n+ * @requires (os.family == \"mac\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FileDialogForPackages\n+*\/\n+\n+public class FileDialogForPackages {\n+\n+    private static JButton initialize() {\n+        System.setProperty(\"apple.awt.use-file-dialog-packages\", \"true\");\n+\n+        FileDialog fd = new FileDialog((Frame) null, \"Open\");\n+        String APPLICATIONS_FOLDER = \"\/Applications\";\n+        fd.setDirectory(APPLICATIONS_FOLDER);\n+\n+        JButton showBtn = new JButton(\"Show File Dialog\");\n+        showBtn.addActionListener(e -> {\n+            fd.setVisible(true);\n+            String output = fd.getFile();\n+            if (output != null) {\n+                PassFailJFrame.log(output + \" is selected\\n\");\n+            }\n+        });\n+        return showBtn;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        String instructions = \"\"\"\n+                1) Click on 'Show File Dialog' button. A file dialog will come up.\n+                2) Navigate to the Applications folder if not already there.\n+                3) Check that the application bundles can be selected\n+                   but can not be navigated.\n+                4) If it's true then press Pass, otherwise press Fail.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Directory File Dialog Test Instructions\")\n+                .instructions(instructions)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(40)\n+                .logArea(8)\n+                .splitUIBottom(FileDialogForPackages::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForPackages.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -1,47 +0,0 @@\n-<!--\n- Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--\n-  @test\n-  @bug 8026869\n-  @summary Support apple.awt.use-file-dialog-packages property.\n-  @author Petr Pchelko area=awt.filedialog\n-  @library ..\/..\/regtesthelpers\n-  @library \/test\/lib\n-  @build Sysout\n-  @build jdk.test.lib.Platform\n-  @run applet\/manual=yesno FileDialogForPackages.html\n-  -->\n-<head>\n-    <title> FileDialogForPackages <\/title>\n-<\/head>\n-<body>\n-\n-<h1>FileDialogForPackages<br>Bug ID: 8026869<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"FileDialogForPackages.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForPackages\/FileDialogForPackages.html","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-import jdk.test.lib.Platform;\n-import test.java.awt.regtesthelpers.Sysout;\n-\n-import java.applet.Applet;\n-import java.awt.Button;\n-import java.awt.FileDialog;\n-import java.awt.Frame;\n-import java.awt.GridLayout;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-\n-public class FileDialogForPackages extends Applet implements ActionListener {\n-    private static final String APPLICATIONS_FOLDER = \"\/Applications\";\n-\n-    private volatile Button showBtn;\n-    private volatile FileDialog fd;\n-\n-    @Override\n-    public void init() {\n-        if (!Platform.isOSX()) {\n-            Sysout.createDialogWithInstructions(new String[]{\n-                    \"Press PASS, this test is for MacOS X only.\"});\n-            return;\n-        }\n-\n-        System.setProperty(\"apple.awt.use-file-dialog-packages\", \"true\");\n-\n-        setLayout(new GridLayout(1, 1));\n-\n-        fd = new FileDialog(new Frame(), \"Open\");\n-        fd.setDirectory(APPLICATIONS_FOLDER);\n-\n-        showBtn = new Button(\"Show File Dialog\");\n-        showBtn.addActionListener(this);\n-        add(showBtn);\n-        String[] instructions = {\n-                \"1) Click on 'Show File Dialog' button. A file dialog will come up.\",\n-                \"2) Navigate to the Applications folder if not already there\",\n-                \"3) Check that the application bundles can be selected and can not be navigated\",\n-                \"4) If it's true then the test passed, otherwise it failed.\"};\n-        Sysout.createDialogWithInstructions(instructions);\n-    }\n-\n-    @Override\n-    public void start() {\n-        setSize(200, 200);\n-        show();\n-    }\n-\n-    @Override\n-    public void actionPerformed(ActionEvent e) {\n-        if (e.getSource() == showBtn) {\n-            fd.setVisible(true);\n-            String output = fd.getFile();\n-            if (output != null) {\n-                Sysout.println(output + \" is selected\");\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForPackages\/FileDialogForPackages.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,19 @@\n-import java.awt.*;\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.CheckboxGroup;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Label;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.Toolkit;\n+import java.awt.Frame;\n+import java.awt.FlowLayout;\n@@ -37,1 +55,0 @@\n- * @author Dmitriy Ermashov (dmitriy.ermashov@oracle.com)\n@@ -103,1 +120,1 @@\n-        TextArea textArea = new TextArea(5,5);\n+        TextArea textArea = new TextArea(5, 5);\n@@ -118,1 +135,1 @@\n-        Scrollbar scrollBar = new Scrollbar(Scrollbar.VERTICAL,0,1,0,200);\n+        Scrollbar scrollBar = new Scrollbar(Scrollbar.VERTICAL, 0, 1, 0, 200);\n@@ -120,1 +137,1 @@\n-        Checkbox radioButton = new Checkbox(\"Hello\" ,true, checkboxGroup);\n+        Checkbox radioButton = new Checkbox(\"Hello\", true, checkboxGroup);\n@@ -126,1 +143,1 @@\n-        canvas.setSize(100,100);\n+        canvas.setSize(100, 100);\n@@ -141,1 +158,1 @@\n-        Dimension d = toolkit.getBestCursorSize(32,32);\n+        Dimension d = toolkit.getBestCursorSize(32, 32);\n@@ -144,3 +161,6 @@\n-        if(!d.equals(new Dimension(0,0)) && color != 0 )\n-            customCursor = toolkit.createCustomCursor(new BufferedImage( 16, 16, BufferedImage.TYPE_INT_RGB ), new Point(10, 10), \"custom cursor.\");\n-        else\n+        if (!d.equals(new Dimension(0,0)) && color != 0) {\n+            customCursor = toolkit.createCustomCursor(\n+                new BufferedImage(16, 16, BufferedImage.TYPE_INT_RGB),\n+                new Point(10, 10), \"custom cursor.\");\n+        }\n+        else {\n@@ -148,0 +168,1 @@\n+        }\n","filename":"test\/jdk\/java\/awt\/Frame\/DisposeParentGC\/DisposeParentGC.java","additions":32,"deletions":11,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.awt.image.BufferedImage;\n@@ -45,1 +46,1 @@\n- * @run main\/othervm -Dsun.java2d.uiScale=1 ShapeNotSetSometimes\n+ * @run main\/othervm\/timeout=300 -Dsun.java2d.uiScale=1 ShapeNotSetSometimes\n@@ -150,0 +151,2 @@\n+        Rectangle screenBounds = window.getGraphicsConfiguration().getBounds();\n+        BufferedImage screenCapture = robot.createScreenCapture(screenBounds);\n@@ -151,1 +154,2 @@\n-            colorCheck(innerPoint.x, innerPoint.y, SHAPE_COLOR, true);\n+            colorCheck(innerPoint.x, innerPoint.y, SHAPE_COLOR,\n+                    true, screenCapture);\n@@ -154,1 +158,2 @@\n-                colorCheck(point.x, point.y, BACKGROUND_COLOR, true);\n+                colorCheck(point.x, point.y, BACKGROUND_COLOR,\n+                        true, screenCapture);\n@@ -158,1 +163,2 @@\n-                colorCheck(point.x, point.y, SHAPE_COLOR, false);\n+                colorCheck(point.x, point.y, SHAPE_COLOR,\n+                        false, screenCapture);\n@@ -172,1 +178,2 @@\n-    private void colorCheck(int x, int y, Color expectedColor, boolean mustBeExpectedColor) {\n+    private void colorCheck(int x, int y, Color expectedColor,\n+                            boolean mustBeExpectedColor, BufferedImage screenCapture) {\n@@ -176,5 +183,1 @@\n-        robot.mouseMove(screenX, screenY);\n-        robot.waitForIdle();\n-        robot.delay(50);\n-\n-        Color actualColor = robot.getPixelColor(screenX, screenY);\n+        Color actualColor = new Color(screenCapture.getRGB(screenX, screenY));\n","filename":"test\/jdk\/java\/awt\/Frame\/ShapeNotSetSometimes\/ShapeNotSetSometimes.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4087762\n+  @summary Sometimes click events are missing when you click the color components alternately.\n+  @key headful\n+  @library \/test\/jdk\/java\/awt\/regtesthelpers\n+  @build Util\n+  @run main ClickEventsTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Robot;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+public class ClickEventsTest {\n+    static Frame frame;\n+    static ColorComponent redComponent;\n+    static ColorComponent blueComponent;\n+    static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(ClickEventsTest::createAndShowGUI);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void test() throws Exception {\n+        robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        for (int i = 0; i < 10; i++) {\n+            redComponent.clickAndCheck();\n+            blueComponent.clickAndCheck();\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new Frame(\"ClickEventsTest\");\n+        redComponent = new ColorComponent(Color.RED);\n+        blueComponent = new ColorComponent(Color.BLUE);\n+\n+        frame.add(\"North\", redComponent);\n+        frame.add(\"South\", blueComponent);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    static class ColorComponent extends Component {\n+        public Color myColor;\n+\n+        private final CyclicBarrier barrier = new CyclicBarrier(2);\n+\n+        private final MouseAdapter mouseAdapter = new MouseAdapter() {\n+            public void mouseClicked(MouseEvent event) {\n+                System.out.println(myColor + \" area clicked\");\n+                try {\n+                    barrier.await(1, TimeUnit.SECONDS);\n+                } catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        };\n+\n+        public ColorComponent(Color c) {\n+            myColor = c;\n+            addMouseListener(mouseAdapter);\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return new Dimension(200, 100);\n+        }\n+\n+        public void paint(Graphics g) {\n+            g.setColor(myColor);\n+            g.fillRect(0, 0, 200, 100);\n+        }\n+\n+        public void clickAndCheck() throws InterruptedException, BrokenBarrierException {\n+            barrier.reset();\n+            Util.clickOnComp(this, robot);\n+            try {\n+                barrier.await(1, TimeUnit.SECONDS);\n+            } catch (TimeoutException e) {\n+                throw new RuntimeException(myColor + \" was not clicked\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/ClickEventsTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4417964\n+ * @summary tests that drag events continue to arrive to heavyweight\n+ *          when the mouse is moved to lightweight while dragging.\n+ * @key headful\n+ * @library \/lib\/client \/java\/awt\/regtesthelpers\n+ * @build ExtendedRobot Util\n+ * @run main DragToLightweightTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.HeadlessException;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+public class DragToLightweightTest {\n+\n+    private static final CountDownLatch latch = new CountDownLatch(1);\n+    private static volatile MouseTest mouseTest;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        EventQueue.invokeAndWait(() -> mouseTest = new MouseTest());\n+\n+        try {\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (mouseTest != null) {\n+                    mouseTest.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void test() throws Exception {\n+        ExtendedRobot robot = new ExtendedRobot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        Rectangle componentBounds = mouseTest.getLightweightComponentBounds();\n+\n+        robot.dragAndDrop(\n+                componentBounds.x + componentBounds.width \/ 2, componentBounds.y + componentBounds.height + 30,\n+                componentBounds.x + componentBounds.width \/ 2, componentBounds.y + 2 * componentBounds.height \/ 3\n+        );\n+\n+        if (!latch.await(5, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"The test failed: no mouse release event received\");\n+        }\n+\n+        System.out.println(\"Mouse release event received, the test PASSED\");\n+    }\n+\n+    private static class MouseTest extends Frame {\n+\n+        final Foo foo;\n+\n+        public MouseTest() throws HeadlessException {\n+            super(\"DragToLightweightTest\");\n+\n+            setLayout(new FlowLayout());\n+\n+            addMouseListener(new MouseAdapter() {\n+                @Override\n+                public void mouseReleased(MouseEvent e) {\n+                    System.out.println(\"mouseReleased\");\n+                    latch.countDown();\n+                }\n+            });\n+\n+            \/\/ Create a Component that will be a child of the Frame and add\n+            \/\/ a MouseListener to it.\n+            foo = new Foo();\n+            foo.setBackground(Color.red);\n+\n+            System.out.println(foo.getPreferredSize());\n+            foo.setPreferredSize(new Dimension(350, 200));\n+            System.out.println(foo.getPreferredSize());\n+\n+            foo.addMouseListener(new DummyAdapter());\n+\n+            add(foo);\n+\n+            setSize(400, 400);\n+            setLocationRelativeTo(null);\n+            setVisible(true);\n+        }\n+\n+        public Rectangle getLightweightComponentBounds() throws Exception {\n+            return Util.invokeOnEDT(() -> {\n+                Point locationOnScreen = foo.getLocationOnScreen();\n+                Dimension size = foo.getSize();\n+                return new Rectangle(locationOnScreen.x, locationOnScreen.y, size.width, size.height);\n+            });\n+        }\n+\n+        private static class Foo extends Container {\n+            public void paint(Graphics g) {\n+                g.setColor(getBackground());\n+                g.fillRect(0, 0, getWidth(), getHeight());\n+                g.setColor(Color.white);\n+                g.drawString(getBounds().toString(), 5, 20);\n+                super.paint(g);\n+            }\n+        }\n+\n+        private static class DummyAdapter extends MouseAdapter {}\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/DragToLightweightTest.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4095172\n+ * @summary Test for no proper mouse coordinates on MOUSE_ENTER\/MOUSE_EXIT events for Win boxes.\n+ * @key headful\n+ * @library \/lib\/client \/java\/awt\/regtesthelpers\n+ * @build ExtendedRobot Util\n+ * @run main MouseEnterTest\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.ArrayList;\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+public class MouseEnterTest {\n+    private static Frame frame;\n+    private static final TestMouseAdapter mouseAdapter = new TestMouseAdapter();\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(MouseEnterTest::initAndShowGUI);\n+        try {\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void initAndShowGUI() {\n+        frame = new Frame(\"MouseEnterTest\");\n+        frame.setLayout(null);\n+        frame.setSize(300, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.addMouseListener(mouseAdapter);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void test() throws Exception {\n+        ExtendedRobot robot = new ExtendedRobot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        Rectangle bounds = Util.invokeOnEDT(frame::getBounds);\n+\n+        java.util.List<Point> points = getBorderGlidePoints(bounds);\n+        for (int i = 0; i < points.size(); i += 2) {\n+            Point p1 = points.get(i);\n+            Point p2 = points.get(i + 1);\n+\n+            System.out.println(\"\\n------------------\\n\");\n+\n+            System.out.printf(\"%s > %s > %s\\n\", p1, p2, p1);\n+            robot.glide(p1, p2);\n+            robot.waitForIdle();\n+            robot.glide(p2, p1);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            mouseAdapter.testEvents();\n+\n+            System.out.println(\"\\n------------------\\n\");\n+\n+            System.out.printf(\"%s > %s > %s\\n\", p2, p1, p2);\n+            robot.glide(p2, p1);\n+            robot.waitForIdle();\n+            robot.glide(p1, p2);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            mouseAdapter.testEvents();\n+        }\n+    }\n+\n+    private static java.util.List<Point> getBorderGlidePoints(Rectangle bounds) {\n+        java.util.List<Point> list = new ArrayList<>();\n+\n+        int d = 10;\n+\n+        \/\/ left\n+        list.add(new Point(bounds.x - d, bounds.y + bounds.height \/ 2));\n+        list.add(new Point(bounds.x + d, bounds.y + bounds.height \/ 2));\n+\n+        \/\/ right\n+        list.add(new Point(bounds.x + bounds.width - d, bounds.y + bounds.height \/ 2));\n+        list.add(new Point(bounds.x + bounds.width + d, bounds.y + bounds.height \/ 2));\n+\n+        \/\/ top\n+        list.add(new Point(bounds.x + bounds.width \/ 2, bounds.y - d));\n+        list.add(new Point(bounds.x + bounds.width \/ 2, bounds.y + d));\n+\n+        \/\/ bottom\n+        list.add(new Point(bounds.x + bounds.width \/ 2, bounds.y + bounds.height - d));\n+        list.add(new Point(bounds.x + bounds.width \/ 2, bounds.y + bounds.height + d));\n+\n+        return list;\n+    }\n+\n+    private static final class TestMouseAdapter extends MouseAdapter {\n+        private static final int THRESHOLD = 5;\n+        private volatile MouseEvent lastEnteredEvent = null;\n+        private volatile MouseEvent lastExitedEvent = null;\n+\n+        @Override\n+        public void mouseEntered(MouseEvent e) {\n+            System.out.println(\"MouseEntered \" + e);\n+            lastEnteredEvent = e;\n+        }\n+\n+        @Override\n+        public void mouseExited(MouseEvent e) {\n+            System.out.println(\"MouseExited \" + e);\n+            lastExitedEvent = e;\n+        }\n+\n+        public void testEvents() {\n+            if (lastEnteredEvent == null || lastExitedEvent == null) {\n+                throw new RuntimeException(\"Missing lastEnteredEvent or lastExitedEvent\");\n+            }\n+\n+            System.out.println(\"\\nTesting:\");\n+            System.out.println(lastEnteredEvent);\n+            System.out.println(lastExitedEvent);\n+            System.out.println();\n+\n+            int diffX = Math.abs(lastEnteredEvent.getX() - lastExitedEvent.getX());\n+            int diffScreenX = Math.abs(lastEnteredEvent.getY() - lastExitedEvent.getY());\n+            int diffY = Math.abs(lastEnteredEvent.getXOnScreen() - lastExitedEvent.getXOnScreen());\n+            int diffScreenY = Math.abs(lastEnteredEvent.getYOnScreen() - lastExitedEvent.getYOnScreen());\n+\n+            System.out.printf(\"THRESHOLD %d, diffX %d diffScreenX %d \" +\n+                            \"diffY %d diffScreenY %d\\n\",\n+                    THRESHOLD,\n+                    diffX, diffScreenX,\n+                    diffY, diffScreenY\n+            );\n+\n+            if (diffX > THRESHOLD\n+                || diffScreenX > THRESHOLD\n+                || diffY > THRESHOLD\n+                || diffScreenY > THRESHOLD) {\n+                throw new RuntimeException(\"Mouse enter vs exit event is too different\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MouseEnterTest.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4219344\n+ * @summary tests that WINDOW_ACTIVATED events are generated properly\n+ * @key headful\n+ * @library \/test\/jdk\/java\/awt\/regtesthelpers\n+ * @build Util\n+ * @run main WindowActivatedEventTest\n+ *\/\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.Window;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowAdapter;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class WindowActivatedEventTest {\n+\n+    static Robot robot;\n+    static Frame frame;\n+    static Dialog dialog;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+\n+        try {\n+            EventQueue.invokeAndWait(WindowActivatedEventTest::createAndShowGUI);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Util.clickOnComp(dialog, robot);\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            for (int i = 0; i < 3 ; i++) {\n+                clickAndCheck(frame);\n+                clickAndCheck(dialog);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                if (dialog != null) {\n+                    dialog.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void clickAndCheck(Window windowToFocus)\n+            throws InterruptedException, InvocationTargetException {\n+        Window oppositeWindow = (windowToFocus == frame) ? dialog : frame;\n+\n+        System.out.println(\"Clicking on \" + windowToFocus);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            if (windowToFocus.isFocused() || !oppositeWindow.isFocused()) {\n+                throw new RuntimeException(\"%s isFocused %b, %s isFocused %b\".formatted(\n+                        windowToFocus.getName(), windowToFocus.isFocused(),\n+                        oppositeWindow.getName(), oppositeWindow.isFocused()\n+                ));\n+            }\n+        });\n+\n+        WindowEventLogger windowLogger = WindowEventLogger.getFromWindow(windowToFocus);\n+        WindowEventLogger oppositeWindowLogger = WindowEventLogger.getFromWindow(oppositeWindow);\n+\n+        windowLogger.resetCounters();\n+        oppositeWindowLogger.resetCounters();\n+\n+        Util.clickOnComp(windowToFocus, robot);\n+\n+        robot.delay(500);\n+\n+        int windowActivatedCount = windowLogger.activatedCount.get();\n+        int windowDeactivatedCount = windowLogger.deactivatedCount.get();\n+        int oppositeWindowActivatedCount = oppositeWindowLogger.activatedCount.get();\n+        int oppositeWindowDeactivatedCount = oppositeWindowLogger.deactivatedCount.get();\n+\n+        if (windowActivatedCount != 1\n+                || windowDeactivatedCount != 0\n+                || oppositeWindowActivatedCount != 0\n+                || oppositeWindowDeactivatedCount != 1) {\n+            throw new RuntimeException(\n+                    \"Invalid activated\/deactivated count: %s (%d\/%d) \/ %s (%d\/%d)\"\n+                    .formatted(\n+                            windowToFocus.getName(),\n+                            windowActivatedCount,\n+                            windowDeactivatedCount,\n+                            oppositeWindow.getName(),\n+                            oppositeWindowActivatedCount,\n+                            oppositeWindowDeactivatedCount\n+                    ));\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new Frame(\"frame WindowActivatedEventTest\");\n+        dialog = new Dialog(frame, \"dialog WindowActivatedEventTest\");\n+\n+        frame.addWindowListener(new WindowEventLogger());\n+        dialog.addWindowListener(new WindowEventLogger());\n+\n+        frame.setBounds(400, 0, 200, 200);\n+        frame.setVisible(true);\n+\n+        dialog.setBounds(400, 200, 200, 200);\n+        dialog.setVisible(true);\n+    }\n+\n+    private static class WindowEventLogger extends WindowAdapter {\n+        final AtomicInteger activatedCount = new AtomicInteger(0);\n+        final AtomicInteger deactivatedCount = new AtomicInteger(0);\n+\n+        public void windowActivated(WindowEvent e) {\n+            activatedCount.incrementAndGet();\n+            System.out.println(e);\n+        }\n+\n+        public void windowDeactivated(WindowEvent e) {\n+            deactivatedCount.incrementAndGet();\n+            System.out.println(e);\n+        }\n+\n+        public void resetCounters() {\n+            activatedCount.set(0);\n+            deactivatedCount.set(0);\n+        }\n+\n+        public static WindowEventLogger getFromWindow(Window window) {\n+            return (WindowEventLogger) Arrays\n+                    .stream(window.getWindowListeners())\n+                    .filter(listener -> listener instanceof WindowEventLogger)\n+                    .findFirst().get();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/WindowActivatedEventTest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -1,38 +0,0 @@\n-<!--\n- Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<body>\n-Verify that Chinese full stop symbol can be entered in JTextArea with Pinyin input method (IM).\n-\n-This test is for OS X only. For other platforms please simply press \"Pass\".\n-\n-1. Go to \"System Preferences -> Keyboard -> Input Sources\" and add \"Pinyin – Traditional\" or \"Pinyin – Simplified\" IM from Chinese language group.\n-2. Set current IM to \"Pinyin\".\n-3. Set focus to the text area of the test and press \"dot\" character on the keyboard.\n-4. Set current IM to the IM used before \"Pinyin\" was set.\n-5. If \"。\" character is displayed in the text area, press \"Pass\", if \".\" character is displayed, press \"Fail\".\n-\n-<applet  code=\"bug8132503.class\" width=400 height=400><\/applet>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/im\/8132503\/bug8132503.html","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 8132503\n-   @summary [macosx] Chinese full stop symbol cannot be entered with Pinyin IM on OS X\n-   @author Anton Litvinov\n-   @run applet\/manual=yesno bug8132503.html\n- *\/\n-\n-import javax.swing.JApplet;\n-import javax.swing.JScrollPane;\n-import javax.swing.JTextArea;\n-import javax.swing.SwingUtilities;\n-\n-public class bug8132503 extends JApplet {\n-    @Override\n-    public void init() {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            @Override\n-            public void run() {\n-                JTextArea textArea = new JTextArea(\"Text area of the test.\", 40, 40);\n-                add(new JScrollPane(textArea));\n-            }\n-        });\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/im\/8132503\/bug8132503.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-<!--\n- Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<body>\n-Verify that Chinese comma can be entered in JTextField with Pinyin input method (IM).\n-\n-This test is for OS X only. For other platforms please simply press \"Pass\".\n-\n-1. Go to \"System Preferences -> Keyboard -> Input Sources\" and add \"Pinyin – Traditional\" or \"Pinyin – Simplified\" IM from Chinese language group.\n-2. Set current IM to \"Pinyin\".\n-3. Set focus to the text field of the test and press \"comma\" character on the keyboard.\n-4. Set current IM to the IM used before \"Pinyin\" was set.\n-5. If \"，\" character is displayed in the text area, press \"Pass\", if \",\" character is displayed, press \"Fail\".\n-\n-<applet  code=\"bug8148984.class\" width=400 height=400><\/applet>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/im\/8148984\/bug8148984.html","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8148984\n- * @summary Chinese Comma cannot be entered using Pinyin Input Method on OS X\n- * @author Dmitry Markov\n- * @run applet\/manual=yesno bug8148984.html\n- *\/\n-\n-import javax.swing.*;\n-\n-public class bug8148984 extends JApplet {\n-    @Override\n-    public void init() {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            @Override\n-            public void run() {\n-                JPanel panel = new JPanel();\n-                panel.add(new JLabel(\"Text field:\"));\n-                panel.add(new JTextField(20));\n-                add(panel);\n-            }\n-        });\n-    }\n-}\n-\n","filename":"test\/jdk\/java\/awt\/im\/8148984\/bug8148984.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-<!--\n- Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<body>\n-Verify that Caps Lock key works properly with Pinyin input method, (i.e. if \n-Caps Lock is pressed, input should be swithced to lowercase latin letters).\n-\n-This test is for OS X only. For other platforms please simply press \"Pass\".\n-\n-1. Go to \"System Preferences -> Keyboard -> Input Sources\" and add \"Pinyin – Traditional\" or \"Pinyin – Simplified\" IM from Chinese language group.\n-2. Set current IM to \"Pinyin\".\n-3. Set focus to the text field of the test and press Caps Lock key on the keyboard.\n-4. Press \"a\" character on the keyboard\n-5. If \"a\" character is displayed in the text field, press \"Pass\", if \"A\" character is displayed, press \"Fail\".\n-\n-<applet  code=\"bug8154816.class\" width=400 height=400><\/applet>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/im\/8154816\/bug8154816.html","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8154816\n- * @summary Caps Lock doesn't work as expected when using Pinyin Simplified input method\n- * @author Dmitry Markov\n- * @run applet\/manual=yesno bug8154816.html\n- *\/\n-\n-import javax.swing.*;\n-\n-public class bug8154816 extends JApplet {\n-    @Override\n-    public void init() {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            @Override\n-            public void run() {\n-                JPanel panel = new JPanel();\n-                panel.add(new JLabel(\"Text field:\"));\n-                panel.add(new JTextField(20));\n-                add(panel);\n-            }\n-        });\n-    }\n-}\n-\n","filename":"test\/jdk\/java\/awt\/im\/8154816\/bug8154816.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+import jtreg.SkippedException;\n+import sun.awt.OSInfo;\n+\n+\/*\n+ * @test\n+ * @bug 8154816\n+ * @summary Caps Lock doesn't work as expected when using Pinyin Simplified input method\n+ * @requires (os.family == \"mac\")\n+ * @modules java.desktop\/sun.awt\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException Util\n+ * @run main\/manual PinyinIMCapsTest\n+ *\/\n+\n+public class PinyinIMCapsTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            The test verifies if the Caps Lock key works properly with Pinyin\n+            input method, (i.e. if Caps Lock is pressed, input should be\n+            switched to lowercase latin letters).\n+\n+            Test settings:\n+            Go to \"System Preferences -> Keyboard -> Input Sources\" and\n+            add \"Pinyin – Traditional\" or \"Pinyin – Simplified\" IM from Chinese language group.\n+            Set current IM to \"Pinyin\".\n+\n+            1. Set focus to the text field shown below and press Caps Lock key on the keyboard.\n+            2. Press \"a\" character on the keyboard\n+            3. If \"a\" character is displayed in the text field, press \"Pass\",\n+               if \"A\" character is displayed, press \"Fail\".\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+            throw new SkippedException(\"This test is for MacOS only\");\n+        }\n+        PassFailJFrame.builder()\n+                      .title(\"Test Pinyin Input Method\")\n+                      .instructions(INSTRUCTIONS)\n+                      .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                      .columns(45)\n+                      .splitUIBottom(PinyinIMCapsTest::createUI)\n+                      .testTimeOut(10)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static JComponent createUI() {\n+        JPanel panel = new JPanel();\n+        JTextField input = new JTextField(20);\n+        panel.add(new JLabel(\"Text field:\"));\n+        panel.add(input);\n+        return panel;\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/im\/PinyinIMCapsTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+\n+\/*\n+ * @test\n+ * @bug 8148984\n+ * @summary Verify that Chinese comma can be entered in JTextField\n+ *          with Pinyin input method (IM) on OS X.\n+ * @requires (os.family == \"mac\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PinyinIMCommaTest\n+ *\/\n+\n+public class PinyinIMCommaTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test verifies if Chinese comma can be entered in JTextField\n+            with Pinyin input method (IM).\n+\n+            Test settings:\n+            Go to \"System Preferences -> Keyboard -> Input Sources\" and\n+            add \"Pinyin – Traditional\" or \"Pinyin – Simplified\" IM from Chinese language group.\n+            Set current IM to \"Pinyin\".\n+\n+            1. Set focus to the text field below and press \"comma\" character\n+               on the keyboard.\n+            2. Now change the current IM to the IM used before \"Pinyin\" or to \"U.S\".\n+               Press comma character again.\n+            3. You should notice a difference in the comma. Pinyin IM should output\n+             full width comma \"\\uff0c\" and the other IM should output a Latin comma \"\\u002c\".\n+\n+            If above is true press \"PASS\", if \"\\u002c\" character is displayed for Pinyin IM, press \"FAIL\".\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .title(\"Test Comma using Pinyin Input Method\")\n+                      .instructions(INSTRUCTIONS)\n+                      .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                      .columns(45)\n+                      .splitUIBottom(PinyinIMCommaTest::createUI)\n+                      .testTimeOut(10)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static JComponent createUI() {\n+        JPanel panel = new JPanel();\n+        panel.add(new JLabel(\"Text field:\"));\n+        panel.add(new JTextField(20));\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/im\/PinyinIMCommaTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+\n+\/*\n+ * @test\n+ * @bug 8132503\n+ * @summary [macosx] Chinese full stop symbol cannot be entered with Pinyin IM on OS X\n+ * @requires (os.family == \"mac\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PinyinIMFullstopTest\n+ *\/\n+\n+public class PinyinIMFullstopTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test verifies if Chinese full stop symbol can be entered in JTextArea\n+            with Pinyin input method (IM).\n+\n+            Test settings:\n+            Go to \"System Preferences -> Keyboard -> Input Sources\" and\n+            add \"Pinyin – Traditional\" or \"Pinyin – Simplified\" IM from Chinese language group.\n+            Set current IM to \"Pinyin\".\n+\n+            1. Set focus to the text area below and press \"dot\" character\n+               on the keyboard.\n+            2. Now change the current IM to the IM used before \"Pinyin\" or to \"U.S\".\n+               Press dot character again.\n+            3. You should notice a difference in the dot. Pinyin IM should output\n+               \"。\" and the other IM should output \".\"\n+\n+            If above is true press \"PASS\", if normal fullstop \".\" character is displayed\n+            for Pinyin IM, press \"FAIL\".\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .title(\"Test Dot using Pinyin Input Method\")\n+                      .instructions(INSTRUCTIONS)\n+                      .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                      .columns(45)\n+                      .splitUIBottom(PinyinIMFullstopTest::createUI)\n+                      .testTimeOut(10)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static JComponent createUI() {\n+        JPanel panel = new JPanel();\n+        JTextArea textArea = new JTextArea(5, 40);\n+        panel.add(new JLabel(\"Text Area:\"));\n+        panel.add(textArea);\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/im\/PinyinIMFullstopTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -58,0 +59,2 @@\n+    private static final AtomicBoolean reached1 = new AtomicBoolean();\n+    private static final AtomicBoolean reached2 = new AtomicBoolean();\n@@ -75,0 +78,1 @@\n+                reached1.set(true);\n@@ -87,0 +91,1 @@\n+                reached2.set(true);\n@@ -93,2 +98,2 @@\n-        awaitBlocked(thread1);\n-        awaitBlocked(thread2);\n+        awaitTrueAndBlocked(thread1, reached1);\n+        awaitTrueAndBlocked(thread2, reached2);\n@@ -111,2 +116,2 @@\n-    private static void awaitBlocked(Thread thread) throws InterruptedException {\n-        while (thread.getState() != Thread.State.BLOCKED) {\n+    private static void awaitTrueAndBlocked(Thread thread, AtomicBoolean flag) throws InterruptedException {\n+        while (!flag.get() || thread.getState() != Thread.State.BLOCKED) {\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreadDeadlocks.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -211,1 +211,1 @@\n-                    out.printf(\"%d: shutting down client now%n\", i, sleep);\n+                    out.printf(\"%d: shutting down client now%n\", i);\n@@ -307,1 +307,1 @@\n-                    out.printf(\"%d: shutting down client now%n\", i, sleep);\n+                    out.printf(\"%d: shutting down client now%n\", i);\n","filename":"test\/jdk\/java\/net\/httpclient\/AsyncShutdownNow.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,1 +195,1 @@\n-                out.printf(now() + \"%s:  Closing body due to assertion - %s\", error);\n+                out.printf(now() + \"%s:  Closing body due to assertion - %s\", step, error);\n@@ -279,1 +279,1 @@\n-                    out.printf(now() + \"%d: shutting down client%n\", i, sleep);\n+                    out.printf(now() + \"%d: shutting down client%n\", i);\n@@ -378,1 +378,1 @@\n-                    out.printf(now() + \"%d: shutting down client%n\", i, sleep);\n+                    out.printf(now() + \"%d: shutting down client%n\", i);\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientShutdown.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -185,1 +185,1 @@\n-                    out.printf(\"%d: shutting down client now%n\", i, sleep);\n+                    out.printf(\"%d: shutting down client now%n\", i);\n@@ -241,1 +241,1 @@\n-                    out.printf(\"%d: shutting down client now%n\", i, sleep);\n+                    out.printf(\"%d: shutting down client now%n\", i);\n","filename":"test\/jdk\/java\/net\/httpclient\/ShutdownNow.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -703,0 +703,2 @@\n+        final int DELAY = 100;\n+\n@@ -705,3 +707,3 @@\n-            tasks.add(p.schedule(r, 9, SECONDS));\n-            tasks.add(p.scheduleAtFixedRate(r, 9, 9, SECONDS));\n-            tasks.add(p.scheduleWithFixedDelay(r, 9, 9, SECONDS));\n+            tasks.add(p.schedule(r, DELAY, SECONDS));\n+            tasks.add(p.scheduleAtFixedRate(r, DELAY, DELAY, SECONDS));\n+            tasks.add(p.scheduleWithFixedDelay(r, DELAY, DELAY, SECONDS));\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ScheduledExecutorTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.test.lib.cds.CDSTestUtils;\n@@ -36,0 +35,1 @@\n+import jdk.test.lib.util.FileUtils;\n@@ -62,1 +62,1 @@\n-        CDSTestUtils.clone(new File(JDK_HOME), new File(TEMP_JDK_HOME.toString()));\n+        FileUtils.copyDirectory(Path.of(JDK_HOME), TEMP_JDK_HOME);\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/InconsistentEntries.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/javax\/net\/ssl\/templates\n+ * @bug 8311644\n+ * @summary Verify CertificateMessage alerts are correct to the TLS specs\n+ * @run main\/othervm -Djdk.tls.client.protocols=TLSv1.2 CertMsgCheck handshake_failure\n+ * @run main\/othervm -Djdk.tls.client.protocols=TLSv1.3 CertMsgCheck certificate_required\n+ *\n+ *\/\n+\n+public class CertMsgCheck {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Start server\n+        TLSBase.Server server = new TLSBase.ServerBuilder().setClientAuth(true).\n+            build();\n+\n+        \/\/ Initial client session\n+        TLSBase.Client client1 = new TLSBase.Client(true, false);\n+\n+        server.getSession(client1).getSessionContext();\n+        server.done();\n+\n+        var eList = server.getExceptionList();\n+        System.out.println(\"Exception list size is \" + eList.size());\n+\n+        for (Exception e : eList) {\n+            System.out.println(\"Looking at \" + e.getClass() + \" \" +\n+                e.getMessage());\n+            if (e.getMessage().contains(args[0])) {\n+                System.out.println(\"Found correct exception: \" + args[0] +\n+                    \" in \" + e.getMessage());\n+                return;\n+            } else {\n+                System.out.println(\"No \\\"\" + args[0] + \"\\\" found.\");\n+            }\n+        }\n+\n+        throw new Exception(\"Failed to find expected alert: \" + args[0]);\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLSession\/CertMsgCheck.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.util.HexFormat;\n@@ -42,6 +43,1 @@\n-    static void toHex(byte[] id) {\n-        for (byte b : id) {\n-            System.out.printf(\"%02X \", b);\n-        }\n-        System.out.println();\n-    }\n+    static HexFormat hex = HexFormat.of();\n@@ -55,1 +51,1 @@\n-            throw new Exception(\"Context was null\");\n+            throw new Exception(\"Context was null.  Handshake failure.\");\n@@ -62,2 +58,1 @@\n-        System.out.print(\"id = \");\n-        toHex(id);\n+        System.out.println(\"id = \" + hex.formatHex(id));\n@@ -67,2 +62,1 @@\n-            System.out.print(\"id = \");\n-            toHex(id);\n+            System.out.println(\"id = \" + hex.formatHex(id));\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLSession\/CheckSessionContext.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,10 +24,2 @@\n-import javax.net.ssl.SSLContext;\n-import javax.net.ssl.SSLServerSocket;\n-import javax.net.ssl.SSLServerSocketFactory;\n-import javax.net.ssl.SSLSession;\n-import javax.net.ssl.SSLSocket;\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.io.OutputStreamWriter;\n-import java.io.PrintWriter;\n+import javax.net.ssl.*;\n+import java.io.*;\n@@ -36,0 +28,4 @@\n+import java.security.KeyStore;\n+import java.security.cert.PKIXBuilderParameters;\n+import java.security.cert.X509CertSelector;\n+import java.util.ArrayList;\n@@ -37,0 +33,1 @@\n+import java.util.List;\n@@ -71,2 +68,2 @@\n-                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                        \"\/\" + keyStoreFile;\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                \"\/\" + keyStoreFile;\n@@ -74,2 +71,2 @@\n-                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                        \"\/\" + trustStoreFile;\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                \"\/\" + trustStoreFile;\n@@ -83,11 +80,6 @@\n-    byte[] read(SSLSocket sock) {\n-        try {\n-            BufferedReader reader = new BufferedReader(\n-                    new InputStreamReader(sock.getInputStream()));\n-            String s = reader.readLine();\n-            System.err.println(\"(read) \" + name + \": \" + s);\n-            return s.getBytes();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        return null;\n+    byte[] read(SSLSocket sock) throws Exception {\n+        BufferedReader reader = new BufferedReader(\n+            new InputStreamReader(sock.getInputStream()));\n+        String s = reader.readLine();\n+        System.err.println(\"(read) \" + name + \": \" + s);\n+        return s.getBytes();\n@@ -97,9 +89,13 @@\n-    public void write(SSLSocket sock, byte[] data) {\n-        try {\n-            PrintWriter out = new PrintWriter(\n-                    new OutputStreamWriter(sock.getOutputStream()));\n-            out.println(new String(data));\n-            out.flush();\n-            System.err.println(\"(write)\" + name + \": \" + new String(data));\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+    public void write(SSLSocket sock, byte[] data) throws Exception {\n+        PrintWriter out = new PrintWriter(\n+            new OutputStreamWriter(sock.getOutputStream()));\n+        out.println(new String(data));\n+        out.flush();\n+        System.err.println(\"(write)\" + name + \": \" + new String(data));\n+    }\n+\n+    private static KeyManager[] getKeyManager(boolean empty) throws Exception {\n+        FileInputStream fis = null;\n+        if (!empty) {\n+            fis = new FileInputStream(System.getProperty(\"test.src\", \".\/\") +\n+                \"\/\" + pathToStores + \"\/\" + keyStoreFile);\n@@ -107,0 +103,36 @@\n+        \/\/ Load the keystore\n+        char[] pwd = passwd.toCharArray();\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        ks.load(fis, pwd);\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"PKIX\");\n+        kmf.init(ks, pwd);\n+        return kmf.getKeyManagers();\n+    }\n+\n+    private static TrustManager[] getTrustManager(boolean empty) throws Exception {\n+        FileInputStream fis = null;\n+        if (!empty) {\n+            fis = new FileInputStream(System.getProperty(\"test.src\", \".\/\") +\n+                \"\/\" + pathToStores + \"\/\" + trustStoreFile);\n+        }\n+        \/\/ Load the keystore\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        ks.load(fis, passwd.toCharArray());\n+\n+        PKIXBuilderParameters pkixParams =\n+            new PKIXBuilderParameters(ks, new X509CertSelector());\n+\n+        \/\/ Explicitly set revocation based on the command-line\n+        \/\/ parameters, default false\n+        pkixParams.setRevocationEnabled(false);\n+\n+        \/\/ Register the PKIXParameters with the trust manager factory\n+        ManagerFactoryParameters trustParams =\n+            new CertPathTrustManagerParameters(pkixParams);\n+\n+        \/\/ Create the Trust Manager Factory using the PKIX variant\n+        \/\/ and initialize it with the parameters configured above\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(trustParams);\n+        return tmf.getTrustManagers();\n@@ -119,1 +151,0 @@\n-        boolean exit = false;\n@@ -121,0 +152,1 @@\n+        List<Exception> exceptionList = new ArrayList<>();\n@@ -122,1 +154,1 @@\n-        Server() {\n+        Server(ServerBuilder builder) {\n@@ -126,1 +158,3 @@\n-                sslContext = SSLContext.getDefault();\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(TLSBase.getKeyManager(builder.km),\n+                    TLSBase.getTrustManager(builder.tm), null);\n@@ -129,0 +163,1 @@\n+                ssock.setNeedClientAuth(builder.clientauth);\n@@ -131,1 +166,1 @@\n-                System.err.println(e.getMessage());\n+                System.err.println(\"Failure during server initialization\");\n@@ -140,1 +175,1 @@\n-                                serverPort);\n+                            serverPort);\n@@ -146,0 +181,1 @@\n+                            System.out.println(\"Caught \" + e.getMessage());\n@@ -147,0 +183,1 @@\n+                            exceptionList.add(e);\n@@ -157,0 +194,48 @@\n+        Server() {\n+            this(new ServerBuilder());\n+        }\n+\n+        \/**\n+         * @param km - true for an empty key manager\n+         * @param tm - true for an empty trust manager\n+         *\/\n+        Server(boolean km, boolean tm) {\n+            super();\n+            name = \"server\";\n+            try {\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(TLSBase.getKeyManager(km),\n+                    TLSBase.getTrustManager(tm), null);\n+                fac = sslContext.getServerSocketFactory();\n+                ssock = (SSLServerSocket) fac.createServerSocket(0);\n+                ssock.setNeedClientAuth(true);\n+                serverPort = ssock.getLocalPort();\n+            } catch (Exception e) {\n+                System.err.println(\"Failure during server initialization\");\n+                e.printStackTrace();\n+            }\n+\n+                \/\/ Thread to allow multiple clients to connect\n+                t = new Thread(() -> {\n+                    try {\n+                        while (true) {\n+                            System.err.println(\"Server ready on port \" +\n+                                serverPort);\n+                            SSLSocket c = (SSLSocket)ssock.accept();\n+                            clientMap.put(c.getPort(), c);\n+                            try {\n+                                write(c, read(c));\n+                            } catch (Exception e) {\n+                                System.out.println(\"Caught \" + e.getMessage());\n+                                e.printStackTrace();\n+                                exceptionList.add(e);\n+                            }\n+                        }\n+                    } catch (Exception ex) {\n+                        System.err.println(\"Server Down\");\n+                        ex.printStackTrace();\n+                    }\n+                });\n+                t.start();\n+            }\n+\n@@ -161,1 +246,1 @@\n-                t.interrupt();\n+                t.join(5000);\n@@ -170,1 +255,1 @@\n-        byte[] read(Client client) {\n+        byte[] read(Client client) throws Exception {\n@@ -179,1 +264,1 @@\n-        void write(Client client, byte[] data) {\n+        void write(Client client, byte[] data) throws Exception {\n@@ -185,1 +270,1 @@\n-        boolean writeRead(Client client, String s) {\n+        boolean writeRead(Client client, String s) throws Exception{\n@@ -201,0 +286,4 @@\n+\n+        List<Exception> getExceptionList() {\n+            return exceptionList;\n+        }\n@@ -203,0 +292,22 @@\n+    static class ServerBuilder {\n+        boolean km = false, tm = false, clientauth = false;\n+\n+        ServerBuilder setKM(boolean b) {\n+            km = b;\n+            return this;\n+        }\n+\n+        ServerBuilder setTM(boolean b) {\n+            tm = b;\n+            return this;\n+        }\n+\n+        ServerBuilder setClientAuth(boolean b) {\n+            clientauth = b;\n+            return this;\n+        }\n+\n+        Server build() {\n+            return new Server(this);\n+        }\n+    }\n@@ -209,1 +320,1 @@\n-\n+        boolean km, tm;\n@@ -211,0 +322,8 @@\n+            this(false, false);\n+        }\n+\n+        \/**\n+         * @param km - true sets an empty key manager\n+         * @param tm - true sets an empty trust manager\n+         *\/\n+        Client(boolean km, boolean tm) {\n@@ -212,6 +331,2 @@\n-            try {\n-                sslContext = SSLContext.getDefault();\n-            } catch (Exception e) {\n-                System.err.println(e.getMessage());\n-                e.printStackTrace();\n-            }\n+            this.km = km;\n+            this.tm = tm;\n@@ -224,1 +339,2 @@\n-                sslContext = SSLContext.getDefault();\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(TLSBase.getKeyManager(km), TLSBase.getTrustManager(tm), null);\n@@ -239,1 +355,1 @@\n-        byte[] read() {\n+        byte[] read() throws Exception {\n@@ -244,1 +360,1 @@\n-        void write(byte[] data) {\n+        void write(byte[] data) throws Exception {\n@@ -247,1 +363,1 @@\n-        void write(String s) {\n+        void write(String s) throws Exception {\n@@ -253,1 +369,1 @@\n-        boolean writeRead(Server server, String s) {\n+        boolean writeRead(Server server, String s) throws Exception {\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/TLSBase.java","additions":172,"deletions":56,"binary":false,"changes":228,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4187996\n+ * @summary Tests that Metal submenus overlap menu\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4187996\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.UIManager;\n+\n+public class bug4187996 {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        Open the menu \"Menu\", then \"Submenu\".\n+        The submenu should be top-aligned with the menu,\n+        and slightly overlap it horizontally. Otherwise test fails.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"bug4187996 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(bug4187996::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4187996\");\n+        JMenu submenu = new JMenu(\"Submenu\");\n+        submenu.add(new JMenuItem(\"Sub 1\"));\n+        submenu.add(new JMenuItem(\"Sub 2\"));\n+\n+        JMenu menu = new JMenu(\"Menu\");\n+        menu.add(submenu);\n+        menu.add(new JMenuItem(\"Item 1\"));\n+        menu.add(new JMenuItem(\"Item 2\"));\n+\n+        JMenuBar mbar = new JMenuBar();\n+        mbar.add(menu);\n+        frame.setJMenuBar(mbar);\n+        frame.setSize(300, 100);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug4187996.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6471949\n+ * @summary JMenu should stay selected after escape is pressed\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug6471949\n+*\/\n+\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug6471949 {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        Test the menu and its submenus for different LaF:\n+\n+        Click on \"Menu\" and then click on \"Inner\" submenu\n+        and then click on \"One more\" submenu.\n+\n+        For Metal, Nimbus and Aqua Laf the Escape key hides the last open submenu,\n+        Press Esc till the last menu \"Inner\" is closed.\n+        If the last menu is closed then the menu button (in menubar) gets unselected.\n+\n+        For Windows Laf the Escape key hides the last open submenu\n+        if the last menu is closed then the menu button remains selected,\n+        until the Escape key is pressed again or any other key letter pressed.\n+\n+        For GTK and Motif menu, all open submenus must hide when the Escape key is pressed.\n+\n+        If everything works as described, the test passes and fails otherwise.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug6471949 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(bug6471949::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+\n+        PassFailJFrame.log(\"Menu.cancelMode = \" +\n+                           UIManager.getString(\"Menu.cancelMode\"));\n+        PassFailJFrame.log(\"Menu.preserveTopLevelSelection = \" +\n+                            UIManager.getBoolean(\"Menu.preserveTopLevelSelection\"));\n+        PassFailJFrame.log(\"\");\n+\n+        JFrame frame = new JFrame(\"bug6471949\");\n+        JMenuBar bar = new JMenuBar();\n+        JMenu menu = new JMenu(\"Menu\");\n+        menu.setMnemonic('m');\n+\n+        JMenuItem item = new JMenuItem(\"Item\");\n+        menu.add(item);\n+        JMenu inner = new JMenu(\"Inner\");\n+        inner.add(new JMenuItem(\"Test\"));\n+        JMenu oneMore = new JMenu(\"One more\");\n+        oneMore.add(new JMenuItem(\"Lala\"));\n+        inner.add(oneMore);\n+        menu.add(inner);\n+\n+        JMenu lafMenu = new JMenu(\"Change LaF\");\n+\n+        UIManager.LookAndFeelInfo[] lafs = UIManager.getInstalledLookAndFeels();\n+        for (final UIManager.LookAndFeelInfo lafInfo : lafs) {\n+            JMenuItem lafItem = new JMenuItem(lafInfo.getName());\n+            lafItem.addActionListener(new ActionListener() {\n+                public void actionPerformed(ActionEvent e) {\n+                    setLaf(frame, lafInfo.getClassName());\n+                }\n+            });\n+            lafMenu.add(lafItem);\n+        }\n+\n+        frame.setJMenuBar(bar);\n+        bar.add(menu);\n+        bar.add(lafMenu);\n+\n+        JTextArea field = new JTextArea();\n+        frame.add(field);\n+        field.requestFocusInWindow();\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    private static void setLaf(JFrame frame, String laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf);\n+            SwingUtilities.updateComponentTreeUI(frame);\n+            PassFailJFrame.log(\"Menu.cancelMode = \" +\n+                               UIManager.getString(\"Menu.cancelMode\"));\n+            PassFailJFrame.log(\"Menu.preserveTopLevelSelection = \" +\n+                               UIManager.getBoolean(\"Menu.preserveTopLevelSelection\"));\n+            PassFailJFrame.log(\"\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug6471949.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+* @test\n+* @bug 6513492\n+* @summary Escape key needs to be pressed twice to remove focus from an empty\/diabled Menu.\n+* @library \/java\/awt\/regtesthelpers\n+* @build PassFailJFrame\n+* @run main\/manual bug6513492\n+*\/\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug6513492 {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        Test Menu for different LaF:\n+\n+        * For Windows Laf:\n+            Click the editor\n+            Click EmpyMenu, press Escape -> focus must go to the editor\n+            Click EmpyMenu, press right arrow button, press Escape -> focus must go to the editor\n+            Click SubMenuTest, highlight the first disabled submenu, press Escape\n+                -> focus must stay at the topLevelMenu\n+\n+        * For Metal, Nimbus and Aqua Laf\n+            Click the editor\n+            Click SubMenuTest, highlight the EmptySubmenu, press Escape -> focus must go to the editor\n+            Click SubMenuTest, highlight the EnabledItem, press Escape -> focus must go to the editor\n+\n+        * For GTK and Motif\n+            Click the editor\n+            Open any menu or submenu, press Escape -> focus must go to the editor.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug6513492 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(bug6513492::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createTestUI() {\n+        PassFailJFrame.log(\"Menu.cancelMode = \" +\n+                            UIManager.getString(\"Menu.cancelMode\"));\n+        PassFailJFrame.log(\"Menu.preserveTopLevelSelection = \" +\n+                            UIManager.getBoolean(\"Menu.preserveTopLevelSelection\"));\n+        PassFailJFrame.log(\"\");\n+\n+        JFrame frame = new JFrame(\"bug6513492\");\n+        JMenuBar bar = new JMenuBar();\n+        bar.add(new JMenu(\"EmptyMenu\"));\n+\n+        JMenu disabledMenu = new JMenu(\"NotEmpyButDisabled\");\n+        disabledMenu.add(new JMenuItem(\"item\"));\n+        disabledMenu.setEnabled(false);\n+        bar.add(disabledMenu);\n+\n+        JMenu menu = new JMenu(\"SubMenuTest\");\n+        JMenu disabledSubmenu = new JMenu(\"Submenu\");\n+        disabledSubmenu.add(new JMenuItem(\"item\"));\n+        disabledSubmenu.setEnabled(false);\n+        menu.add(disabledSubmenu);\n+\n+        JMenu enabledSubmenu = new JMenu(\"Submenu\");\n+        enabledSubmenu.add(new JMenuItem(\"item\"));\n+        menu.add(enabledSubmenu);\n+\n+        JMenu emptySubmenu = new JMenu(\"EmptySubmenu\");\n+        menu.add(emptySubmenu);\n+\n+        menu.add(new JMenuItem(\"EnabledItem\"));\n+        JMenuItem item = new JMenuItem(\"DisabledItem\");\n+        item.setEnabled(false);\n+        menu.add(item);\n+        bar.add(menu);\n+\n+        JMenu lafMenu = new JMenu(\"Change LaF\");\n+\n+        UIManager.LookAndFeelInfo[] lafs = UIManager.getInstalledLookAndFeels();\n+        for (final UIManager.LookAndFeelInfo lafInfo : lafs) {\n+            JMenuItem lafItem = new JMenuItem(lafInfo.getName());\n+            lafItem.addActionListener(new ActionListener() {\n+                public void actionPerformed(ActionEvent e) {\n+                    setLaf(frame, lafInfo.getClassName());\n+                }\n+            });\n+            lafMenu.add(lafItem);\n+        }\n+\n+        frame.setJMenuBar(bar);\n+        bar.add(menu);\n+        bar.add(lafMenu);\n+\n+        JTextArea field = new JTextArea(\"The editor\");\n+        frame.add(field);\n+        field.requestFocusInWindow();\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    private static void setLaf(JFrame frame, String laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf);\n+            SwingUtilities.updateComponentTreeUI(frame);\n+            PassFailJFrame.log(\"Menu.cancelMode = \" +\n+                               UIManager.getString(\"Menu.cancelMode\"));\n+            PassFailJFrame.log(\"Menu.preserveTopLevelSelection = \" +\n+                                UIManager.getBoolean(\"Menu.preserveTopLevelSelection\"));\n+            PassFailJFrame.log(\"\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/bug6513492.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -1,32 +0,0 @@\n-<!--\n- Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-    <head>\n-        <title>High resolution icon test, bug ID 8024926<\/title>\n-    <\/head>\n-    <body>\n-    <applet CODE=\"bug8024926.class\" WIDTH=300 HEIGHT=100><\/applet>\n-    <p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/javax\/swing\/JOptionPane\/8024926\/bug8024926.html","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,212 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.awt.BorderLayout;\n-import java.awt.Dialog;\n-import java.awt.EventQueue;\n-import java.awt.Frame;\n-import java.awt.TextArea;\n-import javax.swing.JApplet;\n-import javax.swing.JOptionPane;\n-\n-import jdk.test.lib.Platform;\n-\n-\/**\n- * @test\n- * @bug 8024926 8040279\n- * @summary [macosx] AquaIcon HiDPI support\n- * @author Alexander Scherbatiy\n- * @library \/test\/lib\n- * @build jdk.test.lib.Platform\n- * @run applet\/manual=yesno bug8024926.html\n- *\/\n-public class bug8024926 extends JApplet {\n-    \/\/Declare things used in the test, like buttons and labels here\n-\n-    public void init() {\n-        \/\/Create instructions for the user here, as well as set up\n-        \/\/ the environment -- set the layout manager, add buttons,\n-        \/\/ etc.\n-        this.setLayout(new BorderLayout());\n-\n-\n-        if (Platform.isOSX()) {\n-            String[] instructions = {\n-                \"Verify that high resolution system icons are used\"\n-                + \" in JOptionPane on HiDPI displays.\",\n-                \"1) Run the test on Retina display or enable the Quartz Debug\"\n-                + \" and select the screen resolution with (HiDPI) label\",\n-                \"2) Check that the error icon on the JOptionPane is smooth\",\n-                \"If so, press PASS, else press FAIL.\"\n-            };\n-            Sysout.createDialogWithInstructions(instructions);\n-\n-        } else {\n-            String[] instructions = {\n-                \"This test is not applicable to the current platform. Press PASS.\"\n-            };\n-            Sysout.createDialogWithInstructions(instructions);\n-        }\n-\n-\n-    }\/\/End  init()\n-\n-    public void start() {\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize(200, 200);\n-        setVisible(true);\n-        validate();\n-        EventQueue.invokeLater(new Runnable() {\n-\n-            public void run() {\n-                createAndShowGUI();\n-            }\n-        });\n-    }\/\/ start()\n-\n-    \/\/The rest of this class is the actions which perform the test...\n-    \/\/Use Sysout.println to communicate with the user NOT System.out!!\n-    \/\/Sysout.println (\"Something Happened!\");\n-    private static void createAndShowGUI() {\n-        JOptionPane.showMessageDialog(null,\n-                \"Icons should have high resolution.\",\n-                \"High resolution icon test.\",\n-                JOptionPane.ERROR_MESSAGE);\n-    }\n-}\/\/ class BlockedWindowTest\n-\n-\/* Place other classes related to the test after this line *\/\n-\/**\n- * **************************************************\n- * Standard Test Machinery DO NOT modify anything below -- it's a standard chunk\n- * of code whose purpose is to make user interaction uniform, and thereby make\n- * it simpler to read and understand someone else's test.\n- * **************************************************\n- *\/\n-\/**\n- * This is part of the standard test machinery. It creates a dialog (with the\n- * instructions), and is the interface for sending text messages to the user. To\n- * print the instructions, send an array of strings to Sysout.createDialog\n- * WithInstructions method. Put one line of instructions per array entry. To\n- * display a message for the tester to see, simply call Sysout.println with the\n- * string to be displayed. This mimics System.out.println but works within the\n- * test harness as well as standalone.\n- *\/\n-class Sysout {\n-\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions(String[] instructions) {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        dialog.printInstructions(instructions);\n-        dialog.setVisible(true);\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void createDialog() {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        String[] defInstr = {\"Instructions will appear here. \", \"\"};\n-        dialog.printInstructions(defInstr);\n-        dialog.setVisible(true);\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void printInstructions(String[] instructions) {\n-        dialog.printInstructions(instructions);\n-    }\n-\n-    public static void println(String messageIn) {\n-        dialog.displayMessage(messageIn);\n-    }\n-}\/\/ Sysout  class\n-\n-\/**\n- * This is part of the standard test machinery. It provides a place for the test\n- * instructions to be displayed, and a place for interactive messages to the\n- * user to be displayed. To have the test instructions displayed, see Sysout. To\n- * have a message to the user be displayed, see Sysout. Do not call anything in\n- * this dialog directly.\n- *\/\n-class TestDialog extends Dialog {\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog(Frame frame, String name) {\n-        super(frame, name);\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea(\"\", 15, maxStringLength, scrollBoth);\n-        add(\"North\", instructionsText);\n-\n-        messageText = new TextArea(\"\", 5, maxStringLength, scrollBoth);\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions(String[] instructions) {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText(\"\");\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for (int i = 0; i < instructions.length; i++) {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i];\n-            while (remainingStr.length() > 0) {\n-                \/\/if longer than max then chop off first max chars to print\n-                if (remainingStr.length() >= maxStringLength) {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.lastIndexOf(' ', maxStringLength - 1);\n-\n-                    if (posOfSpace <= 0) {\n-                        posOfSpace = maxStringLength - 1;\n-                    }\n-\n-                    printStr = remainingStr.substring(0, posOfSpace + 1);\n-                    remainingStr = remainingStr.substring(posOfSpace + 1);\n-                } \/\/else just print\n-                else {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append(printStr + \"\\n\");\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage(String messageIn) {\n-        messageText.append(messageIn + \"\\n\");\n-        System.out.println(messageIn);\n-    }\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/javax\/swing\/JOptionPane\/8024926\/bug8024926.java","additions":0,"deletions":212,"binary":false,"changes":212,"status":"deleted"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.awt.BorderLayout;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import javax.swing.JDialog;\n+import javax.swing.JOptionPane;\n+import javax.swing.SwingUtilities;\n+\n+\/**\n+ * @test\n+ * @bug 8024926 8040279\n+ * @requires (os.family == \"mac\")\n+ * @summary [macosx] AquaIcon HiDPI support\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug8024926\n+ *\/\n+public class bug8024926 {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+                Verify that high resolution system icons are used\n+                 in JOptionPane on HiDPI displays.\n+                1) Run the test on Retina display or enable the Quartz Debug\n+                 and select the screen resolution with (HiDPI) label.\n+                \"2) Check that the error icon on the JOptionPane is smooth.\n+                \"If so, press PASS, else press FAIL.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+         PassFailJFrame.builder()\n+                .title(\"AquaIcon HIDPI Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(10)\n+                .columns(35)\n+                .testUI(bug8024926::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JDialog createTestUI() {\n+        JOptionPane optionPane = new JOptionPane(\"High resolution icon test\");\n+        optionPane.setMessage(\"Icons should have high resolutions\");\n+        optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);\n+        JDialog dialog = new JDialog();\n+        dialog.setContentPane(optionPane);\n+        dialog.pack();\n+        return dialog;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JOptionPane\/bug8024926.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -52,1 +52,1 @@\n-                ON ALL PLATFORMS\n+                ON ALL PLATFORMS except macos where pt.6 is not applicable\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/bug4666224.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.util.function.Supplier;\n@@ -42,0 +43,3 @@\n+    private static final String KO_OVERFLOW = \"Some records have not been disposed!\";\n+    private static final String KO_UNDERFLOW = \"Disposed more records than were added!\";\n+\n@@ -43,2 +47,1 @@\n-        TestDisposerRace test = new TestDisposerRace();\n-        test.run();\n+        new TestDisposerRace().run();\n@@ -48,0 +51,1 @@\n+            System.err.println(KO_OVERFLOW); \/\/ In case the next line fails to allocate due to OOME\n@@ -52,0 +56,4 @@\n+    interface ThrowingRunnable<E extends Exception> {\n+        void run() throws E;\n+    }\n+\n@@ -59,3 +67,4 @@\n-            SwingUtilities.invokeAndWait(Disposer::pollRemove);\n-            if (i % 10 == 0) {\n-                \/\/ Adding records will race with the diposer trying to remove them\n+            retryOnOOME(() -> SwingUtilities.invokeAndWait(Disposer::pollRemove));\n+\n+            \/\/ Adding records will race with the diposer trying to remove them\n+            if (i % 10 == 0)\n@@ -63,1 +72,0 @@\n-            }\n@@ -66,1 +74,1 @@\n-        Disposer.addObjectRecord(new Object(), new FinalDisposerRecord());\n+        retryOnOOME(() -> Disposer.addObjectRecord(new Object(), new FinalDisposerRecord()));\n@@ -75,1 +83,26 @@\n-            throw new RuntimeException(\"Disposed more records than were added\");\n+            throw new RuntimeException(KO_UNDERFLOW);\n+        }\n+    }\n+\n+    private static <T> T retryOnOOME(Supplier<T> allocator) {\n+        for(;;) {\n+            try {\n+                return allocator.get();\n+            } catch (OutOfMemoryError ignored1) {\n+                try {\n+                    Thread.sleep(1); \/\/ Give GC a little chance to run\n+                } catch (InterruptedException ignored2) {}\n+            }\n+        }\n+    }\n+\n+    private static <E extends Exception> void retryOnOOME(ThrowingRunnable<E> tr) throws E {\n+        for(;;) {\n+            try {\n+                tr.run();\n+                break;\n+            } catch (OutOfMemoryError ignored1) {\n+                try {\n+                    Thread.sleep(1); \/\/ Give GC a little chance to run\n+                } catch (InterruptedException ignored2) {}\n+            }\n@@ -82,1 +115,1 @@\n-        recordsCount.addAndGet(count);\n+        MyDisposerRecord disposerRecord = retryOnOOME(MyDisposerRecord::new);\n@@ -84,3 +117,5 @@\n-        MyDisposerRecord disposerRecord = new MyDisposerRecord();\n-        for (int i = 0; i < count; i++) {\n-            Disposer.addObjectRecord(new Object(), disposerRecord);\n+        while(count > 0) {\n+            recordsCount.incrementAndGet(); \/\/ pre-add to make sure it doesn't go negative\n+            var o = retryOnOOME(Object::new);\n+            retryOnOOME(() -> Disposer.addObjectRecord(o, disposerRecord));\n+            --count;\n@@ -109,1 +144,0 @@\n-        final List<Object> leak = new LinkedList<>();\n@@ -111,0 +145,1 @@\n+            final List<Object> leak = new LinkedList<>();\n","filename":"test\/jdk\/sun\/java2d\/Disposer\/TestDisposerRace.java","additions":48,"deletions":13,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-            if (!expectedExMsg.equals(she.getMessage())) {\n+            if (!she.getMessage().endsWith(expectedExMsg)) {\n@@ -80,1 +80,1 @@\n-            if (!expectedExMsg.equals(she.getMessage())) {\n+            if (!she.getMessage().endsWith(expectedExMsg)) {\n","filename":"test\/jdk\/sun\/security\/ssl\/DHKeyExchange\/LegacyDHEKeyExchange.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,361 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8350830\n+ * @summary TLS 1.2 Client session resumption having ServerNameIndication\n+ * @modules java.base\/sun.security.tools.keytool\n+ * @run main\/othervm -Djavax.net.debug=all ResumeClientTLS12withSNI\n+ *\/\n+\n+import javax.net.ssl.*;\n+import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n+import java.io.*;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.util.*;\n+\n+public class ResumeClientTLS12withSNI {\n+\n+    \/*\n+     * Enables logging of the SSLEngine operations.\n+     *\/\n+    private static final boolean logging = true;\n+\n+    private static SSLContext sslc;\n+\n+    private SSLEngine clientEngine; \/\/ client Engine\n+    private ByteBuffer clientOut; \/\/ write side of clientEngine\n+    private ByteBuffer clientIn; \/\/ read side of clientEngine\n+\n+    private SSLEngine serverEngine; \/\/ server Engine\n+    private ByteBuffer serverOut; \/\/ write side of serverEngine\n+    private ByteBuffer serverIn; \/\/ read side of serverEngine\n+\n+    \/*\n+     * For data transport, this example uses local ByteBuffers.\n+     *\/\n+    private ByteBuffer cTOs; \/\/ \"reliable\" transport client->server\n+    private ByteBuffer sTOc; \/\/ \"reliable\" transport server->client\n+\n+    \/*\n+     * The following is to set up the keystores.\n+     *\/\n+    private static final String keyFilename = \"ks_san.p12\";\n+    private static final String trustFilename = \"ks_san.p12\";\n+    private static final char[] passphrase = \"123456\".toCharArray();\n+\n+    private static final String HOST_NAME = \"arf.yak.foo.localhost123456.localhost123456.localhost123456.localhost123456.localhost123456.localhost123456.\"\n+            + \"localhost123456.localhost123456.localhost123456.localhost123456.localhost123456.localhost123456\";\n+    private static final SNIMatcher SNI_MATCHER = SNIHostName.createSNIMatcher(\"arf\\\\.yak\\\\.foo.*\");\n+\n+    \/*\n+     * Main entry point for this test.\n+     *\/\n+    public static void main(String args[]) throws Exception {\n+        Files.deleteIfExists(Path.of(keyFilename));\n+\n+        sun.security.tools.keytool.Main.main(\n+                (\"-keystore \" + keyFilename + \" -storepass 123456 -keypass 123456 -dname\"\n+                 + \" CN=test\" + \" -alias ks_san -genkeypair -keyalg rsa -ext \"\n+                 + \"san=dns:localhost123.localhost123.localhost123.localhost123.\"\n+                 + \"localhost123.localhost123.localhost123.localhost123.localhost123.\"\n+                 + \"localhost123.localhost123.localhost123.localhost123.localhost123.\"\n+                 + \"localhost123.localhost123.localhost123.localhost123.localhost123.com,\"\n+                 + \"dns:localhost456\").split(\" \"));\n+        final ResumeClientTLS12withSNI clientSession = new ResumeClientTLS12withSNI(\"TLSv1.2\");\n+        for (int i = 0; i < 2; i++) {\n+            clientSession.runTest();\n+        }\n+\n+        Files.deleteIfExists(Path.of(keyFilename));\n+    }\n+\n+    public ResumeClientTLS12withSNI(final String sslProtocol) throws Exception {\n+\n+        KeyManagerFactory kmf = makeKeyManagerFactory(keyFilename,\n+                passphrase);\n+        TrustManagerFactory tmf = makeTrustManagerFactory(trustFilename,\n+                passphrase);\n+\n+        SSLContext sslCtx = SSLContext.getInstance(sslProtocol);\n+\n+        sslCtx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+\n+        sslc = sslCtx;\n+    }\n+\n+    private static KeyManagerFactory makeKeyManagerFactory(String ksPath,\n+                                                           char[] pass) throws GeneralSecurityException, IOException {\n+        KeyManagerFactory kmf;\n+        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n+\n+        try (FileInputStream fsIn = new FileInputStream(ksPath)) {\n+            ks.load(fsIn, pass);\n+            kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+            kmf.init(ks, pass);\n+        }\n+        return kmf;\n+    }\n+\n+    private static TrustManagerFactory makeTrustManagerFactory(String tsPath,\n+                                                               char[] pass) throws GeneralSecurityException, IOException {\n+        TrustManagerFactory tmf;\n+        KeyStore ts = KeyStore.getInstance(\"JKS\");\n+\n+        try (FileInputStream fsIn = new FileInputStream(tsPath)) {\n+            ts.load(fsIn, pass);\n+            tmf = TrustManagerFactory.getInstance(\"SunX509\");\n+            tmf.init(ts);\n+        }\n+        return tmf;\n+    }\n+\n+    \/*\n+     * Run the test.\n+     *\n+     * Sit in a tight loop, both engines calling wrap\/unwrap regardless\n+     * of whether data is available or not. We do this until both engines\n+     * report back they are closed.\n+     *\n+     * The main loop handles all of the I\/O phases of the SSLEngine's\n+     * lifetime:\n+     *\n+     * initial handshaking\n+     * application data transfer\n+     * engine closing\n+     *\n+     *\/\n+    private void runTest() throws Exception {\n+        boolean dataDone = false;\n+\n+        createSSLEngines();\n+        createBuffers();\n+\n+        SSLEngineResult clientResult; \/\/ results from client's last operation\n+        SSLEngineResult serverResult; \/\/ results from server's last operation\n+\n+        \/*\n+         * Examining the SSLEngineResults could be much more involved,\n+         * and may alter the overall flow of the application.\n+         *\n+         * For example, if we received a BUFFER_OVERFLOW when trying\n+         * to write to the output pipe, we could reallocate a larger\n+         * pipe, but instead we wait for the peer to drain it.\n+         *\/\n+        while (!isEngineClosed(clientEngine) ||\n+                !isEngineClosed(serverEngine)) {\n+\n+            log(\"================\");\n+\n+            clientResult = clientEngine.wrap(clientOut, cTOs);\n+            log(\"client wrap: \", clientResult);\n+            runDelegatedTasks(clientResult, clientEngine);\n+\n+            serverResult = serverEngine.wrap(serverOut, sTOc);\n+            log(\"server wrap: \", serverResult);\n+            runDelegatedTasks(serverResult, serverEngine);\n+\n+            cTOs.flip();\n+            sTOc.flip();\n+\n+            log(\"-------\");\n+\n+            clientResult = clientEngine.unwrap(sTOc, clientIn);\n+            log(\"client unwrap: \", clientResult);\n+            runDelegatedTasks(clientResult, clientEngine);\n+\n+            serverResult = serverEngine.unwrap(cTOs, serverIn);\n+            log(\"server unwrap: \", serverResult);\n+            runDelegatedTasks(serverResult, serverEngine);\n+\n+            cTOs.compact();\n+            sTOc.compact();\n+\n+            \/*\n+             * After we've transfered all application data between the client\n+             * and server, we close the clientEngine's outbound stream.\n+             * This generates a close_notify handshake message, which the\n+             * server engine receives and responds by closing itself.\n+             *\n+             * In normal operation, each SSLEngine should call\n+             * closeOutbound(). To protect against truncation attacks,\n+             * SSLEngine.closeInbound() should be called whenever it has\n+             * determined that no more input data will ever be\n+             * available (say a closed input stream).\n+             *\/\n+            if (!dataDone && (clientOut.limit() == serverIn.position()) &&\n+                    (serverOut.limit() == clientIn.position())) {\n+\n+                \/*\n+                 * A sanity check to ensure we got what was sent.\n+                 *\/\n+                checkTransfer(serverOut, clientIn);\n+                checkTransfer(clientOut, serverIn);\n+\n+                log(\"\\tClosing clientEngine's *OUTBOUND*...\");\n+                clientEngine.closeOutbound();\n+                \/\/ serverEngine.closeOutbound();\n+                dataDone = true;\n+            }\n+        }\n+    }\n+\n+    \/*\n+     * Using the SSLContext created during object creation,\n+     * create\/configure the SSLEngines we'll use for this test.\n+     *\/\n+    private void createSSLEngines() throws Exception {\n+        \/*\n+         * Configure the serverEngine to act as a server in the SSL\/TLS\n+         * handshake.\n+         *\/\n+        serverEngine = sslc.createSSLEngine();\n+        serverEngine.setUseClientMode(false);\n+        serverEngine.setNeedClientAuth(false);\n+        SSLParameters servSSLParams = serverEngine.getSSLParameters();\n+        servSSLParams.setSNIMatchers(List.of(SNI_MATCHER));\n+        serverEngine.setSSLParameters(servSSLParams);\n+\n+        \/*\n+         * Similar to above, but using client mode instead.\n+         *\/\n+        clientEngine = sslc.createSSLEngine(HOST_NAME, 80);\n+        clientEngine.setUseClientMode(true);\n+        SSLParameters cliSSLParams = clientEngine.getSSLParameters();\n+        clientEngine.setSSLParameters(cliSSLParams);\n+    }\n+\n+    \/*\n+     * Create and size the buffers appropriately.\n+     *\/\n+    private void createBuffers() {\n+\n+        \/*\n+         * We'll assume the buffer sizes are the same\n+         * between client and server.\n+         *\/\n+        SSLSession session = clientEngine.getSession();\n+        int appBufferMax = session.getApplicationBufferSize();\n+        int netBufferMax = session.getPacketBufferSize();\n+\n+        \/*\n+         * We'll make the input buffers a bit bigger than the max needed\n+         * size, so that unwrap()s following a successful data transfer\n+         * won't generate BUFFER_OVERFLOWS.\n+         *\n+         * We'll use a mix of direct and indirect ByteBuffers for\n+         * tutorial purposes only. In reality, only use direct\n+         * ByteBuffers when they give a clear performance enhancement.\n+         *\/\n+        clientIn = ByteBuffer.allocate(appBufferMax + 50);\n+        serverIn = ByteBuffer.allocate(appBufferMax + 50);\n+\n+        cTOs = ByteBuffer.allocateDirect(netBufferMax);\n+        sTOc = ByteBuffer.allocateDirect(netBufferMax);\n+\n+        clientOut = ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes());\n+        serverOut = ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes());\n+    }\n+\n+    \/*\n+     * If the result indicates that we have outstanding tasks to do,\n+     * go ahead and run them in this thread.\n+     *\/\n+    private static void runDelegatedTasks(SSLEngineResult result,\n+                                          SSLEngine engine) throws Exception {\n+\n+        if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n+            Runnable runnable;\n+            while ((runnable = engine.getDelegatedTask()) != null) {\n+                log(\"\\trunning delegated task...\");\n+                runnable.run();\n+            }\n+            HandshakeStatus hsStatus = engine.getHandshakeStatus();\n+            if (hsStatus == HandshakeStatus.NEED_TASK) {\n+                throw new Exception(\n+                        \"handshake shouldn't need additional tasks\");\n+            }\n+            log(\"\\tnew HandshakeStatus: \" + hsStatus);\n+        }\n+    }\n+\n+    private static boolean isEngineClosed(SSLEngine engine) {\n+        return (engine.isOutboundDone() && engine.isInboundDone());\n+    }\n+\n+    \/*\n+     * Simple check to make sure everything came across as expected.\n+     *\/\n+    private static void checkTransfer(ByteBuffer a, ByteBuffer b)\n+            throws Exception {\n+        a.flip();\n+        b.flip();\n+\n+        if (!a.equals(b)) {\n+            throw new Exception(\"Data didn't transfer cleanly\");\n+        } else {\n+            log(\"\\tData transferred cleanly\");\n+        }\n+\n+        a.position(a.limit());\n+        b.position(b.limit());\n+        a.limit(a.capacity());\n+        b.limit(b.capacity());\n+    }\n+\n+    \/*\n+     * Logging code\n+     *\/\n+    private static boolean resultOnce = true;\n+\n+    private static void log(String str, SSLEngineResult result) {\n+        if (!logging) {\n+            return;\n+        }\n+        if (resultOnce) {\n+            resultOnce = false;\n+            System.out.println(\"The format of the SSLEngineResult is: \\n\" +\n+                    \"\\t\\\"getStatus() \/ getHandshakeStatus()\\\" +\\n\" +\n+                    \"\\t\\\"bytesConsumed() \/ bytesProduced()\\\"\\n\");\n+        }\n+        HandshakeStatus hsStatus = result.getHandshakeStatus();\n+        log(str +\n+                result.getStatus() + \"\/\" + hsStatus + \", \" +\n+                result.bytesConsumed() + \"\/\" + result.bytesProduced() +\n+                \" bytes\");\n+        if (hsStatus == HandshakeStatus.FINISHED) {\n+            log(\"\\t...ready for application data\");\n+        }\n+    }\n+\n+    private static void log(String str) {\n+        if (logging) {\n+            System.out.println(str);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/ResumeClientTLS12withSNI.java","additions":361,"deletions":0,"binary":false,"changes":361,"status":"added"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (C) 2021, 2024 THL A29 Limited, a Tencent company. All rights reserved.\n@@ -125,1 +126,1 @@\n-            if (EXPECT_FAIL && e.getMessage().equals(\n+            if (EXPECT_FAIL && e.getMessage().endsWith(\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/SigAlgosExtTestWithTLS12.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +82,1 @@\n-            if (expectFail && e.getMessage().equals(\n+            if (expectFail && e.getMessage().endsWith(\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/SigAlgosExtTestWithTLS13.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.nio.file.StandardCopyOption;\n@@ -51,0 +52,2 @@\n+import java.util.stream.Stream;\n+\n@@ -367,0 +370,24 @@\n+    \/**\n+     * Copies a directory and all entries in the directory to a destination path.\n+     * Makes the access permission of the destination entries writable.\n+     *\n+     * @param src the path of the source directory\n+     * @param dst the path of the destination directory\n+     * @throws IOException      if an I\/O error occurs while walking the file tree\n+     * @throws RuntimeException if an I\/O error occurs during the copy operation\n+     *                          or if the source or destination paths are invalid\n+     *\/\n+    public static void copyDirectory(Path src, Path dst) throws IOException {\n+        try (Stream<Path> stream = Files.walk(src)) {\n+            stream.forEach(sourcePath -> {\n+                try {\n+                    Path destPath = dst.resolve(src.relativize(sourcePath));\n+                    Files.copy(sourcePath, destPath, StandardCopyOption.REPLACE_EXISTING);\n+                    destPath.toFile().setWritable(true);\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/util\/FileUtils.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}