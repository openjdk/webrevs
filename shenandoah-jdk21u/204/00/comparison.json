{"files":[{"patch":"@@ -419,4 +419,0 @@\n-\n-  if (heap->mode()->is_generational()) {\n-    heap->old_generation()->card_scan()->mark_read_table_as_clean();\n-  }\n@@ -648,0 +644,4 @@\n+\n+  if (heap->mode()->is_generational()) {\n+    heap->old_generation()->card_scan()->mark_read_table_as_clean();\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -141,3 +141,9 @@\n-      if (heap->mode()->is_generational() && _generation->is_young()) {\n-        \/\/ Swap remembered sets for young\n-        _generation->swap_card_tables();\n+      if (heap->mode()->is_generational()) {\n+        \/\/ Clean the read table before swapping it. The end goal here is to have a clean\n+        \/\/ write table, and to have the read table updated with the previous write table.\n+        heap->old_generation()->card_scan()->mark_read_table_as_clean();\n+\n+        if (_generation->is_young()) {\n+          \/\/ Swap remembered sets for young\n+          _generation->swap_card_tables();\n+        }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}