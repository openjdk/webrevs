{"files":[{"patch":"@@ -718,1 +718,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2813,5 +2813,5 @@\n-    assert(verify_generation_usage(true, old_generation()->used_regions(),\n-                                   old_generation()->used(), old_generation()->get_humongous_waste(),\n-                                   true, young_generation()->used_regions(),\n-                                   young_generation()->used(), young_generation()->get_humongous_waste()),\n-           \"Generation accounts are inaccurate\");\n+#ifdef ASSERT\n+    if (ShenandoahVerify) {\n+      verifier()->verify_before_rebuilding_free_set();\n+    }\n+#endif\n@@ -3032,51 +3032,0 @@\n-bool ShenandoahHeap::verify_generation_usage(bool verify_old, size_t old_regions, size_t old_bytes, size_t old_waste,\n-                                             bool verify_young, size_t young_regions, size_t young_bytes, size_t young_waste) {\n-  size_t tally_old_regions = 0;\n-  size_t tally_old_bytes = 0;\n-  size_t tally_old_waste = 0;\n-  size_t tally_young_regions = 0;\n-  size_t tally_young_bytes = 0;\n-  size_t tally_young_waste = 0;\n-\n-  shenandoah_assert_heaplocked_or_safepoint();\n-  for (size_t i = 0; i < num_regions(); i++) {\n-    ShenandoahHeapRegion* r = get_region(i);\n-    if (r->is_old()) {\n-      tally_old_regions++;\n-      tally_old_bytes += r->used();\n-      if (r->is_humongous()) {\n-        ShenandoahHeapRegion* start = r->humongous_start_region();\n-        HeapWord* obj_addr = start->bottom();\n-        oop obj = cast_to_oop(obj_addr);\n-        size_t word_size = obj->size();\n-        HeapWord* end_addr = obj_addr + word_size;\n-        if (end_addr <= r->end()) {\n-          tally_old_waste += (r->end() - end_addr) * HeapWordSize;\n-        }\n-      }\n-    } else if (r->is_young()) {\n-      tally_young_regions++;\n-      tally_young_bytes += r->used();\n-      if (r->is_humongous()) {\n-        ShenandoahHeapRegion* start = r->humongous_start_region();\n-        HeapWord* obj_addr = start->bottom();\n-        oop obj = cast_to_oop(obj_addr);\n-        size_t word_size = obj->size();\n-        HeapWord* end_addr = obj_addr + word_size;\n-        if (end_addr <= r->end()) {\n-          tally_young_waste += (r->end() - end_addr) * HeapWordSize;\n-        }\n-      }\n-    }\n-  }\n-  if (verify_young &&\n-      ((young_regions != tally_young_regions) || (young_bytes != tally_young_bytes) || (young_waste != tally_young_waste))) {\n-    return false;\n-  } else if (verify_old &&\n-             ((old_regions != tally_old_regions) || (old_bytes != tally_old_bytes) || (old_waste != tally_old_waste))) {\n-    return false;\n-  } else {\n-    return true;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":5,"deletions":56,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -197,3 +197,0 @@\n-  bool verify_generation_usage(bool verify_old, size_t old_regions, size_t old_bytes, size_t old_waste,\n-                               bool verify_young, size_t young_regions, size_t young_bytes, size_t young_waste);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -345,2 +345,2 @@\n-  virtual void do_oop(oop* p) { do_oop_work(p); }\n-  virtual void do_oop(narrowOop* p) { do_oop_work(p); }\n+  void do_oop(oop* p) override { do_oop_work(p); }\n+  void do_oop(narrowOop* p) override { do_oop_work(p); }\n@@ -357,1 +357,1 @@\n-  void heap_region_do(ShenandoahHeapRegion* r) {\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n@@ -369,5 +369,5 @@\n-  size_t used() { return _used; }\n-  size_t committed() { return _committed; }\n-  size_t garbage() { return _garbage; }\n-  size_t regions() { return _regions; }\n-  size_t waste() { return _humongous_waste; }\n+  size_t used() const { return _used; }\n+  size_t committed() const { return _committed; }\n+  size_t garbage() const { return _garbage; }\n+  size_t regions() const { return _regions; }\n+  size_t waste() const { return _humongous_waste; }\n@@ -376,1 +376,1 @@\n-  size_t span() { return _regions * ShenandoahHeapRegion::region_size_bytes(); }\n+  size_t span() const { return _regions * ShenandoahHeapRegion::region_size_bytes(); }\n@@ -420,4 +420,2 @@\n-              \"%s: generation (%s) used size must be consistent: generation-used: \" SIZE_FORMAT \"%s, regions-used: \" SIZE_FORMAT \"%s\",\n-              label, generation->name(),\n-              byte_size_in_proper_unit(generation_used), proper_unit_for_byte_size(generation_used),\n-              byte_size_in_proper_unit(stats.used()),    proper_unit_for_byte_size(stats.used()));\n+              \"%s: generation (%s) used size must be consistent: generation-used: \" PROPERFMT \", regions-used: \" PROPERFMT,\n+              label, generation->name(), PROPERFMTARGS(generation_used), PROPERFMTARGS(stats.used()));\n@@ -430,1 +428,0 @@\n-    size_t humongous_regions_promoted = 0;\n@@ -432,3 +429,2 @@\n-              \"%s: generation (%s) size spanned by regions (\" SIZE_FORMAT \") must not exceed current capacity (\" SIZE_FORMAT \"%s)\",\n-              label, generation->name(), stats.regions(),\n-              byte_size_in_proper_unit(generation_capacity), proper_unit_for_byte_size(generation_capacity));\n+              \"%s: generation (%s) size spanned by regions (\" SIZE_FORMAT \") must not exceed current capacity (\" PROPERFMT \")\",\n+              label, generation->name(), stats.regions(), PROPERFMTARGS(generation_capacity));\n@@ -438,4 +434,2 @@\n-              \"%s: generation (%s) humongous waste must be consistent: generation: \" SIZE_FORMAT \"%s, regions: \" SIZE_FORMAT \"%s\",\n-              label, generation->name(),\n-              byte_size_in_proper_unit(humongous_waste), proper_unit_for_byte_size(humongous_waste),\n-              byte_size_in_proper_unit(stats.waste()),   proper_unit_for_byte_size(stats.waste()));\n+              \"%s: generation (%s) humongous waste must be consistent: generation: \" PROPERFMT \", regions: \" PROPERFMT,\n+              label, generation->name(), PROPERFMTARGS(humongous_waste), PROPERFMTARGS(stats.waste()));\n@@ -474,1 +468,1 @@\n-  void heap_region_do(ShenandoahHeapRegion* r) {\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n@@ -562,1 +556,1 @@\n-  size_t processed() {\n+  size_t processed() const {\n@@ -566,1 +560,1 @@\n-  virtual void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -605,1 +599,1 @@\n-  virtual void do_thread(Thread* thread) {\n+  void do_thread(Thread* thread) override {\n@@ -656,1 +650,1 @@\n-  virtual void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -760,1 +754,1 @@\n-  void do_thread(Thread* t) {\n+  void do_thread(Thread* t) override {\n@@ -1247,2 +1241,2 @@\n-  void do_oop(narrowOop* p) { do_oop_work(p); }\n-  void do_oop(oop* p)       { do_oop_work(p); }\n+  void do_oop(narrowOop* p) override { do_oop_work(p); }\n+  void do_oop(oop* p)       override { do_oop_work(p); }\n@@ -1269,1 +1263,1 @@\n-  ShenandoahVerifyRemSetClosure(bool init_mark) :\n+  explicit ShenandoahVerifyRemSetClosure(bool init_mark) :\n@@ -1292,2 +1286,2 @@\n-  virtual void do_oop(narrowOop* p) { work(p); }\n-  virtual void do_oop(oop* p)       { work(p); }\n+  void do_oop(narrowOop* p) override { work(p); }\n+  void do_oop(oop* p)       override { work(p); }\n@@ -1473,0 +1467,9 @@\n+\n+void ShenandoahVerifier::verify_before_rebuilding_free_set() {\n+  ShenandoahGenerationStatsClosure cl;\n+  _heap->heap_region_iterate(&cl);\n+\n+  ShenandoahGenerationStatsClosure::validate_usage(false, \"Before free set rebuild\", _heap->old_generation(), cl.old);\n+  ShenandoahGenerationStatsClosure::validate_usage(false, \"Before free set rebuild\", _heap->young_generation(), cl.young);\n+  ShenandoahGenerationStatsClosure::validate_usage(false, \"Before free set rebuild\", _heap->global_generation(), cl.global);\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":35,"deletions":32,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -229,1 +229,0 @@\n-\n@@ -232,0 +231,2 @@\n+  \/\/ Check that generation usages are accurate before rebuilding free set\n+  void verify_before_rebuilding_free_set();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}