{"files":[{"patch":"@@ -308,1 +308,1 @@\n-  if (!metrics.is_good_progress()) {\n+  if (!metrics.is_good_progress(_generation)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -440,0 +440,3 @@\n+  \/\/ Note that capacity is the number of regions that had available memory at most recent rebuild.  It is not the\n+  \/\/ entire size of the young or global generation.  (Regions within the generation that were fully utilized at time of\n+  \/\/ rebuild are not counted as part of capacity.)\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-  if (metrics.is_good_progress()) {\n+  if (metrics.is_good_progress(heap->global_generation())) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,13 @@\n-bool ShenandoahMetricsSnapshot::is_good_progress() {\n+\/\/ For degenerated GC, generation is Young in generational mode, Global in non-generational mode.\n+\/\/ For full GC, generation is always Global.\n+\/\/\n+\/\/ Note that the size of the chosen collection set is proportional to the relevant generation's collection set.\n+\/\/ Note also that the generation size may change following selection of the collection set, as a side effect\n+\/\/ of evacuation.  Evacuation may promote objects, causing old to grow and young to shrink.  Or this may be a\n+\/\/ mixed evacuation.  When old regions are evacuated, this typically allows young to expand.  In all of these\n+\/\/ various scenarios, the purpose of asking is_good_progress() is to determine if there is enough memory available\n+\/\/ within young generation to justify making an attempt to perform a concurrent collection.  For this reason, we'll\n+\/\/ use the current size of the generation (which may not be different than when the collection set was chosen) to\n+\/\/ assess how much free memory we require in order to consider the most recent GC to have had good progress.\n+\n+bool ShenandoahMetricsSnapshot::is_good_progress(ShenandoahGeneration* generation) {\n@@ -48,2 +60,8 @@\n-  size_t free_actual   = _heap->free_set()->available();\n-  size_t free_expected = _heap->max_capacity() \/ 100 * ShenandoahCriticalFreeThreshold;\n+  ShenandoahFreeSet* free_set = _heap->free_set();\n+  size_t free_actual   = free_set->available();\n+\n+  \/\/ ShenandoahCriticalFreeThreshold is expressed as a percentage.  We multiple this percentage by 1\/100th\n+  \/\/ of the generation capacity to determine whether the available memory within the generation exceeds the\n+  \/\/ critical threshold.\n+  size_t free_expected = (generation->max_capacity() \/ 100) * ShenandoahCriticalFreeThreshold;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  bool is_good_progress();\n+  bool is_good_progress(ShenandoahGeneration *generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}