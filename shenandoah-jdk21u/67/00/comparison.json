{"files":[{"patch":"@@ -135,2 +135,2 @@\n-void ShenandoahAdaptiveHeuristics::record_success_concurrent(bool abbreviated) {\n-  ShenandoahHeuristics::record_success_concurrent(abbreviated);\n+void ShenandoahAdaptiveHeuristics::record_success_concurrent() {\n+  ShenandoahHeuristics::record_success_concurrent();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  void record_success_concurrent(bool abbreviated);\n+  void record_success_concurrent();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -223,1 +223,2 @@\n-void ShenandoahHeuristics::record_success_concurrent(bool abbreviated) {\n+void ShenandoahHeuristics::record_success_concurrent() {\n+  _gc_cycle_time_history->add(elapsed_cycle_time());\n@@ -227,4 +228,0 @@\n-\n-  if (_gc_times_learned <= ShenandoahLearningSteps || !(abbreviated && ShenandoahAdaptiveIgnoreShortCycles)) {\n-    _gc_cycle_time_history->add(elapsed_cycle_time());\n-  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-  virtual void record_success_concurrent(bool abbreviated);\n+  virtual void record_success_concurrent();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -689,1 +689,1 @@\n-void ShenandoahOldHeuristics::record_success_concurrent(bool abbreviated) {\n+void ShenandoahOldHeuristics::record_success_concurrent() {\n@@ -692,1 +692,1 @@\n-  this->ShenandoahHeuristics::record_success_concurrent(abbreviated);\n+  this->ShenandoahHeuristics::record_success_concurrent();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-  void record_success_concurrent(bool abbreviated) override;\n+  void record_success_concurrent() override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-    heap->global_generation()->heuristics()->record_success_concurrent(gc.abbreviated());\n+    heap->global_generation()->heuristics()->record_success_concurrent();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1012,1 +1012,1 @@\n-  heuristics()->record_success_concurrent(abbreviated);\n+  heuristics()->record_success_concurrent();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-  heuristics()->record_success_concurrent(abbreviated);\n+  heuristics()->record_success_concurrent();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -263,10 +263,0 @@\n-  product(bool, ShenandoahAdaptiveIgnoreShortCycles, true, EXPERIMENTAL,    \\\n-          \"The adaptive heuristic tracks a moving average of cycle \"        \\\n-          \"times in order to start a gc before memory is exhausted. \"       \\\n-          \"In some cases, Shenandoah may skip the evacuation and update \"   \\\n-          \"reference phases, resulting in a shorter cycle. These may skew \" \\\n-          \"the average cycle time downward and may cause the heuristic \"    \\\n-          \"to wait too long to start a cycle. Disabling this will have \"    \\\n-          \"the gc run less often, which will reduce CPU utilization, but\"   \\\n-          \"increase the risk of degenerated cycles.\")                       \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}