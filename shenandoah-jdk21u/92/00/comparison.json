{"files":[{"patch":"@@ -388,1 +388,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n@@ -632,1 +632,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -600,1 +600,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n@@ -796,1 +796,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -649,1 +649,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n@@ -944,1 +944,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -308,1 +308,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -475,1 +475,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -431,0 +431,45 @@\n+\n+void ShenandoahAsserts::assert_generational(const char* file, int line) {\n+  if (ShenandoahHeap::heap()->mode()->is_generational()) {\n+    return;\n+  }\n+\n+  ShenandoahMessageBuffer msg(\"Must be in generational mode\");\n+  report_vm_error(file, line, msg.buffer());\n+}\n+\n+void ShenandoahAsserts::assert_control_or_vm_thread_at_safepoint(bool at_safepoint, const char* file, int line) {\n+  Thread* thr = Thread::current();\n+  if (thr == ShenandoahHeap::heap()->control_thread()) {\n+    return;\n+  }\n+  if (thr->is_VM_thread()) {\n+    if (!at_safepoint) {\n+      return;\n+    } else if (SafepointSynchronize::is_at_safepoint()) {\n+      return;\n+    }\n+  }\n+\n+  ShenandoahMessageBuffer msg(\"Must be either control thread, or vm thread\");\n+  if (at_safepoint) {\n+    msg.append(\" at a safepoint\");\n+  }\n+  report_vm_error(file, line, msg.buffer());\n+}\n+\n+void ShenandoahAsserts::assert_generations_reconciled(const char* file, int line) {\n+  if (!SafepointSynchronize::is_at_safepoint()) {\n+    return;\n+  }\n+\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  ShenandoahGeneration* ggen = heap->gc_generation();\n+  ShenandoahGeneration* agen = heap->active_generation();\n+  if (agen == ggen) {\n+    return;\n+  }\n+\n+  ShenandoahMessageBuffer msg(\"Active(%d) & GC(%d) Generations aren't reconciled\", agen->type(), ggen->type());\n+  report_vm_error(file, line, msg.buffer());\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -76,0 +76,3 @@\n+  static void assert_control_or_vm_thread_at_safepoint(bool at_safepoint, const char* file, int line);\n+  static void assert_generational(const char* file, int line);\n+  static void assert_generations_reconciled(const char* file, int line);\n@@ -169,1 +172,2 @@\n-                    assert(Thread::current()->is_VM_thread() || Thread::current() == ShenandoahHeap::heap()->control_thread(), \"Expected control thread or vm thread\")\n+                    ShenandoahAsserts::assert_control_or_vm_thread(false \/* at_safepoint *\/, __FILE__, __LINE__)\n+\n@@ -172,2 +176,1 @@\n-                    assert(Thread::current() == ShenandoahHeap::heap()->control_thread() || (SafepointSynchronize::is_at_safepoint() && Thread::current()->is_VM_thread()), \\\n-                    \"Expected control thread, or vm thread at a safepoint\")\n+                    ShenandoahAsserts::assert_control_or_vm_thread_at_safepoint(true \/* at_safepoint *\/, __FILE__, __LINE__)\n@@ -176,1 +179,1 @@\n-                    assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Must be in generational mode here.\")\n+                    ShenandoahAsserts::assert_generational(__FILE__, __LINE__)\n@@ -180,7 +183,1 @@\n-                    if (SafepointSynchronize::is_at_safepoint()) {                                             \\\n-                      ShenandoahHeap* heap = ShenandoahHeap::heap();                                           \\\n-                      ShenandoahGeneration* ggen = heap->gc_generation();                                      \\\n-                      ShenandoahGeneration* agen = heap->active_generation();                                  \\\n-                      assert(agen == ggen, \"active_gen(%d) should be reconciled with gc_gen(%d)at safepoint\",  \\\n-                             agen->type(), ggen->type());                                                      \\\n-                    }\n+                    ShenandoahAsserts::assert_generations_reconciled(__FILE__, __LINE__)\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.hpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-  assert(ShenandoahCardBarrier, \"Did you mean to enable ShenandoahCardBarrier?\");\n+  assert(ShenandoahCardBarrier, \"Should have been checked by caller\");\n@@ -261,4 +261,3 @@\n-                              !CompressedOops::is_null(value) &&\n-                              ShenandoahHeap::heap()->is_evacuation_in_progress() &&\n-                              !(ShenandoahHeap::heap()->active_generation()->is_young() &&\n-                              ShenandoahHeap::heap()->heap_region_containing(value)->is_old()));\n+                              !CompressedOops::is_null(value) && ShenandoahHeap::heap()->is_evacuation_in_progress()\n+                              && !(ShenandoahHeap::heap()->active_generation()->is_young()\n+                                   && ShenandoahHeap::heap()->heap_region_containing(value)->is_old()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}