{"files":[{"patch":"@@ -672,0 +672,1 @@\n+  _trash_regions(NEW_C_HEAP_ARRAY(ShenandoahHeapRegion*, max_regions, mtGC)),\n@@ -1220,1 +1221,1 @@\n-void ShenandoahFreeSet::try_recycle_trashed(ShenandoahHeapRegion *r) {\n+void ShenandoahFreeSet::try_recycle_trashed(ShenandoahHeapRegion* r) {\n@@ -1229,0 +1230,1 @@\n+  size_t count = 0;\n@@ -1232,2 +1234,13 @@\n-      ShenandoahHeapLocker locker(_heap->lock());\n-      try_recycle_trashed(r);\n+      _trash_regions[count++] = r;\n+    }\n+  }\n+\n+  \/\/ Relinquish the lock after this much time passed.\n+  static constexpr jlong deadline_ns = 30000; \/\/ 30 us\n+  size_t idx = 0;\n+  while (idx < count) {\n+    os::naked_yield(); \/\/ Yield to allow allocators to take the lock\n+    ShenandoahHeapLocker locker(_heap->lock());\n+    const jlong deadline = os::javaTimeNanos() + deadline_ns;\n+    while (idx < count && os::javaTimeNanos() < deadline) {\n+      try_recycle_trashed(_trash_regions[idx++]);\n@@ -1235,1 +1248,0 @@\n-    SpinPause(); \/\/ allow allocators to take the lock\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-  size_t _retired_old_regions;\n+  ShenandoahHeapRegion** _trash_regions;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}