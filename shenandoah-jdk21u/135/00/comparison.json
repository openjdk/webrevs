{"files":[{"patch":"@@ -228,1 +228,1 @@\n-    ShenandoahEvacInfo evacInfo;\n+    ShenandoahEvacuationInformation evacInfo;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-class ShenandoahEvacInfo : public StackObj {\n-  \/\/ Values for ShenandoahEvacInfo jfr event, sizes stored as bytes\n+class ShenandoahEvacuationInformation : public StackObj {\n+  \/\/ Values for ShenandoahEvacuationInformation jfr event, sizes stored as bytes\n@@ -47,1 +47,1 @@\n-  ShenandoahEvacInfo() :\n+  ShenandoahEvacuationInformation() :\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacInfo.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-void ShenandoahTracer::report_evacuation_info(ShenandoahEvacInfo* info) {\n+void ShenandoahTracer::report_evacuation_info(ShenandoahEvacuationInformation* info) {\n@@ -34,2 +34,2 @@\n-void ShenandoahTracer::send_evacuation_info_event(ShenandoahEvacInfo* info) {\n-  EventShenandoahEvacInfo e;\n+void ShenandoahTracer::send_evacuation_info_event(ShenandoahEvacuationInformation* info) {\n+  EventShenandoahEvacuationInformation e;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTrace.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-class ShenandoahEvacInfo;\n+class ShenandoahEvacuationInformation;\n@@ -36,1 +36,1 @@\n-  void report_evacuation_info(ShenandoahEvacInfo* info);\n+  void report_evacuation_info(ShenandoahEvacuationInformation* info);\n@@ -39,1 +39,1 @@\n-  void send_evacuation_info_event(ShenandoahEvacInfo* info);\n+  void send_evacuation_info_event(ShenandoahEvacuationInformation* info);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTrace.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1181,1 +1181,1 @@\n-  <Event name=\"ShenandoahEvacInfo\" category=\"Java Virtual Machine, GC, Detailed\" label=\"Shenandoah Evacuation Information\" startTime=\"false\">\n+  <Event name=\"ShenandoahEvacuationInformation\" category=\"Java Virtual Machine, GC, Detailed\" label=\"Shenandoah Evacuation Information\" startTime=\"false\">\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -529,1 +529,1 @@\n-    <event name=\"jdk.ShenandoahEvacInfo\">\n+    <event name=\"jdk.ShenandoahEvacuationInformation\">\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -529,1 +529,1 @@\n-    <event name=\"jdk.ShenandoahEvacInfo\">\n+    <event name=\"jdk.ShenandoahEvacuationInformation\">\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright Amazon.com Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package jdk.jfr.event.gc.detailed;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Random;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import jdk.test.lib.jfr.GCHelper;\n+\n+\/**\n+ * @test\n+ * @bug 8221507\n+ * @requires vm.hasJFR & vm.gc.Shenandoah\n+ * @key jfr\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm -Xmx64m -XX:+UnlockExperimentalVMOptions -XX:ShenandoahRegionSize=1m -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational jdk.jfr.event.gc.detailed.TestShenandoahEvacuationInformationEvent\n+ *\/\n+\n+public class TestShenandoahEvacuationInformationEvent {\n+    private final static String EVENT_NAME = EventNames.ShenandoahEvacuationInformation;\n+\n+    public static void main(String[] args) throws Exception {\n+        final long shenandoahHeapRegionSize = 1024 * 1024;\n+        Recording recording = new Recording();\n+        recording.enable(EVENT_NAME).withThreshold(Duration.ofMillis(0));\n+        recording.start();\n+        allocate();\n+        recording.stop();\n+\n+        List<RecordedEvent> events = Events.fromRecording(recording);\n+        Asserts.assertFalse(events.isEmpty(), \"No events found\");\n+        for (RecordedEvent event : events) {\n+            if (!Events.isEventType(event, EVENT_NAME)) {\n+                continue;\n+            }\n+            System.out.println(\"Event: \" + event);\n+\n+            long setRegions = Events.assertField(event, \"cSetRegions\").atLeast(0L).getValue();\n+            long setUsedAfter = Events.assertField(event, \"cSetUsedAfter\").atLeast(0L).getValue();\n+            long setUsedBefore = Events.assertField(event, \"cSetUsedBefore\").atLeast(setUsedAfter).getValue();\n+            long regionsFreed = Events.assertField(event, \"regionsFreed\").atLeast(0L).getValue();\n+            Events.assertField(event, \"collectedOld\").atLeast(0L).getValue();\n+            Events.assertField(event, \"collectedYoung\").atLeast(0L).getValue();\n+\n+            Asserts.assertGreaterThanOrEqual(setRegions, regionsFreed, \"setRegions >= regionsFreed\");\n+            Asserts.assertGreaterThanOrEqual(shenandoahHeapRegionSize * setRegions, setUsedAfter, \"ShenandoahHeapRegionSize * setRegions >= setUsedAfter\");\n+            Asserts.assertGreaterThanOrEqual(shenandoahHeapRegionSize * setRegions, setUsedBefore, \"ShenandoahHeapRegionSize * setRegions >= setUsedBefore\");\n+\n+            int gcId = Events.assertField(event, \"gcId\").getValue();\n+        }\n+    }\n+\n+    \/**\n+     * Allocate memory to trigger garbage collections.\n+     * We want the allocated objects to have different life time, because we want both \"young\" and \"old\" objects.\n+     * This is done by keeping the objects in an array and step the current index by a small random number in the loop.\n+     * The loop will continue until we have allocated a fixed number of bytes.\n+     *\/\n+    private static void allocate() {\n+        DummyObject[] dummys = new DummyObject[6000];\n+\n+        Random r = new Random(0);\n+        long bytesToAllocate = 256 * 1024 * 1024;\n+        int currPos = 0;\n+        while (bytesToAllocate > 0) {\n+            int allocSize = 1000 + (r.nextInt(4000));\n+            bytesToAllocate -= allocSize;\n+            dummys[currPos] = new DummyObject(allocSize);\n+\n+            \/\/ Skip a few positions to get different duration on the objects.\n+            currPos = (currPos + r.nextInt(20)) % dummys.length;\n+        }\n+        for (int c=0; c<dummys.length; c++) {\n+            dummys[c] = null;\n+        }\n+        System.gc();\n+    }\n+\n+    public static class DummyObject {\n+        public byte[] payload;\n+        DummyObject(int size) {\n+            payload = new byte[size];\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestShenandoahEvacuationInformationEvent.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -112,0 +112,1 @@\n+    public static final String ShenandoahEvacuationInformation = PREFIX + \"ShenandoahEvacuationInformation\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}