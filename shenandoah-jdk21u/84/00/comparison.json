{"files":[{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHENANDOAH_HEURISTICS_SHENANDOAHHEAPCHARACTERISTICS_HPP\n-#define SHARE_GC_SHENANDOAH_HEURISTICS_SHENANDOAHHEAPCHARACTERISTICS_HPP\n-\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-class ShenandoahHeapStats {\n-public:\n-  virtual const char* name() const = 0;\n-  virtual size_t soft_max_capacity() const = 0;\n-  virtual size_t max_capacity() const = 0;\n-  virtual size_t used() const = 0;\n-  virtual size_t available() const = 0;\n-  virtual size_t soft_available() const = 0;\n-  virtual size_t bytes_allocated_since_gc_start() const = 0;\n-};\n-\n-#endif \/\/SHARE_GC_SHENANDOAH_HEURISTICS_SHENANDOAHHEAPCHARACTERISTICS_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeapStats.hpp","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -48,1 +48,0 @@\n-  assert(strcmp(ShenandoahGCMode, \"generational\") != 0, \"Error\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-#ifndef SHARE_VM_GC_SHENANDOAH_SHENANDOAHCARDTABLE_HPP\n-#define SHARE_VM_GC_SHENANDOAH_SHENANDOAHCARDTABLE_HPP\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHCARDTABLE_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHCARDTABLE_HPP\n@@ -36,1 +36,1 @@\n-protected:\n+private:\n@@ -59,1 +59,3 @@\n-  ShenandoahCardTable(MemRegion whole_heap) : CardTable(whole_heap) { }\n+  explicit ShenandoahCardTable(MemRegion whole_heap) : CardTable(whole_heap),\n+    _read_byte_map(nullptr), _write_byte_map(nullptr),\n+    _read_byte_map_base(nullptr), _write_byte_map_base(nullptr) {}\n@@ -61,1 +63,1 @@\n-  virtual void initialize();\n+  void initialize();\n@@ -63,1 +65,1 @@\n-  virtual bool is_in_young(const void* obj) const;\n+  bool is_in_young(const void* obj) const override;\n@@ -90,1 +92,1 @@\n-#endif \/\/ SHARE_VM_GC_SHENANDOAH_SHENANDOAHCARDTABLE_HPP\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHCARDTABLE_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.hpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1187,1 +1187,0 @@\n-  bool is_generational = _heap->mode()->is_generational();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-\/\/ We identify the entirety of the region as DIRTY to force the next remembered set scan to identify the \"interesting poitners\"\n+\/\/ We identify the entirety of the region as DIRTY to force the next remembered set scan to identify the \"interesting pointers\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -391,1 +391,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -457,1 +457,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  bool collect(GCCause::Cause cause);\n+  bool collect(GCCause::Cause cause) override;\n@@ -40,1 +40,1 @@\n-  virtual void op_final_mark();\n+  void op_final_mark() override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}