{"files":[{"patch":"@@ -1,36 +0,0 @@\n-<!--\n- Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<body>\n-<applet  code=\"bug6587742.class\" width=800 height=600><\/applet>\n-Select every theme and check that all sliders looks good.\n-Note that every slider has a tooltip text with information about\n-slider configuration.\n-There is a small difference in sliders with property \"filled = null\" (it's\n-default behaviour when property JSlider.isFilled is not setted)\n-for themes:\n-1. OceanTheme - sliders look like filled\n-2. DefaultMetalTheme - sliders look like NOT filled \n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/javax\/swing\/JSlider\/6587742\/bug6587742.html","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,130 +0,0 @@\n-\/*\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 6587742\n- * @summary filling half of a JSlider's track is no longer optional\n- * @author Pavel Porvatov\n- * @run applet\/manual=done bug6587742.html\n- *\/\n-\n-import javax.swing.*;\n-import javax.swing.plaf.metal.DefaultMetalTheme;\n-import javax.swing.plaf.metal.MetalLookAndFeel;\n-import javax.swing.plaf.metal.MetalTheme;\n-import javax.swing.plaf.metal.OceanTheme;\n-import java.awt.event.ItemEvent;\n-import java.awt.event.ItemListener;\n-\n-public class bug6587742 extends JApplet {\n-    public void init() {\n-        TestPanel panel = new TestPanel();\n-\n-        setContentPane(panel);\n-    }\n-\n-    private class TestPanel extends JPanel {\n-        private final JComboBox cbThemes = new JComboBox();\n-\n-        private TestPanel() {\n-            \/\/ Fill cbThemes\n-            cbThemes.addItem(new OceanTheme());\n-            cbThemes.addItem(new DefaultMetalTheme());\n-\n-            cbThemes.addItemListener(new ItemListener() {\n-                public void itemStateChanged(ItemEvent e) {\n-                    MetalTheme theme = (MetalTheme) cbThemes.getSelectedItem();\n-\n-                    if (theme != null) {\n-                        MetalLookAndFeel.setCurrentTheme(theme);\n-\n-                        \/\/ re-install the Metal Look and Feel\n-                        try {\n-                            UIManager.setLookAndFeel(new MetalLookAndFeel());\n-                        } catch (UnsupportedLookAndFeelException e1) {\n-                            JOptionPane.showMessageDialog(TestPanel.this, \"Can't change theme: \" + e1.getMessage(),\n-                                    \"Error\", JOptionPane.ERROR_MESSAGE);\n-\n-                            return;\n-                        }\n-\n-                        SwingUtilities.updateComponentTreeUI(bug6587742.this);\n-                    }\n-                }\n-            });\n-\n-            JPanel pnVertical = new JPanel();\n-\n-            pnVertical.setLayout(new BoxLayout(pnVertical, BoxLayout.Y_AXIS));\n-\n-            for (int i = 0; i < 12; i++) {\n-                int filled = i >> 2;\n-\n-                pnVertical.add(createSlider(false, filled > 1 ? null : Boolean.valueOf(filled == 1), (i & 2) == 0,\n-                        (i & 1) != 0));\n-            }\n-\n-            JPanel pnHorizontal = new JPanel();\n-\n-            pnHorizontal.setLayout(new BoxLayout(pnHorizontal, BoxLayout.X_AXIS));\n-\n-            for (int i = 0; i < 12; i++) {\n-                int filled = i >> 2;\n-\n-                pnHorizontal.add(createSlider(true, filled > 1 ? null : Boolean.valueOf(filled == 1), (i & 2) == 0,\n-                        (i & 1) != 0));\n-            }\n-\n-            JTabbedPane tpSliders = new JTabbedPane();\n-\n-            tpSliders.add(\"Vertical sliders\", pnVertical);\n-            tpSliders.add(\"Horizontal sliders\", pnHorizontal);\n-\n-            setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n-\n-            add(new JLabel(\"Select theme:\"));\n-            add(cbThemes);\n-            add(tpSliders);\n-        }\n-    }\n-\n-    private static JSlider createSlider(boolean vertical, Boolean filled, boolean enabled, boolean inverted) {\n-        JSlider result = new JSlider(vertical ? SwingConstants.VERTICAL : SwingConstants.HORIZONTAL, 0, 100, 50);\n-\n-        result.setMajorTickSpacing(20);\n-        result.setMinorTickSpacing(5);\n-        result.setPaintTicks(true);\n-        result.setPaintLabels(true);\n-        result.setEnabled(enabled);\n-\n-        if (filled != null) {\n-            result.putClientProperty(\"JSlider.isFilled\", filled);\n-        }\n-\n-        result.setInverted(inverted);\n-        result.setToolTipText(\"<html>vertical = \" + vertical + \"<br>enabled = \" + enabled + \"<br>filled = \" + filled +\n-                \"<br>inverted = \" + inverted + \"<\/html>\");\n-\n-        return result;\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JSlider\/6587742\/bug6587742.java","additions":0,"deletions":130,"binary":false,"changes":130,"status":"deleted"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JSlider;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.plaf.metal.DefaultMetalTheme;\n+import javax.swing.plaf.metal.MetalLookAndFeel;\n+import javax.swing.plaf.metal.MetalTheme;\n+import javax.swing.plaf.metal.OceanTheme;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+\n+\/* @test\n+ * @bug 6587742\n+ * @summary filling half of a JSlider's track is no longer optional\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug6587742\n+ *\/\n+\n+public class bug6587742 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Select every theme and check that all sliders looks good.\n+            Note that every slider has a tooltip text with information about\n+            slider configuration.\n+            There is a small difference in sliders with property \"filled = null\" (it's\n+            default behaviour when property JSlider.isFilled is not setted)\n+            for themes:\n+            1. OceanTheme - sliders look like filled\n+            2. DefaultMetalTheme - sliders look like NOT filled\\s\"\"\";\n+    private static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"JSlider Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(10)\n+                .columns(40)\n+                .testUI(bug6587742::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createAndShowUI() {\n+        frame = new JFrame(\"Test Sliders\");\n+        TestPanel panel = new TestPanel();\n+        frame.setSize(800, 600);\n+        frame.getContentPane().add(panel);\n+        return frame;\n+    }\n+\n+    private static class TestPanel extends JPanel {\n+        private final JComboBox cbThemes = new JComboBox();\n+\n+        private TestPanel() {\n+            \/\/ Fill cbThemes\n+            cbThemes.addItem(new OceanTheme());\n+            cbThemes.addItem(new DefaultMetalTheme());\n+\n+            cbThemes.addItemListener(new ItemListener() {\n+                public void itemStateChanged(ItemEvent e) {\n+                    MetalTheme theme = (MetalTheme) cbThemes.getSelectedItem();\n+\n+                    if (theme != null) {\n+                        MetalLookAndFeel.setCurrentTheme(theme);\n+\n+                        \/\/ re-install the Metal Look and Feel\n+                        try {\n+                            UIManager.setLookAndFeel(new MetalLookAndFeel());\n+                        } catch (UnsupportedLookAndFeelException e1) {\n+                            JOptionPane.showMessageDialog(TestPanel.this, \"Can't change theme: \" + e1.getMessage(),\n+                                    \"Error\", JOptionPane.ERROR_MESSAGE);\n+\n+                            return;\n+                        }\n+\n+                        SwingUtilities.updateComponentTreeUI(frame);\n+                    }\n+                }\n+            });\n+\n+            JPanel pnVertical = new JPanel();\n+\n+            pnVertical.setLayout(new BoxLayout(pnVertical, BoxLayout.X_AXIS));\n+\n+            for (int i = 0; i < 12; i++) {\n+                int filled = i >> 2;\n+\n+                pnVertical.add(createSlider(true, filled > 1 ? null : Boolean.valueOf(filled == 1), (i & 2) == 0,\n+                        (i & 1) != 0));\n+            }\n+\n+            JPanel pnHorizontal = new JPanel();\n+\n+            pnHorizontal.setLayout(new BoxLayout(pnHorizontal, BoxLayout.Y_AXIS));\n+\n+            for (int i = 0; i < 12; i++) {\n+                int filled = i >> 2;\n+\n+                pnHorizontal.add(createSlider(false, filled > 1 ? null : Boolean.valueOf(filled == 1), (i & 2) == 0,\n+                        (i & 1) != 0));\n+            }\n+\n+            JTabbedPane tpSliders = new JTabbedPane();\n+\n+            tpSliders.add(\"Vertical sliders\", pnVertical);\n+            tpSliders.add(\"Horizontal sliders\", pnHorizontal);\n+\n+            setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+\n+            add(new JLabel(\"Select theme:\"));\n+            add(cbThemes);\n+            add(tpSliders);\n+        }\n+    }\n+\n+    private static JSlider createSlider(boolean vertical, Boolean filled, boolean enabled, boolean inverted) {\n+        JSlider result = new JSlider(vertical ? SwingConstants.VERTICAL : SwingConstants.HORIZONTAL, 0, 100, 50);\n+\n+        result.setMajorTickSpacing(20);\n+        result.setMinorTickSpacing(5);\n+        result.setPaintTicks(true);\n+        result.setPaintLabels(true);\n+        result.setEnabled(enabled);\n+\n+        if (filled != null) {\n+            result.putClientProperty(\"JSlider.isFilled\", filled);\n+        }\n+\n+        result.setInverted(inverted);\n+        result.setToolTipText(\"<html>vertical = \" + vertical + \"<br>enabled = \" + enabled + \"<br>filled = \" + filled +\n+                \"<br>inverted = \" + inverted + \"<\/html>\");\n+\n+        return result;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JSlider\/bug6587742.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"}]}