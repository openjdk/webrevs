{"files":[{"patch":"@@ -481,0 +481,9 @@\n+  if (AbortVMOnException) {\n+    __ mov(rscratch1, exception_oop);\n+    __ enter();\n+    save_live_registers(sasm);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, check_abort_on_vm_exception), rscratch1);\n+    restore_live_registers(sasm);\n+    __ leave();\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -353,0 +353,7 @@\n+\n+  if (AbortVMOnException) {\n+    save_live_registers(sasm);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, check_abort_on_vm_exception), Rexception_obj);\n+    restore_live_registers(sasm);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/arm\/c1_Runtime1_arm.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -555,0 +555,6 @@\n+        if (AbortVMOnException) {\n+          save_live_registers(sasm);\n+          __ call_VM_leaf(CAST_FROM_FN_PTR(address, check_abort_on_vm_exception), Rexception);\n+          restore_live_registers(sasm, noreg, noreg);\n+        }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Runtime1_ppc.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -501,0 +501,8 @@\n+  if (AbortVMOnException) {\n+    __ enter();\n+    save_live_registers(sasm);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, check_abort_on_vm_exception), x10);\n+    restore_live_registers(sasm);\n+    __ leave();\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -236,0 +236,6 @@\n+  if (AbortVMOnException) {\n+    save_live_registers(sasm);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, check_abort_on_vm_exception), Z_EXC_OOP);\n+    restore_live_registers(sasm);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/s390\/c1_Runtime1_s390.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -801,0 +801,8 @@\n+  if (AbortVMOnException) {\n+    __ enter();\n+    save_live_registers(sasm, 2);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, check_abort_on_vm_exception), rax);\n+    restore_live_registers(sasm);\n+    __ leave();\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1507,0 +1507,13 @@\n+\/\/ Check exception if AbortVMOnException flag set\n+JRT_LEAF(void, Runtime1::check_abort_on_vm_exception(oopDesc* ex))\n+  ResourceMark rm;\n+  const char* message = nullptr;\n+  if (ex->is_a(vmClasses::Throwable_klass())) {\n+    oop msg = java_lang_Throwable::message(ex);\n+    if (msg != nullptr) {\n+      message = java_lang_String::as_utf8_string(msg);\n+    }\n+  }\n+  Exceptions::debug_check_abort(ex->klass()->external_name(), message);\n+JRT_END\n+\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -194,0 +194,2 @@\n+  static void check_abort_on_vm_exception(oopDesc* ex);\n+\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestAbortVmOnException\n+ * @summary Test -XX:AbortVMOnException=MyAbortException with C1 compilation\n+ * @library \/test\/lib\n+ * @run driver TestAbortVmOnException\n+ * @bug 8264899\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.IOException;\n+\n+\n+public class TestAbortVmOnException {\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            if (args[0].equals(\"throwExceptionWithMessage\")) {\n+                throw new MyAbortException(\"MyExceptionMessage\");\n+            } else {\n+                throw new MyAbortException();\n+            }\n+        }\n+        \/\/ Run process throwing MyException\n+        Process myExceptionThrowingProcess = runProcess( \"MyAbortException\", false, null);\n+        parseOutput(myExceptionThrowingProcess, \"fatal error: Saw MyAbortException, aborting\");\n+        \/\/ Run process throwing MyException with message\n+        Process myExceptionThrowingWithMessageProcess = runProcess( \"MyAbortException\", true, null);\n+        parseOutput(myExceptionThrowingWithMessageProcess, \"fatal error: Saw MyAbortException: MyExceptionMessage, aborting\");\n+        \/\/ Run process throwing MyException with message and check message\n+        Process myExceptionThrowingWithMessageCheckProcess = runProcess( \"MyAbortException\", true, \"MyExceptionMessage\");\n+        parseOutput(myExceptionThrowingWithMessageCheckProcess, \"fatal error: Saw MyAbortException: MyExceptionMessage, aborting\");\n+        System.out.println(\"PASSED\");\n+    }\n+\n+    private static Process runProcess(String exceptionName, boolean withMessage, String exceptionMessage) throws IOException {\n+        if (exceptionMessage == null) {\n+            return ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:AbortVMOnException=\" + exceptionName, \"-Xcomp\", \"-Xbatch\", \"-XX:TieredStopAtLevel=3\", TestAbortVmOnException.class.getName(),\n+                withMessage ? \"throwExceptionWithMessage\" : \"throwException\").start();\n+        } else {\n+            return ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:AbortVMOnException=\" + exceptionName, \"-XX:AbortVMOnExceptionMessage=\" + exceptionMessage,\n+                \"-Xcomp\", \"-Xbatch\", \"-XX:TieredStopAtLevel=3\", TestAbortVmOnException.class.getName(),\n+                withMessage ? \"throwExceptionWithMessage\" : \"throwException\").start();\n+        }\n+    }\n+\n+    private static void parseOutput(Process process, String expectedString) throws IOException {\n+        OutputAnalyzer output = new OutputAnalyzer(process);\n+        output.stdoutShouldNotBeEmpty();\n+        output.shouldContain(expectedString);\n+    }\n+\n+}\n+\n+class MyAbortException extends RuntimeException {\n+    public MyAbortException() {\n+        super();\n+    }\n+\n+    public MyAbortException(String message) {\n+        super(message);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestAbortVmOnException.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}