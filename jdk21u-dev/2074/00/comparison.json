{"files":[{"patch":"@@ -704,1 +704,6 @@\n-    \/\/ mm is used for book keeping\n+    \/\/ mm is the memory state at the safepoint (when it's a MergeMem)\n+    \/\/ no_side_effect_since_safepoint() goes over the memory state at the backedge. It resets the mm input for each\n+    \/\/ component of the memory state it encounters so it points to the base memory. Once no_side_effect_since_safepoint()\n+    \/\/ is done, if no side effect after the safepoint was found, mm should transform to the base memory: the states at\n+    \/\/ the backedge and safepoint are the same so all components of the memory state at the safepoint should have been\n+    \/\/ reset.\n@@ -711,1 +716,6 @@\n-        if (mms.alias_idx() != Compile::AliasIdxBot && loop != get_loop(ctrl_or_self(mms.memory()))) {\n+        \/\/ Loop invariant memory state won't be reset by no_side_effect_since_safepoint(). Do it here.\n+        \/\/ Escape Analysis can add state to mm that it doesn't add to the backedge memory Phis, breaking verification\n+        \/\/ code that relies on mm. Clear that extra state here.\n+        if (mms.alias_idx() != Compile::AliasIdxBot &&\n+            (loop != get_loop(ctrl_or_self(mms.memory())) ||\n+             (mms.adr_type()->isa_oop_ptr() && mms.adr_type()->is_known_instance()))) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8336702\n+ * @summary C2 compilation fails with \"all memory state should have been processed\" assert\n+ *\n+ * @run main\/othervm TestSafePointWithEAState\n+ *\n+ *\/\n+\n+public class TestSafePointWithEAState {\n+    int[] b = new int[400];\n+\n+    void c() {\n+        int e;\n+        float f;\n+        for (long d = 0; d < 5000; d++) {\n+            e = 1;\n+            while ((e += 3) < 200) {\n+                if (d < b.length) {\n+                    for (int g = 0; g < 10000; ++g) ;\n+                }\n+            }\n+            synchronized (TestSafePointWithEAState.class) {\n+                f = new h(e).n;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] m) {\n+        TestSafePointWithEAState o = new TestSafePointWithEAState();\n+        o.c();\n+    }\n+}\n+\n+class h {\n+    float n;\n+    h(float n) {\n+        this.n = n;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/longcountedloops\/TestSafePointWithEAState.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}