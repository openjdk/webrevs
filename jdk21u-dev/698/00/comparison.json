{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3435,1 +3435,4 @@\n-  Node* box = _gvn.transform(new BoxLockNode(next_monitor()));\n+  Node* box = new BoxLockNode(next_monitor());\n+  \/\/ Check for bailout after new BoxLockNode\n+  if (failing()) { return nullptr; }\n+  box = _gvn.transform(box);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,4 @@\n+  if (!RegMask::can_represent(reg, Compile::current()->sync_stack_slots())) {\n+    Compile::current()->record_method_not_compilable(\"must be able to represent all monitor slots in reg mask\");\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,1 +227,4 @@\n-    Node *box = _gvn.transform(new BoxLockNode(next_monitor()));\n+    Node *box = new BoxLockNode(next_monitor());\n+    \/\/ Check for bailout after new BoxLockNode\n+    if (failing()) { return; }\n+    box = _gvn.transform(box);\n@@ -1264,0 +1267,2 @@\n+    \/\/ Check for bailout in shared_lock\n+    if (failing()) { return; }\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2782,0 +2782,1 @@\n+  if (failing()) { return; }\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -362,5 +363,4 @@\n-  static bool can_represent(OptoReg::Name reg) {\n-    \/\/ NOTE: -1 in computation reflects the usage of the last\n-    \/\/       bit of the regmask as an infinite stack flag and\n-    \/\/       -7 is to keep mask aligned for largest value (VecZ).\n-    return (int)reg < (int)(CHUNK_SIZE - 1);\n+  static bool can_represent(OptoReg::Name reg, unsigned int size = 1) {\n+    \/\/ NOTE: MAX2(1U,size) in computation reflects the usage of the last\n+    \/\/       bit of the regmask as an infinite stack flag.\n+    return (int)reg < (int)(CHUNK_SIZE - MAX2(1U,size));\n@@ -369,1 +369,1 @@\n-    \/\/ NOTE: -SlotsPerVecZ in computation reflects the need\n+    \/\/ NOTE: SlotsPerVecZ in computation reflects the need\n@@ -371,1 +371,1 @@\n-    return (int)reg < (int)(CHUNK_SIZE - SlotsPerVecZ);\n+    return can_represent(reg, SlotsPerVecZ);\n","filename":"src\/hotspot\/share\/opto\/regmask.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,238 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8322996\n+ * @summary Ensure no assert error in C2 with deeply nested synchronize\n+ *          statements.\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.locks.TestNestedSynchronize::test\n+ *                   -Xcomp\n+ *                   compiler.locks.TestNestedSynchronize\n+ *\/\n+\n+package compiler.locks;\n+\n+public class TestNestedSynchronize {\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+\n+    public static void test() {\n+\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/locks\/TestNestedSynchronize.java","additions":238,"deletions":0,"binary":false,"changes":238,"status":"added"}]}