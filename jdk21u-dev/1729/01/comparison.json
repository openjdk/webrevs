{"files":[{"patch":"@@ -1398,0 +1398,7 @@\n+        \/**\n+         * A class representing a key to a zip file. A key is based\n+         * on the file key if available, or the path value if the\n+         * file key is not available. The key is also based on the\n+         * file's last modified time to allow for cases where a zip\n+         * file is re-opened after it has been modified.\n+         *\/\n@@ -1412,1 +1419,3 @@\n-                return ((int)(t ^ (t >>> 32))) + file.hashCode();\n+                Object fk = attrs.fileKey();\n+                return Long.hashCode(t) +\n+                        (fk != null ? fk.hashCode() : file.hashCode());\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8317678\n+ * @modules java.base\/java.util.zip:open\n+ * @summary Fix up hashCode() for ZipFile.Source.Key\n+ * @run junit\/othervm ZipSourceCache\n+ *\/\n+\n+import java.io.*;\n+import java.lang.reflect.*;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.*;\n+import java.util.zip.*;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ZipSourceCache {\n+\n+    private static final String ZIPFILE_NAME =\n+            System.currentTimeMillis() + \"-bug8317678.zip\";\n+    private static final String ZIPENTRY_NAME = \"random.txt\";\n+    private static final String INVALID_LOC_EXCEPTION =\n+            \"ZipFile invalid LOC header (bad signature)\";\n+    private static final boolean DEBUG = false;\n+\n+    private static File relativeFile = new File(ZIPFILE_NAME);\n+    private static File absoluteFile = new File(ZIPFILE_NAME).getAbsoluteFile();\n+    private static boolean hasfileKeySupport;\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        createZipFile(\"test1\");\n+        var attrs = Files.readAttributes(relativeFile.toPath(), BasicFileAttributes.class);\n+        hasfileKeySupport = (attrs.fileKey() != null);\n+    }\n+\n+    @AfterAll\n+    public static void cleanup() throws IOException {\n+        Files.deleteIfExists(Path.of(ZIPFILE_NAME));\n+    }\n+\n+    \/*\n+     * Monitor the internal \"files\" HashMap to ensure that we only\n+     * create one <Key, Source> mapping per unique zip file.\n+     *\n+     * This test also ensures that a new <Key, Source> mapping is created\n+     * if an update to an existing zip file is detected.\n+     *\/\n+    @Test\n+    public void testKeySourceMapping() throws Exception {\n+        ZipFile absoluteZipFile;\n+        HashMap internalMap;\n+        int numSources;\n+        try (ZipFile zipFile = new ZipFile(relativeFile)) {\n+            Class source = Class.forName(\"java.util.zip.ZipFile$Source\");\n+            Field filesMap = source.getDeclaredField(\"files\");\n+            filesMap.setAccessible(true);\n+            internalMap = (HashMap) filesMap.get(zipFile);\n+            numSources = internalMap.size();\n+            \/\/ opening of same zip file shouldn't cause new Source\n+            \/\/ to be constructed on filesystems which support fileKey()\n+            absoluteZipFile = new ZipFile(absoluteFile);\n+            if (hasfileKeySupport) {\n+                assertEquals(numSources, internalMap.size());\n+            } else {\n+                assertEquals(++numSources, internalMap.size());\n+            }\n+\n+            \/\/ update the zip file, should expect a new Source Object\n+            \/\/ ignore this part of test if file can't be updated (can't overwrite)\n+            if (createZipFile(\"differentContent\")) {\n+                ZipFile z = new ZipFile(relativeFile);\n+                \/\/ update of file should trigger new <Key, Source> mapping\n+                assertEquals(++numSources, internalMap.size());\n+                \/\/ new Source created, CEN structure should map fine\n+                readZipFileContents(z);\n+                \/\/ the old Source in use for old file, should no longer map correctly\n+                IOException ioe = assertThrows(IOException.class, () -> readZipFileContents(absoluteZipFile));\n+                assertEquals(INVALID_LOC_EXCEPTION, ioe.getMessage());\n+                z.close();\n+                assertEquals(--numSources, internalMap.size());\n+            }\n+        }\n+        \/\/ with fileKey() support, the close() call shouldn't remove the\n+        \/\/ Source entry just yet since we still have one reference to the file\n+        if (hasfileKeySupport) {\n+            assertEquals(numSources, internalMap.size());\n+        } else {\n+            assertEquals(--numSources, internalMap.size());\n+        }\n+        if (absoluteZipFile != null) {\n+            absoluteZipFile.close();\n+        }\n+        \/\/ now, the Source entry key should be removed\n+        assertEquals(--numSources, internalMap.size());\n+    }\n+\n+    private static void readZipFileContents(ZipFile zf) throws IOException {\n+        var e = zf.entries();\n+        while (e.hasMoreElements()) {\n+            InputStream is = zf.getInputStream(e.nextElement());\n+            String s = new String(is.readAllBytes());\n+            if (DEBUG) System.err.println(s);\n+        }\n+    }\n+\n+    private static boolean createZipFile(String content) {\n+        CRC32 crc32 = new CRC32();\n+        long t = System.currentTimeMillis();\n+        \/\/ let's have at least 2 entries created to ensure\n+        \/\/ that a bad zip structure is detected if file is updated\n+        int numEntries = new Random().nextInt(10) + 2;\n+        File zipFile = new File(ZIPFILE_NAME);\n+        try (FileOutputStream fos = new FileOutputStream(zipFile);\n+             BufferedOutputStream bos = new BufferedOutputStream(fos);\n+             ZipOutputStream zos = new ZipOutputStream(bos)) {\n+            for (int i = 0; i < numEntries; i++) {\n+                ZipEntry e = new ZipEntry(ZIPENTRY_NAME + i);\n+                e.setMethod(ZipEntry.STORED);\n+                byte[] toWrite = content.repeat(i+1).getBytes();\n+                e.setTime(t);\n+                e.setSize(toWrite.length);\n+                crc32.reset();\n+                crc32.update(toWrite);\n+                e.setCrc(crc32.getValue());\n+                zos.putNextEntry(e);\n+                zos.write(toWrite);\n+            }\n+        } catch (IOException e) {\n+            \/\/ some systems mightn't allow file to be updated while open\n+            System.err.println(\"error updating file. \" + e);\n+            return false;\n+        }\n+        return true;\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ZipSourceCache.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+import java.nio.file.Path;\n@@ -53,0 +54,1 @@\n+    public File relativePathFile;\n@@ -77,0 +79,2 @@\n+        relativePathFile = Path.of(System.getProperty(\"user.dir\"))\n+                                .relativize(zipFile.toPath()).toFile();\n@@ -93,0 +97,13 @@\n+\n+    @Benchmark\n+    public void openCloseZipFilex2() throws Exception {\n+        \/\/ A follow on from the openCloseZipFile benchmark.\n+        \/\/ The initCEN logic should be called once per file, if\n+        \/\/ opened multiple times and not closed, for the ZipFile\n+        \/\/ under test if that file is identified by a unique value\n+        \/\/ returned via attrs.fileKey()\n+        ZipFile zf = new ZipFile(zipFile);\n+        ZipFile zf2 = new ZipFile(relativePathFile);\n+        zf.close();\n+        zf2.close();\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/zip\/ZipFileOpen.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}