{"files":[{"patch":"@@ -29,1 +29,1 @@\n- * @run junit\/othervm -Djava.locale.providers=CLDR Bug8179071\n+ * @run junit\/othervm -Djava.locale.providers=CLDR AliasesShouldBeRecognizedInCLDR\n@@ -52,1 +52,1 @@\n-public class Bug8179071 {\n+public class AliasesShouldBeRecognizedInCLDR {\n","filename":"test\/jdk\/java\/util\/Locale\/AliasesShouldBeRecognizedInCLDR.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug8179071.java","status":"renamed"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 4152725\n- * @summary Verify that the default locale can be specified from the\n- * command line.\n- * @run main\/othervm -Duser.language=de -Duser.country=DE -Duser.variant=EURO\n- *      Bug4152725 de_DE_EURO\n- * @run main\/othervm -Duser.language=ja -Duser.country= -Duser.variant=\n- *      Bug4152725 ja\n- * @run main\/othervm -Duser.language=en -Duser.country=SG -Duser.variant=\n- *      Bug4152725 en_SG\n- * @run main\/othervm -Duser.language= -Duser.country=DE -Duser.variant=EURO\n- *      Bug4152725 _DE_EURO\n- * @run main\/othervm -Duser.language=ja -Duser.country= -Duser.variant=YOMI\n- *      Bug4152725 ja__YOMI\n- * @run main\/othervm -Duser.language= -Duser.country= -Duser.variant=EURO\n- *      Bug4152725 __EURO\n- * @run main\/othervm -Duser.language=de -Duser.region=DE_EURO\n- *      Bug4152725 de_DE_EURO\n- *\/\n-\n-import java.util.Locale;\n-\n-public class Bug4152725 {\n-\n-    public static void main(String[] args) {\n-\n-        if (args.length != 1) {\n-            throw new RuntimeException(\"expected locale needs to be specified\");\n-        }\n-\n-        Locale locale = Locale.getDefault();\n-\n-        \/\/ don't use Locale.toString - it's bogus\n-        String language = locale.getLanguage();\n-        String country = locale.getCountry();\n-        String variant = locale.getVariant();\n-        String localeID = null;\n-        if (variant.length() > 0) {\n-            localeID = language + \"_\" + country + \"_\" + variant;\n-        } else if (country.length() > 0) {\n-            localeID = language + \"_\" + country;\n-        } else {\n-            localeID = language;\n-        }\n-\n-        if (localeID.equals(args[0])) {\n-            System.out.println(\"Correctly set from command line: \" + localeID);\n-        } else {\n-            throw new RuntimeException(\"expected default locale: \" + args[0]\n-                    + \", actual default locale: \" + localeID);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/Bug4152725.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main Bug4518797 10\n+ * @run main HashCodeShouldBeThreadSafe 10\n@@ -30,2 +30,6 @@\n-import java.util.*;\n-import java.io.*;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n@@ -33,2 +37,2 @@\n-\/\/ Usage: java Bug4518797 [duration]\n-public class Bug4518797 {\n+\/\/ Usage: java HashCodeShouldBeThreadSafe [duration]\n+public class HashCodeShouldBeThreadSafe {\n","filename":"test\/jdk\/java\/util\/Locale\/HashCodeShouldBeThreadSafe.java","additions":10,"deletions":6,"binary":false,"changes":16,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug4518797.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+    @bug 4184873\n@@ -27,2 +28,1 @@\n-    @run main Bug4184873Test\n-    @bug 4184873\n+    @run main LegacyCodesClassInvariant\n@@ -64,2 +64,6 @@\n-import java.util.*;\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n@@ -70,1 +74,1 @@\n-public class Bug4184873Test extends IntlTest {\n+public class LegacyCodesClassInvariant extends IntlTest {\n@@ -75,1 +79,1 @@\n-            new Bug4184873Test().run(args);\n+            new LegacyCodesClassInvariant().run(args);\n@@ -107,1 +111,1 @@\n-            final File f = new File(System.getProperty(\"test.src\", \".\"), \"Bug4184873_\"+lang);\n+            final File f = new File(System.getProperty(\"test.src\", \".\"), \"LegacyCodesClassInvariant_\"+lang);\n@@ -128,1 +132,1 @@\n-                    new FileOutputStream(\"Bug4184873_\"+lang));\n+                    new FileOutputStream(\"LegacyCodesClassInvariant_\"+lang));\n","filename":"test\/jdk\/java\/util\/Locale\/LegacyCodesClassInvariant.java","additions":13,"deletions":9,"binary":false,"changes":22,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug4184873Test.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/LegacyCodesClassInvariant_he","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug4184873_he","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/LegacyCodesClassInvariant_id","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug4184873_id","status":"renamed"},{"patch":"","filename":"test\/jdk\/java\/util\/Locale\/LegacyCodesClassInvariant_yi","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug4184873_yi","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm Bug7069824\n+ * @run testng\/othervm LocaleMatchingTest\n@@ -31,2 +31,10 @@\n-import java.util.*;\n-import java.util.Locale.*;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Locale.FilteringMode;\n+import java.util.Locale.LanguageRange;\n+import java.util.Map;\n+\n@@ -40,1 +48,1 @@\n-public class Bug7069824 {\n+public class LocaleMatchingTest {\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleMatchingTest.java","additions":13,"deletions":5,"binary":false,"changes":18,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug7069824.java","status":"renamed"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4152725\n+ * @summary Verify that the default locale can be specified from the\n+ * command line.\n+ * @run main\/othervm -Duser.language=de -Duser.country=DE -Duser.variant=EURO\n+ *      LocaleShouldSetFromCLI de_DE_EURO\n+ * @run main\/othervm -Duser.language=ja -Duser.country= -Duser.variant=\n+ *      LocaleShouldSetFromCLI ja\n+ * @run main\/othervm -Duser.language=en -Duser.country=SG -Duser.variant=\n+ *      LocaleShouldSetFromCLI en_SG\n+ * @run main\/othervm -Duser.language= -Duser.country=DE -Duser.variant=EURO\n+ *      LocaleShouldSetFromCLI _DE_EURO\n+ * @run main\/othervm -Duser.language=ja -Duser.country= -Duser.variant=YOMI\n+ *      LocaleShouldSetFromCLI ja__YOMI\n+ * @run main\/othervm -Duser.language= -Duser.country= -Duser.variant=EURO\n+ *      LocaleShouldSetFromCLI __EURO\n+ * @run main\/othervm -Duser.language=de -Duser.region=DE_EURO\n+ *      LocaleShouldSetFromCLI de_DE_EURO\n+ *\/\n+\n+import java.util.Locale;\n+\n+public class LocaleShouldSetFromCLI {\n+\n+    public static void main(String[] args) {\n+\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"expected locale needs to be specified\");\n+        }\n+\n+        Locale locale = Locale.getDefault();\n+\n+        \/\/ don't use Locale.toString - it's bogus\n+        String language = locale.getLanguage();\n+        String country = locale.getCountry();\n+        String variant = locale.getVariant();\n+        String localeID = null;\n+        if (variant.length() > 0) {\n+            localeID = language + \"_\" + country + \"_\" + variant;\n+        } else if (country.length() > 0) {\n+            localeID = language + \"_\" + country;\n+        } else {\n+            localeID = language;\n+        }\n+\n+        if (localeID.equals(args[0])) {\n+            System.out.println(\"Correctly set from command line: \" + localeID);\n+        } else {\n+            throw new RuntimeException(\"expected default locale: \" + args[0]\n+                    + \", actual default locale: \" + localeID);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleShouldSetFromCLI.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n- * @run junit Bug8135061\n+ * @run junit LookupOnValidRangeTest\n@@ -43,1 +43,1 @@\n-public class Bug8135061 {\n+public class LookupOnValidRangeTest {\n","filename":"test\/jdk\/java\/util\/Locale\/LookupOnValidRangeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug8135061.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n- * @run junit Bug8035133\n+ * @run junit MatchEmptyWeightCorrectly\n@@ -43,1 +43,1 @@\n-public class Bug8035133 {\n+public class MatchEmptyWeightCorrectly {\n","filename":"test\/jdk\/java\/util\/Locale\/MatchEmptyWeightCorrectly.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug8035133.java","status":"renamed"},{"patch":"@@ -30,2 +30,2 @@\n- * @compile -XDignore.symbol.file=true Bug6989440.java\n- * @run junit Bug6989440\n+ * @compile -XDignore.symbol.file=true ProviderPoolMultiThreadAccess.java\n+ * @run junit ProviderPoolMultiThreadAccess\n@@ -42,1 +42,1 @@\n-public class Bug6989440 {\n+public class ProviderPoolMultiThreadAccess {\n","filename":"test\/jdk\/java\/util\/Locale\/ProviderPoolMultiThreadAccess.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug6989440.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8166884\n+ * @bug 8166994\n@@ -31,1 +31,1 @@\n- * @run junit Bug8166994\n+ * @run junit SubsequentRangeParsingTest\n@@ -46,1 +46,1 @@\n-public class Bug8166994 {\n+public class SubsequentRangeParsingTest {\n","filename":"test\/jdk\/java\/util\/Locale\/SubsequentRangeParsingTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug8166994.java","status":"renamed"},{"patch":"@@ -34,2 +34,2 @@\n- * @compile -encoding utf-8 Bug8159420.java\n- * @run junit\/othervm -Duser.language=tr -Duser.country=TR Bug8159420\n+ * @compile -encoding utf-8 TurkishLangRangeTest.java\n+ * @run junit\/othervm -Duser.language=tr -Duser.country=TR TurkishLangRangeTest\n@@ -61,1 +61,1 @@\n-public class Bug8159420 {\n+public class TurkishLangRangeTest {\n","filename":"test\/jdk\/java\/util\/Locale\/TurkishLangRangeTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/jdk\/java\/util\/Locale\/Bug8159420.java","status":"renamed"},{"patch":"@@ -1,1 +0,0 @@\n-<APPLET CODE=\"bug4123285.class\" CODEBASE=\".\/\" WIDTH=\"250\" HEIGHT=\"325\" ALIGN=\"TOP\"><\/APPLET>\n","filename":"test\/jdk\/java\/util\/Locale\/bug4123285.html","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.util.Locale;\n-\n-public class bug4123285 extends java.applet.Applet {\n-    public void start() {\n-        System.out.println(\"Hello, world!\");\n-        Locale[] systemLocales = null;\n-        try {\n-            System.out.println(\"Default locale = \" + Locale.getDefault());\n-            systemLocales = Locale.getAvailableLocales();\n-            System.out.println(\"Found \" + systemLocales.length + \" locales:\");\n-            Locale[] locales = new Locale[systemLocales.length];\n-            for (int i = 0; i < locales.length; i++) {\n-                Locale lowest = null;\n-                for (int j = 0; j < systemLocales.length; j++) {\n-                    if (i > 0 && locales[i - 1].toString().compareTo(systemLocales[j].toString()) >= 0)\n-                       continue;\n-                    if (lowest == null || systemLocales[j].toString().compareTo(lowest.toString()) < 0)\n-                       lowest = systemLocales[j];\n-                }\n-                locales[i] = lowest;\n-            }\n-            for (int i = 0; i < locales.length; i++) {\n-                if (locales[i].getCountry().length() == 0)\n-                   System.out.println(\"    \" + locales[i].getDisplayLanguage() + \":\");\n-                else {\n-                    if (locales[i].getVariant().length() == 0)\n-                       System.out.println(\"        \" + locales[i].getDisplayCountry());\n-                    else\n-                        System.out.println(\"        \" + locales[i].getDisplayCountry() + \", \"\n-                                    + locales[i].getDisplayVariant());\n-                }\n-            }\n-        }\n-        catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/bug4123285.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"}]}