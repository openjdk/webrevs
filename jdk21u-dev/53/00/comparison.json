{"files":[{"patch":"@@ -35,1 +35,2 @@\n-keys=stress headful intermittent randomness cgroups\n+# flag-sensitive:       test is sensitive to certain flags and might fail when flags are passed using -vmoptions and -javaoptions\n+keys=stress headful intermittent randomness cgroups flag-sensitive\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @requires vm.gc.G1\n@@ -31,0 +30,2 @@\n+ * @key flag-sensitive\n+ * @requires vm.gc.G1 & vm.opt.x.Xmx == null & vm.opt.x.Xms == null & vm.opt.MinHeapSize == null & vm.opt.MaxHeapSize == null & vm.opt.InitialHeapSize == null\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1HeapSizeFlags.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n@@ -30,0 +28,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -118,1 +118,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(gcflag,\n+    ProcessBuilder pb = GCArguments.createTestJvm(gcflag,\n@@ -211,1 +211,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(String[]::new));\n+    ProcessBuilder pb = GCArguments.createTestJvm(finalargs.toArray(String[]::new));\n@@ -311,1 +311,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);\n+    ProcessBuilder pb = GCArguments.createTestJvm(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxHeapSizeTools.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,2 @@\n- * @requires vm.gc.Parallel\n+ * @key flag-sensitive\n+ * @requires vm.gc.Parallel & vm.opt.x.Xmx == null & vm.opt.x.Xms == null & vm.opt.MinHeapSize == null & vm.opt.MaxHeapSize == null & vm.opt.InitialHeapSize == null\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelHeapSizeFlags.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+ * @key flag-sensitive\n+ * @requires vm.gc.Serial & vm.opt.x.Xmx == null & vm.opt.x.Xms == null & vm.opt.MinHeapSize == null & vm.opt.MaxHeapSize == null & vm.opt.InitialHeapSize == null\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSerialHeapSizeFlags.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -52,1 +54,0 @@\n-\n@@ -86,0 +87,4 @@\n+\n+        public void putAll(Map<String, String> map) {\n+            map.entrySet().forEach(e -> put(e.getKey(), () -> e.getValue()));\n+        }\n@@ -133,0 +138,1 @@\n+        map.putAll(xOptFlags()); \/\/ -Xmx4g -> @requires vm.opt.x.Xmx == \"4g\" )\n@@ -627,3 +633,1 @@\n-        List<String> allFlags = new ArrayList<String>();\n-        Collections.addAll(allFlags, System.getProperty(\"test.vm.opts\", \"\").trim().split(\"\\\\s+\"));\n-        Collections.addAll(allFlags, System.getProperty(\"test.java.opts\", \"\").trim().split(\"\\\\s+\"));\n+        List<String> allFlags = allFlags().toList();\n@@ -672,0 +676,25 @@\n+    private Stream<String> allFlags() {\n+        return Stream.of((System.getProperty(\"test.vm.opts\", \"\") + \" \" + System.getProperty(\"test.java.opts\", \"\")).trim().split(\"\\\\s+\"));\n+    }\n+\n+    \/**\n+     * Parses extra options, options that start with -X excluding the\n+     * bare -X option (as it is not considered an extra option).\n+     * Ignores extra options not starting with -X\n+     *\n+     * This could be improved to handle extra options not starting\n+     * with -X as well as \"standard\" options.\n+     *\/\n+    private Map<String, String> xOptFlags() {\n+        return allFlags()\n+            .filter(s -> s.startsWith(\"-X\") && !s.startsWith(\"-XX:\") && !s.equals(\"-X\"))\n+            .map(s -> s.replaceFirst(\"-\", \"\"))\n+            .map(flag -> flag.splitWithDelimiters(\"[:0123456789]\", 2))\n+            .collect(Collectors.toMap(a -> \"vm.opt.x.\" + a[0],\n+                                      a -> (a.length == 1)\n+                                      ? \"true\" \/\/ -Xnoclassgc\n+                                      : (a[1].equals(\":\")\n+                                         ? a[2]            \/\/ [\"-XshowSettings\", \":\", \"system\"]\n+                                         : a[1] + a[2]))); \/\/ [\"-Xmx\", \"4\", \"g\"]\n+    }\n+\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":33,"deletions":4,"binary":false,"changes":37,"status":"modified"}]}