{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6212869\n+ * @bug 6212869 8347841\n@@ -32,1 +32,1 @@\n-import java.util.Date;\n+import java.time.ZoneId;\n@@ -34,1 +34,0 @@\n-import java.text.SimpleDateFormat;\n@@ -43,0 +42,3 @@\n+            if (ZoneId.SHORT_IDS.containsKey(timeZoneID)) {\n+                continue;\n+            }\n","filename":"test\/jdk\/java\/io\/File\/TimeZoneLastModified.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * 4213086 4250359 4253490 4266432 4406615 4413980 8008577 8305853\n+ * 4213086 4250359 4253490 4266432 4406615 4413980 8008577 8305853 8347841\n@@ -277,1 +277,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"EST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Panama\"));\n@@ -456,1 +456,1 @@\n-            String[] IDs = new String[] {\"Undefined\", \"PST\", \"US\/Pacific\",\n+            String[] IDs = new String[] {\"Undefined\", \"America\/Los_Angeles\", \"US\/Pacific\",\n@@ -546,1 +546,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"CST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Chicago\"));\n@@ -797,1 +797,1 @@\n-      TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+      TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -1099,1 +1099,1 @@\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/DateFormatRegression.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- *      8190748 8216969\n+ *      8190748 8216969 8347841\n@@ -33,1 +33,1 @@\n-import java.util.*;\n+import java.time.ZoneId;\n@@ -35,0 +35,2 @@\n+import java.util.*;\n+import java.util.function.Predicate;\n@@ -92,1 +94,3 @@\n-        String[] ids = TimeZone.getAvailableIDs();\n+        String[] ids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n@@ -182,1 +186,1 @@\n-        TimeZone PST  = TimeZone.getTimeZone(\"PST\");\n+        TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -274,1 +278,1 @@\n-        TimeZone PST = TimeZone.getTimeZone(\"PST\");\n+        TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/DateFormatTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8218948\n+ * @bug 8218948 8347841\n@@ -32,0 +32,1 @@\n+import java.time.ZoneId;\n@@ -328,0 +329,3 @@\n+            if (ZoneId.SHORT_IDS.containsKey(tz[0])) {\n+                continue;\n+            }\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/SDFTCKZoneNamesTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @bug 4358730\n+ * @bug 4358730 8347841\n@@ -59,1 +59,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/bug4358730.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * 4973919 4980088 4965624 5013094 5006864 8152077\n+ * 4973919 4980088 4965624 5013094 5006864 8152077 8347841\n@@ -45,0 +45,2 @@\n+import java.time.ZoneId;\n+import java.util.Arrays;\n@@ -53,0 +55,1 @@\n+import java.util.function.Predicate;\n@@ -78,1 +81,3 @@\n-        String[] ids = TimeZone.getAvailableIDs();\n+        String[] ids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n@@ -492,1 +497,1 @@\n-        TimeZone PST = TimeZone.getTimeZone(\"PST\");\n+        TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -841,1 +846,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -1166,2 +1171,2 @@\n-            TimeZone.getTimeZone(\"PST\"),\n-            TimeZone.getTimeZone(\"EAT\")};\n+            TimeZone.getTimeZone(\"America\/Los_Angeles\"),\n+            TimeZone.getTimeZone(\"Africa\/Addis_Ababa\")};\n@@ -1200,1 +1205,1 @@\n-        TimeZone tz = TimeZone.getTimeZone(\"PST\");\n+        TimeZone tz = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -1514,2 +1519,2 @@\n-        TimeZone PST = TimeZone.getTimeZone(\"PST\");\n-        TimeZone EST = TimeZone.getTimeZone(\"EST\");\n+        TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n+        TimeZone EST = TimeZone.getTimeZone(\"America\/Panama\");\n@@ -1773,1 +1778,1 @@\n-            String[] IDs = new String[]{\"Undefined\", \"PST\", \"US\/Pacific\",\n+            String[] IDs = new String[]{\"Undefined\", \"America\/Los_Angeles\", \"US\/Pacific\",\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarRegression.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- *@bug 8007520 8008254\n+ *@bug 8007520 8008254 8347841\n@@ -110,1 +110,4 @@\n-            \/\/ TBD: tzdt intergration\n+            if (ZoneId.SHORT_IDS.containsKey(zidStr)) {\n+                continue;\n+            }\n+            \/\/ TBD: tzdt integration\n@@ -113,4 +116,1 @@\n-                    || zidStr.equals(\"US\/Pacific-New\")\n-                    || zidStr.equals(\"EST\")\n-                    || zidStr.equals(\"HST\")\n-                    || zidStr.equals(\"MST\")) {\n+                    || zidStr.equals(\"US\/Pacific-New\")) {\n@@ -119,1 +119,1 @@\n-            ZoneId zid = ZoneId.of(zidStr, ZoneId.SHORT_IDS);\n+            ZoneId zid = ZoneId.of(zidStr);\n@@ -126,1 +126,0 @@\n-                    && !ZoneId.SHORT_IDS.containsKey(zidStr)\n","filename":"test\/jdk\/java\/util\/Calendar\/JavatimeTest.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4316678\n+ * @bug 4316678 8347841\n@@ -56,1 +56,1 @@\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4316678.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4372743\n+ * @bug 4372743 8347841\n@@ -70,1 +70,1 @@\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4372743.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4955000\n+ * @bug 4955000 8347841\n@@ -45,1 +45,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"NST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"Pacific\/Auckland\"));\n","filename":"test\/jdk\/java\/util\/Date\/Bug4955000.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,2 @@\n- * @bug 4023247 4027685 4032037 4072029 4073003 4118010 4120606 4133833 4136916 6274757 6314387\n+ * @bug 4023247 4027685 4032037 4072029 4073003 4118010 4120606 4133833\n+ *      4136916 6274757 6314387 8347841\n@@ -109,1 +110,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Date\/DateRegression.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4143459\n+ * @bug 4143459 8347841\n@@ -59,1 +59,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -82,1 +82,1 @@\n-            TimeZone PST = TimeZone.getTimeZone(\"PST\");\n+            TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -210,1 +210,1 @@\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Date\/DateTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4052440 8003267 8062588 8210406 8327434\n+ * @bug 4052440 8003267 8062588 8210406 8327434 8347841\n@@ -40,0 +40,1 @@\n+import java.time.ZoneId;\n@@ -48,0 +49,1 @@\n+import java.util.function.Predicate;\n@@ -75,1 +77,3 @@\n-        String[] ids = TimeZone.getAvailableIDs();\n+        String[] ids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n@@ -179,1 +183,1 @@\n-            throw new RuntimeException(\"parse error occured\" + pe);\n+            throw new RuntimeException(\"parse error occurred\" + pe);\n@@ -189,2 +193,2 @@\n-            LATIME, PST, PST8PDT, US_PACIFIC,\n-            TOKYOTIME, JST, JAPAN,\n+            LATIME, PST8PDT, US_PACIFIC,\n+            TOKYOTIME, JAPAN,\n@@ -211,1 +215,0 @@\n-    final String PST = \"PST\";\n@@ -218,1 +221,0 @@\n-    final String JST = \"JST\";\n@@ -220,2 +222,0 @@\n-    final String JST_IN_OSAKA =\n-        tznp.getDisplayName(JST, false, TimeZone.LONG, OSAKA);\n@@ -231,5 +231,0 @@\n-        String pst = TimeZone.getTimeZone(PST).getDisplayName(OSAKA);\n-        if (!LATIME_IN_OSAKA.equals(pst)) {\n-            throw new RuntimeException(\"Provider's localized name is not available for an alias ID: \"+PST+\".  result: \"+pst+\" expected: \"+LATIME_IN_OSAKA);\n-        }\n-\n@@ -240,17 +235,0 @@\n-\n-        \/\/ Check that provider's name for an alias id (JST) is\n-        \/\/ propagated to its standard id and alias ids.\n-        String jstime = TimeZone.getTimeZone(JST).getDisplayName(OSAKA);\n-        if (!JST_IN_OSAKA.equals(jstime)) {\n-            throw new RuntimeException(\"Could not get provider's localized name.  result: \"+jstime+\" expected: \"+JST_IN_OSAKA);\n-        }\n-\n-        String tokyotime = TimeZone.getTimeZone(TOKYOTIME).getDisplayName(OSAKA);\n-        if (!JST_IN_OSAKA.equals(tokyotime)) {\n-            throw new RuntimeException(\"Provider's localized name is not available for a standard ID: \"+TOKYOTIME+\".  result: \"+tokyotime+\" expected: \"+JST_IN_OSAKA);\n-        }\n-\n-        String japan = TimeZone.getTimeZone(JAPAN).getDisplayName(OSAKA);\n-        if (!JST_IN_OSAKA.equals(japan)) {\n-            throw new RuntimeException(\"Provider's localized name is not available for an alias ID: \"+JAPAN+\".  result: \"+japan+\" expected: \"+JST_IN_OSAKA);\n-        }\n","filename":"test\/jdk\/java\/util\/PluggableLocale\/TimeZoneNameProviderTest.java","additions":10,"deletions":32,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6199320\n+ * @bug 6199320 8347841\n@@ -62,1 +62,1 @@\n-            System.out.println(\"tz=\" + TimeZone.getTimeZone(\"PST\"));\n+            System.out.println(\"tz=\" + TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Properties\/StoreDeadlock.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 5097350\n+ * @bug 5097350 8347841\n@@ -30,0 +30,1 @@\n+import java.time.ZoneId;\n@@ -31,1 +32,1 @@\n-import java.text.*;\n+import java.util.function.Predicate;\n@@ -35,1 +36,3 @@\n-        String[] tzids = TimeZone.getAvailableIDs();\n+        String[] tzids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug5097350.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- *      8077685 8151876 8166875 8169191 8170316 8176044\n+ *      8077685 8151876 8166875 8169191 8170316 8176044 8347841\n@@ -35,0 +35,1 @@\n+import java.time.ZoneId;\n@@ -36,0 +37,1 @@\n+import java.util.function.Predicate;\n@@ -44,1 +46,3 @@\n-    static String[] timezones = TimeZone.getAvailableIDs();\n+    static String[] timezones = Arrays.stream(TimeZone.getAvailableIDs())\n+            .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+            .toArray(String[]::new);\n@@ -101,0 +105,3 @@\n+                    if (ZoneId.SHORT_IDS.containsKey(tzs[j])) {\n+                        continue;\n+                    }\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug6329116.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6772689\n+ * @bug 6772689 8347841\n@@ -31,0 +31,2 @@\n+import java.time.ZoneId;\n+import java.util.Arrays;\n@@ -35,0 +37,1 @@\n+import java.util.function.Predicate;\n@@ -46,1 +49,3 @@\n-        String[] tzids = TimeZone.getAvailableIDs();\n+        String[] tzids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug6772689.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6936350\n+ * @bug 6936350 8347841\n@@ -30,0 +30,1 @@\n+import java.time.ZoneId;\n@@ -31,0 +32,1 @@\n+import java.util.function.Predicate;\n@@ -36,1 +38,3 @@\n-    private static final String[] ZONES = TimeZone.getAvailableIDs();\n+    private static final String[] ZONES = Arrays.stream(TimeZone.getAvailableIDs())\n+            .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+            .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/DaylightTimeTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4509255 5055567 6176318 7090844\n+ * @bug 4509255 5055567 6176318 7090844 8347841\n@@ -30,0 +30,1 @@\n+import java.time.ZoneId;\n@@ -36,0 +37,1 @@\n+import java.util.function.Predicate;\n@@ -42,2 +44,6 @@\n-        String[] tzs = TimeZone.getAvailableIDs();\n-        String[] tzs2 = TimeZone.getAvailableIDs();\n+        String[] tzs = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n+        String[] tzs2 = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n@@ -86,2 +92,6 @@\n-            tzs = TimeZone.getAvailableIDs(offset);\n-            tzs2 = TimeZone.getAvailableIDs(offset);\n+            tzs = Arrays.stream(TimeZone.getAvailableIDs(offset))\n+                    .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                    .toArray(String[]::new);\n+            tzs2 = Arrays.stream(TimeZone.getAvailableIDs(offset))\n+                    .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                    .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/IDTest.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6851214\n+ * @bug 6851214 8347841\n@@ -31,0 +31,1 @@\n+import java.time.ZoneId;\n@@ -32,0 +33,1 @@\n+import java.util.function.Predicate;\n@@ -36,1 +38,3 @@\n-    String TimeZoneIds[] = TimeZone.getAvailableIDs();\n+    String[] TimeZoneIds = Arrays.stream(TimeZone.getAvailableIDs())\n+            .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+            .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/ListTimeZones.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8347841\n@@ -254,1 +255,1 @@\n-        TimeZone pst = TimeZone.getTimeZone(\"PST\");\n+        TimeZone pst = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -413,5 +414,2 @@\n-        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"ACT\"), 0);\n-        \/\/ \"EST\" is disabled because its behavior depends on the mapping property. (6466476).\n-        \/\/findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"EST\"), 2);\n-        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"HST\"), 0);\n-        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"PST\"), 2);\n+        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"Australia\/Darwin\"), 0);\n+        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"Pacific\/Honolulu\"), 0);\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneBoundaryTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * 4966229 6433179 6851214 8007520 8008577\n+ * 4966229 6433179 6851214 8007520 8008577 8347841\n@@ -45,2 +45,2 @@\n-        TimeZone z1 = TimeZone.getTimeZone(\"PST\");\n-        TimeZone z2 = TimeZone.getTimeZone(\"PST\");\n+        TimeZone z1 = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n+        TimeZone z2 = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -84,1 +84,1 @@\n-        sub4084933(TimeZone.getTimeZone(\"PST\"));\n+        sub4084933(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -125,1 +125,1 @@\n-        String[] ZONES = { \"GMT\", \"MET\", \"IST\" };\n+        String[] ZONES = { \"GMT\", \"MET\", \"Asia\/Kolkata\" };\n@@ -175,1 +175,1 @@\n-        sub4109314(TimeZone.getTimeZone(\"PST\"));\n+        sub4109314(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -306,1 +306,1 @@\n-        sub4126678(TimeZone.getTimeZone(\"PST\"));\n+        sub4126678(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -758,1 +758,1 @@\n-        sub4173604(TimeZone.getTimeZone(\"PST\"));\n+        sub4173604(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -918,1 +918,1 @@\n-        sub4208960(TimeZone.getTimeZone(\"PST\"));\n+        sub4208960(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneRegression.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4096952\n+ * @bug 4096952 8347841\n@@ -41,1 +41,1 @@\n-        String[] ZONES = { \"GMT\", \"MET\", \"IST\" };\n+        String[] ZONES = { \"GMT\", \"MET\", \"Asia\/Kolkata\" };\n","filename":"test\/jdk\/java\/util\/TimeZone\/bug4096952.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8049237 8242151\n+ * @bug 8049237 8242151 8347841\n@@ -117,1 +117,1 @@\n-        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"PST\"));\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/sun\/security\/x509\/X509CertImpl\/V3Certificate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4640234 4946057 4938151 4873691 5023181\n+ * @bug 4640234 4946057 4938151 4873691 5023181 8347841\n@@ -45,0 +45,2 @@\n+import java.time.ZoneId;\n+import java.util.Arrays;\n@@ -52,0 +54,1 @@\n+import java.util.function.Predicate;\n@@ -86,1 +89,3 @@\n-            String[] timezones = TimeZone.getAvailableIDs();\n+            String[] timezones = Arrays.stream(TimeZone.getAvailableIDs())\n+                    .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                    .toArray(String[]::new);\n","filename":"test\/jdk\/sun\/util\/resources\/TimeZone\/Bug4640234.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8134384 8234347 8236548\n+ * @bug 8134384 8234347 8236548 8347841\n@@ -41,0 +41,3 @@\n+                if (ZoneId.SHORT_IDS.containsKey(tz)) {\n+                    continue;\n+                }\n","filename":"test\/jdk\/sun\/util\/resources\/cldr\/Bug8134384.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8202764\n+ * @bug 8202764 8347841\n@@ -52,0 +52,1 @@\n+            .filter(zone -> !ZoneId.SHORT_IDS.containsKey(zone[0]))\n","filename":"test\/jdk\/sun\/util\/resources\/cldr\/Bug8202764.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}