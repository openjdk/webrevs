{"files":[{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4122700 8282319\n+ * @summary Verify implementation of getAvailableLocales() and availableLocales()\n+ * @run junit AvailableLocalesTest\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+\n+public class AvailableLocalesTest {\n+\n+    \/**\n+     * Test that Locale.getAvailableLocales() is non-empty and prints out\n+     * the returned locales - 4122700.\n+     *\/\n+    @Test\n+    public void nonEmptyLocalesTest() {\n+        Locale[] systemLocales = Locale.getAvailableLocales();\n+        assertNotEquals(systemLocales.length, 0, \"Available locale list is empty!\");\n+        System.out.println(\"Found \" + systemLocales.length + \" locales:\");\n+        printLocales(systemLocales);\n+    }\n+\n+    \/**\n+     * Test to validate that the methods: Locale.getAvailableLocales()\n+     * and Locale.availableLocales() contain the same underlying elements\n+     *\/\n+    @Test\n+    public void streamEqualsArrayTest() {\n+        Locale[] arrayLocales = Locale.getAvailableLocales();\n+        Stream<Locale> streamedLocales = Locale.availableLocales();\n+        Locale[] convertedLocales = streamedLocales.toArray(Locale[]::new);\n+        if (Arrays.equals(arrayLocales, convertedLocales)) {\n+            System.out.println(\"$$$ Passed: The underlying elements\" +\n+                    \" of getAvailableLocales() and availableLocales() are the same!\");\n+        } else {\n+            throw new RuntimeException(\"$$$ Error: The underlying elements\" +\n+                    \" of getAvailableLocales() and availableLocales()\" +\n+                    \" are not the same.\");\n+        }\n+    }\n+\n+    \/**\n+     * Test to validate that the stream has the required\n+     * Locale.ROOT and Locale.US.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"requiredLocaleProvider\")\n+    public void requiredLocalesTest(Locale requiredLocale, String localeName) {\n+        if (Locale.availableLocales().anyMatch(loc -> (loc.equals(requiredLocale)))) {\n+            System.out.printf(\"$$$ Passed: Stream has %s!%n\", localeName);\n+        } else {\n+            throw new RuntimeException(String.format(\"$$$ Error:\" +\n+                    \" Stream is missing %s!\", localeName));\n+        }\n+    }\n+\n+    \/\/ Helper method to print out all the system locales\n+    private void printLocales(Locale[] systemLocales) {\n+        Locale[] locales = new Locale[systemLocales.length];\n+        for (int i = 0; i < locales.length; i++) {\n+            Locale lowest = null;\n+            for (Locale systemLocale : systemLocales) {\n+                if (i > 0 && locales[i - 1].toString().compareTo(systemLocale.toString()) >= 0)\n+                    continue;\n+                if (lowest == null || systemLocale.toString().compareTo(lowest.toString()) < 0)\n+                    lowest = systemLocale;\n+            }\n+            locales[i] = lowest;\n+        }\n+        for (Locale locale : locales) {\n+            if (locale.getCountry().length() == 0)\n+                System.out.println(\"    \" + locale.getDisplayLanguage() + \":\");\n+            else {\n+                if (locale.getVariant().length() == 0)\n+                    System.out.println(\"        \" + locale.getDisplayCountry());\n+                else\n+                    System.out.println(\"        \" + locale.getDisplayCountry() + \", \"\n+                            + locale.getDisplayVariant());\n+            }\n+        }\n+    }\n+\n+    \/\/ Data provider for testStreamRequirements\n+    private static Stream<Arguments> requiredLocaleProvider() {\n+        return Stream.of(\n+                Arguments.of(Locale.ROOT, \"Root locale\"),\n+                Arguments.of(Locale.US, \"US locale\")\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/AvailableLocalesTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/**\n-    @test\n-    @summary Locale variant should not be uppercased\n-    @run main Bug4210525\n-    @bug 4210525\n-*\/\n-\n-import java.util.Locale;\n-\n-public class Bug4210525 {\n-\n-    public static void main(String[] args) throws Exception {\n-        String language = \"en\";\n-        String country = \"US\";\n-        String variant = \"socal\";\n-\n-        Locale aLocale = Locale.of(language, country, variant);\n-\n-        String localeVariant = aLocale.getVariant();\n-        if (localeVariant.equals(variant)) {\n-            System.out.println(\"passed\");\n-        } else {\n-            System.out.println(\"failed\");\n-            throw new Exception(\"Bug4210525 test failed.\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/Bug4210525.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/**\n-    @test\n-    @summary Locale constructor should allow language-only argument\n-    @bug 4316602\n-    @author joconner\n-*\/\n-\n-import java.util.Locale;\n-\n-public class Bug4316602 {\n-\n-    public static void main(String[] args) throws Exception {\n-        String language = \"ja\";\n-        Locale aLocale = Locale.of(language);\n-        if (aLocale.toString().equals(language)) {\n-            System.out.println(\"passed\");\n-        } else {\n-            System.out.println(\"Bug4316602 failed\");\n-            throw new Exception(\"Bug4316602 failed\");\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/Bug4316602.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8004240\n- * @summary Verify that getAdapterPreference returns an unmodifiable list.\n- * @modules java.base\/sun.util.locale.provider\n- * @compile -XDignore.symbol.file Bug8004240.java\n- * @run main Bug8004240\n- *\/\n-\n-import java.util.List;\n-import sun.util.locale.provider.LocaleProviderAdapter;\n-\n-public class Bug8004240 {\n-\n-    public static void main(String[] args) {\n-        List<LocaleProviderAdapter.Type> types = LocaleProviderAdapter.getAdapterPreference();\n-\n-        try {\n-            types.set(0, null);\n-        } catch (UnsupportedOperationException e) {\n-            \/\/ success\n-            return;\n-        }\n-\n-        throw new RuntimeException(\"LocaleProviderAdapter.getAdapterPrefence() returned a modifiable list.\");\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8004240.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8154797\n- * @modules java.base\/sun.util.locale.provider\n- *          java.base\/sun.util.resources\n- *          jdk.localedata\n- * @summary Test for checking HourFormat and GmtFormat resources are retrieved from\n- *  COMPAT and CLDR Providers.\n-*\/\n-\n-import java.util.HashMap;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.ResourceBundle;\n-import sun.util.locale.provider.LocaleProviderAdapter.Type;\n-import sun.util.locale.provider.LocaleProviderAdapter;\n-\n-public class Bug8154797 {\n-    static Map<String, String> expectedResourcesMap = new HashMap<>();\n-    static final String GMT_RESOURCE_KEY = \"timezone.gmtFormat\";\n-    static final String HMT_RESOURCE_KEY = \"timezone.hourFormat\";\n-    static final String GMT = \"Gmt\";\n-    static final String HMT = \"Hmt\";\n-\n-    static void generateExpectedValues() {\n-        expectedResourcesMap.put(\"FR\" + GMT, \"UTC{0}\");\n-        expectedResourcesMap.put(\"FR\" + HMT, \"+HH:mm;\\u2212HH:mm\");\n-        expectedResourcesMap.put(\"FI\" + HMT, \"+H.mm;-H.mm\");\n-        expectedResourcesMap.put(\"FI\" + GMT, \"UTC{0}\");\n-        \/* For  root locale, en_US, de_DE, hi_IN, ja_JP,Root locale resources\n-        * should be returned.\n-         *\/\n-        expectedResourcesMap.put(GMT, \"GMT{0}\"); \/\/Root locale resource\n-        expectedResourcesMap.put(HMT, \"+HH:mm;-HH:mm\"); \/\/Root locale resource\n-    }\n-\n-    static void compareResources(Locale loc) {\n-        String mapKeyHourFormat = HMT, mapKeyGmtFormat = GMT;\n-        ResourceBundle compatBundle, cldrBundle;\n-        compatBundle = LocaleProviderAdapter.forJRE().getLocaleResources(loc)\n-                .getJavaTimeFormatData();\n-        cldrBundle = LocaleProviderAdapter.forType(Type.CLDR)\n-                .getLocaleResources(loc).getJavaTimeFormatData();\n-        if (loc.getCountry() == \"FR\" || loc.getCountry() == \"FI\") {\n-            mapKeyHourFormat = loc.getCountry() + HMT;\n-            mapKeyGmtFormat = loc.getCountry() + GMT;\n-        }\n-\n-        if (!(expectedResourcesMap.get(mapKeyGmtFormat)\n-                .equals(compatBundle.getString(GMT_RESOURCE_KEY))\n-                && expectedResourcesMap.get(mapKeyHourFormat)\n-                .equals(compatBundle.getString(HMT_RESOURCE_KEY))\n-                && expectedResourcesMap.get(mapKeyGmtFormat)\n-                .equals(cldrBundle.getString(GMT_RESOURCE_KEY))\n-                && expectedResourcesMap.get(mapKeyHourFormat)\n-                .equals(cldrBundle.getString(HMT_RESOURCE_KEY)))) {\n-\n-            throw new RuntimeException(\"Retrieved resource does not match with \"\n-                    + \"  expected string for Locale \" + compatBundle.getLocale());\n-\n-        }\n-\n-    }\n-\n-    public static void main(String args[]) {\n-        Bug8154797.generateExpectedValues();\n-        Locale[] locArr = {Locale.of(\"hi\", \"IN\"), Locale.UK, Locale.of(\"fi\", \"FI\"),\n-                           Locale.ROOT, Locale.GERMAN, Locale.JAPANESE,\n-                           Locale.ENGLISH, Locale.FRANCE};\n-        for (Locale loc : locArr) {\n-            Bug8154797.compareResources(loc);\n-        }\n-    }\n-\n-}\n-\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8154797.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4210525\n+ * @summary Locale variant should not be case folded\n+ * @run junit CaseCheckVariant\n+ *\/\n+\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CaseCheckVariant {\n+\n+    static final String LANG = \"en\";\n+    static final String COUNTRY = \"US\";\n+\n+    \/**\n+     * When a locale is created with a given variant, ensure\n+     * that the variant is not case normalized.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"variants\")\n+    public void variantCaseTest(String variant) {\n+        Locale aLocale = Locale.of(LANG, COUNTRY, variant);\n+        String localeVariant = aLocale.getVariant();\n+        assertEquals(localeVariant, variant);\n+    }\n+\n+    private static Stream<String> variants() {\n+        return Stream.of(\n+                \"socal\",\n+                \"Norcal\"\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/CaseCheckVariant.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8154797\n+ * @modules java.base\/sun.util.locale.provider\n+ *          java.base\/sun.util.resources\n+ *          jdk.localedata\n+ * @summary Test for checking HourFormat and GmtFormat resources are retrieved from\n+ * COMPAT and CLDR Providers.\n+ * @run junit CompareProviderFormats\n+*\/\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.ResourceBundle;\n+import java.util.stream.Stream;\n+\n+import sun.util.locale.provider.LocaleProviderAdapter.Type;\n+import sun.util.locale.provider.LocaleProviderAdapter;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+public class CompareProviderFormats {\n+    static Map<String, String> expectedResourcesMap = new HashMap<>();\n+    static final String GMT_RESOURCE_KEY = \"timezone.gmtFormat\";\n+    static final String HMT_RESOURCE_KEY = \"timezone.hourFormat\";\n+    static final String GMT = \"Gmt\";\n+    static final String HMT = \"Hmt\";\n+\n+    \/**\n+     * Fill the expectedResourcesMap with the desired key \/ values\n+     *\/\n+    @BeforeAll\n+    static void populateResourcesMap() {\n+        expectedResourcesMap.put(\"FR\" + GMT, \"UTC{0}\");\n+        expectedResourcesMap.put(\"FR\" + HMT, \"+HH:mm;\\u2212HH:mm\");\n+        expectedResourcesMap.put(\"FI\" + HMT, \"+H.mm;-H.mm\");\n+        expectedResourcesMap.put(\"FI\" + GMT, \"UTC{0}\");\n+        \/* For root locale, en_US, de_DE, hi_IN, ja_JP, Root locale resources\n+         * should be returned.\n+         *\/\n+        expectedResourcesMap.put(GMT, \"GMT{0}\"); \/\/ Root locale resource\n+        expectedResourcesMap.put(HMT, \"+HH:mm;-HH:mm\"); \/\/ Root locale resource\n+    }\n+\n+    \/**\n+     * For each locale, ensure that the returned resources for gmt and hmt match\n+     * the expected resources for both COMPAT and CLDR\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"localeProvider\")\n+    public void compareResourcesTest(Locale loc) {\n+        compareResources(loc);\n+    }\n+\n+    private void compareResources(Locale loc) {\n+        String mapKeyHourFormat = HMT, mapKeyGmtFormat = GMT;\n+        ResourceBundle compatBundle, cldrBundle;\n+        compatBundle = LocaleProviderAdapter.forJRE().getLocaleResources(loc)\n+                .getJavaTimeFormatData();\n+        cldrBundle = LocaleProviderAdapter.forType(Type.CLDR)\n+                .getLocaleResources(loc).getJavaTimeFormatData();\n+\n+        if (loc.getCountry().equals(\"FR\") || loc.getCountry().equals(\"FI\")) {\n+            mapKeyHourFormat = loc.getCountry() + HMT;\n+            mapKeyGmtFormat = loc.getCountry() + GMT;\n+        }\n+\n+        if (!(expectedResourcesMap.get(mapKeyGmtFormat)\n+                .equals(compatBundle.getString(GMT_RESOURCE_KEY))\n+                && expectedResourcesMap.get(mapKeyHourFormat)\n+                .equals(compatBundle.getString(HMT_RESOURCE_KEY))\n+                && expectedResourcesMap.get(mapKeyGmtFormat)\n+                .equals(cldrBundle.getString(GMT_RESOURCE_KEY))\n+                && expectedResourcesMap.get(mapKeyHourFormat)\n+                .equals(cldrBundle.getString(HMT_RESOURCE_KEY)))) {\n+            throw new RuntimeException(\"Retrieved resource does not match with \"\n+                    + \"  expected string for Locale \" + compatBundle.getLocale());\n+        }\n+    }\n+\n+    private static Stream<Locale> localeProvider() {\n+        return Stream.of(\n+                Locale.of(\"hi\", \"IN\"),\n+                Locale.UK, Locale.of(\"fi\", \"FI\"),\n+                Locale.ROOT, Locale.GERMAN, Locale.JAPANESE,\n+                Locale.ENGLISH, Locale.FRANCE\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/CompareProviderFormats.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8004240\n+ * @summary Verify that getAdapterPreference returns an unmodifiable list.\n+ * @modules java.base\/sun.util.locale.provider\n+ * @compile -XDignore.symbol.file GetAdapterPreference.java\n+ * @run junit GetAdapterPreference\n+ *\/\n+\n+import java.util.List;\n+import sun.util.locale.provider.LocaleProviderAdapter;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class GetAdapterPreference {\n+\n+    \/**\n+     * Test that the list returned from getAdapterPreference()\n+     * cannot be modified.\n+     *\/\n+    @Test\n+    public void immutableTest() {\n+        List<LocaleProviderAdapter.Type> types = LocaleProviderAdapter.getAdapterPreference();\n+        assertThrows(UnsupportedOperationException.class, () -> types.set(0, null),\n+                \"Trying to modify list returned from LocaleProviderAdapter.getAdapterPreference() did not throw UOE\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/GetAdapterPreference.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6312358\n+ * @summary Verify that an NPE is thrown by invoking Locale.getInstance() with\n+ * any argument being null.\n+ * @modules java.base\/java.util:open\n+ * @run junit GetInstanceCheck\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class GetInstanceCheck {\n+\n+    static Method getInstanceMethod;\n+    static final String NAME = \"getInstance\";\n+\n+    \/**\n+     * Initialize the non-public Locale.getInstance() method.\n+     *\/\n+    @BeforeAll\n+    static void initializeMethod() {\n+        try {\n+            \/\/ Locale.getInstance is not directly accessible.\n+            getInstanceMethod = Locale.class.getDeclaredMethod(\n+                    NAME, String.class, String.class, String.class\n+            );\n+            getInstanceMethod.setAccessible(true);\n+        } catch (java.lang.NoSuchMethodException exc) {\n+            \/\/ The test should fail if we can not test the desired method\n+            fail(String.format(\"Tried to get the method '%s' which was not found,\" +\n+                    \" further testing is not possible, failing test\", NAME));\n+        }\n+    }\n+\n+    \/**\n+     * Exists as sanity check that Locale.getInstance() will not throw\n+     * an NPE if no arguments are null.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"passingArguments\")\n+    public void noNPETest(String language, String country, String variant)\n+            throws IllegalAccessException {\n+        try {\n+            getInstanceMethod.invoke(null, language, country, variant);\n+        } catch (InvocationTargetException exc) {\n+            \/\/ Determine underlying exception\n+            Throwable cause = exc.getCause();\n+            if (exc.getCause() instanceof NullPointerException) {\n+                fail(String.format(\"%s should not be thrown when no args are null\", cause));\n+            } else {\n+                fail(String.format(\"%s unexpectedly thrown, when no exception should be thrown\", cause));\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Make sure the Locale.getInstance() method throws an NPE\n+     * if any given argument is null.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"failingArguments\")\n+    public void throwNPETest(String language, String country, String variant)\n+            throws IllegalAccessException {\n+        try {\n+            getInstanceMethod.invoke(null, language, country, variant);\n+            fail(\"Should NPE with any argument set to null\");\n+        } catch (InvocationTargetException exc) {\n+            \/\/ Determine underlying exception\n+            Throwable cause = exc.getCause();\n+            if (cause instanceof NullPointerException) {\n+                System.out.println(\"NPE successfully thrown\");\n+            } else {\n+                fail(cause + \" is thrown, when NPE should have been thrown\");\n+            }\n+        }\n+    }\n+\n+    private static Stream<Arguments> passingArguments() {\n+        return Stream.of(\n+                Arguments.of(\"null\", \"GB\", \"\"),\n+                Arguments.of(\"en\", \"null\", \"\"),\n+                Arguments.of(\"en\", \"GB\", \"null\")\n+        );\n+    }\n+\n+    private static Stream<Arguments> failingArguments() {\n+        return Stream.of(\n+                Arguments.of(null, \"GB\", \"\"),\n+                Arguments.of(\"en\", null, \"\"),\n+                Arguments.of(\"en\", \"GB\", null)\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/GetInstanceCheck.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4316602\n+ * @author joconner\n+ * @summary Verify all Locale constructors and of() methods\n+ * @run junit LocaleConstructors\n+ *\/\n+\n+import java.util.Locale;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/**\n+ * This class tests to ensure that the language, language\/country, and\n+ * language\/country\/variant Locale constructors + of() method are all allowed.\n+ *\/\n+public class LocaleConstructors {\n+\n+    static final String LANG = \"en\";\n+    static final String COUNTRY = \"US\";\n+    static final String VAR = \"socal\";\n+\n+    \/\/ Test Locale constructor and .of() allow (language) argument(s)\n+    @Test\n+    public void langTest() {\n+        Locale aLocale = Locale.of(LANG);\n+        Locale otherLocale = new Locale(LANG);\n+        assertEquals(aLocale.toString(), LANG);\n+        assertEquals(otherLocale.toString(), LANG);\n+    }\n+\n+    \/\/ Test Locale constructor and .of() allow (language, constructor) argument(s)\n+    @Test\n+    public void langCountryTest() {\n+        Locale aLocale = Locale.of(LANG, COUNTRY);\n+        Locale otherLocale = new Locale(LANG, COUNTRY);\n+        assertEquals(aLocale.toString(), String.format(\"%s_%s\",\n+                LANG, COUNTRY));\n+        assertEquals(otherLocale.toString(), String.format(\"%s_%s\",\n+                LANG, COUNTRY));\n+    }\n+\n+    \/\/ Test Locale constructor and .of() allow\n+    \/\/ (language, constructor, variant) argument(s)\n+    @Test\n+    public void langCountryVariantTest() {\n+        Locale aLocale = Locale.of(LANG, COUNTRY, VAR);\n+        Locale otherLocale = new Locale(LANG, COUNTRY, VAR);\n+        assertEquals(aLocale.toString(), String.format(\"%s_%s_%s\",\n+                LANG, COUNTRY, VAR));\n+        assertEquals(otherLocale.toString(), String.format(\"%s_%s_%s\",\n+                LANG, COUNTRY, VAR));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleConstructors.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6277243\n+ * @summary Verify that there is Locale.ROOT constant, and it is equal to Locale(\"\", \"\", \"\")\n+ * @run junit RootLocale\n+ *\/\n+\n+import java.util.Locale;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class RootLocale {\n+\n+    \/**\n+     * Locale.ROOT should exist and match an empty Locale given as\n+     * Locale(\"\", \"\", \"\").\n+     *\/\n+    @Test\n+    public void rootTest() {\n+        Locale root = Locale.of(\"\", \"\", \"\");\n+        assertEquals(Locale.ROOT, root, \"Locale.ROOT is not equal to Locale(\\\"\\\", \\\"\\\", \\\"\\\")\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/RootLocale.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @summary Test the implementation\n- * of Locale.availableLocales()\n- * @bug 8282319\n- * @run junit StreamAvailableLocales\n- *\/\n-\n-import java.util.Arrays;\n-import java.util.Locale;\n-import java.util.stream.Stream;\n-import org.junit.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.MethodSource;\n-import org.junit.jupiter.params.provider.Arguments;\n-\n-public class StreamAvailableLocales {\n-\n-    \/**\n-     * Test to validate that the methods: Locale.getAvailableLocales()\n-     * and Locale.availableLocales() contain the same underlying elements\n-     *\/\n-    @Test\n-    public void testStreamEqualsArray() {\n-        Locale[] arrayLocales = Locale.getAvailableLocales();\n-        Stream<Locale> streamedLocales = Locale.availableLocales();\n-        Locale[] convertedLocales = streamedLocales.toArray(Locale[]::new);\n-        if (Arrays.equals(arrayLocales, convertedLocales)) {\n-            System.out.println(\"$$$ Passed: The underlying elements\" +\n-                    \" of getAvailableLocales() and availableLocales() are the same!\");\n-        } else {\n-            throw new RuntimeException(\"$$$ Error: The underlying elements\" +\n-                    \" of getAvailableLocales() and availableLocales()\" +\n-                    \" are not the same.\");\n-        }\n-    }\n-\n-    \/**\n-     * Test to validate that the stream has the required\n-     * Locale.ROOT and Locale.US.\n-     *\/\n-    @ParameterizedTest\n-    @MethodSource(\"requiredLocaleProvider\")\n-    public void testStreamRequirements(Locale requiredLocale, String localeName) {\n-        if (Locale.availableLocales().anyMatch(loc -> (loc.equals(requiredLocale)))) {\n-            System.out.printf(\"$$$ Passed: Stream has %s!%n\", localeName);\n-        } else {\n-            throw new RuntimeException(String.format(\"$$$ Error:\" +\n-                    \" Stream is missing %s!\", localeName));\n-        }\n-    }\n-\n-    \/\/ Data provider for testStreamRequirements\n-    private static Stream<Arguments> requiredLocaleProvider() {\n-        return Stream.of(\n-                Arguments.of(Locale.ROOT, \"Root locale\"),\n-                Arguments.of(Locale.US, \"US locale\")\n-        );\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/StreamAvailableLocales.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 4122700\n- * @summary Verify that list of available locales is non-empty, and print the list\n- *\/\n-\n-import java.util.Locale;\n-\n-public class bug4122700 {\n-    public static void main(String[] args) throws Exception {\n-        Locale[] systemLocales = Locale.getAvailableLocales();\n-        if (systemLocales.length == 0)\n-            throw new Exception(\"Available locale list is empty!\");\n-        System.out.println(\"Found \" + systemLocales.length + \" locales:\");\n-        Locale[] locales = new Locale[systemLocales.length];\n-        for (int i = 0; i < locales.length; i++) {\n-            Locale lowest = null;\n-            for (int j = 0; j < systemLocales.length; j++) {\n-                if (i > 0 && locales[i - 1].toString().compareTo(systemLocales[j].toString()) >= 0)\n-                    continue;\n-                if (lowest == null || systemLocales[j].toString().compareTo(lowest.toString()) < 0)\n-                    lowest = systemLocales[j];\n-            }\n-            locales[i] = lowest;\n-        }\n-        for (int i = 0; i < locales.length; i++) {\n-            if (locales[i].getCountry().length() == 0)\n-                System.out.println(\"    \" + locales[i].getDisplayLanguage() + \":\");\n-            else {\n-                if (locales[i].getVariant().length() == 0)\n-                    System.out.println(\"        \" + locales[i].getDisplayCountry());\n-                else\n-                    System.out.println(\"        \" + locales[i].getDisplayCountry() + \", \"\n-                                    + locales[i].getDisplayVariant());\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/bug4122700.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 6277243\n- * @summary Verify that there is Locale.ROOT constant, and it is equal to Locale(\"\", \"\", \"\")\n- *\/\n-\n-import java.util.Locale;\n-\n-public class bug6277243 {\n-\n-    public static void main(String[] args) throws Exception {\n-        Locale root = Locale.of(\"\", \"\", \"\");\n-        if (!Locale.ROOT.equals(root)) {\n-            throw new RuntimeException(\"Locale.ROOT is not equal to Locale(\\\"\\\", \\\"\\\", \\\"\\\")\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/bug6277243.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 6312358\n- * @summary Verify that an NPE is thrown by issueing Locale.getInstance() with\n- *      any argument being null.\n- * @modules java.base\/java.util:open\n- *\/\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.Locale;\n-\n-public class bug6312358 {\n-\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        try {\n-            \/\/ Locale.getInstance is not directly accessible.\n-            Method getInstanceMethod = Locale.class.getDeclaredMethod(\n-                \"getInstance\", String.class, String.class, String.class\n-            );\n-            getInstanceMethod.setAccessible(true);\n-\n-            getInstanceMethod.invoke(null, \"null\", \"GB\", \"\");\n-            try {\n-                getInstanceMethod.invoke(null, null, \"GB\", \"\");\n-                throw new RuntimeException(\"Should NPE with language set to null\");\n-            } catch (InvocationTargetException exc) {\n-                Throwable cause = exc.getCause();\n-                if (!(cause instanceof NullPointerException)) {\n-                    throw new RuntimeException(cause+\" is thrown with language set to null\");\n-                }\n-            }\n-\n-            getInstanceMethod.invoke(null, \"en\", \"null\", \"\");\n-            try {\n-                getInstanceMethod.invoke(null, \"en\", null, \"\");\n-                throw new RuntimeException(\"Should NPE with country set to null\");\n-            } catch (InvocationTargetException exc) {\n-                Throwable cause = exc.getCause();\n-                if (!(cause instanceof NullPointerException)) {\n-                    throw new RuntimeException(cause+\" is thrown with country set to null\");\n-                }\n-            }\n-\n-            getInstanceMethod.invoke(null, \"en\", \"GB\", \"null\");\n-            try {\n-                getInstanceMethod.invoke(null, \"en\", \"GB\", null);\n-                throw new RuntimeException(\"Should NPE with variant set to null\");\n-            } catch (InvocationTargetException exc) {\n-                Throwable cause = exc.getCause();\n-                if (!(cause instanceof NullPointerException)) {\n-                    throw new RuntimeException(cause+\" is thrown with variant set to null\");\n-                }\n-            }\n-        } catch (java.lang.NoSuchMethodException exc) {\n-            \/\/ method is not found.  consider it as a success\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/bug6312358.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"}]}