{"files":[{"patch":"@@ -45,1 +45,2 @@\n-import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.thread.VThreadRunner;   \/\/ ensureParallelism requires jdk.management\n@@ -56,1 +57,9 @@\n-        int iterations = Integer.parseInt(args[0]);\n+        int iterations;\n+        int value = Integer.parseInt(args[0]);\n+        if (Platform.isOSX() && Platform.isX64()) {\n+            \/\/ reduced iterations on macosx-x64\n+            iterations = Math.max(value \/ 4, 1);\n+        } else {\n+            iterations = value;\n+        }\n+\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALotWhenPinned.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run main\/othervm ParkALot 500000\n+ * @library \/test\/lib\n+ * @run main\/othervm\/timeout=300 ParkALot 300000\n@@ -34,1 +35,2 @@\n- * @run main\/othervm ParkALot 100000\n+ * @library \/test\/lib\n+ * @run main\/othervm\/timeout=300 ParkALot 100000\n@@ -40,0 +42,2 @@\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -41,0 +45,1 @@\n+import jdk.test.lib.Platform;\n@@ -43,1 +48,0 @@\n-    private static final int ITERATIONS = 1_000_000;\n@@ -45,1 +49,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -47,2 +51,4 @@\n-        if (args.length > 0) {\n-            iterations = Integer.parseInt(args[0]);\n+        int value = Integer.parseInt(args[0]);\n+        if (Platform.isOSX() && Platform.isX64()) {\n+            \/\/ reduced iterations on macosx-x64\n+            iterations = Math.max(value \/ 4, 1);\n@@ -50,1 +56,1 @@\n-            iterations = ITERATIONS;\n+            iterations = value;\n@@ -58,0 +64,1 @@\n+                var totalIterations = new AtomicInteger();\n@@ -59,1 +66,10 @@\n-                    executor.submit(() -> parkALot(iterations));\n+                    executor.submit(() -> parkALot(iterations, totalIterations::incrementAndGet));\n+                }\n+\n+                \/\/ shutdown, await for all threads to finish with progress output\n+                executor.shutdown();\n+                boolean terminated = false;\n+                while (!terminated) {\n+                    terminated = executor.awaitTermination(1, TimeUnit.SECONDS);\n+                    System.out.format(\"%s => %d of %d%n\",\n+                            Instant.now(), totalIterations.get(), iterations * nthreads);\n@@ -69,0 +85,2 @@\n+     * @param iterations number of iterations\n+     * @param afterIteration the task to run after each iteration\n@@ -70,1 +88,1 @@\n-    private static void parkALot(int iterations) {\n+    private static void parkALot(int iterations, Runnable afterIteration) {\n@@ -83,0 +101,1 @@\n+                afterIteration.run();\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/ParkALot.java","additions":28,"deletions":9,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm SleepALot 500000\n+ * @run main SleepALot 500000\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/SleepALot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}