{"files":[{"patch":"@@ -0,0 +1,225 @@\n+\/*\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4045781\n+ * @summary Exposed\/damaged canvases don't always update correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PaintGlitchTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollBar;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+\n+public class PaintGlitchTest extends Frame {\n+    static final String INSTRUCTIONS = \"\"\"\n+               1. Click on the 'Painting Glitch Test' window  and select from\n+                  its menu a content type (text, gradient, fill,\n+                  AWT components, Swing components etc.).\n+               2. Select 'Modal Dialog...' to create a dialog.\n+               3. Drag the dialog over the content very fast\n+                  for 10 seconds or so - make sure you\n+                  keep dragging while the content is painting.\n+               4. Verify that the area exposed by the drag (the damaged regions)\n+                  always update properly no white areas or bits of the dialog\n+                  should be left after the drag operation is\n+                  completed (i.e. after you let go of the mouse).\n+               5. Repeat for all other content types.\n+               6. If for any content type the damaged dialog is not properly\n+                  repainted press Fail. Otherwise press Pass.\n+            \"\"\";\n+\n+    public PaintGlitchTest() {\n+        super(\"Painting Glitch Test\");\n+\n+        TextPanel textPanel = new TextPanel();\n+        GradientPanel gradientPanel = new GradientPanel();\n+        ComponentPanel componentPanel = new ComponentPanel();\n+        SwingPanel swingPanel = new SwingPanel();\n+\n+        add(textPanel);\n+\n+        MenuBar menubar = new MenuBar();\n+        Menu testMenu = new Menu(\"Test\");\n+        testMenu.add(makeContentItem(\"Text Lines\", textPanel) );\n+        testMenu.add(makeContentItem(\"Gradient Fill\", gradientPanel) );\n+        testMenu.add(makeContentItem(\"AWT Components\", componentPanel) );\n+        testMenu.add(makeContentItem(\"Swing Components\", swingPanel) );\n+        testMenu.addSeparator();\n+        MenuItem dialogItem = new MenuItem(\"Modal Dialog...\");\n+        dialogItem.addActionListener(ev -> new ObscuringDialog(PaintGlitchTest.this).show());\n+        testMenu.add(dialogItem);\n+        testMenu.addSeparator();\n+        menubar.add(testMenu);\n+\n+        setMenuBar(menubar);\n+        setSize(400,300);\n+    }\n+\n+    public static void main(String args[]) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Repaint Glitch\")\n+                .testUI(PaintGlitchTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public MenuItem makeContentItem(String title, final Component content) {\n+        MenuItem menuItem = new MenuItem(title);\n+        menuItem.addActionListener(\n+                ev -> {\n+                    remove(0);\n+                    add(content);\n+                    validate();\n+                }\n+        );\n+\n+        return menuItem;\n+    }\n+}\n+\n+class GradientPanel extends Canvas {\n+    public void paint(Graphics g) {\n+        long ms = System.currentTimeMillis();\n+        \/\/ just paint something that'll take a while\n+        int x, y;\n+        int width = getSize().width;\n+        int height = getSize().height;\n+        int step = 8;\n+\n+        for (x = 0; x < width; x += step) {\n+            for (y = 0; y < height; y += step) {\n+                int red = (255 * y) \/ height;\n+                int green = (255 * x * y) \/ (width * height);\n+                int blue = (255 * x) \/ width;\n+\n+                Color   color = new Color(red, green, blue);\n+                g.setColor(color);\n+                g.fillRect(x, y, step, step);\n+            }\n+        }\n+        long time = System.currentTimeMillis() - ms;\n+        PassFailJFrame.log(\"GradientPanel paint took \" + time + \" ms\");\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200,1000);\n+    }\n+}\n+\n+class TextPanel extends Canvas {\n+    public void paint(Graphics g) {\n+        long ms = System.currentTimeMillis();\n+        Font font = new Font(\"SanSerif\", Font.ITALIC, 12);\n+\n+        g.setFont(font);\n+        \/\/ just paint something that'll take a while\n+        int x, y;\n+        int height = getHeight();\n+        int step = 16;\n+\n+        for (x = y = 0; y < height; y += step) {\n+            g.drawString(y + \" : The quick brown fox jumps over the lazy dog. \" +\n+                    \"The rain in Spain falls mainly on the plain.\", x, y);\n+        }\n+        long time = System.currentTimeMillis() - ms;\n+        PassFailJFrame.log(\"TextPanel paint took \" + time + \" ms\");\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(640,1000);\n+    }\n+}\n+\n+class ComponentPanel extends Panel {\n+    ComponentPanel() {\n+        add(new Label(\"Label\"));\n+        add(new Button(\"Button\"));\n+        add(new Checkbox(\"Checkbox\"));\n+        Choice c = new Choice();\n+        c.add(\"choice\");\n+        java.awt.List l = new java.awt.List();\n+        l.add(\"list\");\n+        add(new Scrollbar());\n+        add(new TextField(\"TextField\"));\n+        add(new TextArea(\"TextArea\"));\n+        add(new Panel());\n+        add(new Canvas());\n+    }\n+}\n+\n+class SwingPanel extends JPanel {\n+    SwingPanel() {\n+        add(new JLabel(\"JLabel\"));\n+        add(new JButton(\"JButton\"));\n+        add(new JCheckBox(\"JCheckBox\"));\n+        JComboBox c = new JComboBox();\n+        JList l = new JList();\n+        add(new JScrollBar());\n+        add(new JTextField(\"This is a JTextField with some text in it to make it longer.\"));\n+        add(new JTextArea(\"This is a JTextArea with some text in it to make it longer.\"));\n+    }\n+}\n+\n+class ObscuringDialog extends Dialog {\n+    ObscuringDialog(Frame f) {\n+        super(f, \"Obscuring Dialog\");\n+        Button ok = new Button(\"OK, go away\");\n+        ok.addActionListener(ev -> dispose());\n+        add(ok);\n+        pack();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/PaintGlitchTest\/PaintGlitchTest.java","additions":225,"deletions":0,"binary":false,"changes":225,"status":"added"},{"patch":"@@ -0,0 +1,455 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4292099\n+ * @summary AWT Event delivery to processEvent\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ProcessEvent\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.AWTEventMulticaster;\n+import java.awt.Adjustable;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.ItemSelectable;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.AdjustmentEvent;\n+import java.awt.event.AdjustmentListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.TextEvent;\n+import java.awt.event.TextListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ProcessEvent extends Frame {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+                Press each of the four buttons for ActionEvent, AdjustmentEvent,\n+                ItemEvent and TextEvent. If a message for each corresponding event\n+                appears in the log area and says the event listener was\n+                called, then press Pass otherwise press Fail.\n+            \"\"\";\n+    ActionBtn af;\n+    AdjustmentBtn adjf;\n+    ItemBtn itf;\n+    TextBtn txtf;\n+\n+    public ProcessEvent() {\n+        setLayout(new FlowLayout());\n+        add(af = new ActionBtn());\n+        af.setBackground(Color.green);\n+\n+        add(adjf = new AdjustmentBtn());\n+        adjf.setBackground(Color.green);\n+\n+        add(itf = new ItemBtn());\n+        itf.setBackground(Color.green);\n+\n+        add(txtf = new TextBtn());\n+        txtf.setBackground(Color.green);\n+\n+        \/\/ These action listeners simply provide feedback of when\n+        \/\/ the event is delivered properly.\n+        af.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent ae) {\n+                PassFailJFrame.log(af.getText()\n+                        + \": action listener called: \"\n+                        + ae.toString());\n+            }\n+        });\n+\n+        adjf.addAdjustmentListener(new AdjustmentListener() {\n+            public void adjustmentValueChanged(AdjustmentEvent ae) {\n+                PassFailJFrame.log(adjf.getText()\n+                        + \": adjustment listener called: \"\n+                        + ae.toString());\n+            }\n+        });\n+\n+        itf.addItemListener(new ItemListener() {\n+            public void itemStateChanged(ItemEvent e) {\n+                PassFailJFrame.log(itf.getText()\n+                        + \": item listener called: \"\n+                        + e.toString());\n+            }\n+        });\n+\n+        txtf.addTextListener(new TextListener() {\n+            public void textValueChanged(TextEvent e) {\n+                PassFailJFrame.log(txtf.getText()\n+                        + \": text listener called: \"\n+                        + e.toString());\n+            }\n+        });\n+\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Process Events Test\")\n+                .testUI(ProcessEvent::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class ButtonComponent extends Component implements ItemSelectable, Adjustable {\n+\n+    transient protected TextListener textListener;\n+    transient ActionListener actionListener;\n+    transient AdjustmentListener adjustmentListener;\n+    transient ItemListener itemListener;\n+    String actionCommand = null;\n+\n+    String text = null;\n+\n+    public ButtonComponent(String label) {\n+        super();\n+        text = label;\n+    }\n+\n+    public String getText() {\n+        return text;\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 30);\n+    }\n+\n+    public Dimension getMinimumSize() {\n+        return getPreferredSize();\n+    }\n+\n+    public String getActionCommand() {\n+        if (actionCommand == null)\n+            return getText();\n+        else\n+            return actionCommand;\n+    }\n+\n+    public void setActionCommand(String ac) {\n+        actionCommand = ac;\n+    }\n+\n+    \/\/ ActionEvent listener support\n+\n+    public synchronized void addActionListener(ActionListener l) {\n+        if (l == null) {\n+            return;\n+        }\n+        enableEvents(AWTEvent.ACTION_EVENT_MASK);\n+        actionListener = AWTEventMulticaster.add(actionListener, l);\n+    }\n+\n+    public synchronized void removeActionListener(ActionListener l) {\n+        if (l == null) {\n+            return;\n+        }\n+        actionListener = AWTEventMulticaster.remove(actionListener, l);\n+    }\n+\n+    \/\/ AdjustmentEvent listener support\n+\n+    public synchronized void addAdjustmentListener(AdjustmentListener l) {\n+        if (l == null) {\n+            return;\n+        }\n+        enableEvents(AWTEvent.ADJUSTMENT_EVENT_MASK);\n+        adjustmentListener = AWTEventMulticaster.add(adjustmentListener, l);\n+    }\n+\n+    public synchronized void removeAdjustmentListener(AdjustmentListener l) {\n+        if (l == null) {\n+            return;\n+        }\n+        adjustmentListener = AWTEventMulticaster.remove(adjustmentListener, l);\n+    }\n+\n+    \/\/ ItemEvent listener support\n+\n+    public synchronized void addItemListener(ItemListener l) {\n+        if (l == null) {\n+            return;\n+        }\n+        enableEvents(AWTEvent.ITEM_EVENT_MASK);\n+        itemListener = AWTEventMulticaster.add(itemListener, l);\n+    }\n+\n+    public synchronized void removeItemListener(ItemListener l) {\n+        if (l == null) {\n+            return;\n+        }\n+        itemListener = AWTEventMulticaster.remove(itemListener, l);\n+    }\n+\n+    \/\/ TextEvent listener support\n+\n+    public synchronized void addTextListener(TextListener l) {\n+        if (l == null) {\n+            return;\n+        }\n+        enableEvents(AWTEvent.TEXT_EVENT_MASK);\n+        textListener = AWTEventMulticaster.add(textListener, l);\n+    }\n+\n+    public synchronized void removeTextListener(TextListener l) {\n+        if (l == null) {\n+            return;\n+        }\n+        textListener = AWTEventMulticaster.remove(textListener, l);\n+    }\n+\n+    \/\/ Implement the processEvent and processXXXEvent methods to\n+    \/\/ handle reception and processing of the event types.\n+\n+    protected void processEvent(AWTEvent e) {\n+        if (e instanceof ActionEvent) {\n+            processActionEvent((ActionEvent) e);\n+            return;\n+        }\n+        if (e instanceof AdjustmentEvent) {\n+            processAdjustmentEvent((AdjustmentEvent) e);\n+            return;\n+        }\n+        if (e instanceof ItemEvent) {\n+            processItemEvent((ItemEvent) e);\n+            return;\n+        }\n+        if (e instanceof TextEvent) {\n+            processTextEvent((TextEvent) e);\n+            return;\n+        }\n+        super.processEvent(e);\n+    }\n+\n+    protected void processActionEvent(ActionEvent e) {\n+        if (actionListener != null) {\n+            actionListener.actionPerformed(e);\n+        }\n+    }\n+\n+    protected void processAdjustmentEvent(AdjustmentEvent e) {\n+        if (adjustmentListener != null) {\n+            adjustmentListener.adjustmentValueChanged(e);\n+        }\n+    }\n+\n+    protected void processItemEvent(ItemEvent e) {\n+        if (itemListener != null) {\n+            itemListener.itemStateChanged(e);\n+        }\n+    }\n+\n+    protected void processTextEvent(TextEvent e) {\n+        if (textListener != null) {\n+            textListener.textValueChanged(e);\n+        }\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension dim = getSize();\n+        g.clearRect(0, 0, dim.width, dim.height);\n+        g.setColor(getForeground());\n+        g.drawString(text, 2, dim.height - 2);\n+    }\n+\n+    \/**\n+     * Returns the selected items or null if no items are selected.\n+     *\/\n+    public Object[] getSelectedObjects() {\n+        return null;\n+    }\n+\n+    \/**\n+     * Gets the orientation of the adjustable object.\n+     *\/\n+    public int getOrientation() {\n+        return 0;\n+    }\n+\n+    \/**\n+     * Gets the minimum value of the adjustable object.\n+     *\/\n+    public int getMinimum() {\n+        return 0;\n+    }\n+\n+    \/**\n+     * Sets the minimum value of the adjustable object.\n+     *\n+     * @param min the minimum value\n+     *\/\n+    public void setMinimum(int min) {\n+    }\n+\n+    \/**\n+     * Gets the maximum value of the adjustable object.\n+     *\/\n+    public int getMaximum() {\n+        return 0;\n+    }\n+\n+    \/**\n+     * Sets the maximum value of the adjustable object.\n+     *\n+     * @param max the maximum value\n+     *\/\n+    public void setMaximum(int max) {\n+    }\n+\n+    \/**\n+     * Gets the unit value increment for the adjustable object.\n+     *\/\n+    public int getUnitIncrement() {\n+        return 0;\n+    }\n+\n+    \/**\n+     * Sets the unit value increment for the adjustable object.\n+     *\n+     * @param u the unit increment\n+     *\/\n+    public void setUnitIncrement(int u) {\n+    }\n+\n+    \/**\n+     * Gets the block value increment for the adjustable object.\n+     *\/\n+    public int getBlockIncrement() {\n+        return 0;\n+    }\n+\n+    \/**\n+     * Sets the block value increment for the adjustable object.\n+     *\n+     * @param b the block increment\n+     *\/\n+    public void setBlockIncrement(int b) {\n+    }\n+\n+    \/**\n+     * Gets the length of the propertional indicator.\n+     *\/\n+    public int getVisibleAmount() {\n+        return 0;\n+    }\n+\n+    \/**\n+     * Sets the length of the proportionl indicator of the\n+     * adjustable object.\n+     *\n+     * @param v the length of the indicator\n+     *\/\n+    public void setVisibleAmount(int v) {\n+    }\n+\n+    \/**\n+     * Gets the current value of the adjustable object.\n+     *\/\n+    public int getValue() {\n+        return 0;\n+    }\n+\n+    \/**\n+     * Sets the current value of the adjustable object. This\n+     * value must be within the range defined by the minimum and\n+     * maximum values for this object.\n+     *\n+     * @param v the current value\n+     *\/\n+    public void setValue(int v) {\n+    }\n+\n+}\n+\n+class ActionBtn extends ButtonComponent {\n+    public ActionBtn() {\n+        super(\"ActionEvent\");\n+        addMouseListener(new MouseAdapter() {\n+            public void mouseClicked(MouseEvent e) {\n+                ActionEvent ae = new ActionEvent(e.getSource(),\n+                        ActionEvent.ACTION_PERFORMED,\n+                        getActionCommand());\n+                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(ae);\n+            }\n+        });\n+    }\n+}\n+\n+class AdjustmentBtn extends ButtonComponent {\n+    public AdjustmentBtn() {\n+        super(\"AdjustmentEvent\");\n+        addMouseListener(new MouseAdapter() {\n+            public void mouseClicked(MouseEvent e) {\n+                AdjustmentEvent ae = new AdjustmentEvent((Adjustable) e.getSource(),\n+                        AdjustmentEvent.ADJUSTMENT_VALUE_CHANGED,\n+                        1, 1);\n+                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(ae);\n+            }\n+        });\n+    }\n+}\n+\n+class ItemBtn extends ButtonComponent {\n+    public ItemBtn() {\n+        super(\"ItemEvent\");\n+        addMouseListener(new MouseAdapter() {\n+            public void mouseClicked(MouseEvent e) {\n+                ItemEvent ae = new ItemEvent((ItemSelectable) e.getSource(),\n+                        ItemEvent.ITEM_STATE_CHANGED,\n+                        e.getSource(), 1);\n+                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(ae);\n+            }\n+        });\n+    }\n+}\n+\n+class TextBtn extends ButtonComponent {\n+    public TextBtn() {\n+        super(\"TextEvent\");\n+        addMouseListener(new MouseAdapter() {\n+            public void mouseClicked(MouseEvent e) {\n+                TextEvent ae = new TextEvent(e.getSource(),\n+                        TextEvent.TEXT_VALUE_CHANGED);\n+                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(ae);\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/ProcessEvent\/ProcessEvent.java","additions":455,"deletions":0,"binary":false,"changes":455,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4906548 4921849\n+ * @summary Checks that setFont and setBackground have immediate effect\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetBgrFnt\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class SetBgrFnt extends Frame {\n+    static final String INSTRUCTIONS = \"\"\"\n+            1. Press a button marked 'Switch fonts'\n+               fonts in three components below (a Button, a Checkbox\n+               and a Label) must change immediately.\n+\n+            2. Press a button marked 'Switch background'\n+               background of three components and canvas must change.\n+               MacOS is an exception - AWT buttons on macOS so not\n+               change color so on macOS only canvas, checkbox\n+               and a label should change background.\n+\n+            If this is the behavior that you observe press Pass,\n+            otherwise press Fail.\n+            \"\"\";\n+    Label la;\n+    Button bu, bu1, bu2;\n+    Checkbox cb;\n+    Font font1, font2;\n+    Canvas ca;\n+    boolean bToggleFont = true;\n+    boolean bToggleBg = true;\n+\n+    public SetBgrFnt() {\n+        bu = new Button(\"Switch fonts\");\n+        bu1 = new Button(\"Switch background\");\n+        bu2 = new Button(\"I'm a button\");\n+        cb = new Checkbox(\"Checkbox I am\");\n+        la = new Label(\"I am a label\");\n+        ca = new Canvas();\n+        font1 = new Font(\"Serif\", Font.ITALIC, 22);\n+        font2 = new Font(\"SansSerif\", Font.PLAIN, 10);\n+        la.setFont(font1);\n+        cb.setFont(font1);\n+        bu2.setFont(font1);\n+        bu.addActionListener(ae -> {\n+            if (bToggleFont) {\n+                la.setFont(font2);\n+                cb.setFont(font2);\n+                bu2.setFont(font2);\n+            } else {\n+                la.setFont(font1);\n+                cb.setFont(font1);\n+                bu2.setFont(font1);\n+            }\n+            bToggleFont = !bToggleFont;\n+        });\n+\n+        bu1.addActionListener(ae -> {\n+            if (bToggleBg) {\n+                ca.setBackground(Color.YELLOW);\n+                setBackground(Color.YELLOW);\n+            } else {\n+                ca.setBackground(Color.GREEN);\n+                setBackground(Color.GREEN);\n+            }\n+            bToggleBg = !bToggleBg;\n+        });\n+\n+        setLayout(new GridLayout(8, 1));\n+        add(bu);\n+        add(bu1);\n+        add(new Label());\n+        add(\"South\", la);\n+        add(\"South\", bu2);\n+        add(\"South\", cb);\n+        add(\"South\", ca);\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Set Font and Background Test\")\n+                .testUI(SetBgrFnt::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/SetFontOrBackground\/SetBgrFnt.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"}]}