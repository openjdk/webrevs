{"files":[{"patch":"@@ -134,1 +134,1 @@\n-    entry_frame_after_call_words                     =  34,\n+    entry_frame_after_call_words                     =  35,\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2945,1 +2945,0 @@\n-      __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -3159,1 +3158,0 @@\n-      __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -3206,1 +3204,0 @@\n-    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -3245,1 +3242,0 @@\n-    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -3258,1 +3254,0 @@\n-    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -3286,1 +3281,0 @@\n-    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -3298,1 +3292,0 @@\n-    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -3356,1 +3349,0 @@\n-    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -3404,1 +3396,0 @@\n-    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -129,2 +129,3 @@\n-  \/\/ -34 [ argument word 1      ]\n-  \/\/ -33 [ saved f27            ] <--- sp_after_call\n+  \/\/ -35 [ argument word 1      ]\n+  \/\/ -34 [ saved FRM in Floating-point Control and Status Register ] <--- sp_after_call\n+  \/\/ -33 [ saved f27            ]\n@@ -167,1 +168,1 @@\n-    sp_after_call_off  = -33,\n+    sp_after_call_off  = -34,\n@@ -169,0 +170,1 @@\n+    frm_off            = sp_after_call_off,\n@@ -216,0 +218,1 @@\n+    const Address frm_save      (fp, frm_off            * wordSize);\n@@ -298,0 +301,10 @@\n+    __ frrm(t0);\n+    __ sd(t0, frm_save);\n+    \/\/ Set frm to the state we need. We do want Round to Nearest. We\n+    \/\/ don't want non-IEEE rounding modes.\n+    Label skip_fsrmi;\n+    guarantee(__ RoundingMode::rne == 0, \"must be\");\n+    __ beqz(t0, skip_fsrmi);\n+    __ fsrmi(__ RoundingMode::rne);\n+    __ bind(skip_fsrmi);\n+\n@@ -417,0 +430,8 @@\n+    \/\/ restore frm\n+    Label skip_fsrm;\n+    __ ld(t0, frm_save);\n+    __ frrm(t1);\n+    __ beq(t0, t1, skip_fsrm);\n+    __ fsrm(t0);\n+    __ bind(skip_fsrm);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"}]}