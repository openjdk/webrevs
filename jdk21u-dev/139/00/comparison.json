{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -78,1 +79,1 @@\n-            System.out.println(events);\n+            System.err.println(events);\n@@ -82,2 +83,2 @@\n-            assertTrue(startCount == 100);\n-            assertTrue(endCount == 100);\n+            assertEquals(100, startCount);\n+            assertEquals(100, endCount);\n@@ -92,0 +93,5 @@\n+        Runnable[] parkers = new Runnable[] {\n+            () -> LockSupport.park(),\n+            () -> LockSupport.parkNanos(Duration.ofDays(1).toNanos())\n+        };\n+\n@@ -93,2 +99,1 @@\n-            recording.enable(\"jdk.VirtualThreadPinned\")\n-                     .withThreshold(Duration.ofMillis(500));\n+            recording.enable(\"jdk.VirtualThreadPinned\");\n@@ -96,1 +101,0 @@\n-            \/\/ execute task in a virtual thread, carrier thread is pinned 3 times.\n@@ -98,10 +102,15 @@\n-            ThreadFactory factory = Thread.ofVirtual().factory();\n-            try (var executor = Executors.newThreadPerTaskExecutor(factory)) {\n-                executor.submit(() -> {\n-                    synchronized (lock) {\n-                        \/\/ pinned, duration < 500ms\n-                        Thread.sleep(1);\n-\n-                        \/\/ pinned, duration > 500ms\n-                        Thread.sleep(Duration.ofSeconds(3));\n-                        Thread.sleep(Duration.ofSeconds(3));\n+            try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {\n+                for (Runnable parker : parkers) {\n+                    \/\/ execute parking task in virtual thread\n+                    var threadRef = new AtomicReference<Thread>();\n+                    executor.submit(() -> {\n+                        threadRef.set(Thread.currentThread());\n+                        synchronized (lock) {\n+                            parker.run();   \/\/ should pin carrier\n+                        }\n+                    });\n+\n+                    \/\/ wait for the task to start and the virtual thread to park\n+                    Thread thread;\n+                    while ((thread = threadRef.get()) == null) {\n+                        Thread.sleep(10);\n@@ -109,2 +118,10 @@\n-                    return null;\n-                });\n+                    try {\n+                        Thread.State state = thread.getState();\n+                        while (state != Thread.State.WAITING && state != Thread.State.TIMED_WAITING) {\n+                            Thread.sleep(10);\n+                            state = thread.getState();\n+                        }\n+                    } finally {\n+                        LockSupport.unpark(thread);\n+                    }\n+                }\n@@ -116,1 +133,1 @@\n-            System.out.println(events);\n+            System.err.println(events);\n@@ -118,1 +135,1 @@\n-            \/\/ should have two pinned events recorded\n+            \/\/ should have a pinned event for each park\n@@ -120,1 +137,1 @@\n-            assertTrue(pinnedCount == 2);\n+            assertEquals(parkers.length, pinnedCount);\n@@ -167,1 +184,1 @@\n-            System.out.println(events);\n+            System.err.println(events);\n@@ -170,1 +187,1 @@\n-            assertTrue(count == 2);\n+            assertEquals(2, count);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/JfrEvents.java","additions":40,"deletions":23,"binary":false,"changes":63,"status":"modified"}]}