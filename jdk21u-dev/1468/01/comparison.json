{"files":[{"patch":"@@ -91,1 +91,3 @@\n-  uintx _count, _capacity;\n+  size_t _count, _capacity;\n+  mutable size_t _last;\n+\n@@ -93,1 +95,2 @@\n-  CachedNMTInformation() : _ranges(nullptr), _flags(nullptr), _count(0), _capacity(0) {}\n+  CachedNMTInformation() : _ranges(nullptr), _flags(nullptr),\n+                           _count(0), _capacity(0), _last(0) {}\n@@ -110,1 +113,1 @@\n-      const uintx new_capacity = MAX2((uintx)4096, 2 * _capacity);\n+      const size_t new_capacity = MAX2((size_t)4096, 2 * _capacity);\n@@ -115,1 +118,1 @@\n-        \/\/ In case of OOM lets make no fuzz. Just return.\n+        \/\/ In case of OOM lets make no fuss. Just return.\n@@ -130,0 +133,8 @@\n+    assert(from <= to, \"Sanity\");\n+    \/\/ We optimize for sequential lookups. Since this class is used when a list\n+    \/\/ of OS mappings is scanned (VirtualQuery, \/proc\/pid\/maps), and these lists\n+    \/\/ are usually sorted in order of addresses, ascending.\n+    if (to <= _ranges[_last].from) {\n+      \/\/ the range is to the right of the given section, we need to re-start the search\n+      _last = 0;\n+    }\n@@ -131,1 +142,1 @@\n-    for(uintx i = 0; i < _count; i++) {\n+    for(uintx i = _last; i < _count; i++) {\n@@ -134,1 +145,2 @@\n-      } else if (from < _ranges[i].to) {\n+      } else if (to <= _ranges[i].from) {\n+        _last = i;\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"}]}