{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\/\n@@ -36,0 +37,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -39,2 +42,2 @@\n-import java.net.ServerSocket;\n-import java.net.Socket;\n+import java.lang.ref.Reference;\n+import java.rmi.ConnectIOException;\n@@ -43,1 +46,0 @@\n-import java.rmi.server.RMIClientSocketFactory;\n@@ -53,1 +55,1 @@\n-        public String sayHello() throws RemoteException;\n+        String sayHello() throws RemoteException;\n@@ -56,9 +58,1 @@\n-    public class HelloImpl extends UnicastRemoteObject implements Hello {\n-\n-        public HelloImpl(int port,\n-                         RMIClientSocketFactory csf,\n-                         RMIServerSocketFactory ssf)\n-            throws RemoteException {\n-            super(port, csf, ssf);\n-        }\n-\n+    public class HelloImpl implements Hello {\n@@ -68,61 +62,0 @@\n-\n-        public Remote runServer() throws IOException {\n-            System.out.println(\"Inside HelloImpl::runServer\");\n-            \/\/ Get a remote stub for this RMI object\n-            \/\/\n-            Remote stub = toStub(this);\n-            System.out.println(\"Stub = \" + stub);\n-            return stub;\n-        }\n-    }\n-\n-    public class HelloClient {\n-\n-        public void runClient(Remote stub) throws IOException {\n-            System.out.println(\"Inside HelloClient::runClient\");\n-            \/\/ \"obj\" is the identifier that we'll use to refer\n-            \/\/ to the remote object that implements the \"Hello\"\n-            \/\/ interface\n-            Hello obj = (Hello) stub;\n-            String message = obj.sayHello();\n-            System.out.println(message);\n-        }\n-    }\n-\n-    public static class ClientFactory extends SslRMIClientSocketFactory {\n-\n-        public ClientFactory() {\n-            super();\n-        }\n-\n-        public Socket createSocket(String host, int port) throws IOException {\n-            System.out.println(\"ClientFactory::Calling createSocket(\" +\n-                               host + \",\" + port + \")\");\n-            return super.createSocket(host, port);\n-        }\n-    }\n-\n-    public static class ServerFactory extends SslRMIServerSocketFactory {\n-\n-        public ServerFactory() {\n-            super();\n-        }\n-\n-        public ServerFactory(String[] ciphers,\n-                             String[] protocols,\n-                             boolean need) {\n-            super(ciphers, protocols, need);\n-        }\n-\n-        public ServerFactory(SSLContext context,\n-                             String[] ciphers,\n-                             String[] protocols,\n-                             boolean need) {\n-            super(context, ciphers, protocols, need);\n-        }\n-\n-        public ServerSocket createServerSocket(int port) throws IOException {\n-            System.out.println(\"ServerFactory::Calling createServerSocket(\" +\n-                               port + \")\");\n-            return super.createServerSocket(port);\n-        }\n@@ -131,3 +64,4 @@\n-    public void testRmiCommunication(RMIServerSocketFactory serverFactory, boolean expectException) {\n-\n-        HelloImpl server = null;\n+    public void testRmiCommunication(RMIServerSocketFactory serverSocketFactory) throws Exception {\n+        HelloImpl server = new HelloImpl();\n+        Hello stub = (Hello)UnicastRemoteObject.exportObject(server,\n+                0, new SslRMIClientSocketFactory(), serverSocketFactory);\n@@ -135,17 +69,4 @@\n-            server = new HelloImpl(0,\n-                                    new ClientFactory(),\n-                                    serverFactory);\n-            Remote stub = server.runServer();\n-            HelloClient client = new HelloClient();\n-            client.runClient(stub);\n-            if (expectException) {\n-                throw new RuntimeException(\"Test completed without throwing an expected exception.\");\n-            }\n-\n-        } catch (IOException exc) {\n-            if (!expectException) {\n-                throw new RuntimeException(\"An error occurred during test execution\", exc);\n-            } else {\n-                System.out.println(\"Caught expected exception: \" + exc);\n-            }\n-\n+            String msg = stub.sayHello();\n+            Asserts.assertEquals(\"Hello World!\", msg);\n+        } finally {\n+            Reference.reachabilityFence(server);\n@@ -155,3 +76,2 @@\n-    private static void testServerFactory(String[] cipherSuites, String[] protocol, String expectedMessage) throws Exception {\n-        try {\n-            new ServerFactory(SSLContext.getDefault(),\n+    private static void testSslServerSocketFactory(String[] cipherSuites, String[] protocol) throws Exception {\n+        new SslRMIServerSocketFactory(SSLContext.getDefault(),\n@@ -159,9 +79,0 @@\n-            throw new RuntimeException(\n-                    \"The expected exception for \"+ expectedMessage + \" was not thrown.\");\n-        } catch (IllegalArgumentException exc) {\n-            \/\/ expecting an exception with a specific message\n-            \/\/ anything else is an error\n-            if (!exc.getMessage().toLowerCase().contains(expectedMessage)) {\n-                throw exc;\n-            }\n-        }\n@@ -175,1 +86,2 @@\n-            case 1 -> testRmiCommunication(new ServerFactory(), false);\n+            case 1 ->\n+                testRmiCommunication(new SslRMIServerSocketFactory());\n@@ -178,1 +90,2 @@\n-            case 2 -> testRmiCommunication(new ServerFactory(null, null, false), false);\n+            case 2 ->\n+                testRmiCommunication(new SslRMIServerSocketFactory(null, null, false));\n@@ -181,1 +94,2 @@\n-            case 3 -> testRmiCommunication(new ServerFactory(null, null, null, true), false);\n+            case 3 ->\n+                testRmiCommunication(new SslRMIServerSocketFactory(null, null, null, true));\n@@ -184,2 +98,7 @@\n-            case 4 ->\n-                testServerFactory(new String[]{\"dummy_ciphersuite\"}, null, \"unsupported ciphersuite\");\n+            case 4 -> {\n+                Exception exc = Asserts.assertThrows(IllegalArgumentException.class,\n+                        () -> testSslServerSocketFactory(new String[]{\"dummy_ciphersuite\"}, null));\n+                if (!exc.getMessage().toLowerCase().contains(\"unsupported ciphersuite\")) {\n+                    throw exc;\n+                }\n+            }\n@@ -188,2 +107,7 @@\n-            case 5 ->\n-                testServerFactory(null, new String[]{\"dummy_protocol\"}, \"unsupported protocol\");\n+            case 5 -> {\n+                Exception thrown = Asserts.assertThrows(IllegalArgumentException.class,\n+                        () -> testSslServerSocketFactory(null, new String[]{\"dummy_protocol\"}));\n+                if (!thrown.getMessage().toLowerCase().contains(\"unsupported protocol\")) {\n+                    throw thrown;\n+                }\n+            }\n@@ -195,1 +119,2 @@\n-                testRmiCommunication(new ServerFactory(), true);\n+                Asserts.assertThrows(ConnectIOException.class,\n+                        () -> testRmiCommunication(new SslRMIServerSocketFactory()));\n@@ -202,1 +127,2 @@\n-                testRmiCommunication(new ServerFactory(), true);\n+                Asserts.assertThrows(ConnectIOException.class,\n+                        () -> testRmiCommunication(new SslRMIServerSocketFactory()));\n","filename":"test\/jdk\/javax\/rmi\/ssl\/SSLSocketParametersTest.java","additions":41,"deletions":115,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -555,0 +555,40 @@\n+    \/**\n+     * A functional interface for executing tests in assertThrownException\n+     *\/\n+    @FunctionalInterface\n+    public interface TestMethod {\n+        void execute() throws Throwable;\n+    }\n+\n+\n+    public static <T extends Throwable> T assertThrows(Class<T> expected, TestMethod testMethod) {\n+        return assertThrows(expected, testMethod, \"An unexpected exception was thrown.\");\n+    }\n+\n+    \/**\n+     * Asserts that the given exception (or a subclass of it) is thrown when\n+     * executing the test method.\n+     *\n+     * If the test method throws the correct exception, the exception is returned\n+     * to the caller for additional validation e.g., comparing the exception\n+     * message.\n+     *\n+     * @param expected The expected exception\n+     * @param testMethod The code to execute that should throw the exception\n+     * @param msg A description of the assumption\n+     * @return The thrown exception.\n+     *\/\n+    public static <T extends Throwable> T assertThrows(Class<T> expected, TestMethod testMethod, String msg) {\n+        try {\n+            testMethod.execute();\n+        } catch (Throwable exc) {\n+            if (expected.isInstance(exc)) {\n+                return (T) exc;\n+            } else {\n+                fail(Objects.toString(msg, \"An unexpected exception was thrown.\")\n+                        + \" Expected \" + expected.getName(), exc);\n+            }\n+        }\n+        throw new RuntimeException(\"No exception was thrown. Expected: \" + expected.getName());\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"}]}