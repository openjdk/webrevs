{"files":[{"patch":"@@ -819,1 +819,2 @@\n-        for (int cycleStart = 0, nMoved = 0; nMoved != size; cycleStart++) {\n+        int bound = size - distance;\n+        for (int cycleStart = 0, nMoved = 0; nMoved < size; cycleStart++) {\n@@ -823,2 +824,1 @@\n-                i += distance;\n-                if (i >= size)\n+                if (i >= bound)\n@@ -826,0 +826,1 @@\n+                i += distance;\n@@ -827,1 +828,1 @@\n-                nMoved ++;\n+                nMoved++;\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314236\n+ * @summary Overflow in Collections.rotate\n+ *\/\n+\n+import java.util.AbstractList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.RandomAccess;\n+\n+public class RotateHuge {\n+\n+    private static final class MockList extends AbstractList<Object>\n+            implements RandomAccess {\n+        private final int size;\n+\n+        public MockList(final int size) {\n+            if (size < 0)\n+                throw new IllegalArgumentException(\"Illegal size: \" + size);\n+            this.size = size;\n+        }\n+\n+        @Override\n+        public Object get(final int index) {\n+            Objects.checkIndex(index, size);\n+            return null;\n+        }\n+\n+        @Override\n+        public Object set(final int index, final Object element) {\n+            Objects.checkIndex(index, size);\n+            return null;\n+        }\n+\n+        @Override\n+        public int size() {\n+            return size;\n+        }\n+    }\n+\n+    public static void main(final String[] args) {\n+        testRotate((1 << 30) + 1, -(1 << 30) - 2);\n+        testRotate((1 << 30) + 1, 1 << 30);\n+        testRotate(Integer.MAX_VALUE, Integer.MIN_VALUE);\n+        testRotate(Integer.MAX_VALUE, Integer.MIN_VALUE + 3);\n+        testRotate(Integer.MAX_VALUE, 2);\n+        testRotate(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n+    }\n+\n+    \/*\n+     * This test covers only index computations.\n+     * Correctness of elements rotation is not checked.\n+     *\/\n+    private static void testRotate(final int size, final int distance) {\n+        final List<Object> list = new MockList(size);\n+        Collections.rotate(list, distance);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Collections\/RotateHuge.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}