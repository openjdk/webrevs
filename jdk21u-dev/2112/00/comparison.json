{"files":[{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4210461\n+ * @summary Confirm Metal Look & Feel's MenuItem Accelerator Delimiter\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual JavaLAFMenuAcceleratorDelimiter\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.KeyStroke;\n+import javax.swing.UIManager;\n+\n+public class JavaLAFMenuAcceleratorDelimiter {\n+    static final String INSTRUCTIONS = \"\"\"\n+        A simple check. The visual design specification for JLF\/Metal asks for\n+        a \"-\" to delimit the other two entities in a menu item's accelerator.\n+        The test passes if the delimiter for the accelerator is correct when\n+        opening the example menu. Otherwise, the test fails.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Set Metal L&F\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"JavaLAFMenuAcceleratorDelimiter Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(JavaLAFMenuAcceleratorDelimiter::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame frame = new JFrame(\"Metal L&F Accelerator Delimiter Test\");\n+        JPanel menuPanel = new JPanel();\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.setOpaque(true);\n+        JMenu exampleMenu = new JMenu(\"Example\");\n+        JMenuItem hiMenuItem = new JMenuItem(\"Hi There!\");\n+        hiMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,\n+                ActionEvent.CTRL_MASK));\n+        exampleMenu.add(hiMenuItem);\n+        menuBar.add(exampleMenu);\n+        menuPanel.add(menuBar);\n+\n+        frame.getContentPane().setLayout(new BorderLayout());\n+        frame.getContentPane().add(menuPanel, BorderLayout.CENTER);\n+        frame.setSize(250, 150);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/metal\/MenuItemUI\/JavaLAFMenuAcceleratorDelimiter.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4952462\n+ * @summary Ocean: Tests that disabled selected JRadioButton dot is NOT\n+ *          painted with the foreground color\n+ * @modules java.desktop\/sun.awt\n+ * @library \/test\/lib\n+ * @key headful\n+ * @run main bug4952462\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JRadioButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.plaf.metal.MetalTheme;\n+\n+import jtreg.SkippedException;\n+import sun.awt.AppContext;\n+\n+public class bug4952462 {\n+    private static JFrame frame;\n+    private static JRadioButton rb;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+\n+            MetalTheme theme = (MetalTheme) AppContext.getAppContext().get(\"currentMetalTheme\");\n+            if (theme == null || !\"Ocean\".equals(theme.getName())) {\n+                throw new SkippedException(\"Current theme is not Ocean. Test is \" +\n+                        \"only for Metal's Ocean theme. Skipping test.\");\n+            } else {\n+                Robot r = new Robot();\n+                SwingUtilities.invokeAndWait(() -> {\n+                    frame = new JFrame(\"Metal JRadioButton Foreground Color Test\");\n+                    frame.getContentPane().setLayout(new FlowLayout());\n+                    rb = new JRadioButton(\"RadioButton\", true);\n+                    rb.setEnabled(false);\n+                    rb.setForeground(Color.RED);\n+                    frame.getContentPane().add(rb);\n+                    frame.setSize(250, 100);\n+                    frame.setLocationRelativeTo(null);\n+                    frame.setVisible(true);\n+                });\n+\n+                r.waitForIdle();\n+                r.delay(500);\n+\n+                SwingUtilities.invokeAndWait(() -> {\n+                    Point p = rb.getLocationOnScreen();\n+                    for (int i = 0; i < 50; i++) {\n+                        Color c = r.getPixelColor(p.x + 10 + i, p.y + (rb.getHeight() \/ 2));\n+                        System.out.println(c);\n+                        if (c.getRed() > 200 && c.getBlue() < 200 && c.getGreen() < 200) {\n+                            throw new RuntimeException(\"Test failed. Radiobutton is red \" +\n+                                    \"and not grey.\");\n+                        }\n+                    }\n+                });\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/metal\/MetalIconFactory\/bug4952462.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4186347\n+ * @summary Tests changing Slider.horizontalThumbIcon UIResource\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4186347\n+ *\/\n+\n+import javax.swing.Icon;\n+import javax.swing.ImageIcon;\n+import javax.swing.JFrame;\n+import javax.swing.JSlider;\n+import javax.swing.UIDefaults;\n+import javax.swing.UIManager;\n+import javax.swing.plaf.IconUIResource;\n+\n+public class bug4186347 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        If the slider's thumb icon is painted correctly\n+        (that is centered vertically relative to slider\n+        channel) then test passed, otherwise it failed.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Set Metal L&F\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"bug4186347 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4186347::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame frame = new JFrame(\"Metal JSlider Icon Test\");\n+        String a = System.getProperty(\"test.src\", \".\")\n+                + System.getProperty(\"file.separator\")\n+                + \"duke.gif\";\n+        Icon icon = new ImageIcon(a);\n+        IconUIResource iconResource = new IconUIResource(icon);\n+        UIDefaults defaults = UIManager.getDefaults();\n+        defaults.put(\"Slider.horizontalThumbIcon\", iconResource);\n+        JSlider s = new JSlider();\n+        frame.getContentPane().add(s);\n+        frame.setSize(250, 150);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/metal\/MetalSliderUI\/4186347\/bug4186347.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"filename":"test\/jdk\/javax\/swing\/plaf\/metal\/MetalSliderUI\/4186347\/duke.gif","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,229 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4969419\n+ * @summary Tests that generated disabled icons have same look with Ocean\n+ *          and are updated when theme is switched\n+ * @modules java.desktop\/sun.awt\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @key headful\n+ * @run main\/manual bug4969419\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.FlowLayout;\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.ImageIcon;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.JToggleButton;\n+import javax.swing.LookAndFeel;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.plaf.metal.DefaultMetalTheme;\n+import javax.swing.plaf.metal.MetalLookAndFeel;\n+import javax.swing.plaf.metal.MetalTheme;\n+\n+import sun.awt.AppContext;\n+\n+public class bug4969419 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        When the test starts you'll see several components with icons.\n+        Use the bottom combo box and the \"Set\" button to switch between\n+        the Ocean theme and DefaultMetalTheme.\n+\n+        1. Set the Ocean theme. Ensure all the icons are the same\n+           Note that they all are of the same brightness: none of them\n+           can be brighter or darker than the others.\n+\n+        2. Switch to DefaultMetalTheme. Ensure all the icons changed\n+           (became slightly darker).\n+\n+        3. Switch back to Ocean. Ensure all the icons changed\n+           (became brighter).\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"bug4969419 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4969419::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame frame = new JFrame(\"Metal Themes Icon Test\");\n+        Container pane = frame.getContentPane();\n+\n+        LFSwitch lfswitch = new LFSwitch(pane);\n+        if (!lfswitch.obtainOceanTheme()) {\n+            throw new RuntimeException(\"No Ocean theme available\");\n+        }\n+\n+        pane.setLayout(new BoxLayout(pane, BoxLayout.Y_AXIS));\n+\n+        String prefix = System.getProperty(\"test.src\",\n+                System.getProperty(\"user.dir\")) + System.getProperty(\"file.separator\");\n+        ImageIcon icon = new ImageIcon(prefix + \"duke.gif\");\n+\n+        JPanel panel = new JPanel();\n+        JButton b = new JButton(icon);\n+        b.setEnabled(false);\n+\n+        JLabel label = new JLabel(icon, SwingConstants.LEFT);\n+        label.setEnabled(false);\n+\n+        JTabbedPane tp = new JTabbedPane();\n+        tp.addTab(\"\", icon, new JPanel());\n+        tp.addTab(\"\", icon, new JPanel());\n+        tp.setEnabledAt(0, false);\n+        tp.setEnabledAt(1, false);\n+\n+        JButton sb = new JButton(icon);\n+        sb.setSelectedIcon(icon);\n+        sb.setSelected(true);\n+        sb.setEnabled(false);\n+\n+        JToggleButton tb = new JToggleButton(icon);\n+        tb.setEnabled(false);\n+\n+        JToggleButton stb = new JToggleButton(icon);\n+        stb.setSelectedIcon(icon);\n+        stb.setSelected(true);\n+        stb.setEnabled(false);\n+\n+        pane.setBackground(Color.white);\n+        panel.setBackground(Color.white);\n+        b.setBackground(Color.white);\n+        label.setBackground(Color.white);\n+        tp.setBackground(Color.white);\n+        sb.setBackground(Color.white);\n+        tb.setBackground(Color.white);\n+        stb.setBackground(Color.white);\n+\n+        panel.add(b);\n+        panel.add(label);\n+        panel.add(tp);\n+        panel.add(sb);\n+        panel.add(tb);\n+        panel.add(stb);\n+\n+        pane.add(panel);\n+        pane.add(lfswitch);\n+        frame.setSize(400, 400);\n+        return frame;\n+    }\n+\n+    static class LFSwitch extends JPanel {\n+        private Component target;\n+        static MetalTheme oceanTheme;\n+        JComboBox lfcombo;\n+\n+        public LFSwitch(Component target) {\n+            this.target = target;\n+            setLayout(new FlowLayout());\n+            lfcombo = new JComboBox(lookAndFeels);\n+            add(lfcombo);\n+            JButton setLfBut = new JButton(\"Set\");\n+            add(setLfBut);\n+            setLfBut.addActionListener(e -> setLf(lfcombo.getSelectedIndex(),\n+                    LFSwitch.this.target));\n+        }\n+\n+        boolean obtainOceanTheme() {\n+            if (oceanTheme != null) {\n+                return true;\n+            }\n+            try {\n+                UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+                SwingUtilities.updateComponentTreeUI(this);\n+            } catch (Exception e) {\n+                JOptionPane.showMessageDialog(this,\n+                        \"Unexpected error: couldn't set Metal\", \"Error\",\n+                        JOptionPane.ERROR_MESSAGE);\n+                return false;\n+            }\n+            MetalTheme theme = (MetalTheme) AppContext.getAppContext().\n+                    get(\"currentMetalTheme\");\n+            if (theme == null || theme.getName() != \"Ocean\") {\n+                JOptionPane.showMessageDialog(this,\n+                        \"The Ocean theme is not the default Metal theme,\\n\" +\n+                                \"but this test requires it to be default.\\n\" +\n+                                \"Therefore simply click PASS\");\n+                return false;\n+            }\n+            oceanTheme = theme;\n+            return true;\n+        }\n+\n+        void setLf(int idx, final Component root) {\n+            try {\n+                UIManager.setLookAndFeel((LookAndFeel) lfs[idx]);\n+                if (root != null) {\n+                    SwingUtilities.updateComponentTreeUI(root);\n+                }\n+            } catch (UnsupportedLookAndFeelException e) {\n+                JOptionPane.showMessageDialog(root,\n+                        \"The selected look and feel is unsupported on this platform\",\n+                        \"Error\", JOptionPane.ERROR_MESSAGE);\n+            } catch (Exception exc) {\n+                JOptionPane.showMessageDialog(root,\n+                        \"Error setting the selected look and feel\", \"Error\",\n+                        JOptionPane.ERROR_MESSAGE);\n+            }\n+        }\n+\n+        static Object[] lookAndFeels = {\n+                \"Metal (Ocean)\", \"Metal (DefaultMetalTheme)\",\n+        };\n+        static Object[] lfs = {\n+                new MetalLookAndFeel() {\n+                    protected void createDefaultTheme() {\n+                        setCurrentTheme(oceanTheme);\n+                    }\n+                },\n+                new MetalLookAndFeel() {\n+                    protected void createDefaultTheme() {\n+                        MetalTheme dt = new DefaultMetalTheme();\n+                        setCurrentTheme(dt);\n+                    }\n+                },\n+        };\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/metal\/OceanTheme\/4969419\/bug4969419.java","additions":229,"deletions":0,"binary":false,"changes":229,"status":"added"},{"patch":"","filename":"test\/jdk\/javax\/swing\/plaf\/metal\/OceanTheme\/4969419\/duke.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/awt\/Graphics2D\/DrawImageIAETest\/duke.gif","status":"copied"}]}