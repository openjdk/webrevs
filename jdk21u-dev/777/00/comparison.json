{"files":[{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+\n+\/*\n+ * @test 4033151\n+ * @summary Test that frame default size is minimum possible size\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DefaultSizeTest\n+ *\/\n+\n+public class DefaultSizeTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            An empty frame is created.\n+            It should be located to the right of this window\n+            and should be the minimum size allowed by the window manager.\n+            For any WM, the frame should be very small.\n+            If the frame is not large, click Pass or Fail otherwise.\n+            \"\"\";\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"DefaultSizeTest Instructions Frame\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(10)\n+                .columns(45)\n+                .build();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            Frame frame = new Frame(\"DefaultSize\");\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame\n+                    .positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/DefaultSizeTest.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Rectangle;\n+import java.awt.Shape;\n+\n+\/*\n+ * @test\n+ * @bug 4116029\n+ * @summary drawString does not honor clipping regions for lightweight components\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual LightweightCliprect\n+ *\/\n+\n+public class LightweightCliprect {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            If some text is drawn outside the red rectangle, press \"Fail\" button.\n+            Otherwise, press \"Pass\" button.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"LightweightCliprect Instructions Frame\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(10)\n+                .columns(45)\n+                .build();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            Frame frame = new Frame(\"DefaultSize\");\n+\n+            Container panel = new MyContainer();\n+            MyComponent c = new MyComponent();\n+            panel.add(c);\n+\n+            frame.add(panel);\n+            frame.setSize(400, 300);\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame\n+                    .positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n+class MyComponent extends Component {\n+\n+    public void paint(Graphics g) {\n+        Color c = g.getColor();\n+        g.setColor(Color.red);\n+        g.fillRect(20, 20, 400, 200);\n+        Shape clip = g.getClip();\n+        g.setClip(20, 20, 400, 200);\n+        \/\/draw the current java version in the component\n+        g.setColor(Color.black);\n+        String version = System.getProperty(\"java.version\");\n+        String vendor = System.getProperty(\"java.vendor\");\n+        int y = 10;\n+        for(int i = 0; i < 30; i++) {\n+            g.drawString(\"Lightweight: Java version: \" + version +\n+                         \", Vendor: \" + vendor, 10, y += 20);\n+        }\n+        g.setColor(c);\n+        g.setClip(clip);\n+        super.paint(g);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(300, 300);\n+    }\n+}\n+\n+class MyContainer extends Container {\n+    public MyContainer() {\n+        super();\n+        setLayout(new FlowLayout());\n+    }\n+\n+    public void paint(Graphics g) {\n+        Rectangle bounds = new Rectangle(getSize());\n+        g.setColor(Color.cyan);\n+        g.drawRect(bounds.x, bounds.y, bounds.width - 1, bounds.height - 1);\n+        super.paint(g);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/LightweightComponent\/LightweightCliprect.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Event;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.event.KeyEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4011219\n+ * @summary Test for function key press\/release received by Java client.\n+ * @key headful\n+ *\/\n+\n+public class FunctionKeyTest {\n+    private static FunctionKeyTester frame;\n+    private static Robot robot;\n+\n+    static volatile boolean keyPressReceived;\n+    static volatile boolean keyReleaseReceived;\n+\n+    static final StringBuilder failures = new StringBuilder();\n+\n+    private static void testKey(int keyCode, String keyText) {\n+        keyPressReceived = false;\n+        keyReleaseReceived = false;\n+\n+        robot.keyPress(keyCode);\n+\n+        if (!keyPressReceived) {\n+            failures.append(keyText).append(\" key press is not received\\n\");\n+        }\n+\n+        robot.keyRelease(keyCode);\n+\n+        if (!keyReleaseReceived) {\n+            failures.append(keyText).append(\" key release is not received\\n\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(150);\n+\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new FunctionKeyTester();\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            testKey(KeyEvent.VK_F11, \"F11\");\n+            testKey(KeyEvent.VK_F12, \"F12\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+\n+        if (failures.isEmpty()) {\n+            System.out.println(\"Passed\");\n+        } else {\n+            throw new RuntimeException(failures.toString());\n+        }\n+    }\n+}\n+\n+class FunctionKeyTester extends Frame {\n+    Label l = new Label (\"NULL\");\n+    Button b = new Button();\n+    TextArea log = new TextArea();\n+\n+    FunctionKeyTester() {\n+        super(\"Function Key Test\");\n+        this.setLayout(new BorderLayout());\n+        this.add(BorderLayout.NORTH, l);\n+        this.add(BorderLayout.SOUTH, b);\n+        this.add(BorderLayout.CENTER, log);\n+        log.setFocusable(false);\n+        log.setEditable(false);\n+        l.setBackground(Color.red);\n+        setSize(200, 200);\n+    }\n+\n+    public boolean handleEvent(Event e) {\n+        String message = \"e.id=\" + e.id + \"\\n\";\n+        System.out.print(message);\n+        log.append(message);\n+\n+        switch (e.id) {\n+            case 403 -> FunctionKeyTest.keyPressReceived = true;\n+            case 404 -> FunctionKeyTest.keyReleaseReceived = true;\n+        }\n+\n+        return super.handleEvent(e);\n+    }\n+\n+    public boolean keyDown(Event e, int key) {\n+        l.setText(\"e.key=\" + Integer.valueOf(e.key).toString());\n+        return false;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/FunctionKeyTest.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,221 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.FlowLayout;\n+import java.awt.Window;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+\n+\/*\n+ * @test\n+ * @summary test for defaultCloseOperation property for Swing JFrame and JDialog\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DefaultCloseOperation\n+ *\/\n+\n+public class DefaultCloseOperation extends JPanel {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        Do the following steps:\n+\n+         -  Click the \"Open Frame\" button (a TestFrame will appear)\n+         -  On the TestFrame, select \"Close\" from the system menu (the window should go away)\n+         -  Select \"Do Nothing\" from the \"JFrame Default Close Operation\" ComboBox\n+         -  Click the \"Open Frame\" button\n+         -  On the TestFrame, select \"Close\" from the system menu (the window should remain open)\n+         -  Select \"Dispose\" from the \"JFrame Default Close Operation\" ComboBox\n+         -  On the TestFrame, select \"Close\" from the system menu (the window should go away)\n+\n+\n+         -  Click the \"Open Frame\" button\n+         -  Click the \"Open Dialog\" button (a TestDialog will appear)\n+         -  On the TestDialog, select \"Close\" from the system menu (the window should go away)\n+         -  Select \"Do Nothing\" from the \"JDialog Default Close Operation\" ComboBox\n+         -  Click the \"Open Dialog\" button\n+         -  On the TestDialog, select \"Close\" from the system menu (the window should remain open)\n+         -  Select \"Dispose\" from the \"JDialog Default Close Operation\" ComboBox\n+         -  On the TestDialog, select \"Close\" from the system menu (the window should go away)\n+        \"\"\";\n+\n+    JComboBox<String> frameCloseOp;\n+\n+    CloseOpDialog testDialog;\n+    JComboBox<String> dialogCloseOp;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"DefaultCloseOperation Manual Test\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(20)\n+                .columns(70)\n+                .build();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            DefaultCloseOperation dco = new DefaultCloseOperation();\n+            dco.init();\n+\n+            JFrame frame = new JFrame(\"DefaultCloseOperation\");\n+            frame.add(dco);\n+            frame.setSize(500,200);\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame\n+                    .positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    public void init() {\n+        setLayout(new FlowLayout());\n+\n+        CloseOpFrame testFrame = new CloseOpFrame();\n+        testFrame.setLocationRelativeTo(null);\n+        PassFailJFrame.addTestWindow(testFrame);\n+\n+        add(new JLabel(\"JFrame Default Close Operation:\"));\n+        frameCloseOp = new JComboBox<>();\n+        frameCloseOp.addItem(\"Hide\");\n+        frameCloseOp.addItem(\"Do Nothing\");\n+        frameCloseOp.addItem(\"Dispose\");\n+        frameCloseOp.addItemListener(e -> {\n+            if (e.getStateChange() == ItemEvent.SELECTED) {\n+                String item = (String)e.getItem();\n+                switch (item) {\n+                    case \"Do Nothing\" -> testFrame\n+                            .setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n+                    case \"Hide\" -> testFrame\n+                            .setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);\n+                    case \"Dispose\" -> testFrame\n+                            .setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+                }\n+            }\n+        });\n+        add(frameCloseOp);\n+\n+        JButton b = new JButton(\"Open Frame...\");\n+        b.addActionListener(e -> testFrame.setVisible(true));\n+        add(b);\n+\n+        testDialog = new CloseOpDialog(testFrame);\n+        testDialog.setLocationRelativeTo(null);\n+        PassFailJFrame.addTestWindow(testDialog);\n+\n+        add(new JLabel(\"JDialog Default Close Operation:\"));\n+        dialogCloseOp = new JComboBox<>();\n+        dialogCloseOp.addItem(\"Hide\");\n+        dialogCloseOp.addItem(\"Do Nothing\");\n+        dialogCloseOp.addItem(\"Dispose\");\n+        dialogCloseOp.addItemListener(e -> {\n+            if (e.getStateChange() == ItemEvent.SELECTED) {\n+                String item = (String)e.getItem();\n+                switch (item) {\n+                    case \"Do Nothing\" -> testDialog\n+                            .setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n+                    case \"Hide\" -> testDialog\n+                            .setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);\n+                    case \"Dispose\" -> testDialog\n+                            .setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+                }\n+            }\n+        });\n+        add(dialogCloseOp);\n+\n+        b = new JButton(\"Open Dialog...\");\n+        b.addActionListener(e -> testDialog.setVisible(true));\n+        add(b);\n+    }\n+\n+    public static void verifyCloseOperation(Window window, int op) {\n+        switch (op) {\n+            case WindowConstants.DO_NOTHING_ON_CLOSE -> {\n+                if (!window.isVisible()) {\n+                    PassFailJFrame\n+                            .forceFail(\"defaultCloseOperation=DoNothing failed\");\n+                }\n+            }\n+            case WindowConstants.HIDE_ON_CLOSE -> {\n+                if (window.isVisible()) {\n+                    PassFailJFrame\n+                            .forceFail(\"defaultCloseOperation=Hide failed\");\n+                }\n+            }\n+            case WindowConstants.DISPOSE_ON_CLOSE -> {\n+                if (window.isVisible() || window.isDisplayable()) {\n+                    PassFailJFrame\n+                            .forceFail(\"defaultCloseOperation=Dispose failed\");\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+class CloseOpFrame extends JFrame {\n+\n+    public CloseOpFrame() {\n+        super(\"DefaultCloseOperation Test\");\n+        getContentPane().add(\"Center\", new JLabel(\"Test Frame\"));\n+        pack();\n+    }\n+\n+    protected void processWindowEvent(WindowEvent e) {\n+        super.processWindowEvent(e);\n+\n+        if (e.getID() == WindowEvent.WINDOW_CLOSING) {\n+            DefaultCloseOperation\n+                    .verifyCloseOperation(this, getDefaultCloseOperation());\n+        }\n+    }\n+}\n+\n+class CloseOpDialog extends JDialog {\n+\n+    public CloseOpDialog(Frame owner) {\n+        super(owner, \"DefaultCloseOperation Test Dialog\");\n+        getContentPane().add(\"Center\", new JLabel(\"Test Dialog\"));\n+        pack();\n+    }\n+\n+    protected void processWindowEvent(WindowEvent e) {\n+        super.processWindowEvent(e);\n+\n+        if (e.getID() == WindowEvent.WINDOW_CLOSING) {\n+            DefaultCloseOperation\n+                    .verifyCloseOperation(this, getDefaultCloseOperation());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/DefaultCloseOperation.java","additions":221,"deletions":0,"binary":false,"changes":221,"status":"added"}]}