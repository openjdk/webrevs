{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -28,3 +28,1 @@\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -36,1 +34,1 @@\n- * @run testng jdk.test.lib.format.ArrayDiffTest\n+ * @run junit jdk.test.lib.format.ArrayDiffTest\n@@ -38,1 +36,1 @@\n-public class ArrayDiffTest {\n+class ArrayDiffTest {\n@@ -41,1 +39,1 @@\n-    public void testEqualArrays() {\n+    void testEqualArrays() {\n@@ -49,1 +47,1 @@\n-    public void testOutputFitsWidth() {\n+    void testOutputFitsWidth() {\n@@ -65,1 +63,1 @@\n-    public void testIntegers() {\n+    void testIntegers() {\n@@ -81,1 +79,1 @@\n-    public void testLongs() {\n+    void testLongs() {\n@@ -97,1 +95,1 @@\n-    public void testFirstElementIsWrong() {\n+    void testFirstElementIsWrong() {\n@@ -113,1 +111,1 @@\n-    public void testOneElementIsEmpty() {\n+    void testOneElementIsEmpty() {\n@@ -129,1 +127,1 @@\n-    public void testOutputDoesntFitWidth() {\n+    void testOutputDoesntFitWidth() {\n@@ -145,1 +143,1 @@\n-    public void testVariableElementWidthOutputDoesntFitWidth() {\n+    void testVariableElementWidthOutputDoesntFitWidth() {\n@@ -161,1 +159,1 @@\n-    public void testContextBefore() {\n+    void testContextBefore() {\n@@ -177,1 +175,1 @@\n-    public void testBoundedBytesWithDifferentWidth() {\n+    void testBoundedBytesWithDifferentWidth() {\n@@ -193,1 +191,1 @@\n-    public void testBoundedFirstElementIsWrong() {\n+    void testBoundedFirstElementIsWrong() {\n@@ -209,1 +207,1 @@\n-    public void testBoundedOneArchiveIsEmpty() {\n+    void testBoundedOneArchiveIsEmpty() {\n@@ -225,1 +223,1 @@\n-    public void testUnboundedOneArchiveIsEmpty() {\n+    void testUnboundedOneArchiveIsEmpty() {\n@@ -241,1 +239,1 @@\n-    public void testUnprintableCharFormatting() {\n+    void testUnprintableCharFormatting() {\n@@ -257,1 +255,1 @@\n-    public void testStringElements() {\n+    void testStringElements() {\n@@ -273,1 +271,1 @@\n-    public void testToStringableObjects() {\n+    void testToStringableObjects() {\n@@ -297,1 +295,1 @@\n-    public void testNullElements() {\n+    void testNullElements() {\n@@ -312,3 +310,3 @@\n-    @Test (expectedExceptions = NullPointerException.class)\n-    public void testFirstArrayIsNull() {\n-        var diff = ArrayDiff.of(null, new String[] {\"a\", \"b\"});\n+    @Test\n+    void testFirstArrayIsNull() {\n+        assertThrows(NullPointerException.class, () -> ArrayDiff.of(null, new String[] {\"a\", \"b\"}));\n@@ -317,3 +315,3 @@\n-    @Test (expectedExceptions = NullPointerException.class)\n-    public void testSecondArrayIsNull() {\n-        var diff = ArrayDiff.of(null, new String[] {\"a\", \"b\"});\n+    @Test\n+    void testSecondArrayIsNull() {\n+        assertThrows(NullPointerException.class, () -> ArrayDiff.of(new String[] {\"a\", \"b\"}, null));\n@@ -334,1 +332,1 @@\n-        public AssertBuilder withDefaultParams() {\n+        AssertBuilder withDefaultParams() {\n@@ -339,1 +337,1 @@\n-        public AssertBuilder withParams(int width, int contextBefore) {\n+        AssertBuilder withParams(int width, int contextBefore) {\n@@ -346,1 +344,1 @@\n-        public AssertBuilder withArrays(Object first, Object second) {\n+        AssertBuilder withArrays(Object first, Object second) {\n@@ -352,1 +350,1 @@\n-        public AssertBuilder thatResultIs(boolean result) {\n+        AssertBuilder thatResultIs(boolean result) {\n@@ -357,1 +355,1 @@\n-        public AssertBuilder thatFormattedValuesAre(\n+        AssertBuilder thatFormattedValuesAre(\n@@ -366,1 +364,1 @@\n-        public void assertTwoWay() {\n+        void assertTwoWay() {\n@@ -385,1 +383,1 @@\n-                assertEquals(diff.format(), expected);\n+                assertEquals(expected, diff.format());\n@@ -404,1 +402,1 @@\n-                assertEquals(diff.format(), expected);\n+                assertEquals(expected, diff.format());\n","filename":"test\/lib-test\/jdk\/test\/lib\/format\/ArrayDiffTest.java","additions":36,"deletions":38,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +36,1 @@\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -45,1 +44,1 @@\n- * @run testng jdk.test.lib.hexdump.ASN1FormatterTest\n+ * @run junit jdk.test.lib.hexdump.ASN1FormatterTest\n@@ -47,2 +46,1 @@\n-@Test\n-public class ASN1FormatterTest {\n+class ASN1FormatterTest {\n@@ -52,1 +50,1 @@\n-    static void testPEM() throws IOException {\n+    void testPEM() throws IOException {\n@@ -67,5 +65,5 @@\n-            Assert.assertEquals(result.lines().count(), 76, \"Lines\");\n-            Assert.assertEquals(result.lines().filter(s -> s.contains(\"SEQUENCE\")).count(),24, \"Sequences\");\n-            Assert.assertEquals(result.lines().filter(s -> s.contains(\"OBJECT ID\")).count(), 17, \"ObjectIDs\");\n-            Assert.assertEquals(result.lines().filter(s -> s.contains(\"UTCTIME\")).count(), 2, \"UTCTIME\");\n-            Assert.assertEquals(result.lines().filter(s -> s.contains(\"BIT STRING\")).count(), 3, \"BitStrings\");\n+            assertEquals(76, result.lines().count(), \"Lines\");\n+            assertEquals(24, result.lines().filter(s -> s.contains(\"SEQUENCE\")).count(),\"Sequences\");\n+            assertEquals(17, result.lines().filter(s -> s.contains(\"OBJECT ID\")).count(), \"ObjectIDs\");\n+            assertEquals(2, result.lines().filter(s -> s.contains(\"UTCTIME\")).count(), \"UTCTIME\");\n+            assertEquals(3, result.lines().filter(s -> s.contains(\"BIT STRING\")).count(), \"BitStrings\");\n@@ -78,1 +76,1 @@\n-    static void dumpPEM() throws IOException {\n+    void dumpPEM() throws IOException {\n@@ -95,5 +93,5 @@\n-            Assert.assertEquals(result.lines().count(), 126, \"Lines\");\n-            Assert.assertEquals(result.lines().filter(s -> s.contains(\"SEQUENCE\")).count(), 24, \"Sequences\");\n-            Assert.assertEquals(result.lines().filter(s -> s.contains(\"OBJECT ID\")).count(), 17, \"ObjectIDs\");\n-            Assert.assertEquals(result.lines().filter(s -> s.contains(\"UTCTIME\")).count(), 2, \"UTCTIME\");\n-            Assert.assertEquals(result.lines().filter(s -> s.contains(\"BIT STRING\")).count(), 3, \"BitStrings\");\n+            assertEquals(126, result.lines().count(), \"Lines\");\n+            assertEquals(24, result.lines().filter(s -> s.contains(\"SEQUENCE\")).count(), \"Sequences\");\n+            assertEquals(17, result.lines().filter(s -> s.contains(\"OBJECT ID\")).count(), \"ObjectIDs\");\n+            assertEquals(2, result.lines().filter(s -> s.contains(\"UTCTIME\")).count(), \"UTCTIME\");\n+            assertEquals(3, result.lines().filter(s -> s.contains(\"BIT STRING\")).count(), \"BitStrings\");\n@@ -106,1 +104,1 @@\n-    static void testIndefinite() {\n+    void testIndefinite() {\n@@ -113,6 +111,6 @@\n-        Assert.assertEquals(result.lines().filter(s -> s.contains(\"OCTET STRING [INDEFINITE]\")).count(),\n-                1, \"Indefinite length\");\n-        Assert.assertEquals(result.lines().filter(s -> s.contains(\";   OCTET STRING [2]\")).count(),\n-                2, \"Octet Sequences\");\n-        Assert.assertEquals(result.lines().filter(s -> s.contains(\";   END-OF-CONTENT\")).count(),\n-                1, \"end of content\");\n+        assertEquals(1, result.lines().filter(s -> s.contains(\"OCTET STRING [INDEFINITE]\")).count(),\n+                \"Indefinite length\");\n+        assertEquals(2, result.lines().filter(s -> s.contains(\";   OCTET STRING [2]\")).count(),\n+                \"Octet Sequences\");\n+        assertEquals(1, result.lines().filter(s -> s.contains(\";   END-OF-CONTENT\")).count(),\n+                \"end of content\");\n@@ -122,1 +120,1 @@\n-    static void testMain() {\n+    void testMain() {\n","filename":"test\/lib-test\/jdk\/test\/lib\/hexdump\/ASN1FormatterTest.java","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,4 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,0 +40,3 @@\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -46,1 +50,1 @@\n- * @run testng jdk.test.lib.hexdump.HexPrinterTest\n+ * @run junit jdk.test.lib.hexdump.HexPrinterTest\n@@ -48,1 +52,1 @@\n-public class HexPrinterTest {\n+class HexPrinterTest {\n@@ -51,1 +55,1 @@\n-    static void testMinimalToStringByteArray() {\n+    void testMinimalToStringByteArray() {\n@@ -59,15 +63,1 @@\n-        Assert.assertEquals(actual, expected.toString(), \"Minimal format incorrect\");\n-    }\n-\n-    @DataProvider(name = \"ColumnParams\")\n-    Object[][] columnParams() {\n-        return new Object[][]{\n-                {\"%4d: \", \"%d \", 10, \" ; \", 50, HexPrinter.Formatters.PRINTABLE, \"\\n\"},\n-                {\"%03o: \", \"%d \", 16, \" ; \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"\"), \"\\n\"},\n-                {\"%5d: \", \"%02x:\", 16, \" ; \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"\"), \"\\n\"},\n-                {\"%5d: \", \"%3d\", 16, \" ; \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"\"), \"\\n\"},\n-                {\"%05o: \", \"%3o\", 8, \" ; \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"\"), \"\\n\"},\n-                {\"%6x: \", \"%02x\", 8, \" | \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"%d \"), \"\\n\"},\n-                {\"%2x: \", \"%02x\", 8, \" | \", 50, HexPrinter.Formatters.PRINTABLE, \"\\n\"},\n-                {\"%5d: \", \"%02x\", 16, \" | \", 50, HexPrinter.Formatters.ofPrimitive(short.class, \"%d \"), \"\\n\"},\n-        };\n+        assertEquals(expected.toString(), actual, \"Minimal format incorrect\");\n@@ -76,8 +66,20 @@\n-    @DataProvider(name = \"BuiltinParams\")\n-    Object[][] builtinParams() {\n-        return new Object[][]{\n-                {\"minimal\", \"\", \"%02x\", 16, \"\", 64, HexPrinter.Formatters.NONE, \"\"},\n-                {\"canonical\", \"%08x  \", \"%02x \", 16, \"|\", 31, HexPrinter.Formatters.PRINTABLE, \"|\" + System.lineSeparator()},\n-                {\"simple\", \"%04x: \", \"%02x \", 16, \" \/\/ \", 64, HexPrinter.Formatters.ASCII, System.lineSeparator()},\n-                {\"source\", \"    \", \"(byte)%3d, \", 8, \" \/\/ \", 64, HexPrinter.Formatters.PRINTABLE,  System.lineSeparator()},\n-        };\n+    static Stream<Arguments> columnParams() {\n+        return Stream.of(\n+                Arguments.of(\"%4d: \", \"%d \", 10, \" ; \", 50, HexPrinter.Formatters.PRINTABLE, \"\\n\"),\n+                Arguments.of(\"%03o: \", \"%d \", 16, \" ; \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"\"), \"\\n\"),\n+                Arguments.of(\"%5d: \", \"%02x:\", 16, \" ; \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"\"), \"\\n\"),\n+                Arguments.of(\"%5d: \", \"%3d\", 16, \" ; \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"\"), \"\\n\"),\n+                Arguments.of(\"%05o: \", \"%3o\", 8, \" ; \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"\"), \"\\n\"),\n+                Arguments.of(\"%6x: \", \"%02x\", 8, \" | \", 50, HexPrinter.Formatters.ofPrimitive(byte.class, \"%d \"), \"\\n\"),\n+                Arguments.of(\"%2x: \", \"%02x\", 8, \" | \", 50, HexPrinter.Formatters.PRINTABLE, \"\\n\"),\n+                Arguments.of(\"%5d: \", \"%02x\", 16, \" | \", 50, HexPrinter.Formatters.ofPrimitive(short.class, \"%d \"), \"\\n\")\n+        );\n+    }\n+\n+    static Stream<Arguments> builtinParams() {\n+        return Stream.of(\n+                Arguments.of(\"minimal\", \"\", \"%02x\", 16, \"\", 64, HexPrinter.Formatters.NONE, \"\"),\n+                Arguments.of(\"canonical\", \"%08x  \", \"%02x \", 16, \"|\", 31, HexPrinter.Formatters.PRINTABLE, \"|\" + System.lineSeparator()),\n+                Arguments.of(\"simple\", \"%04x: \", \"%02x \", 16, \" \/\/ \", 64, HexPrinter.Formatters.ASCII, System.lineSeparator()),\n+                Arguments.of(\"source\", \"    \", \"(byte)%3d, \", 8, \" \/\/ \", 64, HexPrinter.Formatters.PRINTABLE, System.lineSeparator())\n+        );\n@@ -86,2 +88,3 @@\n-    @Test(dataProvider = \"BuiltinParams\")\n-    public void testBuiltins(String name, String offsetFormat, String binFormat, int colWidth,\n+    @ParameterizedTest\n+    @MethodSource(\"builtinParams\")\n+    void testBuiltins(String name, String offsetFormat, String binFormat, int colWidth,\n@@ -107,1 +110,1 @@\n-        Assert.assertEquals(actual, expected, \"toString of \" + name + \" does not match\");\n+        assertEquals(expected, actual, \"toString of \" + name + \" does not match\");\n@@ -110,2 +113,3 @@\n-    @Test(dataProvider = \"ColumnParams\")\n-    public void testToStringTwoLines(String offsetFormat, String binFormat, int colWidth,\n+    @ParameterizedTest\n+    @MethodSource(\"columnParams\")\n+    void testToStringTwoLines(String offsetFormat, String binFormat, int colWidth,\n@@ -122,1 +126,1 @@\n-    public static void testParams(HexPrinter printer, String offsetFormat, String binFormat, int colWidth,\n+    static void testParams(HexPrinter printer, String offsetFormat, String binFormat, int colWidth,\n@@ -139,1 +143,1 @@\n-                Assert.assertEquals(out.substring(ndx, ndx + l), offset,\n+                assertEquals(offset, out.substring(ndx, ndx + l),\n@@ -146,1 +150,1 @@\n-            Assert.assertEquals(out.substring(ndx, ndx + l), value,\n+            assertEquals(value, out.substring(ndx, ndx + l),\n@@ -152,1 +156,1 @@\n-                Assert.assertEquals(out.substring(ndx, ndx + padding.length()), padding, \"padding\");\n+                assertEquals(padding, out.substring(ndx, ndx + padding.length()), \"padding\");\n@@ -154,1 +158,1 @@\n-                Assert.assertEquals(out.substring(ndx, ndx + annoDelim.length()), annoDelim,\n+                assertEquals(annoDelim, out.substring(ndx, ndx + annoDelim.length()),\n@@ -165,1 +169,1 @@\n-    static void testPrintable() {\n+    void testPrintable() {\n@@ -182,1 +186,1 @@\n-        Assert.assertEquals(actual, expected, \"Formatters.Printable mismatch\");\n+        assertEquals(expected, actual, \"Formatters.Printable mismatch\");\n@@ -186,1 +190,1 @@\n-    static void testASCII() {\n+    void testASCII() {\n@@ -207,15 +211,14 @@\n-        Assert.assertEquals(actual, expected, \"Formatters.ASCII mismatch\");\n-    }\n-\n-    @DataProvider(name = \"PrimitiveFormatters\")\n-    Object[][] formatterParams() {\n-        return new Object[][]{\n-                {byte.class, \"\"},\n-                {byte.class, \"%02x: \"},\n-                {short.class, \"%d \"},\n-                {int.class, \"%08x, \"},\n-                {long.class, \"%16x \"},\n-                {float.class, \"%3.4f \"},\n-                {double.class, \"%6.3g \"},\n-                {boolean.class, \"%b \"},\n-        };\n+        assertEquals(expected, actual, \"Formatters.ASCII mismatch\");\n+    }\n+\n+    static Stream<Arguments> formatterParams() {\n+        return Stream.of(\n+                Arguments.of(byte.class, \"\"),\n+                Arguments.of(byte.class, \"%02x: \"),\n+                Arguments.of(short.class, \"%d \"),\n+                Arguments.of(int.class, \"%08x, \"),\n+                Arguments.of(long.class, \"%16x \"),\n+                Arguments.of(float.class, \"%3.4f \"),\n+                Arguments.of(double.class, \"%6.3g \"),\n+                Arguments.of(boolean.class, \"%b \")\n+        );\n@@ -224,2 +227,3 @@\n-    @Test(dataProvider = \"PrimitiveFormatters\")\n-    public void testFormatter(Class<?> primClass, String fmtString) {\n+    @ParameterizedTest\n+    @MethodSource(\"formatterParams\")\n+    void testFormatter(Class<?> primClass, String fmtString) {\n@@ -238,1 +242,1 @@\n-                Assert.assertEquals(sb.toString(), expected, \"mismatch\");\n+                assertEquals(expected, sb.toString(), \"mismatch\");\n@@ -245,2 +249,2 @@\n-            Assert.assertEquals(in.available(), 0, \"not all input consumed\");\n-            Assert.assertEquals(in2.available(), 0, \"not all 2nd stream input consumed\");\n+            assertEquals(0, in.available(), \"not all input consumed\");\n+            assertEquals(0, in2.available(), \"not all 2nd stream input consumed\");\n@@ -252,2 +256,3 @@\n-    @Test(dataProvider = \"PrimitiveFormatters\")\n-    static void testHexPrinterPrimFormatter(Class<?> primClass, String fmtString) {\n+    @ParameterizedTest\n+    @MethodSource(\"formatterParams\")\n+    void testHexPrinterPrimFormatter(Class<?> primClass, String fmtString) {\n@@ -267,1 +272,1 @@\n-        Assert.assertEquals(actual, expected, \"mismatch\");\n+        assertEquals(expected, actual, \"mismatch\");\n@@ -292,6 +297,5 @@\n-    @DataProvider(name = \"sources\")\n-    Object[][] sources() {\n-        return new Object[][]{\n-                {genBytes(21), 0, -1},\n-                {genBytes(21), 5, 12},\n-        };\n+    static Stream<Arguments> sources() {\n+        return Stream.of(\n+                Arguments.of(genBytes(21), 0, -1),\n+                Arguments.of(genBytes(21), 5, 12)\n+        );\n@@ -300,5 +304,4 @@\n-    @DataProvider(name = \"badsources\")\n-    Object[][] badSources() {\n-        return new Object[][]{\n-                {genBytes(21), 5, 22},\n-        };\n+    static Stream<Arguments> badSources() {\n+        return Stream.of(\n+                Arguments.of(genBytes(21), 5, 22)\n+        );\n@@ -307,1 +310,1 @@\n-    public static byte[] genData(int len) {\n+    static byte[] genData(int len) {\n@@ -317,1 +320,1 @@\n-    public static byte[] genFloat(int len) {\n+    static byte[] genFloat(int len) {\n@@ -330,1 +333,1 @@\n-    public static byte[] genDouble(int len) {\n+    static byte[] genDouble(int len) {\n@@ -343,1 +346,1 @@\n-    public static byte[] genBytes(int len) {\n+    static byte[] genBytes(int len) {\n@@ -350,1 +353,1 @@\n-    public ByteBuffer genByteBuffer(int len) {\n+    ByteBuffer genByteBuffer(int len) {\n@@ -354,1 +357,1 @@\n-    public InputStream genInputStream(int len) {\n+    InputStream genInputStream(int len) {\n@@ -359,1 +362,1 @@\n-    public void testNilPrinterBigBuffer() {\n+    void testNilPrinterBigBuffer() {\n@@ -363,2 +366,9 @@\n-        Assert.assertEquals(r.length(), bytes.length * 2, \"encoded byte wrong size\");\n-        Assert.assertEquals(r.replace(\"00\", \"\").length(), 0, \"contents not all zeros\");\n+        assertEquals(bytes.length * 2, r.length(), \"encoded byte wrong size\");\n+        assertEquals(0, r.replace(\"00\", \"\").length(), \"contents not all zeros\");\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"badSources\")\n+    void testBadToStringByteBuffer(byte[] bytes, int offset, int length) {\n+        assertThrows(java.lang.IndexOutOfBoundsException.class,\n+                () -> testThrowsForBadToStringByteBuffer(bytes, offset, length));\n@@ -367,3 +377,1 @@\n-    @Test(dataProvider = \"badsources\",\n-            expectedExceptions = java.lang.IndexOutOfBoundsException.class)\n-    public void testBadToStringByteBuffer(byte[] bytes, int offset, int length) {\n+    void testThrowsForBadToStringByteBuffer(byte[] bytes, int offset, int length) {\n@@ -384,1 +392,1 @@\n-        Assert.assertEquals(actual, expected, \"mismatch in format()\");\n+        assertEquals(expected, actual, \"mismatch in format()\");\n@@ -387,2 +395,3 @@\n-    @Test(dataProvider = \"sources\")\n-    public void testToStringByteBuffer(byte[] bytes, int offset, int length) {\n+    @ParameterizedTest\n+    @MethodSource(\"sources\")\n+    void testToStringByteBuffer(byte[] bytes, int offset, int length) {\n@@ -403,1 +412,1 @@\n-        Assert.assertEquals(actual, expected, \"mismatch in format()\");\n+        assertEquals(expected, actual, \"mismatch in format()\");\n@@ -406,2 +415,3 @@\n-    @Test(dataProvider = \"sources\")\n-    public void testFormatBytes(byte[] bytes, int offset, int length) {\n+    @ParameterizedTest\n+    @MethodSource(\"sources\")\n+    void testFormatBytes(byte[] bytes, int offset, int length) {\n@@ -419,1 +429,1 @@\n-        Assert.assertEquals(actual, expected, \"mismatch in format()\");\n+        assertEquals(expected, actual, \"mismatch in format()\");\n@@ -422,2 +432,3 @@\n-    @Test(dataProvider = \"sources\")\n-    public void testFormatByteBuffer(byte[] bytes, int offset, int length) {\n+    @ParameterizedTest\n+    @MethodSource(\"sources\")\n+    void testFormatByteBuffer(byte[] bytes, int offset, int length) {\n@@ -439,1 +450,1 @@\n-        Assert.assertEquals(actual, expected, \"mismatch in format()\");\n+        assertEquals(expected, actual, \"mismatch in format()\");\n@@ -442,2 +453,3 @@\n-    @Test(dataProvider = \"sources\")\n-    public void testFormatInputStream(byte[] bytes, int offset, int length) {\n+    @ParameterizedTest\n+    @MethodSource(\"sources\")\n+    void testFormatInputStream(byte[] bytes, int offset, int length) {\n@@ -453,1 +465,1 @@\n-        Assert.assertEquals(actual, expected, \"mismatch in format()\");\n+        assertEquals(expected, actual, \"mismatch in format()\");\n@@ -456,3 +468,4 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testNullByteArray() {\n-        HexPrinter.simple().dest(System.out).format((byte[]) null);\n+    @Test\n+    void testNullByteArray() {\n+        assertThrows(NullPointerException.class,\n+                () -> HexPrinter.simple().dest(System.out).format((byte[]) null));\n@@ -461,3 +474,4 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testNullByteArrayOff() {\n-        HexPrinter.simple().dest(System.out).format((byte[]) null, 0, 1);\n+    @Test\n+    void testNullByteArrayOff() {\n+        assertThrows(NullPointerException.class,\n+                () -> HexPrinter.simple().dest(System.out).format((byte[]) null, 0, 1));\n@@ -466,3 +480,4 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testNullByteBuffer() {\n-        HexPrinter.simple().dest(System.out).format((ByteBuffer) null);\n+    @Test\n+    void testNullByteBuffer() {\n+        assertThrows(NullPointerException.class,\n+                () -> HexPrinter.simple().dest(System.out).format((ByteBuffer) null));\n@@ -471,3 +486,4 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testNullByteBufferOff() {\n-        HexPrinter.simple().dest(System.out).format((ByteBuffer) null, 0, 1);\n+    @Test\n+    void testNullByteBufferOff() {\n+        assertThrows(NullPointerException.class,\n+                () -> HexPrinter.simple().dest(System.out).format((ByteBuffer) null, 0, 1));\n@@ -476,3 +492,4 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testNullInputStream() {\n-        HexPrinter.simple().dest(System.out).format((InputStream) null);\n+    @Test\n+    void testNullInputStream() {\n+        assertThrows(NullPointerException.class, () ->\n+                HexPrinter.simple().dest(System.out).format((InputStream) null));\n","filename":"test\/lib-test\/jdk\/test\/lib\/hexdump\/HexPrinterTest.java","additions":134,"deletions":117,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,4 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -50,0 +52,1 @@\n+import java.util.stream.Stream;\n@@ -51,1 +54,1 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -57,1 +60,1 @@\n- * @run testng\/othervm -DDEBUG=true jdk.test.lib.hexdump.ObjectStreamPrinterTest\n+ * @run junit\/othervm -DDEBUG=true jdk.test.lib.hexdump.ObjectStreamPrinterTest\n@@ -64,2 +67,1 @@\n-@Test\n-public class ObjectStreamPrinterTest {\n+class ObjectStreamPrinterTest {\n@@ -70,11 +72,10 @@\n-    @DataProvider(name = \"serializables\")\n-    Object[][] serializables() {\n-        return new Object[][]{\n-                {new Object[]{\"abc\", \"def\"}, 0, 0, 2},\n-                {new Object[]{0, 1}, 2, 2, 0},\n-                {new Object[]{TimeUnit.DAYS, TimeUnit.SECONDS}, 2, 0, 2},\n-                {new Object[]{List.of(\"one\", \"two\", \"three\")}, 1, 1, 3},\n-                {new Object[]{genList()}, 1, 1, 2},\n-                {new Object[]{genMap()}, 1, 1, 5},\n-                {new Object[]{genProxy()}, 5, 2, 9},\n-                {new Object[]{new char[]{'x', 'y', 'z'},\n+    static Stream<Arguments> serializables() {\n+        return Stream.of(\n+                Arguments.of(new Object[]{\"abc\", \"def\"}, 0, 0, 2),\n+                Arguments.of(new Object[]{0, 1}, 2, 2, 0),\n+                Arguments.of(new Object[]{TimeUnit.DAYS, TimeUnit.SECONDS}, 2, 0, 2),\n+                Arguments.of(new Object[]{List.of(\"one\", \"two\", \"three\")}, 1, 1, 3),\n+                Arguments.of(new Object[]{genList()}, 1, 1, 2),\n+                Arguments.of(new Object[]{genMap()}, 1, 1, 5),\n+                Arguments.of(new Object[]{genProxy()}, 5, 2, 9),\n+                Arguments.of(new Object[]{new char[]{'x', 'y', 'z'},\n@@ -84,3 +85,3 @@\n-                        new Object[]{\"first\", 3, 3.14159f}}, 9, 2, 1},\n-                { new Object[] {new XYPair(3, 5)}, 1, 1, 0},\n-        };\n+                        new Object[]{\"first\", 3, 3.14159f}}, 9, 2, 1),\n+                Arguments.of(new Object[] {new XYPair(3, 5)}, 1, 1, 0)\n+        );\n@@ -89,9 +90,8 @@\n-    @DataProvider(name = \"SingleObjects\")\n-    Object[][] sources() {\n-        return new Object[][]{\n-                {\"A Simple\", new A(), 1, 1, 0},\n-                {\"BNoDefaultRO has no call to defaultReadObject\", new BNoDefaultRO(), 2, 1, 1},\n-                {\"BDefaultRO has call to defaultReadObject\", new BDefaultRO(), 2, 1, 1},\n-                {\"CNoDefaultRO extends BNoDefaultRO with no fields\", new CNoDefaultRO(), 3, 1, 3},\n-                {\"CDefaultRO extends BDefaultRO with no fields\", new CDefaultRO(), 3, 1, 3},\n-        };\n+    static Stream<Arguments> sources(){\n+        return Stream.of(\n+                Arguments.of(\"A Simple\", new A(), 1, 1, 0),\n+                Arguments.of(\"BNoDefaultRO has no call to defaultReadObject\", new BNoDefaultRO(), 2, 1, 1),\n+                Arguments.of(\"BDefaultRO has call to defaultReadObject\", new BDefaultRO(), 2, 1, 1),\n+                Arguments.of(\"CNoDefaultRO extends BNoDefaultRO with no fields\", new CNoDefaultRO(), 3, 1, 3),\n+                Arguments.of(\"CDefaultRO extends BDefaultRO with no fields\", new CDefaultRO(), 3, 1, 3)\n+        );\n@@ -112,2 +112,3 @@\n-    @Test(dataProvider = \"serializables\")\n-    public void testFormat(Object[] objs, int descriptors, int objects, int strings) throws IOException {\n+    @ParameterizedTest\n+    @MethodSource(\"serializables\")\n+    void testFormat(Object[] objs, int descriptors, int objects, int strings) throws IOException {\n@@ -136,2 +137,3 @@\n-    @Test(dataProvider = \"serializables\", enabled=true)\n-    static void standAlonePrinter(Object[] objs, int descriptors, int objects, int strings) throws IOException{\n+    @ParameterizedTest\n+    @MethodSource(\"serializables\")\n+    void standAlonePrinter(Object[] objs, int descriptors, int objects, int strings) throws IOException{\n@@ -173,2 +175,3 @@\n-    @Test(dataProvider = \"SingleObjects\")\n-    static void singleObjects(String label, Object o, int descriptors, int objects, int strings) throws IOException {\n+    @ParameterizedTest\n+    @MethodSource(\"sources\")\n+    void singleObjects(String label, Object o, int descriptors, int objects, int strings) throws IOException {\n@@ -201,1 +204,1 @@\n-    static void longString() throws IOException {\n+    void longString() throws IOException {\n@@ -233,1 +236,1 @@\n-    static void testMain() throws IOException {\n+    void testMain() throws IOException {\n@@ -272,1 +275,1 @@\n-        assertEquals(count, expectedCount, \"Occurrences of \" + key);\n+        assertEquals(expectedCount, count, \"Occurrences of \" + key);\n@@ -275,1 +278,1 @@\n-    public static List<String> genList() {\n+    static List<String> genList() {\n@@ -282,1 +285,1 @@\n-    public static Map<String, String> genMap() {\n+    static Map<String, String> genMap() {\n@@ -290,1 +293,1 @@\n-    public static Object genProxy() {\n+    static Object genProxy() {\n","filename":"test\/lib-test\/jdk\/test\/lib\/hexdump\/ObjectStreamPrinterTest.java","additions":45,"deletions":42,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,4 @@\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -53,0 +54,1 @@\n+import java.util.stream.Stream;\n@@ -54,1 +56,1 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -61,1 +63,1 @@\n- * @run testng jdk.test.lib.hexdump.StreamDumpTest\n+ * @run junit jdk.test.lib.hexdump.StreamDumpTest\n@@ -68,2 +70,1 @@\n-@Test\n-public class StreamDumpTest {\n+class StreamDumpTest {\n@@ -102,18 +103,17 @@\n-    @DataProvider(name = \"serializables\")\n-    Object[][] serializables() {\n-        return new Object[][] {\n-                {new String[]{testSRC + \"\/openssl.p12.pem\"},\n-                        0, 126, 0},\n-                {new String[]{\"--formatter\", \"jdk.test.lib.hexdump.ASN1Formatter\", testSRC + \"\/openssl.p12.pem\"},\n-                        0, 126, 0},\n-                {new String[]{serializedListPath},\n-                        0, 19, 0},\n-                {new String[]{\"--formatter\", \"jdk.test.lib.hexdump.ObjectStreamPrinter\", serializedListPath},\n-                        0, 19, 0},\n-                {new String[]{},\n-                        1, 2, 0},    \/\/ no file arguments\n-                {new String[]{\"--formatter\"},\n-                        1, 2, 0},       \/\/ --formatter option requires a class name\n-                {new String[]{\"-formatter\", \"jdk.test.lib.hexdump.ObjectStreamPrinter\"},\n-                        1, 2, 0},       \/\/ options start with double \"--\"\n-        };\n+    static Stream<Arguments> serializables() {\n+        return Stream.of(\n+                Arguments.of(new String[]{testSRC + \"\/openssl.p12.pem\"},\n+                        0, 126, 0),\n+                Arguments.of(new String[]{\"--formatter\", \"jdk.test.lib.hexdump.ASN1Formatter\", testSRC + \"\/openssl.p12.pem\"},\n+                        0, 126, 0),\n+                Arguments.of(new String[]{serializedListPath},\n+                        0, 19, 0),\n+                Arguments.of(new String[]{\"--formatter\", \"jdk.test.lib.hexdump.ObjectStreamPrinter\", serializedListPath},\n+                        0, 19, 0),\n+                Arguments.of(new String[]{},\n+                        1, 2, 0),    \/\/ no file arguments\n+                Arguments.of(new String[]{\"--formatter\"},\n+                        1, 2, 0),       \/\/ --formatter option requires a class name\n+                Arguments.of(new String[]{\"-formatter\", \"jdk.test.lib.hexdump.ObjectStreamPrinter\"},\n+                        1, 2, 0)       \/\/ options start with double \"--\"\n+        );\n@@ -129,2 +129,3 @@\n-    @Test(dataProvider=\"serializables\")\n-    static void testStreamDump(String[] args, int expectedStatus, int expectedStdout, int expectedStderr) throws IOException {\n+    @ParameterizedTest\n+    @MethodSource(\"serializables\")\n+    void testStreamDump(String[] args, int expectedStatus, int expectedStdout, int expectedStderr) throws IOException {\n@@ -151,1 +152,1 @@\n-            assertEquals(actualStatus, expectedStatus, \"Unexpected exit status\");\n+            assertEquals(expectedStatus, actualStatus, \"Unexpected exit status\");\n@@ -171,1 +172,1 @@\n-        assertEquals(actualLines, expectedLines, \"Unexpected line count\");\n+        assertEquals(expectedLines, actualLines, \"Unexpected line count\");\n@@ -193,1 +194,1 @@\n-    public static List<String> genList() {\n+    static List<String> genList() {\n@@ -200,1 +201,1 @@\n-    public static Map<String, String> genMap() {\n+    static Map<String, String> genMap() {\n","filename":"test\/lib-test\/jdk\/test\/lib\/hexdump\/StreamDumpTest.java","additions":33,"deletions":32,"binary":false,"changes":65,"status":"modified"}]}