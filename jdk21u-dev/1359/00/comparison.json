{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import sun.awt.windows.WToolkit;\n-\n@@ -35,20 +33,0 @@\n-    private static final boolean hasDisplays;\n-\n-    static {\n-        loadAWTLibrary();\n-        hasDisplays = hasDisplays0();\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private static void loadAWTLibrary() {\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Void>() {\n-                public Void run() {\n-                    System.loadLibrary(\"awt\");\n-                    return null;\n-                }\n-            });\n-    }\n-\n-    private static native boolean hasDisplays0();\n-\n@@ -60,1 +38,1 @@\n-        return new WToolkit();\n+        return new sun.awt.windows.WToolkit();\n@@ -64,2 +42,3 @@\n-        \/\/ If we don't find usable displays, we run headless.\n-        return !hasDisplays;\n+        \/\/ On Windows, we assume we can always create headful apps.\n+        \/\/ Here is where we can add code that would actually check.\n+        return false;\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/PlatformGraphicsInfo.java","additions":5,"deletions":26,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,1 @@\n-\n-        initDisplay();\n+        initDisplayWrapper();\n@@ -92,0 +91,8 @@\n+    private static boolean displayInitialized;      \/\/ = false;\n+    public static void initDisplayWrapper() {\n+        if (!displayInitialized) {\n+            displayInitialized = true;\n+            initDisplay();\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsEnvironment.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,5 +88,0 @@\n-typedef struct {\n-    int monitorCounter;\n-    int monitorLimit;\n-    HMONITOR* hmpMonitors;\n-} MonitorData;\n@@ -94,0 +89,1 @@\n+\/* Some helper functions (from awt_MMStub.h\/cpp) *\/\n@@ -95,20 +91,3 @@\n-\/\/ Only monitors where CreateDC does not fail are valid\n-static BOOL IsValidMonitor(HMONITOR hMon)\n-{\n-    MONITORINFOEX mieInfo;\n-    memset((void*)(&mieInfo), 0, sizeof(MONITORINFOEX));\n-    mieInfo.cbSize = sizeof(MONITORINFOEX);\n-    if (!::GetMonitorInfo(hMon, (LPMONITORINFOEX)(&mieInfo))) {\n-        J2dTraceLn1(J2D_TRACE_INFO, \"Devices::IsValidMonitor: GetMonitorInfo failed for monitor with handle %p\", hMon);\n-        return FALSE;\n-    }\n-\n-    HDC hDC = CreateDC(mieInfo.szDevice, NULL, NULL, NULL);\n-    if (NULL == hDC) {\n-        J2dTraceLn2(J2D_TRACE_INFO, \"Devices::IsValidMonitor: CreateDC failed for monitor with handle %p, device: %S\", hMon, mieInfo.szDevice);\n-        return FALSE;\n-    }\n-\n-    ::DeleteDC(hDC);\n-    return TRUE;\n-}\n+int g_nMonitorCounter;\n+int g_nMonitorLimit;\n+HMONITOR* g_hmpMonitors;\n@@ -117,1 +96,1 @@\n-static BOOL WINAPI clb_fCountMonitors(HMONITOR hMon, HDC hDC, LPRECT rRect, LPARAM lpMonitorCounter)\n+BOOL WINAPI clb_fCountMonitors(HMONITOR hMon, HDC hDC, LPRECT rRect, LPARAM lP)\n@@ -119,4 +98,1 @@\n-    if (IsValidMonitor(hMon)) {\n-        (*((int *)lpMonitorCounter))++;\n-    }\n-\n+    g_nMonitorCounter ++;\n@@ -128,3 +104,4 @@\n-    int monitorCounter = 0;\n-    ::EnumDisplayMonitors(NULL, NULL, clb_fCountMonitors, (LPARAM)&monitorCounter);\n-    return monitorCounter;\n+    g_nMonitorCounter = 0;\n+    ::EnumDisplayMonitors(NULL, NULL, clb_fCountMonitors, 0L);\n+    return g_nMonitorCounter;\n+\n@@ -134,1 +111,1 @@\n-static BOOL WINAPI clb_fCollectMonitors(HMONITOR hMon, HDC hDC, LPRECT rRect, LPARAM lpMonitorData)\n+BOOL WINAPI clb_fCollectMonitors(HMONITOR hMon, HDC hDC, LPRECT rRect, LPARAM lP)\n@@ -136,4 +113,4 @@\n-    MonitorData* pMonitorData = (MonitorData *)lpMonitorData;\n-    if ((pMonitorData->monitorCounter < pMonitorData->monitorLimit) && (IsValidMonitor(hMon))) {\n-        pMonitorData->hmpMonitors[pMonitorData->monitorCounter] = hMon;\n-        pMonitorData->monitorCounter++;\n+\n+    if ((g_nMonitorCounter < g_nMonitorLimit) && (NULL != g_hmpMonitors)) {\n+        g_hmpMonitors[g_nMonitorCounter] = hMon;\n+        g_nMonitorCounter ++;\n@@ -145,1 +122,1 @@\n-static int WINAPI CollectMonitors(HMONITOR* hmpMonitors, int nNum)\n+int WINAPI CollectMonitors(HMONITOR* hmpMonitors, int nNum)\n@@ -147,0 +124,2 @@\n+    int retCode = 0;\n+\n@@ -148,8 +127,13 @@\n-        MonitorData monitorData;\n-        monitorData.monitorCounter = 0;\n-        monitorData.monitorLimit = nNum;\n-        monitorData.hmpMonitors = hmpMonitors;\n-        ::EnumDisplayMonitors(NULL, NULL, clb_fCollectMonitors, (LPARAM)&monitorData);\n-        return monitorData.monitorCounter;\n-    } else {\n-        return 0;\n+\n+        g_nMonitorCounter   = 0;\n+        g_nMonitorLimit     = nNum;\n+        g_hmpMonitors       = hmpMonitors;\n+\n+        ::EnumDisplayMonitors(NULL, NULL, clb_fCollectMonitors, 0L);\n+\n+        retCode             = g_nMonitorCounter;\n+\n+        g_nMonitorCounter   = 0;\n+        g_nMonitorLimit     = 0;\n+        g_hmpMonitors       = NULL;\n+\n@@ -157,0 +141,1 @@\n+    return retCode;\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/Devices.cpp","additions":33,"deletions":48,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2011, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,2 +77,0 @@\n-int WINAPI CountMonitors (void);\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/Devices.h","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2024 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <sun_awt_PlatformGraphicsInfo.h>\n-#include \"Devices.h\"\n-\n-\/*\n- * Class:     sun_awt_PlatformGraphicsInfo\n- * Method:    hasDisplays0\n- * Signature: ()Z\n- *\/\n-JNIEXPORT jboolean JNICALL\n-Java_sun_awt_PlatformGraphicsInfo_hasDisplays0(JNIEnv *env, jclass thisClass) {\n-    return CountMonitors() > 0 ? JNI_TRUE : JNI_FALSE;\n-}\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PlatformGraphicsInfo.cpp","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @requires !vm.debug | os.family != \"windows\"\n","filename":"test\/jdk\/javax\/swing\/reliability\/HangDuringStaticInitialization.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}