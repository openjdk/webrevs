{"files":[{"patch":"@@ -220,1 +220,1 @@\n-    const int fsize = ContinuationHelper::InterpretedFrame::frame_bottom(hf) - hf.unextended_sp() - overlap;\n+    const int fsize = (int)(ContinuationHelper::InterpretedFrame::frame_bottom(hf) - hf.unextended_sp() - overlap);\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-    ? sender_sp() - sp()\n+    ? pointer_delta_as_int(sender_sp(), sp())\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,2 +119,2 @@\n-        + ((intptr_t*)f.interpreter_frame_monitor_begin()\n-            - (intptr_t*)f.interpreter_frame_monitor_end())\/BasicObjectLock::size();\n+        + pointer_delta_as_int((intptr_t*)f.interpreter_frame_monitor_begin(),\n+              (intptr_t*)f.interpreter_frame_monitor_end())\/BasicObjectLock::size();\n","filename":"src\/hotspot\/cpu\/aarch64\/stackChunkFrameStream_aarch64.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-    const int fsize = ContinuationHelper::InterpretedFrame::frame_bottom(hf) - hf.unextended_sp() - overlap;\n+    const int fsize = (int)(ContinuationHelper::InterpretedFrame::frame_bottom(hf) - hf.unextended_sp() - overlap);\n","filename":"src\/hotspot\/cpu\/x86\/continuationFreezeThaw_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-    ? sender_sp() - sp()\n+    ? pointer_delta_as_int(sender_sp(), sp())\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-    set_int_at(displacement_offset, dest - return_address());\n+    set_int_at(displacement_offset, (int)(dest - return_address()));\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,2 +117,2 @@\n-        + ((intptr_t*)f.interpreter_frame_monitor_begin()\n-            - (intptr_t*)f.interpreter_frame_monitor_end())\/BasicObjectLock::size();\n+        + pointer_delta_as_int((intptr_t*)f.interpreter_frame_monitor_begin(),\n+              (intptr_t*)f.interpreter_frame_monitor_end())\/BasicObjectLock::size();\n","filename":"src\/hotspot\/cpu\/x86\/stackChunkFrameStream_x86.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-    const int key_len = strlen(key);\n+    const int key_len = (int)strlen(key);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -446,1 +446,1 @@\n-    _bytes_to_copy = masm->pc() - pc_start();\n+    _bytes_to_copy = pointer_delta_as_int(masm->pc(), pc_start());\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-          _nonnull_state |= nth_bit(i);\n+          _nonnull_state |= (int)nth_bit(i);\n@@ -330,1 +330,1 @@\n-          _nonnull_state &= ~(nth_bit(i));\n+          _nonnull_state &= (int)~(nth_bit(i));\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    return (size_t)i;\n+    return (int)i;\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-    return dp - ((address)_data);\n+    return pointer_delta_as_int(dp, ((address)_data));\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,3 +113,3 @@\n-  int next_bci() const          { return _pc - _start; }\n-  int cur_bci() const           { return _bc_start - _start; }\n-  int instruction_size() const  { return _pc - _bc_start; }\n+  int next_bci() const          { return pointer_delta_as_int(_pc, _start); }\n+  int cur_bci() const           { return pointer_delta_as_int(_bc_start, _start); }\n+  int instruction_size() const  { return pointer_delta_as_int(_pc, _bc_start); }\n","filename":"src\/hotspot\/share\/ci\/ciStreams.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-  int length() const { return _buffer_end - _buffer_start; }\n+  int length() const { return pointer_delta_as_int(_buffer_end, _buffer_start); }\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,3 +197,3 @@\n-  int relocation_size() const                    { return (address) relocation_end() - (address) relocation_begin(); }\n-  int content_size() const                       { return           content_end()    -           content_begin();    }\n-  int code_size() const                          { return           code_end()       -           code_begin();       }\n+  int relocation_size() const                    { return pointer_delta_as_int((address) relocation_end(), (address) relocation_begin()); }\n+  int content_size() const                       { return pointer_delta_as_int(content_end(), content_begin()); }\n+  int code_size() const                          { return pointer_delta_as_int(code_end(), code_begin()); }\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  return _oop_maps->find_map_at_slot(slot, (intptr_t) return_address - (intptr_t) code_begin());\n+  return _oop_maps->find_map_at_slot(slot, pointer_delta_as_int(return_address, code_begin()));\n","filename":"src\/hotspot\/share\/code\/codeBlob.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -669,1 +669,1 @@\n-  static unsigned hash  (DependencySignature const& s1) { return s1.arg(0) >> 2; }\n+  static unsigned hash  (DependencySignature const& s1) { return (unsigned)(s1.arg(0) >> 2); }\n","filename":"src\/hotspot\/share\/code\/dependencies.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  int size_in_bytes() const { return len() == 0 ? 0 : ((2 * len() + 1) * sizeof(implicit_null_entry)); }\n+  int size_in_bytes() const { return len() == 0 ? 0 : ((2 * len() + 1) * (int)sizeof(implicit_null_entry)); }\n","filename":"src\/hotspot\/share\/code\/exceptionHandlerTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-  VtableStub(bool is_vtable_stub, int index)\n+  VtableStub(bool is_vtable_stub, short index)\n@@ -155,2 +155,2 @@\n-    _npe_offset = npe_addr - code_begin();\n-    _ame_offset = ame_addr - code_begin();\n+    _npe_offset = checked_cast<short>(npe_addr - code_begin());\n+    _ame_offset = checked_cast<short>(ame_addr - code_begin());\n","filename":"src\/hotspot\/share\/code\/vtableStubs.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-  assert(decode_not_null(result, narrow_base) == v, \"reversibility\");\n+  assert(decode_not_null((narrowKlass)result, narrow_base) == v, \"reversibility\");\n","filename":"src\/hotspot\/share\/oops\/compressedOops.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  int  interpreter_throwout_count() const {\n+  u2  interpreter_throwout_count() const {\n@@ -81,1 +81,1 @@\n-  void set_interpreter_throwout_count(int count) {\n+  void set_interpreter_throwout_count(u2 count) {\n@@ -85,1 +85,1 @@\n-  int  interpreter_throwout_count() const {\n+  u2  interpreter_throwout_count() const {\n@@ -88,1 +88,1 @@\n-  void set_interpreter_throwout_count(int count) {\n+  void set_interpreter_throwout_count(u2 count) {\n","filename":"src\/hotspot\/share\/oops\/methodCounters.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -392,1 +392,1 @@\n-  return offset;\n+  return (int)offset;\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    return entry._obj->identity_hash();\n+    return (unsigned)entry._obj->identity_hash();\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMapTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  return InterpretedFrame::frame_bottom(f) - InterpretedFrame::frame_top(f);\n+  return pointer_delta_as_int(InterpretedFrame::frame_bottom(f), InterpretedFrame::frame_top(f));\n","filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  int         size_in_bytes() const              { return _end - _begin; }\n+  int         size_in_bytes() const              { return pointer_delta_as_int(_end, _begin); }\n","filename":"src\/hotspot\/share\/runtime\/stubCodeGenerator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-  static uint16_t build_footer(uint8_t b1, uint8_t b2) { return ((uint16_t)b1 << 8) | (uint16_t)b2; }\n+  static uint16_t build_footer(uint8_t b1, uint8_t b2) { return (uint16_t)(((uint16_t)b1 << 8) | (uint16_t)b2); }\n@@ -115,1 +115,1 @@\n-  void set_footer(uint16_t v)       { footer_address()[0] = v >> 8; footer_address()[1] = (uint8_t)v; }\n+  void set_footer(uint16_t v)       { footer_address()[0] = (uint8_t)(v >> 8); footer_address()[1] = (uint8_t)v; }\n","filename":"src\/hotspot\/share\/services\/mallocHeader.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-  static uint16_t bucket_idx_from_marker(uint32_t marker) { return marker >> 16; }\n+  static uint16_t bucket_idx_from_marker(uint32_t marker) { return (uint16_t)(marker >> 16); }\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-  T result = size & ~T(alignment_mask(alignment));\n+  T result = T(size & ~T(alignment_mask(alignment)));\n@@ -74,1 +74,1 @@\n-  T adjusted = size + alignment_mask(alignment);\n+  T adjusted = checked_cast<T>(size + alignment_mask(alignment));\n","filename":"src\/hotspot\/share\/utilities\/align.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-      _null_terminator_index = strlen(_path);\n+      _null_terminator_index = checked_cast<uint16_t>(strlen(_path));\n","filename":"src\/hotspot\/share\/utilities\/elfFile.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -529,0 +529,8 @@\n+\/\/ pointer_delta_as_int is called to do pointer subtraction for nearby pointers that\n+\/\/ returns a non-negative int, usually used as a size of a code buffer range.\n+\/\/ This scales to sizeof(T).\n+template <typename T>\n+inline int pointer_delta_as_int(const volatile T* left, const volatile T* right) {\n+  return checked_cast<int>(pointer_delta(left, right, sizeof(T)));\n+}\n+\n@@ -670,1 +678,1 @@\n-  return denominator != 0 ? (double)numerator \/ denominator * 100.0 : 0.0;\n+  return denominator != 0 ? (double)numerator \/ (double)denominator * 100.0 : 0.0;\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    return hash;\n+    return (unsigned int)hash;\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-  return round_up_power_of_2(value + 1);\n+  return T(round_up_power_of_2(value + 1));\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}