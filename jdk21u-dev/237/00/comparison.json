{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -363,8 +363,0 @@\n-    @ForceInline\n-    @Override\n-    public final Vector<E> fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n-        return dummyVector()\n-            .fromMemorySegment0(ms, offset)\n-            .maybeSwap(bo);\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractSpecies.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -4201,1 +4201,2 @@\n-            \/\/ User entry point:  Be careful with inputs.\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n@@ -4206,0 +4207,9 @@\n+        @ForceInline\n+        @Override final\n+        public ByteVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n+            return ByteVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3804,1 +3804,2 @@\n-            \/\/ User entry point:  Be careful with inputs.\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n@@ -3809,0 +3810,9 @@\n+        @ForceInline\n+        @Override final\n+        public DoubleVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n+            return DoubleVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3754,1 +3754,2 @@\n-            \/\/ User entry point:  Be careful with inputs.\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n@@ -3759,0 +3760,9 @@\n+        @ForceInline\n+        @Override final\n+        public FloatVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n+            return FloatVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3910,1 +3910,2 @@\n-            \/\/ User entry point:  Be careful with inputs.\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n@@ -3915,0 +3916,9 @@\n+        @ForceInline\n+        @Override final\n+        public IntVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n+            return IntVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3836,1 +3836,2 @@\n-            \/\/ User entry point:  Be careful with inputs.\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n@@ -3841,0 +3842,9 @@\n+        @ForceInline\n+        @Override final\n+        public LongVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n+            return LongVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -4195,1 +4195,2 @@\n-            \/\/ User entry point:  Be careful with inputs.\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n@@ -4200,0 +4201,9 @@\n+        @ForceInline\n+        @Override final\n+        public ShortVector fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n+            return ShortVector\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -5460,1 +5460,2 @@\n-            \/\/ User entry point:  Be careful with inputs.\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n@@ -5465,0 +5466,9 @@\n+        @ForceInline\n+        @Override final\n+        public $abstractvectortype$ fromMemorySegment(MemorySegment ms, long offset, ByteOrder bo) {\n+            \/\/ User entry point\n+            \/\/ Defer only to the equivalent method on the vector class, using the same inputs\n+            return $abstractvectortype$\n+                .fromMemorySegment(this, ms, offset, bo);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,1 +259,2 @@\n-        return ByteVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromArray(a, i);\n@@ -279,1 +280,2 @@\n-        return ByteVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ByteVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,1 +259,2 @@\n-        return DoubleVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromArray(a, i);\n@@ -279,1 +280,2 @@\n-        return DoubleVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (DoubleVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,1 +259,2 @@\n-        return FloatVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromArray(a, i);\n@@ -279,1 +280,2 @@\n-        return FloatVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (FloatVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,1 +259,2 @@\n-        return IntVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromArray(a, i);\n@@ -279,1 +280,2 @@\n-        return IntVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (IntVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,1 +259,2 @@\n-        return LongVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromArray(a, i);\n@@ -279,1 +280,2 @@\n-        return LongVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (LongVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,1 +252,2 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -272,1 +273,2 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,1 +259,2 @@\n-        return ShortVector.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromArray(a, i);\n@@ -279,1 +280,2 @@\n-        return ShortVector.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return (ShortVector) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,1 +272,2 @@\n-        return $abstractvectortype$.fromArray(SPECIES, a, i);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return ($abstractvectortype$) SPECIES.fromArray(a, i);\n@@ -292,1 +293,2 @@\n-        return $abstractvectortype$.fromMemorySegment(SPECIES, a, i, bo);\n+        \/\/ Tests the species method and the equivalent vector method it defers to\n+        return ($abstractvectortype$) SPECIES.fromMemorySegment(a, i, bo);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}