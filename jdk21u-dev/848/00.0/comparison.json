{"files":[{"patch":"@@ -740,0 +740,1 @@\n+    ctrl->outcnt() == 1 && \/\/ No side-effects\n@@ -1319,1 +1320,1 @@\n-    if (is_ctrl_folds(ctrl, igvn) && ctrl->outcnt() == 1) {\n+    if (is_ctrl_folds(ctrl, igvn)) {\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4035,0 +4035,14 @@\n+  \/\/ The computation of the new pre-loop limit could overflow or underflow the int range. This is problematic in\n+  \/\/ combination with Range Check Elimination (RCE), which determines a \"safe\" range where a RangeCheck will always\n+  \/\/ succeed. RCE adjusts the pre-loop limit such that we only enter the main-loop once we have reached the \"safe\"\n+  \/\/ range, and adjusts the main-loop limit so that we exit the main-loop before we leave the \"safe\" range. After RCE,\n+  \/\/ the range of the main-loop can only be safely narrowed, and should never be widened. Hence, the pre-loop limit\n+  \/\/ can only be increased (for stride > 0), but an add overflow might decrease it, or decreased (for stride < 0), but\n+  \/\/ a sub underflow might increase it. To prevent that, we perform the Sub \/ Add and Max \/ Min with long operations.\n+  lim0       = new ConvI2LNode(lim0);\n+  N          = new ConvI2LNode(N);\n+  orig_limit = new ConvI2LNode(orig_limit);\n+  _igvn.register_new_node_with_optimizer(lim0);\n+  _igvn.register_new_node_with_optimizer(N);\n+  _igvn.register_new_node_with_optimizer(orig_limit);\n+\n@@ -4039,1 +4053,1 @@\n-    lim = new SubINode(lim0, N);\n+    lim = new SubLNode(lim0, N);\n@@ -4041,1 +4055,1 @@\n-    lim = new AddINode(lim0, N);\n+    lim = new AddLNode(lim0, N);\n@@ -4046,2 +4060,2 @@\n-    (stride > 0) ? (Node*) new MinINode(lim, orig_limit)\n-                 : (Node*) new MaxINode(lim, orig_limit);\n+    (stride > 0) ? (Node*) new MinLNode(_phase->C, lim, orig_limit)\n+                 : (Node*) new MaxLNode(_phase->C, lim, orig_limit);\n@@ -4049,0 +4063,5 @@\n+\n+  \/\/ We know that the result is in the int range, there is never truncation\n+  constrained = new ConvL2INode(constrained);\n+  _igvn.register_new_node_with_optimizer(constrained);\n+\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"}]}