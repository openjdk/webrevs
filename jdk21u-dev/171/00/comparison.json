{"files":[{"patch":"@@ -24,3 +24,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -36,1 +33,0 @@\n-import org.testng.annotations.Test;\n@@ -45,2 +41,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -49,1 +43,0 @@\n-import java.net.http.HttpHeaders;\n@@ -66,1 +59,1 @@\n-import java.util.concurrent.Flow;\n+import java.util.concurrent.Flow.Subscription;\n@@ -75,1 +68,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -102,0 +94,1 @@\n+    static final int REPEAT_RESPONSE = 3;\n@@ -316,1 +309,2 @@\n-            assertEquals(URI.create(body).getPath(), URI.create(uri2).getPath());\n+            Stream.of(body.split(\"\\n\")).forEach(u ->\n+                assertEquals(URI.create(u).getPath(), URI.create(uri2).getPath()));\n@@ -446,0 +440,1 @@\n+        var throwing = thrower;\n@@ -454,0 +449,3 @@\n+\n+            thrower = thrower(where, throwing);\n+\n@@ -471,6 +469,3 @@\n-                    Throwable throwable = t.getCause();\n-                    assert throwable != null;\n-\n-                    if (thrower.test(throwable)) {\n-                        System.out.println(now() + \"Got expected exception: \" + throwable);\n-                    } else throw causeNotFound(where, t);\n+                    Throwable throwable = findCause(t, thrower);\n+                    if (throwable == null) throw causeNotFound(where, t);\n+                    System.out.println(now() + \"Got expected exception: \" + throwable);\n@@ -661,0 +656,28 @@\n+    static final class BodyCFThrower implements Thrower {\n+        final Thrower thrower;\n+        BodyCFThrower(Thrower thrower) {\n+            this.thrower = thrower;\n+        }\n+        @Override\n+        public boolean test(Throwable throwable) {\n+            \/\/ In case of BODY_CF we also cancel the stream,\n+            \/\/ which can cause \"Stream XX cancelled\" to be reported\n+            return thrower.test(throwable) ||\n+                    throwable instanceof IOException io && (\n+                            io.getMessage().matches(\"Stream [0-9]+ cancelled\") ||\n+                            io.getMessage().equals(\"subscription cancelled\")\n+                    );\n+        }\n+        @Override\n+        public void accept(Where where) {\n+            thrower.accept(where);\n+        }\n+    }\n+\n+    static Thrower thrower(Where where, Thrower thrower) {\n+        return switch (where) {\n+            case BODY_CF -> new BodyCFThrower(thrower);\n+            default -> thrower;\n+        };\n+    }\n+\n@@ -663,1 +686,2 @@\n-        volatile boolean onSubscribeCalled;\n+        volatile Subscription subscription;\n+        final CompletableFuture<Subscription> subscriptionCF = new CompletableFuture<>();\n@@ -671,1 +695,1 @@\n-        public void onSubscribe(Flow.Subscription subscription) {\n+        public void onSubscribe(Subscription subscription) {\n@@ -673,1 +697,1 @@\n-            onSubscribeCalled = true;\n+            this.subscription = subscription;\n@@ -676,0 +700,5 @@\n+            subscriptionCF.complete(subscription);\n+        }\n+\n+        boolean onSubscribeCalled() {\n+            return subscription != null;\n@@ -681,1 +710,1 @@\n-            assertTrue(onSubscribeCalled);\n+            assertTrue(onSubscribeCalled(), \"onNext called before onSubscribe\");\n@@ -689,1 +718,1 @@\n-            assertTrue(onSubscribeCalled);\n+            assertTrue(onSubscribeCalled(), \"onError called before onSubscribe\");\n@@ -697,1 +726,1 @@\n-            assertTrue(onSubscribeCalled, \"onComplete called before onSubscribe\");\n+            assertTrue(onSubscribeCalled(), \"onComplete called before onSubscribe\");\n@@ -705,0 +734,1 @@\n+            boolean shouldCancel = false;\n@@ -708,0 +738,1 @@\n+                shouldCancel = true;\n@@ -709,0 +740,7 @@\n+            } finally {\n+                \/\/ if a BodySubscriber returns a failed future, it\n+                \/\/ should take responsibility for cancelling the\n+                \/\/ subscription explicitly if needed.\n+                if (shouldCancel) {\n+                    subscriptionCF.thenAccept(Subscription::cancel);\n+                }\n@@ -788,2 +826,2 @@\n-            byte[] resp = t.getRequestURI().toString().getBytes(StandardCharsets.UTF_8);\n-            t.sendResponseHeaders(200, resp.length);  \/\/fixed content length\n+            byte[] resp = (t.getRequestURI() + \"\\n\").getBytes(StandardCharsets.UTF_8);\n+            t.sendResponseHeaders(200, resp.length * 3);  \/\/fixed content length\n@@ -791,1 +829,4 @@\n-                os.write(resp);\n+                for (int i=0 ; i < REPEAT_RESPONSE; i++) {\n+                    os.write(resp);\n+                    os.flush();\n+                }\n@@ -800,1 +841,1 @@\n-            byte[] resp = t.getRequestURI().toString().getBytes(StandardCharsets.UTF_8);\n+            byte[] resp = (t.getRequestURI() + \"\\n\").getBytes(StandardCharsets.UTF_8);\n@@ -806,1 +847,4 @@\n-                os.write(resp);\n+                for (int i=0 ; i < REPEAT_RESPONSE; i++) {\n+                    os.write(resp);\n+                    os.flush();\n+                }\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingSubscribers.java","additions":71,"deletions":27,"binary":false,"changes":98,"status":"modified"}]}