{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -844,0 +844,12 @@\n+    static Object mergeTextDecoration(String value) {\n+        boolean underline = value.contains(\"underline\");\n+        boolean strikeThrough = value.contains(\"line-through\");\n+        if (!underline && !strikeThrough) {\n+            return null;\n+        }\n+        String newValue = underline && strikeThrough\n+                          ? \"underline,line-through\"\n+                          : (underline ? \"underline\" : \"line-through\");\n+        return new StringValue().parseCssValue(newValue);\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2502,1 +2502,1 @@\n-            tagMap.put(HTML.Tag.SPAN, ca);\n+            tagMap.put(HTML.Tag.SPAN, new ConvertSpanAction());\n@@ -3426,0 +3426,2 @@\n+\n+                convertAttributes(t, attr);\n@@ -3431,0 +3433,30 @@\n+\n+            \/**\n+             * Converts HTML tags to CSS attributes.\n+             * @param t the current HTML tag\n+             * @param attr the attributes of the HTML tag\n+             *\/\n+            void convertAttributes(HTML.Tag t, MutableAttributeSet attr) {\n+            }\n+        }\n+\n+        final class ConvertSpanAction extends CharacterAction {\n+            @Override\n+            void convertAttributes(HTML.Tag t, MutableAttributeSet attr) {\n+                Object newDecoration = attr.getAttribute(CSS.Attribute.TEXT_DECORATION);\n+                Object previousDecoration =\n+                        charAttrStack.peek()\n+                                     .getAttribute(CSS.Attribute.TEXT_DECORATION);\n+\n+                if (newDecoration != null\n+                    && !\"none\".equals(newDecoration.toString())\n+                    && previousDecoration != null\n+                    && !\"none\".equals(previousDecoration.toString())) {\n+                    StyleSheet sheet = getStyleSheet();\n+                    sheet.addCSSAttribute(charAttr,\n+                                          CSS.Attribute.TEXT_DECORATION,\n+                                          CSS.mergeTextDecoration(newDecoration + \",\"\n+                                                                  + previousDecoration)\n+                                             .toString());\n+                }\n+            }\n@@ -3438,29 +3470,3 @@\n-        class ConvertAction extends TagAction {\n-\n-            public void start(HTML.Tag t, MutableAttributeSet attr) {\n-                pushCharacterStyle();\n-                if (!foundInsertTag) {\n-                    \/\/ Note that the third argument should really be based off\n-                    \/\/ inParagraph and impliedP. If we're wrong (that is\n-                    \/\/ insertTagDepthDelta shouldn't be changed), we'll end up\n-                    \/\/ removing an extra EndSpec, which won't matter anyway.\n-                    boolean insert = canInsertTag(t, attr, false);\n-                    if (foundInsertTag) {\n-                        if (!inParagraph) {\n-                            inParagraph = impliedP = true;\n-                        }\n-                    }\n-                    if (!insert) {\n-                        return;\n-                    }\n-                }\n-                if (attr.isDefined(IMPLIED)) {\n-                    attr.removeAttribute(IMPLIED);\n-                }\n-                if (styleAttributes != null) {\n-                    charAttr.addAttributes(styleAttributes);\n-                }\n-                \/\/ We also need to add attr, otherwise we lose custom\n-                \/\/ attributes, including class\/id for style lookups, and\n-                \/\/ further confuse style lookup (doesn't have tag).\n-                charAttr.addAttribute(t, attr.copyAttributes());\n+        final class ConvertAction extends CharacterAction {\n+            @Override\n+            void convertAttributes(HTML.Tag t, MutableAttributeSet attr) {\n@@ -3507,5 +3513,0 @@\n-\n-            public void end(HTML.Tag t) {\n-                popCharacterStyle();\n-            }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/HTMLDocument.java","additions":36,"deletions":35,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import javax.swing.text.*;\n@@ -29,1 +28,9 @@\n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.text.AttributeSet;\n+import javax.swing.text.MutableAttributeSet;\n+import javax.swing.text.SimpleAttributeSet;\n@@ -199,6 +206,8 @@\n-        AttributeSet[] as = getAttributes();\n-        int n = as.length;\n-        for (int i = 0; i < n; i++) {\n-            Object o = as[i].getAttribute(key);\n-            if (o != null) {\n-                return o;\n+        final AttributeSet[] as = getAttributes();\n+        final int n = as.length;\n+        if (key != CSS.Attribute.TEXT_DECORATION) {\n+            for (int i = 0; i < n; i++) {\n+                Object o = as[i].getAttribute(key);\n+                if (o != null) {\n+                    return o;\n+                }\n@@ -206,0 +215,1 @@\n+            return null;\n@@ -207,1 +217,7 @@\n-        return null;\n+\n+        String values = Arrays.stream(as)\n+                              .map(a -> a.getAttribute(key))\n+                              .filter(Objects::nonNull)\n+                              .map(Object::toString)\n+                              .collect(Collectors.joining(\",\"));\n+        return CSS.mergeTextDecoration(values);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/MuxingAttributeSet.java","additions":26,"deletions":10,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,5 +27,29 @@\n-import sun.swing.SwingUtilities2;\n-import java.util.*;\n-import java.awt.*;\n-import java.io.*;\n-import java.net.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.Shape;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.io.Serializable;\n+import java.io.StringReader;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.EmptyStackException;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Stack;\n+import java.util.StringTokenizer;\n+import java.util.Vector;\n+\n@@ -35,1 +59,2 @@\n-import javax.swing.border.*;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.border.Border;\n@@ -37,1 +62,12 @@\n-import javax.swing.text.*;\n+import javax.swing.text.AttributeSet;\n+import javax.swing.text.Document;\n+import javax.swing.text.Element;\n+import javax.swing.text.MutableAttributeSet;\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.text.Style;\n+import javax.swing.text.StyleConstants;\n+import javax.swing.text.StyleContext;\n+import javax.swing.text.StyledDocument;\n+import javax.swing.text.View;\n+\n+import sun.swing.SwingUtilities2;\n@@ -2820,0 +2856,16 @@\n+        \/**\n+         * Merges the current value of the 'text-decoration' property\n+         * with the value from parent.\n+         *\/\n+        private Object getTextDecoration(Object value) {\n+            AttributeSet parent = getResolveParent();\n+            if (parent == null) {\n+                return value;\n+            }\n+\n+            Object parentValue = parent.getAttribute(CSS.Attribute.TEXT_DECORATION);\n+            return parentValue == null\n+                   ? value\n+                   : CSS.mergeTextDecoration(value + \",\" + parentValue);\n+        }\n+\n@@ -2823,1 +2875,6 @@\n-                return retValue;\n+                if (key != CSS.Attribute.TEXT_DECORATION) {\n+                    return retValue;\n+                } else {\n+                    \/\/ Merge current value with parent\n+                    return getTextDecoration(retValue);\n+                }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/StyleSheet.java","additions":66,"deletions":9,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JEditorPane;\n+import javax.swing.text.View;\n+import javax.swing.text.html.CSS;\n+\n+\/*\n+ * @test\n+ * @bug 8326734\n+ * @summary Tests different combinations of setting 'line-through'\n+ * @run main HTMLStrikeOnly\n+ *\/\n+public class HTMLStrikeOnly {\n+    private static final String HTML = \"\"\"\n+            <!DOCTYPE html>\n+            <html lang=\"en\">\n+            <head>\n+                <meta charset=\"UTF-8\">\n+                <title>line-through<\/title>\n+                <style>\n+                    .lineThrough   { text-decoration: line-through }\n+                <\/style>\n+            <\/head>\n+            <body>\n+            <p><s><span style='text-decoration: line-through'>line-through?<\/span><\/s><\/p>\n+            <p><strike><span style='text-decoration: line-through'>line-through?<\/span><\/strike><\/p>\n+            <p><span style='text-decoration: line-through'><s>line-through?<\/s><\/span><\/p>\n+            <p><span style='text-decoration: line-through'><strike>line-through?<\/strike><\/span><\/p>\n+\n+            <p><s><span class=\"lineThrough\">line-through?<\/span><\/s><\/p>\n+            <p><strike><span class=\"lineThrough\">line-through?<\/span><\/strike><\/p>\n+            <p><span class=\"lineThrough\"><s>line-through?<\/s><\/span><\/p>\n+            <p><span class=\"lineThrough\"><strike>line-through?<\/strike><\/span><\/p>\n+\n+            <p style='text-decoration: line-through'><s>line-through?<\/s><\/p>\n+            <p style='text-decoration: line-through'><strike>line-through?<\/strike><\/p>\n+            <p style='text-decoration: line-through'><span style='text-decoration: line-through'>line-through?<\/span><\/p>\n+\n+            <p class=\"lineThrough\"><s>line-through<\/s><\/p>\n+            <p class=\"lineThrough\"><strike>line-through<\/strike><\/p>\n+            <p class=\"lineThrough\"><span style='text-decoration: line-through'>line-through<\/span><\/p>\n+            <p class=\"lineThrough\"><span class=\"lineThrough\">line-through<\/span><\/p>\n+            <\/body>\n+            <\/html>\n+            \"\"\";\n+    public static void main(String[] args) {\n+        final JEditorPane html = new JEditorPane(\"text\/html\", HTML);\n+        html.setEditable(false);\n+\n+        final Dimension size = html.getPreferredSize();\n+        html.setSize(size);\n+\n+        BufferedImage image = new BufferedImage(size.width, size.height,\n+                                                BufferedImage.TYPE_INT_RGB);\n+        Graphics g = image.createGraphics();\n+        \/\/ Paint the editor pane to ensure all views are created\n+        html.paint(g);\n+        g.dispose();\n+\n+        int errorCount = 0;\n+        String firstError = null;\n+\n+        System.out.println(\"----- Views -----\");\n+        final View bodyView = html.getUI()\n+                                  .getRootView(html)\n+                                  .getView(1)\n+                                  .getView(1);\n+        for (int i = 0; i < bodyView.getViewCount(); i++) {\n+            View pView = bodyView.getView(i);\n+            View contentView = getContentView(pView);\n+\n+            String decoration =\n+                    contentView.getAttributes()\n+                               .getAttribute(CSS.Attribute.TEXT_DECORATION)\n+                               .toString();\n+\n+            System.out.println(i + \": \" + decoration);\n+            if (!decoration.contains(\"line-through\")\n+                || decoration.contains(\"underline\")) {\n+                errorCount++;\n+                if (firstError == null) {\n+                    firstError = \"Line \" + i + \": \" + decoration;\n+                }\n+            }\n+        }\n+\n+        if (errorCount > 0) {\n+            saveImage(image);\n+            throw new RuntimeException(errorCount + \" error(s) found, \"\n+                                       + \"the first one: \" + firstError);\n+        }\n+    }\n+\n+    private static View getContentView(View parent) {\n+        View view = parent.getView(0);\n+        return view.getViewCount() > 0\n+               ? getContentView(view)\n+               : view;\n+    }\n+\n+    private static void saveImage(BufferedImage image) {\n+        try {\n+            ImageIO.write(image, \"png\",\n+                          new File(\"html.png\"));\n+        } catch (IOException ignored) { }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLDocument\/HTMLStrikeOnly.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JEditorPane;\n+import javax.swing.text.View;\n+import javax.swing.text.html.CSS;\n+\n+\/*\n+ * @test\n+ * @bug 8323801 8326734\n+ * @summary Tests different combination of 'underline' and 'line-through';\n+ *          the text should render with both 'underline' and 'line-through'.\n+ * @run main HTMLTextDecoration\n+ *\/\n+public final class HTMLTextDecoration {\n+    private static final String HTML = \"\"\"\n+            <!DOCTYPE html>\n+            <html lang=\"en\">\n+            <head>\n+                <meta charset=\"UTF-8\">\n+                <title>underline + line-through text<\/title>\n+                <style>\n+                    .underline   { text-decoration: underline }\n+                    .lineThrough { text-decoration: line-through }\n+                <\/style>\n+            <\/head>\n+            <body>\n+            <p><u><span style='text-decoration: line-through'>underline + line-through?<\/span><\/u><\/p>\n+            <p><s><span style='text-decoration: underline'>underline + line-through?<\/span><\/s><\/p>\n+            <p><strike><span style='text-decoration: underline'>underline + line-through?<\/span><\/strike><\/p>\n+\n+            <p><span style='text-decoration: line-through'><u>underline + line-through?<\/u><\/span><\/p>\n+            <p><span style='text-decoration: underline'><s>underline + line-through?<\/s><\/span><\/p>\n+            <p><span style='text-decoration: underline'><strike>underline + line-through?<\/strike><\/span><\/p>\n+\n+            <p><span style='text-decoration: line-through'><span style='text-decoration: underline'>underline + line-through?<\/span><\/span><\/p>\n+            <p><span style='text-decoration: underline'><span style='text-decoration: line-through'>underline + line-through?<\/span><\/span><\/p>\n+\n+            <p style='text-decoration: line-through'><u>underline + line-through?<\/u><\/p>\n+            <p style='text-decoration: underline'><s>underline + line-through?<\/s><\/p>\n+            <p style='text-decoration: underline'><strike>underline + line-through?<\/strike><\/p>\n+\n+            <p style='text-decoration: line-through'><span style='text-decoration: underline'>underline + line-through?<\/span><\/p>\n+            <p style='text-decoration: underline'><span style='text-decoration: line-through'>underline + line-through?<\/span><\/p>\n+\n+            <p class=\"underline\"><span class=\"lineThrough\">underline + line-through?<\/span><\/p>\n+            <p class=\"underline\"><s>underline + line-through?<\/s><\/p>\n+            <p class=\"underline\"><strike>underline + line-through?<\/strike><\/p>\n+\n+            <p class=\"lineThrough\"><span class=\"underline\">underline + line-through?<\/span><\/p>\n+            <p class=\"lineThrough\"><u>underline + line-through?<\/u><\/p>\n+\n+            <div class=\"underline\"><span class=\"lineThrough\">underline + line-through?<\/span><\/div>\n+            <div class=\"underline\"><s>underline + line-through?<\/s><\/div>\n+            <div class=\"underline\"><strike>underline + line-through?<\/strike><\/div>\n+\n+            <div class=\"lineThrough\"><span class=\"underline\">underline + line-through?<\/span><\/div>\n+            <div class=\"lineThrough\"><u>underline + line-through?<\/u><\/div>\n+\n+            <div class=\"underline\"><p class=\"lineThrough\">underline + line-through?<\/p><\/div>\n+            <div class=\"lineThrough\"><p class=\"underline\">underline + line-through?<\/p><\/div>\n+\n+            <div class=\"underline\"><div class=\"lineThrough\">underline + line-through?<\/div><\/div>\n+            <div class=\"lineThrough\"><div class=\"underline\">underline + line-through?<\/div><\/div>\n+            <\/body>\n+            <\/html>\n+            \"\"\";\n+\n+    public static void main(String[] args) {\n+        final JEditorPane html = new JEditorPane(\"text\/html\", HTML);\n+        html.setEditable(false);\n+\n+        final Dimension size = html.getPreferredSize();\n+        html.setSize(size);\n+\n+        BufferedImage image = new BufferedImage(size.width, size.height,\n+                                                BufferedImage.TYPE_INT_RGB);\n+        Graphics g = image.createGraphics();\n+        \/\/ Paint the editor pane to ensure all views are created\n+        html.paint(g);\n+        g.dispose();\n+\n+        int errorCount = 0;\n+        String firstError = null;\n+\n+        System.out.println(\"----- Views -----\");\n+        final View bodyView = html.getUI()\n+                                  .getRootView(html)\n+                                  .getView(1)\n+                                  .getView(1);\n+        for (int i = 0; i < bodyView.getViewCount(); i++) {\n+            View pView = bodyView.getView(i);\n+            View contentView = getContentView(pView);\n+\n+            String decoration =\n+                    contentView.getAttributes()\n+                               .getAttribute(CSS.Attribute.TEXT_DECORATION)\n+                               .toString();\n+\n+            System.out.println(i + \": \" + decoration);\n+            if (!decoration.contains(\"underline\")\n+                || !decoration.contains(\"line-through\")) {\n+                errorCount++;\n+                if (firstError == null) {\n+                    firstError = \"Line \" + i + \": \" + decoration;\n+                }\n+            }\n+        }\n+\n+        if (errorCount > 0) {\n+            saveImage(image);\n+            throw new RuntimeException(errorCount + \" error(s) found, \"\n+                                       + \"the first one: \" + firstError);\n+        }\n+    }\n+\n+    private static View getContentView(View parent) {\n+        View view = parent.getView(0);\n+        return view.getViewCount() > 0\n+               ? getContentView(view)\n+               : view;\n+    }\n+\n+    private static void saveImage(BufferedImage image) {\n+        try {\n+            ImageIO.write(image, \"png\",\n+                          new File(\"html.png\"));\n+        } catch (IOException ignored) { }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLDocument\/HTMLTextDecoration.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JEditorPane;\n+import javax.swing.text.View;\n+import javax.swing.text.html.CSS;\n+\n+\/*\n+ * @test\n+ * @bug 8326734\n+ * @summary Tests different combinations of setting 'underline'\n+ * @run main HTMLUnderlineOnly\n+ *\/\n+public class HTMLUnderlineOnly {\n+    private static final String HTML = \"\"\"\n+            <!DOCTYPE html>\n+            <html lang=\"en\">\n+            <head>\n+                <meta charset=\"UTF-8\">\n+                <title>underline<\/title>\n+                <style>\n+                    .underline   { text-decoration: underline }\n+                <\/style>\n+            <\/head>\n+            <body>\n+            <p><u><span style='text-decoration: underline'>underline?<\/span><\/u><\/p>\n+            <p><span style='text-decoration: underline'><u>underline?<\/u><\/span><\/p>\n+\n+            <p><u><span class=\"underline\">underline?<\/span><\/u><\/p>\n+            <p><span class=\"underline\"><u>underline?<\/u><\/span><\/p>\n+\n+            <p style='text-decoration: underline'><u>underline?<\/u><\/p>\n+            <p style='text-decoration: underline'><span style='text-decoration: underline'>underline?<\/span><\/p>\n+\n+            <p class=\"underline\"><u>underline<\/u><\/p>\n+            <p class=\"underline\"><span style='text-decoration: underline'>underline<\/span><\/p>\n+            <p class=\"underline\"><span class=\"underline\">underline<\/span><\/p>\n+            <\/body>\n+            <\/html>\n+            \"\"\";\n+    public static void main(String[] args) {\n+        final JEditorPane html = new JEditorPane(\"text\/html\", HTML);\n+        html.setEditable(false);\n+\n+        final Dimension size = html.getPreferredSize();\n+        html.setSize(size);\n+\n+        BufferedImage image = new BufferedImage(size.width, size.height,\n+                                                BufferedImage.TYPE_INT_RGB);\n+        Graphics g = image.createGraphics();\n+        \/\/ Paint the editor pane to ensure all views are created\n+        html.paint(g);\n+        g.dispose();\n+\n+        int errorCount = 0;\n+        String firstError = null;\n+\n+        System.out.println(\"----- Views -----\");\n+        final View bodyView = html.getUI()\n+                                  .getRootView(html)\n+                                  .getView(1)\n+                                  .getView(1);\n+        for (int i = 0; i < bodyView.getViewCount(); i++) {\n+            View pView = bodyView.getView(i);\n+            View contentView = getContentView(pView);\n+\n+            String decoration =\n+                    contentView.getAttributes()\n+                               .getAttribute(CSS.Attribute.TEXT_DECORATION)\n+                               .toString();\n+\n+            System.out.println(i + \": \" + decoration);\n+            if (!decoration.contains(\"underline\")\n+                || decoration.contains(\"line-through\")) {\n+                errorCount++;\n+                if (firstError == null) {\n+                    firstError = \"Line \" + i + \": \" + decoration;\n+                }\n+            }\n+        }\n+\n+        if (errorCount > 0) {\n+            saveImage(image);\n+            throw new RuntimeException(errorCount + \" error(s) found, \"\n+                                       + \"the first one: \" + firstError);\n+        }\n+    }\n+\n+    private static View getContentView(View parent) {\n+        View view = parent.getView(0);\n+        return view.getViewCount() > 0\n+               ? getContentView(view)\n+               : view;\n+    }\n+\n+    private static void saveImage(BufferedImage image) {\n+        try {\n+            ImageIO.write(image, \"png\",\n+                          new File(\"html.png\"));\n+        } catch (IOException ignored) { }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLDocument\/HTMLUnderlineOnly.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n- * @bug 8323801\n+ * @bug 8323801 8326734\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLDocument\/HTMLUnderlineStrike.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}