{"files":[{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4210354\n+ * @summary Tests whether method FixedHeightLayoutCache.getBounds returns bad Rectangle\n+ * @run main bug4210354\n+ *\/\n+\n+import java.awt.Rectangle;\n+\n+import javax.swing.tree.AbstractLayoutCache;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.DefaultTreeModel;\n+import javax.swing.tree.FixedHeightLayoutCache;\n+import javax.swing.tree.TreePath;\n+\n+public class bug4210354 {\n+    static class DummyNodeDimensions extends AbstractLayoutCache.NodeDimensions {\n+        private final Rectangle rectangle;\n+\n+        public DummyNodeDimensions(Rectangle r) {\n+            rectangle = r;\n+        }\n+        public Rectangle getNodeDimensions(Object value, int row, int depth,\n+                                           boolean expanded, Rectangle bounds) {\n+            return rectangle;\n+        }\n+\n+        \/* create the TreeModel of depth 1 with specified num of children *\/\n+        public DefaultTreeModel getTreeModelILike(int childrenCount) {\n+            DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"root\");\n+            for (int i = 0; i < childrenCount; i++) {\n+                DefaultMutableTreeNode child =\n+                        new DefaultMutableTreeNode(\"root.child\" + i);\n+                root.insert(child, i);\n+            }\n+            return new DefaultTreeModel(root);\n+        }\n+    }\n+\n+    public void init() {\n+        int x = 1, y = 2, dx = 3, dy = 4, h = 3;\n+        DummyNodeDimensions dim = new DummyNodeDimensions(new Rectangle(x, y, dx, dy));\n+        FixedHeightLayoutCache fhlc = new FixedHeightLayoutCache();\n+        fhlc.setModel(dim.getTreeModelILike(3));\n+        fhlc.setRootVisible(true);\n+        fhlc.setNodeDimensions(dim);\n+        fhlc.setRowHeight(h);\n+        int row = 0;\n+        TreePath path = fhlc.getPathForRow(row);\n+        Rectangle r = fhlc.getBounds(path, new Rectangle());\n+        Rectangle r2 = new Rectangle(x, row * h, dx, h);\n+        if (r.width != r2.width) {\n+            throw new RuntimeException(\"FixedHeightLayoutCache.getBounds returns bad Rectangle\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        bug4210354 b = new bug4210354();\n+        b.init();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/tree\/FixedHeightLayoutCache\/bug4210354.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4706533\n+ * @summary UndoManager.setLimit(0) doesn't correctly trim the UndoManager size\n+ * @run main bug4706533\n+ *\/\n+\n+import javax.swing.undo.AbstractUndoableEdit;\n+import javax.swing.undo.CannotUndoException;\n+import javax.swing.undo.CannotRedoException;\n+import javax.swing.undo.UndoManager;\n+\n+public class bug4706533 {\n+\n+    public static void main(String[] args) throws Exception {\n+        UndoManager manager = new UndoManager();\n+        manager.setLimit(1);\n+        AbstractUndoableEdit edit = new MyUndoableEdit();\n+        manager.addEdit(edit);\n+        manager.setLimit(0);\n+        try {\n+            manager.undo();\n+            throw new RuntimeException(\"The limit should be zero\");\n+        } catch (CannotUndoException e) {\n+            \/\/Expected to be thrown\n+        }\n+    }\n+\n+    static class MyUndoableEdit extends AbstractUndoableEdit {\n+        @Override\n+        public void undo() throws CannotUndoException {}\n+        @Override\n+        public void redo() throws CannotRedoException {}\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/undo\/UndoManager\/bug4706533.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4992178\n+ * @summary REGRESSION: Allow unlimited number of edits in an UndoManager\n+ * @run main bug4992178\n+ *\/\n+\n+import javax.swing.undo.AbstractUndoableEdit;\n+import javax.swing.undo.CannotRedoException;\n+import javax.swing.undo.CannotUndoException;\n+import javax.swing.undo.UndoManager;\n+\n+public class bug4992178 {\n+\n+    public static void main(String[] argv) throws Exception {\n+        TestUndoManager manager = new TestUndoManager();\n+        manager.setLimit(1);\n+        AbstractUndoableEdit edit = new MyUndoableEdit();\n+        manager.addEdit(edit);\n+\n+        manager.setLimit(-1);\n+\n+        manager.discardAllEdits();\n+\n+        if (manager.getVectorSize() != 0) {\n+            throw new RuntimeException(\n+                \"UndoManager's vector size should be 0 after discarding all changes\");\n+        }\n+    }\n+\n+    static class TestUndoManager extends UndoManager {\n+        public int getVectorSize() {\n+            return edits.size();\n+        }\n+    }\n+\n+    static class MyUndoableEdit extends AbstractUndoableEdit {\n+        @Override\n+        public void undo() throws CannotUndoException {}\n+        @Override\n+        public void redo() throws CannotRedoException {}\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/undo\/bug4992178.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}