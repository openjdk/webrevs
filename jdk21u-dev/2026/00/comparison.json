{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -397,0 +397,5 @@\n+    \/**\n+     * Flag to indicate type annotations have been queued for field initializers.\n+     *\/\n+    public static final long FIELD_INIT_TYPE_ANNOTATIONS_QUEUED = 1L<<53; \/\/ VarSymbols\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1784,0 +1784,1 @@\n+                                      final Env<AttrContext> enclosingEnv,\n@@ -1787,1 +1788,1 @@\n-            setData((Callable<Object>)() -> attr.attribLazyConstantValue(env, variable, type));\n+            setData((Callable<Object>)() -> attr.attribLazyConstantValue(env, enclosingEnv, variable, type));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -839,0 +839,1 @@\n+                                      Env<AttrContext> enclosingEnv,\n@@ -847,0 +848,1 @@\n+            doQueueScanTreeAndTypeAnnotateForVarInit(variable, enclosingEnv);\n@@ -1270,5 +1272,1 @@\n-            if (tree.init != null) {\n-                \/\/ Field initializer expression need to be entered.\n-                annotate.queueScanTreeAndTypeAnnotate(tree.init, env, tree.sym, tree.pos());\n-                annotate.flush();\n-            }\n+            doQueueScanTreeAndTypeAnnotateForVarInit(tree, env);\n@@ -1327,0 +1325,11 @@\n+    private void doQueueScanTreeAndTypeAnnotateForVarInit(JCVariableDecl tree, Env<AttrContext> env) {\n+        if (tree.init != null &&\n+            (tree.mods.flags & Flags.FIELD_INIT_TYPE_ANNOTATIONS_QUEUED) == 0 &&\n+            env.info.scope.owner.kind != MTH && env.info.scope.owner.kind != VAR) {\n+            tree.mods.flags |= Flags.FIELD_INIT_TYPE_ANNOTATIONS_QUEUED;\n+            \/\/ Field initializer expression need to be entered.\n+            annotate.queueScanTreeAndTypeAnnotate(tree.init, env, tree.sym, tree.pos());\n+            annotate.flush();\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -304,1 +304,1 @@\n-                v.setLazyConstValue(initEnv(tree, initEnv), attr, tree);\n+                v.setLazyConstValue(initEnv(tree, initEnv), env, attr, tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}