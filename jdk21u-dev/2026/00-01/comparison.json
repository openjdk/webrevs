{"files":[{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8346751\n+ * @summary Verify type annotations inside constant expression field initializers\n+            are handled correctly\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.compiler\/com.sun.tools.javac.code\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main TypeAnnotationsInConstantInit\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import toolbox.JavacTask;\n+import toolbox.ToolBox;\n+\n+public class TypeAnnotationsInConstantInit {\n+\n+    public static void main(String... args) throws Exception {\n+        new TypeAnnotationsInConstantInit().run();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    void run() throws Exception {\n+        typeAnnotationInConstantExpressionFieldInit(Paths.get(\".\"));\n+    }\n+\n+    void typeAnnotationInConstantExpressionFieldInit(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          import java.lang.annotation.*;\n+\n+                          @SuppressWarnings(Decl.VALUE)\n+                          public class Decl {\n+                              public static final @Nullable String VALUE = (@Nullable String) \"\";\n+                          }\n+\n+                          @Retention(RetentionPolicy.RUNTIME)\n+                          @Target({ ElementType.TYPE_USE })\n+                          @interface Nullable {}\n+                          \"\"\");\n+        Files.createDirectories(classes);\n+        new JavacTask(tb)\n+                .options(\"-d\", classes.toString())\n+                .files(tb.findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnotationsInConstantInit.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}