{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,5 @@\n+\/*\n+ * This test is launched via a ProcessBuilder in the main test MacPath which\n+ * includes a @requires (os.family == \"mac\") tag so no operating system\n+ * conditional is applied here.\n+ *\/\n@@ -32,4 +37,0 @@\n-        String osname = System.getProperty(\"os.name\");\n-        if (!osname.contains(\"OS X\") && !osname.contains(\"Darwin\"))\n-            return;\n-\n","filename":"test\/jdk\/java\/io\/File\/MacPathTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+   @library \/test\/lib\n@@ -29,1 +30,4 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import jtreg.SkippedException;\n@@ -35,1 +39,1 @@\n-            return;\n+            throw new SkippedException(\"This test is run only on Windows\");\n@@ -37,0 +41,1 @@\n+\n","filename":"test\/jdk\/java\/io\/File\/MaxPath.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+   @requires (os.family == \"windows\")\n@@ -41,4 +42,0 @@\n-        if (!osName.startsWith(\"Windows\")) {\n-            return;\n-        }\n-\n","filename":"test\/jdk\/java\/io\/File\/WinDeviceName.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+   @requires (os.family == \"windows\")\n@@ -33,4 +34,0 @@\n-        String osName = System.getProperty(\"os.name\");\n-        if (!osName.startsWith(\"Windows\")) {\n-            return;\n-        }\n","filename":"test\/jdk\/java\/io\/File\/WinMaxPath.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+   @requires (os.family == \"windows\")\n@@ -33,4 +34,0 @@\n-        String osName = System.getProperty(\"os.name\");\n-        if (!osName.startsWith(\"Windows\")) {\n-            return;\n-        }\n","filename":"test\/jdk\/java\/io\/File\/WinSpecialFiles.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,9 +40,0 @@\n-        \/\/ Linux does not yet allow opening this many files; Solaris\n-        \/\/ 8 requires an explicit allocation of more file descriptors\n-        \/\/ to succeed. Since this test is written to check for a\n-        \/\/ Windows capability it is much simpler to only run it\n-        \/\/ on that platform.\n-        String osName = System.getProperty(\"os.name\");\n-        if (osName.startsWith(\"Linux\"))\n-            return;\n-\n","filename":"test\/jdk\/java\/io\/FileOutputStream\/ManyFiles.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"}]}