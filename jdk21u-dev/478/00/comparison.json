{"files":[{"patch":"@@ -50,1 +50,0 @@\n-import java.lang.reflect.InvocationTargetException;\n@@ -52,0 +51,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -81,1 +81,0 @@\n-import jdk.internal.util.OperatingSystem;\n@@ -89,0 +88,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -175,0 +175,4 @@\n+            case \"security\":\n+                var opt = opts.length > 2 ? opts[2].trim() : \"all\";\n+                SecuritySettings.printSecuritySettings(opt, ostream);\n+                break;\n@@ -184,0 +188,1 @@\n+                SecuritySettings.printSecuritySummarySettings(ostream);\n@@ -321,0 +326,1 @@\n+        ostream.println();\n@@ -323,1 +329,1 @@\n-    public static void printSystemMetrics() {\n+    private static void printSystemMetrics() {\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,217 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.launcher;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import jdk.internal.access.SharedSecrets;\n+\n+\/**\n+ * A utility class for security libs functionality\n+ * in the -XshowSettings:security output\n+ *\/\n+public final class SecuritySettings {\n+\n+    private static final String INDENT = \"    \";\n+    private static final String TWOINDENT = INDENT + INDENT;\n+    private static final String THREEINDENT = TWOINDENT + INDENT;\n+    private static final String PROV_INFO_STRING = \"Provider information: \";\n+    private static PrintStream ostream = null;\n+\n+    static void printSecuritySettings(String arg, PrintStream stream) {\n+        ostream = stream;\n+        switch (arg) {\n+            case \"properties\" -> printSecurityProperties();\n+            case \"providers\"  -> printSecurityProviderConfig(true);\n+            case \"tls\"        -> printSecurityTLSConfig(true);\n+            case \"all\"        -> printAllSecurityConfig();\n+            default           -> ostream.println(\n+                    \"\\nUnrecognized security subcommand. Valid values are \" +\n+                    \"\\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\". See \\\"java -X\\\"\\n\");\n+        }\n+    }\n+\n+    \/\/ A non-verbose description of some core security configuration settings\n+    static void printSecuritySummarySettings(PrintStream stream) {\n+        ostream = stream;\n+        ostream.println(\"Security settings summary: \" + \"\\n\" +\n+                INDENT + \"See \\\"java -X\\\" for verbose security settings options\");\n+        printSecurityProviderConfig(false);\n+        printSecurityTLSConfig(false);\n+    }\n+\n+    static void printAllSecurityConfig() {\n+        ostream.println(\"Security settings:\");\n+        printSecurityProperties();\n+        printSecurityProviderConfig(true);\n+        printSecurityTLSConfig(true);\n+    }\n+\n+    private static void printSecurityProperties() {\n+        ostream.println(INDENT + \"Security properties:\");\n+        Properties p = SharedSecrets.getJavaSecurityPropertiesAccess().getInitialProperties();\n+        for (String key : p.stringPropertyNames().stream().sorted().toList()) {\n+            String val = p.getProperty(key);\n+            if (val.length() > 60) {\n+                splitLongPropertyLines(key, val);\n+            } else {\n+                ostream.println(TWOINDENT + key + \"=\" + val);\n+            }\n+        }\n+        ostream.println();\n+    }\n+\n+    private static void splitLongPropertyLines(String key, String val) {\n+        \/\/ split long property values which use well known separator\n+        if (val.contains(\",\") || val.contains(\";\")) {\n+            String separator = (val.contains(\",\")) ? \",\" : \";\";\n+            ostream.println(TWOINDENT + key + \"=\");\n+            String[] values = val.split(separator);\n+            String lastValue = values[values.length -1].trim();\n+            List.of(values).forEach(\n+                    s -> ostream.println(THREEINDENT + s.trim() +\n+                            (s.trim().equals(lastValue) ? \"\" : separator)));\n+        } else {\n+            ostream.println(TWOINDENT + key + \"=\" + val);\n+        }\n+    }\n+\n+    private static void printSecurityTLSConfig(boolean verbose) {\n+        SSLSocket ssls;\n+        SSLContext sslContext;\n+        try {\n+            sslContext = SSLContext.getDefault();\n+            ssls = (SSLSocket)sslContext.getSocketFactory().createSocket();\n+        } catch (IOException | NoSuchAlgorithmException e) {\n+            ostream.println(INDENT + \"Failed to create SSL socket\");\n+            ostream.println(INDENT + e + \"\\n\");\n+            return;\n+        }\n+\n+        ostream.println(INDENT + \"Security TLS configuration (\" +\n+                sslContext.getProvider().getName() + \" provider):\");\n+        ostream.println(TWOINDENT + \"Enabled Protocols:\");\n+        for (String s : ssls.getEnabledProtocols()) {\n+            ostream.println(THREEINDENT + s);\n+        }\n+\n+        if (verbose) {\n+            ostream.println(\"\\n\" + TWOINDENT + \"Enabled Cipher Suites:\");\n+            for (String s : ssls.getEnabledCipherSuites()) {\n+                ostream.println(THREEINDENT + s);\n+            }\n+        }\n+        ostream.println();\n+    }\n+\n+    private static void printSecurityProviderConfig(boolean verbose) {\n+        ostream.println(INDENT + \"Security provider static configuration: (in order of preference)\");\n+        for (Provider p : Security.getProviders()) {\n+            if (verbose) {\n+                \/\/ separate the views out\n+                ostream.println(TWOINDENT + \"-\".repeat(40));\n+            }\n+            ostream.println(TWOINDENT + \"Provider name: \" + p.getName());\n+            if (verbose) {\n+                ostream.println(wrappedString(PROV_INFO_STRING + p.getInfo(), 80,\n+                        TWOINDENT, THREEINDENT));\n+                ostream.println(TWOINDENT + \"Provider services: (type : algorithm)\");\n+                Set<Provider.Service> services = p.getServices();\n+                Set<String> keys = Collections.list(p.keys())\n+                        .stream()\n+                        .map(String.class::cast)\n+                        .filter(s -> s.startsWith(\"Alg.Alias.\"))\n+                        .collect(Collectors.toSet());\n+                if (!services.isEmpty()) {\n+                    services.stream()\n+                            .sorted(Comparator.comparing(Provider.Service::getType)\n+                                    .thenComparing(Provider.Service::getAlgorithm))\n+                            .forEach(ps -> {\n+                                ostream.println(THREEINDENT +\n+                                        ps.getType() + \".\" + ps.getAlgorithm());\n+                                List<String> aliases = keys\n+                                        .stream()\n+                                        .filter(s -> s.startsWith(\"Alg.Alias.\" + ps.getType()))\n+                                        .filter(s -> p.getProperty(s).equals(ps.getAlgorithm()))\n+                                        .map(s -> s.substring((\"Alg.Alias.\" + ps.getType() + \".\").length()))\n+                                        .toList();\n+\n+                                if (!aliases.isEmpty()) {\n+                                    ostream.println(wrappedString(\n+                                            aliases.stream()\n+                                                    .collect(Collectors.joining(\", \", INDENT + \" aliases: [\", \"]\")),\n+                                            80, \" \" + TWOINDENT, INDENT + THREEINDENT));\n+                                }\n+                            });\n+                } else {\n+                    ostream.println(THREEINDENT + \"<none>\");\n+                }\n+            }\n+        }\n+        if (verbose) {\n+            ostream.println();\n+        }\n+    }\n+\n+    \/\/ return a string split across multiple lines which aims to limit max length\n+    private static String wrappedString(String orig, int limit,\n+                                        String initIndent, String successiveIndent) {\n+        if (orig == null || orig.isEmpty() || limit <= 0) {\n+            \/\/ bad input\n+            return orig;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int widthCount = 0;\n+        for (String s : orig.split(\" \")) {\n+            if (widthCount == 0) {\n+                \/\/ first iteration only\n+                sb.append(initIndent + s);\n+                widthCount = s.length() + initIndent.length();\n+            } else {\n+                if (widthCount + s.length() > limit) {\n+                    sb.append(\"\\n\" + successiveIndent + s);\n+                    widthCount = s.length() + successiveIndent.length();\n+                } else {\n+                    sb.append(\" \" + s);\n+                    widthCount += s.length() + 1;\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/SecuritySettings.java","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"},{"patch":"@@ -173,0 +173,10 @@\n+\\    -XshowSettings:security\\n\\\n+\\                      show all security settings and continue\\n\\\n+\\    -XshowSettings:security:all\\n\\\n+\\                      show all security settings and continue\\n\\\n+\\    -XshowSettings:security:properties\\n\\\n+\\                      show security properties and continue\\n\\\n+\\    -XshowSettings:security:providers\\n\\\n+\\                      show static security provider settings and continue\\n\\\n+\\    -XshowSettings:security:tls\\n\\\n+\\                      show TLS related security settings and continue\\n\\\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * @bug 8155246 8292297 8292177\n+ * @bug 8155246 8292297 8292177 8281658\n@@ -74,0 +74,4 @@\n+            \/\/ sanity test -XshowSettings:security option\n+            exerciseShowSettingsSecurity(copiedJava.toString(), \"-cp\", System.getProperty(\"test.classes\"),\n+                    \"-Djava.security.debug=all\", \"-XshowSettings:security\", \"ConfigFileTest\", \"runner\");\n+\n@@ -139,0 +143,10 @@\n+    \/\/ exercise the -XshowSettings:security launcher\n+    private static void exerciseShowSettingsSecurity(String... args) throws Exception {\n+        ProcessBuilder process = new ProcessBuilder(args);\n+        OutputAnalyzer oa = ProcessTools.executeProcess(process);\n+        oa.shouldHaveExitValue(0)\n+                .shouldContain(\"Security properties:\")\n+                .shouldContain(\"Security provider static configuration:\")\n+                .shouldContain(\"Security TLS configuration\");\n+    }\n+\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTest.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 6994753 7123582 8305950\n+ * @bug 6994753 7123582 8305950 8281658\n@@ -70,0 +70,7 @@\n+    private static final String SEC_PROPS_SETTINGS = \"Security properties:\";\n+    private static final String SEC_SUMMARY_PROPS_SETTINGS =\n+                \"Security settings summary:\";\n+    private static final String SEC_PROVIDER_SETTINGS =\n+                \"Security provider static configuration:\";\n+    private static final String SEC_TLS_SETTINGS = \"Security TLS configuration\";\n+    private static final String BAD_SEC_OPTION_MSG = \"Unrecognized security subcommand\";\n@@ -78,0 +85,5 @@\n+        \/\/ no verbose security settings unless \"security\" used\n+        checkNotContains(tr, SEC_PROPS_SETTINGS);\n+        checkContains(tr, SEC_SUMMARY_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n@@ -147,0 +159,48 @@\n+    static void runTestOptionSecurity() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security\");\n+        checkNotContains(tr, VM_SETTINGS);\n+        checkNotContains(tr, PROP_SETTINGS);\n+        checkContains(tr, SEC_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n+    }\n+\n+    static void runTestOptionSecurityProps() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security:properties\");\n+        checkContains(tr, SEC_PROPS_SETTINGS);\n+        checkNotContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkNotContains(tr, SEC_TLS_SETTINGS);\n+        \/\/ test a well known property for sanity\n+        checkContains(tr, \"keystore.type=pkcs12\");\n+    }\n+\n+    static void runTestOptionSecurityProv() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security:providers\");\n+        checkNotContains(tr, SEC_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkNotContains(tr, SEC_TLS_SETTINGS);\n+        \/\/ test a well known Provider for sanity\n+        checkContains(tr, \"Provider name: SUN\");\n+        \/\/ test for a well known alias (SunJCE: AlgorithmParameterGenerator.DiffieHellman)\n+        checkContains(tr, \"aliases: [1.2.840.113549.1.3.1, \" +\n+                \"DH, OID.1.2.840.113549.1.3.1]\");\n+    }\n+\n+    static void runTestOptionSecurityTLS() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security:tls\");\n+        checkNotContains(tr, SEC_PROPS_SETTINGS);\n+        checkNotContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n+        \/\/ test a well known TLS config for sanity\n+        checkContains(tr, \"TLSv1.2\");\n+    }\n+\n+    \/\/ ensure error message is printed when unrecognized option used\n+    static void runTestOptionBadSecurityOption() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security:bad\");\n+        checkContains(tr, BAD_SEC_OPTION_MSG);\n+        \/\/ we print all security settings in such scenario\n+        checkNotContains(tr, SEC_PROPS_SETTINGS);\n+        checkNotContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkNotContains(tr, SEC_TLS_SETTINGS);\n+    }\n@@ -184,0 +244,5 @@\n+        runTestOptionSecurity();\n+        runTestOptionSecurityProps();\n+        runTestOptionSecurityProv();\n+        runTestOptionSecurityTLS();\n+        runTestOptionBadSecurityOption();\n","filename":"test\/jdk\/tools\/launcher\/Settings.java","additions":66,"deletions":1,"binary":false,"changes":67,"status":"modified"}]}