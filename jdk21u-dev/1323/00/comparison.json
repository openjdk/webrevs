{"files":[{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4240766 8259023\n+ * @summary Frame Icon is wrong - should be Coffee Cup or Duke image icon\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DefaultFrameIconTest\n+*\/\n+\n+public class DefaultFrameIconTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            You should see a dialog and a frame.\n+            If both have Coffee Cup or Duke image icon in the upper left corner,\n+            the test passes, otherwise it fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"DefaultFrameIconTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(DefaultFrameIconTest::createAndShowUI)\n+                .positionTestUI(DefaultFrameIconTest::positionTestWindows)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static void positionTestWindows(List<? extends Window> testWindows,\n+                                            PassFailJFrame.InstructionUI instructionUI) {\n+        int gap = 5;\n+        int x = instructionUI.getLocation().x + instructionUI.getSize().width + gap;\n+        for (Window w : testWindows) {\n+            w.setLocation(x, instructionUI.getLocation().y);\n+            x += w.getWidth() + gap;\n+        }\n+    }\n+\n+    private static List<Window> createAndShowUI() {\n+        Frame testFrame = new Frame(\"Frame DefaultFrameIconTest\");\n+        Dialog testDialog = new Dialog(testFrame, \"Dialog DefaultFrameIconTest\");\n+\n+        testDialog.setSize(250, 100);\n+\n+        testFrame.setSize(250, 100);\n+        return List.of(testFrame, testDialog);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/DefaultFrameIconTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4127271\n+ * @summary Tests that disposing of a Frame with MenuBar removes all traces\n+ *          of the Frame from the screen.\n+ *\/\n+\n+public class DisposeTest {\n+    private static Frame backgroundFrame;\n+    private static Frame testedFrame;\n+\n+    private static final Rectangle backgroundFrameBounds =\n+            new Rectangle(100, 100, 200, 200);\n+    private static final Rectangle testedFrameBounds =\n+            new Rectangle(150, 150, 100, 100);\n+\n+    private static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(DisposeTest::initAndShowGui);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            EventQueue.invokeAndWait(testedFrame::dispose);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                backgroundFrame.dispose();\n+                testedFrame.dispose();\n+            });\n+        }\n+    }\n+\n+    private static void test() {\n+        BufferedImage bi = robot.createScreenCapture(backgroundFrameBounds);\n+        int redPix = Color.RED.getRGB();\n+\n+        for (int x = 0; x < bi.getWidth(); x++) {\n+            for (int y = 0; y < bi.getHeight(); y++) {\n+                if (bi.getRGB(x, y) != redPix) {\n+                    try {\n+                        ImageIO.write(bi, \"png\",\n+                                new File(\"failure.png\"));\n+                    } catch (IOException ignored) {}\n+                    throw new RuntimeException(\"Test failed\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void initAndShowGui() {\n+        backgroundFrame = new Frame(\"DisposeTest background\");\n+        backgroundFrame.setUndecorated(true);\n+        backgroundFrame.setBackground(Color.RED);\n+        backgroundFrame.setBounds(backgroundFrameBounds);\n+        backgroundFrame.setVisible(true);\n+\n+        testedFrame = new UglyFrame();\n+    }\n+\n+    static class UglyFrame extends Frame {\n+        public UglyFrame() {\n+            super(\"DisposeTest\");\n+            MenuBar mb = new MenuBar();\n+            Menu m = new Menu(\"menu\");\n+            mb.add(m);\n+            setMenuBar(mb);\n+            setBounds(testedFrameBounds);\n+            setVisible(true);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Frame\/DisposeTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+\n+\/*\n+ * @test\n+ * @bug 4023385\n+ * @summary resizing a frame causes too many repaints\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FramePaintTest\n+*\/\n+\n+public class FramePaintTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            You should see a Frame titled \"Repaint Test\", filled with colored blocks.\n+\n+            Resize the frame several times, both inward as well as outward.\n+\n+            The blocks should move to fill the window without any flashes or\n+            glitches which ensures that repaint is not done excessively\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"FramePaintTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(ResizeLW::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static class ResizeLW extends Frame {\n+\n+        public ResizeLW() {\n+            super(\"Repaint Test\");\n+            setBackground(Color.red);\n+            setLayout(new FlowLayout());\n+            setSize(300, 300);\n+\n+            for (int i = 0; i < 10; i++) {\n+                add(new ColorComp(Color.blue));\n+                add(new ColorComp(Color.green));\n+            }\n+        }\n+\n+        private static class ColorComp extends Component {\n+            public ColorComp(Color c) {\n+                super();\n+                setBackground(c);\n+            }\n+\n+            public void paint(Graphics g) {\n+                g.setColor(getBackground());\n+                g.fillRect(0, 0, getWidth(), getHeight());\n+            }\n+\n+            public Dimension getPreferredSize() {\n+                return new Dimension(50, 50);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/FramePaintTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.CheckboxMenuItem;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.TextField;\n+import java.awt.Window;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4133279\n+ * @summary  Clicking in menu in inactive frame crashes application\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuCrash\n+ *\/\n+public class MenuCrash {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Two frames will appear, alternate between frames by clicking on the\n+            menubar of the currently deactivated frame and verify no crash occurs.\n+\n+            Try mousing around the menus and choosing various items to see the menu\n+            item name reflected in the text field. Note that CheckBoxMenuItems do\n+            not fire action events so the check menu item (Item 03) will not change\n+            the field.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"MenuCrash Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(MenuCrash::createAndShowUI)\n+                .positionTestUI(MenuCrash::positionTestWindows)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+\n+    private static List<Window> createAndShowUI() {\n+        Frame frame1 = new MenuFrame(\"Frame 1 MenuCrash\");\n+        Frame frame2 = new MenuFrame(\"Frame 2 MenuCrash\");\n+\n+        frame1.setSize(300, 200);\n+        frame2.setSize(300, 200);\n+\n+        frame1.validate();\n+        frame2.validate();\n+\n+        return List.of(frame1, frame2);\n+    }\n+\n+    private static void positionTestWindows(List<? extends Window> testWindows,\n+                                            PassFailJFrame.InstructionUI instructionUI) {\n+        int gap = 5;\n+        int x = instructionUI.getLocation().x + instructionUI.getSize().width + gap;\n+        for (Window w : testWindows) {\n+            w.setLocation(x, instructionUI.getLocation().y);\n+            x += w.getWidth() + gap;\n+        }\n+    }\n+\n+    static class MenuFrame extends Frame {\n+        private final TextField  field;\n+\n+        MenuFrame(String name) {\n+            super(name);\n+            setLayout(new FlowLayout());\n+\n+            Button removeMenus = new Button(\"Remove Menus\");\n+            removeMenus.addActionListener(ev -> remove(getMenuBar()));\n+\n+            Button addMenus = new Button(\"Add Menus\");\n+            addMenus.addActionListener(ev -> setupMenus());\n+\n+            add(removeMenus);\n+            add(addMenus);\n+            field = new TextField(20);\n+            add(field);\n+\n+            addWindowListener(\n+                    new WindowAdapter() {\n+                        public void windowActivated(WindowEvent e) {\n+                            setupMenus();\n+                        }\n+                    }\n+            );\n+\n+            addComponentListener(\n+                    new ComponentAdapter() {\n+                        public void componentResized(ComponentEvent e) {\n+                            System.out.println(MenuFrame.this);\n+                        }\n+                    }\n+            );\n+\n+            pack();\n+        }\n+\n+        private void addMenuListeners() {\n+            MenuBar menuBar = getMenuBar();\n+\n+            for (int nMenu = 0; nMenu < menuBar.getMenuCount(); nMenu++) {\n+                Menu menu = menuBar.getMenu(nMenu);\n+                for (int nMenuItem = 0; nMenuItem < menu.getItemCount(); nMenuItem++) {\n+                    MenuItem item = menu.getItem(nMenuItem);\n+                    item.addActionListener(ev -> field.setText(ev.getActionCommand()));\n+                }\n+            }\n+        }\n+\n+        private void setupMenus() {\n+            MenuItem miSetLabel = new MenuItem(\"Item 01\");\n+            MenuItem miSetEnabled = new MenuItem(\"Item 02\");\n+            CheckboxMenuItem miSetState = new CheckboxMenuItem(\"Item 03\");\n+            MenuItem miAdded = new MenuItem(\"Item 04 Added\");\n+\n+            MenuBar menuBar = new MenuBar();\n+            Menu menu1 = new Menu(\"Menu 01\");\n+            menu1.add(miSetLabel);\n+            menu1.add(miSetEnabled);\n+            menu1.add(miSetState);\n+            menuBar.add(menu1);\n+            setMenuBar(menuBar);\n+\n+            \/\/ now that the peers are created, screw\n+            \/\/ around with the menu items\n+            miSetLabel.setLabel(\"Menu 01 - SetLabel\");\n+            miSetEnabled.setEnabled(false);\n+            miSetState.setState(true);\n+            menu1.add(miAdded);\n+            menu1.remove(miAdded);\n+            menu1.addSeparator();\n+            menu1.add(miAdded);\n+\n+            Menu menu2 = new Menu(\"Menu 02\");\n+            menuBar.add(menu2);\n+            menuBar.remove(menu2);\n+            menuBar.add(menu2);\n+            menu2.add(new MenuItem(\"Foo\"));\n+            menu1.setLabel(\"Menu Number 1\");\n+            menu2.setLabel(\"Menu Number 2\");\n+\n+            addMenuListeners();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/MenuCrash.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"}]}