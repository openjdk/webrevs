{"files":[{"patch":"@@ -105,1 +105,3 @@\n-#define MAP_ANON_64K  0x400\n+  #define MAP_ANON_64K 0x400\n+#else\n+  STATIC_ASSERT(MAP_ANON_64K == 0x400);\n@@ -231,9 +233,9 @@\n-  size_t pagesize;            \/\/ sysconf _SC_PAGESIZE (4K)\n-  size_t datapsize;           \/\/ default data page size (LDR_CNTRL DATAPSIZE)\n-  size_t shmpsize;            \/\/ default shared memory page size (LDR_CNTRL SHMPSIZE)\n-  size_t pthr_stack_pagesize; \/\/ stack page size of pthread threads\n-  size_t textpsize;           \/\/ default text page size (LDR_CNTRL STACKPSIZE)\n-  bool can_use_64K_pages;     \/\/ True if we can alloc 64K pages dynamically with Sys V shm.\n-  bool can_use_16M_pages;     \/\/ True if we can alloc 16M pages dynamically with Sys V shm.\n-  bool can_use_64K_mmap_pages;\/\/ True if we can alloc 64K pages dynamically with mmap.\n-  int error;                  \/\/ Error describing if something went wrong at multipage init.\n+  size_t pagesize;             \/\/ sysconf _SC_PAGESIZE (4K)\n+  size_t datapsize;            \/\/ default data page size (LDR_CNTRL DATAPSIZE)\n+  size_t shmpsize;             \/\/ default shared memory page size (LDR_CNTRL SHMPSIZE)\n+  size_t pthr_stack_pagesize;  \/\/ stack page size of pthread threads\n+  size_t textpsize;            \/\/ default text page size (LDR_CNTRL STACKPSIZE)\n+  bool can_use_64K_pages;      \/\/ True if we can alloc 64K pages dynamically with Sys V shm.\n+  bool can_use_16M_pages;      \/\/ True if we can alloc 16M pages dynamically with Sys V shm.\n+  bool can_use_64K_mmap_pages; \/\/ True if we can alloc 64K pages dynamically with mmap.\n+  int error;                   \/\/ Error describing if something went wrong at multipage init.\n@@ -401,6 +403,10 @@\n-    guarantee(shmid != -1, \"shmget failed\");\n-    void* p = ::shmat(shmid, nullptr, 0);\n-    ::shmctl(shmid, IPC_RMID, nullptr);\n-    guarantee(p != (void*) -1, \"shmat failed\");\n-    g_multipage_support.shmpsize = os::Aix::query_pagesize(p);\n-    ::shmdt(p);\n+    assert(shmid != -1, \"shmget failed\");\n+    if (shmid != -1) {\n+      void* p = ::shmat(shmid, nullptr, 0);\n+      ::shmctl(shmid, IPC_RMID, nullptr);\n+      assert(p != (void*) -1, \"shmat failed\");\n+      if (p != (void*) -1) {\n+        g_multipage_support.shmpsize = os::Aix::query_pagesize(p);\n+        ::shmdt(p);\n+      }\n+    }\n@@ -466,16 +472,9 @@\n-      guarantee0(shmid != -1); \/\/ Should always work.\n-      \/\/ Try to set pagesize.\n-      struct shmid_ds shm_buf = { };\n-      shm_buf.shm_pagesize = pagesize;\n-      if (::shmctl(shmid, SHM_PAGESIZE, &shm_buf) != 0) {\n-        const int en = errno;\n-        ::shmctl(shmid, IPC_RMID, nullptr); \/\/ As early as possible!\n-        trcVerbose(\"shmctl(SHM_PAGESIZE) failed with errno=%d\", errno);\n-      } else {\n-        \/\/ Attach and double check pageisze.\n-        void* p = ::shmat(shmid, nullptr, 0);\n-        ::shmctl(shmid, IPC_RMID, nullptr); \/\/ As early as possible!\n-        guarantee0(p != (void*) -1); \/\/ Should always work.\n-        const size_t real_pagesize = os::Aix::query_pagesize(p);\n-        if (real_pagesize != pagesize) {\n-          trcVerbose(\"real page size (\" SIZE_FORMAT_X \") differs.\", real_pagesize);\n+      assert(shmid != -1, \"shmget failed\");\n+      if (shmid != -1) {\n+        \/\/ Try to set pagesize.\n+        struct shmid_ds shm_buf = { };\n+        shm_buf.shm_pagesize = pagesize;\n+        if (::shmctl(shmid, SHM_PAGESIZE, &shm_buf) != 0) {\n+          const int en = errno;\n+          ::shmctl(shmid, IPC_RMID, nullptr); \/\/ As early as possible!\n+          trcVerbose(\"shmctl(SHM_PAGESIZE) failed with errno=%d\", errno);\n@@ -483,1 +482,13 @@\n-          can_use = true;\n+          \/\/ Attach and double check pageisze.\n+          void* p = ::shmat(shmid, nullptr, 0);\n+          ::shmctl(shmid, IPC_RMID, nullptr); \/\/ As early as possible!\n+          assert(p != (void*) -1, \"shmat failed\");\n+          if (p != (void*) -1) {\n+            const size_t real_pagesize = os::Aix::query_pagesize(p);\n+            if (real_pagesize != pagesize) {\n+              log_warning(pagesize)(\"real page size (\" SIZE_FORMAT_X \") differs.\", real_pagesize);\n+            } else {\n+              can_use = true;\n+            }\n+            ::shmdt(p);\n+          }\n@@ -485,1 +496,0 @@\n-        ::shmdt(p);\n@@ -495,1 +505,1 @@\n-    \/\/ Can we use mmap with 64K pages? (Should be available with AIX 7.3 TL1)\n+    \/\/ Can we use mmap with 64K pages? (Should be available with AIX7.3 TL1)\n@@ -497,4 +507,6 @@\n-      void* p = mmap(NULL, 1000000, PROT_READ | PROT_WRITE, MAP_ANON_64K | MAP_ANONYMOUS | MAP_SHARED, -1, 0);\n-      guarantee0(p != (void*) -1); \/\/ Should always work.\n-      g_multipage_support.can_use_64K_mmap_pages = (64*K == os::Aix::query_pagesize(p));\n-      munmap(p, 1000000);\n+      void* p = mmap(NULL, 64*K, PROT_READ | PROT_WRITE, MAP_ANON_64K | MAP_ANONYMOUS | MAP_SHARED, -1, 0);\n+      assert(p != (void*) -1, \"mmap failed\");\n+      if (p != (void*) -1) {\n+        g_multipage_support.can_use_64K_mmap_pages = (64*K == os::Aix::query_pagesize(p));\n+        munmap(p, 64*K);\n+      }\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":51,"deletions":39,"binary":false,"changes":90,"status":"modified"}]}