{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n-serviceability\/dcmd\/thread\/PrintConcurrentLocksTest.java 8308033 generic-all\n-serviceability\/dcmd\/thread\/PrintTest.java 8308033 generic-all\n-serviceability\/dcmd\/thread\/ThreadDumpToFileTest.java 8308033 generic-all\n-serviceability\/tmtools\/jstack\/DaemonThreadTest.java 8308033 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-Virtual.txt","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import org.testng.SkipException;\n@@ -174,0 +175,3 @@\n+        if (Thread.currentThread().isVirtual()) {\n+            throw new SkipException(\"skipping test since current thread is virtual thread\");\n+        }\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/thread\/PrintTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+            setDaemon(false);\n","filename":"test\/hotspot\/jtreg\/serviceability\/tmtools\/jstack\/DaemonThreadTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,3 +33,0 @@\n-sun\/tools\/jcmd\/JcmdOutputEncodingTest.java 8308033 generic-all\n-sun\/tools\/jstack\/BasicJStackTest.java 8308033 generic-all\n-\n","filename":"test\/jdk\/ProblemList-Virtual.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -34,1 +36,1 @@\n- * @bug 8222491 8273187\n+ * @bug 8222491 8273187 8308033\n@@ -55,1 +57,13 @@\n-        launcher.addToolArg(\"Thread.print\");\n+        boolean isVirtualThread = Thread.currentThread().isVirtual();\n+        Path threadDumpFile = null;\n+        if (isVirtualThread) {\n+            \/\/ \"jcmd Thread.print\" will not print thread dumps of virtual threads.\n+            \/\/ So we use \"Thread.dump_to_file\" command instead and dump the thread\n+            \/\/ stacktraces in a file\n+            threadDumpFile = Files.createTempFile(Path.of(\".\"), \"jcmd\", \".tdump\").toAbsolutePath();\n+            launcher.addToolArg(\"Thread.dump_to_file\");\n+            launcher.addToolArg(\"-overwrite\");\n+            launcher.addToolArg(threadDumpFile.toString());\n+        } else {\n+            launcher.addToolArg(\"Thread.print\");\n+        }\n@@ -61,1 +75,20 @@\n-        output.shouldContain(marker);\n+        if (isVirtualThread) {\n+            \/\/ verify the file containing the thread dump has the expected text\n+            try (var br = Files.newBufferedReader(threadDumpFile, cs)) {\n+                String line = null;\n+                boolean found = false;\n+                while ((line = br.readLine()) != null) {\n+                    if (line.contains(marker)) {\n+                        found = true;\n+                        break;\n+                    }\n+                }\n+                if (!found) {\n+                    output.reportDiagnosticSummary();\n+                    throw new RuntimeException(\"'\" + marker + \"' missing in thread dump in file \"\n+                            + threadDumpFile);\n+                }\n+            }\n+        } else {\n+            output.shouldContain(marker);\n+        }\n","filename":"test\/jdk\/sun\/tools\/jcmd\/JcmdOutputEncodingTest.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import jtreg.SkippedException;\n+\n@@ -35,1 +37,1 @@\n- * @bug 8273187\n+ * @bug 8273187 8308033\n@@ -45,0 +47,7 @@\n+        if (Thread.currentThread().isVirtual()) {\n+            \/\/ This test runs jstack against the current process and then asserts the\n+            \/\/ presence of current thread in the stacktraces. We skip this test\n+            \/\/ when the current thread is a virtual thread since \"jstack\" command doesn't\n+            \/\/ print the stacktraces of virtual threads.\n+            throw new SkippedException(\"skipping test since current thread is a virtual thread\");\n+        }\n","filename":"test\/jdk\/sun\/tools\/jstack\/BasicJStackTest.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}