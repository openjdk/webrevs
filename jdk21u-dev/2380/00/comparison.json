{"files":[{"patch":"@@ -402,0 +402,1 @@\n+java\/awt\/Modal\/NativeDialogToFrontBackTest.java 7188049 windows-all,linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GraphicsEnvironment;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 6225472 6682536\n+ * @requires (os.family != \"linux\")\n+ * @summary Tests that non-focusable Frame in full-screen mode overlaps the task bar.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NonfocusableFrameFullScreenTest\n+ *\/\n+\n+public class NonfocusableFrameFullScreenTest extends JPanel {\n+    boolean fullscreen = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                1. Press \"Show Frame\" button to show a Frame with two buttons.\n+\n+                2. Press the button \"To Full Screen\" to bring the frame to\n+                   full-screen mode:\n+\n+                        The frame should overlap the taskbar\n+\n+                3. Press \"To Windowed\" button:\n+                        The frame should return to its original size.\n+                        The frame shouldn't be alwaysOnTop.\n+\n+                4. Press \"Set Always On Top\" button and make sure the frame\n+                   is alwaysOnTop, then press \"To Full Screen\" button\n+                   and then \"To Windowed\" button:\n+\n+                        The frame should return to its original size keeping alwaysOnTop\n+                        state on.\n+\n+                Press Pass if everything is as expected.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(NonfocusableFrameFullScreenTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private NonfocusableFrameFullScreenTest() {\n+        Button b = new Button(\"Show Frame\");\n+        b.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                showFrame();\n+            }\n+        });\n+        setLayout(new BorderLayout());\n+        add(b, BorderLayout.CENTER);\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 100);\n+    }\n+\n+    public void showFrame() {\n+        Frame frame = new Frame(\"Test Frame\");\n+\n+        Button button = new Button(\"To Full Screen\");\n+        button.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (fullscreen) {\n+                    GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().\n+                            setFullScreenWindow(null);\n+                    button.setLabel(\"To Full Screen\");\n+                    fullscreen = false;\n+                } else {\n+                    GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().\n+                            setFullScreenWindow(frame);\n+                    button.setLabel(\"To Windowed\");\n+                    fullscreen = true;\n+                }\n+                frame.validate();\n+            }\n+        });\n+\n+        Button button2 = new Button(\"Set Always On Top\");\n+        button2.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (frame.isAlwaysOnTop()) {\n+                    button2.setLabel(\"Set Always On Top\");\n+                    frame.setAlwaysOnTop(false);\n+                } else {\n+                    button2.setLabel(\"Set Not Always On Top\");\n+                    frame.setAlwaysOnTop(true);\n+                }\n+                frame.validate();\n+            }\n+        });\n+\n+        frame.setLayout(new BorderLayout());\n+        frame.add(button, BorderLayout.WEST);\n+        frame.add(button2, BorderLayout.EAST);\n+        frame.setBounds(400, 200, 350, 100);\n+        frame.setFocusableWindowState(false);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FullScreen\/NonfocusableFrameFullScreenTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+\n+\/*\n+ * @test\n+ * @bug 6271779\n+ * @summary This test shows and hides a modal dialog several times without destroying its\n+ *          peer. Without the fix this may lead to application (or even WM) hang.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AddRemoveTransientForsTest\n+ *\/\n+\n+public class AddRemoveTransientForsTest {\n+\n+    private static Dialog d1;\n+    private static Dialog d2;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                When the test starts, a frame is shown with a button 'Show Dialog D1'.\n+\n+                1. Press the button 'Show Dialog D1' to show a modal dialog D1 with a button\n+                'Show dialog D2'.\n+\n+                2. Press the button 'Show dialog D2' to show another modal dialog D2 with a button\n+                'Close'.\n+\n+                3. Press the button 'Close' to close dialog D2.\n+\n+                4. Repeat steps 2 and 3 several times (at least 3-4 times).\n+\n+                If the application is not hung, press Pass.\n+\n+                NOTE: all the modal dialogs must be closed before pressing Pass button.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(AddRemoveTransientForsTest::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame init() {\n+        Frame f = new Frame(\"AddRemoveTransientForsTest Frame\");\n+        Button b = new Button(\"Show dialog D1\");\n+        b.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                d1.setVisible(true);\n+            }\n+        });\n+        f.add(b);\n+        f.setSize(200, 100);\n+\n+        WindowListener wl = new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e)\n+            {\n+                e.getWindow().dispose();\n+            }\n+        };\n+\n+        d1 = new Dialog(f, \"D1\", true);\n+        d1.setBounds(200, 200, 200, 100);\n+        d1.addWindowListener(wl);\n+        Button b1 = new Button(\"Show dialog D2\");\n+        b1.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                d2.setVisible(true);\n+            }\n+        });\n+        d1.add(b1);\n+\n+        d2 = new Dialog(d1, \"D2\", true);\n+        d2.setBounds(300, 300, 200, 100);\n+        Button b2 = new Button(\"Close\");\n+        b2.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                d2.setVisible(false);\n+            }\n+        });\n+        d2.add(b2);\n+\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/AddRemoveTransientForsTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+\n+\/*\n+ * @test\n+ * @bug 6278150\n+ * @key headful\n+ * @summary Initially modal blocked window causes modal dialog to lose focus\n+ * @run main DialogLosesFocusTest\n+ *\/\n+\n+public class DialogLosesFocusTest {\n+    private static Frame parent;\n+    private static Dialog dialog;\n+    private static Frame blocked;\n+    private static volatile boolean failed;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            createAndShowUI();\n+\n+            sleepForMsecs(10000);\n+\n+            if (failed) {\n+               throw new RuntimeException(\"Test Failed\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (parent != null) {\n+                    parent.dispose();\n+                }\n+                if (dialog != null) {\n+                    dialog.dispose();\n+                }\n+                if (blocked != null) {\n+                    blocked.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createAndShowUI() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            parent = new Frame(\"Parent frame\");\n+            parent.setBounds(0, 0, 300, 100);\n+            parent.setVisible(true);\n+        });\n+\n+        sleepForMsecs(1000);\n+\n+        EventQueue.invokeLater(() -> {\n+            dialog = new Dialog(parent, \"Modal dialog\", Dialog.ModalityType.APPLICATION_MODAL);\n+            dialog.setBounds(100, 120, 300, 100);\n+            dialog.setVisible(true);\n+        });\n+\n+        sleepForMsecs(1000);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            blocked = new Frame(\"Blocked frame\");\n+            blocked.setBounds(200, 240, 300, 100);\n+            blocked.addWindowListener(new WindowAdapter() {\n+                @Override\n+                public void windowActivated(WindowEvent we) {\n+                    if (dialog.isVisible()) {\n+                        failed = true;\n+                    }\n+                }\n+            });\n+            blocked.setVisible(true);\n+        });\n+    }\n+\n+    private static void sleepForMsecs(int t) {\n+        try {\n+            Thread.sleep(t);\n+        } catch (Exception z) {}\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/DialogLosesFocusTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.util.List;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n+ * @test\n+ * @bug 6393608\n+ * @summary Tests that toBack\/toFront methods works correctly for native dialogs\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NativeDialogToFrontBackTest\n+ *\/\n+\n+public class NativeDialogToFrontBackTest {\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                When the test starts two frames appear: 'Control' and 'Blocked'\n+                    1. Click on the 'Show file dialog' button\n+                    2. Drag the file dialog so it partially overlaps the 'Blocked' frame\n+                    3. 'Blocked' frame must be below the file dialog, if not - press Fail\n+                    3. Click on the 'Blocked to front' button\n+                    4. 'Blocked' frame must still be below the file dialog, if not - press Fail\n+                    5. Close the file dialog\n+                    6. Repeat steps 2 to 4 with print and page dialogs using the corresponding button\n+                    7. If 'Blocked' frame is always below File\/Print\/Page dialog, press Pass\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(NativeDialogToFrontBackTest::init)\n+                .positionTestUI(WindowLayouts::rightOneColumn)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static List<Frame> init() {\n+        Frame blocked = new Frame(\"Blocked\");\n+        blocked.setSize(200, 200);\n+\n+        Frame control = new Frame(\"Control\");\n+        control.setModalExclusionType(Dialog.ModalExclusionType.APPLICATION_EXCLUDE);\n+        control.setLayout(new FlowLayout());\n+\n+        Button showFileDialog = new Button(\"Show file dialog\");\n+        showFileDialog.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                new FileDialog(control, \"File dialog\").setVisible(true);\n+            }\n+        });\n+        control.add(showFileDialog);\n+\n+        Button showPrintDialog = new Button(\"Show print dialog\");\n+        showPrintDialog.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                PrinterJob.getPrinterJob().printDialog();\n+            }\n+        });\n+        control.add(showPrintDialog);\n+\n+        Button showPageDialog = new Button(\"Show page dialog\");\n+        showPageDialog.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                PrinterJob.getPrinterJob().pageDialog(new PageFormat());\n+            }\n+        });\n+        control.add(showPageDialog);\n+\n+        Button blockedToFront = new Button(\"Blocked to front\");\n+        blockedToFront.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e)\n+            {\n+                blocked.toFront();\n+            }\n+        });\n+        control.add(blockedToFront);\n+\n+        control.setSize(200, 200);\n+        return List.of(control, blocked);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/NativeDialogToFrontBackTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}