{"files":[{"patch":"@@ -103,1 +103,1 @@\n-      jcc_size += mach->size(regalloc);\n+      jcc_size += next->size(regalloc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_intelJccErratum_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3001,0 +3001,1 @@\n+    print_method(PHASE_FINAL_CODE, 1); \/\/ Compile::_output is not null here\n@@ -3003,2 +3004,0 @@\n-  print_method(PHASE_FINAL_CODE, 1);\n-\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8309978\n+ * @summary [x64] Fix useless padding\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.simpleArch == \"x64\")\n+ * @run driver compiler.c2.irTests.TestPadding\n+ *\/\n+\n+public class TestPadding {\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:+IntelJccErratumMitigation\");\n+    }\n+\n+    @Run(test = \"test\")\n+    public static void test_runner() {\n+        test(42);\n+        tpf.b1++; \/\/ to take both branches in test()\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.NOP, \"1\" })\n+    static int test(int i) {\n+        TestPadding tp = tpf;\n+        if (tp.b1 > 42) { \/\/ Big 'cmpb' instruction at offset 0x30\n+          tp.i1 = i;\n+        }\n+        return i;\n+    }\n+\n+    static TestPadding t1;\n+    static TestPadding t2;\n+    static TestPadding t3;\n+    static TestPadding t4;\n+\n+    static TestPadding tpf = new TestPadding(); \/\/ Static field offset > 128\n+\n+    int i1;\n+\n+    long l1;\n+    long l2;\n+    long l3;\n+    long l4;\n+    long l5;\n+    long l6;\n+    long l7;\n+    long l8;\n+    long l9;\n+    long l10;\n+    long l11;\n+    long l12;\n+    long l13;\n+    long l14;\n+    long l15;\n+    long l16;\n+\n+    byte b1 = 1; \/\/ Field offset > 128\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestPadding.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -1005,0 +1005,5 @@\n+    public static final String NOP = PREFIX + \"NOP\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(NOP, \"Nop\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}