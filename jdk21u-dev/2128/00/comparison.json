{"files":[{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4174399\n+ * @summary Check that modifier values are set on a KeyPressed event\n+ *          when a modifier key is pressed.\n+ * @key headful\n+ * @run main KeyPressedModifiers\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class KeyPressedModifiers extends Frame implements KeyListener {\n+    static AtomicBoolean shiftDown = new AtomicBoolean(false);\n+    static AtomicBoolean controlDown = new AtomicBoolean(false);\n+    static AtomicBoolean altDown = new AtomicBoolean(false);\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        KeyPressedModifiers test = new KeyPressedModifiers();\n+        try {\n+            EventQueue.invokeAndWait(test::initUI);\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.delay(500);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.delay(500);\n+            robot.waitForIdle();\n+            if (!shiftDown.get() || !controlDown.get() || !altDown.get()) {\n+                String error = \"Following key modifiers were not registered:\" +\n+                        (shiftDown.get() ? \"\" : \" SHIFT\") +\n+                        (controlDown.get() ? \"\" : \" CONTROL\") +\n+                        (altDown.get() ? \"\" : \" ALT\");\n+                throw new RuntimeException(error);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+\n+    public void initUI() {\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        setSize(350, 100);\n+        setVisible(true);\n+        tf.requestFocus();\n+    }\n+\n+    public void keyTyped(KeyEvent ignore) {\n+    }\n+\n+    public void keyReleased(KeyEvent ignore) {\n+    }\n+\n+    public void keyPressed(KeyEvent e) {\n+        System.out.println(e);\n+        switch (e.getKeyCode()) {\n+            case KeyEvent.VK_SHIFT:\n+                shiftDown.set(e.isShiftDown());\n+                break;\n+            case KeyEvent.VK_CONTROL:\n+                controlDown.set(e.isControlDown());\n+                break;\n+            case KeyEvent.VK_ALT:\n+                altDown.set(e.isAltDown());\n+                break;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyPressedModifiers.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4151419 4090870 4169733\n+ * @summary Ensures that KeyEvent has right results for the following\n+ *          keys  -=\\[];,.\/\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual KeyTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class KeyTest extends Frame implements KeyListener {\n+\n+    static String INSTRUCTIONS = \"\"\"\n+           Click on the text field in window named \"Check KeyChar values\"\n+           Type the following keys\/characters in the TextField:\n+           - = \\\\ [ ] ; , . \/\n+           Verify that the keyChar and keyCode is correct for each key pressed.\n+           Remember that the keyCode for the KEY_TYPED event should be zero.\n+           Also verify that the character you typed appears in the TextField.\n+\n+           Key    Name        keyChar    Keycode\n+           -------------------------------------\n+            -     Minus        -  45        45\n+            =     Equals       =  61        61\n+            \\\\    Slash        \\\\   92        92\n+            [     Left Brace   [  91        91\n+            ]     Right Brace  ]  93        93\n+            ;     Semicolon    ;  59        59\n+            ,     Comma        ,  44        44\n+            .     Period       .  46        46\n+            \/     Front Slash  \/  47        47\n+           \"\"\";\n+    public KeyTest() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        pack();\n+\n+    }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    protected void printKey(KeyEvent evt) {\n+        if (evt.isActionKey()) {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar:  \" +\n+                    (int) evt.getKeyChar() + \"   Action Key\");\n+        } else {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar:  \" +\n+                    (int) evt.getKeyChar());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"KeyTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .logArea(20)\n+                .testUI(KeyTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}