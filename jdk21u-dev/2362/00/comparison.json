{"files":[{"patch":"@@ -125,1 +125,5 @@\n-            return isPosixSystemStream(stream) || isWindowsSystemStream(stream);\n+            if (OSUtils.IS_WINDOWS && (!OSUtils.IS_CYGWIN && !OSUtils.IS_MSYSTEM)) {\n+                return isWindowsSystemStream(stream);\n+            } else {\n+                return isPosixSystemStream(stream) || isWindowsSystemStream(stream);\n+            }\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/exec\/ExecTerminalProvider.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,0 +58,13 @@\n+    private static String cygPathToWinPath(String cygPath) {\n+        try {\n+            Process p = new ProcessBuilder(\"cygpath\", \"-w\", cygPath).start();\n+            String result = ExecHelper.waitAndCapture(p);\n+            if (p.exitValue() == 0) {\n+                return result.trim();\n+            }\n+        } catch (Throwable t) {\n+            \/\/ ignore\n+        }\n+        return null;\n+    }\n+\n@@ -66,1 +79,7 @@\n-        String path = System.getenv(\"PATH\");\n+        String path = null;\n+        if (cygwinOrMsys) {\n+            path = cygPathToWinPath(\"\/usr\/bin\") + File.pathSeparator + cygPathToWinPath(\"\/bin\");\n+        } else {\n+            path = \"\/usr\/bin\" + File.pathSeparator + \"\/bin\";\/\/was: System.getenv(\"PATH\");\n+        }\n+\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/utils\/OSUtils.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.internal.org.jline.terminal.TerminalBuilder;\n+import jdk.internal.org.jline.utils.ExecHelper;\n+import jdk.internal.org.jline.utils.OSUtils;\n+import jdk.jfr.consumer.RecordingStream;\n+\n+import toolbox.ToolBox;\n+\n+public class TerminalExecTest {\n+\n+    public static void main(String... args) throws Exception {\n+        if (args.length > 0) {\n+            List<String> commands = new ArrayList<>();\n+            try (var rs = new RecordingStream()) {\n+                rs.enable(\"jdk.ProcessStart\").withoutThreshold();\n+                rs.onEvent(evt -> {\n+                    System.out.println(\"evt: \" + evt);\n+                    commands.add(evt.getValue(\"command\"));\n+                });\n+                rs.startAsync();\n+                TerminalBuilder.terminal();\n+                rs.stop();\n+            }\n+\n+            String cygwinRootPathRegex = null;\n+            if (OSUtils.IS_CYGWIN || OSUtils.IS_MSYSTEM) {\n+                \/\/ remove cygpath command executed by OSUtils.cygPathToWinPath()\n+                commands.removeIf(cmd -> cmd.contains(\"cygpath\"));\n+\n+                Process p = new ProcessBuilder(\"cygpath\", \"-w\", \"\/\").start();\n+                cygwinRootPathRegex = ExecHelper.waitAndCapture(p).trim().replace(\"\\\\\", \"\\\\\\\\\");\n+                System.out.println(\"regular expression of Cygwin\/MSYS root path: \" + cygwinRootPathRegex);\n+            }\n+            \/\/ remove tty command executed by ExecTerminalProvider.systemStreamName()\n+            commands.removeIf(cmd -> cmd.contains(\"tty\"));\n+\n+            if (commands.isEmpty()) {\n+                System.err.println(\"No commands were found.\");\n+                System.exit(1);\n+            }\n+\n+            String expectedRegex;\n+            if (OSUtils.IS_CYGWIN) {\n+                expectedRegex = \"^(\" + cygwinRootPathRegex + \"\\\\\\\\usr\\\\\\\\bin|\" + cygwinRootPathRegex + \"\\\\\\\\bin)\\\\\\\\test\\\\.exe\";\n+            } else if (OSUtils.IS_MSYSTEM) {\n+                expectedRegex = \"^(\" + cygwinRootPathRegex + \"usr\\\\\\\\bin|\" + cygwinRootPathRegex + \"bin)\\\\\\\\test\\\\.exe\";\n+            } else {\n+                expectedRegex = \"^(\/usr\/bin|\/bin)\/test\";\n+            }\n+\n+            Pattern pattern = Pattern.compile(expectedRegex);\n+\n+            for (String cmd : commands) {\n+                Matcher matcher = pattern.matcher(cmd);\n+                if (!matcher.find()) {\n+                    System.err.println(\"Command did not match expected pattern.\");\n+                    System.err.println(\"  Expected Regex: \\\"\" + expectedRegex + \"\\\"\");\n+                    System.err.println(\"  Actual Command:   \\\"\" + cmd + \"\\\"\");\n+                    System.exit(1);\n+                }\n+            }\n+\n+            System.exit(0);\n+        } else {\n+            ToolBox tb = new ToolBox();\n+\n+            ProcessBuilder pb =\n+                new ProcessBuilder(tb.getJDKTool(\"java\").toString(),\n+                                   \"-classpath\", System.getProperty(\"java.class.path\"),\n+                                   \"--add-exports\",\n+                                   \"jdk.internal.le\/jdk.internal.org.jline.utils=ALL-UNNAMED\",\n+                                   \"--add-exports\",\n+                                   \"jdk.internal.le\/jdk.internal.org.jline.terminal=ALL-UNNAMED\",\n+                                   TerminalExecTest.class.getName(),\n+                                   \"run-test\")\n+                        .redirectError(ProcessBuilder.Redirect.INHERIT)\n+                        .redirectOutput(ProcessBuilder.Redirect.INHERIT);\n+\n+            String javaExe = ToolBox.isWindows() ? \"java.exe\" : \"java\";\n+            String testExe = ToolBox.isWindows() ? \"test.exe\" : \"test\";\n+\n+            tb.copyDir(Path.of(ToolBox.testJDK), Path.of(\"tmp\"));\n+            \/\/ copy java exe file as test exe file\n+            tb.moveFile(Path.of(\"tmp\", \"bin\", javaExe), Path.of(\"tmp\", \"bin\", testExe));\n+\n+            \/\/ add test exe file directory to PATH\n+            String currentPath = System.getenv(\"PATH\");\n+            String testExeDirPath = Path.of(\"tmp\", \"bin\").toAbsolutePath().toString();\n+            String newPath = testExeDirPath + File.pathSeparator + currentPath;\n+            Map<String, String> env = pb.environment();\n+            env.put(\"PATH\", newPath);\n+\n+            Process target = pb.start();\n+            target.waitFor();\n+\n+            delete(Path.of(\"tmp\").toFile());\n+\n+            int exitCode = target.exitValue();\n+            if (exitCode != 0) {\n+                throw new AssertionError(\"Incorrect exit value, expected 0, got: \" + exitCode);\n+            }\n+        }\n+    }\n+\n+    private static void delete(File f) {\n+        if (f != null && f.isDirectory()) {\n+            for (File c : f.listFiles())\n+                delete(c);\n+        }\n+        if (!f.delete()) {\n+            System.err.println(\"WARNING: unable to delete\/cleanup directory: \" + f);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/TerminalExecTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+#!\/bin\/sh\n+\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# @test\n+# @bug 8334433\n+# @summary Verify that unintended executable file 'test' is not executed\n+# @library \/tools\/lib\n+# @modules jdk.internal.le\/jdk.internal.org.jline.terminal\n+#          jdk.internal.le\/jdk.internal.org.jline.utils\n+# @build toolbox.ToolBox toolbox.JavaTask\n+# @compile TerminalExecTest.java\n+# @run shell TerminalExecTest.sh\n+\n+# In jtreg, environment variable PWD cannot be retrieved unless the test is run from a shell script.\n+# This causes the value of IS_CYGWIN in OSUtils to be set incorrectly. So run the tests from this shell script.\n+\n+case `uname -s` in\n+  MSYS*)\n+    # When running tests using jtreg, the environment variables MSYSTEM is not available,\n+    # so set it here to allow OSUtils to set IS_MSYSTEM correctly.\n+    if [ -z \"$MSYSTEM\" ]; then\n+      export MSYSTEM=\"MSYS\"\n+    fi\n+    ;;\n+esac\n+\n+${TESTJAVA}\/bin\/java ${TESTVMOPTS} -Dtest.jdk=${TESTJAVA} -classpath ${TESTCLASSPATH} TerminalExecTest\n+if [ $? != 0 ]\n+then\n+  echo \"Unintended executable file is executed. Failed.\"\n+  exit 1\n+fi\n+\n+exit 0\n","filename":"test\/langtools\/jdk\/jshell\/TerminalExecTest.sh","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}