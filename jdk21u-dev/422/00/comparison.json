{"files":[{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4313887 6838333 7029979\n- * @summary Unit test for miscellenous java.nio.file.Path methods\n- * @library .. \/test\/lib\n- * @build jdk.test.lib.Platform\n- * @run main Misc\n- *\/\n-\n-import java.io.*;\n-import java.nio.file.*;\n-\n-import jdk.test.lib.Platform;\n-\n-public class Misc {\n-    public static void main(String[] args) throws IOException {\n-        Path dir = TestUtil.createTemporaryDirectory();\n-        try {\n-            \/\/ equals and hashCode methods\n-            testEqualsAndHashCode();\n-\n-            \/\/ toFile method\n-            testToFile(dir);\n-        } finally {\n-            TestUtil.removeAll(dir);\n-        }\n-    }\n-\n-    \/**\n-     * Exercise equals and hashCode methods\n-     *\/\n-    static void testEqualsAndHashCode() {\n-        Path thisFile = Paths.get(\"this\");\n-        Path thatFile = Paths.get(\"that\");\n-\n-        assertTrue(thisFile.equals(thisFile));\n-        assertTrue(!thisFile.equals(thatFile));\n-\n-        assertTrue(!thisFile.equals(null));\n-        assertTrue(!thisFile.equals(new Object()));\n-\n-        Path likeThis = Paths.get(\"This\");\n-        if (Platform.isWindows()) {\n-            \/\/ case insensitive\n-            assertTrue(thisFile.equals(likeThis));\n-            assertTrue(thisFile.hashCode() == likeThis.hashCode());\n-        } else {\n-            \/\/ case senstive\n-            assertTrue(!thisFile.equals(likeThis));\n-        }\n-    }\n-\n-    \/**\n-     * Exercise toFile method\n-     *\/\n-    static void testToFile(Path dir) throws IOException {\n-        File d = dir.toFile();\n-        assertTrue(d.toString().equals(dir.toString()));\n-        assertTrue(d.toPath().equals(dir));\n-    }\n-\n-    static void assertTrue(boolean okay) {\n-        if (!okay)\n-            throw new RuntimeException(\"Assertion Failed\");\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/file\/Path\/Misc.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -25,1 +25,2 @@\n- * @bug 4313887 6838333 6925932 7006126 8037945 8072495 8140449 8254876 8298478\n+ * @bug 4313887 6838333 6925932 7006126 7029979 8037945 8072495 8140449\n+ * 8254876 8298478\n@@ -27,0 +28,3 @@\n+ * @library .. \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main PathOps\n@@ -29,0 +33,1 @@\n+import java.io.File;\n@@ -34,0 +39,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -220,0 +227,28 @@\n+    PathOps equals(String other) {\n+        out.format(\"test equals %s\\n\", other);\n+        checkPath();\n+\n+        Path that = Path.of(other);\n+        check(that, path.toString());\n+        check(path.hashCode() == that.hashCode(), true);\n+\n+        return this;\n+    }\n+\n+    PathOps notEquals(Object other) {\n+        out.format(\"test not equals %s\\n\", other);\n+        checkPath();\n+        check(path.equals(other), false);\n+\n+        return this;\n+    }\n+\n+    PathOps toFile() {\n+        out.println(\"check toFile\");\n+        checkPath();\n+        File file = path.toFile();\n+        check(file.toString(), path.toString());\n+        check(file.toPath().equals(path), true);\n+        return this;\n+    }\n+\n@@ -1396,0 +1431,12 @@\n+        \/\/ equals\n+        test(\"this\")\n+            .equals(\"this\")\n+            .notEquals(Path.of(\"that\"))\n+            .notEquals(null)\n+            .notEquals(new Object())\n+            .equals(Path.of(\"This\"));\n+\n+        \/\/ toFile\n+        test(\"C:\\\\foo\\\\bar\\\\gus\")\n+            .toFile();\n+\n@@ -2048,0 +2095,12 @@\n+        \/\/ equals\n+        test(\"this\")\n+            .equals(\"this\")\n+            .notEquals(Path.of(\"that\"))\n+            .notEquals(null)\n+            .notEquals(new Object())\n+            .notEquals(Path.of(\"This\"));\n+\n+        \/\/ toFile\n+        test(\"\/foo\/bar\/gus\")\n+            .toFile();\n+\n@@ -2125,1 +2184,1 @@\n-        if (osname.startsWith(\"Windows\")) {\n+        if (Platform.isWindows()) {\n","filename":"test\/jdk\/java\/nio\/file\/Path\/PathOps.java","additions":61,"deletions":2,"binary":false,"changes":63,"status":"modified"}]}