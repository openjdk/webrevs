{"files":[{"patch":"@@ -826,0 +826,2 @@\n+java\/awt\/TextComponent\/CorrectTextComponentSelectionTest.java 8237220 macosx-all\n+java\/awt\/TextComponent\/SelectionAndCaretColor.java 7017622 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4737679 4623376 4501485 4740906 4708221\n+ * @requires (os.family == \"windows\")\n+ * @summary Alt+Left\/right\/up\/down generate characters in JTextArea\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AltPlusNumberKeyCombinationsTest\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+\n+public class AltPlusNumberKeyCombinationsTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                [WINDOWS PLATFORM ONLY]\n+                Please do the following steps for both TextField and TextArea:\n+                1. Hold down ALT and press a NON-NUMPAD right arrow, then release\n+                   ALT key. If any symbol is typed the test failed.\n+                2. Hold down ALT and press one after another the following\n+                   NUMPAD keys: 0, 1, 2, 8. Release ALT key. If the Euro symbol\n+                   is not typed the test failed\n+                3. Hold down ALT and press one after another the following\n+                   NUMPAD keys: 0, 2, 2, 7. Release ALT key. If nothing or\n+                   the blank symbol is typed the test failed\n+                 If all the steps are done successfully the test PASSed,\n+                 else test FAILS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame f = new Frame(\"key combination test\");\n+        f.setLayout(new FlowLayout());\n+        TextField tf = new TextField(\"TextField\");\n+        f.add(tf);\n+        TextArea ta = new TextArea(\"TextArea\");\n+        f.add(ta);\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/AltPlusNumberKeyCombinationsTest.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5100806\n+ * @summary TextArea.select(0,0) does not de-select the selected text properly\n+ * @key headful\n+ * @run main CorrectTextComponentSelectionTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextComponent;\n+import java.awt.TextField;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class CorrectTextComponentSelectionTest {\n+    static TextField tf = new TextField(\"TextField\");\n+    static TextArea ta = new TextArea(\"TextArea\");\n+    static Robot r;\n+    static Frame frame;\n+    static volatile Color color_center;\n+    static volatile Point loc;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            r = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                initialize();\n+            });\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            test(tf);\n+            test(ta);\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void initialize() {\n+        frame = new Frame(\"TextComponent Selection Test\");\n+        frame.setLayout(new BorderLayout());\n+\n+        \/\/ We should place to the text components the long strings in order to\n+        \/\/ cover the components by the selection completely\n+        String sf = \"\";\n+        for (int i = 0; i < 50; i++) {\n+            sf = sf + \" \";\n+        }\n+        tf.setText(sf);\n+        \/\/ We check the color of the text component in order to find out the\n+        \/\/ bug reproducible situation\n+        tf.setForeground(Color.WHITE);\n+        tf.setBackground(Color.WHITE);\n+\n+        String sa = \"\";\n+        for (int i = 0; i < 50; i++) {\n+            for (int j = 0; j < 50; j++) {\n+                sa = sa + \" \";\n+            }\n+            sa = sa + \"\\n\";\n+        }\n+        ta.setText(sa);\n+        ta.setForeground(Color.WHITE);\n+        ta.setBackground(Color.WHITE);\n+\n+        frame.add(tf, \"North\");\n+        frame.add(ta, \"South\");\n+        frame.setSize(200, 200);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void test(TextComponent tc) throws Exception {\n+        if (tc instanceof TextField) {\n+            System.out.println(\"TextField testing ...\");\n+        } else if (tc instanceof TextArea) {\n+            System.out.println(\"TextArea testing ...\");\n+        }\n+\n+        r.waitForIdle();\n+        r.delay(100);\n+        EventQueue.invokeAndWait(() -> {\n+            tc.requestFocus();\n+            tc.selectAll();\n+            tc.select(0, 0);\n+        });\n+\n+        r.waitForIdle();\n+        r.delay(100);\n+        EventQueue.invokeAndWait(() -> {\n+            loc = tc.getLocationOnScreen();\n+        });\n+        r.waitForIdle();\n+        r.delay(100);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            color_center = r.getPixelColor(loc.x + tc.getWidth() \/ 2, loc.y + tc.getHeight() \/ 2);\n+        });\n+\n+        System.out.println(\"Color of the text component (CENTER) =\" + color_center);\n+        System.out.println(\"White color=\" + Color.WHITE);\n+\n+        if (color_center.getRGB() != Color.WHITE.getRGB()) {\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/CorrectTextComponentSelectionTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6287895\n+ * @requires (os.family == \"linux\")\n+ * @summary Test cursor and selected text incorrectly colored in TextField\n+ * @key headful\n+ * @run main SelectionAndCaretColor\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextComponent;\n+import java.awt.TextField;\n+import java.awt.image.BufferedImage;\n+\n+public class SelectionAndCaretColor {\n+    static TextField tf = new TextField(20);\n+    static TextArea ta = new TextArea(\"\", 1, 20, TextArea.SCROLLBARS_NONE);\n+    static Robot r;\n+    static Frame frame;\n+    static volatile int flips;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            frame = new Frame(\"Selection and Caret color test\");\n+            r = new Robot();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                frame.setLayout(new BorderLayout());\n+                tf.setFont(new Font(\"Monospaced\", Font.PLAIN, 15));\n+                ta.setFont(new Font(\"Monospaced\", Font.PLAIN, 15));\n+\n+                frame.add(tf, BorderLayout.NORTH);\n+                frame.add(ta, BorderLayout.SOUTH);\n+                frame.setSize(200, 200);\n+                frame.setVisible(true);\n+            });\n+            r.waitForIdle();\n+            r.delay(1000);\n+            test(tf);\n+            test(ta);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static int countFlips(TextComponent tc) {\n+        int y = tc.getLocationOnScreen().y + tc.getHeight() \/ 2;\n+        int x1 = tc.getLocationOnScreen().x + 5;\n+        int x2 = tc.getLocationOnScreen().x + tc.getWidth() - 5;\n+\n+        int[] fb = {tc.getBackground().getRGB(), tc.getForeground().getRGB()};\n+        int i = 0;\n+        int flips = 0;\n+\n+        BufferedImage img = r.createScreenCapture(new Rectangle(x1, y, x2 - x1, 1));\n+        for (int x = 0; x < x2 - x1; x++) {\n+            int c = img.getRGB(x, 0);\n+            if (c == fb[i]) {\n+                ;\n+            } else if (c == fb[1 - i]) {\n+                flips++;\n+                i = 1 - i;\n+            } else {\n+                throw new RuntimeException(\"Invalid color detected: \" +\n+                        Integer.toString(c, 16) + \" instead of \" +\n+                        Integer.toString(fb[i], 16));\n+            }\n+        }\n+        return flips;\n+    }\n+\n+    private static void test(TextComponent tc) throws Exception {\n+        if (tc instanceof TextField) {\n+            System.out.println(\"TextField testing ...\");\n+        } else if (tc instanceof TextArea) {\n+            System.out.println(\"TextArea testing ...\");\n+        }\n+\n+        \/\/ now passing along the component's vertical center,\n+        \/\/ skipping 5px from both sides,\n+        \/\/ we should see bg - textcolor - bg - selcolor -\n+        \/\/ seltextcolor - selcolor - bg\n+        \/\/ that is bg-fg-bg-fg-bg-fg-bg, 6 flips\n+\n+        EventQueue.invokeAndWait(() -> {\n+            tc.setForeground(Color.green);\n+            tc.setBackground(Color.magenta);\n+\n+            tc.setText(\"  I    I    \");\n+            tc.select(5, 10);\n+            tc.requestFocus();\n+        });\n+        r.waitForIdle();\n+        r.delay(200);\n+        EventQueue.invokeAndWait(() -> {\n+            flips = countFlips(tc);\n+        });\n+        if (flips != 6) {\n+            throw new RuntimeException(\"Invalid number of flips: \"\n+                    + flips + \" instead of 6\");\n+        }\n+        EventQueue.invokeAndWait(() -> {\n+            \/\/ same for caret: spaces in the tc, caret in the middle\n+            \/\/ bg-fg-bg - 2 flips\n+\n+            tc.select(0, 0);\n+            tc.setText(\"            \");\n+            tc.setCaretPosition(5);\n+        });\n+        r.waitForIdle();\n+        r.delay(200);\n+\n+        for (int i = 0; i < 10; i++) {\n+            EventQueue.invokeAndWait(() -> {\n+                flips = countFlips(tc);\n+            });\n+\n+            if (flips == 2) {\n+                break;\n+            }\n+            if (flips == 0) {\n+                continue;\n+            }\n+            throw new RuntimeException(\"Invalid number of flips: \"\n+                    + flips + \" instead of 2\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/SelectionAndCaretColor.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4056231\n+ * @summary Checks that TextComponents don't grab the global CDE selection\n+ *  upon construction if their own selection is null.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SelectionTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class SelectionTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. \"Select some text in another window, then click the button.\",\n+                2. \"If the text in the other window is de-selected, the test FAILS.\",\n+                   \"If the text remains selected, the test PASSES.\"\n+                    \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Selection Test\");\n+        frame.setLayout(new BorderLayout());\n+        Button b = new Button(\"Select some text in another window, then\" +\n+                \" click me\");\n+        b.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                frame.add(new TextField(\"text field test\"));\n+                frame.add(new TextArea(\"text area test\"));\n+            }\n+        });\n+        frame.add(b);\n+        frame.setSize(400, 400);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/SelectionTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}