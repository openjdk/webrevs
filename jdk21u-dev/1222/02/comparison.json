{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,1 +168,7 @@\n-    extra_save_slots_per_neon_register = slots_per_neon_register - save_slots_per_register\n+    extra_save_slots_per_neon_register = slots_per_neon_register - save_slots_per_register,\n+    neon_vl = 16,\n+    \/\/ VLmax: The maximum sve vector length is determined by the hardware\n+    \/\/ sve_vl_min <= VLmax <= sve_vl_max.\n+    sve_vl_min = 16,\n+    \/\/ Maximum supported vector length across all CPUs\n+    sve_vl_max = 256\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"register_aarch64.hpp\"\n@@ -443,1 +444,13 @@\n-    _initial_sve_vector_length = get_current_sve_vector_length();\n+    int vl = get_current_sve_vector_length();\n+    if (vl < 0) {\n+      warning(\"Unable to get SVE vector length on this system. \"\n+              \"Disabling SVE. Specify -XX:UseSVE=0 to shun this warning.\");\n+      FLAG_SET_DEFAULT(UseSVE, 0);\n+    } else if ((vl == 0) || ((vl % FloatRegister::sve_vl_min) != 0) || !is_power_of_2(vl)) {\n+      warning(\"Detected SVE vector length (%d) should be a power of two and a multiple of %d. \"\n+              \"Disabling SVE. Specify -XX:UseSVE=0 to shun this warning.\",\n+              vl, FloatRegister::sve_vl_min);\n+      FLAG_SET_DEFAULT(UseSVE, 0);\n+    } else {\n+      _initial_sve_vector_length = vl;\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"}]}