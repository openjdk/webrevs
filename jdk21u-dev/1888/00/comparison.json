{"files":[{"patch":"@@ -1,44 +0,0 @@\n-<!--\n- Copyright (c) 2001, 2015, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-\n-<html>\n-<!--\n-  @test\n-  @summary   JToolTip is shown improperly when placed very close to screen boundaries\n-  @bug 4644444 8076246\n-  @author Xhipra Tyagi(xhipra.tyagi@india.sun.com) area=Swing\n-  @run applet\/manual=done bug4644444.html\n-  -->\n-<head>\n-<title> bug4644444 <\/title>\n-<\/head>\n-<body>\n-\n-<h1>bug4644444<br>Bug ID: 4644444 <\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"bug4644444.class\" WIDTH=50 HEIGHT=40><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/4644444\/bug4644444.html","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,354 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.*;\n-import javax.swing.*;\n-import java.awt.event.*;\n-\n-\/*\n- * test\n- * @bug  4644444 8076246\n-*\/\n-\n-public class bug4644444 extends JApplet {\n-\n-        JPanel panel;\n-        JButton button;\n-\n-        public bug4644444() throws Exception {\n-            java.awt.EventQueue.invokeLater( () -> {\n-                panel = new JPanel();\n-                button = new JButton(\"whooo\");\n-                button.setToolTipText(\"Somthing really long 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\");\n-                panel.add(button);\n-                getContentPane().add(panel);\n-            });\n-    }\n-\n-    public void init() {\n-                String[][] instructionsSet =\n-                {\n-                        {\n-                                \" Note : Incase of Assertion failure,user can enter\",\n-                                \" remarks by pressing 'Assertion Fail Remarks ' button\",\n-                                \" \",\n-                                \" You would see a testframe with a Button\",\n-                        \" \",\n-                                \" ON ALL PLATFORMS\",\n-                        \"1. Move the mouse on the button, \",\n-                        \"   so that the tooltip attached to it comes up \",\n-                        \"2. Tool tip should get adjusted it-self to show \",\n-                        \"       its full length of text. \",\n-                        \"3. If tooltip  text gets cut, \",\n-                        \"   press 'Assertion Fail' else press 'Assertion Pass'\",\n-                        \"4. Similarly, move the applet to different locations of the screen, \",\n-                        \"   & see if tooltip works properly everywhere. \"\n-                        }\n-                };\n-\n-                String[] exceptionsSet =\n-                {\n-                        \"JToolTip is shown partially when placed very close to screen boundaries\",\n-                };\n-\n-                Sysout.setInstructionsWithExceptions(instructionsSet,exceptionsSet);\n-\n-        }\n-\n-        public void start (){}\n-\n-        public void destroy(){\n-            if(Sysout.failStatus())    {\n-                String failMsg = Sysout.getFailureMessages();\n-                failMsg = failMsg.replace('\\n',' ');\n-                throw new RuntimeException(failMsg);\n-            }\/\/ End destroy\n-        }\n-}\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-   public static void setInstructionsWithExceptions(String instructionsSet[][],\n-                                                    String exceptionsSet[]) {\n-       createDialogWithInstructions(instructionsSet[0]);\n-       dialog.setInstructions(instructionsSet);\n-       dialog.setExceptionMessages(exceptionsSet);\n-   }\n-\n-   public static String getFailureMessages()   {\n-       return dialog.failureMessages;\n-   }\n-\n-   public static boolean failStatus()  {\n-       return dialog.failStatus;\n-   }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 70;\n-\n-   Panel assertPanel;\n-   Button assertPass,assertFail,remarks;\n-   HandleAssert handleAssert;\n-   boolean failStatus=false;\n-   int instructionCounter=0;\n-   String instructions[][];\n-   int exceptionCounter=0;\n-   String exceptionMessages[];\n-   String failureMessages=\"<br>\";\n-   String remarksMessage=null;\n-   RemarksDialog remarksDialog;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 14, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 3, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      assertPanel = new Panel(new FlowLayout());\n-      assertPass=new Button(\"Assertion Pass\");\n-      assertPass.setName(\"Assertion Pass\");\n-      assertFail=new Button(\"Assertion Fail\");\n-      assertFail.setName(\"Assertion Fail\");\n-      remarks = new Button(\"Assertion Fail Remarks\");\n-      remarks.setEnabled(false);\n-      remarks.setName(\"Assertion Remarks\");\n-      assertPanel.add(assertPass);\n-      assertPanel.add(assertFail);\n-      assertPanel.add(remarks);\n-      handleAssert = new HandleAssert();\n-      assertPass.addActionListener(handleAssert);\n-      assertFail.addActionListener(handleAssert);\n-      remarks.addActionListener(handleAssert);\n-      add(\"South\",assertPanel);\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-     \/\/chop up each into pieces maxSringLength long\n-     remainingStr = instructions[ i ];\n-     while( remainingStr.length() > 0 )\n-      {\n-        \/\/if longer than max then chop off first max chars to print\n-        if( remainingStr.length() >= maxStringLength )\n-         {\n-           \/\/Try to chop on a word boundary\n-           int posOfSpace = remainingStr.\n-          lastIndexOf( ' ', maxStringLength - 1 );\n-\n-           if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-           printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-           remainingStr = remainingStr.substring( posOfSpace + 1 );\n-         }\n-        \/\/else just print\n-        else\n-         {\n-           printStr = remainingStr;\n-           remainingStr = \"\";\n-         }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-      }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n-   public void emptyMessage()   {\n-       messageText.setText(\"\");\n-   }\n-\n-   public void setInstructions(String insStr[][])    {\n-       instructions=insStr;\n-   }\n-\n-   public void setExceptionMessages(String exceptionMessages[])   {\n-       this.exceptionMessages=exceptionMessages;\n-   }\n-\n-   class HandleAssert implements ActionListener   {\n-        public void actionPerformed(ActionEvent ae)    {\n-           if(ae.getSource()==remarks)  {\n-               remarksDialog = new RemarksDialog(TestDialog.this,\n-                                        \"Assertion Remarks Dialog\",true);\n-               remarks.setEnabled(false);\n-               if(remarksMessage!=null)\n-                    failureMessages+=\". User Remarks : \"+remarksMessage;\n-           }\n-           else {\n-               if(instructionCounter<instructions.length-1) {\n-                   emptyMessage();\n-                   instructionCounter++;\n-                   printInstructions(instructions[instructionCounter]);\n-               }\n-               else {\n-                   emptyMessage();\n-                   displayMessage(\"Testcase Completed\");\n-                   displayMessage(\"Press 'Done' button in the \"+\n-                                                    \"BaseApplet to close\");\n-                   assertPass.setEnabled(false);\n-                   assertFail.setEnabled(false);\n-               }\n-\n-               if(ae.getSource()==assertPass)    {\n-                   \/\/ anything to be done in future\n-               }\n-               else if(ae.getSource()==assertFail)   {\n-                   remarks.setEnabled(true);\n-                   if(!failStatus)\n-                       failStatus=true;\n-                   if(exceptionCounter<exceptionMessages.length)   {\n-                        failureMessages = failureMessages + \"<br>\"+\n-                                    exceptionMessages[exceptionCounter];\n-                   }\n-               }\n-               exceptionCounter++;\n-           }\n-        }\n-    }\n-\n-    class RemarksDialog extends Dialog  implements ActionListener{\n-        Panel rootPanel,remarksPanel;\n-        TextArea textarea;\n-        Button addRemarks,cancelRemarks;\n-        public RemarksDialog(Dialog owner,String title,boolean modal)  {\n-            super(owner,title,modal);\n-            rootPanel = new Panel(new BorderLayout());\n-            remarksPanel = new Panel(new FlowLayout());\n-            textarea = new TextArea(5,30);\n-            addRemarks=new Button(\"Add Remarks\");\n-            addRemarks.addActionListener(this);\n-            cancelRemarks = new Button(\"Cancel Remarks\");\n-            cancelRemarks.addActionListener(this);\n-            remarksPanel.add(addRemarks);\n-            remarksPanel.add(cancelRemarks);\n-            rootPanel.add(textarea,\"Center\");\n-            rootPanel.add(remarksPanel,\"South\");\n-            add(rootPanel);\n-            setBounds(150,150,400,200);\n-            setVisible(true);\n-        }\n-\n-        public void actionPerformed(ActionEvent ae) {\n-            remarksMessage=null;\n-            if(ae.getSource()==addRemarks)  {\n-                String msg = textarea.getText().trim();\n-                if (msg.length()>0)\n-                    remarksMessage=msg;\n-            }\n-            dispose();\n-        }\n-\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/4644444\/bug4644444.java","additions":0,"deletions":354,"binary":false,"changes":354,"status":"deleted"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+\n+\/*\n+ * @test\n+ * @bug 4644444 8076246\n+ * @summary JToolTip is shown improperly when placed very close to screen boundaries\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4644444\n+ *\/\n+\n+public class bug4644444 {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        1. Move the mouse on the button, so that the tooltip is visible.\n+        2. Tooltip should get adjusted itself to show its full length of text.\n+        3. Similarly, move the frame to different locations of the screen\n+            & see if tooltip works properly everywhere.\n+        4. Press 'Pass' if tooltip text is fully visible else press 'Fail'. \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"JToolTip Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(bug4644444::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createUI() {\n+        JFrame frame = new JFrame(\"bug4644444\");\n+        JButton button = new JButton(\"Button\");\n+        button.setToolTipText(\"Something really long 1234567890 1234567890 \" +\n+                \"1234567890 1234567890 1234567890 1234567890 1234567890 1234567890\");\n+        frame.getContentPane().add(button);\n+        frame.setSize(200, 80);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/bug4644444.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}