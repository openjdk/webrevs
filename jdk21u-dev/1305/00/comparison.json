{"files":[{"patch":"@@ -39,0 +39,2 @@\n+using testing::HasSubstr;\n+\n@@ -74,2 +76,2 @@\n-  EXPECT_PRED2(string_contains_substring, description, StdoutLog->name());\n-  EXPECT_PRED2(string_contains_substring, description, StderrLog->name());\n+  EXPECT_THAT(description, HasSubstr(StdoutLog->name()));\n+  EXPECT_THAT(description, HasSubstr(StderrLog->name()));\n@@ -79,1 +81,1 @@\n-    EXPECT_PRED2(string_contains_substring, description, LogTag::name(static_cast<LogTagType>(i)));\n+    EXPECT_THAT(description, HasSubstr(LogTag::name(static_cast<LogTagType>(i))));\n@@ -82,1 +84,1 @@\n-    EXPECT_PRED2(string_contains_substring, description, LogLevel::name(static_cast<LogLevelType>(i)));\n+    EXPECT_THAT(description, HasSubstr(LogLevel::name(static_cast<LogLevelType>(i))));\n@@ -85,1 +87,1 @@\n-    EXPECT_PRED2(string_contains_substring, description, LogDecorators::name(static_cast<LogDecorators::Decorator>(i)));\n+    EXPECT_THAT(description, HasSubstr(LogDecorators::name(static_cast<LogDecorators::Decorator>(i))));\n@@ -92,2 +94,2 @@\n-  EXPECT_PRED2(string_contains_substring, description, expected_buf);\n-  EXPECT_PRED2(string_contains_substring, description, \"#1: stderr all=off\");\n+  EXPECT_THAT(description, HasSubstr(expected_buf));\n+  EXPECT_THAT(description, HasSubstr(\"#1: stderr all=off\"));\n@@ -110,1 +112,1 @@\n-  EXPECT_PRED2(string_contains_substring, description, expected_buf);\n+  EXPECT_THAT(description, HasSubstr(expected_buf));\n@@ -496,2 +498,2 @@\n-  EXPECT_TRUE(string_contains_substring(msg, \"No tag set matches selection:\"));\n-  EXPECT_TRUE(string_contains_substring(msg, invalid_tagset));\n+  EXPECT_THAT(msg, HasSubstr(\"No tag set matches selection:\"));\n+  EXPECT_THAT(msg, HasSubstr(invalid_tagset));\n@@ -562,1 +564,1 @@\n-  EXPECT_TRUE(string_contains_substring(ss.as_string(), \"Did you mean any of the following?\"));\n+  EXPECT_THAT(suggestion, HasSubstr(\"Did you mean any of the following?\"));\n","filename":"test\/hotspot\/gtest\/logging\/test_logConfiguration.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-  EXPECT_TRUE(string_contains_substring(logger_output, expected_output_substring))\n+  EXPECT_THAT(logger_output, testing::HasSubstr(expected_output_substring))\n","filename":"test\/hotspot\/gtest\/logging\/test_logFileOutput.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    EXPECT_PRED2(string_contains_substring, stream.as_string(), expected)\n+    EXPECT_THAT(stream.base(), testing::HasSubstr(expected))\n","filename":"test\/hotspot\/gtest\/logging\/test_logTagSetDescriptions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  EXPECT_EQ(0, strcmp(str, str_copy)) << \"Not identical copy\";\n+  EXPECT_STREQ(str, str_copy) << \"Not identical copy\";\n","filename":"test\/hotspot\/gtest\/memory\/test_guardedMemory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,17 +45,6 @@\n-  \/\/ method entry test\n-  ASSERT_TRUE(strstr(output, \"this\") != NULL) << \"must have \\\"this\\\"\";\n-  ASSERT_TRUE(strstr(output, \"bytecode 1:\") != NULL) << \"must have \\\"bytecode 1\\\"\";\n-  ASSERT_TRUE(strstr(output, \"bytecode 2:\") != NULL) << \"must have \\\"bytecode 2\\\"\";\n-  ASSERT_TRUE(strstr(output, \"cp index:\") != NULL) << \"must have constant pool index\";\n-  ASSERT_TRUE(strstr(output, \"F1:\") != NULL) << \"must have F1 value\";\n-  ASSERT_TRUE(strstr(output, \"F2:\") != NULL) << \"must have F2 value\";\n-  ASSERT_TRUE(strstr(output, \"method:\") != NULL) << \"must have a method\";\n-  ASSERT_TRUE(strstr(output, \"flag values:\") != NULL) << \"must have a flag\";\n-  ASSERT_TRUE(strstr(output, \"tos:\") != NULL) << \"must have result type\";\n-  ASSERT_TRUE(strstr(output, \"local signature:\") != NULL) << \"must have local signature flag\";\n-  ASSERT_TRUE(strstr(output, \"has appendix:\") != NULL) << \"must have appendix flag\";\n-  ASSERT_TRUE(strstr(output, \"forced virtual:\") != NULL) << \"must have forced virtual flag\";\n-  ASSERT_TRUE(strstr(output, \"final:\") != NULL) << \"must have final flag\";\n-  ASSERT_TRUE(strstr(output, \"virtual final:\") != NULL) << \"must have virtual final flag\";\n-  ASSERT_TRUE(strstr(output, \"resolution failed:\") != NULL) << \"must have resolution failed flag\";\n-  ASSERT_TRUE(strstr(output, \"num parameters:\") != NULL) << \"must have number of parameters\";\n+  static const char* const expected_strings[] = {\n+    \/\/ Method entry tests:\n+    \"this\", \"bytecode 1:\", \"bytecode 2:\", \"cp index:\", \"F1:\", \"F2:\",\n+    \"method:\", \"flag values:\", \"tos:\", \"local signature:\", \"has appendix:\",\n+    \"forced virtual:\", \"final:\", \"virtual final:\", \"resolution failed:\",\n+    \"num parameters:\",\n@@ -63,3 +52,8 @@\n-  \/\/ field entry test\n-  ASSERT_TRUE(strstr(output, \"volatile:\") != NULL) << \"must have volatile flag\";\n-  ASSERT_TRUE(strstr(output, \"field index:\") != NULL) << \"must have field index\";\n+    \/\/ field entry test\n+    \"volatile:\", \"field index:\",\n+    nullptr\n+  };\n+\n+  for (int i = 0; expected_strings[i] != nullptr; i++) {\n+    ASSERT_THAT(output, testing::HasSubstr(expected_strings[i]));\n+  }\n","filename":"test\/hotspot\/gtest\/oops\/test_cpCache_output.cpp","additions":14,"deletions":20,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+using testing::HasSubstr;\n+\n@@ -54,1 +56,1 @@\n-  ASSERT_TRUE(strstr(st.as_string(), \"injected 'loader_data'\") != NULL) << \"Must contain injected fields\";\n+  ASSERT_THAT(st.base(), HasSubstr(\"injected 'loader_data'\")) << \"Must contain injected fields\";\n@@ -59,1 +61,1 @@\n-  ASSERT_TRUE(strstr(st.as_string(), \"injected 'protection_domain'\") != NULL) << \"Must contain injected fields\";\n+  ASSERT_THAT(st.base(), HasSubstr(\"injected 'protection_domain'\")) << \"Must contain injected fields\";\n@@ -66,2 +68,2 @@\n-  ASSERT_TRUE(strstr(st.as_string(), \"method holder:\") != NULL) << \"Must contain method_holder field\";\n-  ASSERT_TRUE(strstr(st.as_string(), \"'java\/lang\/ClassLoader'\") != NULL) << \"Must be in ClassLoader\";\n+  ASSERT_THAT(st.base(), HasSubstr(\"method holder:\")) << \"Must contain method_holder field\";\n+  ASSERT_THAT(st.base(), HasSubstr(\"'java\/lang\/ClassLoader'\")) << \"Must be in ClassLoader\";\n","filename":"test\/hotspot\/gtest\/oops\/test_instanceKlass.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,3 +43,0 @@\n-static bool test_pattern(stringStream* st, const char* pattern) {\n-  return (strstr(st->as_string(), pattern) != NULL);\n-}\n@@ -50,1 +47,1 @@\n-  ASSERT_TRUE(test_pattern(&st, pattern)) << pattern << \" not in \" << st.as_string();\n+  ASSERT_THAT(st.base(), testing::HasSubstr(pattern));\n","filename":"test\/hotspot\/gtest\/oops\/test_markWord.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+using testing::HasSubstr;\n+\n@@ -41,3 +43,3 @@\n-  ASSERT_TRUE(strstr(output, \"class java\/lang\/Object loader data:\") != NULL) << \"must find java\/lang\/Object\";\n-  ASSERT_TRUE(strstr(output, \"method wait : (J)V\") != NULL) << \"must find java\/lang\/Object::wait\";\n-  ASSERT_TRUE(strstr(output, \"method finalize : ()V\\n   0 return\") != NULL) << \"must find java\/lang\/Object::finalize and disasm\";\n+  ASSERT_THAT(output, HasSubstr(\"class java\/lang\/Object loader data:\")) << \"must find java\/lang\/Object\";\n+  ASSERT_THAT(output, HasSubstr(\"method wait : (J)V\")) << \"must find java\/lang\/Object::wait\";\n+  ASSERT_THAT(output, HasSubstr(\"method finalize : ()V\\n   0 return\")) << \"must find java\/lang\/Object::finalize and disasm\";\n@@ -54,4 +56,4 @@\n-  ASSERT_TRUE(strstr(o1, \"class java\/lang\/Object loader data:\") != NULL) << \"must find java\/lang\/Object\";\n-  ASSERT_TRUE(strstr(o1, \"method wait : (J)V\")    != NULL) << \"must find java\/lang\/Object::wait(long)\";\n-  ASSERT_TRUE(strstr(o1, \"method wait : ()V\")     != NULL) << \"must find java\/lang\/Object::wait()\";\n-  ASSERT_TRUE(strstr(o1, \"method finalize : ()V\") == NULL) << \"must not find java\/lang\/Object::finalize\";\n+  ASSERT_THAT(o1, HasSubstr(\"class java\/lang\/Object loader data:\")) << \"must find java\/lang\/Object\";\n+  ASSERT_THAT(o1, HasSubstr(\"method wait : (J)V\")) << \"must find java\/lang\/Object::wait(long)\";\n+  ASSERT_THAT(o1, HasSubstr(\"method wait : ()V\")) << \"must find java\/lang\/Object::wait()\";\n+  ASSERT_THAT(o1, Not(HasSubstr(\"method finalize : ()V\"))) << \"must not find java\/lang\/Object::finalize\";\n@@ -62,4 +64,4 @@\n-  ASSERT_TRUE(strstr(o2, \"class java\/lang\/Object loader data:\") != NULL) << \"must find java\/lang\/Object\";\n-  ASSERT_TRUE(strstr(o2, \"method wait : (J)V\")  != NULL) << \"must find java\/lang\/Object::wait(long)\";\n-  ASSERT_TRUE(strstr(o2, \"method wait : (JI)V\") != NULL) << \"must find java\/lang\/Object::wait(long,int)\";\n-  ASSERT_TRUE(strstr(o2, \"method wait : ()V\")   == NULL) << \"must not find java\/lang\/Object::wait()\";\n+  ASSERT_THAT(o2, HasSubstr(\"class java\/lang\/Object loader data:\")) << \"must find java\/lang\/Object\";\n+  ASSERT_THAT(o2, HasSubstr(\"method wait : (J)V\")) << \"must find java\/lang\/Object::wait(long)\";\n+  ASSERT_THAT(o2, HasSubstr(\"method wait : (JI)V\")) << \"must find java\/lang\/Object::wait(long,int)\";\n+  ASSERT_THAT(o2, Not(HasSubstr(\"method wait : ()V\"))) << \"must not find java\/lang\/Object::wait()\";\n","filename":"test\/hotspot\/gtest\/runtime\/test_classPrinter.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  ASSERT_EQ(strcmp(SharedArchiveConfigFile, \"\"), 0);\n+  EXPECT_STREQ(SharedArchiveConfigFile, \"\");\n@@ -84,1 +84,1 @@\n-  ASSERT_EQ(strcmp(SharedArchiveConfigFile, \"foobar\") , 0);\n+  EXPECT_STREQ(SharedArchiveConfigFile, \"foobar\");\n@@ -92,1 +92,1 @@\n-  ASSERT_EQ(strcmp(SharedArchiveConfigFile, \"xyz\"), 0);\n+  EXPECT_STREQ(SharedArchiveConfigFile, \"xyz\");\n","filename":"test\/hotspot\/gtest\/runtime\/test_globals.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+using testing::HasSubstr;\n+\n@@ -174,1 +176,1 @@\n-  EXPECT_THAT(buf, testing::HasSubstr(expected));\n+  EXPECT_THAT(buf, HasSubstr(expected));\n@@ -776,1 +778,1 @@\n-  ASSERT_EQ(strcmp(expected, buffer), 0);\n+  EXPECT_STREQ(expected, buffer);\n@@ -785,1 +787,1 @@\n-  EXPECT_NE(::strstr(haystack, needle), (char*)NULL)\n+  EXPECT_THAT(haystack, HasSubstr(needle));\n@@ -787,1 +789,1 @@\n-  EXPECT_EQ(::strstr(haystack, needle), (char*)NULL)\n+  EXPECT_THAT(haystack, Not(HasSubstr(needle)));\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -470,1 +470,1 @@\n-  ASSERT_TRUE(strstr(buf, \"JNI_CreateJavaVM\") != nullptr);\n+  ASSERT_THAT(buf, testing::HasSubstr(\"JNI_CreateJavaVM\"));\n@@ -481,1 +481,1 @@\n-  ASSERT_TRUE(strcmp(buf, \"jniCheck.hpp\") == 0);\n+  EXPECT_STREQ(buf, \"jniCheck.hpp\");\n@@ -508,1 +508,1 @@\n-  ASSERT_TRUE(strcmp(buf, \"<OVERFLOW>\") == 0);\n+  EXPECT_STREQ(buf, \"<OVERFLOW>\");\n@@ -519,1 +519,1 @@\n-  ASSERT_TRUE(strcmp(buf, \"L\") == 0); \/\/ Overflow message does not fit, so we fall back to \"L:line_number\"\n+  EXPECT_STREQ(buf, \"L\"); \/\/ Overflow message does not fit, so we fall back to \"L:line_number\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-    EXPECT_EQ(strcmp(result, (expected)), 0) << \"Failed with\"  \\\n+    EXPECT_STREQ((result), (expected)) << \"Failed with\"        \\\n@@ -231,3 +231,1 @@\n-        << \" value '\"    << (value)    << \"'\"                  \\\n-        << \" result '\"   << result     << \"'\"                  \\\n-        << \" expected '\" << (expected) << \"'\";                 \\\n+        << \" value '\"    << (value);                           \\\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalDefinitions.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  ASSERT_EQ(strcmp(end, \":-)\"), 0);\n+  EXPECT_STREQ(end, \":-)\");\n","filename":"test\/hotspot\/gtest\/utilities\/test_parse_memory_size.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -471,1 +471,1 @@\n-    ASSERT_TRUE(strstr(st.as_string(), str) != nullptr) << \"string not present \" << str;\n+    ASSERT_THAT(st.base(), testing::HasSubstr(str));\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}