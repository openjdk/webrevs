{"files":[{"patch":"@@ -496,6 +496,15 @@\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n-     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n-     * <p>\n-     * The command line will be like:\n-     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     * Create ProcessBuilder using the java launcher from the jdk to\n+     * be tested. The default jvm options from jtreg, test.vm.opts and\n+     * test.java.opts, are added.\n+     *\n+     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n+     * classpath property \"java.class.path\" is appended to the command\n+     * line and the environment of the ProcessBuilder is modified to\n+     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n+     * provided the command args are updated and appended to invoke\n+     * ProcessTools main() and provide the name of the thread factory.\n+     *\n+     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n+     * with the thread factory value. The remaining command args are\n+     * scanned for unsupported options and are appended to the\n+     * ProcessBuilder.\n@@ -511,6 +520,15 @@\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n-     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n-     * <p>\n-     * The command line will be like:\n-     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     * Create ProcessBuilder using the java launcher from the jdk to\n+     * be tested. The default jvm options from jtreg, test.vm.opts and\n+     * test.java.opts, are added.\n+     *\n+     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n+     * classpath property \"java.class.path\" is appended to the command\n+     * line and the environment of the ProcessBuilder is modified to\n+     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n+     * provided the command args are updated and appended to invoke\n+     * ProcessTools main() and provide the name of the thread factory.\n+     *\n+     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n+     * with the thread factory value. The remaining command args are\n+     * scanned for unsupported options and are appended to the\n+     * ProcessBuilder.\n@@ -540,0 +558,12 @@\n+     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n+     * classpath property \"java.class.path\" is appended to the command\n+     * line and the environment of the ProcessBuilder is modified to\n+     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n+     * provided the command args are updated and appended to invoke\n+     * ProcessTools main() and provide the name of the thread factory.\n+     *\n+     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n+     * with the thread factory value. The remaining command args are\n+     * scanned for unsupported options and are appended to the\n+     * ProcessBuilder.\n+     *\n@@ -562,0 +592,12 @@\n+     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n+     * classpath property \"java.class.path\" is appended to the command\n+     * line and the environment of the ProcessBuilder is modified to\n+     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n+     * provided the command args are updated and appended to invoke\n+     * ProcessTools main() and provide the name of the thread factory.\n+     *\n+     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n+     * with the thread factory value. The remaining command args are\n+     * scanned for unsupported options and are appended to the\n+     * ProcessBuilder.\n+     *\n@@ -570,8 +612,6 @@\n-     * Executes a test jvm process, waits for it to finish and returns the process output.\n-     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n-     * The java from the test.jdk is used to execute the command.\n-     * <p>\n-     * The command line will be like:\n-     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-     * <p>\n-     * The jvm process will have exited before this method returns.\n+     * Executes a test jvm process, waits for it to finish and returns\n+     * the process output.\n+     *\n+     * <p>The process is created using runtime flags set up by:\n+     * {@link #createTestJavaProcessBuilder(String...)}. The\n+     * jvm process will have exited before this method returns.\n@@ -587,8 +627,6 @@\n-     * Executes a test jvm process, waits for it to finish and returns the process output.\n-     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n-     * The java from the test.jdk is used to execute the command.\n-     * <p>\n-     * The command line will be like:\n-     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-     * <p>\n-     * The jvm process will have exited before this method returns.\n+     * Executes a test jvm process, waits for it to finish and returns\n+     * the process output.\n+     *\n+     * <p>The process is created using runtime flags set up by:\n+     * {@link #createTestJavaProcessBuilder(String...)}. The\n+     * jvm process will have exited before this method returns.\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":66,"deletions":28,"binary":false,"changes":94,"status":"modified"}]}