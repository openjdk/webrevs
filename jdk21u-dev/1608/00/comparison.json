{"files":[{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4148334\n+ * @summary tests that background color is initially set correctly.\n+ * @requires os.family == \"windows\"\n+ * @key headful\n+ * @run main InitialBackgroundSettingTest\n+ *\/\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.List;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.Scrollbar;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class InitialBackgroundSettingTest {\n+    Frame frame;\n+    TextField tf;\n+    TextArea ta;\n+    Choice choice;\n+    List list;\n+    Scrollbar bar;\n+    Button button;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        InitialBackgroundSettingTest test= new InitialBackgroundSettingTest();\n+        try {\n+            EventQueue.invokeAndWait(test::setupGUI);\n+            EventQueue.invokeAndWait(test::test);\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+\n+    public void setupGUI () {\n+        frame = new Frame(\"InitialBackgroundSettingTest frame\");\n+        tf = new TextField(\"I am the TextField\");\n+        ta = new TextArea(\"I am the TextArea\");\n+        choice = new Choice();\n+        list = new List();\n+        bar = new Scrollbar(Scrollbar.HORIZONTAL);\n+        button = new Button(\"I am the button\");\n+        frame.setBackground(Color.red);\n+        frame.setLayout(new GridLayout(7, 1));\n+        frame.add(button);\n+        frame.add(bar);\n+        frame.add(choice);\n+        frame.add(list);\n+        frame.add(tf);\n+        frame.add(ta);\n+        frame.setVisible(true);\n+        frame.setBounds (400, 0, 300, 300);\n+    }\n+\n+    public void test() {\n+        boolean passed = true;\n+        System.out.println(\"Button background color is:\" +\n+                button.getBackground());\n+        if (Color.red.equals(button.getBackground())) {\n+            System.err.println(\"Button background is red\");\n+            passed = false;\n+        }\n+        System.out.println(\"Scrollbar background color is:\" +\n+                bar.getBackground());\n+        if (Color.red.equals(bar.getBackground())) {\n+            System.err.println(\"ScrollBar background is red\");\n+            passed = false;\n+        }\n+        System.out.println(\"Choice background color is:\" +\n+                choice.getBackground());\n+        if (Color.red.equals(choice.getBackground())) {\n+            System.err.println(\"Choice background is red\");\n+            passed = false;\n+        }\n+        System.out.println(\"List background color is:\" +\n+                list.getBackground());\n+        if (Color.red.equals(list.getBackground())) {\n+            System.err.println(\"List background is red\");\n+            passed = false;\n+        }\n+        System.out.println(\"TextField background color is:\" +\n+                tf.getBackground());\n+        if (Color.red.equals(tf.getBackground())) {\n+            System.err.println(\"TextField background is red\");\n+            passed = false;\n+        }\n+        System.out.println(\"TextArea background color is:\" +\n+                ta.getBackground());\n+        if (Color.red.equals(ta.getBackground())) {\n+            System.err.println(\"TextArea background is red\");\n+            passed = false;\n+        }\n+\n+        if (!passed) {\n+            throw new RuntimeException(\"One or more component inherited\" +\n+                    \" background from a Frame\");\n+        }\n+    }\n+\n+    public void dispose() {\n+        frame.dispose();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/BackgroundColorTest\/InitialBackgroundSettingTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6347994\n+ * @summary REG: Scrollbar, Choice, Checkbox flickers and grays out when scrolling, XToolkit\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FlickeringOnScroll\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.PopupMenu;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class FlickeringOnScroll extends Frame {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+            There are five components in the frame:\n+            Scrollbars(vertical and horizontal), a Choice,\n+            a Checkbox and a TextArea\n+            1) Drag the thumbs of each Scrollbar.\n+            2) Do the same with Choice's scrollbar.\n+            3) Focus on Checkbox and press left mouse button or SPACE repeatedly.\n+            4) Right click inside TextArea and navigate through all menu items\n+               in PopupMenu using the arrow keys.\n+            If you notice some component or its scrollbar flickers on\n+            key\/mouse press or drag, press Fail. Otherwise press Pass.\n+            \"\"\";\n+\n+    public FlickeringOnScroll() {\n+        Choice ch = new Choice();\n+        ch.add(\"Praveen\");\n+        ch.add(\"Mohan\");\n+        ch.add(\"Rakesh\");\n+        ch.add(\"Menon\");\n+        ch.add(\"Girish\");\n+        ch.add(\"Ramachandran\");\n+        ch.add(\"Elancheran\");\n+        ch.add(\"Subramanian\");\n+        ch.add(\"Raju\");\n+        ch.add(\"Pallath\");\n+        ch.add(\"Mayank\");\n+        ch.add(\"Joshi\");\n+        ch.add(\"Sundar\");\n+        ch.add(\"Srinivas\");\n+        ch.add(\"Mandalika\");\n+        Checkbox chb = new Checkbox (\"Checkbox\", false);\n+        TextArea ta = new TextArea(\"Text Area\");\n+        Panel panel = new Panel();\n+        PopupMenu popup = new PopupMenu(\"Popup\");\n+        MenuItem mi1 = new MenuItem(\"mi1\");\n+        MenuItem mi2 = new MenuItem(\"mi2\");\n+        MenuItem mi3 = new MenuItem(\"mi3\");\n+        MenuItem mi4 = new MenuItem(\"mi4\");\n+\n+        setTitle(\"Flickering Scroll Area Testing Frame\");\n+        setLayout(new FlowLayout());\n+        add(ch);\n+        add(chb);\n+        add(ta);\n+\n+        panel.setLayout(new BorderLayout());\n+        panel.setPreferredSize(new Dimension(200, 200));\n+        add(panel);\n+        panel.add(\"Center\",new java.awt.Label(\"Scrollbar flickering test...\" ,java.awt.Label.CENTER));\n+        panel.add(\"South\",new Scrollbar(Scrollbar.HORIZONTAL, 0, 100, 0, 255));\n+        panel.add(\"East\",new Scrollbar(Scrollbar.VERTICAL, 0, 100, 0, 255));\n+\n+        ta.add(popup);\n+        popup.add (mi1);\n+        popup.add (mi2);\n+        popup.add (mi3);\n+        popup.add (mi4);\n+\n+        ta.addMouseListener(new MouseAdapter() {\n+                public void mousePressed(MouseEvent me) {\n+                    if (me.isPopupTrigger()) {\n+                        if (popup != null) {\n+                            popup.show(me.getComponent(), me.getX(), me.getY());\n+                        }\n+                    }\n+                }\n+                public void mouseReleased(MouseEvent me) {\n+                    if (me.isPopupTrigger()) {\n+                        if (popup != null) {\n+                            popup.show(me.getComponent(), me.getX(), me.getY());\n+                        }\n+                    }\n+                }\n+        });\n+\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Scroll Area Flickering Repaint\")\n+                .testUI(FlickeringOnScroll::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/FlickeringOnScroll\/FlickeringOnScroll.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4079435\n+ * @summary Calling repaint() in focus handlers messes up the window.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FocusRepaintTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class FocusRepaintTest extends Frame implements FocusListener {\n+    static final String INSTRUCTIONS = \"\"\"\n+            Hit the tab key repeatedly in the Test window.\n+            If any of the buttons disappear press Fail, otherwise press Pass.\n+            \"\"\";\n+\n+    public FocusRepaintTest() {\n+        setTitle(\"Test\");\n+        setLayout(new FlowLayout());\n+        setSize(200, 100);\n+        Button b1 = new Button(\"Close\");\n+        Button b2 = new Button(\"Button\");\n+        add(b1);\n+        add(b2);\n+        b1.setSize(50, 30);\n+        b2.setSize(50, 30);\n+        b1.addFocusListener(this);\n+        b2.addFocusListener(this);\n+    }\n+\n+    public void focusGained(FocusEvent e) {\n+        Button b = (Button) e.getSource();\n+        PassFailJFrame.log(\"Focus gained for \" + b.getLabel());\n+        b.repaint();\n+    }\n+\n+    public void focusLost(FocusEvent e) {\n+        Button b = (Button) e.getSource();\n+        PassFailJFrame.log(\"Focus lost for \" + b.getLabel());\n+        b.repaint();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Focus Repaint\")\n+                .testUI(FocusRepaintTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/FocusRepaintTest\/FocusRepaintTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4185460\n+ * @summary Container list the indentation is 2x the indent param value\n+ * @key headful\n+ * @run main ListDoubleIndentTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.IOException;\n+import java.io.PipedInputStream;\n+import java.io.PrintStream;\n+import java.io.PipedOutputStream;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Vector;\n+\n+public class ListDoubleIndentTest {\n+    public static void main(final String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        EventQueue.invokeAndWait(new ListDoubleIndentTest()::performTest);\n+    }\n+\n+    public void performTest() {\n+        boolean bReturn = false;\n+        int iCompCount = 0;\n+        int iNotEqual = 0;\n+        int iIndentWrong = 0;\n+        System.out.println(\"Test: Check indentation\");\n+        Vector v = new Vector();\n+        String sLine;\n+        String sReturn;\n+        String sExpTrim;\n+        Button b1, b2, b3, b4, b5;\n+        Frame f = null;\n+\n+        try {\n+            f = new Frame(\"ListDoubleIndentTest\");\n+\n+            f.add(b1 = new Button(\"North\"), BorderLayout.NORTH, 0);\n+            f.add(b2 = new Button(\"South\"), BorderLayout.SOUTH, 1);\n+            f.add(b3 = new Button(\"East\"), BorderLayout.EAST, 2);\n+            f.add(b4 = new Button(\"West\"), BorderLayout.WEST, 3);\n+            f.add(b5 = new Button(\"Center\"), BorderLayout.CENTER, -1);\n+\n+            String[] sExpected = {f.toString(), b1.toString(), b2.toString(),\n+                    b3.toString(), b4.toString(), b5.toString()};\n+\n+            iCompCount = f.getComponentCount();\n+            System.out.println(\"Component count: \" + iCompCount);\n+\n+            for (int j = 0; j <= 10; j++) {\n+                PipedInputStream pin = new PipedInputStream();\n+                PrintStream output = new PrintStream(new PipedOutputStream(pin), true);\n+                BufferedReader input = new BufferedReader(new InputStreamReader(pin));\n+\n+                f.list(output, j);\n+\n+                output.flush();\n+                output.close();\n+\n+                while ((sLine = input.readLine()) != null) {\n+                    v.addElement(sLine);\n+                }\n+\n+                for (int i = 0; i < v.size(); i++) {\n+                    sReturn = (String)v.elementAt(i);\n+                    sExpTrim = sExpected[i].trim();\n+\n+                    if (!(sExpTrim.equals(sReturn.trim()))) {\n+                        System.out.println(\"iNotEqual\");\n+                        ++iNotEqual;\n+                    }\n+\n+                    int iSpace = sReturn.lastIndexOf(' ') + 1;\n+\n+                    if (i == 0) {\n+                        System.out.println(\"Indent set at: \" + j);\n+                        System.out.println(\"Indent return: \" + iSpace);\n+                        if (iSpace != j) {\n+                            System.out.println(\"iIndentWrong1\");\n+                            ++iIndentWrong;\n+                        }\n+                    } else {\n+                        if (iSpace != (j + 1)) {\n+                            System.out.println(iSpace + \"; \" + j);\n+                            ++iIndentWrong;\n+                        }\n+                    }\n+                    System.out.println(sReturn);\n+                }\n+                v.removeAllElements();\n+                v.trimToSize();\n+            }\n+\n+            if (iNotEqual == 0 && iIndentWrong == 0) {\n+                bReturn = true;\n+            } else {\n+                bReturn = false;\n+            }\n+\n+        } catch(IOException e) {\n+            bReturn = false;\n+            System.out.println (\"Unexpected Exception thrown: \" + e.getMessage());\n+            e.printStackTrace();\n+        } finally {\n+            if (f != null) {\n+                f.dispose();\n+            }\n+        }\n+\n+        if (bReturn) {\n+            System.out.println(\"Test for Container.list Passed\");\n+        } else {\n+            System.out.println(\"Test for Container.list Failed\");\n+            throw new RuntimeException(\"Test FAILED\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/ListDoubleIndentTest\/ListDoubleIndentTest.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"}]}