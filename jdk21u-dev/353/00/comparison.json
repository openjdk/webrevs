{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024 SAP SE. All rights reserved.\n@@ -71,1 +71,1 @@\n-        checkHsErrFileContent(f, patterns, null, true, verbose);\n+        checkHsErrFileContent(f, patterns, null, true, verbose, false);\n@@ -83,2 +83,2 @@\n-     * @param verbose If true, the content of the hs-err file is printed while matching. If false, only important\n-     *               information are printed.\n+     * @param verbose If true, the content of the hs-err file is printed while matching. If false, only the matched patterns\n+     *                are printed.\n@@ -88,0 +88,32 @@\n+        checkHsErrFileContent(f, positivePatterns, negativePatterns, checkEndMarker, verbose, false);\n+    }\n+\n+    \/**\n+     * Given an open hs-err file, read it line by line and check for existence of a set of patterns. Will fail\n+     * if patterns are missing, or if the END marker is missing.\n+     * @param f Input file\n+     * @param patterns An array of patterns that need to match, in that order\n+     * @param verbose If true, the content of the hs-err file is printed while matching. If false, only the matched patterns\n+     *                are printed.\n+     * @param printHserrOnError If true, the content of the hs-err file is printed in case of a failing check\n+     * @throws RuntimeException, {@link IOException}\n+     *\/\n+    public static void checkHsErrFileContent(File f, Pattern[] patterns, boolean verbose, boolean printHserrOnError) throws IOException {\n+        checkHsErrFileContent(f, patterns, null, true, verbose, printHserrOnError);\n+    }\n+\n+    \/**\n+     * Given an open hs-err file, read it line by line and check for various conditions.\n+     * @param f input file\n+     * @param positivePatterns Optional array of patterns that need to appear, in given order, in the file. Missing\n+     *                        patterns cause the test to fail.\n+     * @param negativePatterns Optional array of patterns that must not appear in the file; test fails if they do.\n+     *                        Order is irrelevant.\n+     * @param checkEndMarker If true, we check for the final \"END\" in an hs-err file; if it is missing it indicates\n+     *                        that hs-err file printing did not complete successfully.\n+     * @param verbose If true, the content of the hs-err file is printed while matching. If false, only the matched patterns\n+     *                are printed.\n+     * @param printHserrOnError If true, the content of the hs-err file is printed in case of a failing check\n+     * @throws RuntimeException, {@link IOException}\n+     *\/\n+    public static void checkHsErrFileContent(File f, Pattern[] positivePatterns, Pattern[] negativePatterns, boolean checkEndMarker, boolean verbose, boolean printHserrOnError) throws IOException {\n@@ -126,0 +158,3 @@\n+                            if (printHserrOnError) {\n+                                printHsErrFile(f);\n+                            }\n@@ -135,0 +170,3 @@\n+                if (printHserrOnError) {\n+                    printHsErrFile(f);\n+                }\n@@ -138,0 +176,3 @@\n+                if (printHserrOnError) {\n+                    printHsErrFile(f);\n+                }\n@@ -144,0 +185,14 @@\n+    private static void printHsErrFile(File f) throws IOException {\n+        try (\n+                FileInputStream fis = new FileInputStream(f);\n+                BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n+        ) {\n+            String line;\n+            System.out.println(\"------------------------ hs-err file ------------------------\");\n+            while ((line = br.readLine()) != null) {\n+                System.out.println(line);\n+            }\n+            System.out.println(\"-------------------------------------------------------------\");\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/HsErrFileUtils.java","additions":60,"deletions":5,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2014, 2022 SAP SE. All rights reserved.\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024 SAP SE. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,1 @@\n-    HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, false);\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, false, true);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/SecondaryErrorTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}