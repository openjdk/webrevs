{"files":[{"patch":"@@ -2708,1 +2708,0 @@\n-        SWPointer p1(n->as_Mem(), this, nullptr, false);\n@@ -2710,6 +2709,2 @@\n-          SWPointer p2(mem->as_Mem(), this, nullptr, false);\n-          if (p1.not_equal(p2)) {\n-            \/\/ Either Less or Greater -> provably no overlap between the two memory regions.\n-            mem = mem->in(MemNode::Memory);\n-          } else {\n-            \/\/ No proof that there is no overlap. Stop here.\n+          SWPointer p_store(mem->as_Mem(), this, nullptr, false);\n+          if (p_store.overlap_possible_with_any_in(p)) {\n@@ -2717,0 +2712,2 @@\n+          } else {\n+            mem = mem->in(MemNode::Memory);\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -725,0 +725,14 @@\n+  bool overlap_possible_with_any_in(Node_List* p) {\n+    for (uint k = 0; k < p->size(); k++) {\n+      MemNode* mem = p->at(k)->as_Mem();\n+      SWPointer p_mem(mem, _slp, nullptr, false);\n+      \/\/ Only if we know that we have Less or Greater can we\n+      \/\/ be sure that there can never be an overlap between\n+      \/\/ the two memory regions.\n+      if (!not_equal(p_mem)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @bug 8316679\n+ * @requires vm.cpu.features ~= \".*avx2.*\"\n+ * @bug 8316679 8316594\n@@ -31,0 +32,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -35,0 +37,1 @@\n+ *                   --add-modules java.base --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n@@ -41,0 +44,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -45,0 +49,2 @@\n+    static int NINE = 9;\n+\n@@ -46,0 +52,1 @@\n+    static Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -49,0 +56,1 @@\n+        byte b[] = new byte[RANGE];\n@@ -59,0 +67,24 @@\n+        for (int i = 0; i < 100; i++) {\n+            for (int j = 0; j < a.length; j++) {\n+                a[j] = (byte)random.nextInt();\n+                b[j] = (byte)random.nextInt();\n+            }\n+            byte[] a_ref = a.clone();\n+            byte[] b_ref = b.clone();\n+            byte[] a_res = a.clone();\n+            byte[] b_res = b.clone();\n+            ref2(a_ref, b_ref);\n+            test2(a_res, b_res);\n+            verify(\"a in test2\", a_ref, a_res, a);\n+            verify(\"b in test2\", b_ref, b_res, b);\n+        }\n+        for (int i = 0; i < 100; i++) {\n+            for (int j = 0; j < a.length; j++) {\n+                a[j] = (byte)random.nextInt();\n+            }\n+            byte[] a_ref = a.clone();\n+            byte[] a_res = a.clone();\n+            ref3(a_ref);\n+            test3(a_res);\n+            verify(\"a in test3\", a_ref, a_res, a);\n+        }\n@@ -99,0 +131,56 @@\n+\n+    static void test2(byte[] a, byte[] b) {\n+        for (int i = 46; i < 6000; i++) {\n+            a[47 + i + 0]++;\n+            a[47 + i + 1]++;\n+            a[47 + i + 2]++;\n+            a[47 + i + 3]++;\n+            b[NINE + i + 0]++;\n+            b[NINE + i + 1]++;\n+            b[NINE + i + 2]++;\n+            b[NINE + i + 3]++;\n+        }\n+    }\n+\n+    static void ref2(byte[] a, byte[] b) {\n+        for (int i = 46; i < 6000; i++) {\n+            a[47 + i + 0]++;\n+            a[47 + i + 1]++;\n+            a[47 + i + 2]++;\n+            a[47 + i + 3]++;\n+            b[NINE + i + 0]++;\n+            b[NINE + i + 1]++;\n+            b[NINE + i + 2]++;\n+            b[NINE + i + 3]++;\n+        }\n+    }\n+\n+    static void test3(byte[] a) {\n+        for (int i = 51; i < 6000; i++) {\n+            int adr = UNSAFE.ARRAY_BYTE_BASE_OFFSET + 42 + i;\n+            UNSAFE.putIntUnaligned(a, adr + 0*4, UNSAFE.getIntUnaligned(a, adr + 0*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 1*4, UNSAFE.getIntUnaligned(a, adr + 1*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 2*4, UNSAFE.getIntUnaligned(a, adr + 2*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 3*4, UNSAFE.getIntUnaligned(a, adr + 3*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 4*4, UNSAFE.getIntUnaligned(a, adr + 4*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 5*4, UNSAFE.getIntUnaligned(a, adr + 5*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 6*4, UNSAFE.getIntUnaligned(a, adr + 6*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 7*4, UNSAFE.getIntUnaligned(a, adr + 7*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 8*4, UNSAFE.getIntUnaligned(a, adr + 8*4) + 1);\n+        }\n+    }\n+\n+    static void ref3(byte[] a) {\n+        for (int i = 51; i < 6000; i++) {\n+            int adr = UNSAFE.ARRAY_BYTE_BASE_OFFSET + 42 + i;\n+            UNSAFE.putIntUnaligned(a, adr + 0*4, UNSAFE.getIntUnaligned(a, adr + 0*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 1*4, UNSAFE.getIntUnaligned(a, adr + 1*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 2*4, UNSAFE.getIntUnaligned(a, adr + 2*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 3*4, UNSAFE.getIntUnaligned(a, adr + 3*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 4*4, UNSAFE.getIntUnaligned(a, adr + 4*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 5*4, UNSAFE.getIntUnaligned(a, adr + 5*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 6*4, UNSAFE.getIntUnaligned(a, adr + 6*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 7*4, UNSAFE.getIntUnaligned(a, adr + 7*4) + 1);\n+            UNSAFE.putIntUnaligned(a, adr + 8*4, UNSAFE.getIntUnaligned(a, adr + 8*4) + 1);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMovingLoadBeforeStore.java","additions":89,"deletions":1,"binary":false,"changes":90,"status":"modified"}]}