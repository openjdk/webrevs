{"files":[{"patch":"@@ -33,0 +33,4 @@\n+  constexpr SmallRegisterMap() = default;\n+  ~SmallRegisterMap() = default;\n+  NONCOPYABLE(SmallRegisterMap);\n+\n@@ -34,1 +38,4 @@\n-  static constexpr SmallRegisterMap* instance = nullptr;\n+  static const SmallRegisterMap* instance() {\n+    static constexpr SmallRegisterMap the_instance{};\n+    return &the_instance;\n+  }\n@@ -51,11 +58,0 @@\n-  SmallRegisterMap() {}\n-\n-  SmallRegisterMap(const RegisterMap* map) {\n-  #ifdef ASSERT\n-    for(int i = 0; i < RegisterMap::reg_count; i++) {\n-      VMReg r = VMRegImpl::as_VMReg(i);\n-      if (map->location(r, (intptr_t*)nullptr) != nullptr) assert_is_rfp(r);\n-    }\n-  #endif\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/smallRegisterMap_aarch64.inline.hpp","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+  constexpr SmallRegisterMap() = default;\n+  ~SmallRegisterMap() = default;\n+  NONCOPYABLE(SmallRegisterMap);\n+\n@@ -34,1 +38,4 @@\n-  static constexpr SmallRegisterMap* instance = nullptr;\n+  static const SmallRegisterMap* instance() {\n+    static constexpr SmallRegisterMap the_instance{};\n+    return &the_instance;\n+  }\n@@ -49,6 +56,0 @@\n-  SmallRegisterMap() {}\n-\n-  SmallRegisterMap(const RegisterMap* map) {\n-    Unimplemented();\n-  }\n-\n","filename":"src\/hotspot\/cpu\/arm\/smallRegisterMap_arm.inline.hpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+  constexpr SmallRegisterMap() = default;\n+  ~SmallRegisterMap() = default;\n+  NONCOPYABLE(SmallRegisterMap);\n+\n@@ -34,2 +38,5 @@\n-  static constexpr SmallRegisterMap* instance = nullptr;\n-public:\n+  static const SmallRegisterMap* instance() {\n+    static constexpr SmallRegisterMap the_instance{};\n+    return &the_instance;\n+  }\n+\n@@ -47,13 +54,0 @@\n-  SmallRegisterMap() {}\n-\n-  SmallRegisterMap(const RegisterMap* map) {\n-#ifdef ASSERT\n-  for(int i = 0; i < RegisterMap::reg_count; i++) {\n-    VMReg r = VMRegImpl::as_VMReg(i);\n-    if (map->location(r, (intptr_t*)nullptr) != nullptr) {\n-      assert(false, \"Reg: %s\", r->name()); \/\/ Should not reach here\n-    }\n-  }\n-#endif\n-  }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/smallRegisterMap_ppc.inline.hpp","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+  constexpr SmallRegisterMap() = default;\n+  ~SmallRegisterMap() = default;\n+  NONCOPYABLE(SmallRegisterMap);\n+\n@@ -34,1 +38,4 @@\n-  static constexpr SmallRegisterMap* instance = nullptr;\n+  static const SmallRegisterMap* instance() {\n+    static constexpr SmallRegisterMap the_instance{};\n+    return &the_instance;\n+  }\n@@ -51,11 +58,0 @@\n-  SmallRegisterMap() {}\n-\n-  SmallRegisterMap(const RegisterMap* map) {\n-  #ifdef ASSERT\n-    for(int i = 0; i < RegisterMap::reg_count; i++) {\n-      VMReg r = VMRegImpl::as_VMReg(i);\n-      if (map->location(r, (intptr_t*)nullptr) != nullptr) assert_is_fp(r);\n-    }\n-  #endif\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/smallRegisterMap_riscv.inline.hpp","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+  constexpr SmallRegisterMap() = default;\n+  ~SmallRegisterMap() = default;\n+  NONCOPYABLE(SmallRegisterMap);\n+\n@@ -34,1 +38,4 @@\n-  static constexpr SmallRegisterMap* instance = nullptr;\n+  static const SmallRegisterMap* instance() {\n+    static constexpr SmallRegisterMap the_instance{};\n+    return &the_instance;\n+  }\n@@ -49,6 +56,0 @@\n-  SmallRegisterMap() {}\n-\n-  SmallRegisterMap(const RegisterMap* map) {\n-    Unimplemented();\n-  }\n-\n","filename":"src\/hotspot\/cpu\/s390\/smallRegisterMap_s390.inline.hpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+  constexpr SmallRegisterMap() = default;\n+  ~SmallRegisterMap() = default;\n+  NONCOPYABLE(SmallRegisterMap);\n+\n@@ -34,1 +38,5 @@\n-  static constexpr SmallRegisterMap* instance = nullptr;\n+  static const SmallRegisterMap* instance() {\n+    static constexpr SmallRegisterMap the_instance{};\n+    return &the_instance;\n+  }\n+\n@@ -51,11 +59,0 @@\n-  SmallRegisterMap() {}\n-\n-  SmallRegisterMap(const RegisterMap* map) {\n-  #ifdef ASSERT\n-    for(int i = 0; i < RegisterMap::reg_count; i++) {\n-      VMReg r = VMRegImpl::as_VMReg(i);\n-      if (map->location(r, (intptr_t*)nullptr) != nullptr) assert_is_rbp(r);\n-    }\n-  #endif\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/smallRegisterMap_x86.inline.hpp","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+  constexpr SmallRegisterMap() = default;\n+  ~SmallRegisterMap() = default;\n+  NONCOPYABLE(SmallRegisterMap);\n+\n@@ -34,1 +38,4 @@\n-  static constexpr SmallRegisterMap* instance = nullptr;\n+  static const SmallRegisterMap* instance() {\n+    static constexpr SmallRegisterMap the_instance{};\n+    return &the_instance;\n+  }\n@@ -49,6 +56,0 @@\n-  SmallRegisterMap() {}\n-\n-  SmallRegisterMap(const RegisterMap* map) {\n-    Unimplemented();\n-  }\n-\n","filename":"src\/hotspot\/cpu\/zero\/smallRegisterMap_zero.inline.hpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-       f.next(SmallRegisterMap::instance)) {\n+       f.next(SmallRegisterMap::instance())) {\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-  const SmallRegisterMap* map = SmallRegisterMap::instance;\n+  const SmallRegisterMap* map = SmallRegisterMap::instance();\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1863,1 +1863,1 @@\n-  f.next(SmallRegisterMap::instance, true \/* stop *\/);\n+  f.next(SmallRegisterMap::instance(), true \/* stop *\/);\n@@ -2073,1 +2073,1 @@\n-  _stream.next(SmallRegisterMap::instance);\n+  _stream.next(SmallRegisterMap::instance());\n@@ -2181,1 +2181,1 @@\n-    _cont.tail()->do_barriers<stackChunkOopDesc::BarrierType::Store>(_stream, SmallRegisterMap::instance);\n+    _cont.tail()->do_barriers<stackChunkOopDesc::BarrierType::Store>(_stream, SmallRegisterMap::instance());\n@@ -2224,1 +2224,1 @@\n-    _cont.tail()->fix_thawed_frame(caller, SmallRegisterMap::instance);\n+    _cont.tail()->fix_thawed_frame(caller, SmallRegisterMap::instance());\n@@ -2241,1 +2241,1 @@\n-    _cont.tail()->do_barriers<stackChunkOopDesc::BarrierType::Store>(_stream, SmallRegisterMap::instance);\n+    _cont.tail()->do_barriers<stackChunkOopDesc::BarrierType::Store>(_stream, SmallRegisterMap::instance());\n@@ -2300,1 +2300,1 @@\n-    _cont.tail()->fix_thawed_frame(caller, SmallRegisterMap::instance);\n+    _cont.tail()->fix_thawed_frame(caller, SmallRegisterMap::instance());\n@@ -2382,1 +2382,1 @@\n-  chunk->fix_thawed_frame(f, SmallRegisterMap::instance); \/\/ can only fix caller after push_return_frame (due to callee saved regs)\n+  chunk->fix_thawed_frame(f, SmallRegisterMap::instance()); \/\/ can only fix caller after push_return_frame (due to callee saved regs)\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}