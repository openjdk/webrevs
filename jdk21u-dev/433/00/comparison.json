{"files":[{"patch":"@@ -1039,1 +1039,0 @@\n-  CodeCache::flush_unlinked_nmethods();\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -182,4 +182,1 @@\n-  \/\/ If any oops are not marked this method unloads (i.e., breaks root links\n-  \/\/ to) any unmarked codeBlobs in the cache.  Sets \"marked_for_unloading\"\n-  \/\/ to \"true\" iff some code got unloaded.\n-  \/\/ \"unloading_occurred\" controls whether metadata should be cleaned because of class unloading.\n+  \/\/ Scope object managing code cache unloading behavior.\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1687,3 +1687,6 @@\n-    CodeCache::UnloadingScope scope(&g1_is_alive);\n-    bool purged_classes = SystemDictionary::do_unloading(_gc_timer_cm);\n-    _g1h->complete_cleaning(purged_classes);\n+    {\n+      CodeCache::UnloadingScope scope(&g1_is_alive);\n+      bool unloading_occurred = SystemDictionary::do_unloading(_gc_timer_cm);\n+      _g1h->complete_cleaning(unloading_occurred);\n+    }\n+    CodeCache::flush_unlinked_nmethods();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -322,4 +322,7 @@\n-    CodeCache::UnloadingScope unloading_scope(&_is_alive);\n-    \/\/ Unload classes and purge the SystemDictionary.\n-    bool purged_class = SystemDictionary::do_unloading(scope()->timer());\n-    _heap->complete_cleaning(purged_class);\n+    {\n+      CodeCache::UnloadingScope unloading_scope(&_is_alive);\n+      \/\/ Unload classes and purge the SystemDictionary.\n+      bool unloading_occurred = SystemDictionary::do_unloading(scope()->timer());\n+      _heap->complete_cleaning(unloading_occurred);\n+    }\n+    CodeCache::flush_unlinked_nmethods();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2055,1 +2055,0 @@\n-    CodeCache::UnloadingScope scope(is_alive_closure());\n@@ -2057,2 +2056,10 @@\n-    \/\/ Follow system dictionary roots and unload classes.\n-    bool purged_class = SystemDictionary::do_unloading(&_gc_timer);\n+    bool unloading_occurred;\n+    {\n+      CodeCache::UnloadingScope scope(is_alive_closure());\n+\n+      \/\/ Follow system dictionary roots and unload classes.\n+      unloading_occurred = SystemDictionary::do_unloading(&_gc_timer);\n+\n+      \/\/ Unload nmethods.\n+      CodeCache::do_unloading(unloading_occurred);\n+    }\n@@ -2060,2 +2067,2 @@\n-    \/\/ Unload nmethods.\n-    CodeCache::do_unloading(purged_class);\n+    \/\/ Release unloaded nmethods's memory.\n+    CodeCache::flush_unlinked_nmethods();\n@@ -2064,1 +2071,1 @@\n-    Klass::clean_weak_klass_links(purged_class);\n+    Klass::clean_weak_klass_links(unloading_occurred);\n@@ -2067,1 +2074,1 @@\n-    JVMCI_ONLY(JVMCI::do_unloading(purged_class));\n+    JVMCI_ONLY(JVMCI::do_unloading(unloading_occurred));\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -198,1 +198,0 @@\n-    CodeCache::UnloadingScope scope(&is_alive);\n@@ -200,2 +199,3 @@\n-    \/\/ Unload classes and purge the SystemDictionary.\n-    bool purged_class = SystemDictionary::do_unloading(gc_timer());\n+    bool unloading_occurred;\n+    {\n+      CodeCache::UnloadingScope scope(&is_alive);\n@@ -203,2 +203,9 @@\n-    \/\/ Unload nmethods.\n-    CodeCache::do_unloading(purged_class);\n+      \/\/ Unload classes and purge the SystemDictionary.\n+      unloading_occurred = SystemDictionary::do_unloading(gc_timer());\n+\n+      \/\/ Unload nmethods.\n+      CodeCache::do_unloading(unloading_occurred);\n+    }\n+\n+    \/\/ Release unloaded nmethod's memory.\n+    CodeCache::flush_unlinked_nmethods();\n@@ -207,1 +214,1 @@\n-    Klass::clean_weak_klass_links(purged_class);\n+    Klass::clean_weak_klass_links(unloading_occurred);\n@@ -210,1 +217,1 @@\n-    JVMCI_ONLY(JVMCI::do_unloading(purged_class));\n+    JVMCI_ONLY(JVMCI::do_unloading(unloading_occurred));\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1776,8 +1776,12 @@\n-    CodeCache::UnloadingScope scope(is_alive.is_alive_closure());\n-    ShenandoahGCPhase gc_phase(phase);\n-    ShenandoahGCWorkerPhase worker_phase(phase);\n-    bool purged_class = SystemDictionary::do_unloading(gc_timer());\n-\n-    uint num_workers = _workers->active_workers();\n-    ShenandoahClassUnloadingTask unlink_task(phase, num_workers, purged_class);\n-    _workers->run_task(&unlink_task);\n+    {\n+      CodeCache::UnloadingScope scope(is_alive.is_alive_closure());\n+      ShenandoahGCPhase gc_phase(phase);\n+      ShenandoahGCWorkerPhase worker_phase(phase);\n+      bool unloading_occurred = SystemDictionary::do_unloading(gc_timer());\n+\n+      uint num_workers = _workers->active_workers();\n+      ShenandoahClassUnloadingTask unlink_task(phase, num_workers, unloading_occurred);\n+      _workers->run_task(&unlink_task);\n+    }\n+    \/\/ Release unloaded nmethods's memory.\n+    CodeCache::flush_unlinked_nmethods();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}