{"files":[{"patch":"@@ -26,1 +26,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- * @enablePreview\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/GetThreadState\/GetThreadStateTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/JfrEvents.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @enablePreview\n@@ -36,1 +35,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/VirtualThreadPinnedEventThrows.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/PinALot.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,6 +26,0 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.Linker;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.SymbolLookup;\n-import java.lang.foreign.ValueLayout;\n@@ -43,1 +37,1 @@\n- * It defines the {@code runPinned} method to run a task with a native frame on the stack.\n+ * It defines the {@code runPinned} method to run a task when holding a lock.\n@@ -46,8 +40,0 @@\n-    private static final Path JAVA_LIBRARY_PATH = Path.of(System.getProperty(\"java.library.path\"));\n-    private static final Path LIB_PATH = JAVA_LIBRARY_PATH.resolve(System.mapLibraryName(\"VThreadPinner\"));\n-\n-    \/\/ method handle to call the native function\n-    private static final MethodHandle INVOKER = invoker();\n-\n-    \/\/ function pointer to call\n-    private static final MemorySegment UPCALL_STUB = upcallStub();\n@@ -85,8 +71,0 @@\n-    \/**\n-     * Called by the native function to run the task stashed in the thread local. The\n-     * task runs with the native frame on the stack.\n-     *\/\n-    private static void callback() {\n-        TASK_RUNNER.get().run();\n-    }\n-\n@@ -105,1 +83,3 @@\n-            INVOKER.invoke(UPCALL_STUB);\n+            synchronized (runner) {\n+                runner.run();\n+            }\n@@ -121,30 +101,0 @@\n-    \/**\n-     * Returns a method handle to the native function void call(void *(*f)(void *)).\n-     *\/\n-    @SuppressWarnings(\"restricted\")\n-    private static MethodHandle invoker() {\n-        Linker abi = Linker.nativeLinker();\n-        try {\n-            SymbolLookup lib = SymbolLookup.libraryLookup(LIB_PATH, Arena.global());\n-            MemorySegment symbol = lib.find(\"call\").orElseThrow();\n-            FunctionDescriptor desc = FunctionDescriptor.ofVoid(ValueLayout.ADDRESS);\n-            return abi.downcallHandle(symbol, desc);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    \/**\n-     * Returns an upcall stub to use as a function pointer to invoke the callback method.\n-     *\/\n-    @SuppressWarnings(\"restricted\")\n-    private static MemorySegment upcallStub() {\n-        Linker abi = Linker.nativeLinker();\n-        try {\n-            MethodHandle callback = MethodHandles.lookup()\n-                    .findStatic(VThreadPinner.class, \"callback\", MethodType.methodType(void.class));\n-            return abi.upcallStub(callback, FunctionDescriptor.ofVoid(), Arena.global());\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadPinner.java","additions":4,"deletions":54,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <stdio.h>\n-\n-#ifdef _WIN64\n-#define EXPORT __declspec(dllexport)\n-#else\n-#define EXPORT\n-#endif\n-\n-\/*\n- * Call a function with the given function pointer.\n- *\/\n-EXPORT void call(void *(*f)(void)) {\n-    (*f)();\n-}\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/libVThreadPinner.c","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"}]}