{"files":[{"patch":"@@ -466,0 +466,1 @@\n+java\/awt\/Dialog\/ChoiceModalDialogTest.java 8161475 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6213128\n+ * @key headful\n+ * @summary Tests that choice is releasing input capture when a modal\n+ *          dialog is shown\n+ * @run main ChoiceModalDialogTest\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class ChoiceModalDialogTest {\n+    static Frame f;\n+    static Dialog d;\n+    static volatile boolean keyOK;\n+    static volatile boolean mouseOK;\n+    static TextField tf;\n+    static Choice c;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot r;\n+        try {\n+            r = new Robot();\n+            r.setAutoDelay(100);\n+            EventQueue.invokeAndWait(() -> {\n+                f = new Frame(\"Frame\");\n+                c = new Choice();\n+                f.setBounds(100, 300, 300, 200);\n+                f.setLayout(new FlowLayout());\n+                tf = new TextField(3);\n+                f.add(tf);\n+\n+                c.add(\"1\");\n+                c.add(\"2\");\n+                c.add(\"3\");\n+                c.add(\"4\");\n+                f.add(c);\n+\n+                tf.addFocusListener(new FocusAdapter() {\n+                    public void focusLost(FocusEvent ev) {\n+                        d = new Dialog(f, \"Dialog\", true);\n+                        d.setBounds(300, 300, 200, 150);\n+                        d.addKeyListener(new KeyAdapter() {\n+                            public void keyPressed(KeyEvent ev) {\n+                                keyOK = true;\n+                            }\n+                        });\n+                        d.addMouseListener(new MouseAdapter() {\n+                            public void mousePressed(MouseEvent ev) {\n+                                mouseOK = true;\n+                            }\n+                        });\n+                        d.setVisible(true);\n+                    }\n+                });\n+\n+                f.setVisible(true);\n+                f.toFront();\n+            });\n+            r.waitForIdle();\n+            r.delay(1000);\n+            EventQueue.invokeAndWait(() -> {\n+                r.mouseMove(tf.getLocationOnScreen().x + tf.getSize().width \/ 2,\n+                        tf.getLocationOnScreen().y + tf.getSize().height \/ 2);\n+            });\n+            r.waitForIdle();\n+            r.delay(500);\n+            EventQueue.invokeAndWait(() -> {\n+                r.mouseMove(c.getLocationOnScreen().x + c.getSize().width - 4,\n+                        c.getLocationOnScreen().y + c.getSize().height \/ 2);\n+                r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            });\n+            r.waitForIdle();\n+            r.delay(500);\n+            EventQueue.invokeAndWait(() -> {\n+                r.mouseMove(d.getLocationOnScreen().x + d.getSize().width \/ 2,\n+                        d.getLocationOnScreen().y + d.getSize().height \/ 2);\n+                r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                r.keyPress(KeyEvent.VK_A);\n+                r.keyRelease(KeyEvent.VK_A);\n+            });\n+            r.waitForIdle();\n+            r.delay(500);\n+            if (!mouseOK) {\n+                throw new RuntimeException(\"Test Failed due to Mouse release failure!\");\n+            }\n+            if (!keyOK) {\n+                throw new RuntimeException(\"Test Failed due to Key release failure!\");\n+            }\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (d != null) {\n+                    d.dispose();\n+                }\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/ChoiceModalDialogTest.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4255230 4191946\n+ * @summary Tests to verify Dialog inherits background from its owner\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogBackgroundTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.TextField;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class DialogBackgroundTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Perform the following steps:\n+                1) Select \"New Frame\" from the \"File\" menu of the\n+                   \"TreeCopy Frame #1\" frame.\n+                2) Select \"Configure\" from the \"File\" menu in the\n+                   *new* frame.\n+                   If label text \"This is a label:\" in the appeared\n+                   \"Configuration Dialog\" dialog has a grey background\n+                   test PASSES, otherwise it FAILS\n+                   \"\"\";\n+        TreeCopy treeCopy = new TreeCopy(++TreeCopy.windowCount, null);\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(treeCopy)\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class TreeCopy extends Frame implements ActionListener {\n+    TextField tfRoot;\n+    ConfigDialog configDlg;\n+    MenuItem miConfigure = new MenuItem(\"Configure...\");\n+    MenuItem miNewWindow = new MenuItem(\"New Frame\");\n+    static int windowCount = 0;\n+    Window parent;\n+\n+    public TreeCopy(int windowNum, Window myParent) {\n+        super();\n+        setTitle(\"TreeCopy Frame #\" + windowNum);\n+        MenuBar mb = new MenuBar();\n+        Menu m = new Menu(\"File\");\n+        configDlg = new ConfigDialog(this);\n+        parent = myParent;\n+\n+        m.add(miConfigure);\n+        m.add(miNewWindow);\n+        miConfigure.addActionListener(this);\n+        miNewWindow.addActionListener(this);\n+        mb.add(m);\n+        setMenuBar(mb);\n+        m.addActionListener(this);\n+\n+        tfRoot = new TextField();\n+        tfRoot.setEditable(false);\n+        add(tfRoot);\n+\n+        addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent we) {\n+                dispose();\n+            }\n+        });\n+\n+        setSize(200, 100);\n+        setLocationRelativeTo(parent);\n+    }\n+\n+    public void actionPerformed(ActionEvent ae) {\n+        Object source = ae.getSource();\n+\n+        if (source == miConfigure) {\n+            configDlg.setVisible(true);\n+            if (configDlg.getBackground() != configDlg.labelColor)\n+                PassFailJFrame.log(\"FAIL: Test failed!!!\");\n+        } else if (source == miNewWindow) {\n+            new TreeCopy(++windowCount, this).setVisible(true);\n+        }\n+    }\n+}\n+\n+class ConfigDialog extends Dialog implements ActionListener {\n+    public Button okButton;\n+    public Button cancelButton;\n+    public Label l2;\n+    public Color labelColor;\n+\n+    public ConfigDialog(Frame parent) {\n+        super(parent, \"Configuration Dialog\");\n+        okButton = new Button(\"OK\");\n+        cancelButton = new Button(\"Cancel\");\n+        l2 = new Label(\"This is a label:\");\n+\n+        setLayout(new FlowLayout());\n+        add(l2);\n+        add(okButton);\n+        add(cancelButton);\n+\n+        okButton.addActionListener(this);\n+        cancelButton.addActionListener(this);\n+\n+        pack();\n+        labelColor = l2.getBackground();\n+    }\n+\n+    public void actionPerformed(ActionEvent ae) {\n+        dispose();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogBackgroundTest.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4232374\n+ * @summary Tests that dismissing a modal dialog does not enable\n+ *          disabled components\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual EnabledResetTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class EnabledResetTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Press \"Create Child\" twice to create three windows\n+                   Verify that the parent windows are disabled\n+                2. Press \"Create Modal Dialog\"\n+                   Verify that the parent windows are disabled\n+                3. Press \"enable\"\n+                   Verify that no windows accept mouse events\n+                4. Press \"ok\"\n+                   Verify that the first window is still disabled\n+                   If all the verifications are done, then test is\n+                   PASSED, else test fails.\n+                   \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(new ChildDialog(1, null))\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class ChildDialog extends Frame implements ActionListener {\n+    Window parent;\n+    int id;\n+    Button b, c, d;\n+\n+    public ChildDialog(int frameNumber, Window myParent) {\n+        super();\n+        id = frameNumber;\n+        parent = myParent;\n+\n+        setTitle(\"Frame Number \" + id);\n+\n+        b = new Button(\"Dismiss me\");\n+        c = new Button(\"Create Child\");\n+        d = new Button(\"Create Modal Dialog\");\n+\n+        setLayout(new BorderLayout());\n+        add(\"North\", c);\n+        add(\"Center\", d);\n+        add(\"South\", b);\n+        pack();\n+\n+        b.addActionListener(this);\n+        c.addActionListener(this);\n+        d.addActionListener(this);\n+    }\n+\n+    public void setVisible(boolean b) {\n+        if (parent != null) {\n+            if (b) {\n+                parent.setEnabled(false);\n+            } else {\n+                parent.setEnabled(true);\n+                parent.requestFocus();\n+            }\n+        }\n+\n+        super.setVisible(b);\n+    }\n+\n+    public void dispose() {\n+        if (parent != null) {\n+            parent.setEnabled(true);\n+            parent.requestFocus();\n+        }\n+        super.dispose();\n+    }\n+\n+\n+    public void actionPerformed(ActionEvent evt) {\n+        if (evt.getSource() == c) {\n+            (new ChildDialog(id + 1, this)).setVisible(true);\n+        } else if (evt.getSource() == d) {\n+            Dialog D = new Dialog(this, \"Modal Dialog \");\n+            D.setLayout(new FlowLayout());\n+            Button b = new Button(\"ok\");\n+            Button e = new Button(\"enable\");\n+            D.add(b);\n+            D.add(e);\n+            D.setModal(true);\n+            D.pack();\n+            b.addActionListener(this);\n+            e.addActionListener(this);\n+            D.setVisible(true);\n+        } else if (evt.getSource() == b) {\n+            dispose();\n+        } else if (evt.getSource() instanceof Button) {\n+            if (\"ok\".equals(evt.getActionCommand())) {\n+                Button target = (Button) evt.getSource();\n+                Window w = (Window) target.getParent();\n+                w.dispose();\n+            }\n+            if (\"enable\".equals(evt.getActionCommand())) {\n+                parent.setEnabled(true);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/EnabledResetTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4414105\n+ * @summary Tests that FileDialog returns null when cancelled\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FileDialogGetFileTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+\n+public class FileDialogGetFileTest {\n+    static FileDialog fd;\n+    static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Open FileDialog from \"Show File Dialog\" button.\n+                2. Click cancel button without selecting any file\/folder.\n+                3. If FileDialog.getFile return null then test PASSES,\n+                   else test FAILS automatically.\n+                   \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .logArea(4)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        frame = new Frame(\"FileDialog GetFile test\");\n+        fd = new FileDialog(frame);\n+        fd.setFile(\"FileDialogGetFileTest.html\");\n+        fd.setBounds(100, 100, 400, 400);\n+        Button showBtn = new Button(\"Show File Dialog\");\n+        frame.add(showBtn);\n+        frame.pack();\n+        showBtn.addActionListener(e -> {\n+            fd.setVisible(true);\n+            if (fd.getFile() != null) {\n+                PassFailJFrame.forceFail(\"Test failed: FileDialog returned non-null value\");\n+            } else {\n+                PassFailJFrame.log(\"Test Passed!\");\n+            }\n+        });\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogGetFileTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}