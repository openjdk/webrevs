{"files":[{"patch":"@@ -417,2 +417,2 @@\n-        flushLeftoverChar(null, true);\n-        try {\n+        try (ch; out) {\n+            flushLeftoverChar(null, true);\n@@ -433,9 +433,2 @@\n-            if (ch != null)\n-                ch.close();\n-            else {\n-                try {\n-                    out.flush();\n-                } finally {\n-                    out.close();\n-                }\n-            }\n+            if (out != null)\n+                out.flush();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/StreamEncoder.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8136895\n+ * @summary Verify stream closed after write error in StreamEncoder::implClose\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.MalformedInputException;\n+import java.nio.charset.StandardCharsets;\n+\n+public class CloseWriterOnFailedFlush {\n+    private static final String STR_IOE = \"Test\";   \/\/ IOException\n+    private static final String STR_MIE = \"\\ud83c\"; \/\/ MalformedInputException\n+\n+    public static void main(String[] args) throws IOException {\n+        boolean failed = false;\n+\n+        for (String s : new String[] {STR_IOE, STR_MIE}) {\n+            System.out.println(\"string: \" + s);\n+            ErroringOutputStream stream = new ErroringOutputStream();\n+            try (Writer writer = new OutputStreamWriter(stream,\n+                     StandardCharsets.UTF_8.newEncoder())) {\n+                writer.write(s);\n+            } catch (IOException ex) {\n+                Class exClass = ex.getClass();\n+                if (s.equals(STR_IOE) && exClass != IOException.class ||\n+                    s.equals(STR_MIE) && exClass != MalformedInputException.class)\n+                    throw ex;\n+            }\n+\n+            if (stream.isOpen()) {\n+                System.err.println(\"Stream is STILL open\");\n+                failed = true;\n+            } else {\n+                System.out.println(\"Stream is closed\");\n+            }\n+        }\n+\n+        if (failed)\n+            throw new RuntimeException(\"Test failed\");\n+    }\n+\n+    private static class ErroringOutputStream extends OutputStream {\n+        private boolean open = true;\n+\n+        @Override\n+        public void write(int b) throws IOException {\n+            throw new IOException();\n+        }\n+\n+        public boolean isOpen() {\n+            return open;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            open = false;\n+            System.out.println(\"Closing\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/OutputStreamWriter\/CloseWriterOnFailedFlush.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8136895\n+ * @summary Verify channel closed after write error in StreamEncoder::implClose\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.charset.MalformedInputException;\n+import java.nio.charset.StandardCharsets;\n+\n+public class CloseWriterOnFailedFlush {\n+    private static final String STR_IOE = \"Test\";   \/\/ IOException\n+    private static final String STR_MIE = \"\\ud83c\"; \/\/ MalformedInputException\n+\n+    public static void main(String[] args) throws IOException {\n+        boolean failed = false;\n+\n+        for (String s : new String[] {STR_IOE, STR_MIE}) {\n+            System.out.println(\"string: \" + s);\n+            ErroringByteChannel channel = new ErroringByteChannel();\n+            try (Writer writer = Channels.newWriter\n+                    (channel, StandardCharsets.UTF_8.newEncoder(), -1 )) {\n+                writer.write(s);\n+            } catch (IOException ex) {\n+                Class exClass = ex.getClass();\n+                if (s.equals(STR_IOE) && exClass != IOException.class ||\n+                    s.equals(STR_MIE) && exClass != MalformedInputException.class)\n+                    throw ex;\n+            }\n+\n+            if (channel.isOpen()) {\n+                System.err.println(\"Channel is STILL open\");\n+                failed = true;\n+            } else {\n+                System.out.println(\"Channel is closed\");\n+            }\n+        }\n+\n+        if (failed)\n+            throw new RuntimeException(\"Test failed\");\n+    }\n+\n+    private static class ErroringByteChannel implements WritableByteChannel {\n+        private boolean open = true;\n+\n+        @Override\n+        public int write(ByteBuffer src) throws IOException {\n+            throw new IOException();\n+        }\n+\n+        @Override\n+        public boolean isOpen() {\n+            return open;\n+        }\n+\n+        @Override\n+        public void close() {\n+            open = false;\n+            System.out.println(\"Closing\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/CloseWriterOnFailedFlush.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,9 @@\n+    private static void ck(String s, int actual, int expected)\n+        throws IOException {\n+        if (actual != expected) {\n+            String msg = String.format(\"%s: actual (%d) != expected (%d)%n\",\n+                                       s, actual, expected);\n+            throw new IOException(msg);\n+        }\n+    }\n+\n@@ -49,3 +58,1 @@\n-        if (out.length != expected.length) {\n-            throw new IOException(\"Failed\");\n-        }\n+        ck(\"Lengths are unequal\", out.length, expected.length);\n@@ -54,2 +61,1 @@\n-            if (out[i] != expected[i])\n-                throw new IOException(\"Failed\");\n+            ck(\"Values are unequal\", out[i], expected[i]);\n","filename":"test\/jdk\/sun\/nio\/cs\/StreamEncoderClose.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"}]}