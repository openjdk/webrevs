{"files":[{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4813831\n+ * @summary Verifies contents of table cells in HTML in JEditorPane wraps correctly\n+ * @key headful\n+ * @run main bug4813831\n+*\/\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.View;\n+import javax.swing.text.ParagraphView;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+import java.awt.Robot;\n+import java.awt.Shape;\n+\n+public class bug4813831 {\n+\n+    private static boolean passed = false;\n+    private boolean finished = false;\n+\n+    private static JEditorPane jep;\n+    private static JFrame f;\n+\n+    public void init() {\n+\n+        String text =\n+            \"<html><body>\" +\n+            \"<table border><tr>\" +\n+            \"<td align=center>XXXXXXXXXXXXXX<BR>X<BR>X<\/td>\" +\n+            \"<\/tr><\/table>\" +\n+            \"<\/body><\/html>\";\n+\n+        f = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setEditorKit(new HTMLEditorKit());\n+        jep.setEditable(false);\n+\n+        jep.setText(text);\n+\n+        f.getContentPane().add(jep);\n+        f.setSize(20,500);\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+    }\n+\n+\n+    public static void main(String args[]) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        bug4813831 test = new bug4813831();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> test.init());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            Shape r = jep.getBounds();\n+            View v = jep.getUI().getRootView(jep);\n+            do {\n+                int n = v.getViewCount();\n+                Shape sh = v.getChildAllocation(n - 1, r);\n+                if (sh != null) {\n+                    r = sh;\n+                }\n+                v = v.getView(n - 1);\n+            } while (!(v instanceof ParagraphView));\n+\n+            int n = v.getViewCount();\n+            \/\/ there should be 3 lines or more (if the first long line was wrapped) in a cell\n+            passed = n >= 3;\n+\n+            if (passed) {\n+                Shape sh = v.getChildAllocation(n - 2, r);\n+                int x1 = sh.getBounds().x;\n+                sh = v.getChildAllocation(n - 1, r);\n+                int x2 = sh.getBounds().x;\n+                System.out.println(\"x1: \" + x1 + \" x2: \" + x2);\n+                \/\/ lines should be equally aligned\n+                passed = (x1 == x2);\n+            }\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/TableView\/bug4813831.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4480602\n+ * @summary Verifies if DefaultTreeCellEditor.inHitRegion() incorrectly\n+ *          handles row bounds\n+ * @key headful\n+ * @run main bug4480602\n+*\/\n+\n+import java.awt.ComponentOrientation;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTree;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.DefaultTreeCellEditor;\n+import javax.swing.tree.DefaultTreeCellRenderer;\n+import javax.swing.SwingUtilities;\n+\n+import java.util.Date;\n+\n+public class bug4480602 {\n+\n+    static JTree tree;\n+    static JFrame fr;\n+    static MyTreeCellEditor editor;\n+\n+    static Robot robot;\n+    boolean passed = false;\n+    boolean do_test = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"Test\");\n+\n+                String s = \"0\\u05D01\\u05D02\\u05D03\\u05D04\\u05D05\";\n+                DefaultMutableTreeNode root = new DefaultMutableTreeNode(s);\n+                root.add(new DefaultMutableTreeNode(s));\n+                root.add(new DefaultMutableTreeNode(s));\n+\n+                tree = new JTree(root);\n+                editor = new MyTreeCellEditor(tree, new DefaultTreeCellRenderer());\n+                tree.setCellEditor(editor);\n+                tree.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+                tree.setEditable(true);\n+                JScrollPane sp = new JScrollPane(tree);\n+                fr.getContentPane().add(sp);\n+\n+                fr.setSize(250,200);\n+                fr.setLocationRelativeTo(null);\n+                fr.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                Rectangle rect = tree.getRowBounds(1);\n+                editor.testTreeCellEditor(rect);\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static class MyTreeCellEditor extends DefaultTreeCellEditor {\n+\n+        public MyTreeCellEditor(JTree tree, DefaultTreeCellRenderer renderer) {\n+            super(tree, renderer);\n+        }\n+\n+        public void testTreeCellEditor(Rectangle rect) {\n+            int x = rect.x + 10;\n+            int y = rect.y + rect.height \/ 2;\n+            MouseEvent me = new MouseEvent(tree,\n+                                           MouseEvent.MOUSE_PRESSED,\n+                                           (new Date()).getTime(),\n+                                           MouseEvent.BUTTON1_DOWN_MASK,\n+                                           rect.x + 10, rect.y + 10,\n+                                           1, true);\n+            isCellEditable(me);\n+\n+            if (tree == null) {\n+                throw new RuntimeException(\"isCellEditable() should set the tree\");\n+            }\n+            if (lastRow != 1) {\n+                throw new RuntimeException(\"isCellEditable() should set the lastRow\");\n+            }\n+            if (offset == 0) {\n+                throw new RuntimeException(\"isCellEditable() should determine offset\");\n+            }\n+\n+            if (!inHitRegion(x,y)) {\n+                throw new RuntimeException(\"Hit region should contain point (\"+x+\", \"+y+\")\");\n+            }\n+            x = rect.x + rect.width - 10;\n+            if (inHitRegion(x,y)) {\n+                throw new RuntimeException(\"Hit region shouldn't contain point (\"+x+\", \"+y+\")\");\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/tree\/DefaultTreeCellEditor\/bug4480602.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4180224\n+ * @summary DefaultTreeCellRenderer.hasFocus protected (not private) now.\n+ * @key headful\n+ * @run main bug4180224\n+*\/\n+\n+import javax.swing.tree.DefaultTreeCellRenderer;\n+\n+public class bug4180224 {\n+\n+    static class MyDTCR extends DefaultTreeCellRenderer {\n+        void test() {\n+            hasFocus = false;\n+        }\n+    }\n+\n+    public static void main(String[] argv) {\n+        MyDTCR m = new MyDTCR();\n+        m.test();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/tree\/DefaultTreeCellRenderer\/bug4180224.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4745001\n+ * @summary JTree with setLargeModel(true) not display correctly\n+ *          when we expand\/collapse nodes\n+ * @key headful\n+ * @run main bug4745001\n+*\/\n+\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Robot;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JTree;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.DefaultTreeModel;\n+import javax.swing.tree.TreePath;\n+import javax.swing.event.TreeExpansionEvent;\n+import javax.swing.event.TreeExpansionListener;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4745001 {\n+\n+    static JTree tree;\n+    static JFrame fr;\n+    boolean stateChanged;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        bug4745001 test = new bug4745001();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> test.init());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            test.start();\n+            robot.delay(1000);\n+            test.destroy();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        fr = new JFrame(\"Test\");\n+        fr.getContentPane().setLayout(new FlowLayout());\n+\n+        tree = new JTree();\n+        tree.setRowHeight(20);\n+        tree.setLargeModel(true);\n+        tree.setPreferredSize(new Dimension(100, 400));\n+        tree.setRootVisible(false);\n+        tree.setShowsRootHandles(true);\n+\n+        DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"\");\n+        DefaultMutableTreeNode a = new DefaultMutableTreeNode(\"a\");\n+        DefaultMutableTreeNode b = new DefaultMutableTreeNode(\"b\");\n+        DefaultMutableTreeNode c = new DefaultMutableTreeNode(\"c\");\n+        root.add(a);\n+        root.add(b);\n+        root.add(c);\n+        b.add(new DefaultMutableTreeNode(\"b1\"));\n+        c.add(new DefaultMutableTreeNode(\"c2\"));\n+        tree.setModel(new DefaultTreeModel(root));\n+\n+        fr.getContentPane().add(tree);\n+\n+        tree.addTreeExpansionListener(new TreeExpansionListener() {\n+            public void treeExpanded(TreeExpansionEvent e) {\n+                TreePath path = e.getPath();\n+                if (path != null) {\n+                    DefaultMutableTreeNode node =\n+                        (DefaultMutableTreeNode)path.getLastPathComponent();\n+                    node.removeAllChildren();\n+                    String s = (String)node.getUserObject();\n+                    node.add(new DefaultMutableTreeNode(s + \"1\"));\n+                    node.add(new DefaultMutableTreeNode(s + \"2\"));\n+                    node.add(new DefaultMutableTreeNode(s + \"3\"));\n+                    DefaultTreeModel model = (DefaultTreeModel)tree.getModel();\n+                    model.nodeStructureChanged(node);\n+                    synchronized (bug4745001.this) {\n+                        stateChanged = true;\n+                        bug4745001.this.notifyAll();\n+                    }\n+                }\n+            }\n+\n+            public void treeCollapsed(TreeExpansionEvent e) {\n+                synchronized (bug4745001.this) {\n+                    stateChanged = true;\n+                    bug4745001.this.notifyAll();\n+                }\n+            }\n+        });\n+\n+        fr.pack();\n+        fr.setVisible(true);\n+    }\n+\n+    void changeNodeStateForRow(final int row, final boolean expand) throws Exception {\n+        try {\n+            stateChanged = false;\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    try {\n+                        if (expand) {\n+                            tree.expandRow(row);\n+                        } else {\n+                            tree.collapseRow(row);\n+                        }\n+                    } catch (Exception ex) {\n+                        ex.printStackTrace();\n+                    }\n+                 }\n+            });\n+            synchronized (this) {\n+                while (!stateChanged) {\n+                    bug4745001.this.wait();\n+                }\n+            }\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+        }\n+    }\n+\n+    public void start() throws Exception {\n+        \/\/ expand node \"c\"\n+        changeNodeStateForRow(2, true);\n+        \/\/ expand node \"b\"\n+        changeNodeStateForRow(1, true);\n+        \/\/ collapse node \"c\"\n+        changeNodeStateForRow(1, false);\n+    }\n+\n+    String[] expected = new String[] {\"a\", \"b\", \"c\", \"c1\", \"c2\", \"c3\"};\n+\n+    public void destroy() {\n+        for (int i = 0; i < expected.length; i++) {\n+            Object obj = tree.getPathForRow(i).getLastPathComponent();\n+            if (!obj.toString().equals(expected[i])) {\n+                throw new RuntimeException(\"Unexpected node at row \"+i);\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/tree\/FixedHeightLayoutCache\/bug4745001.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"}]}