{"files":[{"patch":"@@ -129,1 +129,2 @@\n-  void get_cache_and_index_at_bcp(Register cache, int bcp_offset, size_t index_size = sizeof(u2));\n+  void get_cache_and_index_at_bcp(Register cache, int bcp_offset, size_t index_size = sizeof(u2),\n+                                  bool for_fast_bytecode = false);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -454,1 +454,1 @@\n-                                                           size_t index_size) {\n+                                                           size_t index_size, bool for_fast_bytecode) {\n@@ -458,0 +458,8 @@\n+\n+  if (for_fast_bytecode) {\n+    \/\/ Prevent speculative loading from ConstantPoolCacheEntry as it can miss the info written by another thread.\n+    \/\/ TemplateTable::patch_bytecode uses release-store.\n+    \/\/ We reached here via control dependency (Bytecode dispatch has used the rewritten Bytecode).\n+    \/\/ So, we can use control-isync based ordering.\n+    isync();\n+  }\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -150,1 +150,3 @@\n-  \/\/ Patch bytecode.\n+  \/\/ Patch bytecode with release store to coordinate with ConstantPoolCacheEntry\n+  \/\/ loads in fast bytecode codelets.\n+  __ release();\n@@ -314,0 +316,1 @@\n+  \/\/ Only rewritten during link time. So, no need for memory barriers for accessing resolved info.\n@@ -2380,1 +2383,1 @@\n-    __ get_cache_and_index_at_bcp(Rcache, 1);\n+    __ get_cache_and_index_at_bcp(Rcache, 1, sizeof(u2), \/* for_fast_bytecode *\/ true);\n@@ -3087,1 +3090,1 @@\n-  __ get_cache_and_index_at_bcp(Rcache, 1);\n+  __ get_cache_and_index_at_bcp(Rcache, 1, sizeof(u2), \/* for_fast_bytecode *\/ true);\n@@ -3168,1 +3171,1 @@\n-  __ get_cache_and_index_at_bcp(Rcache, 1);\n+  __ get_cache_and_index_at_bcp(Rcache, 1, sizeof(u2), \/* for_fast_bytecode *\/ true);\n@@ -3307,1 +3310,1 @@\n-  __ get_cache_and_index_at_bcp(Rcache, 2);\n+  __ get_cache_and_index_at_bcp(Rcache, 2, sizeof(u2), \/* for_fast_bytecode *\/ true);\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}