{"files":[{"patch":"@@ -605,1 +605,1 @@\n-  $1_MICRO_VM_OPTIONS := -jvmArgs $(call ShellQuote,$$($1_JMH_JVM_ARGS))\n+  $1_MICRO_VM_OPTIONS := -jvmArgsPrepend $(call ShellQuote,$$($1_JMH_JVM_ARGS))\n","filename":"make\/RunTests.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=0\"})\n+    @Fork(jvmArgs = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=0\"})\n@@ -59,1 +59,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=1\"})\n+    @Fork(jvmArgs = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=1\"})\n@@ -65,1 +65,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=2\"})\n+    @Fork(jvmArgs = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=2\"})\n@@ -71,1 +71,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=3\"})\n+    @Fork(jvmArgs = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=3\"})\n@@ -77,1 +77,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=4\"})\n+    @Fork(jvmArgs = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=4\"})\n@@ -83,1 +83,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=5\"})\n+    @Fork(jvmArgs = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=5\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ObjectHashCode.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-      jvmArgsPrepend = {\"-Djmh.executor.class=org.openjdk.bench.java.lang.ScopedValuesExecutorService\",\n+      jvmArgs = {\"-Djmh.executor.class=org.openjdk.bench.java.lang.ScopedValuesExecutorService\",\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ScopedValues.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-                .jvmArgsPrepend(\"-Djdk.net.useFastTcpLoopback=true\")\n+                .jvmArgs(\"-Djdk.net.useFastTcpLoopback=true\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketChannelConnectionSetup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-    @Fork(value = 3, jvmArgsPrepend={\"-Djava.security.manager=allow\"})\n+    @Fork(value = 3, jvmArgs={\"-Djava.security.manager=allow\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/ProtectionDomainBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/ArrayMismatchBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/BlackScholes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-@Fork(value = 3, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(value = 3, jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/EqualsIgnoreCaseBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(value = 1, jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/IndexInRangeBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(value = 1, jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/IndexVectorBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(value = 1, jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/LoadMaskedIOOBEBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskCastOperationsBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskFromLongBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskQueryOperationsBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskedLogicOpts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/RearrangeBytesBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/RotateBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskTrueCount.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(value = 1, jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskedBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(value = 1, jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskedIOOBEBenchmark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/VectorFPtoIntCastOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-@Fork(value = 3, jvmArgsPrepend = {\"-XX:-EliminateAllocations\", \"-XX:-DoEscapeAnalysis\"})\n+@Fork(value = 3, jvmArgs = {\"-XX:-EliminateAllocations\", \"-XX:-DoEscapeAnalysis\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/ClearMemory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:+UseCMoveUnconditionally\", \"-XX:+UseVectorCmov\"})\n+    @Fork(jvmArgs = {\"-XX:+UseCMoveUnconditionally\", \"-XX:+UseVectorCmov\"})\n@@ -378,1 +378,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:+UseCMoveUnconditionally\", \"-XX:+UseVectorCmov\"})\n+    @Fork(jvmArgs = {\"-XX:+UseCMoveUnconditionally\", \"-XX:+UseVectorCmov\"})\n@@ -385,1 +385,1 @@\n-    @Fork(value = 2, jvmArgsPrepend = {\n+    @Fork(value = 2, jvmArgs = {\n@@ -392,1 +392,1 @@\n-    @Fork(value = 2, jvmArgsPrepend = {\n+    @Fork(value = 2, jvmArgs = {\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/TypeVectorOperations.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    @Fork(value = 2, jvmArgsPrepend = {\n+    @Fork(value = 2, jvmArgs = {\n@@ -82,1 +82,1 @@\n-    @Fork(value = 2, jvmArgsPrepend = {\n+    @Fork(value = 2, jvmArgs = {\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorBitCount.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-    @Fork(value = 2, jvmArgsPrepend = {\n+    @Fork(value = 2, jvmArgs = {\n@@ -186,1 +186,1 @@\n-    @Fork(value = 2, jvmArgsPrepend = {\n+    @Fork(value = 2, jvmArgs = {\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorReduction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:-SuperWordLoopUnrollAnalysis\"})\n+    @Fork(jvmArgs = {\"-XX:-SuperWordLoopUnrollAnalysis\"})\n@@ -82,1 +82,1 @@\n-    @Fork(jvmArgsPrepend = {\"-XX:-SuperWordLoopUnrollAnalysis\"})\n+    @Fork(jvmArgs = {\"-XX:-SuperWordLoopUnrollAnalysis\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorReductionFloatingMinMax.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}