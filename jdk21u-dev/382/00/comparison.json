{"files":[{"patch":"@@ -24,9 +24,0 @@\n-\/*\n- * @test\n- * @bug 4185732\n- * @library \/java\/text\/testlib\n- * @build Bug4185732Test HexDumpReader\n- * @run junit Bug4185732Test\n- * @summary test that ChoiceFormat invariants are preserved across serialization.\n- *\/\n-\n@@ -67,2 +58,12 @@\n-import java.util.*;\n-import java.io.*;\n+\/*\n+ * @test\n+ * @bug 4185732\n+ * @library \/java\/text\/testlib\n+ * @build HexDumpReader\n+ * @summary Test that ChoiceFormat invariants are preserved across serialization.\n+ *          This test depends on Bug4185732.ser.txt and will fail otherwise.\n+ * @run junit Bug4185732Test\n+ *\/\n+\n+import java.io.InvalidObjectException;\n+import java.io.ObjectInputStream;\n@@ -75,3 +76,0 @@\n-\/**\n- *  A Locale can never contain language codes of he, yi or id.\n- *\/\n@@ -79,0 +77,6 @@\n+\n+    \/*\n+     * The ChoiceFormat class requires that its choiceFormats and choiceLimits\n+     * arrays have the same length. This test ensures that the invariant is enforced\n+     * during the readObject() call.\n+     *\/\n@@ -80,1 +84,1 @@\n-    public void testIt() throws Exception {\n+    public void choiceFormatSerializationInvariantsTest() {\n@@ -82,0 +86,1 @@\n+            \/\/ A serialized ChoiceFormat with unequal formats and limits\n@@ -88,3 +93,3 @@\n-                \/\/for some reason, the data file was VALID.  This test\n-                \/\/requires a corrupt data file the format and limit\n-                \/\/arrays are of different length.\n+                \/\/ for some reason, the data file was VALID.  This test\n+                \/\/ requires a corrupt data file the format and limit\n+                \/\/ arrays are of different length.\n@@ -93,4 +98,4 @@\n-        } catch (InvalidObjectException e) {\n-            \/\/this is what we want to have happen\n-        } catch (Exception e) {\n-            fail(e.toString());\n+        } catch (InvalidObjectException expectedException) {\n+            \/\/ Expecting an IOE\n+        } catch (Exception wrongException) {\n+            fail(\"Expected an InvalidObjectException, instead got: \" + wrongException);\n","filename":"test\/jdk\/java\/text\/Format\/ChoiceFormat\/Bug4185732Test.java","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,0 +28,2 @@\n+ *          (previously capped at 30).\n+ * @run junit Bug4387255\n@@ -32,1 +34,7 @@\n-public class Bug4387255 {\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n@@ -34,0 +42,1 @@\n+public class Bug4387255 {\n@@ -52,8 +61,2 @@\n-    public static void main(String[] args) throws Exception {\n-        ChoiceFormat choiceFormat1 = new ChoiceFormat(doubles, strings);\n-        ChoiceFormat choiceFormat2 = new ChoiceFormat(pattern);\n-        if (!choiceFormat1.equals(choiceFormat2)) {\n-            System.out.println(\"choiceFormat1: \" + choiceFormat1.toPattern());\n-            System.out.println(\"choiceFormat2: \" + choiceFormat2.toPattern());\n-            throw new RuntimeException();\n-        }\n+    private static final ChoiceFormat choiceFormat1 = new ChoiceFormat(doubles, strings);\n+    private static final ChoiceFormat choiceFormat2 = new ChoiceFormat(pattern);\n@@ -61,0 +64,16 @@\n+    \/\/ Ensure that both the large ChoiceFormats format each value properly\n+    @ParameterizedTest\n+    @MethodSource\n+    public void largeChoicesTest(double db, String expectedString) {\n+        String result = choiceFormat2.format(db);\n+        assertEquals(expectedString, result,\n+                \"Wrong format result with: \" + choiceFormat2);\n+    }\n+\n+\n+    \/*\n+     * Create arguments in form of : (double, string)\n+     * Each string is the expected result of ChoiceFormat.format(double)\n+     *\/\n+    private static Arguments[] largeChoicesTest() {\n+        Arguments[] doublesAndStrings = new Arguments[doubles.length];\n@@ -62,5 +81,1 @@\n-            String result = choiceFormat2.format(doubles[i]);\n-            if (!result.equals(strings[i])) {\n-                throw new RuntimeException(\"Wrong format result - expected \" +\n-                        strings[i] + \", got \" + result);\n-            }\n+            doublesAndStrings[i] = arguments(doubles[i], strings[i]);\n@@ -68,0 +83,12 @@\n+        return doublesAndStrings;\n+    }\n+\n+    \/*\n+     * Check that creating a ChoiceFormat with limits and formats arrays\n+     * equivalent to a string pattern are equal. (Checks that both constructors\n+     * allow for a large number of choices and formats)\n+     *\/\n+    @Test\n+    public void patternEqualsArraysTest() {\n+        assertEquals(choiceFormat1, choiceFormat2, \"Pattern is equivalent to \" +\n+                \"formats and limits, but ChoiceFormats are not equal\");\n","filename":"test\/jdk\/java\/text\/Format\/ChoiceFormat\/Bug4387255.java","additions":43,"deletions":16,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,0 +28,1 @@\n+ * @run junit Bug8001209\n@@ -29,1 +30,8 @@\n-import java.text.*;\n+\n+import java.text.ChoiceFormat;\n+import java.text.ParsePosition;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,2 +41,5 @@\n-    public static void main(String[] args) throws Exception {\n-        boolean err = false;\n+    \/\/ Represents the expected output of formatting the ChoiceFormat\n+    private static String expectedFormattedOutput;\n+    private static ChoiceFormat cFmt;\n+    private static ParsePosition status;\n+    private static String[] originalSetterArray;\n@@ -36,5 +47,8 @@\n-        \/\/ Borrow an example in API doc\n-        double[] limits = {1,2,3,4,5,6,7};\n-        String[] dayOfWeekNames = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"};\n-        ChoiceFormat form = new ChoiceFormat(limits, dayOfWeekNames);\n-        ParsePosition status = new ParsePosition(0);\n+    \/\/ Build the original ChoiceFormat to test if it can be mutated\n+    @BeforeAll\n+    static void setUpChoiceFormatAndOutput() {\n+        double[] limits = {1, 2, 3, 4, 5, 6, 7};\n+        originalSetterArray = new String[]{\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"};\n+        \/\/ Constructor calls setChoices\n+        cFmt = new ChoiceFormat(limits, originalSetterArray);\n+        status = new ParsePosition(0);\n@@ -42,0 +56,1 @@\n+        \/\/ Build the expected results of formatting with the original ChoiceFormat\n@@ -45,1 +60,1 @@\n-            String s = form.format(i);\n+            String s = cFmt.format(i);\n@@ -48,1 +63,1 @@\n-            before.append(form.parse(form.format(i),status));\n+            before.append(cFmt.parse(cFmt.format(i), status));\n@@ -50,1 +65,2 @@\n-        String original = before.toString();\n+        expectedFormattedOutput = before.toString();\n+    }\n@@ -52,2 +68,8 @@\n-        double[] newLimits = form.getLimits();\n-        String[] newFormats = (String[])form.getFormats();\n+    \/*\n+     * Ensure that mutating the arrays returned by getChoices and getLimits does\n+     * not affect the internal representation of the ChoiceFormat.\n+     *\/\n+    @Test\n+    public void immutableArraysFromGetters() {\n+        \/\/ Modify the array returned by getFormats() -> newFormats\n+        String[] newFormats = (String[]) cFmt.getFormats();\n@@ -58,1 +80,1 @@\n-            String s = form.format(i);\n+            String s = cFmt.format(i);\n@@ -61,6 +83,1 @@\n-            after.append(form.parse(form.format(i),status));\n-        }\n-        if (!original.equals(after.toString())) {\n-            err = true;\n-            System.err.println(\"  Expected:\" + before\n-                               + \"\\n  Got:     \" + after);\n+            after.append(cFmt.parse(cFmt.format(i), status));\n@@ -68,0 +85,4 @@\n+        \/\/ Compare the expected results with the new formatted results\n+        assertEquals(after.toString(), expectedFormattedOutput,\n+                \"Mutating array returned from getter changed internals of ChoiceFormat\");\n+    }\n@@ -69,2 +90,9 @@\n-        dayOfWeekNames[6] = \"Saturday\";\n-        after = new StringBuilder();\n+    \/*\n+     * Ensure that mutating the arrays passed to setChoices\/constructor does\n+     * not affect the internal representation of the ChoiceFormat.\n+     *\/\n+    @Test\n+    public void immutableArraysFromSetter() {\n+        \/\/ Modify the array passed to setFormats() -> dayOfWeekNames\n+        originalSetterArray[6] = \"Saturday\";\n+        StringBuilder after = new StringBuilder();\n@@ -73,1 +101,1 @@\n-            String s = form.format(i);\n+            String s = cFmt.format(i);\n@@ -76,12 +104,1 @@\n-            after.append(form.parse(form.format(i),status));\n-        }\n-        if (!original.equals(after.toString())) {\n-            err = true;\n-            System.err.println(\"  Expected:\" + before\n-                               + \"\\n  Got:     \" + after);\n-        }\n-\n-        if (err) {\n-            throw new RuntimeException(\"Failed.\");\n-        } else {\n-            System.out.println(\"Passed.\");\n+            after.append(cFmt.parse(cFmt.format(i), status));\n@@ -89,0 +106,3 @@\n+        \/\/ Compare the expected results with the new formatted results\n+        assertEquals(after.toString(), expectedFormattedOutput,\n+                \"Mutating array passed to setter changed internals of ChoiceFormat\");\n","filename":"test\/jdk\/java\/text\/Format\/ChoiceFormat\/Bug8001209.java","additions":57,"deletions":37,"binary":false,"changes":94,"status":"modified"}]}