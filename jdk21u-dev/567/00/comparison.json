{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-    constexpr int raw_encoding() const { return this - first(); }\n+    constexpr int raw_encoding() const { return checked_cast<int>(this - first()); }\n@@ -178,1 +178,1 @@\n-    constexpr int raw_encoding() const { return this - first(); }\n+    constexpr int raw_encoding() const { return checked_cast<int>(this - first()); }\n@@ -311,1 +311,1 @@\n-    int raw_encoding() const  { return this - first(); }\n+    int raw_encoding() const  { return checked_cast<int>(this - first()); }\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-    constexpr int raw_encoding() const { return this - first(); }\n+    constexpr int raw_encoding() const { return checked_cast<int>(this - first()); }\n@@ -190,1 +190,1 @@\n-    constexpr int raw_encoding() const { return this - first(); }\n+    constexpr int raw_encoding() const { return checked_cast<int>(this - first()); }\n@@ -300,1 +300,1 @@\n-    constexpr int raw_encoding() const { return this - first(); }\n+    constexpr int raw_encoding() const { return checked_cast<int>(this - first()); }\n","filename":"src\/hotspot\/cpu\/riscv\/register_riscv.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1910,1 +1910,1 @@\n-  emit_int8((int8_t)0xF2);\n+  emit_int8((uint8_t)0xF2);\n@@ -2510,1 +2510,1 @@\n-  emit_data(disp, rspec, call32_operand);\n+  emit_data(checked_cast<int32_t>(disp), rspec, call32_operand);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-      _disp (disp + (index.constant_or_zero() * scale_size(scale))),\n+      _disp (disp + checked_cast<int>(index.constant_or_zero() * scale_size(scale))),\n@@ -279,1 +279,1 @@\n-    a._disp += disp.constant_or_zero() * scale_size(scale);\n+    a._disp += checked_cast<int>(disp.constant_or_zero() * scale_size(scale));\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2038,4 +2038,4 @@\n-  emit_int8((int8_t)0x0f);\n-  emit_int8((int8_t)0x1f);\n-  emit_int8((int8_t)0x84);\n-  emit_int8((int8_t)0x00);\n+  emit_int8((uint8_t)0x0f);\n+  emit_int8((uint8_t)0x1f);\n+  emit_int8((uint8_t)0x84);\n+  emit_int8((uint8_t)0x00);\n@@ -2050,5 +2050,5 @@\n-    emit_int8((int8_t)0x26); \/\/ es:\n-    emit_int8((int8_t)0x2e); \/\/ cs:\n-    emit_int8((int8_t)0x64); \/\/ fs:\n-    emit_int8((int8_t)0x65); \/\/ gs:\n-    emit_int8((int8_t)0x90);\n+    emit_int8((uint8_t)0x26); \/\/ es:\n+    emit_int8((uint8_t)0x2e); \/\/ cs:\n+    emit_int8((uint8_t)0x64); \/\/ fs:\n+    emit_int8((uint8_t)0x65); \/\/ gs:\n+    emit_int8((uint8_t)0x90);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-      int imm8 = target - (address) &disp[1];\n+      int imm8 = checked_cast<int>(target - (address) &disp[1]);\n@@ -123,1 +123,1 @@\n-      *disp = imm8;\n+      *disp = (char)imm8;\n@@ -126,1 +126,1 @@\n-      int imm32 = target - (address) &disp[1];\n+      int imm32 = checked_cast<int>(target - (address) &disp[1]);\n@@ -752,1 +752,1 @@\n-    if (src.is_constant()) addptr(dst, src.as_constant());\n+    if (src.is_constant()) addptr(dst, checked_cast<int>(src.as_constant()));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-    constexpr int   raw_encoding() const { return this - first(); }\n+    constexpr int   raw_encoding() const { return checked_cast<int>(this - first()); }\n@@ -142,1 +142,1 @@\n-    int   raw_encoding() const { return this - first(); }\n+    int   raw_encoding() const { return checked_cast<int>(this - first()); }\n@@ -205,1 +205,1 @@\n-    constexpr int raw_encoding() const { return this - first(); }\n+    constexpr int raw_encoding() const { return checked_cast<int>(this - first()); }\n@@ -316,1 +316,1 @@\n-    int   raw_encoding() const { return this - first(); }\n+    int   raw_encoding() const { return checked_cast<int>(this - first()); }\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3148,2 +3148,2 @@\n-intx VM_Version::L1_line_size() {\n-  intx result = 0;\n+uint VM_Version::L1_line_size() {\n+  uint result = 0;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -636,1 +636,1 @@\n-  static intx L1_line_size();\n+  static uint L1_line_size();\n@@ -638,1 +638,1 @@\n-  static intx prefetch_data_size()  {\n+  static uint prefetch_data_size()  {\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  int pad = -(intptr_t)end & (required_align-1);\n+  int pad = checked_cast<int>(-(intptr_t)end & (required_align-1));\n","filename":"src\/hotspot\/share\/asm\/assembler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-      _assm->register_skipped(_assm->pc() - _start);\n+      _assm->register_skipped(checked_cast<int>(_assm->pc() - _start));\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    assert(VMRegImpl::regName[value()], \"VMRegImpl::regName[\" INTPTR_FORMAT \"] returns nullptr\", value());\n+    assert(VMRegImpl::regName[value()], \"VMRegImpl::regName[%d] returns nullptr\", value());\n","filename":"src\/hotspot\/share\/code\/vmreg.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-  intptr_t value() const { return this - first(); }\n+  int value() const { return checked_cast<int>(this - first()); }\n@@ -147,1 +147,1 @@\n-  uintptr_t reg2stack() const {\n+  int reg2stack() const {\n@@ -149,1 +149,1 @@\n-    return this - stack_0();\n+    return checked_cast<int>(this - stack_0());\n","filename":"src\/hotspot\/share\/code\/vmreg.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -284,1 +284,1 @@\n-        tty->print_cr(\"[%c][%d] -> reg (\" INTPTR_FORMAT \")\", omv.type() == OopMapValue::narrowoop_value ? 'n' : 'o', i, omv.reg()->value());\n+        tty->print_cr(\"[%c][%d] -> reg (%d)\", omv.type() == OopMapValue::narrowoop_value ? 'n' : 'o', i, omv.reg()->value());\n@@ -286,1 +286,1 @@\n-        tty->print_cr(\"[%c][%d] -> stack (\"  INTPTR_FORMAT \")\", omv.type() == OopMapValue::narrowoop_value ? 'n' : 'o', i, omv.reg()->reg2stack() * VMRegImpl::stack_slot_size);\n+        tty->print_cr(\"[%c][%d] -> stack (%d)\", omv.type() == OopMapValue::narrowoop_value ? 'n' : 'o', i, omv.reg()->reg2stack() * VMRegImpl::stack_slot_size);\n@@ -290,1 +290,1 @@\n-        tty->print_cr(\"[d][%d] -> reg (\" INTPTR_FORMAT \") stack (\" INTPTR_FORMAT \")\", i, omv.content_reg()->value(), omv.reg()->reg2stack() * VMRegImpl::stack_slot_size);\n+        tty->print_cr(\"[d][%d] -> reg (%d) stack (%d)\", i, omv.content_reg()->value(), omv.reg()->reg2stack() * VMRegImpl::stack_slot_size);\n@@ -292,1 +292,1 @@\n-        tty->print_cr(\"[d][%d] -> stack (\" INTPTR_FORMAT \") reg (\" INTPTR_FORMAT \")\", i, omv.content_reg()->reg2stack() * VMRegImpl::stack_slot_size, omv.reg()->value());\n+        tty->print_cr(\"[d][%d] -> stack (%d) reg (%d)\", i, omv.content_reg()->reg2stack() * VMRegImpl::stack_slot_size, omv.reg()->value());\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -57,3 +57,3 @@\n-  short _value;\n-  int value() const                                 { return _value; }\n-  void set_value(int value)                         { _value = value; }\n+  unsigned short _value;\n+  unsigned short value() const                      { return _value; }\n+  void set_value(unsigned short value)              { _value = value; }\n@@ -91,2 +91,2 @@\n-    void set_reg_type(VMReg p, oop_types t) {\n-    set_value((p->value() << register_shift) | t);\n+  void set_reg_type(VMReg p, oop_types t) {\n+    set_value(checked_cast<unsigned short>((p->value() << register_shift) | t));\n@@ -106,1 +106,1 @@\n-    _content_reg = r->value();\n+    _content_reg = checked_cast<short>(r->value());\n@@ -114,1 +114,1 @@\n-      stream->write_int(content_reg()->value());\n+      stream->write_int(checked_cast<int>(content_reg()->value()));\n@@ -119,1 +119,1 @@\n-    set_value(stream->read_int());\n+    set_value(checked_cast<unsigned short>(stream->read_int()));\n@@ -131,1 +131,1 @@\n-  VMReg reg() const { return VMRegImpl::as_VMReg(mask_bits(value(), register_mask_in_place) >> register_shift); }\n+  VMReg reg() const { return VMRegImpl::as_VMReg(checked_cast<int>(mask_bits(value(), register_mask_in_place) >> register_shift)); }\n","filename":"src\/hotspot\/share\/compiler\/oopMap.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-        tty->print_cr(\"missing saved register: reg: \" INTPTR_FORMAT \" %s loc: %p\", reg->value(), reg->name(), loc);\n+        tty->print_cr(\"missing saved register: reg: %d %s loc: %p\", reg->value(), reg->name(), loc);\n","filename":"src\/hotspot\/share\/compiler\/oopMap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1025,1 +1025,1 @@\n-      assert(loc != nullptr, \"missing register map entry reg: \" INTPTR_FORMAT \" %s loc: \" INTPTR_FORMAT, reg->value(), reg->name(), p2i(loc));\n+      assert(loc != nullptr, \"missing register map entry reg: %d %s loc: \" INTPTR_FORMAT, reg->value(), reg->name(), p2i(loc));\n@@ -1454,1 +1454,1 @@\n-          assert(((int)fst->reg2stack()) >= 0, \"reg2stack: \" INTPTR_FORMAT, fst->reg2stack());\n+          assert(((int)fst->reg2stack()) >= 0, \"reg2stack: %d\", fst->reg2stack());\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -520,1 +520,1 @@\n-    return a->location - b->location;\n+    return checked_cast<int>(a->location - b->location);\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1999,1 +1999,1 @@\n-    assert(a->value() == b->value(), \"register allocation mismatch: a=\" INTX_FORMAT \", b=\" INTX_FORMAT, a->value(), b->value());\n+    assert(a->value() == b->value(), \"register allocation mismatch: a= %d, b= %d\", a->value(), b->value());\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-T2 checked_cast(T1 thing) {\n+constexpr T2 checked_cast(T1 thing) {\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}