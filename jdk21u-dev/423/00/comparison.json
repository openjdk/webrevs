{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+        System.out.println(\"LoadLibraryDeadlock test started\");\n@@ -46,0 +47,1 @@\n+                    System.out.println(\"Class1 loaded from \" + getLocation(c1));\n@@ -59,1 +61,1 @@\n-                    System.out.println(\"Signed jar loaded.\");\n+                    System.out.println(\"Class2 loaded from \" + getLocation(c2));\n@@ -71,1 +73,2 @@\n-        } catch (InterruptedException ignore) {\n+        } catch (InterruptedException ex) {\n+            throw new RuntimeException(ex);\n@@ -74,0 +77,6 @@\n+\n+    private static String getLocation(Class<?> c) {\n+        var pd = c.getProtectionDomain();\n+        var cs = pd != null ? pd.getCodeSource() : null;\n+        return cs != null ? cs.getLocation().getPath() : null;\n+    }\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/LoadLibraryDeadlock.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-import java.lang.Process;\n+import java.nio.file.Path;\n@@ -45,1 +45,0 @@\n-import java.util.concurrent.*;\n@@ -48,0 +47,2 @@\n+import static jdk.test.lib.process.ProcessTools.*;\n+\n@@ -111,47 +112,0 @@\n-    private static Process runJavaCommand(String... command) throws Throwable {\n-        String java = JDKToolFinder.getJDKTool(\"java\");\n-        List<String> commands = new ArrayList<>();\n-        Collections.addAll(commands, java);\n-        Collections.addAll(commands, command);\n-        System.out.println(\"COMMAND: \" + String.join(\" \", commands));\n-        return new ProcessBuilder(commands.toArray(new String[0]))\n-                .redirectErrorStream(true)\n-                .directory(new File(testClassPath))\n-                .start();\n-    }\n-\n-    private static OutputAnalyzer jcmd(long pid, String command) throws Throwable {\n-        String jcmd = JDKToolFinder.getJDKTool(\"jcmd\");\n-        return runCommandInTestClassPath(jcmd,\n-                String.valueOf(pid),\n-                command\n-        );\n-    }\n-\n-    private static String readAvailable(final InputStream is) throws Throwable {\n-        final List<String> list = Collections.synchronizedList(new ArrayList<String>());\n-        ExecutorService executor = Executors.newFixedThreadPool(2);\n-        Future<String> future = executor.submit(new Callable<String>() {\n-            public String call() {\n-                String result = new String();\n-                BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n-                try {\n-                    while(true) {\n-                        String s = reader.readLine();\n-                        if (s.length() > 0) {\n-                            list.add(s);\n-                            result += s + \"\\n\";\n-                        }\n-                    }\n-                } catch (IOException ignore) {}\n-                return result;\n-            }\n-        });\n-        try {\n-            return future.get(1000, TimeUnit.MILLISECONDS);\n-        } catch (Exception ignoreAll) {\n-            future.cancel(true);\n-            return String.join(\"\\n\", list);\n-        }\n-    }\n-\n@@ -165,6 +119,0 @@\n-    private final static void dump(OutputAnalyzer output) {\n-        output.asLines()\n-              .stream()\n-              .forEach(s -> System.out.println(s));\n-    }\n-\n@@ -175,6 +123,7 @@\n-        FileUtils.deleteFileIfExistsWithRetry(\n-                Paths.get(testClassPath, \"a.jar\"));\n-        FileUtils.deleteFileIfExistsWithRetry(\n-                Paths.get(testClassPath, \"b.jar\"));\n-        FileUtils.deleteFileIfExistsWithRetry(\n-                Paths.get(testClassPath, \"c.jar\"));\n+        Path aJar = Path.of(testClassPath, \"a.jar\");\n+        Path bJar = Path.of(testClassPath, \"b.jar\");\n+        Path cJar = Path.of(testClassPath, \"c.jar\");\n+\n+        FileUtils.deleteFileIfExistsWithRetry(aJar);\n+        FileUtils.deleteFileIfExistsWithRetry(bJar);\n+        FileUtils.deleteFileIfExistsWithRetry(cJar);\n@@ -197,4 +146,4 @@\n-        Process process = runJavaCommand(\"-cp\",\n-                \"a.jar\" + classPathSeparator +\n-                \"b.jar\" + classPathSeparator +\n-                \"c.jar\",\n+        OutputAnalyzer outputAnalyzer = executeCommand(createTestJavaProcessBuilder(\"-cp\",\n+                aJar.toString() + classPathSeparator +\n+                bJar.toString() + classPathSeparator +\n+                cJar.toString(),\n@@ -202,13 +151,2 @@\n-                \"LoadLibraryDeadlock\");\n-\n-        \/\/ wait for a while to grab some output\n-        process.waitFor(5, TimeUnit.SECONDS);\n-\n-        \/\/ dump available output\n-        String output = readAvailable(process.getInputStream());\n-        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(output);\n-        dump(outputAnalyzer);\n-\n-        \/\/ if the process is still running, get the thread dump\n-        OutputAnalyzer outputAnalyzerJcmd = jcmd(process.pid(), \"Thread.print\");\n-        dump(outputAnalyzerJcmd);\n+                \"LoadLibraryDeadlock\"));\n+        outputAnalyzer.shouldHaveExitValue(0);\n@@ -234,2 +172,6 @@\n-                countLines(outputAnalyzer, \"Signed jar loaded.\") > 0,\n-                \"Unable to load signed jar.\");\n+                countLines(outputAnalyzer, \"Class1 loaded from \" + bJar) > 0,\n+                \"Unable to load b.jar.\");\n+\n+        Asserts.assertTrue(\n+                countLines(outputAnalyzer, \"Class2 loaded from \" + cJar) > 0,\n+                \"Unable to load signed c.jar.\");\n@@ -240,8 +182,0 @@\n-\n-        if (!process.waitFor(5, TimeUnit.SECONDS)) {\n-            \/\/ if the process is still frozen, fail the test even though\n-            \/\/ the \"deadlock\" text hasn't been found\n-            process.destroyForcibly();\n-            Asserts.assertTrue(process.waitFor() == 0,\n-                    \"Process frozen.\");\n-        }\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/TestLoadLibraryDeadlock.java","additions":23,"deletions":89,"binary":false,"changes":112,"status":"modified"}]}