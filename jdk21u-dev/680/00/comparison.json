{"files":[{"patch":"@@ -430,1 +430,1 @@\n-  template(argsize_name,                              \"argsize\")                                  \\\n+  template(bottom_name,                               \"bottom\")                                   \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -247,2 +247,2 @@\n-  st->print_cr(\"       size: %d argsize: %d max_size: %d sp: %d pc: \" PTR_FORMAT,\n-               c->stack_size(), c->argsize(), c->max_thawing_size(), c->sp(), p2i(c->pc()));\n+  st->print_cr(\"       size: %d bottom: %d max_size: %d sp: %d pc: \" PTR_FORMAT,\n+               c->stack_size(), c->bottom(), c->max_thawing_size(), c->sp(), p2i(c->pc()));\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -210,0 +210,2 @@\n+  jint int_field_relaxed(int offset) const;\n+  void int_field_put_relaxed(int offset, jint contents);\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -241,0 +241,2 @@\n+inline jint oopDesc::int_field_relaxed(int offset) const            { return Atomic::load(field_addr<jint>(offset)); }\n+inline void oopDesc::int_field_put_relaxed(int offset, jint value)  { Atomic::store(field_addr<jint>(offset), value); }\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -538,1 +538,0 @@\n-  assert(argsize() >= 0, \"\");\n@@ -542,1 +541,0 @@\n-    assert(argsize() == 0, \"\");\n@@ -544,0 +542,2 @@\n+  } else {\n+    assert(argsize() >= 0, \"\");\n@@ -552,1 +552,1 @@\n-  int size = stack_size() - argsize() - sp();\n+  int size = bottom() - sp();\n@@ -575,6 +575,9 @@\n-    assert(closure._size <= size + argsize() + frame::metadata_words,\n-           \"size: %d argsize: %d closure.size: %d end sp: \" PTR_FORMAT \" start sp: %d chunk size: %d\",\n-           size, argsize(), closure._size, closure._sp - start_address(), sp(), stack_size());\n-    assert(argsize() == closure._argsize - (closure._num_frames > 0 ? frame::metadata_words_at_top : 0),\n-           \"argsize(): %d closure.argsize: %d closure.callee_interpreted: %d\",\n-           argsize(), closure._argsize, closure._callee_interpreted);\n+    assert(closure._size <= size + (stack_size() - bottom()),\n+           \"size: %d bottom: %d closure.size: %d end sp: \" PTR_FORMAT \" start sp: %d chunk size: %d\",\n+           size, bottom(), closure._size, closure._sp - start_address(), sp(), stack_size());\n+    if (closure._num_frames > 0) {\n+      assert(closure._argsize >= frame::metadata_words_at_top, \"should be set up\");\n+      assert(argsize() == closure._argsize - frame::metadata_words_at_top,\n+             \"argsize(): %d closure.argsize: %d closure.callee_interpreted: %d\",\n+             argsize(), closure._argsize, closure._callee_interpreted);\n+    }\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -104,0 +104,1 @@\n+  inline void set_bottom(int value);\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,0 +63,3 @@\n+inline int stackChunkOopDesc::bottom() const            { return jdk_internal_vm_StackChunk::bottom(as_oop()); }\n+inline void stackChunkOopDesc::set_bottom(int value)    { jdk_internal_vm_StackChunk::set_bottom(this, value); }\n+\n@@ -69,3 +72,0 @@\n-inline int stackChunkOopDesc::argsize() const           { return jdk_internal_vm_StackChunk::argsize(as_oop()); }\n-inline void stackChunkOopDesc::set_argsize(int value)   { jdk_internal_vm_StackChunk::set_argsize(as_oop(), value); }\n-\n@@ -111,1 +111,4 @@\n-inline int stackChunkOopDesc::bottom() const { return stack_size() - argsize() - frame::metadata_words_at_top; }\n+inline int stackChunkOopDesc::argsize() const {\n+  assert(!is_empty(), \"should not ask for argsize in empty chunk\");\n+  return stack_size() - bottom() - frame::metadata_words_at_top;\n+}\n@@ -135,4 +138,2 @@\n-  assert(sp() <= stack_size(), \"\");\n-  assert((sp() == stack_size()) == (sp() >= stack_size() - argsize() - frame::metadata_words_at_top),\n-    \"sp: %d size: %d argsize: %d\", sp(), stack_size(), argsize());\n-  return sp() == stack_size();\n+  assert(sp() <= bottom(), \"\");\n+  return sp() == bottom();\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -406,1 +406,1 @@\n-  virtual stackChunkOop allocate_chunk_slow(size_t stack_size) = 0;\n+  virtual stackChunkOop allocate_chunk_slow(size_t stack_size, int argsize_md) = 0;\n@@ -441,8 +441,0 @@\n-\n-#ifdef ASSERT\n-  bool is_empty(stackChunkOop chunk) {\n-    \/\/ during freeze, the chunk is in an intermediate state (after setting the chunk's argsize but before setting its\n-    \/\/ ultimate sp) so we use this instead of stackChunkOopDesc::is_empty\n-    return chunk->sp() >= chunk->stack_size() - chunk->argsize() - frame::metadata_words_at_top;\n-  }\n-#endif\n@@ -454,1 +446,1 @@\n-  stackChunkOop allocate_chunk(size_t stack_size);\n+  stackChunkOop allocate_chunk(size_t stack_size, int argsize_md);\n@@ -463,1 +455,1 @@\n-  virtual stackChunkOop allocate_chunk_slow(size_t stack_size) override { return allocate_chunk(stack_size); }\n+  virtual stackChunkOop allocate_chunk_slow(size_t stack_size, int argsize_md) override { return allocate_chunk(stack_size, argsize_md); }\n@@ -546,1 +538,1 @@\n-  stackChunkOop chunk = allocate_chunk(cont_size() + frame::metadata_words);\n+  stackChunkOop chunk = allocate_chunk(cont_size() + frame::metadata_words, _cont.argsize() + frame::metadata_words_at_top);\n@@ -575,1 +567,1 @@\n-  if (chunk_sp < chunk->stack_size()) {\n+  if (!chunk->is_empty()) {\n@@ -588,1 +580,0 @@\n-  DEBUG_ONLY(_orig_chunk_sp = chunk->sp_address();)\n@@ -593,1 +584,1 @@\n-  if (chunk->sp() < chunk->stack_size()) { \/\/ we are copying into a non-empty chunk\n+  if (!chunk->is_empty()) { \/\/ we are copying into a non-empty chunk\n@@ -595,1 +586,1 @@\n-    assert(chunk->sp() < (chunk->stack_size() - chunk->argsize()), \"\");\n+    DEBUG_ONLY(_orig_chunk_sp = chunk->sp_address();)\n@@ -633,2 +624,1 @@\n-    DEBUG_ONLY(_empty = true;)\n-    const int chunk_start_sp = chunk->sp();\n+    const int chunk_start_sp = chunk->stack_size();\n@@ -636,1 +626,2 @@\n-    assert(chunk_start_sp == chunk->stack_size(), \"\");\n+    DEBUG_ONLY(_empty = true;)\n+    DEBUG_ONLY(_orig_chunk_sp = chunk->start_address() + chunk_start_sp;)\n@@ -639,1 +630,2 @@\n-    chunk->set_argsize(_cont.argsize());\n+    chunk->set_bottom(chunk_start_sp - _cont.argsize() - frame::metadata_words_at_top);\n+    chunk->set_sp(chunk->bottom());\n@@ -657,1 +649,0 @@\n-  chunk->set_argsize(_cont.argsize());\n@@ -934,1 +925,0 @@\n-    unextended_sp = chunk->sp();\n@@ -942,0 +932,2 @@\n+    } else {\n+      unextended_sp = chunk->stack_size() - frame::metadata_words_at_top;\n@@ -979,1 +971,1 @@\n-    chunk = allocate_chunk_slow(_freeze_size);\n+    chunk = allocate_chunk_slow(_freeze_size, argsize_md);\n@@ -986,5 +978,1 @@\n-\n-    int sp = chunk->stack_size() - argsize_md;\n-    chunk->set_sp(sp);\n-    chunk->set_argsize(argsize);\n-    assert(is_empty(chunk), \"\");\n+    assert(chunk->is_empty(), \"\");\n@@ -997,1 +985,1 @@\n-      chunk->set_argsize(argsize);\n+      chunk->set_bottom(sp);\n@@ -1007,1 +995,1 @@\n-  assert(!_barriers || is_empty(chunk), \"\");\n+  assert(!_barriers || chunk->is_empty(), \"\");\n@@ -1009,2 +997,2 @@\n-  assert(!is_empty(chunk) || StackChunkFrameStream<ChunkFrames::Mixed>(chunk).is_done(), \"\");\n-  assert(!is_empty(chunk) || StackChunkFrameStream<ChunkFrames::Mixed>(chunk).to_frame().is_empty(), \"\");\n+  assert(!chunk->is_empty() || StackChunkFrameStream<ChunkFrames::Mixed>(chunk).is_done(), \"\");\n+  assert(!chunk->is_empty() || StackChunkFrameStream<ChunkFrames::Mixed>(chunk).to_frame().is_empty(), \"\");\n@@ -1056,1 +1044,1 @@\n-    assert((last_pc == nullptr) == is_empty(_cont.tail()), \"\");\n+    assert((last_pc == nullptr) == _cont.tail()->is_empty(), \"\");\n@@ -1310,0 +1298,1 @@\n+  int                                          _argsize_md;\n@@ -1325,0 +1314,2 @@\n+    int bottom = (int)_stack_size - _argsize_md;\n+\n@@ -1326,1 +1317,2 @@\n-    jdk_internal_vm_StackChunk::set_sp(mem, (int)_stack_size);\n+    jdk_internal_vm_StackChunk::set_bottom(mem, bottom);\n+    jdk_internal_vm_StackChunk::set_sp(mem, bottom);\n@@ -1350,0 +1342,1 @@\n+                      int argsize_md,\n@@ -1354,0 +1347,1 @@\n+      _argsize_md(argsize_md),\n@@ -1387,1 +1381,1 @@\n-stackChunkOop Freeze<ConfigT>::allocate_chunk(size_t stack_size) {\n+stackChunkOop Freeze<ConfigT>::allocate_chunk(size_t stack_size, int argsize_md) {\n@@ -1409,1 +1403,1 @@\n-  StackChunkAllocator allocator(klass, size_in_words, current, stack_size, _cont, _jvmti_event_collector);\n+  StackChunkAllocator allocator(klass, size_in_words, current, stack_size, argsize_md, _cont, _jvmti_event_collector);\n@@ -1419,1 +1413,1 @@\n-  assert(chunk->sp() == chunk->stack_size(), \"\");\n+  assert(chunk->sp() == chunk->bottom(), \"\");\n@@ -1423,1 +1417,1 @@\n-  assert(chunk->argsize() == 0, \"\");\n+  assert(chunk->is_empty(), \"\");\n@@ -1856,2 +1850,1 @@\n-  chunk->set_sp(chunk->stack_size());\n-  chunk->set_argsize(0);\n+  chunk->set_sp(chunk->bottom());\n@@ -1861,1 +1854,1 @@\n- int ThawBase::remove_top_compiled_frame_from_chunk(stackChunkOop chunk, int &argsize) {\n+int ThawBase::remove_top_compiled_frame_from_chunk(stackChunkOop chunk, int &argsize) {\n@@ -2108,2 +2101,1 @@\n-    chunk->set_argsize(0);\n-    chunk->set_sp(chunk->stack_size());\n+    chunk->set_sp(chunk->bottom());\n@@ -2381,1 +2373,0 @@\n-    assert(chunk->argsize() == 0, \"\");\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":35,"deletions":44,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-int jdk_internal_vm_StackChunk::_argsize_offset;\n+int jdk_internal_vm_StackChunk::_bottom_offset;\n@@ -96,1 +96,1 @@\n-  macro(_argsize_offset, k, vmSymbols::argsize_name(), int_signature,        false);\n+  macro(_bottom_offset,  k, vmSymbols::bottom_name(),  int_signature,        false);\n","filename":"src\/hotspot\/share\/runtime\/continuationJavaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-  static int _argsize_offset;\n+  static int _bottom_offset;\n@@ -115,2 +115,3 @@\n-  static inline int argsize(oop chunk);\n-  static inline void set_argsize(oop chunk, int value);\n+  static inline int bottom(oop chunk);\n+  static inline void set_bottom(oop chunk, int value);\n+  static inline void set_bottom(HeapWord* chunk, int value);\n","filename":"src\/hotspot\/share\/runtime\/continuationJavaClasses.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -118,0 +118,7 @@\n+inline void jdk_internal_vm_StackChunk::set_bottom(HeapWord* chunk, int value) {\n+  \/\/ Used by StackChunkAllocator before the Object has been finished,\n+  \/\/ so don't cast too oop and use int_field_put in this function.\n+  assert(_bottom_offset != 0, \"must be set\");\n+  *(int*)(((char*)chunk) + _bottom_offset) = (int)value;\n+}\n+\n@@ -119,1 +126,1 @@\n-  return chunk->int_field(_sp_offset);\n+  return chunk->int_field_relaxed(_sp_offset);\n@@ -123,1 +130,1 @@\n-  chunk->int_field_put(_sp_offset, value);\n+  chunk->int_field_put_relaxed(_sp_offset, value);\n@@ -141,2 +148,2 @@\n-inline int jdk_internal_vm_StackChunk::argsize(oop chunk) {\n-  return chunk->int_field(_argsize_offset);\n+inline int jdk_internal_vm_StackChunk::bottom(oop chunk) {\n+  return chunk->int_field(_bottom_offset);\n@@ -145,2 +152,2 @@\n-inline void jdk_internal_vm_StackChunk::set_argsize(oop chunk, int value) {\n-  chunk->int_field_put(_argsize_offset, value);\n+inline void jdk_internal_vm_StackChunk::set_bottom(oop chunk, int value) {\n+  chunk->int_field_put(_bottom_offset, value);\n","filename":"src\/hotspot\/share\/runtime\/continuationJavaClasses.inline.hpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    private int argsize; \/\/ bottom stack-passed arguments, in words\n+    private int bottom;  \/\/ in words\n@@ -39,1 +39,1 @@\n-    public boolean isEmpty()   { return sp >= (size - argsize); }\n+    public boolean isEmpty()   { return sp == bottom; }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/StackChunk.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}