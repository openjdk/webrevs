{"files":[{"patch":"@@ -3365,0 +3365,2 @@\n+                case FINAL:\n+                    if (parenDepth > 0) return PatternResult.PATTERN;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,4 +2,2 @@\n-T8317300.java:20:22: compiler.err.illegal.start.of.expr\n-T8317300.java:20:31: compiler.err.expected: token.identifier\n-T8317300.java:20:37: compiler.err.expected: ';'\n-4 errors\n+T8317300.java:20:22: compiler.err.mod.not.allowed.here: final\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8317300.out","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8320145\n+ * @summary Compiler should accept final variable in Record Pattern\n+ * @compile T8320145.java\n+ *\/\n+public class T8320145 {\n+    record ARecord(String aComponent) {}\n+    record BRecord(ARecord aComponent) {}\n+    record CRecord(ARecord aComponent1, ARecord aComponent2) {}\n+\n+    public String match(Object o) {\n+        return switch(o) {\n+            case ARecord(final String s) -> s;\n+            case BRecord(ARecord(final String s)) -> s;\n+            case CRecord(ARecord(String s), ARecord(final String s2)) -> s;\n+            default -> \"No match\";\n+        };\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8320145.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"}]}