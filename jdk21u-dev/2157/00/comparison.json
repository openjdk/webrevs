{"files":[{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4210461\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests that Windows Look & Feel's MenuItem Accelerator Delimiter is\n+ * shown properly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual WindowsLAFMenuAcceleratorDelimiter\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.KeyStroke;\n+import javax.swing.UIManager;\n+\n+public class WindowsLAFMenuAcceleratorDelimiter {\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\n+                \"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"The Windows LAF failed to instantiate\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+            The visual design specification for the Windows LAF asks for\n+            a \"+\" to delimit the other two entities in a menuitem's\n+            accelerator.\n+\n+            As a point of reference, the visual design specifications for the\n+            L&Fs are as follows: JLF\/Metal = \"-\", Mac = \"-\", Motif = \"+\",\n+            Windows = \"+\".\n+\n+            Click on \"Menu\" of \"WindowsLAFMenuAcceleratorDelimiter\" window,\n+            make sure it shows MenuItem with label \"Hi There! Ctrl+H\".\n+\n+            If it shows same label test passed otherwise failed.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(50)\n+            .testUI(WindowsLAFMenuAcceleratorDelimiter::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        JFrame fr = new JFrame(\"WindowsLAFMenuAcceleratorDelimiter\");\n+        JPanel menuPanel = new JPanel();\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.setOpaque(true);\n+        JMenu exampleMenu = new JMenu(\"Menu\");\n+        JMenuItem hiMenuItem = new JMenuItem(\"Hi There!\");\n+        hiMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,\n+            ActionEvent.CTRL_MASK));\n+        exampleMenu.add(hiMenuItem);\n+        menuBar.add(exampleMenu);\n+        menuPanel.add(menuBar);\n+\n+        fr.setLayout(new BorderLayout());\n+        fr.add(menuPanel, BorderLayout.CENTER);\n+        fr.setSize(250, 100);\n+        return fr;\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/windows\/MenuItem\/AcceleratorDelimiter\/WindowsLAFMenuAcceleratorDelimiter.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4227768\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests Z-ordering of Windows Look-and-Feel JInternalFrames\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4227768\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Toolkit;\n+import java.beans.PropertyVetoException;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.UIManager;\n+\n+public class bug4227768 {\n+    private static JDesktopPane desktop ;\n+    private static JFrame frame;\n+    private static int openFrameCount = 0;\n+    private static final int xOffset = 30;\n+    private static final int yOffset = 30;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel\n+                (\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to set Windows LAF\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+            Close the internal frame titled \"Document #4\". The internal frame\n+            titled \"Document #3\" should get active. Now close the internal\n+            frame titled \"Document #2\". The internal frame titled \"Document #3\"\n+            should remain active. If something is not like this, then test\n+            failed. Otherwise test succeeded.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(50)\n+            .testUI(bug4227768::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        frame = new JFrame(\"bug4227768\");\n+        frame.setSize(screenSize.width \/ 3, screenSize.height \/ 3);\n+        frame.add(desktop = new JDesktopPane());\n+        createFrame();\n+        createFrame();\n+        createFrame();\n+        createFrame();\n+        desktop.putClientProperty(\"JDesktopPane.dragMode\", \"outline\");\n+        return frame;\n+    }\n+\n+    protected static void createFrame() {\n+        JInternalFrame internalFrame = new JInternalFrame\n+            (\"Document #\" + (++openFrameCount), true, true, true, true);\n+        internalFrame.setSize(frame.getWidth() \/ 2, frame.getHeight() \/ 2);\n+        internalFrame.setLocation(xOffset * openFrameCount,\n+            yOffset * openFrameCount);\n+        desktop.add(internalFrame);\n+        internalFrame.setVisible(true);\n+        try {\n+            internalFrame.setSelected(true);\n+        } catch (PropertyVetoException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/windows\/WindowsDesktopManager\/4227768\/bug4227768.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4305725\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests if in Win LAF the JOptionPane.showInternalMessageDialog() is\n+ * not maximized to match background maximized internal frame.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4305725\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JLayeredPane;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.UIManager;\n+\n+public class bug4305725 implements ActionListener {\n+    private static JDesktopPane desktop ;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel\n+                (\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to set Windows LAF\");\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+            Maximize the internal frame, then call Exit from File menu.\n+            You will see a message box. If message box is also the size of\n+            internal frame, then test failed. If it is of usual size,\n+            then test is passed.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(50)\n+            .testUI(bug4305725::initialize)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        JFrame frame = new JFrame(\"bug4305725\");\n+        frame.add(desktop = new JDesktopPane());\n+        JMenuBar mb = new JMenuBar() ;\n+        JMenu menu = new JMenu(\"File\");\n+        mb.add(menu) ;\n+        JMenuItem menuItem = menu.add(new JMenuItem(\"Exit\"));\n+        menuItem.addActionListener(new bug4305725()) ;\n+        frame.setJMenuBar(mb) ;\n+        Dimension sDim = Toolkit.getDefaultToolkit().getScreenSize();\n+        frame.setSize(sDim.width \/ 2, sDim.height \/ 2) ;\n+        JInternalFrame internalFrame = new JInternalFrame\n+            (\"Internal\", true, true, true, true);\n+        internalFrame.setSize(frame.getWidth(), frame.getHeight() \/ 2);\n+        internalFrame.setVisible(true);\n+        desktop.add(internalFrame, JLayeredPane.FRAME_CONTENT_LAYER);\n+        return frame;\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent aEvent) {\n+        JOptionPane.showInternalMessageDialog(desktop, \"Exiting test app\");\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/windows\/WindowsDesktopManager\/4305725\/bug4305725.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}