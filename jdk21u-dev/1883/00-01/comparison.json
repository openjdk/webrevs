{"files":[{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.intrinsics.sha.cli.testcases;\n+\n+import compiler.intrinsics.sha.cli.DigestOptionsBase;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n+\n+\/**\n+ * Generic test case for SHA-related options targeted to CPUs\n+ * which don't support instruction required by the tested option.\n+ *\/\n+public class GenericTestCaseForUnsupportedCPU extends\n+        DigestOptionsBase.TestCase {\n+\n+    final private boolean checkUseSHA;\n+\n+    public GenericTestCaseForUnsupportedCPU(String optionName) {\n+        this(optionName, true);\n+    }\n+\n+    public GenericTestCaseForUnsupportedCPU(String optionName, boolean checkUseSHA) {\n+        super(optionName,\n+                new NotPredicate(DigestOptionsBase.getPredicateForOption(\n+                        optionName)));\n+\n+        this.checkUseSHA = checkUseSHA;\n+    }\n+\n+    @Override\n+    protected void verifyWarnings() throws Throwable {\n+        String shouldPassMessage = String.format(\"JVM startup should pass with\"\n+                + \"option '-XX:-%s' without any warnings\", optionName);\n+        \/\/Verify that option could be disabled without any warnings.\n+        CommandLineOptionTest.verifySameJVMStartup(null, new String[] {\n+                        DigestOptionsBase.getWarningForUnsupportedCPU(optionName)\n+                }, shouldPassMessage, shouldPassMessage, ExitCode.OK,\n+                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n+                CommandLineOptionTest.prepareBooleanFlag(optionName, false));\n+\n+        if (checkUseSHA) {\n+            shouldPassMessage = String.format(\"If JVM is started with '-XX:-\"\n+                    + \"%s' '-XX:+%s', output should contain warning.\",\n+                    DigestOptionsBase.USE_SHA_OPTION, optionName);\n+\n+            \/\/ Verify that when the tested option is enabled, then\n+            \/\/ a warning will occur in VM output if UseSHA is disabled.\n+            if (!optionName.equals(DigestOptionsBase.USE_SHA_OPTION)) {\n+                CommandLineOptionTest.verifySameJVMStartup(\n+                        new String[] { DigestOptionsBase.getWarningForUnsupportedCPU(optionName) },\n+                        null,\n+                        shouldPassMessage,\n+                        shouldPassMessage,\n+                        ExitCode.OK,\n+                        DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n+                        CommandLineOptionTest.prepareBooleanFlag(DigestOptionsBase.USE_SHA_OPTION, false),\n+                        CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void verifyOptionValues() throws Throwable {\n+        \/\/ Verify that option is disabled by default.\n+        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n+                String.format(\"Option '%s' should be disabled by default\",\n+                        optionName),\n+                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS);\n+\n+        \/\/ Verify that option is disabled even if it was explicitly enabled\n+        \/\/ using CLI options.\n+        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n+                String.format(\"Option '%s' should be off on unsupported \"\n+                        + \"CPU even if set to true directly\", optionName),\n+                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n+                CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n+\n+        if (checkUseSHA) {\n+            \/\/ Verify that option is disabled when +UseSHA was passed to JVM.\n+            CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n+                    String.format(\"Option '%s' should be off on unsupported \"\n+                            + \"CPU even if %s flag set to JVM\",\n+                            optionName, CommandLineOptionTest.prepareBooleanFlag(\n+                                DigestOptionsBase.USE_SHA_OPTION, true)),\n+                    DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n+                    CommandLineOptionTest.prepareBooleanFlag(\n+                            DigestOptionsBase.USE_SHA_OPTION, true));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedCPU.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}