{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,4 +40,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForOtherCPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedAArch64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedX86CPU;\n-import compiler.intrinsics.sha.cli.testcases.UseSHAIntrinsicsSpecificTestCaseForUnsupportedCPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedCPU;\n@@ -48,6 +45,2 @@\n-                new GenericTestCaseForUnsupportedX86CPU(\n-                        DigestOptionsBase.USE_MD5_INTRINSICS_OPTION, \/* checkUseSHA = *\/ false),\n-                new GenericTestCaseForUnsupportedAArch64CPU(\n-                        DigestOptionsBase.USE_MD5_INTRINSICS_OPTION, \/* checkUseSHA = *\/ false),\n-                new GenericTestCaseForOtherCPU(\n-                        DigestOptionsBase.USE_MD5_INTRINSICS_OPTION, \/* checkUseSHA = *\/ false)).test();\n+                new GenericTestCaseForUnsupportedCPU(\n+                         DigestOptionsBase.USE_MD5_INTRINSICS_OPTION, \/* checkUseSHA = *\/ false)).test();\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseMD5IntrinsicsOptionOnUnsupportedCPU.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,4 +40,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForOtherCPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedAArch64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRISCV64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedX86CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedCPU;\n@@ -49,5 +46,1 @@\n-                new GenericTestCaseForUnsupportedX86CPU(\n-                        DigestOptionsBase.USE_SHA1_INTRINSICS_OPTION),\n-                new GenericTestCaseForUnsupportedAArch64CPU(\n-                        DigestOptionsBase.USE_SHA1_INTRINSICS_OPTION),\n-                new GenericTestCaseForUnsupportedRISCV64CPU(\n+                new GenericTestCaseForUnsupportedCPU(\n@@ -56,2 +49,0 @@\n-                        DigestOptionsBase.USE_SHA1_INTRINSICS_OPTION),\n-                new GenericTestCaseForOtherCPU(\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA1IntrinsicsOptionOnUnsupportedCPU.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,4 +40,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForOtherCPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedAArch64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRISCV64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedX86CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedCPU;\n@@ -49,5 +46,1 @@\n-                new GenericTestCaseForUnsupportedX86CPU(\n-                        DigestOptionsBase.USE_SHA256_INTRINSICS_OPTION),\n-                new GenericTestCaseForUnsupportedAArch64CPU(\n-                        DigestOptionsBase.USE_SHA256_INTRINSICS_OPTION),\n-                new GenericTestCaseForUnsupportedRISCV64CPU(\n+                new GenericTestCaseForUnsupportedCPU(\n@@ -56,2 +49,0 @@\n-                        DigestOptionsBase.USE_SHA256_INTRINSICS_OPTION),\n-                new GenericTestCaseForOtherCPU(\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA256IntrinsicsOptionOnUnsupportedCPU.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -41,3 +41,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForOtherCPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedAArch64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedX86CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedCPU;\n@@ -49,3 +47,1 @@\n-                new GenericTestCaseForUnsupportedX86CPU(\n-                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION),\n-                new GenericTestCaseForUnsupportedAArch64CPU(\n+                new GenericTestCaseForUnsupportedCPU(\n@@ -54,2 +50,0 @@\n-                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION),\n-                new GenericTestCaseForOtherCPU(\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA3IntrinsicsOptionOnUnsupportedCPU.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,4 +40,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForOtherCPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedAArch64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRISCV64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedX86CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedCPU;\n@@ -49,5 +46,1 @@\n-                new GenericTestCaseForUnsupportedX86CPU(\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION),\n-                new GenericTestCaseForUnsupportedAArch64CPU(\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION),\n-                new GenericTestCaseForUnsupportedRISCV64CPU(\n+                new GenericTestCaseForUnsupportedCPU(\n@@ -56,2 +49,0 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION),\n-                new GenericTestCaseForOtherCPU(\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA512IntrinsicsOptionOnUnsupportedCPU.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,4 +40,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForOtherCPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedAArch64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRISCV64CPU;\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedX86CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedCPU;\n@@ -49,5 +46,1 @@\n-                new GenericTestCaseForUnsupportedX86CPU(\n-                        DigestOptionsBase.USE_SHA_OPTION),\n-                new GenericTestCaseForUnsupportedAArch64CPU(\n-                        DigestOptionsBase.USE_SHA_OPTION),\n-                new GenericTestCaseForUnsupportedRISCV64CPU(\n+                new GenericTestCaseForUnsupportedCPU(\n@@ -56,2 +49,0 @@\n-                        DigestOptionsBase.USE_SHA_OPTION),\n-                new GenericTestCaseForOtherCPU(\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHAOptionOnUnsupportedCPU.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.intrinsics.sha.cli.testcases;\n-\n-import compiler.intrinsics.sha.cli.DigestOptionsBase;\n-import jdk.test.lib.process.ExitCode;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.cli.CommandLineOptionTest;\n-import jdk.test.lib.cli.predicate.NotPredicate;\n-import jdk.test.lib.cli.predicate.OrPredicate;\n-\n-\/**\n- * Generic test case for SHA-related options targeted to any CPU except\n- * AArch64, RISCV64, PPC, S390x, and X86.\n- *\/\n-public class GenericTestCaseForOtherCPU extends\n-        DigestOptionsBase.TestCase {\n-\n-    final private boolean checkUseSHA;\n-\n-    public GenericTestCaseForOtherCPU(String optionName) {\n-        this(optionName, true);\n-    }\n-\n-    public GenericTestCaseForOtherCPU(String optionName, boolean checkUseSHA) {\n-        \/\/ Execute the test case on any CPU except AArch64, RISCV64, PPC, S390x, and X86.\n-        super(optionName, new NotPredicate(\n-                              new OrPredicate(Platform::isAArch64,\n-                              new OrPredicate(Platform::isRISCV64,\n-                              new OrPredicate(Platform::isS390x,\n-                              new OrPredicate(Platform::isPPC,\n-                              new OrPredicate(Platform::isX64,\n-                                              Platform::isX86)))))));\n-\n-        this.checkUseSHA = checkUseSHA;\n-    }\n-\n-    @Override\n-    protected void verifyWarnings() throws Throwable {\n-        String shouldPassMessage = String.format(\"JVM should start with \"\n-                + \"option '%s' without any warnings\", optionName);\n-        \/\/ Verify that on non-x86, non-RISCV64 and non-AArch64 CPU usage of SHA-related\n-        \/\/ options will not cause any warnings.\n-        CommandLineOptionTest.verifySameJVMStartup(null,\n-                new String[] { \".*\" + optionName + \".*\" }, shouldPassMessage,\n-                shouldPassMessage, ExitCode.OK,\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n-\n-        CommandLineOptionTest.verifySameJVMStartup(null,\n-                new String[] { \".*\" + optionName + \".*\" }, shouldPassMessage,\n-                shouldPassMessage, ExitCode.OK,\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                CommandLineOptionTest.prepareBooleanFlag(optionName, false));\n-    }\n-\n-    @Override\n-    protected void verifyOptionValues() throws Throwable {\n-        \/\/ Verify that option is disabled by default.\n-        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                String.format(\"Option '%s' should be disabled by default\",\n-                        optionName),\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS);\n-\n-        \/\/ Verify that option is disabled even if it was explicitly enabled\n-        \/\/ using CLI options.\n-        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                String.format(\"Option '%s' should be off on unsupported \"\n-                        + \"CPU even if set to true directly\", optionName),\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n-\n-        if (checkUseSHA) {\n-            \/\/ Verify that option is disabled when it explicitly disabled\n-            \/\/ using CLI options.\n-            CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                    String.format(\"Option '%s' should be off on unsupported CPU\"\n-                            + \" even if '%s' flag set to JVM\", optionName,\n-                            CommandLineOptionTest.prepareBooleanFlag(\n-                            DigestOptionsBase.USE_SHA_OPTION, true)),\n-                    DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                    CommandLineOptionTest.prepareBooleanFlag(optionName, false));\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForOtherCPU.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.intrinsics.sha.cli.testcases;\n-\n-import compiler.intrinsics.sha.cli.DigestOptionsBase;\n-import jdk.test.lib.process.ExitCode;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.cli.CommandLineOptionTest;\n-import jdk.test.lib.cli.predicate.AndPredicate;\n-import jdk.test.lib.cli.predicate.NotPredicate;\n-\n-\/**\n- * Generic test case for SHA-related options targeted to AArch64 CPUs\n- * which don't support instruction required by the tested option.\n- *\/\n-public class GenericTestCaseForUnsupportedAArch64CPU extends\n-        DigestOptionsBase.TestCase {\n-\n-    final private boolean checkUseSHA;\n-\n-    public GenericTestCaseForUnsupportedAArch64CPU(String optionName) {\n-        this(optionName, true);\n-    }\n-\n-    public GenericTestCaseForUnsupportedAArch64CPU(String optionName, boolean checkUseSHA) {\n-        super(optionName, new AndPredicate(Platform::isAArch64,\n-                new NotPredicate(DigestOptionsBase.getPredicateForOption(\n-                        optionName))));\n-\n-        this.checkUseSHA = checkUseSHA;\n-    }\n-\n-    @Override\n-    protected void verifyWarnings() throws Throwable {\n-        String shouldPassMessage = String.format(\"JVM startup should pass with\"\n-                + \"option '-XX:-%s' without any warnings\", optionName);\n-        \/\/Verify that option could be disabled without any warnings.\n-        CommandLineOptionTest.verifySameJVMStartup(null, new String[] {\n-                        DigestOptionsBase.getWarningForUnsupportedCPU(optionName)\n-                }, shouldPassMessage, shouldPassMessage, ExitCode.OK,\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                CommandLineOptionTest.prepareBooleanFlag(optionName, false));\n-\n-        if (checkUseSHA) {\n-            shouldPassMessage = String.format(\"If JVM is started with '-XX:-\"\n-                    + \"%s' '-XX:+%s', output should contain warning.\",\n-                    DigestOptionsBase.USE_SHA_OPTION, optionName);\n-\n-            \/\/ Verify that when the tested option is enabled, then\n-            \/\/ a warning will occur in VM output if UseSHA is disabled.\n-            if (!optionName.equals(DigestOptionsBase.USE_SHA_OPTION)) {\n-                CommandLineOptionTest.verifySameJVMStartup(\n-                        new String[] { DigestOptionsBase.getWarningForUnsupportedCPU(optionName) },\n-                        null,\n-                        shouldPassMessage,\n-                        shouldPassMessage,\n-                        ExitCode.OK,\n-                        DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                        CommandLineOptionTest.prepareBooleanFlag(DigestOptionsBase.USE_SHA_OPTION, false),\n-                        CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n-            }\n-        }\n-    }\n-\n-    @Override\n-    protected void verifyOptionValues() throws Throwable {\n-        \/\/ Verify that option is disabled by default.\n-        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                String.format(\"Option '%s' should be disabled by default\",\n-                        optionName),\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS);\n-\n-        \/\/ Verify that option is disabled even if it was explicitly enabled\n-        \/\/ using CLI options.\n-        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                String.format(\"Option '%s' should be off on unsupported \"\n-                        + \"AArch64CPU even if set to true directly\", optionName),\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n-\n-        if (checkUseSHA) {\n-            \/\/ Verify that option is disabled when +UseSHA was passed to JVM.\n-            CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                    String.format(\"Option '%s' should be off on unsupported \"\n-                            + \"AArch64CPU even if %s flag set to JVM\",\n-                            optionName, CommandLineOptionTest.prepareBooleanFlag(\n-                                DigestOptionsBase.USE_SHA_OPTION, true)),\n-                    DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                    CommandLineOptionTest.prepareBooleanFlag(\n-                            DigestOptionsBase.USE_SHA_OPTION, true));\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedAArch64CPU.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.intrinsics.sha.cli.testcases;\n+\n+import compiler.intrinsics.sha.cli.DigestOptionsBase;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n+\n+\/**\n+ * Generic test case for SHA-related options targeted to CPUs\n+ * which don't support instruction required by the tested option.\n+ *\/\n+public class GenericTestCaseForUnsupportedCPU extends\n+        DigestOptionsBase.TestCase {\n+\n+    final private boolean checkUseSHA;\n+\n+    public GenericTestCaseForUnsupportedCPU(String optionName) {\n+        this(optionName, true);\n+    }\n+\n+    public GenericTestCaseForUnsupportedCPU(String optionName, boolean checkUseSHA) {\n+        super(optionName,\n+                new NotPredicate(DigestOptionsBase.getPredicateForOption(\n+                        optionName)));\n+\n+        this.checkUseSHA = checkUseSHA;\n+    }\n+\n+    @Override\n+    protected void verifyWarnings() throws Throwable {\n+        String shouldPassMessage = String.format(\"JVM startup should pass with\"\n+                + \"option '-XX:-%s' without any warnings\", optionName);\n+        \/\/Verify that option could be disabled without any warnings.\n+        CommandLineOptionTest.verifySameJVMStartup(null, new String[] {\n+                        DigestOptionsBase.getWarningForUnsupportedCPU(optionName)\n+                }, shouldPassMessage, shouldPassMessage, ExitCode.OK,\n+                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n+                CommandLineOptionTest.prepareBooleanFlag(optionName, false));\n+\n+        if (checkUseSHA) {\n+            shouldPassMessage = String.format(\"If JVM is started with '-XX:-\"\n+                    + \"%s' '-XX:+%s', output should contain warning.\",\n+                    DigestOptionsBase.USE_SHA_OPTION, optionName);\n+\n+            \/\/ Verify that when the tested option is enabled, then\n+            \/\/ a warning will occur in VM output if UseSHA is disabled.\n+            if (!optionName.equals(DigestOptionsBase.USE_SHA_OPTION)) {\n+                CommandLineOptionTest.verifySameJVMStartup(\n+                        new String[] { DigestOptionsBase.getWarningForUnsupportedCPU(optionName) },\n+                        null,\n+                        shouldPassMessage,\n+                        shouldPassMessage,\n+                        ExitCode.OK,\n+                        DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n+                        CommandLineOptionTest.prepareBooleanFlag(DigestOptionsBase.USE_SHA_OPTION, false),\n+                        CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void verifyOptionValues() throws Throwable {\n+        \/\/ Verify that option is disabled by default.\n+        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n+                String.format(\"Option '%s' should be disabled by default\",\n+                        optionName),\n+                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS);\n+\n+        \/\/ Verify that option is disabled even if it was explicitly enabled\n+        \/\/ using CLI options.\n+        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n+                String.format(\"Option '%s' should be off on unsupported \"\n+                        + \"CPU even if set to true directly\", optionName),\n+                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n+                CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n+\n+        if (checkUseSHA) {\n+            \/\/ Verify that option is disabled when +UseSHA was passed to JVM.\n+            CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n+                    String.format(\"Option '%s' should be off on unsupported \"\n+                            + \"CPU even if %s flag set to JVM\",\n+                            optionName, CommandLineOptionTest.prepareBooleanFlag(\n+                                DigestOptionsBase.USE_SHA_OPTION, true)),\n+                    DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n+                    CommandLineOptionTest.prepareBooleanFlag(\n+                            DigestOptionsBase.USE_SHA_OPTION, true));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedCPU.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.intrinsics.sha.cli.testcases;\n-\n-import compiler.intrinsics.sha.cli.DigestOptionsBase;\n-import jdk.test.lib.process.ExitCode;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.cli.CommandLineOptionTest;\n-import jdk.test.lib.cli.predicate.AndPredicate;\n-import jdk.test.lib.cli.predicate.NotPredicate;\n-\n-\/**\n- * Generic test case for SHA-related options targeted to RISCV64 CPUs\n- * which don't support instruction required by the tested option.\n- *\/\n-public class GenericTestCaseForUnsupportedRISCV64CPU extends\n-        DigestOptionsBase.TestCase {\n-\n-    final private boolean checkUseSHA;\n-\n-    public GenericTestCaseForUnsupportedRISCV64CPU(String optionName) {\n-        this(optionName, true);\n-    }\n-\n-    public GenericTestCaseForUnsupportedRISCV64CPU(String optionName, boolean checkUseSHA) {\n-        super(optionName, new AndPredicate(Platform::isRISCV64,\n-                new NotPredicate(DigestOptionsBase.getPredicateForOption(\n-                        optionName))));\n-\n-        this.checkUseSHA = checkUseSHA;\n-    }\n-\n-    @Override\n-    protected void verifyWarnings() throws Throwable {\n-        String shouldPassMessage = String.format(\"JVM startup should pass with\"\n-                + \"option '-XX:-%s' without any warnings\", optionName);\n-        \/\/Verify that option could be disabled without any warnings.\n-        CommandLineOptionTest.verifySameJVMStartup(null, new String[] {\n-                        DigestOptionsBase.getWarningForUnsupportedCPU(optionName)\n-                }, shouldPassMessage, shouldPassMessage, ExitCode.OK,\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                CommandLineOptionTest.prepareBooleanFlag(optionName, false));\n-\n-        if (checkUseSHA) {\n-            shouldPassMessage = String.format(\"If JVM is started with '-XX:-\"\n-                    + \"%s' '-XX:+%s', output should contain warning.\",\n-                    DigestOptionsBase.USE_SHA_OPTION, optionName);\n-\n-            \/\/ Verify that when the tested option is enabled, then\n-            \/\/ a warning will occur in VM output if UseSHA is disabled.\n-            if (!optionName.equals(DigestOptionsBase.USE_SHA_OPTION)) {\n-                CommandLineOptionTest.verifySameJVMStartup(\n-                        new String[] { DigestOptionsBase.getWarningForUnsupportedCPU(optionName) },\n-                        null,\n-                        shouldPassMessage,\n-                        shouldPassMessage,\n-                        ExitCode.OK,\n-                        DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                        CommandLineOptionTest.prepareBooleanFlag(DigestOptionsBase.USE_SHA_OPTION, false),\n-                        CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n-            }\n-        }\n-    }\n-\n-    @Override\n-    protected void verifyOptionValues() throws Throwable {\n-        \/\/ Verify that option is disabled by default.\n-        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                String.format(\"Option '%s' should be disabled by default\",\n-                        optionName),\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS);\n-\n-        if (checkUseSHA) {\n-            \/\/ Verify that option is disabled even if it was explicitly enabled\n-            \/\/ using CLI options.\n-            CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                    String.format(\"Option '%s' should be off on unsupported \"\n-                            + \"RISCV64CPU even if set to true directly\", optionName),\n-                    DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                    CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n-\n-            \/\/ Verify that option is disabled when +UseSHA was passed to JVM.\n-            CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                    String.format(\"Option '%s' should be off on unsupported \"\n-                            + \"RISCV64CPU even if %s flag set to JVM\",\n-                            optionName, CommandLineOptionTest.prepareBooleanFlag(\n-                                DigestOptionsBase.USE_SHA_OPTION, true)),\n-                    DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                    CommandLineOptionTest.prepareBooleanFlag(\n-                            DigestOptionsBase.USE_SHA_OPTION, true));\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedRISCV64CPU.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.intrinsics.sha.cli.testcases;\n-\n-import compiler.intrinsics.sha.cli.DigestOptionsBase;\n-import jdk.test.lib.process.ExitCode;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.cli.CommandLineOptionTest;\n-import jdk.test.lib.cli.predicate.AndPredicate;\n-import jdk.test.lib.cli.predicate.NotPredicate;\n-import jdk.test.lib.cli.predicate.OrPredicate;\n-\n-\/**\n- * Generic test case for SHA-related options targeted to X86 CPUs that don't\n- * support SHA-related instructions.\n- *\/\n-public class GenericTestCaseForUnsupportedX86CPU\n-        extends DigestOptionsBase.TestCase {\n-\n-    final private boolean checkUseSHA;\n-\n-    public GenericTestCaseForUnsupportedX86CPU(String optionName) {\n-        this(optionName, true);\n-    }\n-\n-    public GenericTestCaseForUnsupportedX86CPU(String optionName, boolean checkUseSHA) {\n-        super(optionName, new AndPredicate(new OrPredicate(Platform::isX64, Platform::isX86),\n-                new NotPredicate(DigestOptionsBase.getPredicateForOption(\n-                        optionName))));\n-\n-        this.checkUseSHA = checkUseSHA;\n-    }\n-\n-    @Override\n-    protected void verifyWarnings() throws Throwable {\n-        String shouldPassMessage = String.format(\"JVM should start with '-XX:-%s' \"\n-                + \"flag without any warnings\", optionName);\n-        \/\/ Verify that the tested option could be explicitly disabled without\n-        \/\/ a warning.\n-        CommandLineOptionTest.verifySameJVMStartup(null, new String[] {\n-                        DigestOptionsBase.getWarningForUnsupportedCPU(optionName)\n-                }, shouldPassMessage, shouldPassMessage, ExitCode.OK,\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                CommandLineOptionTest.prepareBooleanFlag(optionName, false));\n-\n-        \/\/ Verify that when the tested option is enabled, then\n-        \/\/ a warning will occur in VM output if UseSHA is disabled.\n-        if (checkUseSHA && !optionName.equals(DigestOptionsBase.USE_SHA_OPTION)) {\n-            CommandLineOptionTest.verifySameJVMStartup(\n-                    new String[] { DigestOptionsBase.getWarningForUnsupportedCPU(optionName) },\n-                    null,\n-                    shouldPassMessage,\n-                    shouldPassMessage,\n-                    ExitCode.OK,\n-                    DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                    CommandLineOptionTest.prepareBooleanFlag(DigestOptionsBase.USE_SHA_OPTION, false),\n-                    CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n-        }\n-    }\n-\n-    @Override\n-    protected void verifyOptionValues() throws Throwable {\n-        \/\/ Verify that the tested option is disabled by default.\n-        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                String.format(\"Option '%s' should be disabled by default\",\n-                        optionName),\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS);\n-\n-        \/\/ Verify that it is not possible to explicitly enable the option.\n-        CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                String.format(\"Option '%s' should be off on unsupported \"\n-                        + \"X86CPU even if set to true directly\", optionName),\n-                DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                CommandLineOptionTest.prepareBooleanFlag(optionName, true));\n-\n-        if (checkUseSHA) {\n-            \/\/ Verify that the tested option is disabled even if +UseSHA was passed\n-            \/\/ to JVM.\n-            CommandLineOptionTest.verifyOptionValueForSameVM(optionName, \"false\",\n-                    String.format(\"Option '%s' should be off on unsupported \"\n-                            + \"X86CPU even if %s flag set to JVM\",\n-                            optionName, CommandLineOptionTest.prepareBooleanFlag(\n-                                DigestOptionsBase.USE_SHA_OPTION, true)),\n-                    DigestOptionsBase.UNLOCK_DIAGNOSTIC_VM_OPTIONS,\n-                    CommandLineOptionTest.prepareBooleanFlag(\n-                            DigestOptionsBase.USE_SHA_OPTION, true));\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedX86CPU.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"}]}