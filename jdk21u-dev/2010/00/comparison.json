{"files":[{"patch":"@@ -123,1 +123,1 @@\n-  FieldInfo to_FieldInfo() {\n+  const FieldInfo& to_FieldInfo() const {\n@@ -134,1 +134,1 @@\n-    field.reinitialize(field_holder(), _index);\n+    field.reinitialize(field_holder(), to_FieldInfo());\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1652,1 +1652,1 @@\n-      fd->reinitialize(const_cast<InstanceKlass*>(this), fs.index());\n+      fd->reinitialize(const_cast<InstanceKlass*>(this), fs.to_FieldInfo());\n@@ -1721,1 +1721,1 @@\n-      fd->reinitialize(const_cast<InstanceKlass*>(this), fs.index());\n+      fd->reinitialize(const_cast<InstanceKlass*>(this), fs.to_FieldInfo());\n@@ -1782,4 +1782,2 @@\n-  fieldDescriptor fd;\n-  int length = java_fields_count();\n-  for (int i = 0; i < length; i += 1) {\n-    fd.reinitialize(this, i);\n+  for (JavaFieldStream fs(this); !fs.done(); fs.next()) {\n+    fieldDescriptor& fd = fs.field_descriptor();\n@@ -1792,3 +1790,2 @@\n-\/\/ first in Pair is offset, second is index.\n-static int compare_fields_by_offset(Pair<int,int>* a, Pair<int,int>* b) {\n-  return a->first - b->first;\n+static int compare_fields_by_offset(FieldInfo* a, FieldInfo* b) {\n+  return a->offset() - b->offset();\n@@ -1803,1 +1800,0 @@\n-  fieldDescriptor fd;\n@@ -1805,2 +1801,1 @@\n-  GrowableArray<Pair<int,int> > fields_sorted;\n-  int i = 0;\n+  GrowableArray<FieldInfo> fields_sorted;\n@@ -1809,4 +1804,1 @@\n-      fd = fs.field_descriptor();\n-      Pair<int,int> f(fs.offset(), fs.index());\n-      fields_sorted.push(f);\n-      i++;\n+      fields_sorted.push(fs.to_FieldInfo());\n@@ -1815,4 +1807,2 @@\n-  if (i > 0) {\n-    int length = i;\n-    assert(length == fields_sorted.length(), \"duh\");\n-    \/\/ _sort_Fn is defined in growableArray.hpp.\n+  int length = fields_sorted.length();\n+  if (length > 0) {\n@@ -1820,0 +1810,1 @@\n+    fieldDescriptor fd;\n@@ -1821,2 +1812,2 @@\n-      fd.reinitialize(this, fields_sorted.at(i).second);\n-      assert(!fd.is_static() && fd.offset() == fields_sorted.at(i).first, \"only nonstatic fields\");\n+      fd.reinitialize(this, fields_sorted.at(i));\n+      assert(!fd.is_static() && fd.offset() == checked_cast<int>(fields_sorted.at(i).offset()), \"only nonstatic fields\");\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -137,0 +137,1 @@\n+  friend class FieldStream;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1790,1 +1790,1 @@\n-      fd.reinitialize(k, fs.index());\n+      fd.reinitialize(k, fs.to_FieldInfo());\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-void fieldDescriptor::reinitialize(InstanceKlass* ik, int index) {\n+void fieldDescriptor::reinitialize(InstanceKlass* ik, const FieldInfo& fieldinfo) {\n@@ -98,2 +98,1 @@\n-  _fieldinfo= ik->field(index);\n-  assert((int)_fieldinfo.index() == index, \"just checking\");\n+  _fieldinfo = fieldinfo;\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    reinitialize(ik, index);\n+    reinitialize(ik, ik->field(index));\n@@ -105,1 +105,1 @@\n-  void reinitialize(InstanceKlass* ik, int index);\n+  void reinitialize(InstanceKlass* ik, const FieldInfo& fieldinfo);\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    field.reinitialize(_klass, _index);\n+    field.reinitialize(_klass, _klass->field(_index));\n","filename":"src\/hotspot\/share\/runtime\/reflectionUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}