{"files":[{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4725045\n+ * @key headful\n+ * @summary verifies that there are no artifacts due to using\n+ * GDI for copies to the back buffer (GDI should only be used\n+ * for copies to the screen)\n+ * @run main GdiBlitOffscreenTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class GdiBlitOffscreenTest {\n+\n+    static volatile JFrame f;\n+    static final int imageW = 100, imageH = 100, FW = 500, FH = 500;\n+    static volatile BufferedImage greenImage;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ First, create an image.\n+        greenImage = new BufferedImage(imageW, imageH,\n+                                       BufferedImage.TYPE_INT_RGB);\n+        Graphics redG = greenImage.getGraphics();\n+        redG.setColor(Color.green);\n+        redG.fillRect(0, 0, imageW, imageH);\n+        redG.setColor(Color.white);\n+        redG.drawString(\"Passed!\", 30, 80);\n+\n+        Robot robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(GdiBlitOffscreenTest::createUI);\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+            Point p = f.getLocationOnScreen();\n+            Color c = robot.getPixelColor(p.x+FW\/2, p.y+FH\/2);\n+            if (!c.equals(Color.green)) {\n+                throw new RuntimeException(\"Color is \" + c);\n+            }\n+        } finally {\n+            if (f != null) {\n+                SwingUtilities.invokeAndWait(f::dispose);\n+            }\n+        }\n+    }\n+\n+    private static void createUI() {\n+        f = new JFrame(\"GdiBlitOffscreenTest\");\n+        f.setSize(FW, FH);\n+        f.setVisible(true);\n+\n+        \/\/ copy the image to the window.\n+        Graphics g = f.getGraphics();\n+        g.drawImage(greenImage, 0, 0, null);\n+\n+        \/\/ Now, get on with the rest of the test\n+        JComponent app = new GdiBlitOffscreenTestComponent(imageW, imageH, greenImage);\n+        app.setSize(500, 500);\n+        f.getContentPane().add(app);\n+        f.validate();\n+        f.repaint();\n+    }\n+}\n+\n+class GdiBlitOffscreenTestComponent extends JComponent {\n+\n+    int imageW, imageH;\n+    Image theImage;\n+\n+    public GdiBlitOffscreenTestComponent(int imageW, int imageH,\n+                                         Image theImage)\n+    {\n+        this.theImage = theImage;\n+        this.imageW = imageW;\n+        this.imageH = imageH;\n+    }\n+\n+    public void paintComponent(Graphics g) {\n+        int imageX = (getWidth() - imageW) \/ 2;\n+        int imageY = (getHeight() - imageH) \/ 2;\n+        g.setColor(Color.blue);\n+        g.fillRect(0, 0, getWidth(), getHeight());\n+        g.setColor(Color.red);\n+        g.fillRect(imageX, imageY, imageW, imageH);\n+        g.setColor(Color.white);\n+        g.drawString(\"Failed!\", imageX + 30, imageY + 80);\n+        g.drawImage(theImage, imageX, imageY, null);\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/java2d\/GdiRendering\/GdiBlitOffscreenTest.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4693644\n+ * @summary verifies that there are no artifacts due to copying with GDI\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual GdiLockTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+\n+public class GdiLockTest {\n+\n+        static final String INSTRUCTIONS = \"\"\"\n+            A window will open up next to these instructions.\n+            The text you see in that window should blink on and off.\n+            If it never disappears, then the test has failed.\n+        \"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"GdiLockTest\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(5)\n+                .columns(45)\n+                .testUI(GdiLockTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame f = new Frame(\"GdiLockTest\");\n+        f.setSize(300, 300);\n+        GdiLockTestComponent test = new GdiLockTestComponent();\n+        Thread t = new Thread(test);\n+        f.add(test);\n+        t.start();\n+        return f;\n+    }\n+}\n+\n+class GdiLockTestComponent extends Component implements Runnable {\n+\n+    boolean textVisible = true;\n+\n+    public void paint(Graphics g) {\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, getWidth(), getHeight());\n+        g.setColor(Color.black);\n+        if (!textVisible) {\n+            g.setClip(200, 200, 300, 300);\n+        }\n+        g.drawString(\"This text should be blinking\", 10, 30);\n+        if (!textVisible) {\n+            g.setClip(0, 0, getWidth(), getHeight());\n+        }\n+    }\n+\n+    public void run() {\n+        while (true) {\n+            repaint();\n+            textVisible = !textVisible;\n+            try {\n+                Thread.sleep(500);\n+            } catch (Exception e) {}\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/GdiRendering\/GdiLockTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4515761\n+ * @summary verify that drawRoundRect produces correct output for 0 w\/h\n+ *\/\n+\n+import java.awt.Color;\n+import static java.awt.Color.*;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+\n+public class DrawRoundRect0Bug {\n+\n+    public static void main(String argv[]) {\n+        BufferedImage img = new BufferedImage(250, 250, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g = img.createGraphics();\n+\n+        g.setColor(white);\n+        g.fillRect(0, 0, img.getWidth(), img.getHeight());\n+\n+        g.setColor(green);\n+        g.drawLine(150, 90, 150, 110);\n+        if (img.getRGB(150, 100) != green.getRGB()) {\n+            throw new RuntimeException(\"Vertical line not green\");\n+        }\n+\n+        g.setColor(blue);\n+        g.drawRoundRect(160, 90, 0, 20, 4, 4);\n+        if (img.getRGB(160, 100) != blue.getRGB()) {\n+            throw new RuntimeException(\"Vertical (ie zero width) round rect not blue\");\n+        }\n+\n+        g.setColor(green);\n+        g.drawLine(150, 140, 170, 140);\n+        if (img.getRGB(160, 140) != green.getRGB()) {\n+            throw new RuntimeException(\"Horizontal line not green\");\n+        }\n+\n+        g.setColor(blue);\n+        g.drawRoundRect(150, 150, 20, 0, 4, 4);\n+        if (img.getRGB(160, 150) != blue.getRGB()) {\n+            throw new RuntimeException(\"Horizontal (ie zero height) round rect not blue\");\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/java2d\/SunGraphics2D\/DrawRoundRect0Bug.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4652373\n+ * @summary verify that SunGraphics2D survives surface revalidation\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RevalidateBug\n+ * @requires (os.family == \"windows\")\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.GradientPaint;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+\n+public class RevalidateBug {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This bug only reproduces on Windows systems with a task manager that can lock the computer.\n+\n+        This test draws a grayscale gradient in a window.\n+\n+        After the gradient becomes visible above, use ctrl-alt-del to bring up\n+        the task manager and lock the computer.\n+        Then unlock the computer and the gradient should be repainted to pass.\n+\n+        If the gradient does not appear after unlocking (or if the test gets\n+        an error on its own after unlocking the computer) then it fails.\n+        \"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"RevalidateBug\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(12)\n+                .columns(50)\n+                .testUI(RevalidateBug::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createUI() {\n+\n+        JComponent comp = new JComponent() {\n+\n+            protected void paintComponent(Graphics g) {\n+                super.paintComponent(g);\n+                System.out.println(\"paintComponent\");\n+                Graphics2D g2d = (Graphics2D) g;\n+\n+                Insets insets = getInsets();\n+                Rectangle rect =\n+                    new Rectangle(insets.left, insets.top,\n+                                  getWidth() - insets.right - insets.left,\n+                                  getHeight() - insets.top - insets.bottom);\n+                g2d.setPaint(new GradientPaint(rect.x, rect.y, Color.white,\n+                                               rect.x + rect.width, rect.y, Color.black));\n+\n+                System.out.println(rect + \" w:\" + getWidth() + \" h:\"+getHeight());\n+\n+                g2d.fillRect(0, 0, getWidth(), getHeight());\n+            }\n+\n+            public Dimension getPreferredSize() {\n+                return new Dimension(500, 500);\n+            }\n+        };\n+\n+        JFrame f = new JFrame(\"RevalidateTest\");\n+        f.add(comp);\n+        f.pack();\n+        return f;\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/java2d\/SunGraphics2D\/RevalidateBug.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4516037\n+ * @summary verify that scaled Polygons honor the transform\n+ *\/\n+\n+import java.awt.Color;\n+import static java.awt.Color.*;\n+import java.awt.Graphics2D;\n+import java.awt.Polygon;\n+import java.awt.image.BufferedImage;\n+\n+public class ScaledPolyTest {\n+\n+    public static void main(String[] args) {\n+\n+        Polygon poly = new Polygon();\n+        poly.addPoint(20, 10);\n+        poly.addPoint(30, 30);\n+        poly.addPoint(10, 30);\n+        poly.addPoint(20, 10);\n+\n+        int height = 300;\n+        int width = 300;\n+        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2d = bi.createGraphics();\n+        g2d.setColor(Color.white);\n+        g2d.fillRect(0, 0, bi.getWidth(), bi.getHeight());\n+\n+        g2d.translate(10, 10);\n+        g2d.scale(2, 2);\n+        g2d.setColor(Color.yellow);\n+        g2d.fill(poly);\n+        g2d.setColor(Color.blue);\n+        g2d.draw(poly);\n+\n+        \/*\n+         * Examine each row of the image.\n+         * If the stroked polygon is correctly aligned on the filled polygon,\n+         * if there is anything except white on the line,\n+         * the transition will always be white+->blue+->yellow*->blue*->white+\n+         *\/\n+        int bluePix = blue.getRGB();\n+        int yellowPix = yellow.getRGB();\n+        int whitePix = white.getRGB();\n+        for (int y = 0; y < height; y++ ) {\n+            int x = 0;\n+            int pix = whitePix;\n+\n+            while (pix == whitePix && x < width) pix = bi.getRGB(x++, y);\n+            if (pix == whitePix && x == width) continue; \/\/ all white row.\n+\n+            if (pix != bluePix) throw new RuntimeException(\"Expected blue\");\n+\n+            while (pix == bluePix) pix = bi.getRGB(x++, y);\n+\n+            if (pix == yellowPix) {\n+               while (pix == yellowPix) pix = bi.getRGB(x++, y);\n+               if (pix != bluePix) throw new RuntimeException(\"Expected blue\");\n+               while (pix == bluePix) pix = bi.getRGB(x++, y);\n+               if (pix != whitePix) throw new RuntimeException(\"Expected white\");\n+            }\n+\n+            while (pix == whitePix && x < width) pix = bi.getRGB(x++, y);\n+            if (pix == whitePix && x == width) {\n+                continue;\n+            } else {\n+                throw new RuntimeException(\"Expected white to finish the row\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/SunGraphics2D\/ScaledPolyTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}