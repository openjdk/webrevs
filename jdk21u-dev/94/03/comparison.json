{"files":[{"patch":"@@ -60,1 +60,3 @@\n-    \/** The namespace for CONF file **\/\n+    \/**\n+     * The namespace for CONF file\n+     **\/\n@@ -64,1 +66,1 @@\n-        com.sun.org.slf4j.internal.LoggerFactory.getLogger(Init.class);\n+            com.sun.org.slf4j.internal.LoggerFactory.getLogger(Init.class);\n@@ -66,1 +68,3 @@\n-    \/** Field alreadyInitialized *\/\n+    \/**\n+     * Field alreadyInitialized\n+     *\/\n@@ -71,0 +75,1 @@\n+     *\n@@ -79,1 +84,0 @@\n-     *\n@@ -85,0 +89,7 @@\n+        PrivilegedAction<InputStream> action = () -> {\n+            String cfile = System.getProperty(\"com.sun.org.apache.xml.internal.security.resource.config\");\n+            if (cfile == null) {\n+                return null;\n+            }\n+            return getResourceAsStream(cfile, Init.class);\n+        };\n@@ -86,21 +97,6 @@\n-        @SuppressWarnings(\"removal\")\n-        InputStream is =    \/\/NOPMD\n-            AccessController.doPrivileged(\n-                (PrivilegedAction<InputStream>)\n-                    () -> {\n-                        String cfile =\n-                            System.getProperty(\"com.sun.org.apache.xml.internal.security.resource.config\");\n-                        if (cfile == null) {\n-                            return null;\n-                        }\n-                        return getResourceAsStream(cfile, Init.class);\n-                    }\n-                );\n-        if (is == null) {\n-            dynamicInit();\n-        } else {\n-            fileInit(is);\n-            try {\n-                is.close();\n-            } catch (IOException ex) {\n-                LOG.warn(ex.getMessage());\n+        try (@SuppressWarnings(\"removal\")\n+             InputStream is = AccessController.doPrivileged(action)) {\n+            if (is == null) {\n+                dynamicInit();\n+            } else {\n+                fileInit(is);\n@@ -108,0 +104,2 @@\n+        } catch (IOException ex) {\n+            LOG.warn(ex.getMessage(), ex);\n@@ -415,0 +413,1 @@\n+            @Override\n@@ -418,0 +417,1 @@\n+            @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/Init.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -43,1 +43,3 @@\n-    private static String providerName;\n+    private static String globalProviderName;\n+\n+    private static final ThreadLocal<String> threadSpecificProviderName = new ThreadLocal<>();\n@@ -347,1 +349,4 @@\n-        return providerName;\n+        if (threadSpecificProviderName.get() != null) {\n+            return threadSpecificProviderName.get();\n+        }\n+        return globalProviderName;\n@@ -358,1 +363,12 @@\n-        providerName = provider;\n+        globalProviderName = provider;\n+    }\n+\n+    \/**\n+     * Sets the default Provider for this thread to obtain the security algorithms\n+     * @param threadSpecificProviderName the default providerId.\n+     * @throws SecurityException if a security manager is installed and the\n+     *    caller does not have permission to register the JCE algorithm\n+     *\/\n+    public static void setThreadSpecificProviderName(String threadSpecificProviderName) {\n+        JavaUtils.checkRegisterPermission();\n+        JCEMapper.threadSpecificProviderName.set(threadSpecificProviderName);\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/JCEMapper.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -259,0 +259,1 @@\n+    @Override\n@@ -264,0 +265,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/MessageDigestAlgorithm.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,5 @@\n-import com.sun.org.apache.xml.internal.security.algorithms.implementations.*;\n+import com.sun.org.apache.xml.internal.security.algorithms.implementations.IntegrityHmac;\n+import com.sun.org.apache.xml.internal.security.algorithms.implementations.SignatureBaseRSA;\n+import com.sun.org.apache.xml.internal.security.algorithms.implementations.SignatureDSA;\n+import com.sun.org.apache.xml.internal.security.algorithms.implementations.SignatureECDSA;\n+import com.sun.org.apache.xml.internal.security.algorithms.implementations.SignatureEDDSA;\n@@ -527,0 +531,1 @@\n+    @Override\n@@ -536,0 +541,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/SignatureAlgorithm.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,1 +25,6 @@\n-import java.security.*;\n+import java.security.InvalidKeyException;\n+import java.security.Key;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.SecureRandom;\n+import java.security.Signature;\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/SignatureAlgorithmSpi.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n-import java.security.spec.*;\n+import java.security.spec.ECField;\n+import java.security.spec.ECFieldF2m;\n+import java.security.spec.ECFieldFp;\n+import java.security.spec.ECParameterSpec;\n+import java.security.spec.ECPoint;\n+import java.security.spec.EllipticCurve;\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/ECDSAUtils.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+    @Override\n@@ -105,0 +106,1 @@\n+    @Override\n@@ -127,0 +129,1 @@\n+    @Override\n@@ -153,0 +156,1 @@\n+    @Override\n@@ -173,0 +177,1 @@\n+    @Override\n@@ -184,0 +189,1 @@\n+    @Override\n@@ -216,0 +222,1 @@\n+    @Override\n@@ -228,0 +235,1 @@\n+    @Override\n@@ -243,0 +251,1 @@\n+    @Override\n@@ -260,0 +269,1 @@\n+    @Override\n@@ -273,0 +283,1 @@\n+    @Override\n@@ -282,0 +293,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/IntegrityHmac.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;\n@@ -46,2 +48,0 @@\n-import java.security.spec.MGF1ParameterSpec;\n-import java.security.spec.PSSParameterSpec;\n@@ -68,1 +68,4 @@\n-        LOG.debug(\"Created SignatureRSA using {}\", algorithmID);\n+        this.signatureAlgorithm = getSignature(provider, algorithmID);\n+        LOG.debug(\"Created SignatureRSA using {0} and provider {1}\",\n+            algorithmID, signatureAlgorithm.getProvider());\n+    }\n@@ -70,0 +73,2 @@\n+    Signature getSignature(Provider provider, String algorithmID)\n+        throws XMLSignatureException {\n@@ -74,1 +79,1 @@\n-                    this.signatureAlgorithm = Signature.getInstance(algorithmID);\n+                    return Signature.getInstance(algorithmID);\n@@ -77,1 +82,1 @@\n-                    this.signatureAlgorithm = Signature.getInstance(algorithmID, providerId);\n+                    return Signature.getInstance(algorithmID, providerId);\n@@ -81,1 +86,1 @@\n-                this.signatureAlgorithm = Signature.getInstance(algorithmID, provider);\n+                return Signature.getInstance(algorithmID, provider);\n@@ -91,0 +96,1 @@\n+    @Override\n@@ -101,0 +107,1 @@\n+    @Override\n@@ -110,0 +117,1 @@\n+    @Override\n@@ -115,0 +123,1 @@\n+    @Override\n@@ -124,0 +133,1 @@\n+    @Override\n@@ -130,0 +140,1 @@\n+    @Override\n@@ -135,0 +146,1 @@\n+    @Override\n@@ -144,0 +156,1 @@\n+    @Override\n@@ -153,0 +166,1 @@\n+    @Override\n@@ -162,0 +176,1 @@\n+    @Override\n@@ -167,0 +182,1 @@\n+    @Override\n@@ -172,0 +188,1 @@\n+    @Override\n@@ -178,0 +195,1 @@\n+    @Override\n@@ -359,0 +377,39 @@\n+    public abstract static class SignatureBaseRSAPSS extends SignatureBaseRSA {\n+\n+        public SignatureBaseRSAPSS() throws XMLSignatureException {\n+            super();\n+        }\n+\n+        public SignatureBaseRSAPSS(Provider provider) throws XMLSignatureException {\n+            super(provider);\n+        }\n+\n+        @Override\n+        Signature getSignature(Provider provider, String algorithmID)\n+            throws XMLSignatureException {\n+            try {\n+                Signature sig;\n+                if (provider == null) {\n+                    String providerId = JCEMapper.getProviderId();\n+                    if (providerId == null) {\n+                        sig = Signature.getInstance(\"RSASSA-PSS\");\n+                    } else {\n+                        sig = Signature.getInstance(\"RSASSA-PSS\", providerId);\n+                    }\n+                } else {\n+                    sig = Signature.getInstance(\"RSASSA-PSS\", provider);\n+                }\n+                try {\n+                    sig.setParameter(getPSSParameterSpec());\n+                } catch (InvalidAlgorithmParameterException e) {\n+                    throw new NoSuchAlgorithmException(\"Should not happen\", e);\n+                }\n+                return sig;\n+            } catch (NoSuchAlgorithmException | NoSuchProviderException e) {\n+                return super.getSignature(provider, algorithmID);\n+            }\n+        }\n+\n+        abstract PSSParameterSpec getPSSParameterSpec();\n+    }\n+\n@@ -362,1 +419,5 @@\n-    public static class SignatureRSASHA1MGF1 extends SignatureBaseRSA {\n+    public static class SignatureRSASHA1MGF1 extends SignatureBaseRSAPSS {\n+\n+        private static final PSSParameterSpec SHA1_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA-1\", \"MGF1\", MGF1ParameterSpec.SHA1,\n+                20, PSSParameterSpec.TRAILER_FIELD_BC);\n@@ -382,0 +443,5 @@\n+\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA1_MGF1_PARAMS;\n+        }\n@@ -387,1 +453,5 @@\n-    public static class SignatureRSASHA224MGF1 extends SignatureBaseRSA {\n+    public static class SignatureRSASHA224MGF1 extends SignatureBaseRSAPSS {\n+\n+        private static final PSSParameterSpec SHA224_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA-224\", \"MGF1\", MGF1ParameterSpec.SHA224,\n+                28, PSSParameterSpec.TRAILER_FIELD_BC);\n@@ -407,0 +477,5 @@\n+\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA224_MGF1_PARAMS;\n+        }\n@@ -412,1 +487,5 @@\n-    public static class SignatureRSASHA256MGF1 extends SignatureBaseRSA {\n+    public static class SignatureRSASHA256MGF1 extends SignatureBaseRSAPSS {\n+\n+        private static final PSSParameterSpec SHA256_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA-256\", \"MGF1\", MGF1ParameterSpec.SHA256,\n+                32, PSSParameterSpec.TRAILER_FIELD_BC);\n@@ -432,0 +511,5 @@\n+\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA256_MGF1_PARAMS;\n+        }\n@@ -437,1 +521,5 @@\n-    public static class SignatureRSASHA384MGF1 extends SignatureBaseRSA {\n+    public static class SignatureRSASHA384MGF1 extends SignatureBaseRSAPSS {\n+\n+        private static final PSSParameterSpec SHA384_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA-384\", \"MGF1\", MGF1ParameterSpec.SHA384,\n+                48, PSSParameterSpec.TRAILER_FIELD_BC);\n@@ -457,0 +545,5 @@\n+\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA384_MGF1_PARAMS;\n+        }\n@@ -462,1 +555,5 @@\n-    public static class SignatureRSASHA512MGF1 extends SignatureBaseRSA {\n+    public static class SignatureRSASHA512MGF1 extends SignatureBaseRSAPSS {\n+\n+        private static final PSSParameterSpec SHA512_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA-512\", \"MGF1\", MGF1ParameterSpec.SHA512,\n+                64, PSSParameterSpec.TRAILER_FIELD_BC);\n@@ -482,0 +579,5 @@\n+\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA512_MGF1_PARAMS;\n+        }\n@@ -487,1 +589,6 @@\n-    public static class SignatureRSASHA3_224MGF1 extends SignatureBaseRSA {\n+    public static class SignatureRSASHA3_224MGF1 extends SignatureBaseRSAPSS {\n+\n+        private static final PSSParameterSpec SHA3_224_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA3-224\", \"MGF1\",\n+                new MGF1ParameterSpec(\"SHA3-224\"),\n+                28, PSSParameterSpec.TRAILER_FIELD_BC);\n@@ -507,0 +614,5 @@\n+\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA3_224_MGF1_PARAMS;\n+        }\n@@ -512,1 +624,6 @@\n-    public static class SignatureRSASHA3_256MGF1 extends SignatureBaseRSA {\n+    public static class SignatureRSASHA3_256MGF1 extends SignatureBaseRSAPSS {\n+\n+        private static final PSSParameterSpec SHA3_256_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA3-256\", \"MGF1\",\n+                new MGF1ParameterSpec(\"SHA3-256\"),\n+                32, PSSParameterSpec.TRAILER_FIELD_BC);\n@@ -532,0 +649,5 @@\n+\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA3_256_MGF1_PARAMS;\n+        }\n@@ -537,1 +659,6 @@\n-    public static class SignatureRSASHA3_384MGF1 extends SignatureBaseRSA {\n+    public static class SignatureRSASHA3_384MGF1 extends SignatureBaseRSAPSS {\n+\n+        private static final PSSParameterSpec SHA3_384_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA3-384\", \"MGF1\",\n+                new MGF1ParameterSpec(\"SHA3-384\"),\n+                48, PSSParameterSpec.TRAILER_FIELD_BC);\n@@ -557,0 +684,5 @@\n+\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA3_384_MGF1_PARAMS;\n+        }\n@@ -562,1 +694,6 @@\n-    public static class SignatureRSASHA3_512MGF1 extends SignatureBaseRSA {\n+    public static class SignatureRSASHA3_512MGF1 extends SignatureBaseRSAPSS {\n+\n+        private static final PSSParameterSpec SHA3_512_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA3-512\", \"MGF1\",\n+                new MGF1ParameterSpec(\"SHA3-512\"),\n+                64, PSSParameterSpec.TRAILER_FIELD_BC);\n@@ -582,0 +719,5 @@\n+\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA3_512_MGF1_PARAMS;\n+        }\n@@ -585,1 +727,1 @@\n-        PSSParameterSpec pssParameterSpec;\n+        private PSSParameterSpec pssParameterSpec;\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/SignatureBaseRSA.java","additions":158,"deletions":16,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+    @Override\n@@ -103,0 +104,1 @@\n+    @Override\n@@ -115,0 +117,1 @@\n+    @Override\n@@ -133,0 +136,1 @@\n+    @Override\n@@ -141,0 +145,1 @@\n+    @Override\n@@ -154,0 +159,1 @@\n+    @Override\n@@ -163,0 +169,1 @@\n+    @Override\n@@ -170,0 +177,1 @@\n+    @Override\n@@ -181,0 +189,1 @@\n+    @Override\n@@ -192,0 +201,1 @@\n+    @Override\n@@ -205,0 +215,1 @@\n+    @Override\n@@ -214,0 +225,1 @@\n+    @Override\n@@ -224,0 +236,1 @@\n+    @Override\n@@ -235,0 +248,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/SignatureDSA.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,8 @@\n-import java.security.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.Provider;\n+import java.security.SecureRandom;\n+import java.security.Signature;\n+import java.security.SignatureException;\n@@ -121,0 +128,1 @@\n+    @Override\n@@ -131,0 +139,1 @@\n+    @Override\n@@ -146,0 +155,1 @@\n+    @Override\n@@ -151,0 +161,1 @@\n+    @Override\n@@ -161,0 +172,1 @@\n+    @Override\n@@ -172,0 +184,1 @@\n+    @Override\n@@ -177,0 +190,1 @@\n+    @Override\n@@ -186,0 +200,1 @@\n+    @Override\n@@ -195,0 +210,1 @@\n+    @Override\n@@ -204,0 +220,1 @@\n+    @Override\n@@ -209,0 +226,1 @@\n+    @Override\n@@ -214,0 +232,1 @@\n+    @Override\n@@ -220,0 +239,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/SignatureECDSA.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -25,0 +25,10 @@\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.Provider;\n+import java.security.SecureRandom;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n@@ -31,4 +41,0 @@\n-import java.io.IOException;\n-import java.security.*;\n-import java.security.spec.AlgorithmParameterSpec;\n-\n@@ -80,0 +86,1 @@\n+    @Override\n@@ -90,0 +97,1 @@\n+    @Override\n@@ -104,0 +112,1 @@\n+    @Override\n@@ -109,0 +118,1 @@\n+    @Override\n@@ -118,0 +128,1 @@\n+    @Override\n@@ -125,0 +136,1 @@\n+    @Override\n@@ -130,0 +142,1 @@\n+    @Override\n@@ -139,0 +152,1 @@\n+    @Override\n@@ -148,0 +162,1 @@\n+    @Override\n@@ -157,0 +172,1 @@\n+    @Override\n@@ -162,0 +178,1 @@\n+    @Override\n@@ -167,0 +184,1 @@\n+    @Override\n@@ -173,0 +191,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/implementations\/SignatureEDDSA.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-    public static final Canonicalizer getInstance(String algorithmURI)\n+    public static Canonicalizer getInstance(String algorithmURI)\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/Canonicalizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import com.sun.org.apache.xml.internal.security.utils.Constants;\n-import org.w3c.dom.Attr;\n@@ -30,0 +28,3 @@\n+import com.sun.org.apache.xml.internal.security.utils.Constants;\n+import org.w3c.dom.Attr;\n+\n@@ -72,0 +73,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/helper\/AttrCompare.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/Canonicalizer11_OmitComments.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/Canonicalizer11_WithComments.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+    @Override\n@@ -101,0 +102,1 @@\n+    @Override\n@@ -116,0 +118,1 @@\n+    @Override\n@@ -300,0 +303,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/Canonicalizer20010315.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+    @Override\n@@ -98,0 +99,1 @@\n+    @Override\n@@ -113,0 +115,1 @@\n+    @Override\n@@ -158,0 +161,1 @@\n+    @Override\n@@ -339,0 +343,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/Canonicalizer20010315Excl.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/Canonicalizer20010315ExclOmitComments.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/Canonicalizer20010315ExclWithComments.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/Canonicalizer20010315OmitComments.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/Canonicalizer20010315WithComments.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -110,0 +110,1 @@\n+    @Override\n@@ -122,0 +123,1 @@\n+    @Override\n@@ -460,2 +462,1 @@\n-    protected int isVisibleDO(Node currentNode, int level)\n-            throws CanonicalizationException {\n+    protected int isVisibleDO(Node currentNode, int level) throws CanonicalizationException {\n@@ -480,2 +481,1 @@\n-    protected int isVisibleInt(Node currentNode)\n-            throws CanonicalizationException {\n+    protected int isVisibleInt(Node currentNode) throws CanonicalizationException {\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/CanonicalizerBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+    @Override\n@@ -86,0 +87,1 @@\n+    @Override\n@@ -101,0 +103,1 @@\n+    @Override\n@@ -168,0 +171,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/CanonicalizerPhysical.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-\n@@ -77,1 +76,1 @@\n-        for (NameSpaceSymbEntry n : symb.entrySet()) {\n+        for (NameSpaceSymbEntry nsEntry : symb.entrySet()) {\n@@ -79,2 +78,2 @@\n-            if (!n.rendered && n.n != null) {\n-                n = n.clone();\n+            if (!nsEntry.rendered && nsEntry.n != null) {\n+                nsEntry = nsEntry.clone();\n@@ -82,3 +81,3 @@\n-                symb.put(n.prefix, n);\n-                n.lastrendered = n.uri;\n-                n.rendered = true;\n+                symb.put(nsEntry.prefix, nsEntry);\n+                nsEntry.lastrendered = nsEntry.uri;\n+                nsEntry.rendered = true;\n@@ -86,1 +85,1 @@\n-                result.add(n.n);\n+                result.add(nsEntry.n);\n@@ -314,0 +313,1 @@\n+    @Override\n@@ -347,3 +347,3 @@\n-        for (int i = 0;i < entries.length;i++) {\n-            if (entries[i] != null && entries[i].uri.length() != 0) {\n-                a.add(entries[i]);\n+        for (NameSpaceSymbEntry nsEntry : entries) {\n+            if (nsEntry != null && !nsEntry.uri.isEmpty()) {\n+                a.add(nsEntry);\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/implementations\/NameSpaceSymbTable.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -163,0 +163,1 @@\n+    @Override\n@@ -184,0 +185,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/exceptions\/XMLSecurityException.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1187,0 +1187,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/KeyInfo.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/DEREncodedKeyValue.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/KeyInfoReference.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/KeyName.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -163,0 +163,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/KeyValue.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/MgmtData.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/PGPData.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -132,0 +132,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/RetrievalMethod.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/SPKIData.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -531,0 +531,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/X509Data.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,0 +100,1 @@\n+    @Override\n@@ -126,0 +127,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/keyvalues\/DSAKeyValue.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,5 +43,0 @@\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n-import org.w3c.dom.Text;\n-\n@@ -53,0 +48,4 @@\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.Text;\n@@ -164,0 +163,1 @@\n+    @Override\n@@ -213,0 +213,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/keyvalues\/ECKeyValue.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+    @Override\n@@ -118,0 +119,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/keyvalues\/RSAKeyValue.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/x509\/XMLX509CRL.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+    @Override\n@@ -142,0 +143,1 @@\n+    @Override\n@@ -146,2 +148,2 @@\n-            for (int i = 0; i < bytes.length; i++) {\n-                result = 31 * result + bytes[i];\n+            for (byte element : bytes) {\n+                result = 31 * result + element;\n@@ -156,0 +158,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/x509\/XMLX509Certificate.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -135,0 +135,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/x509\/XMLX509Digest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -135,0 +135,1 @@\n+    @Override\n@@ -146,0 +147,1 @@\n+    @Override\n@@ -154,0 +156,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/x509\/XMLX509IssuerSerial.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -148,0 +148,1 @@\n+    @Override\n@@ -162,0 +163,1 @@\n+    @Override\n@@ -166,2 +168,2 @@\n-            for (int i = 0; i < bytes.length; i++) {\n-                result = 31 * result + bytes[i];\n+            for (byte element : bytes) {\n+                result = 31 * result + element;\n@@ -177,0 +179,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/x509\/XMLX509SKI.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+    @Override\n@@ -95,0 +96,1 @@\n+    @Override\n@@ -102,0 +104,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/content\/x509\/XMLX509SubjectName.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,3 +34,0 @@\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n-\n@@ -50,0 +47,2 @@\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n@@ -298,0 +297,1 @@\n+        @Override\n@@ -302,0 +302,1 @@\n+        @Override\n@@ -311,0 +312,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/KeyResolver.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+\n@@ -36,0 +37,1 @@\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/implementations\/PrivateKeyResolver.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/implementations\/RSAKeyValueResolver.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+\n@@ -31,0 +32,1 @@\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/implementations\/SecretKeyResolver.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+\n@@ -29,0 +30,1 @@\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/implementations\/SingleKeyResolver.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,2 +89,2 @@\n-            for (int i = 0; i < els.length; i++) {\n-                XMLX509Certificate xmlCert = new XMLX509Certificate(els[i], baseURI);\n+            for (Element el : els) {\n+                XMLX509Certificate xmlCert = new XMLX509Certificate(el, baseURI);\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/implementations\/X509CertificateResolver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,2 +137,1 @@\n-                for (int i = 0; i < x509Digests.length; i++) {\n-                    XMLX509Digest keyInfoDigest = x509Digests[i];\n+                for (XMLX509Digest keyInfoDigest : x509Digests) {\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/implementations\/X509DigestResolver.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-\n@@ -98,1 +97,0 @@\n-\n@@ -105,1 +103,1 @@\n-                X509Certificate cert = (X509Certificate)storageIterator.next();\n+                X509Certificate cert = (X509Certificate) storageIterator.next();\n@@ -108,2 +106,2 @@\n-                for (int i = 0; i < x509childObject.length; i++) {\n-                    if (certSKI.equals(x509childObject[i])) {\n+                for (XMLX509SKI childNodeSKI : x509childObject) {\n+                    if (certSKI.equals(childNodeSKI)) {\n@@ -111,1 +109,0 @@\n-\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/implementations\/X509SKIResolver.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-\n@@ -104,4 +103,2 @@\n-                X509Certificate cert = (X509Certificate)storageIterator.next();\n-                XMLX509SubjectName certSN =\n-                    new XMLX509SubjectName(element.getOwnerDocument(), cert);\n-\n+                X509Certificate cert = (X509Certificate) storageIterator.next();\n+                XMLX509SubjectName certSN = new XMLX509SubjectName(element.getOwnerDocument(), cert);\n@@ -110,2 +107,2 @@\n-                for (int i = 0; i < x509childObject.length; i++) {\n-                    LOG.debug(\"Found Element SN:     {}\", x509childObject[i].getSubjectName());\n+                for (XMLX509SubjectName childSubject : x509childObject) {\n+                    LOG.debug(\"Found Element SN:     {}\", childSubject.getSubjectName());\n@@ -113,1 +110,1 @@\n-                    if (certSN.equals(x509childObject[i])) {\n+                    if (certSN.equals(childSubject)) {\n@@ -115,1 +112,0 @@\n-\n@@ -125,1 +121,0 @@\n-\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/implementations\/X509SubjectNameResolver.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -136,0 +136,1 @@\n+        @Override\n@@ -150,0 +151,1 @@\n+        @Override\n@@ -161,0 +163,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/storage\/StorageResolver.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+    @Override\n@@ -106,0 +107,1 @@\n+        @Override\n@@ -111,0 +113,1 @@\n+        @Override\n@@ -122,0 +125,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/storage\/implementations\/KeyStoreResolver.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+    @Override\n@@ -74,0 +75,1 @@\n+        @Override\n@@ -79,0 +81,1 @@\n+        @Override\n@@ -90,0 +93,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/storage\/implementations\/SingleCertificateResolver.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,9 @@\n+    \/**\n+     * Parses a document from the input stream.\n+     * Caller is responsible for closing the stream.\n+     *\n+     * @param inputStream\n+     * @param disallowDocTypeDeclarations\n+     * @return {@link Document}\n+     * @throws XMLParserException\n+     *\/\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/parser\/XMLParser.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            Collections.synchronizedMap(new WeakHashMap<ClassLoader, Queue<DocumentBuilder>>());\n+            Collections.synchronizedMap(new WeakHashMap<>());\n@@ -57,1 +57,1 @@\n-            Collections.synchronizedMap(new WeakHashMap<ClassLoader, Queue<DocumentBuilder>>());\n+            Collections.synchronizedMap(new WeakHashMap<>());\n@@ -122,0 +122,1 @@\n+                @Override\n@@ -135,0 +136,1 @@\n+                @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/parser\/XMLParserImpl.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -578,0 +578,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/Manifest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -133,0 +133,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/ObjectContainer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -196,0 +196,1 @@\n+            @Override\n@@ -200,0 +201,1 @@\n+            @Override\n@@ -615,0 +617,1 @@\n+                    @Override\n@@ -811,0 +814,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/Reference.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,0 +142,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/SignatureProperties.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -129,0 +129,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/SignatureProperty.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+\n@@ -41,1 +42,0 @@\n-\n@@ -404,0 +404,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/SignedInfo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1034,0 +1034,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/XMLSignature.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -394,0 +394,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/XMLSignatureInput.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+\n@@ -54,0 +55,1 @@\n+    @Override\n@@ -81,0 +83,1 @@\n+        @Override\n@@ -89,0 +92,1 @@\n+        @Override\n@@ -101,0 +105,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/signature\/reference\/ReferenceSubTreeData.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    static final byte[] getBytes(BigInteger big, int bitlen) {\n+    static byte[] getBytes(BigInteger big, int bitlen) {\n@@ -151,1 +151,1 @@\n-    public static final String encode(BigInteger big) {\n+    public static String encode(BigInteger big) {\n@@ -167,1 +167,1 @@\n-    public static final byte[] encode(BigInteger big, int bitlen) {\n+    public static byte[] encode(BigInteger big, int bitlen) {\n@@ -208,1 +208,1 @@\n-    public static final BigInteger decodeBigIntegerFromElement(Element element)\n+    public static BigInteger decodeBigIntegerFromElement(Element element)\n@@ -219,1 +219,1 @@\n-    public static final BigInteger decodeBigIntegerFromText(Text text)\n+    public static BigInteger decodeBigIntegerFromText(Text text)\n@@ -231,1 +231,1 @@\n-    public static final void fillElementWithBigInteger(Element element, BigInteger biginteger) {\n+    public static void fillElementWithBigInteger(Element element, BigInteger biginteger) {\n@@ -256,1 +256,1 @@\n-    public static final byte[] decode(Element element) throws Base64DecodingException {\n+    public static byte[] decode(Element element) throws Base64DecodingException {\n@@ -282,1 +282,1 @@\n-    public static final Element encodeToElement(Document doc, String localName, byte[] bytes) {\n+    public static Element encodeToElement(Document doc, String localName, byte[] bytes) {\n@@ -299,1 +299,1 @@\n-    public static final byte[] decode(byte[] base64) throws Base64DecodingException  {\n+    public static byte[] decode(byte[] base64) throws Base64DecodingException  {\n@@ -310,1 +310,1 @@\n-    public static final String encode(byte[] binaryData) {\n+    public static String encode(byte[] binaryData) {\n@@ -326,1 +326,1 @@\n-    public static final byte[] decode(BufferedReader reader)\n+    public static byte[] decode(BufferedReader reader)\n@@ -345,1 +345,1 @@\n-    protected static final boolean isWhiteSpace(byte octet) {\n+    protected static boolean isWhiteSpace(byte octet) {\n@@ -349,1 +349,1 @@\n-    protected static final boolean isPad(byte octet) {\n+    protected static boolean isPad(byte octet) {\n@@ -367,1 +367,1 @@\n-    public static final String  encode(byte[] binaryData, int length) {\n+    public static String  encode(byte[] binaryData, int length) {\n@@ -477,1 +477,1 @@\n-    public static final byte[] decode(String encoded) throws Base64DecodingException {\n+    public static byte[] decode(String encoded) throws Base64DecodingException {\n@@ -486,1 +486,1 @@\n-    protected static final int getBytesInternal(String s, byte[] result) {\n+    protected static int getBytesInternal(String s, byte[] result) {\n@@ -499,1 +499,1 @@\n-    protected static final byte[] decodeInternal(byte[] base64Data, int len)\n+    protected static byte[] decodeInternal(byte[] base64Data, int len)\n@@ -594,1 +594,1 @@\n-    public static final void decode(String base64Data, OutputStream os)\n+    public static void decode(String base64Data, OutputStream os)\n@@ -609,1 +609,1 @@\n-    public static final void decode(byte[] base64Data, OutputStream os)\n+    public static void decode(byte[] base64Data, OutputStream os)\n@@ -614,1 +614,1 @@\n-    protected static final void decode(byte[] base64Data, OutputStream os, int len)\n+    protected static void decode(byte[] base64Data, OutputStream os, int len)\n@@ -697,1 +697,1 @@\n-    public static final void decode(InputStream is, OutputStream os)\n+    public static void decode(InputStream is, OutputStream os)\n@@ -774,1 +774,1 @@\n-    protected static final int removeWhiteSpace(byte[] data) {\n+    protected static int removeWhiteSpace(byte[] data) {\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/Base64.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+    @Override\n@@ -110,0 +111,1 @@\n+    @Override\n@@ -143,0 +145,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/DOMNamespaceContext.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    @Override\n@@ -51,1 +52,2 @@\n-    public void write(int arg0) {\n+    @Override\n+    public synchronized void write(int arg0) {\n@@ -56,0 +58,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/DigesterOutputStream.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n@@ -28,0 +27,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/ElementProxy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+    @Override\n@@ -69,0 +70,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/HelperNodeList.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+    @Override\n@@ -95,0 +96,1 @@\n+    @Override\n@@ -125,0 +127,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/JDKXPathAPI.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/JDKXPathFactory.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-     * returns them as a byte array.\n+     * returns them as a byte array. The method doesn't close the input stream.\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/JavaUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/Signature11ElementProxy.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/SignatureElementProxy.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    @Override\n@@ -56,0 +57,1 @@\n+    @Override\n@@ -65,0 +67,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/SignerOutputStream.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    @Override\n@@ -59,0 +60,1 @@\n+    @Override\n@@ -71,0 +73,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/UnsyncByteArrayOutputStream.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n@@ -30,0 +33,1 @@\n+import java.nio.file.Files;\n@@ -45,0 +49,2 @@\n+import com.sun.org.slf4j.internal.Logger;\n+import com.sun.org.slf4j.internal.LoggerFactory;\n@@ -53,0 +59,2 @@\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n@@ -64,2 +72,1 @@\n-    private static final com.sun.org.slf4j.internal.Logger LOG =\n-            com.sun.org.slf4j.internal.LoggerFactory.getLogger(XMLUtils.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(XMLUtils.class);\n@@ -77,1 +84,1 @@\n-                                LOG.error(\"Error instantiating XMLParser. Falling back to XMLParserImpl\");\n+                                LOG.error(\"Error instantiating XMLParser. Falling back to XMLParserImpl\", e);\n@@ -152,1 +159,1 @@\n-     * @param com whether comments or not\n+     * @param comments whether comments or not\n@@ -154,1 +161,1 @@\n-    public static void getSet(Node rootNode, Set<Node> result, Node exclude, boolean com) {\n+    public static void getSet(Node rootNode, Set<Node> result, Node exclude, boolean comments) {\n@@ -158,1 +165,1 @@\n-        getSetRec(rootNode, result, exclude, com);\n+        getSetRec(rootNode, result, exclude, comments);\n@@ -163,1 +170,1 @@\n-                                final Node exclude, final boolean com) {\n+                                final Node exclude, final boolean comments) {\n@@ -190,1 +197,1 @@\n-                getSetRec(r, result, exclude, com);\n+                getSetRec(r, result, exclude, comments);\n@@ -194,1 +201,1 @@\n-            if (com) {\n+            if (comments) {\n@@ -205,0 +212,12 @@\n+    \/**\n+     * Outputs a DOM tree to a {@link File}.\n+     *\n+     * @param contextNode root node of the DOM tree\n+     * @param outputFile the file to write to\n+     * @throws IOException\n+     *\/\n+    public static void outputDOM(Node contextNode, File outputFile) throws IOException {\n+        try (OutputStream os = new BufferedOutputStream(Files.newOutputStream(outputFile.toPath()), 8192)) {\n+            outputDOM(contextNode, os, false);\n+        }\n+    }\n@@ -213,1 +232,1 @@\n-        XMLUtils.outputDOM(contextNode, os, false);\n+        outputDOM(contextNode, os, false);\n@@ -228,1 +247,1 @@\n-                os.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\".getBytes(java.nio.charset.StandardCharsets.UTF_8));\n+                os.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\".getBytes(UTF_8));\n@@ -230,1 +249,0 @@\n-\n@@ -234,1 +252,1 @@\n-            LOG.debug(ex.getMessage(), ex);\n+            LOG.error(ex.getMessage(), ex);\n@@ -256,1 +274,1 @@\n-            LOG.debug(ex.getMessage(), ex);\n+            LOG.error(ex.getMessage(), ex);\n@@ -865,1 +883,1 @@\n-                                LOG.debug(\"Multiple elements with the same 'Id' attribute value!\");\n+                                LOG.warn(\"Multiple elements with the same 'Id' attribute value!\");\n@@ -924,2 +942,2 @@\n-                        if (attr.isId() && id.equals(attr.getValue()) && se != knownElement) {\n-                            LOG.debug(\"Multiple elements with the same 'Id' attribute value!\");\n+                        if (attr.isId() && id.equals(attr.getValue()) && !knownElement.isSameNode(se)) {\n+                            LOG.warn(\"Multiple elements with the same 'Id' attribute value!\");\n@@ -955,0 +973,43 @@\n+    \/**\n+     * Reads a document from the input stream.\n+     *\n+     * @param file\n+     * @param disallowDocTypeDeclarations\n+     * @return {@link Document}\n+     * @throws XMLParserException\n+     * @throws IOException\n+     *\/\n+    public static Document read(File file, boolean disallowDocTypeDeclarations) throws XMLParserException, IOException {\n+        try (InputStream inputStream = new BufferedInputStream(Files.newInputStream(file.toPath()), 8192)) {\n+            return read(inputStream, disallowDocTypeDeclarations);\n+        }\n+    }\n+\n+    \/**\n+     * Reads a document from the input stream and closes it.\n+     *\n+     * @param name - resource name to be opened by the class loader\n+     * @param loader\n+     * @param disallowDocTypeDeclarations\n+     * @return {@link Document}\n+     * @throws XMLParserException\n+     * @throws IOException inputStream.close() failed.\n+     *\/\n+    public static Document readResource(String name, ClassLoader loader, boolean disallowDocTypeDeclarations)\n+        throws XMLParserException, IOException {\n+        \/\/ Delegate to XMLParser implementation\n+        try (InputStream inputStream = loader.getResourceAsStream(name)) {\n+            return read(inputStream, disallowDocTypeDeclarations);\n+        }\n+\n+    }\n+\n+    \/**\n+     * Reads a document from the input stream.\n+     * Caller is responsible for closing the stream.\n+     *\n+     * @param inputStream\n+     * @param disallowDocTypeDeclarations\n+     * @return {@link Document}\n+     * @throws XMLParserException\n+     *\/\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/XMLUtils.java","additions":78,"deletions":17,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.net.URISyntaxException;\n@@ -32,0 +31,1 @@\n+import java.net.URISyntaxException;\n@@ -208,0 +208,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/resolver\/implementations\/ResolverDirectHTTP.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -113,0 +113,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/resolver\/implementations\/ResolverFragment.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/resolver\/implementations\/ResolverLocalFilesystem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/resolver\/implementations\/ResolverXPointer.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -278,0 +278,1 @@\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/SignatureMethod.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/DigesterOutputStream.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/MacOutputStream.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.security.Key;\n@@ -29,0 +28,1 @@\n+import java.security.Key;\n@@ -31,0 +31,1 @@\n+\n@@ -35,0 +36,1 @@\n+import javax.xml.crypto.dsig.XMLSignContext;\n@@ -37,1 +39,0 @@\n-import javax.xml.crypto.dsig.XMLSignContext;\n@@ -40,0 +41,1 @@\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/AbstractDOMSignatureMethod.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.security.spec.AlgorithmParameterSpec;\n@@ -33,0 +32,1 @@\n+import java.security.spec.AlgorithmParameterSpec;\n@@ -35,1 +35,6 @@\n-import javax.xml.crypto.*;\n+import javax.xml.crypto.Data;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.NodeSetData;\n+import javax.xml.crypto.OctetStreamData;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.XMLStructure;\n@@ -64,0 +69,1 @@\n+    @Override\n@@ -69,0 +75,1 @@\n+    @Override\n@@ -87,0 +94,1 @@\n+    @Override\n@@ -185,0 +193,1 @@\n+    @Override\n@@ -252,0 +261,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/ApacheCanonicalizer.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/ApacheData.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+\n@@ -35,2 +36,0 @@\n-import com.sun.org.apache.xml.internal.security.transforms.TransformationException;\n-import org.w3c.dom.Node;\n@@ -39,0 +38,1 @@\n+import com.sun.org.apache.xml.internal.security.transforms.TransformationException;\n@@ -40,0 +40,1 @@\n+import org.w3c.dom.Node;\n@@ -49,0 +50,1 @@\n+    @Override\n@@ -64,0 +66,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/ApacheNodeSetData.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -30,0 +31,1 @@\n+\n@@ -44,0 +46,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/ApacheOctetStreamData.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,5 +33,0 @@\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n-import com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput;\n-import com.sun.org.apache.xml.internal.security.transforms.Transform;\n@@ -39,1 +34,6 @@\n-import javax.xml.crypto.*;\n+import javax.xml.crypto.Data;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.NodeSetData;\n+import javax.xml.crypto.OctetStreamData;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.XMLStructure;\n@@ -41,1 +41,2 @@\n-import javax.xml.crypto.dsig.*;\n+import javax.xml.crypto.dsig.TransformException;\n+import javax.xml.crypto.dsig.TransformService;\n@@ -44,0 +45,8 @@\n+import com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput;\n+import com.sun.org.apache.xml.internal.security.transforms.Transform;\n+import com.sun.org.apache.xml.internal.security.transforms.Transforms;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+\n@@ -67,0 +76,1 @@\n+    @Override\n@@ -85,0 +95,1 @@\n+    @Override\n@@ -103,0 +114,1 @@\n+    @Override\n@@ -112,0 +124,1 @@\n+    @Override\n@@ -200,0 +213,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/ApacheTransform.java","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n-\n@@ -34,0 +30,5 @@\n+import javax.xml.crypto.Data;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.dsig.TransformException;\n+import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n+\n@@ -48,0 +49,1 @@\n+    @Override\n@@ -56,0 +58,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMCanonicalXMLC14N11Method.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n-\n@@ -34,0 +30,6 @@\n+import javax.xml.crypto.Data;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.TransformException;\n+import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n+\n@@ -44,0 +46,1 @@\n+    @Override\n@@ -52,0 +55,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMCanonicalXMLC14NMethod.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,1 +36,6 @@\n-import org.w3c.dom.Element;\n+import javax.xml.crypto.Data;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.TransformException;\n+import javax.xml.crypto.dsig.TransformService;\n@@ -38,2 +43,1 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dsig.*;\n+import org.w3c.dom.Element;\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMCanonicalizationMethod.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import javax.xml.crypto.*;\n+\n+import javax.xml.crypto.MarshalException;\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMCryptoBinary.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,4 @@\n-import javax.xml.crypto.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.xml.crypto.MarshalException;\n@@ -30,1 +33,2 @@\n-import javax.xml.crypto.dsig.*;\n+import javax.xml.crypto.dsig.DigestMethod;\n+import javax.xml.crypto.dsig.XMLSignature;\n@@ -33,2 +37,0 @@\n-import java.security.InvalidAlgorithmParameterException;\n-import java.security.spec.AlgorithmParameterSpec;\n@@ -150,0 +152,1 @@\n+    @Override\n@@ -254,0 +257,1 @@\n+        @Override\n@@ -257,0 +261,1 @@\n+        @Override\n@@ -288,0 +293,1 @@\n+        @Override\n@@ -291,0 +297,1 @@\n+        @Override\n@@ -304,0 +311,1 @@\n+        @Override\n@@ -307,0 +315,1 @@\n+        @Override\n@@ -320,0 +329,1 @@\n+        @Override\n@@ -323,0 +333,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMDigestMethod.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -38,0 +39,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMEnvelopedTransform.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,11 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dsig.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.crypto.Data;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.XMLStructure;\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.TransformException;\n@@ -34,5 +43,0 @@\n-import java.security.InvalidAlgorithmParameterException;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.util.*;\n-\n-import org.w3c.dom.Element;\n@@ -41,0 +45,1 @@\n+import org.w3c.dom.Element;\n@@ -50,0 +55,1 @@\n+    @Override\n@@ -62,0 +68,1 @@\n+    @Override\n@@ -140,0 +147,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMExcC14NMethod.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,5 +28,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dsig.spec.HMACParameterSpec;\n-import javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;\n-\n@@ -41,0 +36,1 @@\n+\n@@ -43,2 +39,9 @@\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.SignedInfo;\n+import javax.xml.crypto.dsig.XMLSignContext;\n+import javax.xml.crypto.dsig.XMLSignature;\n+import javax.xml.crypto.dsig.XMLSignatureException;\n+import javax.xml.crypto.dsig.XMLValidateContext;\n+import javax.xml.crypto.dsig.spec.HMACParameterSpec;\n+import javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;\n@@ -47,0 +50,2 @@\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n@@ -121,0 +126,1 @@\n+    @Override\n@@ -125,0 +131,1 @@\n+    @Override\n@@ -138,0 +145,1 @@\n+    @Override\n@@ -150,0 +158,1 @@\n+    @Override\n@@ -181,0 +190,1 @@\n+    @Override\n@@ -209,0 +219,1 @@\n+    @Override\n@@ -221,0 +232,1 @@\n+    @Override\n@@ -238,0 +250,1 @@\n+        @Override\n@@ -241,0 +254,1 @@\n+        @Override\n@@ -244,0 +258,1 @@\n+        @Override\n@@ -279,0 +294,1 @@\n+        @Override\n@@ -282,0 +298,1 @@\n+        @Override\n@@ -285,0 +302,1 @@\n+        @Override\n@@ -298,0 +316,1 @@\n+        @Override\n@@ -301,0 +320,1 @@\n+        @Override\n@@ -304,0 +324,1 @@\n+        @Override\n@@ -317,0 +338,1 @@\n+        @Override\n@@ -320,0 +342,1 @@\n+        @Override\n@@ -323,0 +346,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMHMACSignatureMethod.java","additions":31,"deletions":7,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @Override\n@@ -148,0 +149,1 @@\n+    @Override\n@@ -152,0 +154,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMKeyInfo.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.security.interfaces.ECPublicKey;\n@@ -33,0 +32,1 @@\n+import java.security.interfaces.ECPublicKey;\n@@ -62,0 +62,1 @@\n+    @Override\n@@ -67,0 +68,1 @@\n+    @Override\n@@ -72,0 +74,1 @@\n+    @Override\n@@ -76,0 +79,1 @@\n+    @Override\n@@ -89,0 +93,1 @@\n+    @Override\n@@ -93,0 +98,1 @@\n+    @Override\n@@ -98,0 +104,1 @@\n+    @Override\n@@ -103,0 +110,1 @@\n+    @Override\n@@ -107,0 +115,1 @@\n+    @Override\n@@ -116,0 +125,1 @@\n+    @Override\n@@ -127,0 +137,1 @@\n+    @Override\n@@ -135,0 +146,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMKeyInfoFactory.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMKeyName.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -104,0 +104,1 @@\n+    @Override\n@@ -201,0 +202,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMKeyValue.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dom.DOMCryptoContext;\n-import javax.xml.crypto.dsig.*;\n-\n@@ -33,1 +29,10 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.dom.DOMCryptoContext;\n+import javax.xml.crypto.dsig.Manifest;\n+import javax.xml.crypto.dsig.Reference;\n+import javax.xml.crypto.dsig.XMLSignature;\n@@ -117,0 +122,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMManifest.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n@@ -30,1 +32,2 @@\n-import javax.xml.crypto.*;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.XMLStructure;\n@@ -35,0 +38,1 @@\n+import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n@@ -39,2 +43,0 @@\n-import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n-\n@@ -174,0 +176,1 @@\n+    @Override\n@@ -178,0 +181,1 @@\n+    @Override\n@@ -182,0 +186,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMPGPData.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,5 +28,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dsig.spec.RSAPSSParameterSpec;\n-import javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;\n-\n@@ -34,1 +29,9 @@\n-import java.security.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.Provider;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n@@ -39,4 +42,5 @@\n-import org.w3c.dom.DOMException;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Text;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.dsig.*;\n+import javax.xml.crypto.dsig.spec.RSAPSSParameterSpec;\n+import javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;\n+\n@@ -47,0 +51,4 @@\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Text;\n@@ -128,0 +136,1 @@\n+    @Override\n@@ -132,0 +141,1 @@\n+    @Override\n@@ -206,0 +216,1 @@\n+    @Override\n@@ -253,0 +264,1 @@\n+    @Override\n@@ -294,0 +306,1 @@\n+    @Override\n@@ -321,1 +334,0 @@\n-        LOG.debug(\"Signing with key: {}\", key);\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMRSAPSSSignatureMethod.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -35,6 +35,3 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dom.DOMCryptoContext;\n-import javax.xml.crypto.dom.DOMURIReference;\n-\n-import java.io.*;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n@@ -43,2 +40,31 @@\n-import java.security.*;\n-import java.util.*;\n+import java.security.AccessController;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivilegedAction;\n+import java.security.Provider;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.xml.crypto.Data;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.NodeSetData;\n+import javax.xml.crypto.OctetStreamData;\n+import javax.xml.crypto.URIDereferencer;\n+import javax.xml.crypto.URIReferenceException;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.dom.DOMCryptoContext;\n+import javax.xml.crypto.dom.DOMURIReference;\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.DigestMethod;\n+import javax.xml.crypto.dsig.Reference;\n+import javax.xml.crypto.dsig.Transform;\n+import javax.xml.crypto.dsig.TransformException;\n+import javax.xml.crypto.dsig.TransformService;\n+import javax.xml.crypto.dsig.XMLSignContext;\n+import javax.xml.crypto.dsig.XMLSignature;\n+import javax.xml.crypto.dsig.XMLSignatureException;\n+import javax.xml.crypto.dsig.XMLValidateContext;\n@@ -46,0 +72,4 @@\n+import org.jcp.xml.dsig.internal.DigesterOutputStream;\n+import com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput;\n+import com.sun.org.apache.xml.internal.security.utils.UnsyncBufferedOutputStream;\n+import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n@@ -51,6 +81,0 @@\n-import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n-\n-import org.jcp.xml.dsig.internal.DigesterOutputStream;\n-import com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput;\n-import com.sun.org.apache.xml.internal.security.utils.UnsyncBufferedOutputStream;\n-\n@@ -273,0 +297,1 @@\n+    @Override\n@@ -277,0 +302,1 @@\n+    @Override\n@@ -281,0 +307,1 @@\n+    @Override\n@@ -285,0 +312,1 @@\n+    @Override\n@@ -289,0 +317,1 @@\n+    @Override\n@@ -293,0 +322,1 @@\n+    @Override\n@@ -297,0 +327,1 @@\n+    @Override\n@@ -375,0 +406,1 @@\n+    @Override\n@@ -397,0 +429,1 @@\n+    @Override\n@@ -401,0 +434,1 @@\n+    @Override\n@@ -571,0 +605,1 @@\n+    @Override\n@@ -634,0 +669,1 @@\n+                        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMReference.java","additions":50,"deletions":14,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -179,0 +179,1 @@\n+    @Override\n@@ -183,0 +184,1 @@\n+    @Override\n@@ -187,0 +189,1 @@\n+    @Override\n@@ -222,0 +225,1 @@\n+    @Override\n@@ -226,0 +230,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMRetrievalMethod.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;\n-\n@@ -33,1 +29,9 @@\n-import java.security.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.Provider;\n+import java.security.PublicKey;\n+import java.security.Signature;\n+import java.security.SignatureException;\n@@ -40,1 +44,8 @@\n-import org.w3c.dom.Element;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.SignedInfo;\n+import javax.xml.crypto.dsig.XMLSignContext;\n+import javax.xml.crypto.dsig.XMLSignatureException;\n+import javax.xml.crypto.dsig.XMLValidateContext;\n+import javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;\n@@ -42,0 +53,1 @@\n+import org.jcp.xml.dsig.internal.SignerOutputStream;\n@@ -44,1 +56,2 @@\n-import org.jcp.xml.dsig.internal.SignerOutputStream;\n+import org.w3c.dom.Element;\n+\n@@ -106,0 +119,8 @@\n+    static final String RSA_SHA3_224_MGF1 =\n+        \"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha3-224-rsa-MGF1\";\n+    static final String RSA_SHA3_256_MGF1 =\n+        \"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha3-256-rsa-MGF1\";\n+    static final String RSA_SHA3_384_MGF1 =\n+        \"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha3-384-rsa-MGF1\";\n+    static final String RSA_SHA3_512_MGF1 =\n+        \"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha3-512-rsa-MGF1\";\n@@ -197,0 +218,8 @@\n+        } else if (alg.equals(RSA_SHA3_224_MGF1)) {\n+            return new SHA3_224withRSAandMGF1(smElem);\n+        } else if (alg.equals(RSA_SHA3_256_MGF1)) {\n+            return new SHA3_256withRSAandMGF1(smElem);\n+        } else if (alg.equals(RSA_SHA3_384_MGF1)) {\n+            return new SHA3_384withRSAandMGF1(smElem);\n+        } else if (alg.equals(RSA_SHA3_512_MGF1)) {\n+            return new SHA3_512withRSAandMGF1(smElem);\n@@ -239,0 +268,1 @@\n+    @Override\n@@ -260,0 +290,1 @@\n+    @Override\n@@ -326,0 +357,1 @@\n+    @Override\n@@ -347,1 +379,0 @@\n-        LOG.debug(\"Signing with key: {}\", key);\n@@ -386,0 +417,5 @@\n+\n+        @Override\n+        Type getAlgorithmType() {\n+            return Type.RSA;\n+        }\n@@ -400,1 +436,1 @@\n-        abstract public PSSParameterSpec getPSSParameterSpec();\n+        public abstract PSSParameterSpec getPSSParameterSpec();\n@@ -416,3 +452,1 @@\n-                return (p == null)\n-                        ? Signature.getInstance(getJCAAlgorithm())\n-                        : Signature.getInstance(getJCAAlgorithm(), p);\n+                return super.getSignature(p);\n@@ -512,0 +546,5 @@\n+\n+        @Override\n+        Type getAlgorithmType() {\n+            return Type.DSA;\n+        }\n@@ -553,0 +592,5 @@\n+\n+        @Override\n+        Type getAlgorithmType() {\n+            return Type.ECDSA;\n+        }\n@@ -586,0 +630,4 @@\n+        @Override\n+        Type getAlgorithmType() {\n+            return Type.EDDSA;\n+        }\n@@ -604,4 +652,0 @@\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -618,0 +662,1 @@\n+        @Override\n@@ -621,0 +666,1 @@\n+        @Override\n@@ -624,3 +670,0 @@\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -637,0 +680,1 @@\n+        @Override\n@@ -640,0 +684,1 @@\n+        @Override\n@@ -643,3 +688,0 @@\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -656,0 +698,1 @@\n+        @Override\n@@ -659,0 +702,1 @@\n+        @Override\n@@ -662,3 +706,0 @@\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -675,0 +716,1 @@\n+        @Override\n@@ -678,0 +720,1 @@\n+        @Override\n@@ -681,3 +724,0 @@\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -702,4 +742,0 @@\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -710,1 +746,1 @@\n-        private static PSSParameterSpec spec\n+        private static final PSSParameterSpec SHA1_MGF1_PARAMS\n@@ -727,1 +763,1 @@\n-            return spec;\n+            return SHA1_MGF1_PARAMS;\n@@ -733,4 +769,0 @@\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -741,1 +773,1 @@\n-        private static PSSParameterSpec spec\n+        private static final PSSParameterSpec SHA224_MGF1_PARAMS\n@@ -758,1 +790,1 @@\n-            return spec;\n+            return SHA224_MGF1_PARAMS;\n@@ -764,4 +796,0 @@\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -772,1 +800,1 @@\n-        private static PSSParameterSpec spec\n+        private static final PSSParameterSpec SHA256_MGF1_PARAMS\n@@ -789,1 +817,1 @@\n-            return spec;\n+            return SHA256_MGF1_PARAMS;\n@@ -795,4 +823,0 @@\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -803,1 +827,1 @@\n-        private static PSSParameterSpec spec\n+        private static final PSSParameterSpec SHA384_MGF1_PARAMS\n@@ -820,1 +844,1 @@\n-            return spec;\n+            return SHA384_MGF1_PARAMS;\n@@ -826,4 +850,0 @@\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -834,1 +854,1 @@\n-        private static PSSParameterSpec spec\n+        private static final PSSParameterSpec SHA512_MGF1_PARAMS\n@@ -851,1 +871,1 @@\n-            return spec;\n+            return SHA512_MGF1_PARAMS;\n@@ -857,0 +877,16 @@\n+    }\n+\n+    static final class SHA3_224withRSAandMGF1 extends AbstractRSAPSSSignatureMethod {\n+\n+        private static final PSSParameterSpec SHA3_224_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA3-224\", \"MGF1\",\n+                new MGF1ParameterSpec(\"SHA3-224\"), 28,\n+                PSSParameterSpec.TRAILER_FIELD_BC);\n+\n+        SHA3_224withRSAandMGF1(AlgorithmParameterSpec params)\n+            throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_224withRSAandMGF1(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n@@ -858,2 +894,94 @@\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n+        public String getAlgorithm() {\n+            return RSA_SHA3_224_MGF1;\n+        }\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA3_224_MGF1_PARAMS;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-224withRSAandMGF1\";\n+        }\n+    }\n+\n+    static final class SHA3_256withRSAandMGF1 extends AbstractRSAPSSSignatureMethod {\n+\n+        private static final PSSParameterSpec SHA3_256_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA3-256\", \"MGF1\",\n+                new MGF1ParameterSpec(\"SHA3-256\"), 32,\n+                PSSParameterSpec.TRAILER_FIELD_BC);\n+\n+        SHA3_256withRSAandMGF1(AlgorithmParameterSpec params)\n+            throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_256withRSAandMGF1(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return RSA_SHA3_256_MGF1;\n+        }\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA3_256_MGF1_PARAMS;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-256withRSAandMGF1\";\n+        }\n+    }\n+\n+    static final class SHA3_384withRSAandMGF1 extends AbstractRSAPSSSignatureMethod {\n+\n+        private static final PSSParameterSpec SHA3_384_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA3-384\", \"MGF1\",\n+                new MGF1ParameterSpec(\"SHA3-384\"), 48,\n+                PSSParameterSpec.TRAILER_FIELD_BC);\n+\n+        SHA3_384withRSAandMGF1(AlgorithmParameterSpec params)\n+            throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_384withRSAandMGF1(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return RSA_SHA3_384_MGF1;\n+        }\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA3_384_MGF1_PARAMS;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-384withRSAandMGF1\";\n+        }\n+    }\n+\n+    static final class SHA3_512withRSAandMGF1 extends AbstractRSAPSSSignatureMethod {\n+\n+        private static final PSSParameterSpec SHA3_512_MGF1_PARAMS\n+                = new PSSParameterSpec(\"SHA3-512\", \"MGF1\",\n+                new MGF1ParameterSpec(\"SHA3-512\"), 64,\n+                PSSParameterSpec.TRAILER_FIELD_BC);\n+\n+        SHA3_512withRSAandMGF1(AlgorithmParameterSpec params)\n+            throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+        SHA3_512withRSAandMGF1(Element dmElem) throws MarshalException {\n+            super(dmElem);\n+        }\n+        @Override\n+        public String getAlgorithm() {\n+            return RSA_SHA3_512_MGF1;\n+        }\n+        @Override\n+        public PSSParameterSpec getPSSParameterSpec() {\n+            return SHA3_512_MGF1_PARAMS;\n+        }\n+        @Override\n+        String getJCAAlgorithm() {\n+            return \"SHA3-512withRSAandMGF1\";\n@@ -879,4 +1007,0 @@\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.RSA;\n-        }\n@@ -893,0 +1017,1 @@\n+        @Override\n@@ -896,0 +1021,1 @@\n+        @Override\n@@ -899,0 +1025,1 @@\n+        @Override\n@@ -902,3 +1029,0 @@\n-        Type getAlgorithmType() {\n-            return Type.DSA;\n-        }\n@@ -915,0 +1039,1 @@\n+        @Override\n@@ -918,0 +1043,1 @@\n+        @Override\n@@ -921,0 +1047,1 @@\n+        @Override\n@@ -924,3 +1051,0 @@\n-        Type getAlgorithmType() {\n-            return Type.DSA;\n-        }\n@@ -937,0 +1061,1 @@\n+        @Override\n@@ -940,0 +1065,1 @@\n+        @Override\n@@ -943,0 +1069,1 @@\n+        @Override\n@@ -946,3 +1073,0 @@\n-        Type getAlgorithmType() {\n-            return Type.ECDSA;\n-        }\n@@ -967,0 +1091,1 @@\n+        @Override\n@@ -970,4 +1095,0 @@\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.ECDSA;\n-        }\n@@ -984,0 +1105,1 @@\n+        @Override\n@@ -987,0 +1109,1 @@\n+        @Override\n@@ -990,0 +1113,1 @@\n+        @Override\n@@ -993,3 +1117,0 @@\n-        Type getAlgorithmType() {\n-            return Type.ECDSA;\n-        }\n@@ -1006,0 +1127,1 @@\n+        @Override\n@@ -1009,0 +1131,1 @@\n+        @Override\n@@ -1012,0 +1135,1 @@\n+        @Override\n@@ -1015,3 +1139,0 @@\n-        Type getAlgorithmType() {\n-            return Type.ECDSA;\n-        }\n@@ -1028,0 +1149,1 @@\n+        @Override\n@@ -1031,0 +1153,1 @@\n+        @Override\n@@ -1034,0 +1157,1 @@\n+        @Override\n@@ -1037,3 +1161,0 @@\n-        Type getAlgorithmType() {\n-            return Type.ECDSA;\n-        }\n@@ -1058,0 +1179,1 @@\n+        @Override\n@@ -1061,4 +1183,0 @@\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.ECDSA;\n-        }\n@@ -1087,5 +1205,0 @@\n-\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.EDDSA;\n-        }\n@@ -1113,5 +1226,0 @@\n-\n-        @Override\n-        Type getAlgorithmType() {\n-            return Type.EDDSA;\n-        }\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMSignatureMethod.java","additions":208,"deletions":100,"binary":false,"changes":308,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dom.DOMCryptoContext;\n-import javax.xml.crypto.dsig.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n@@ -32,1 +32,5 @@\n-import java.util.*;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.dom.DOMCryptoContext;\n+import javax.xml.crypto.dsig.SignatureProperties;\n+import javax.xml.crypto.dsig.SignatureProperty;\n+import javax.xml.crypto.dsig.XMLSignature;\n@@ -120,0 +124,1 @@\n+    @Override\n@@ -124,0 +129,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMSignatureProperties.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dom.DOMCryptoContext;\n-import javax.xml.crypto.dsig.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n@@ -32,1 +32,5 @@\n-import java.util.*;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.XMLStructure;\n+import javax.xml.crypto.dom.DOMCryptoContext;\n+import javax.xml.crypto.dsig.SignatureProperty;\n+import javax.xml.crypto.dsig.XMLSignature;\n@@ -120,0 +124,1 @@\n+    @Override\n@@ -124,0 +129,1 @@\n+    @Override\n@@ -128,0 +134,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMSignatureProperty.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,5 +28,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dom.DOMCryptoContext;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dsig.spec.RSAPSSParameterSpec;\n-\n@@ -35,0 +30,1 @@\n+import java.io.IOException;\n@@ -37,1 +33,0 @@\n-import java.io.IOException;\n@@ -42,1 +37,15 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.dom.DOMCryptoContext;\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.Reference;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.SignedInfo;\n+import javax.xml.crypto.dsig.TransformException;\n+import javax.xml.crypto.dsig.XMLSignature;\n+import javax.xml.crypto.dsig.XMLSignatureException;\n+import javax.xml.crypto.dsig.spec.RSAPSSParameterSpec;\n@@ -45,0 +54,2 @@\n+import com.sun.org.apache.xml.internal.security.utils.UnsyncBufferedOutputStream;\n+import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n@@ -48,2 +59,1 @@\n-import com.sun.org.apache.xml.internal.security.utils.UnsyncBufferedOutputStream;\n-import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n+\n@@ -60,3 +70,3 @@\n-    private List<Reference> references;\n-    private CanonicalizationMethod canonicalizationMethod;\n-    private SignatureMethod signatureMethod;\n+    private final List<Reference> references;\n+    private final CanonicalizationMethod canonicalizationMethod;\n+    private final SignatureMethod signatureMethod;\n@@ -89,2 +99,1 @@\n-        this.references = Collections.unmodifiableList(\n-            new ArrayList<>(references));\n+        this.references = Collections.unmodifiableList(new ArrayList<>(references));\n@@ -92,2 +101,1 @@\n-            throw new IllegalArgumentException(\"list of references must \" +\n-                \"contain at least one entry\");\n+            throw new IllegalArgumentException(\"list of references must contain at least one entry\");\n@@ -95,2 +103,1 @@\n-        for (int i = 0, size = this.references.size(); i < size; i++) {\n-            Object obj = this.references.get(i);\n+        for (Object obj : this.references) {\n@@ -98,2 +105,1 @@\n-                throw new ClassCastException(\"list of references contains \" +\n-                    \"an illegal type\");\n+                throw new ClassCastException(\"list of references contains an illegal \" + obj.getClass());\n@@ -213,0 +219,1 @@\n+    @Override\n@@ -217,0 +224,1 @@\n+    @Override\n@@ -221,0 +229,1 @@\n+    @Override\n@@ -225,0 +234,1 @@\n+    @Override\n@@ -229,0 +239,1 @@\n+    @Override\n@@ -252,2 +263,2 @@\n-                for (int i = 0; i < signedInfoBytes.length; i++) {\n-                    sb.append((char)signedInfoBytes[i]);\n+                for (byte signedInfoByte : signedInfoBytes) {\n+                    sb.append((char) signedInfoByte);\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMSignedInfo.java","additions":33,"deletions":22,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.List;\n+\n@@ -31,1 +33,0 @@\n-import org.w3c.dom.Node;\n@@ -33,1 +34,1 @@\n-import java.util.List;\n+import org.w3c.dom.Node;\n@@ -41,0 +42,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMStructure.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import javax.xml.crypto.NodeSetData;\n@@ -34,0 +33,3 @@\n+\n+import javax.xml.crypto.NodeSetData;\n+\n@@ -82,0 +84,1 @@\n+        @Override\n@@ -90,0 +93,1 @@\n+        @Override\n@@ -102,0 +106,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMSubTreeData.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+    @Override\n@@ -105,0 +106,1 @@\n+    @Override\n@@ -148,0 +150,1 @@\n+    @Override\n@@ -167,0 +170,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMTransform.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,7 @@\n-import org.w3c.dom.Attr;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n+import javax.xml.crypto.Data;\n+import javax.xml.crypto.URIDereferencer;\n+import javax.xml.crypto.URIReference;\n+import javax.xml.crypto.URIReferenceException;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.dom.DOMCryptoContext;\n+import javax.xml.crypto.dom.DOMURIReference;\n@@ -33,0 +37,1 @@\n+import com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput;\n@@ -36,1 +41,3 @@\n-import com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput;\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n@@ -38,2 +45,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dom.*;\n@@ -56,0 +61,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMURIDereferencer.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n@@ -53,2 +54,0 @@\n-import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n-\n@@ -137,0 +136,1 @@\n+    @Override\n@@ -150,2 +150,1 @@\n-        for (int i = 0, size = content.size(); i < size; i++) {\n-            Object object = content.get(i);\n+        for (Object object : content) {\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMX509Data.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.math.BigInteger;\n+\n+import javax.security.auth.x500.X500Principal;\n@@ -33,3 +36,0 @@\n-import java.math.BigInteger;\n-\n-import javax.security.auth.x500.X500Principal;\n@@ -91,0 +91,1 @@\n+    @Override\n@@ -95,0 +96,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMX509IssuerSerial.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dom.DOMCryptoContext;\n-import javax.xml.crypto.dsig.*;\n-\n@@ -33,1 +29,10 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.XMLStructure;\n+import javax.xml.crypto.dom.DOMCryptoContext;\n+import javax.xml.crypto.dsig.XMLObject;\n+import javax.xml.crypto.dsig.XMLSignature;\n@@ -148,0 +153,1 @@\n+    @Override\n@@ -152,0 +158,1 @@\n+    @Override\n@@ -156,0 +163,1 @@\n+    @Override\n@@ -160,0 +168,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXMLObject.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -35,7 +35,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dom.*;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dsig.dom.DOMSignContext;\n-import javax.xml.crypto.dsig.dom.DOMValidateContext;\n-import javax.xml.crypto.dsig.keyinfo.KeyInfo;\n-\n@@ -45,1 +38,0 @@\n-import java.util.Collections;\n@@ -47,0 +39,1 @@\n+import java.util.Collections;\n@@ -51,0 +44,22 @@\n+import javax.xml.crypto.KeySelector;\n+import javax.xml.crypto.KeySelectorException;\n+import javax.xml.crypto.KeySelectorResult;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.XMLStructure;\n+import javax.xml.crypto.dom.DOMCryptoContext;\n+import javax.xml.crypto.dsig.Manifest;\n+import javax.xml.crypto.dsig.Reference;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.SignedInfo;\n+import javax.xml.crypto.dsig.Transform;\n+import javax.xml.crypto.dsig.XMLObject;\n+import javax.xml.crypto.dsig.XMLSignContext;\n+import javax.xml.crypto.dsig.XMLSignature;\n+import javax.xml.crypto.dsig.XMLSignatureException;\n+import javax.xml.crypto.dsig.XMLValidateContext;\n+import javax.xml.crypto.dsig.dom.DOMSignContext;\n+import javax.xml.crypto.dsig.dom.DOMValidateContext;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfo;\n+\n+import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n@@ -56,2 +71,0 @@\n-import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n-\n@@ -67,2 +80,2 @@\n-    private String id;\n-    private SignatureValue sv;\n+    private final String id;\n+    private final SignatureValue sv;\n@@ -71,1 +84,1 @@\n-    private SignedInfo si;\n+    private final SignedInfo si;\n@@ -177,0 +190,1 @@\n+    @Override\n@@ -181,0 +195,1 @@\n+    @Override\n@@ -185,0 +200,1 @@\n+    @Override\n@@ -189,0 +205,1 @@\n+    @Override\n@@ -193,0 +210,1 @@\n+    @Override\n@@ -197,0 +215,1 @@\n+    @Override\n@@ -237,2 +256,2 @@\n-        for (int i = 0, size = objects.size(); i < size; i++) {\n-            ((DOMXMLObject)objects.get(i)).marshal(sigElem, dsPrefix, context);\n+        for (XMLObject object : objects) {\n+            ((DOMXMLObject)object).marshal(sigElem, dsPrefix, context);\n@@ -463,1 +482,1 @@\n-                    digestReference((DOMReference)xs, signContext);\n+                    digestReference((DOMReference) xs, signContext);\n@@ -465,1 +484,1 @@\n-                    Manifest man = (Manifest)xs;\n+                    Manifest man = (Manifest) xs;\n@@ -467,3 +486,2 @@\n-                    for (int i = 0, size = manRefs.size(); i < size; i++) {\n-                        digestReference((DOMReference)manRefs.get(i),\n-                                        signContext);\n+                    for (Reference manRef : manRefs) {\n+                        digestReference((DOMReference) manRef, signContext);\n@@ -521,0 +539,1 @@\n+        @Override\n@@ -525,0 +544,1 @@\n+        @Override\n@@ -608,0 +628,1 @@\n+        @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXMLSignature.java","additions":41,"deletions":20,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -28,7 +28,0 @@\n-import javax.xml.crypto.*;\n-import javax.xml.crypto.dom.DOMCryptoContext;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dsig.dom.DOMValidateContext;\n-import javax.xml.crypto.dsig.keyinfo.*;\n-import javax.xml.crypto.dsig.spec.*;\n-\n@@ -39,0 +32,27 @@\n+import javax.xml.crypto.Data;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.URIDereferencer;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.XMLStructure;\n+import javax.xml.crypto.dom.DOMCryptoContext;\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.DigestMethod;\n+import javax.xml.crypto.dsig.Manifest;\n+import javax.xml.crypto.dsig.Reference;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.crypto.dsig.SignatureProperties;\n+import javax.xml.crypto.dsig.SignatureProperty;\n+import javax.xml.crypto.dsig.SignedInfo;\n+import javax.xml.crypto.dsig.Transform;\n+import javax.xml.crypto.dsig.TransformService;\n+import javax.xml.crypto.dsig.XMLObject;\n+import javax.xml.crypto.dsig.XMLSignature;\n+import javax.xml.crypto.dsig.XMLSignatureFactory;\n+import javax.xml.crypto.dsig.XMLValidateContext;\n+import javax.xml.crypto.dsig.dom.DOMValidateContext;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfo;\n+import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;\n+import javax.xml.crypto.dsig.spec.DigestMethodParameterSpec;\n+import javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;\n+import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n+\n@@ -54,0 +74,1 @@\n+    @Override\n@@ -58,0 +79,1 @@\n+    @Override\n@@ -64,0 +86,1 @@\n+    @Override\n@@ -68,0 +91,1 @@\n+    @Override\n@@ -92,0 +116,1 @@\n+    @Override\n@@ -102,0 +127,1 @@\n+    @Override\n@@ -108,0 +134,1 @@\n+    @Override\n@@ -115,0 +142,1 @@\n+    @Override\n@@ -121,0 +149,1 @@\n+    @Override\n@@ -126,0 +155,1 @@\n+    @Override\n@@ -131,0 +161,1 @@\n+    @Override\n@@ -136,0 +167,1 @@\n+    @Override\n@@ -142,0 +174,1 @@\n+    @Override\n@@ -151,0 +184,1 @@\n+    @Override\n@@ -204,0 +238,1 @@\n+    @Override\n@@ -212,0 +247,1 @@\n+    @Override\n@@ -245,0 +281,1 @@\n+    @Override\n@@ -273,0 +310,8 @@\n+        } else if (algorithm.equals(DOMSignatureMethod.RSA_SHA3_224_MGF1)) {\n+            return new DOMSignatureMethod.SHA3_224withRSAandMGF1(params);\n+        } else if (algorithm.equals(DOMSignatureMethod.RSA_SHA3_256_MGF1)) {\n+            return new DOMSignatureMethod.SHA3_256withRSAandMGF1(params);\n+        } else if (algorithm.equals(DOMSignatureMethod.RSA_SHA3_384_MGF1)) {\n+            return new DOMSignatureMethod.SHA3_384withRSAandMGF1(params);\n+        } else if (algorithm.equals(DOMSignatureMethod.RSA_SHA3_512_MGF1)) {\n+            return new DOMSignatureMethod.SHA3_512withRSAandMGF1(params);\n@@ -314,0 +359,1 @@\n+    @Override\n@@ -333,0 +379,1 @@\n+    @Override\n@@ -355,0 +402,1 @@\n+    @Override\n@@ -373,0 +421,1 @@\n+    @Override\n@@ -395,0 +444,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXMLSignatureFactory.java","additions":57,"deletions":7,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+    @Override\n@@ -73,0 +74,1 @@\n+    @Override\n@@ -128,0 +130,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXPathFilter2Transform.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+    @Override\n@@ -92,0 +93,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXPathTransform.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n@@ -32,1 +30,3 @@\n-import javax.xml.crypto.*;\n+import javax.xml.crypto.MarshalException;\n+import javax.xml.crypto.XMLCryptoContext;\n+import javax.xml.crypto.XMLStructure;\n@@ -36,0 +36,3 @@\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+\n@@ -55,0 +58,1 @@\n+    @Override\n@@ -67,0 +71,1 @@\n+    @Override\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXSLTTransform.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,1 +33,4 @@\n-import java.util.*;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n@@ -35,0 +38,1 @@\n+\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/Utils.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,4 +35,12 @@\n-import java.util.*;\n-import java.security.*;\n-\n-import javax.xml.crypto.dsig.*;\n+import java.security.AccessController;\n+import java.security.InvalidParameterException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivilegedAction;\n+import java.security.Provider;\n+import java.security.ProviderException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.Transform;\n@@ -137,1 +145,1 @@\n-        \/\/ Apache Santuario XML Security for Java, version 3.0.2\n+        \/\/ Apache Santuario XML Security for Java, version 3.0.3\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/XMLDSigRI.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## Apache Santuario v3.0.2\n+## Apache Santuario v3.0.3\n","filename":"src\/java.xml.crypto\/share\/legal\/santuario.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,0 +104,1 @@\n+            rsaSha3_224mgf1, rsaSha3_256mgf1, rsaSha3_384mgf1, rsaSha3_512mgf1,\n@@ -212,0 +213,1 @@\n+            \"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha3-256-rsa-MGF1\",\n@@ -245,1 +247,1 @@\n-    \/\/ As of JDK 17, the number of defined algorithms are...\n+    \/\/ As of JDK 21, the number of defined algorithms are...\n@@ -337,0 +339,4 @@\n+        test_create_signature_enveloping_sha512_rsa_sha3_224_mgf1();\n+        test_create_signature_enveloping_sha512_rsa_sha3_256_mgf1();\n+        test_create_signature_enveloping_sha512_rsa_sha3_384_mgf1();\n+        test_create_signature_enveloping_sha512_rsa_sha3_512_mgf1();\n@@ -545,0 +551,4 @@\n+        rsaSha3_224mgf1 = fac.newSignatureMethod(\"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha3-224-rsa-MGF1\", null);\n+        rsaSha3_256mgf1 = fac.newSignatureMethod(\"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha3-256-rsa-MGF1\", null);\n+        rsaSha3_384mgf1 = fac.newSignatureMethod(\"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha3-384-rsa-MGF1\", null);\n+        rsaSha3_512mgf1 = fac.newSignatureMethod(\"http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha3-512-rsa-MGF1\", null);\n@@ -810,0 +820,32 @@\n+    static void test_create_signature_enveloping_sha512_rsa_sha3_224_mgf1()\n+            throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-sha512-rsa_sha3_224_mgf1.xml\");\n+        test_create_signature_enveloping(sha512, rsaSha3_224mgf1, rsa1024,\n+                getPrivateKey(\"RSA\", 1024), kvks, false, true);\n+        System.out.println();\n+    }\n+\n+    static void test_create_signature_enveloping_sha512_rsa_sha3_256_mgf1()\n+            throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-sha512-rsa_sha3_256_mgf1.xml\");\n+        test_create_signature_enveloping(sha512, rsaSha3_256mgf1, rsa1024,\n+                getPrivateKey(\"RSA\", 1024), kvks, false, true);\n+        System.out.println();\n+    }\n+\n+    static void test_create_signature_enveloping_sha512_rsa_sha3_384_mgf1()\n+            throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-sha512-rsa_sha3_384_mgf1.xml\");\n+        test_create_signature_enveloping(sha512, rsaSha3_384mgf1, rsa1024,\n+                getPrivateKey(\"RSA\", 1024), kvks, false, true);\n+        System.out.println();\n+    }\n+\n+    static void test_create_signature_enveloping_sha512_rsa_sha3_512_mgf1()\n+            throws Exception {\n+        System.out.println(\"* Generating signature-enveloping-sha512-rsa_sha3_512_mgf1.xml\");\n+        test_create_signature_enveloping(sha512, rsaSha3_512mgf1, rsa2048,\n+                getPrivateKey(\"RSA\", 2048), kvks, false, true);\n+        System.out.println();\n+    }\n+\n@@ -1976,1 +2018,1 @@\n-                                sm.contains(\"#sha512-rsa-MGF1\") ? 2048 : 1024);\n+                                sm.contains(\"512-rsa-MGF1\") ? 2048 : 1024);\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/GenerationTests.java","additions":44,"deletions":2,"binary":false,"changes":46,"status":"modified"}]}