{"files":[{"patch":"@@ -546,6 +546,0 @@\n-\n-            @Override\n-            final boolean filter(int index) {\n-                return stackFrames[index].declaringClass() == Continuation.class\n-                        && \"yield0\".equals(stackFrames[index].getMethodName());\n-            }\n@@ -688,4 +682,0 @@\n-            @Override\n-            final boolean filter(int index) { return false; }\n-\n-\n@@ -823,6 +813,0 @@\n-\n-            @Override\n-            final boolean filter(int index) {\n-                return stackFrames[index].declaringClass() == Continuation.class\n-                        && \"yield0\".equals(stackFrames[index].getMethodName());\n-            }\n@@ -898,7 +882,0 @@\n-        \/**\n-         * Filter out frames at the top of a batch\n-         * @param index the position of the frame.\n-         * @return true if the frame should be skipped\n-         *\/\n-        abstract boolean filter(int index);\n-\n@@ -1010,2 +987,1 @@\n-                if ((depth == 0 && filterStackWalkImpl(at(i))) \/\/ filter the frames due to the stack stream implementation\n-                        || filter(i)) {\n+                if (depth == 0 && filterStackWalkImpl(at(i))) { \/\/ filter the frames due to the stack stream implementation\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackStreamFactory.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-            assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"bar\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n+            assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"bar\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -801,1 +801,1 @@\n-                         : Arrays.asList(\"yield\", \"ord104_testMethod_dontinline\",\n+                         : Arrays.asList(\"yield0\", \"yield\", \"ord104_testMethod_dontinline\",\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/BasicExt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -81,1 +81,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -85,1 +85,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\"));\n@@ -89,1 +89,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\"));\n@@ -93,1 +93,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n@@ -97,1 +97,1 @@\n-                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n+                        assertEquals(frames, cont.isDone() ? List.of() : Arrays.asList(\"yield0\", \"yield\", \"lambda$bar$14\", \"run\", \"enter0\", \"enter\", \"run\", \"bar\", \"lambda$foo$8\", \"run\", \"enter0\", \"enter\", \"yield0\", \"run\", \"foo\", \"lambda$test1$0\", \"run\", \"enter0\", \"enter\"));\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/Scoped.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}