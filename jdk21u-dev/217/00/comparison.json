{"files":[{"patch":"@@ -470,0 +470,1 @@\n+  _gc_state_changed(false),\n@@ -1684,3 +1685,8 @@\n-void ShenandoahHeap::set_gc_state_all_threads(char state) {\n-  for (JavaThreadIteratorWithHandle jtiwh; JavaThread *t = jtiwh.next(); ) {\n-    ShenandoahThreadLocalData::set_gc_state(t, state);\n+void ShenandoahHeap::set_gc_state_all_threads() {\n+  assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), \"Must be at Shenandoah safepoint\");\n+  if (_gc_state_changed) {\n+    _gc_state_changed = false;\n+    char state = gc_state();\n+    for (JavaThreadIteratorWithHandle jtiwh; JavaThread *t = jtiwh.next(); ) {\n+      ShenandoahThreadLocalData::set_gc_state(t, state);\n+    }\n@@ -1691,1 +1697,1 @@\n-  assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), \"Should really be Shenandoah safepoint\");\n+  assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), \"Must be at Shenandoah safepoint\");\n@@ -1693,1 +1699,1 @@\n-  set_gc_state_all_threads(_gc_state.raw_value());\n+  _gc_state_changed = true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -284,0 +284,1 @@\n+  bool _gc_state_changed;\n@@ -291,1 +292,0 @@\n-  void set_gc_state_all_threads(char state);\n@@ -296,0 +296,2 @@\n+  void set_gc_state_all_threads();\n+  bool has_gc_state_changed() { return _gc_state_changed; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,9 @@\n+bool VM_ShenandoahOperation::doit_prologue() {\n+  assert(!ShenandoahHeap::heap()->has_gc_state_changed(), \"GC State can only be changed on a safepoint.\");\n+  return true;\n+}\n+\n+void VM_ShenandoahOperation::doit_epilogue() {\n+  assert(!ShenandoahHeap::heap()->has_gc_state_changed(), \"GC State was not synchronized to java threads.\");\n+}\n+\n@@ -39,0 +48,1 @@\n+  VM_ShenandoahOperation::doit_prologue();\n@@ -44,0 +54,1 @@\n+  VM_ShenandoahOperation::doit_epilogue();\n@@ -54,0 +65,1 @@\n+  ShenandoahHeap::heap()->set_gc_state_all_threads();\n@@ -59,0 +71,1 @@\n+  ShenandoahHeap::heap()->set_gc_state_all_threads();\n@@ -64,0 +77,1 @@\n+  ShenandoahHeap::heap()->set_gc_state_all_threads();\n@@ -69,0 +83,1 @@\n+  ShenandoahHeap::heap()->set_gc_state_all_threads();\n@@ -74,0 +89,1 @@\n+  ShenandoahHeap::heap()->set_gc_state_all_threads();\n@@ -79,0 +95,1 @@\n+  ShenandoahHeap::heap()->set_gc_state_all_threads();\n@@ -84,0 +101,1 @@\n+  ShenandoahHeap::heap()->set_gc_state_all_threads();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -50,1 +50,3 @@\n-  virtual bool skip_thread_oop_barriers() const { return true; }\n+  bool skip_thread_oop_barriers() const override { return true; }\n+  bool doit_prologue() override;\n+  void doit_epilogue() override;\n@@ -56,2 +58,2 @@\n-  bool doit_prologue();\n-  void doit_epilogue();\n+  bool doit_prologue() override;\n+  void doit_epilogue() override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -623,0 +623,2 @@\n+  ShenandoahHeap::heap()->set_gc_state_all_threads();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}