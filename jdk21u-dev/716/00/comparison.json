{"files":[{"patch":"@@ -1468,0 +1468,1 @@\n+                                                     uint depth,\n@@ -1471,0 +1472,1 @@\n+  _depth(depth),\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -512,1 +512,1 @@\n-                     \/\/ It is relative to the last (youngest) jvms->_scloff.\n+  uint _depth;       \/\/ Depth of the JVM state the _first_index field refers to\n@@ -526,1 +526,1 @@\n-                            uint first_index, uint n_fields);\n+                            uint first_index, uint depth, uint n_fields);\n@@ -535,1 +535,1 @@\n-    return jvms->scloff() + _first_index;\n+    return jvms->of_depth(_depth)->scloff() + _first_index;\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -728,1 +728,1 @@\n-                                                 first_ind, nfields);\n+                                                 first_ind, sfpt->jvms()->depth(), nfields);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -283,1 +283,1 @@\n-                                               first_ind, n_fields);\n+                                               first_ind, sfpt->jvms()->depth(), n_fields);\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +41,12 @@\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @bug 8317299\n+ * @summary Vector API intrinsincs should handle JVM state correctly whith late inlining when compiling with -InlineUnsafeOps\n+ * @modules jdk.incubator.vector\n+ * @requires vm.cpu.features ~= \".*avx512.*\"\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:-InlineUnsafeOps -XX:+IgnoreUnrecognizedVMOptions -XX:UseAVX=3\n+ *                   -XX:CompileCommand=compileonly,compiler.vectorapi.TestIntrinsicBailOut::test -XX:CompileCommand=quiet\n+ *                   -XX:-TieredCompilation compiler.vectorapi.TestIntrinsicBailOut\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestIntrinsicBailOut.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}