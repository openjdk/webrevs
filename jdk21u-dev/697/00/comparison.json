{"files":[{"patch":"@@ -3516,0 +3516,7 @@\n+    } else if (n->is_CallLeaf()) {\n+      \/\/ Runtime calls with narrow memory input (no MergeMem node)\n+      \/\/ get the memory projection\n+      n = n->as_Call()->proj_out_or_null(TypeFunc::Memory);\n+      if (n == nullptr) {\n+        continue;\n+      }\n@@ -3558,1 +3565,1 @@\n-      } else if (use->is_MemBar()) {\n+      } else if (use->is_MemBar() || use->is_CallLeaf()) {\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8316756\n+ * @summary Test UNSAFE.copyMemory in combination with Escape Analysis\n+ * @library \/test\/lib\n+ *\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,compiler.unsafe.UnsafeArrayCopy::test*\n+ *                   compiler.unsafe.UnsafeArrayCopy\n+ *\/\n+\n+package compiler.unsafe;\n+\n+import java.lang.reflect.*;\n+import java.util.*;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+\n+public class UnsafeArrayCopy {\n+\n+    private static Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    static long SRC_BASE = UNSAFE.allocateMemory(4);\n+    static long DST_BASE = UNSAFE.allocateMemory(4);\n+\n+    static class MyClass {\n+        int x;\n+    }\n+\n+    static int test() {\n+        MyClass obj = new MyClass(); \/\/ Non-escaping to trigger Escape Analysis\n+        UNSAFE.copyMemory(null, SRC_BASE, null, DST_BASE, 4);\n+        obj.x = 42;\n+        return obj.x;\n+    }\n+\n+    static int[] test2() {\n+         int[] src = new int[4];\n+         int[] dst = new int[4];\n+         MyClass obj = new MyClass();\n+         UNSAFE.copyMemory(src, 0, dst, 0, 4);\n+         obj.x = 42;\n+         dst[1] = obj.x;\n+         return dst;\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 50_000; ++i) {\n+            test();\n+            test2();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/UnsafeArrayCopy.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}