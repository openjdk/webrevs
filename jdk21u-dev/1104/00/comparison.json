{"files":[{"patch":"@@ -1047,1 +1047,1 @@\n-                               int keyCode, char keyChar, int keyLocation)\n+                               int keyCode, char keyChar, int keyLocation, int extendedKeyCode)\n@@ -1061,3 +1061,7 @@\n-        AWTAccessor.getKeyEventAccessor().setExtendedKeyCode(keyEvent,\n-                (keyChar == KeyEvent.CHAR_UNDEFINED) ? keyCode\n-                : ExtendedKeyCodes.getExtendedKeyCodeForChar(keyChar));\n+        if (extendedKeyCode >= 0) {\n+            AWTAccessor.getKeyEventAccessor().setExtendedKeyCode(keyEvent, extendedKeyCode);\n+        } else {\n+            AWTAccessor.getKeyEventAccessor().setExtendedKeyCode(keyEvent,\n+                    (keyChar == KeyEvent.CHAR_UNDEFINED) ? keyCode\n+                            : ExtendedKeyCodes.getExtendedKeyCodeForChar(keyChar));\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWWindowPeer.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                        int keyCode, char keyChar, int keyLocation);\n+                        int keyCode, char keyChar, int keyLocation, int extendedKeyCode);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/PlatformEventNotifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,0 +146,1 @@\n+        int jextendedkeyCode = -1;\n@@ -176,1 +177,1 @@\n-            int[] out = new int[3]; \/\/ [jkeyCode, jkeyLocation, deadChar]\n+            int[] out = new int[4]; \/\/ [jkeyCode, jkeyLocation, deadChar, extendedKeyCode]\n@@ -204,0 +205,1 @@\n+            jextendedkeyCode = out[3];\n@@ -224,1 +226,1 @@\n-                jkeyCode, javaChar, jkeyLocation);\n+                jkeyCode, javaChar, jkeyLocation, jextendedkeyCode);\n@@ -244,1 +246,1 @@\n-                    KeyEvent.KEY_LOCATION_UNKNOWN);\n+                    KeyEvent.KEY_LOCATION_UNKNOWN, jextendedkeyCode);\n@@ -249,1 +251,1 @@\n-                        KeyEvent.KEY_LOCATION_UNKNOWN);\n+                        KeyEvent.KEY_LOCATION_UNKNOWN, jextendedkeyCode);\n@@ -263,1 +265,1 @@\n-                        KeyEvent.KEY_LOCATION_UNKNOWN);\n+                        KeyEvent.KEY_LOCATION_UNKNOWN, -1);\n@@ -269,1 +271,1 @@\n-                    KeyEvent.KEY_LOCATION_UNKNOWN);\n+                    KeyEvent.KEY_LOCATION_UNKNOWN, -1);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformResponder.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-                               char keyChar, int keyLocation) {\n+                               char keyChar, int keyLocation, int jextendedkeyCode) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CWarningWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -432,1 +432,1 @@\n-                           unichar *deadChar)\n+                           unichar *deadChar, jint *extendedkeyCode)\n@@ -472,1 +472,1 @@\n-            *keyCode = java_awt_event_KeyEvent_VK_A + offset + 32;\n+            *extendedkeyCode = java_awt_event_KeyEvent_VK_A + offset + 32;\n@@ -474,2 +474,1 @@\n-return;\n-         }\n+        }\n@@ -698,0 +697,1 @@\n+    jint jextendedkeyCode = -1;\n@@ -704,1 +704,1 @@\n-                               (unichar *) &testDeadChar);\n+                               (unichar *) &testDeadChar, &jextendedkeyCode);\n@@ -706,1 +706,1 @@\n-    \/\/ out = [jkeyCode, jkeyLocation, deadChar];\n+    \/\/ out = [jkeyCode, jkeyLocation, deadChar, jextendedkeyCode];\n@@ -710,0 +710,1 @@\n+    (*env)->SetIntArrayRegion(env, outData, 3, 1, &jextendedkeyCode);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTEvent.m","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--\n-  @test\n-  @bug 6680988\n-  @summary verify that various shortcuts and accelerators work\n-  @author yuri.nesterenko : area=awt.keyboard\n-  @run applet\/manual=yesno AcceleratorTest.html\n-  -->\n-<head>\n-<title> AcceleratorTest <\/title>\n-<\/head>\n-<body>\n-\n-<h1>AcceleratorTest<br>Bug ID: <\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"AcceleratorTest.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/AcceleratorTest\/AcceleratorTest.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,11 +25,7 @@\n-  test\n-  @bug 6680988\n-  @summary verify that various shortcuts and accelerators work\n-  @author yuri.nesterenko : area=awt.keyboard\n-  @run applet\/manual=yesno AcceleratorTest.html\n-*\/\n-\n-\/**\n- * AcceleratorTest.java\n- *\n- * summary:\n+ * @test\n+ * @bug 6680988\n+ * @key headful\n+ * @summary verify that various shortcuts and accelerators work\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AcceleratorTest\n@@ -38,4 +34,5 @@\n-\/\/import java.applet.Applet;\n-import javax.swing.*;\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n@@ -43,13 +40,23 @@\n-\n-\n-public class AcceleratorTest extends JApplet\n-{\n-    \/\/Declare things used in the test, like buttons and labels here\n-    static int pressed = 0;\n-    Hashtable<String, Integer> cmdHash = new Hashtable<String, Integer>();\n-    String[] CMD = {\n-        \"\\u042E, keep me in focus\",\n-        \"Item Cyrl Be\",\n-        \"Item English Period\",\n-        \"Item English N\",\n-        \"\\u0436\"\n+import javax.swing.AbstractAction;\n+import javax.swing.InputMap;\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTextArea;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+\n+public class AcceleratorTest {\n+    static JFrame output;\n+    static JTextArea text;\n+    static JFrame jfr;\n+    static Hashtable<String, Integer> cmdHash = new Hashtable<String, Integer>();\n+    static String[] CMD = {\n+            \"\\u042E, keep me in focus\",\n+            \"Item Ctrl Be\",\n+            \"Item Ctrl English Period\",\n+            \"Item Ctrl English N\",\n+            \"\\u0436\"\n@@ -58,24 +65,14 @@\n-    JFrame jfr;\n-\n-    public void init()\n-    {\n-        \/\/Create instructions for the user here, as well as set up\n-        \/\/ the environment -- set the layout manager, add buttons,\n-        \/\/ etc.\n-        this.setLayout (new BorderLayout ());\n-\n-        String[] instructions =\n-        {\n-            \" Ensure you have Russian keyboard layout as a currently active.\",\n-            \"(1) Press Ctrl+\\u0411 (a key with \\\",<\\\" on it) \",\n-            \"(2) Find a . (period) in this layout (perhaps \\\"\/?\\\" or \\\"7&\\\" key).\",\n-            \"Press Ctrl+.\",\n-            \"(3) Press Crtl+ regular English . (period) key (on \\\".>\\\" )\",\n-            \"(4) Press Ctrl+ key with English N.\",\n-            \"(5) Press Alt+\\u042E (key with \\\".>\\\")\",\n-            \"(6) Press Alt+\\u0436 (key with \\\";:\\\")\",\n-            \"If all expected commands will be fired, look for message\",\n-            \"\\\"All tests passed\\\"\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-        for(int i = 0; i < CMD.length; i++) {\n+    public static void main(String[] args) throws Exception {\n+        String instructions =\n+                \"Ensure you have Russian keyboard layout as a currently active.\\n\" +\n+                        \"(1) Press Ctrl + \\u0411 (a key with \\\",<\\\" on it) \\n\" +\n+                        \"(2) Find a . (period) in this layout (perhaps \\\"\/?\\\" or \\\"7&\\\" key). \" +\n+                        \"Press Ctrl + .\\n\" +\n+                        \"(3) Press Ctrl + regular English . (period) key (on \\\".>\\\" )\\n\" +\n+                        \"(4) Press Ctrl + key with English N.\\n\" +\n+                        \"(5) Press Alt + \\u042E (key with \\\".>\\\")\\n\" +\n+                        \"(6) Press Alt + \\u0436 (key with \\\";:\\\")\\n\" +\n+                        \"If all expected commands will be fired, look for message\\n\" +\n+                        \"\\\"All tests passed\\\"\";\n+\n+        for (int i = 0; i < CMD.length; i++) {\n@@ -85,11 +82,80 @@\n-        jfr = new JFrame();\n-        JButton jbu;\n-        jfr.add((jbu = new JButton(CMD[0])));\n-        jbu.setMnemonic(java.awt.event.KeyEvent.getExtendedKeyCodeForChar('\\u042E'));\n-        jbu.addActionListener( new ALi(CMD[0]));\n-\n-\n-        JMenuBar menuBar = new JMenuBar();\n-        jfr.setJMenuBar(menuBar);\n-        JMenu menu = new JMenu(\"Menu\");\n-        menuBar.add(menu);\n+        PassFailJFrame testFrame = new PassFailJFrame.Builder()\n+                .title(\"Test Instructions Frame\")\n+                .instructions(instructions)\n+                .testTimeOut(10)\n+                .rows(10)\n+                .columns(45)\n+                .build();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            output = new JFrame(\"output\");\n+            text = new JTextArea();\n+            output.getContentPane().add(text);\n+\n+            jfr = new JFrame(\"AcceleratorTest\");\n+            jfr.setLayout(new BorderLayout());\n+            JButton jbu;\n+            jfr.add((jbu = new JButton(CMD[0])));\n+            jbu.setMnemonic(java.awt.event.KeyEvent.getExtendedKeyCodeForChar('\\u042E'));\n+            jbu.addActionListener(new ALi(CMD[0]));\n+\n+            JMenuBar menuBar = new JMenuBar();\n+            jfr.setJMenuBar(menuBar);\n+            JMenu menu = new JMenu(\"Menu\");\n+            menuBar.add(menu);\n+\n+            JMenuItem menuItem = new JMenuItem(CMD[1]);\n+            menuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent\n+                            .getExtendedKeyCodeForChar('\\u0431'), InputEvent.CTRL_DOWN_MASK));\n+\n+            JMenuItem menuItemEnglish = new JMenuItem(CMD[2]);\n+            menuItemEnglish.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD,\n+                    InputEvent.CTRL_DOWN_MASK));\n+\n+            JMenuItem menuItemE1 = new JMenuItem(CMD[3]);\n+            menuItemE1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,\n+                    InputEvent.CTRL_DOWN_MASK));\n+\n+            menuItem.addActionListener(new ALi(CMD[1]));\n+            menuItemEnglish.addActionListener(new ALi(CMD[2]));\n+            menuItemE1.addActionListener(new ALi(CMD[3]));\n+\n+            menu.add(menuItem);\n+            menu.add(menuItemEnglish);\n+            menu.add(menuItemE1);\n+\n+            KeyStroke ks;\n+            InputMap im = new InputMap();\n+            ks = KeyStroke.getKeyStroke(KeyEvent.getExtendedKeyCodeForChar('\\u0436'),\n+                    java.awt.event.InputEvent.ALT_DOWN_MASK);\n+            im.put(ks, \"pushAction\");\n+            im.setParent(jbu.getInputMap(JComponent.WHEN_FOCUSED));\n+            jbu.setInputMap(JComponent.WHEN_FOCUSED, im);\n+\n+            jbu.getActionMap().put(\"pushAction\",\n+                    new AbstractAction(\"pushAction\") {\n+                        public void actionPerformed(ActionEvent evt) {\n+                            if (evt.getActionCommand().equals(CMD[4])) {\n+                                cmdHash.put(CMD[4], 1);\n+                            }\n+                            boolean notYet = false;\n+                            for (int i = 0; i < CMD.length; i++) {\n+                                if (cmdHash.get(CMD[i]) == 0) notYet = true;\n+                            }\n+                            text.append(evt.getActionCommand() + \" FIRED\\n\");\n+                            if (!notYet) {\n+                                text.append(\"All tests passed.\");\n+                            }\n+                        }\n+                    }\n+            );\n+        });\n+\n+        testFrame.addTestWindow(jfr);\n+        testFrame.addTestWindow(output);\n+\n+        PassFailJFrame.positionTestWindow(jfr, PassFailJFrame.Position.HORIZONTAL);\n+        jfr.setSize(200, 200);\n+\n+        PassFailJFrame.positionTestWindow(output, PassFailJFrame.Position.HORIZONTAL);\n+        output.setSize(200, 200);\n@@ -97,44 +163,0 @@\n-        JMenuItem menuItem = new JMenuItem(CMD[1]);\n-        menuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.getExtendedKeyCodeForChar('\\u0431'),\n-                        InputEvent.CTRL_DOWN_MASK));\n-\n-        JMenuItem menuItemEnglish = new JMenuItem(CMD[2]);\n-        menuItemEnglish.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD,\n-                        InputEvent.CTRL_DOWN_MASK));\n-        JMenuItem menuItemE1 = new JMenuItem(CMD[3]);\n-        menuItemE1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,\n-                        InputEvent.CTRL_DOWN_MASK));\n-        menuItem.addActionListener( new ALi(CMD[1]));\n-        menuItemEnglish.addActionListener( new ALi(CMD[2]));\n-        menuItemE1.addActionListener( new ALi(CMD[3]));\n-        menu.add(menuItem);\n-        menu.add(menuItemEnglish);\n-        menu.add(menuItemE1);\n-\n-        KeyStroke ks;\n-        InputMap im = new InputMap();\n-        ks = KeyStroke.getKeyStroke(KeyEvent.getExtendedKeyCodeForChar('\\u0436'), java.awt.event.InputEvent.ALT_DOWN_MASK);\n-        im.put(ks, \"pushAction\");\n-        im.setParent(jbu.getInputMap(JComponent.WHEN_FOCUSED));\n-        jbu.setInputMap(JComponent.WHEN_FOCUSED, im);\n-\n-        jbu.getActionMap().put(\"pushAction\",\n-            new AbstractAction(\"pushAction\") {\n-                  public void actionPerformed(ActionEvent evt) {\n-                      if( evt.getActionCommand().equals(CMD[4])) {\n-                          cmdHash.put(CMD[4], 1);\n-                      }\n-                      boolean notYet = false;\n-                      for(int i = 0; i < CMD.length; i++) {\n-                          if(cmdHash.get(CMD[i]) == 0 ) notYet = true;\n-                      }\n-                      Sysout.println(\"Fired\");\n-                      if( !notYet ) {\n-                          Sysout.println(\"All tests passed.\");\n-                      }\n-                  }\n-            }\n-        );\n-\n-\n-        jfr.setBounds(650,0,200,200);\n@@ -142,0 +164,1 @@\n+        output.setVisible(true);\n@@ -143,8 +166,2 @@\n-    }\/\/End  init()\n-\n-    public void start ()\n-    {\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize (200,200);\n-        setVisible(true);\n-        validate();\n+        testFrame.awaitAndCheck();\n+    }\n@@ -152,2 +169,1 @@\n-    }\/\/ start()\n-    public class ALi implements ActionListener {\n+    public static class ALi implements ActionListener {\n@@ -155,1 +171,2 @@\n-        public ALi( String eCmd ) {\n+\n+        public ALi(String eCmd) {\n@@ -158,0 +175,1 @@\n+\n@@ -159,1 +177,1 @@\n-            if( cmdHash.containsKey(ae.getActionCommand()) ) {\n+            if (cmdHash.containsKey(ae.getActionCommand())) {\n@@ -163,3 +181,3 @@\n-            for(int i = 0; i < CMD.length; i++) {\n-                if(cmdHash.get(CMD[i]) == 0 ) notYet = true;\n-                \/\/Sysout.println(CMD[i]+\":\"+cmdHash.get(CMD[i]));\n+            for (int i = 0; i < CMD.length; i++) {\n+                if (cmdHash.get(CMD[i]) == 0) notYet = true;\n+                \/\/text.append(CMD[i]+\":\"+cmdHash.get(CMD[i]));\n@@ -167,3 +185,3 @@\n-            Sysout.println(\"FIRED\");\n-            if( !notYet ) {\n-                Sysout.println(\"All tests passed.\");\n+            text.append(ae.getActionCommand() + \" FIRED\\n\");\n+            if (!notYet) {\n+                text.append(\"All tests passed.\\n\");\n@@ -173,156 +191,1 @@\n-\n-\n-}\/\/ class AcceleratorTest\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-    private static boolean numbering = false;\n-    private static int messageNumber = 0;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    \/* Enables message counting for the tester. *\/\n-    public static void enableNumbering(boolean enable){\n-        numbering = enable;\n-    }\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        if (numbering) {\n-            messageIn = \"\" + messageNumber + \" \" + messageIn;\n-            messageNumber++;\n-        }\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/AcceleratorTest\/AcceleratorTest.java","additions":145,"deletions":282,"binary":false,"changes":427,"status":"modified"}]}