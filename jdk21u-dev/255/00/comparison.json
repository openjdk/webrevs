{"files":[{"patch":"@@ -84,0 +84,1 @@\n+        System.err.println(\"pcsc          Smartcard library debugging\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Debug.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2023, Red Hat Inc. All rights reserved.\n@@ -49,2 +50,8 @@\n-    private static final String LIB1 = \"\/usr\/$LIBISA\/libpcsclite.so\";\n-    private static final String LIB2 = \"\/usr\/local\/$LIBISA\/libpcsclite.so\";\n+    \/\/ The architecture templates are for Debian-based systems: https:\/\/wiki.debian.org\/Multiarch\/Tuples\n+    \/\/ 32-bit arm differs from the pattern of the rest and has to be specified explicitly\n+    private static final String[] LIB_TEMPLATES = { \"\/usr\/$LIBISA\/libpcsclite.so\",\n+                                                    \"\/usr\/local\/$LIBISA\/libpcsclite.so\",\n+                                                    \"\/usr\/lib\/$ARCH-linux-gnu\/libpcsclite.so\",\n+                                                    \"\/usr\/lib\/arm-linux-gnueabi\/libpcsclite.so\",\n+                                                    \"\/usr\/lib\/arm-linux-gnueabihf\/libpcsclite.so\" };\n+    private static final String[] LIB_SUFFIXES = { \".1\", \".0\", \"\" };\n@@ -76,0 +83,1 @@\n+    \/\/ expand $ARCH to the Debian system architecture in use\n@@ -78,2 +86,10 @@\n-        if (k == -1) {\n-            return lib;\n+        if (k != -1) {\n+            String libDir;\n+            if (\"64\".equals(System.getProperty(\"sun.arch.data.model\"))) {\n+                \/\/ assume Linux convention\n+                libDir = \"lib64\";\n+            } else {\n+                \/\/ must be 32-bit\n+                libDir = \"lib\";\n+            }\n+            lib = lib.replace(\"$LIBISA\", libDir);\n@@ -81,9 +97,5 @@\n-        String s1 = lib.substring(0, k);\n-        String s2 = lib.substring(k + 7);\n-        String libDir;\n-        if (\"64\".equals(System.getProperty(\"sun.arch.data.model\"))) {\n-            \/\/ assume Linux convention\n-            libDir = \"lib64\";\n-        } else {\n-            \/\/ must be 32-bit\n-            libDir = \"lib\";\n+\n+        k = lib.indexOf(\"$ARCH\");\n+        if (k != -1) {\n+            String arch = System.getProperty(\"os.arch\");\n+            lib = lib.replace(\"$ARCH\", getDebianArchitecture(arch));\n@@ -91,2 +103,12 @@\n-        String s = s1 + libDir + s2;\n-        return s;\n+\n+        return lib;\n+    }\n+\n+    private static String getDebianArchitecture(String jdkArch) {\n+        return switch (jdkArch) {\n+            case \"amd64\" -> \"x86_64\";\n+            case \"ppc\" -> \"powerpc\";\n+            case \"ppc64\" -> \"powerpc64\";\n+            case \"ppc64le\" -> \"powerpc64le\";\n+            default -> jdkArch;\n+        };\n@@ -101,9 +123,12 @@\n-        lib = expand(LIB1);\n-        if (new File(lib).isFile()) {\n-            \/\/ if LIB1 exists, use that\n-            return lib;\n-        }\n-        lib = expand(LIB2);\n-        if (new File(lib).isFile()) {\n-            \/\/ if LIB2 exists, use that\n-            return lib;\n+\n+        for (String template : LIB_TEMPLATES) {\n+            for (String suffix : LIB_SUFFIXES) {\n+                lib = expand(template) + suffix;\n+                if (debug != null) {\n+                    debug.println(\"Looking for \" + lib);\n+                }\n+                if (new File(lib).isFile()) {\n+                    \/\/ if library exists, use that\n+                    return lib;\n+                }\n+            }\n","filename":"src\/java.smartcardio\/unix\/classes\/sun\/security\/smartcardio\/PlatformPCSC.java","additions":49,"deletions":24,"binary":false,"changes":73,"status":"modified"}]}