{"files":[{"patch":"@@ -0,0 +1,270 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4102292\n+ * @summary Tests that location by platform works with other APIs\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestLocationByPlatformWithControls\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.util.Vector;\n+\n+public class TestLocationByPlatformWithControls extends Frame\n+    implements ActionListener, ItemListener {\n+    Panel northP;\n+    Panel centerP;\n+    Checkbox undecoratedCB;\n+    Checkbox defaultLocationCB;\n+    Checkbox visibleCB;\n+    Checkbox iconifiedCB;\n+    Checkbox maximizedCB;\n+    Button createB;\n+    Button packB;\n+    Button moveB;\n+    Button resizeB;\n+    Button reshapeB;\n+    Button disposeB;\n+    Vector frames;\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+            This test is to check that LocationByPlatform works with other\n+            controls API.\n+            1) Create New Frame by clicking on \"Create\" Button in\n+            \"TestLocationByPlatformWithControls\" window.\n+            2) Initially this Frame will not be visible, Click on checkbox\n+            \"LocationByPlatform\" to set default platform location for the frame\n+            and then click on checkbox \"Visible\" to see that Frame is displayed\n+            at default offsets.\n+            3) Now you can play with different controls like Iconified,\n+            Maximized, Pack, Move, Resize and Reshape to verify that these\n+            controls work properly with the Frame.\n+            4) At the end dispose the Frame by clicking on \"Dispose\" button.\n+            5) Also we can do verify this for Undecorated Frame but for that we\n+            need to follow same steps but in step 2 before we click on checkbox\n+            \"Visible\", select \"Undecorated\" checkbox along with\n+            \"LocationByPlatform\".\n+            6) If everything works properly test is passed, otherwise failed.\n+            \"\"\";\n+\n+        PassFailJFrame.builder()\n+            .title(\"Test Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(40)\n+            .testUI(TestLocationByPlatformWithControls::new)\n+            .logArea(4)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    public TestLocationByPlatformWithControls() {\n+        northP = new Panel();\n+        centerP = new Panel();\n+\n+        undecoratedCB = new Checkbox(\"Undecorated\");\n+        defaultLocationCB = new Checkbox(\"LocationByPlatform\");\n+        visibleCB = new Checkbox(\"Visible\");\n+        iconifiedCB = new Checkbox(\"Iconified\");\n+        maximizedCB = new Checkbox(\"Maximized\");\n+\n+        createB = new Button(\"Create\");\n+        packB = new Button(\"Pack\");\n+        moveB = new Button(\"Move\");\n+        resizeB = new Button(\"Resize\");\n+        reshapeB = new Button(\"Reshape\");\n+        disposeB = new Button(\"Dispose\");\n+\n+        frames = new Vector(10);\n+        this.setTitle(\"TestLocationByPlatformWithControls\");\n+        this.setLayout(new BorderLayout());\n+        this.add(northP, BorderLayout.NORTH);\n+\n+        northP.add(new Label(\"New Frame\"));\n+\n+        createB.addActionListener(this);\n+        northP.add(createB);\n+\n+        centerP.setEnabled(false);\n+        this.add(centerP, BorderLayout.CENTER);\n+\n+        centerP.add(new Label(\"Last Frame\"));\n+\n+        centerP.add(defaultLocationCB);\n+        defaultLocationCB.addItemListener(this);\n+\n+        centerP.add(undecoratedCB);\n+        undecoratedCB.addItemListener(this);\n+\n+        centerP.add(iconifiedCB);\n+        iconifiedCB.addItemListener(this);\n+\n+        centerP.add(maximizedCB);\n+        maximizedCB.addItemListener(this);\n+\n+        centerP.add(visibleCB);\n+        visibleCB.addItemListener(this);\n+\n+        packB.addActionListener(this);\n+        centerP.add(packB);\n+\n+        moveB.addActionListener(this);\n+        centerP.add(moveB);\n+\n+        resizeB.addActionListener(this);\n+        centerP.add(resizeB);\n+\n+        reshapeB.addActionListener(this);\n+        centerP.add(reshapeB);\n+\n+        disposeB.addActionListener(this);\n+        centerP.add(disposeB);\n+        this.pack();\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        if (e.getSource() ==  createB) {\n+            Frame frame = new Frame();\n+            frame.setSize(200, 200);\n+            frames.add(frame);\n+            updateControls(frame);\n+            Panel panel = new Panel();\n+            frame.add(panel);\n+            panel.add(new Button (\"Test Button\"));\n+            panel.add(new Button (\"Test Button 1\"));\n+            panel.add(new Button (\"Test Button  2\"));\n+            panel.add(new Button (\"Test Button   3\"));\n+            centerP.setEnabled(true);\n+            return;\n+        }\n+\n+        if (frames.isEmpty()) {\n+            return;\n+        }\n+\n+        Frame last = (Frame)frames.lastElement();\n+\n+        if (e.getSource() == packB) {\n+            last.pack();\n+        } else\n+        if (e.getSource() == moveB) {\n+            int x = (int)(Math.random() * 200);\n+            int y = (int)(Math.random() * 200);\n+            last.setLocation(x, y);\n+        } else\n+        if (e.getSource() == resizeB) {\n+            int w = (int)(Math.random() * 200);\n+            int h = (int)(Math.random() * 200);\n+            last.setSize(w, h);\n+        } else\n+        if (e.getSource() == reshapeB) {\n+            int x = (int)(Math.random() * 200);\n+            int y = (int)(Math.random() * 200);\n+            int w = (int)(Math.random() * 200);\n+            int h = (int)(Math.random() * 200);\n+            last.setBounds(x, y, w, h);\n+        } else\n+        if (e.getSource() == disposeB) {\n+            last.dispose();\n+            frames.remove(frames.size() - 1);\n+            if (frames.isEmpty()) {\n+                updateControls(null);\n+                centerP.setEnabled(false);\n+                return;\n+            }\n+            last = (Frame)frames.lastElement();\n+        }\n+        updateControls(last);\n+    }\n+\n+    public void updateControls(Frame f) {\n+        undecoratedCB.setState(f != null ?\n+            f.isUndecorated() : false);\n+        defaultLocationCB.setState(f != null ?\n+            f.isLocationByPlatform() : false);\n+        visibleCB.setState(f != null ?\n+            f.isVisible() : false);\n+        iconifiedCB.setState(f != null ?\n+            (f.getExtendedState() & Frame.ICONIFIED) != 0 : false);\n+        maximizedCB.setState(f != null ?\n+            (f.getExtendedState() & Frame.MAXIMIZED_BOTH) != 0 : false);\n+    }\n+\n+    public void itemStateChanged(ItemEvent e) {\n+        Frame last = (Frame)frames.lastElement();\n+        try {\n+            boolean state = e.getStateChange() == ItemEvent.SELECTED;\n+            if (e.getSource() == visibleCB) {\n+                last.setVisible(state);\n+            } else\n+            if (e.getSource() == defaultLocationCB) {\n+                last.setLocationByPlatform(state);\n+            } else\n+            if (e.getSource() == undecoratedCB) {\n+                last.setUndecorated(state);\n+            } else\n+            if (e.getSource() == iconifiedCB) {\n+                if (state) {\n+                    last.setExtendedState(last.getExtendedState() |\n+                        Frame.ICONIFIED);\n+                } else {\n+                    last.setExtendedState(last.getExtendedState() &\n+                        ~Frame.ICONIFIED);\n+                }\n+            } else\n+            if (e.getSource() == maximizedCB) {\n+                if (state) {\n+                    last.setExtendedState(last.getExtendedState() |\n+                        Frame.MAXIMIZED_BOTH);\n+                } else {\n+                    last.setExtendedState(last.getExtendedState() &\n+                        ~Frame.MAXIMIZED_BOTH);\n+                }\n+            }\n+        } catch (Throwable ex) {\n+            PassFailJFrame.log(ex.getMessage());\n+        } finally {\n+            updateControls(last);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        while (!frames.isEmpty()) {\n+            Frame last = (Frame)frames.lastElement();\n+            last.dispose();\n+            frames.remove(frames.size() - 1);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/LocationByPlatformWithControls\/TestLocationByPlatformWithControls.java","additions":270,"deletions":0,"binary":false,"changes":270,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4942457\n+ * @key headful\n+ * @summary Verifies that filtering of resize events on native level works.\n+ * I.E.after Frame is shown no additional resize events are generated.\n+ * @library \/java\/awt\/patchlib ..\/..\/regtesthelpers\n+ * @build java.desktop\/java.awt.Helper\n+ * @build Util\n+ * @run main NoResizeEvent\n+ *\/\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+\n+public class NoResizeEvent {\n+    \/\/Mutter can send window insets too late, causing additional resize events.\n+    private static final boolean IS_MUTTER = Util.getWMID() == Util.MUTTER_WM;\n+    private static final int RESIZE_COUNT_LIMIT = IS_MUTTER ? 5 : 3;\n+    private static Frame frame;\n+    static int resize_count = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+            if (resize_count > RESIZE_COUNT_LIMIT) {\n+                throw new RuntimeException(\"Resize event arrived: \"\n+                    + resize_count + \" times.\");\n+            }\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new Frame(\"NoResizeEvent\");\n+        frame.addComponentListener(new ComponentAdapter() {\n+            public void componentResized(ComponentEvent e) {\n+                System.out.println(e);\n+                resize_count++;\n+            }\n+        });\n+        frame.setVisible(true);\n+\n+        try {\n+            Thread.sleep(3000);\n+        } catch (InterruptedException ie) {\n+        }\n+        System.out.println(\"Resize count: \" + resize_count);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/NoResizeEvent\/NoResizeEvent.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4381561\n+ * @key headful\n+ * @summary Tests that when we show the popup window AWT doesn't crash due to\n+ * the problems with focus proxy window code\n+ * @run main PopupProxyCrash\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+\n+import javax.swing.Box;\n+import javax.swing.JComboBox;\n+import javax.swing.JTextField;\n+import javax.swing.plaf.basic.BasicComboBoxUI;\n+import javax.swing.plaf.basic.BasicComboPopup;\n+import javax.swing.plaf.basic.ComboPopup;\n+\n+public class PopupProxyCrash implements ActionListener {\n+    private static JTextField jtf;\n+    private static Button tf;\n+    private static Panel panel;\n+    private static Font[] fonts;\n+    private static Robot robot;\n+\n+    private static JComboBox cb;\n+\n+    private static MyComboBoxUI comboBoxUI;\n+    private static Frame frame;\n+    private static int TEST_COUNT = 10;\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            EventQueue.invokeAndWait(() -> createUI());\n+            robot.waitForIdle();\n+            runTest();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new Frame(\"PopupProxyCrash\");\n+        Font dialog = new Font(\"Dialog\", Font.PLAIN, 12);\n+        Font serif = new Font(\"Serif\", Font.PLAIN, 12);\n+        Font monospaced = new Font(\"Monospaced\", Font.PLAIN, 12);\n+\n+        fonts = new Font[] { dialog, serif, monospaced };\n+\n+        cb = new JComboBox(fonts);\n+\n+        cb.setLightWeightPopupEnabled(false);\n+        comboBoxUI = new MyComboBoxUI();\n+        cb.setUI(comboBoxUI);\n+        jtf = new JTextField(\"JTextField\");\n+        jtf.setFont(fonts[1]);\n+        tf = new Button(\"TextField\");\n+        tf.setFont(fonts[1]);\n+        cb.addActionListener(new PopupProxyCrash());\n+\n+        panel = new Panel() {\n+            public Dimension getPreferredSize() {\n+                return new Dimension(100, 20);\n+            }\n+            public void paint(Graphics g) {\n+                System.out.println(\"Painting with font \" + getFont());\n+                g.setColor(Color.white);\n+                g.fillRect(0, 0, getWidth(), getHeight());\n+                g.setColor(Color.black);\n+                g.setFont(getFont());\n+                g.drawString(\"LightWeight\", 10, 10);\n+            }\n+        };\n+        panel.setFont(fonts[1]);\n+\n+        Container parent = Box.createVerticalBox();\n+        parent.add(jtf);\n+        parent.add(tf);\n+        parent.add(panel);\n+        parent.add(cb);\n+\n+        frame.add(parent, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static Point getComboBoxLocation() throws Exception {\n+        final Point[] result = new Point[1];\n+\n+        EventQueue.invokeAndWait(() -> {\n+            Point point = cb.getLocationOnScreen();\n+            Dimension size = cb.getSize();\n+\n+            point.x += size.width \/ 2;\n+            point.y += size.height \/ 2;\n+            result[0] = point;\n+        });\n+        return result[0];\n+    }\n+\n+    private static Point getItemPointToClick(final int item) throws Exception {\n+        final Point[] result = new Point[1];\n+\n+        EventQueue.invokeAndWait(() -> {\n+            BasicComboPopup popup = (BasicComboPopup)comboBoxUI.getComboPopup();\n+            Point point = popup.getLocationOnScreen();\n+            Dimension size = popup.getSize();\n+\n+            int step = size.height \/ fonts.length;\n+            point.x += size.width \/ 2;\n+            point.y += step \/ 2 + step * item;\n+            result[0] = point;\n+        });\n+        return result[0];\n+    }\n+\n+    static void runTest() throws Exception {\n+        for (int i = 0; i < TEST_COUNT; i++) {\n+            Point point = getComboBoxLocation();\n+            robot.mouseMove(point.x, point.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            point = getItemPointToClick(i % fonts.length);\n+            robot.mouseMove(point.x, point.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+        }\n+    }\n+    public void actionPerformed(ActionEvent ae) {\n+        System.out.println(\"Font selected\");\n+        Font font = fonts[((JComboBox)ae.getSource()).getSelectedIndex()];\n+\n+        tf.setFont(font);\n+        jtf.setFont(font);\n+        panel.setFont(font);\n+        panel.repaint();\n+    }\n+\n+    private static class MyComboBoxUI extends BasicComboBoxUI {\n+        public ComboPopup getComboPopup() {\n+            return popup;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/ProxyCrash\/PopupProxyCrash.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4488209\n+ * @summary JFrame toFront causes the entire frame to be repainted, causes UI\n+ * to flash\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual WindowToFrontTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class WindowToFrontTest implements ActionListener {\n+    static Frame frame;\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+            1) Click the \"toFront\" button, this causes the\n+            \"WindowToFrontTest\" frame to move front and gets repainted\n+            completely.\n+            2) Move \"WindowToFrontTest\" window and continue to click on \"toFront\n+            multiple times. If the \"WindowToFrontTest\" Frame content is not\n+            drawn properly and continues to blink, test is failed\n+            otherwise passed.\n+            \"\"\";\n+\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+            .title(\"Test Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .rows(13)\n+            .columns(40)\n+            .build();\n+        EventQueue.invokeAndWait(() -> createUI());\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    private static void createUI() {\n+        frame = new Frame(\"WindowToFrontTest\");\n+        frame.setLayout(new BorderLayout());\n+        frame.setSize(512, 512);\n+        PassFailJFrame.addTestWindow(frame);\n+        frame.setVisible(true);\n+\n+        Frame buttonFrame = new Frame(\"Test Button\");\n+        Button push = new Button(\"toFront\");\n+        push.addActionListener(new WindowToFrontTest());\n+        buttonFrame.add(push);\n+        buttonFrame.pack();\n+        PassFailJFrame.addTestWindow(buttonFrame);\n+        buttonFrame.setVisible(true);\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        frame.toFront();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/WindowToFrontTest\/WindowToFrontTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}