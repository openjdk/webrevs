{"files":[{"patch":"@@ -861,0 +861,1 @@\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LDFLAGS_libfast-math := -ffast-math\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+# include <fenv.h>\n@@ -967,0 +968,35 @@\n+void *os::Bsd::dlopen_helper(const char *filename, int mode) {\n+#ifndef IA32\n+  \/\/ Save and restore the floating-point environment around dlopen().\n+  \/\/ There are known cases where global library initialization sets\n+  \/\/ FPU flags that affect computation accuracy, for example, enabling\n+  \/\/ Flush-To-Zero and Denormals-Are-Zero. Do not let those libraries\n+  \/\/ break Java arithmetic. Unfortunately, this might affect libraries\n+  \/\/ that might depend on these FPU features for performance and\/or\n+  \/\/ numerical \"accuracy\", but we need to protect Java semantics first\n+  \/\/ and foremost. See JDK-8295159.\n+\n+  \/\/ This workaround is ineffective on IA32 systems because the MXCSR\n+  \/\/ register (which controls flush-to-zero mode) is not stored in the\n+  \/\/ legacy fenv.\n+\n+  fenv_t default_fenv;\n+  int rtn = fegetenv(&default_fenv);\n+  assert(rtn == 0, \"fegetenv must succeed\");\n+#endif \/\/ IA32\n+\n+  void * result= ::dlopen(filename, RTLD_LAZY);\n+\n+#ifndef IA32\n+  if (result  != nullptr && ! IEEE_subnormal_handling_OK()) {\n+    \/\/ We just dlopen()ed a library that mangled the floating-point\n+    \/\/ flags. Silently fix things now.\n+    int rtn = fesetenv(&default_fenv);\n+    assert(rtn == 0, \"fesetenv must succeed\");\n+    assert(IEEE_subnormal_handling_OK(), \"fsetenv didn't work\");\n+  }\n+#endif \/\/ IA32\n+\n+  return result;\n+}\n+\n@@ -974,1 +1010,1 @@\n-  void * result= ::dlopen(filename, RTLD_LAZY);\n+  void * result = os::Bsd::dlopen_helper(filename, RTLD_LAZY);\n@@ -1003,1 +1039,1 @@\n-  void * result= ::dlopen(filename, RTLD_LAZY);\n+  void * result = os::Bsd::dlopen_helper(filename, RTLD_LAZY);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -73,0 +73,2 @@\n+  static void *dlopen_helper(const char *path, int mode);\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+# include <fenv.h>\n@@ -1807,0 +1808,19 @@\n+#ifndef IA32\n+  \/\/ Save and restore the floating-point environment around dlopen().\n+  \/\/ There are known cases where global library initialization sets\n+  \/\/ FPU flags that affect computation accuracy, for example, enabling\n+  \/\/ Flush-To-Zero and Denormals-Are-Zero. Do not let those libraries\n+  \/\/ break Java arithmetic. Unfortunately, this might affect libraries\n+  \/\/ that might depend on these FPU features for performance and\/or\n+  \/\/ numerical \"accuracy\", but we need to protect Java semantics first\n+  \/\/ and foremost. See JDK-8295159.\n+\n+  \/\/ This workaround is ineffective on IA32 systems because the MXCSR\n+  \/\/ register (which controls flush-to-zero mode) is not stored in the\n+  \/\/ legacy fenv.\n+\n+  fenv_t default_fenv;\n+  int rtn = fegetenv(&default_fenv);\n+  assert(rtn == 0, \"fegetenv must succeed\");\n+#endif \/\/ IA32\n+\n@@ -1822,0 +1842,10 @@\n+#ifndef IA32\n+    \/\/ Quickly test to make sure subnormals are correctly handled.\n+    if (! IEEE_subnormal_handling_OK()) {\n+      \/\/ We just dlopen()ed a library that mangled the floating-point\n+      \/\/ flags. Silently fix things now.\n+      int rtn = fesetenv(&default_fenv);\n+      assert(rtn == 0, \"fesetenv must succeed\");\n+      assert(IEEE_subnormal_handling_OK(), \"fsetenv didn't work\");\n+    }\n+#endif \/\/ IA32\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -412,0 +412,29 @@\n+\n+\/\/ Check for Flush-To-Zero mode\n+\n+\/\/ On some processors faster execution can be achieved by setting a\n+\/\/ mode to return zero for extremely small results, rather than an\n+\/\/ IEEE-754 subnormal number. This mode is not compatible with the\n+\/\/ Java Language Standard.\n+\n+\/\/ We need the addition of _large_subnormal and _small_subnormal to be\n+\/\/ performed at runtime. _small_subnormal is volatile so that\n+\/\/ expressions involving it cannot be evaluated at compile time.\n+static const double large_subnormal_double\n+  = jdouble_cast(0x0030000000000000); \/\/ 0x1.0p-1020;\n+static const volatile double small_subnormal_double\n+  = jdouble_cast(0x0000000000000003); \/\/ 0x0.0000000000003p-1022;\n+\n+\/\/ Quickly test to make sure IEEE-754 subnormal numbers are correctly\n+\/\/ handled.\n+bool IEEE_subnormal_handling_OK() {\n+  \/\/ _small_subnormal is the smallest subnormal number that has two\n+  \/\/ bits set. _large_subnormal is a number such that, when\n+  \/\/ _small_subnormal is added to it, must be rounded according to the\n+  \/\/ mode. These two tests detect the rounding mode in use. If\n+  \/\/ subnormals are turned off (i.e. subnormals-are-zero) flush-to-\n+  \/\/ zero mode is in use.\n+\n+  return (large_subnormal_double + small_subnormal_double > large_subnormal_double\n+          && -large_subnormal_double - small_subnormal_double < -large_subnormal_double);\n+}\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1376,0 +1376,4 @@\n+\/\/ Quickly test to make sure IEEE-754 subnormal numbers are correctly\n+\/\/ handled.\n+bool IEEE_subnormal_handling_OK();\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,0 +78,3 @@\n+compiler\/floatingpoint\/TestSubnormalFloat.java 8317810 generic-i586\n+compiler\/floatingpoint\/TestSubnormalDouble.java 8317810 generic-i586\n+\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295159\n+ * @summary DSO created with -ffast-math breaks Java floating-point arithmetic\n+ * @run main\/othervm\/native compiler.floatingpoint.TestSubnormalDouble\n+ *\/\n+\n+package compiler.floatingpoint;\n+\n+import static java.lang.System.loadLibrary;\n+\n+public class TestSubnormalDouble {\n+    static volatile double lastDouble;\n+\n+    private static void testDoubles() {\n+        lastDouble = 0x1.0p-1074;\n+        for (double x = lastDouble * 2; x <= 0x1.0p1022; x *= 2) {\n+            if (x != x || x <= lastDouble) {\n+                throw new RuntimeException(\"TEST FAILED: \" + x);\n+            }\n+            lastDouble = x;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        testDoubles();\n+        System.out.println(\"Loading libfast-math.so\");\n+        loadLibrary(\"fast-math\");\n+        testDoubles();\n+        System.out.println(\"Test passed.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/TestSubnormalDouble.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295159\n+ * @summary DSO created with -ffast-math breaks Java floating-point arithmetic\n+ * @run main\/othervm\/native compiler.floatingpoint.TestSubnormalFloat\n+ *\/\n+\n+package compiler.floatingpoint;\n+\n+import static java.lang.System.loadLibrary;\n+\n+public class TestSubnormalFloat {\n+    static volatile float lastFloat;\n+\n+    private static void testFloats() {\n+        lastFloat = 0x1.0p-149f;\n+        for (float x = lastFloat * 2; x <= 0x1.0p127f; x *= 2) {\n+            if (x != x || x <= lastFloat) {\n+                throw new RuntimeException(\"TEST FAILED: \" + x);\n+            }\n+            lastFloat = x;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        testFloats();\n+        System.out.println(\"Loading libfast-math.so\");\n+        loadLibrary(\"fast-math\");\n+        testFloats();\n+        System.out.println(\"Test passed.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/TestSubnormalFloat.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+\n+\/\/ See GCC bug 55522:\n+\/\/\n+\/\/ \"When used at link-time, [ GCC with -ffast-math ] may include\n+\/\/ libraries or startup files that change the default FPU control word\n+\/\/ or other similar optimizations.\"\n+\/\/\n+\/\/ This breaks Java's floating point arithmetic.\n+\n+#if defined(__GNUC__)\n+\n+\/\/ On systems on which GCC bug 55522 has been fixed, this constructor\n+\/\/ serves to reproduce that bug for the purposes of testing HotSpot.\n+static void __attribute__((constructor)) set_flush_to_zero(void) {\n+\n+#if defined(__x86_64__)\n+\n+#define MXCSR_DAZ (1 << 6)      \/* Enable denormals are zero mode *\/\n+#define MXCSR_FTZ (1 << 15)     \/* Enable flush to zero mode *\/\n+  unsigned int mxcsr = __builtin_ia32_stmxcsr ();\n+  mxcsr |= MXCSR_DAZ | MXCSR_FTZ;\n+  __builtin_ia32_ldmxcsr (mxcsr);\n+\n+#elif defined(__aarch64__)\n+\n+#define _FPU_FPCR_FZ (unsigned long)0x1000000\n+#define _FPU_SETCW(fpcr) \\\n+  __asm__ __volatile__ (\"msr fpcr, %0\" : : \"r\" (fpcr));\n+\n+  \/* Flush to zero, round to nearest, IEEE exceptions disabled.  *\/\n+  _FPU_SETCW (_FPU_FPCR_FZ);\n+\n+#endif \/\/ CPU arch\n+\n+}\n+#endif \/\/ defined(__GNUC__)\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/libfast-math.c","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}