{"files":[{"patch":"@@ -104,1 +104,1 @@\n-    ResponseTimerEvent responseTimerEvent;\n+    volatile ResponseTimerEvent responseTimerEvent;\n@@ -234,0 +234,1 @@\n+            responseTimerEvent = null;\n@@ -429,0 +430,1 @@\n+                            cancelTimer();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/MultiExchange.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8304701\n+ * @summary Verifies that for a redirected request, the given HttpClient\n+ *          will clear and start a new response timer instead of throwing\n+ *          an HttpTimeoutException during the redirected request.\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext\n+ * @run testng\/othervm -Djdk.httpclient.HttpClient.log=errors,trace -Djdk.internal.httpclient.debug=false RedirectTimeoutTest\n+ *\/\n+\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestExchange;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestHandler;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestResponseHeaders;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestServer;\n+import org.testng.TestException;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpClient.Version;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpTimeoutException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.time.Instant;\n+\n+import static java.net.http.HttpClient.Redirect.ALWAYS;\n+import static java.net.http.HttpClient.Version.HTTP_1_1;\n+import static java.net.http.HttpClient.Version.HTTP_2;\n+import static jdk.test.lib.Utils.adjustTimeout;\n+\n+public class RedirectTimeoutTest {\n+\n+    static HttpTestServer h1TestServer, h2TestServer;\n+    static URI h1Uri, h1RedirectUri, h2Uri, h2RedirectUri, h2WarmupUri, testRedirectURI;\n+    private static final long TIMEOUT_MILLIS =  3000L; \/\/ 3s\n+    private static final long SLEEP_TIME = 1500L; \/\/ 1.5s\n+    public static final int ITERATIONS = 4;\n+    private static final PrintStream out = System.out;\n+\n+    @BeforeTest\n+    public void setup() throws IOException {\n+        h1TestServer = HttpTestServer.create(HTTP_1_1);\n+        h2TestServer = HttpTestServer.create(HTTP_2);\n+        h1Uri = URI.create(\"http:\/\/\" + h1TestServer.serverAuthority() + \"\/h1_test\");\n+        h1RedirectUri = URI.create(\"http:\/\/\" + h1TestServer.serverAuthority() + \"\/h1_redirect\");\n+        h2Uri = URI.create(\"http:\/\/\" + h2TestServer.serverAuthority() + \"\/h2_test\");\n+        h2RedirectUri = URI.create(\"http:\/\/\" + h2TestServer.serverAuthority() + \"\/h2_redirect\");\n+        h2WarmupUri = URI.create(\"http:\/\/\" + h2TestServer.serverAuthority() + \"\/h2_warmup\");\n+        h1TestServer.addHandler(new GetHandler(), \"\/h1_test\");\n+        h1TestServer.addHandler(new RedirectHandler(), \"\/h1_redirect\");\n+        h2TestServer.addHandler(new GetHandler(), \"\/h2_test\");\n+        h2TestServer.addHandler(new RedirectHandler(), \"\/h2_redirect\");\n+        h2TestServer.addHandler(new Http2Warmup(), \"\/h2_warmup\");\n+        h1TestServer.start();\n+        h2TestServer.start();\n+    }\n+\n+    @AfterTest\n+    public void teardown() {\n+        h1TestServer.stop();\n+        h2TestServer.stop();\n+    }\n+\n+    @DataProvider(name = \"testData\")\n+    public Object[][] testData() {\n+        return new Object[][] {\n+                { HTTP_1_1, h1Uri, h1RedirectUri },\n+                { HTTP_2, h2Uri, h2RedirectUri }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testData\")\n+    public void test(Version version, URI uri, URI redirectURI) throws InterruptedException {\n+        out.println(\"Testing for \" + version);\n+        testRedirectURI = redirectURI;\n+        HttpClient.Builder clientBuilder = HttpClient.newBuilder().followRedirects(ALWAYS);\n+        HttpRequest request = HttpRequest.newBuilder().uri(uri)\n+                .GET()\n+                .version(version)\n+                .timeout(Duration.ofMillis(adjustTimeout(TIMEOUT_MILLIS)))\n+                .build();\n+\n+        try (HttpClient client = clientBuilder.build()) {\n+            if (version.equals(HTTP_2))\n+                client.send(HttpRequest.newBuilder(h2WarmupUri).HEAD().build(), HttpResponse.BodyHandlers.discarding());\n+            \/*\n+                With TIMEOUT_MILLIS set to 1500ms and the server's RedirectHandler sleeping for 750ms before responding\n+                to each request, 4 iterations will take a guaranteed minimum time of 3000ms which will ensure that any\n+                uncancelled\/uncleared timers will fire within the test window.\n+             *\/\n+            for (int i = 0; i < ITERATIONS; i++) {\n+                out.println(Instant.now() + \": Client: Sending request #\" + (i + 1));\n+                client.send(request, HttpResponse.BodyHandlers.ofString());\n+                out.println(\"Request complete\");\n+            }\n+        } catch (IOException e) {\n+            if (e.getClass() == HttpTimeoutException.class) {\n+                e.printStackTrace(System.out);\n+                throw new TestException(\"Timeout from original HttpRequest expired on redirect when it should have been cancelled.\");\n+            } else {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    public static class Http2Warmup implements HttpTestHandler {\n+\n+        @Override\n+        public void handle(HttpTestExchange t) throws IOException {\n+            t.sendResponseHeaders(200, 0);\n+        }\n+    }\n+\n+    public static class GetHandler implements HttpTestHandler {\n+\n+        @Override\n+        public void handle(HttpTestExchange exchange) throws IOException {\n+            out.println(Instant.now() + \": Server: Get Handler Called\");\n+            HttpTestResponseHeaders responseHeaders = exchange.getResponseHeaders();\n+            responseHeaders.addHeader(\"Location\", testRedirectURI.toString());\n+            exchange.sendResponseHeaders(302, 0);\n+        }\n+    }\n+\n+    public static class RedirectHandler implements HttpTestHandler {\n+\n+        @Override\n+        public void handle(HttpTestExchange exchange) throws IOException {\n+            out.println(Instant.now() + \": Server: Redirect Handler Called\");\n+            byte[] data = \"Test\".getBytes(StandardCharsets.UTF_8);\n+            try {\n+                Thread.sleep(adjustTimeout(SLEEP_TIME));\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+            exchange.sendResponseHeaders(200, data.length);\n+            try (OutputStream os = exchange.getResponseBody()) {\n+                os.write(data);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/httpclient\/RedirectTimeoutTest.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"}]}