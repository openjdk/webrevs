{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit AvailableCharsetNames\n@@ -30,4 +31,1 @@\n-import java.io.*;\n-import java.nio.*;\n-import java.nio.charset.*;\n-import java.util.*;\n+import java.nio.charset.Charset;\n@@ -35,0 +33,3 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -38,4 +39,7 @@\n-    public static void main(String[] args) throws Exception {\n-        Iterator charsetIterator = Charset.availableCharsets().keySet().iterator();\n-        while (charsetIterator.hasNext()) {\n-            String charsetName = (String) charsetIterator.next();\n+    \/**\n+     * Test that the keys in Charset.availableCharsets()\n+     * are equal to the associated Charset.name() value.\n+     *\/\n+    @Test\n+    public void canonicalNamesTest() {\n+        for (String charsetName : Charset.availableCharsets().keySet()) {\n@@ -43,4 +47,1 @@\n-            if (!charset.name().equals(charsetName)) {\n-                throw new Exception(\"Error: Charset name mismatch - expected \"\n-                                   + charsetName + \", got \" + charset.name());\n-            }\n+            assertEquals(charset.name(), charsetName, \"Charset name mismatch\");\n@@ -48,1 +49,0 @@\n-\n@@ -50,1 +50,0 @@\n-\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/AvailableCharsetNames.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit CharsetContainmentTest\n@@ -30,1 +31,4 @@\n-import java.nio.charset.*;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n@@ -32,7 +36,3 @@\n-public class CharsetContainmentTest {\n-    static String[] encodings =\n-        { \"US-ASCII\", \"UTF-16\", \"UTF-16BE\", \"UTF-16LE\", \"UTF-8\",\n-          \"windows-1252\", \"ISO-8859-1\", \"ISO-8859-2\", \"ISO-8859-3\",\n-          \"ISO-8859-4\", \"ISO-8859-5\", \"ISO-8859-6\", \"ISO-8859-7\",\n-          \"ISO-8859-8\", \"ISO-8859-9\", \"ISO-8859-13\", \"ISO-8859-15\", \"ISO-8859-16\",\n-          \"ISO-2022-JP\", \"ISO-2022-KR\",\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,3 +40,1 @@\n-          \/\/ Temporarily remove ISO-2022-CN-* charsets until full encoder\/decoder\n-          \/\/ support is added (4673614)\n-          \/\/ \"x-ISO-2022-CN-CNS\", \"x-ISO-2022-CN-GB\",\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,7 +42,1 @@\n-          \"x-ISCII91\", \"GBK\", \"GB18030\", \"Big5\",\n-          \"x-EUC-TW\", \"GB2312\", \"EUC-KR\", \"x-Johab\", \"Big5-HKSCS\",\n-          \"x-MS950-HKSCS\", \"windows-1251\", \"windows-1253\", \"windows-1254\",\n-          \"windows-1255\", \"windows-1256\", \"windows-1257\", \"windows-1258\",\n-          \"x-mswin-936\", \"x-windows-949\", \"x-windows-950\", \"windows-31j\",\n-          \"Shift_JIS\", \"EUC-JP\", \"KOI8-R\", \"TIS-620\"\n-        };\n+public class CharsetContainmentTest {\n@@ -52,50 +44,14 @@\n-    static String[][] contains = {\n-        { \"US-ASCII\"},\n-           encodings,\n-           encodings,\n-           encodings,\n-           encodings,\n-          {\"US-ASCII\", \"windows-1252\"},\n-          {\"US-ASCII\", \"ISO-8859-1\"},\n-          {\"US-ASCII\", \"ISO-8859-2\"},\n-          {\"US-ASCII\", \"ISO-8859-3\"},\n-          {\"US-ASCII\", \"ISO-8859-4\"},\n-          {\"US-ASCII\", \"ISO-8859-5\"},\n-          {\"US-ASCII\", \"ISO-8859-6\"},\n-          {\"US-ASCII\", \"ISO-8859-7\"},\n-          {\"US-ASCII\", \"ISO-8859-8\"},\n-          {\"US-ASCII\", \"ISO-8859-9\"},\n-          {\"US-ASCII\", \"ISO-8859-13\"},\n-          {\"US-ASCII\", \"ISO-8859-15\"},\n-          {\"US-ASCII\", \"ISO-8859-16\"},\n-          {\"ISO-2022-JP\"},\n-          {\"ISO-2022-KR\"},\n-          \/\/ Temporarily remove ISO-2022-CN-* charsets until full encoder\/decoder\n-          \/\/ support is added (4673614)\n-          \/\/{\"x-ISO-2022-CN-CNS\"},\n-          \/\/{\"x-ISO-2022-CN-GB\"},\n-          {\"US-ASCII\", \"x-ISCII91\"},\n-          {\"US-ASCII\", \"GBK\"},\n-          encodings,\n-          {\"US-ASCII\", \"Big5\"},\n-          {\"US-ASCII\", \"x-EUC-TW\"},\n-          {\"US-ASCII\", \"GB2312\"},\n-          {\"US-ASCII\", \"EUC-KR\"},\n-          {\"US-ASCII\", \"x-Johab\"},\n-          {\"US-ASCII\", \"Big5-HKSCS\", \"Big5\"},\n-          {\"US-ASCII\", \"x-MS950-HKSCS\", \"x-windows-950\"},\n-          {\"US-ASCII\", \"windows-1251\"},\n-          {\"US-ASCII\", \"windows-1253\"},\n-          {\"US-ASCII\", \"windows-1254\"},\n-          {\"US-ASCII\", \"windows-1255\"},\n-          {\"US-ASCII\", \"windows-1256\"},\n-          {\"US-ASCII\", \"windows-1257\"},\n-          {\"US-ASCII\", \"windows-1258\"},\n-          {\"US-ASCII\", \"x-mswin-936\"},\n-          {\"US-ASCII\", \"x-windows-949\"},\n-          {\"US-ASCII\", \"x-windows-950\"},\n-          {\"US-ASCII\", \"windows-31j\" },\n-          {\"US-ASCII\", \"Shift_JIS\"},\n-          {\"US-ASCII\", \"EUC-JP\"},\n-          {\"US-ASCII\", \"KOI8-R\"},\n-          {\"US-ASCII\", \"TIS-620\"}};\n+    \/**\n+     * Test that the charsets in 'encodings' contain the charsets\n+     * inside 'contains'. Each value in 'encodings' is mapped to a String\n+     * array in 'contains'. For example, the value, \"TIS-620\" in 'encodings'\n+     * should contain \"US-ASCII\", \"TIS-620\".\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"charsets\")\n+    public void interContainmentTest(String containerName, String containedName) {\n+        Charset container = Charset.forName(containerName);\n+        Charset contained = Charset.forName(containedName);\n+        assertTrue(container.contains(contained),\n+                String.format(\"Charset: %s does not contain: %s\", containerName, containedName));\n+    }\n@@ -103,0 +59,17 @@\n+    private static Stream<Arguments> charsets() {\n+        String[] encodings = {\n+                \"US-ASCII\", \"UTF-16\", \"UTF-16BE\", \"UTF-16LE\", \"UTF-8\",\n+                \"windows-1252\", \"ISO-8859-1\", \"ISO-8859-2\", \"ISO-8859-3\",\n+                \"ISO-8859-4\", \"ISO-8859-5\", \"ISO-8859-6\", \"ISO-8859-7\",\n+                \"ISO-8859-8\", \"ISO-8859-9\", \"ISO-8859-13\", \"ISO-8859-15\", \"ISO-8859-16\",\n+                \"ISO-2022-JP\", \"ISO-2022-KR\",\n+                \/\/ Temporarily remove ISO-2022-CN-* charsets until full encoder\/decoder\n+                \/\/ support is added (4673614)\n+                \/\/ \"x-ISO-2022-CN-CNS\", \"x-ISO-2022-CN-GB\",\n+                \"x-ISCII91\", \"GBK\", \"GB18030\", \"Big5\",\n+                \"x-EUC-TW\", \"GB2312\", \"EUC-KR\", \"x-Johab\", \"Big5-HKSCS\",\n+                \"x-MS950-HKSCS\", \"windows-1251\", \"windows-1253\", \"windows-1254\",\n+                \"windows-1255\", \"windows-1256\", \"windows-1257\", \"windows-1258\",\n+                \"x-mswin-936\", \"x-windows-949\", \"x-windows-950\", \"windows-31j\",\n+                \"Shift_JIS\", \"EUC-JP\", \"KOI8-R\", \"TIS-620\"\n+                };\n@@ -104,1 +77,56 @@\n-    public static void main(String[] args) throws Exception {\n+        String[][] contains = {\n+                {\"US-ASCII\"},\n+                encodings,\n+                encodings,\n+                encodings,\n+                encodings,\n+                {\"US-ASCII\", \"windows-1252\"},\n+                {\"US-ASCII\", \"ISO-8859-1\"},\n+                {\"US-ASCII\", \"ISO-8859-2\"},\n+                {\"US-ASCII\", \"ISO-8859-3\"},\n+                {\"US-ASCII\", \"ISO-8859-4\"},\n+                {\"US-ASCII\", \"ISO-8859-5\"},\n+                {\"US-ASCII\", \"ISO-8859-6\"},\n+                {\"US-ASCII\", \"ISO-8859-7\"},\n+                {\"US-ASCII\", \"ISO-8859-8\"},\n+                {\"US-ASCII\", \"ISO-8859-9\"},\n+                {\"US-ASCII\", \"ISO-8859-13\"},\n+                {\"US-ASCII\", \"ISO-8859-15\"},\n+                {\"US-ASCII\", \"ISO-8859-16\"},\n+                {\"ISO-2022-JP\"},\n+                {\"ISO-2022-KR\"},\n+                \/\/ Temporarily remove ISO-2022-CN-* charsets until full encoder\/decoder\n+                \/\/ support is added (4673614)\n+                \/\/{\"x-ISO-2022-CN-CNS\"},\n+                \/\/{\"x-ISO-2022-CN-GB\"},\n+                {\"US-ASCII\", \"x-ISCII91\"},\n+                {\"US-ASCII\", \"GBK\"},\n+                encodings,\n+                {\"US-ASCII\", \"Big5\"},\n+                {\"US-ASCII\", \"x-EUC-TW\"},\n+                {\"US-ASCII\", \"GB2312\"},\n+                {\"US-ASCII\", \"EUC-KR\"},\n+                {\"US-ASCII\", \"x-Johab\"},\n+                {\"US-ASCII\", \"Big5-HKSCS\", \"Big5\"},\n+                {\"US-ASCII\", \"x-MS950-HKSCS\", \"x-windows-950\"},\n+                {\"US-ASCII\", \"windows-1251\"},\n+                {\"US-ASCII\", \"windows-1253\"},\n+                {\"US-ASCII\", \"windows-1254\"},\n+                {\"US-ASCII\", \"windows-1255\"},\n+                {\"US-ASCII\", \"windows-1256\"},\n+                {\"US-ASCII\", \"windows-1257\"},\n+                {\"US-ASCII\", \"windows-1258\"},\n+                {\"US-ASCII\", \"x-mswin-936\"},\n+                {\"US-ASCII\", \"x-windows-949\"},\n+                {\"US-ASCII\", \"x-windows-950\"},\n+                {\"US-ASCII\", \"windows-31j\"},\n+                {\"US-ASCII\", \"Shift_JIS\"},\n+                {\"US-ASCII\", \"EUC-JP\"},\n+                {\"US-ASCII\", \"KOI8-R\"},\n+                {\"US-ASCII\", \"TIS-620\"}};\n+\n+        \/\/ Length of encodings and contains should always be equal\n+        if (encodings.length != contains.length) {\n+            throw new RuntimeException(\"Testing data is not set up correctly\");\n+        }\n+        List<Arguments> charsetList = new ArrayList<Arguments>();\n@@ -106,9 +134,3 @@\n-            Charset c = Charset.forName(encodings[i]);\n-                for (int j = 0 ; j < contains[i].length; j++) {\n-                    if (c.contains(Charset.forName(contains[i][j])))\n-                        continue;\n-                    else {\n-                        throw new Exception (\"Error: charset \" + encodings[i] +\n-                                        \"doesn't contain \" + contains[i][j]);\n-                    }\n-                }\n+            for (int j = 0 ; j < contains[i].length; j++) {\n+                charsetList.add(Arguments.of(encodings[i], contains[i][j]));\n+            }\n@@ -116,0 +138,1 @@\n+        return charsetList.stream();\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/CharsetContainmentTest.java","additions":102,"deletions":79,"binary":false,"changes":181,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @run junit Contains\n@@ -30,1 +31,3 @@\n-import java.nio.charset.*;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.stream.Stream;\n@@ -32,0 +35,4 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -33,12 +40,2 @@\n-public class Contains {\n-\n-    static void ck(Charset cs1, Charset cs2, boolean cont) throws Exception {\n-        if ((cs1.contains(cs2)) != cont)\n-            throw new Exception(\"Wrong answer: \"\n-                                + cs1.name() + \" contains \" + cs2.name());\n-        System.err.println(cs1.name()\n-                           + (cont ? \" contains \" : \" does not contain \")\n-                           + cs2.name());\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -46,6 +43,1 @@\n-        Charset us_ascii = Charset.forName(\"US-ASCII\");\n-        Charset iso_8859_1 = Charset.forName(\"ISO-8859-1\");\n-        Charset iso_8859_15 = Charset.forName(\"ISO-8859-15\");\n-        Charset utf_8 = Charset.forName(\"UTF-8\");\n-        Charset utf_16be = Charset.forName(\"UTF-16BE\");\n-        Charset cp1252 = Charset.forName(\"CP1252\");\n+public class Contains {\n@@ -53,45 +45,8 @@\n-        ck(us_ascii, us_ascii, true);\n-        ck(us_ascii, iso_8859_1, false);\n-        ck(us_ascii, iso_8859_15, false);\n-        ck(us_ascii, utf_8, false);\n-        ck(us_ascii, utf_16be, false);\n-        ck(us_ascii, cp1252, false);\n-\n-        ck(iso_8859_1, us_ascii, true);\n-        ck(iso_8859_1, iso_8859_1, true);\n-        ck(iso_8859_1, iso_8859_15, false);\n-        ck(iso_8859_1, utf_8, false);\n-        ck(iso_8859_1, utf_16be, false);\n-        ck(iso_8859_1, cp1252, false);\n-\n-        ck(iso_8859_15, us_ascii, true);\n-        ck(iso_8859_15, iso_8859_1, false);\n-        ck(iso_8859_15, iso_8859_15, true);\n-        ck(iso_8859_15, utf_8, false);\n-        ck(iso_8859_15, utf_16be, false);\n-        ck(iso_8859_15, cp1252, false);\n-\n-        ck(utf_8, us_ascii, true);\n-        ck(utf_8, iso_8859_1, true);\n-        ck(utf_8, iso_8859_15, true);\n-        ck(utf_8, utf_8, true);\n-        ck(utf_8, utf_16be, true);\n-        ck(utf_8, cp1252, true);\n-\n-        ck(utf_16be, us_ascii, true);\n-        ck(utf_16be, iso_8859_1, true);\n-        ck(utf_16be, iso_8859_15, true);\n-        ck(utf_16be, utf_8, true);\n-        ck(utf_16be, utf_16be, true);\n-        ck(utf_16be, cp1252, true);\n-\n-        ck(cp1252, us_ascii, true);\n-        ck(cp1252, iso_8859_1, false);\n-        ck(cp1252, iso_8859_15, false);\n-        ck(cp1252, utf_8, false);\n-        ck(cp1252, utf_16be, false);\n-        ck(cp1252, cp1252, true);\n-\n-        checkUTF();\n-\n-        containsSelfTest();\n+    \/**\n+     * Tests the containment of some charsets against themselves.\n+     * This test takes both true and false for 'cont'.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"charsets\")\n+    public void charsetsTest(Charset containerCs, Charset cs, boolean cont){\n+        shouldContain(containerCs, cs, cont);\n@@ -100,6 +55,9 @@\n-    static void checkUTF() throws Exception {\n-        for (String utfName : utfNames)\n-            for (String csName : charsetNames)\n-                ck(Charset.forName(utfName),\n-                   Charset.forName(csName),\n-                   true);\n+    \/**\n+     * Tests UTF charsets with other charsets. In this case, each UTF charset\n+     * should contain every single charset they are tested against. 'cont' is\n+     * always true.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"utfCharsets\")\n+    public void UTFCharsetsTest(Charset containerCs, Charset cs, boolean cont){\n+        shouldContain(containerCs, cs, cont);\n@@ -111,3 +69,2 @@\n-    static void containsSelfTest() {\n-        boolean failed = false;\n-\n+    @Test\n+    public void containsSelfTest() {\n@@ -117,9 +74,2 @@\n-\n-            System.out.println(\"Charset(\" + charset.name() + \").contains(Charset(\" + charset.name()\n-                        + \")) returns \" + contains);\n-            if (!contains) {\n-                failed = true;\n-            }\n-        }\n-        if (failed) {\n-            throw new RuntimeException(\"Charset.contains(itself) returns false for some charsets\");\n+            assertTrue(contains, String.format(\"Charset(%s).contains(Charset(%s)) returns %s\",\n+                    charset.name(), charset.name(), contains));\n@@ -129,61 +79,131 @@\n-    static String[] utfNames = {\"utf-16\",\n-                         \"utf-8\",\n-                         \"utf-16le\",\n-                         \"utf-16be\",\n-                         \"x-utf-16le-bom\"};\n-\n-    static String[] charsetNames = {\n-        \"US-ASCII\",\n-        \"UTF-8\",\n-        \"UTF-16\",\n-        \"UTF-16BE\",\n-        \"UTF-16LE\",\n-        \"x-UTF-16LE-BOM\",\n-        \"GBK\",\n-        \"GB18030\",\n-        \"ISO-8859-1\",\n-        \"ISO-8859-15\",\n-        \"ISO-8859-2\",\n-        \"ISO-8859-3\",\n-        \"ISO-8859-4\",\n-        \"ISO-8859-5\",\n-        \"ISO-8859-6\",\n-        \"ISO-8859-7\",\n-        \"ISO-8859-8\",\n-        \"ISO-8859-9\",\n-        \"ISO-8859-13\",\n-        \"JIS_X0201\",\n-        \"x-JIS0208\",\n-        \"JIS_X0212-1990\",\n-        \"GB2312\",\n-        \"EUC-KR\",\n-        \"x-EUC-TW\",\n-        \"EUC-JP\",\n-        \"x-euc-jp-linux\",\n-        \"KOI8-R\",\n-        \"TIS-620\",\n-        \"x-ISCII91\",\n-        \"windows-1251\",\n-        \"windows-1252\",\n-        \"windows-1253\",\n-        \"windows-1254\",\n-        \"windows-1255\",\n-        \"windows-1256\",\n-        \"windows-1257\",\n-        \"windows-1258\",\n-        \"windows-932\",\n-        \"x-mswin-936\",\n-        \"x-windows-949\",\n-        \"x-windows-950\",\n-        \"windows-31j\",\n-        \"Big5\",\n-        \"Big5-HKSCS\",\n-        \"x-MS950-HKSCS\",\n-        \"ISO-2022-JP\",\n-        \"ISO-2022-KR\",\n-        \"x-ISO-2022-CN-CNS\",\n-        \"x-ISO-2022-CN-GB\",\n-        \"Big5-HKSCS\",\n-        \"x-Johab\",\n-        \"Shift_JIS\"\n-    };\n+    \/**\n+     * Helper method that checks if a charset should contain another charset.\n+     *\/\n+    static void shouldContain(Charset containerCs, Charset cs, boolean cont){\n+        assertEquals((containerCs.contains(cs)), cont, String.format(\"%s %s %s\",\n+                containerCs.name(), (cont ? \" contains \" : \" does not contain \"), cs.name()));\n+    }\n+\n+    private static Stream<Arguments> utfCharsets() {\n+        String[] utfNames = {\n+                \"utf-16\",\n+                \"utf-8\",\n+                \"utf-16le\",\n+                \"utf-16be\",\n+                \"x-utf-16le-bom\"\n+        };\n+\n+        String[] charsetNames = {\n+                \"US-ASCII\",\n+                \"UTF-8\",\n+                \"UTF-16\",\n+                \"UTF-16BE\",\n+                \"UTF-16LE\",\n+                \"x-UTF-16LE-BOM\",\n+                \"GBK\",\n+                \"GB18030\",\n+                \"ISO-8859-1\",\n+                \"ISO-8859-15\",\n+                \"ISO-8859-2\",\n+                \"ISO-8859-3\",\n+                \"ISO-8859-4\",\n+                \"ISO-8859-5\",\n+                \"ISO-8859-6\",\n+                \"ISO-8859-7\",\n+                \"ISO-8859-8\",\n+                \"ISO-8859-9\",\n+                \"ISO-8859-13\",\n+                \"JIS_X0201\",\n+                \"x-JIS0208\",\n+                \"JIS_X0212-1990\",\n+                \"GB2312\",\n+                \"EUC-KR\",\n+                \"x-EUC-TW\",\n+                \"EUC-JP\",\n+                \"x-euc-jp-linux\",\n+                \"KOI8-R\",\n+                \"TIS-620\",\n+                \"x-ISCII91\",\n+                \"windows-1251\",\n+                \"windows-1252\",\n+                \"windows-1253\",\n+                \"windows-1254\",\n+                \"windows-1255\",\n+                \"windows-1256\",\n+                \"windows-1257\",\n+                \"windows-1258\",\n+                \"windows-932\",\n+                \"x-mswin-936\",\n+                \"x-windows-949\",\n+                \"x-windows-950\",\n+                \"windows-31j\",\n+                \"Big5\",\n+                \"Big5-HKSCS\",\n+                \"x-MS950-HKSCS\",\n+                \"ISO-2022-JP\",\n+                \"ISO-2022-KR\",\n+                \"x-ISO-2022-CN-CNS\",\n+                \"x-ISO-2022-CN-GB\",\n+                \"Big5-HKSCS\",\n+                \"x-Johab\",\n+                \"Shift_JIS\"\n+        };\n+\n+        \/\/ All charsets in utfNames should contain\n+        \/\/ all charsets in charsetNames\n+        return Arrays.stream(utfNames).flatMap(cs1 -> Arrays.stream(charsetNames)\n+                .map(cs2 -> Arguments.of(Charset.forName(cs1), Charset.forName(cs2), true)));\n+    }\n+\n+    private static Stream<Arguments> charsets() {\n+        Charset us_ascii = Charset.forName(\"US-ASCII\");\n+        Charset iso_8859_1 = Charset.forName(\"ISO-8859-1\");\n+        Charset iso_8859_15 = Charset.forName(\"ISO-8859-15\");\n+        Charset utf_8 = Charset.forName(\"UTF-8\");\n+        Charset utf_16be = Charset.forName(\"UTF-16BE\");\n+        Charset cp1252 = Charset.forName(\"CP1252\");\n+\n+        return Stream.of(\n+            Arguments.of(us_ascii, us_ascii, true),\n+            Arguments.of(us_ascii, iso_8859_1, false),\n+            Arguments.of(us_ascii, iso_8859_15, false),\n+            Arguments.of(us_ascii, utf_8, false),\n+            Arguments.of(us_ascii, utf_16be, false),\n+            Arguments.of(us_ascii, cp1252, false),\n+\n+            Arguments.of(iso_8859_1, us_ascii, true),\n+            Arguments.of(iso_8859_1, iso_8859_1, true),\n+            Arguments.of(iso_8859_1, iso_8859_15, false),\n+            Arguments.of(iso_8859_1, utf_8, false),\n+            Arguments.of(iso_8859_1, utf_16be, false),\n+            Arguments.of(iso_8859_1, cp1252, false),\n+\n+            Arguments.of(iso_8859_15, us_ascii, true),\n+            Arguments.of(iso_8859_15, iso_8859_1, false),\n+            Arguments.of(iso_8859_15, iso_8859_15, true),\n+            Arguments.of(iso_8859_15, utf_8, false),\n+            Arguments.of(iso_8859_15, utf_16be, false),\n+            Arguments.of(iso_8859_15, cp1252, false),\n+\n+            Arguments.of(utf_8, us_ascii, true),\n+            Arguments.of(utf_8, iso_8859_1, true),\n+            Arguments.of(utf_8, iso_8859_15, true),\n+            Arguments.of(utf_8, utf_8, true),\n+            Arguments.of(utf_8, utf_16be, true),\n+            Arguments.of(utf_8, cp1252, true),\n+\n+            Arguments.of(utf_16be, us_ascii, true),\n+            Arguments.of(utf_16be, iso_8859_1, true),\n+            Arguments.of(utf_16be, iso_8859_15, true),\n+            Arguments.of(utf_16be, utf_8, true),\n+            Arguments.of(utf_16be, utf_16be, true),\n+            Arguments.of(utf_16be, cp1252, true),\n+\n+            Arguments.of(cp1252, us_ascii, true),\n+            Arguments.of(cp1252, iso_8859_1, false),\n+            Arguments.of(cp1252, iso_8859_15, false),\n+            Arguments.of(cp1252, utf_8, false),\n+            Arguments.of(cp1252, utf_16be, false),\n+            Arguments.of(cp1252, cp1252, true)\n+        );\n+    }\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/Contains.java","additions":163,"deletions":143,"binary":false,"changes":306,"status":"modified"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4786884\n- * @summary Ensure that passing the empty string to Charset methods and\n- *          constructors causes an IllegalArgumentException to be thrown\n- *\/\n-\n-import java.io.*;\n-import java.nio.*;\n-import java.nio.charset.*;\n-\n-\n-public class EmptyCharsetName {\n-\n-    static abstract class Test {\n-\n-        public abstract void go() throws Exception;\n-\n-        Test() throws Exception {\n-            try {\n-                go();\n-            } catch (Exception x) {\n-                if (x instanceof IllegalCharsetNameException) {\n-                    System.err.println(\"Thrown as expected: \" + x);\n-                    return;\n-                }\n-                throw new Exception(\"Incorrect exception: \"\n-                                    + x.getClass().getName(),\n-                                    x);\n-            }\n-            throw new Exception(\"No exception thrown\");\n-        }\n-\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        new Test() {\n-                public void go() throws Exception {\n-                    Charset.forName(\"\");\n-                }};\n-        new Test() {\n-                public void go() throws Exception {\n-                    Charset.isSupported(\"\");\n-                }};\n-        new Test() {\n-                public void go() throws Exception {\n-                    new Charset(\"\", new String[] { }) {\n-                            public CharsetDecoder newDecoder() {\n-                                return null;\n-                            }\n-                            public CharsetEncoder newEncoder() {\n-                                return null;\n-                            }\n-                            public boolean contains(Charset cs) {\n-                                return false;\n-                            }\n-                        };\n-                }};\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/EmptyCharsetName.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @run junit EncDec\n@@ -28,0 +29,3 @@\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.stream.Stream;\n@@ -29,2 +33,2 @@\n-import java.nio.*;\n-import java.nio.charset.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -32,0 +36,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,2 +40,7 @@\n-    public static void main(String[] args) throws Exception {\n-        String s = \"Hello, world!\";\n+    \/**\n+     * Test that the input String is the same after round tripping\n+     * the Charset.encode() and Charset.decode() methods.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"stringProvider\")\n+    public void roundTripTest(String pre) {\n@@ -38,5 +48,8 @@\n-        bb.put(Charset.forName(\"ISO-8859-15\").encode(s)).flip();\n-        String t = Charset.forName(\"UTF-8\").decode(bb).toString();\n-        System.err.println(t);\n-        if (!t.equals(s))\n-            throw new Exception(\"Mismatch: \" + s + \" != \" + t);\n+        Charset preCs = Charset.forName(\"ISO-8859-15\");\n+        if (!preCs.canEncode()) {\n+            throw new RuntimeException(\"Error: Trying to test encode and \" +\n+                    \"decode methods on a charset that does not support encoding\");\n+        }\n+        bb.put(preCs.encode(pre)).flip();\n+        String post = Charset.forName(\"UTF-8\").decode(bb).toString();\n+        assertEquals(pre, post, \"Mismatch after encoding + decoding, :\");\n@@ -45,0 +58,6 @@\n+    static Stream<String> stringProvider() {\n+        return Stream.of(\n+                \"Hello, world!\",\n+                \"apple, banana, orange\",\n+                \"car, truck, horse\");\n+    }\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/EncDec.java","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 6330020 8184665\n+ * @bug 4786884 6330020 8184665\n@@ -28,0 +28,1 @@\n+ * @run junit IllegalCharsetName\n@@ -30,1 +31,11 @@\n-import java.nio.charset.*;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -33,19 +44,0 @@\n-    public static void main(String[] args) throws Exception {\n-        String[] illegalNames = {\n-            \".\",\n-            \"_\",\n-            \":\",\n-            \"-\",\n-            \".name\",\n-            \"_name\",\n-            \":name\",\n-            \"-name\",\n-            \"name*name\",\n-            \"name?name\"\n-        };\n-        for (int i = 0; i < illegalNames.length; i++) {\n-            try {\n-                Charset.forName(illegalNames[i]);\n-                throw new Exception(\"Charset.forName(): No exception thrown\");\n-            } catch (IllegalCharsetNameException x) { \/\/expected\n-            }\n@@ -53,6 +45,30 @@\n-            try {\n-                Charset.isSupported(illegalNames[i]);\n-                throw new Exception(\"Charset.isSupported(): No exception thrown\");\n-            } catch (IllegalCharsetNameException x) { \/\/expected\n-            }\n-        }\n+    \/\/ Charset.forName and Charset.isSupported should throw an\n+    \/\/ IllegalCharsetNameException when passed an illegal name\n+    @ParameterizedTest\n+    @MethodSource(\"illegalNames\")\n+    public void illegalCharsetsTest(String name) {\n+        assertThrows(IllegalCharsetNameException.class,\n+                () -> Charset.forName(name));\n+        assertThrows(IllegalCharsetNameException.class,\n+                () -> Charset.forName(name));\n+    }\n+\n+    \/\/ Charset.forName, Charset.isSupported, and the Charset constructor should\n+    \/\/ throw an IllegalCharsetNameException when passed an empty name\n+    @Test\n+    public void emptyCharsetsTest() {\n+        assertThrows(IllegalCharsetNameException.class,\n+                () -> Charset.forName(\"\"));\n+        assertThrows(IllegalCharsetNameException.class,\n+                () -> Charset.forName(\"\"));\n+        assertThrows(IllegalCharsetNameException.class,\n+                () -> new Charset(\"\", new String[]{}) {\n+                    @Override\n+                    public boolean contains(Charset cs) {\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public CharsetDecoder newDecoder() {\n+                        return null;\n+                    }\n@@ -60,5 +76,14 @@\n-        \/\/ Standard charsets may bypass alias checking during startup, test that\n-        \/\/ they're all well-behaved as a sanity test\n-        checkAliases(StandardCharsets.ISO_8859_1);\n-        checkAliases(StandardCharsets.US_ASCII);\n-        checkAliases(StandardCharsets.UTF_8);\n+                    @Override\n+                    public CharsetEncoder newEncoder() {\n+                        return null;\n+                    }\n+                });\n+    }\n+\n+    \/\/ Standard charsets may bypass alias checking during startup, test that\n+    \/\/ they're all well-behaved as a sanity test\n+    @Test\n+    public void aliasTest() {\n+        for (Charset cs : Charset.availableCharsets().values()) {\n+            checkAliases(cs);\n+        }\n@@ -73,0 +98,15 @@\n+\n+    static Stream<String> illegalNames() {\n+        return Stream.of(\n+                \".\",\n+                \"_\",\n+                \":\",\n+                \"-\",\n+                \".name\",\n+                \"_name\",\n+                \":name\",\n+                \"-name\",\n+                \"name*name\",\n+                \"name?name\"\n+        );\n+    }\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/IllegalCharsetName.java","additions":73,"deletions":33,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023 Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @run junit NullCharsetName\n@@ -29,4 +30,1 @@\n-import java.io.*;\n-import java.nio.*;\n-import java.nio.charset.*;\n-import java.util.*;\n+import java.nio.charset.Charset;\n@@ -34,0 +32,3 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -37,13 +38,5 @@\n-    public static void main(String[] args) throws Exception {\n-        try {\n-            Charset.forName(null);\n-        } catch (Exception x) {\n-            if (x instanceof IllegalArgumentException) {\n-                System.err.println(\"Thrown as expected: \" + x);\n-                return;\n-            }\n-            throw new Exception(\"Incorrect exception: \"\n-                                + x.getClass().getName(),\n-                                x);\n-        }\n-        throw new Exception(\"No exception thrown\");\n+    \/\/ Charset.forName should throw an exception when passed null\n+    @Test\n+    public void nullCharsetTest() {\n+        assertThrows(IllegalArgumentException.class,\n+                () -> Charset.forName(null));\n@@ -51,1 +44,0 @@\n-\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/NullCharsetName.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @run main RegisteredCharsets\n- * @run main\/othervm -Djdk.charset.GB18030=2000 RegisteredCharsets\n+ * @run junit RegisteredCharsets\n+ * @run junit\/othervm -Djdk.charset.GB18030=2000 RegisteredCharsets\n@@ -33,1 +33,3 @@\n-import java.nio.charset.*;\n+import java.nio.charset.Charset;\n+import java.nio.charset.UnsupportedCharsetException;\n+import java.util.stream.Stream;\n@@ -35,1 +37,4 @@\n-public class RegisteredCharsets {\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -37,134 +42,2 @@\n-    static String [] ianaRegistered = {\n-                            \"US-ASCII\", \"UTF8\", \"Big5\", \"EUC-JP\",\n-                            \"GBK\", \"GB18030\", \"ISO-2022-KR\", \"ISO-2022-JP\",\n-                            \"GB2312\",  \/\/ IANA preferred name for \"EUC-CN\"\n-                            \"ISO-8859-1\", \"ISO-8859-2\", \"ISO-8859-3\",\n-                            \"ISO-8859-4\", \"ISO-8859-5\", \"ISO-8859-6\",\n-                            \"ISO-8859-7\", \"ISO-8859-8\", \"ISO-8859-9\",\n-                            \"ISO-8859-13\", \"ISO-8859-15\", \"ISO-8859-16\",\n-                            \"windows-1251\",\n-                            \"windows-1252\", \"windows-1253\", \"windows-1254\",\n-                            \"windows-1255\", \"windows-1256\", \"windows-31j\",\n-                            \"Shift_JIS\", \"JIS_X0201\", \"JIS_X0212-1990\",\n-                            \"TIS-620\", \"Big5-HKSCS\",\n-                            \"ISO-2022-CN\",\n-                            \"IBM850\",\n-                            \"IBM852\",\n-                            \"IBM855\",\n-                            \"IBM857\",\n-                            \"IBM860\",\n-                            \"IBM861\",\n-                            \"IBM862\",\n-                            \"IBM863\",\n-                            \"IBM864\",\n-                            \"IBM865\",\n-                            \"IBM866\",\n-                            \"IBM868\",\n-                            \"IBM869\",\n-                            \"IBM437\",\n-                            \"IBM775\",\n-                            \"IBM037\",\n-                            \"IBM1026\",\n-                            \"IBM273\",\n-                            \"IBM277\",\n-                            \"IBM278\",\n-                            \"IBM280\",\n-                            \"IBM284\",\n-                            \"IBM285\",\n-                            \"IBM297\",\n-                            \"IBM420\",\n-                            \"IBM424\",\n-                            \"IBM500\",\n-                            \"IBM-Thai\",\n-                            \"IBM870\",\n-                            \"IBM871\",\n-                            \"IBM918\",\n-                            \"IBM1047\",\n-                            \"IBM01140\",\n-                            \"IBM01141\",\n-                            \"IBM01142\",\n-                            \"IBM01143\",\n-                            \"IBM01144\",\n-                            \"IBM01145\",\n-                            \"IBM01146\",\n-                            \"IBM01147\",\n-                            \"IBM01148\",\n-                            \"IBM01149\",\n-                            \"IBM00858\" };\n-\n-    static String [] ianaUnRegistered = {\n-                            \"x-EUC-TW\", \"x-ISCII91\",\n-                            \"x-windows-949\", \"x-windows-950\",\n-                            \"x-mswin-936\", \"x-JIS0208\",\n-                            \"x-ISO-8859-11\",\n-                            \"x-windows-874\",\n-                            \"x-PCK\", \"x-JISAutoDetect\", \"x-Johab\",\n-                            \"x-MS950-HKSCS\",\n-                            \"x-Big5-Solaris\",\n-                            \"x-ISO-2022-CN-CNS\",\n-                            \"x-ISO-2022-CN-GB\",\n-                            \"x-MacArabic\",\n-                            \"x-MacCentralEurope\",\n-                            \"x-MacCroatian\",\n-                            \"x-MacCyrillic\",\n-                            \"x-MacDingbat\",\n-                            \"x-MacGreek\",\n-                            \"x-MacHebrew\",\n-                            \"x-MacIceland\",\n-                            \"x-MacRoman\",\n-                            \"x-MacRomania\",\n-                            \"x-MacSymbol\",\n-                            \"x-MacThai\",\n-                            \"x-MacTurkish\",\n-                            \"x-MacUkraine\",\n-                            \"x-IBM942\",\n-                            \"x-IBM942C\",\n-                            \"x-IBM943\",\n-                            \"x-IBM943C\",\n-                            \"x-IBM948\",\n-                            \"x-IBM950\",\n-                            \"x-IBM930\",\n-                            \"x-IBM935\",\n-                            \"x-IBM937\",\n-                            \"x-IBM856\",\n-                            \"x-IBM874\",\n-                            \"x-IBM737\",\n-                            \"x-IBM1006\",\n-                            \"x-IBM1046\",\n-                            \"x-IBM1098\",\n-                            \"x-IBM1025\",\n-                            \"x-IBM1112\",\n-                            \"x-IBM1122\",\n-                            \"x-IBM1123\",\n-                            \"x-IBM1124\",\n-                            \"x-IBM1129\",\n-                            \"x-IBM1166\",\n-                            \"x-IBM875\",\n-                            \"x-IBM921\",\n-                            \"x-IBM922\",\n-                            \"x-IBM1097\",\n-                            \"x-IBM949\",\n-                            \"x-IBM949C\",\n-                            \"x-IBM939\",\n-                            \"x-IBM933\",\n-                            \"x-IBM1381\",\n-                            \"x-IBM1383\",\n-                            \"x-IBM970\",\n-                            \"x-IBM964\",\n-                            \"x-IBM33722\",\n-                            \"x-IBM1006\",\n-                            \"x-IBM1046\",\n-                            \"x-IBM1097\",\n-                            \"x-IBM1098\",\n-                            \"x-IBM1112\",\n-                            \"x-IBM1122\",\n-                            \"x-IBM1123\",\n-                            \"x-IBM1124\",\n-                            \"x-IBM33722\",\n-                            \"x-IBM737\",\n-                            \"x-IBM856\",\n-                            \"x-IBM874\",\n-                            \"x-IBM875\",\n-                            \"x-IBM922\",\n-                            \"x-IBM933\",\n-                            \"x-IBM964\" };\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -172,5 +45,7 @@\n-    static void check(String csn, boolean testRegistered) throws Exception {\n-        if (!Charset.forName(csn).isRegistered() && testRegistered)\n-                throw new Exception(\"Not registered: \" + csn);\n-        else if (Charset.forName(csn).isRegistered() && !testRegistered)\n-                throw new Exception(\"Registered: \" + csn + \"should be unregistered\");\n+public class RegisteredCharsets {\n+\n+    \/\/ Charset.forName should throw an exception when passed \"default\"\n+    @Test\n+    public void defaultCharsetTest() {\n+        assertThrows(UnsupportedCharsetException.class,\n+                () -> Charset.forName(\"default\"));\n@@ -179,7 +54,11 @@\n-    static void aliasCheck(String canonicalName, String[] aliasNames) throws Exception\n-    {\n-        for (int k = 0; k < aliasNames.length; k++ ) {\n-            Charset cs = Charset.forName(aliasNames[k]);\n-            if (!cs.name().equals(canonicalName)) {\n-                throw new Exception(\"Unexpected Canonical name \" + canonicalName);\n-            }\n+    \/**\n+     * Tests that the aliases of the input String convert\n+     * to the same Charset. This is validated by ensuring the input String\n+     * and Charset.name() values are equal.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"aliases\")\n+    public void testAliases(String canonicalName, String[] aliasNames) {\n+        for (String aliasName : aliasNames) {\n+            Charset cs = Charset.forName(aliasName);\n+            assertEquals(cs.name(), canonicalName);\n@@ -189,1 +68,9 @@\n-    public static void main(String[] args) throws Exception {\n+    \/**\n+     * Tests charsets to ensure that they are registered in the\n+     * IANA Charset Registry.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ianaRegistered\")\n+    public void registeredTest(String cs) throws Exception {\n+        check(cs, true);\n+    }\n@@ -191,2 +78,9 @@\n-        for (int i = 0; i < ianaRegistered.length ; i++)\n-            check(ianaRegistered[i], true);\n+    \/**\n+     * Tests charsets to ensure that they are NOT registered in the\n+     * IANA Charset Registry.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ianaUnregistered\")\n+    public void unregisteredTest(String cs) throws Exception {\n+        check(cs, false);\n+    }\n@@ -194,2 +88,74 @@\n-        for (int i = 0; i < ianaUnRegistered.length ; i++)\n-            check(ianaUnRegistered[i], false);\n+    \/**\n+     * Helper method which checks if a charset is registered and whether\n+     * it should be.\n+     *\/\n+    static void check(String csn, boolean testRegistered) throws Exception {\n+        if (!Charset.forName(csn).isRegistered() && testRegistered) {\n+            throw new Exception(\"Not registered: \" + csn);\n+        }\n+        else if (Charset.forName(csn).isRegistered() && !testRegistered) {\n+            throw new Exception(\"Registered: \" + csn + \"should be unregistered\");\n+        }\n+    }\n+\n+    \/\/ See https:\/\/www.iana.org\/assignments\/character-sets\/character-sets.xhtml\n+    private static Stream<String> ianaRegistered() {\n+        return Stream.of(\n+                \"US-ASCII\", \"UTF8\", \"Big5\", \"EUC-JP\",\n+                \"GBK\", \"GB18030\", \"ISO-2022-KR\", \"ISO-2022-JP\",\n+                \"GB2312\",  \/\/ IANA preferred name for \"EUC-CN\"\n+                \"ISO-8859-1\", \"ISO-8859-2\", \"ISO-8859-3\",\n+                \"ISO-8859-4\", \"ISO-8859-5\", \"ISO-8859-6\",\n+                \"ISO-8859-7\", \"ISO-8859-8\", \"ISO-8859-9\",\n+                \"ISO-8859-13\", \"ISO-8859-15\", \"ISO-8859-16\",\n+                \"windows-1251\",\n+                \"windows-1252\", \"windows-1253\", \"windows-1254\",\n+                \"windows-1255\", \"windows-1256\", \"windows-31j\",\n+                \"Shift_JIS\", \"JIS_X0201\", \"JIS_X0212-1990\",\n+                \"TIS-620\", \"Big5-HKSCS\",\n+                \"ISO-2022-CN\",\n+                \"IBM850\",\n+                \"IBM852\",\n+                \"IBM855\",\n+                \"IBM857\",\n+                \"IBM860\",\n+                \"IBM861\",\n+                \"IBM862\",\n+                \"IBM863\",\n+                \"IBM864\",\n+                \"IBM865\",\n+                \"IBM866\",\n+                \"IBM868\",\n+                \"IBM869\",\n+                \"IBM437\",\n+                \"IBM775\",\n+                \"IBM037\",\n+                \"IBM1026\",\n+                \"IBM273\",\n+                \"IBM277\",\n+                \"IBM278\",\n+                \"IBM280\",\n+                \"IBM284\",\n+                \"IBM285\",\n+                \"IBM297\",\n+                \"IBM420\",\n+                \"IBM424\",\n+                \"IBM500\",\n+                \"IBM-Thai\",\n+                \"IBM870\",\n+                \"IBM871\",\n+                \"IBM918\",\n+                \"IBM1047\",\n+                \"IBM01140\",\n+                \"IBM01141\",\n+                \"IBM01142\",\n+                \"IBM01143\",\n+                \"IBM01144\",\n+                \"IBM01145\",\n+                \"IBM01146\",\n+                \"IBM01147\",\n+                \"IBM01148\",\n+                \"IBM01149\",\n+                \"IBM00858\"\n+        );\n+    }\n@@ -197,0 +163,81 @@\n+    private static Stream<String> ianaUnregistered() {\n+        return Stream.of(\n+                \"x-EUC-TW\", \"x-ISCII91\",\n+                \"x-windows-949\", \"x-windows-950\",\n+                \"x-mswin-936\", \"x-JIS0208\",\n+                \"x-ISO-8859-11\",\n+                \"x-windows-874\",\n+                \"x-PCK\", \"x-JISAutoDetect\", \"x-Johab\",\n+                \"x-MS950-HKSCS\",\n+                \"x-Big5-Solaris\",\n+                \"x-ISO-2022-CN-CNS\",\n+                \"x-ISO-2022-CN-GB\",\n+                \"x-MacArabic\",\n+                \"x-MacCentralEurope\",\n+                \"x-MacCroatian\",\n+                \"x-MacCyrillic\",\n+                \"x-MacDingbat\",\n+                \"x-MacGreek\",\n+                \"x-MacHebrew\",\n+                \"x-MacIceland\",\n+                \"x-MacRoman\",\n+                \"x-MacRomania\",\n+                \"x-MacSymbol\",\n+                \"x-MacThai\",\n+                \"x-MacTurkish\",\n+                \"x-MacUkraine\",\n+                \"x-IBM942\",\n+                \"x-IBM942C\",\n+                \"x-IBM943\",\n+                \"x-IBM943C\",\n+                \"x-IBM948\",\n+                \"x-IBM950\",\n+                \"x-IBM930\",\n+                \"x-IBM935\",\n+                \"x-IBM937\",\n+                \"x-IBM856\",\n+                \"x-IBM874\",\n+                \"x-IBM737\",\n+                \"x-IBM1006\",\n+                \"x-IBM1046\",\n+                \"x-IBM1098\",\n+                \"x-IBM1025\",\n+                \"x-IBM1112\",\n+                \"x-IBM1122\",\n+                \"x-IBM1123\",\n+                \"x-IBM1124\",\n+                \"x-IBM1129\",\n+                \"x-IBM1166\",\n+                \"x-IBM875\",\n+                \"x-IBM921\",\n+                \"x-IBM922\",\n+                \"x-IBM1097\",\n+                \"x-IBM949\",\n+                \"x-IBM949C\",\n+                \"x-IBM939\",\n+                \"x-IBM933\",\n+                \"x-IBM1381\",\n+                \"x-IBM1383\",\n+                \"x-IBM970\",\n+                \"x-IBM964\",\n+                \"x-IBM33722\",\n+                \"x-IBM1006\",\n+                \"x-IBM1046\",\n+                \"x-IBM1097\",\n+                \"x-IBM1098\",\n+                \"x-IBM1112\",\n+                \"x-IBM1122\",\n+                \"x-IBM1123\",\n+                \"x-IBM1124\",\n+                \"x-IBM33722\",\n+                \"x-IBM737\",\n+                \"x-IBM856\",\n+                \"x-IBM874\",\n+                \"x-IBM875\",\n+                \"x-IBM922\",\n+                \"x-IBM933\",\n+                \"x-IBM964\"\n+        );\n+    }\n+\n+    private static Stream<Arguments> aliases() {\n@@ -203,1109 +250,1102 @@\n-\n-        aliasCheck(\"US-ASCII\",\n-                new String[] {\"ascii\",\"ANSI_X3.4-1968\",\n-                \"iso-ir-6\",\"ANSI_X3.4-1986\", \"ISO_646.irv:1991\",\n-                \"ASCII\", \"ISO646-US\",\"us\",\"IBM367\",\"cp367\",\n-                \"csASCII\"});\n-\n-        aliasCheck(\"UTF-8\",\n-                new String[] {\n-                    \"UTF8\",\n-                    \"unicode-1-1-utf-8\"\n-                });\n-\n-        aliasCheck(\"UTF-16\",\n-                new String[] {\n-                    \"UTF_16\",\n-                    \"utf16\"\n-                });\n-\n-        aliasCheck(\"UTF-16BE\",\n-                new String[] {\n-                    \"UTF_16BE\",\n-                    \"ISO-10646-UCS-2\",\n-                    \"X-UTF-16BE\",\n-                    \"UnicodeBigUnmarked\"\n-                });\n-\n-        aliasCheck(\"UTF-16LE\",\n-                new String[] {\n-                    \"UTF_16LE\",\n-                    \"X-UTF-16LE\",\n-                    \"UnicodeLittleUnmarked\"\n-                });\n-\n-        aliasCheck(\"Big5\",\n-                new String[] {\n-                    \"csBig5\"\n-                });\n-\n-        aliasCheck(\"Big5-HKSCS\",\n-                new String[] {\n-                    \"Big5_HKSCS\",\n-                    \"big5hk\",\n-                    \"big5-hkscs\",\n-                    \"big5hkscs\"\n-                });\n-\n-        aliasCheck(\"x-MS950-HKSCS\",\n-                new String[] {\n-                    \"MS950_HKSCS\"\n-                });\n-\n-        aliasCheck(\"GB18030\",\n-                \"2000\".equals(System.getProperty(\"jdk.charset.GB18030\")) ?\n-                new String[] {\n-                    \"gb18030-2000\"\n-                } :\n-                new String[] {\n-                    \"gb18030-2022\"\n-                });\n-\n-        aliasCheck(\"ISO-2022-KR\", new String[] {\"csISO2022KR\"});\n-        aliasCheck(\"ISO-2022-JP\", new String[] {\"csISO2022JP\"});\n-        aliasCheck(\"EUC-KR\", new String[] { \"csEUCKR\"});\n-        aliasCheck(\"ISO-8859-1\",\n-                new String[] {\n-\n-                    \/\/ IANA aliases\n-                    \"iso-ir-100\",\n-                    \"ISO_8859-1\",\n-                    \"latin1\",\n-                    \"l1\",\n-                    \"IBM819\",\n-                    \"cp819\",\n-                    \"csISOLatin1\",\n-\n-                    \/\/ JDK historical aliases\n-                    \"819\",\n-                    \"IBM-819\",\n-                    \"ISO8859_1\",\n-                    \"ISO_8859-1:1987\",\n-                    \"ISO_8859_1\",\n-                    \"8859_1\",\n-                    \"ISO8859-1\",\n-\n-                });\n-\n-        aliasCheck(\"ISO-8859-2\",\n-            new String[] {\n-                \"ISO_8859-2\",\n-                \"ISO_8859-2:1987\",\n-                \"iso-ir-101\",\n-                \"latin2\",\n-                \"l2\",\n-                \"8859_2\",\n-                \"iso_8859-2:1987\",\n-                \"iso8859-2\",\n-                \"ibm912\",\n-                \"ibm-912\",\n-                \"cp912\",\n-                \"912\",\n-                \"csISOLatin2\"});\n-\n-        aliasCheck(\"ISO-8859-3\",\n-                new String[] {\"latin3\",\n-                \"ISO_8859-3:1988\",\n-                \"iso-ir-109\",\n-                \"l3\",\n-                \"8859_3\",\n-                \"iso_8859-3:1988\",\n-                \"iso8859-3\",\n-                \"ibm913\",\n-                \"ibm-913\",\n-                \"cp913\",\n-                \"913\",\n-                \"csISOLatin3\"});\n-\n-        aliasCheck(\"ISO-8859-4\",\n-                new String[] {\"csISOLatin4\",\n-                    \"ISO_8859-4:1988\",\n-                    \"iso-ir-110\",\n-                    \"latin4\",\n-                    \"8859_4\",\n-                    \"iso_8859-4:1988\",\n-                    \"iso8859-4\",\n-                    \"ibm914\",\n-                    \"ibm-914\",\n-                    \"cp914\",\n-                    \"914\",\n-                    \"l4\"});\n-\n-        aliasCheck(\"ISO-8859-5\",\n-                new String[] {\n-                    \"iso8859_5\", \/\/ JDK historical\n-                    \"8859_5\",\n-                    \"iso-ir-144\",\n-                    \"ISO_8859-5\",\n-                    \"ISO_8859-5:1988\",\n-                    \"ISO8859-5\",\n-                    \"cyrillic\",\n-                    \"ibm915\",\n-                    \"ibm-915\",\n-                    \"915\",\n-                    \"cp915\",\n-                    \"csISOLatinCyrillic\"\n-                });\n-\n-        aliasCheck(\"ISO-8859-6\",\n-                new String[] {\"ISO_8859-6:1987\",\n-                \"iso-ir-127\",\n-                \"ISO_8859-6\",\n-                \"ECMA-114\",\n-                \"ASMO-708\",\n-                \"arabic\",\n-                \"8859_6\",\n-                \"iso_8859-6:1987\",\n-                \"iso8859-6\",\n-                \"ibm1089\",\n-                \"ibm-1089\",\n-                \"cp1089\",\n-                \"1089\",\n-                \"csISOLatinArabic\"});\n-\n-        aliasCheck(\"ISO-8859-7\",\n-                new String[] {\"ISO_8859-7:1987\",\n-                \"iso-ir-126\",\n-                \"ISO_8859-7\",\n-                \"ELOT_928\",\n-                \"ECMA-118\",\n-                \"greek\",\n-                \"greek8\",\n-                \"8859_7\",\n-                \"iso_8859-7:1987\",\n-                \"iso8859-7\",\n-                \"ibm813\",\n-                \"ibm-813\",\n-                \"cp813\",\n-                \"813\",\n-                \"csISOLatinGreek\"});\n-\n-        aliasCheck(\"ISO-8859-8\",\n-                new String[] {\n-                \"ISO_8859-8:1988\",\n-                \"iso-ir-138\",\n-                \"ISO_8859-8\",\n-                \"hebrew\",\n-                \"8859_8\",\n-                \"iso_8859-8:1988\",\n-                \"iso8859-8\",\n-                \"ibm916\",\n-                \"ibm-916\",\n-                \"cp916\",\n-                \"916\",\n-                \"csISOLatinHebrew\"});\n-\n-        aliasCheck(\"ISO-8859-9\",\n-                new String[] {\"ISO_8859-9:1989\",\n-                \"iso-ir-148\",\n-                \"ISO_8859-9\",\n-                \"latin5\",\n-                \"l5\",\n-                \"8859_9\",\n-                \"iso8859-9\",\n-                \"ibm920\",\n-                \"ibm-920\",\n-                \"cp920\",\n-                \"920\",\n-                \"csISOLatin5\"});\n-\n-        aliasCheck(\"ISO-8859-13\",\n-                new String[] {\n-                    \"iso8859_13\", \/\/ JDK historical\n-                    \"iso_8859-13\",\n-                    \"8859_13\",\n-                    \"ISO8859-13\"\n-                });\n-\n-        aliasCheck(\"ISO-8859-15\",\n-                new String[] {\n-                    \/\/ IANA alias\n-                    \"ISO_8859-15\",\n-                    \"Latin-9\",\n-                    \"csISO885915\",\n-                    \/\/ JDK historical aliases\n-                    \"8859_15\",\n-                    \"ISO-8859-15\",\n-                    \"ISO_8859-15\",\n-                    \"ISO8859-15\",\n-                    \"ISO8859_15\",\n-                    \"IBM923\",\n-                    \"IBM-923\",\n-                    \"cp923\",\n-                    \"923\",\n-                    \"LATIN0\",\n-                    \"LATIN9\",\n-                    \"L9\",\n-                    \"csISOlatin0\",\n-                    \"csISOlatin9\",\n-                    \"ISO8859_15_FDIS\"\n-                });\n-\n-        aliasCheck(\"ISO-8859-16\",\n-                new String[] {\n-                    \"iso-ir-226\",\n-                    \"ISO_8859-16:2001\",\n-                    \"ISO_8859-16\",\n-                    \"ISO8859_16\",\n-                    \"latin10\",\n-                    \"l10\",\n-                    \"csISO885916\"\n-                   });\n-\n-        aliasCheck(\"JIS_X0212-1990\",\n-                new String[] {\n-                \"iso-ir-159\",\n-                \"csISO159JISX02121990\"});\n-\n-        aliasCheck(\"JIS_X0201\",\n-                new String[]{\n-                \"X0201\",\n-                \"csHalfWidthKatakana\"});\n-\n-        aliasCheck(\"KOI8-R\",\n-                new String[] {\n-                \"KOI8_R\",\n-                \"csKOI8R\"});\n-\n-        aliasCheck(\"GBK\",\n-                new String[] {\n-                \"windows-936\"});\n-\n-        aliasCheck(\"Shift_JIS\",\n-                new String[] {\n-                \"MS_Kanji\",\n-                \"csShiftJIS\"});\n-\n-        aliasCheck(\"EUC-JP\",\n-                new String[] {\n-                \"Extended_UNIX_Code_Packed_Format_for_Japanese\",\n-                \"csEUCPkdFmtJapanese\"});\n-\n-        aliasCheck(\"Big5\", new String[] {\"csBig5\"});\n-\n-        aliasCheck(\"windows-31j\", new String[] {\"csWindows31J\"});\n-\n-        aliasCheck(\"x-iso-8859-11\",\n-                    new String[] { \"iso-8859-11\", \"iso8859_11\" });\n-\n-        aliasCheck(\"windows-1250\",\n-                new String[] {\n-                    \"cp1250\",\n-                    \"cp5346\"\n-                });\n-\n-        aliasCheck(\"windows-1251\",\n-                new String[] {\n-                    \"cp1251\",\n-                    \"cp5347\",\n-                    \"ansi-1251\"\n-                });\n-\n-        aliasCheck(\"windows-1252\",\n-                new String[] {\n-                    \"cp1252\",\n-                    \"cp5348\"\n-                });\n-\n-        aliasCheck(\"windows-1253\",\n-                new String[] {\n-                    \"cp1253\",\n-                    \"cp5349\"\n-                });\n-\n-        aliasCheck(\"windows-1254\",\n-                new String[] {\n-                    \"cp1254\",\n-                    \"cp5350\"\n-                });\n-\n-        aliasCheck(\"windows-1255\",\n-                new String[] {\n-                    \"cp1255\"\n-                });\n-\n-        aliasCheck(\"windows-1256\",\n-                new String[] {\n-                    \"cp1256\"\n-                });\n-\n-        aliasCheck(\"windows-1257\",\n-                new String[] {\n-                    \"cp1257\",\n-                    \"cp5353\"\n-                });\n-\n-        aliasCheck(\"windows-1258\",\n-                new String[] {\n-                    \"cp1258\"\n-                });\n-\n-        aliasCheck(\"x-windows-874\",\n-                new String[] {\n-                    \"ms874\", \"ms-874\", \"windows-874\" });\n-\n-        aliasCheck(\"GB2312\",\n-                new String[] {\n-                    \"x-EUC-CN\",\n-                    \"gb2312-80\",\n-                    \"gb2312-1980\",\n-                    \"euc-cn\",\n-                    \"euccn\" });\n-\n-        aliasCheck(\"x-IBM942\" ,\n-                new String[] {\n-                    \"cp942\", \/\/ JDK historical\n-                    \"ibm942\",\n-                    \"ibm-942\",\n-                    \"942\"\n-                });\n-\n-        aliasCheck(\"x-IBM942C\" ,\n-                new String[] {\n-                    \"cp942C\", \/\/ JDK historical\n-                    \"ibm942C\",\n-                    \"ibm-942C\",\n-                    \"942C\"\n-                } );\n-\n-        aliasCheck(\"x-IBM943\" ,\n-                new String[] {\n-                    \"cp943\", \/\/ JDK historical\n-                    \"ibm943\",\n-                    \"ibm-943\",\n-                    \"943\"\n-                } );\n-\n-        aliasCheck(\"x-IBM943C\" ,\n-                new String[] {\n-                    \"cp943c\", \/\/ JDK historical\n-                    \"ibm943C\",\n-                    \"ibm-943C\",\n-                    \"943C\"\n-                } );\n-\n-        aliasCheck(\"x-IBM948\" ,\n-                new String[] {\n-                    \"cp948\", \/\/ JDK historical\n-                    \"ibm948\",\n-                    \"ibm-948\",\n-                    \"948\"\n-                } );\n-\n-        aliasCheck(\"x-IBM950\" ,\n-                new String[] {\n-                    \"cp950\", \/\/ JDK historical\n-                    \"ibm950\",\n-                    \"ibm-950\",\n-                    \"950\"\n-                } );\n-\n-        aliasCheck(\"x-IBM930\" ,\n-                new String[] {\n-                    \"cp930\", \/\/ JDK historical\n-                    \"ibm930\",\n-                    \"ibm-930\",\n-                    \"930\"\n-                } );\n-\n-        aliasCheck(\"x-IBM935\" ,\n-                new String[] {\n-                    \"cp935\", \/\/ JDK historical\n-                    \"ibm935\",\n-                    \"ibm-935\",\n-                    \"935\"\n-                } );\n-\n-        aliasCheck(\"x-IBM937\" ,\n-                new String[] {\n-                    \"cp937\", \/\/ JDK historical\n-                    \"ibm937\",\n-                    \"ibm-937\",\n-                    \"937\"\n-                } );\n-\n-        aliasCheck(\"IBM850\" ,\n-                new String[] {\n-                    \"cp850\", \/\/ JDK historical\n-                    \"ibm-850\",\n-                    \"ibm850\",\n-                    \"850\",\n-                    \"cspc850multilingual\"\n-                } );\n-\n-        aliasCheck(\"IBM852\" ,\n-                new String[] {\n-                    \"cp852\", \/\/ JDK historical\n-                    \"ibm852\",\n-                    \"ibm-852\",\n-                    \"852\",\n-                    \"csPCp852\"\n-                } );\n-\n-        aliasCheck(\"IBM855\" ,\n-                new String[] {\n-                    \"cp855\", \/\/ JDK historical\n-                    \"ibm-855\",\n-                    \"ibm855\",\n-                    \"855\",\n-                    \"cspcp855\"\n-                } );\n-\n-        aliasCheck(\"x-IBM856\" ,\n-                new String[] {\n-                    \"cp856\", \/\/ JDK historical\n-                    \"ibm-856\",\n-                    \"ibm856\",\n-                    \"856\"\n-                } );\n-\n-        aliasCheck(\"IBM857\" ,\n-                new String[] {\n-                    \"cp857\", \/\/ JDK historical\n-                    \"ibm857\",\n-                    \"ibm-857\",\n-                    \"857\",\n-                    \"csIBM857\"\n-                } );\n-\n-        aliasCheck(\"IBM860\" ,\n-                new String[] {\n-                    \"cp860\", \/\/ JDK historical\n-                    \"ibm860\",\n-                    \"ibm-860\",\n-                    \"860\",\n-                    \"csIBM860\"\n-                } );\n-        aliasCheck(\"IBM861\" ,\n-                new String[] {\n-                    \"cp861\", \/\/ JDK historical\n-                    \"ibm861\",\n-                    \"ibm-861\",\n-                    \"861\",\n-                    \"csIBM861\"\n-                } );\n-\n-        aliasCheck(\"IBM862\" ,\n-                new String[] {\n-                    \"cp862\", \/\/ JDK historical\n-                    \"ibm862\",\n-                    \"ibm-862\",\n-                    \"862\",\n-                    \"csIBM862\"\n-                } );\n-\n-        aliasCheck(\"IBM863\" ,\n-                new String[] {\n-                    \"cp863\", \/\/ JDK historical\n-                    \"ibm863\",\n-                    \"ibm-863\",\n-                    \"863\",\n-                    \"csIBM863\"\n-                } );\n-\n-        aliasCheck(\"IBM864\" ,\n-                new String[] {\n-                    \"cp864\", \/\/ JDK historical\n-                    \"ibm864\",\n-                    \"ibm-864\",\n-                    \"864\",\n-                    \"csIBM864\"\n-                } );\n-\n-        aliasCheck(\"IBM865\" ,\n-                new String[] {\n-                    \"cp865\", \/\/ JDK historical\n-                    \"ibm865\",\n-                    \"ibm-865\",\n-                    \"865\",\n-                    \"csIBM865\"\n-                } );\n-\n-        aliasCheck(\"IBM866\" , new String[] {\n-                    \"cp866\", \/\/ JDK historical\n-                    \"ibm866\",\n-                    \"ibm-866\",\n-                    \"866\",\n-                    \"csIBM866\"\n-                } );\n-        aliasCheck(\"IBM868\" ,\n-                new String[] {\n-                    \"cp868\", \/\/ JDK historical\n-                    \"ibm868\",\n-                    \"ibm-868\",\n-                    \"868\",\n-                    \"cp-ar\",\n-                    \"csIBM868\"\n-                } );\n-\n-        aliasCheck(\"IBM869\" ,\n-                new String[] {\n-                    \"cp869\", \/\/ JDK historical\n-                    \"ibm869\",\n-                    \"ibm-869\",\n-                    \"869\",\n-                    \"cp-gr\",\n-                    \"csIBM869\"\n-                } );\n-\n-        aliasCheck(\"IBM437\" ,\n-                new String[] {\n-                    \"cp437\", \/\/ JDK historical\n-                    \"ibm437\",\n-                    \"ibm-437\",\n-                    \"437\",\n-                    \"cspc8codepage437\",\n-                    \"windows-437\"\n-                } );\n-\n-        aliasCheck(\"x-IBM874\" ,\n-                new String[] {\n-                    \"cp874\", \/\/ JDK historical\n-                    \"ibm874\",\n-                    \"ibm-874\",\n-                    \"874\"\n-                } );\n-        aliasCheck(\"x-IBM737\" ,\n-                new String[] {\n-                    \"cp737\", \/\/ JDK historical\n-                    \"ibm737\",\n-                    \"ibm-737\",\n-                    \"737\"\n-                } );\n-\n-        aliasCheck(\"IBM775\" ,\n-                new String[] {\n-                    \"cp775\", \/\/ JDK historical\n-                    \"ibm775\",\n-                    \"ibm-775\",\n-                    \"775\"\n-                } );\n-\n-        aliasCheck(\"x-IBM921\" ,\n-                new String[] {\n-                    \"cp921\", \/\/ JDK historical\n-                    \"ibm921\",\n-                    \"ibm-921\",\n-                    \"921\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1006\" ,\n-                new String[] {\n-                    \"cp1006\", \/\/ JDK historical\n-                    \"ibm1006\",\n-                    \"ibm-1006\",\n-                    \"1006\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1046\" ,\n-                new String[] {\n-                    \"cp1046\", \/\/ JDK historical\n-                    \"ibm1046\",\n-                    \"ibm-1046\",\n-                    \"1046\"\n-                } );\n-\n-        aliasCheck(\"IBM1047\" ,\n-                new String[] {\n-                    \"cp1047\", \/\/ JDK historical\n-                    \"ibm-1047\",\n-                    \"1047\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1098\" ,\n-                new String[] {\n-                    \"cp1098\", \/\/ JDK historical\n-                    \"ibm1098\",\n-                    \"ibm-1098\",\n-                    \"1098\",\n-                } );\n-\n-        aliasCheck(\"IBM037\" ,\n-                new String[] {\n-                    \"cp037\", \/\/ JDK historical\n-                    \"ibm037\",\n-                    \"csIBM037\",\n-                    \"cs-ebcdic-cp-us\",\n-                    \"cs-ebcdic-cp-ca\",\n-                    \"cs-ebcdic-cp-wt\",\n-                    \"cs-ebcdic-cp-nl\",\n-                    \"ibm-037\",\n-                    \"ibm-37\",\n-                    \"cpibm37\",\n-                    \"037\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1025\" ,\n-                new String[] {\n-                    \"cp1025\", \/\/ JDK historical\n-                    \"ibm1025\",\n-                    \"ibm-1025\",\n-                    \"1025\"\n-                } );\n-\n-        aliasCheck(\"IBM1026\" ,\n-                new String[] {\n-                    \"cp1026\", \/\/ JDK historical\n-                    \"ibm1026\",\n-                    \"ibm-1026\",\n-                    \"1026\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1112\" ,\n-                new String[] {\n-                    \"cp1112\", \/\/ JDK historical\n-                    \"ibm1112\",\n-                    \"ibm-1112\",\n-                    \"1112\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1122\" ,\n-                new String[] {\n-                    \"cp1122\", \/\/ JDK historical\n-                    \"ibm1122\",\n-                    \"ibm-1122\",\n-                    \"1122\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1123\" ,\n-                new String[] {\n-                    \"cp1123\", \/\/ JDK historical\n-                    \"ibm1123\",\n-                    \"ibm-1123\",\n-                    \"1123\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1124\" ,\n-                new String[] {\n-                    \"cp1124\", \/\/ JDK historical\n-                    \"ibm1124\",\n-                    \"ibm-1124\",\n-                    \"1124\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1129\" ,\n-                new String[] {\n-                    \"cp1129\", \/\/ JDK historical\n-                    \"ibm1129\",\n-                    \"ibm-1129\",\n-                    \"1129\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1166\" ,\n-                new String[] {\n-                    \"cp1166\", \/\/ JDK historical\n-                    \"ibm1166\",\n-                    \"ibm-1166\",\n-                    \"1166\"\n-                } );\n-\n-        aliasCheck(\"IBM273\" ,\n-                new String[] {\n-                    \"cp273\", \/\/ JDK historical\n-                    \"ibm273\",\n-                    \"ibm-273\",\n-                    \"273\"\n-                } );\n-\n-        aliasCheck(\"IBM277\" ,\n-                new String[] {\n-                    \"cp277\", \/\/ JDK historical\n-                    \"ibm277\",\n-                    \"ibm-277\",\n-                    \"277\"\n-                } );\n-\n-        aliasCheck(\"IBM278\" ,\n-                new String[] {\n-                    \"cp278\", \/\/ JDK historical\n-                    \"ibm278\",\n-                    \"ibm-278\",\n-                    \"278\",\n-                    \"ebcdic-sv\",\n-                    \"ebcdic-cp-se\",\n-                    \"csIBM278\"\n-                } );\n-\n-        aliasCheck(\"IBM280\" ,\n-                new String[] {\n-                    \"cp280\", \/\/ JDK historical\n-                    \"ibm280\",\n-                    \"ibm-280\",\n-                    \"280\"\n-                } );\n-\n-        aliasCheck(\"IBM284\" ,\n-                new String[] {\n-                    \"cp284\", \/\/ JDK historical\n-                    \"ibm284\",\n-                    \"ibm-284\",\n-                    \"284\",\n-                    \"csIBM284\",\n-                    \"cpibm284\"\n-                } );\n-\n-        aliasCheck(\"IBM285\" ,\n-                new String[] {\n-                    \"cp285\", \/\/ JDK historical\n-                    \"ibm285\",\n-                    \"ibm-285\",\n-                    \"285\",\n-                    \"ebcdic-cp-gb\",\n-                    \"ebcdic-gb\",\n-                    \"csIBM285\",\n-                    \"cpibm285\"\n-                } );\n-\n-        aliasCheck(\"IBM297\" ,\n-                new String[] {\n-                    \"cp297\", \/\/ JDK historical\n-                    \"ibm297\",\n-                    \"ibm-297\",\n-                    \"297\",\n-                    \"ebcdic-cp-fr\",\n-                    \"cpibm297\",\n-                    \"csIBM297\",\n-                } );\n-\n-        aliasCheck(\"IBM420\" ,\n-                new String[] {\n-                    \"cp420\", \/\/ JDK historical\n-                    \"ibm420\",\n-                    \"ibm-420\",\n-                    \"ebcdic-cp-ar1\",\n-                    \"420\",\n-                    \"csIBM420\"\n-                } );\n-\n-        aliasCheck(\"IBM424\" ,\n-                new String[] {\n-                    \"cp424\", \/\/ JDK historical\n-                    \"ibm424\",\n-                    \"ibm-424\",\n-                    \"424\",\n-                    \"ebcdic-cp-he\",\n-                    \"csIBM424\"\n-                } );\n-\n-        aliasCheck(\"IBM500\" ,\n-                new String[] {\n-                    \"cp500\", \/\/ JDK historical\n-                    \"ibm500\",\n-                    \"ibm-500\",\n-                    \"500\",\n-                    \"ebcdic-cp-ch\",\n-                    \"ebcdic-cp-bh\",\n-                    \"csIBM500\"\n-                } );\n-\n-        aliasCheck(\"IBM-Thai\" ,\n-                new String[] {\n-                    \"cp838\", \/\/ JDK historical\n-                    \"ibm838\",\n-                    \"ibm-838\",\n-                    \"ibm838\",\n-                    \"838\"\n-                } );\n-\n-        aliasCheck(\"IBM870\" ,\n-                new String[] {\n-                    \"cp870\", \/\/ JDK historical\n-                    \"ibm870\",\n-                    \"ibm-870\",\n-                    \"870\",\n-                    \"ebcdic-cp-roece\",\n-                    \"ebcdic-cp-yu\",\n-                    \"csIBM870\"\n-                } );\n-\n-        aliasCheck(\"IBM871\" ,\n-                new String[] {\n-                    \"cp871\", \/\/ JDK historical\n-                    \"ibm871\",\n-                    \"ibm-871\",\n-                    \"871\",\n-                    \"ebcdic-cp-is\",\n-                    \"csIBM871\"\n-                } );\n-\n-        aliasCheck(\"x-IBM875\" ,\n-                new String[] {\n-                    \"cp875\", \/\/ JDK historical\n-                    \"ibm875\",\n-                    \"ibm-875\",\n-                    \"875\"\n-                } );\n-\n-        aliasCheck(\"IBM918\" ,\n-                new String[] {\n-                    \"cp918\", \/\/ JDK historical\n-                    \"ibm-918\",\n-                    \"918\",\n-                    \"ebcdic-cp-ar2\"\n-                } );\n-\n-        aliasCheck(\"x-IBM922\" ,\n-                new String[] {\n-                    \"cp922\", \/\/ JDK historical\n-                    \"ibm922\",\n-                    \"ibm-922\",\n-                    \"922\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1097\" ,\n-                new String[] {\n-                    \"cp1097\", \/\/ JDK historical\n-                    \"ibm1097\",\n-                    \"ibm-1097\",\n-                    \"1097\"\n-                } );\n-\n-        aliasCheck(\"x-IBM949\" ,\n-                new String[] {\n-                    \"cp949\", \/\/ JDK historical\n-                    \"ibm949\",\n-                    \"ibm-949\",\n-                    \"949\"\n-                } );\n-\n-        aliasCheck(\"x-IBM949C\" ,\n-                new String[] {\n-                    \"cp949C\", \/\/ JDK historical\n-                    \"ibm949C\",\n-                    \"ibm-949C\",\n-                    \"949C\"\n-                } );\n-\n-        aliasCheck(\"x-IBM939\" ,\n-                new String[] {\n-                    \"cp939\", \/\/ JDK historical\n-                    \"ibm939\",\n-                    \"ibm-939\",\n-                    \"939\"\n-                } );\n-\n-        aliasCheck(\"x-IBM933\" ,\n-                new String[] {\n-                    \"cp933\", \/\/ JDK historical\n-                    \"ibm933\",\n-                    \"ibm-933\",\n-                    \"933\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1381\" ,\n-                new String[] {\n-                    \"cp1381\", \/\/ JDK historical\n-                    \"ibm1381\",\n-                    \"ibm-1381\",\n-                    \"1381\"\n-                } );\n-\n-        aliasCheck(\"x-IBM1383\" ,\n-                new String[] {\n-                    \"cp1383\", \/\/ JDK historical\n-                    \"ibm1383\",\n-                    \"ibm-1383\",\n-                    \"1383\"\n-                } );\n-\n-        aliasCheck(\"x-IBM970\" ,\n-                new String[] {\n-                    \"cp970\", \/\/ JDK historical\n-                    \"ibm970\",\n-                    \"ibm-970\",\n-                    \"ibm-eucKR\",\n-                    \"970\"\n-                } );\n-\n-        aliasCheck(\"x-IBM964\" ,\n-                new String[] {\n-                    \"cp964\", \/\/ JDK historical\n-                    \"ibm964\",\n-                    \"ibm-964\",\n-                    \"964\"\n-                } );\n-\n-        aliasCheck(\"x-IBM33722\" ,\n-                new String[] {\n-                    \"cp33722\", \/\/ JDK historical\n-                    \"ibm33722\",\n-                    \"ibm-33722\",\n-                    \"ibm-5050\", \/\/ from IBM alias list\n-                    \"ibm-33722_vascii_vpua\", \/\/ from IBM alias list\n-                    \"33722\"\n-                } );\n-\n-        aliasCheck(\"IBM01140\" ,\n-                new String[] {\n-                    \"cp1140\", \/\/ JDK historical\n-                    \"ccsid01140\",\n-                    \"cp01140\",\n-                    \/\/ \"ebcdic-us-037+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM01141\" ,\n-                new String[] {\n-                    \"cp1141\", \/\/ JDK historical\n-                    \"ccsid01141\",\n-                    \"cp01141\",\n-                    \/\/ \"ebcdic-de-273+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM01142\" ,\n-                new String[] {\n-                    \"cp1142\", \/\/ JDK historical\n-                    \"ccsid01142\",\n-                    \"cp01142\",\n-                    \/\/ \"ebcdic-no-277+euro\",\n-                    \/\/ \"ebcdic-dk-277+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM01143\" ,\n-                new String[] {\n-                    \"cp1143\", \/\/ JDK historical\n-                    \"ccsid01143\",\n-                    \"cp01143\",\n-                    \/\/ \"ebcdic-fi-278+euro\",\n-                    \/\/ \"ebcdic-se-278+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM01144\" ,\n-                new String[] {\n-                    \"cp1144\", \/\/ JDK historical\n-                    \"ccsid01144\",\n-                    \"cp01144\",\n-                    \/\/ \"ebcdic-it-280+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM01145\" ,\n-                new String[] {\n-                    \"cp1145\", \/\/ JDK historical\n-                    \"ccsid01145\",\n-                    \"cp01145\",\n-                    \/\/ \"ebcdic-es-284+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM01146\" ,\n-                new String[] {\n-                    \"cp1146\", \/\/ JDK historical\n-                    \"ccsid01146\",\n-                    \"cp01146\",\n-                    \/\/ \"ebcdic-gb-285+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM01147\" ,\n-                new String[] {\n-                    \"cp1147\", \/\/ JDK historical\n-                    \"ccsid01147\",\n-                    \"cp01147\",\n-                    \/\/ \"ebcdic-fr-277+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM01148\" ,\n-                new String[] {\n-                    \"cp1148\", \/\/ JDK historical\n-                    \"ccsid01148\",\n-                    \"cp01148\",\n-                    \/\/ \"ebcdic-international-500+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM01149\" ,\n-                new String[] {\n-                    \"cp1149\", \/\/ JDK historical\n-                    \"ccsid01149\",\n-                    \"cp01149\",\n-                    \/\/ \"ebcdic-s-871+euro\"\n-                } );\n-\n-        aliasCheck(\"IBM00858\" ,\n-                new String[] {\n-                    \"cp858\", \/\/ JDK historical\n-                    \"ccsid00858\",\n-                    \"cp00858\",\n-                    \/\/ \"PC-Multilingual-850+euro\"\n-                } );\n-\n-        aliasCheck(\"x-MacRoman\",\n-                new String[] {\n-                    \"MacRoman\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacCentralEurope\",\n-                new String[] {\n-                    \"MacCentralEurope\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacCroatian\",\n-                new String[] {\n-                    \"MacCroatian\" \/\/ JDK historical\n-                });\n-\n-\n-        aliasCheck(\"x-MacCroatian\",\n-                new String[] {\n-                    \"MacCroatian\" \/\/ JDK historical\n-                });\n-\n-\n-        aliasCheck(\"x-MacGreek\",\n-                new String[] {\n-                    \"MacGreek\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacCyrillic\",\n-                new String[] {\n-                    \"MacCyrillic\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacUkraine\",\n-                new String[] {\n-                    \"MacUkraine\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacTurkish\",\n-                new String[] {\n-                    \"MacTurkish\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacArabic\",\n-                new String[] {\n-                    \"MacArabic\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacHebrew\",\n-                new String[] {\n-                    \"MacHebrew\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacIceland\",\n-                new String[] {\n-                    \"MacIceland\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacRomania\",\n-                new String[] {\n-                    \"MacRomania\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacThai\",\n-                new String[] {\n-                    \"MacThai\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacSymbol\",\n-                new String[] {\n-                    \"MacSymbol\" \/\/ JDK historical\n-                });\n-\n-        aliasCheck(\"x-MacDingbat\",\n-                new String[] {\n-                    \"MacDingbat\" \/\/ JDK historical\n-                });\n-\n-        \/\/ Check UnsupportedCharsetException is thrown for the name \"default\"\n-        try {\n-            Charset.forName(\"default\");\n-            throw new RuntimeException(\"UnsupportedCharsetException was not thrown for Charset.forName(\\\"default\\\")\");\n-        } catch (UnsupportedCharsetException uce) {\n-            \/\/ success\n-        }\n+        return Stream.of(\n+            Arguments.of(\"US-ASCII\",\n+                    new String[] {\"ascii\",\"ANSI_X3.4-1968\",\n+                    \"iso-ir-6\",\"ANSI_X3.4-1986\", \"ISO_646.irv:1991\",\n+                    \"ASCII\", \"ISO646-US\",\"us\",\"IBM367\",\"cp367\",\n+                    \"csASCII\"}),\n+\n+            Arguments.of(\"UTF-8\",\n+                    new String[] {\n+                        \"UTF8\",\n+                        \"unicode-1-1-utf-8\"\n+                    }),\n+\n+            Arguments.of(\"UTF-16\",\n+                    new String[] {\n+                        \"UTF_16\",\n+                        \"utf16\"\n+                    }),\n+\n+            Arguments.of(\"UTF-16BE\",\n+                    new String[] {\n+                        \"UTF_16BE\",\n+                        \"ISO-10646-UCS-2\",\n+                        \"X-UTF-16BE\",\n+                        \"UnicodeBigUnmarked\"\n+                    }),\n+\n+            Arguments.of(\"UTF-16LE\",\n+                    new String[] {\n+                        \"UTF_16LE\",\n+                        \"X-UTF-16LE\",\n+                        \"UnicodeLittleUnmarked\"\n+                    }),\n+\n+            Arguments.of(\"Big5\",\n+                    new String[] {\n+                        \"csBig5\"\n+                    }),\n+\n+            Arguments.of(\"Big5-HKSCS\",\n+                    new String[] {\n+                        \"Big5_HKSCS\",\n+                        \"big5hk\",\n+                        \"big5-hkscs\",\n+                        \"big5hkscs\"\n+                    }),\n+\n+            Arguments.of(\"x-MS950-HKSCS\",\n+                    new String[] {\n+                        \"MS950_HKSCS\"\n+                    }),\n+\n+            Arguments.of(\"GB18030\",\n+                    \"2000\".equals(System.getProperty(\"jdk.charset.GB18030\")) ?\n+                    new String[] {\n+                        \"gb18030-2000\"\n+                    } :\n+                    new String[] {\n+                        \"gb18030-2022\"\n+                    }),\n+\n+            Arguments.of(\"ISO-2022-KR\", new String[] {\"csISO2022KR\"}),\n+            Arguments.of(\"ISO-2022-JP\", new String[] {\"csISO2022JP\"}),\n+            Arguments.of(\"EUC-KR\", new String[] { \"csEUCKR\"}),\n+            Arguments.of(\"ISO-8859-1\",\n+                    new String[] {\n+\n+                        \/\/ IANA aliases\n+                        \"iso-ir-100\",\n+                        \"ISO_8859-1\",\n+                        \"latin1\",\n+                        \"l1\",\n+                        \"IBM819\",\n+                        \"cp819\",\n+                        \"csISOLatin1\",\n+\n+                        \/\/ JDK historical aliases\n+                        \"819\",\n+                        \"IBM-819\",\n+                        \"ISO8859_1\",\n+                        \"ISO_8859-1:1987\",\n+                        \"ISO_8859_1\",\n+                        \"8859_1\",\n+                        \"ISO8859-1\",\n+\n+                    }),\n+\n+            Arguments.of(\"ISO-8859-2\",\n+                new String[] {\n+                    \"ISO_8859-2\",\n+                    \"ISO_8859-2:1987\",\n+                    \"iso-ir-101\",\n+                    \"latin2\",\n+                    \"l2\",\n+                    \"8859_2\",\n+                    \"iso_8859-2:1987\",\n+                    \"iso8859-2\",\n+                    \"ibm912\",\n+                    \"ibm-912\",\n+                    \"cp912\",\n+                    \"912\",\n+                    \"csISOLatin2\"}),\n+\n+            Arguments.of(\"ISO-8859-3\",\n+                    new String[] {\"latin3\",\n+                    \"ISO_8859-3:1988\",\n+                    \"iso-ir-109\",\n+                    \"l3\",\n+                    \"8859_3\",\n+                    \"iso_8859-3:1988\",\n+                    \"iso8859-3\",\n+                    \"ibm913\",\n+                    \"ibm-913\",\n+                    \"cp913\",\n+                    \"913\",\n+                    \"csISOLatin3\"}),\n+\n+            Arguments.of(\"ISO-8859-4\",\n+                    new String[] {\"csISOLatin4\",\n+                        \"ISO_8859-4:1988\",\n+                        \"iso-ir-110\",\n+                        \"latin4\",\n+                        \"8859_4\",\n+                        \"iso_8859-4:1988\",\n+                        \"iso8859-4\",\n+                        \"ibm914\",\n+                        \"ibm-914\",\n+                        \"cp914\",\n+                        \"914\",\n+                        \"l4\"}),\n+\n+            Arguments.of(\"ISO-8859-5\",\n+                    new String[] {\n+                        \"iso8859_5\", \/\/ JDK historical\n+                        \"8859_5\",\n+                        \"iso-ir-144\",\n+                        \"ISO_8859-5\",\n+                        \"ISO_8859-5:1988\",\n+                        \"ISO8859-5\",\n+                        \"cyrillic\",\n+                        \"ibm915\",\n+                        \"ibm-915\",\n+                        \"915\",\n+                        \"cp915\",\n+                        \"csISOLatinCyrillic\"\n+                    }),\n+\n+            Arguments.of(\"ISO-8859-6\",\n+                    new String[] {\"ISO_8859-6:1987\",\n+                    \"iso-ir-127\",\n+                    \"ISO_8859-6\",\n+                    \"ECMA-114\",\n+                    \"ASMO-708\",\n+                    \"arabic\",\n+                    \"8859_6\",\n+                    \"iso_8859-6:1987\",\n+                    \"iso8859-6\",\n+                    \"ibm1089\",\n+                    \"ibm-1089\",\n+                    \"cp1089\",\n+                    \"1089\",\n+                    \"csISOLatinArabic\"}),\n+\n+            Arguments.of(\"ISO-8859-7\",\n+                    new String[] {\"ISO_8859-7:1987\",\n+                    \"iso-ir-126\",\n+                    \"ISO_8859-7\",\n+                    \"ELOT_928\",\n+                    \"ECMA-118\",\n+                    \"greek\",\n+                    \"greek8\",\n+                    \"8859_7\",\n+                    \"iso_8859-7:1987\",\n+                    \"iso8859-7\",\n+                    \"ibm813\",\n+                    \"ibm-813\",\n+                    \"cp813\",\n+                    \"813\",\n+                    \"csISOLatinGreek\"}),\n+\n+            Arguments.of(\"ISO-8859-8\",\n+                    new String[] {\n+                    \"ISO_8859-8:1988\",\n+                    \"iso-ir-138\",\n+                    \"ISO_8859-8\",\n+                    \"hebrew\",\n+                    \"8859_8\",\n+                    \"iso_8859-8:1988\",\n+                    \"iso8859-8\",\n+                    \"ibm916\",\n+                    \"ibm-916\",\n+                    \"cp916\",\n+                    \"916\",\n+                    \"csISOLatinHebrew\"}),\n+\n+            Arguments.of(\"ISO-8859-9\",\n+                    new String[] {\"ISO_8859-9:1989\",\n+                    \"iso-ir-148\",\n+                    \"ISO_8859-9\",\n+                    \"latin5\",\n+                    \"l5\",\n+                    \"8859_9\",\n+                    \"iso8859-9\",\n+                    \"ibm920\",\n+                    \"ibm-920\",\n+                    \"cp920\",\n+                    \"920\",\n+                    \"csISOLatin5\"}),\n+\n+            Arguments.of(\"ISO-8859-13\",\n+                    new String[] {\n+                        \"iso8859_13\", \/\/ JDK historical\n+                        \"iso_8859-13\",\n+                        \"8859_13\",\n+                        \"ISO8859-13\"\n+                    }),\n+\n+            Arguments.of(\"ISO-8859-15\",\n+                    new String[] {\n+                        \/\/ IANA alias\n+                        \"ISO_8859-15\",\n+                        \"Latin-9\",\n+                        \"csISO885915\",\n+                        \/\/ JDK historical aliases\n+                        \"8859_15\",\n+                        \"ISO-8859-15\",\n+                        \"ISO_8859-15\",\n+                        \"ISO8859-15\",\n+                        \"ISO8859_15\",\n+                        \"IBM923\",\n+                        \"IBM-923\",\n+                        \"cp923\",\n+                        \"923\",\n+                        \"LATIN0\",\n+                        \"LATIN9\",\n+                        \"L9\",\n+                        \"csISOlatin0\",\n+                        \"csISOlatin9\",\n+                        \"ISO8859_15_FDIS\"\n+                    }),\n+\n+            Arguments.of(\"ISO-8859-16\",\n+                    new String[] {\n+                        \"iso-ir-226\",\n+                        \"ISO_8859-16:2001\",\n+                        \"ISO_8859-16\",\n+                        \"ISO8859_16\",\n+                        \"latin10\",\n+                        \"l10\",\n+                        \"csISO885916\"\n+                       }),\n+\n+            Arguments.of(\"JIS_X0212-1990\",\n+                    new String[] {\n+                    \"iso-ir-159\",\n+                    \"csISO159JISX02121990\"}),\n+\n+            Arguments.of(\"JIS_X0201\",\n+                    new String[]{\n+                    \"X0201\",\n+                    \"csHalfWidthKatakana\"}),\n+\n+            Arguments.of(\"KOI8-R\",\n+                    new String[] {\n+                    \"KOI8_R\",\n+                    \"csKOI8R\"}),\n+\n+            Arguments.of(\"GBK\",\n+                    new String[] {\n+                    \"windows-936\"}),\n+\n+            Arguments.of(\"Shift_JIS\",\n+                    new String[] {\n+                    \"MS_Kanji\",\n+                    \"csShiftJIS\"}),\n+\n+            Arguments.of(\"EUC-JP\",\n+                    new String[] {\n+                    \"Extended_UNIX_Code_Packed_Format_for_Japanese\",\n+                    \"csEUCPkdFmtJapanese\"}),\n+\n+            Arguments.of(\"Big5\", new String[] {\"csBig5\"}),\n+\n+            Arguments.of(\"windows-31j\", new String[] {\"csWindows31J\"}),\n+\n+            Arguments.of(\"x-iso-8859-11\",\n+                        new String[] { \"iso-8859-11\", \"iso8859_11\" }),\n+\n+            Arguments.of(\"windows-1250\",\n+                    new String[] {\n+                        \"cp1250\",\n+                        \"cp5346\"\n+                    }),\n+\n+            Arguments.of(\"windows-1251\",\n+                    new String[] {\n+                        \"cp1251\",\n+                        \"cp5347\",\n+                        \"ansi-1251\"\n+                    }),\n+\n+            Arguments.of(\"windows-1252\",\n+                    new String[] {\n+                        \"cp1252\",\n+                        \"cp5348\"\n+                    }),\n+\n+            Arguments.of(\"windows-1253\",\n+                    new String[] {\n+                        \"cp1253\",\n+                        \"cp5349\"\n+                    }),\n+\n+            Arguments.of(\"windows-1254\",\n+                    new String[] {\n+                        \"cp1254\",\n+                        \"cp5350\"\n+                    }),\n+\n+            Arguments.of(\"windows-1255\",\n+                    new String[] {\n+                        \"cp1255\"\n+                    }),\n+\n+            Arguments.of(\"windows-1256\",\n+                    new String[] {\n+                        \"cp1256\"\n+                    }),\n+\n+            Arguments.of(\"windows-1257\",\n+                    new String[] {\n+                        \"cp1257\",\n+                        \"cp5353\"\n+                    }),\n+\n+            Arguments.of(\"windows-1258\",\n+                    new String[] {\n+                        \"cp1258\"\n+                    }),\n+\n+            Arguments.of(\"x-windows-874\",\n+                    new String[] {\n+                        \"ms874\", \"ms-874\", \"windows-874\" }),\n+\n+            Arguments.of(\"GB2312\",\n+                    new String[] {\n+                        \"x-EUC-CN\",\n+                        \"gb2312-80\",\n+                        \"gb2312-1980\",\n+                        \"euc-cn\",\n+                        \"euccn\" }),\n+\n+            Arguments.of(\"x-IBM942\" ,\n+                    new String[] {\n+                        \"cp942\", \/\/ JDK historical\n+                        \"ibm942\",\n+                        \"ibm-942\",\n+                        \"942\"\n+                    }),\n+\n+            Arguments.of(\"x-IBM942C\" ,\n+                    new String[] {\n+                        \"cp942C\", \/\/ JDK historical\n+                        \"ibm942C\",\n+                        \"ibm-942C\",\n+                        \"942C\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM943\" ,\n+                    new String[] {\n+                        \"cp943\", \/\/ JDK historical\n+                        \"ibm943\",\n+                        \"ibm-943\",\n+                        \"943\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM943C\" ,\n+                    new String[] {\n+                        \"cp943c\", \/\/ JDK historical\n+                        \"ibm943C\",\n+                        \"ibm-943C\",\n+                        \"943C\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM948\" ,\n+                    new String[] {\n+                        \"cp948\", \/\/ JDK historical\n+                        \"ibm948\",\n+                        \"ibm-948\",\n+                        \"948\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM950\" ,\n+                    new String[] {\n+                        \"cp950\", \/\/ JDK historical\n+                        \"ibm950\",\n+                        \"ibm-950\",\n+                        \"950\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM930\" ,\n+                    new String[] {\n+                        \"cp930\", \/\/ JDK historical\n+                        \"ibm930\",\n+                        \"ibm-930\",\n+                        \"930\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM935\" ,\n+                    new String[] {\n+                        \"cp935\", \/\/ JDK historical\n+                        \"ibm935\",\n+                        \"ibm-935\",\n+                        \"935\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM937\" ,\n+                    new String[] {\n+                        \"cp937\", \/\/ JDK historical\n+                        \"ibm937\",\n+                        \"ibm-937\",\n+                        \"937\"\n+                    } ),\n+\n+            Arguments.of(\"IBM850\" ,\n+                    new String[] {\n+                        \"cp850\", \/\/ JDK historical\n+                        \"ibm-850\",\n+                        \"ibm850\",\n+                        \"850\",\n+                        \"cspc850multilingual\"\n+                    } ),\n+\n+            Arguments.of(\"IBM852\" ,\n+                    new String[] {\n+                        \"cp852\", \/\/ JDK historical\n+                        \"ibm852\",\n+                        \"ibm-852\",\n+                        \"852\",\n+                        \"csPCp852\"\n+                    } ),\n+\n+            Arguments.of(\"IBM855\" ,\n+                    new String[] {\n+                        \"cp855\", \/\/ JDK historical\n+                        \"ibm-855\",\n+                        \"ibm855\",\n+                        \"855\",\n+                        \"cspcp855\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM856\" ,\n+                    new String[] {\n+                        \"cp856\", \/\/ JDK historical\n+                        \"ibm-856\",\n+                        \"ibm856\",\n+                        \"856\"\n+                    } ),\n+\n+            Arguments.of(\"IBM857\" ,\n+                    new String[] {\n+                        \"cp857\", \/\/ JDK historical\n+                        \"ibm857\",\n+                        \"ibm-857\",\n+                        \"857\",\n+                        \"csIBM857\"\n+                    } ),\n+\n+            Arguments.of(\"IBM860\" ,\n+                    new String[] {\n+                        \"cp860\", \/\/ JDK historical\n+                        \"ibm860\",\n+                        \"ibm-860\",\n+                        \"860\",\n+                        \"csIBM860\"\n+                    } ),\n+            Arguments.of(\"IBM861\" ,\n+                    new String[] {\n+                        \"cp861\", \/\/ JDK historical\n+                        \"ibm861\",\n+                        \"ibm-861\",\n+                        \"861\",\n+                        \"csIBM861\"\n+                    } ),\n+\n+            Arguments.of(\"IBM862\" ,\n+                    new String[] {\n+                        \"cp862\", \/\/ JDK historical\n+                        \"ibm862\",\n+                        \"ibm-862\",\n+                        \"862\",\n+                        \"csIBM862\"\n+                    } ),\n+\n+            Arguments.of(\"IBM863\" ,\n+                    new String[] {\n+                        \"cp863\", \/\/ JDK historical\n+                        \"ibm863\",\n+                        \"ibm-863\",\n+                        \"863\",\n+                        \"csIBM863\"\n+                    } ),\n+\n+            Arguments.of(\"IBM864\" ,\n+                    new String[] {\n+                        \"cp864\", \/\/ JDK historical\n+                        \"ibm864\",\n+                        \"ibm-864\",\n+                        \"864\",\n+                        \"csIBM864\"\n+                    } ),\n+\n+            Arguments.of(\"IBM865\" ,\n+                    new String[] {\n+                        \"cp865\", \/\/ JDK historical\n+                        \"ibm865\",\n+                        \"ibm-865\",\n+                        \"865\",\n+                        \"csIBM865\"\n+                    } ),\n+\n+            Arguments.of(\"IBM866\" , new String[] {\n+                        \"cp866\", \/\/ JDK historical\n+                        \"ibm866\",\n+                        \"ibm-866\",\n+                        \"866\",\n+                        \"csIBM866\"\n+                    } ),\n+            Arguments.of(\"IBM868\" ,\n+                    new String[] {\n+                        \"cp868\", \/\/ JDK historical\n+                        \"ibm868\",\n+                        \"ibm-868\",\n+                        \"868\",\n+                        \"cp-ar\",\n+                        \"csIBM868\"\n+                    } ),\n+\n+            Arguments.of(\"IBM869\" ,\n+                    new String[] {\n+                        \"cp869\", \/\/ JDK historical\n+                        \"ibm869\",\n+                        \"ibm-869\",\n+                        \"869\",\n+                        \"cp-gr\",\n+                        \"csIBM869\"\n+                    } ),\n+\n+            Arguments.of(\"IBM437\" ,\n+                    new String[] {\n+                        \"cp437\", \/\/ JDK historical\n+                        \"ibm437\",\n+                        \"ibm-437\",\n+                        \"437\",\n+                        \"cspc8codepage437\",\n+                        \"windows-437\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM874\" ,\n+                    new String[] {\n+                        \"cp874\", \/\/ JDK historical\n+                        \"ibm874\",\n+                        \"ibm-874\",\n+                        \"874\"\n+                    } ),\n+            Arguments.of(\"x-IBM737\" ,\n+                    new String[] {\n+                        \"cp737\", \/\/ JDK historical\n+                        \"ibm737\",\n+                        \"ibm-737\",\n+                        \"737\"\n+                    } ),\n+\n+            Arguments.of(\"IBM775\" ,\n+                    new String[] {\n+                        \"cp775\", \/\/ JDK historical\n+                        \"ibm775\",\n+                        \"ibm-775\",\n+                        \"775\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM921\" ,\n+                    new String[] {\n+                        \"cp921\", \/\/ JDK historical\n+                        \"ibm921\",\n+                        \"ibm-921\",\n+                        \"921\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1006\" ,\n+                    new String[] {\n+                        \"cp1006\", \/\/ JDK historical\n+                        \"ibm1006\",\n+                        \"ibm-1006\",\n+                        \"1006\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1046\" ,\n+                    new String[] {\n+                        \"cp1046\", \/\/ JDK historical\n+                        \"ibm1046\",\n+                        \"ibm-1046\",\n+                        \"1046\"\n+                    } ),\n+\n+            Arguments.of(\"IBM1047\" ,\n+                    new String[] {\n+                        \"cp1047\", \/\/ JDK historical\n+                        \"ibm-1047\",\n+                        \"1047\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1098\" ,\n+                    new String[] {\n+                        \"cp1098\", \/\/ JDK historical\n+                        \"ibm1098\",\n+                        \"ibm-1098\",\n+                        \"1098\",\n+                    } ),\n+\n+            Arguments.of(\"IBM037\" ,\n+                    new String[] {\n+                        \"cp037\", \/\/ JDK historical\n+                        \"ibm037\",\n+                        \"csIBM037\",\n+                        \"cs-ebcdic-cp-us\",\n+                        \"cs-ebcdic-cp-ca\",\n+                        \"cs-ebcdic-cp-wt\",\n+                        \"cs-ebcdic-cp-nl\",\n+                        \"ibm-037\",\n+                        \"ibm-37\",\n+                        \"cpibm37\",\n+                        \"037\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1025\" ,\n+                    new String[] {\n+                        \"cp1025\", \/\/ JDK historical\n+                        \"ibm1025\",\n+                        \"ibm-1025\",\n+                        \"1025\"\n+                    } ),\n+\n+            Arguments.of(\"IBM1026\" ,\n+                    new String[] {\n+                        \"cp1026\", \/\/ JDK historical\n+                        \"ibm1026\",\n+                        \"ibm-1026\",\n+                        \"1026\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1112\" ,\n+                    new String[] {\n+                        \"cp1112\", \/\/ JDK historical\n+                        \"ibm1112\",\n+                        \"ibm-1112\",\n+                        \"1112\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1122\" ,\n+                    new String[] {\n+                        \"cp1122\", \/\/ JDK historical\n+                        \"ibm1122\",\n+                        \"ibm-1122\",\n+                        \"1122\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1123\" ,\n+                    new String[] {\n+                        \"cp1123\", \/\/ JDK historical\n+                        \"ibm1123\",\n+                        \"ibm-1123\",\n+                        \"1123\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1124\" ,\n+                    new String[] {\n+                        \"cp1124\", \/\/ JDK historical\n+                        \"ibm1124\",\n+                        \"ibm-1124\",\n+                        \"1124\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1129\" ,\n+                    new String[] {\n+                        \"cp1129\", \/\/ JDK historical\n+                        \"ibm1129\",\n+                        \"ibm-1129\",\n+                        \"1129\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1166\" ,\n+                    new String[] {\n+                        \"cp1166\", \/\/ JDK historical\n+                        \"ibm1166\",\n+                        \"ibm-1166\",\n+                        \"1166\"\n+                    } ),\n+\n+            Arguments.of(\"IBM273\" ,\n+                    new String[] {\n+                        \"cp273\", \/\/ JDK historical\n+                        \"ibm273\",\n+                        \"ibm-273\",\n+                        \"273\"\n+                    } ),\n+\n+            Arguments.of(\"IBM277\" ,\n+                    new String[] {\n+                        \"cp277\", \/\/ JDK historical\n+                        \"ibm277\",\n+                        \"ibm-277\",\n+                        \"277\"\n+                    } ),\n+\n+            Arguments.of(\"IBM278\" ,\n+                    new String[] {\n+                        \"cp278\", \/\/ JDK historical\n+                        \"ibm278\",\n+                        \"ibm-278\",\n+                        \"278\",\n+                        \"ebcdic-sv\",\n+                        \"ebcdic-cp-se\",\n+                        \"csIBM278\"\n+                    } ),\n+\n+            Arguments.of(\"IBM280\" ,\n+                    new String[] {\n+                        \"cp280\", \/\/ JDK historical\n+                        \"ibm280\",\n+                        \"ibm-280\",\n+                        \"280\"\n+                    } ),\n+\n+            Arguments.of(\"IBM284\" ,\n+                    new String[] {\n+                        \"cp284\", \/\/ JDK historical\n+                        \"ibm284\",\n+                        \"ibm-284\",\n+                        \"284\",\n+                        \"csIBM284\",\n+                        \"cpibm284\"\n+                    } ),\n+\n+            Arguments.of(\"IBM285\" ,\n+                    new String[] {\n+                        \"cp285\", \/\/ JDK historical\n+                        \"ibm285\",\n+                        \"ibm-285\",\n+                        \"285\",\n+                        \"ebcdic-cp-gb\",\n+                        \"ebcdic-gb\",\n+                        \"csIBM285\",\n+                        \"cpibm285\"\n+                    } ),\n+\n+            Arguments.of(\"IBM297\" ,\n+                    new String[] {\n+                        \"cp297\", \/\/ JDK historical\n+                        \"ibm297\",\n+                        \"ibm-297\",\n+                        \"297\",\n+                        \"ebcdic-cp-fr\",\n+                        \"cpibm297\",\n+                        \"csIBM297\",\n+                    } ),\n+\n+            Arguments.of(\"IBM420\" ,\n+                    new String[] {\n+                        \"cp420\", \/\/ JDK historical\n+                        \"ibm420\",\n+                        \"ibm-420\",\n+                        \"ebcdic-cp-ar1\",\n+                        \"420\",\n+                        \"csIBM420\"\n+                    } ),\n+\n+            Arguments.of(\"IBM424\" ,\n+                    new String[] {\n+                        \"cp424\", \/\/ JDK historical\n+                        \"ibm424\",\n+                        \"ibm-424\",\n+                        \"424\",\n+                        \"ebcdic-cp-he\",\n+                        \"csIBM424\"\n+                    } ),\n+\n+            Arguments.of(\"IBM500\" ,\n+                    new String[] {\n+                        \"cp500\", \/\/ JDK historical\n+                        \"ibm500\",\n+                        \"ibm-500\",\n+                        \"500\",\n+                        \"ebcdic-cp-ch\",\n+                        \"ebcdic-cp-bh\",\n+                        \"csIBM500\"\n+                    } ),\n+\n+            Arguments.of(\"IBM-Thai\" ,\n+                    new String[] {\n+                        \"cp838\", \/\/ JDK historical\n+                        \"ibm838\",\n+                        \"ibm-838\",\n+                        \"ibm838\",\n+                        \"838\"\n+                    } ),\n+\n+            Arguments.of(\"IBM870\" ,\n+                    new String[] {\n+                        \"cp870\", \/\/ JDK historical\n+                        \"ibm870\",\n+                        \"ibm-870\",\n+                        \"870\",\n+                        \"ebcdic-cp-roece\",\n+                        \"ebcdic-cp-yu\",\n+                        \"csIBM870\"\n+                    } ),\n+\n+            Arguments.of(\"IBM871\" ,\n+                    new String[] {\n+                        \"cp871\", \/\/ JDK historical\n+                        \"ibm871\",\n+                        \"ibm-871\",\n+                        \"871\",\n+                        \"ebcdic-cp-is\",\n+                        \"csIBM871\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM875\" ,\n+                    new String[] {\n+                        \"cp875\", \/\/ JDK historical\n+                        \"ibm875\",\n+                        \"ibm-875\",\n+                        \"875\"\n+                    } ),\n+\n+            Arguments.of(\"IBM918\" ,\n+                    new String[] {\n+                        \"cp918\", \/\/ JDK historical\n+                        \"ibm-918\",\n+                        \"918\",\n+                        \"ebcdic-cp-ar2\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM922\" ,\n+                    new String[] {\n+                        \"cp922\", \/\/ JDK historical\n+                        \"ibm922\",\n+                        \"ibm-922\",\n+                        \"922\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1097\" ,\n+                    new String[] {\n+                        \"cp1097\", \/\/ JDK historical\n+                        \"ibm1097\",\n+                        \"ibm-1097\",\n+                        \"1097\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM949\" ,\n+                    new String[] {\n+                        \"cp949\", \/\/ JDK historical\n+                        \"ibm949\",\n+                        \"ibm-949\",\n+                        \"949\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM949C\" ,\n+                    new String[] {\n+                        \"cp949C\", \/\/ JDK historical\n+                        \"ibm949C\",\n+                        \"ibm-949C\",\n+                        \"949C\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM939\" ,\n+                    new String[] {\n+                        \"cp939\", \/\/ JDK historical\n+                        \"ibm939\",\n+                        \"ibm-939\",\n+                        \"939\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM933\" ,\n+                    new String[] {\n+                        \"cp933\", \/\/ JDK historical\n+                        \"ibm933\",\n+                        \"ibm-933\",\n+                        \"933\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1381\" ,\n+                    new String[] {\n+                        \"cp1381\", \/\/ JDK historical\n+                        \"ibm1381\",\n+                        \"ibm-1381\",\n+                        \"1381\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM1383\" ,\n+                    new String[] {\n+                        \"cp1383\", \/\/ JDK historical\n+                        \"ibm1383\",\n+                        \"ibm-1383\",\n+                        \"1383\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM970\" ,\n+                    new String[] {\n+                        \"cp970\", \/\/ JDK historical\n+                        \"ibm970\",\n+                        \"ibm-970\",\n+                        \"ibm-eucKR\",\n+                        \"970\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM964\" ,\n+                    new String[] {\n+                        \"cp964\", \/\/ JDK historical\n+                        \"ibm964\",\n+                        \"ibm-964\",\n+                        \"964\"\n+                    } ),\n+\n+            Arguments.of(\"x-IBM33722\" ,\n+                    new String[] {\n+                        \"cp33722\", \/\/ JDK historical\n+                        \"ibm33722\",\n+                        \"ibm-33722\",\n+                        \"ibm-5050\", \/\/ from IBM alias list\n+                        \"ibm-33722_vascii_vpua\", \/\/ from IBM alias list\n+                        \"33722\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01140\" ,\n+                    new String[] {\n+                        \"cp1140\", \/\/ JDK historical\n+                        \"ccsid01140\",\n+                        \"cp01140\",\n+                        \/\/ \"ebcdic-us-037+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01141\" ,\n+                    new String[] {\n+                        \"cp1141\", \/\/ JDK historical\n+                        \"ccsid01141\",\n+                        \"cp01141\",\n+                        \/\/ \"ebcdic-de-273+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01142\" ,\n+                    new String[] {\n+                        \"cp1142\", \/\/ JDK historical\n+                        \"ccsid01142\",\n+                        \"cp01142\",\n+                        \/\/ \"ebcdic-no-277+euro\",\n+                        \/\/ \"ebcdic-dk-277+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01143\" ,\n+                    new String[] {\n+                        \"cp1143\", \/\/ JDK historical\n+                        \"ccsid01143\",\n+                        \"cp01143\",\n+                        \/\/ \"ebcdic-fi-278+euro\",\n+                        \/\/ \"ebcdic-se-278+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01144\" ,\n+                    new String[] {\n+                        \"cp1144\", \/\/ JDK historical\n+                        \"ccsid01144\",\n+                        \"cp01144\",\n+                        \/\/ \"ebcdic-it-280+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01145\" ,\n+                    new String[] {\n+                        \"cp1145\", \/\/ JDK historical\n+                        \"ccsid01145\",\n+                        \"cp01145\",\n+                        \/\/ \"ebcdic-es-284+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01146\" ,\n+                    new String[] {\n+                        \"cp1146\", \/\/ JDK historical\n+                        \"ccsid01146\",\n+                        \"cp01146\",\n+                        \/\/ \"ebcdic-gb-285+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01147\" ,\n+                    new String[] {\n+                        \"cp1147\", \/\/ JDK historical\n+                        \"ccsid01147\",\n+                        \"cp01147\",\n+                        \/\/ \"ebcdic-fr-277+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01148\" ,\n+                    new String[] {\n+                        \"cp1148\", \/\/ JDK historical\n+                        \"ccsid01148\",\n+                        \"cp01148\",\n+                        \/\/ \"ebcdic-international-500+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM01149\" ,\n+                    new String[] {\n+                        \"cp1149\", \/\/ JDK historical\n+                        \"ccsid01149\",\n+                        \"cp01149\",\n+                        \/\/ \"ebcdic-s-871+euro\"\n+                    } ),\n+\n+            Arguments.of(\"IBM00858\" ,\n+                    new String[] {\n+                        \"cp858\", \/\/ JDK historical\n+                        \"ccsid00858\",\n+                        \"cp00858\",\n+                        \/\/ \"PC-Multilingual-850+euro\"\n+                    } ),\n+\n+            Arguments.of(\"x-MacRoman\",\n+                    new String[] {\n+                        \"MacRoman\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacCentralEurope\",\n+                    new String[] {\n+                        \"MacCentralEurope\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacCroatian\",\n+                    new String[] {\n+                        \"MacCroatian\" \/\/ JDK historical\n+                    }),\n+\n+\n+            Arguments.of(\"x-MacCroatian\",\n+                    new String[] {\n+                        \"MacCroatian\" \/\/ JDK historical\n+                    }),\n+\n+\n+            Arguments.of(\"x-MacGreek\",\n+                    new String[] {\n+                        \"MacGreek\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacCyrillic\",\n+                    new String[] {\n+                        \"MacCyrillic\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacUkraine\",\n+                    new String[] {\n+                        \"MacUkraine\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacTurkish\",\n+                    new String[] {\n+                        \"MacTurkish\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacArabic\",\n+                    new String[] {\n+                        \"MacArabic\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacHebrew\",\n+                    new String[] {\n+                        \"MacHebrew\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacIceland\",\n+                    new String[] {\n+                        \"MacIceland\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacRomania\",\n+                    new String[] {\n+                        \"MacRomania\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacThai\",\n+                    new String[] {\n+                        \"MacThai\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacSymbol\",\n+                    new String[] {\n+                        \"MacSymbol\" \/\/ JDK historical\n+                    }),\n+\n+            Arguments.of(\"x-MacDingbat\",\n+                    new String[] {\n+                        \"MacDingbat\" \/\/ JDK historical\n+                    })\n+        );\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/RegisteredCharsets.java","additions":1304,"deletions":1264,"binary":false,"changes":2568,"status":"modified"}]}