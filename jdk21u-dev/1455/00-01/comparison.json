{"files":[{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Alibaba Group Holding Limited. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test juc lock used by virtual threads with native frame context\n- * @library \/test\/lib\n- * @run main\/othervm\/native -Xint JucSyncNativeMethod\n- * @run main\/othervm\/native -Xcomp -XX:CompileOnly=JucSyncNativeMethod::runFromNative JucSyncNativeMethod\n- *\/\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.locks.LockSupport;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import jdk.test.lib.Asserts;\n-\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-public class JucSyncNativeMethod {\n-    static final Lock lock = new ReentrantLock();\n-    static final int VTHREAD_COUNT = Runtime.getRuntime().availableProcessors() - 1; \/\/ 1 is used for Main\n-    static AtomicInteger counter = new AtomicInteger(0);\n-\n-    private static native void runFromNative(Runnable runnable);\n-\n-    private static void runUpcall(Runnable runnable) {\n-        lock.lock();\n-        runnable.run();\n-        lock.unlock();\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        System.loadLibrary(\"JucSyncNativeMethod\");\n-        Thread t = Thread.ofVirtual().name(\"Main\").start(()->{\n-            Thread[] vthreads = new Thread[VTHREAD_COUNT];\n-            try {\n-                startVThreads(vthreads);\n-                \/\/ Wait for all vthreads to finish\n-                for (int i = 0; i < VTHREAD_COUNT; i++) {\n-                    vthreads[i].join();\n-                }\n-            } catch (Exception e) {\n-                \/\/ TODO: handle exception\n-            }\n-            Asserts.assertTrue(counter.get() == VTHREAD_COUNT, counter.get() + \"!=\" + VTHREAD_COUNT);\n-        });\n-        t.join();\n-    }\n-\n-    private static void startVThreads(Thread[] vthreads) throws Exception {\n-        lock.lock();\n-        for (int i = 0; i < VTHREAD_COUNT; i++) {\n-            var started = new CountDownLatch(1);\n-            var vthread = Thread.ofVirtual().name(\"vthread-\"+(i+1)).start(() -> {\n-                started.countDown();\n-                runFromNative(() -> LockSupport.parkNanos(1));\n-                counter.getAndIncrement();\n-            });\n-            \/\/ wait for thread to start\n-            started.await();\n-            await(vthread, Thread.State.WAITING);\n-            vthreads[i] = vthread;\n-        }\n-        runFromNative(() -> LockSupport.parkNanos(1));\n-        lock.unlock();\n-    }\n-\n-    private static void await(Thread thread, Thread.State expectedState) {\n-        Thread.State state = thread.getState();\n-        while (state != expectedState) {\n-            Asserts.assertTrue(state != Thread.State.TERMINATED, \"Thread has terminated\");\n-            Thread.yield();\n-            state = thread.getState();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/JucSyncNativeMethod.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @requires vm.continuations\n+ * @library \/test\/lib\n+ * @bug 8345294 8346175\n+ * @run main\/othervm\/timeout=300 --enable-native-access=ALL-UNNAMED Starvation 100000\n+ *\/\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+import jdk.test.lib.thread.VThreadPinner;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+public class Starvation {\n+    public static void main(String[] args) throws Exception {\n+        int iterations = Integer.parseInt(args[0]);\n+\n+        for (int i = 0; i < iterations; i++) {\n+            var exRef = new AtomicReference<Exception>();\n+            Thread thread =  Thread.startVirtualThread(() -> {\n+                try {\n+                    runTest();\n+                } catch (Exception e) {\n+                    exRef.set(e);\n+                }\n+            });\n+            while (!thread.join(Duration.ofSeconds(1))) {\n+                System.out.format(\"%s iteration %d waiting for %s%n\", Instant.now(), i, thread);\n+            }\n+            Exception ex = exRef.get();\n+            if (ex != null) {\n+                throw ex;\n+            }\n+        }\n+    }\n+\n+    static void runTest() throws InterruptedException {\n+        int nprocs = Runtime.getRuntime().availableProcessors();\n+\n+        var threads = new ArrayList<Thread>();\n+        final Lock lock = new ReentrantLock();\n+        lock.lock();\n+        {\n+            for (int i = 0; i < nprocs - 1; i++) {\n+                var started = new CountDownLatch(1);\n+                Thread thread = Thread.startVirtualThread(() -> {\n+                    started.countDown();\n+                    VThreadPinner.runPinned(() -> {\n+                        lock.lock();\n+                        lock.unlock();\n+                    });\n+                });\n+                started.await();\n+                threads.add(thread);\n+            }\n+        }\n+        lock.unlock();\n+\n+        for (Thread t : threads) {\n+            t.join();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Starvation.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Alibaba Group Holding Limited. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"jni.h\"\n-\n-JNIEXPORT void JNICALL Java_JucSyncNativeMethod_runFromNative(JNIEnv *env, jclass clazz, jobject runnable) {\n-  jmethodID mid = (*env)->GetStaticMethodID(env, clazz, \"runUpcall\", \"(Ljava\/lang\/Runnable;)V\");\n-  if (mid == NULL) {\n-    (*env)->FatalError(env, \"failed to get runUpcall method\");\n-    return;\n-  }\n-  (*env)->CallStaticVoidMethod(env, clazz, mid, runnable);\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/libJucSyncNativeMethod.c","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322732\n+ * @summary ForkJoinPool utilizes available workers even with arbitrary task dependencies\n+ *\/\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class Starvation {\n+    static final AtomicInteger count = new AtomicInteger();\n+    static final Callable<Void> noop = new Callable<Void>() {\n+            public Void call() {\n+                return null; }};\n+    static final class AwaitCount implements Callable<Void> {\n+        private int c;\n+        AwaitCount(int c) { this.c = c; }\n+        public Void call() {\n+            while (count.get() == c) Thread.onSpinWait();\n+            return null; }};\n+\n+    public static void main(String[] args) throws Exception {\n+        try (var pool = new ForkJoinPool(2)) {\n+            for (int i = 0; i < 100_000; i++) {\n+                var future1 = pool.submit(new AwaitCount(i));\n+                var future2 = pool.submit(noop);\n+                future2.get();\n+                count.set(i + 1);\n+                future1.get();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/forkjoin\/Starvation.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}