{"files":[{"patch":"@@ -1884,0 +1884,12 @@\n+            \/\/ recheck queues before park\n+            int n = (qs == null) ? 0 : qs.length;\n+            WorkQueue q; ForkJoinTask<?>[] a; int cap;\n+            for (int i = 0; i < n; ++i) {\n+                if ((q = qs[i]) != null &&\n+                    (a = q.array) != null && (cap = a.length) > 0 &&\n+                    a[q.base & (cap - 1)] != null &&\n+                    ctl == qc && compareAndSetCtl(qc, pc)) {\n+                    w.phase = (int)qc;           \/\/ release\n+                    return 0;\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Test juc lock used by virtual threads with native frame context\n+ * @library \/test\/lib\n+ * @run main\/othervm\/native -Xint JucSyncNativeMethod\n+ * @run main\/othervm\/native -Xcomp -XX:CompileOnly=JucSyncNativeMethod::runFromNative JucSyncNativeMethod\n+ *\/\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.LockSupport;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import jdk.test.lib.Asserts;\n+\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class JucSyncNativeMethod {\n+    static final Lock lock = new ReentrantLock();\n+    static final int VTHREAD_COUNT = Runtime.getRuntime().availableProcessors() - 1; \/\/ 1 is used for Main\n+    static AtomicInteger counter = new AtomicInteger(0);\n+\n+    private static native void runFromNative(Runnable runnable);\n+\n+    private static void runUpcall(Runnable runnable) {\n+        lock.lock();\n+        runnable.run();\n+        lock.unlock();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        System.loadLibrary(\"JucSyncNativeMethod\");\n+        Thread t = Thread.ofVirtual().name(\"Main\").start(()->{\n+            Thread[] vthreads = new Thread[VTHREAD_COUNT];\n+            try {\n+                startVThreads(vthreads);\n+                \/\/ Wait for all vthreads to finish\n+                for (int i = 0; i < VTHREAD_COUNT; i++) {\n+                    vthreads[i].join();\n+                }\n+            } catch (Exception e) {\n+                \/\/ TODO: handle exception\n+            }\n+            Asserts.assertTrue(counter.get() == VTHREAD_COUNT, counter.get() + \"!=\" + VTHREAD_COUNT);\n+        });\n+        t.join();\n+    }\n+\n+    private static void startVThreads(Thread[] vthreads) throws Exception {\n+        lock.lock();\n+        for (int i = 0; i < VTHREAD_COUNT; i++) {\n+            var started = new CountDownLatch(1);\n+            var vthread = Thread.ofVirtual().name(\"vthread-\"+(i+1)).start(() -> {\n+                started.countDown();\n+                runFromNative(() -> LockSupport.parkNanos(1));\n+                counter.getAndIncrement();\n+            });\n+            \/\/ wait for thread to start\n+            started.await();\n+            await(vthread, Thread.State.WAITING);\n+            vthreads[i] = vthread;\n+        }\n+        runFromNative(() -> LockSupport.parkNanos(1));\n+        lock.unlock();\n+    }\n+\n+    private static void await(Thread thread, Thread.State expectedState) {\n+        Thread.State state = thread.getState();\n+        while (state != expectedState) {\n+            Asserts.assertTrue(state != Thread.State.TERMINATED, \"Thread has terminated\");\n+            Thread.yield();\n+            state = thread.getState();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/JucSyncNativeMethod.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+\n+JNIEXPORT void JNICALL Java_JucSyncNativeMethod_runFromNative(JNIEnv *env, jclass clazz, jobject runnable) {\n+  jmethodID mid = (*env)->GetStaticMethodID(env, clazz, \"runUpcall\", \"(Ljava\/lang\/Runnable;)V\");\n+  if (mid == NULL) {\n+    (*env)->FatalError(env, \"failed to get runUpcall method\");\n+    return;\n+  }\n+  (*env)->CallStaticVoidMethod(env, clazz, mid, runnable);\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/libJucSyncNativeMethod.c","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"}]}