{"files":[{"patch":"@@ -1884,0 +1884,12 @@\n+            \/\/ recheck queues before park\n+            int n = (qs == null) ? 0 : qs.length;\n+            WorkQueue q; ForkJoinTask<?>[] a; int cap;\n+            for (int i = 0; i < n; ++i) {\n+                if ((q = qs[i]) != null &&\n+                    (a = q.array) != null && (cap = a.length) > 0 &&\n+                    a[q.base & (cap - 1)] != null &&\n+                    ctl == qc && compareAndSetCtl(qc, pc)) {\n+                    w.phase = (int)qc;           \/\/ release\n+                    return 0;\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @requires vm.continuations\n+ * @library \/test\/lib\n+ * @bug 8345294 8346175\n+ * @run main\/othervm\/timeout=300 --enable-native-access=ALL-UNNAMED Starvation 100000\n+ *\/\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+import jdk.test.lib.thread.VThreadPinner;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+public class Starvation {\n+    public static void main(String[] args) throws Exception {\n+        int iterations = Integer.parseInt(args[0]);\n+\n+        for (int i = 0; i < iterations; i++) {\n+            var exRef = new AtomicReference<Exception>();\n+            Thread thread =  Thread.startVirtualThread(() -> {\n+                try {\n+                    runTest();\n+                } catch (Exception e) {\n+                    exRef.set(e);\n+                }\n+            });\n+            while (!thread.join(Duration.ofSeconds(1))) {\n+                System.out.format(\"%s iteration %d waiting for %s%n\", Instant.now(), i, thread);\n+            }\n+            Exception ex = exRef.get();\n+            if (ex != null) {\n+                throw ex;\n+            }\n+        }\n+    }\n+\n+    static void runTest() throws InterruptedException {\n+        int nprocs = Runtime.getRuntime().availableProcessors();\n+\n+        var threads = new ArrayList<Thread>();\n+        final Lock lock = new ReentrantLock();\n+        lock.lock();\n+        {\n+            for (int i = 0; i < nprocs - 1; i++) {\n+                var started = new CountDownLatch(1);\n+                Thread thread = Thread.startVirtualThread(() -> {\n+                    started.countDown();\n+                    VThreadPinner.runPinned(() -> {\n+                        lock.lock();\n+                        lock.unlock();\n+                    });\n+                });\n+                started.await();\n+                threads.add(thread);\n+            }\n+        }\n+        lock.unlock();\n+\n+        for (Thread t : threads) {\n+            t.join();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Starvation.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322732\n+ * @summary ForkJoinPool utilizes available workers even with arbitrary task dependencies\n+ *\/\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class Starvation {\n+    static final AtomicInteger count = new AtomicInteger();\n+    static final Callable<Void> noop = new Callable<Void>() {\n+            public Void call() {\n+                return null; }};\n+    static final class AwaitCount implements Callable<Void> {\n+        private int c;\n+        AwaitCount(int c) { this.c = c; }\n+        public Void call() {\n+            while (count.get() == c) Thread.onSpinWait();\n+            return null; }};\n+\n+    public static void main(String[] args) throws Exception {\n+        try (var pool = new ForkJoinPool(2)) {\n+            for (int i = 0; i < 100_000; i++) {\n+                var future1 = pool.submit(new AwaitCount(i));\n+                var future2 = pool.submit(noop);\n+                future2.get();\n+                count.set(i + 1);\n+                future1.get();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/forkjoin\/Starvation.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}