{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2014 SAP SE. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"runtime\/os.inline.hpp\"\n@@ -50,3 +51,11 @@\n-    \/\/ pc can be seen as null because not all writers use store pc + release store sp.\n-    \/\/ Simply discard the sample in this very rare case.\n-    if (pc == nullptr) return false;\n+    if (pc == nullptr) {\n+      \/\/ This is not uncommon. Many c1\/c2 runtime stubs do not set the pc in the anchor.\n+      intptr_t* top_sp = os::Aix::ucontext_get_sp((const ucontext_t*)ucontext);\n+      if ((uint64_t)sp <= ((frame::common_abi*)top_sp)->callers_sp) {\n+        \/\/ The interrupt occurred either in the last java frame or in its direct callee.\n+        \/\/ We cannot be sure that the link register LR was already saved to the\n+        \/\/ java frame. Therefore we discard this sample.\n+        return false;\n+      }\n+      \/\/ The last java pc will be found in the abi part of the last java frame.\n+    }\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/javaThread_aix_ppc.cpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025 SAP SE. All rights reserved.\n@@ -49,3 +49,11 @@\n-    \/\/ pc can be seen as null because not all writers use store pc + release store sp.\n-    \/\/ Simply discard the sample in this very rare case.\n-    if (pc == nullptr) return false;\n+    if (pc == nullptr) {\n+      \/\/ This is not uncommon. Many c1\/c2 runtime stubs do not set the pc in the anchor.\n+      intptr_t* top_sp = os::Linux::ucontext_get_sp((const ucontext_t*)ucontext);\n+      if ((uint64_t)sp <= ((frame::common_abi*)top_sp)->callers_sp) {\n+        \/\/ The interrupt occurred either in the last java frame or in its direct callee.\n+        \/\/ We cannot be sure that the link register LR was already saved to the\n+        \/\/ java frame. Therefore we discard this sample.\n+        return false;\n+      }\n+      \/\/ The last java pc will be found in the abi part of the last java frame.\n+    }\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/javaThread_linux_ppc.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"}]}