{"files":[{"patch":"@@ -120,0 +120,1 @@\n+import static com.sun.source.doctree.DocTree.Kind.START_ELEMENT;\n@@ -1136,1 +1137,1 @@\n-    boolean ignoreNonInlineTag(DocTree dtree) {\n+    boolean ignoreNonInlineTag(DocTree dtree, List<Name> openTags) {\n@@ -1138,6 +1139,5 @@\n-        if (dtree.getKind() == Kind.START_ELEMENT) {\n-            StartElementTree setree = (StartElementTree)dtree;\n-            name = setree.getName();\n-        } else if (dtree.getKind() == Kind.END_ELEMENT) {\n-            EndElementTree eetree = (EndElementTree)dtree;\n-            name = eetree.getName();\n+        Kind kind = dtree.getKind();\n+        if (kind == Kind.START_ELEMENT) {\n+            name = ((StartElementTree)dtree).getName();\n+        } else if (kind == Kind.END_ELEMENT) {\n+            name = ((EndElementTree)dtree).getName();\n@@ -1148,3 +1148,11 @@\n-            if (htmlTag != null &&\n-                    htmlTag.blockType != jdk.javadoc.internal.doclint.HtmlTag.BlockType.INLINE) {\n-                return true;\n+            if (htmlTag != null) {\n+                if (htmlTag.blockType != HtmlTag.BlockType.INLINE) {\n+                    return true;\n+                }\n+                \/\/ Keep track of open inline tags that need to be closed, see 8326332\n+                if (kind == START_ELEMENT && htmlTag.endKind == HtmlTag.EndKind.REQUIRED) {\n+                    openTags.add(name);\n+                } else if (kind == Kind.END_ELEMENT && !openTags.isEmpty()\n+                        && openTags.getLast().equals(name)) {\n+                    openTags.removeLast();\n+                }\n@@ -1222,0 +1230,1 @@\n+        List<Name> openTags = new ArrayList<>();\n@@ -1230,1 +1239,1 @@\n-                if (ignoreNonInlineTag(tag))\n+                if (ignoreNonInlineTag(tag, openTags)) {\n@@ -1232,0 +1241,1 @@\n+                }\n@@ -1236,1 +1246,1 @@\n-                        && ((tag instanceof TextTree tt) && tt.getBody().isBlank()))\n+                        && ((tag instanceof TextTree tt) && tt.getBody().isBlank())) {\n@@ -1238,0 +1248,1 @@\n+                }\n@@ -1488,0 +1499,4 @@\n+        \/\/ Close any open inline tags\n+        while (!openTags.isEmpty()) {\n+            result.add(RawHtml.endElement(openTags.removeLast()));\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":27,"deletions":12,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4165985\n+ * @bug 4165985 8326332\n@@ -79,0 +79,5 @@\n+\n+        checkOutput(\"pkg\/BreakIteratorTest.html\", true,\n+                \"\"\"\n+                    <div class=\"block\">Inline tags <i><a href=\"..\/index-all.html\">extending\n+                     beyond the first sentence.<\/a><\/i><\/div>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testBreakIterator\/TestBreakIterator.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -59,0 +59,5 @@\n+    \/**\n+     * Inline tags <i><a href=\"{@docRoot}\/index-all.html\">extending\n+     * beyond the first sentence. Tags are closed here.<\/a><\/i>\n+     *\/\n+    public void meh(){}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testBreakIterator\/pkg\/BreakIteratorTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}