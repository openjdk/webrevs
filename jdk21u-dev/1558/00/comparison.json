{"files":[{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+\/*\n+ * @test\n+ * @bug 4394287\n+ * @key headful\n+ * @summary Paint pending on heavyweight component move\n+ *\/\n+\n+public class RepaintTest {\n+    private static Frame frame;\n+    private static Panel panel;\n+    private static volatile IncrementComponent counter;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeAndWait(RepaintTest::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> panel.setLocation(panel.getX() + 10,\n+                                                             panel.getY() + 10));\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            int count = counter.getCount().get();\n+\n+            EventQueue.invokeAndWait(panel::repaint);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            if (counter.getCount().get() == count) {\n+                throw new RuntimeException(\"Failed\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new MyFrame(\"Repaint Test\");\n+        frame.setLayout(null);\n+\n+        counter = new IncrementComponent();\n+        panel = new Panel();\n+        panel.add(counter);\n+        frame.add(panel);\n+        panel.setBounds(0, 0, 100, 100);\n+        frame.setSize(200, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static class MyFrame extends Frame {\n+\n+         public MyFrame(String title) {\n+            super(title);\n+        }\n+\n+        public void update(Graphics g) {\n+            System.out.println(\"UPDATE: \" + g.getClipBounds());\n+            super.update(g);\n+        }\n+\n+        public void paint(Graphics g) {\n+            System.out.println(\"PAINT: \" + g.getClipBounds());\n+            super.paint(g);\n+        }\n+    }\n+\n+    \/\/ Subclass of Component, everytime paint is invoked a counter\n+    \/\/ is incremented, this counter is displayed in the component.\n+    private static class IncrementComponent extends Component {\n+        private static final AtomicInteger paintCount = new AtomicInteger(0);\n+\n+        public Dimension getPreferredSize() {\n+            return new Dimension(100, 100);\n+        }\n+\n+        public AtomicInteger getCount() {\n+            return paintCount;\n+        }\n+\n+        public void paint(Graphics g) {\n+            g.setColor(Color.red);\n+            g.fillRect(0, 0, getWidth(), getHeight());\n+            g.setColor(Color.white);\n+\n+            String string = Integer.toString(paintCount.getAndIncrement());\n+            FontMetrics metrics = g.getFontMetrics();\n+            int x = (getWidth() - metrics.stringWidth(string)) \/ 2;\n+            int y = (getHeight() + metrics.getHeight()) \/ 2;\n+            g.drawString(string, x, y);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/PaintEvent\/RepaintTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import javax.swing.text.Document;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+\/*\n+ * @test\n+ * @bug 4214848\n+ * @summary Tests whether  HTMLEditorKit.read(...)\n+ *          creates Document for html with empty BODY\n+ *\/\n+\n+public class bug4214848 {\n+    public static void main (String[] args) throws Exception {\n+        StringWriter sw = new StringWriter();\n+        String test = \"<HTML><BODY><\/BODY><\/HTML>\";\n+        HTMLEditorKit kit = new HTMLEditorKit();\n+        Document doc = kit.createDefaultDocument();\n+        kit.read(new StringReader(test), doc, 0); \/\/ prepare test document\n+        kit.write(sw, doc, 0, 10);\n+        String out = sw.toString().toLowerCase();\n+        if (out.indexOf(\"<body>\") != out.lastIndexOf(\"<body>\")) {\n+            throw new RuntimeException(\"Test failed: extra <body> section generated\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLEditorKit\/bug4214848.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.StringWriter;\n+import javax.swing.text.html.HTML;\n+import javax.swing.text.html.HTMLDocument;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+\/*\n+ * @test\n+ * @bug 4230197\n+ * @summary Tests if HTMLEditorKit.insertHTML() works for font\/phrase tags\n+ *\/\n+\n+public class bug4230197 {\n+\n+    public static void main(String[] args) throws Exception {\n+        HTMLEditorKit kit = new HTMLEditorKit();\n+        StringWriter sw = new StringWriter();\n+        HTMLDocument doc = (HTMLDocument) kit.createDefaultDocument();\n+        kit.insertHTML(doc, doc.getLength(), \"<sub>0<\/sub>\", 0, 0, HTML.Tag.SUB);\n+        kit.insertHTML(doc, doc.getLength(), \"<sup>0<\/sup>\", 0, 0, HTML.Tag.SUP);\n+        kit.insertHTML(doc, doc.getLength(), \"<b>0<\/b>\", 0, 0, HTML.Tag.B);\n+        kit.insertHTML(doc, doc.getLength(), \"<i>0<\/i>\", 0, 0, HTML.Tag.I);\n+        kit.insertHTML(doc, doc.getLength(), \"<code>0<\/code>\", 0, 0, HTML.Tag.CODE);\n+        kit.write(sw, doc, 0, doc.getLength());\n+\n+        String out = sw.toString().toLowerCase();\n+        if ((!out.contains(\"<sub>0<\/sub>\"))\n+                || (!out.contains(\"<sup>0<\/sup>\"))\n+                || (!out.contains(\"<code>0<\/code>\"))\n+                || (!out.contains(\"<b>0<\/b>\"))\n+                || (!out.contains(\"<i>0<\/i>\"))) {\n+            throw new RuntimeException(\"Test failed: HTMLEditorKit.insertHTML()\" +\n+                    \" doesn't work for font\/phrase tags\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLEditorKit\/bug4230197.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.Reader;\n+import java.io.StringReader;\n+import javax.swing.text.MutableAttributeSet;\n+import javax.swing.text.html.HTML;\n+import javax.swing.text.html.HTMLEditorKit;\n+import javax.swing.text.html.parser.ParserDelegator;\n+\n+\/*\n+ * @test\n+ * @bug 4238223\n+ * @summary Tests that HTMLEditorKit.ParserCallback methods receive\n+ *          correct 'pos' argument.\n+ *\/\n+\n+public class bug4238223 {\n+\n+    public static void main(String[] argv) throws Exception {\n+        TestParser parser = new TestParser();\n+        String testHTML = \"<HTML><HEAD><TITLE>Text<\/TITLE><\/HEAD>\" +\n+                \"<BODY><WRONGTAG>Simple text<!--comment--><\/BODY><\/HTML>\";\n+        parser.parse(testHTML);\n+    }\n+\n+    static class TestCallback extends HTMLEditorKit.ParserCallback {\n+        String commentData = \"comment\";\n+        int commentIndex = 65;\n+\n+        public void handleComment(char[] data, int pos) {\n+            if (!(new String(data)).equals(commentData)\n+                    || pos != commentIndex) {\n+\n+                throw new RuntimeException(\"handleComment failed\");\n+            }\n+        }\n+\n+        HTML.Tag[] endTags = {HTML.Tag.TITLE, HTML.Tag.HEAD,\n+                HTML.Tag.BODY, HTML.Tag.HTML};\n+        int[] endTagPositions = {23, 31, 79, 86};\n+        int endTagIndex = 0;\n+        public void handleEndTag(HTML.Tag tag, int pos) {\n+            if (!tag.equals(endTags[endTagIndex])\n+                    || pos != endTagPositions[endTagIndex]) {\n+\n+                throw new RuntimeException(\"handleEndTag failed\");\n+            } else {\n+                endTagIndex++;\n+            }\n+        }\n+\n+        int errorIndex = 54;\n+        public void handleError(String errorMsg, int pos) {\n+            if (pos != errorIndex) {\n+                throw new RuntimeException(\"handleError failed\");\n+            }\n+        }\n+\n+        int[] simpleTagPositions = {44, 93};\n+        int simpleTagIndex = 0;\n+        public void handleSimpleTag(HTML.Tag tag, MutableAttributeSet attr,\n+                                    int pos) {\n+            if (pos != simpleTagPositions[simpleTagIndex++]) {\n+                throw new RuntimeException(\"handleSimpleTag failed\");\n+            }\n+        }\n+\n+        HTML.Tag[] startTags = {HTML.Tag.HTML, HTML.Tag.HEAD,\n+                HTML.Tag.TITLE, HTML.Tag.BODY};\n+        int[] startTagPositions = {0, 6, 12, 38};\n+        int startTagIndex = 0;\n+        public void handleStartTag(HTML.Tag tag, MutableAttributeSet attr,\n+                                   int pos) {\n+            if (!tag.equals(startTags[startTagIndex])\n+                    || pos != startTagPositions[startTagIndex]) {\n+\n+                throw new RuntimeException(\"handleStartTag failed\");\n+            } else {\n+                startTagIndex++;\n+            }\n+        }\n+\n+        String[] textData = {\"Text\", \"Simple text\"};\n+        int[] textPositions = {19, 54};\n+        int textIndex = 0;\n+        public void handleText(char[] data, int pos) {\n+            if (!textData[textIndex].equals(new String(data))\n+                    || pos != textPositions[textIndex]) {\n+\n+                throw new RuntimeException(\"handleText failed\");\n+            } else {\n+                textIndex++;\n+            }\n+        }\n+    }\n+\n+    static class TestParser extends ParserDelegator {\n+        public void parse(String html) throws Exception {\n+            Reader r = new StringReader(html);\n+            super.parse(r, new TestCallback(), false);\n+            r.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLEditorKit\/bug4238223.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}