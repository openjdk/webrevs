{"files":[{"patch":"@@ -124,0 +124,1 @@\n+java\/awt\/Frame\/InitialIconifiedTest.java 8203920 macosx-all,linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * DeiconifyClipTest.java\n+ *\n+ * summary:\n+ *\n+ * What happens is that we call AwtWindow::UpdateInsets when\n+ * processing WM_NCCALCSIZE delivered on programmatic deiconification.\n+ * At this point IsIconic returns false (so UpdateInsets proceeds),\n+ * but the rect sizes still seems to be those weird of the iconic\n+ * state.  Based on them we compute insets with top = left = 0 (and\n+ * bottom and right that are completely bogus) and pass them to\n+ * PaintUpdateRgn which results in incorrect clip origin.  Immediately\n+ * after that we do UpdateInsets again during WM_SIZE processing and\n+ * get real values.\n+ *\/\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+\n+\/*\n+ * @test\n+ * @bug 4792958\n+ * @summary Incorrect clip region after programmatic restore\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DeiconifyClipTest\n+*\/\n+\n+public class DeiconifyClipTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test creates a frame that is automatically iconified\/deiconified\n+            in a cycle.\n+\n+            The test FAILS if after deiconfication the frame has a greyed-out area\n+            in the lower-right corner.\n+            If the frame contents is drawn completely - the test PASSES.\n+\n+            Press PASS or FAIL button accordingly.\n+            \"\"\";\n+\n+    static TestFrame testFrame;\n+    static volatile boolean shouldContinue = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+                .title(\"DeiconifyClipTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(DeiconifyClipTest::createAndShowUI)\n+                .build();\n+        try {\n+            runThread();\n+        } finally {\n+            passFailJFrame.awaitAndCheck();\n+            shouldContinue = false;\n+        }\n+    }\n+\n+    private static void runThread() {\n+        new Thread(() -> {\n+            for (int i = 0; i < 1000 && shouldContinue; ++i) {\n+                try {\n+                    Thread.sleep(3000);\n+                    SwingUtilities.invokeAndWait(() -> {\n+                        if ((testFrame.getExtendedState() & Frame.ICONIFIED)\n+                                != 0) {\n+                            testFrame.setExtendedState(Frame.NORMAL);\n+                        } else {\n+                            testFrame.setState(Frame.ICONIFIED);\n+                        }\n+                    });\n+                } catch (Exception ignored) {\n+                }\n+            }\n+        }).start();\n+    }\n+\n+    static Frame createAndShowUI() {\n+        testFrame = new TestFrame();\n+        testFrame.getContentPane().setLayout(new BoxLayout(testFrame.getContentPane(),\n+                                                   BoxLayout.Y_AXIS));\n+        testFrame.getContentPane().setBackground(Color.yellow);\n+        testFrame.setSize(300, 300);\n+        return testFrame;\n+    }\n+\n+    static class TestFrame extends JFrame {\n+        public TestFrame() {\n+            super(\"DeiconifyClipTest\");\n+        }\n+\n+        \/\/ make it more visible if the clip is wrong.\n+        public void paint(Graphics g) {\n+            Insets b = getInsets();\n+            Dimension d = getSize();\n+\n+            int x = b.left;\n+            int y = b.top;\n+            int w = d.width - x - b.right;\n+            int h = d.height - y - b.bottom;\n+\n+            g.setColor(Color.white);\n+            g.fillRect(0, 0, d.width, d.height);\n+\n+            g.setColor(Color.green);\n+            g.drawRect(x, y, w-1, h-1);\n+            g.drawLine(x, y, x+w, y+h);\n+            g.drawLine(x, y+h, x+w, y);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/DeiconifyClipTest.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.event.ActionListener;\n+import java.lang.Exception;\n+import java.lang.InterruptedException;\n+import java.lang.Object;\n+import java.lang.String;\n+import java.lang.Thread;\n+\n+\/*\n+ * @test\n+ * @bug 4097226\n+ * @summary Frame.setCursor() sometimes doesn't update the cursor until user moves the mouse\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrameSetCursorTest\n+ *\/\n+\n+public class FrameSetCursorTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. Keep the instruction dialog and TestFrame side by side so that\n+               you can read the instructions while doing the test\n+            2. Click on the 'Start Busy' button on the frame titled 'TestFrame'\n+               and DO NOT MOVE THE MOUSE ANYWHERE till you complete the steps below\n+            3. The cursor on the TestFrame changes to busy cursor\n+            4. If you don't see the busy cursor press 'Fail' after\n+               the `done sleeping` message\n+            5. If the busy cursor is seen, after 5 seconds the message\n+               'done sleeping' is displayed in the message window\n+            6. Check for the cursor type after the display of 'done sleeping'\n+            7. If the cursor on the TestFrame has changed back to default cursor\n+               (without you touching or moving the mouse), then press 'Pass'\n+               else if the frame still shows the busy cursor press 'Fail'\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"FrameSetCursorTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(FrameSetCursorTest::createAndShowUI)\n+                .logArea(5)\n+                .build()\n+                .awaitAndCheck();\n+\n+    }\n+\n+    static Frame createAndShowUI() {\n+        Frame frame = new Frame(\"TestFrame\");\n+        Panel panel = new Panel();\n+        Button busyButton = new Button(\"Start Busy\");\n+\n+        ActionListener actionListener = event -> {\n+            Object source = event.getSource();\n+            if (source == busyButton) {\n+                frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n+                try {\n+                    Thread.sleep(5000);\n+                } catch (InterruptedException ignored) {}\n+                PassFailJFrame.log(\"done sleeping\");\n+                frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n+            }\n+        };\n+\n+        busyButton.addActionListener(actionListener);\n+        panel.setLayout(new BorderLayout());\n+        panel.add(\"North\", busyButton);\n+\n+        frame.add(panel);\n+        frame.pack();\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameSetCursorTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4851435\n+ * @summary Frame is not shown initially iconified after pack\n+ *\/\n+\n+public class InitialIconifiedTest {\n+\n+    private static Frame backgroundFrame;\n+    private static Frame testedFrame;\n+\n+    private static final Rectangle backgroundFrameBounds =\n+            new Rectangle(100, 100, 200, 200);\n+    private static final Rectangle testedFrameBounds =\n+            new Rectangle(150, 150, 100, 100);\n+\n+    private static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+\n+        try {\n+            EventQueue.invokeAndWait(InitialIconifiedTest::initAndShowGui);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                backgroundFrame.dispose();\n+                testedFrame.dispose();\n+            });\n+        }\n+    }\n+\n+    private static void initAndShowGui() {\n+        backgroundFrame = new Frame(\"DisposeTest background\");\n+        backgroundFrame.setUndecorated(true);\n+        backgroundFrame.setBackground(Color.RED);\n+        backgroundFrame.setBounds(backgroundFrameBounds);\n+        backgroundFrame.setVisible(true);\n+\n+        testedFrame = new Frame(\"Should have started ICONIC\");\n+        testedFrame.setExtendedState(Frame.ICONIFIED);\n+        testedFrame.setBounds(testedFrameBounds);\n+        testedFrame.setVisible(true);\n+    }\n+\n+    private static void test() {\n+        BufferedImage bi = robot.createScreenCapture(backgroundFrameBounds);\n+        int redPix = Color.RED.getRGB();\n+\n+        for (int x = 0; x < bi.getWidth(); x++) {\n+            for (int y = 0; y < bi.getHeight(); y++) {\n+                if (bi.getRGB(x, y) != redPix) {\n+                    try {\n+                        ImageIO.write(bi, \"png\",\n+                                new File(\"failure.png\"));\n+                    } catch (IOException ignored) {}\n+                    throw new RuntimeException(\"Test failed\");\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/InitialIconifiedTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+\/*\n+ * @test\n+ * @bug 4091426\n+ * @key headful\n+ * @summary Test inset correction when setVisible(true) BEFORE setSize(), setLocation()\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual InsetCorrectionTest\n+ *\/\n+\n+public class InsetCorrectionTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            There is a frame of size 300x300 at location (100,100).\n+            It has a menubar with one menu, 'File', but the frame\n+            is otherwise empty.  In particular, there should be no\n+            part of the frame that is not shown in the background color.\n+            Upon test completion, click Pass or Fail appropriately.\n+            \"\"\";\n+\n+    private static InsetCorrection testFrame;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> testFrame = new InsetCorrection());\n+\n+        try {\n+            PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+                    .title(\"InsetCorrectionTest Instructions\")\n+                    .instructions(INSTRUCTIONS)\n+                    .columns(45)\n+                    .logArea(3)\n+                    .build();\n+            EventQueue.invokeAndWait(() ->\n+                    PassFailJFrame.log(\"frame location: \" + testFrame.getBounds()));\n+            passFailJFrame.awaitAndCheck();\n+        } finally {\n+            EventQueue.invokeAndWait(testFrame::dispose);\n+        }\n+    }\n+\n+    static class InsetCorrection extends Frame\n+            implements ActionListener {\n+        MenuBar mb;\n+        Menu file;\n+        MenuItem cause_bug_b;\n+\n+        public InsetCorrection() {\n+            super(\"InsetCorrection\");\n+            mb = new MenuBar();\n+            file = new Menu(\"File\");\n+            mb.add(file);\n+            cause_bug_b = new MenuItem(\"cause bug\");\n+            file.add(cause_bug_b);\n+            setMenuBar(mb);\n+            cause_bug_b.addActionListener(this);\n+\n+            \/\/ Making the frame visible before setSize and setLocation()\n+            \/\/ are being called causes sometimes strange behaviour with\n+            \/\/ JDK1.1.5G. The frame is then sometimes to large and the\n+            \/\/ excess areas are drawn in black. This only happens\n+            \/\/ sometimes.\n+            setVisible(true);\n+            setSize(300, 300);\n+            setLocation(100, 100);\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            setVisible(false);\n+            setVisible(true);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/InsetCorrectionTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}