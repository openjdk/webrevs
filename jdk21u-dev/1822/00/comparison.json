{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,0 @@\n-import nsk.share.test.*;\n@@ -77,3 +76,0 @@\n-import vm.share.monitoring.MemoryPoolFinder;\n-\n-import java.io.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/LoadUnloadGC\/LoadUnloadGC.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,1 @@\n-package vm.share.monitoring;\n+package gc.gctests.LoadUnloadGC;\n@@ -27,1 +27,1 @@\n-public enum MemoryPoolFinder {\n+enum MemoryPoolFinder {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/LoadUnloadGC\/MemoryPoolFinder.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/monitoring\/MemoryPoolFinder.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import vm.share.VMRuntimeEnvUtils;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/HighWaterMarkTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -23,1 +23,1 @@\n-package vm.share.gc;\n+package metaspace.share;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/share\/HeapOOMEException.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/gc\/HeapOOMEException.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package vm.share.gc;\n+package metaspace.share;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/share\/TriggerUnloadingByFillingMetaspace.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/gc\/TriggerUnloadingByFillingMetaspace.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package vm.share.gc;\n+package metaspace.share;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/share\/TriggerUnloadingHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/gc\/TriggerUnloadingHelper.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package vm.share.gc;\n+package metaspace.share;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/share\/TriggerUnloadingWithWhiteBox.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/gc\/TriggerUnloadingWithWhiteBox.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,2 @@\n-import vm.share.InMemoryJavaCompiler;\n+import metaspace.share.TriggerUnloadingHelper;\n+import metaspace.share.TriggerUnloadingWithWhiteBox;\n@@ -62,2 +63,1 @@\n-import vm.share.gc.TriggerUnloadingHelper;\n-import vm.share.gc.TriggerUnloadingWithWhiteBox;\n+import vm.share.InMemoryJavaCompiler;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/staticReferences\/StaticReferences.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import jdk.test.whitebox.WhiteBox;\n+import metaspace.share.TriggerUnloadingHelper;\n@@ -36,2 +38,0 @@\n-import jdk.test.whitebox.WhiteBox;\n-import vm.share.gc.TriggerUnloadingHelper;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/stressHierarchy\/common\/PerformChecksHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,5 +27,4 @@\n-import vm.share.gc.HeapOOMEException;\n-import vm.share.gc.TriggerUnloadingByFillingMetaspace;\n-import vm.share.gc.TriggerUnloadingHelper;\n-import vm.share.gc.TriggerUnloadingWithWhiteBox;\n-\n+import metaspace.share.HeapOOMEException;\n+import metaspace.share.TriggerUnloadingByFillingMetaspace;\n+import metaspace.share.TriggerUnloadingHelper;\n+import metaspace.share.TriggerUnloadingWithWhiteBox;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/stressHierarchy\/common\/StressHierarchyBaseClass.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,0 @@\n-import vm.share.VMRuntimeEnvUtils;\n-import nsk.share.Consts;\n@@ -71,7 +69,0 @@\n-\n-        if (!VMRuntimeEnvUtils.isJITEnabled()) {\n-            System.out.println(\"WARNING: test isn't valid if JIT compilation is disabled\");\n-            System.out.println(\"Exiting with 'PASSED' status\");\n-            System.exit(Consts.JCK_STATUS_BASE + Consts.TEST_PASSED);\n-        }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/hotswap\/HS203\/hs203t004\/hs203t004.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import vm.share.process.ProcessExecutor;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/complog\/share\/LogCompilationTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -23,1 +23,1 @@\n-package vm.share.process;\n+package vm.compiler.complog.share;\n@@ -28,1 +28,0 @@\n-import vm.share.ProcessUtils;\n@@ -30,3 +29,0 @@\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.BufferedReader;\n@@ -35,2 +31,0 @@\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n@@ -39,1 +33,0 @@\n-import java.lang.reflect.Field;\n@@ -141,2 +134,2 @@\n-    public int getPid() {\n-        return ProcessUtils.getPid(process);\n+    public long getPid() {\n+        return process.pid();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/complog\/share\/ProcessExecutor.java","additions":3,"deletions":10,"binary":false,"changes":13,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/ProcessExecutor.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package vm.share.process;\n+package vm.compiler.complog.share;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/complog\/share\/StreamListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/StreamListener.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package vm.share.process;\n+package vm.compiler.complog.share;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/complog\/share\/StreamLogger.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/StreamLogger.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package vm.share.process;\n+package vm.compiler.complog.share;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/complog\/share\/StreamReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/StreamReader.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-import vm.share.FileUtils;\n+import vm.mlvm.share.FileUtils;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/func\/findByName\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,1 @@\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n+\n@@ -30,2 +29,2 @@\n-import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n@@ -35,0 +34,3 @@\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n@@ -36,3 +38,0 @@\n-import vm.share.options.Option;\n-import vm.share.options.OptionSupport;\n-import vm.share.options.IgnoreUnknownArgumentsHandler;\n@@ -42,2 +41,4 @@\n-import vm.share.FileUtils;\n-import vm.share.UnsafeAccess;\n+import vm.mlvm.share.FileUtils;\n+import vm.share.options.Option;\n+import vm.share.options.OptionSupport;\n+import vm.share.options.IgnoreUnknownArgumentsHandler;\n@@ -167,1 +168,1 @@\n-                        UnsafeAccess.unsafe.ensureClassInitialized(c);\n+                        MethodHandles.lookup().ensureInitialized(c);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/share\/StressClassLoadingTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-import vm.share.FileUtils;\n+import vm.mlvm.share.FileUtils;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/byteMutation\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-import vm.share.FileUtils;\n+import vm.mlvm.share.FileUtils;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/oome\/heap\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-import vm.share.FileUtils;\n+import vm.mlvm.share.FileUtils;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/oome\/metaspace\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-import vm.share.FileUtils;\n+import vm.mlvm.share.FileUtils;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/hiddenloader\/stress\/parallelLoad\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,3 +50,0 @@\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodType;\n@@ -58,1 +55,0 @@\n-import java.lang.reflect.InvocationTargetException;\n@@ -70,0 +66,1 @@\n+import vm.mlvm.share.FileUtils;\n@@ -71,1 +68,0 @@\n-import vm.share.FileUtils;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/indy\/stress\/gc\/lotsOfCallSites\/Test.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import vm.share.FileUtils;\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/share\/CustomClassLoaders.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -23,1 +23,1 @@\n-package vm.share;\n+package vm.mlvm.share;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/share\/FileUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/FileUtils.java","status":"renamed"},{"patch":"@@ -26,0 +26,3 @@\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n@@ -29,0 +32,2 @@\n+import com.sun.management.HotSpotDiagnosticMXBean;\n+\n@@ -31,1 +36,0 @@\n-import vm.share.ProcessUtils;\n@@ -264,0 +268,13 @@\n+    private static void dumpHeapWithHotspotDiagnosticMXBean(String fileName) throws IOException {\n+        System.err.println(\"Dumping heap to \" + fileName);\n+\n+        File f = new File(fileName);\n+        if (f.exists())\n+            f.delete();\n+\n+        HotSpotDiagnosticMXBean b = ManagementFactory.getPlatformMXBeans(\n+                com.sun.management.HotSpotDiagnosticMXBean.class).get(0);\n+        b.dumpHeap(fileName, false);\n+    }\n+\n+\n@@ -267,1 +284,1 @@\n-                ProcessUtils.dumpHeapWithHotspotDiagnosticMXBean(HEAP_DUMP_FILENAME);\n+                dumpHeapWithHotspotDiagnosticMXBean(HEAP_DUMP_FILENAME);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/share\/MlvmTestExecutor.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,119 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share;\n-\n-import java.io.*;\n-import java.util.LinkedList;\n-\n-\/**\n- * Utility class intended to read file line by line and skip comments.\n- *\/\n-public class CommentedFileReader {\n-\n-    \/**\n-     * Type of comments that should be removed from file.\n-     *\/\n-    public static enum CommentStyle {\n-        \/**\n-         * Comments started with <i>#<\/i>.\n-         *\/\n-        BASH,\n-        \/**\n-         * Comments started with <i>\/\/<\/i>.\n-         *\/\n-        JAVA\n-    }\n-\n-    \/**\n-     * Get lines from specified file and filter out comments.\n-     * Only comments in BASH style will be filtered out.\n-     *\n-     * @param path to file that should be readed\n-     * @return filtered lines from file\n-     *\/\n-    public static String[] readFile(String path) throws IOException {\n-        return readFile(new File(path), CommentStyle.BASH);\n-    }\n-\n-    \/**\n-     * Get lines from specified file and filter out comments.\n-     * Only comments in BASH style will be filtered out.\n-     *\n-     * @param file that should be readed\n-     * @return filtered lines from file\n-     *\/\n-    public static String[] readFile(File file) throws IOException {\n-        return readFile(file, CommentStyle.BASH);\n-    }\n-\n-    \/**\n-     * Get lines from specified file without comments.\n-     *\n-     * @param path to file that should be readed\n-     * @param commentStyle describes what strings will be treated as comments\n-     * @return filtered lines from file\n-     *\/\n-    public static String[] readFile(String path, CommentStyle commentStyle) throws IOException {\n-        return readFile(new File(path), commentStyle);\n-    }\n-\n-    \/**\n-     * Get lines from specified file without comments.\n-     *\n-     * @param file that should be readed\n-     * @param commentStyle describes what strings will be treated as comments\n-     * @return filtered lines from file\n-     *\/\n-    public static String[] readFile(File file, CommentStyle commentStyle) throws IOException {\n-        LinkedList<String> entries = new LinkedList<String>();\n-        BufferedReader reader = new BufferedReader(new FileReader(file));\n-        String commentBeginning;\n-\n-        switch (commentStyle) {\n-        case BASH:\n-            commentBeginning = \"#\";\n-            break;\n-        case JAVA:\n-            commentBeginning = \"\/\/\";\n-            break;\n-        default:\n-            throw new IllegalArgumentException(\"Unknown comment style\");\n-        }\n-\n-        while (true) {\n-            String entry = reader.readLine();\n-            if (entry == null) {\n-                break;\n-            }\n-\n-            entry = entry.replaceAll(commentBeginning + \".*\", \"\").trim();\n-\n-            if (entry.length() > 0) {\n-                entries.add(entry);\n-            }\n-        }\n-\n-        return entries.toArray(new String[entries.size()]);\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/CommentedFileReader.java","additions":0,"deletions":119,"binary":false,"changes":119,"status":"deleted"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"native_thread.hpp\"\n@@ -27,3 +26,0 @@\n-#include <process.h>\n-#include <vdmdbg.h>\n-#include <dbghelp.h>\n@@ -38,34 +34,0 @@\n-\/*\n- * Class:     vm_share_ProcessUtils\n- * Method:    sendSignal\n- * Signature: ()Z\n- *\/\n-JNIEXPORT jboolean JNICALL Java_vm_share_ProcessUtils_sendSignal\n-(JNIEnv *env, jclass klass, jint signalNum) {\n-#ifdef _WIN32\n-\/* TODO TODO TODO\n-        int dw;\n-        LPVOID lpMsgBuf;\n-        if (!GenerateConsoleCtrlEvent(CTRL_BREAK_EVENT, 0)) {\n-                dw = GetLastError();\n-                FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,\n-                                nullptr,\n-                                dw,\n-                                MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n-                                (LPTSTR) &lpMsgBuf,\n-                                0,\n-                                nullptr\n-                             );\n-                printf(\"%s\\n\", (LPTSTR)lpMsgBuf);\n-                LocalFree(lpMsgBuf);\n-                return JNI_FALSE;\n-        }\n-        *\/\n-        return JNI_TRUE;\n-#else \/* _WIN32 *\/\n-        if (kill(getpid(), signalNum) < 0)\n-                return JNI_FALSE;\n-        return JNI_TRUE;\n-#endif \/* _WIN32 *\/\n-}\n-\n@@ -104,163 +66,0 @@\n-#ifdef _WIN32\n-static BOOL  (WINAPI *_MiniDumpWriteDump)  (HANDLE, DWORD, HANDLE, MINIDUMP_TYPE, PMINIDUMP_EXCEPTION_INFORMATION,\n-                                            PMINIDUMP_USER_STREAM_INFORMATION, PMINIDUMP_CALLBACK_INFORMATION);\n-void reportLastError(const char *msg) {\n-        long errcode = GetLastError();\n-        if (errcode != 0) {\n-                DWORD len = 0;\n-                char *buf;\n-                size_t n = (size_t)FormatMessage(\n-                                FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,\n-                                nullptr,\n-                                errcode,\n-                                0,\n-                                (LPSTR) &buf,\n-                                (DWORD)len,\n-                                nullptr);\n-                if (n > 3) {\n-                        \/* Drop final '.', CR, LF *\/\n-                        if (buf[n - 1] == '\\n') n--;\n-                        if (buf[n - 1] == '\\r') n--;\n-                        if (buf[n - 1] == '.') n--;\n-                        buf[n] = '\\0';\n-                }\n-                printf(\"%s: %s\\n\", msg, buf);\n-                LocalFree(buf);\n-        }\n-}\n-\n-#endif \/* _WIN32 *\/\n-\n-jboolean doDumpCore() {\n-#ifdef _WIN32\n-        char path[MAX_PATH];\n-        DWORD size;\n-        DWORD pathLen = (DWORD) sizeof(path);\n-        HINSTANCE dbghelp;\n-        MINIDUMP_EXCEPTION_INFORMATION* pmei;\n-\n-        HANDLE hProcess = GetCurrentProcess();\n-        DWORD processId = GetCurrentProcessId();\n-        HANDLE dumpFile;\n-        MINIDUMP_TYPE dumpType;\n-        static const char* cwd;\n-        static const char* name = \"DBGHELP.DLL\";\n-\n-        printf(\"# TEST: creating Windows minidump...\\n\");\n-        size = GetSystemDirectory(path, pathLen);\n-        if (size > 0) {\n-                strcat(path, \"\\\\\");\n-                strcat(path, name);\n-                dbghelp = LoadLibrary(path);\n-                if (dbghelp == nullptr)\n-                        reportLastError(\"Load DBGHELP.DLL from system directory\");\n-        } else {\n-                printf(\"GetSystemDirectory returned 0\\n\");\n-        }\n-\n-        \/\/ try Windows directory\n-        if (dbghelp == nullptr) {\n-                size = GetWindowsDirectory(path, pathLen);\n-                if (size > 6) {\n-                        strcat(path, \"\\\\\");\n-                        strcat(path, name);\n-                        dbghelp = LoadLibrary(path);\n-                        if (dbghelp == nullptr) {\n-                                reportLastError(\"Load DBGHELP.DLL from Windows directory\");\n-                        }\n-                }\n-        }\n-        if (dbghelp == nullptr) {\n-                printf(\"Failed to load DBGHELP.DLL\\n\");\n-                return JNI_FALSE;\n-        }\n-\n-        _MiniDumpWriteDump =\n-                        (BOOL(WINAPI *)(HANDLE, DWORD, HANDLE, MINIDUMP_TYPE, PMINIDUMP_EXCEPTION_INFORMATION,\n-                                        PMINIDUMP_USER_STREAM_INFORMATION, PMINIDUMP_CALLBACK_INFORMATION))\n-                                        GetProcAddress(dbghelp, \"MiniDumpWriteDump\");\n-\n-        if (_MiniDumpWriteDump == nullptr) {\n-                printf(\"Failed to find MiniDumpWriteDump() in module dbghelp.dll\");\n-                return JNI_FALSE;\n-        }\n-        dumpType = (MINIDUMP_TYPE)(MiniDumpWithFullMemory | MiniDumpWithHandleData);\n-\n-        \/\/ Older versions of dbghelp.h doesn't contain all the dumptypes we want, dbghelp.h with\n-        \/\/ API_VERSION_NUMBER 11 or higher contains the ones we want though\n-#if API_VERSION_NUMBER >= 11\n-        dumpType = (MINIDUMP_TYPE)(dumpType | MiniDumpWithFullMemoryInfo | MiniDumpWithThreadInfo |\n-                        MiniDumpWithUnloadedModules);\n-#endif\n-\n-        dumpFile = CreateFile(\"core.mdmp\", GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr);\n-\n-        if (dumpFile == INVALID_HANDLE_VALUE) {\n-                reportLastError(\"Failed to create file for dumping\");\n-                return JNI_FALSE;\n-        }\n-        pmei = nullptr;\n-\n-\n-        \/\/ Older versions of dbghelp.dll (the one shipped with Win2003 for example) may not support all\n-        \/\/ the dump types we really want. If first call fails, lets fall back to just use MiniDumpWithFullMemory then.\n-        if (_MiniDumpWriteDump(hProcess, processId, dumpFile, dumpType, pmei, nullptr, nullptr) == FALSE &&\n-                        _MiniDumpWriteDump(hProcess, processId, dumpFile, (MINIDUMP_TYPE)MiniDumpWithFullMemory, pmei, nullptr, nullptr) == FALSE) {\n-                reportLastError(\"Call to MiniDumpWriteDump() failed\");\n-                return JNI_FALSE;\n-        }\n-\n-        CloseHandle(dumpFile);\n-        printf(\"# TEST: minidump created\\n\");\n-        \/\/ Emulate Unix behaviour - exit process.\n-        ExitProcess(137);\n-\n-        return JNI_TRUE;\n-#else \/* _WIN32 *\/\n-        if (kill(getpid(), SIGSEGV) < 0)\n-                return JNI_FALSE;\n-        return JNI_TRUE;\n-#endif \/* _WIN32 *\/\n-\n-}\n-\n-\/*\n- * Class:     vm_share_ProcessUtils\n- * Method:    dumpCore\n- * Signature: ()Z\n- *\/\n-JNIEXPORT jboolean JNICALL Java_vm_share_ProcessUtils_dumpCore\n-  (JNIEnv *env, jclass klass)\n-{\n-        return doDumpCore();\n-}\n-\n-\/*\n- * Class:     vm_share_ProcessUtils\n- * Method:    getPid\n- * Signature: ()I\n- *\/\n-JNIEXPORT jint JNICALL Java_vm_share_ProcessUtils_getPid\n-  (JNIEnv *env, jclass klass) {\n-#ifdef _WIN32\n-        return _getpid();\n-#else \/* _WIN32 *\/\n-        return getpid();\n-#endif \/* _WIN32 *\/\n-}\n-\n-\n-\/*\n- * Class:     vm_share_ProcessUtils\n- * Method:    getPid\n- * Signature: ()I\n- *\/\n-JNIEXPORT jint JNICALL Java_vm_share_ProcessUtils_getWindowsPid\n-  (JNIEnv *env, jclass klass, jlong handle) {\n-#ifdef _WIN32\n-        return GetProcessId((HANDLE) handle);\n-#else \/* _WIN32 *\/\n-        return -1;\n-#endif \/* _WIN32 *\/\n-}\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/ProcessUtils.cpp","additions":0,"deletions":201,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,63 +49,0 @@\n-\n-    \/**\n-     * Send any signal to java process on Unix. It currently does nothing on Windows.\n-     *\n-     * @return true if it was successful\n-     *\/\n-    public static native boolean sendSignal(int signalNum);\n-\n-    \/**\n-     * Force java process to dump core.\n-     *\n-     * This is done by sending SIGSEGV on unix systems.\n-     *\n-     * @return true if it was successful, false if not (for example on Windows)\n-     *\/\n-    public static native boolean dumpCore();\n-\n-    \/**\n-     * Get PID of java process.\n-     *\n-     * @return PID\n-     *\/\n-    public static native int getPid();\n-\n-    public static int getPid(Process process) {\n-        Throwable exception;\n-        try {\n-            Field pidField = process.getClass().getDeclaredField(\"pid\");\n-            pidField.setAccessible(true);\n-            return ((Integer) pidField.get(process)).intValue();\n-        } catch (NoSuchFieldException e) {\n-            exception = e;\n-        } catch (IllegalAccessException e) {\n-            exception = e;\n-        }\n-        \/\/ Try to get Windows handle\n-        try {\n-            Field handleField = process.getClass().getDeclaredField(\"handle\");\n-            handleField.setAccessible(true);\n-            long handle = ((Long) handleField.get(process)).longValue();\n-            return getWindowsPid(handle);\n-        } catch (NoSuchFieldException e) {\n-            exception = e;\n-        } catch (IllegalAccessException e) {\n-            exception = e;\n-        }\n-        throw new TestBug(\"Unable to determine pid from process class \" + process.getClass(), exception);\n-    }\n-\n-    private static native int getWindowsPid(long handle);\n-\n-    @SuppressWarnings(\"restriction\")\n-    public static void dumpHeapWithHotspotDiagnosticMXBean(String fileName) throws IOException {\n-        System.err.println(\"Dumping heap to \" + fileName);\n-\n-        File f = new File(fileName);\n-        if (f.exists())\n-            f.delete();\n-\n-        HotSpotDiagnosticMXBean b = ManagementFactory.getPlatformMXBeans(\n-                com.sun.management.HotSpotDiagnosticMXBean.class).get(0);\n-        b.dumpHeap(fileName, false);\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/ProcessUtils.java","additions":1,"deletions":64,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Random;\n-import java.util.function.Predicate;\n-import java.util.function.Supplier;\n-\n-import jdk.test.lib.Utils;\n-\n-public class RandomEx extends Random {\n-    private final Map<Class<?>, Supplier<?>> map = new HashMap<>();\n-\n-    {\n-        map.put(Boolean.class, this::nextBoolean);\n-        map.put(boolean.class, this::nextBoolean);\n-        map.put(Byte.class, this::nextByte);\n-        map.put(byte.class, this::nextByte);\n-        map.put(Short.class, this::nextShort);\n-        map.put(short.class, this::nextShort);\n-        map.put(Character.class, this::nextChar);\n-        map.put(char.class, this::nextChar);\n-        map.put(Integer.class, this::nextInt);\n-        map.put(int.class, this::nextInt);\n-        map.put(Long.class, this::nextLong);\n-        map.put(long.class, this::nextLong);\n-        map.put(Float.class, this::nextFloat);\n-        map.put(float.class, this::nextFloat);\n-        map.put(Double.class, this::nextDouble);\n-        map.put(double.class, this::nextDouble);\n-    }\n-\n-    public RandomEx() {\n-        super(Utils.getRandomInstance().nextLong());\n-    }\n-\n-    public RandomEx(long seed) {\n-        super(seed);\n-    }\n-\n-    public byte nextByte() {\n-        return (byte) next(Byte.SIZE);\n-    }\n-\n-    public short nextShort() {\n-        return (short) next(Short.SIZE);\n-    }\n-\n-    public char nextChar() {\n-        return (char) next(Character.SIZE);\n-    }\n-\n-    public <T> T next(Predicate<T> p, T dummy) {\n-        T result;\n-        do {\n-            result = next(dummy);\n-        } while (!p.test(result));\n-        return result;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T next(T dummy) {\n-        Supplier<?> supplier = map.get(dummy.getClass());\n-        if (supplier == null) {\n-            throw new IllegalArgumentException(\"supplier for <\" +\n-                    dummy.getClass() + \">is not found\");\n-        }\n-        return (T) supplier.get();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/RandomEx.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.util.Random;\n-import java.util.function.Predicate;\n-\n-public class StringUtils {\n-\n-    public static byte[] binaryReplace(final byte[] src, String search,\n-            String replacement) {\n-        if (search.length() == 0)\n-            return src;\n-\n-        int nReplaced = 0;\n-\n-        try {\n-            final byte[] bSrch = search.getBytes(\"ASCII\");\n-            final byte[] bRepl = replacement.getBytes(\"ASCII\");\n-\n-            ByteArrayOutputStream out = new ByteArrayOutputStream();\n-            try {\n-                searching: for (int i = 0; i < src.length; i++) {\n-                    if (src[i] == bSrch[0]) {\n-                        replacing: do {\n-                            for (int ii = 1; ii < Math.min(bSrch.length,\n-                                    src.length - i); ii++)\n-                                if (src[i + ii] != bSrch[ii])\n-                                    break replacing;\n-\n-                            out.write(bRepl);\n-                            i += bSrch.length - 1;\n-                            nReplaced++;\n-                            continue searching;\n-                        } while (false);\n-                    }\n-\n-                    out.write(src[i]);\n-                }\n-\n-            return out.toByteArray();\n-\n-            } finally {\n-                out.close();\n-            }\n-        } catch (Exception e) {\n-            RuntimeException t = new RuntimeException(\"Test internal error\");\n-            t.initCause(e);\n-            throw t;\n-        }\n-    }\n-\n-    public static String generateString(Random rng, int length,\n-            Predicate<Character> predicate) {\n-        if (length <= 0) {\n-            throw new IllegalArgumentException(\"length <= 0\");\n-        }\n-        StringBuilder builder = new StringBuilder(length);\n-        for (int i = 0; i < length; ++i) {\n-            char tmp;\n-            do {\n-                tmp = (char) rng.nextInt(Character.MAX_VALUE);\n-            } while (!predicate.test(tmp));\n-            builder.append(tmp);\n-        }\n-        return builder.toString();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/StringUtils.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share;\n-\n-import java.lang.reflect.Field;\n-\n-import jdk.internal.misc.Unsafe;\n-\n-@SuppressWarnings(\"restriction\")\n-public class UnsafeAccess {\n-    public static Unsafe unsafe;\n-\n-    static {\n-        try {\n-            unsafe = Unsafe.getUnsafe();\n-        } catch ( Exception e ) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/UnsafeAccess.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share;\n-\n-import com.sun.management.HotSpotDiagnosticMXBean;\n-import com.sun.management.VMOption;\n-\n-import java.lang.management.ManagementFactory;\n-import java.util.Objects;\n-\n-public class VMRuntimeEnvUtils {\n-    private static HotSpotDiagnosticMXBean DIAGNOSTIC_BEAN\n-            = ManagementFactory.getPlatformMXBean(HotSpotDiagnosticMXBean.class);\n-\n-    private VMRuntimeEnvUtils() {\n-    }\n-\n-    public static boolean isJITEnabled() {\n-        boolean isJITEnabled = ManagementFactory.getCompilationMXBean() != null;\n-\n-        return isJITEnabled;\n-    }\n-\n-    \/**\n-     * Returns value of VM option.\n-     *\n-     * @param name option's name\n-     * @return value of option or {@code null}, if option doesn't exist\n-     * @throws NullPointerException if name is null\n-     * @see HotSpotDiagnosticMXBean#getVMOption(String)\n-     *\/\n-    public static String getVMOption(String name) {\n-        Objects.requireNonNull(name);\n-        VMOption tmp;\n-        try {\n-            tmp = DIAGNOSTIC_BEAN.getVMOption(name);\n-        } catch (IllegalArgumentException e) {\n-            tmp = null;\n-        }\n-        return (tmp == null ? null : tmp.getValue());\n-    }\n-\n-    \/**\n-     * Returns value of VM option or default value.\n-     *\n-     * @param name         option's name\n-     * @param defaultValue default value\n-     * @return value of option or {@code defaultValue}, if option doesn't exist\n-     * @throws NullPointerException if name is null\n-     * @see #getVMOption(String)\n-     *\/\n-    public static String getVMOption(String name, String defaultValue) {\n-        String result = getVMOption(name);\n-        return result == null ? defaultValue : result;\n-    }\n-\n-    \/**\n-     * Returns if a boolean VM option is enabled or not.\n-     *\n-     * @param name  option's name\n-     * @return true iff enabled\n-     * @throws IllegalArgumentException if naming non-boolean or non-existing option\n-     *\/\n-    public static boolean isVMOptionEnabled(String name) {\n-        String isSet = getVMOption(name, \"error\");\n-        if (isSet.equals(\"true\")) {\n-            return true;\n-        } else if (isSet.equals(\"false\")) {\n-            return false;\n-        }\n-        throw new IllegalArgumentException(name + \" is not a boolean option.\");\n-    }\n-\n-    \/**\n-     * Sets a specified value for VM option of given name.\n-     *\n-     * @param name  option's name\n-     * @param value new value\n-     * @throws NullPointerException     if name is null\n-     * @throws IllegalArgumentException if new value is invalid or if vm option\n-     *                                  is not writable.\n-     * @see HotSpotDiagnosticMXBean#setVMOption(String, String)\n-     *\/\n-    public static void setVMOption(String name, String value) {\n-        Objects.requireNonNull(name);\n-        DIAGNOSTIC_BEAN.setVMOption(name, value);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/VMRuntimeEnvUtils.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.monitoring.data;\n-\n-import java.lang.management.*;\n-import javax.management.*;\n-import java.io.Serializable;\n-\n-public class MemoryManagerData implements MemoryManagerMXBean, Serializable {\n-        private String[] memoryPoolNames;\n-        private String name;\n-        private boolean valid;\n-\n-        public MemoryManagerData(String[] memoryPoolNames, String name, boolean valid) {\n-                this.memoryPoolNames = memoryPoolNames;\n-                this.name = name;\n-                this.valid = valid;\n-        }\n-\n-        public MemoryManagerData(MemoryManagerMXBean memoryManager) {\n-                this.memoryPoolNames = memoryManager.getMemoryPoolNames();\n-                this.name = memoryManager.getName();\n-                this.valid = memoryManager.isValid();\n-        }\n-\n-        public String[] getMemoryPoolNames() {\n-                return memoryPoolNames;\n-        }\n-\n-        public String getName() {\n-                return name;\n-        }\n-\n-        public boolean isValid() {\n-                return valid;\n-        }\n-\n-    public ObjectName getObjectName() {\n-        return null;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/monitoring\/data\/MemoryManagerData.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.monitoring.data;\n-\n-import java.lang.management.MemoryPoolMXBean;\n-import java.io.Serializable;\n-\n-public class MemoryPoolData implements Serializable {\n-        private String name;\n-        private boolean valid;\n-        private MemoryUsageData usage;\n-\n-        public MemoryPoolData(String name, boolean valid, MemoryUsageData usage) {\n-                this.name = name;\n-                this.valid = valid;\n-        }\n-\n-        public MemoryPoolData(MemoryPoolMXBean memoryManager) {\n-                this.name = memoryManager.getName();\n-                this.valid = memoryManager.isValid();\n-                this.usage = new MemoryUsageData(memoryManager.getUsage());\n-        }\n-\n-        public String getName() {\n-                return name;\n-        }\n-\n-        public boolean hasName(String name) {\n-                return this.name.equals(name);\n-        }\n-\n-        public boolean isValid() {\n-                return valid;\n-        }\n-\n-        public MemoryUsageData getUsage() {\n-                return usage;\n-        }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/monitoring\/data\/MemoryPoolData.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.monitoring.data;\n-\n-import java.io.Serializable;\n-import java.lang.management.MemoryUsage;\n-import nsk.share.log.Log;\n-\n-public class MemoryUsageData implements Serializable {\n-        private long init;\n-        private long used;\n-        private long committed;\n-        private long max;\n-\n-        public MemoryUsageData(long init, long used, long committed, long max) {\n-                this.init = init;\n-                this.used = used;\n-                this.committed = committed;\n-                this.max = max;\n-        }\n-\n-        public MemoryUsageData(MemoryUsage usage) {\n-                this.init = usage.getInit();\n-                this.used = usage.getUsed();\n-                this.committed = usage.getCommitted();\n-                this.max = usage.getMax();\n-        }\n-\n-        public MemoryUsageData(MemoryUsageData usage, MemoryUsageData usage1) {\n-                this.init = usage.getInit() + usage1.getInit();\n-                this.used = usage.getUsed() + usage1.getUsed();\n-                this.committed = usage.getCommitted() + usage1.getCommitted();\n-                this.max = usage.getMax() + usage1.getMax();\n-        }\n-\n-        public long getInit() {\n-                return init;\n-        }\n-\n-        public long getUsed() {\n-                return used;\n-        }\n-\n-        public long getMax() {\n-                return max;\n-        }\n-\n-        public long getFree() {\n-                return committed - used;\n-        }\n-\n-        public long getCommitted() {\n-                return committed;\n-        }\n-\n-        public void log(Log log) {\n-                log.info(\"    Init: \" + init);\n-                log.info(\"    Used: \" + used);\n-                log.info(\"    Committed: \" + committed);\n-                log.info(\"    Max: \" + max);\n-        }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/monitoring\/data\/MemoryUsageData.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.process;\n-\n-import java.io.IOException;\n-import java.util.Collection;\n-\n-public class CmdExecutor extends ProcessExecutor {\n-    private final StringBuilder cmd = new StringBuilder();\n-    @Override\n-    public void clearArgs() {\n-        cmd.setLength(0);\n-    }\n-\n-    @Override\n-    public void addArg(String arg) {\n-        cmd.append(\" \" + arg);\n-    }\n-\n-    @Override\n-    public void addArgs(String[] args) {\n-        for (String arg : args) {\n-            addArg(arg);\n-        }\n-    }\n-\n-    @Override\n-    public void addArgs(Collection<String> args) {\n-        for (String arg : args) {\n-            addArg(arg);\n-        }\n-    }\n-\n-    @Override\n-    protected Process createProcess() throws IOException {\n-        return Runtime.getRuntime().exec(cmd.toString());\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return cmd.toString();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/CmdExecutor.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.process;\n-\n-import java.util.List;\n-\n-public interface MessageInput {\n-        public boolean waitForStart(long timeout) throws InterruptedException;\n-        public boolean waitForMessage(long timeout) throws InterruptedException;\n-        public boolean waitForMessage(String msg, long timeout) throws InterruptedException;\n-        public String getMessage();\n-        public List<String> getMessages();\n-        public List<String> getMessages(int to);\n-        public List<String> getMessages(int from, int to);\n-        public boolean waitForFinish(long timeout) throws InterruptedException;\n-        public void reset();\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/MessageInput.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.process;\n-\n-public interface MessageOutput {\n-        public void start();\n-        public void send(String msg);\n-        public void finish();\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/MessageOutput.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.process;\n-\n-import java.util.List;\n-\n-public class ProcessHandler implements MessageInput, MessageOutput {\n-        private StreamMessageInput stdout = new StreamMessageInput();\n-        private StreamMessageInput stderr = new StreamMessageInput();\n-        private StreamMessageOutput stdin = new StreamMessageOutput();\n-\n-        public ProcessHandler() {\n-        }\n-\n-        public ProcessHandler(ProcessExecutor exec) {\n-                bind(exec);\n-        }\n-\n-        public void bind(ProcessExecutor exec) {\n-                exec.addStdOutListener(stdout.createListener());\n-                exec.addStdErrListener(stderr.createListener());\n-                exec.start();\n-                stdin.bind(exec.getStdIn());\n-        }\n-\n-        public boolean waitForStart(long timeout) throws InterruptedException {\n-                return stdout.waitForStart(timeout) && stderr.waitForStart(timeout);\n-        }\n-\n-        public boolean waitForMessage(long timeout) throws InterruptedException {\n-                return stdout.waitForMessage(timeout);\n-        }\n-\n-        public boolean waitForMessage(String msg, long timeout) throws InterruptedException {\n-                return stdout.waitForMessage(msg, timeout);\n-        }\n-\n-        public String getMessage() {\n-                return stdout.getMessage();\n-        }\n-\n-        public List<String> getMessages() {\n-                return stdout.getMessages();\n-        }\n-\n-        public List<String> getMessages(int to) {\n-                return stdout.getMessages(to);\n-        }\n-\n-        public List<String> getMessages(int from, int to) {\n-                return stdout.getMessages(from, to);\n-        }\n-\n-        public boolean waitForStdErrMessage(String msg, long timeout) throws InterruptedException {\n-                return stderr.waitForMessage(msg, timeout);\n-        }\n-\n-        public String getStdErrMessage() {\n-                return stderr.getMessage();\n-        }\n-\n-        public boolean waitForFinish(long timeout) throws InterruptedException {\n-                return stdout.waitForFinish(timeout) && stderr.waitForFinish(timeout);\n-        }\n-\n-        public void start() {\n-                stdin.start();\n-        }\n-\n-        public void send(String msg) {\n-                stdin.send(msg);\n-        }\n-\n-        public void finish() {\n-                stdin.finish();\n-        }\n-\n-        public void reset() {\n-                stdout.reset();\n-                stderr.reset();\n-        }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/ProcessHandler.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -1,187 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.process;\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import nsk.share.TestBug;\n-\n-public class StreamMessageInput implements MessageInput {\n-        private Object sync = new Object();\n-        private List<String> lines = new ArrayList<String>();\n-        private int position = 0;\n-        private volatile boolean active = false;\n-        private volatile Throwable exception;\n-\n-        public StreamMessageInput() {\n-        }\n-\n-        public StreamMessageInput(StreamReader sd) {\n-                bind(sd);\n-        }\n-\n-        public StreamListener createListener() {\n-                return new Listener();\n-        }\n-\n-        public void bind(StreamReader sd) {\n-                sd.addListener(createListener());\n-        }\n-\n-        public boolean isActive() {\n-                return active;\n-        }\n-\n-        public boolean isException() {\n-                return exception != null;\n-        }\n-\n-        public Throwable getException() {\n-                return exception;\n-        }\n-\n-        public boolean waitForStart(long timeout) throws InterruptedException {\n-                long startTime = System.currentTimeMillis();\n-                long curTime = startTime;\n-                synchronized (sync) {\n-                        while (!active && curTime - startTime < timeout) {\n-                                sync.wait(curTime - startTime);\n-                                curTime = System.currentTimeMillis();\n-                        }\n-                }\n-                return active;\n-        }\n-\n-        public boolean waitForFinish(long timeout) throws InterruptedException {\n-                long startTime = System.currentTimeMillis();\n-                long curTime = startTime;\n-                synchronized (sync) {\n-                        while (active && curTime - startTime < timeout) {\n-                                sync.wait(curTime - startTime);\n-                                curTime = System.currentTimeMillis();\n-                        }\n-                }\n-                return !active;\n-        }\n-\n-        public boolean waitForMessage(String msg, long timeout) throws InterruptedException {\n-                long startTime = System.currentTimeMillis();\n-                long curTime = startTime;\n-                int n = position;\n-                synchronized (sync) {\n-                        while (curTime - startTime < timeout) {\n-                                while (n < lines.size()) {\n-                                        \/\/ System.out.println(\"Check: \" + lines.get(n));\n-                                        if (msg == null || lines.get(n++).contains(msg)) {\n-                                                return true;\n-                                        }\n-                                }\n-                                sync.wait(timeout - (curTime - startTime));\n-                                curTime = System.currentTimeMillis();\n-                        }\n-                        return false;\n-                }\n-        }\n-\n-        public boolean waitForMessage(long timeout) throws InterruptedException {\n-                return waitForMessage(null, timeout);\n-        }\n-\n-        public String getMessage() {\n-                if (position < lines.size())\n-                        return lines.get(position++);\n-                else\n-                        return null;\n-        }\n-\n-        public String getMessage(int index) {\n-                return lines.get(index);\n-        }\n-\n-        public int getPosition() {\n-                return position;\n-        }\n-\n-        public void setPosition(int position) {\n-                this.position = position;\n-        }\n-\n-        public int getMessageCount() {\n-                return lines.size();\n-        }\n-\n-        public List<String> getMessages() {\n-                return getMessages(position, lines.size());\n-        }\n-\n-        public List<String> getMessages(int to) {\n-                return getMessages(position, to);\n-        }\n-\n-        public List<String> getMessages(int from, int to) {\n-                synchronized (sync) {\n-                        if (to < 0)\n-                                to = lines.size() + to;\n-                        position = Math.max(position, to);\n-                        return new ArrayList<String>(lines.subList(from, to));\n-                }\n-        }\n-\n-        public void reset() {\n-                synchronized (sync) {\n-                        position = lines.size();\n-                }\n-        }\n-\n-        private class Listener implements StreamListener {\n-                @Override\n-                public void onStart() {\n-                        synchronized (sync) {\n-                                active = true;\n-                                sync.notifyAll();\n-                        }\n-                }\n-\n-                @Override\n-                public void onRead(String line) {\n-                        \/\/System.out.println(\"onRead: \" + line);\n-                        synchronized (sync) {\n-                                lines.add(line);\n-                                sync.notifyAll();\n-                        }\n-                }\n-\n-                @Override\n-                public void onFinish() {\n-                        synchronized (sync) {\n-                                active = false;\n-                                sync.notifyAll();\n-                        }\n-                }\n-\n-                @Override\n-                public void onException(Throwable e) {\n-                        exception = e;\n-                }\n-        }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/StreamMessageInput.java","additions":0,"deletions":187,"binary":false,"changes":187,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.process;\n-\n-import java.io.OutputStream;\n-import java.io.PrintStream;\n-import java.io.IOException;\n-import nsk.share.TestFailure;\n-\n-public class StreamMessageOutput implements MessageOutput {\n-        private OutputStream out;\n-        private PrintStream pout;\n-\n-        public StreamMessageOutput() {\n-        }\n-\n-        public StreamMessageOutput(OutputStream out) {\n-                bind(out);\n-        }\n-\n-        public void bind(OutputStream out) {\n-                this.out = out;\n-                this.pout = new PrintStream(out, true); \/\/ Autoflush is important\n-        }\n-\n-        public void start() {\n-        }\n-\n-        public void send(String msg) {\n-                pout.println(msg);\n-        }\n-\n-        public void finish() {\n-                pout.close();\n-        }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/process\/StreamMessageOutput.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.transform;\n-\n-import java.lang.instrument.ClassFileTransformer;\n-import java.lang.instrument.IllegalClassFormatException;\n-import java.security.ProtectionDomain;\n-\n-public abstract class AbstractClassFileTransformer\n-        implements ClassFileTransformer {\n-    protected abstract boolean shouldBeTransformed(String name);\n-\n-    protected abstract byte[] transformClass(byte[] bytes);\n-\n-    @Override\n-    public byte[] transform(ClassLoader loader, String className,\n-            Class<?> classBeingRedefined, ProtectionDomain protectionDomain,\n-            byte[] classfileBuffer) throws IllegalClassFormatException {\n-        if (shouldBeTransformed(className)) {\n-            return transformClass(classfileBuffer);\n-        }\n-        return null;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/transform\/AbstractClassFileTransformer.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.transform;\n-\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-\n-public abstract class AnnotationAppender {\n-    private final String desc;\n-    private final boolean visible;\n-    private boolean annotationPresent;\n-\n-    public AnnotationAppender(String desc, boolean visible) {\n-        this.desc = desc;\n-        this.visible = visible;\n-    }\n-\n-    public void checkAnnotation(String desc, boolean isVisible) {\n-        annotationPresent |= visible == isVisible && this.desc.equals(desc);\n-    }\n-\n-    public void addAnnotation(VisitAnnotation func) {\n-        if (shouldAdd()) {\n-            AnnotationVisitor av = func.visit(desc, true);\n-            if (av != null) {\n-                postCreate(av);\n-                av.visitEnd();\n-                annotationPresent = true;\n-            }\n-        }\n-    }\n-\n-    protected boolean shouldAdd() {\n-        return !annotationPresent;\n-    }\n-\n-    protected abstract void postCreate(AnnotationVisitor av);\n-\n-    @FunctionalInterface\n-    public static interface VisitAnnotation {\n-        AnnotationVisitor visit(String desc, boolean visible);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/transform\/AnnotationAppender.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package vm.share.transform;\n-\n-import vm.share.FileUtils;\n-\n-public class TransformingClassLoader extends ClassLoader {\n-    private final AbstractClassFileTransformer transformer;\n-\n-    protected TransformingClassLoader(ClassLoader parent,\n-            AbstractClassFileTransformer transformer) {\n-        super(parent);\n-        this.transformer = transformer;\n-    }\n-\n-    @Override\n-    protected Class<?> loadClass(String name, boolean resolve)\n-            throws ClassNotFoundException {\n-        if (!transformer.shouldBeTransformed(name)) {\n-            return super.loadClass(name, resolve);\n-        }\n-        synchronized (getClassLoadingLock(name)) {\n-            \/\/ First, check if the class has already been loaded\n-            Class<?> c = findLoadedClass(name);\n-            if (c == null) {\n-                try {\n-                    byte[] bytes = FileUtils.readClass(name);\n-                    bytes = transformer.transformClass(bytes);\n-                    c = defineClass(name, bytes, 0, bytes.length);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                    return super.loadClass(name, resolve);\n-                }\n-            }\n-            if (resolve) {\n-                resolveClass(c);\n-            }\n-            return c;\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/transform\/TransformingClassLoader.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"}]}