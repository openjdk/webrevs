{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n- * @library \/java\/text\/testlib\n- * @run main\/timeout=2000 BreakIteratorTest\n+ * @run junit\/timeout=2000 BreakIteratorTest\n@@ -81,6 +80,1 @@\n-public class BreakIteratorTest extends IntlTest\n-{\n-    private BreakIterator characterBreak;\n-    private BreakIterator wordBreak;\n-    private BreakIterator lineBreak;\n-    private BreakIterator sentenceBreak;\n+import org.junit.jupiter.api.Test;\n@@ -88,3 +82,7 @@\n-    public static void main(String[] args) throws Exception {\n-        new BreakIteratorTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class BreakIteratorTest {\n+    private final BreakIterator characterBreak = BreakIterator.getCharacterInstance();\n+    private final BreakIterator wordBreak = BreakIterator.getWordInstance();\n+    private final BreakIterator lineBreak = BreakIterator.getLineInstance();\n+    private final BreakIterator sentenceBreak = BreakIterator.getSentenceInstance();\n@@ -92,7 +90,0 @@\n-    public BreakIteratorTest()\n-    {\n-        characterBreak = BreakIterator.getCharacterInstance();\n-        wordBreak = BreakIterator.getWordInstance();\n-        lineBreak = BreakIterator.getLineInstance();\n-        sentenceBreak = BreakIterator.getSentenceInstance();\n-    }\n@@ -118,2 +109,1 @@\n-        logln(\"comparing forward and backward...\");\n-        int errs = getErrorCount();\n+        System.out.println(\"comparing forward and backward...\");\n@@ -122,5 +112,3 @@\n-        if (getErrorCount() == errs) {\n-            logln(\"comparing expected and actual...\");\n-            compareFragmentLists(\"expected result\", \"actual result\", expectedResult,\n-                            nextResults);\n-        }\n+        System.out.println(\"comparing expected and actual...\");\n+        compareFragmentLists(\"expected result\", \"actual result\", expectedResult,\n+                        nextResults);\n@@ -149,1 +137,1 @@\n-            errln(\"first() returned \" + p + \" instead of 0\");\n+            fail(\"first() returned \" + p + \" instead of 0\");\n@@ -154,1 +142,1 @@\n-                    errln(\"next() failed to move forward: next() on position \"\n+                    fail(\"next() failed to move forward: next() on position \"\n@@ -161,1 +149,1 @@\n-                    errln(\"next() returned DONE prematurely: offset was \"\n+                    fail(\"next() returned DONE prematurely: offset was \"\n@@ -175,1 +163,1 @@\n-            errln(\"last() returned \" + p + \" instead of \" + text.length());\n+            fail(\"last() returned \" + p + \" instead of \" + text.length());\n@@ -180,1 +168,1 @@\n-                    errln(\"previous() failed to move backward: previous() on position \"\n+                    fail(\"previous() failed to move backward: previous() on position \"\n@@ -187,1 +175,1 @@\n-                    errln(\"previous() returned DONE prematurely: offset was \"\n+                    fail(\"previous() returned DONE prematurely: offset was \"\n@@ -230,1 +218,1 @@\n-                logln(\"*** \" + f1Name + \" has:\");\n+                System.out.println(\"*** \" + f1Name + \" has:\");\n@@ -237,1 +225,1 @@\n-                logln(\"***** \" + f2Name + \" has:\");\n+                System.out.println(\"***** \" + f2Name + \" has:\");\n@@ -244,1 +232,2 @@\n-                errln(\"Discrepancy between \" + f1Name + \" and \" + f2Name + \"\\n---\\n\" + f1 +\"\\n---\\n\" + f2);\n+                fail(\"Discrepancy between \" + f1Name + \" and \" + f2Name\n+                        + \"\\n---\\n\" + f1 +\"\\n---\\n\" + f2);\n@@ -250,1 +239,1 @@\n-        logln(\"testFollowing():\");\n+        System.out.println(\"testFollowing():\");\n@@ -259,1 +248,1 @@\n-                logln(\"bi.following(\" + i + \") -> \" + b);\n+                System.out.println(\"bi.following(\" + i + \") -> \" + b);\n@@ -261,1 +250,1 @@\n-                    errln(\"Wrong result from following() for \" + i + \": expected \" + boundaries[p]\n+                    fail(\"Wrong result from following() for \" + i + \": expected \" + boundaries[p]\n@@ -265,1 +254,1 @@\n-            errln(\"IllegalArgumentException caught from following() for offset: \" + i);\n+            fail(\"IllegalArgumentException caught from following() for offset: \" + i);\n@@ -270,1 +259,1 @@\n-        logln(\"testPreceding():\");\n+        System.out.println(\"testPreceding():\");\n@@ -276,1 +265,1 @@\n-                logln(\"bi.preceding(\" + i + \") -> \" + b);\n+                System.out.println(\"bi.preceding(\" + i + \") -> \" + b);\n@@ -278,1 +267,1 @@\n-                    errln(\"Wrong result from preceding() for \" + i + \": expected \" + boundaries[p]\n+                    fail(\"Wrong result from preceding() for \" + i + \": expected \" + boundaries[p]\n@@ -285,1 +274,1 @@\n-            errln(\"IllegalArgumentException caught from preceding() for offset: \" + i);\n+            fail(\"IllegalArgumentException caught from preceding() for offset: \" + i);\n@@ -290,1 +279,1 @@\n-        logln(\"testIsBoundary():\");\n+        System.out.println(\"testIsBoundary():\");\n@@ -295,1 +284,1 @@\n-            logln(\"bi.isBoundary(\" + i + \") -> \" + isB);\n+            System.out.println(\"bi.isBoundary(\" + i + \") -> \" + isB);\n@@ -299,1 +288,1 @@\n-                    errln(\"Wrong result from isBoundary() for \" + i + \": expected true, got false\");\n+                    fail(\"Wrong result from isBoundary() for \" + i + \": expected true, got false\");\n@@ -304,1 +293,1 @@\n-                    errln(\"Wrong result from isBoundary() for \" + i + \": expected false, got true\");\n+                    fail(\"Wrong result from isBoundary() for \" + i + \": expected false, got true\");\n@@ -311,1 +300,1 @@\n-        logln(\"Multiple selection test...\");\n+        System.out.println(\"Multiple selection test...\");\n@@ -320,1 +309,1 @@\n-            logln(\"next(\" + count + \") -> \" + testOffset);\n+            System.out.println(\"next(\" + count + \") -> \" + testOffset);\n@@ -322,1 +311,1 @@\n-                errln(\"next(n) and next() not returning consistent results: for step \" + count + \", next(n) returned \" + testOffset + \" and next() had \" + offset);\n+                fail(\"next(n) and next() not returning consistent results: for step \" + count + \", next(n) returned \" + testOffset + \" and next() had \" + offset);\n@@ -337,1 +326,1 @@\n-            logln(\"next(\" + count + \") -> \" + testOffset);\n+            System.out.println(\"next(\" + count + \") -> \" + testOffset);\n@@ -339,1 +328,1 @@\n-                errln(\"next(n) and next() not returning consistent results: for step \" + count + \", next(n) returned \" + testOffset + \" and next() had \" + offset);\n+                fail(\"next(n) and next() not returning consistent results: for step \" + count + \", next(n) returned \" + testOffset + \" and next() had \" + offset);\n@@ -385,1 +374,1 @@\n-                        errln(\"No break between U+\" + Integer.toHexString((int)(work.charAt(1)))\n+                        fail(\"No break between U+\" + Integer.toHexString((int)(work.charAt(1)))\n@@ -409,1 +398,1 @@\n-                        errln(\"Break between CR and LF in string U+\" + Integer.toHexString(\n+                        fail(\"Break between CR and LF in string U+\" + Integer.toHexString(\n@@ -447,1 +436,1 @@\n-                        errln(\"Break between U+\" + Integer.toHexString((int)(work.charAt(1)))\n+                        fail(\"Break between U+\" + Integer.toHexString((int)(work.charAt(1)))\n@@ -472,1 +461,1 @@\n-        logln(out.toString());\n+        System.out.println(out.toString());\n@@ -479,0 +468,1 @@\n+    @Test\n@@ -562,0 +552,1 @@\n+    @Test\n@@ -571,0 +562,1 @@\n+    @Test\n@@ -600,0 +592,1 @@\n+    @Test\n@@ -612,0 +605,1 @@\n+    @Test\n@@ -647,0 +641,1 @@\n+    @Test\n@@ -656,0 +651,1 @@\n+    @Test\n@@ -675,0 +671,1 @@\n+    @Test\n@@ -697,0 +694,1 @@\n+    @Test\n@@ -714,0 +712,1 @@\n+    @Test\n@@ -725,0 +724,1 @@\n+    @Test\n@@ -737,0 +737,1 @@\n+    @Test\n@@ -755,0 +756,1 @@\n+    @Test\n@@ -766,0 +768,1 @@\n+    @Test\n@@ -802,0 +805,1 @@\n+    @Test\n@@ -818,0 +822,1 @@\n+    @Test\n@@ -827,0 +832,1 @@\n+    @Test\n@@ -839,0 +845,1 @@\n+    @Test\n@@ -852,0 +859,1 @@\n+    @Test\n@@ -877,1 +885,1 @@\n-            logln(\"This test is skipped in th locale.\");\n+            System.out.println(\"This test is skipped in th locale.\");\n@@ -884,0 +892,1 @@\n+    @Test\n@@ -895,0 +904,1 @@\n+    @Test\n@@ -897,1 +907,1 @@\n-            logln(\"This test is skipped in th locale.\");\n+            System.out.println(\"This test is skipped in th locale.\");\n@@ -924,0 +934,1 @@\n+    @Test\n@@ -955,0 +966,1 @@\n+    @Test\n@@ -995,0 +1007,1 @@\n+    @Test\n@@ -1008,1 +1021,1 @@\n-                    errln(\"Didn't get exception with offset = \" + index +\n+                    fail(\"Didn't get exception with offset = \" + index +\n@@ -1013,1 +1026,1 @@\n-                    errln(\"Got exception with offset = \" + index +\n+                    fail(\"Got exception with offset = \" + index +\n@@ -1019,0 +1032,1 @@\n+    @Test\n@@ -1034,0 +1048,1 @@\n+    @Test\n@@ -1036,1 +1051,1 @@\n-            logln(\"This test is skipped in th locale.\");\n+            System.out.println(\"This test is skipped in th locale.\");\n@@ -1049,0 +1064,1 @@\n+    @Test\n@@ -1051,1 +1067,1 @@\n-            logln(\"This test is skipped in th locale.\");\n+            System.out.println(\"This test is skipped in th locale.\");\n@@ -1073,0 +1089,1 @@\n+    @Test\n@@ -1079,0 +1096,1 @@\n+    @Test\n@@ -1082,1 +1100,1 @@\n-            logln(\"This test is skipped in th locale.\");\n+            System.out.println(\"This test is skipped in th locale.\");\n@@ -1093,0 +1111,1 @@\n+    @Test\n@@ -1096,1 +1115,1 @@\n-            logln(\"This test is skipped in th locale.\");\n+            System.out.println(\"This test is skipped in th locale.\");\n@@ -1145,1 +1164,1 @@\n-                            errln(\"Got break between U+\" + Integer.toHexString((int)\n+                            fail(\"Got break between U+\" + Integer.toHexString((int)\n@@ -1198,1 +1217,1 @@\n-                        errln(\"Didn't get break between U+\" + Integer.toHexString((int)\n+                        fail(\"Didn't get break between U+\" + Integer.toHexString((int)\n@@ -1211,0 +1230,1 @@\n+    @Test\n@@ -1220,0 +1240,1 @@\n+    @Test\n@@ -1229,0 +1250,1 @@\n+    @Test\n@@ -1234,1 +1256,1 @@\n-            errln(\"getAvailableLocales() returned an empty list!\");\n+            fail(\"getAvailableLocales() returned an empty list!\");\n@@ -1242,0 +1264,1 @@\n+    @Test\n@@ -1290,1 +1313,1 @@\n-                errln(\"ja line break failure: failed to start at 0 and bounced at \" + j);\n+                fail(\"ja line break failure: failed to start at 0 and bounced at \" + j);\n@@ -1294,1 +1317,1 @@\n-                errln(\"ja line break failure: failed to stop before '\"\n+                fail(\"ja line break failure: failed to stop before '\"\n@@ -1301,1 +1324,1 @@\n-                errln(\"ja line break failure: failed to skip position after '\"\n+                fail(\"ja line break failure: failed to skip position after '\"\n@@ -1313,1 +1336,1 @@\n-                errln(\"ja line break failure: failed to start at 0 and bounded at \" + j);\n+                fail(\"ja line break failure: failed to start at 0 and bounded at \" + j);\n@@ -1317,1 +1340,1 @@\n-                errln(\"ja line break failure: failed to skip position before '\"\n+                fail(\"ja line break failure: failed to skip position before '\"\n@@ -1324,1 +1347,1 @@\n-                errln(\"ja line break failure: failed to stop after '\"\n+                fail(\"ja line break failure: failed to stop after '\"\n@@ -1335,0 +1358,1 @@\n+    @Test\n@@ -1348,1 +1372,1 @@\n-            errln(\"Word break failure: failed to stop at 5 and bounded at \" + i);\n+            fail(\"Word break failure: failed to stop at 5 and bounded at \" + i);\n@@ -1361,1 +1385,1 @@\n-            errln(\"Line break failure: failed to skip before \\\\u301F(Pe) at 3 and bounded at \" + i);\n+            fail(\"Line break failure: failed to skip before \\\\u301F(Pe) at 3 and bounded at \" + i);\n@@ -1371,1 +1395,1 @@\n-            errln(\"Mongolian line break failure: failed to skip position before \\\\u1806(Pd) at 2 and bounded at \" + i);\n+            fail(\"Mongolian line break failure: failed to skip position before \\\\u1806(Pd) at 2 and bounded at \" + i);\n@@ -1381,1 +1405,1 @@\n-            errln(\"Khmer line break failure: failed to stop before \\\\u17DB(Sc) at 1 and bounded at \" + i);\n+            fail(\"Khmer line break failure: failed to stop before \\\\u17DB(Sc) at 1 and bounded at \" + i);\n@@ -1385,1 +1409,1 @@\n-            errln(\"Khmer line break failure: failed to skip position after \\\\u17DB(Sc) at 3 and bounded at \" + i);\n+            fail(\"Khmer line break failure: failed to skip position after \\\\u17DB(Sc) at 3 and bounded at \" + i);\n@@ -1395,1 +1419,1 @@\n-            errln(\"Ogham line break failure: failed to skip postion before \\\\u1680(Zs) at 2 and bounded at \" + i);\n+            fail(\"Ogham line break failure: failed to skip postion before \\\\u1680(Zs) at 2 and bounded at \" + i);\n@@ -1412,1 +1436,1 @@\n-            errln(\"Thai line break failure: failed to stop before \\\\u201C(Pi) at 1 and bounded at \" + i);\n+            fail(\"Thai line break failure: failed to stop before \\\\u201C(Pi) at 1 and bounded at \" + i);\n@@ -1416,1 +1440,1 @@\n-            errln(\"Thai line break failure: failed to stop after \\\\u201D(Pf) at 4 and bounded at \" + i);\n+            fail(\"Thai line break failure: failed to stop after \\\\u201D(Pf) at 4 and bounded at \" + i);\n@@ -1423,0 +1447,1 @@\n+    @Test\n@@ -1430,1 +1455,1 @@\n-            errln(\"Didn't get break at beginning of string.\");\n+            fail(\"Didn't get break at beginning of string.\");\n@@ -1432,1 +1457,1 @@\n-            errln(\"Didn't get break before period in \\\"boo.\\\"\");\n+            fail(\"Didn't get break before period in \\\"boo.\\\"\");\n@@ -1434,1 +1459,1 @@\n-            errln(\"Didn't get break at end of string.\");\n+            fail(\"Didn't get break at end of string.\");\n@@ -1442,0 +1467,1 @@\n+    @Test\n@@ -1456,0 +1482,1 @@\n+    @Test\n@@ -1473,0 +1500,1 @@\n+    @Test\n","filename":"test\/jdk\/java\/text\/BreakIterator\/BreakIteratorTest.java","additions":112,"deletions":84,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @library \/java\/text\/testlib\n@@ -29,0 +28,1 @@\n+ * @run junit Bug4533872\n@@ -34,1 +34,1 @@\n-public class Bug4533872 extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -36,3 +36,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new Bug4533872().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class Bug4533872 {\n@@ -76,1 +76,1 @@\n-                errln(\"Word break failure: printEachForward() expected:<\" +\n+                fail(\"Word break failure: printEachForward() expected:<\" +\n@@ -98,1 +98,1 @@\n-                    errln(\"Word break failure: isBoundary() This should be a boundary. Index=\" +\n+                    fail(\"Word break failure: isBoundary() This should be a boundary. Index=\" +\n@@ -125,1 +125,1 @@\n-                errln(\"Word break failure: printEachForward() Unexpected current value: current()=\" +\n+                fail(\"Word break failure: printEachForward() Unexpected current value: current()=\" +\n@@ -137,1 +137,1 @@\n-                    errln(\"Word break failure: printEachForward() Unexpected current value: current()=\" +\n+                    fail(\"Word break failure: printEachForward() Unexpected current value: current()=\" +\n@@ -142,1 +142,1 @@\n-                    errln(\"Word break failure: printEachForward() expected:<\" +\n+                    fail(\"Word break failure: printEachForward() expected:<\" +\n@@ -164,1 +164,1 @@\n-                errln(\"Word break failure: printEachBackward() Unexpected current value: current()=\" +\n+                fail(\"Word break failure: printEachBackward() Unexpected current value: current()=\" +\n@@ -176,1 +176,1 @@\n-                    errln(\"Word break failure: printEachBackward() Unexpected current value: current()=\" +\n+                    fail(\"Word break failure: printEachBackward() Unexpected current value: current()=\" +\n@@ -181,1 +181,1 @@\n-                    errln(\"Word break failure: printEachBackward() expected:<\" +\n+                    fail(\"Word break failure: printEachBackward() expected:<\" +\n@@ -210,1 +210,1 @@\n-                    errln(\"Word break failure: printAt_1() expected:<\" +\n+                    fail(\"Word break failure: printAt_1() expected:<\" +\n@@ -237,1 +237,1 @@\n-                 errln(\"Word break failure: printAt_2() expected:-1(BreakIterator.DONE), got:\" +\n+                 fail(\"Word break failure: printAt_2() expected:-1(BreakIterator.DONE), got:\" +\n@@ -246,1 +246,1 @@\n-                    errln(\"Word break failure: printAt_2() expected:<\" +\n+                    fail(\"Word break failure: printAt_2() expected:<\" +\n@@ -257,1 +257,1 @@\n-                 errln(\"Word break failure: printAt_2() expected:-1(BreakIterator.DONE), got:\" + start);\n+                 fail(\"Word break failure: printAt_2() expected:-1(BreakIterator.DONE), got:\" + start);\n","filename":"test\/jdk\/java\/text\/BreakIterator\/Bug4533872.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @library \/java\/text\/testlib\n@@ -28,0 +27,1 @@\n+ * @run junit CharacterIteratorTest\n@@ -68,4 +68,3 @@\n-public class CharacterIteratorTest extends IntlTest {\n-    public static void main(String[] args) throws Exception {\n-        new CharacterIteratorTest().run(args);\n-    }\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -73,0 +72,1 @@\n+public class CharacterIteratorTest {\n@@ -76,0 +76,1 @@\n+    @Test\n@@ -87,1 +88,1 @@\n-            errln(\"Construation or equals() failed: Two unequal iterators tested equal\");\n+            fail(\"Construation or equals() failed: Two unequal iterators tested equal\");\n@@ -90,1 +91,1 @@\n-            errln(\"clone() or equals() failed: Two clones tested unequal\");\n+            fail(\"clone() or equals() failed: Two clones tested unequal\");\n@@ -94,1 +95,1 @@\n-            errln(\"hash() failed:  different objects have same hash code\");\n+            fail(\"hash() failed:  different objects have same hash code\");\n@@ -97,1 +98,1 @@\n-            errln(\"hash() failed:  identical objects have different hash codes\");\n+            fail(\"hash() failed:  identical objects have different hash codes\");\n@@ -101,1 +102,1 @@\n-            errln(\"setIndex() failed\");\n+            fail(\"setIndex() failed\");\n@@ -104,0 +105,1 @@\n+    @Test\n@@ -110,1 +112,1 @@\n-            errln(\"Iterator didn't start out in the right place.\");\n+            fail(\"Iterator didn't start out in the right place.\");\n@@ -116,1 +118,1 @@\n-            errln(\"getBeginIndex() or getEndIndex() failed\");\n+            fail(\"getBeginIndex() or getEndIndex() failed\");\n@@ -118,1 +120,1 @@\n-        logln(\"Testing forward iteration...\");\n+        System.out.println(\"Testing forward iteration...\");\n@@ -121,1 +123,1 @@\n-                errln(\"Iterator reached end prematurely\");\n+                fail(\"Iterator reached end prematurely\");\n@@ -123,1 +125,1 @@\n-                errln(\"Character mismatch at position \" + i + \", iterator has \" + c +\n+                fail(\"Character mismatch at position \" + i + \", iterator has \" + c +\n@@ -127,1 +129,1 @@\n-                errln(\"current() isn't working right\");\n+                fail(\"current() isn't working right\");\n@@ -129,1 +131,1 @@\n-                errln(\"getIndex() isn't working right\");\n+                fail(\"getIndex() isn't working right\");\n@@ -140,1 +142,1 @@\n-        logln(\"Testing backward iteration...\");\n+        System.out.println(\"Testing backward iteration...\");\n@@ -143,1 +145,1 @@\n-                errln(\"Iterator reached end prematurely\");\n+                fail(\"Iterator reached end prematurely\");\n@@ -145,1 +147,1 @@\n-                errln(\"Character mismatch at position \" + i + \", iterator has \" + c +\n+                fail(\"Character mismatch at position \" + i + \", iterator has \" + c +\n@@ -149,1 +151,1 @@\n-                errln(\"current() isn't working right\");\n+                fail(\"current() isn't working right\");\n@@ -151,1 +153,1 @@\n-                errln(\"getIndex() isn't working right\");\n+                fail(\"getIndex() isn't working right\");\n@@ -161,1 +163,1 @@\n-            errln(\"creation of a restricted-range iterator failed\");\n+            fail(\"creation of a restricted-range iterator failed\");\n@@ -164,1 +166,1 @@\n-            errln(\"starting the iterator in the middle didn't work\");\n+            fail(\"starting the iterator in the middle didn't work\");\n@@ -169,1 +171,1 @@\n-        logln(\"Testing forward iteration over a range...\");\n+        System.out.println(\"Testing forward iteration over a range...\");\n@@ -172,1 +174,1 @@\n-                errln(\"Iterator reached end prematurely\");\n+                fail(\"Iterator reached end prematurely\");\n@@ -174,1 +176,1 @@\n-                errln(\"Character mismatch at position \" + i + \", iterator has \" + c +\n+                fail(\"Character mismatch at position \" + i + \", iterator has \" + c +\n@@ -178,1 +180,1 @@\n-                errln(\"current() isn't working right\");\n+                fail(\"current() isn't working right\");\n@@ -180,1 +182,1 @@\n-                errln(\"getIndex() isn't working right\");\n+                fail(\"getIndex() isn't working right\");\n@@ -191,1 +193,1 @@\n-        logln(\"Testing backward iteration over a range...\");\n+        System.out.println(\"Testing backward iteration over a range...\");\n@@ -194,1 +196,1 @@\n-                errln(\"Iterator reached end prematurely\");\n+                fail(\"Iterator reached end prematurely\");\n@@ -196,1 +198,1 @@\n-                errln(\"Character mismatch at position \" + i + \", iterator has \" + c +\n+                fail(\"Character mismatch at position \" + i + \", iterator has \" + c +\n@@ -200,1 +202,1 @@\n-                errln(\"current() isn't working right\");\n+                fail(\"current() isn't working right\");\n@@ -202,1 +204,1 @@\n-                errln(\"getIndex() isn't working right\");\n+                fail(\"getIndex() isn't working right\");\n@@ -214,0 +216,1 @@\n+    @Test\n@@ -230,1 +233,1 @@\n-            errln(\"Got something other than DONE when performing operations on an empty StringCharacterIterator\");\n+            fail(\"Got something other than DONE when performing operations on an empty StringCharacterIterator\");\n@@ -245,1 +248,1 @@\n-            errln(\"StringCharacterIterator didn't throw an exception when given an invalid substring range.\");\n+            fail(\"StringCharacterIterator didn't throw an exception when given an invalid substring range.\");\n@@ -256,1 +259,1 @@\n-            errln(\"last() failed: expected \" + (expectedIndex - 1) + \", got \" + actualIndex);\n+            fail(\"last() failed: expected \" + (expectedIndex - 1) + \", got \" + actualIndex);\n@@ -261,1 +264,1 @@\n-            errln(\"next() after last() failed: expected \" + expectedIndex + \", got \" + actualIndex);\n+            fail(\"next() after last() failed: expected \" + expectedIndex + \", got \" + actualIndex);\n@@ -266,1 +269,1 @@\n-            errln(\"second next() after last() failed: expected \" + expectedIndex + \", got \" + actualIndex);\n+            fail(\"second next() after last() failed: expected \" + expectedIndex + \", got \" + actualIndex);\n@@ -274,0 +277,1 @@\n+    @Test\n@@ -286,1 +290,1 @@\n-            errln(\"\"); \/\/ re-throw the exception through our test framework\n+            fail(\"\"); \/\/ re-throw the exception through our test framework\n","filename":"test\/jdk\/java\/text\/CharacterIterator\/CharacterIteratorTest.java","additions":45,"deletions":41,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @run junit APITest\n@@ -48,1 +49,1 @@\n-public class APITest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -50,3 +51,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new APITest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class APITest {\n@@ -57,2 +58,1 @@\n-            err(\"ERROR: \");\n-            errln(message);\n+            fail(\"ERROR: \" + message);\n@@ -67,2 +67,2 @@\n-            logln(\"The property tests begin : \");\n-            logln(\"Test ctors : \");\n+            System.out.println(\"The property tests begin : \");\n+            System.out.println(\"Test ctors : \");\n@@ -75,2 +75,2 @@\n-            logln(\"Test ctors ends.\");\n-            logln(\"testing Collator.getStrength() method ...\");\n+            System.out.println(\"Test ctors ends.\");\n+            System.out.println(\"testing Collator.getStrength() method ...\");\n@@ -80,1 +80,1 @@\n-            logln(\"testing Collator.setStrength() method ...\");\n+            System.out.println(\"testing Collator.setStrength() method ...\");\n@@ -86,1 +86,1 @@\n-            logln(\"testing Collator.setDecomposition() method ...\");\n+            System.out.println(\"testing Collator.setDecomposition() method ...\");\n@@ -92,2 +92,2 @@\n-            errln(\"Error : \" + foo.getMessage());\n-            errln(\"Default Collator creation failed.\");\n+            fail(\"Error : \" + foo.getMessage()\n+            + \"\\n Default Collator creation failed.\");\n@@ -95,2 +95,2 @@\n-        logln(\"Default collation property test ended.\");\n-        logln(\"Collator.getRules() testing ...\");\n+        System.out.println(\"Default collation property test ended.\");\n+        System.out.println(\"Collator.getRules() testing ...\");\n@@ -98,1 +98,1 @@\n-        logln(\"getRules tests end.\");\n+        System.out.println(\"getRules tests end.\");\n@@ -102,1 +102,1 @@\n-            logln(\"testing Collator.getStrength() method again ...\");\n+            System.out.println(\"testing Collator.getStrength() method again ...\");\n@@ -106,1 +106,1 @@\n-            logln(\"testing French Collator.setStrength() method ...\");\n+            System.out.println(\"testing French Collator.setStrength() method ...\");\n@@ -113,2 +113,2 @@\n-            errln(\"Error :  \" + bar.getMessage());\n-            errln(\"Creating French collation failed.\");\n+            fail(\"Error :  \" + bar.getMessage()\n+            + \"\\n Creating French collation failed.\");\n@@ -117,1 +117,1 @@\n-        logln(\"Create junk collation: \");\n+        System.out.println(\"Create junk collation: \");\n@@ -123,2 +123,2 @@\n-            errln(\"Error : \" + err.getMessage());\n-            errln(\"Junk collation creation failed, should at least return the collator for the base bundle.\");\n+            fail(\"Error : \" + err.getMessage()\n+            + \"\\n Junk collation creation failed, should at least return the collator for the base bundle.\");\n@@ -130,2 +130,2 @@\n-            errln(\"Error : \" + exc.getMessage());\n-            errln(\"Default collation comparison, caching not working.\");\n+            fail(\"Error : \" + exc.getMessage()\n+            + \"\\n Default collation comparison, caching not working.\");\n@@ -134,1 +134,1 @@\n-        logln(\"Collator property test ended.\");\n+        System.out.println(\"Collator property test ended.\");\n@@ -139,1 +139,1 @@\n-        logln(\"hashCode tests begin.\");\n+        System.out.println(\"hashCode tests begin.\");\n@@ -144,2 +144,2 @@\n-            errln(\"Error : \" + foo.getMessage());\n-            errln(\"Default collation creation failed.\");\n+            fail(\"Error : \" + foo.getMessage()\n+            + \"\\n Default collation creation failed.\");\n@@ -152,2 +152,2 @@\n-            errln(\"Error : \" + bar.getMessage());\n-            errln(\"Danish collation creation failed.\");\n+            fail(\"Error : \" + bar.getMessage()\n+            + \"\\n Danish collation creation failed.\");\n@@ -160,2 +160,2 @@\n-            errln(\"Error : \" + err.getMessage());\n-            errln(\"2nd default collation creation failed.\");\n+            fail(\"Error : \" + err.getMessage()\n+            + \"\\n 2nd default collation creation failed.\");\n@@ -163,1 +163,1 @@\n-        logln(\"Collator.hashCode() testing ...\");\n+        System.out.println(\"Collator.hashCode() testing ...\");\n@@ -172,1 +172,1 @@\n-        logln(\"hashCode tests end.\");\n+        System.out.println(\"hashCode tests end.\");\n@@ -180,1 +180,1 @@\n-        logln(\"testing CollationKey begins...\");\n+        System.out.println(\"testing CollationKey begins...\");\n@@ -185,2 +185,2 @@\n-            errln(\"Error : \" + foo.getMessage());\n-            errln(\"Default collation creation failed.\");\n+            fail(\"Error : \" + foo.getMessage()\n+            + \"\\n Default collation creation failed.\");\n@@ -193,1 +193,1 @@\n-        logln(\"Use tertiary comparison level testing ....\");\n+        System.out.println(\"Use tertiary comparison level testing ....\");\n@@ -212,1 +212,1 @@\n-        logln(\"testing sortkey ends...\");\n+        System.out.println(\"testing sortkey ends...\");\n@@ -219,1 +219,1 @@\n-        logln(\"testing sortkey begins...\");\n+        System.out.println(\"testing sortkey begins...\");\n@@ -224,2 +224,2 @@\n-            errln(\"Error : \" + foo.getMessage());\n-            errln(\"Default collation creation failed.\");\n+            fail(\"Error : \" + foo.getMessage()\n+            + \"\\n Default collation creation failed.\");\n@@ -235,1 +235,1 @@\n-        logln(\"Constructors and comparison testing....\");\n+        System.out.println(\"Constructors and comparison testing....\");\n@@ -306,1 +306,1 @@\n-        logln(\"testing CollationElementIterator ends...\");\n+        System.out.println(\"testing CollationElementIterator ends...\");\n@@ -313,4 +313,4 @@\n-            log(\"Locale name: \");\n-            log(list[i].toString());\n-            log(\" , the display name is : \");\n-            logln(list[i].getDisplayName());\n+            System.out.println(\"Locale name: \");\n+            System.out.println(list[i].toString());\n+            System.out.println(\" , the display name is : \");\n+            System.out.println(list[i].getDisplayName());\n","filename":"test\/jdk\/java\/text\/Collator\/APITest.java","additions":51,"deletions":51,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @library \/java\/text\/testlib\n@@ -29,0 +28,1 @@\n+ * @run junit Bug6271411\n@@ -33,0 +33,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -36,6 +40,1 @@\n-public class Bug6271411 extends IntlTest {\n-\n-    public static void main(String argv[]) throws Exception {\n-        Bug6271411 test = new Bug6271411();\n-        test.run(argv);\n-    }\n+public class Bug6271411 {\n@@ -61,0 +60,1 @@\n+    @Test\n@@ -93,1 +93,1 @@\n-            errln(\"CollationElementIterator.setOffset() didn't throw an expected IllegalArguemntException.\");\n+            fail(\"CollationElementIterator.setOffset() didn't throw an expected IllegalArguemntException.\");\n@@ -102,0 +102,1 @@\n+    @Test\n@@ -147,1 +148,1 @@\n-            errln(\"CollationElementIterator.setOffset() didn't throw an expected IllegalArguemntException.\");\n+            fail(\"CollationElementIterator.setOffset() didn't throw an expected IllegalArguemntException.\");\n@@ -156,0 +157,1 @@\n+    @Test\n","filename":"test\/jdk\/java\/text\/Collator\/Bug6271411.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1,141 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.reflect.*;\n-import java.util.Hashtable;\n-import java.util.Enumeration;\n-import java.util.Vector;\n-import java.io.*;\n-import java.text.*;\n-\n-\/**\n- * CollatorTest is a base class for tests that can be run conveniently from\n- * the command line as well as under the Java test harness.\n- * <p>\n- * Sub-classes implement a set of methods named Test<something>. Each\n- * of these methods performs some test. Test methods should indicate\n- * errors by calling either err or errln.  This will increment the\n- * errorCount field and may optionally print a message to the log.\n- * Debugging information may also be added to the log via the log\n- * and logln methods.  These methods will add their arguments to the\n- * log only if the test is being run in verbose mode.\n- *\/\n-public abstract class CollatorTest extends IntlTest {\n-\n-    \/\/------------------------------------------------------------------------\n-    \/\/ These methods are utilities specific to the Collation tests..\n-    \/\/------------------------------------------------------------------------\n-\n-    protected void assertEqual(CollationElementIterator i1, CollationElementIterator i2) {\n-        int c1, c2, count = 0;\n-        do {\n-            c1 = i1.next();\n-            c2 = i2.next();\n-            if (c1 != c2) {\n-                errln(\"    \" + count + \": \" + c1 + \" != \" + c2);\n-                break;\n-            }\n-            count++;\n-        } while (c1 != CollationElementIterator.NULLORDER);\n-    }\n-\n-    \/\/ Replace nonprintable characters with unicode escapes\n-    static protected String prettify(String str) {\n-        StringBuffer result = new StringBuffer();\n-\n-        String zero = \"0000\";\n-\n-        for (int i = 0; i < str.length(); i++) {\n-            char ch = str.charAt(i);\n-            if (ch < 0x09 || (ch > 0x0A && ch < 0x20)|| (ch > 0x7E && ch < 0xA0) || ch > 0x100) {\n-                String hex = Integer.toString((int)ch,16);\n-\n-                result.append(\"\\\\u\" + zero.substring(0, 4 - hex.length()) + hex);\n-            } else {\n-                result.append(ch);\n-            }\n-        }\n-        return result.toString();\n-    }\n-\n-    \/\/ Produce a printable representation of a CollationKey\n-    static protected String prettify(CollationKey key) {\n-        StringBuffer result = new StringBuffer();\n-        byte[] bytes = key.toByteArray();\n-\n-        for (int i = 0; i < bytes.length; i += 2) {\n-            int val = (bytes[i] << 8) + bytes[i+1];\n-            result.append(Integer.toString(val, 16) + \" \");\n-        }\n-        return result.toString();\n-    }\n-\n-    \/\/------------------------------------------------------------------------\n-    \/\/ Everything below here is boilerplate code that makes it possible\n-    \/\/ to add a new test by simply adding a function to an existing class\n-    \/\/------------------------------------------------------------------------\n-\n-    protected void doTest(Collator col, int strength,\n-                          String[] source, String[] target, int[] result) {\n-        if (source.length != target.length) {\n-            errln(\"Data size mismatch: source = \" +\n-                  source.length + \", target = \" + target.length);\n-\n-            return; \/\/ Return if \"-nothrow\" is specified.\n-        }\n-        if (source.length != result.length) {\n-            errln(\"Data size mismatch: source & target = \" +\n-                  source.length + \", result = \" + result.length);\n-\n-            return; \/\/ Return if \"-nothrow\" is specified.\n-        }\n-\n-        col.setStrength(strength);\n-        for (int i = 0; i < source.length ; i++) {\n-            doTest(col, source[i], target[i], result[i]);\n-        }\n-    }\n-\n-    protected void doTest(Collator col,\n-                          String source, String target, int result) {\n-        char relation = '=';\n-        if (result <= -1) {\n-            relation = '<';\n-        } else if (result >= 1) {\n-            relation = '>';\n-        }\n-\n-        int compareResult = col.compare(source, target);\n-        CollationKey sortKey1 = col.getCollationKey(source);\n-        CollationKey sortKey2 = col.getCollationKey(target);\n-        int keyResult = sortKey1.compareTo(sortKey2);\n-        if (compareResult != keyResult) {\n-            errln(\"Compare and Collation Key results are different! Source = \" +\n-                  source + \" Target = \" + target);\n-        }\n-        if (keyResult != result) {\n-            errln(\"Collation Test failed! Source = \" + source + \" Target = \" +\n-                  target + \" result should be \" + relation);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/text\/Collator\/CollatorTest.java","additions":0,"deletions":141,"binary":false,"changes":141,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @run junit DanishTest\n@@ -46,2 +47,1 @@\n-\/\/ Quick dummy program for printing out test results\n-public class DanishTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -49,3 +49,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new DanishTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/\/ Quick dummy program for printing out test results\n+public class DanishTest {\n@@ -199,0 +200,1 @@\n+    @Test\n@@ -200,1 +202,1 @@\n-        doTest(myCollation, Collator.PRIMARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.PRIMARY,\n@@ -204,0 +206,1 @@\n+    @Test\n@@ -205,1 +208,1 @@\n-        doTest(myCollation, Collator.TERTIARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.TERTIARY,\n@@ -210,1 +213,1 @@\n-                doTest(myCollation, testData[i], testData[j], -1);\n+                TestUtils.doCollatorTest(myCollation, testData[i], testData[j], -1);\n","filename":"test\/jdk\/java\/text\/Collator\/DanishTest.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit DummyTest\n@@ -33,0 +34,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -45,5 +50,1 @@\n-public class DummyTest extends CollatorTest {\n-\n-    public static void main(String[] args) throws Exception {\n-        new DummyTest().run(args);\n-    }\n+public class DummyTest {\n@@ -385,0 +386,1 @@\n+    @Test\n@@ -386,1 +388,1 @@\n-        doTest(getCollator(), Collator.PRIMARY,\n+        TestUtils.doCollatorTest(getCollator(), Collator.PRIMARY,\n@@ -390,0 +392,1 @@\n+    @Test\n@@ -391,1 +394,1 @@\n-        doTest(getCollator(), Collator.SECONDARY,\n+        TestUtils.doCollatorTest(getCollator(), Collator.SECONDARY,\n@@ -395,0 +398,1 @@\n+    @Test\n@@ -398,1 +402,1 @@\n-        doTest(col, Collator.TERTIARY,\n+        TestUtils.doCollatorTest(col, Collator.TERTIARY,\n@@ -403,1 +407,1 @@\n-                doTest(col, testData[i], testData[j], -1);\n+                TestUtils.doCollatorTest(col, testData[i], testData[j], -1);\n@@ -415,1 +419,1 @@\n-                errln(\"Collator creation failed.\");\n+                fail(\"Collator creation failed.\");\n","filename":"test\/jdk\/java\/text\/Collator\/DummyTest.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit EnglishTest\n@@ -33,0 +34,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -45,5 +50,1 @@\n-public class EnglishTest extends CollatorTest {\n-\n-    public static void main(String[] args) throws Exception {\n-        new EnglishTest().run(args);\n-    }\n+public class EnglishTest {\n@@ -204,0 +205,1 @@\n+    @Test\n@@ -205,1 +207,1 @@\n-        doTest(myCollation, Collator.PRIMARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.PRIMARY,\n@@ -209,0 +211,1 @@\n+    @Test\n@@ -210,1 +213,1 @@\n-        doTest(myCollation, Collator.SECONDARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.SECONDARY,\n@@ -214,0 +217,1 @@\n+    @Test\n@@ -215,1 +219,1 @@\n-        doTest(myCollation, Collator.TERTIARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.TERTIARY,\n@@ -220,1 +224,1 @@\n-                doTest(myCollation, testData[i], testData[j], -1);\n+                TestUtils.doCollatorTest(myCollation, testData[i], testData[j], -1);\n","filename":"test\/jdk\/java\/text\/Collator\/EnglishTest.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @run junit FinnishTest\n@@ -45,2 +46,1 @@\n-\/\/ Quick dummy program for printing out test results\n-public class FinnishTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -48,3 +48,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new FinnishTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/\/ Quick dummy program for printing out test results\n+public class FinnishTest {\n@@ -88,0 +89,1 @@\n+    @Test\n@@ -89,1 +91,1 @@\n-        doTest(myCollation, Collator.PRIMARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.PRIMARY,\n@@ -93,0 +95,1 @@\n+    @Test\n@@ -94,1 +97,1 @@\n-        doTest(myCollation, Collator.TERTIARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.TERTIARY,\n","filename":"test\/jdk\/java\/text\/Collator\/FinnishTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @run junit FrenchTest\n@@ -45,2 +46,1 @@\n-\/\/ Quick dummy program for printing out test results\n-public class FrenchTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -48,3 +48,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new FrenchTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/\/ Quick dummy program for printing out test results\n+public class FrenchTest {\n@@ -89,0 +90,1 @@\n+    @Test\n@@ -90,1 +92,1 @@\n-        doTest(myCollation, Collator.TERTIARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.TERTIARY,\n@@ -95,1 +97,1 @@\n-                doTest(myCollation, testData[i], testData[j], -1);\n+                TestUtils.doCollatorTest(myCollation, testData[i], testData[j], -1);\n","filename":"test\/jdk\/java\/text\/Collator\/FrenchTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @run junit G7Test\n@@ -57,1 +58,1 @@\n-\/\/ G7 test program for printing out test results\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +60,1 @@\n-public class G7Test extends CollatorTest {\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -61,3 +62,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new G7Test().run(args);\n-    }\n+\/\/ G7 test program for printing out test results\n+\n+public class G7Test {\n@@ -161,0 +162,1 @@\n+    @Test\n@@ -170,1 +172,1 @@\n-                errln(\"Exception: \" + foo.getMessage() +\n+                fail(\"Exception: \" + foo.getMessage() +\n@@ -177,1 +179,1 @@\n-                    doTest(tblColl1, testCases[G7Results[i][j]],\n+                    TestUtils.doCollatorTest(tblColl1, testCases[G7Results[i][j]],\n@@ -188,0 +190,1 @@\n+    @Test\n@@ -199,1 +202,1 @@\n-                    doTest(tblColl, testCases[Test1Results[j]],\n+                    TestUtils.doCollatorTest(tblColl, testCases[Test1Results[j]],\n@@ -205,1 +208,1 @@\n-            errln(\"Exception: \" + foo.getMessage() +\n+            fail(\"Exception: \" + foo.getMessage() +\n@@ -214,0 +217,1 @@\n+    @Test\n@@ -223,1 +227,1 @@\n-                    doTest(tblColl, testCases[Test2Results[j]],\n+                    TestUtils.doCollatorTest(tblColl, testCases[Test2Results[j]],\n@@ -228,1 +232,1 @@\n-            errln(\"Exception: \" + foo.getMessage() +\n+            fail(\"Exception: \" + foo.getMessage() +\n@@ -237,0 +241,1 @@\n+    @Test\n@@ -247,1 +252,1 @@\n-                    doTest(tblColl, testCases[Test3Results[j]],\n+                    TestUtils.doCollatorTest(tblColl, testCases[Test3Results[j]],\n@@ -252,1 +257,1 @@\n-            errln(\"Exception: \" + foo.getMessage() +\n+            fail(\"Exception: \" + foo.getMessage() +\n@@ -261,0 +266,1 @@\n+    @Test\n@@ -271,1 +277,1 @@\n-                    doTest(tblColl, testCases[Test4Results[j]],\n+                    TestUtils.doCollatorTest(tblColl, testCases[Test4Results[j]],\n@@ -276,1 +282,1 @@\n-            errln(\"Exception: \" + foo.getMessage() +\n+            fail(\"Exception: \" + foo.getMessage() +\n","filename":"test\/jdk\/java\/text\/Collator\/G7Test.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit GermanTest\n@@ -44,2 +45,1 @@\n-\/\/ Quick dummy program for printing out test results\n-public class GermanTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -47,3 +47,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new GermanTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/\/ Quick dummy program for printing out test results\n+public class GermanTest {\n@@ -100,0 +101,1 @@\n+    @Test\n@@ -101,1 +103,1 @@\n-        doTest(myCollation, Collator.PRIMARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.PRIMARY,\n@@ -105,0 +107,1 @@\n+    @Test\n@@ -106,1 +109,1 @@\n-        doTest(myCollation, Collator.TERTIARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.TERTIARY,\n","filename":"test\/jdk\/java\/text\/Collator\/GermanTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @run junit IteratorTest\n@@ -43,1 +44,5 @@\n-public class IteratorTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class IteratorTest {\n@@ -49,4 +54,0 @@\n-    public static void main(String[] args) throws Exception {\n-        new IteratorTest().run(args);\n-    }\n-\n@@ -59,0 +60,1 @@\n+    @Test\n@@ -85,0 +87,1 @@\n+    @Test\n@@ -99,1 +102,1 @@\n-        assertEqual(iter, en_us.getCollationElementIterator(test1));\n+        TestUtils.compareCollationElementIters(iter, en_us.getCollationElementIterator(test1));\n@@ -107,0 +110,1 @@\n+    @Test\n@@ -120,1 +124,1 @@\n-        assertEqual(iter1, iter2);\n+        TestUtils.compareCollationElementIters(iter1, iter2);\n@@ -126,0 +130,1 @@\n+    @Test\n@@ -154,0 +159,1 @@\n+    @Test\n@@ -163,1 +169,1 @@\n-           errln(\"got \" + Integer.toString(e, 16) + \", expected \" +\n+           fail(\"got \" + Integer.toString(e, 16) + \", expected \" +\n@@ -182,1 +188,1 @@\n-                errln(\"Mismatch at index \" + index + \": \"\n+                fail(\"Mismatch at index \" + index + \": \"\n@@ -188,1 +194,1 @@\n-            errln(\"Didn't get back to beginning - index is \" + index);\n+            fail(\"Didn't get back to beginning - index is \" + index);\n@@ -191,1 +197,1 @@\n-            err(\"next: \");\n+            fail(\"next: \");\n@@ -193,1 +199,1 @@\n-                err( Integer.toHexString(o) + \" \");\n+                fail( Integer.toHexString(o) + \" \");\n@@ -195,1 +201,1 @@\n-            errln(\"\");\n+            fail(\"\");\n@@ -197,1 +203,1 @@\n-            err(\"prev: \");\n+            fail(\"prev: \");\n@@ -199,1 +205,1 @@\n-                 err( Integer.toHexString(o) + \" \");\n+                 fail( Integer.toHexString(o) + \" \");\n@@ -201,1 +207,1 @@\n-            errln(\"\");\n+            fail(\"\");\n@@ -229,1 +235,1 @@\n-                errln(\"verifyExpansion: '\" + tests[i][0] +\n+                fail(\"verifyExpansion: '\" + tests[i][0] +\n@@ -237,1 +243,1 @@\n-                errln(\"expansion for '\" + tests[i][0] + \"' is wrong: \" +\n+                fail(\"expansion for '\" + tests[i][0] + \"' is wrong: \" +\n","filename":"test\/jdk\/java\/text\/Collator\/IteratorTest.java","additions":25,"deletions":19,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit MonkeyTest\n@@ -50,5 +51,1 @@\n-public class MonkeyTest extends CollatorTest\n-{\n-    public static void main(String[] args) throws Exception {\n-        new MonkeyTest().run(args);\n-    }\n+import org.junit.jupiter.api.Test;\n@@ -56,0 +53,4 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class MonkeyTest\n+{\n@@ -61,1 +62,1 @@\n-                errln(\" --> Test Failed\");\n+                fail(\" --> Test Failed\");\n@@ -66,1 +67,1 @@\n-                errln(\" --> Test Failed\");\n+                fail(\" --> Test Failed\");\n@@ -71,1 +72,1 @@\n-                errln(\" --> Test Failed\");\n+                fail(\" --> Test Failed\");\n@@ -75,0 +76,1 @@\n+    @Test\n@@ -108,1 +110,1 @@\n-            errln(\"CollationKey(\" + subs + \")\" + \".LT.\" + \"CollationKey(\" + addOne + \") Failed.\");\n+            fail(\"CollationKey(\" + subs + \")\" + \".LT.\" + \"CollationKey(\" + addOne + \") Failed.\");\n@@ -111,1 +113,1 @@\n-            errln(\"CollationKey(\" + addOne + \")\" + \".GT.\" + \"CollationKey(\" + subs + \") Failed.\");\n+            fail(\"CollationKey(\" + addOne + \")\" + \".GT.\" + \"CollationKey(\" + subs + \") Failed.\");\n@@ -118,0 +120,1 @@\n+    @Test\n@@ -143,1 +146,1 @@\n-            errln(\"Test : \" + subs + \" .LT. \" + addOne + \" Failed.\");\n+            fail(\"Test : \" + subs + \" .LT. \" + addOne + \" Failed.\");\n@@ -146,1 +149,1 @@\n-            errln(\"Test : \" + addOne + \" .GE. \" + subs + \" Failed.\");\n+            fail(\"Test : \" + addOne + \" .GE. \" + subs + \" Failed.\");\n","filename":"test\/jdk\/java\/text\/Collator\/MonkeyTest.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @run junit Regression\n@@ -50,0 +51,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -51,1 +53,1 @@\n-public class Regression extends CollatorTest {\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -53,3 +55,2 @@\n-    public static void main(String[] args) throws Exception {\n-        new Regression().run(args);\n-    }\n+\n+public class Regression {\n@@ -59,0 +60,1 @@\n+    @Test\n@@ -67,1 +69,1 @@\n-        assertEqual(i1, i2);\n+        TestUtils.compareCollationElementIters(i1, i2);\n@@ -73,0 +75,1 @@\n+    @Test\n@@ -87,1 +90,1 @@\n-            errln(\"Rules are not equal\");\n+            fail(\"Rules are not equal\");\n@@ -93,0 +96,1 @@\n+    @Test\n@@ -95,1 +99,1 @@\n-            errln(\"black-bird == black\");\n+            fail(\"black-bird == black\");\n@@ -103,0 +107,1 @@\n+    @Test\n@@ -114,1 +119,1 @@\n-        assertEqual(i1, i2);\n+        TestUtils.compareCollationElementIters(i1, i2);\n@@ -119,0 +124,1 @@\n+    @Test\n@@ -125,1 +131,1 @@\n-            errln(\"Caught \" + e.toString() + \" setting Collator.IDENTICAL\");\n+            fail(\"Caught \" + e.toString() + \" setting Collator.IDENTICAL\");\n@@ -146,0 +152,1 @@\n+    @Test\n@@ -159,0 +166,1 @@\n+    @Test\n@@ -172,1 +180,1 @@\n-              errln(\"Decomposition is not set to NO_DECOMPOSITION\");\n+              fail(\"Decomposition is not set to NO_DECOMPOSITION\");\n@@ -183,0 +191,1 @@\n+    @Test\n@@ -188,1 +197,1 @@\n-            errln(\"Exception building collator: \" + e.toString());\n+            fail(\"Exception building collator: \" + e.toString());\n@@ -192,1 +201,1 @@\n-            errln(\"returned rules do not contain 'c\/a'\");\n+            fail(\"returned rules do not contain 'c\/a'\");\n@@ -198,0 +207,1 @@\n+    @Test\n@@ -204,1 +214,1 @@\n-            errln(\"Exception building collator: \" + e.toString());\n+            fail(\"Exception building collator: \" + e.toString());\n@@ -230,0 +240,1 @@\n+    @Test\n@@ -243,0 +254,1 @@\n+    @Test\n@@ -245,1 +257,1 @@\n-            errln(\"'abcd e' == 'abcd f'\");\n+            fail(\"'abcd e' == 'abcd f'\");\n@@ -253,0 +265,1 @@\n+    @Test\n@@ -265,1 +278,1 @@\n-        assertEqual(i1, i2);\n+        TestUtils.compareCollationElementIters(i1, i2);\n@@ -270,0 +283,1 @@\n+    @Test\n@@ -284,0 +298,1 @@\n+    @Test\n@@ -294,1 +309,1 @@\n-            errln(\"Same-class combining chars were reordered\");\n+            fail(\"Same-class combining chars were reordered\");\n@@ -301,0 +316,1 @@\n+    @Test\n@@ -304,1 +320,1 @@\n-                errln(\"en_us.equals(null) returned true\");\n+                fail(\"en_us.equals(null) returned true\");\n@@ -308,1 +324,1 @@\n-            errln(\"en_us.equals(null) threw \" + e.toString());\n+            fail(\"en_us.equals(null) threw \" + e.toString());\n@@ -314,0 +330,1 @@\n+    @Test\n@@ -320,1 +337,1 @@\n-            errln(\"Compare(a,bb) returned \" + result + \"; expected -1\");\n+            fail(\"Compare(a,bb) returned \" + result + \"; expected -1\");\n@@ -326,0 +343,1 @@\n+    @Test\n@@ -341,1 +359,1 @@\n-            errln(\"Combining chars were not reordered\");\n+            fail(\"Combining chars were not reordered\");\n@@ -347,0 +365,1 @@\n+    @Test\n@@ -363,0 +382,1 @@\n+    @Test\n@@ -377,0 +397,1 @@\n+    @Test\n@@ -404,0 +425,1 @@\n+    @Test\n@@ -411,1 +433,1 @@\n-                errln(\"next did not return NULLORDER\");\n+                fail(\"next did not return NULLORDER\");\n@@ -415,1 +437,1 @@\n-            errln(\"Caught \" + e );\n+            fail(\"Caught \" + e );\n@@ -421,0 +443,1 @@\n+    @Test\n@@ -435,0 +458,1 @@\n+    @Test\n@@ -460,0 +484,1 @@\n+    @Test\n@@ -466,1 +491,1 @@\n-            errln(\"Ran out of memory -- probably an infinite loop\");\n+            fail(\"Ran out of memory -- probably an infinite loop\");\n@@ -472,0 +497,1 @@\n+    @Test\n@@ -484,0 +510,1 @@\n+    @Test\n@@ -495,0 +522,1 @@\n+    @Test\n@@ -522,0 +550,1 @@\n+    @Test\n@@ -534,1 +563,1 @@\n-                errln(\"Caught \" + e + \" creating collator for \" + locales[i]);\n+                fail(\"Caught \" + e + \" creating collator for \" + locales[i]);\n@@ -542,0 +571,1 @@\n+    @Test\n@@ -556,0 +586,1 @@\n+    @Test\n@@ -564,1 +595,1 @@\n-            errln(\"getCollationElementIterator not called\");\n+            fail(\"getCollationElementIterator not called\");\n@@ -570,1 +601,1 @@\n-            errln(\"getCollationElementIterator not called\");\n+            fail(\"getCollationElementIterator not called\");\n@@ -595,0 +626,1 @@\n+    @Test\n@@ -620,1 +652,1 @@\n-                errln(\"Mismatch at index \" + index\n+                fail(\"Mismatch at index \" + index\n@@ -628,0 +660,1 @@\n+    @Test\n@@ -647,1 +680,1 @@\n-                errln(\"error: \\\"\" + testStrings[i - 1]\n+                fail(\"error: \\\"\" + testStrings[i - 1]\n@@ -654,0 +687,1 @@\n+    @Test\n@@ -676,1 +710,1 @@\n-            errln(\"The collation elements at positions 0 (\" + elt0 + \"), 4 (\"\n+            fail(\"The collation elements at positions 0 (\" + elt0 + \"), 4 (\"\n@@ -700,1 +734,1 @@\n-            errln(\"\\\"cat\\\" elements don't match: elt14 = \" + elt14 + \", elt15 = \"\n+            fail(\"\\\"cat\\\" elements don't match: elt14 = \" + elt14 + \", elt15 = \"\n@@ -738,1 +772,1 @@\n-                logln(nextElements[i]);\n+                System.out.println(nextElements[i]);\n@@ -740,1 +774,1 @@\n-                errln(\"Error: next() yielded \" + nextElements[i] + \", but setOffset() yielded \"\n+                fail(\"Error: next() yielded \" + nextElements[i] + \", but setOffset() yielded \"\n@@ -746,0 +780,1 @@\n+    @Test\n@@ -772,0 +807,1 @@\n+    @Test\n@@ -803,1 +839,1 @@\n-        logln(\"Testing French order...\");\n+        System.out.println(\"Testing French order...\");\n@@ -806,1 +842,1 @@\n-        logln(\"Testing French order without decomposition...\");\n+        System.out.println(\"Testing French order without decomposition...\");\n@@ -839,1 +875,1 @@\n-        logln(\"Testing English order...\");\n+        System.out.println(\"Testing English order...\");\n@@ -842,1 +878,1 @@\n-        logln(\"Testing English order without decomposition...\");\n+        System.out.println(\"Testing English order without decomposition...\");\n@@ -852,3 +888,3 @@\n-                errln(\"List out of order at element #\" + i + \": \"\n-                        + prettify(sortedList[i]) + \" >= \"\n-                        + prettify(sortedList[i + 1]));\n+                fail(\"List out of order at element #\" + i + \": \"\n+                        + TestUtils.prettify(sortedList[i]) + \" >= \"\n+                        + TestUtils.prettify(sortedList[i + 1]));\n@@ -860,0 +896,1 @@\n+    @Test\n@@ -866,1 +903,1 @@\n-        logln(\"calling next:\");\n+        System.out.println(\"calling next:\");\n@@ -868,1 +905,1 @@\n-            logln(\"[\" + i + \"] \" + (elements_next[i] = iter.next()));\n+            System.out.println(\"[\" + i + \"] \" + (elements_next[i] = iter.next()));\n@@ -872,1 +909,1 @@\n-        logln(\"calling set\/next:\");\n+        System.out.println(\"calling set\/next:\");\n@@ -875,1 +912,1 @@\n-            logln(\"[\" + i + \"] \" + (elements_fwd[i] = iter.next()));\n+            System.out.println(\"[\" + i + \"] \" + (elements_fwd[i] = iter.next()));\n@@ -880,1 +917,1 @@\n-                errln(\"mismatch at position \" + i +\n+                fail(\"mismatch at position \" + i +\n@@ -907,2 +944,2 @@\n-                errln( i\/3 + \": compare(\" + prettify(tests[i])\n-                                    + \" , \" + prettify(tests[i+2])\n+                fail( i\/3 + \": compare(\" + TestUtils.prettify(tests[i])\n+                                    + \" , \" + TestUtils.prettify(tests[i+2])\n@@ -919,2 +956,2 @@\n-                    errln( i\/3 + \": key(\" + prettify(tests[i])\n-                                        + \").compareTo(key(\" + prettify(tests[i+2])\n+                    fail( i\/3 + \": key(\" + TestUtils.prettify(tests[i])\n+                                        + \").compareTo(key(\" + TestUtils.prettify(tests[i+2])\n@@ -923,1 +960,1 @@\n-                    errln(\"  \" + prettify(k1) + \" vs. \" + prettify(k2));\n+                    fail(\"  \" + TestUtils.prettifyCKey(k1) + \" vs. \" + TestUtils.prettifyCKey(k2));\n","filename":"test\/jdk\/java\/text\/Collator\/Regression.java","additions":87,"deletions":50,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit SpanishTest\n@@ -44,2 +45,1 @@\n-\/\/ Quick dummy program for printing out test results\n-public class SpanishTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -47,3 +47,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new SpanishTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/\/ Quick dummy program for printing out test results\n+public class SpanishTest {\n@@ -95,0 +96,1 @@\n+    @Test\n@@ -96,1 +98,1 @@\n-        doTest(myCollation, Collator.PRIMARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.PRIMARY,\n@@ -100,0 +102,1 @@\n+    @Test\n@@ -101,1 +104,1 @@\n-        doTest(myCollation, Collator.TERTIARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.TERTIARY,\n","filename":"test\/jdk\/java\/text\/Collator\/SpanishTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit SurrogatesTest\n@@ -33,2 +34,1 @@\n-\/\/ Quick dummy program for printing out test results\n-public class SurrogatesTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -36,3 +36,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new SurrogatesTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/\/ Quick dummy program for printing out test results\n+public class SurrogatesTest {\n@@ -86,0 +87,1 @@\n+    @Test\n@@ -87,1 +89,1 @@\n-        doTest(myCollation, Collator.PRIMARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.PRIMARY,\n@@ -91,0 +93,1 @@\n+    @Test\n@@ -92,1 +95,1 @@\n-        doTest(myCollation, Collator.TERTIARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.TERTIARY,\n@@ -111,1 +114,1 @@\n-            errln(\"Failed to create new RulebasedCollator object\");\n+            fail(\"Failed to create new RulebasedCollator object\");\n","filename":"test\/jdk\/java\/text\/Collator\/SurrogatesTest.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @run junit Test4401726\n@@ -37,1 +38,1 @@\n-public class Test4401726 extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -39,3 +40,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new Test4401726().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class Test4401726 {\n@@ -43,0 +44,1 @@\n+    @Test\n@@ -63,1 +65,1 @@\n-                errln(\"Failed.\");\n+                fail(\"Failed.\");\n@@ -75,1 +77,1 @@\n-                errln(\"Failed.\");\n+                fail(\"Failed.\");\n@@ -79,1 +81,1 @@\n-            errln(\"Unexpected ParseException: \" + e);\n+            fail(\"Unexpected ParseException: \" + e);\n","filename":"test\/jdk\/java\/text\/Collator\/Test4401726.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @run junit ThaiTest\n@@ -42,1 +43,1 @@\n-public class ThaiTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -44,3 +45,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new ThaiTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class ThaiTest {\n@@ -151,0 +152,1 @@\n+    @Test\n@@ -152,1 +154,1 @@\n-        doTest(myCollation, Collator.PRIMARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.PRIMARY,\n","filename":"test\/jdk\/java\/text\/Collator\/ThaiTest.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @run junit TurkishTest\n@@ -45,2 +46,1 @@\n-\/\/ Quick dummy program for printing out test results\n-public class TurkishTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -48,3 +48,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new TurkishTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/\/ Quick dummy program for printing out test results\n+public class TurkishTest {\n@@ -108,0 +109,1 @@\n+    @Test\n@@ -109,1 +111,1 @@\n-        doTest(myCollation, Collator.PRIMARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.PRIMARY,\n@@ -113,0 +115,1 @@\n+    @Test\n@@ -114,1 +117,1 @@\n-        doTest(myCollation, Collator.TERTIARY,\n+        TestUtils.doCollatorTest(myCollation, Collator.TERTIARY,\n","filename":"test\/jdk\/java\/text\/Collator\/TurkishTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @run junit VietnameseTest\n@@ -47,2 +48,1 @@\n-\/\/ Quick dummy program for printing out test results\n-public class VietnameseTest extends CollatorTest {\n+import org.junit.jupiter.api.Test;\n@@ -50,3 +50,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new VietnameseTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/\/ Quick dummy program for printing out test results\n+public class VietnameseTest {\n@@ -349,0 +350,1 @@\n+    @Test\n@@ -350,1 +352,1 @@\n-        doTest(myCollation, Collator.PRIMARY, testPS, testPT, testPR);\n+        TestUtils.doCollatorTest(myCollation, Collator.PRIMARY, testPS, testPT, testPR);\n@@ -353,0 +355,1 @@\n+    @Test\n@@ -359,1 +362,1 @@\n-                doTest(myCollation, testT[i], testT[j], -1);\n+                TestUtils.doCollatorTest(myCollation, testT[i], testT[j], -1);\n","filename":"test\/jdk\/java\/text\/Collator\/VietnameseTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,3 @@\n- * @build Bug4185732Test IntlTest HexDumpReader\n- * @run main Bug4185732Test\n- * @summary test that ChoiceFormat invariants are preserved across serialization\n+ * @build Bug4185732Test HexDumpReader\n+ * @run junit Bug4185732Test\n+ * @summary test that ChoiceFormat invariants are preserved across serialization.\n@@ -32,0 +32,1 @@\n+\n@@ -70,0 +71,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -71,1 +76,1 @@\n- *  A Locale can never contains language codes of he, yi or id.\n+ *  A Locale can never contain language codes of he, yi or id.\n@@ -73,9 +78,2 @@\n-public class Bug4185732Test extends IntlTest {\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 1 && args[0].equals(\"prepTest\")) {\n-            prepTest();\n-        } else {\n-            new Bug4185732Test().run(args);\n-        }\n-    }\n-\n+public class Bug4185732Test {\n+    @Test\n@@ -88,1 +86,1 @@\n-                errln(\"ChoiceFormat did not properly check stream\");\n+                fail(\"ChoiceFormat did not properly check stream\");\n@@ -93,1 +91,1 @@\n-                errln(\"Test data file was not properly created\");\n+                fail(\"Test data file was not properly created\");\n@@ -98,20 +96,1 @@\n-            errln(e.toString());\n-        }\n-    }\n-\n-    \/**\n-     * Create a data file for this test.  The data file must be corrupted by hand.\n-     *\/\n-    private static void prepTest() {\n-        try {\n-            ObjectOutputStream out = new ObjectOutputStream(\n-                    new FileOutputStream(\"Bug4185732.ser\"));\n-            final double[] limits = {1,2,3,4,5,6,7};\n-            final String[] formats = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"};\n-            final ChoiceFormat fmt = new ChoiceFormat(limits, formats);\n-            out.writeObject(fmt);\n-            out.close();\n-            System.out.println(\"You must invalidate the output file before running the test\");\n-            System.out.println(\"by modifying the length of one of the array\");\n-        } catch (Exception e) {\n-            System.out.println(e);\n+            fail(e.toString());\n","filename":"test\/jdk\/java\/text\/Format\/ChoiceFormat\/Bug4185732Test.java","additions":15,"deletions":36,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @library \/java\/text\/testlib\n@@ -30,0 +29,1 @@\n+ * @run junit Bug4322313\n@@ -36,1 +36,1 @@\n-public class Bug4322313 extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -38,0 +38,5 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class Bug4322313 {\n+\n+    @Test\n@@ -203,1 +208,1 @@\n-                            logln(\"\\tParse  Okay  [Locale=\" +\n+                            System.out.println(\"\\tParse  Okay  [Locale=\" +\n@@ -255,1 +260,1 @@\n-                                logln(\"\\tFormat Okay  [Locale=\" +\n+                                System.out.println(\"\\tFormat Okay  [Locale=\" +\n@@ -289,1 +294,1 @@\n-                                logln(\"\\tParse  Okay  [Locale=\" +\n+                                System.out.println(\"\\tParse  Okay  [Locale=\" +\n@@ -325,1 +330,1 @@\n-                                logln(\"\\tParse  Okay  [Locale=\" +\n+                                System.out.println(\"\\tParse  Okay  [Locale=\" +\n@@ -357,1 +362,1 @@\n-                errln(\"SimpleDateFormat.parse()\/format() test failed\");\n+                fail(\"SimpleDateFormat.parse()\/format() test failed\");\n@@ -362,3 +367,0 @@\n-    public static void main(String[] args) throws Exception {\n-        new Bug4322313().run(args);\n-    }\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/Bug4322313.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -35,1 +39,1 @@\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI DateFormatRegression\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI DateFormatRegression\n@@ -37,5 +41,1 @@\n-public class DateFormatRegression extends IntlTest {\n-\n-    public static void main(String[] args) throws Exception {\n-        new DateFormatRegression().run(args);\n-    }\n+public class DateFormatRegression {\n@@ -43,0 +43,1 @@\n+    @Test\n@@ -47,1 +48,1 @@\n-        logln(\"today: \" + today);\n+        System.out.println(\"today: \" + today);\n@@ -50,2 +51,2 @@\n-        logln(\"pattern: \" + sdf.toPattern());\n-        logln(\"today: \" + sdf.format(today));\n+        System.out.println(\"pattern: \" + sdf.toPattern());\n+        System.out.println(\"today: \" + sdf.format(today));\n@@ -55,1 +56,1 @@\n-        logln(\"today: \" + todayS);\n+        System.out.println(\"today: \" + todayS);\n@@ -58,1 +59,1 @@\n-            logln(\"today date: \" + today);\n+            System.out.println(\"today date: \" + today);\n@@ -60,1 +61,1 @@\n-            logln(\"Error reparsing date: \" + e.getMessage());\n+            System.out.println(\"Error reparsing date: \" + e.getMessage());\n@@ -65,2 +66,2 @@\n-            logln(\"round trip: \" + rt);\n-            if (!rt.equals(todayS)) errln(\"Fail: Want \" + todayS + \" Got \" + rt);\n+            System.out.println(\"round trip: \" + rt);\n+            if (!rt.equals(todayS)) fail(\"Fail: Want \" + todayS + \" Got \" + rt);\n@@ -69,1 +70,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -74,0 +75,1 @@\n+    @Test\n@@ -80,1 +82,1 @@\n-        logln(str = fmt.format(date));\n+        System.out.println(str = fmt.format(date));\n@@ -83,1 +85,1 @@\n-            errln(\"Fail: Test broken; Want 5\/3\/97 8:55 AM Got \" + str);\n+            fail(\"Fail: Test broken; Want 5\/3\/97 8:55 AM Got \" + str);\n@@ -120,1 +122,1 @@\n-            log(i + \": \" + fieldNames[i] +\n+            System.out.println(i + \": \" + fieldNames[i] +\n@@ -127,1 +129,1 @@\n-                logln(\" ok\");\n+                System.out.println(\" ok\");\n@@ -129,1 +131,1 @@\n-                logln(\" expected \" + exp);\n+                System.out.println(\" expected \" + exp);\n@@ -133,1 +135,1 @@\n-        if (!pass) errln(\"Fail: FieldPosition not set right by DateFormat\");\n+        if (!pass) fail(\"Fail: FieldPosition not set right by DateFormat\");\n@@ -140,0 +142,1 @@\n+    @Test\n@@ -146,1 +149,1 @@\n-                errln(\"get2DigitYearStart broken\");\n+                fail(\"get2DigitYearStart broken\");\n@@ -157,2 +160,2 @@\n-                logln(s + \" -> \" + got + \"; exp \" + exp);\n-                if (!got.equals(exp)) errln(\"set2DigitYearStart broken\");\n+                System.out.println(s + \" -> \" + got + \"; exp \" + exp);\n+                if (!got.equals(exp)) fail(\"set2DigitYearStart broken\");\n@@ -162,1 +165,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -167,0 +170,1 @@\n+    @Test\n@@ -170,1 +174,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -188,2 +192,2 @@\n-            logln( \"==================\" );\n-            logln( \"testIt: pattern=\" + fmt.toPattern() +\n+            System.out.println( \"==================\" );\n+            System.out.println( \"testIt: pattern=\" + fmt.toPattern() +\n@@ -194,1 +198,1 @@\n-            logln( \"Parsed object: \" + o );\n+            System.out.println( \"Parsed object: \" + o );\n@@ -197,2 +201,2 @@\n-            logln( \"Formatted string: \" + formatted );\n-            if (!formatted.equals(str)) errln(\"Fail: Want \" + str + \" Got \" + formatted);\n+            System.out.println( \"Formatted string: \" + formatted );\n+            if (!formatted.equals(str)) fail(\"Fail: Want \" + str + \" Got \" + formatted);\n@@ -201,1 +205,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -206,0 +210,1 @@\n+    @Test\n@@ -212,2 +217,2 @@\n-        logln( \"dateString= \" + dateString );\n-        logln(\"Using yyyy-DDD.hh:mm:ss\");\n+        System.out.println( \"dateString= \" + dateString );\n+        System.out.println(\"Using yyyy-DDD.hh:mm:ss\");\n@@ -219,1 +224,1 @@\n-        logln( myString );\n+        System.out.println( myString );\n@@ -223,1 +228,1 @@\n-            errln(\"Fail: Got \" + cal.get(Calendar.DAY_OF_YEAR) +\n+            fail(\"Fail: Got \" + cal.get(Calendar.DAY_OF_YEAR) +\n@@ -226,1 +231,1 @@\n-        logln(\"Using yyyy-ddd.hh:mm:ss\");\n+        System.out.println(\"Using yyyy-ddd.hh:mm:ss\");\n@@ -232,1 +237,1 @@\n-        logln( myString );\n+        System.out.println( myString );\n@@ -235,1 +240,1 @@\n-            errln(\"Fail: Got \" + cal.get(Calendar.DAY_OF_YEAR) +\n+            fail(\"Fail: Got \" + cal.get(Calendar.DAY_OF_YEAR) +\n@@ -243,0 +248,1 @@\n+    @Test\n@@ -246,1 +252,1 @@\n-            logln(df.parse(\"35\/01\/1971\").toString());\n+            System.out.println(df.parse(\"35\/01\/1971\").toString());\n@@ -249,1 +255,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -255,1 +261,1 @@\n-            logln(df.parse(\"35\/01\/1971\").toString());\n+            System.out.println(df.parse(\"35\/01\/1971\").toString());\n@@ -257,1 +263,1 @@\n-        if (!ok) errln(\"Fail: Lenient not working\");\n+        if (!ok) fail(\"Fail: Lenient not working\");\n@@ -261,0 +267,1 @@\n+    @Test\n@@ -279,2 +286,2 @@\n-            logln(strShortDate);\n-            logln(strFullDate);\n+            System.out.println(strShortDate);\n+            System.out.println(strFullDate);\n@@ -285,1 +292,1 @@\n-                errln(\"Fail: Want GMT-05:00\");\n+                fail(\"Fail: Want GMT-05:00\");\n@@ -304,0 +311,1 @@\n+    @Test\n@@ -314,1 +322,1 @@\n-            errln(\"Fail: Can't complete test; Calendar instances unequal\");\n+            fail(\"Fail: Can't complete test; Calendar instances unequal\");\n@@ -316,1 +324,1 @@\n-            errln(\"Fail: DateFormat unequal when Calendars equal\");\n+            fail(\"Fail: DateFormat unequal when Calendars equal\");\n@@ -319,1 +327,1 @@\n-            errln(\"Fail: Can't complete test; Calendar instances equal\");\n+            fail(\"Fail: Can't complete test; Calendar instances equal\");\n@@ -321,2 +329,2 @@\n-            errln(\"Fail: DateFormat unequal when Calendars equivalent\");\n-        logln(\"DateFormat.equals ok\");\n+            fail(\"Fail: DateFormat unequal when Calendars equivalent\");\n+        System.out.println(\"DateFormat.equals ok\");\n@@ -335,0 +343,1 @@\n+    @Test\n@@ -345,1 +354,1 @@\n-                    errln(\"Fail: \" + d + \" != \" + dd);\n+                    fail(\"Fail: \" + d + \" != \" + dd);\n@@ -347,2 +356,2 @@\n-                    errln(\"Fail: \" + s + \" != \" + ss);\n-                logln(\"Ok: \" + s + \" \" + d);\n+                    fail(\"Fail: \" + s + \" != \" + ss);\n+                System.out.println(\"Ok: \" + s + \" \" + d);\n@@ -352,1 +361,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -357,0 +366,1 @@\n+    @Test\n@@ -364,1 +374,1 @@\n-                errln(\"Fail: SimpleDateFormat should use TimeZone.getDefault()\");\n+                fail(\"Fail: SimpleDateFormat should use TimeZone.getDefault()\");\n@@ -371,0 +381,1 @@\n+    @Test\n@@ -417,1 +428,1 @@\n-                    logln(\"DateFormat instance for locale \" +\n+                    System.out.println(\"DateFormat instance for locale \" +\n@@ -420,1 +431,1 @@\n-                    logln(\"DateFormat instance for locale \" +\n+                    System.out.println(\"DateFormat instance for locale \" +\n@@ -424,1 +435,1 @@\n-            if (!pass) errln(\"Fail: DateFormat serialization\/equality bug\");\n+            if (!pass) fail(\"Fail: DateFormat serialization\/equality bug\");\n@@ -427,1 +438,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -431,1 +442,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -440,0 +451,1 @@\n+    @Test\n@@ -468,1 +480,1 @@\n-                    logln(\"DateFormat instance which uses TimeZone <\" +\n+                    System.out.println(\"DateFormat instance which uses TimeZone <\" +\n@@ -471,1 +483,1 @@\n-                    logln(\"DateFormat instance which uses TimeZone <\" +\n+                    System.out.println(\"DateFormat instance which uses TimeZone <\" +\n@@ -476,1 +488,1 @@\n-                errln(\"Fail: DateFormat serialization\/equality bug\");\n+                fail(\"Fail: DateFormat serialization\/equality bug\");\n@@ -480,1 +492,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -484,1 +496,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -492,0 +504,1 @@\n+    @Test\n@@ -498,5 +511,5 @@\n-        logln(sdf.format(d, buf, fp).toString());\n-        logln(d + \" => \" + buf);\n-        logln(\"beginIndex = \" + fp.getBeginIndex());\n-        logln(\"endIndex = \" + fp.getEndIndex());\n-        if (fp.getBeginIndex() == fp.getEndIndex()) errln(\"Fail: Empty field\");\n+        System.out.println(sdf.format(d, buf, fp).toString());\n+        System.out.println(d + \" => \" + buf);\n+        System.out.println(\"beginIndex = \" + fp.getBeginIndex());\n+        System.out.println(\"endIndex = \" + fp.getEndIndex());\n+        if (fp.getBeginIndex() == fp.getEndIndex()) fail(\"Fail: Empty field\");\n@@ -513,0 +526,1 @@\n+    @Test\n@@ -522,2 +536,2 @@\n-        logln(\"Date=\"+s);\n-        logln(\"DF=\"+s2);\n+        System.out.println(\"Date=\"+s);\n+        System.out.println(\"DF=\"+s2);\n@@ -525,1 +539,1 @@\n-            errln(\"Months should match\");\n+            fail(\"Months should match\");\n@@ -528,0 +542,1 @@\n+    @Test\n@@ -534,1 +549,1 @@\n-                errln(\"Fail: SimpleDateFormat not using default zone\");\n+                fail(\"Fail: SimpleDateFormat not using default zone\");\n@@ -541,0 +556,1 @@\n+    @Test\n@@ -545,1 +561,1 @@\n-        logln(\"pattern: \\\"\" + pattern + \"\\\"\");\n+        System.out.println(\"pattern: \\\"\" + pattern + \"\\\"\");\n@@ -560,3 +576,3 @@\n-            logln(\" text: \\\"\" + text + \"\\\"\");\n-            logln(\" index: \" + pos.getIndex());\n-            logln(\" result: \" + d);\n+            System.out.println(\" text: \\\"\" + text + \"\\\"\");\n+            System.out.println(\" index: \" + pos.getIndex());\n+            System.out.println(\" result: \" + d);\n@@ -564,1 +580,1 @@\n-                errln(\"Fail: Expected pos \" + finish.getIndex());\n+                fail(\"Fail: Expected pos \" + finish.getIndex());\n@@ -567,1 +583,1 @@\n-                errln(\"Fail: Expected result \" + exp);\n+                fail(\"Fail: Expected result \" + exp);\n@@ -577,0 +593,1 @@\n+    @Test\n@@ -581,1 +598,1 @@\n-        logln(\"pattern: \\\"\" + pattern + \"\\\"\");\n+        System.out.println(\"pattern: \\\"\" + pattern + \"\\\"\");\n@@ -587,1 +604,1 @@\n-        logln(\" text: \\\"\" + text + \"\\\"\" +\n+        System.out.println(\" text: \\\"\" + text + \"\\\"\" +\n@@ -594,1 +611,1 @@\n-        logln(\" text: \\\"\" + text + \"\\\"\" +\n+        System.out.println(\" text: \\\"\" + text + \"\\\"\" +\n@@ -598,0 +615,1 @@\n+    @Test\n@@ -621,1 +639,1 @@\n-                logln(df.format(date));\n+                System.out.println(df.format(date));\n@@ -623,2 +641,2 @@\n-                logln(\"\" + gc.get(Calendar.ZONE_OFFSET));\n-                logln(format.format(date));\n+                System.out.println(\"\" + gc.get(Calendar.ZONE_OFFSET));\n+                System.out.println(format.format(date));\n@@ -627,1 +645,1 @@\n-                logln(\"No way Jose\");\n+                System.out.println(\"No way Jose\");\n@@ -635,0 +653,1 @@\n+    @Test\n@@ -640,1 +659,1 @@\n-        logln(d.toString());\n+        System.out.println(d.toString());\n@@ -648,0 +667,1 @@\n+    @Test\n@@ -653,1 +673,1 @@\n-        logln(d.toString());\n+        System.out.println(d.toString());\n@@ -665,0 +685,1 @@\n+    @Test\n@@ -680,1 +701,1 @@\n-                errln(\"FAIL: \" + ms + \" ms x \\\"\" + PAT[i] + \"\\\" -> \\\"\" +\n+                fail(\"FAIL: \" + ms + \" ms x \\\"\" + PAT[i] + \"\\\" -> \\\"\" +\n@@ -695,1 +716,1 @@\n-                errln(\"FAIL: parse(\\\"\" + IN[i] + \"\\\" x \\\"s.S\\\") -> \" +\n+                fail(\"FAIL: parse(\\\"\" + IN[i] + \"\\\" x \\\"s.S\\\") -> \" +\n@@ -704,0 +725,1 @@\n+    @Test\n@@ -706,1 +728,1 @@\n-        logln(\"pattern=\" + pattern);\n+        System.out.println(\"pattern=\" + pattern);\n@@ -711,1 +733,1 @@\n-            errln(\"Fail: result=\" + result);\n+            fail(\"Fail: result=\" + result);\n@@ -714,1 +736,1 @@\n-            logln(\"Pass: result=\" + result);\n+            System.out.println(\"Pass: result=\" + result);\n@@ -723,0 +745,1 @@\n+    @Test\n@@ -729,1 +752,1 @@\n-                errln(\"Incorrect value: \" + d);\n+                fail(\"Incorrect value: \" + d);\n@@ -731,1 +754,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -740,0 +763,1 @@\n+    @Test\n@@ -754,1 +778,1 @@\n-            errln(\"Parse failed, got \" + d2 +\n+            fail(\"Parse failed, got \" + d2 +\n@@ -768,0 +792,1 @@\n+    @Test\n@@ -787,1 +812,1 @@\n-            errln(\"Parse failed, d1 = \" + d1 + \", d2 = \" + d2);\n+            fail(\"Parse failed, d1 = \" + d1 + \", d2 = \" + d2);\n@@ -789,1 +814,1 @@\n-            logln(\"Parse passed\");\n+            System.out.println(\"Parse passed\");\n@@ -793,1 +818,1 @@\n-            errln(\"Parse failed, got Exception \" + e);\n+            fail(\"Parse failed, got Exception \" + e);\n@@ -805,0 +830,1 @@\n+    @Test\n@@ -813,2 +839,2 @@\n-            logln(\"Parse format \\\"\" + format + \"\\\" ok\");\n-            logln(dateString + \" -> \" + df.format(x));\n+            System.out.println(\"Parse format \\\"\" + format + \"\\\" ok\");\n+            System.out.println(dateString + \" -> \" + df.format(x));\n@@ -816,1 +842,1 @@\n-            errln(\"Parse format \\\"\" + format + \"\\\" failed.\");\n+            fail(\"Parse format \\\"\" + format + \"\\\" failed.\");\n@@ -823,0 +849,1 @@\n+    @Test\n@@ -872,1 +899,1 @@\n-            log(out.toString());\n+            System.out.println(out.toString());\n@@ -874,1 +901,1 @@\n-            err(out.toString());\n+            fail(out.toString());\n@@ -887,0 +914,1 @@\n+    @Test\n@@ -895,1 +923,1 @@\n-        logln(d + \" x \" + pattern + \" => \" + s);\n+        System.out.println(d + \" x \" + pattern + \" => \" + s);\n@@ -898,2 +926,2 @@\n-        logln(d + \" <= \" + pattern + \" x \" + s);\n-        logln(\"Parse pos = \" + pos);\n+        System.out.println(d + \" <= \" + pattern + \" x \" + s);\n+        System.out.println(\"Parse pos = \" + pos);\n@@ -901,1 +929,1 @@\n-            errln(\"FAIL\");\n+            fail(\"FAIL\");\n@@ -911,1 +939,1 @@\n-        logln(cal.getTime().toString());\n+        System.out.println(cal.getTime().toString());\n@@ -917,0 +945,1 @@\n+    @Test\n@@ -965,1 +994,1 @@\n-                    errln(\"FAIL: DateFormat.\" + DESC[j] + \" style \" + DATA[i] + \" \" +\n+                    fail(\"FAIL: DateFormat.\" + DESC[j] + \" style \" + DATA[i] + \" \" +\n@@ -973,0 +1002,1 @@\n+    @Test\n@@ -996,1 +1026,1 @@\n-                logln(String.valueOf(FORMAT_MS) + \" ms f* \\\"\" +\n+                System.out.println(String.valueOf(FORMAT_MS) + \" ms f* \\\"\" +\n@@ -999,1 +1029,1 @@\n-                errln(\"FAIL: \" + FORMAT_MS + \" ms f* \\\"\" +\n+                fail(\"FAIL: \" + FORMAT_MS + \" ms f* \\\"\" +\n@@ -1011,1 +1041,1 @@\n-                logln(\"\\\"\" + PARSE_STR[i] + \"\\\" p* \\\"\" +\n+                System.out.println(\"\\\"\" + PARSE_STR[i] + \"\\\" p* \\\"\" +\n@@ -1014,1 +1044,1 @@\n-                errln(\"FAIL: \\\"\" + PARSE_STR[i] + \"\\\" p* \\\"\" +\n+                fail(\"FAIL: \\\"\" + PARSE_STR[i] + \"\\\" p* \\\"\" +\n@@ -1026,1 +1056,1 @@\n-                logln(\"\\\"\" + PARSE_STR[i] + \"\\\" p* \\\"\" +\n+                System.out.println(\"\\\"\" + PARSE_STR[i] + \"\\\" p* \\\"\" +\n@@ -1029,1 +1059,1 @@\n-                errln(\"FAIL: \\\"\" + PARSE_STR[i] + \"\\\" p* \\\"\" +\n+                fail(\"FAIL: \\\"\" + PARSE_STR[i] + \"\\\" p* \\\"\" +\n@@ -1039,0 +1069,1 @@\n+    @Test\n@@ -1051,1 +1082,1 @@\n-            errln(\"FAIL: getTimeInstance().format(d) => \\\"\" +\n+            fail(\"FAIL: getTimeInstance().format(d) => \\\"\" +\n@@ -1060,0 +1091,1 @@\n+    @Test\n@@ -1071,1 +1103,1 @@\n-        logln(\"format()=>\" + result);\n+        System.out.println(\"format()=>\" + result);\n@@ -1073,1 +1105,1 @@\n-            errln(\"FAIL: SimpleDataFormat.format() did not retrun PST\");\n+            fail(\"FAIL: SimpleDataFormat.format() did not retrun PST\");\n@@ -1080,1 +1112,1 @@\n-            errln(\"FAIL: SimpleDataFormat.parse() could not parse PST\");\n+            fail(\"FAIL: SimpleDataFormat.parse() could not parse PST\");\n@@ -1084,1 +1116,1 @@\n-        logln(\"roundtrip:\" + result);\n+        System.out.println(\"roundtrip:\" + result);\n@@ -1086,1 +1118,1 @@\n-            errln(\"FAIL: SimpleDataFomat timezone roundtrip failed\");\n+            fail(\"FAIL: SimpleDataFomat timezone roundtrip failed\");\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/DateFormatRegression.java","additions":156,"deletions":124,"binary":false,"changes":280,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/java\/text\/testlib\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI DateFormatRoundTripTest\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI DateFormatRoundTripTest\n@@ -35,1 +34,1 @@\n-public class DateFormatRoundTripTest extends IntlTest {\n+public class DateFormatRoundTripTest {\n@@ -110,1 +109,1 @@\n-                && (i+1) < args.length) {\n+                    && (i+1) < args.length) {\n@@ -114,1 +113,1 @@\n-                       && (i+1) < args.length) {\n+                    && (i+1) < args.length) {\n@@ -118,1 +117,1 @@\n-                && (i+1) < args.length) {\n+                    && (i+1) < args.length) {\n@@ -129,1 +128,1 @@\n-                       && (i+1) < args.length) {\n+                    && (i+1) < args.length) {\n@@ -143,1 +142,2 @@\n-        new DateFormatRoundTripTest(random, seed, infinite, date, pat, loc).run(args);\n+        new DateFormatRoundTripTest(random, seed, infinite, date, pat, loc)\n+                .TestDateFormatRoundTrip();\n@@ -160,1 +160,0 @@\n-        super.usage();\n@@ -313,2 +312,2 @@\n-        logln(\"DateFormat available locales: \" + avail.length);\n-        logln(\"Default TimeZone: \" +\n+        System.out.println(\"DateFormat available locales: \" + avail.length);\n+        System.out.println(\"Default TimeZone: \" +\n@@ -336,1 +335,1 @@\n-        logln(escape(tc.toString()));\n+        System.out.println(escape(tc.toString()));\n@@ -371,1 +370,1 @@\n-                logln(\"ENTERING INFINITE TEST LOOP, LOCALE \" + locale.getDisplayName());\n+                System.out.println(\"ENTERING INFINITE TEST LOOP, LOCALE \" + locale.getDisplayName());\n@@ -374,1 +373,1 @@\n-                logln(\"ENTERING INFINITE TEST LOOP, ALL LOCALES\");\n+                System.out.println(\"ENTERING INFINITE TEST LOOP, ALL LOCALES\");\n@@ -396,1 +395,1 @@\n-        if (!INFINITE) logln(\"Locale: \" + loc.getDisplayName());\n+        if (!INFINITE) System.out.println(\"Locale: \" + loc.getDisplayName());\n@@ -607,1 +606,1 @@\n-                    errln(escape(out.toString()));\n+                    throw new RuntimeException(escape(out.toString()));\n@@ -612,1 +611,1 @@\n-            errln(e.toString());\n+            throw new RuntimeException(e.toString());\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/DateFormatRoundTripTest.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @library \/java\/text\/testlib\n@@ -31,1 +30,1 @@\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI DateFormatTest\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI DateFormatTest\n@@ -38,1 +37,6 @@\n-public class DateFormatTest extends IntlTest\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class DateFormatTest\n@@ -40,9 +44,5 @@\n-    public static void main(String[] args) throws Exception {\n-        Locale reservedLocale = Locale.getDefault();\n-        try {\n-            Locale.setDefault(Locale.US);\n-            new DateFormatTest().run(args);\n-        } finally {\n-            \/\/ restore the reserved locale\n-            Locale.setDefault(reservedLocale);\n-        }\n+\n+    \/\/ Change JVM default Locale\n+    @BeforeAll\n+    static void initAll() {\n+        Locale.setDefault(Locale.US);\n@@ -53,0 +53,1 @@\n+    @Test\n@@ -61,1 +62,1 @@\n-            logln(str + \" parses with \" + pat + \" to \" + d);\n+            System.out.println(str + \" parses with \" + pat + \" to \" + d);\n@@ -63,1 +64,1 @@\n-                errln(\"FAIL: Expected \" + exp);\n+                fail(\"FAIL: Expected \" + exp);\n@@ -67,1 +68,1 @@\n-            errln(str + \" parse fails with \" + pat);\n+            fail(str + \" parse fails with \" + pat);\n@@ -72,0 +73,1 @@\n+    @Test\n@@ -94,1 +96,1 @@\n-        logln(\"Time Zone IDs size: \" + ids.length);\n+        System.out.println(\"Time Zone IDs size: \" + ids.length);\n@@ -98,1 +100,1 @@\n-        logln(\"Ordinal ID offset(h:m) name\");\n+        System.out.println(\"Ordinal ID offset(h:m) name\");\n@@ -139,1 +141,1 @@\n-                logln(i + \" \" + ids[i] + \" \" + dstOffset +\n+                System.out.println(i + \" \" + ids[i] + \" \" + dstOffset +\n@@ -145,1 +147,1 @@\n-                errln(i + \" \" + ids[i] + \" \" + dstOffset +\n+                fail(i + \" \" + ids[i] + \" \" + dstOffset +\n@@ -152,0 +154,1 @@\n+    @Test\n@@ -159,1 +162,1 @@\n-            errln(\"FAIL\");\n+            fail(\"FAIL\");\n@@ -165,0 +168,1 @@\n+    @Test\n@@ -184,1 +188,1 @@\n-            logln(s + \" P> \" + fullFmt.format(d));\n+            System.out.println(s + \" P> \" + fullFmt.format(d));\n@@ -186,1 +190,1 @@\n-                errln(\"FAIL: Should parse to hour \" + hour);\n+                fail(\"FAIL: Should parse to hour \" + hour);\n@@ -189,1 +193,1 @@\n-        catch (ParseException e) { errln(\"FAIL: \" + e.getMessage()); }\n+        catch (ParseException e) { fail(\"FAIL: \" + e.getMessage()); }\n@@ -237,0 +241,1 @@\n+    @Test\n@@ -276,2 +281,2 @@\n-            logln(\" Pattern = \" + ((SimpleDateFormat)df).toPattern());\n-            logln(\"  Result = \" + df.format(someDate));\n+            System.out.println(\" Pattern = \" + ((SimpleDateFormat)df).toPattern());\n+            System.out.println(\"  Result = \" + df.format(someDate));\n@@ -282,1 +287,1 @@\n-                    errln(\"FAIL: field #\" + i + \" \" + fieldNames[i] + \" = \\\"\" +\n+                    fail(\"FAIL: field #\" + i + \" \" + fieldNames[i] + \" = \\\"\" +\n@@ -301,0 +306,1 @@\n+    @Test\n@@ -315,1 +321,1 @@\n-        logln(\"Pattern \\\"\" + pat + \"\\\"   String \\\"\" + str + \"\\\"\");\n+        System.out.println(\"Pattern \\\"\" + pat + \"\\\"   String \\\"\" + str + \"\\\"\");\n@@ -320,2 +326,2 @@\n-            logln(\" parse(\" + str + \") -> \" + date.toString());\n-            logln(\" format -> \" + f);\n+            System.out.println(\" parse(\" + str + \") -> \" + date.toString());\n+            System.out.println(\" format -> \" + f);\n@@ -324,1 +330,1 @@\n-                errln(\"FAIL: Expected \" + expected);\n+                fail(\"FAIL: Expected \" + expected);\n@@ -327,1 +333,1 @@\n-                errln(\"FAIL: Expected \" + str);\n+                fail(\"FAIL: Expected \" + str);\n@@ -331,1 +337,1 @@\n-            logln(\"ParseException: \" + e.getMessage());\n+            System.out.println(\"ParseException: \" + e.getMessage());\n@@ -333,1 +339,1 @@\n-                errln(\"FAIL: Expected \" + expected);\n+                fail(\"FAIL: Expected \" + expected);\n@@ -337,1 +343,1 @@\n-            errln(\"*** Exception:\");\n+            fail(\"*** Exception:\");\n@@ -343,0 +349,1 @@\n+    @Test\n@@ -353,1 +360,1 @@\n-        logln(now);\n+        System.out.println(now);\n@@ -364,1 +371,1 @@\n-        logln(then);\n+        System.out.println(then);\n@@ -367,1 +374,1 @@\n-            errln(\"FAIL\");\n+            fail(\"FAIL\");\n@@ -373,0 +380,1 @@\n+    @Test\n@@ -389,1 +397,1 @@\n-        logln( \"pattern=\" + fmt.toPattern() + \"   string=\" + str );\n+        System.out.println( \"pattern=\" + fmt.toPattern() + \"   string=\" + str );\n@@ -398,1 +406,1 @@\n-        logln( \"Parsed object: \" + o );\n+        System.out.println( \"Parsed object: \" + o );\n@@ -400,1 +408,1 @@\n-            errln(\"FAIL: Expected \" + expected);\n+            fail(\"FAIL: Expected \" + expected);\n@@ -404,1 +412,1 @@\n-        logln( \"Formatted string: \" + formatted );\n+        System.out.println( \"Formatted string: \" + formatted );\n@@ -406,1 +414,1 @@\n-            errln(\"FAIL: Expected \" + str);\n+            fail(\"FAIL: Expected \" + str);\n@@ -413,0 +421,1 @@\n+    @Test\n@@ -418,1 +427,1 @@\n-        logln(\"Pattern \" + ((SimpleDateFormat)fmt).toPattern());\n+        System.out.println(\"Pattern \" + ((SimpleDateFormat)fmt).toPattern());\n@@ -427,1 +436,1 @@\n-            logln(\"format(June 15 1997) = \" + juneStr);\n+            System.out.println(\"format(June 15 1997) = \" + juneStr);\n@@ -431,1 +440,1 @@\n-            logln(\"  -> parse -> \" + s + \" (month = \" + month + \")\");\n+            System.out.println(\"  -> parse -> \" + s + \" (month = \" + month + \")\");\n@@ -433,1 +442,1 @@\n-                errln(\"FAIL: Month should be June\");\n+                fail(\"FAIL: Month should be June\");\n@@ -436,1 +445,1 @@\n-            logln(\"format(July 15 1997) = \" + julyStr);\n+            System.out.println(\"format(July 15 1997) = \" + julyStr);\n@@ -440,1 +449,1 @@\n-            logln(\"  -> parse -> \" + s + \" (month = \" + month + \")\");\n+            System.out.println(\"  -> parse -> \" + s + \" (month = \" + month + \")\");\n@@ -442,1 +451,1 @@\n-                errln(\"FAIL: Month should be July\");\n+                fail(\"FAIL: Month should be July\");\n@@ -446,1 +455,1 @@\n-            errln(\"Exception: \" + e);\n+            fail(\"Exception: \" + e);\n@@ -452,0 +461,1 @@\n+    @Test\n@@ -460,1 +470,1 @@\n-        logln( \"dateString= \" + dateString );\n+        System.out.println( \"dateString= \" + dateString );\n@@ -464,1 +474,1 @@\n-        logln(\"Using \" + bigD + \" -> \" + myDate);\n+        System.out.println(\"Using \" + bigD + \" -> \" + myDate);\n@@ -466,1 +476,1 @@\n-            errln(\"FAIL: Expected \" + expBigD + \" got \" + myDate);\n+            fail(\"FAIL: Expected \" + expBigD + \" got \" + myDate);\n@@ -472,1 +482,1 @@\n-        logln(\"Using \" + littleD + \" -> \" + myDate);\n+        System.out.println(\"Using \" + littleD + \" -> \" + myDate);\n@@ -474,1 +484,1 @@\n-            errln(\"FAIL: Expected \" + expLittleD + \" got \" + myDate);\n+            fail(\"FAIL: Expected \" + expLittleD + \" got \" + myDate);\n@@ -480,0 +490,1 @@\n+    @Test\n@@ -485,1 +496,1 @@\n-        logln(\"Test Date: \" + today);\n+        System.out.println(\"Test Date: \" + today);\n@@ -499,1 +510,1 @@\n-        logln(\"pattern: \" + sdf.toPattern());\n+        System.out.println(\"pattern: \" + sdf.toPattern());\n@@ -502,1 +513,1 @@\n-        logln(\" format -> \" + formatResult);\n+        System.out.println(\" format -> \" + formatResult);\n@@ -505,1 +516,1 @@\n-            logln(\" parse(\" + formatResult +  \") -> \" + d2);\n+            System.out.println(\" parse(\" + formatResult +  \") -> \" + d2);\n@@ -507,1 +518,1 @@\n-                errln(\"FAIL: Expected \" + expected);\n+                fail(\"FAIL: Expected \" + expected);\n@@ -510,1 +521,1 @@\n-            logln(\" format -> \" + format2);\n+            System.out.println(\" format -> \" + format2);\n@@ -512,1 +523,1 @@\n-                errln(\"FAIL: Round trip drift\");\n+                fail(\"FAIL: Round trip drift\");\n@@ -516,1 +527,1 @@\n-            errln(\"Error: \" + e.getMessage());\n+            fail(\"Error: \" + e.getMessage());\n@@ -522,0 +533,1 @@\n+    @Test\n@@ -529,1 +541,1 @@\n-        logln(\"format(\" + currentTime_1 + \") = \" + dateString);\n+        System.out.println(\"format(\" + currentTime_1 + \") = \" + dateString);\n@@ -531,1 +543,1 @@\n-            errln(\"FAIL: Expected \" + exp);\n+            fail(\"FAIL: Expected \" + exp);\n@@ -543,0 +555,1 @@\n+    @Test\n@@ -563,1 +576,1 @@\n-                            errln(prefix +\n+                            fail(prefix +\n@@ -568,1 +581,1 @@\n-                        logln(prefix + \"OK: \" + format);\n+                        System.out.println(prefix + \"OK: \" + format);\n@@ -571,1 +584,1 @@\n-                            errln(\"FAIL: Expected \" + expected);\n+                            fail(\"FAIL: Expected \" + expected);\n@@ -578,1 +591,1 @@\n-                        errln(prefix + \"SHOULD NOT HAPPEN: \" + e);\n+                        fail(prefix + \"SHOULD NOT HAPPEN: \" + e);\n@@ -613,0 +626,1 @@\n+    @Test\n@@ -623,1 +637,1 @@\n-        logln(\"Trying to parse \\\"\" + s + \"\\\" with \" + dateParse.toPattern());\n+        System.out.println(\"Trying to parse \\\"\" + s + \"\\\" with \" + dateParse.toPattern());\n@@ -626,1 +640,1 @@\n-            errln(\"FAIL: Expected exception during parse\");\n+            fail(\"FAIL: Expected exception during parse\");\n@@ -628,1 +642,1 @@\n-            logln(\"Exception during parse: \" + ex); \/\/ This is expected\n+            System.out.println(\"Exception during parse: \" + ex); \/\/ This is expected\n@@ -647,1 +661,1 @@\n-                            errln(\"ERROR: null result with pos \" +\n+                            fail(\"ERROR: null result with pos \" +\n@@ -653,1 +667,1 @@\n-                            logln(\"Parsed \\\"\" + s + \"\\\" using \\\"\" + dateParse.toPattern() +\n+                            System.out.println(\"Parsed \\\"\" + s + \"\\\" using \\\"\" + dateParse.toPattern() +\n@@ -656,1 +670,1 @@\n-                                errln(\"FAIL: Expected parse failure\");\n+                                fail(\"FAIL: Expected parse failure\");\n@@ -658,1 +672,1 @@\n-                                errln(\"FAIL: Expected \" + expected);\n+                                fail(\"FAIL: Expected \" + expected);\n@@ -664,1 +678,1 @@\n-                            errln(\"FAIL: Expected \" + expected);\n+                            fail(\"FAIL: Expected \" + expected);\n@@ -668,1 +682,1 @@\n-                    errln(\"An exception was thrown during parse: \" + ex);\n+                    fail(\"An exception was thrown during parse: \" + ex);\n@@ -675,0 +689,1 @@\n+    @Test\n@@ -698,1 +713,1 @@\n-            errln(\"Failed: producing expected values: 2DigitYearStart: \" + new Date(start)\n+            fail(\"Failed: producing expected values: 2DigitYearStart: \" + new Date(start)\n@@ -701,1 +716,1 @@\n-        logln(\"2DigitYearStart: \" + new Date(start) + \", xx17 = \" + xx17 + \", xx34 = \" + xx34);\n+        System.out.println(\"2DigitYearStart: \" + new Date(start) + \", xx17 = \" + xx17 + \", xx34 = \" + xx34);\n@@ -716,1 +731,1 @@\n-            logln(\"Parsing \\\"\" + str + \"\\\" with \" +\n+            System.out.println(\"Parsing \\\"\" + str + \"\\\" with \" +\n@@ -720,1 +735,1 @@\n-                errln(\"FAIL: Expected \" + expected);\n+                fail(\"FAIL: Expected \" + expected);\n@@ -723,1 +738,1 @@\n-            errln(\"FAIL: Got exception\");\n+            fail(\"FAIL: Got exception\");\n@@ -728,0 +743,1 @@\n+    @Test\n@@ -735,1 +751,1 @@\n-        logln( \"Date 1997\/3\/25 00:00 GMT: \" + date );\n+        System.out.println( \"Date 1997\/3\/25 00:00 GMT: \" + date );\n@@ -740,1 +756,1 @@\n-        logln( \"Formatted in GMT to: \" + temp );\n+        System.out.println( \"Formatted in GMT to: \" + temp );\n@@ -745,1 +761,1 @@\n-            logln( \"Parsed to: \" + tempDate );\n+            System.out.println( \"Parsed to: \" + tempDate );\n@@ -747,1 +763,1 @@\n-                errln(\"FAIL: Expected \" + date);\n+                fail(\"FAIL: Expected \" + date);\n@@ -751,1 +767,1 @@\n-            errln( \"Date Formatter throws: \" +\n+            fail( \"Date Formatter throws: \" +\n@@ -757,0 +773,1 @@\n+    @Test\n@@ -770,1 +787,1 @@\n-                logln(\"Test timezone = \" + testtimezone);\n+                System.out.println(\"Test timezone = \" + testtimezone);\n@@ -772,1 +789,1 @@\n-                errln(\"Test timezone should be GMT, not \" + testtimezone);\n+                fail(\"Test timezone should be GMT, not \" + testtimezone);\n@@ -802,1 +819,1 @@\n-                logln(DATA[i] + result);\n+                System.out.println(DATA[i] + result);\n@@ -804,1 +821,1 @@\n-                    errln(\"FAIL: Expected \" + DATA[i+1]\n+                    fail(\"FAIL: Expected \" + DATA[i+1]\n@@ -815,0 +832,1 @@\n+    @Test\n@@ -824,1 +842,1 @@\n-        logln(\"Date set to : \" + testDate);\n+        System.out.println(\"Date set to : \" + testDate);\n@@ -826,2 +844,2 @@\n-        logln(\"Date Formated with French Locale \" + out);\n-        if (!out.equals(expectedFRENCH)) errln(\"FAIL: Expected \" + expectedFRENCH);\n+        System.out.println(\"Date Formated with French Locale \" + out);\n+        if (!out.equals(expectedFRENCH)) fail(\"FAIL: Expected \" + expectedFRENCH);\n@@ -829,2 +847,2 @@\n-        logln(\"Date Formated with US Locale \" + out);\n-        if (!out.equals(expectedUS)) errln(\"FAIL: Expected \" + expectedUS);\n+        System.out.println(\"Date Formated with US Locale \" + out);\n+        if (!out.equals(expectedUS)) fail(\"FAIL: Expected \" + expectedUS);\n@@ -838,0 +856,1 @@\n+    @Test\n@@ -844,1 +863,1 @@\n-            errln(\"DateFormat.getInstance() didn't return an instance of SimpleDateFormat!\");\n+            fail(\"DateFormat.getInstance() didn't return an instance of SimpleDateFormat!\");\n@@ -864,1 +883,1 @@\n-            errln(\"SimpleDateFormat.get2DigitStartDate() returned \" + (cal.get(Calendar.MONTH)\n+            fail(\"SimpleDateFormat.get2DigitStartDate() returned \" + (cal.get(Calendar.MONTH)\n@@ -872,1 +891,1 @@\n-            errln(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/1900 yielded a year of \"\n+            fail(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/1900 yielded a year of \"\n@@ -875,1 +894,1 @@\n-            errln(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/1900 failed: got \" +\n+            fail(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/1900 failed: got \" +\n@@ -881,1 +900,1 @@\n-            errln(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/1900 yielded a year of \"\n+            fail(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/1900 yielded a year of \"\n@@ -884,1 +903,1 @@\n-            errln(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/1900 failed: got \" +\n+            fail(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/1900 failed: got \" +\n@@ -894,1 +913,1 @@\n-            errln(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/2000 yielded a year of \"\n+            fail(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/2000 yielded a year of \"\n@@ -897,1 +916,1 @@\n-            errln(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/2000 failed: got \" +\n+            fail(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/2000 failed: got \" +\n@@ -903,1 +922,1 @@\n-            errln(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/2000 yielded a year of \"\n+            fail(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/2000 yielded a year of \"\n@@ -906,1 +925,1 @@\n-            errln(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/2000 failed: got \" +\n+            fail(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/2000 failed: got \" +\n@@ -916,1 +935,1 @@\n-            errln(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/1950 yielded a year of \"\n+            fail(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/1950 yielded a year of \"\n@@ -919,1 +938,1 @@\n-            errln(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/1950 failed: got \" +\n+            fail(\"Parsing \\\"3\/10\/67\\\" with 2-digit start date set to 1\/1\/1950 failed: got \" +\n@@ -925,1 +944,1 @@\n-            errln(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/1950 yielded a year of \"\n+            fail(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/1950 yielded a year of \"\n@@ -928,1 +947,1 @@\n-            errln(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/1950 failed: got \" +\n+            fail(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 1\/1\/1950 failed: got \" +\n@@ -938,1 +957,1 @@\n-            errln(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 6\/1\/1943 yielded a year of \"\n+            fail(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 6\/1\/1943 yielded a year of \"\n@@ -941,1 +960,1 @@\n-            errln(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 6\/1\/1943 failed: got \" +\n+            fail(\"Parsing \\\"3\/16\/43\\\" with 2-digit start date set to 6\/1\/1943 failed: got \" +\n@@ -947,1 +966,1 @@\n-            errln(\"Parsing \\\"7\/21\/43\\\" with 2-digit start date set to 6\/1\/1943 yielded a year of \"\n+            fail(\"Parsing \\\"7\/21\/43\\\" with 2-digit start date set to 6\/1\/1943 yielded a year of \"\n@@ -950,1 +969,1 @@\n-            errln(\"Parsing \\\"7\/21\/43\\\" with 2-digit start date set to 6\/1\/1943 failed: got \" +\n+            fail(\"Parsing \\\"7\/21\/43\\\" with 2-digit start date set to 6\/1\/1943 failed: got \" +\n@@ -960,1 +979,1 @@\n-            errln(\"SimpleDateFormat.get2DigitStartDate() returned \" + (cal.get(Calendar.MONTH)\n+            fail(\"SimpleDateFormat.get2DigitStartDate() returned \" + (cal.get(Calendar.MONTH)\n@@ -970,0 +989,1 @@\n+    @Test\n@@ -978,1 +998,1 @@\n-        logln(str + \" parses with \" + pat + \" to \" + d);\n+        System.out.println(str + \" parses with \" + pat + \" to \" + d);\n@@ -980,1 +1000,1 @@\n-            logln(\"Expected null returned, failed at : \" + pos.getErrorIndex());\n+            System.out.println(\"Expected null returned, failed at : \" + pos.getErrorIndex());\n@@ -982,1 +1002,1 @@\n-            errln(\"Failed, parse \" + str + \" got : \" + d + \", index=\" + pos.getErrorIndex());\n+            fail(\"Failed, parse \" + str + \" got : \" + d + \", index=\" + pos.getErrorIndex());\n@@ -989,0 +1009,1 @@\n+    @Test\n@@ -999,1 +1020,1 @@\n-            errln(\"Test4469904: Failed. Buddhist Era abbrev not present.\");\n+            fail(\"Test4469904: Failed. Buddhist Era abbrev not present.\");\n@@ -1007,0 +1028,1 @@\n+    @Test\n@@ -1024,1 +1046,1 @@\n-            errln(\"SimpleDateFormat() doesn't throw NPE with null pattern\");\n+            fail(\"SimpleDateFormat() doesn't throw NPE with null pattern\");\n@@ -1031,1 +1053,1 @@\n-            errln(\"SimpleDateFormat() doesn't throw NPE with null locale\");\n+            fail(\"SimpleDateFormat() doesn't throw NPE with null locale\");\n@@ -1038,1 +1060,1 @@\n-            errln(\"SimpleDateFormat() doesn't throw NPE with null DateFormatSymbols\");\n+            fail(\"SimpleDateFormat() doesn't throw NPE with null DateFormatSymbols\");\n@@ -1045,1 +1067,1 @@\n-            errln(\"applyPattern() doesn't throw NPE with null pattern\");\n+            fail(\"applyPattern() doesn't throw NPE with null pattern\");\n@@ -1054,1 +1076,1 @@\n-                errln(\"SimpleDateFormat(\\\"\" + wrongPatterns[i] + \"\\\")\" +\n+                fail(\"SimpleDateFormat(\\\"\" + wrongPatterns[i] + \"\\\")\" +\n@@ -1062,1 +1084,1 @@\n-                errln(\"SimpleDateFormat(\\\"\" + wrongPatterns[i] + \"\\\", DateFormatSymbols) doesn't \" +\n+                fail(\"SimpleDateFormat(\\\"\" + wrongPatterns[i] + \"\\\", DateFormatSymbols) doesn't \" +\n@@ -1070,1 +1092,1 @@\n-                errln(\"SimpleDateFormat(\\\"\" + wrongPatterns[i] +\n+                fail(\"SimpleDateFormat(\\\"\" + wrongPatterns[i] +\n@@ -1078,1 +1100,1 @@\n-                errln(\"SimpleDateFormat.applyPattern(\\\"\" + wrongPatterns[i] +\n+                fail(\"SimpleDateFormat.applyPattern(\\\"\" + wrongPatterns[i] +\n@@ -1103,0 +1125,1 @@\n+    @Test\n@@ -1112,1 +1135,1 @@\n-        logln(\"the test date: \" + date);\n+        System.out.println(\"the test date: \" + date);\n@@ -1123,1 +1146,1 @@\n-                    logln(s);\n+                    System.out.println(s);\n@@ -1136,1 +1159,1 @@\n-                        errln(\"round trip conversion failed: timezone=\"+zones[z]+\n+                        fail(\"round trip conversion failed: timezone=\"+zones[z]+\n@@ -1194,1 +1217,1 @@\n-                errln(\"wrong format result: expected=\"+expected+\", got=\"+s);\n+                fail(\"wrong format result: expected=\"+expected+\", got=\"+s);\n@@ -1200,1 +1223,1 @@\n-                errln(\"wrong parse result: expected=2001, got=\" + cal.get(YEAR));\n+                fail(\"wrong parse result: expected=2001, got=\" + cal.get(YEAR));\n@@ -1210,0 +1233,1 @@\n+    @Test\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/DateFormatTest.java","additions":158,"deletions":134,"binary":false,"changes":292,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/java\/text\/testlib\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI IntlTestDateFormat\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI IntlTestDateFormat\n@@ -47,1 +46,5 @@\n-public class IntlTestDateFormat extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class IntlTestDateFormat {\n@@ -65,4 +68,1 @@\n-    public static void main(String[] args) throws Exception {\n-        new IntlTestDateFormat().run(args);\n-    }\n-\n+    @Test\n@@ -88,1 +88,1 @@\n-                errln(\"FAIL: localeTest time getTimeInstance exception\");\n+                fail(\"FAIL: localeTest time getTimeInstance exception\");\n@@ -102,1 +102,1 @@\n-                errln(\"FAIL: localeTest date getTimeInstance exception\");\n+                fail(\"FAIL: localeTest date getTimeInstance exception\");\n@@ -115,1 +115,1 @@\n-                    errln(\"FAIL: localeTest date\/time getDateTimeInstance exception\");\n+                    fail(\"FAIL: localeTest date\/time getDateTimeInstance exception\");\n@@ -123,0 +123,1 @@\n+    @Test\n@@ -125,1 +126,1 @@\n-            errln(\"FAIL: DateFormat creation failed\");\n+            fail(\"FAIL: DateFormat creation failed\");\n@@ -145,1 +146,1 @@\n-            errln(\"FAIL: no DateFormat\");\n+            fail(\"FAIL: no DateFormat\");\n@@ -151,1 +152,1 @@\n-        logln(fTestName + \" Pattern \" + s.toPattern());\n+        System.out.println(fTestName + \" Pattern \" + s.toPattern());\n@@ -172,1 +173,1 @@\n-                    errln(\"********** FAIL: Parse of \" + string[i-1] + \" failed.\");\n+                    fail(\"********** FAIL: Parse of \" + string[i-1] + \" failed.\");\n@@ -183,1 +184,1 @@\n-                    errln(\"********** FAIL: Date mismatch after match.\");\n+                    fail(\"********** FAIL: Date mismatch after match.\");\n@@ -190,1 +191,1 @@\n-                    errln(\"********** FAIL: String mismatch after match.\");\n+                    fail(\"********** FAIL: String mismatch after match.\");\n@@ -201,1 +202,1 @@\n-            errln(\"********** FAIL: No string and\/or date match within \" + fLimit + \" iterations.\");\n+            fail(\"********** FAIL: No string and\/or date match within \" + fLimit + \" iterations.\");\n@@ -207,1 +208,1 @@\n-                logln(\"\" + k + \": \" + date[k] + \" F> \" + string[k] + \" P> \");\n+                System.out.println(\"\" + k + \": \" + date[k] + \" F> \" + string[k] + \" P> \");\n@@ -238,0 +239,1 @@\n+    @Test\n@@ -241,1 +243,1 @@\n-        logln(\"\" + count + \" available locales\");\n+        System.out.println(\"\" + count + \" available locales\");\n@@ -248,1 +250,1 @@\n-            logln(all.toString());\n+            System.out.println(all.toString());\n@@ -250,1 +252,1 @@\n-        else errln(\"********** FAIL: Zero available locales or null array pointer\");\n+        else fail(\"********** FAIL: Zero available locales or null array pointer\");\n@@ -254,0 +256,1 @@\n+    @Test\n@@ -260,1 +263,1 @@\n-                logln(\"Testing \" + name + \"...\");\n+                System.out.println(\"Testing \" + name + \"...\");\n@@ -265,1 +268,1 @@\n-                    errln(\"FAIL: TestMonster localeTest exception\" + e);\n+                    fail(\"FAIL: TestMonster localeTest exception\" + e);\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/IntlTestDateFormat.java","additions":27,"deletions":24,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/java\/text\/testlib\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI IntlTestDateFormatAPI\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI IntlTestDateFormatAPI\n@@ -46,1 +45,6 @@\n-public class IntlTestDateFormatAPI extends IntlTest\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class IntlTestDateFormatAPI\n@@ -48,9 +52,0 @@\n-    public static void main(String[] args) throws Exception {\n-        Locale reservedLocale = Locale.getDefault();\n-        try {\n-            new IntlTestDateFormatAPI().run(args);\n-        } finally {\n-            \/\/ restore the reserved locale\n-            Locale.setDefault(reservedLocale);\n-        }\n-    }\n@@ -59,0 +54,1 @@\n+    @Test\n@@ -68,1 +64,1 @@\n-            errln(\"FAIL: DateFormat objects created at different times are unequal.\");\n+            fail(\"FAIL: DateFormat objects created at different times are unequal.\");\n@@ -79,1 +75,1 @@\n-                errln(\"FAIL: setTwoDigitStartDate failed.\");\n+                fail(\"FAIL: setTwoDigitStartDate failed.\");\n@@ -85,0 +81,1 @@\n+    @Test\n@@ -87,1 +84,1 @@\n-        logln(\"DateFormat API test---\"); logln(\"\");\n+        System.out.println(\"DateFormat API test---\"); System.out.println(\"\");\n@@ -93,1 +90,1 @@\n-        logln(\"Testing DateFormat constructors\");\n+        System.out.println(\"Testing DateFormat constructors\");\n@@ -102,1 +99,1 @@\n-        logln(\"Testing equality operator\");\n+        System.out.println(\"Testing equality operator\");\n@@ -105,1 +102,1 @@\n-            errln(\"ERROR: equals failed\");\n+            fail(\"ERROR: equals failed\");\n@@ -110,1 +107,1 @@\n-        logln(\"Testing various format() methods\");\n+        System.out.println(\"Testing various format() methods\");\n@@ -121,1 +118,1 @@\n-        logln(\"\" + d.getTime() + \" formatted to \" + res1);\n+        System.out.println(\"\" + d.getTime() + \" formatted to \" + res1);\n@@ -124,1 +121,1 @@\n-        logln(\"\" + d.getTime() + \" formatted to \" + res2);\n+        System.out.println(\"\" + d.getTime() + \" formatted to \" + res2);\n@@ -127,1 +124,1 @@\n-        logln(\"\" + d.getTime() + \" formatted to \" + res3);\n+        System.out.println(\"\" + d.getTime() + \" formatted to \" + res3);\n@@ -131,1 +128,1 @@\n-        logln(\"Testing parse()\");\n+        System.out.println(\"Testing parse()\");\n@@ -142,1 +139,1 @@\n-            errln(\"ERROR: parseObject() failed for \" + text);\n+            fail(\"ERROR: parseObject() failed for \" + text);\n@@ -144,1 +141,1 @@\n-        logln(text + \" parsed into \" + ((Date)result1).getTime());\n+        System.out.println(text + \" parsed into \" + ((Date)result1).getTime());\n@@ -150,1 +147,1 @@\n-            errln(\"ERROR: parse() failed\");\n+            fail(\"ERROR: parse() failed\");\n@@ -152,1 +149,1 @@\n-        logln(text + \" parsed into \" + result2.getTime());\n+        System.out.println(text + \" parsed into \" + result2.getTime());\n@@ -156,1 +153,1 @@\n-            errln(\"ERROR: parse() failed for \" + text);\n+            fail(\"ERROR: parse() failed for \" + text);\n@@ -158,1 +155,1 @@\n-        logln(text + \" parsed into \" + result3.getTime());\n+        System.out.println(text + \" parsed into \" + result3.getTime());\n@@ -163,1 +160,1 @@\n-        logln(\"Testing getters and setters\");\n+        System.out.println(\"Testing getters and setters\");\n@@ -167,1 +164,1 @@\n-        logln(\"Got \" + count + \" locales\" );\n+        System.out.println(\"Got \" + count + \" locales\" );\n@@ -171,1 +168,1 @@\n-            logln(name);\n+            System.out.println(name);\n@@ -176,1 +173,1 @@\n-            errln(\"ERROR: setLenient() failed\");\n+            fail(\"ERROR: setLenient() failed\");\n@@ -184,1 +181,1 @@\n-            errln(\"ERROR: set Calendar() failed\");\n+            fail(\"ERROR: set Calendar() failed\");\n@@ -192,1 +189,1 @@\n-            errln(\"ERROR: set NumberFormat() failed\");\n+            fail(\"ERROR: set NumberFormat() failed\");\n@@ -200,1 +197,1 @@\n-            errln(\"ERROR: set TimeZone() failed\");\n+            fail(\"ERROR: set TimeZone() failed\");\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/IntlTestDateFormatAPI.java","additions":34,"deletions":37,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @library \/java\/text\/testlib\n@@ -28,0 +27,1 @@\n+ * @run junit IntlTestDateFormatSymbols\n@@ -44,5 +44,1 @@\n-public class IntlTestDateFormatSymbols extends IntlTest\n-{\n-    public static void main(String[] args) throws Exception {\n-        new IntlTestDateFormatSymbols().run(args);\n-    }\n+import org.junit.jupiter.api.Test;\n@@ -50,0 +46,4 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class IntlTestDateFormatSymbols\n+{\n@@ -51,0 +51,1 @@\n+    @Test\n@@ -61,1 +62,1 @@\n-        logln(\"size = \" + cnt);\n+        System.out.println(\"size = \" + cnt);\n@@ -65,1 +66,1 @@\n-            logln(month[i]);\n+            System.out.println(month[i]);\n@@ -70,0 +71,1 @@\n+    @Test\n@@ -77,1 +79,1 @@\n-            errln(\"ERROR: English DateFormatSymbols equal to French\");\n+            fail(\"ERROR: English DateFormatSymbols equal to French\");\n@@ -88,1 +90,1 @@\n-            errln(\"ERROR: setEras() failed (different size array)\");\n+            fail(\"ERROR: setEras() failed (different size array)\");\n@@ -93,1 +95,1 @@\n-                    errln(\"ERROR: setEras() failed (different string values)\");\n+                    fail(\"ERROR: setEras() failed (different string values)\");\n@@ -104,1 +106,1 @@\n-            errln(\"ERROR: setMonths() failed (different size array)\");\n+            fail(\"ERROR: setMonths() failed (different size array)\");\n@@ -109,1 +111,1 @@\n-                    errln(\"ERROR: setMonths() failed (different string values)\");\n+                    fail(\"ERROR: setMonths() failed (different string values)\");\n@@ -119,1 +121,1 @@\n-            errln(\"ERROR: setShortMonths() failed (different size array)\");\n+            fail(\"ERROR: setShortMonths() failed (different size array)\");\n@@ -124,1 +126,1 @@\n-                    errln(\"ERROR: setShortMonths() failed (different string values)\");\n+                    fail(\"ERROR: setShortMonths() failed (different string values)\");\n@@ -134,1 +136,1 @@\n-            errln(\"ERROR: setWeekdays() failed (different size array)\");\n+            fail(\"ERROR: setWeekdays() failed (different size array)\");\n@@ -139,1 +141,1 @@\n-                    errln(\"ERROR: setWeekdays() failed (different string values)\");\n+                    fail(\"ERROR: setWeekdays() failed (different string values)\");\n@@ -149,1 +151,1 @@\n-            errln(\"ERROR: setShortWeekdays() failed (different size array)\");\n+            fail(\"ERROR: setShortWeekdays() failed (different size array)\");\n@@ -154,1 +156,1 @@\n-                    errln(\"ERROR: setShortWeekdays() failed (different string values)\");\n+                    fail(\"ERROR: setShortWeekdays() failed (different string values)\");\n@@ -164,1 +166,1 @@\n-            errln(\"ERROR: setAmPmStrings() failed (different size array)\");\n+            fail(\"ERROR: setAmPmStrings() failed (different size array)\");\n@@ -169,1 +171,1 @@\n-                    errln(\"ERROR: setAmPmStrings() failed (different string values)\");\n+                    fail(\"ERROR: setAmPmStrings() failed (different string values)\");\n@@ -183,1 +185,1 @@\n-                    errln(\"ERROR: setZoneStrings() failed\");\n+                    fail(\"ERROR: setZoneStrings() failed\");\n@@ -194,1 +196,1 @@\n-            errln(\"ERROR: setLocalPatternChars() failed\");\n+            fail(\"ERROR: setLocalPatternChars() failed\");\n@@ -203,1 +205,1 @@\n-            errln(\"ERROR: Clone failed\");\n+            fail(\"ERROR: Clone failed\");\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/IntlTestDateFormatSymbols.java","additions":27,"deletions":25,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/java\/text\/testlib\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI IntlTestSimpleDateFormatAPI\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI IntlTestSimpleDateFormatAPI\n@@ -46,1 +45,6 @@\n-public class IntlTestSimpleDateFormatAPI extends IntlTest\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class IntlTestSimpleDateFormatAPI\n@@ -48,9 +52,0 @@\n-    public static void main(String[] args) throws Exception {\n-        Locale reservedLocale = Locale.getDefault();\n-        try {\n-            new IntlTestSimpleDateFormatAPI().run(args);\n-        } finally {\n-            \/\/ restore the reserved locale\n-            Locale.setDefault(reservedLocale);\n-        }\n-    }\n@@ -59,0 +54,1 @@\n+    @Test\n@@ -61,1 +57,1 @@\n-        logln(\"SimpleDateFormat API test---\"); logln(\"\");\n+        System.out.println(\"SimpleDateFormat API test---\"); System.out.println(\"\");\n@@ -67,1 +63,1 @@\n-        logln(\"Testing SimpleDateFormat constructors\");\n+        System.out.println(\"Testing SimpleDateFormat constructors\");\n@@ -82,1 +78,1 @@\n-        logln(\"Testing clone(), assignment and equality operators\");\n+        System.out.println(\"Testing clone(), assignment and equality operators\");\n@@ -86,1 +82,1 @@\n-            errln(\"ERROR: Format clone or equals failed\");\n+            fail(\"ERROR: Format clone or equals failed\");\n@@ -91,1 +87,1 @@\n-        logln(\"Testing various format() methods\");\n+        System.out.println(\"Testing various format() methods\");\n@@ -101,1 +97,1 @@\n-        logln( \"\" + d.getTime() + \" formatted to \" + res1);\n+        System.out.println( \"\" + d.getTime() + \" formatted to \" + res1);\n@@ -104,1 +100,1 @@\n-        logln(\"\" + d.getTime() + \" formatted to \" + res2);\n+        System.out.println(\"\" + d.getTime() + \" formatted to \" + res2);\n@@ -108,1 +104,1 @@\n-        logln(\"Testing parse()\");\n+        System.out.println(\"Testing parse()\");\n@@ -115,1 +111,1 @@\n-        logln(text + \" parsed into \" + result1);\n+        System.out.println(text + \" parsed into \" + result1);\n@@ -121,1 +117,1 @@\n-            errln(\"ERROR: parse() failed\");\n+            fail(\"ERROR: parse() failed\");\n@@ -123,1 +119,1 @@\n-        logln(text + \" parsed into \" + result2);\n+        System.out.println(text + \" parsed into \" + result2);\n@@ -127,1 +123,1 @@\n-        logln(\"Testing getters and setters\");\n+        System.out.println(\"Testing getters and setters\");\n@@ -133,1 +129,1 @@\n-            errln(\"ERROR: set DateFormatSymbols() failed\");\n+            fail(\"ERROR: set DateFormatSymbols() failed\");\n@@ -141,1 +137,1 @@\n-            errln(\"ERROR: getTwoDigitStartDate() failed\");\n+            fail(\"ERROR: getTwoDigitStartDate() failed\");\n@@ -148,1 +144,1 @@\n-            errln(\"ERROR: setTwoDigitStartDate() failed\");\n+            fail(\"ERROR: setTwoDigitStartDate() failed\");\n@@ -153,1 +149,1 @@\n-        logln(\"Testing applyPattern()\");\n+        System.out.println(\"Testing applyPattern()\");\n@@ -156,1 +152,1 @@\n-        logln(\"Applying pattern \" + p1);\n+        System.out.println(\"Applying pattern \" + p1);\n@@ -160,1 +156,1 @@\n-        logln(\"Extracted pattern is \" + s2);\n+        System.out.println(\"Extracted pattern is \" + s2);\n@@ -162,1 +158,1 @@\n-            errln(\"ERROR: toPattern() result did not match pattern applied\");\n+            fail(\"ERROR: toPattern() result did not match pattern applied\");\n@@ -165,1 +161,1 @@\n-        logln(\"Applying pattern \" + p1);\n+        System.out.println(\"Applying pattern \" + p1);\n@@ -168,1 +164,1 @@\n-        logln(\"Extracted pattern is \" + s3);\n+        System.out.println(\"Extracted pattern is \" + s3);\n@@ -170,1 +166,1 @@\n-            errln(\"ERROR: toLocalizedPattern() result did not match pattern applied\");\n+            fail(\"ERROR: toLocalizedPattern() result did not match pattern applied\");\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/IntlTestSimpleDateFormatAPI.java","additions":31,"deletions":35,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/java\/text\/testlib\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI TimeZoneNameTest\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI TimeZoneNameTest\n@@ -35,1 +34,6 @@\n-public class TimeZoneNameTest extends IntlTest\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class TimeZoneNameTest\n@@ -37,0 +41,7 @@\n+\n+    \/\/ Change JVM default Locale\n+    @BeforeAll\n+    static void initAll() {\n+        Locale.setDefault(Locale.US);\n+    }\n+\n@@ -97,11 +108,1 @@\n-    public static void main(String[] args) throws Exception {\n-        Locale reservedLocale = Locale.getDefault();\n-        try {\n-            Locale.setDefault(Locale.US);\n-            new TimeZoneNameTest().run(args);\n-        } finally {\n-            \/\/ restore the reserved locale\n-            Locale.setDefault(reservedLocale);\n-        }\n-    }\n-\n+    @Test\n@@ -132,2 +133,2 @@\n-            logln(tz.getID() + \": \" + sfmt.format(sol1.getTime()) + \", \" + lfmt.format(sol1.getTime()));\n-            logln(tz.getID() + \": \" + sfmt.format(sol2.getTime()) + \", \" + lfmt.format(sol2.getTime()));\n+            System.out.println(tz.getID() + \": \" + sfmt.format(sol1.getTime()) + \", \" + lfmt.format(sol1.getTime()));\n+            System.out.println(tz.getID() + \": \" + sfmt.format(sol2.getTime()) + \", \" + lfmt.format(sol2.getTime()));\n@@ -136,1 +137,1 @@\n-                errln(tz.getID() + \": wrong short name: \\\"\" + s + \"\\\" (expected \\\"\" + data[i] + \"\\\")\");\n+                fail(tz.getID() + \": wrong short name: \\\"\" + s + \"\\\" (expected \\\"\" + data[i] + \"\\\")\");\n@@ -140,1 +141,1 @@\n-                errln(tz.getID() + \": wrong long name: \\\"\" + s + \"\\\" (expected \\\"\" + data[i] + \"\\\")\");\n+                fail(tz.getID() + \": wrong long name: \\\"\" + s + \"\\\" (expected \\\"\" + data[i] + \"\\\")\");\n@@ -144,1 +145,1 @@\n-                errln(tz.getID() + \": wrong short name: \\\"\" + s + \"\\\" (expected \\\"\" + data[i] + \"\\\")\");\n+                fail(tz.getID() + \": wrong short name: \\\"\" + s + \"\\\" (expected \\\"\" + data[i] + \"\\\")\");\n@@ -148,1 +149,1 @@\n-                errln(tz.getID() + \": wrong long name: \\\"\" + s + \"\\\" (expected \\\"\" + data[i] + \"\\\")\");\n+                fail(tz.getID() + \": wrong long name: \\\"\" + s + \"\\\" (expected \\\"\" + data[i] + \"\\\")\");\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/TimeZoneNameTest.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -31,1 +35,0 @@\n- * @library \/java\/text\/testlib\n@@ -33,0 +36,1 @@\n+ * @run junit bug4358730\n@@ -35,5 +39,1 @@\n-public class bug4358730 extends IntlTest {\n-\n-    public static void main(String[] args) throws Exception {\n-        new bug4358730().run(args);\n-    }\n+public class bug4358730 {\n@@ -53,0 +53,1 @@\n+    @Test\n@@ -68,1 +69,1 @@\n-                        errln(\"Invalid format : \" + sdf.format(d) +\n+                        fail(\"Invalid format : \" + sdf.format(d) +\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/bug4358730.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,3 @@\n- * @build Bug4185816Test IntlTest HexDumpReader\n- * @run main Bug4185816Test\n- * @summary test that MessageFormat invariants are preserved across serialization\n+ * @build Bug4185816Test HexDumpReader\n+ * @run junit Bug4185816Test\n+ * @summary test that MessageFormat invariants are preserved across serialization.\n@@ -32,0 +32,1 @@\n+\n@@ -71,0 +72,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -72,1 +77,1 @@\n- *  A Locale can never contains language codes of he, yi or id.\n+ *  A Locale can never contain language codes of he, yi or id.\n@@ -74,1 +79,1 @@\n-public class Bug4185816Test extends IntlTest {\n+public class Bug4185816Test {\n@@ -78,8 +83,1 @@\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 1 && args[0].equals(\"prepTest\")) {\n-            prepTest();\n-        } else {\n-            new Bug4185816Test().run(args);\n-        }\n-    }\n-\n+    @Test\n@@ -89,1 +87,1 @@\n-            errln(\"MessageFormat did not stream in valid stream: \"+e);\n+            fail(\"MessageFormat did not stream in valid stream: \"+e);\n@@ -94,1 +92,1 @@\n-            errln(\"MessageFormat did NOT detect corrupt stream: \"+e);\n+            fail(\"MessageFormat did NOT detect corrupt stream: \"+e);\n@@ -112,26 +110,0 @@\n-\n-    \/**\n-     * Create a data file for this test.  The data file must be corrupted by hand.\n-     *\/\n-    private static void prepTest() {\n-        writeFormatToFile(FILE_NAME);\n-        writeFormatToFile(CORRUPT_FILE_NAME);\n-    }\n-\n-    private static void writeFormatToFile(final String name) {\n-        try {\n-            ObjectOutputStream out = new ObjectOutputStream(\n-                    new FileOutputStream(name));\n-\n-            MessageFormat fmt = new MessageFormat(\"The disk \\\"{1}\\\" contains {0}.\");\n-            double[] filelimits = {0,1,2};\n-            String[] filepart = {\"no files\",\"one file\",\"{0,number} files\"};\n-            ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);\n-            fmt.setFormat(1,fileform); \/\/ NOT zero, see below\n-\n-            out.writeObject(fmt);\n-            out.close();\n-        } catch (Exception e) {\n-            System.out.println(e);\n-        }\n-    }\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/Bug4185816Test.java","additions":14,"deletions":42,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main MessageRegression\n+ * @run junit MessageRegression\n@@ -56,1 +56,1 @@\n-public class MessageRegression extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -58,3 +58,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new MessageRegression().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class MessageRegression {\n@@ -66,0 +66,1 @@\n+    @Test\n@@ -83,2 +84,2 @@\n-                errln(\"MessageFormat with one param test failed.\");\n-            logln(\"Formatted with one extra param : \" + tempBuffer);\n+                fail(\"MessageFormat with one param test failed.\");\n+            System.out.println(\"Formatted with one extra param : \" + tempBuffer);\n@@ -90,2 +91,2 @@\n-                errln(\"MessageFormat with no param test failed.\");\n-            logln(\"Formatted with no params : \" + tempBuffer);\n+                fail(\"MessageFormat with no param test failed.\");\n+            System.out.println(\"Formatted with no params : \" + tempBuffer);\n@@ -95,2 +96,2 @@\n-                errln(\"Formatted with arguments > subsitution failed. result = \" + tempBuffer.toString());\n-             logln(\"Formatted with extra params : \" + tempBuffer);\n+                fail(\"Formatted with arguments > subsitution failed. result = \" + tempBuffer.toString());\n+             System.out.println(\"Formatted with extra params : \" + tempBuffer);\n@@ -106,1 +107,1 @@\n-            errln(\"Exception when formatting with no params.\");\n+            fail(\"Exception when formatting with no params.\");\n@@ -113,0 +114,1 @@\n+    @Test\n@@ -118,1 +120,1 @@\n-            errln(\"MessageFormat.toPattern failed\");\n+            fail(\"MessageFormat.toPattern failed\");\n@@ -124,0 +126,1 @@\n+    @Test\n@@ -127,1 +130,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -137,1 +140,1 @@\n-            logln(\"Apply with pattern : \" + pattern1);\n+            System.out.println(\"Apply with pattern : \" + pattern1);\n@@ -142,1 +145,1 @@\n-                errln(\"Tests arguments < substitution failed. Formatted text=\" +\n+                fail(\"Tests arguments < substitution failed. Formatted text=\" +\n@@ -144,1 +147,1 @@\n-            logln(\"Formatted with 7 : \" + tempBuffer);\n+            System.out.println(\"Formatted with 7 : \" + tempBuffer);\n@@ -148,1 +151,1 @@\n-                errln(\"Parse failed with more than expected arguments\");\n+                fail(\"Parse failed with more than expected arguments\");\n@@ -151,1 +154,1 @@\n-                    errln(\"Parse failed on object \" + objs[i] + \" at index : \" + i);\n+                    fail(\"Parse failed on object \" + objs[i] + \" at index : \" + i);\n@@ -156,3 +159,3 @@\n-                errln(\"Tests with no arguments failed\");\n-            logln(\"Formatted with null : \" + tempBuffer);\n-            logln(\"Apply with pattern : \" + pattern2);\n+                fail(\"Tests with no arguments failed\");\n+            System.out.println(\"Formatted with null : \" + tempBuffer);\n+            System.out.println(\"Apply with pattern : \" + pattern2);\n@@ -162,2 +165,2 @@\n-                errln(\"quote format test (w\/ params) failed.\");\n-            logln(\"Formatted with params : \" + tempBuffer);\n+                fail(\"quote format test (w\/ params) failed.\");\n+            System.out.println(\"Formatted with params : \" + tempBuffer);\n@@ -166,3 +169,3 @@\n-                errln(\"quote format test (w\/ null) failed.\");\n-            logln(\"Formatted with null : \" + tempBuffer);\n-            logln(\"toPattern : \" + messageFormatter.toPattern());\n+                fail(\"quote format test (w\/ null) failed.\");\n+            System.out.println(\"Formatted with null : \" + tempBuffer);\n+            System.out.println(\"toPattern : \" + messageFormatter.toPattern());\n@@ -170,1 +173,1 @@\n-            errln(\"Exception when formatting in bug 4031438. \"+foo.getMessage());\n+            fail(\"Exception when formatting in bug 4031438. \"+foo.getMessage());\n@@ -173,0 +176,1 @@\n+    @Test\n@@ -177,1 +181,1 @@\n-            errln(\"ParsePosition.getErrorIndex initialization failed.\");\n+            fail(\"ParsePosition.getErrorIndex initialization failed.\");\n@@ -182,1 +186,1 @@\n-        logln(\"unparsable string , should fail at \" + pos.getErrorIndex());\n+        System.out.println(\"unparsable string , should fail at \" + pos.getErrorIndex());\n@@ -184,1 +188,1 @@\n-            errln(\"Bug 4052223 failed : parsing string \" + str);\n+            fail(\"Bug 4052223 failed : parsing string \" + str);\n@@ -187,1 +191,1 @@\n-            errln(\"setErrorIndex failed, got \" + pos.getErrorIndex() + \" instead of 4\");\n+            fail(\"setErrorIndex failed, got \" + pos.getErrorIndex() + \" instead of 4\");\n@@ -193,1 +197,1 @@\n-            errln(\"Parse with \\\"are negative\\\" failed, at \" + pos.getErrorIndex());\n+            fail(\"Parse with \\\"are negative\\\" failed, at \" + pos.getErrorIndex());\n@@ -197,1 +201,1 @@\n-            errln(\"Parse with \\\"are no or fraction\\\" failed, at \" + pos.getErrorIndex());\n+            fail(\"Parse with \\\"are no or fraction\\\" failed, at \" + pos.getErrorIndex());\n@@ -201,1 +205,1 @@\n-            errln(\"Parse with \\\"go postal\\\" failed, at \" + pos.getErrorIndex());\n+            fail(\"Parse with \\\"go postal\\\" failed, at \" + pos.getErrorIndex());\n@@ -206,0 +210,1 @@\n+    @Test\n@@ -212,2 +217,2 @@\n-            log(\"Compares to null is always false, returned : \");\n-            logln(cf.equals(null) ? \"TRUE\" : \"FALSE\");\n+            System.out.println(\"Compares to null is always false, returned : \");\n+            System.out.println(cf.equals(null) ? \"TRUE\" : \"FALSE\");\n@@ -215,1 +220,1 @@\n-            errln(\"ChoiceFormat.equals(null) throws exception.\");\n+            fail(\"ChoiceFormat.equals(null) throws exception.\");\n@@ -222,0 +227,1 @@\n+    @Test\n@@ -230,1 +236,1 @@\n-            logln(\"ChoiceFormat constructor should check for the array lengths\");\n+            System.out.println(\"ChoiceFormat constructor should check for the array lengths\");\n@@ -233,1 +239,1 @@\n-        if (cf != null) errln(cf.format(5));\n+        if (cf != null) fail(cf.format(5));\n@@ -241,0 +247,1 @@\n+    @Test\n@@ -249,1 +256,1 @@\n-            errln(\"format(\" + d + \") = \" + cf.format(d));\n+            fail(\"format(\" + d + \") = \" + cf.format(d));\n@@ -255,0 +262,1 @@\n+    @Test\n@@ -267,1 +275,1 @@\n-            errln(\"Unexpected exception : \" + e.getMessage());\n+            fail(\"Unexpected exception : \" + e.getMessage());\n@@ -281,1 +289,1 @@\n-            errln(\"Unexpected exception : \" + e.getMessage());\n+            fail(\"Unexpected exception : \" + e.getMessage());\n@@ -285,1 +293,1 @@\n-            errln(\"MessageFormats before and after serialization are not\" +\n+            fail(\"MessageFormats before and after serialization are not\" +\n@@ -289,1 +297,1 @@\n-            logln(\"Serialization for MessageFormat is OK.\");\n+            System.out.println(\"Serialization for MessageFormat is OK.\");\n@@ -295,0 +303,1 @@\n+    @Test\n@@ -302,1 +311,1 @@\n-            errln(\"illegal pattern: \\\"\" + illegalPattern + \"\\\"\");\n+            fail(\"illegal pattern: \\\"\" + illegalPattern + \"\\\"\");\n@@ -305,1 +314,1 @@\n-                errln(\"pattern after: \\\"\" + mf.toPattern() + \"\\\"\");\n+                fail(\"pattern after: \\\"\" + mf.toPattern() + \"\\\"\");\n@@ -312,0 +321,1 @@\n+    @Test\n@@ -322,2 +332,2 @@\n-                logln(\"pattern: \\\"\" + pattern + \"\\\"\");\n-                log(\" parsedObjects: \");\n+                System.out.println(\"pattern: \\\"\" + pattern + \"\\\"\");\n+                System.out.println(\" parsedObjects: \");\n@@ -325,1 +335,1 @@\n-                    log(\"{\");\n+                    System.out.println(\"{\");\n@@ -328,1 +338,1 @@\n-                            err(\"\\\"\" + array[j].toString() + \"\\\"\");\n+                            fail(\"\\\"\" + array[j].toString() + \"\\\"\");\n@@ -330,2 +340,2 @@\n-                            log(\"null\");\n-                        if (j < array.length - 1) log(\",\");\n+                            System.out.println(\"null\");\n+                        if (j < array.length - 1) System.out.println(\",\");\n@@ -333,1 +343,1 @@\n-                    log(\"}\") ;\n+                    System.out.println(\"}\") ;\n@@ -335,1 +345,1 @@\n-                    log(\"null\");\n+                    System.out.println(\"null\");\n@@ -337,1 +347,1 @@\n-                logln(\"\");\n+                System.out.println(\"\");\n@@ -339,2 +349,2 @@\n-                errln(\"pattern: \\\"\" + pattern + \"\\\"\");\n-                errln(\"  Exception: \" + e.getMessage());\n+                fail(\"pattern: \\\"\" + pattern + \"\\\"\");\n+                fail(\"  Exception: \" + e.getMessage());\n@@ -348,0 +358,1 @@\n+    @Test\n@@ -356,7 +367,7 @@\n-            logln(\"pattern: \\\"\" + mf.toPattern() + \"\\\"\");\n-            log(\"format(null) : \");\n-            logln(\"\\\"\" + mf.format(objs1) + \"\\\"\");\n-            log(\"format({})   : \");\n-            logln(\"\\\"\" + mf.format(objs2) + \"\\\"\");\n-            log(\"format({null}) :\");\n-            logln(\"\\\"\" + mf.format(objs3) + \"\\\"\");\n+            System.out.println(\"pattern: \\\"\" + mf.toPattern() + \"\\\"\");\n+            System.out.println(\"format(null) : \");\n+            System.out.println(\"\\\"\" + mf.format(objs1) + \"\\\"\");\n+            System.out.println(\"format({})   : \");\n+            System.out.println(\"\\\"\" + mf.format(objs2) + \"\\\"\");\n+            System.out.println(\"format({null}) :\");\n+            System.out.println(\"\\\"\" + mf.format(objs3) + \"\\\"\");\n@@ -364,1 +375,1 @@\n-            errln(\"Exception thrown for null argument tests.\");\n+            fail(\"Exception thrown for null argument tests.\");\n@@ -371,0 +382,1 @@\n+    @Test\n@@ -376,2 +388,2 @@\n-        logln(\"pattern before: \\\"\" + mf.toPattern() + \"\\\"\");\n-        logln(\"illegal pattern: \\\"\" + illegalPattern + \"\\\"\");\n+        System.out.println(\"pattern before: \\\"\" + mf.toPattern() + \"\\\"\");\n+        System.out.println(\"illegal pattern: \\\"\" + illegalPattern + \"\\\"\");\n@@ -380,1 +392,1 @@\n-            errln(\"Should have thrown IllegalArgumentException for pattern : \" + illegalPattern);\n+            fail(\"Should have thrown IllegalArgumentException for pattern : \" + illegalPattern);\n@@ -383,1 +395,1 @@\n-                errln(\"pattern after: \\\"\" + mf.toPattern() + \"\\\"\");\n+                fail(\"pattern after: \\\"\" + mf.toPattern() + \"\\\"\");\n@@ -389,0 +401,1 @@\n+    @Test\n@@ -393,12 +406,12 @@\n-        logln(\"Formatter Pattern : \" + fmt.toPattern());\n-\n-        logln(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));\n-        logln(\"Format with -1.0 : \" + fmt.format(-1.0));\n-        logln(\"Format with 0 : \" + fmt.format(0));\n-        logln(\"Format with 0.9 : \" + fmt.format(0.9));\n-        logln(\"Format with 1.0 : \" + fmt.format(1));\n-        logln(\"Format with 1.5 : \" + fmt.format(1.5));\n-        logln(\"Format with 2 : \" + fmt.format(2));\n-        logln(\"Format with 2.1 : \" + fmt.format(2.1));\n-        logln(\"Format with NaN : \" + fmt.format(Double.NaN));\n-        logln(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));\n+        System.out.println(\"Formatter Pattern : \" + fmt.toPattern());\n+\n+        System.out.println(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));\n+        System.out.println(\"Format with -1.0 : \" + fmt.format(-1.0));\n+        System.out.println(\"Format with 0 : \" + fmt.format(0));\n+        System.out.println(\"Format with 0.9 : \" + fmt.format(0.9));\n+        System.out.println(\"Format with 1.0 : \" + fmt.format(1));\n+        System.out.println(\"Format with 1.5 : \" + fmt.format(1.5));\n+        System.out.println(\"Format with 2 : \" + fmt.format(2));\n+        System.out.println(\"Format with 2.1 : \" + fmt.format(2.1));\n+        System.out.println(\"Format with NaN : \" + fmt.format(Double.NaN));\n+        System.out.println(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));\n@@ -409,0 +422,1 @@\n+    @Test\n@@ -414,9 +428,9 @@\n-            errln(\"Formatter Pattern : \" + fmt.toPattern());\n-        logln(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));\n-        logln(\"Format with -1.0 : \" + fmt.format(-1.0));\n-        logln(\"Format with 0 : \" + fmt.format(0));\n-        logln(\"Format with 0.9 : \" + fmt.format(0.9));\n-        logln(\"Format with 1.0 : \" + fmt.format(1));\n-        logln(\"Format with 1.5 : \" + fmt.format(1.5));\n-        logln(\"Format with 2 : \" + fmt.format(2));\n-        logln(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));\n+            fail(\"Formatter Pattern : \" + fmt.toPattern());\n+        System.out.println(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));\n+        System.out.println(\"Format with -1.0 : \" + fmt.format(-1.0));\n+        System.out.println(\"Format with 0 : \" + fmt.format(0));\n+        System.out.println(\"Format with 0.9 : \" + fmt.format(0.9));\n+        System.out.println(\"Format with 1.0 : \" + fmt.format(1));\n+        System.out.println(\"Format with 1.5 : \" + fmt.format(1.5));\n+        System.out.println(\"Format with 2 : \" + fmt.format(2));\n+        System.out.println(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));\n@@ -428,0 +442,1 @@\n+    @Test\n@@ -438,4 +453,4 @@\n-            logln(i + \". pattern :\\\"\" + mf.toPattern() + \"\\\"\");\n-            log(\" \\\"\" + formatted + \"\\\" parsed as \");\n-            if (objs == null) logln(\"  null\");\n-            else logln(\"  \" + objs[0]);\n+            System.out.println(i + \". pattern :\\\"\" + mf.toPattern() + \"\\\"\");\n+            System.out.println(\" \\\"\" + formatted + \"\\\" parsed as \");\n+            if (objs == null) System.out.println(\"  null\");\n+            else System.out.println(\"  \" + objs[0]);\n@@ -447,0 +462,1 @@\n+    @Test\n@@ -452,2 +468,2 @@\n-        logln(\"pattern: \\\"\" + mf.toPattern() + \"\\\"\");\n-        logln(\"text for parsing: \\\"\" + forParsing + \"\\\"\");\n+        System.out.println(\"pattern: \\\"\" + mf.toPattern() + \"\\\"\");\n+        System.out.println(\"text for parsing: \\\"\" + forParsing + \"\\\"\");\n@@ -455,1 +471,1 @@\n-            errln(\"argument0: \\\"\" + objs[0] + \"\\\"\");\n+            fail(\"argument0: \\\"\" + objs[0] + \"\\\"\");\n@@ -460,2 +476,2 @@\n-        logln(\"pattern: \\\"\" + mf.toPattern() + \"\\\"\");\n-        logln(\"text for parsing: \\\"\" + result + \"\\\"\");\n+        System.out.println(\"pattern: \\\"\" + mf.toPattern() + \"\\\"\");\n+        System.out.println(\"text for parsing: \\\"\" + result + \"\\\"\");\n@@ -464,1 +480,1 @@\n-            errln(\"result = \" + result);\n+            fail(\"result = \" + result);\n@@ -468,1 +484,1 @@\n-            errln( \"newobjs[0] = \" + newobjs[0]);\n+            fail( \"newobjs[0] = \" + newobjs[0]);\n@@ -473,0 +489,1 @@\n+    @Test\n@@ -485,2 +502,2 @@\n-        logln(form1.format(testArgs));\n-        logln(form2.format(testArgs));\n+        System.out.println(form1.format(testArgs));\n+        System.out.println(form2.format(testArgs));\n@@ -491,0 +508,1 @@\n+    @Test\n@@ -495,1 +513,1 @@\n-        logln(\"pattern: \\\"\" + mf.toPattern() + \"\\\"\");\n+        System.out.println(\"pattern: \\\"\" + mf.toPattern() + \"\\\"\");\n@@ -499,1 +517,1 @@\n-            log(\"  text for parsing: \\\"\" + texts[i] + \"\\\"\");\n+            System.out.println(\"  text for parsing: \\\"\" + texts[i] + \"\\\"\");\n@@ -501,1 +519,1 @@\n-                logln(\"  (incorrectly formatted string)\");\n+                System.out.println(\"  (incorrectly formatted string)\");\n@@ -503,1 +521,1 @@\n-                    errln(\"Incorrect error index: \" + pp.getErrorIndex());\n+                    fail(\"Incorrect error index: \" + pp.getErrorIndex());\n@@ -505,1 +523,1 @@\n-                logln(\"  (correctly formatted string)\");\n+                System.out.println(\"  (correctly formatted string)\");\n@@ -516,0 +534,1 @@\n+    @Test\n@@ -537,1 +556,1 @@\n-                    errln(\"\" + i + \": Got \\\"\" + out + \"\\\"; Want \\\"\" + PREFIX[i] + \"\\\"\");\n+                    fail(\"\" + i + \": Got \\\"\" + out + \"\\\"; Want \\\"\" + PREFIX[i] + \"\\\"\");\n@@ -542,1 +561,1 @@\n-                    errln(\"\" + i + \": Got \\\"\" + out + \"\\\"; Want \\\"\" + PREFIX[i] + \"\\\"...\\\"\" +\n+                    fail(\"\" + i + \": Got \\\"\" + out + \"\\\"; Want \\\"\" + PREFIX[i] + \"\\\"...\\\"\" +\n@@ -556,0 +575,1 @@\n+    @Test\n@@ -569,1 +589,1 @@\n-                        errln(\"Fail: Pattern \\\"\" + DATA[i] + \"\\\" x \"+j+\" -> \" +\n+                        fail(\"Fail: Pattern \\\"\" + DATA[i] + \"\\\" x \"+j+\" -> \" +\n@@ -575,1 +595,1 @@\n-                    errln(\"Fail: Pattern \\\"\" + DATA[i] + \"\\\" x toPattern -> \\\"\" + pat + '\"');\n+                    fail(\"Fail: Pattern \\\"\" + DATA[i] + \"\\\" x toPattern -> \\\"\" + pat + '\"');\n@@ -577,1 +597,1 @@\n-                    logln(\"Ok: Pattern \\\"\" + DATA[i] + \"\\\" x toPattern -> \\\"\" + pat + '\"');\n+                    System.out.println(\"Ok: Pattern \\\"\" + DATA[i] + \"\\\" x toPattern -> \\\"\" + pat + '\"');\n@@ -580,1 +600,1 @@\n-                errln(\"Fail: Pattern \\\"\" + DATA[i] + \"\\\" -> \" + e);\n+                fail(\"Fail: Pattern \\\"\" + DATA[i] + \"\\\" -> \" + e);\n@@ -590,0 +610,1 @@\n+    @Test\n@@ -596,1 +617,1 @@\n-                errln(\"MessageFormat.equals(null) returns false\");\n+                fail(\"MessageFormat.equals(null) returns false\");\n@@ -600,1 +621,1 @@\n-            errln(\"MessageFormat.equals(null) throws \" + e);\n+            fail(\"MessageFormat.equals(null) throws \" + e);\n@@ -608,0 +629,1 @@\n+    @Test\n@@ -610,1 +632,1 @@\n-        logln(MessageFormat.format( \"This will {0}\", \"work\"));\n+        System.out.println(MessageFormat.format( \"This will {0}\", \"work\"));\n@@ -613,1 +635,1 @@\n-        logln(MessageFormat.format( \"This will {0}\",\n+        System.out.println(MessageFormat.format( \"This will {0}\",\n@@ -617,0 +639,1 @@\n+    @Test\n@@ -635,0 +658,1 @@\n+    @Test\n@@ -650,0 +674,1 @@\n+    @Test\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/MessageRegression.java","additions":145,"deletions":120,"binary":false,"changes":265,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @library \/java\/text\/testlib\n@@ -28,0 +27,1 @@\n+ * @run junit MessageTest\n@@ -46,1 +46,1 @@\n-public class MessageTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -48,3 +48,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new MessageTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class MessageTest {\n@@ -53,0 +53,1 @@\n+    @Test\n@@ -74,2 +75,2 @@\n-                logln(\"\");\n-                logln( i + \" Pat in:  \" + testCases[i]);\n+                System.out.println(\"\");\n+                System.out.println( i + \" Pat in:  \" + testCases[i]);\n@@ -77,1 +78,1 @@\n-                logln( i + \" Pat out: \" + form.toPattern());\n+                System.out.println( i + \" Pat out: \" + form.toPattern());\n@@ -79,1 +80,1 @@\n-                logln( i + \" Result:  \" + result);\n+                System.out.println( i + \" Result:  \" + result);\n@@ -89,2 +90,2 @@\n-                       logln( i + \" \" + j + \" old: \" + testArg);\n-                       logln( i + \" \" + j + \" new: \" + value);\n+                       System.out.println( i + \" \" + j + \" old: \" + testArg);\n+                       System.out.println( i + \" \" + j + \" new: \" + value);\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/MessageTest.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @library \/java\/text\/testlib\n@@ -30,0 +29,1 @@\n+ * @run junit\/othervm bug4492719\n@@ -35,1 +35,2 @@\n-public class bug4492719 extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -37,1 +38,8 @@\n-    public static void main(String[] args) throws Exception {\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class bug4492719 {\n+\n+    \/\/ MessageFormat.parse() should be able to interpret a time zone\n+    \/\/ that uses \"GMT+\/-\".\n+    @Test\n+    public void testParse() throws Exception {\n@@ -44,1 +52,1 @@\n-            \"short\", \"medium\", \"long\", \"full\"\n+                \"short\", \"medium\", \"long\", \"full\"\n@@ -47,2 +55,2 @@\n-            \"America\/Los_Angeles\", \"GMT\", \"GMT+09:00\", \"GMT-8:00\",\n-            \"GMT+123\", \"GMT-1234\", \"GMT+2\", \"GMT-13\"\n+                \"America\/Los_Angeles\", \"GMT\", \"GMT+09:00\", \"GMT-8:00\",\n+                \"GMT+123\", \"GMT-1234\", \"GMT+2\", \"GMT-13\"\n@@ -61,1 +69,1 @@\n-                                      new Object [] { new Date(123456789012L)});\n+                            new Object [] { new Date(123456789012L)});\n@@ -68,1 +76,1 @@\n-                               e.getMessage());\n+                    e.getMessage());\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/bug4492719.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/java\/text\/testlib\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI BigDecimalFormat\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI BigDecimalFormat\n@@ -37,1 +36,1 @@\n-public class BigDecimalFormat extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -39,3 +38,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new BigDecimalFormat().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class BigDecimalFormat {\n@@ -1001,1 +1000,1 @@\n-            errln(\"Wrong format.\\n      got:\\n\" + mf.format(testArgs) +\n+            fail(\"Wrong format.\\n      got:\\n\" + mf.format(testArgs) +\n@@ -1017,1 +1016,1 @@\n-            errln(\"Formatting... failed.\" +\n+            fail(\"Formatting... failed.\" +\n@@ -1030,1 +1029,1 @@\n-            errln(\"Formatting... wrong Begin index returned for \" +\n+            fail(\"Formatting... wrong Begin index returned for \" +\n@@ -1037,1 +1036,1 @@\n-            errln(\"Formatting... wrong End index returned for \" +\n+            fail(\"Formatting... wrong End index returned for \" +\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/BigDecimalFormat.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/java\/text\/testlib\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI BigDecimalParse\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI BigDecimalParse\n@@ -36,1 +35,2 @@\n-public class BigDecimalParse extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -38,9 +38,8 @@\n-    public static void main(String[] args) throws Exception {\n-        Locale loc = Locale.getDefault();\n-        try {\n-            Locale.setDefault(Locale.US);\n-            new BigDecimalParse().run(args);\n-        } finally {\n-            \/\/ restore the reserved locale\n-            Locale.setDefault(loc);\n-        }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class BigDecimalParse {\n+\n+    \/\/ Change JVM default Locale\n+    @BeforeAll\n+    static void initAll() {\n+        Locale.setDefault(Locale.US);\n@@ -49,0 +48,1 @@\n+\n@@ -111,1 +111,2 @@\n-    void test_Parse_in_DecimalFormat_BigDecimal() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_BigDecimal() {\n@@ -153,1 +154,2 @@\n-    void test_Parse_in_DecimalFormat_BigDecimal_usingMultiplier() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_BigDecimal_usingMultiplier() {\n@@ -195,1 +197,2 @@\n-    void test_Parse_in_DecimalFormat_BigDecimal_DivisionByZero() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_BigDecimal_DivisionByZero() {\n@@ -216,1 +219,2 @@\n-    void test_Parse_in_DecimalFormat_Double_DivisionByZero() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_Double_DivisionByZero() {\n@@ -253,1 +257,2 @@\n-    void test_Parse_in_DecimalFormat_Long_DivisionByZero() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_Long_DivisionByZero() {\n@@ -274,1 +279,2 @@\n-    void test_Parse_in_DecimalFormat_BigInteger() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_BigInteger() {\n@@ -299,1 +305,2 @@\n-    void test_Parse_in_DecimalFormat_BigInteger_usingMultiplier() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_BigInteger_usingMultiplier() {\n@@ -340,1 +347,2 @@\n-    void test_Parse_in_DecimalFormat_SpecialNumber() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_SpecialNumber() {\n@@ -381,1 +389,2 @@\n-    void test_Parse_in_DecimalFormat_Other() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_Other() {\n@@ -475,1 +484,2 @@\n-    void test_Parse_in_MessageFormat_NotParseIntegerOnly() {\n+    @Test\n+    public void test_Parse_in_MessageFormat_NotParseIntegerOnly() {\n@@ -490,1 +500,1 @@\n-                    errln(\"Case\" + (i+1) +\n+                    fail(\"Case\" + (i+1) +\n@@ -495,1 +505,1 @@\n-                    errln(\"Case\" + (i+1) +\n+                    fail(\"Case\" + (i+1) +\n@@ -502,1 +512,1 @@\n-                errln(\"Unexpected exception: \" + e.getMessage());\n+                fail(\"Unexpected exception: \" + e.getMessage());\n@@ -561,1 +571,2 @@\n-    void test_Parse_in_MessageFormat_ParseIntegerOnly() {\n+    @Test\n+    public void test_Parse_in_MessageFormat_ParseIntegerOnly() {\n@@ -577,1 +588,1 @@\n-                    errln(\"Case\" + (i+1) +\n+                    fail(\"Case\" + (i+1) +\n@@ -583,1 +594,1 @@\n-                    errln(\"Case\" + (i+1) +\n+                    fail(\"Case\" + (i+1) +\n@@ -590,1 +601,1 @@\n-                errln(\"Unexpected exception: \" + e.getMessage());\n+                fail(\"Unexpected exception: \" + e.getMessage());\n@@ -627,1 +638,2 @@\n-    void test_Parse_in_DecimalFormat_ParseIntegerOnly() {\n+    @Test\n+    public void test_Parse_in_DecimalFormat_ParseIntegerOnly() {\n@@ -639,1 +651,1 @@\n-                    errln(\"Case\" + (i+1) +\n+                    fail(\"Case\" + (i+1) +\n@@ -645,1 +657,1 @@\n-                    errln(\"Case\" + (i+1) +\n+                    fail(\"Case\" + (i+1) +\n@@ -652,1 +664,1 @@\n-                errln(\"Unexpected exception: \" + e.getMessage());\n+                fail(\"Unexpected exception: \" + e.getMessage());\n@@ -670,1 +682,1 @@\n-            errln(e.getMessage());\n+            fail(e.getMessage());\n@@ -681,1 +693,1 @@\n-            errln(\"Parsing... failed.\" +\n+            fail(\"Parsing... failed.\" +\n@@ -690,1 +702,1 @@\n-            errln(\"Parsing... unexpected Class returned.\" +\n+            fail(\"Parsing... unexpected Class returned.\" +\n@@ -699,1 +711,1 @@\n-            errln(\"Parsing... wrong ParsePosition returned.\" +\n+            fail(\"Parsing... wrong ParsePosition returned.\" +\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/BigDecimalParse.java","additions":50,"deletions":38,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/java\/text\/testlib\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI Bug4838107\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI Bug4838107\n@@ -36,1 +35,5 @@\n-public class Bug4838107 extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class Bug4838107 {\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/Bug4838107.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @library \/java\/text\/testlib\n@@ -31,0 +30,1 @@\n+ * @run junit DFSExponential\n@@ -36,2 +36,3 @@\n-public class DFSExponential extends IntlTest\n-{\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -39,3 +40,2 @@\n-    public static void main(String[] args) throws Exception {\n-        new DFSExponential().run(args);\n-    }\n+public class DFSExponential\n+{\n@@ -58,1 +58,1 @@\n-        logln(\"Default exponent separator: \"+sym.getExponentSeparator());\n+        System.out.println(\"Default exponent separator: \"+sym.getExponentSeparator());\n@@ -62,1 +62,1 @@\n-            errln(\"null String was passed to set an exponent separator symbol\");\n+            fail(\"null String was passed to set an exponent separator symbol\");\n@@ -65,1 +65,1 @@\n-        logln(\"Current exponent separator: \"+sym.getExponentSeparator());\n+        System.out.println(\"Current exponent separator: \"+sym.getExponentSeparator());\n@@ -69,1 +69,1 @@\n-            logln(\"     Pattern: \" + fmt.toPattern());\n+            System.out.println(\"     Pattern: \" + fmt.toPattern());\n@@ -71,1 +71,1 @@\n-            logln(\"     Localized pattern: \"+locPattern);\n+            System.out.println(\"     Localized pattern: \"+locPattern);\n@@ -77,1 +77,1 @@\n-                logln(\"         \" + val[v]+\" --> \"+s);\n+                System.out.println(\"         \" + val[v]+\" --> \"+s);\n@@ -79,1 +79,1 @@\n-                    logln(\": Passed\");\n+                    System.out.println(\": Passed\");\n@@ -81,1 +81,1 @@\n-                   errln(\" Failed: Should be formatted as \"+valFormat[p][v]+ \"but got \"+s);\n+                   fail(\" Failed: Should be formatted as \"+valFormat[p][v]+ \"but got \"+s);\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/DFSExponential.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @build DFSSerialization IntlTest HexDumpReader\n- * @run main DFSSerialization\n+ * @build DFSSerialization HexDumpReader\n+ * @run junit DFSSerialization\n@@ -46,4 +46,5 @@\n-public class DFSSerialization extends IntlTest{\n-    public static void main(String[] args) throws Exception {\n-        new DFSSerialization().run(args);\n-    }\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class DFSSerialization{\n@@ -59,1 +60,1 @@\n-                logln(\" Deserialization of JDK1.4.2 Object from the current JDK: Passed.\");\n+                System.out.println(\" Deserialization of JDK1.4.2 Object from the current JDK: Passed.\");\n@@ -61,1 +62,1 @@\n-                errln(\" Deserialization of JDK1.4.2 Object from the current JDK was Failed:\"\n+                fail(\" Deserialization of JDK1.4.2 Object from the current JDK was Failed:\"\n@@ -82,1 +83,1 @@\n-                logln(\" Deserialization of current JDK Object from the current JDK: Passed.\");\n+                System.out.println(\" Deserialization of current JDK Object from the current JDK: Passed.\");\n@@ -84,1 +85,1 @@\n-                errln(\" Deserialization of current JDK Object from the current JDK was Failed:\"\n+                fail(\" Deserialization of current JDK Object from the current JDK was Failed:\"\n@@ -105,1 +106,1 @@\n-            logln(\" Trying to set exponent separator with null: Passed.\");\n+            System.out.println(\" Trying to set exponent separator with null: Passed.\");\n@@ -109,1 +110,1 @@\n-            errln(\"  Trying to set exponent separator with null:Failed.\");\n+            fail(\"  Trying to set exponent separator with null:Failed.\");\n@@ -127,1 +128,1 @@\n-            errln(\"Test Malfunction in DFSSerialization: Exception while reading the object\");\n+            fail(\"Test Malfunction in DFSSerialization: Exception while reading the object\");\n@@ -140,2 +141,2 @@\n-        logln(\" The special exponent separator is set : \"  + dfs.getExponentSeparator());\n-        logln(\" The special currency symbol is set : \"  + dfs.getCurrencySymbol());\n+        System.out.println(\" The special exponent separator is set : \"  + dfs.getExponentSeparator());\n+        System.out.println(\" The special currency symbol is set : \"  + dfs.getCurrencySymbol());\n@@ -151,1 +152,1 @@\n-            errln(\"Test Malfunction in DFSSerialization: Exception while creating an object\");\n+            fail(\"Test Malfunction in DFSSerialization: Exception while creating an object\");\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/DFSSerialization.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @library \/java\/text\/testlib\n@@ -28,0 +27,1 @@\n+ * @run junit IntlTestDecimalFormatAPI\n@@ -44,5 +44,1 @@\n-public class IntlTestDecimalFormatAPI extends IntlTest\n-{\n-    public static void main(String[] args)  throws Exception {\n-        new IntlTestDecimalFormatAPI().run(args);\n-    }\n+import org.junit.jupiter.api.Test;\n@@ -50,0 +46,4 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class IntlTestDecimalFormatAPI\n+{\n@@ -51,0 +51,1 @@\n+    @Test\n@@ -55,1 +56,1 @@\n-            logln(\"DecimalFormat API test---\"); logln(\"\");\n+            System.out.println(\"DecimalFormat API test---\"); System.out.println(\"\");\n@@ -60,1 +61,1 @@\n-            logln(\"Testing DecimalFormat constructors\");\n+            System.out.println(\"Testing DecimalFormat constructors\");\n@@ -70,1 +71,1 @@\n-                errln(\"ERROR: Could not create DecimalFormat (pattern)\");\n+                fail(\"ERROR: Could not create DecimalFormat (pattern)\");\n@@ -80,1 +81,1 @@\n-            logln(\"Testing clone() and equality operators\");\n+            System.out.println(\"Testing clone() and equality operators\");\n@@ -84,1 +85,1 @@\n-                errln(\"ERROR: Clone() failed\");\n+                fail(\"ERROR: Clone() failed\");\n@@ -89,1 +90,1 @@\n-            logln(\"Testing various format() methods\");\n+            System.out.println(\"Testing various format() methods\");\n@@ -97,1 +98,1 @@\n-            logln(\"\" + d + \" is the double value\");\n+            System.out.println(\"\" + d + \" is the double value\");\n@@ -109,1 +110,1 @@\n-            logln(\"\" + d + \" formatted to \" + res1);\n+            System.out.println(\"\" + d + \" formatted to \" + res1);\n@@ -112,1 +113,1 @@\n-            logln(\"\" + l + \" formatted to \" + res2);\n+            System.out.println(\"\" + l + \" formatted to \" + res2);\n@@ -115,1 +116,1 @@\n-            logln(\"\" + d + \" formatted to \" + res3);\n+            System.out.println(\"\" + d + \" formatted to \" + res3);\n@@ -118,1 +119,1 @@\n-            logln(\"\" + l + \" formatted to \" + res4);\n+            System.out.println(\"\" + l + \" formatted to \" + res4);\n@@ -122,1 +123,1 @@\n-            logln(\"Testing parse()\");\n+            System.out.println(\"Testing parse()\");\n@@ -130,1 +131,1 @@\n-                errln(\"ERROR: Roundtrip failed (via parse(\" +\n+                fail(\"ERROR: Roundtrip failed (via parse(\" +\n@@ -133,1 +134,1 @@\n-            logln(text + \" parsed into \" + (long) d2);\n+            System.out.println(text + \" parsed into \" + (long) d2);\n@@ -137,1 +138,1 @@\n-            logln(\"Testing getters and setters\");\n+            System.out.println(\"Testing getters and setters\");\n@@ -143,1 +144,1 @@\n-                errln(\"ERROR: set DecimalFormatSymbols() failed\");\n+                fail(\"ERROR: set DecimalFormatSymbols() failed\");\n@@ -149,1 +150,1 @@\n-            logln(\"Positive prefix (should be +): \" + posPrefix);\n+            System.out.println(\"Positive prefix (should be +): \" + posPrefix);\n@@ -151,1 +152,1 @@\n-                errln(\"ERROR: setPositivePrefix() failed\");\n+                fail(\"ERROR: setPositivePrefix() failed\");\n@@ -157,1 +158,1 @@\n-            logln(\"Negative prefix (should be -): \" + negPrefix);\n+            System.out.println(\"Negative prefix (should be -): \" + negPrefix);\n@@ -159,1 +160,1 @@\n-                errln(\"ERROR: setNegativePrefix() failed\");\n+                fail(\"ERROR: setNegativePrefix() failed\");\n@@ -165,1 +166,1 @@\n-            logln(\"Positive suffix (should be _): \" + posSuffix);\n+            System.out.println(\"Positive suffix (should be _): \" + posSuffix);\n@@ -167,1 +168,1 @@\n-                errln(\"ERROR: setPositiveSuffix() failed\");\n+                fail(\"ERROR: setPositiveSuffix() failed\");\n@@ -173,1 +174,1 @@\n-            logln(\"Negative suffix (should be ~): \" + negSuffix);\n+            System.out.println(\"Negative suffix (should be ~): \" + negSuffix);\n@@ -175,1 +176,1 @@\n-                errln(\"ERROR: setNegativeSuffix() failed\");\n+                fail(\"ERROR: setNegativeSuffix() failed\");\n@@ -181,1 +182,1 @@\n-            logln(\"Multiplier (should be 8): \" + multiplier);\n+            System.out.println(\"Multiplier (should be 8): \" + multiplier);\n@@ -183,1 +184,1 @@\n-                errln(\"ERROR: setMultiplier() failed\");\n+                fail(\"ERROR: setMultiplier() failed\");\n@@ -189,1 +190,1 @@\n-            logln(\"Grouping size (should be 2): \" + (long) groupingSize);\n+            System.out.println(\"Grouping size (should be 2): \" + (long) groupingSize);\n@@ -191,1 +192,1 @@\n-                errln(\"ERROR: setGroupingSize() failed\");\n+                fail(\"ERROR: setGroupingSize() failed\");\n@@ -196,1 +197,1 @@\n-            logln(\"DecimalSeparatorIsAlwaysShown (should be true) is \" +\n+            System.out.println(\"DecimalSeparatorIsAlwaysShown (should be true) is \" +\n@@ -199,1 +200,1 @@\n-                errln(\"ERROR: setDecimalSeparatorAlwaysShown() failed\");\n+                fail(\"ERROR: setDecimalSeparatorAlwaysShown() failed\");\n@@ -204,1 +205,1 @@\n-            logln(\"Pattern is \" + funkyPat);\n+            System.out.println(\"Pattern is \" + funkyPat);\n@@ -208,1 +209,1 @@\n-            logln(\"Localized pattern is \" + locPat);\n+            System.out.println(\"Localized pattern is \" + locPat);\n@@ -212,1 +213,1 @@\n-            logln(\"Testing applyPattern()\");\n+            System.out.println(\"Testing applyPattern()\");\n@@ -215,1 +216,1 @@\n-            logln(\"Applying pattern \" + p1);\n+            System.out.println(\"Applying pattern \" + p1);\n@@ -219,1 +220,1 @@\n-            logln(\"Extracted pattern is \" + s2);\n+            System.out.println(\"Extracted pattern is \" + s2);\n@@ -221,1 +222,1 @@\n-                errln(\"ERROR: toPattern() result did not match \" +\n+                fail(\"ERROR: toPattern() result did not match \" +\n@@ -226,1 +227,1 @@\n-            logln(\"Applying pattern \" + p2);\n+            System.out.println(\"Applying pattern \" + p2);\n@@ -230,1 +231,1 @@\n-            logln(\"Extracted pattern is \" + s3);\n+            System.out.println(\"Extracted pattern is \" + s3);\n@@ -232,1 +233,1 @@\n-                errln(\"ERROR: toLocalizedPattern() result did not match \" +\n+                fail(\"ERROR: toLocalizedPattern() result did not match \" +\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/IntlTestDecimalFormatAPI.java","additions":47,"deletions":46,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @library \/java\/text\/testlib\n@@ -29,0 +28,1 @@\n+ * @run junit IntlTestDecimalFormatSymbols\n@@ -45,5 +45,1 @@\n-public class IntlTestDecimalFormatSymbols extends IntlTest\n-{\n-    public static void main(String[] args) throws Exception {\n-        new IntlTestDecimalFormatSymbols().run(args);\n-    }\n+import org.junit.jupiter.api.Test;\n@@ -51,0 +47,4 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class IntlTestDecimalFormatSymbols\n+{\n@@ -52,0 +52,1 @@\n+    @Test\n@@ -59,1 +60,1 @@\n-            errln(\"ERROR: English DecimalFormatSymbols equal to French\");\n+            fail(\"ERROR: English DecimalFormatSymbols equal to French\");\n@@ -65,1 +66,1 @@\n-            errln(\"ERROR: French DecimalFormatSymbols not Locale.FRENCH\");\n+            fail(\"ERROR: French DecimalFormatSymbols not Locale.FRENCH\");\n@@ -69,1 +70,1 @@\n-            errln(\"ERROR: English DecimalFormatSymbols not Locale.ENGLISH\");\n+            fail(\"ERROR: English DecimalFormatSymbols not Locale.ENGLISH\");\n@@ -75,1 +76,1 @@\n-            errln(\"ERROR: get\/set ZeroDigit failed\");\n+            fail(\"ERROR: get\/set ZeroDigit failed\");\n@@ -81,1 +82,1 @@\n-            errln(\"ERROR: get\/set GroupingSeparator failed\");\n+            fail(\"ERROR: get\/set GroupingSeparator failed\");\n@@ -87,1 +88,1 @@\n-            errln(\"ERROR: get\/set DecimalSeparator failed\");\n+            fail(\"ERROR: get\/set DecimalSeparator failed\");\n@@ -93,1 +94,1 @@\n-            errln(\"ERROR: get\/set PerMill failed\");\n+            fail(\"ERROR: get\/set PerMill failed\");\n@@ -99,1 +100,1 @@\n-            errln(\"ERROR: get\/set Percent failed\");\n+            fail(\"ERROR: get\/set Percent failed\");\n@@ -105,1 +106,1 @@\n-            errln(\"ERROR: get\/set Percent failed\");\n+            fail(\"ERROR: get\/set Percent failed\");\n@@ -111,1 +112,1 @@\n-            errln(\"ERROR: get\/set PatternSeparator failed\");\n+            fail(\"ERROR: get\/set PatternSeparator failed\");\n@@ -118,1 +119,1 @@\n-            errln(\"ERROR: get\/set Infinity failed\");\n+            fail(\"ERROR: get\/set Infinity failed\");\n@@ -125,1 +126,1 @@\n-            errln(\"ERROR: get\/set NaN failed\");\n+            fail(\"ERROR: get\/set NaN failed\");\n@@ -131,1 +132,1 @@\n-            errln(\"ERROR: get\/set MinusSign failed\");\n+            fail(\"ERROR: get\/set MinusSign failed\");\n@@ -145,1 +146,1 @@\n-            errln(\"ERROR: Clone failed\");\n+            fail(\"ERROR: Clone failed\");\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/IntlTestDecimalFormatSymbols.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @library \/java\/text\/testlib\n@@ -29,0 +28,1 @@\n+ * @run junit IntlTestNumberFormatAPI\n@@ -45,5 +45,1 @@\n-public class IntlTestNumberFormatAPI extends IntlTest\n-{\n-    public static void main(String[] args) throws Exception {\n-        new IntlTestNumberFormatAPI().run(args);\n-    }\n+import org.junit.jupiter.api.Test;\n@@ -51,0 +47,4 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class IntlTestNumberFormatAPI\n+{\n@@ -52,0 +52,1 @@\n+    @Test\n@@ -56,1 +57,1 @@\n-            logln(\"NumberFormat API test---\"); logln(\"\");\n+            System.out.println(\"NumberFormat API test---\"); System.out.println(\"\");\n@@ -61,1 +62,1 @@\n-            logln(\"Testing NumberFormat constructors\");\n+            System.out.println(\"Testing NumberFormat constructors\");\n@@ -79,1 +80,1 @@\n-            logln(\"Testing equality operator\");\n+            System.out.println(\"Testing equality operator\");\n@@ -82,1 +83,1 @@\n-                errln(\"ERROR: == failed\");\n+                fail(\"ERROR: == failed\");\n@@ -87,1 +88,1 @@\n-            logln(\"Testing various format() methods\");\n+            System.out.println(\"Testing various format() methods\");\n@@ -108,1 +109,1 @@\n-            logln( \"\" + d + \" formatted to \" + res1);\n+            System.out.println( \"\" + d + \" formatted to \" + res1);\n@@ -111,1 +112,1 @@\n-            logln(\"\" + l + \" formatted to \" + res2);\n+            System.out.println(\"\" + l + \" formatted to \" + res2);\n@@ -114,1 +115,1 @@\n-            logln( \"\" + d + \" formatted to \" + res3);\n+            System.out.println( \"\" + d + \" formatted to \" + res3);\n@@ -117,1 +118,1 @@\n-            logln(\"\" + l + \" formatted to \" + res4);\n+            System.out.println(\"\" + l + \" formatted to \" + res4);\n@@ -120,1 +121,1 @@\n-            logln(\"\" + d + \" formatted to \" + res5);\n+            System.out.println(\"\" + d + \" formatted to \" + res5);\n@@ -123,1 +124,1 @@\n-            logln(\"\" + l + \" formatted to \" + res6);\n+            System.out.println(\"\" + l + \" formatted to \" + res6);\n@@ -128,1 +129,1 @@\n-            logln(\"Testing parse()\");\n+            System.out.println(\"Testing parse()\");\n@@ -136,1 +137,1 @@\n-                errln(\"ERROR: Roundtrip failed (via parse()) for \" + text);\n+                fail(\"ERROR: Roundtrip failed (via parse()) for \" + text);\n@@ -138,1 +139,1 @@\n-            logln(text + \" parsed into \" + d1);\n+            System.out.println(text + \" parsed into \" + d1);\n@@ -142,1 +143,1 @@\n-                errln(\"ERROR: Roundtrip failed (via parse()) for \" + text);\n+                fail(\"ERROR: Roundtrip failed (via parse()) for \" + text);\n@@ -144,1 +145,1 @@\n-            logln(text + \" parsed into \" + d2);\n+            System.out.println(text + \" parsed into \" + d2);\n@@ -151,1 +152,1 @@\n-                errln(\"ERROR: parse() failed\");\n+                fail(\"ERROR: parse() failed\");\n@@ -154,1 +155,1 @@\n-                errln(\"ERROR: Roundtrip failed (via parse()) for \" + text);\n+                fail(\"ERROR: Roundtrip failed (via parse()) for \" + text);\n@@ -156,1 +157,1 @@\n-            logln(text + \" parsed into \" + d3);\n+            System.out.println(text + \" parsed into \" + d3);\n@@ -161,1 +162,1 @@\n-            logln(\"Testing getters and setters\");\n+            System.out.println(\"Testing getters and setters\");\n@@ -165,1 +166,1 @@\n-            logln(\"Got \" + count + \" locales\" );\n+            System.out.println(\"Got \" + count + \" locales\" );\n@@ -169,1 +170,1 @@\n-                logln(name);\n+                System.out.println(name);\n@@ -174,1 +175,1 @@\n-                    errln(\"ERROR: setParseIntegerOnly() failed\");\n+                    fail(\"ERROR: setParseIntegerOnly() failed\");\n@@ -179,1 +180,1 @@\n-                    errln(\"ERROR: setGroupingUsed() failed\");\n+                    fail(\"ERROR: setGroupingUsed() failed\");\n@@ -184,1 +185,1 @@\n-                    errln(\"ERROR: setMaximumIntegerDigits() failed\");\n+                    fail(\"ERROR: setMaximumIntegerDigits() failed\");\n@@ -189,1 +190,1 @@\n-                    errln(\"ERROR: setMinimumIntegerDigits() failed\");\n+                    fail(\"ERROR: setMinimumIntegerDigits() failed\");\n@@ -194,1 +195,1 @@\n-                    errln(\"ERROR: setMaximumFractionDigits() failed\");\n+                    fail(\"ERROR: setMaximumFractionDigits() failed\");\n@@ -199,1 +200,1 @@\n-                    errln(\"ERROR: setMinimumFractionDigits() failed\");\n+                    fail(\"ERROR: setMinimumFractionDigits() failed\");\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/IntlTestNumberFormatAPI.java","additions":36,"deletions":35,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @build IntlTest HexDumpReader TestUtils\n+ * @build HexDumpReader TestUtils\n@@ -39,1 +39,1 @@\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI NumberRegression\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI NumberRegression\n@@ -61,1 +61,1 @@\n-public class NumberRegression extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -63,3 +63,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new NumberRegression().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class NumberRegression {\n@@ -70,0 +70,1 @@\n+    @Test\n@@ -75,1 +76,1 @@\n-                logln(\"NumberFormat.equals passed\");\n+                System.out.println(\"NumberFormat.equals passed\");\n@@ -77,1 +78,1 @@\n-            errln(\"(new MyNumberFormatTest()).equals(null) throws unexpected exception\");\n+            fail(\"(new MyNumberFormatTest()).equals(null) throws unexpected exception\");\n@@ -85,0 +86,1 @@\n+    @Test\n@@ -93,2 +95,2 @@\n-        if (nf1.equals(nf2)) errln(\"Test for bug 4074620 failed\");\n-        else logln(\"Test for bug 4074620 passed.\");\n+        if (nf1.equals(nf2)) fail(\"Test for bug 4074620 failed\");\n+        else System.out.println(\"Test for bug 4074620 passed.\");\n@@ -103,0 +105,1 @@\n+    @Test\n@@ -106,1 +109,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -116,3 +119,3 @@\n-        logln(\"d = \" + d);\n-        logln(\"maxFractionDigits = \" + df.getMaximumFractionDigits());\n-        logln(\" format(d) = '\" + df.format(d, sBuf1, fp1) + \"'\");\n+        System.out.println(\"d = \" + d);\n+        System.out.println(\"maxFractionDigits = \" + df.getMaximumFractionDigits());\n+        System.out.println(\" format(d) = '\" + df.format(d, sBuf1, fp1) + \"'\");\n@@ -122,1 +125,1 @@\n-        logln(\"maxFractionDigits = \" + df.getMaximumFractionDigits());\n+        System.out.println(\"maxFractionDigits = \" + df.getMaximumFractionDigits());\n@@ -126,1 +129,1 @@\n-            errln(\" format(d) = '\" + sBuf2 + \"'\");\n+            fail(\" format(d) = '\" + sBuf2 + \"'\");\n@@ -132,0 +135,1 @@\n+    @Test\n@@ -138,1 +142,1 @@\n-        logln(\"format(\" + n + \") = \" +\n+        System.out.println(\"format(\" + n + \") = \" +\n@@ -141,1 +145,1 @@\n-        logln(\"format(\" + n + \") = \" +\n+        System.out.println(\"format(\" + n + \") = \" +\n@@ -144,1 +148,1 @@\n-            errln(\"Test for bug 4087245 failed\");\n+            fail(\"Test for bug 4087245 failed\");\n@@ -149,0 +153,1 @@\n+    @Test\n@@ -158,1 +163,1 @@\n-            errln(n + \": '\" + buffer + \"'\");\n+            fail(n + \": '\" + buffer + \"'\");\n@@ -162,1 +167,1 @@\n-            errln(n + \": '\" + buffer + \"'\");\n+            fail(n + \": '\" + buffer + \"'\");\n@@ -168,0 +173,1 @@\n+    @Test\n@@ -174,1 +180,1 @@\n-            logln(df.format(123, sBuf, fp).toString());\n+            System.out.println(df.format(123, sBuf, fp).toString());\n@@ -176,1 +182,1 @@\n-            errln(\"Test for bug 4088503 failed.\");\n+            fail(\"Test for bug 4088503 failed.\");\n@@ -183,0 +189,1 @@\n+    @Test\n@@ -193,1 +200,1 @@\n-        logln(\" VALUE \" + returnfloat);\n+        System.out.println(\" VALUE \" + returnfloat);\n@@ -199,1 +206,1 @@\n-            errln(\" DISPLAYVALUE \" + stringValue);\n+            fail(\" DISPLAYVALUE \" + stringValue);\n@@ -206,0 +213,1 @@\n+    @Test\n@@ -209,2 +217,2 @@\n-            logln(format.parse(\"0\").toString());\n-        } catch (Exception e) { errln(\"Test for bug 4059870 failed : \" + e); }\n+            System.out.println(format.parse(\"0\").toString());\n+        } catch (Exception e) { fail(\"Test for bug 4059870 failed : \" + e); }\n@@ -217,0 +225,1 @@\n+    @Test\n@@ -221,1 +230,1 @@\n-                logln(\"Test Passed!\");\n+                System.out.println(\"Test Passed!\");\n@@ -223,1 +232,1 @@\n-            errln(\"Test for bug 4083018 failed => Message : \" + foo.getMessage());\n+            fail(\"Test for bug 4083018 failed => Message : \" + foo.getMessage());\n@@ -229,0 +238,1 @@\n+    @Test\n@@ -236,1 +246,1 @@\n-        logln(\"0.00159999 formats with 4 fractional digits to \" + out);\n+        System.out.println(\"0.00159999 formats with 4 fractional digits to \" + out);\n@@ -239,1 +249,1 @@\n-            errln(\"FAIL: Expected \" + expected);\n+            fail(\"FAIL: Expected \" + expected);\n@@ -247,0 +257,1 @@\n+    @Test\n@@ -250,2 +261,2 @@\n-        logln(\"nf toPattern1: \" + ((DecimalFormat)nf).toPattern());\n-        logln(\"nf toLocPattern1: \" + ((DecimalFormat)nf).toLocalizedPattern());\n+        System.out.println(\"nf toPattern1: \" + ((DecimalFormat)nf).toPattern());\n+        System.out.println(\"nf toLocPattern1: \" + ((DecimalFormat)nf).toLocalizedPattern());\n@@ -254,1 +265,1 @@\n-        logln(\"...applyLocalizedPattern ###,00;(###,00) \");\n+        System.out.println(\"...applyLocalizedPattern ###,00;(###,00) \");\n@@ -256,2 +267,2 @@\n-        logln(\"nf toPattern2: \" + ((DecimalFormat)nf).toPattern());\n-        logln(\"nf toLocPattern2: \" + ((DecimalFormat)nf).toLocalizedPattern());\n+        System.out.println(\"nf toPattern2: \" + ((DecimalFormat)nf).toPattern());\n+        System.out.println(\"nf toLocPattern2: \" + ((DecimalFormat)nf).toLocalizedPattern());\n@@ -259,2 +270,2 @@\n-        logln(\"nf: \" + nf.format(1234)); \/\/ 1234,00\n-        logln(\"nf: \" + nf.format(-1234)); \/\/ (1234,00)\n+        System.out.println(\"nf: \" + nf.format(1234)); \/\/ 1234,00\n+        System.out.println(\"nf: \" + nf.format(-1234)); \/\/ (1234,00)\n@@ -264,1 +275,1 @@\n-        logln(\"...applyLocalizedPattern # ###,00;(# ###,00) \");\n+        System.out.println(\"...applyLocalizedPattern # ###,00;(# ###,00) \");\n@@ -266,2 +277,2 @@\n-        logln(\"nf toPattern2: \" + ((DecimalFormat)nf).toPattern());\n-        logln(\"nf toLocPattern2: \" + ((DecimalFormat)nf).toLocalizedPattern());\n+        System.out.println(\"nf toPattern2: \" + ((DecimalFormat)nf).toPattern());\n+        System.out.println(\"nf toLocPattern2: \" + ((DecimalFormat)nf).toLocalizedPattern());\n@@ -270,1 +281,1 @@\n-            errln(\"nf : \" + buffer); \/\/ Expect 1 234,00\n+            fail(\"nf : \" + buffer); \/\/ Expect 1 234,00\n@@ -273,1 +284,1 @@\n-            errln(\"nf : \" + buffer); \/\/ Expect (1 234,00)\n+            fail(\"nf : \" + buffer); \/\/ Expect (1 234,00)\n@@ -283,0 +294,1 @@\n+    @Test\n@@ -287,1 +299,1 @@\n-        logln(\"----- Test Application -----\");\n+        System.out.println(\"----- Test Application -----\");\n@@ -292,1 +304,1 @@\n-            errln(\"Result -> \" + d);\n+            fail(\"Result -> \" + d);\n@@ -301,0 +313,1 @@\n+    @Test\n@@ -305,1 +318,1 @@\n-            logln(it.Now());\n+            System.out.println(it.Now());\n@@ -310,1 +323,1 @@\n-            logln(\"Saved ok.\");\n+            System.out.println(\"Saved ok.\");\n@@ -315,1 +328,1 @@\n-            logln(it2.Now());\n+            System.out.println(it2.Now());\n@@ -317,1 +330,1 @@\n-            logln(\"Loaded ok.\");\n+            System.out.println(\"Loaded ok.\");\n@@ -319,1 +332,1 @@\n-            errln(\"Test for bug 4069754 or 4057878 failed => Exception: \" + foo.getMessage());\n+            fail(\"Test for bug 4069754 or 4057878 failed => Exception: \" + foo.getMessage());\n@@ -326,0 +339,1 @@\n+    @Test\n@@ -330,2 +344,2 @@\n-            logln(\"toPattern() returns \\\"\" + df.toPattern() + \"\\\"\");\n-            errln(\"applyPattern(\\\"#.#.#\\\") doesn't throw IllegalArgumentException\");\n+            System.out.println(\"toPattern() returns \\\"\" + df.toPattern() + \"\\\"\");\n+            fail(\"applyPattern(\\\"#.#.#\\\") doesn't throw IllegalArgumentException\");\n@@ -333,1 +347,1 @@\n-            logln(\"Caught Illegal Argument Error !\");\n+            System.out.println(\"Caught Illegal Argument Error !\");\n@@ -338,2 +352,2 @@\n-            logln(\"toPattern() returns \\\"\" + df.toPattern() + \"\\\"\");\n-            errln(\"applyPattern(\\\"#0.0#0#0\\\") doesn't throw IllegalArgumentException\");\n+            System.out.println(\"toPattern() returns \\\"\" + df.toPattern() + \"\\\"\");\n+            fail(\"applyPattern(\\\"#0.0#0#0\\\") doesn't throw IllegalArgumentException\");\n@@ -341,1 +355,1 @@\n-            logln(\"Ok - IllegalArgumentException for #0.0#0#0\");\n+            System.out.println(\"Ok - IllegalArgumentException for #0.0#0#0\");\n@@ -348,0 +362,1 @@\n+    @Test\n@@ -358,2 +373,2 @@\n-        logln(\"d = \" + d);\n-        logln(\"BigDecimal.toString():  \" + bd.toString());\n+        System.out.println(\"d = \" + d);\n+        System.out.println(\"BigDecimal.toString():  \" + bd.toString());\n@@ -362,1 +377,1 @@\n-            errln(\"DecimalFormat.format(): \" + sb.toString());\n+            fail(\"DecimalFormat.format(): \" + sb.toString());\n@@ -370,0 +385,1 @@\n+    @Test\n@@ -373,1 +389,1 @@\n-        logln(\"d = \" + d);\n+        System.out.println(\"d = \" + d);\n@@ -382,2 +398,2 @@\n-                logln(\"  getMaximumFractionDigits() = \" + i);\n-                logln(\"  formated: \" + df.format(d, sb, fp));\n+                System.out.println(\"  getMaximumFractionDigits() = \" + i);\n+                System.out.println(\"  formated: \" + df.format(d, sb, fp));\n@@ -386,1 +402,1 @@\n-            errln(\"Bug 4090504 regression test failed. Message : \" + foo.getMessage());\n+            fail(\"Bug 4090504 regression test failed. Message : \" + foo.getMessage());\n@@ -392,0 +408,1 @@\n+    @Test\n@@ -400,1 +417,1 @@\n-        logln(d1.toString());\n+        System.out.println(d1.toString());\n@@ -402,1 +419,1 @@\n-            errln(\"Bug 4095713 test failed, new double value : \" + d2);\n+            fail(\"Bug 4095713 test failed, new double value : \" + d2);\n@@ -409,0 +426,1 @@\n+    @Test\n@@ -416,1 +434,1 @@\n-        logln(\"Long.MIN_VALUE : \" + df.parse(str, new ParsePosition(0)).toString());\n+        System.out.println(\"Long.MIN_VALUE : \" + df.parse(str, new ParsePosition(0)).toString());\n@@ -420,1 +438,1 @@\n-            errln(\"Bug 4092561 test failed when multiplier is not set to 1. Expected: -9.223372036854776E16, got: \" + num.doubleValue());\n+            fail(\"Bug 4092561 test failed when multiplier is not set to 1. Expected: -9.223372036854776E16, got: \" + num.doubleValue());\n@@ -426,1 +444,1 @@\n-            errln(\"Bug 4092561 test failed when multiplier is not set to 1. Expected: 9.223372036854776E16, got: \" + num.doubleValue());\n+            fail(\"Bug 4092561 test failed when multiplier is not set to 1. Expected: 9.223372036854776E16, got: \" + num.doubleValue());\n@@ -430,1 +448,1 @@\n-        logln(\"Long.MAX_VALUE : \" + df.parse(str, new ParsePosition(0)).toString());\n+        System.out.println(\"Long.MAX_VALUE : \" + df.parse(str, new ParsePosition(0)).toString());\n@@ -435,1 +453,1 @@\n-            errln(\"Bug 4092561 test failed when multiplier is not set to 1. Expected: 9.223372036854776E16, got: \" + num.doubleValue());\n+            fail(\"Bug 4092561 test failed when multiplier is not set to 1. Expected: 9.223372036854776E16, got: \" + num.doubleValue());\n@@ -441,1 +459,1 @@\n-            errln(\"Bug 4092561 test failed when multiplier is not set to 1. Expected: -9.223372036854776E16, got: \" + num.doubleValue());\n+            fail(\"Bug 4092561 test failed when multiplier is not set to 1. Expected: -9.223372036854776E16, got: \" + num.doubleValue());\n@@ -450,0 +468,1 @@\n+    @Test\n@@ -457,3 +476,3 @@\n-                errln(\"dfFoo.toPattern : \" + dfFoo.toPattern());\n-            logln(dfFoo.format(42));\n-            logln(dfFoo.format(-42));\n+                fail(\"dfFoo.toPattern : \" + dfFoo.toPattern());\n+            System.out.println(dfFoo.format(42));\n+            System.out.println(dfFoo.format(-42));\n@@ -462,3 +481,3 @@\n-                errln(\"dfFoo.toPattern : \" + dfFoo.toPattern());\n-            logln(dfFoo.format(42));\n-            logln(dfFoo.format(-42));\n+                fail(\"dfFoo.toPattern : \" + dfFoo.toPattern());\n+            System.out.println(dfFoo.format(42));\n+            System.out.println(dfFoo.format(-42));\n@@ -468,3 +487,3 @@\n-                errln(\"dfFoo.toPattern : \" + dfFoo.toPattern());\n-            logln(dfFoo.format(42));\n-            logln(dfFoo.format(-42));\n+                fail(\"dfFoo.toPattern : \" + dfFoo.toPattern());\n+            System.out.println(dfFoo.format(42));\n+            System.out.println(dfFoo.format(-42));\n@@ -474,3 +493,3 @@\n-                errln(\"dfFoo.toPattern : \" + dfFoo.toPattern());\n-            logln(dfFoo.format(42));\n-            logln(dfFoo.format(-42));\n+                fail(\"dfFoo.toPattern : \" + dfFoo.toPattern());\n+            System.out.println(dfFoo.format(42));\n+            System.out.println(dfFoo.format(-42));\n@@ -478,1 +497,1 @@\n-            errln(\"Message \" + foo.getMessage());\n+            fail(\"Message \" + foo.getMessage());\n@@ -489,0 +508,1 @@\n+    @Test\n@@ -499,1 +519,1 @@\n-            errln(\"ERROR in test: want decimal sep != monetary sep\");\n+            fail(\"ERROR in test: want decimal sep != monetary sep\");\n@@ -507,1 +527,1 @@\n-                logln(\"OK: 1.23 -> \\\"\" + str + \"\\\" contains \\\"\" +\n+                System.out.println(\"OK: 1.23 -> \\\"\" + str + \"\\\" contains \\\"\" +\n@@ -510,1 +530,1 @@\n-                errln(\"FAIL: 1.23 -> \\\"\" + str + \"\\\", should contain \\\"\" +\n+                fail(\"FAIL: 1.23 -> \\\"\" + str + \"\\\", should contain \\\"\" +\n@@ -519,0 +539,1 @@\n+    @Test\n@@ -536,1 +557,1 @@\n-            logln (\"Bug 4070798 default test passed.\");\n+            System.out.println(\"Bug 4070798 default test passed.\");\n@@ -538,1 +559,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -548,1 +569,1 @@\n-            logln (\"Bug 4070798 currency test assed.\");\n+            System.out.println(\"Bug 4070798 currency test assed.\");\n@@ -550,1 +571,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -560,1 +581,1 @@\n-            logln (\"Bug 4070798 percentage test passed.\");\n+            System.out.println(\"Bug 4070798 percentage test passed.\");\n@@ -562,1 +583,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -570,0 +591,1 @@\n+    @Test\n@@ -587,1 +609,1 @@\n-            logln (\"Bug 4071005 default test passed.\");\n+            System.out.println(\"Bug 4071005 default test passed.\");\n@@ -589,1 +611,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -598,1 +620,1 @@\n-            logln (\"Bug 4071005 currency test passed.\");\n+            System.out.println(\"Bug 4071005 currency test passed.\");\n@@ -600,1 +622,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -608,1 +630,1 @@\n-            logln (\"Bug 4071005 percentage test passed.\");\n+            System.out.println(\"Bug 4071005 percentage test passed.\");\n@@ -610,1 +632,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -619,0 +641,1 @@\n+    @Test\n@@ -635,1 +658,1 @@\n-            logln (\"Bug 4071014 default test passed.\");\n+            System.out.println(\"Bug 4071014 default test passed.\");\n@@ -637,1 +660,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -646,1 +669,1 @@\n-            logln (\"Bug 4071014 currency test passed.\");\n+            System.out.println(\"Bug 4071014 currency test passed.\");\n@@ -648,1 +671,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -657,1 +680,1 @@\n-            logln (\"Bug 4071014 percentage test passed.\");\n+            System.out.println(\"Bug 4071014 percentage test passed.\");\n@@ -659,1 +682,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -668,0 +691,1 @@\n+    @Test\n@@ -684,1 +708,1 @@\n-            logln (\"Bug 4071859 default test passed.\");\n+            System.out.println(\"Bug 4071859 default test passed.\");\n@@ -686,1 +710,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -695,1 +719,1 @@\n-            logln (\"Bug 4071859 currency test passed.\");\n+            System.out.println(\"Bug 4071859 currency test passed.\");\n@@ -697,1 +721,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -706,1 +730,1 @@\n-            logln (\"Bug 4071859 percentage test passed.\");\n+            System.out.println(\"Bug 4071859 percentage test passed.\");\n@@ -708,1 +732,1 @@\n-            errln(\"Failed:\" +\n+            fail(\"Failed:\" +\n@@ -718,0 +742,1 @@\n+    @Test\n@@ -742,2 +767,2 @@\n-        logln(\"\" + x + \" formats with 1 fractional digits to \" + out);\n-        if (!out.equals(expected)) errln(\"FAIL: Expected \" + expected);\n+        System.out.println(\"\" + x + \" formats with 1 fractional digits to \" + out);\n+        if (!out.equals(expected)) fail(\"FAIL: Expected \" + expected);\n@@ -748,0 +773,1 @@\n+    @Test\n@@ -753,1 +779,1 @@\n-            logln(fmt.format(.001));\n+            System.out.println(fmt.format(.001));\n@@ -755,1 +781,1 @@\n-            errln(\"Bug 4098471 failed with exception thrown : \" + foo.getMessage());\n+            fail(\"Bug 4098471 failed with exception thrown : \" + foo.getMessage());\n@@ -763,0 +789,1 @@\n+    @Test\n@@ -769,1 +796,1 @@\n-            logln(\"Inconsistent negative pattern is fine.\");\n+            System.out.println(\"Inconsistent negative pattern is fine.\");\n@@ -773,1 +800,1 @@\n-                errln(\"Failed!  3,456.78 p'ieces expected, but got : \" + tempString);\n+                fail(\"Failed!  3,456.78 p'ieces expected, but got : \" + tempString);\n@@ -775,1 +802,1 @@\n-            errln(\"An exception was thrown for any inconsistent negative pattern.\");\n+            fail(\"An exception was thrown for any inconsistent negative pattern.\");\n@@ -799,0 +826,1 @@\n+    @Test\n@@ -803,1 +831,1 @@\n-            errln(\"Bug 4099404 failed applying illegal pattern \\\"000.0#0\\\"\");\n+            fail(\"Bug 4099404 failed applying illegal pattern \\\"000.0#0\\\"\");\n@@ -805,1 +833,1 @@\n-            logln(\"Bug 4099404 pattern \\\"000.0#0\\\" passed\");\n+            System.out.println(\"Bug 4099404 pattern \\\"000.0#0\\\" passed\");\n@@ -809,1 +837,1 @@\n-            errln(\"Bug 4099404 failed applying illegal pattern \\\"0#0.000\\\"\");\n+            fail(\"Bug 4099404 failed applying illegal pattern \\\"0#0.000\\\"\");\n@@ -811,1 +839,1 @@\n-            logln(\"Bug 4099404 pattern \\\"0#0.000\\\" passed\");\n+            System.out.println(\"Bug 4099404 pattern \\\"0#0.000\\\" passed\");\n@@ -817,0 +845,1 @@\n+    @Test\n@@ -821,1 +850,1 @@\n-            errln(\"Minimum integer digits : \" + sdf.getMinimumIntegerDigits());\n+            fail(\"Minimum integer digits : \" + sdf.getMinimumIntegerDigits());\n@@ -826,0 +855,1 @@\n+    @Test\n@@ -831,1 +861,1 @@\n-            errln(\"Bug 4052223 failed : can't parse string \\\"a\\\".  Got \" + num);\n+            fail(\"Bug 4052223 failed : can't parse string \\\"a\\\".  Got \" + num);\n@@ -833,1 +863,1 @@\n-            logln(\"Caught expected ParseException : \" + foo.getMessage() + \" at index : \" + foo.getErrorOffset());\n+            System.out.println(\"Caught expected ParseException : \" + foo.getMessage() + \" at index : \" + foo.getErrorOffset());\n@@ -839,0 +869,1 @@\n+    @Test\n@@ -848,1 +879,1 @@\n-            errln(\"getCurrencySymbols failed, got empty string.\");\n+            fail(\"getCurrencySymbols failed, got empty string.\");\n@@ -850,1 +881,1 @@\n-        logln(\"Before set ==> Currency : \" + currency + \" Intl Currency : \" + intlCurrency + \" Monetary Decimal Separator : \" + monDecSeparator);\n+        System.out.println(\"Before set ==> Currency : \" + currency + \" Intl Currency : \" + intlCurrency + \" Monetary Decimal Separator : \" + monDecSeparator);\n@@ -860,1 +891,1 @@\n-            errln(\"setCurrencySymbols failed.\");\n+            fail(\"setCurrencySymbols failed.\");\n@@ -862,1 +893,1 @@\n-        logln(\"After set ==> Currency : \" + currency + \" Intl Currency : \" + intlCurrency + \" Monetary Decimal Separator : \" + monDecSeparator);\n+        System.out.println(\"After set ==> Currency : \" + currency + \" Intl Currency : \" + intlCurrency + \" Monetary Decimal Separator : \" + monDecSeparator);\n@@ -868,0 +899,1 @@\n+    @Test\n@@ -876,1 +908,1 @@\n-            errln(\"Format 1234.5 failed. Begin index: \" + field.getBeginIndex() + \" End index: \" + field.getEndIndex());\n+            fail(\"Format 1234.5 failed. Begin index: \" + field.getBeginIndex() + \" End index: \" + field.getEndIndex());\n@@ -880,1 +912,1 @@\n-            errln(\"Set begin\/end field indexes failed. Begin index: \" + field.getBeginIndex() + \" End index: \" + field.getEndIndex());\n+            fail(\"Set begin\/end field indexes failed. Begin index: \" + field.getBeginIndex() + \" End index: \" + field.getEndIndex());\n@@ -886,0 +918,1 @@\n+    @Test\n@@ -894,1 +927,1 @@\n-            errln(\"\\\"\" + text + \"\\\"  is parsed as \" + num);\n+            fail(\"\\\"\" + text + \"\\\"  is parsed as \" + num);\n@@ -898,1 +931,1 @@\n-            errln(\"\\\"\" + text + \"\\\"  is parsed as \" + num);\n+            fail(\"\\\"\" + text + \"\\\"  is parsed as \" + num);\n@@ -904,0 +937,1 @@\n+    @Test\n@@ -912,1 +946,1 @@\n-        logln(\"pattern: \\\"\" + df.toPattern() + \"\\\"\");\n+        System.out.println(\"pattern: \\\"\" + df.toPattern() + \"\\\"\");\n@@ -915,1 +949,1 @@\n-            errln(d1 + \"      is formatted as \" + buffer);\n+            fail(d1 + \"      is formatted as \" + buffer);\n@@ -920,1 +954,1 @@\n-            errln(d2 + \"      is formatted as \" + buffer);\n+            fail(d2 + \"      is formatted as \" + buffer);\n@@ -928,0 +962,1 @@\n+    @Test\n@@ -934,1 +969,1 @@\n-        logln(\"pattern: \\\"\" + df.toPattern() + \"\\\"\");\n+        System.out.println(\"pattern: \\\"\" + df.toPattern() + \"\\\"\");\n@@ -937,1 +972,1 @@\n-            errln(\"Test Failed: \\\"\" + text + \"\\\" is parsed as \" + num);\n+            fail(\"Test Failed: \\\"\" + text + \"\\\" is parsed as \" + num);\n@@ -943,1 +978,1 @@\n-            errln(\"Test Failed: \\\"$\\\" is parsed as \" + num);\n+            fail(\"Test Failed: \\\"$\\\" is parsed as \" + num);\n@@ -950,0 +985,1 @@\n+    @Test\n@@ -956,1 +992,1 @@\n-        if (result != null) errln(\"Should return null but got : \" + result); \/\/ Should be null; it isn't\n+        if (result != null) fail(\"Should return null but got : \" + result); \/\/ Should be null; it isn't\n@@ -962,0 +998,1 @@\n+    @Test\n@@ -971,1 +1008,1 @@\n-        logln(\"formated: \" +\n+        System.out.println(\"formated: \" +\n@@ -973,1 +1010,1 @@\n-        logln(\"expected: \" + bigN.toString());\n+        System.out.println(\"expected: \" + bigN.toString());\n@@ -978,0 +1015,1 @@\n+    @Test\n@@ -985,1 +1023,1 @@\n-        logln(\"pattern: \\\"\" + df.toPattern() + \"\\\"\");\n+        System.out.println(\"pattern: \\\"\" + df.toPattern() + \"\\\"\");\n@@ -989,1 +1027,1 @@\n-            errln(d + \"  is formatted as \" + buffer);\n+            fail(d + \"  is formatted as \" + buffer);\n@@ -997,0 +1035,1 @@\n+    @Test\n@@ -1001,1 +1040,1 @@\n-        logln(\"setMaximumIntegerDigits(128)\");\n+        System.out.println(\"setMaximumIntegerDigits(128)\");\n@@ -1003,1 +1042,1 @@\n-            errln(\"getMaximumIntegerDigits() returns \" +\n+            fail(\"getMaximumIntegerDigits() returns \" +\n@@ -1014,0 +1053,1 @@\n+    @Test\n@@ -1030,1 +1070,1 @@\n-                errln(\"Currency format for \" + locales[i] +\n+                fail(\"Currency format for \" + locales[i] +\n@@ -1061,1 +1101,1 @@\n-                errln(\"Results for \" + locales[i] + \" differ: \" +\n+                fail(\"Results for \" + locales[i] + \" differ: \" +\n@@ -1070,0 +1110,1 @@\n+    @Test\n@@ -1076,1 +1117,1 @@\n-        logln(\"toPattern: \" + formatDec.toPattern());\n+        System.out.println(\"toPattern: \" + formatDec.toPattern());\n@@ -1079,1 +1120,1 @@\n-            errln(\"result : \" + rateString + \" expected : 012.34\");\n+            fail(\"result : \" + rateString + \" expected : 012.34\");\n@@ -1083,1 +1124,1 @@\n-        logln(\"toPattern: \" + formatDec.toPattern());\n+        System.out.println(\"toPattern: \" + formatDec.toPattern());\n@@ -1086,1 +1127,1 @@\n-            errln(\"result : \" + rateString + \" expected : +012.34%\");\n+            fail(\"result : \" + rateString + \" expected : +012.34%\");\n@@ -1094,0 +1135,1 @@\n+    @Test\n@@ -1100,1 +1142,1 @@\n-        if (f.equals(\"9.02\")) logln(f + \" ok\"); else errln(\"9.02 -> \" + f + \"; want 9.02\");\n+        if (f.equals(\"9.02\")) System.out.println(f + \" ok\"); else fail(\"9.02 -> \" + f + \"; want 9.02\");\n@@ -1103,1 +1145,1 @@\n-        if (f.equals(\".00\")) logln(f + \" ok\"); else errln(\"0 -> \" + f + \"; want .00\");\n+        if (f.equals(\".00\")) System.out.println(f + \" ok\"); else fail(\"0 -> \" + f + \"; want .00\");\n@@ -1131,0 +1173,1 @@\n+    @Test\n@@ -1145,1 +1188,1 @@\n-                errln(\"Fail: 1.2 x \" + DATA[i] + \" = \" + result +\n+                fail(\"Fail: 1.2 x \" + DATA[i] + \" = \" + result +\n@@ -1149,1 +1192,1 @@\n-                logln(\"Ok: 1.2 x \" + DATA[i] + \" = \" + result);\n+                System.out.println(\"Ok: 1.2 x \" + DATA[i] + \" = \" + result);\n@@ -1158,0 +1201,1 @@\n+    @Test\n@@ -1174,1 +1218,1 @@\n-                errln(\"Fail: Format empty pattern x 123.456 => \" + s);\n+                fail(\"Fail: Format empty pattern x 123.456 => \" + s);\n@@ -1177,1 +1221,1 @@\n-                errln(\"Fail: Format empty pattern x -123.456 => \" + s);\n+                fail(\"Fail: Format empty pattern x -123.456 => \" + s);\n@@ -1184,0 +1228,1 @@\n+    @Test\n@@ -1191,1 +1236,1 @@\n-                errln(\"Fail: \" + str + \" x format -> \" + sd);\n+                fail(\"Fail: \" + str + \" x format -> \" + sd);\n@@ -1195,1 +1240,1 @@\n-            errln(e.toString());\n+            fail(e.toString());\n@@ -1204,0 +1249,1 @@\n+    @Test\n@@ -1226,1 +1272,1 @@\n-                    errln(\"Fail with \\\"\" + PATS[i] + \"\\\": Patterns should concur, \\\"\" +\n+                    fail(\"Fail with \\\"\" + PATS[i] + \"\\\": Patterns should concur, \\\"\" +\n@@ -1229,1 +1275,1 @@\n-                    logln(\"Ok \\\"\" + PATS[i] + \"\\\" toPattern() -> \\\"\" + pat + '\"');\n+                    System.out.println(\"Ok \\\"\" + PATS[i] + \"\\\" toPattern() -> \\\"\" + pat + '\"');\n@@ -1232,1 +1278,1 @@\n-                    logln(\"Ok \" + pi + \" x \\\"\" + PATS[i] + \"\\\" -> \\\"\" +\n+                    System.out.println(\"Ok \" + pi + \" x \\\"\" + PATS[i] + \"\\\" -> \\\"\" +\n@@ -1237,1 +1283,1 @@\n-                    errln(\"Fail \" + pi + \" x \\\"\" + PATS[i] + \"\\\" -> \\\"\" +\n+                    fail(\"Fail \" + pi + \" x \\\"\" + PATS[i] + \"\\\" -> \\\"\" +\n@@ -1244,1 +1290,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -1254,0 +1300,1 @@\n+    @Test\n@@ -1257,1 +1304,1 @@\n-        logln(\"Applying pattern \\\"\" + pattern + \"\\\"\");\n+        System.out.println(\"Applying pattern \\\"\" + pattern + \"\\\"\");\n@@ -1261,3 +1308,3 @@\n-            errln(\"Test failed\");\n-            errln(\" Minimum integer digits : \" + minIntDig);\n-            errln(\" new pattern: \" + sdf.toPattern());\n+            fail(\"Test failed\"\n+            + \"\\n Minimum integer digits : \" + minIntDig\n+            + \"\\n new pattern: \" + sdf.toPattern());\n@@ -1265,2 +1312,2 @@\n-            logln(\"Test passed\");\n-            logln(\" Minimum integer digits : \" + minIntDig);\n+            System.out.println(\"Test passed\");\n+            System.out.println(\" Minimum integer digits : \" + minIntDig);\n@@ -1274,0 +1321,1 @@\n+    @Test\n@@ -1282,1 +1330,1 @@\n-            errln(d1 + \" x \\\"\" + df.toPattern() + \"\\\" is formatted as \\\"\" + f1 + '\"');\n+            fail(d1 + \" x \\\"\" + df.toPattern() + \"\\\" is formatted as \\\"\" + f1 + '\"');\n@@ -1285,1 +1333,1 @@\n-            errln(d2 + \" x \\\"\" + df.toPattern() + \"\\\" is formatted as \\\"\" + f2 + '\"');\n+            fail(d2 + \" x \\\"\" + df.toPattern() + \"\\\" is formatted as \\\"\" + f2 + '\"');\n@@ -1292,0 +1340,1 @@\n+    @Test\n@@ -1298,1 +1347,1 @@\n-        logln(\"The number \" + dbl + \" formatted to \" + s);\n+        System.out.println(\"The number \" + dbl + \" formatted to \" + s);\n@@ -1303,1 +1352,1 @@\n-            errln(\"Caught a ParseException:\");\n+            fail(\"Caught a ParseException:\");\n@@ -1306,1 +1355,1 @@\n-        logln(\"The string \" + s + \" parsed as \" + n);\n+        System.out.println(\"The string \" + s + \" parsed as \" + n);\n@@ -1308,1 +1357,1 @@\n-            errln(\"Round trip failure\");\n+            fail(\"Round trip failure\");\n@@ -1315,0 +1364,1 @@\n+    @Test\n@@ -1322,1 +1372,1 @@\n-            logln(\"\" +\n+            System.out.println(\"\" +\n@@ -1327,1 +1377,1 @@\n-                logln(\"Failed to parse negative zero\");\n+                System.out.println(\"Failed to parse negative zero\");\n@@ -1335,0 +1385,1 @@\n+    @Test\n@@ -1343,1 +1394,1 @@\n-            logln(\"\" + a + \" -> \\\"\" + s + \"\\\" -> \" + b + \" ok\");\n+            System.out.println(\"\" + a + \" -> \\\"\" + s + \"\\\" -> \" + b + \" ok\");\n@@ -1345,1 +1396,1 @@\n-            errln(\"\" + a + \" -> \\\"\" + s + \"\\\" -> \" + b + \" FAIL\");\n+            fail(\"\" + a + \" -> \\\"\" + s + \"\\\" -> \" + b + \" FAIL\");\n@@ -1358,1 +1409,1 @@\n-                logln(\"\" + a + \" -> \\\"\" + s + \"\\\" -> \" + b + \" ok\");\n+                System.out.println(\"\" + a + \" -> \\\"\" + s + \"\\\" -> \" + b + \" ok\");\n@@ -1360,1 +1411,1 @@\n-                errln(\"\" + a + \" -> \\\"\" + s + \"\\\" -> \" + b + \" FAIL\");\n+                fail(\"\" + a + \" -> \\\"\" + s + \"\\\" -> \" + b + \" FAIL\");\n@@ -1368,0 +1419,1 @@\n+    @Test\n@@ -1376,1 +1428,1 @@\n-            errln(\"FAIL: parse(\\\"-0.0\\\") returns \" +\n+            fail(\"FAIL: parse(\\\"-0.0\\\") returns \" +\n@@ -1385,0 +1437,1 @@\n+    @Test\n@@ -1401,1 +1454,1 @@\n-                errln(\"FAIL: \" + DATA[i] + \" -> \" + s + \", want \" + DATA[i+1]);\n+                fail(\"FAIL: \" + DATA[i] + \" -> \" + s + \", want \" + DATA[i+1]);\n@@ -1409,0 +1462,1 @@\n+    @Test\n@@ -1425,1 +1479,1 @@\n-                logln(\"Ok: \" + in + \" x \" + pat + \" = \" + out);\n+                System.out.println(\"Ok: \" + in + \" x \" + pat + \" = \" + out);\n@@ -1427,1 +1481,1 @@\n-                errln(\"FAIL: \" + in + \" x  \" + pat + \" = \" + out +\n+                fail(\"FAIL: \" + in + \" x  \" + pat + \" = \" + out +\n@@ -1433,0 +1487,1 @@\n+    @Test\n@@ -1459,1 +1514,1 @@\n-            errln(\"FAIL: Deserialized bogus NumberFormat int:\" +\n+            fail(\"FAIL: Deserialized bogus NumberFormat int:\" +\n@@ -1465,1 +1520,1 @@\n-            logln(\"Ok: \" + e.getMessage());\n+            System.out.println(\"Ok: \" + e.getMessage());\n@@ -1473,1 +1528,1 @@\n-            errln(\"FAIL: Deserialized bogus DecimalFormat int:\" +\n+            fail(\"FAIL: Deserialized bogus DecimalFormat int:\" +\n@@ -1479,1 +1534,1 @@\n-            logln(\"Ok: \" + e.getMessage());\n+            System.out.println(\"Ok: \" + e.getMessage());\n@@ -1491,0 +1546,1 @@\n+    @Test\n@@ -1498,1 +1554,1 @@\n-            errln(\"FAIL: -1 x (minus=^) -> \" + fmt.format(-1) +\n+            fail(\"FAIL: -1 x (minus=^) -> \" + fmt.format(-1) +\n@@ -1502,1 +1558,1 @@\n-            errln(\"FAIL: (minus=^).getNegativePrefix -> \" +\n+            fail(\"FAIL: (minus=^).getNegativePrefix -> \" +\n@@ -1511,1 +1567,1 @@\n-            errln(\"FAIL: 0.25 x (percent=^) -> \" + fmt.format(0.25) +\n+            fail(\"FAIL: 0.25 x (percent=^) -> \" + fmt.format(0.25) +\n@@ -1515,1 +1571,1 @@\n-            errln(\"FAIL: (percent=^).getPositiveSuffix -> \" +\n+            fail(\"FAIL: (percent=^).getPositiveSuffix -> \" +\n@@ -1524,1 +1580,1 @@\n-            errln(\"FAIL: 0.25 x (permill=^) -> \" + fmt.format(0.25) +\n+            fail(\"FAIL: 0.25 x (permill=^) -> \" + fmt.format(0.25) +\n@@ -1528,1 +1584,1 @@\n-            errln(\"FAIL: (permill=^).getPositiveSuffix -> \" +\n+            fail(\"FAIL: (permill=^).getPositiveSuffix -> \" +\n@@ -1537,1 +1593,1 @@\n-            errln(\"FAIL: 12.5 x (currency=usd) -> \" + fmt.format(12.5) +\n+            fail(\"FAIL: 12.5 x (currency=usd) -> \" + fmt.format(12.5) +\n@@ -1541,1 +1597,1 @@\n-            errln(\"FAIL: (currency=usd).getPositivePrefix -> \" +\n+            fail(\"FAIL: (currency=usd).getPositivePrefix -> \" +\n@@ -1550,1 +1606,1 @@\n-            errln(\"FAIL: 12.5 x (intlcurrency=DOL) -> \" + fmt.format(12.5) +\n+            fail(\"FAIL: 12.5 x (intlcurrency=DOL) -> \" + fmt.format(12.5) +\n@@ -1554,1 +1610,1 @@\n-            errln(\"FAIL: (intlcurrency=DOL).getPositivePrefix -> \" +\n+            fail(\"FAIL: (intlcurrency=DOL).getPositivePrefix -> \" +\n@@ -1583,1 +1639,1 @@\n-                    errln(\"FAIL: \" + avail[i] + \" -> \\\"\" + pat +\n+                    fail(\"FAIL: \" + avail[i] + \" -> \\\"\" + pat +\n@@ -1591,1 +1647,1 @@\n-                    errln(\"FAIL: \" + avail[i] + \" -> localized \\\"\" + pat +\n+                    fail(\"FAIL: \" + avail[i] + \" -> localized \\\"\" + pat +\n@@ -1606,1 +1662,1 @@\n-                    errln(\"FAIL: Stream in\/out \" + avail[i] + \" -> \\\"\" + pat +\n+                    fail(\"FAIL: Stream in\/out \" + avail[i] + \" -> \\\"\" + pat +\n@@ -1618,0 +1674,1 @@\n+    @Test\n@@ -1627,1 +1684,1 @@\n-                    errln(\"\\\"\" + str + \"\\\" parse(x \" + fmt.getMultiplier() +\n+                    fail(\"\\\"\" + str + \"\\\" parse(x \" + fmt.getMultiplier() +\n@@ -1638,0 +1695,1 @@\n+    @Test\n@@ -1650,1 +1708,1 @@\n-                errln(\"FAIL: Got \" + s + \", exp \" + DATA[i+1]);\n+                fail(\"FAIL: Got \" + s + \", exp \" + DATA[i+1]);\n@@ -1658,0 +1716,1 @@\n+    @Test\n@@ -1668,1 +1727,1 @@\n-                logln(\"OK: got \" + result);\n+                System.out.println(\"OK: got \" + result);\n@@ -1670,1 +1729,1 @@\n-                errln(\"FAIL: got \" + result);\n+                fail(\"FAIL: got \" + result);\n@@ -1679,0 +1738,1 @@\n+    @Test\n@@ -1685,1 +1745,1 @@\n-            logln(\"OK: got \" + result);\n+            System.out.println(\"OK: got \" + result);\n@@ -1687,1 +1747,1 @@\n-            errln(\"FAIL: got \" + result);\n+            fail(\"FAIL: got \" + result);\n@@ -1692,1 +1752,1 @@\n-                logln(\"OK: got \" + dResult);\n+                System.out.println(\"OK: got \" + dResult);\n@@ -1694,1 +1754,1 @@\n-                errln(\"FAIL: got \" + dResult);\n+                fail(\"FAIL: got \" + dResult);\n@@ -1697,1 +1757,1 @@\n-            errln(\"Caught a ParseException:\");\n+            fail(\"Caught a ParseException:\");\n@@ -1702,1 +1762,1 @@\n-            logln(\"OK: got \" + result);\n+            System.out.println(\"OK: got \" + result);\n@@ -1704,1 +1764,1 @@\n-            errln(\"FAIL: got \" + result);\n+            fail(\"FAIL: got \" + result);\n@@ -1712,0 +1772,1 @@\n+    @Test\n@@ -1743,1 +1804,1 @@\n-                    errln(\"FAIL: input: \" + input[i] +\n+                    fail(\"FAIL: input: \" + input[i] +\n@@ -1756,0 +1817,1 @@\n+    @Test\n@@ -1765,1 +1827,1 @@\n-            errln(\"FAIL: input: \" + f + \", expected: 0.01, got: \" + result);\n+            fail(\"FAIL: input: \" + f + \", expected: 0.01, got: \" + result);\n@@ -1772,0 +1834,1 @@\n+    @Test\n@@ -1797,1 +1860,1 @@\n-                errln(\"FAIL: input: \" + input[i] +\n+                fail(\"FAIL: input: \" + input[i] +\n@@ -1810,0 +1873,1 @@\n+    @Test\n@@ -1832,1 +1896,1 @@\n-            errln(\"FAIL: getMonetaryGroupingSeparator() returned incorrect value. expected: \"\n+            fail(\"FAIL: getMonetaryGroupingSeparator() returned incorrect value. expected: \"\n@@ -1836,1 +1900,1 @@\n-            errln(\"FAIL: getMonetaryGroupingSeparator() returned the same value with \" +\n+            fail(\"FAIL: getMonetaryGroupingSeparator() returned the same value with \" +\n@@ -1844,1 +1908,1 @@\n-            errln(\"FAIL: format failed. expected: \" + expectedMonFmt +\n+            fail(\"FAIL: format failed. expected: \" + expectedMonFmt +\n@@ -1849,1 +1913,1 @@\n-            errln(\"FAIL: normal format failed. expected: \" + expectedNrmFmt +\n+            fail(\"FAIL: normal format failed. expected: \" + expectedNrmFmt +\n@@ -1856,1 +1920,1 @@\n-            errln(\"FAIL: parse failed. expected: \" + inputNum +\n+            fail(\"FAIL: parse failed. expected: \" + inputNum +\n@@ -1861,1 +1925,1 @@\n-            errln(\"FAIL: normal parse failed. expected: \" + inputNum +\n+            fail(\"FAIL: normal parse failed. expected: \" + inputNum +\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/NumberRegression.java","additions":289,"deletions":225,"binary":false,"changes":514,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @library \/java\/text\/testlib\n@@ -29,0 +28,1 @@\n+ * @run junit NumberRoundTrip\n@@ -31,2 +31,8 @@\n-import java.text.*;\n-import java.util.*;\n+import java.text.DecimalFormat;\n+import java.text.NumberFormat;\n+import java.text.ParseException;\n+import java.util.Locale;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -43,1 +49,1 @@\n-public class NumberRoundTrip extends IntlTest {\n+public class NumberRoundTrip {\n@@ -47,1 +53,0 @@\n-    static boolean DEBUG = false;\n@@ -53,10 +58,1 @@\n-    public static void main(String[] args) throws Exception {\n-        if (args.length > 0 && args[0].equals(\"-debug\")) {\n-            DEBUG = true;\n-            String[] newargs = new String[args.length - 1];\n-            System.arraycopy(args, 1, newargs, 0, newargs.length);\n-            args = newargs;\n-        }\n-        new NumberRoundTrip().run(args);\n-    }\n-\n+    @Test\n@@ -64,1 +60,1 @@\n-        logln(\"Default Locale\");\n+        System.out.println(\"Default Locale\");\n@@ -77,1 +73,1 @@\n-            logln(loc[i].getDisplayName());\n+            System.out.println(loc[i].getDisplayName());\n@@ -89,1 +85,1 @@\n-        logln(\"Numeric error \" +\n+        System.out.println(\"Numeric error \" +\n@@ -153,1 +149,1 @@\n-            if (DEBUG) logln(\"  \" + value + \" F> \" + escape(s));\n+            System.out.println(\"  \" + value + \" F> \" + escape(s));\n@@ -155,1 +151,1 @@\n-            if (DEBUG) logln(\"  \" + escape(s) + \" P> \" + n);\n+            System.out.println(\"  \" + escape(s) + \" P> \" + n);\n@@ -157,1 +153,1 @@\n-            if (DEBUG) logln(\"  \" + n + \" F> \" + escape(s2));\n+            System.out.println(\"  \" + n + \" F> \" + escape(s2));\n@@ -162,1 +158,1 @@\n-                        logln(\"Text mismatch: expected: \" + s + \", got: \" + s2 + \" --- Try BigDecimal parsing.\");\n+                        System.out.println(\"Text mismatch: expected: \" + s + \", got: \" + s2 + \" --- Try BigDecimal parsing.\");\n@@ -165,1 +161,1 @@\n-                        if (DEBUG) logln(\"  \" + escape(s) + \" P> \" + n);\n+                        System.out.println(\"  \" + escape(s) + \" P> \" + n);\n@@ -167,1 +163,1 @@\n-                        if (DEBUG) logln(\"  \" + n + \" F> \" + escape(s2));\n+                        System.out.println(\"  \" + n + \" F> \" + escape(s2));\n@@ -200,1 +196,1 @@\n-                errln(\"*** \" + err + \" with \" +\n+                fail(\"*** \" + err + \" with \" +\n@@ -204,1 +200,1 @@\n-                logln(message);\n+                System.out.println(message);\n@@ -207,1 +203,1 @@\n-            errln(\"*** \" + e.toString() + \" with \" +\n+            fail(\"*** \" + e.toString() + \" with \" +\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/NumberRoundTrip.java","additions":24,"deletions":28,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @library \/java\/text\/testlib\n@@ -32,1 +31,1 @@\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI NumberTest\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI NumberTest\n@@ -39,5 +38,1 @@\n-public class NumberTest extends IntlTest\n-{\n-    public static void main(String[] args) throws Exception {\n-        new NumberTest().run(args);\n-    }\n+import org.junit.jupiter.api.Test;\n@@ -45,0 +40,4 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class NumberTest\n+{\n@@ -46,0 +45,1 @@\n+    @Test\n@@ -57,1 +57,1 @@\n-        errln(\"FAIL: Pattern \" + pat[i] + \" should transmute to \" + newpat[i] +\n+        fail(\"FAIL: Pattern \" + pat[i] + \" should transmute to \" + newpat[i] +\n@@ -63,1 +63,1 @@\n-        errln(\"FAIL: Pattern \" + pat[i] + \" should format zero as \" + num[i] +\n+        fail(\"FAIL: Pattern \" + pat[i] + \" should format zero as \" + num[i] +\n@@ -65,1 +65,1 @@\n-        logln(\"Min integer digits = \" + fmt.getMinimumIntegerDigits());\n+        System.out.println(\"Min integer digits = \" + fmt.getMinimumIntegerDigits());\n@@ -71,0 +71,1 @@\n+    @Test\n@@ -103,1 +104,1 @@\n-            logln(\"Pattern \\\"\" + pat[p] + \"\\\" -toPattern-> \\\"\" +\n+            System.out.println(\"Pattern \\\"\" + pat[p] + \"\\\" -toPattern-> \\\"\" +\n@@ -108,1 +109,1 @@\n-                logln(\" Format \" + val[v] + \" -> \" + escape(s));\n+                System.out.println(\" Format \" + val[v] + \" -> \" + escape(s));\n@@ -110,1 +111,1 @@\n-                    errln(\"FAIL: Expected \" + valFormat[v+ival] +\n+                    fail(\"FAIL: Expected \" + valFormat[v+ival] +\n@@ -118,1 +119,1 @@\n-                    logln(\" Parse -> \" + a);\n+                    System.out.println(\" Parse -> \" + a);\n@@ -120,1 +121,1 @@\n-                        errln(\"FAIL: Expected \" + valParse[v+ival] +\n+                        fail(\"FAIL: Expected \" + valParse[v+ival] +\n@@ -125,1 +126,1 @@\n-                    errln(\" FAIL: Partial parse (\" + pos.getIndex() +\n+                    fail(\" FAIL: Partial parse (\" + pos.getIndex() +\n@@ -131,1 +132,1 @@\n-                logln(\" Format \" + lval[v] + \"L -> \" + escape(s));\n+                System.out.println(\" Format \" + lval[v] + \"L -> \" + escape(s));\n@@ -133,1 +134,1 @@\n-                    errln(\"ERROR: Expected \" + lvalFormat[v+ilval] +\n+                    fail(\"ERROR: Expected \" + lvalFormat[v+ilval] +\n@@ -141,1 +142,1 @@\n-                    logln(\" Parse -> \" + a);\n+                    System.out.println(\" Parse -> \" + a);\n@@ -143,1 +144,1 @@\n-                        errln(\"FAIL: Expected \" + lvalParse[v+ilval] +\n+                        fail(\"FAIL: Expected \" + lvalParse[v+ilval] +\n@@ -148,1 +149,1 @@\n-                    errln(\" FAIL: Partial parse (\" + pos.getIndex() +\n+                    fail(\" FAIL: Partial parse (\" + pos.getIndex() +\n@@ -158,0 +159,1 @@\n+    @Test\n@@ -164,3 +166,3 @@\n-    logln(\"Pattern \\\"\" + pat + \"\\\"\");\n-    logln(\" Format 123 -> \" + escape(s));\n-    if (!s.equals(\"afo'ob123\")) errln(\"FAIL: Expected afo'ob123\");\n+    System.out.println(\"Pattern \\\"\" + pat + \"\\\"\");\n+    System.out.println(\" Format 123 -> \" + escape(s));\n+    if (!s.equals(\"afo'ob123\")) fail(\"FAIL: Expected afo'ob123\");\n@@ -170,3 +172,3 @@\n-    logln(\"Pattern \\\"\" + pat + \"\\\"\");\n-    logln(\" Format 123 -> \" + escape(s));\n-    if (!s.equals(\"a'b123\")) errln(\"FAIL: Expected a'b123\");\n+    System.out.println(\"Pattern \\\"\" + pat + \"\\\"\");\n+    System.out.println(\" Format 123 -> \" + escape(s));\n+    if (!s.equals(\"a'b123\")) fail(\"FAIL: Expected a'b123\");\n@@ -176,0 +178,1 @@\n+    @Test\n@@ -184,3 +187,3 @@\n-    logln(\"Pattern \\\"\" + fmt.toPattern() + \"\\\"\");\n-    logln(\" Format \" + 1234.56 + \" -> \" + escape(s));\n-    if (!s.equals(\"$1,234.56\")) errln(\"FAIL: Expected $1,234.56\");\n+    System.out.println(\"Pattern \\\"\" + fmt.toPattern() + \"\\\"\");\n+    System.out.println(\" Format \" + 1234.56 + \" -> \" + escape(s));\n+    if (!s.equals(\"$1,234.56\")) fail(\"FAIL: Expected $1,234.56\");\n@@ -188,2 +191,2 @@\n-    logln(\" Format \" + -1234.56 + \" -> \" + escape(s));\n-    if (!s.equals(\"-$1,234.56\")) errln(\"FAIL: Expected -$1,234.56\");\n+    System.out.println(\" Format \" + -1234.56 + \" -> \" + escape(s));\n+    if (!s.equals(\"-$1,234.56\")) fail(\"FAIL: Expected -$1,234.56\");\n@@ -193,3 +196,3 @@\n-    logln(\"Pattern \\\"\" + fmt.toPattern() + \"\\\"\");\n-    logln(\" Format \" + 1234.56 + \" -> \" + escape(s));\n-    if (!s.equals(\"USD 1,234.56\")) errln(\"FAIL: Expected USD 1,234.56\");\n+    System.out.println(\"Pattern \\\"\" + fmt.toPattern() + \"\\\"\");\n+    System.out.println(\" Format \" + 1234.56 + \" -> \" + escape(s));\n+    if (!s.equals(\"USD 1,234.56\")) fail(\"FAIL: Expected USD 1,234.56\");\n@@ -197,2 +200,2 @@\n-    logln(\" Format \" + -1234.56 + \" -> \" + escape(s));\n-    if (!s.equals(\"USD -1,234.56\")) errln(\"FAIL: Expected USD -1,234.56\");\n+    System.out.println(\" Format \" + -1234.56 + \" -> \" + escape(s));\n+    if (!s.equals(\"USD -1,234.56\")) fail(\"FAIL: Expected USD -1,234.56\");\n@@ -222,0 +225,1 @@\n+    @Test\n@@ -226,1 +230,1 @@\n-        logln(\"Un pauvre ici a...........\" + s);\n+        System.out.println(\"Un pauvre ici a...........\" + s);\n@@ -228,1 +232,1 @@\n-            errln(\"FAIL: Expected 1,50 $; got \" + s + \"; \"+ dumpFmt(currencyFmt));\n+            fail(\"FAIL: Expected 1,50 $; got \" + s + \"; \"+ dumpFmt(currencyFmt));\n@@ -232,1 +236,1 @@\n-        logln(\"Un pauvre en Allemagne a..\" + s);\n+        System.out.println(\"Un pauvre en Allemagne a..\" + s);\n@@ -234,1 +238,1 @@\n-            errln(\"FAIL: Expected 1,50 \\u20AC; got \" + s + \"; \" + dumpFmt(currencyFmt));\n+            fail(\"FAIL: Expected 1,50 \\u20AC; got \" + s + \"; \" + dumpFmt(currencyFmt));\n@@ -238,1 +242,1 @@\n-        logln(\"Un pauvre en France a.....\" + s);\n+        System.out.println(\"Un pauvre en France a.....\" + s);\n@@ -240,1 +244,1 @@\n-            errln(\"FAIL: Expected 1,50 \\u20AC; got \" + s + \"; \" + dumpFmt(currencyFmt));\n+            fail(\"FAIL: Expected 1,50 \\u20AC; got \" + s + \"; \" + dumpFmt(currencyFmt));\n@@ -257,0 +261,1 @@\n+    @Test\n@@ -263,3 +268,3 @@\n-        logln(\"parse(\" + arg + \") = \" + n);\n-        if (n.doubleValue() != 0.0) errln(\"FAIL: Expected 0\");\n-    } catch (Exception e) { errln(\"Exception caught: \" + e); }\n+        System.out.println(\"parse(\" + arg + \") = \" + n);\n+        if (n.doubleValue() != 0.0) fail(\"FAIL: Expected 0\");\n+    } catch (Exception e) { fail(\"Exception caught: \" + e); }\n@@ -269,0 +274,1 @@\n+    @Test\n@@ -281,1 +287,1 @@\n-        logln(\"\" + x + \" formats with \" + maxFractionDigits + \" fractional digits to \" + out);\n+        System.out.println(\"\" + x + \" formats with \" + maxFractionDigits + \" fractional digits to \" + out);\n@@ -283,1 +289,1 @@\n-            errln(\"FAIL: Expected \" + expected + \", got \" + out);\n+            fail(\"FAIL: Expected \" + expected + \", got \" + out);\n@@ -295,0 +301,1 @@\n+    @Test\n@@ -327,1 +334,1 @@\n-                errln(\"Can't parse Unicode \" + Integer.toHexString(zero) + \" as digit (\" + n + \")\");\n+                fail(\"Can't parse Unicode \" + Integer.toHexString(zero) + \" as digit (\" + n + \")\");\n@@ -329,1 +336,1 @@\n-                logln(\"Parse digit \" + Integer.toHexString(zero) + \" ok\");\n+                System.out.println(\"Parse digit \" + Integer.toHexString(zero) + \" ok\");\n@@ -337,0 +344,1 @@\n+    @Test\n@@ -359,1 +367,1 @@\n-                    errln(\"FAIL: \" + locales[i] +\n+                    fail(\"FAIL: \" + locales[i] +\n@@ -365,1 +373,1 @@\n-                            errln(\"Fail: Positive and negative patterns use different symbols\");\n+                            fail(\"Fail: Positive and negative patterns use different symbols\");\n@@ -367,1 +375,1 @@\n-                            logln(\"Ok: \" + locales[i] +\n+                            System.out.println(\"Ok: \" + locales[i] +\n@@ -373,1 +381,1 @@\n-                            errln(\"Fail: Positive and negative patterns use different symbols\");\n+                            fail(\"Fail: Positive and negative patterns use different symbols\");\n@@ -375,1 +383,1 @@\n-                            logln(\"Ok: \" + locales[i] +\n+                            System.out.println(\"Ok: \" + locales[i] +\n@@ -380,1 +388,1 @@\n-                        errln(\"FAIL: \" + locales[i] +\n+                        fail(\"FAIL: \" + locales[i] +\n@@ -385,1 +393,1 @@\n-            else logln(\"Skipping \" + locales[i] + \"; not a DecimalFormat\");\n+            else System.out.println(\"Skipping \" + locales[i] + \"; not a DecimalFormat\");\n@@ -389,0 +397,1 @@\n+    @Test\n@@ -398,1 +407,1 @@\n-                errln(\"FAIL: Expected \" + formatExpected[i] + \", got \" + result);\n+                fail(\"FAIL: Expected \" + formatExpected[i] + \", got \" + result);\n@@ -408,1 +417,1 @@\n-                errln(\"FAIL: Expected \" + parseExpected[i] + \", got \" + result);\n+                fail(\"FAIL: Expected \" + parseExpected[i] + \", got \" + result);\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/NumberTest.java","additions":69,"deletions":60,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @library \/java\/text\/testlib\n@@ -29,0 +28,1 @@\n+ * @run junit PositionTest\n@@ -45,1 +45,1 @@\n-public class PositionTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -47,3 +47,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new PositionTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class PositionTest {\n@@ -51,0 +51,1 @@\n+    @Test\n@@ -54,1 +55,1 @@\n-            logln(\"PP constructor() tested.\");\n+            System.out.println(\"PP constructor() tested.\");\n@@ -56,1 +57,1 @@\n-            errln(\"*** PP getIndex or constructor() result\");\n+            fail(\"*** PP getIndex or constructor() result\");\n@@ -63,1 +64,1 @@\n-                logln(\"PP getIndex and constructor(TextOffset) tested.\");\n+                System.out.println(\"PP getIndex and constructor(TextOffset) tested.\");\n@@ -65,1 +66,1 @@\n-                errln(\"*** PP getIndex or constructor(TextOffset) result\");\n+                fail(\"*** PP getIndex or constructor(TextOffset) result\");\n@@ -69,1 +70,1 @@\n-                logln(\"PP setIndex tested.\");\n+                System.out.println(\"PP setIndex tested.\");\n@@ -71,1 +72,1 @@\n-                errln(\"*** PP getIndex or setIndex result\");\n+                fail(\"*** PP getIndex or setIndex result\");\n@@ -80,1 +81,1 @@\n-            logln(\"PP not equals tested.\");\n+            System.out.println(\"PP not equals tested.\");\n@@ -82,1 +83,1 @@\n-            errln(\"*** PP not equals fails\");\n+            fail(\"*** PP not equals fails\");\n@@ -85,1 +86,1 @@\n-            logln(\"PP equals tested.\");\n+            System.out.println(\"PP equals tested.\");\n@@ -87,1 +88,1 @@\n-            errln(\"*** PP equals fails (\" + pp3.getIndex() + \" != \" + pp4.getIndex() + \")\");\n+            fail(\"*** PP equals fails (\" + pp3.getIndex() + \" != \" + pp4.getIndex() + \")\");\n@@ -93,1 +94,1 @@\n-            logln(\"PP operator= tested.\");\n+            System.out.println(\"PP operator= tested.\");\n@@ -95,1 +96,1 @@\n-            errln(\"*** PP operator= operator== or operator != result\");\n+            fail(\"*** PP operator= operator== or operator != result\");\n@@ -100,0 +101,1 @@\n+    @Test\n@@ -104,1 +106,1 @@\n-            logln(\"FP constructor(int) and getField tested.\");\n+            System.out.println(\"FP constructor(int) and getField tested.\");\n@@ -106,1 +108,1 @@\n-            errln(\"*** FP constructor(int) or getField\");\n+            fail(\"*** FP constructor(int) or getField\");\n@@ -110,1 +112,1 @@\n-        if ( fph.getField() != 3) errln(\"*** FP getField or heap constr.\");\n+        if ( fph.getField() != 3) fail(\"*** FP getField or heap constr.\");\n@@ -124,1 +126,1 @@\n-            logln(\"FP setField and getField tested.\");\n+            System.out.println(\"FP setField and getField tested.\");\n@@ -126,1 +128,1 @@\n-            errln(\"*** FP setField or getField\");\n+            fail(\"*** FP setField or getField\");\n@@ -129,1 +131,1 @@\n-            logln(\"FP setBeginIndex and getBeginIndex tested.\");\n+            System.out.println(\"FP setBeginIndex and getBeginIndex tested.\");\n@@ -131,1 +133,1 @@\n-            errln(\"*** FP setBeginIndex or getBeginIndex\");\n+            fail(\"*** FP setBeginIndex or getBeginIndex\");\n@@ -134,1 +136,1 @@\n-            logln(\"FP setEndIndex and getEndIndex tested.\");\n+            System.out.println(\"FP setEndIndex and getEndIndex tested.\");\n@@ -136,1 +138,1 @@\n-            errln(\"*** FP setEndIndex or getEndIndex\");\n+            fail(\"*** FP setEndIndex or getEndIndex\");\n@@ -139,1 +141,1 @@\n-        logln(\"\");\n+        System.out.println(\"\");\n@@ -142,0 +144,1 @@\n+    @Test\n@@ -167,1 +170,1 @@\n-            logln(\"FP \" + temp + res);\n+            System.out.println(\"FP \" + temp + res);\n@@ -170,1 +173,1 @@\n-        logln(\"\");\n+        System.out.println(\"\");\n@@ -175,0 +178,1 @@\n+    @Test\n@@ -181,1 +185,1 @@\n-            errln(\"Error : ParsePosition.equals() failed\");\n+            fail(\"Error : ParsePosition.equals() failed\");\n@@ -185,1 +189,1 @@\n-            errln(\"Error : FieldPosition.equals() failed\");\n+            fail(\"Error : FieldPosition.equals() failed\");\n@@ -192,0 +196,1 @@\n+    @Test\n@@ -196,1 +201,1 @@\n-            errln(\"\" + p + \" and \" + q + \" are not equal and should be\");\n+            fail(\"\" + p + \" and \" + q + \" are not equal and should be\");\n@@ -199,1 +204,1 @@\n-            errln(\"ParsePosition.hashCode() different for equal objects\");\n+            fail(\"ParsePosition.hashCode() different for equal objects\");\n@@ -201,1 +206,1 @@\n-            logln(\"hashCode(\" + p + \") = \" + p.hashCode());\n+            System.out.println(\"hashCode(\" + p + \") = \" + p.hashCode());\n@@ -209,0 +214,1 @@\n+    @Test\n@@ -213,1 +219,1 @@\n-            errln(\"\" + p + \" and \" + q + \" are not equal and should be\");\n+            fail(\"\" + p + \" and \" + q + \" are not equal and should be\");\n@@ -216,1 +222,1 @@\n-            errln(\"FieldPosition.hashCode() different for equal objects\");\n+            fail(\"FieldPosition.hashCode() different for equal objects\");\n@@ -218,1 +224,1 @@\n-            logln(\"hashCode(\" + p + \") = \" + p.hashCode());\n+            System.out.println(\"hashCode(\" + p + \") = \" + p.hashCode());\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/PositionTest.java","additions":44,"deletions":38,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,2 @@\n- * @library \/java\/text\/testlib\n- * @build FormatIteratorTest PParser IntlTest\n- * @run main FormatIteratorTest\n+ * @build FormatIteratorTest PParser\n+ * @run junit\/othervm FormatIteratorTest\n@@ -42,0 +41,5 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -97,1 +101,14 @@\n-public class FormatIteratorTest extends IntlTest {\n+public class FormatIteratorTest {\n+\n+    \/*\n+     * Change JVM default Locale and TimeZone.\n+     * The current tests are only appropriate for US. If tests are\n+     * added for other locales are added, then a property should be\n+     * added to each file (test) to be able to specify the locale.\n+     *\/\n+    @BeforeAll\n+    static void initAll() {\n+        Locale.setDefault(Locale.US);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n+    }\n+\n@@ -102,26 +119,0 @@\n-    public static final Object ARG0_FIELD_ID = MessageFormat.\n-                                                     Field.ARGUMENT;\n-    public static final Object ARG1_FIELD_ID = MessageFormat.\n-                                                     Field.ARGUMENT;\n-    public static final Object ARG2_FIELD_ID = MessageFormat.\n-                                                     Field.ARGUMENT;\n-    public static final Object ARG3_FIELD_ID = MessageFormat.\n-                                                     Field.ARGUMENT;\n-\n-    public static void main(String[] args) throws Exception {\n-        Locale reservedLocale = Locale.getDefault();\n-        TimeZone reservedTimeZone = TimeZone.getDefault();\n-        try {\n-            \/\/ The current tests are only appropriate for US. If tests are\n-            \/\/ added for other locales are added, then a property should be\n-            \/\/ added to each file (test) to be able to specify the locale.\n-            Locale.setDefault(Locale.US);\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n-            new FormatIteratorTest().run(args);\n-        } finally {\n-            \/\/ restore the reserved locale and time zone\n-            Locale.setDefault(reservedLocale);\n-            TimeZone.setDefault(reservedTimeZone);\n-        }\n-    }\n-\n@@ -131,0 +122,1 @@\n+    @Test\n@@ -136,0 +128,1 @@\n+    @Test\n@@ -141,0 +134,1 @@\n+    @Test\n@@ -149,1 +143,1 @@\n-            logln(\"testing: \" + file);\n+            System.out.println(\"testing: \" + file);\n@@ -156,1 +150,1 @@\n-                logln(\"creating: \" + (counter \/ 2));\n+                System.out.println(\"creating: \" + (counter \/ 2));\n@@ -161,1 +155,1 @@\n-                logln(\"verifying: \" + (counter \/ 2));\n+                System.out.println(\"verifying: \" + (counter \/ 2));\n@@ -165,1 +159,1 @@\n-            errln(\"Error reading: \" + ioe);\n+            fail(\"Error reading: \" + ioe);\n@@ -178,1 +172,1 @@\n-            errln(\"text doesn't match, got: \" + getText(iterator));\n+            fail(\"text doesn't match, got: \" + getText(iterator));\n@@ -181,1 +175,1 @@\n-            errln(\"Bogus start: \" + iterator.getBeginIndex());\n+            fail(\"Bogus start: \" + iterator.getBeginIndex());\n@@ -184,1 +178,1 @@\n-            errln(\"Bogus end: \" + iterator.getEndIndex());\n+            fail(\"Bogus end: \" + iterator.getEndIndex());\n@@ -191,1 +185,1 @@\n-                errln(\"Attributes don't match at \" + counter + \" expecting \" +\n+                fail(\"Attributes don't match at \" + counter + \" expecting \" +\n@@ -202,1 +196,1 @@\n-                errln(\"Attributes don't match at \" + counter + \" expecting \" +\n+                fail(\"Attributes don't match at \" + counter + \" expecting \" +\n@@ -246,1 +240,1 @@\n-                errln(\"Begin doesn't match want \" + begin + \" got \" +\n+                fail(\"Begin doesn't match want \" + begin + \" got \" +\n@@ -251,1 +245,1 @@\n-                errln(\"Begin2 doesn't match want \" + begin2 + \" got \" +\n+                fail(\"Begin2 doesn't match want \" + begin2 + \" got \" +\n@@ -256,1 +250,1 @@\n-                errln(\"End doesn't match want \" + end + \" got \" +\n+                fail(\"End doesn't match want \" + end + \" got \" +\n@@ -261,1 +255,1 @@\n-                errln(\"End2 doesn't match want \" + end2 + \" got \" +\n+                fail(\"End2 doesn't match want \" + end2 + \" got \" +\n@@ -315,1 +309,1 @@\n-            errln(\"bogus begin want \" + begin + \" got \" + fp.getBeginIndex() +\n+            fail(\"bogus begin want \" + begin + \" got \" + fp.getBeginIndex() +\n@@ -319,1 +313,1 @@\n-            errln(\"bogus end want \" + end + \" got \" + fp.getEndIndex() +\n+            fail(\"bogus end want \" + end + \" got \" + fp.getEndIndex() +\n@@ -323,1 +317,1 @@\n-            errln(\"Text does not match, want !\" + buffer.toString() +\n+            fail(\"Text does not match, want !\" + buffer.toString() +\n@@ -334,1 +328,1 @@\n-        logln(\"Created format: \" + format + \" value \" + value);\n+        System.out.println(\"Created format: \" + format + \" value \" + value);\n@@ -338,1 +332,1 @@\n-        logln(\"Obtained Iterator: \" + aci);\n+        System.out.println(\"Obtained Iterator: \" + aci);\n@@ -376,1 +370,1 @@\n-            errln(\"Error creating instance \" + th);\n+            fail(\"Error creating instance \" + th);\n@@ -416,1 +410,1 @@\n-        errln(\"Could not lookup field \" + name + \" \" + error);\n+        fail(\"Could not lookup field \" + name + \" \" + error);\n","filename":"test\/jdk\/java\/text\/Format\/common\/FormatIteratorTest.java","additions":45,"deletions":51,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @library \/java\/text\/testlib\n@@ -31,1 +30,1 @@\n- * @run main\/timeout=30 ICUBasicTest\n+ * @run junit\/timeout=30 ICUBasicTest\n@@ -48,1 +47,1 @@\n-public class ICUBasicTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -50,3 +49,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new ICUBasicTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class ICUBasicTest {\n@@ -80,0 +79,1 @@\n+    @Test\n@@ -119,4 +119,1 @@\n-                errln(\"unexpected result for case \" + i + \". Expected=\"\n-                      + cases[i].expect + \", Actual=\" + output);\n-            } else if (verbose) {\n-                logln(\"expected result for case \" + i + \". Expected=\"\n+                fail(\"unexpected result for case \" + i + \". Expected=\"\n@@ -147,0 +144,1 @@\n+    @Test\n@@ -153,1 +151,1 @@\n-            errln(\"Reordering of combining marks failed. Expected: \" +\n+            fail(\"Reordering of combining marks failed. Expected: \" +\n@@ -162,0 +160,1 @@\n+    @Test\n@@ -167,1 +166,1 @@\n-             errln(\"ERROR in NFC of string\");\n+             fail(\"ERROR in NFC of string\");\n@@ -181,0 +180,1 @@\n+    @Test\n@@ -197,1 +197,1 @@\n-                errln(\"FAIL input: \" + HexFormat.of().withDelimiter(\" \")\n+                fail(\"FAIL input: \" + HexFormat.of().withDelimiter(\" \")\n@@ -207,1 +207,1 @@\n-                errln(\"FAIL input: \" + HexFormat.of().withDelimiter(\" \")\n+                fail(\"FAIL input: \" + HexFormat.of().withDelimiter(\" \")\n@@ -226,0 +226,1 @@\n+    @Test\n@@ -243,1 +244,1 @@\n-                logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n+                System.out.println(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n@@ -248,1 +249,1 @@\n-                errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n+                fail(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n@@ -259,1 +260,1 @@\n-                logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x DECOMP => \" +\n+                System.out.println(\"Ok: \" + HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x DECOMP => \" +\n@@ -262,1 +263,1 @@\n-                errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x DECOMP => \" +\n+                fail(\"FAIL: \" + HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x DECOMP => \" +\n@@ -272,0 +273,1 @@\n+    @Test\n@@ -400,8 +402,1 @@\n-            errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n-                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n-                  HexFormat.of().withDelimiter(\" \")\n-                          .formatHex(b.getBytes()) + \" x COMPOSE => \" +\n-                  HexFormat.of().withDelimiter(\" \")\n-                          .formatHex(c.getBytes()) + \" for the latest Unicode\");\n-        } else if (verbose) {\n-            logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n+            fail(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n@@ -418,6 +413,1 @@\n-            errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n-                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n-                  HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x COMPOSE => \" +\n-                  HexFormat.of().withDelimiter(\" \").formatHex(c.getBytes()) + \" for Unicode 3.2.0\");\n-        } else if (verbose) {\n-            logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n+            fail(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n@@ -430,0 +420,1 @@\n+    @Test\n@@ -444,0 +435,1 @@\n+    @Test\n@@ -577,0 +569,1 @@\n+    @Test\n@@ -581,0 +574,1 @@\n+    @Test\n@@ -585,0 +579,1 @@\n+    @Test\n@@ -589,0 +584,1 @@\n+    @Test\n@@ -598,1 +594,1 @@\n-            logln(\"Normalizing '\" + input + \"' (\" + HexFormat.of()\n+            System.out.println(\"Normalizing '\" + input + \"' (\" + HexFormat.of()\n@@ -605,1 +601,1 @@\n-                errln(\"FAIL: case \" + i\n+                fail(\"FAIL: case \" + i\n@@ -624,0 +620,1 @@\n+    @Test\n@@ -625,1 +622,1 @@\n-        logln(\"Canonical composition...\");\n+        System.out.println(\"Canonical composition...\");\n@@ -629,0 +626,1 @@\n+    @Test\n@@ -630,1 +628,1 @@\n-        logln(\"Canonical decomposition...\");\n+        System.out.println(\"Canonical decomposition...\");\n","filename":"test\/jdk\/java\/text\/Normalizer\/ICUBasicTest.java","additions":35,"deletions":37,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @library \/java\/text\/testlib\n@@ -31,1 +30,1 @@\n- * @run main\/timeout=30 NormalizerAPITest\n+ * @run junit\/timeout=30 NormalizerAPITest\n@@ -37,0 +36,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -44,1 +47,1 @@\n-public class NormalizerAPITest extends IntlTest {\n+public class NormalizerAPITest {\n@@ -74,4 +77,0 @@\n-    public static void main(String[] args) throws Exception {\n-        new NormalizerAPITest().run(args);\n-    }\n-\n@@ -81,0 +80,1 @@\n+    @Test\n@@ -103,1 +103,1 @@\n-             errln(\"normalize(null) should throw NullPointerException.\");\n+             fail(\"normalize(null) should throw NullPointerException.\");\n@@ -110,0 +110,1 @@\n+    @Test\n@@ -134,1 +135,1 @@\n-             errln(\"normalize(null) should throw NullPointerException.\");\n+             fail(\"normalize(null) should throw NullPointerException.\");\n@@ -141,0 +142,1 @@\n+    @Test\n@@ -163,1 +165,1 @@\n-             errln(\"isNormalized(null) should throw NullPointerException.\");\n+             fail(\"isNormalized(null) should throw NullPointerException.\");\n@@ -170,0 +172,1 @@\n+    @Test\n@@ -194,1 +197,1 @@\n-             errln(\"isNormalized(null) should throw NullPointerException.\");\n+             fail(\"isNormalized(null) should throw NullPointerException.\");\n@@ -202,0 +205,1 @@\n+    @Test\n@@ -218,1 +222,1 @@\n-             errln(\"normalize() for String(\\\"\\\") should return \\\"\\\".\");\n+             fail(\"normalize() for String(\\\"\\\") should return \\\"\\\".\");\n@@ -226,0 +230,1 @@\n+    @Test\n@@ -243,1 +248,1 @@\n-             errln(\"normalize() for String(\\\"\\\") should return \\\"\\\".\");\n+             fail(\"normalize() for String(\\\"\\\") should return \\\"\\\".\");\n@@ -251,0 +256,1 @@\n+    @Test\n@@ -266,1 +272,1 @@\n-             errln(\"isNormalized() for String(\\\"\\\") should not return true.\");\n+             fail(\"isNormalized() for String(\\\"\\\") should not return true.\");\n@@ -274,0 +280,1 @@\n+    @Test\n@@ -291,1 +298,1 @@\n-             errln(\"isNormalized() for String(\\\"\\\") should not return true.\");\n+             fail(\"isNormalized() for String(\\\"\\\") should not return true.\");\n@@ -299,0 +306,1 @@\n+    @Test\n@@ -318,1 +326,1 @@\n-            errln(\"java.text.Normalizer.normalize(\" +\n+            fail(\"java.text.Normalizer.normalize(\" +\n@@ -324,1 +332,1 @@\n-            errln(\"sun.text.Normalizer.normalize(\" +\n+            fail(\"sun.text.Normalizer.normalize(\" +\n@@ -329,1 +337,1 @@\n-            errln(\"java.text.Normalizer.isNormalize(\" +\n+            fail(\"java.text.Normalizer.isNormalize(\" +\n@@ -334,1 +342,1 @@\n-            errln(\"sun.text.Normalizer.isNormalize(\" +\n+            fail(\"sun.text.Normalizer.isNormalize(\" +\n","filename":"test\/jdk\/java\/text\/Normalizer\/NormalizerAPITest.java","additions":28,"deletions":20,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -40,1 +41,5 @@\n-public class HexDumpReader {\n+public final class HexDumpReader {\n+\n+    \/\/ Utility class should not be instantiated\n+    private HexDumpReader() {}\n+\n@@ -51,1 +56,1 @@\n-                                                            \"us-ascii\"))) {\n+                StandardCharsets.US_ASCII))) {\n","filename":"test\/jdk\/java\/text\/testlib\/HexDumpReader.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,262 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.Map;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-\n-\/**\n- * IntlTest is a base class for tests that can be run conveniently from\n- * the command line as well as under the Java test harness.\n- * <p>\n- * Sub-classes implement a set of public void methods named \"Test*\" or\n- * \"test*\" with no arguments. Each of these methods performs some\n- * test. Test methods should indicate errors by calling either err() or\n- * errln().  This will increment the errorCount field and may optionally\n- * print a message to the log.  Debugging information may also be added to\n- * the log via the log and logln methods.  These methods will add their\n- * arguments to the log only if the test is being run in verbose mode.\n- *\/\n-public abstract class IntlTest {\n-\n-    \/\/------------------------------------------------------------------------\n-    \/\/ Everything below here is boilerplate code that makes it possible\n-    \/\/ to add a new test by simply adding a method to an existing class.\n-    \/\/------------------------------------------------------------------------\n-    protected IntlTest() {\n-        Class<? extends IntlTest> testClass = getClass();\n-        testName = testClass.getCanonicalName();\n-        \/\/ Populate testMethods with all the test methods.\n-        Method[] methods = testClass.getDeclaredMethods();\n-        for (Method method : methods) {\n-            if (Modifier.isPublic(method.getModifiers())\n-                && method.getReturnType() == void.class\n-                && method.getParameterCount() == 0) {\n-                String name = method.getName();\n-                if (name.length() > 4) {\n-                    if (name.startsWith(\"Test\") || name.startsWith(\"test\")) {\n-                        testMethods.put(name, method);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    protected void run(String[] args) throws Exception {\n-        \/\/ Set up the log and reference streams.  We use PrintWriters in order to\n-        \/\/ take advantage of character conversion.  The JavaEsc converter will\n-        \/\/ convert Unicode outside the ASCII range to Java's \\\\uxxxx notation.\n-        log = new PrintWriter(System.out, true);\n-        List<Method> testsToRun = configureTestsAndArgs(args);\n-        System.out.println(testName + \" {\");\n-        indentLevel++;\n-\n-        \/\/ Run the list of tests given in the test arguments\n-        for (Method testMethod : testsToRun) {\n-            int oldCount = errorCount;\n-            String testName = testMethod.getName();\n-            writeTestName(testName);\n-            try {\n-                testMethod.invoke(this);\n-            } catch (IllegalAccessException e) {\n-                errln(\"Can't access test method \" + testName);\n-            } catch (InvocationTargetException e) {\n-                \/\/ Log exception first, that way if -nothrow is\n-                \/\/ not an arg, the original exception is still logged\n-                logExc(e);\n-                errln(String.format(\"$$$ Uncaught exception thrown in %s,\" +\n-                        \" see above for cause\", testName));\n-            }\n-            writeTestResult(errorCount - oldCount);\n-        }\n-        indentLevel--;\n-        if (prompt) {\n-            System.out.println(\"Hit RETURN to exit...\");\n-            try {\n-                System.in.read();\n-            } catch (IOException e) {\n-                System.out.println(\"Exception: \" + e.toString() + e.getMessage());\n-            }\n-        }\n-        if (exitCode) {\n-            System.exit(errorCount);\n-        }\n-        if (errorCount > 0) {\n-            throw new RuntimeException(String.format(\n-                    \"$$$ %s FAILED with %s failures%n\", testName, errorCount));\n-        } else {\n-            log.println(String.format(\"\\t$$$ %s PASSED%n\", testName));\n-        }\n-    }\n-\n-    private List<Method> configureTestsAndArgs(String[] args) {\n-        \/\/ Parse the test arguments. They can be either the flag\n-        \/\/ \"-verbose\" or names of test methods. Create a list of\n-        \/\/ tests to be run.\n-        List<Method> testsToRun = new ArrayList<>(args.length);\n-        for (String arg : args) {\n-            switch (arg) {\n-                case \"-verbose\" -> verbose = true;\n-                case \"-prompt\" -> prompt = true;\n-                case \"-nothrow\" -> nothrow = true;\n-                case \"-exitcode\" -> exitCode = true;\n-                default -> {\n-                    Method m = testMethods.get(arg);\n-                    if (m == null) {\n-                        System.out.println(\"Method \" + arg + \": not found\");\n-                        usage();\n-                        return testsToRun;\n-                    }\n-                    testsToRun.add(m);\n-                }\n-            }\n-        }\n-        \/\/ If no test method names were given explicitly, run them all.\n-        if (testsToRun.isEmpty()) {\n-            testsToRun.addAll(testMethods.values());\n-        }\n-        \/\/ Arbitrarily sort the tests, so that they are run in the same order every time\n-        testsToRun.sort(Comparator.comparing(Method::getName));\n-        return testsToRun;\n-    }\n-\n-    \/**\n-     * Adds the given message to the log if we are in verbose mode.\n-     *\/\n-    protected void log(String message) {\n-        logImpl(message, false);\n-    }\n-\n-    protected void logln(String message) {\n-        logImpl(message, true);\n-    }\n-\n-    protected void logln() {\n-        logImpl(null, true);\n-    }\n-\n-    private void logImpl(String message, boolean newline) {\n-        if (verbose) {\n-            if (message != null) {\n-                indent(indentLevel + 1);\n-                log.print(message);\n-            }\n-            if (newline) {\n-                log.println();\n-            }\n-        }\n-    }\n-\n-    private void logExc(InvocationTargetException ite) {\n-        indent(indentLevel);\n-        ite.getTargetException().printStackTrace(this.log);\n-    }\n-\n-    protected void err(String message) {\n-        errImpl(message, false);\n-    }\n-\n-    protected void errln(String message) {\n-        errImpl(message, true);\n-    }\n-\n-    private void errImpl(String message, boolean newline) {\n-        errorCount++;\n-        indent(indentLevel + 1);\n-        log.print(message);\n-        if (newline) {\n-            log.println();\n-        }\n-        log.flush();\n-\n-        if (!nothrow) {\n-            throw new RuntimeException(message);\n-        }\n-    }\n-\n-    protected int getErrorCount() {\n-        return errorCount;\n-    }\n-\n-    protected void writeTestName(String testName) {\n-        indent(indentLevel);\n-        log.print(testName);\n-        log.flush();\n-        needLineFeed = true;\n-    }\n-\n-    protected void writeTestResult(int count) {\n-        if (!needLineFeed) {\n-            indent(indentLevel);\n-            log.print(\"}\");\n-        }\n-        needLineFeed = false;\n-\n-        if (count != 0) {\n-            log.println(\" FAILED\");\n-        } else {\n-            log.println(\" Passed\");\n-        }\n-    }\n-\n-    private void indent(int distance) {\n-        if (needLineFeed) {\n-            log.println(\" {\");\n-            needLineFeed = false;\n-        }\n-        log.print(SPACES.substring(0, distance * 2));\n-    }\n-\n-    \/**\n-     * Print a usage message for this test class.\n-     *\/\n-    void usage() {\n-        System.out.println(getClass().getName() +\n-                            \": [-verbose] [-nothrow] [-exitcode] [-prompt] [test names]\");\n-\n-        System.out.println(\"  Available test names:\");\n-        for (String methodName : testMethods.keySet()) {\n-            System.out.println(\"\\t\" + methodName);\n-        }\n-    }\n-    private final String testName;\n-    private boolean     prompt;\n-    private boolean     nothrow;\n-    protected boolean   verbose;\n-    private boolean     exitCode;\n-    private PrintWriter log;\n-    private int         indentLevel;\n-    private boolean     needLineFeed;\n-    private int         errorCount;\n-\n-    private final Map<String, Method> testMethods = new LinkedHashMap<>();\n-\n-    private static final String SPACES = \"                                          \";\n-}\n","filename":"test\/jdk\/java\/text\/testlib\/IntlTest.java","additions":0,"deletions":262,"binary":false,"changes":262,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,3 @@\n+import java.text.CollationElementIterator;\n+import java.text.CollationKey;\n+import java.text.Collator;\n@@ -29,2 +32,0 @@\n-import java.util.Locale.Builder;\n-\n@@ -32,5 +33,1 @@\n- * TestUtils provides utility methods to get a locale-dependent attribute.\n- * For example,\n- *   - whether or not a non-Gregorian calendar is used\n- *   - whether or not non-ASCII digits are used\n- *\n+ * TestUtils provides utility methods used by i18n related tests.\n@@ -38,1 +35,9 @@\n- * localization and is not versatile.\n+ * localization and is not versatile. This class is split into the following sections,\n+ * 1) Methods to get a locale-dependent attribute.\n+ * For example,\n+ *   - whether a non-Gregorian calendar is used\n+ *   - whether non-ASCII digits are used\n+ * 2) Methods that help Collator related tests\n+ * For example,\n+ *   - compare CollationElementIterators\n+ *   - test the expected relation key result for a Collator\n@@ -40,1 +45,8 @@\n-public class TestUtils {\n+public final class TestUtils {\n+\n+    \/\/ Utility class should not be instantiated\n+    private TestUtils() {}\n+\n+    \/*\n+     * The below methods are utilities for getting locale-dependent attributes.\n+     *\/\n@@ -59,1 +71,0 @@\n-     *\n@@ -74,0 +85,99 @@\n+    \/*\n+     * The below methods are utilities specific to the Collation tests\n+     *\/\n+\n+    \/**\n+     * Compares two CollationElementIterators and throws an exception\n+     * with a message detailing which collation elements were not equal\n+     *\/\n+    public static void compareCollationElementIters(CollationElementIterator i1, CollationElementIterator i2) {\n+        int c1, c2, count = 0;\n+        do {\n+            c1 = i1.next();\n+            c2 = i2.next();\n+            if (c1 != c2) {\n+                throw new RuntimeException(\"    \" + count + \": \" + c1 + \" != \" + c2);\n+            }\n+            count++;\n+        } while (c1 != CollationElementIterator.NULLORDER);\n+    }\n+\n+    \/\/ Replace non-printable characters with unicode escapes\n+    public static String prettify(String str) {\n+        StringBuilder result = new StringBuilder();\n+\n+        String zero = \"0000\";\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            char ch = str.charAt(i);\n+            if (ch < 0x09 || (ch > 0x0A && ch < 0x20)|| (ch > 0x7E && ch < 0xA0) || ch > 0x100) {\n+                String hex = Integer.toString((int)ch,16);\n+\n+                result.append(\"\\\\u\").append(zero.substring(0, 4 - hex.length())).append(hex);\n+            } else {\n+                result.append(ch);\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    \/\/ Produce a printable representation of a CollationKey\n+    public static String prettifyCKey(CollationKey key) {\n+        StringBuilder result = new StringBuilder();\n+        byte[] bytes = key.toByteArray();\n+\n+        for (int i = 0; i < bytes.length; i += 2) {\n+            int val = (bytes[i] << 8) + bytes[i+1];\n+            result.append(Integer.toString(val, 16)).append(\" \");\n+        }\n+        return result.toString();\n+    }\n+\n+    \/**\n+     * Utility to test a collator with an array of test values.\n+     * See the other doTest() method for specific comparison details.\n+     *\/\n+    public static void doCollatorTest(Collator col, int strength,\n+                                      String[] source, String[] target, int[] result) {\n+        if (source.length != target.length) {\n+            throw new RuntimeException(\"Data size mismatch: source = \" +\n+                    source.length + \", target = \" + target.length);\n+        }\n+        if (source.length != result.length) {\n+            throw new RuntimeException(\"Data size mismatch: source & target = \" +\n+                    source.length + \", result = \" + result.length);\n+        }\n+\n+        col.setStrength(strength);\n+        for (int i = 0; i < source.length ; i++) {\n+            doCollatorTest(col, source[i], target[i], result[i]);\n+        }\n+    }\n+\n+    \/**\n+     * Test that a collator returns the correct relation result value when\n+     * comparing a source and target string. Also tests that the compare and collation\n+     * key results return the same value.\n+     *\/\n+    public static void doCollatorTest(Collator col,\n+                                      String source, String target, int result) {\n+        char relation = '=';\n+        if (result <= -1) {\n+            relation = '<';\n+        } else if (result >= 1) {\n+            relation = '>';\n+        }\n+\n+        int compareResult = col.compare(source, target);\n+        CollationKey sortKey1 = col.getCollationKey(source);\n+        CollationKey sortKey2 = col.getCollationKey(target);\n+        int keyResult = sortKey1.compareTo(sortKey2);\n+        if (compareResult != keyResult) {\n+            throw new RuntimeException(\"Compare and Collation Key results are different! Source = \" +\n+                    source + \" Target = \" + target);\n+        }\n+        if (keyResult != result) {\n+            throw new RuntimeException(\"Collation Test failed! Source = \" + source + \" Target = \" +\n+                    target + \" result should be \" + relation);\n+        }\n+    }\n","filename":"test\/jdk\/java\/text\/testlib\/TestUtils.java","additions":121,"deletions":11,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main CalendarLimitTest -verbose\n+ * @run junit CalendarLimitTest\n@@ -35,0 +35,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -45,1 +49,1 @@\n-public class CalendarLimitTest extends IntlTest\n+public class CalendarLimitTest\n@@ -64,10 +68,0 @@\n-    public static void main(String argv[]) throws Exception {\n-        Locale locale = Locale.getDefault();\n-        if (!TestUtils.usesGregorianCalendar(locale)) {\n-            System.out.println(\"Skipping this test because locale is \" + locale);\n-            return;\n-        }\n-\n-        new CalendarLimitTest().run(argv);\n-    }\n-\n@@ -111,1 +105,1 @@\n-            errln(\"FAIL: Exception \" + s);\n+            fail(\"FAIL: Exception \" + s);\n@@ -117,1 +111,1 @@\n-            errln(\"FAIL: Bad year\/era \" + s);\n+            fail(\"FAIL: Bad year\/era \" + s);\n@@ -121,1 +115,1 @@\n-            errln(\"FAIL: Bad DOM \" + s);\n+            fail(\"FAIL: Bad DOM \" + s);\n@@ -125,1 +119,1 @@\n-            errln(\"FAIL: RT fail \" + s + \" -> 0x\" +\n+            fail(\"FAIL: RT fail \" + s + \" -> 0x\" +\n@@ -130,1 +124,1 @@\n-        if (ok) logln(s);\n+        if (ok) System.out.println(s);\n@@ -135,0 +129,1 @@\n+    @Test\n@@ -137,0 +132,5 @@\n+        Locale locale = Locale.getDefault();\n+        if (!TestUtils.usesGregorianCalendar(locale)) {\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n+            return;\n+        }\n@@ -157,1 +157,1 @@\n-                errln(\"FAIL: Years should be decreasing \" + lastYear + \" \" + y);\n+                fail(\"FAIL: Years should be decreasing \" + lastYear + \" \" + y);\n@@ -168,1 +168,1 @@\n-                errln(\"FAIL: Years should be increasing \" + lastYear + \" \" + y);\n+                fail(\"FAIL: Years should be increasing \" + lastYear + \" \" + y);\n@@ -191,1 +191,1 @@\n-                    logln(\"\" + h + \":00 Dec \"+dom+\", 292269055 BC -> \" +\n+                    System.out.println(\"\" + h + \":00 Dec \"+dom+\", 292269055 BC -> \" +\n@@ -200,1 +200,1 @@\n-                logln(\"0x\" + Long.toHexString(t) + \" -> \" +\n+                System.out.println(\"0x\" + Long.toHexString(t) + \" -> \" +\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarLimitTest.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @run main CalendarRegression\n+ * @run junit CalendarRegression\n@@ -56,1 +56,1 @@\n-public class CalendarRegression extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -58,3 +58,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new CalendarRegression().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class CalendarRegression {\n@@ -66,6 +66,0 @@\n-    public static void main (String args[]) {\n-    java.sql.Timestamp t= new java.sql.Timestamp(0,15,5,5,8,13,123456700);\n-    logln(\"expected=1901-04-05 05:08:13.1234567\");\n-    logln(\" result=\"+t);\n-    }\n-\n@@ -80,0 +74,1 @@\n+    @Test\n@@ -91,1 +86,1 @@\n-                logln(zone.getID() + \" \"\n+                System.out.println(zone.getID() + \" \"\n@@ -100,1 +95,1 @@\n-            errln(\"TimeZone problems with GC\");\n+            fail(\"TimeZone problems with GC\");\n@@ -104,0 +99,1 @@\n+    @Test\n@@ -113,1 +109,1 @@\n-            errln(\"Fail\");\n+            fail(\"Fail\");\n@@ -117,0 +113,1 @@\n+    @Test\n@@ -128,2 +125,2 @@\n-        logln(\"MONTH: \" + calendar.get(MONTH));\n-        logln(\"DAY_OF_MONTH: \"\n+        System.out.println(\"MONTH: \" + calendar.get(MONTH));\n+        System.out.println(\"DAY_OF_MONTH: \"\n@@ -131,2 +128,2 @@\n-        logln(\"MINUTE: \" + calendar.get(MINUTE));\n-        logln(\"SECOND: \" + calendar.get(SECOND));\n+        System.out.println(\"MINUTE: \" + calendar.get(MINUTE));\n+        System.out.println(\"SECOND: \" + calendar.get(SECOND));\n@@ -138,2 +135,2 @@\n-        logln(\"MONTH: \" + calendar.get(MONTH));\n-        logln(\"DAY_OF_MONTH: \"\n+        System.out.println(\"MONTH: \" + calendar.get(MONTH));\n+        System.out.println(\"DAY_OF_MONTH: \"\n@@ -141,2 +138,2 @@\n-        logln(\"MINUTE: \" + calendar.get(MINUTE));\n-        logln(\"SECOND: \" + calendar.get(SECOND));\n+        System.out.println(\"MINUTE: \" + calendar.get(MINUTE));\n+        System.out.println(\"SECOND: \" + calendar.get(SECOND));\n@@ -146,1 +143,1 @@\n-            errln(\"Fail: Calendar.add misbehaves\");\n+            fail(\"Fail: Calendar.add misbehaves\");\n@@ -150,0 +147,1 @@\n+    @Test\n@@ -156,1 +154,1 @@\n-            errln(\"Fail: DAY_OF_WEEK 0 should be disallowed\");\n+            fail(\"Fail: DAY_OF_WEEK 0 should be disallowed\");\n@@ -163,0 +161,1 @@\n+    @Test\n@@ -167,4 +166,4 @@\n-        logln(\"ERA: \" + calendar.get(calendar.ERA));\n-        logln(\"YEAR: \" + calendar.get(calendar.YEAR));\n-        logln(\"MONTH: \" + calendar.get(calendar.MONTH));\n-        logln(\"WEEK_OF_YEAR: \" +\n+        System.out.println(\"ERA: \" + calendar.get(calendar.ERA));\n+        System.out.println(\"YEAR: \" + calendar.get(calendar.YEAR));\n+        System.out.println(\"MONTH: \" + calendar.get(calendar.MONTH));\n+        System.out.println(\"WEEK_OF_YEAR: \" +\n@@ -172,1 +171,1 @@\n-        logln(\"WEEK_OF_MONTH: \" +\n+        System.out.println(\"WEEK_OF_MONTH: \" +\n@@ -174,2 +173,2 @@\n-        logln(\"DATE: \" + calendar.get(calendar.DATE));\n-        logln(\"DAY_OF_MONTH: \" +\n+        System.out.println(\"DATE: \" + calendar.get(calendar.DATE));\n+        System.out.println(\"DAY_OF_MONTH: \" +\n@@ -177,3 +176,3 @@\n-        logln(\"DAY_OF_YEAR: \" + calendar.get(calendar.DAY_OF_YEAR));\n-        logln(\"DAY_OF_WEEK: \" + calendar.get(calendar.DAY_OF_WEEK));\n-        logln(\"DAY_OF_WEEK_IN_MONTH: \" +\n+        System.out.println(\"DAY_OF_YEAR: \" + calendar.get(calendar.DAY_OF_YEAR));\n+        System.out.println(\"DAY_OF_WEEK: \" + calendar.get(calendar.DAY_OF_WEEK));\n+        System.out.println(\"DAY_OF_WEEK_IN_MONTH: \" +\n@@ -181,7 +180,7 @@\n-        logln(\"AM_PM: \" + calendar.get(calendar.AM_PM));\n-        logln(\"HOUR: \" + calendar.get(calendar.HOUR));\n-        logln(\"HOUR_OF_DAY: \" + calendar.get(calendar.HOUR_OF_DAY));\n-        logln(\"MINUTE: \" + calendar.get(calendar.MINUTE));\n-        logln(\"SECOND: \" + calendar.get(calendar.SECOND));\n-        logln(\"MILLISECOND: \" + calendar.get(calendar.MILLISECOND));\n-        logln(\"ZONE_OFFSET: \"\n+        System.out.println(\"AM_PM: \" + calendar.get(calendar.AM_PM));\n+        System.out.println(\"HOUR: \" + calendar.get(calendar.HOUR));\n+        System.out.println(\"HOUR_OF_DAY: \" + calendar.get(calendar.HOUR_OF_DAY));\n+        System.out.println(\"MINUTE: \" + calendar.get(calendar.MINUTE));\n+        System.out.println(\"SECOND: \" + calendar.get(calendar.SECOND));\n+        System.out.println(\"MILLISECOND: \" + calendar.get(calendar.MILLISECOND));\n+        System.out.println(\"ZONE_OFFSET: \"\n@@ -189,1 +188,1 @@\n-        logln(\"DST_OFFSET: \"\n+        System.out.println(\"DST_OFFSET: \"\n@@ -193,5 +192,5 @@\n-        logln(\"April 10, 1997\");\n-        logln(\"ERA: \" + calendar.get(calendar.ERA));\n-        logln(\"YEAR: \" + calendar.get(calendar.YEAR));\n-        logln(\"MONTH: \" + calendar.get(calendar.MONTH));\n-        logln(\"WEEK_OF_YEAR: \" +\n+        System.out.println(\"April 10, 1997\");\n+        System.out.println(\"ERA: \" + calendar.get(calendar.ERA));\n+        System.out.println(\"YEAR: \" + calendar.get(calendar.YEAR));\n+        System.out.println(\"MONTH: \" + calendar.get(calendar.MONTH));\n+        System.out.println(\"WEEK_OF_YEAR: \" +\n@@ -199,1 +198,1 @@\n-        logln(\"WEEK_OF_MONTH: \" +\n+        System.out.println(\"WEEK_OF_MONTH: \" +\n@@ -201,2 +200,2 @@\n-        logln(\"DATE: \" + calendar.get(calendar.DATE));\n-        logln(\"DAY_OF_MONTH: \" +\n+        System.out.println(\"DATE: \" + calendar.get(calendar.DATE));\n+        System.out.println(\"DAY_OF_MONTH: \" +\n@@ -204,10 +203,10 @@\n-        logln(\"DAY_OF_YEAR: \" + calendar.get(calendar.DAY_OF_YEAR));\n-        logln(\"DAY_OF_WEEK: \" + calendar.get(calendar.DAY_OF_WEEK));\n-        logln(\"DAY_OF_WEEK_IN_MONTH: \" + calendar.get(calendar.DAY_OF_WEEK_IN_MONTH));\n-        logln(\"AM_PM: \" + calendar.get(calendar.AM_PM));\n-        logln(\"HOUR: \" + calendar.get(calendar.HOUR));\n-        logln(\"HOUR_OF_DAY: \" + calendar.get(calendar.HOUR_OF_DAY));\n-        logln(\"MINUTE: \" + calendar.get(calendar.MINUTE));\n-        logln(\"SECOND: \" + calendar.get(calendar.SECOND));\n-        logln(\"MILLISECOND: \" + calendar.get(calendar.MILLISECOND));\n-        logln(\"ZONE_OFFSET: \"\n+        System.out.println(\"DAY_OF_YEAR: \" + calendar.get(calendar.DAY_OF_YEAR));\n+        System.out.println(\"DAY_OF_WEEK: \" + calendar.get(calendar.DAY_OF_WEEK));\n+        System.out.println(\"DAY_OF_WEEK_IN_MONTH: \" + calendar.get(calendar.DAY_OF_WEEK_IN_MONTH));\n+        System.out.println(\"AM_PM: \" + calendar.get(calendar.AM_PM));\n+        System.out.println(\"HOUR: \" + calendar.get(calendar.HOUR));\n+        System.out.println(\"HOUR_OF_DAY: \" + calendar.get(calendar.HOUR_OF_DAY));\n+        System.out.println(\"MINUTE: \" + calendar.get(calendar.MINUTE));\n+        System.out.println(\"SECOND: \" + calendar.get(calendar.SECOND));\n+        System.out.println(\"MILLISECOND: \" + calendar.get(calendar.MILLISECOND));\n+        System.out.println(\"ZONE_OFFSET: \"\n@@ -215,1 +214,1 @@\n-        logln(\"DST_OFFSET: \"\n+        System.out.println(\"DST_OFFSET: \"\n@@ -219,0 +218,1 @@\n+    @Test\n@@ -234,1 +234,1 @@\n-            errln(\"Fail: Calendar.set broken. Got \" + cd + \" Want \" + exp);\n+            fail(\"Fail: Calendar.set broken. Got \" + cd + \" Want \" + exp);\n@@ -238,0 +238,1 @@\n+    @Test\n@@ -249,1 +250,1 @@\n-        logln(\"Hour: \" + cal.get(HOUR_OF_DAY));\n+        System.out.println(\"Hour: \" + cal.get(HOUR_OF_DAY));\n@@ -251,1 +252,1 @@\n-        logln(\"Hour: \" + cal.get(HOUR_OF_DAY));\n+        System.out.println(\"Hour: \" + cal.get(HOUR_OF_DAY));\n@@ -253,1 +254,1 @@\n-            errln(\"Fail: Want 19 Got \" + cal.get(HOUR_OF_DAY));\n+            fail(\"Fail: Want 19 Got \" + cal.get(HOUR_OF_DAY));\n@@ -257,0 +258,1 @@\n+    @Test\n@@ -264,1 +266,1 @@\n-            errln(\"Fail: Want weekday Got \" + d);\n+            fail(\"Fail: Want weekday Got \" + d);\n@@ -292,0 +294,1 @@\n+    @Test\n@@ -306,1 +309,1 @@\n-        logln(cal.getTime().toString());\n+        System.out.println(cal.getTime().toString());\n@@ -308,1 +311,1 @@\n-            errln(\"FAIL: Min\/max bad\");\n+            fail(\"FAIL: Min\/max bad\");\n@@ -311,1 +314,1 @@\n-            errln(\"FAIL: Day of week \" + dow + \" out of range\");\n+            fail(\"FAIL: Day of week \" + dow + \" out of range\");\n@@ -314,1 +317,1 @@\n-            errln(\"FAIL: Day of week should be SUNDAY Got \" + dow);\n+            fail(\"FAIL: Day of week should be SUNDAY Got \" + dow);\n@@ -319,0 +322,1 @@\n+    @Test\n@@ -323,1 +327,1 @@\n-        logln(cal.getTime().toString());\n+        System.out.println(cal.getTime().toString());\n@@ -325,1 +329,1 @@\n-            errln(\"Fail\");\n+            fail(\"Fail\");\n@@ -329,0 +333,1 @@\n+    @Test\n@@ -338,1 +343,1 @@\n-            errln(\"Fail: Calendar not initialized\");\n+            fail(\"Fail: Calendar not initialized\");\n@@ -342,0 +347,1 @@\n+    @Test\n@@ -354,1 +360,1 @@\n-            logln(\"Current time: \" + firstDate.toString());\n+            System.out.println(\"Current time: \" + firstDate.toString());\n@@ -365,1 +371,1 @@\n-                    errln(\"Day has shifted \" + lastDate);\n+                    fail(\"Day has shifted \" + lastDate);\n@@ -373,0 +379,1 @@\n+    @Test\n@@ -390,1 +397,1 @@\n-                errln(\"Wrong display name \\\"\" + formattedDate\n+                fail(\"Wrong display name \\\"\" + formattedDate\n@@ -395,1 +402,1 @@\n-                errln(\"Wrong week-of-year \" + weekOfYear\n+                fail(\"Wrong week-of-year \" + weekOfYear\n@@ -403,1 +410,1 @@\n-                errln(\"Wrong display name \\\"\" + formattedDate\n+                fail(\"Wrong display name \\\"\" + formattedDate\n@@ -408,1 +415,1 @@\n-                errln(\"Wrong week-of-year \" + weekOfYear\n+                fail(\"Wrong week-of-year \" + weekOfYear\n@@ -416,1 +423,1 @@\n-                errln(\"Wrong display name \\\"\" + formattedDate\n+                fail(\"Wrong display name \\\"\" + formattedDate\n@@ -421,1 +428,1 @@\n-                errln(\"Wrong week-of-year \" + weekOfYear\n+                fail(\"Wrong week-of-year \" + weekOfYear\n@@ -429,1 +436,1 @@\n-                errln(\"Wrong display name \\\"\" + formattedDate\n+                fail(\"Wrong display name \\\"\" + formattedDate\n@@ -434,1 +441,1 @@\n-                errln(\"Wrong week-of-year \" + weekOfYear\n+                fail(\"Wrong week-of-year \" + weekOfYear\n@@ -444,0 +451,1 @@\n+    @Test\n@@ -453,2 +461,2 @@\n-        logln(\" Cal1 = \" + cal1.getTime().getTime());\n-        logln(\" Cal1 time in ms = \" + cal1.get(MILLISECOND));\n+        System.out.println(\" Cal1 = \" + cal1.getTime().getTime());\n+        System.out.println(\" Cal1 time in ms = \" + cal1.get(MILLISECOND));\n@@ -465,2 +473,2 @@\n-        logln(\" Cal2 = \" + cal2.getTime().getTime());\n-        logln(\" Cal2 time in ms = \" + cal2.get(MILLISECOND));\n+        System.out.println(\" Cal2 = \" + cal2.getTime().getTime());\n+        System.out.println(\" Cal2 time in ms = \" + cal2.get(MILLISECOND));\n@@ -468,1 +476,1 @@\n-            errln(\"Fail: Milliseconds randomized\");\n+            fail(\"Fail: Milliseconds randomized\");\n@@ -472,0 +480,1 @@\n+    @Test\n@@ -476,1 +485,1 @@\n-            errln(\"Fail: Want THURSDAY Got \" + dow);\n+            fail(\"Fail: Want THURSDAY Got \" + dow);\n@@ -480,0 +489,1 @@\n+    @Test\n@@ -488,1 +498,1 @@\n-        logln(\"PST 1 is: \" + (p = cal1.get(HOUR_OF_DAY)));\n+        System.out.println(\"PST 1 is: \" + (p = cal1.get(HOUR_OF_DAY)));\n@@ -493,1 +503,1 @@\n-        logln(\"GMT 1 is: \" + (h1 = cal1.get(HOUR_OF_DAY)));\n+        System.out.println(\"GMT 1 is: \" + (h1 = cal1.get(HOUR_OF_DAY)));\n@@ -495,1 +505,1 @@\n-        logln(\"GMT 2 is: \" + (h2 = cal1.get(HOUR_OF_DAY)));\n+        System.out.println(\"GMT 2 is: \" + (h2 = cal1.get(HOUR_OF_DAY)));\n@@ -500,1 +510,1 @@\n-            errln(\"Fail: Hour same in different zones\");\n+            fail(\"Fail: Hour same in different zones\");\n@@ -516,1 +526,1 @@\n-        logln(\"RGMT 1 is: \" + (t1 = cal2.getTime().getTime()));\n+        System.out.println(\"RGMT 1 is: \" + (t1 = cal2.getTime().getTime()));\n@@ -518,1 +528,1 @@\n-        logln(\"RPST 1 is: \" + (t2 = cal3.getTime().getTime()));\n+        System.out.println(\"RPST 1 is: \" + (t2 = cal3.getTime().getTime()));\n@@ -520,1 +530,1 @@\n-        logln(\"RGMT 2 is: \" + (t3 = cal3.getTime().getTime()));\n+        System.out.println(\"RGMT 2 is: \" + (t3 = cal3.getTime().getTime()));\n@@ -530,1 +540,1 @@\n-        logln(\"RGMT 3 is: \" + (t4 = cal3.getTime().getTime()));\n+        System.out.println(\"RGMT 3 is: \" + (t4 = cal3.getTime().getTime()));\n@@ -534,1 +544,1 @@\n-            errln(\"Fail: Calendar zone behavior faulty\");\n+            fail(\"Fail: Calendar zone behavior faulty\");\n@@ -538,0 +548,1 @@\n+    @Test\n@@ -544,1 +555,1 @@\n-            log((m1 = gc.get(MONTH) + 1) + \"\/\"\n+            System.out.println((m1 = gc.get(MONTH) + 1) + \"\/\"\n@@ -549,1 +560,1 @@\n-            logln((m2 = gc.get(MONTH) + 1) + \"\/\"\n+            System.out.println((m2 = gc.get(MONTH) + 1) + \"\/\"\n@@ -554,1 +565,1 @@\n-                errln(\"Fail: Want \" + m + \" Got \" + m2);\n+                fail(\"Fail: Want \" + m + \" Got \" + m2);\n@@ -560,0 +571,1 @@\n+    @Test\n@@ -563,1 +575,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -571,1 +583,1 @@\n-        logln(d.toString());\n+        System.out.println(d.toString());\n@@ -573,1 +585,1 @@\n-            errln(\"Fail: DAY_OF_YEAR not set\");\n+            fail(\"Fail: DAY_OF_YEAR not set\");\n@@ -577,0 +589,1 @@\n+    @Test\n@@ -580,1 +593,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -597,1 +610,1 @@\n-                logln(testDesc + \" => 1st day of week=\"\n+                System.out.println(testDesc + \" => 1st day of week=\"\n@@ -612,1 +625,1 @@\n-                            logln(output);\n+                            System.out.println(output);\n@@ -629,1 +642,1 @@\n-            logln(\"Minimal days in first week = \" + DATA[j]\n+            System.out.println(\"Minimal days in first week = \" + DATA[j]\n@@ -635,1 +648,1 @@\n-                log(\"\\t\" + testCal.getTime() + \" \" + woy);\n+                System.out.println(\"\\t\" + testCal.getTime() + \" \" + woy);\n@@ -637,1 +650,1 @@\n-                    log(\" ERROR\");\n+                    System.out.println(\" ERROR\");\n@@ -640,1 +653,1 @@\n-                    logln(\" OK\");\n+                    System.out.println(\" OK\");\n@@ -651,1 +664,1 @@\n-                    logln(\"  Parse failed: \" + testCal.getTime());\n+                    System.out.println(\"  Parse failed: \" + testCal.getTime());\n@@ -654,1 +667,1 @@\n-                    logln(\"  Passed\");\n+                    System.out.println(\"  Passed\");\n@@ -685,1 +698,1 @@\n-            log(y + \"-W\" + woy + \"-DOW\" + dow);\n+            System.out.println(y + \"-W\" + woy + \"-DOW\" + dow);\n@@ -687,1 +700,1 @@\n-                logln(\"  FAILED expect: \" + exp + \"\\n            got: \" + testCal.getTime());\n+                System.out.println(\"  FAILED expect: \" + exp + \"\\n            got: \" + testCal.getTime());\n@@ -690,1 +703,1 @@\n-                logln(\"  OK\");\n+                System.out.println(\"  OK\");\n@@ -717,1 +730,1 @@\n-            log((ADDROLL[i] == ADD ? \"add(WOY,\" : \"roll(WOY,\")\n+            System.out.println((ADDROLL[i] == ADD ? \"add(WOY,\" : \"roll(WOY,\")\n@@ -721,1 +734,1 @@\n-                logln(\"\\tFAIL\\n\\t\\texp: \" + after);\n+                System.out.println(\"\\tFAIL\\n\\t\\texp: \" + after);\n@@ -724,1 +737,1 @@\n-                logln(\"  OK\");\n+                System.out.println(\"  OK\");\n@@ -733,1 +746,1 @@\n-            log((ADDROLL[i] == ADD ? \"add(WOY,\" : \"roll(WOY,\")\n+            System.out.println((ADDROLL[i] == ADD ? \"add(WOY,\" : \"roll(WOY,\")\n@@ -737,1 +750,1 @@\n-                logln(\"\\tFAIL\\n\\t\\texp: \" + before);\n+                System.out.println(\"\\tFAIL\\n\\t\\texp: \" + before);\n@@ -740,1 +753,1 @@\n-                logln(\"\\tOK\");\n+                System.out.println(\"\\tOK\");\n@@ -745,1 +758,1 @@\n-            errln(\"Fail: Week of year misbehaving\");\n+            fail(\"Fail: Week of year misbehaving\");\n@@ -749,0 +762,1 @@\n+    @Test\n@@ -761,1 +775,1 @@\n-                        errln(\"Fail: No locales for \" + locales[i]);\n+                        fail(\"Fail: No locales for \" + locales[i]);\n@@ -771,0 +785,1 @@\n+    @Test\n@@ -782,1 +797,1 @@\n-        logln(cal.getTime().toString());\n+        System.out.println(cal.getTime().toString());\n@@ -784,1 +799,1 @@\n-            errln(\"Fail: clear(MINUTE) broken\");\n+            fail(\"Fail: clear(MINUTE) broken\");\n@@ -788,1 +803,1 @@\n-        logln(cal.getTime().toString());\n+        System.out.println(cal.getTime().toString());\n@@ -790,1 +805,1 @@\n-            errln(\"Fail: set(SECOND, 0) broken\");\n+            fail(\"Fail: set(SECOND, 0) broken\");\n@@ -795,1 +810,1 @@\n-        logln(cal.getTime().toString());\n+        System.out.println(cal.getTime().toString());\n@@ -797,1 +812,1 @@\n-            errln(\"Fail: set(SECOND, 0) broken #2\");\n+            fail(\"Fail: set(SECOND, 0) broken #2\");\n@@ -801,1 +816,1 @@\n-        logln(cal.getTime().toString());\n+        System.out.println(cal.getTime().toString());\n@@ -803,1 +818,1 @@\n-            errln(\"Fail: clear(MINUTE) broken #2\");\n+            fail(\"Fail: clear(MINUTE) broken #2\");\n@@ -807,1 +822,1 @@\n-        logln(cal.getTime().toString());\n+        System.out.println(cal.getTime().toString());\n@@ -809,1 +824,1 @@\n-            errln(\"Fail: clear() broken Want \" + epoch);\n+            fail(\"Fail: clear() broken Want \" + epoch);\n@@ -814,0 +829,1 @@\n+    @Test\n@@ -817,1 +833,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -852,1 +868,1 @@\n-                log(date.toString());\n+                System.out.println(date.toString());\n@@ -857,1 +873,1 @@\n-                        log(\" add (HOUR,\" + (amt < 0 ? \"\" : \"+\") + amt + \")= \");\n+                        System.out.println(\" add (HOUR,\" + (amt < 0 ? \"\" : \"+\") + amt + \")= \");\n@@ -861,1 +877,1 @@\n-                        log(\" roll(HOUR,\" + (amt < 0 ? \"\" : \"+\") + amt + \")= \");\n+                        System.out.println(\" roll(HOUR,\" + (amt < 0 ? \"\" : \"+\") + amt + \")= \");\n@@ -866,1 +882,1 @@\n-                log(cal.getTime().toString());\n+                System.out.println(cal.getTime().toString());\n@@ -871,1 +887,1 @@\n-                    logln(\" FAIL\");\n+                    System.out.println(\" FAIL\");\n@@ -873,1 +889,1 @@\n-                    logln(\" OK\");\n+                    System.out.println(\" OK\");\n@@ -881,1 +897,1 @@\n-            errln(\"Fail: roll\/add misbehaves around DST onset\/cease\");\n+            fail(\"Fail: roll\/add misbehaves around DST onset\/cease\");\n@@ -888,0 +904,1 @@\n+    @Test\n@@ -893,1 +910,1 @@\n-            errln(\"Fail: maximum of HOUR field should be 11\");\n+            fail(\"Fail: maximum of HOUR field should be 11\");\n@@ -900,0 +917,1 @@\n+    @Test\n@@ -903,1 +921,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -913,1 +931,1 @@\n-            logln(y + \" = \" + fmt.format(cal.getTime()) + \" \"\n+            System.out.println(y + \" = \" + fmt.format(cal.getTime()) + \" \"\n@@ -916,1 +934,1 @@\n-                errln(\"Leap years broken\");\n+                fail(\"Leap years broken\");\n@@ -925,0 +943,1 @@\n+    @Test\n@@ -928,1 +947,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -942,1 +961,1 @@\n-            errln(\"Calendar not proleptic\");\n+            fail(\"Calendar not proleptic\");\n@@ -951,0 +970,1 @@\n+    @Test\n@@ -964,1 +984,1 @@\n-            errln(\"Calendar hash code unequal for cloned objects\");\n+            fail(\"Calendar hash code unequal for cloned objects\");\n@@ -969,1 +989,1 @@\n-            errln(\"Calendar hash code ignores minimal days in first week\");\n+            fail(\"Calendar hash code ignores minimal days in first week\");\n@@ -975,1 +995,1 @@\n-            errln(\"Calendar hash code ignores first day of week\");\n+            fail(\"Calendar hash code ignores first day of week\");\n@@ -981,1 +1001,1 @@\n-            errln(\"Calendar hash code ignores lenient setting\");\n+            fail(\"Calendar hash code ignores lenient setting\");\n@@ -989,1 +1009,1 @@\n-            errln(\"Calendar hash code ignores zone\");\n+            fail(\"Calendar hash code ignores zone\");\n@@ -996,1 +1016,1 @@\n-            errln(\"GregorianCalendar hash code unequal for clones objects\");\n+            fail(\"GregorianCalendar hash code unequal for clones objects\");\n@@ -1001,1 +1021,1 @@\n-            errln(\"GregorianCalendar hash code ignores cutover\");\n+            fail(\"GregorianCalendar hash code ignores cutover\");\n@@ -1008,0 +1028,1 @@\n+    @Test\n@@ -1014,1 +1035,1 @@\n-            errln(\"Cloned GregorianCalendars not equal\");\n+            fail(\"Cloned GregorianCalendars not equal\");\n@@ -1018,1 +1039,1 @@\n-            errln(\"GregorianCalendar.equals() ignores cutover\");\n+            fail(\"GregorianCalendar.equals() ignores cutover\");\n@@ -1026,0 +1047,1 @@\n+    @Test\n@@ -1030,1 +1052,1 @@\n-            errln(\"Test failed, no exception trown\");\n+            fail(\"Test failed, no exception trown\");\n@@ -1035,1 +1057,1 @@\n-            errln(\"Test failed. Unexpected exception is thrown: \" + e);\n+            fail(\"Test failed. Unexpected exception is thrown: \" + e);\n@@ -1047,0 +1069,1 @@\n+    @Test\n@@ -1061,1 +1084,1 @@\n-            errln(\"Fail: Long.MIN_VALUE or Long.MAX_VALUE wrapping around\");\n+            fail(\"Fail: Long.MIN_VALUE or Long.MAX_VALUE wrapping around\");\n@@ -1068,0 +1091,1 @@\n+    @Test\n@@ -1077,1 +1101,1 @@\n-                errln(\"Failed for \" + DATES[i].getTime() + \" ms: year=\"\n+                fail(\"Failed for \" + DATES[i].getTime() + \" ms: year=\"\n@@ -1089,0 +1113,1 @@\n+    @Test\n@@ -1124,1 +1149,1 @@\n-                errln(\"Test failed with field \" + fieldName[field]\n+                fail(\"Test failed with field \" + fieldName[field]\n@@ -1138,0 +1163,1 @@\n+    @Test\n@@ -1148,1 +1174,1 @@\n-                errln(\"Fail: Date(Long.MIN_VALUE) has an AD year in \" + zones[i]);\n+                fail(\"Fail: Date(Long.MIN_VALUE) has an AD year in \" + zones[i]);\n@@ -1152,1 +1178,1 @@\n-                errln(\"Fail: Date(Long.MAX_VALUE) has a BC year in \" + zones[i]);\n+                fail(\"Fail: Date(Long.MAX_VALUE) has a BC year in \" + zones[i]);\n@@ -1160,3 +1186,3 @@\n-                errln(\"test failed with zone \" + zones[i].getID());\n-                errln(\" cutover date is Date(Long.MAX_VALUE)\");\n-                errln(\" isLeapYear(100) returns: \" + is100Leap);\n+                fail(\"test failed with zone \" + zones[i].getID()\n+                + \"\\n cutover date is Date(Long.MAX_VALUE)\"\n+                + \"\\n isLeapYear(100) returns: \" + is100Leap);\n@@ -1171,0 +1197,1 @@\n+    @Test\n@@ -1181,1 +1208,1 @@\n-                    logln(\"---\");\n+                    System.out.println(\"---\");\n@@ -1188,1 +1215,1 @@\n-                logln(\"0 \" + i + \": \" + s0);\n+                System.out.println(\"0 \" + i + \": \" + s0);\n@@ -1194,1 +1221,1 @@\n-                logln(\"+ \" + i + \": \" + sPlus);\n+                System.out.println(\"+ \" + i + \": \" + sPlus);\n@@ -1200,1 +1227,1 @@\n-                logln(\"- \" + i + \": \" + sMinus);\n+                System.out.println(\"- \" + i + \": \" + sMinus);\n@@ -1203,1 +1230,1 @@\n-                    errln(\"Fail: All three lines must match\");\n+                    fail(\"Fail: All three lines must match\");\n@@ -1214,0 +1241,1 @@\n+    @Test\n@@ -1217,1 +1245,1 @@\n-        logln(\"init date: \" + start);\n+        System.out.println(\"init date: \" + start);\n@@ -1220,1 +1248,1 @@\n-        logln(\"after adding 12 months: \" + date1);\n+        System.out.println(\"after adding 12 months: \" + date1);\n@@ -1224,1 +1252,1 @@\n-        logln(\"after adding one year : \" + date2);\n+        System.out.println(\"after adding one year : \" + date2);\n@@ -1226,1 +1254,1 @@\n-            logln(\"Test passed\");\n+            System.out.println(\"Test passed\");\n@@ -1228,1 +1256,1 @@\n-            errln(\"Test failed\");\n+            fail(\"Test failed\");\n@@ -1235,0 +1263,1 @@\n+    @Test\n@@ -1252,1 +1281,1 @@\n-        logln(\"Date:  \" + calendar.getTime());\n+        System.out.println(\"Date:  \" + calendar.getTime());\n@@ -1261,1 +1290,1 @@\n-            logln(\"First day of week = \" + firstInWeek\n+            System.out.println(\"First day of week = \" + firstInWeek\n@@ -1271,1 +1300,1 @@\n-            errln(\"Test failed\");\n+            fail(\"Test failed\");\n@@ -1282,0 +1311,1 @@\n+    @Test\n@@ -1296,1 +1326,1 @@\n-            logln(\"--- \" + id[k] + \" ---\");\n+            System.out.println(\"--- \" + id[k] + \" ---\");\n@@ -1311,2 +1341,2 @@\n-                logln(\"maxYear: \" + maxYear + \" for \" + format.format(calendar.getTime()));\n-                logln(\"date before: \" + format.format(dateBefore));\n+                System.out.println(\"maxYear: \" + maxYear + \" for \" + format.format(calendar.getTime()));\n+                System.out.println(\"date before: \" + format.format(dateBefore));\n@@ -1323,1 +1353,1 @@\n-                    logln(\" Year \" + years[i] + (valid ? \" ok \" : \" bad\")\n+                    System.out.println(\" Year \" + years[i] + (valid ? \" ok \" : \" bad\")\n@@ -1326,1 +1356,1 @@\n-                        errln(\"  FAIL: \" + newYear + \" should be valid; date, month and time shouldn't change\");\n+                        fail(\"  FAIL: \" + newYear + \" should be valid; date, month and time shouldn't change\");\n@@ -1328,1 +1358,1 @@\n-                        errln(\"  FAIL: \" + newYear + \" should be invalid\");\n+                        fail(\"  FAIL: \" + newYear + \" should be invalid\");\n@@ -1339,0 +1369,1 @@\n+    @Test\n@@ -1342,1 +1373,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -1368,1 +1399,1 @@\n-                errln(\"Hour rolling broken. expected 0, got \" + cal.getTime().getTime());\n+                fail(\"Hour rolling broken. expected 0, got \" + cal.getTime().getTime());\n@@ -1372,1 +1403,1 @@\n-                logln(\"Testing GregorianCalendar \" + (op == 0 ? \"add\" : \"roll\"));\n+                System.out.println(\"Testing GregorianCalendar \" + (op == 0 ? \"add\" : \"roll\"));\n@@ -1398,1 +1429,1 @@\n-                                errln(\"Field \" + field\n+                                fail(\"Field \" + field\n@@ -1420,1 +1451,1 @@\n-                                errln(cal.get(YEAR)\n+                                fail(cal.get(YEAR)\n@@ -1438,1 +1469,1 @@\n-                                    errln((op == 0 ? \"add(\" : \"roll(\")\n+                                    fail((op == 0 ? \"add(\" : \"roll(\")\n@@ -1460,0 +1491,1 @@\n+    @Test\n@@ -1473,1 +1505,1 @@\n-            errln(\"adding months to Feb 29 broken\");\n+            fail(\"adding months to Feb 29 broken\");\n@@ -1480,0 +1512,1 @@\n+    @Test\n@@ -1491,1 +1524,1 @@\n-            errln(\"FAIL: Fields not updated after setTimeZone\");\n+            fail(\"FAIL: Fields not updated after setTimeZone\");\n@@ -1503,1 +1536,1 @@\n-            errln(\"FAIL: setTimeZone changed time\");\n+            fail(\"FAIL: setTimeZone changed time\");\n@@ -1510,0 +1543,1 @@\n+    @Test\n@@ -1526,1 +1560,1 @@\n-                logln(\"Ok: \" + fmt.format(cal.getTime()));\n+                System.out.println(\"Ok: \" + fmt.format(cal.getTime()));\n@@ -1528,1 +1562,1 @@\n-                errln(\"FAIL: \" + fmt.format(cal.getTime())\n+                fail(\"FAIL: \" + fmt.format(cal.getTime())\n@@ -1533,1 +1567,1 @@\n-                    logln(fmt.format(cal.getTime()));\n+                    System.out.println(fmt.format(cal.getTime()));\n@@ -1552,0 +1586,1 @@\n+    @Test\n@@ -1628,1 +1663,1 @@\n-                errln(\"FAIL: Test \" + (i \/ 2) + \" got \" + act\n+                fail(\"FAIL: Test \" + (i \/ 2) + \" got \" + act\n@@ -1652,1 +1687,1 @@\n-                errln(\"FAIL: Sunday \" + DATA[i]\n+                fail(\"FAIL: Sunday \" + DATA[i]\n@@ -1659,0 +1694,1 @@\n+    @Test\n@@ -1681,1 +1717,1 @@\n-                                errln(cal.getTime() + \",got=\" + WOY\n+                                fail(cal.getTime() + \",got=\" + WOY\n@@ -1690,1 +1726,1 @@\n-                            errln(cal.getTime() + \",got=\" + WOY\n+                            fail(cal.getTime() + \",got=\" + WOY\n@@ -1701,0 +1737,1 @@\n+    @Test\n@@ -1721,1 +1758,1 @@\n-            errln(\"deserialized Calendar returned wrong date field(s): \"\n+            fail(\"deserialized Calendar returned wrong date field(s): \"\n@@ -1731,0 +1768,1 @@\n+    @Test\n@@ -1754,1 +1792,1 @@\n-                    logln(\"Calendar instance which uses TimeZone <\"\n+                    System.out.println(\"Calendar instance which uses TimeZone <\"\n@@ -1757,1 +1795,1 @@\n-                    logln(\"Calendar instance which uses TimeZone <\"\n+                    System.out.println(\"Calendar instance which uses TimeZone <\"\n@@ -1762,1 +1800,1 @@\n-                errln(\"Fail: Calendar serialization\/equality bug\");\n+                fail(\"Fail: Calendar serialization\/equality bug\");\n@@ -1765,1 +1803,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -1775,0 +1813,1 @@\n+    @Test\n@@ -1782,1 +1821,1 @@\n-            errln(\"Fail: 2001\/11\/4 must be the first week of the month.\");\n+            fail(\"Fail: 2001\/11\/4 must be the first week of the month.\");\n@@ -1789,0 +1828,1 @@\n+    @Test\n@@ -1798,1 +1838,1 @@\n-            errln(\"Fail: 2000\/1\/1 must be the 52nd week of the year.\");\n+            fail(\"Fail: 2000\/1\/1 must be the 52nd week of the year.\");\n@@ -1808,0 +1848,1 @@\n+    @Test\n@@ -1812,1 +1853,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -1834,1 +1875,1 @@\n-            errln(\"DAY_OF_MONTH w\/o ZONE_OFFSET: expected: \" + expected + \", got: \" + s);\n+            fail(\"DAY_OF_MONTH w\/o ZONE_OFFSET: expected: \" + expected + \", got: \" + s);\n@@ -1850,1 +1891,1 @@\n-            errln(\"DAY_OF_MONTH: expected: \" + expected + \", got: \" + s);\n+            fail(\"DAY_OF_MONTH: expected: \" + expected + \", got: \" + s);\n@@ -1870,1 +1911,1 @@\n-            errln(\"WEEK_OF_YEAR: expected: \" + expected + \", got: \" + s);\n+            fail(\"WEEK_OF_YEAR: expected: \" + expected + \", got: \" + s);\n@@ -1882,1 +1923,1 @@\n-            errln(\"WEEK_OF_MONTH: expected: \" + expected + \", got: \" + s);\n+            fail(\"WEEK_OF_MONTH: expected: \" + expected + \", got: \" + s);\n@@ -1906,1 +1947,1 @@\n-            errln(\"MINUTE: expected: \" + expected + \", got: \" + s);\n+            fail(\"MINUTE: expected: \" + expected + \", got: \" + s);\n@@ -1916,0 +1957,1 @@\n+    @Test\n@@ -1919,1 +1961,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -1938,1 +1980,1 @@\n-            errln(\"expected: \" + expected + \", got: \" + s);\n+            fail(\"expected: \" + expected + \", got: \" + s);\n@@ -1950,0 +1992,1 @@\n+    @Test\n@@ -1959,1 +2002,1 @@\n-            errln(\"expected: \" + expected + \", got: \" + s);\n+            fail(\"expected: \" + expected + \", got: \" + s);\n@@ -1966,0 +2009,1 @@\n+    @Test\n@@ -1974,1 +2018,1 @@\n-        logln(\"hash code: h1=\" + h1 + \", h2=\" + h2 + \", h3=\" + h3);\n+        System.out.println(\"hash code: h1=\" + h1 + \", h2=\" + h2 + \", h3=\" + h3);\n@@ -1976,1 +2020,1 @@\n-            errln(\"hash code is poor: hashCode=\" + h1);\n+            fail(\"hash code is poor: hashCode=\" + h1);\n@@ -1981,1 +2025,1 @@\n-        logln(\"hash code: h2=\" + h2 + \", h4=\" + h4);\n+        System.out.println(\"hash code: h2=\" + h2 + \", h4=\" + h4);\n@@ -1983,1 +2027,1 @@\n-            errln(\"broken hash code: h2=\" + h2 + \", h4=\" + h4);\n+            fail(\"broken hash code: h2=\" + h2 + \", h4=\" + h4);\n@@ -1991,1 +2035,1 @@\n-        logln(\"hash code: h4=\" + h4 + \", h5=\" + h5);\n+        System.out.println(\"hash code: h4=\" + h4 + \", h5=\" + h5);\n@@ -1993,1 +2037,1 @@\n-            errln(\"has code is poor with first day of week param: hashCode=\" + h4);\n+            fail(\"has code is poor with first day of week param: hashCode=\" + h4);\n@@ -2001,0 +2045,1 @@\n+    @Test\n@@ -2008,1 +2053,1 @@\n-            errln(\"BCE: wrong modifiers: \" + mod);\n+            fail(\"BCE: wrong modifiers: \" + mod);\n@@ -2013,1 +2058,1 @@\n-            errln(\"CE: wrong modifiers: \" + mod);\n+            fail(\"CE: wrong modifiers: \" + mod);\n@@ -2017,1 +2062,1 @@\n-            errln(\"Wrong BCE and\/or CE values\");\n+            fail(\"Wrong BCE and\/or CE values\");\n@@ -2024,0 +2069,1 @@\n+    @Test\n@@ -2026,1 +2072,1 @@\n-        logln(\"Hybrid: min date\");\n+        System.out.println(\"Hybrid: min date\");\n@@ -2030,1 +2076,1 @@\n-            errln(gc.getMessage());\n+            fail(gc.getMessage());\n@@ -2032,1 +2078,1 @@\n-        logln(\"Hybrid: max date\");\n+        System.out.println(\"Hybrid: max date\");\n@@ -2036,1 +2082,1 @@\n-            errln(gc.getMessage());\n+            fail(gc.getMessage());\n@@ -2040,1 +2086,1 @@\n-        logln(\"Gregorian: min date\");\n+        System.out.println(\"Gregorian: min date\");\n@@ -2044,1 +2090,1 @@\n-            errln(gc.getMessage());\n+            fail(gc.getMessage());\n@@ -2046,1 +2092,1 @@\n-        logln(\"Gregorian: max date\");\n+        System.out.println(\"Gregorian: max date\");\n@@ -2050,1 +2096,1 @@\n-            errln(gc.getMessage());\n+            fail(gc.getMessage());\n@@ -2054,1 +2100,1 @@\n-        logln(\"Julian: min date\");\n+        System.out.println(\"Julian: min date\");\n@@ -2058,1 +2104,1 @@\n-            errln(gc.getMessage());\n+            fail(gc.getMessage());\n@@ -2060,1 +2106,1 @@\n-        logln(\"Julian: max date\");\n+        System.out.println(\"Julian: max date\");\n@@ -2064,1 +2110,1 @@\n-            errln(gc.getMessage());\n+            fail(gc.getMessage());\n@@ -2071,0 +2117,1 @@\n+    @Test\n@@ -2077,1 +2124,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -2081,1 +2128,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -2088,0 +2135,1 @@\n+    @Test\n@@ -2103,0 +2151,1 @@\n+    @Test\n@@ -2115,1 +2164,1 @@\n-        logln(\"Roll backwards from \" + cal.toDateString());\n+        System.out.println(\"Roll backwards from \" + cal.toDateString());\n@@ -2119,1 +2168,1 @@\n-                errln(cal.getMessage());\n+                fail(cal.getMessage());\n@@ -2122,1 +2171,1 @@\n-        logln(\"Roll forewards from \" + cal.toDateString());\n+        System.out.println(\"Roll forewards from \" + cal.toDateString());\n@@ -2126,1 +2175,1 @@\n-                errln(cal.getMessage());\n+                fail(cal.getMessage());\n@@ -2134,0 +2183,1 @@\n+    @Test\n@@ -2137,1 +2187,1 @@\n-        logln(\"BCE 9-2-28 (leap year) roll DAY_OF_MONTH++ twice\");\n+        System.out.println(\"BCE 9-2-28 (leap year) roll DAY_OF_MONTH++ twice\");\n@@ -2141,1 +2191,1 @@\n-            errln(\"    wrong actual max of DAY_OF_YEAR: got \"\n+            fail(\"    wrong actual max of DAY_OF_YEAR: got \"\n@@ -2147,1 +2197,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -2152,1 +2202,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -2159,0 +2209,1 @@\n+    @Test\n@@ -2160,1 +2211,1 @@\n-        logln(\"1999\/(Feb+12)\/1 should be normalized to 2000\/Feb\/1 for getActualMaximum\");\n+        System.out.println(\"1999\/(Feb+12)\/1 should be normalized to 2000\/Feb\/1 for getActualMaximum\");\n@@ -2165,1 +2216,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -2168,1 +2219,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -2175,0 +2226,1 @@\n+    @Test\n@@ -2216,1 +2268,1 @@\n-            errln(\"set(\" + Koyomi.getFieldName(field) + \", \" + s + \") failed.\" + \" got \" + time2\n+            fail(\"set(\" + Koyomi.getFieldName(field) + \", \" + s + \") failed.\" + \" got \" + time2\n@@ -2225,0 +2277,1 @@\n+    @Test\n@@ -2236,1 +2289,1 @@\n-                errln(\"lenient and non-lenient shouldn't be equal. (2003\/10\/31)\");\n+                fail(\"lenient and non-lenient shouldn't be equal. (2003\/10\/31)\");\n@@ -2239,1 +2292,1 @@\n-                errln(\"cal1 and cal2 should represent the same time. (2003\/10\/31)\");\n+                fail(\"cal1 and cal2 should represent the same time. (2003\/10\/31)\");\n@@ -2242,1 +2295,1 @@\n-            errln(\"equals threw IllegalArugumentException with non-lenient\");\n+            fail(\"equals threw IllegalArugumentException with non-lenient\");\n@@ -2249,1 +2302,1 @@\n-                errln(\"lenient and non-lenient shouldn't be equal. (2003\/10\/32)\");\n+                fail(\"lenient and non-lenient shouldn't be equal. (2003\/10\/32)\");\n@@ -2252,1 +2305,1 @@\n-                errln(\"cal1 and cal2 should represent the same time. (2003\/10\/32)\");\n+                fail(\"cal1 and cal2 should represent the same time. (2003\/10\/32)\");\n@@ -2255,1 +2308,1 @@\n-            errln(\"equals threw IllegalArugumentException with non-lenient\");\n+            fail(\"equals threw IllegalArugumentException with non-lenient\");\n@@ -2263,1 +2316,1 @@\n-            errln(\"Buddhist.equals(Gregorian) shouldn't be true. (millis=0)\");\n+            fail(\"Buddhist.equals(Gregorian) shouldn't be true. (millis=0)\");\n@@ -2266,1 +2319,1 @@\n-            errln(\"cal1 (Buddhist) and cal2 (Gregorian) should represent the same time. (millis=0)\");\n+            fail(\"cal1 (Buddhist) and cal2 (Gregorian) should represent the same time. (millis=0)\");\n@@ -2273,0 +2326,1 @@\n+    @Test\n@@ -2278,1 +2332,1 @@\n-            errln(\"!(cal1 > cal0)\");\n+            fail(\"!(cal1 > cal0)\");\n@@ -2281,1 +2335,1 @@\n-            errln(\"!(cal1 < cal2)\");\n+            fail(\"!(cal1 < cal2)\");\n@@ -2284,1 +2338,1 @@\n-            errln(\"cal1 != new GregorianCalendar(2003, OCTOBER, 1)\");\n+            fail(\"cal1 != new GregorianCalendar(2003, OCTOBER, 1)\");\n@@ -2288,1 +2342,1 @@\n-            errln(\"cal0 shouldn't be after cal2\");\n+            fail(\"cal0 shouldn't be after cal2\");\n@@ -2291,1 +2345,1 @@\n-            errln(\"cal2 shouldn't be before cal0\");\n+            fail(\"cal2 shouldn't be before cal0\");\n@@ -2295,1 +2349,1 @@\n-            errln(\"cal0.after() returned true with an Integer.\");\n+            fail(\"cal0.after() returned true with an Integer.\");\n@@ -2298,1 +2352,1 @@\n-            errln(\"cal0.before() returned true with an Integer.\");\n+            fail(\"cal0.before() returned true with an Integer.\");\n@@ -2301,1 +2355,1 @@\n-            errln(\"cal0.after() returned true with null.\");\n+            fail(\"cal0.after() returned true with null.\");\n@@ -2304,1 +2358,1 @@\n-            errln(\"cal0.before() returned true with null.\");\n+            fail(\"cal0.before() returned true with null.\");\n@@ -2312,0 +2366,1 @@\n+    @Test\n@@ -2337,1 +2392,1 @@\n-                errln(cal.getMessage());\n+                fail(cal.getMessage());\n@@ -2340,1 +2395,1 @@\n-                errln(cal.getMessage());\n+                fail(cal.getMessage());\n@@ -2345,1 +2400,1 @@\n-                errln(\"didn't throw IllegalArgumentException in non-lenient\");\n+                fail(\"didn't throw IllegalArgumentException in non-lenient\");\n@@ -2355,0 +2410,1 @@\n+    @Test\n@@ -2363,1 +2419,1 @@\n-            errln(\"roll: AM_PM didn't change to PM\");\n+            fail(\"roll: AM_PM didn't change to PM\");\n@@ -2372,1 +2428,1 @@\n-            errln(\"set: AM_PM didn't change to PM\");\n+            fail(\"set: AM_PM didn't change to PM\");\n@@ -2381,1 +2437,1 @@\n-            errln(\"set: both AM_PM and HOUT didn't change to PM\");\n+            fail(\"set: both AM_PM and HOUT didn't change to PM\");\n@@ -2388,0 +2444,1 @@\n+    @Test\n@@ -2404,1 +2461,1 @@\n-        logln(\"1: \" + cal.get(WEEK_OF_MONTH) + \", \" + cal.get(DAY_OF_MONTH));\n+        System.out.println(\"1: \" + cal.get(WEEK_OF_MONTH) + \", \" + cal.get(DAY_OF_MONTH));\n@@ -2406,1 +2463,1 @@\n-        logln(\"1st Sunday of June 2003 with FirstDayOfWeek=MONDAY\");\n+        System.out.println(\"1st Sunday of June 2003 with FirstDayOfWeek=MONDAY\");\n@@ -2408,1 +2465,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -2415,0 +2472,1 @@\n+    @Test\n@@ -2431,1 +2489,1 @@\n-            errln(\"date1.equals(date2) != true\");\n+            fail(\"date1.equals(date2) != true\");\n@@ -2434,1 +2492,1 @@\n-            errln(\"inconsistent hashCode() value (before=0x\"\n+            fail(\"inconsistent hashCode() value (before=0x\"\n@@ -2443,0 +2501,1 @@\n+    @Test\n@@ -2447,1 +2506,1 @@\n-            errln(\"getMaximum(100) didn't throw an exception.\");\n+            fail(\"getMaximum(100) didn't throw an exception.\");\n@@ -2449,1 +2508,1 @@\n-            logln(\"getMaximum: \" + e.getClass().getName() + \": \" + e.getMessage());\n+            System.out.println(\"getMaximum: \" + e.getClass().getName() + \": \" + e.getMessage());\n@@ -2454,1 +2513,1 @@\n-            errln(\"getLeastMaximum(100) didn't throw an exception.\");\n+            fail(\"getLeastMaximum(100) didn't throw an exception.\");\n@@ -2456,1 +2515,1 @@\n-            logln(\"getLeastMaximum: \" + e.getClass().getName() + \": \" + e.getMessage());\n+            System.out.println(\"getLeastMaximum: \" + e.getClass().getName() + \": \" + e.getMessage());\n@@ -2461,1 +2520,1 @@\n-            errln(\"getActualMaximum(100) didn't throw an exception.\");\n+            fail(\"getActualMaximum(100) didn't throw an exception.\");\n@@ -2463,1 +2522,1 @@\n-            logln(\"getActualMaximum: \" + e.getClass().getName() + \": \" + e.getMessage());\n+            System.out.println(\"getActualMaximum: \" + e.getClass().getName() + \": \" + e.getMessage());\n@@ -2468,1 +2527,1 @@\n-            errln(\"getMinimum(100) didn't throw an exception.\");\n+            fail(\"getMinimum(100) didn't throw an exception.\");\n@@ -2470,1 +2529,1 @@\n-            logln(\"getMinimum: \" + e.getClass().getName() + \": \" + e.getMessage());\n+            System.out.println(\"getMinimum: \" + e.getClass().getName() + \": \" + e.getMessage());\n@@ -2475,1 +2534,1 @@\n-            errln(\"getGreatestMinimum(100) didn't throw an exception.\");\n+            fail(\"getGreatestMinimum(100) didn't throw an exception.\");\n@@ -2477,1 +2536,1 @@\n-            logln(\"getGreatestMinimum: \" + e.getClass().getName() + \": \" + e.getMessage());\n+            System.out.println(\"getGreatestMinimum: \" + e.getClass().getName() + \": \" + e.getMessage());\n@@ -2482,1 +2541,1 @@\n-            errln(\"getActualMinimum(100) didn't throw an exception.\");\n+            fail(\"getActualMinimum(100) didn't throw an exception.\");\n@@ -2484,1 +2543,1 @@\n-            logln(\"getActualMinimum: \" + e.getClass().getName() + \": \" + e.getMessage());\n+            System.out.println(\"getActualMinimum: \" + e.getClass().getName() + \": \" + e.getMessage());\n@@ -2491,0 +2550,1 @@\n+    @Test\n@@ -2512,1 +2572,1 @@\n-                    errln(\"isLeapYear(1000) returned \" + cal.isLeapYear(1000)\n+                    fail(\"isLeapYear(1000) returned \" + cal.isLeapYear(1000)\n@@ -2535,0 +2595,1 @@\n+    @Test\n@@ -2539,1 +2600,1 @@\n-            errln(\"GregorianCalendar.getMinimum(DAY_OF_WEEK_IN_MONTH) returned \"\n+            fail(\"GregorianCalendar.getMinimum(DAY_OF_WEEK_IN_MONTH) returned \"\n@@ -2544,1 +2605,1 @@\n-            errln(\"GregorianCalendar.getGreatestMinimum(DAY_OF_WEEK_IN_MONTH) returned \"\n+            fail(\"GregorianCalendar.getGreatestMinimum(DAY_OF_WEEK_IN_MONTH) returned \"\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarRegression.java","additions":358,"deletions":297,"binary":false,"changes":655,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main CalendarTest\n+ * @run junit CalendarTest\n@@ -51,1 +51,5 @@\n-public class CalendarTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class CalendarTest {\n@@ -56,4 +60,0 @@\n-    public static void main(String argv[]) throws Exception {\n-        new CalendarTest().run(argv);\n-    }\n-\n@@ -63,0 +63,1 @@\n+    @Test\n@@ -100,1 +101,1 @@\n-                logln(\"Changeover \" + (i >= 0 ? \"+\" : \"\") + i\n+                System.out.println(\"Changeover \" + (i >= 0 ? \"+\" : \"\") + i\n@@ -103,1 +104,1 @@\n-                    errln(\" Fail: Above line is wrong\");\n+                    fail(\" Fail: Above line is wrong\");\n@@ -117,0 +118,1 @@\n+    @Test\n@@ -163,1 +165,1 @@\n-                    errln(s + \" FAIL\");\n+                    fail(s + \" FAIL\");\n@@ -165,1 +167,1 @@\n-                    logln(s);\n+                    System.out.println(s);\n@@ -187,1 +189,1 @@\n-                    errln(s + \" FAIL\");\n+                    fail(s + \" FAIL\");\n@@ -189,1 +191,1 @@\n-                    logln(s);\n+                    System.out.println(s);\n@@ -215,1 +217,1 @@\n-            errln(\"Round-trip failure: \" + y + \"-\" + (m + 1) + \"-\" + d + \" =>ms=> \"\n+            fail(\"Round-trip failure: \" + y + \"-\" + (m + 1) + \"-\" + d + \" =>ms=> \"\n@@ -221,0 +223,1 @@\n+    @Test\n@@ -224,1 +227,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -238,1 +241,1 @@\n-            errln(\"FAIL: Calendar.getTimeZone failed\");\n+            fail(\"FAIL: Calendar.getTimeZone failed\");\n@@ -247,1 +250,1 @@\n-            errln(\"FAIL: Calendar.operator== failed\");\n+            fail(\"FAIL: Calendar.operator== failed\");\n@@ -253,1 +256,1 @@\n-            errln(\"FAIL: equals\/before\/after failed\");\n+            fail(\"FAIL: equals\/before\/after failed\");\n@@ -260,1 +263,1 @@\n-            errln(\"FAIL: equals\/before\/after failed\");\n+            fail(\"FAIL: equals\/before\/after failed\");\n@@ -267,1 +270,1 @@\n-            errln(\"FAIL: equals\/before\/after failed\");\n+            fail(\"FAIL: equals\/before\/after failed\");\n@@ -275,1 +278,1 @@\n-            errln(\"FAIL: equals\/before\/after failed\");\n+            fail(\"FAIL: equals\/before\/after failed\");\n@@ -282,1 +285,1 @@\n-        errln(\"FAIL: orphanTimeZone failed\");\n+        fail(\"FAIL: orphanTimeZone failed\");\n@@ -288,1 +291,1 @@\n-                errln(\"FAIL: setLenient\/isLenient failed\");\n+                fail(\"FAIL: setLenient\/isLenient failed\");\n@@ -297,1 +300,1 @@\n-                errln(\"FAIL: set\/getFirstDayOfWeek failed\");\n+                fail(\"FAIL: set\/getFirstDayOfWeek failed\");\n@@ -304,1 +307,1 @@\n-                errln(\"FAIL: set\/getFirstDayOfWeek failed\");\n+                fail(\"FAIL: set\/getFirstDayOfWeek failed\");\n@@ -310,1 +313,1 @@\n-                errln(\"FAIL: getMinimum doesn't match getGreatestMinimum for field \" + i);\n+                fail(\"FAIL: getMinimum doesn't match getGreatestMinimum for field \" + i);\n@@ -313,1 +316,1 @@\n-                errln(\"FAIL: getLeastMaximum larger than getMaximum for field \" + i);\n+                fail(\"FAIL: getLeastMaximum larger than getMaximum for field \" + i);\n@@ -316,1 +319,1 @@\n-                errln(\"FAIL: getMinimum not less than getMaximum for field \" + i);\n+                fail(\"FAIL: getMinimum not less than getMaximum for field \" + i);\n@@ -324,2 +327,2 @@\n-            errln(\"FAIL: Calendar.set(3 args) failed\");\n-            logln(\" Got: \" + cal.getTime() + \"  Expected: \" + new Date(84, 5, 24));\n+            fail(\"FAIL: Calendar.set(3 args) failed\");\n+            System.out.println(\" Got: \" + cal.getTime() + \"  Expected: \" + new Date(84, 5, 24));\n@@ -331,2 +334,2 @@\n-            errln(\"FAIL: Calendar.set(5 args) failed\");\n-            logln(\" Got: \" + cal.getTime() + \"  Expected: \" + new Date(85, 3, 2, 11, 49));\n+            fail(\"FAIL: Calendar.set(5 args) failed\");\n+            System.out.println(\" Got: \" + cal.getTime() + \"  Expected: \" + new Date(85, 3, 2, 11, 49));\n@@ -338,2 +341,2 @@\n-            errln(\"FAIL: Calendar.set(6 args) failed\");\n-            logln(\" Got: \" + cal.getTime() + \"  Expected: \" + new Date(95, 9, 12, 1, 39, 55));\n+            fail(\"FAIL: Calendar.set(6 args) failed\");\n+            System.out.println(\" Got: \" + cal.getTime() + \"  Expected: \" + new Date(95, 9, 12, 1, 39, 55));\n@@ -352,1 +355,1 @@\n-                        errln(\"FAIL: !Calendar.isSet test failed: \" + calendarFieldNames[i]);\n+                        fail(\"FAIL: !Calendar.isSet test failed: \" + calendarFieldNames[i]);\n@@ -357,1 +360,1 @@\n-                        errln(\"FAIL: Calendar.isSet test failed: \" + calendarFieldNames[i]);\n+                        fail(\"FAIL: Calendar.isSet test failed: \" + calendarFieldNames[i]);\n@@ -362,1 +365,1 @@\n-                errln(\"FAIL: Calendar.clear\/isSet failed\");\n+                fail(\"FAIL: Calendar.clear\/isSet failed\");\n@@ -371,1 +374,1 @@\n-            errln(\"FAIL: getAvailableLocales failed\");\n+            fail(\"FAIL: getAvailableLocales failed\");\n@@ -402,1 +405,1 @@\n-            errln(\"FAIL: new GregorianCalendar(ymdhm) failed\");\n+            fail(\"FAIL: new GregorianCalendar(ymdhm) failed\");\n@@ -408,1 +411,1 @@\n-            errln(\"FAIL: new GregorianCalendar(ymdhms) failed\");\n+            fail(\"FAIL: new GregorianCalendar(ymdhms) failed\");\n@@ -420,0 +423,1 @@\n+    @Test\n@@ -435,1 +439,1 @@\n-                errln(\"FAIL: Date \" + gc.getTime() + \" wrong\");\n+                fail(\"FAIL: Date \" + gc.getTime() + \" wrong\");\n@@ -441,0 +445,1 @@\n+    @Test\n@@ -456,1 +461,1 @@\n-            errln(\"FAIL: Day of week \" + dow + \" out of range\");\n+            fail(\"FAIL: Day of week \" + dow + \" out of range\");\n@@ -459,1 +464,1 @@\n-            errln(\"FAIL2: Day of week should be SUNDAY; is \" + dow + \": \" + cal.getTime());\n+            fail(\"FAIL2: Day of week should be SUNDAY; is \" + dow + \": \" + cal.getTime());\n@@ -462,1 +467,1 @@\n-            errln(\"FAIL: Min\/max bad\");\n+            fail(\"FAIL: Min\/max bad\");\n@@ -468,0 +473,1 @@\n+    @Test\n@@ -475,1 +481,1 @@\n-            errln(\"FAIL: Clones share fields\");\n+            fail(\"FAIL: Clones share fields\");\n@@ -481,0 +487,1 @@\n+    @Test\n@@ -484,3 +491,3 @@\n-        logln(\"With cutoff \" + c.getGregorianChange());\n-        logln(\" isLeapYear(1800) = \" + (b = c.isLeapYear(1800)));\n-        logln(\" (should be FALSE)\");\n+        System.out.println(\"With cutoff \" + c.getGregorianChange());\n+        System.out.println(\" isLeapYear(1800) = \" + (b = c.isLeapYear(1800)));\n+        System.out.println(\" (should be FALSE)\");\n@@ -488,1 +495,1 @@\n-            errln(\"FAIL\");\n+            fail(\"FAIL\");\n@@ -491,3 +498,3 @@\n-        logln(\"With cutoff \" + c.getGregorianChange());\n-        logln(\" isLeapYear(1800) = \" + (b = c.isLeapYear(1800)));\n-        logln(\" (should be TRUE)\");\n+        System.out.println(\"With cutoff \" + c.getGregorianChange());\n+        System.out.println(\" isLeapYear(1800) = \" + (b = c.isLeapYear(1800)));\n+        System.out.println(\" (should be TRUE)\");\n@@ -495,1 +502,1 @@\n-            errln(\"FAIL\");\n+            fail(\"FAIL\");\n@@ -500,0 +507,1 @@\n+    @Test\n@@ -565,1 +573,1 @@\n-                errln(\"FAIL: Exception seen: \" + ex.getMessage());\n+                fail(\"FAIL: Exception seen: \" + ex.getMessage());\n@@ -599,1 +607,1 @@\n-            logln(\"PASS: \" + msg + c.getTime());\n+            System.out.println(\"PASS: \" + msg + c.getTime());\n@@ -601,1 +609,1 @@\n-            errln(\"FAIL: \" + msg + c.getTime()\n+            fail(\"FAIL: \" + msg + c.getTime()\n@@ -610,1 +618,1 @@\n-            errln(\"FAIL: No IllegalArgumentException for \" + msg);\n+            fail(\"FAIL: No IllegalArgumentException for \" + msg);\n@@ -612,1 +620,1 @@\n-            logln(\"PASS: \" + msg + \"IllegalArgument as expected\");\n+            System.out.println(\"PASS: \" + msg + \"IllegalArgument as expected\");\n@@ -617,0 +625,1 @@\n+    @Test\n@@ -620,1 +629,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -648,1 +657,1 @@\n-        logln(\"date = \" + date);\n+        System.out.println(\"date = \" + date);\n@@ -661,1 +670,1 @@\n-        logln(\"offset for \" + date + \"= \" + (offset \/ 1000 \/ 60 \/ 60.0) + \"hr\");\n+        System.out.println(\"offset for \" + date + \"= \" + (offset \/ 1000 \/ 60 \/ 60.0) + \"hr\");\n@@ -671,1 +680,1 @@\n-            errln(\"FAIL: Discrepancy of \"\n+            fail(\"FAIL: Discrepancy of \"\n@@ -679,0 +688,1 @@\n+    @Test\n@@ -702,1 +712,1 @@\n-            logln(\"Pass: \" + s + \" == \" + s2);\n+            System.out.println(\"Pass: \" + s + \" == \" + s2);\n@@ -704,1 +714,1 @@\n-            errln(\"FAIL: \" + s + \" != \" + s2);\n+            fail(\"FAIL: \" + s + \" != \" + s2);\n@@ -709,0 +719,1 @@\n+    @Test\n@@ -740,1 +751,1 @@\n-            errln(\"FAILURE: Expected YEAR\/MONTH\/DATE of \"\n+            fail(\"FAILURE: Expected YEAR\/MONTH\/DATE of \"\n@@ -747,1 +758,1 @@\n-            logln(\"Confirmed: \"\n+            System.out.println(\"Confirmed: \"\n@@ -753,0 +764,1 @@\n+    @Test\n@@ -766,1 +778,1 @@\n-                logln(\"Same\");\n+                System.out.println(\"Same\");\n@@ -768,1 +780,1 @@\n-                logln(\"Different\");\n+                System.out.println(\"Different\");\n@@ -771,1 +783,1 @@\n-            errln(\"Unexpected exception seen: \" + e);\n+            fail(\"Unexpected exception seen: \" + e);\n@@ -776,0 +788,1 @@\n+    @Test\n@@ -803,1 +816,1 @@\n-            errln(\"FAIL: Exception received:\");\n+            fail(\"FAIL: Exception received:\");\n@@ -806,1 +819,1 @@\n-            errln(\"FAIL: Exception received:\");\n+            fail(\"FAIL: Exception received:\");\n@@ -811,1 +824,1 @@\n-            errln(\"Serialization of Calendar object failed.\");\n+            fail(\"Serialization of Calendar object failed.\");\n@@ -819,0 +832,1 @@\n+    @Test\n@@ -828,1 +842,1 @@\n-            errln(\"Expected to see :00 in \" + s);\n+            fail(\"Expected to see :00 in \" + s);\n@@ -833,0 +847,1 @@\n+    @Test\n@@ -843,1 +858,1 @@\n-            logln(\"1A) \" + value(calendar));\n+            System.out.println(\"1A) \" + value(calendar));\n@@ -846,2 +861,2 @@\n-            logln(\"1B) \" + v);\n-            logln(\"--) 1993\/0\/5\");\n+            System.out.println(\"1B) \" + v);\n+            System.out.println(\"--) 1993\/0\/5\");\n@@ -849,1 +864,1 @@\n-                errln(\"Expected \" + EXPECTED_0610\n+                fail(\"Expected \" + EXPECTED_0610\n@@ -861,1 +876,1 @@\n-            logln(\"2A) \" + value(calendar));\n+            System.out.println(\"2A) \" + value(calendar));\n@@ -864,2 +879,2 @@\n-            logln(\"2B) \" + v);\n-            logln(\"--) 1993\/0\/5\");\n+            System.out.println(\"2B) \" + v);\n+            System.out.println(\"--) 1993\/0\/5\");\n@@ -867,1 +882,1 @@\n-                errln(\"Expected \" + EXPECTED_0610\n+                fail(\"Expected \" + EXPECTED_0610\n@@ -880,1 +895,1 @@\n-            logln(\"3A) \" + value(calendar));\n+            System.out.println(\"3A) \" + value(calendar));\n@@ -884,2 +899,2 @@\n-            logln(\"3B) \" + v);\n-            logln(\"--) 1993\/0\/5\");\n+            System.out.println(\"3B) \" + v);\n+            System.out.println(\"--) 1993\/0\/5\");\n@@ -887,1 +902,1 @@\n-                errln(\"Expected \" + EXPECTED_0610\n+                fail(\"Expected \" + EXPECTED_0610\n@@ -900,0 +915,1 @@\n+    @Test\n@@ -911,1 +927,1 @@\n-                errln(\"Expected field \" + field + \" to have value \" + expected\n+                fail(\"Expected field \" + field + \" to have value \" + expected\n@@ -945,0 +961,1 @@\n+    @Test\n@@ -991,1 +1008,1 @@\n-                        errln(\"Wrong value: \" + val\n+                        fail(\"Wrong value: \" + val\n@@ -998,1 +1015,1 @@\n-                    errln(\"Failed: \\n\\tDate=\" + d + \"\\n\\tTimeZone=\" + z\n+                    fail(\"Failed: \\n\\tDate=\" + d + \"\\n\\tTimeZone=\" + z\n@@ -1010,0 +1027,1 @@\n+    @Test\n@@ -1023,1 +1041,1 @@\n-            logln(\"DOW = \" + DOW + \"  \" + cur.getTime());\n+            System.out.println(\"DOW = \" + DOW + \"  \" + cur.getTime());\n@@ -1029,1 +1047,1 @@\n-                errln(\"Day of week should be \" + expectedDOW\n+                fail(\"Day of week should be \" + expectedDOW\n@@ -1036,0 +1054,1 @@\n+    @Test\n@@ -1042,1 +1061,1 @@\n-            errln(\"Actual minimum date for 3\/10\/1967 should have been 1; got \"\n+            fail(\"Actual minimum date for 3\/10\/1967 should have been 1; got \"\n@@ -1046,1 +1065,1 @@\n-            errln(\"Actual maximum date for 3\/10\/1967 should have been 31; got \"\n+            fail(\"Actual maximum date for 3\/10\/1967 should have been 31; got \"\n@@ -1052,1 +1071,1 @@\n-            errln(\"Actual maximum date for 2\/10\/1967 should have been 28; got \"\n+            fail(\"Actual maximum date for 2\/10\/1967 should have been 28; got \"\n@@ -1056,1 +1075,1 @@\n-            errln(\"Number of days in 1967 should have been 365; got \"\n+            fail(\"Number of days in 1967 should have been 365; got \"\n@@ -1062,1 +1081,1 @@\n-            errln(\"Actual maximum date for 2\/10\/1968 should have been 29; got \"\n+            fail(\"Actual maximum date for 2\/10\/1968 should have been 29; got \"\n@@ -1066,1 +1085,1 @@\n-            errln(\"Number of days in 1968 should have been 366; got \"\n+            fail(\"Number of days in 1968 should have been 366; got \"\n@@ -1071,1 +1090,1 @@\n-            errln(\"Number of weeks in 1968 should have been 52; got \"\n+            fail(\"Number of weeks in 1968 should have been 52; got \"\n@@ -1078,1 +1097,1 @@\n-            errln(\"Number of weeks in 1976 should have been 53; got \"\n+            fail(\"Number of weeks in 1976 should have been 53; got \"\n@@ -1083,0 +1102,1 @@\n+    @Test\n@@ -1092,1 +1112,1 @@\n-                errln(\"Rolling the month in 1\/31\/1997 up by \" + i + \" should have yielded \"\n+                fail(\"Rolling the month in 1\/31\/1997 up by \" + i + \" should have yielded \"\n@@ -1108,1 +1128,1 @@\n-                errln(\"Rolling the year in 2\/29\/1996 up by \" + i + \" should have yielded \"\n+                fail(\"Rolling the year in 2\/29\/1996 up by \" + i + \" should have yielded \"\n@@ -1121,1 +1141,1 @@\n-            errln(\"Rolling HOUR_OF_DAY=0 delta=-2 gave \" + f + \" Wanted 22\");\n+            fail(\"Rolling HOUR_OF_DAY=0 delta=-2 gave \" + f + \" Wanted 22\");\n@@ -1126,1 +1146,1 @@\n-            errln(\"Rolling HOUR_OF_DAY=22 delta=5 gave \" + f + \" Wanted 3\");\n+            fail(\"Rolling HOUR_OF_DAY=22 delta=5 gave \" + f + \" Wanted 3\");\n@@ -1131,1 +1151,1 @@\n-            errln(\"Rolling HOUR_OF_DAY=3 delta=21 gave \" + f + \" Wanted 0\");\n+            fail(\"Rolling HOUR_OF_DAY=3 delta=21 gave \" + f + \" Wanted 0\");\n@@ -1139,1 +1159,1 @@\n-            errln(\"Rolling HOUR=0 delta=-2 gave \" + f + \" Wanted 10\");\n+            fail(\"Rolling HOUR=0 delta=-2 gave \" + f + \" Wanted 10\");\n@@ -1144,1 +1164,1 @@\n-            errln(\"Rolling HOUR=10 delta=5 gave \" + f + \" Wanted 3\");\n+            fail(\"Rolling HOUR=10 delta=5 gave \" + f + \" Wanted 3\");\n@@ -1149,1 +1169,1 @@\n-            errln(\"Rolling HOUR=3 delta=9 gave \" + f + \" Wanted 0\");\n+            fail(\"Rolling HOUR=3 delta=9 gave \" + f + \" Wanted 0\");\n@@ -1156,0 +1176,1 @@\n+    @Test\n@@ -1174,1 +1195,1 @@\n-                errln(\"Failed : got \" + cal.getTime() + \", expected Mon Jan 22, 2001\");\n+                fail(\"Failed : got \" + cal.getTime() + \", expected Mon Jan 22, 2001\");\n@@ -1182,0 +1203,1 @@\n+    @Test\n@@ -1194,1 +1216,1 @@\n-            errln(\"Failed : c1.sharedZone == false\");\n+            fail(\"Failed : c1.sharedZone == false\");\n@@ -1198,1 +1220,1 @@\n-                errln(\"Failed : c2.sharedZone == false\");\n+                fail(\"Failed : c2.sharedZone == false\");\n@@ -1200,1 +1222,1 @@\n-                errln(\"Failed : c1.zone != c2.zone\");\n+                fail(\"Failed : c1.zone != c2.zone\");\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarTest.java","additions":132,"deletions":110,"binary":false,"changes":242,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,1 @@\n- * @library \/java\/text\/testlib\n- * @build Koyomi\n- * @run main FieldStateTest\n+ * @run junit\/othervm FieldStateTest\n@@ -39,1 +37,2 @@\n-public class FieldStateTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -41,6 +40,1 @@\n-    public static void main(String[] args) throws Exception {\n-        Locale reservedLocale = Locale.getDefault();\n-        TimeZone reservedTimeZone = TimeZone.getDefault();\n-        try {\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n-            Locale.setDefault(Locale.US);\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -48,6 +42,7 @@\n-            new FieldStateTest().run(args);\n-        } finally {\n-            \/\/ restore the reserved locale and time zone\n-            Locale.setDefault(reservedLocale);\n-            TimeZone.setDefault(reservedTimeZone);\n-        }\n+public class FieldStateTest {\n+\n+    \/\/ Change JVM default Locale and TimeZone\n+    @BeforeAll\n+    static void initAll() {\n+        Locale.setDefault(Locale.US);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n@@ -56,0 +51,2 @@\n+\n+    @Test\n@@ -58,1 +55,1 @@\n-        logln(\"Right after instantialtion:\");\n+        System.out.println(\"Right after instantialtion:\");\n@@ -60,1 +57,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -63,1 +60,1 @@\n-        logln(\"Set date to 2003\/10\/31 after the instantiation:\");\n+        System.out.println(\"Set date to 2003\/10\/31 after the instantiation:\");\n@@ -73,1 +70,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -77,1 +74,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -80,1 +77,1 @@\n-        logln(\"Change to Monday of the week, which is 2003\/10\/27:\");\n+        System.out.println(\"Change to Monday of the week, which is 2003\/10\/27:\");\n@@ -84,1 +81,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -92,1 +89,1 @@\n-        logln(\"Set to 2003\/10\/31 after clear():\");\n+        System.out.println(\"Set to 2003\/10\/31 after clear():\");\n@@ -98,1 +95,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -101,1 +98,1 @@\n-        logln(\"Set to 2003\/10\/31 after clear(), then to the 51st week of year (12\/19):\");\n+        System.out.println(\"Set to 2003\/10\/31 after clear(), then to the 51st week of year (12\/19):\");\n@@ -107,1 +104,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -110,1 +107,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -113,1 +110,1 @@\n-        logln(\"Set to 2003\/10 Mon of 4th week (10\/20: 43rd week of year, 293rd day):\");\n+        System.out.println(\"Set to 2003\/10 Mon of 4th week (10\/20: 43rd week of year, 293rd day):\");\n@@ -121,1 +118,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -124,1 +121,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -127,1 +124,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -130,1 +127,1 @@\n-        logln(\"Set to 2003\/10 Mon of 43rd week of year (10\/20: 4th week of month, 293rd day):\");\n+        System.out.println(\"Set to 2003\/10 Mon of 43rd week of year (10\/20: 4th week of month, 293rd day):\");\n@@ -137,1 +134,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -140,1 +137,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -143,1 +140,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -146,1 +143,1 @@\n-        logln(\"Set day of week to SUNDAY and date to 2003\/10\/31. \"\n+        System.out.println(\"Set day of week to SUNDAY and date to 2003\/10\/31. \"\n@@ -164,1 +161,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -171,0 +168,1 @@\n+    @Test\n@@ -172,1 +170,1 @@\n-        logln(\"Set date to 2003\/9\/26 (Fri). Roll to Aug and back to Sep. \"\n+        System.out.println(\"Set date to 2003\/9\/26 (Fri). Roll to Aug and back to Sep. \"\n@@ -186,1 +184,1 @@\n-            errln(cal2.getMessage());\n+            fail(cal2.getMessage());\n@@ -193,0 +191,1 @@\n+    @Test\n@@ -212,1 +211,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n","filename":"test\/jdk\/java\/util\/Calendar\/FieldStateTest.java","additions":41,"deletions":42,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,1 @@\n- * @library \/java\/text\/testlib\n- * @build Koyomi\n- * @run main GregorianCutoverTest\n+ * @run junit\/othervm GregorianCutoverTest\n@@ -39,1 +37,2 @@\n-public class GregorianCutoverTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -41,6 +40,1 @@\n-    public static void main(String[] args) throws Exception {\n-        TimeZone tz = TimeZone.getDefault();\n-        Locale lc = Locale.getDefault();\n-        try {\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n-            Locale.setDefault(Locale.US);\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -48,5 +42,7 @@\n-            new GregorianCutoverTest().run(args);\n-        } finally {\n-            TimeZone.setDefault(tz);\n-            Locale.setDefault(lc);\n-        }\n+public class GregorianCutoverTest {\n+\n+    \/\/ Change JVM default Locale and TimeZone\n+    @BeforeAll\n+    static void initAll() {\n+        Locale.setDefault(Locale.US);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n@@ -55,0 +51,1 @@\n+\n@@ -58,0 +55,1 @@\n+    @Test\n@@ -103,1 +101,1 @@\n-        logln(\"Default cutover\");\n+        System.out.println(\"Default cutover\");\n@@ -106,1 +104,1 @@\n-        logln(\"  roll --DAY_OF_MONTH from 1582\/10\/01\");\n+        System.out.println(\"  roll --DAY_OF_MONTH from 1582\/10\/01\");\n@@ -109,1 +107,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -111,1 +109,1 @@\n-        logln(\"  roll DAY_OF_MONTH+10 from 1582\/10\/31\");\n+        System.out.println(\"  roll DAY_OF_MONTH+10 from 1582\/10\/31\");\n@@ -114,1 +112,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -116,1 +114,1 @@\n-        logln(\"  roll DAY_OF_MONTH-10 from 1582\/10\/20\");\n+        System.out.println(\"  roll DAY_OF_MONTH-10 from 1582\/10\/20\");\n@@ -119,1 +117,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -121,1 +119,1 @@\n-        logln(\"  roll back one day further\");\n+        System.out.println(\"  roll back one day further\");\n@@ -124,1 +122,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -128,1 +126,1 @@\n-        logln(\"Cutover date is 1970\/1\/5\");\n+        System.out.println(\"Cutover date is 1970\/1\/5\");\n@@ -134,1 +132,1 @@\n-        logln(\"  Set DAY_OF_YEAR to the 28th day of 1970\");\n+        System.out.println(\"  Set DAY_OF_YEAR to the 28th day of 1970\");\n@@ -137,1 +135,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -140,1 +138,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -142,1 +140,1 @@\n-        logln(\"  1969\/12\/22 should be the 356th day of the year.\");\n+        System.out.println(\"  1969\/12\/22 should be the 356th day of the year.\");\n@@ -145,1 +143,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -147,1 +145,1 @@\n-        logln(\"  Set DAY_OF_YEAR to autual maximum.\");\n+        System.out.println(\"  Set DAY_OF_YEAR to autual maximum.\");\n@@ -150,1 +148,1 @@\n-            errln(\"actual maximum of DAY_OF_YEAR: got \" + actualMaxDayOfYear + \", expected 356\");\n+            fail(\"actual maximum of DAY_OF_YEAR: got \" + actualMaxDayOfYear + \", expected 356\");\n@@ -154,1 +152,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -158,1 +156,1 @@\n-        logln(\"  Set to 1969\/12\/22 and roll DAY_OF_YEAR++\");\n+        System.out.println(\"  Set to 1969\/12\/22 and roll DAY_OF_YEAR++\");\n@@ -160,1 +158,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -162,1 +160,1 @@\n-        logln(\"  1970\/1\/5 should be the first day of the year.\");\n+        System.out.println(\"  1970\/1\/5 should be the first day of the year.\");\n@@ -165,1 +163,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -167,1 +165,1 @@\n-        logln(\"  roll --DAY_OF_MONTH from 1970\/1\/5\");\n+        System.out.println(\"  roll --DAY_OF_MONTH from 1970\/1\/5\");\n@@ -170,1 +168,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -172,1 +170,1 @@\n-        logln(\"  roll back one day of month\");\n+        System.out.println(\"  roll back one day of month\");\n@@ -175,1 +173,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -183,1 +181,1 @@\n-            logln(\"1582\/10\/10 doesn't exit with the default cutover.\");\n+            System.out.println(\"1582\/10\/10 doesn't exit with the default cutover.\");\n@@ -186,1 +184,1 @@\n-            errln(\"    Didn't throw IllegalArgumentException in non-lenient.\");\n+            fail(\"    Didn't throw IllegalArgumentException in non-lenient.\");\n@@ -193,1 +191,1 @@\n-        logln(Koyomi.getFieldName(field) + \" starting on \" + cal.toDateString());\n+        System.out.println(Koyomi.getFieldName(field) + \" starting on \" + cal.toDateString());\n@@ -196,1 +194,1 @@\n-            logln(i + \"    \" + cal.toDateString());\n+            System.out.println(i + \"    \" + cal.toDateString());\n@@ -198,1 +196,1 @@\n-                errln(\"    \" + cal.toDateString() + \":\\t\" + cal.getMessage());\n+                fail(\"    \" + cal.toDateString() + \":\\t\" + cal.getMessage());\n@@ -207,0 +205,1 @@\n+    @Test\n@@ -209,1 +208,1 @@\n-        logln(\"Today is 2003\/10\/1 Gregorian.\");\n+        System.out.println(\"Today is 2003\/10\/1 Gregorian.\");\n@@ -214,1 +213,1 @@\n-        logln(\"  Changing the cutover date to yesterday...\");\n+        System.out.println(\"  Changing the cutover date to yesterday...\");\n@@ -217,1 +216,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -219,1 +218,1 @@\n-        logln(\"  Changing the cutover date to tomorrow...\");\n+        System.out.println(\"  Changing the cutover date to tomorrow...\");\n@@ -222,1 +221,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -229,0 +228,1 @@\n+    @Test\n@@ -232,1 +232,1 @@\n-        logln(\"getLeastMaximum should handle cutover year.\\n\"\n+        System.out.println(\"getLeastMaximum should handle cutover year.\\n\"\n@@ -235,1 +235,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -238,1 +238,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -242,1 +242,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -245,1 +245,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -248,1 +248,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -252,1 +252,1 @@\n-            errln(\"    getLeastMaximum calls modified the object.\");\n+            fail(\"    getLeastMaximum calls modified the object.\");\n@@ -255,1 +255,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -258,1 +258,1 @@\n-        logln(\"  changing the date to 1582\/10\/20 for actual min\/max tests\");\n+        System.out.println(\"  changing the date to 1582\/10\/20 for actual min\/max tests\");\n@@ -261,1 +261,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -264,1 +264,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -268,1 +268,1 @@\n-        logln(\"Change the cutover date to 1970\/1\/5.\");\n+        System.out.println(\"Change the cutover date to 1970\/1\/5.\");\n@@ -273,1 +273,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -276,1 +276,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -279,1 +279,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -283,1 +283,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -286,1 +286,1 @@\n-            errln(\"    \" + cal.getMessage());\n+            fail(\"    \" + cal.getMessage());\n@@ -293,0 +293,1 @@\n+    @Test\n@@ -300,1 +301,1 @@\n-            errln(\"test case 1: \" + gc1.getMessage());\n+            fail(\"test case 1: \" + gc1.getMessage());\n@@ -306,1 +307,1 @@\n-            errln(\"test case 2: \" + gc1.getMessage());\n+            fail(\"test case 2: \" + gc1.getMessage());\n@@ -313,0 +314,1 @@\n+    @Test\n@@ -322,1 +324,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n@@ -328,1 +330,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n","filename":"test\/jdk\/java\/util\/Calendar\/GregorianCutoverTest.java","additions":75,"deletions":73,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/java\/text\/testlib\n+ * @run junit JulianTest\n@@ -33,1 +33,1 @@\n-public class JulianTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -35,3 +35,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new JulianTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class JulianTest {\n@@ -42,0 +42,1 @@\n+    @Test\n@@ -49,1 +50,1 @@\n-            errln(cal.getMessage());\n+            fail(cal.getMessage());\n","filename":"test\/jdk\/java\/util\/Calendar\/JulianTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/java\/text\/testlib\n+ * @run junit\/othervm NonLenientTest\n@@ -38,1 +38,2 @@\n-public class NonLenientTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -40,12 +41,9 @@\n-    public static void main(String[] args) throws Exception {\n-        Locale reservedLocale = Locale.getDefault();\n-        TimeZone reservedTimeZone = TimeZone.getDefault();\n-        try {\n-            Locale.setDefault(Locale.US);\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n-            new NonLenientTest().run(args);\n-        } finally {\n-            \/\/ restore the reserved locale and time zone\n-            Locale.setDefault(reservedLocale);\n-            TimeZone.setDefault(reservedTimeZone);\n-        }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class NonLenientTest {\n+\n+    \/\/ Change JVM default Locale and TimeZone\n+    @BeforeAll\n+    static void initAll() {\n+        Locale.setDefault(Locale.US);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -54,0 +52,2 @@\n+\n+    @Test\n@@ -125,0 +125,1 @@\n+    @Test\n@@ -138,0 +139,1 @@\n+    @Test\n@@ -149,0 +151,1 @@\n+    @Test\n@@ -160,1 +163,1 @@\n-                errln(\"Test failed with field \" + Koyomi.getFieldName(field)\n+                fail(\"Test failed with field \" + Koyomi.getFieldName(field)\n@@ -175,1 +178,1 @@\n-                errln(\"Test failed with field \" + Koyomi.getFieldName(field)\n+                fail(\"Test failed with field \" + Koyomi.getFieldName(field)\n@@ -190,1 +193,1 @@\n-            errln(desc + \" should throw IllegalArgumentException in non-lenient.\");\n+            fail(desc + \" should throw IllegalArgumentException in non-lenient.\");\n@@ -201,1 +204,1 @@\n-                errln(\"    complete() modified fields[\" + Koyomi.getFieldName(i) + \"] got \"\n+                fail(\"    complete() modified fields[\" + Koyomi.getFieldName(i) + \"] got \"\n@@ -208,1 +211,1 @@\n-            errln(\"    complate() modified set states: before 0x\" + toHex(setFields)\n+            fail(\"    complate() modified set states: before 0x\" + toHex(setFields)\n","filename":"test\/jdk\/java\/util\/Calendar\/NonLenientTest.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -27,2 +27,3 @@\n- * @summary confirm that Calendar.setTimeInMillis() and getTimeInMillis()\n- *          can be called from a user program. They used to be protected methods.\n+ * @summary confirm that Calendar.setTimeInMillis() and\n+ *          getTimeInMillis() can be called from a user program. (They used to\n+ *          be protected methods.)\n@@ -38,1 +39,0 @@\n-\n@@ -45,0 +45,1 @@\n+    \/\/ Save JVM default Locale and TimeZone\n@@ -48,1 +49,1 @@\n-    \/\/ Save JVM default Locale and TimeZone\n+    \/\/ Set custom JVM default Locale and TimeZone\n@@ -71,1 +72,0 @@\n-\n@@ -74,1 +74,0 @@\n-\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4243802.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+\n+    \/\/ Save JVM default TimeZone\n@@ -51,1 +53,1 @@\n-    \/\/ Save JVM default Locale and TimeZone\n+    \/\/ Set custom JVM default TimeZone\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4316678.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+    \/\/ Save JVM default timezone\n@@ -66,1 +67,1 @@\n-    \/\/ Save JVM default Locale and TimeZone\n+    \/\/ Set custom JVM default timezone\n@@ -72,1 +73,1 @@\n-    \/\/ Restore JVM default Locale and TimeZone\n+    \/\/ Restore JVM default timezone\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4372743.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main bug4409072\n+ * @run junit bug4409072\n@@ -35,1 +35,1 @@\n-public class bug4409072 extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -37,3 +37,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new bug4409072().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class bug4409072 {\n@@ -44,0 +44,1 @@\n+    @Test\n@@ -47,1 +48,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -414,1 +415,1 @@\n-                    errln(\"Failed : set(WEEK_OF_YEAR=22)\" +\n+                    fail(\"Failed : set(WEEK_OF_YEAR=22)\" +\n@@ -423,1 +424,1 @@\n-                    errln(\"Failed : set(WEEK_OF_YEAR=22)\" +\n+                    fail(\"Failed : set(WEEK_OF_YEAR=22)\" +\n@@ -449,1 +450,1 @@\n-                        errln(\"Failed : set(WEEK_OF_MONTH=1)\" +\n+                        fail(\"Failed : set(WEEK_OF_MONTH=1)\" +\n@@ -473,1 +474,1 @@\n-                        errln(\"Failed : set(WEEK_OF_YEAR=1)\" +\n+                        fail(\"Failed : set(WEEK_OF_YEAR=1)\" +\n@@ -482,1 +483,1 @@\n-                        errln(\"Failed : set(WEEK_OF_YEAR=1)\" +\n+                        fail(\"Failed : set(WEEK_OF_YEAR=1)\" +\n@@ -493,1 +494,1 @@\n-            logln(\"Passed : set() test\");\n+            System.out.println(\"Passed : set() test\");\n@@ -528,1 +529,1 @@\n-                    errln(\"Failed : add(WEEK_OF_YEAR+1)\" +\n+                    fail(\"Failed : add(WEEK_OF_YEAR+1)\" +\n@@ -545,1 +546,1 @@\n-                    errln(\"Failed : add(WEEK_OF_YEAR-1)\" +\n+                    fail(\"Failed : add(WEEK_OF_YEAR-1)\" +\n@@ -553,1 +554,1 @@\n-                    errln(\"Failed : add(-1)\" +\n+                    fail(\"Failed : add(-1)\" +\n@@ -563,1 +564,1 @@\n-            logln(\"Passed : add() test\");\n+            System.out.println(\"Passed : add() test\");\n@@ -625,1 +626,1 @@\n-                    errln(\"Failed : roll(WEEK_OF_MONTH-1)\" +\n+                    fail(\"Failed : roll(WEEK_OF_MONTH-1)\" +\n@@ -652,1 +653,1 @@\n-                    errln(\"Failed : roll(WEEK_OF_YEAR+1)\" +\n+                    fail(\"Failed : roll(WEEK_OF_YEAR+1)\" +\n@@ -673,1 +674,1 @@\n-                    errln(\"Failed : roll(WEEK_OF_YEAR-1)\" +\n+                    fail(\"Failed : roll(WEEK_OF_YEAR-1)\" +\n@@ -683,1 +684,1 @@\n-            logln(\"Passed : roll() test\");\n+            System.out.println(\"Passed : roll() test\");\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4409072.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/java\/text\/testlib\n+ * @run junit DateRegression\n@@ -32,2 +32,1 @@\n-@SuppressWarnings(\"deprecation\")\n-public class DateRegression extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -35,3 +34,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new DateRegression().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@SuppressWarnings(\"deprecation\")\n+public class DateRegression {\n@@ -42,0 +42,1 @@\n+    @Test\n@@ -61,1 +62,1 @@\n-            errln(\"Fail: Date hashCode misbehaves\");\n+            fail(\"Fail: Date hashCode misbehaves\");\n@@ -67,0 +68,1 @@\n+    @Test\n@@ -73,1 +75,1 @@\n-        logln(\"Midnight = \" + nite + \", Noon = \" + noon);\n+        System.out.println(\"Midnight = \" + nite + \", Noon = \" + noon);\n@@ -76,1 +78,1 @@\n-            errln(\"Fail: Nite\/Noon confused\");\n+            fail(\"Fail: Nite\/Noon confused\");\n@@ -82,0 +84,1 @@\n+    @Test\n@@ -85,2 +88,2 @@\n-        logln(\"Date.parse(2\/10\/97) => \" + d);\n-        if (!d.equals(ref)) errln(\"Fail: Want \" + ref + \" Got \" + d);\n+        System.out.println(\"Date.parse(2\/10\/97) => \" + d);\n+        if (!d.equals(ref)) fail(\"Fail: Want \" + ref + \" Got \" + d);\n@@ -88,2 +91,2 @@\n-        logln(\"Date.parse(10 feb 1997) => \" + d);\n-        if (!d.equals(ref)) errln(\"Fail: Want \" + ref + \" Got \" + d);\n+        System.out.println(\"Date.parse(10 feb 1997) => \" + d);\n+        if (!d.equals(ref)) fail(\"Fail: Want \" + ref + \" Got \" + d);\n@@ -91,2 +94,2 @@\n-        logln(\"Date(2\/10\/97) => \" + d);\n-        if (!d.equals(ref)) errln(\"Fail: Want \" + ref + \" Got \" + d);\n+        System.out.println(\"Date(2\/10\/97) => \" + d);\n+        if (!d.equals(ref)) fail(\"Fail: Want \" + ref + \" Got \" + d);\n@@ -94,2 +97,2 @@\n-        logln(\"Date(10 feb 1997) => \" + d);\n-        if (!d.equals(ref)) errln(\"Fail: Want \" + ref + \" Got \" + d);\n+        System.out.println(\"Date(10 feb 1997) => \" + d);\n+        if (!d.equals(ref)) fail(\"Fail: Want \" + ref + \" Got \" + d);\n@@ -101,0 +104,1 @@\n+    @Test\n@@ -113,1 +117,1 @@\n-                errln(\"Fail: Roundtrip toString\/parse\");\n+                fail(\"Fail: Roundtrip toString\/parse\");\n@@ -124,0 +128,1 @@\n+    @Test\n@@ -127,1 +132,1 @@\n-            errln(\"Fail: Want 1\/2\/1984 Got \" + d);\n+            fail(\"Fail: Want 1\/2\/1984 Got \" + d);\n@@ -130,1 +135,1 @@\n-            errln(\"Fail: Want 2\/3\/2012 Got \" + d);\n+            fail(\"Fail: Want 2\/3\/2012 Got \" + d);\n@@ -133,1 +138,1 @@\n-            errln(\"Fail: Want 3\/4\/2015 Got \" + d);\n+            fail(\"Fail: Want 3\/4\/2015 Got \" + d);\n@@ -143,0 +148,1 @@\n+    @Test\n@@ -149,1 +155,1 @@\n-            errln(\"Fail: Want Feb 29, got \" + d);\n+            fail(\"Fail: Want Feb 29, got \" + d);\n@@ -156,0 +162,1 @@\n+    @Test\n@@ -162,1 +169,1 @@\n-            errln(\"Cloned Date objects share state\");\n+            fail(\"Cloned Date objects share state\");\n@@ -171,0 +178,1 @@\n+    @Test\n@@ -175,1 +183,1 @@\n-            errln(\"Fail: Want \" + exp +\n+            fail(\"Fail: Want \" + exp +\n@@ -184,0 +192,1 @@\n+    @Test\n@@ -186,1 +195,1 @@\n-        logln(time.toString());\n+        System.out.println(time.toString());\n@@ -193,0 +202,1 @@\n+    @Test\n@@ -202,3 +212,3 @@\n-            logln(\"JDK time: \" + jdkCal.getTime().getTime() );\n-            logln(\"JDK time (str): \" + jdkCal.getTime() );\n-            logln(\"Day of month: \" + jdkCal.get(Calendar.DAY_OF_MONTH));\n+            System.out.println(\"JDK time: \" + jdkCal.getTime().getTime() );\n+            System.out.println(\"JDK time (str): \" + jdkCal.getTime() );\n+            System.out.println(\"Day of month: \" + jdkCal.get(Calendar.DAY_OF_MONTH));\n@@ -206,1 +216,1 @@\n-            logln(\"Change over (Oct 15 1582) = \" + co + \" (\" +\n+            System.out.println(\"Change over (Oct 15 1582) = \" + co + \" (\" +\n@@ -214,1 +224,1 @@\n-                errln(\"ERROR: \" + a + \" != \" + b);\n+                fail(\"ERROR: \" + a + \" != \" + b);\n@@ -216,1 +226,1 @@\n-                logln(a + \" = \" + b);\n+                System.out.println(a + \" = \" + b);\n@@ -227,0 +237,1 @@\n+    @Test\n@@ -231,1 +242,1 @@\n-            errln(\"yesr: got \" + y + \", expected 292277094\");\n+            fail(\"yesr: got \" + y + \", expected 292277094\");\n@@ -236,1 +247,1 @@\n-            errln(\"yesr: got \" + y + \", expected 292267155\");\n+            fail(\"yesr: got \" + y + \", expected 292267155\");\n","filename":"test\/jdk\/java\/util\/Date\/DateRegression.java","additions":45,"deletions":34,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/java\/text\/testlib\n+ * @run junit DateTest\n@@ -34,0 +34,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -35,1 +39,1 @@\n-public class DateTest extends IntlTest\n+public class DateTest\n@@ -37,4 +41,0 @@\n-    public static void main(String[] args) throws Exception {\n-        new DateTest().run(args);\n-    }\n-\n@@ -45,0 +45,1 @@\n+    @Test\n@@ -60,1 +61,1 @@\n-                errln(\"Fail: Date.setHours()\/getHours() ignoring default zone\");\n+                fail(\"Fail: Date.setHours()\/getHours() ignoring default zone\");\n@@ -69,0 +70,1 @@\n+    @Test\n@@ -90,1 +92,1 @@\n-                logln(pass == 0 ? \"Normal Date object\" : \"Date with Calendar sub-object\");\n+                System.out.println(pass == 0 ? \"Normal Date object\" : \"Date with Calendar sub-object\");\n@@ -99,1 +101,1 @@\n-                    errln(\"FAIL: new Date(\\\"\" + refstr + \"\\\") x GMT -> \" + d +\n+                    fail(\"FAIL: new Date(\\\"\" + refstr + \"\\\") x GMT -> \" + d +\n@@ -107,1 +109,1 @@\n-                        errln(\"FAIL: GMT Expected \" + names[i] + \" of \" + GMT_EXP[i] +\n+                        fail(\"FAIL: GMT Expected \" + names[i] + \" of \" + GMT_EXP[i] +\n@@ -117,1 +119,1 @@\n-                        errln(\"FAIL: PST Expected \" + names[i] + \" of \" + PST_EXP[i] +\n+                        fail(\"FAIL: PST Expected \" + names[i] + \" of \" + PST_EXP[i] +\n@@ -129,0 +131,1 @@\n+    @Test\n@@ -143,1 +146,1 @@\n-        logln(REPS + \" iterations at \" + perLoop + \" ms\/loop\");\n+        System.out.println(REPS + \" iterations at \" + perLoop + \" ms\/loop\");\n@@ -145,1 +148,1 @@\n-            logln(\"WARNING: Date constructor\/getYear slower than \" +\n+            System.out.println(\"WARNING: Date constructor\/getYear slower than \" +\n@@ -153,0 +156,1 @@\n+    @Test\n@@ -167,1 +171,1 @@\n-            errln( \"Expected: \" +\n+            fail( \"Expected: \" +\n@@ -181,0 +185,1 @@\n+    @Test\n@@ -184,1 +189,1 @@\n-        logln(d1.toString());\n+        System.out.println(d1.toString());\n@@ -186,1 +191,1 @@\n-        logln(d1.toString());\n+        System.out.println(d1.toString());\n@@ -190,1 +195,1 @@\n-            logln(d1.toString());\n+            System.out.println(d1.toString());\n@@ -195,2 +200,2 @@\n-        if (e) errln(\"FAIL: Saw exception for year -800000\");\n-        else logln(\"Pass: No exception for year -800000\");\n+        if (e) fail(\"FAIL: Saw exception for year -800000\");\n+        else System.out.println(\"Pass: No exception for year -800000\");\n@@ -200,0 +205,1 @@\n+    @Test\n@@ -206,1 +212,1 @@\n-        logln(\"d       = \"+d1);\n+        System.out.println(\"d       = \"+d1);\n@@ -208,1 +214,1 @@\n-        logln(\"d+20h   = \"+d2);\n+        System.out.println(\"d+20h   = \"+d2);\n@@ -212,1 +218,1 @@\n-        logln(\"delta   = \" + delta + \"h\");\n+        System.out.println(\"delta   = \" + delta + \"h\");\n@@ -214,1 +220,1 @@\n-        if (delta != 20.0) errln(\"Expected delta of 20; got \" + delta);\n+        if (delta != 20.0) fail(\"Expected delta of 20; got \" + delta);\n@@ -220,1 +226,1 @@\n-        logln(\"d       = \"+t1);\n+        System.out.println(\"d       = \"+t1);\n@@ -224,1 +230,1 @@\n-        logln(\"d+20h   = \"+t2);\n+        System.out.println(\"d+20h   = \"+t2);\n@@ -228,1 +234,1 @@\n-        logln(\"delta   = \" + delta2 + \"h\");\n+        System.out.println(\"delta   = \" + delta2 + \"h\");\n@@ -230,1 +236,1 @@\n-        if (delta != 20.0) errln(\"Expected delta of 20; got \" + delta2);\n+        if (delta != 20.0) fail(\"Expected delta of 20; got \" + delta2);\n","filename":"test\/jdk\/java\/util\/Date\/DateTest.java","additions":34,"deletions":28,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/java\/text\/testlib\n+ * @run junit TimestampTest\n@@ -35,1 +35,1 @@\n-public class TimestampTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -37,3 +37,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new TimestampTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class TimestampTest {\n@@ -46,0 +46,1 @@\n+    @Test\n@@ -91,1 +92,1 @@\n-            errln(\"ts1.after(ts2) returned \" + result\n+            fail(\"ts1.after(ts2) returned \" + result\n@@ -98,1 +99,1 @@\n-            errln(\"ts1.before(ts2) returned \" + result\n+            fail(\"ts1.before(ts2) returned \" + result\n@@ -105,1 +106,1 @@\n-            errln(\"ts1.equals(ts2) returned \" + result\n+            fail(\"ts1.equals(ts2) returned \" + result\n@@ -112,1 +113,1 @@\n-            errln(\"ts1.compareTo(ts2) returned \" + x + \", expected \"\n+            fail(\"ts1.compareTo(ts2) returned \" + x + \", expected \"\n@@ -125,1 +126,1 @@\n-            errln(\"ts1.getTime() \" + relation(z, \"==\") + \" ts2.getTime(), expected \"\n+            fail(\"ts1.getTime() \" + relation(z, \"==\") + \" ts2.getTime(), expected \"\n","filename":"test\/jdk\/java\/util\/Date\/TimestampTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -23,0 +23,1 @@\n+\n@@ -24,6 +25,6 @@\n-    @test\n-    @bug 4184873\n-    @summary test that locale invariants are preserved across serialization\n-    @library \/java\/text\/testlib\n-    @run main LegacyCodesClassInvariant\n-*\/\n+ * @test\n+ * @bug 4184873\n+ * @summary test that locale invariants are preserved across serialization.\n+ * @run junit LegacyCodesClassInvariant\n+ *\/\n+\n@@ -66,1 +67,0 @@\n-import java.io.FileOutputStream;\n@@ -68,1 +68,0 @@\n-import java.io.ObjectOutputStream;\n@@ -71,0 +70,5 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -74,9 +78,2 @@\n-public class LegacyCodesClassInvariant extends IntlTest {\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 1 && args[0].equals(\"prepTest\")) {\n-            prepTest();\n-        } else {\n-            new LegacyCodesClassInvariant().run(args);\n-        }\n-    }\n-\n+public class LegacyCodesClassInvariant {\n+    @Test\n@@ -95,7 +92,2 @@\n-                if (!(expected.equals(loc))) {\n-                    errln(\"Locale didn't maintain invariants for: \"+lang);\n-                    errln(\"         got: \"+loc);\n-                    errln(\"    excpeted: \"+expected);\n-                } else {\n-                    logln(\"Locale \"+lang+\" worked\");\n-                }\n+                assertEquals(expected, loc,\n+                        \"Locale didn't maintain invariants for: \"+lang);\n@@ -105,1 +97,1 @@\n-            errln(e.toString());\n+            fail(e.toString());\n@@ -114,1 +106,1 @@\n-            errln(e.toString());\n+            fail(e.toString());\n@@ -118,22 +110,0 @@\n-\n-    \/**\n-     * Create serialized output files of the test locales.  After they are created, these test\n-     * files should be corrupted (by hand) to contain invalid locale name values.\n-     *\/\n-    private static void prepTest() {\n-        outputLocale(\"he\");\n-        outputLocale(\"yi\");\n-        outputLocale(\"id\");\n-    }\n-\n-    private static void outputLocale(String lang) {\n-        try {\n-            ObjectOutputStream out = new ObjectOutputStream(\n-                    new FileOutputStream(\"LegacyCodesClassInvariant_\"+lang));\n-            out.writeObject(Locale.of(lang, \"XX\"));\n-            out.close();\n-        } catch (Exception e) {\n-            System.out.println(e);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/Locale\/LegacyCodesClassInvariant.java","additions":18,"deletions":48,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -49,1 +53,0 @@\n- * @library \/java\/text\/testlib\n@@ -52,1 +55,1 @@\n- * @run main\/othervm -Djava.locale.providers=JRE,SPI -esa LocaleEnhanceTest\n+ * @run junit\/othervm -Djava.locale.providers=JRE,SPI -esa LocaleEnhanceTest\n@@ -54,8 +57,1 @@\n-public class LocaleEnhanceTest extends IntlTest {\n-\n-    public static void main(String[] args) throws Exception {\n-        List<String> argList = new ArrayList<String>();\n-        argList.addAll(Arrays.asList(args));\n-        argList.add(\"-nothrow\");\n-        new LocaleEnhanceTest().run(argList.toArray(new String[argList.size()]));\n-    }\n+public class LocaleEnhanceTest {\n@@ -86,0 +82,1 @@\n+    @Test\n@@ -134,1 +131,1 @@\n-                errln(msg + e.getMessage());\n+                fail(msg + e.getMessage());\n@@ -149,0 +146,1 @@\n+    @Test\n@@ -191,1 +189,1 @@\n-                errln(msg + e.getMessage());\n+                fail(msg + e.getMessage());\n@@ -200,0 +198,1 @@\n+    @Test\n@@ -243,0 +242,1 @@\n+    @Test\n@@ -269,0 +269,1 @@\n+    @Test\n@@ -285,0 +286,1 @@\n+    @Test\n@@ -323,0 +325,1 @@\n+    @Test\n@@ -337,0 +340,1 @@\n+    @Test\n@@ -357,0 +361,1 @@\n+    @Test\n@@ -366,1 +371,1 @@\n-            errln(\"expected exception on add to extension key set\");\n+            fail(\"expected exception on add to extension key set\");\n@@ -377,0 +382,1 @@\n+    @Test\n@@ -389,0 +395,1 @@\n+    @Test\n@@ -416,0 +423,1 @@\n+    @Test\n@@ -425,1 +433,1 @@\n-            errln(\"expected exception when add to locale key set\");\n+            fail(\"expected exception when add to locale key set\");\n@@ -432,0 +440,1 @@\n+    @Test\n@@ -440,0 +449,1 @@\n+    @Test\n@@ -505,0 +515,1 @@\n+    @Test\n@@ -592,1 +603,1 @@\n-                errln(msg + \" caught exception: \" + e);\n+                fail(msg + \" caught exception: \" + e);\n@@ -610,0 +621,1 @@\n+    @Test\n@@ -627,0 +639,1 @@\n+    @Test\n@@ -638,0 +651,1 @@\n+    @Test\n@@ -691,0 +705,1 @@\n+    @Test\n@@ -733,0 +748,1 @@\n+    @Test\n@@ -750,0 +766,1 @@\n+    @Test\n@@ -795,0 +812,1 @@\n+    @Test\n@@ -831,0 +849,1 @@\n+    @Test\n@@ -868,0 +887,1 @@\n+    @Test\n@@ -920,0 +940,1 @@\n+    @Test\n@@ -1010,0 +1031,1 @@\n+    @Test\n@@ -1041,0 +1063,1 @@\n+    @Test\n@@ -1084,0 +1107,1 @@\n+    @Test\n@@ -1099,0 +1123,1 @@\n+    @Test\n@@ -1111,0 +1136,1 @@\n+    @Test\n@@ -1115,0 +1141,1 @@\n+    @Test\n@@ -1119,0 +1146,1 @@\n+    @Test\n@@ -1164,1 +1192,1 @@\n-                errln(locale + \" encountered exception:\" + e.getLocalizedMessage());\n+                fail(locale + \" encountered exception:\" + e.getLocalizedMessage());\n@@ -1169,0 +1197,1 @@\n+    @Test\n@@ -1187,1 +1216,1 @@\n-            errln(\"'dataDir' is null. serialized.data.dir Property value is \"+dataDirName);\n+            fail(\"'dataDir' is null. serialized.data.dir Property value is \"+dataDirName);\n@@ -1190,1 +1219,1 @@\n-            errln(\"'dataDir' is not a directory. dataDir: \"+dataDir.toString());\n+            fail(\"'dataDir' is not a directory. dataDir: \"+dataDir.toString());\n@@ -1222,1 +1251,1 @@\n-                errln(\"Exception while reading \" + testfile.getAbsolutePath() + \" - \" + e.getMessage());\n+                fail(\"Exception while reading \" + testfile.getAbsolutePath() + \" - \" + e.getMessage());\n@@ -1227,0 +1256,1 @@\n+    @Test\n@@ -1270,0 +1300,1 @@\n+    @Test\n@@ -1289,0 +1320,1 @@\n+    @Test\n@@ -1321,1 +1353,1 @@\n-            errln(msg + \": expected true\");\n+            fail(msg + \": expected true\");\n@@ -1327,1 +1359,1 @@\n-            errln(msg + \": expected false\");\n+            fail(msg + \": expected false\");\n@@ -1339,1 +1371,1 @@\n-            errln(msg + \": expected \" + e + \" but got \" + v);\n+            fail(msg + \": expected \" + e + \" but got \" + v);\n@@ -1348,1 +1380,1 @@\n-            errln(msg + \": expected not equal \" + e);\n+            fail(msg + \": expected not equal \" + e);\n@@ -1354,1 +1386,1 @@\n-            errln(msg + \": expected null but got '\" + o + \"'\");\n+            fail(msg + \": expected null but got '\" + o + \"'\");\n@@ -1360,1 +1392,1 @@\n-            errln(msg + \": expected non null\");\n+            fail(msg + \": expected non null\");\n@@ -1386,1 +1418,1 @@\n-                errln(msg + failMsg);\n+                fail(msg + failMsg);\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleEnhanceTest.java","additions":59,"deletions":27,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @library \/java\/text\/testlib\n@@ -32,2 +31,2 @@\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI LocaleTest\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI -Djava.locale.useOldISOCodes=true LocaleTest\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI LocaleTest\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI -Djava.locale.useOldISOCodes=true LocaleTest\n@@ -89,1 +88,5 @@\n-public class LocaleTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class LocaleTest {\n@@ -194,4 +197,1 @@\n-    public static void main(String[] args) throws Exception {\n-        new LocaleTest().run(args);\n-    }\n-\n+    @Test\n@@ -201,1 +201,1 @@\n-            logln(\"Testing \" + testLocale + \"...\");\n+            System.out.println(\"Testing \" + testLocale + \"...\");\n@@ -204,1 +204,1 @@\n-                errln(\"  Language code mismatch: \" + testLocale.getLanguage() + \" versus \"\n+                fail(\"  Language code mismatch: \" + testLocale.getLanguage() + \" versus \"\n@@ -208,1 +208,1 @@\n-                errln(\"  Country code mismatch: \" + testLocale.getCountry() + \" versus \"\n+                fail(\"  Country code mismatch: \" + testLocale.getCountry() + \" versus \"\n@@ -212,1 +212,1 @@\n-                errln(\"  Variant code mismatch: \" + testLocale.getVariant() + \" versus \"\n+                fail(\"  Variant code mismatch: \" + testLocale.getVariant() + \" versus \"\n@@ -216,1 +216,1 @@\n-                errln(\"  Locale name mismatch: \" + testLocale.toString() + \" versus \"\n+                fail(\"  Locale name mismatch: \" + testLocale.toString() + \" versus \"\n@@ -221,1 +221,1 @@\n-        logln(\"Same thing without variant codes...\");\n+        System.out.println(\"Same thing without variant codes...\");\n@@ -224,1 +224,1 @@\n-            logln(\"Testing \" + testLocale + \"...\");\n+            System.out.println(\"Testing \" + testLocale + \"...\");\n@@ -227,1 +227,1 @@\n-                errln(\"  Language code mismatch: \" + testLocale.getLanguage() + \" versus \"\n+                fail(\"  Language code mismatch: \" + testLocale.getLanguage() + \" versus \"\n@@ -231,1 +231,1 @@\n-                errln(\"  Country code mismatch: \" + testLocale.getCountry() + \" versus \"\n+                fail(\"  Country code mismatch: \" + testLocale.getCountry() + \" versus \"\n@@ -235,1 +235,1 @@\n-                errln(\"  Variant code mismatch: \" + testLocale.getVariant() + \" versus \\\"\\\"\");\n+                fail(\"  Variant code mismatch: \" + testLocale.getVariant() + \" versus \\\"\\\"\");\n@@ -240,0 +240,1 @@\n+    @Test\n@@ -247,1 +248,1 @@\n-            logln(\"Testing \" + testLocale + \"...\");\n+            System.out.println(\"Testing \" + testLocale + \"...\");\n@@ -250,1 +251,1 @@\n-                errln(\"  ISO-3 language code mismatch: \" + testLocale.getISO3Language()\n+                fail(\"  ISO-3 language code mismatch: \" + testLocale.getISO3Language()\n@@ -254,1 +255,1 @@\n-                errln(\"  ISO-3 country code mismatch: \" + testLocale.getISO3Country()\n+                fail(\"  ISO-3 country code mismatch: \" + testLocale.getISO3Country()\n@@ -260,1 +261,1 @@\n-                errln(\"  LCID mismatch: \" + testLocale.getLCID() + \" versus \"\n+                fail(\"  LCID mismatch: \" + testLocale.getLCID() + \" versus \"\n@@ -272,0 +273,1 @@\n+    @Test\n@@ -280,2 +282,2 @@\n-        logln(\"With default = en_US...\");\n-        logln(\"  In default locale...\");\n+        System.out.println(\"With default = en_US...\");\n+        System.out.println(\"  In default locale...\");\n@@ -283,1 +285,1 @@\n-        logln(\"  In locale = en_US...\");\n+        System.out.println(\"  In locale = en_US...\");\n@@ -285,1 +287,1 @@\n-        logln(\"  In locale = fr_FR...\");\n+        System.out.println(\"  In locale = fr_FR...\");\n@@ -287,1 +289,1 @@\n-        logln(\"  In locale = hr_HR...\");\n+        System.out.println(\"  In locale = hr_HR...\");\n@@ -289,1 +291,1 @@\n-        logln(\"  In locale = el_GR...\");\n+        System.out.println(\"  In locale = el_GR...\");\n@@ -293,2 +295,2 @@\n-        logln(\"With default = fr_FR...\");\n-        logln(\"  In default locale...\");\n+        System.out.println(\"With default = fr_FR...\");\n+        System.out.println(\"  In default locale...\");\n@@ -296,1 +298,1 @@\n-        logln(\"  In locale = en_US...\");\n+        System.out.println(\"  In locale = en_US...\");\n@@ -298,1 +300,1 @@\n-        logln(\"  In locale = fr_FR...\");\n+        System.out.println(\"  In locale = fr_FR...\");\n@@ -300,1 +302,1 @@\n-        logln(\"  In locale = hr_HR...\");\n+        System.out.println(\"  In locale = hr_HR...\");\n@@ -302,1 +304,1 @@\n-        logln(\"  In locale = el_GR...\");\n+        System.out.println(\"  In locale = el_GR...\");\n@@ -312,1 +314,1 @@\n-            errln(\"Default locale should be French, but it's really \" + language);\n+            fail(\"Default locale should be French, but it's really \" + language);\n@@ -314,1 +316,1 @@\n-            errln(\"Default locale should be English, but it's really \" + language);\n+            fail(\"Default locale should be English, but it's really \" + language);\n@@ -319,1 +321,1 @@\n-            logln(\"  Testing \" + testLocale + \"...\");\n+            System.out.println(\"  Testing \" + testLocale + \"...\");\n@@ -376,1 +378,1 @@\n-                errln(\"Display language mismatch: \" + testLang + \" versus \" + expectedLang);\n+                fail(\"Display language mismatch: \" + testLang + \" versus \" + expectedLang);\n@@ -379,1 +381,1 @@\n-                errln(\"Display country mismatch: \" + testCtry + \" versus \" + expectedCtry);\n+                fail(\"Display country mismatch: \" + testCtry + \" versus \" + expectedCtry);\n@@ -382,1 +384,1 @@\n-                errln(\"Display variant mismatch: \" + testVar + \" versus \" + expectedVar);\n+                fail(\"Display variant mismatch: \" + testVar + \" versus \" + expectedVar);\n@@ -385,1 +387,1 @@\n-                errln(\"Display name mismatch: \" + testName + \" versus \" + expectedName);\n+                fail(\"Display name mismatch: \" + testName + \" versus \" + expectedName);\n@@ -391,0 +393,1 @@\n+    @Test\n@@ -398,1 +401,1 @@\n-            errln(\"Some of the test variables point to the same locale!\");\n+            fail(\"Some of the test variables point to the same locale!\");\n@@ -402,1 +405,1 @@\n-            errln(\"clone() failed to produce a valid object!\");\n+            fail(\"clone() failed to produce a valid object!\");\n@@ -406,1 +409,1 @@\n-            errln(\"clone() or equals() failed: objects that should compare equal don't\");\n+            fail(\"clone() or equals() failed: objects that should compare equal don't\");\n@@ -410,1 +413,1 @@\n-            errln(\"equals() failed: objects that shouldn't compare equal do\");\n+            fail(\"equals() failed: objects that shouldn't compare equal do\");\n@@ -418,1 +421,1 @@\n-            errln(\"hashCode() failed: objects that should have the same hash code don't\");\n+            fail(\"hashCode() failed: objects that should have the same hash code don't\");\n@@ -425,0 +428,1 @@\n+    @Test\n@@ -436,1 +440,1 @@\n-            errln(\"getISO3Language() on xx_YY returned \" + result + \" instead of throwing an exception\");\n+            fail(\"getISO3Language() on xx_YY returned \" + result + \" instead of throwing an exception\");\n@@ -446,1 +450,1 @@\n-            errln(\"getISO3Country() on xx_YY returned \" + result + \" instead of throwing an exception\");\n+            fail(\"getISO3Country() on xx_YY returned \" + result + \" instead of throwing an exception\");\n@@ -453,0 +457,1 @@\n+    @Test\n@@ -467,1 +472,1 @@\n-            errln(\"Expected getISOLanguages() to return 188 languages; it returned \" + test.length);\n+            fail(\"Expected getISOLanguages() to return 188 languages; it returned \" + test.length);\n@@ -477,1 +482,1 @@\n-                    errln(\"Couldn't find \" + spotCheck1[i] + \" in language list.\");\n+                    fail(\"Couldn't find \" + spotCheck1[i] + \" in language list.\");\n@@ -483,1 +488,1 @@\n-                errln(test[i] + \" is not all lower case.\");\n+                fail(test[i] + \" is not all lower case.\");\n@@ -486,1 +491,1 @@\n-                errln(test[i] + \" is not two characters long.\");\n+                fail(test[i] + \" is not two characters long.\");\n@@ -489,1 +494,1 @@\n-                errln(test[i] + \" appears in an out-of-order position in the list.\");\n+                fail(test[i] + \" appears in an out-of-order position in the list.\");\n@@ -498,1 +503,1 @@\n-            errln(\"Expected getISOCountries to return 249 countries; it returned \" + test.length);\n+            fail(\"Expected getISOCountries to return 249 countries; it returned \" + test.length);\n@@ -508,1 +513,1 @@\n-                    errln(\"Couldn't find \" + spotCheck2[i] + \" in country list.\");\n+                    fail(\"Couldn't find \" + spotCheck2[i] + \" in country list.\");\n@@ -514,1 +519,1 @@\n-                errln(test[i] + \" is not all upper case.\");\n+                fail(test[i] + \" is not all upper case.\");\n@@ -517,1 +522,1 @@\n-                errln(test[i] + \" is not two characters long.\");\n+                fail(test[i] + \" is not two characters long.\");\n@@ -520,1 +525,1 @@\n-                errln(test[i] + \" appears in an out-of-order position in the list.\");\n+                fail(test[i] + \" appears in an out-of-order position in the list.\");\n@@ -535,1 +540,1 @@\n-            errln(\"Changed internal country code list!\");\n+            fail(\"Changed internal country code list!\");\n@@ -542,1 +547,1 @@\n-            errln(\"Changes internal language code list!\");\n+            fail(\"Changes internal language code list!\");\n@@ -549,0 +554,1 @@\n+    @Test\n@@ -552,1 +558,1 @@\n-            errln(\"Locale.getAvailableLocales() returned no installed locales!\");\n+            fail(\"Locale.getAvailableLocales() returned no installed locales!\");\n@@ -554,1 +560,1 @@\n-            logln(\"Locale.getAvailableLocales() returned a list of \" + locales.length + \" locales.\");\n+            System.out.println(\"Locale.getAvailableLocales() returned a list of \" + locales.length + \" locales.\");\n@@ -556,1 +562,1 @@\n-                logln(locales[i].toString());\n+                System.out.println(locales[i].toString());\n@@ -564,0 +570,1 @@\n+    @Test\n@@ -568,1 +575,1 @@\n-            errln(\"Locale.getAvailableLocales() doesn't clone its internal storage!\");\n+            fail(\"Locale.getAvailableLocales() doesn't clone its internal storage!\");\n@@ -577,0 +584,1 @@\n+    @Test\n@@ -581,1 +589,1 @@\n-            errln(\"Didn't get en as a language for US\");\n+            fail(\"Didn't get en as a language for US\");\n@@ -585,1 +593,1 @@\n-            errln(\"Didn't get fr as a language for FR\");\n+            fail(\"Didn't get fr as a language for FR\");\n@@ -589,1 +597,1 @@\n-            errln(\"Didn't get fr as a language for CH\");\n+            fail(\"Didn't get fr as a language for CH\");\n@@ -591,1 +599,1 @@\n-            errln(\"Didn't get it as a language for CH\");\n+            fail(\"Didn't get it as a language for CH\");\n@@ -593,1 +601,1 @@\n-            errln(\"Didn't get de as a language for CH\");\n+            fail(\"Didn't get de as a language for CH\");\n@@ -597,1 +605,1 @@\n-            errln(\"Didn't get ja as a language for JP\");\n+            fail(\"Didn't get ja as a language for JP\");\n@@ -610,0 +618,1 @@\n+    @Test\n@@ -630,1 +639,1 @@\n-            errln(\"Locale failed to deserialize correctly.\");\n+            fail(\"Locale failed to deserialize correctly.\");\n@@ -637,0 +646,1 @@\n+    @Test\n@@ -649,1 +659,1 @@\n-                errln(\"Got wrong display name for \" + languageCodes[i] + \": Expected \\\"\"\n+                fail(\"Got wrong display name for \" + languageCodes[i] + \": Expected \\\"\"\n@@ -658,0 +668,1 @@\n+    @Test\n@@ -667,1 +678,1 @@\n-                errln(\"Got wrong ISO3 code for \" + iso2Languages[i] + \": Expected \\\"\"\n+                fail(\"Got wrong ISO3 code for \" + iso2Languages[i] + \": Expected \\\"\"\n@@ -678,1 +689,1 @@\n-                errln(\"Got wrong ISO3 code for \" + iso2Countries[i] + \": Expected \\\"\"\n+                fail(\"Got wrong ISO3 code for \" + iso2Countries[i] + \": Expected \\\"\"\n@@ -687,0 +698,1 @@\n+    @Test\n@@ -697,1 +709,1 @@\n-                errln(\"Got back wrong language code for new Hebrew: expected \\\"iw\\\", got \\\"\"\n+                fail(\"Got back wrong language code for new Hebrew: expected \\\"iw\\\", got \\\"\"\n@@ -701,1 +713,1 @@\n-                errln(\"Got back wrong language code for new Yiddish: expected \\\"ji\\\", got \\\"\"\n+                fail(\"Got back wrong language code for new Yiddish: expected \\\"ji\\\", got \\\"\"\n@@ -705,1 +717,1 @@\n-                errln(\"Got back wrong language code for new Indonesian: expected \\\"in\\\", got \\\"\"\n+                fail(\"Got back wrong language code for new Indonesian: expected \\\"in\\\", got \\\"\"\n@@ -710,1 +722,1 @@\n-                errln(\"Got back wrong language code for old Hebrew: expected \\\"he\\\", got \\\"\"\n+                fail(\"Got back wrong language code for old Hebrew: expected \\\"he\\\", got \\\"\"\n@@ -714,1 +726,1 @@\n-                errln(\"Got back wrong language code for old Yiddish: expected \\\"yi\\\", got \\\"\"\n+                fail(\"Got back wrong language code for old Yiddish: expected \\\"yi\\\", got \\\"\"\n@@ -718,1 +730,1 @@\n-                errln(\"Got back wrong language code for old Indonesian: expected \\\"id\\\", got \\\"\"\n+                fail(\"Got back wrong language code for old Indonesian: expected \\\"id\\\", got \\\"\"\n@@ -742,0 +754,1 @@\n+    @Test\n@@ -787,1 +800,1 @@\n-            logln(name);\n+            System.out.println(name);\n@@ -789,1 +802,1 @@\n-                errln(\"Lookup in English failed: expected \\\"\" + englishDisplayNames[i]\n+                fail(\"Lookup in English failed: expected \\\"\" + englishDisplayNames[i]\n@@ -796,1 +809,1 @@\n-            logln(name);\n+            System.out.println(name);\n@@ -798,1 +811,1 @@\n-                errln(\"Lookup in Spanish failed: expected \\\"\" + spanishDisplayNames[i]\n+                fail(\"Lookup in Spanish failed: expected \\\"\" + spanishDisplayNames[i]\n@@ -805,1 +818,1 @@\n-            logln(name);\n+            System.out.println(name);\n@@ -807,1 +820,1 @@\n-                errln(\"Lookup in French failed: expected \\\"\" + frenchDisplayNames[i]\n+                fail(\"Lookup in French failed: expected \\\"\" + frenchDisplayNames[i]\n@@ -819,0 +832,1 @@\n+    @Test\n@@ -830,1 +844,1 @@\n-            errln(\"Locale.getDefault() allowed us to set default to NULL!\");\n+            fail(\"Locale.getDefault() allowed us to set default to NULL!\");\n@@ -833,1 +847,1 @@\n-            errln(\"Trying to set default locale to NULL didn't throw exception!\");\n+            fail(\"Trying to set default locale to NULL didn't throw exception!\");\n@@ -842,0 +856,1 @@\n+    @Test\n@@ -846,1 +861,1 @@\n-            errln(\"Thai currency prefix wrong: expected \\\"\\u0e3f\\\", got \\\"\"\n+            fail(\"Thai currency prefix wrong: expected \\\"\\u0e3f\\\", got \\\"\"\n@@ -850,1 +865,1 @@\n-            errln(\"Thai currency suffix wrong: expected \\\"\\\", got \\\"\"\n+            fail(\"Thai currency suffix wrong: expected \\\"\\\", got \\\"\"\n@@ -868,0 +883,1 @@\n+    @Test\n@@ -881,1 +897,1 @@\n-                    logln(\"Ok: \" + loc.toString()\n+                    System.out.println(\"Ok: \" + loc.toString()\n@@ -884,1 +900,1 @@\n-                    errln(\"Fail: \" + loc.toString()\n+                    fail(\"Fail: \" + loc.toString()\n@@ -897,0 +913,1 @@\n+    @Test\n@@ -911,1 +928,1 @@\n-                errln(\"Fail: Locale.toString(\" + fmt + \")=>\" + loc);\n+                fail(\"Fail: Locale.toString(\" + fmt + \")=>\" + loc);\n@@ -921,0 +938,1 @@\n+    @Test\n@@ -928,1 +946,1 @@\n-                errln(\"Percent for \" + LOC[i] + \" should be 100%, got \" + result);\n+                fail(\"Percent for \" + LOC[i] + \" should be 100%, got \" + result);\n@@ -949,0 +967,1 @@\n+    @Test\n@@ -958,1 +977,1 @@\n-            errln(\"Fail: Monday in Hungarian is wrong\");\n+            fail(\"Fail: Monday in Hungarian is wrong\");\n@@ -966,0 +985,1 @@\n+    @Test\n@@ -969,1 +989,1 @@\n-            errln(\"Fail: First day of week in Russia should be Monday\");\n+            fail(\"Fail: First day of week in Russia should be Monday\");\n@@ -978,0 +998,1 @@\n+    @Test\n@@ -986,1 +1007,1 @@\n-            errln(\"ERROR: getISO3Country() returns: \" + result\n+            fail(\"ERROR: getISO3Country() returns: \" + result\n@@ -998,0 +1019,1 @@\n+    @Test\n@@ -1005,1 +1027,1 @@\n-            errln(\"ERROR: getISO3Language() returns: \" + result\n+            fail(\"ERROR: getISO3Language() returns: \" + result\n@@ -1016,1 +1038,1 @@\n-            errln(\"ERROR: getISO3Language() returns: \" + result\n+            fail(\"ERROR: getISO3Language() returns: \" + result\n@@ -1025,0 +1047,1 @@\n+    @Test\n@@ -1041,1 +1064,1 @@\n-                errln(\"English display-name mismatch: expected \"\n+                fail(\"English display-name mismatch: expected \"\n@@ -1045,1 +1068,1 @@\n-                errln(\"Norwegian display-name mismatch: expected \"\n+                fail(\"Norwegian display-name mismatch: expected \"\n@@ -1055,0 +1078,1 @@\n+    @Test\n@@ -1059,1 +1083,1 @@\n-            errln(\"\\\"nb-NO\\\" and\/or \\\"nn-NO\\\" locale(s) not returned from getAvailableLocales().\");\n+            fail(\"\\\"nb-NO\\\" and\/or \\\"nn-NO\\\" locale(s) not returned from getAvailableLocales().\");\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleTest.java","additions":127,"deletions":103,"binary":false,"changes":230,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @library \/java\/text\/testlib\n+ * @run junit Bug4322313\n@@ -37,1 +37,5 @@\n-public class Bug4322313 extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class Bug4322313 {\n@@ -109,1 +113,1 @@\n-                        logln(\"\\tPassed [Locale=\" +\n+                        System.out.println(\"\\tPassed [Locale=\" +\n@@ -122,1 +126,1 @@\n-                        logln(\"\\tPassed [Locale=\" +\n+                        System.out.println(\"\\tPassed [Locale=\" +\n@@ -135,1 +139,1 @@\n-                        logln(\"\\tPassed [Locale=\" +\n+                        System.out.println(\"\\tPassed [Locale=\" +\n@@ -153,1 +157,1 @@\n-                        logln(\"\\tPassed [Locale=\" +\n+                        System.out.println(\"\\tPassed [Locale=\" +\n@@ -166,1 +170,1 @@\n-                        logln(\"\\tPassed [Locale=\" +\n+                        System.out.println(\"\\tPassed [Locale=\" +\n@@ -179,1 +183,1 @@\n-                        logln(\"\\tPassed [Locale=\" +\n+                        System.out.println(\"\\tPassed [Locale=\" +\n@@ -221,1 +225,1 @@\n-            errln(\"TimeZone.getTimeZone() test failed\");\n+            fail(\"TimeZone.getTimeZone() test failed\");\n@@ -223,1 +227,1 @@\n-            logln(\"TimeZone.getTimeZone() test passed\");\n+            System.out.println(\"TimeZone.getTimeZone() test passed\");\n@@ -227,3 +231,0 @@\n-    public static void main (String[] args) throws Exception {\n-        new Bug4322313().run(args);\n-    }\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug4322313.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,1 @@\n- * @library \/java\/text\/testlib\n- * @build Bug6329116 TextFileReader\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI Bug6329116\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI Bug6329116\n@@ -39,1 +37,5 @@\n-public class Bug6329116 extends IntlTest {\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class Bug6329116 {\n@@ -44,7 +46,2 @@\n-    public static void main(String[] args) throws IOException {\n-        if (bug6329116()) {\n-            throw new RuntimeException(\"At least one timezone display name is incorrect.\");\n-        }\n-    }\n-\n-    static boolean bug6329116() throws IOException {\n+    @Test\n+    public void bug6329116() throws IOException {\n@@ -203,1 +200,3 @@\n-        return err;\n+        if (err) {\n+            fail(\"At least one timezone display name is incorrect.\");\n+        }\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug6329116.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @library \/java\/text\/testlib\n@@ -28,0 +27,1 @@\n+ * @run junit TimeZoneBoundaryTest\n@@ -30,2 +30,10 @@\n-import java.text.*;\n-import java.util.*;\n+import java.text.DateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.SimpleTimeZone;\n+import java.util.TimeZone;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -37,1 +45,1 @@\n-public class TimeZoneBoundaryTest extends IntlTest\n+public class TimeZoneBoundaryTest\n@@ -60,4 +68,0 @@\n-    public static void main(String[] args) throws Exception {\n-        new TimeZoneBoundaryTest().run(args);\n-    }\n-\n@@ -78,1 +82,1 @@\n-            logln(\"Error: \" + startMode + \" not present in \" + d);\n+            System.out.println(\"Error: \" + startMode + \" not present in \" + d);\n@@ -101,2 +105,2 @@\n-        logln(\"Date Before: \" + showDate(min));\n-        logln(\"Date After:  \" + showDate(max));\n+        System.out.println(\"Date Before: \" + showDate(min));\n+        System.out.println(\"Date After:  \" + showDate(max));\n@@ -107,1 +111,1 @@\n-            logln(\"PASS: Expected boundary at \" + expectedBoundary);\n+            System.out.println(\"PASS: Expected boundary at \" + expectedBoundary);\n@@ -109,1 +113,1 @@\n-            errln(\"FAIL: Expected boundary at \" + expectedBoundary);\n+            fail(\"FAIL: Expected boundary at \" + expectedBoundary);\n@@ -131,1 +135,1 @@\n-            errln(\"FAIL: \" + tz.getID() + \" inDaylightTime(\" +\n+            fail(\"FAIL: \" + tz.getID() + \" inDaylightTime(\" +\n@@ -138,1 +142,1 @@\n-            errln(\"FAIL: \" + tz.getID() + \" inDaylightTime(\" +\n+            fail(\"FAIL: \" + tz.getID() + \" inDaylightTime(\" +\n@@ -157,2 +161,2 @@\n-        logln(tz.getID() + \" Before: \" + showDate(min, tz));\n-        logln(tz.getID() + \" After:  \" + showDate(max, tz));\n+        System.out.println(tz.getID() + \" Before: \" + showDate(min, tz));\n+        System.out.println(tz.getID() + \" After:  \" + showDate(max, tz));\n@@ -164,1 +168,1 @@\n-            logln(\"PASS: Expected boundary at \" + expectedBoundary);\n+            System.out.println(\"PASS: Expected boundary at \" + expectedBoundary);\n@@ -166,1 +170,1 @@\n-            errln(\"FAIL: Expected boundary at \" + expectedBoundary);\n+            fail(\"FAIL: Expected boundary at \" + expectedBoundary);\n@@ -212,1 +216,1 @@\n-        logln(\"-- Verifying time \" + d +\n+        System.out.println(\"-- Verifying time \" + d +\n@@ -216,1 +220,1 @@\n-            logln(\"PASS: inDaylightTime = \" + time_zone.inDaylightTime(d));\n+            System.out.println(\"PASS: inDaylightTime = \" + time_zone.inDaylightTime(d));\n@@ -218,1 +222,1 @@\n-            errln(\"FAIL: inDaylightTime = \" + time_zone.inDaylightTime(d));\n+            fail(\"FAIL: inDaylightTime = \" + time_zone.inDaylightTime(d));\n@@ -221,1 +225,1 @@\n-            logln(\"PASS: useDaylightTime = \" + time_zone.useDaylightTime());\n+            System.out.println(\"PASS: useDaylightTime = \" + time_zone.useDaylightTime());\n@@ -223,1 +227,1 @@\n-            errln(\"FAIL: useDaylightTime = \" + time_zone.useDaylightTime());\n+            fail(\"FAIL: useDaylightTime = \" + time_zone.useDaylightTime());\n@@ -226,1 +230,1 @@\n-            logln(\"PASS: getRawOffset() = \" + expZoneOffset\/(double)ONE_HOUR);\n+            System.out.println(\"PASS: getRawOffset() = \" + expZoneOffset\/(double)ONE_HOUR);\n@@ -228,1 +232,1 @@\n-            errln(\"FAIL: getRawOffset() = \" + time_zone.getRawOffset()\/(double)ONE_HOUR +\n+            fail(\"FAIL: getRawOffset() = \" + time_zone.getRawOffset()\/(double)ONE_HOUR +\n@@ -240,1 +244,1 @@\n-            logln(\"PASS: getOffset() = \" + offset\/(double)ONE_HOUR);\n+            System.out.println(\"PASS: getOffset() = \" + offset\/(double)ONE_HOUR);\n@@ -242,1 +246,1 @@\n-            errln(\"FAIL: getOffset() = \" + offset\/(double)ONE_HOUR +\n+            fail(\"FAIL: getOffset() = \" + offset\/(double)ONE_HOUR +\n@@ -247,0 +251,1 @@\n+    @Test\n@@ -266,1 +271,1 @@\n-            logln(\"========================================\");\n+            System.out.println(\"========================================\");\n@@ -268,1 +273,1 @@\n-            logln(\"========================================\");\n+            System.out.println(\"========================================\");\n@@ -272,1 +277,1 @@\n-            logln(\"========================================\");\n+            System.out.println(\"========================================\");\n@@ -276,1 +281,1 @@\n-            logln(\"========================================\");\n+            System.out.println(\"========================================\");\n@@ -278,1 +283,1 @@\n-            logln(\"========================================\");\n+            System.out.println(\"========================================\");\n@@ -300,1 +305,1 @@\n-            logln(\"Error: inDaylightTime(\" + (new Date(max)) + \") != \" + (!startsInDST));\n+            System.out.println(\"Error: inDaylightTime(\" + (new Date(max)) + \") != \" + (!startsInDST));\n@@ -316,2 +321,2 @@\n-        logln(\"Binary Search Before: \" + showDate(min));\n-        logln(\"Binary Search After:  \" + showDate(max));\n+        System.out.println(\"Binary Search Before: \" + showDate(min));\n+        System.out.println(\"Binary Search After:  \" + showDate(max));\n@@ -323,1 +328,1 @@\n-            logln(\"PASS: Expected boundary at \" + expectedBoundary);\n+            System.out.println(\"PASS: Expected boundary at \" + expectedBoundary);\n@@ -325,1 +330,1 @@\n-            errln(\"FAIL: Expected boundary at \" + expectedBoundary);\n+            fail(\"FAIL: Expected boundary at \" + expectedBoundary);\n@@ -328,24 +333,0 @@\n-    \/*\n-      static void testUsingMillis(Date d, boolean startsInDST)\n-      {\n-      long millis = d.getTime();\n-      long max = millis + (long)(370 * ONE_DAY); \/\/ A year plus extra\n-\n-      boolean lastDST = startsInDST;\n-      while (millis < max)\n-      {\n-      cal.setTime(new Date(millis));\n-      boolean inDaylight = cal.inDaylightTime();\n-\n-      if (inDaylight != lastDST)\n-      {\n-      logln(\"Switch \" + (inDaylight ? \"into\" : \"out of\")\n-      + \" DST at \" + (new Date(millis)));\n-      lastDST = inDaylight;\n-      }\n-\n-      millis += 15*ONE_MINUTE;\n-      }\n-      }\n-      *\/\n-\n@@ -356,60 +337,26 @@\n-    public void TestNewRules()\n-    {\n-        \/\/logln(Locale.getDefault().getDisplayName());\n-        \/\/logln(TimeZone.getDefault().getID());\n-        \/\/logln(new Date(0));\n-\n-        if (true)\n-        {\n-            \/\/ Doesn't matter what the default TimeZone is here, since we\n-            \/\/ are creating our own TimeZone objects.\n-\n-            SimpleTimeZone tz;\n-\n-            logln(\"-----------------------------------------------------------------\");\n-            logln(\"Aug 2ndTues .. Mar 15\");\n-            tz = new SimpleTimeZone(-8*ONE_HOUR, \"Test_1\",\n-                                    Calendar.AUGUST, 2, Calendar.TUESDAY, 2*ONE_HOUR,\n-                                    Calendar.MARCH, 15, 0, 2*ONE_HOUR);\n-            \/\/logln(tz.toString());\n-            logln(\"========================================\");\n-            testUsingBinarySearch(tz, new Date(97,0,1), 858416400000L);\n-            logln(\"========================================\");\n-            testUsingBinarySearch(tz, new Date(97,6,1), 871380000000L);\n-\n-            logln(\"-----------------------------------------------------------------\");\n-            logln(\"Apr Wed>=14 .. Sep Sun<=20\");\n-            tz = new SimpleTimeZone(-8*ONE_HOUR, \"Test_2\",\n-                                    Calendar.APRIL, 14, -Calendar.WEDNESDAY, 2*ONE_HOUR,\n-                                    Calendar.SEPTEMBER, -20, -Calendar.SUNDAY, 2*ONE_HOUR);\n-            \/\/logln(tz.toString());\n-            logln(\"========================================\");\n-            testUsingBinarySearch(tz, new Date(97,0,1), 861184800000L);\n-            logln(\"========================================\");\n-            testUsingBinarySearch(tz, new Date(97,6,1), 874227600000L);\n-        }\n-\n-        \/*\n-          if (true)\n-          {\n-          logln(\"========================================\");\n-          logln(\"Stepping using millis\");\n-          testUsingMillis(new Date(97,0,1), false);\n-          }\n-\n-          if (true)\n-          {\n-          logln(\"========================================\");\n-          logln(\"Stepping using fields\");\n-          testUsingFields(1997, false);\n-          }\n-\n-          if (false)\n-          {\n-          cal.clear();\n-          cal.set(1997, 3, 5, 10, 0);\n-          \/\/    cal.inDaylightTime();\n-          logln(\"Date = \" + cal.getTime());\n-          logln(\"Millis = \" + cal.getTime().getTime()\/3600000);\n-          }\n-          *\/\n+    @Test\n+    public void TestNewRules() {\n+        \/\/ Doesn't matter what the default TimeZone is here, since we\n+        \/\/ are creating our own TimeZone objects.\n+\n+        SimpleTimeZone tz;\n+\n+        System.out.println(\"-----------------------------------------------------------------\");\n+        System.out.println(\"Aug 2ndTues .. Mar 15\");\n+        tz = new SimpleTimeZone(-8*ONE_HOUR, \"Test_1\",\n+                                Calendar.AUGUST, 2, Calendar.TUESDAY, 2*ONE_HOUR,\n+                                Calendar.MARCH, 15, 0, 2*ONE_HOUR);\n+        System.out.println(\"========================================\");\n+        testUsingBinarySearch(tz, new Date(97,0,1), 858416400000L);\n+        System.out.println(\"========================================\");\n+        testUsingBinarySearch(tz, new Date(97,6,1), 871380000000L);\n+\n+        System.out.println(\"-----------------------------------------------------------------\");\n+        System.out.println(\"Apr Wed>=14 .. Sep Sun<=20\");\n+        tz = new SimpleTimeZone(-8*ONE_HOUR, \"Test_2\",\n+                                Calendar.APRIL, 14, -Calendar.WEDNESDAY, 2*ONE_HOUR,\n+                                Calendar.SEPTEMBER, -20, -Calendar.SUNDAY, 2*ONE_HOUR);\n+        System.out.println(\"========================================\");\n+        testUsingBinarySearch(tz, new Date(97,0,1), 861184800000L);\n+        System.out.println(\"========================================\");\n+        testUsingBinarySearch(tz, new Date(97,6,1), 874227600000L);\n@@ -418,13 +365,0 @@\n-    \/\/----------------------------------------------------------------------\n-    \/\/----------------------------------------------------------------------\n-    \/\/----------------------------------------------------------------------\n-    \/\/ Long Bug\n-    \/\/----------------------------------------------------------------------\n-    \/\/----------------------------------------------------------------------\n-    \/\/----------------------------------------------------------------------\n-\n-    \/\/public void Test3()\n-    \/\/{\n-    \/\/    findDaylightBoundaryUsingTimeZone(new Date(97,6,1), true);\n-    \/\/}\n-\n@@ -442,2 +376,2 @@\n-        logln(\"-- Zone \" + z.getID() + \" starts in \" + year + \" with DST = \" + lastState);\n-        logln(\"useDaylightTime = \" + z.useDaylightTime());\n+        System.out.println(\"-- Zone \" + z.getID() + \" starts in \" + year + \" with DST = \" + lastState);\n+        System.out.println(\"useDaylightTime = \" + z.useDaylightTime());\n@@ -450,1 +384,1 @@\n-                logln((state ? \"Entry \" : \"Exit \") +\n+                System.out.println((state ? \"Entry \" : \"Exit \") +\n@@ -459,2 +393,2 @@\n-            if (!lastState && !z.useDaylightTime()) logln(\"No DST\");\n-            else errln(\"FAIL: Timezone<\" + z.getID() + \"> DST all year, or no DST with true useDaylightTime\");\n+            if (!lastState && !z.useDaylightTime()) System.out.println(\"No DST\");\n+            else fail(\"FAIL: Timezone<\" + z.getID() + \"> DST all year, or no DST with true useDaylightTime\");\n@@ -464,1 +398,1 @@\n-            errln(\"FAIL: Timezone<\" + z.getID() + \"> \" + changes + \" changes seen; should see 0 or 2\");\n+            fail(\"FAIL: Timezone<\" + z.getID() + \"> \" + changes + \" changes seen; should see 0 or 2\");\n@@ -468,1 +402,1 @@\n-            errln(\"FAIL: Timezone<\" + z.getID() + \"> useDaylightTime false but 2 changes seen\");\n+            fail(\"FAIL: Timezone<\" + z.getID() + \"> useDaylightTime false but 2 changes seen\");\n@@ -472,1 +406,1 @@\n-            errln(\"FAIL: Timezone<\" + z.getID() + \"> \" + changes + \" changes seen; expected \" + expectedChanges);\n+            fail(\"FAIL: Timezone<\" + z.getID() + \"> \" + changes + \" changes seen; expected \" + expectedChanges);\n@@ -476,0 +410,1 @@\n+    @Test\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneBoundaryTest.java","additions":79,"deletions":144,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm -Djava.locale.providers=COMPAT,SPI TimeZoneRegression\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT,SPI TimeZoneRegression\n@@ -37,1 +37,1 @@\n-public class TimeZoneRegression extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -39,3 +39,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new TimeZoneRegression().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class TimeZoneRegression {\n@@ -43,0 +43,1 @@\n+    @Test\n@@ -47,1 +48,1 @@\n-            errln(\"Fail: TimeZone should return clones\");\n+            fail(\"Fail: TimeZone should return clones\");\n@@ -52,0 +53,1 @@\n+    @Test\n@@ -55,1 +57,1 @@\n-            errln(\"Fail: Fix test to start with non-DST zone\");\n+            fail(\"Fail: Fix test to start with non-DST zone\");\n@@ -60,1 +62,1 @@\n-            errln(\"Fail: DST not active\");\n+            fail(\"Fail: DST not active\");\n@@ -65,1 +67,1 @@\n-            errln(\"Fail: DST not working as expected\");\n+            fail(\"Fail: DST not working as expected\");\n@@ -77,0 +79,1 @@\n+    @Test\n@@ -116,1 +119,1 @@\n-            errln(\"Fail: TimeZone misbehaving\"); {\n+            fail(\"Fail: TimeZone misbehaving\"); {\n@@ -120,0 +123,1 @@\n+    @Test\n@@ -127,1 +131,1 @@\n-                    errln(\"Fail: Test broken; zones not instantiating\");\n+                    fail(\"Fail: Test broken; zones not instantiating\");\n@@ -143,1 +147,1 @@\n-                    logln(\"TimeZone \" + zone.getID() +\n+                    System.out.println(\"TimeZone \" + zone.getID() +\n@@ -148,1 +152,1 @@\n-            if (!pass) errln(\"Fail: TimeZone serialization\/equality bug\");\n+            if (!pass) fail(\"Fail: TimeZone serialization\/equality bug\");\n@@ -151,1 +155,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -155,1 +159,1 @@\n-            errln(\"Fail: \" + e);\n+            fail(\"Fail: \" + e);\n@@ -160,0 +164,1 @@\n+    @Test\n@@ -163,1 +168,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -193,1 +198,1 @@\n-        if (!pass) errln(\"Fail: TZ API inconsistent\");\n+        if (!pass) fail(\"Fail: TZ API inconsistent\");\n@@ -271,1 +276,1 @@\n-        if (passed) logln(output); else errln(output);\n+        if (passed) System.out.println(output); else fail(output);\n@@ -287,0 +292,1 @@\n+    @Test\n@@ -290,1 +296,1 @@\n-            logln(\"Skipping this test because locale is \" + locale);\n+            System.out.println(\"Skipping this test because locale is \" + locale);\n@@ -316,1 +322,1 @@\n-            errln(\"We're not in Daylight Savings Time and we should be.\\n\");\n+            fail(\"We're not in Daylight Savings Time and we should be.\\n\");\n@@ -333,1 +339,1 @@\n-            errln(\"Offsets should not match when in DST\");\n+            fail(\"Offsets should not match when in DST\");\n@@ -341,0 +347,1 @@\n+    @Test\n@@ -354,1 +361,1 @@\n-                logln(hname + ' ' + ids.length +\n+                System.out.println(hname + ' ' + ids.length +\n@@ -357,1 +364,1 @@\n-                errln(hname + ' ' + \"Fail: \" + e);\n+                fail(hname + ' ' + \"Fail: \" + e);\n@@ -360,1 +367,1 @@\n-        logln(\"Maximum zones per offset = \" + max);\n+        System.out.println(\"Maximum zones per offset = \" + max);\n@@ -363,0 +370,1 @@\n+    @Test\n@@ -368,1 +376,1 @@\n-            errln(\"IllegalArgumentException not thrown by TimeZone.getDisplayName()\");\n+            fail(\"IllegalArgumentException not thrown by TimeZone.getDisplayName()\");\n@@ -376,0 +384,1 @@\n+    @Test\n@@ -407,1 +416,1 @@\n-                        logln(\"Pass: DST savings of \" + savings + \" accepted by \" + method);\n+                        System.out.println(\"Pass: DST savings of \" + savings + \" accepted by \" + method);\n@@ -409,1 +418,1 @@\n-                        errln(\"Fail: DST savings of \" + savings + \" accepted by \" + method);\n+                        fail(\"Fail: DST savings of \" + savings + \" accepted by \" + method);\n@@ -413,1 +422,1 @@\n-                        errln(\"Fail: DST savings of \" + savings + \" to \" + method + \" gave \" + e);\n+                        fail(\"Fail: DST savings of \" + savings + \" to \" + method + \" gave \" + e);\n@@ -415,1 +424,1 @@\n-                        logln(\"Pass: DST savings of \" + savings + \" to \" + method + \" gave \" + e);\n+                        System.out.println(\"Pass: DST savings of \" + savings + \" to \" + method + \" gave \" + e);\n@@ -426,0 +435,1 @@\n+    @Test\n@@ -438,1 +448,1 @@\n-            errln(\"Test is broken -- rewrite it\");\n+            fail(\"Test is broken -- rewrite it\");\n@@ -441,1 +451,1 @@\n-            errln(\"Fail: hasSameRules() broken for zones with rules\");\n+            fail(\"Fail: hasSameRules() broken for zones with rules\");\n@@ -444,3 +454,3 @@\n-            errln(\"Fail: hasSameRules() returns false for zones without rules\");\n-            errln(\"zone 1 = \" + tz1);\n-            errln(\"zone 2 = \" + tz2);\n+            fail(\"Fail: hasSameRules() returns false for zones without rules\");\n+            fail(\"zone 1 = \" + tz1);\n+            fail(\"zone 2 = \" + tz2);\n@@ -454,0 +464,1 @@\n+    @Test\n@@ -499,1 +510,1 @@\n-                errln(\"setStartRule(month=\" + month + \", day=\" + day +\n+                fail(\"setStartRule(month=\" + month + \", day=\" + day +\n@@ -512,1 +523,1 @@\n-                errln(\"setEndRule(month=\" + month + \", day=\" + day +\n+                fail(\"setEndRule(month=\" + month + \", day=\" + day +\n@@ -527,1 +538,1 @@\n-                errln(\"SimpleTimeZone(month=\" + month + \", day=\" + day +\n+                fail(\"SimpleTimeZone(month=\" + month + \", day=\" + day +\n@@ -542,1 +553,1 @@\n-                errln(\"SimpleTimeZone(<start>, month=\" + month + \", day=\" + day +\n+                fail(\"SimpleTimeZone(<start>, month=\" + month + \", day=\" + day +\n@@ -553,0 +564,1 @@\n+    @Test\n@@ -597,1 +609,1 @@\n-                errln(\"Fail: getOffset(\" +\n+                fail(\"Fail: getOffset(\" +\n@@ -608,0 +620,1 @@\n+    @Test\n@@ -615,1 +628,1 @@\n-            errln(\"FAIL: Null allowed in getTimeZone\");\n+            fail(\"FAIL: Null allowed in getTimeZone\");\n@@ -620,1 +633,1 @@\n-            errln(\"FAIL: Null allowed in getDisplayName(3)\");\n+            fail(\"FAIL: Null allowed in getDisplayName(3)\");\n@@ -624,1 +637,1 @@\n-            errln(\"FAIL: Null allowed in getDisplayName(1)\");\n+            fail(\"FAIL: Null allowed in getDisplayName(1)\");\n@@ -628,1 +641,1 @@\n-                errln(\"FAIL: hasSameRules returned true\");\n+                fail(\"FAIL: hasSameRules returned true\");\n@@ -631,1 +644,1 @@\n-            errln(\"FAIL: Null NOT allowed in hasSameRules\");\n+            fail(\"FAIL: Null NOT allowed in hasSameRules\");\n@@ -635,1 +648,1 @@\n-            errln(\"FAIL: Null allowed in inDaylightTime\");\n+            fail(\"FAIL: Null allowed in inDaylightTime\");\n@@ -639,1 +652,1 @@\n-            errln(\"FAIL: Null allowed in setID\");\n+            fail(\"FAIL: Null allowed in setID\");\n@@ -646,1 +659,1 @@\n-            errln(\"FAIL: Null NOT allowed in setDefault\");\n+            fail(\"FAIL: Null NOT allowed in setDefault\");\n@@ -655,1 +668,1 @@\n-            errln(\"FAIL: Null allowed in SimpleTimeZone(2)\");\n+            fail(\"FAIL: Null allowed in SimpleTimeZone(2)\");\n@@ -659,1 +672,1 @@\n-            errln(\"FAIL: Null allowed in SimpleTimeZone(10)\");\n+            fail(\"FAIL: Null allowed in SimpleTimeZone(10)\");\n@@ -663,1 +676,1 @@\n-            errln(\"FAIL: Null allowed in SimpleTimeZone(11)\");\n+            fail(\"FAIL: Null allowed in SimpleTimeZone(11)\");\n@@ -672,0 +685,1 @@\n+    @Test\n@@ -714,1 +728,1 @@\n-                logln(tz.getID() + \":\");\n+                System.out.println(tz.getID() + \":\");\n@@ -717,1 +731,1 @@\n-                    logln(\"\" + i + \": \" + d);\n+                    System.out.println(\"\" + i + \": \" + d);\n@@ -723,1 +737,1 @@\n-                    logln(\"Ok: transition \" + transitionExpected);\n+                    System.out.println(\"Ok: transition \" + transitionExpected);\n@@ -725,1 +739,1 @@\n-                    errln(\"Fail: boundary transition incorrect\");\n+                    fail(\"Fail: boundary transition incorrect\");\n@@ -739,0 +753,1 @@\n+    @Test\n@@ -751,1 +766,1 @@\n-            errln(\"Offsets should be the same (for PST), but got: \" +\n+            fail(\"Offsets should be the same (for PST), but got: \" +\n@@ -770,2 +785,2 @@\n-                logln(t.getTime() + \"  \" + t.get(Calendar.DST_OFFSET));\n-                logln(cal.getTime() + \"  \" + (lastDST=cal.get(Calendar.DST_OFFSET)));\n+                System.out.println(t.getTime() + \"  \" + t.get(Calendar.DST_OFFSET));\n+                System.out.println(cal.getTime() + \"  \" + (lastDST=cal.get(Calendar.DST_OFFSET)));\n@@ -775,1 +790,1 @@\n-            errln(\"Saw \" + transitions + \" transitions; should have seen 4\");\n+            fail(\"Saw \" + transitions + \" transitions; should have seen 4\");\n@@ -783,0 +798,1 @@\n+    @Test\n@@ -830,1 +846,1 @@\n-                errln(\"FAIL: \" + DATA[i] + \" -> \" + DATA[i+1] + \", exp \" + DATA[i+2]);\n+                fail(\"FAIL: \" + DATA[i] + \" -> \" + DATA[i+1] + \", exp \" + DATA[i+2]);\n@@ -838,0 +854,1 @@\n+    @Test\n@@ -842,1 +859,1 @@\n-            errln(\"Failed. No exception has been thrown for DOM -1 startDay\");\n+            fail(\"Failed. No exception has been thrown for DOM -1 startDay\");\n@@ -844,1 +861,1 @@\n-            logln(\"(a) \" + e.getMessage());\n+            System.out.println(\"(a) \" + e.getMessage());\n@@ -848,1 +865,1 @@\n-            errln(\"Failed. No exception has been thrown for DOM -1 endDay\");\n+            fail(\"Failed. No exception has been thrown for DOM -1 endDay\");\n@@ -850,1 +867,1 @@\n-            logln(\"(b) \" + e.getMessage());\n+            System.out.println(\"(b) \" + e.getMessage());\n@@ -854,1 +871,1 @@\n-            errln(\"Failed. No exception has been thrown for DOM -1 startDay +savings\");\n+            fail(\"Failed. No exception has been thrown for DOM -1 startDay +savings\");\n@@ -856,1 +873,1 @@\n-            logln(\"(c) \" + e.getMessage());\n+            System.out.println(\"(c) \" + e.getMessage());\n@@ -860,1 +877,1 @@\n-            errln(\"Failed. No exception has been thrown for DOM -1 endDay +savings\");\n+            fail(\"Failed. No exception has been thrown for DOM -1 endDay +savings\");\n@@ -862,1 +879,1 @@\n-            logln(\"(d) \" + e.getMessage());\n+            System.out.println(\"(d) \" + e.getMessage());\n@@ -868,1 +885,1 @@\n-            errln(\"Failed. No exception has been thrown for DOM -1 setStartRule +savings\");\n+            fail(\"Failed. No exception has been thrown for DOM -1 setStartRule +savings\");\n@@ -870,1 +887,1 @@\n-            logln(\"(e) \" + e.getMessage());\n+            System.out.println(\"(e) \" + e.getMessage());\n@@ -874,1 +891,1 @@\n-            errln(\"Failed. No exception has been thrown for DOM -1 setStartRule\");\n+            fail(\"Failed. No exception has been thrown for DOM -1 setStartRule\");\n@@ -876,1 +893,1 @@\n-            logln(\"(f) \" + e.getMessage());\n+            System.out.println(\"(f) \" + e.getMessage());\n@@ -880,1 +897,1 @@\n-            errln(\"Failed. No exception has been thrown for DOM -1 setEndRule +savings\");\n+            fail(\"Failed. No exception has been thrown for DOM -1 setEndRule +savings\");\n@@ -882,1 +899,1 @@\n-            logln(\"(g) \" + e.getMessage());\n+            System.out.println(\"(g) \" + e.getMessage());\n@@ -886,1 +903,1 @@\n-            errln(\"Failed. No exception has been thrown for DOM -1 setEndRule\");\n+            fail(\"Failed. No exception has been thrown for DOM -1 setEndRule\");\n@@ -888,1 +905,1 @@\n-            logln(\"(h) \" + e.getMessage());\n+            System.out.println(\"(h) \" + e.getMessage());\n@@ -896,0 +913,1 @@\n+    @Test\n@@ -908,1 +926,1 @@\n-            errln(\"FAILED: to get TimeZone.getOffset(2\/29\/96)\");\n+            fail(\"FAILED: to get TimeZone.getOffset(2\/29\/96)\");\n@@ -913,1 +931,1 @@\n-            errln(\"FAILED: TimeZone.getOffset(2\/29\/97) expected to throw Exception.\");\n+            fail(\"FAILED: TimeZone.getOffset(2\/29\/97) expected to throw Exception.\");\n@@ -915,1 +933,1 @@\n-            logln(\"got IllegalArgumentException\");\n+            System.out.println(\"got IllegalArgumentException\");\n@@ -924,0 +942,1 @@\n+    @Test\n@@ -948,1 +967,1 @@\n-                errln(\"wrong hour of day: got: \" + hourOfDay\n+                fail(\"wrong hour of day: got: \" + hourOfDay\n@@ -959,0 +978,1 @@\n+    @Test\n@@ -977,1 +997,1 @@\n-            errln(\"Should still be in DST.\");\n+            fail(\"Should still be in DST.\");\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneRegression.java","additions":101,"deletions":81,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @library \/java\/text\/testlib\n@@ -32,1 +31,1 @@\n- * @run main TimeZoneTest -verbose\n+ * @run junit TimeZoneTest\n@@ -40,1 +39,5 @@\n-public class TimeZoneTest extends IntlTest\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class TimeZoneTest\n@@ -44,4 +47,0 @@\n-    public static void main(String[] args) throws Exception {\n-        new TimeZoneTest().run(args);\n-    }\n-\n@@ -103,0 +102,1 @@\n+    @Test\n@@ -157,1 +157,1 @@\n-                logln(\"ok \" + referenceZone);\n+                System.out.println(\"ok \" + referenceZone);\n@@ -160,1 +160,1 @@\n-                errln(\"Fail: Expected \" + referenceZone +\n+                fail(\"Fail: Expected \" + referenceZone +\n@@ -244,0 +244,1 @@\n+    @Test\n@@ -274,1 +275,1 @@\n-                logln(id + \" -> generic GMT\");\n+                System.out.println(id + \" -> generic GMT\");\n@@ -286,1 +287,1 @@\n-                logln(id + \" -> \" + zone.getID() + \" GMT\" + offset);\n+                System.out.println(id + \" -> \" + zone.getID() + \" GMT\" + offset);\n@@ -313,0 +314,1 @@\n+    @Test\n@@ -316,1 +318,1 @@\n-        logln(\"PST->\" + name);\n+        System.out.println(\"PST->\" + name);\n@@ -318,1 +320,1 @@\n-            errln(\"Fail: Expected \\\"Pacific Standard Time\\\"\");\n+            fail(\"Fail: Expected \\\"Pacific Standard Time\\\"\");\n@@ -337,1 +339,1 @@\n-                errln(\"Fail: Expected \" + DATA[i+2] + \"; got \" + name);\n+                fail(\"Fail: Expected \" + DATA[i+2] + \"; got \" + name);\n@@ -345,1 +347,1 @@\n-        logln(\"Modified PST inDaylightTime->\" + zone2.inDaylightTime(new Date()));\n+        System.out.println(\"Modified PST inDaylightTime->\" + zone2.inDaylightTime(new Date()));\n@@ -347,1 +349,1 @@\n-        logln(\"Modified PST->\" + name);\n+        System.out.println(\"Modified PST->\" + name);\n@@ -349,1 +351,1 @@\n-            errln(\"Fail: Expected \\\"Pacific Standard Time\\\"\");\n+            fail(\"Fail: Expected \\\"Pacific Standard Time\\\"\");\n@@ -360,1 +362,1 @@\n-        logln(\"PST(zh_CN)->\" + name);\n+        System.out.println(\"PST(zh_CN)->\" + name);\n@@ -372,1 +374,1 @@\n-            logln(\"Warning: Not testing the zh_CN behavior because resource is absent\");\n+            System.out.println(\"Warning: Not testing the zh_CN behavior because resource is absent\");\n@@ -374,1 +376,1 @@\n-                errln(\"Fail: Expected Pacific Standard Time\");\n+                fail(\"Fail: Expected Pacific Standard Time\");\n@@ -383,4 +385,4 @@\n-            errln(\"Fail: Expected GMT-08:00 or something similar\");\n-            errln(\"************************************************************\");\n-            errln(\"THE ABOVE FAILURE MAY JUST MEAN THE LOCALE DATA HAS CHANGED\");\n-            errln(\"************************************************************\");\n+            fail(\"Fail: Expected GMT-08:00 or something similar\\n\"\n+            + \"************************************************************\\n\"\n+            + \"THE ABOVE FAILURE MAY JUST MEAN THE LOCALE DATA HAS CHANGED\\n\"\n+            + \"************************************************************\\n\");\n@@ -392,1 +394,1 @@\n-        logln(\"GMT+90min->\" + name);\n+        System.out.println(\"GMT+90min->\" + name);\n@@ -397,1 +399,1 @@\n-            errln(\"Fail: Expected GMT+01:30 or something similar\");\n+            fail(\"Fail: Expected GMT+01:30 or something similar\");\n@@ -400,0 +402,1 @@\n+    @Test\n@@ -406,1 +409,1 @@\n-            errln(\"FAIL: useDaylightTime should return false\");\n+            fail(\"FAIL: useDaylightTime should return false\");\n@@ -411,1 +414,1 @@\n-            errln(\"FAIL: clone or operator== failed\");\n+            fail(\"FAIL: clone or operator== failed\");\n@@ -415,1 +418,1 @@\n-            errln(\"FAIL: clone or operator!= failed\");\n+            fail(\"FAIL: clone or operator!= failed\");\n@@ -420,1 +423,1 @@\n-            errln(\"FAIL: clone or operator== failed\");\n+            fail(\"FAIL: clone or operator== failed\");\n@@ -424,1 +427,1 @@\n-            errln(\"FAIL: clone or operator!= failed\");\n+            fail(\"FAIL: clone or operator!= failed\");\n@@ -432,1 +435,1 @@\n-                errln(\"FAIL: Default object is identical, not clone\");\n+                fail(\"FAIL: Default object is identical, not clone\");\n@@ -435,1 +438,1 @@\n-                errln(\"FAIL: Default object is not equal\");\n+                fail(\"FAIL: Default object is not equal\");\n@@ -444,0 +447,1 @@\n+    @Test\n@@ -450,1 +454,1 @@\n-        if (zone.useDaylightTime()) errln(\"FAIL: useDaylightTime should return false\");\n+        if (zone.useDaylightTime()) fail(\"FAIL: useDaylightTime should return false\");\n@@ -478,1 +482,1 @@\n-            errln(\"FAIL: Expected start computed as \" + marchOne +\n+            fail(\"FAIL: Expected start computed as \" + marchOne +\n@@ -480,1 +484,1 @@\n-            logln(\"      Should be                  \" + expMarchOne +\n+            System.out.println(\"      Should be                  \" + expMarchOne +\n@@ -487,1 +491,1 @@\n-            errln(\"FAIL: Expected start computed as \" + julyOne +\n+            fail(\"FAIL: Expected start computed as \" + julyOne +\n@@ -489,1 +493,1 @@\n-            logln(\"      Should be                  \" + expJulyOne +\n+            System.out.println(\"      Should be                  \" + expJulyOne +\n@@ -500,1 +504,1 @@\n-            errln(\"FAIL: Start rule broken\");\n+            fail(\"FAIL: Start rule broken\");\n@@ -503,1 +507,1 @@\n-            errln(\"FAIL: End rule broken\");\n+            fail(\"FAIL: End rule broken\");\n@@ -508,1 +512,1 @@\n-            errln(\"FAIL: Start year broken\");\n+            fail(\"FAIL: Start year broken\");\n@@ -521,1 +525,1 @@\n-            logln(\"Error: inDaylightTime(\" + new Date(max) + \") != \" + (!startsInDST));\n+            System.out.println(\"Error: inDaylightTime(\" + new Date(max) + \") != \" + (!startsInDST));\n@@ -535,2 +539,2 @@\n-        logln(\"Binary Search Before: \" + min + \" = \" + new Date(min));\n-        logln(\"Binary Search After:  \" + max + \" = \" + new Date(max));\n+        System.out.println(\"Binary Search Before: \" + min + \" = \" + new Date(min));\n+        System.out.println(\"Binary Search After:  \" + max + \" = \" + new Date(max));\n@@ -543,1 +547,1 @@\n-            logln(\"PASS: Expected bdry:  \" + expectedBoundary + \" = \" + new Date(expectedBoundary));\n+            System.out.println(\"PASS: Expected bdry:  \" + expectedBoundary + \" = \" + new Date(expectedBoundary));\n@@ -545,1 +549,1 @@\n-            errln(\"FAIL: Expected bdry:  \" + expectedBoundary + \" = \" + new Date(expectedBoundary));\n+            fail(\"FAIL: Expected bdry:  \" + expectedBoundary + \" = \" + new Date(expectedBoundary));\n@@ -551,0 +555,1 @@\n+    @Test\n@@ -555,1 +560,1 @@\n-            errln( \"FAIL: TimeZone(PRT) is null\" );\n+            fail( \"FAIL: TimeZone(PRT) is null\" );\n@@ -559,1 +564,1 @@\n-                errln(\"FAIL: Offset for PRT should be -4\");\n+                fail(\"FAIL: Offset for PRT should be -4\");\n@@ -566,0 +571,1 @@\n+    @Test\n@@ -571,1 +577,1 @@\n-        logln(\"The timezone is \" + time_zone.getID());\n+        System.out.println(\"The timezone is \" + time_zone.getID());\n@@ -574,1 +580,1 @@\n-            errln(\"FAIL: inDaylightTime returned false\");\n+            fail(\"FAIL: inDaylightTime returned false\");\n@@ -577,1 +583,1 @@\n-            errln(\"FAIL: useDaylightTime returned false\");\n+            fail(\"FAIL: useDaylightTime returned false\");\n@@ -580,1 +586,1 @@\n-            errln( \"FAIL: getRawOffset returned wrong value\");\n+            fail( \"FAIL: getRawOffset returned wrong value\");\n@@ -588,1 +594,1 @@\n-            errln(\"FAIL: getOffset returned wrong value\");\n+            fail(\"FAIL: getOffset returned wrong value\");\n@@ -592,0 +598,1 @@\n+    @Test\n@@ -602,1 +609,1 @@\n-        logln(buf.toString());\n+        System.out.println(buf.toString());\n@@ -613,1 +620,1 @@\n-        logln(buf.toString());\n+        System.out.println(buf.toString());\n@@ -617,1 +624,1 @@\n-            logln(\"getTimeZone(PST) = \" + tz.getID());\n+            System.out.println(\"getTimeZone(PST) = \" + tz.getID());\n@@ -619,1 +626,1 @@\n-            errln(\"FAIL: getTimeZone(PST) = null\");\n+            fail(\"FAIL: getTimeZone(PST) = null\");\n@@ -623,1 +630,1 @@\n-            logln(\"getTimeZone(America\/Los_Angeles) = \" + tz.getID());\n+            System.out.println(\"getTimeZone(America\/Los_Angeles) = \" + tz.getID());\n@@ -625,1 +632,1 @@\n-            errln(\"FAIL: getTimeZone(PST) = null\");\n+            fail(\"FAIL: getTimeZone(PST) = null\");\n@@ -630,1 +637,1 @@\n-            errln(\"FAIL: getTimeZone(NON_EXISTENT) = null\");\n+            fail(\"FAIL: getTimeZone(NON_EXISTENT) = null\");\n@@ -632,1 +639,1 @@\n-            errln(\"FAIL: getTimeZone(NON_EXISTENT) = \" + tz.getID());\n+            fail(\"FAIL: getTimeZone(NON_EXISTENT) = \" + tz.getID());\n@@ -638,0 +645,1 @@\n+    @Test\n@@ -647,1 +655,1 @@\n-            errln(\"Got back a raw offset of \" + (tz.getRawOffset() \/ millisPerHour) +\n+            fail(\"Got back a raw offset of \" + (tz.getRawOffset() \/ millisPerHour) +\n@@ -650,1 +658,1 @@\n-            errln(\"Test time zone should use DST but claims it doesn't.\");\n+            fail(\"Test time zone should use DST but claims it doesn't.\");\n@@ -652,1 +660,1 @@\n-            errln(\"Set DST offset to 0.5 hour, but got back \" + (tz.getDSTSavings() \/\n+            fail(\"Set DST offset to 0.5 hour, but got back \" + (tz.getDSTSavings() \/\n@@ -658,1 +666,1 @@\n-            errln(\"The offset for 10 AM, 1\/1\/98 should have been -5 hours, but we got \"\n+            fail(\"The offset for 10 AM, 1\/1\/98 should have been -5 hours, but we got \"\n@@ -664,1 +672,1 @@\n-            errln(\"The offset for 10 AM, 6\/1\/98 should have been -4.5 hours, but we got \"\n+            fail(\"The offset for 10 AM, 6\/1\/98 should have been -4.5 hours, but we got \"\n@@ -671,1 +679,1 @@\n-            errln(\"The offset for 10 AM, 1\/1\/98 should have been -5 hours, but we got \"\n+            fail(\"The offset for 10 AM, 1\/1\/98 should have been -5 hours, but we got \"\n@@ -677,1 +685,1 @@\n-            errln(\"The offset for 10 AM, 6\/1\/98 (with a 1-hour DST offset) should have been -4 hours, but we got \"\n+            fail(\"The offset for 10 AM, 6\/1\/98 (with a 1-hour DST offset) should have been -4 hours, but we got \"\n@@ -684,0 +692,1 @@\n+    @Test\n@@ -698,1 +707,1 @@\n-            errln(\"The offset for 10AM, 3\/5\/98 should have been -5 hours, but we got \"\n+            fail(\"The offset for 10AM, 3\/5\/98 should have been -5 hours, but we got \"\n@@ -704,1 +713,1 @@\n-            errln(\"The offset for 10AM, 3\/15\/98 should have been -4 hours, but we got \"\n+            fail(\"The offset for 10AM, 3\/15\/98 should have been -4 hours, but we got \"\n@@ -710,1 +719,1 @@\n-            errln(\"The offset for 10AM, 10\/15\/98 should have been -4 hours, but we got \"\n+            fail(\"The offset for 10AM, 10\/15\/98 should have been -4 hours, but we got \"\n@@ -716,1 +725,1 @@\n-            errln(\"The offset for 10AM, 10\/25\/98 should have been -5 hours, but we got \"\n+            fail(\"The offset for 10AM, 10\/25\/98 should have been -5 hours, but we got \"\n@@ -726,1 +735,1 @@\n-            errln(\"The offset for 10AM, 3\/11\/98 should have been -5 hours, but we got \"\n+            fail(\"The offset for 10AM, 3\/11\/98 should have been -5 hours, but we got \"\n@@ -732,1 +741,1 @@\n-            errln(\"The offset for 10AM, 3\/14\/98 should have been -4 hours, but we got \"\n+            fail(\"The offset for 10AM, 3\/14\/98 should have been -4 hours, but we got \"\n@@ -738,1 +747,1 @@\n-            errln(\"The offset for 10AM, 10\/15\/98 should have been -4 hours, but we got \"\n+            fail(\"The offset for 10AM, 10\/15\/98 should have been -4 hours, but we got \"\n@@ -744,1 +753,1 @@\n-            errln(\"The offset for 10AM, 10\/17\/98 should have been -5 hours, but we got \"\n+            fail(\"The offset for 10AM, 10\/17\/98 should have been -5 hours, but we got \"\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneTest.java","additions":85,"deletions":76,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @library \/java\/text\/testlib\n@@ -29,0 +28,1 @@\n+ * @run junit TransitionTest\n@@ -39,1 +39,1 @@\n-public class TransitionTest extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -41,3 +41,3 @@\n-    public static void main(String[] args) throws Exception {\n-        new TransitionTest().run(args);\n-    }\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class TransitionTest {\n@@ -45,0 +45,1 @@\n+    @Test\n@@ -80,1 +81,1 @@\n-            errln(\"Wrong DST transition: \" + tz\n+            fail(\"Wrong DST transition: \" + tz\n@@ -91,0 +92,1 @@\n+    @Test\n@@ -124,1 +126,1 @@\n-            errln(\"test#1: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n+            fail(\"test#1: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n@@ -153,1 +155,1 @@\n-            errln(\"Wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n+            fail(\"Wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n@@ -182,1 +184,1 @@\n-            errln(\"test#2: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n+            fail(\"test#2: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n@@ -212,1 +214,1 @@\n-            errln(\"test#3: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n+            fail(\"test#3: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n@@ -246,1 +248,1 @@\n-            errln(\"test#4: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n+            fail(\"test#4: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n@@ -275,1 +277,1 @@\n-            errln(\"test#5: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n+            fail(\"test#5: wrong offset: got \"+offset+\", expected=\"+expectedOffset);\n","filename":"test\/jdk\/java\/util\/TimeZone\/TransitionTest.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1,228 +0,0 @@\n-\/*\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.reflect.*;\n-import java.util.Hashtable;\n-import java.util.Enumeration;\n-import java.util.Vector;\n-import java.io.*;\n-import java.text.*;\n-\n-\/**\n- * IntlTest is a base class for tests that can be run conveniently from\n- * the command line as well as under the Java test harness.\n- * <p>\n- * Sub-classes implement a set of methods named Test<something>. Each\n- * of these methods performs some test. Test methods should indicate\n- * errors by calling either err or errln.  This will increment the\n- * errorCount field and may optionally print a message to the log.\n- * Debugging information may also be added to the log via the log\n- * and logln methods.  These methods will add their arguments to the\n- * log only if the test is being run in verbose mode.\n- *\/\n-public class IntlTest {\n-\n-    \/\/------------------------------------------------------------------------\n-    \/\/ Everything below here is boilerplate code that makes it possible\n-    \/\/ to add a new test by simply adding a function to an existing class\n-    \/\/------------------------------------------------------------------------\n-\n-    protected IntlTest() {\n-        \/\/ Create a hashtable containing all the test methods.\n-        testMethods = new Hashtable();\n-        Method[] methods = getClass().getDeclaredMethods();\n-        for( int i=0; i<methods.length; i++ ) {\n-            if( methods[i].getName().startsWith(\"Test\") ) {\n-                testMethods.put( methods[i].getName(), methods[i] );\n-            }\n-        }\n-    }\n-\n-    protected void run(String[] args) throws Exception\n-    {\n-        System.out.println(getClass().getName() + \" {\");\n-        indentLevel++;\n-\n-        \/\/ Set up the log and reference streams.  We use PrintWriters in order to\n-        \/\/ take advantage of character conversion.  The JavaEsc converter will\n-        \/\/ convert Unicode outside the ASCII range to Java's \\\\uxxxx notation.\n-        log = new PrintWriter(System.out,true);\n-\n-        \/\/ Parse the test arguments.  They can be either the flag\n-        \/\/ \"-verbose\" or names of test methods. Create a list of\n-        \/\/ tests to be run.\n-        Vector testsToRun = new Vector( args.length );\n-        for( int i=0; i<args.length; i++ ) {\n-            if( args[i].equals(\"-verbose\") ) {\n-                verbose = true;\n-            }\n-            else if( args[i].equals(\"-prompt\") ) {\n-                prompt = true;\n-            } else if (args[i].equals(\"-nothrow\")) {\n-                nothrow = true;\n-            } else {\n-                Object m = testMethods.get( args[i] );\n-                if( m != null ) {\n-                    testsToRun.addElement( m );\n-                }\n-                else {\n-                    usage();\n-                    return;\n-                }\n-            }\n-        }\n-\n-        \/\/ If no test method names were given explicitly, run them all.\n-        if( testsToRun.size() == 0 ) {\n-            Enumeration methodNames = testMethods.elements();\n-            while( methodNames.hasMoreElements() ) {\n-                testsToRun.addElement( methodNames.nextElement() );\n-            }\n-        }\n-\n-        \/\/ Run the list of tests given in the test arguments\n-        for( int i=0; i<testsToRun.size(); i++ ) {\n-            int oldCount = errorCount;\n-\n-            Method testMethod = (Method)testsToRun.elementAt(i);\n-            writeTestName(testMethod.getName());\n-\n-            try {\n-                testMethod.invoke(this, new Object[0]);\n-            }\n-            catch( IllegalAccessException e ) {\n-                errln(\"Can't acces test method \" + testMethod.getName());\n-            }\n-            catch( InvocationTargetException e ) {\n-                errln(\"Uncaught exception thrown in test method \"\n-                               + testMethod.getName());\n-                e.getTargetException().printStackTrace(this.log);\n-            }\n-            writeTestResult(errorCount - oldCount);\n-        }\n-        indentLevel--;\n-        writeTestResult(errorCount);\n-\n-        if (prompt) {\n-            System.out.println(\"Hit RETURN to exit...\");\n-            try {\n-                System.in.read();\n-            }\n-            catch (IOException e) {\n-                System.out.println(\"Exception: \" + e.toString() + e.getMessage());\n-            }\n-        }\n-        if (nothrow) {\n-            System.exit(errorCount);\n-        }\n-    }\n-\n-    \/**\n-     * Adds given string to the log if we are in verbose mode.\n-     *\/\n-    protected void log( String message ) {\n-        if( verbose ) {\n-            indent(indentLevel + 1);\n-            log.print( message );\n-        }\n-    }\n-\n-    protected void logln( String message ) {\n-        log(message + System.getProperty(\"line.separator\"));\n-    }\n-\n-    \/**\n-     * Report an error\n-     *\/\n-    protected void err( String message ) {\n-        errorCount++;\n-        indent(indentLevel + 1);\n-        log.print( message );\n-        log.flush();\n-\n-        if (!nothrow) {\n-            throw new RuntimeException(message);\n-        }\n-    }\n-\n-    protected void errln( String message ) {\n-        err(message + System.getProperty(\"line.separator\"));\n-    }\n-\n-\n-    protected void writeTestName(String testName) {\n-        indent(indentLevel);\n-        log.print(testName);\n-        log.flush();\n-        needLineFeed = true;\n-    }\n-\n-    protected void writeTestResult(int count) {\n-        if (!needLineFeed) {\n-            indent(indentLevel);\n-            log.print(\"}\");\n-        }\n-        needLineFeed = false;\n-\n-        if (count != 0)\n-            log.println(\" FAILED\");\n-        else\n-            log.println(\" Passed\");\n-    }\n-\n-    private final void indent(int distance) {\n-        if (needLineFeed) {\n-            log.println(\" {\");\n-            needLineFeed = false;\n-        }\n-        log.print(spaces.substring(0, distance * 2));\n-    }\n-\n-    \/**\n-     * Print a usage message for this test class.\n-     *\/\n-    void usage() {\n-        System.out.println(getClass().getName() +\n-                            \": [-verbose] [-nothrow] [-prompt] [test names]\");\n-\n-        System.out.println(\"test names:\");\n-        Enumeration methodNames = testMethods.keys();\n-        while( methodNames.hasMoreElements() ) {\n-            System.out.println(\"\\t\" + methodNames.nextElement() );\n-        }\n-    }\n-\n-    private boolean     prompt = false;\n-    private boolean     nothrow = false;\n-    protected boolean   verbose = false;\n-\n-    private PrintWriter log;\n-    private int         indentLevel = 0;\n-    private boolean     needLineFeed = false;\n-    private int         errorCount = 0;\n-\n-    private Hashtable testMethods;\n-    private final String spaces = \"                                          \";\n-}\n-\n-\/\/eof\n","filename":"test\/jdk\/sun\/util\/resources\/TimeZone\/IntlTest.java","additions":0,"deletions":228,"binary":false,"changes":228,"status":"deleted"}]}