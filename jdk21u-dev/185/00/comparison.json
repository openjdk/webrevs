{"files":[{"patch":"@@ -111,1 +111,1 @@\n-runtime\/ErrorHandling\/TestDwarf.java 8305489 linux-all\n+runtime\/ErrorHandling\/TestDwarf.java#checkDecoder 8305489 linux-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=checkDecoder\n@@ -33,1 +33,9 @@\n- * @run main\/native\/othervm -Xbootclasspath\/a:. -XX:-CreateCoredumpOnCrash TestDwarf\n+ * @run main\/native\/othervm -Xbootclasspath\/a:. -XX:-CreateCoredumpOnCrash -DcheckDecoder=true TestDwarf\n+ *\/\n+\n+\/*\n+ * @test id=dontCheckDecoder\n+ * @library \/ \/test\/lib\n+ * @requires vm.debug == true & vm.flagless & vm.compMode != \"Xint\" & os.family == \"linux\" & !vm.graal.enabled & vm.gc.G1\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main\/native\/othervm -Xbootclasspath\/a:. -XX:-CreateCoredumpOnCrash -DcheckDecoder=false TestDwarf\n@@ -58,0 +66,2 @@\n+    static boolean checkDecoder = Boolean.getBoolean(\"checkDecoder\");\n+\n@@ -121,0 +131,7 @@\n+    \/\/ The full pattern accepts lines like:\n+    \/\/  V [libjvm.so+0x8f4ed8] report_fatal(VMErrorType, char const*, int, char const*, ...)+0x78 (debug.cpp:212)\n+    \/\/ but if the decoder is not available we only get\n+    \/\/  V [libjvm.so+0x8f4ed8] (debug.cpp:212)\n+    private static final String FULL_PATTERN =\"[CV][\\\\s\\\\t]+\\\\[([a-zA-Z0-9_.]+)\\\\+0x.+][\\\\s\\\\t]+.*\\\\+0x.+[\\\\s\\\\t]+\\\\([a-zA-Z0-9_.]+\\\\.[a-z]+:[1-9][0-9]*\\\\)\";\n+    private static final String NO_DECODER_PATTERN =\"[CV][\\\\s\\\\t]+\\\\[([a-zA-Z0-9_.]+)\\\\+0x.+].*\\\\([a-zA-Z0-9_.]+\\\\.[a-z]+:[1-9][0-9]*\\\\)\";\n+\n@@ -135,1 +152,3 @@\n-            Pattern pattern = Pattern.compile(\"[CV][\\\\s\\\\t]+\\\\[([a-zA-Z0-9_.]+)\\\\+0x.+][\\\\s\\\\t]+.*\\\\+0x.+[\\\\s\\\\t]+\\\\([a-zA-Z0-9_.]+\\\\.[a-z]+:[1-9][0-9]*\\\\)\");\n+\n+            Pattern pattern = Pattern.compile(checkDecoder ? FULL_PATTERN : NO_DECODER_PATTERN);\n+\n@@ -150,1 +169,1 @@\n-                            checkNoSourceLine(crashOutputString, line);\n+                            checkMissingElement(crashOutputString, line);\n@@ -171,1 +190,2 @@\n-     * There are some valid cases where we cannot find source information. Check these.\n+     * After we failed to match the pattern, try to determine what element was missing.\n+     * There are some valid cases where we cannot find source information.\n@@ -173,1 +193,2 @@\n-    private static void checkNoSourceLine(String crashOutputString, String line) {\n+    private static void checkMissingElement(String crashOutputString, String line) {\n+        \/\/ First check if we got the library name.\n@@ -177,0 +198,1 @@\n+\n@@ -184,0 +206,8 @@\n+            \/\/ Symbols were fine so check if we expected decoder output and didn't find it.\n+            if (checkDecoder) {\n+                pattern = Pattern.compile(NO_DECODER_PATTERN);\n+                matcher = pattern.matcher(line);\n+                if (matcher.find()) {\n+                    Asserts.fail(\"Could not find decoded method signature in \\\"\" + line + \"\\\"\");\n+                }\n+            }\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestDwarf.java","additions":36,"deletions":6,"binary":false,"changes":42,"status":"modified"}]}