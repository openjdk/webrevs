{"files":[{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @summary Test dynamically changing frame component visibility and repacking\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrameRepackTest\n+ *\/\n+\n+public class FrameRepackTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            There is a green frame with a menubar.\n+            The menubar has one menu, labelled 'Flip'.\n+            The menu has two items, labelled 'visible' and 'not visible'.\n+            The frame also contains a red panel that contains two line labels,\n+            'This panel is always displayed' and 'it is a test'.\n+\n+            If you select the menu item 'Flip->visible', then another panel is\n+            added below the red panel.\n+            The added panel is blue and has yellow horizontal and vertical scrollbars.\n+\n+            If you select menu item 'Flip->not visible', the second panel\n+            is removed and the frame appears as it did originally.\n+\n+            You can repeatedly add and remove the second panel in this way.\n+            After such an addition or removal, the frame's location on the screen\n+            should not change, while the size changes to accommodate\n+            either just the red panel or both the red and the blue panels.\n+\n+            If you resize the frame larger, the red panel remains at the\n+            top of the frame with its height fixed and its width adjusted\n+            to the width of the frame.\n+\n+            Similarly, if it is present, the blue panel and its yellow scroolbars\n+            remain at the bottom of the frame with fixed height and width adjusted\n+            to the size of the frame.  But selecting 'visible' or 'not visible'\n+            repacks the frame, thereby adjusting its size tightly to its panel(s).\n+\n+            Upon test completion, click Pass or Fail appropriately.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"FrameRepackTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(30)\n+                .columns(45)\n+                .build();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            FrameRepack frame = new FrameRepack();\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+}\n+\n+class FrameRepack extends Frame implements ActionListener {\n+\n+    Panel south;\n+\n+    public FrameRepack() {\n+        super(\"FrameRepack\");\n+\n+        \/\/ create the menubar\n+        MenuBar menubar = new MenuBar();\n+        this.setMenuBar(menubar);\n+        \/\/ create the options\n+        Menu flip = new Menu(\"Flip\");\n+        MenuItem mi;\n+        mi = new MenuItem(\"visible\");\n+        mi.addActionListener(this);\n+        flip.add(mi);\n+        mi = new MenuItem(\"not visible\");\n+        mi.addActionListener(this);\n+        flip.add(mi);\n+\n+        menubar.add(flip);\n+\n+        setLayout(new BorderLayout(2, 2));\n+        setBackground(Color.green);\n+\n+        \/\/ north panel is always displayed\n+        Panel north = new Panel();\n+        north.setBackground(Color.red);\n+        north.setLayout(new BorderLayout(2, 2));\n+        north.add(\"North\", new Label(\"This panel is always displayed\"));\n+        north.add(\"Center\", new Label(\"it is a test\"));\n+        north.setSize(200, 200);\n+        add(\"North\", north);\n+\n+        \/\/ south panel can be visible or not...\n+        \/\/ The problem seems to occur when I put this panel not visible\n+        south = new Panel();\n+        south.setBackground(Color.white);\n+        south.setLayout(new BorderLayout());\n+\n+        ScrollPane scroller = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+        scroller.setBackground(Color.yellow);\n+        Panel pan1 = new Panel();\n+        pan1.setBackground(Color.blue);\n+        pan1.setLayout(new BorderLayout());\n+\n+        pan1.setSize(400, 150);\n+        scroller.add(\"Center\", pan1);\n+\n+        south.add(\"South\", scroller);\n+\n+        add(\"South\", south);\n+\n+        south.setVisible(false);\n+\n+        setSize(350, 300);\n+\n+        pack();\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent evt) {\n+        if (evt.getSource() instanceof MenuItem) {\n+            if (evt.getActionCommand().equals(\"visible\")) {\n+                south.setVisible(true);\n+                pack();\n+            } else if (evt.getActionCommand().equals(\"not visible\")) {\n+                south.setVisible(false);\n+                pack();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameRepackTest.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+\n+\/*\n+ * @test\n+ * @bug 4041442\n+ * @key headful\n+ * @summary Test resizing a frame containing a canvas\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrameResizeTest_1\n+ *\/\n+\n+public class FrameResizeTest_1 {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        To the right of this frame is an all-white 200x200 frame.\n+\n+        This is actually a white canvas component in the frame.\n+        The frame itself is red.\n+        The red should never show.\n+        In particular, after you resize the frame, you should see all white and no red.\n+        (During very fast window resizing, red color may appear briefly,\n+        which is not a failure.)\n+\n+        Upon test completion, click Pass or Fail appropriately.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"FrameResizeTest_1 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(12)\n+                .columns(45)\n+                .build();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            FrameResize_1 frame = new FrameResize_1();\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n+class FrameResize_1 extends Frame {\n+\n+    FrameResize_1() {\n+        super(\"FrameResize_1\");\n+        \/\/ Create a white canvas\n+        Canvas canvas = new Canvas();\n+        canvas.setBackground(Color.white);\n+\n+        setLayout(new BorderLayout());\n+        add(\"Center\", canvas);\n+\n+        setBackground(Color.red);\n+        setSize(200,200);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameResizeTest\/FrameResizeTest_1.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Panel;\n+\n+\/*\n+ * @test\n+ * @bug 4065568\n+ * @key headful\n+ * @summary Test resizing a frame containing a canvas\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrameResizeTest_2\n+ *\/\n+\n+public class FrameResizeTest_2 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+        There is a frame (size 300x300).\n+        The left half is red and the right half is blue.\n+\n+        When you resize the frame, it should still have a red left half\n+        and a blue right half.\n+\n+        In particular, no green should be visible after a resize.\n+\n+        Upon test completion, click Pass or Fail appropriately.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"FrameResizeTest_2 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(10)\n+                .columns(45)\n+                .build();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            FrameResize_2 frame = new FrameResize_2();\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n+class FrameResize_2 extends Frame {\n+\n+    FrameResize_2() {\n+        super(\"FrameResize_2\");\n+\n+        setLayout(new GridBagLayout());\n+\n+        GridBagConstraints c = new GridBagConstraints();\n+        c.fill = GridBagConstraints.BOTH;\n+        c.weightx = 1;\n+        c.weighty = 1;\n+\n+        Container dumbContainer = new DumbContainer();\n+        add(dumbContainer, c);\n+\n+        Panel dumbPanel = new DumbPanel();\n+        add(dumbPanel, c);\n+\n+        setSize(300, 300);\n+    }\n+}\n+\n+\n+class Fake extends Canvas {\n+    public Fake(String name, Color what) {\n+        setBackground(what);\n+        setName(name);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension d = getSize();\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, d.width, d.height);\n+    }\n+}\n+\n+class DumbContainer extends Container {\n+    public DumbContainer() {\n+        setLayout(new BorderLayout());\n+        add(\"Center\", new Fake(\"dumbc\", Color.red));\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension d = getSize();\n+        g.setColor(Color.green);\n+        g.fillRect(0, 0, d.width, d.height);\n+        super.paint(g);\n+    }\n+}\n+\n+class DumbPanel extends Panel {\n+    public DumbPanel() {\n+        setLayout(new BorderLayout());\n+        add(\"Center\", new Fake(\"dumbp\", Color.blue));\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension d = getSize();\n+        g.setColor(Color.green);\n+        g.fillRect(0, 0, d.width, d.height);\n+        super.paint(g);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameResizeTest\/FrameResizeTest_2.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+\/*\n+ * @test\n+ * @bug 4077874\n+ * @key headful\n+ * @summary Test window position at opening, closing, and closed for consistency\n+ *\/\n+\n+public class WindowMoveTest {\n+\n+    static WindowMove frame;\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.setAutoWaitForIdle(true);\n+\n+        EventQueue.invokeAndWait(() -> frame = new WindowMove());\n+\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+\n+        EventQueue.invokeAndWait(() ->\n+                frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING)));\n+\n+        if (!WindowMove.latch.await(2, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Test timeout.\");\n+        }\n+\n+        if (WindowMove.failMessage != null) {\n+            throw new RuntimeException(WindowMove.failMessage);\n+        }\n+    }\n+}\n+\n+class WindowMove extends Frame implements WindowListener {\n+    static final Rectangle expectedBounds =\n+            new Rectangle(100, 100, 300, 300);\n+\n+    static CountDownLatch latch = new CountDownLatch(1);\n+    static String failMessage = null;\n+\n+    private boolean layoutCheck;\n+    private boolean visibleCheck;\n+    private boolean openedCheck;\n+    private boolean closingCheck;\n+    private boolean closedCheck;\n+\n+    public WindowMove() {\n+        super(\"WindowMove\");\n+        addWindowListener(this);\n+\n+        setSize(300, 300);\n+        setLocation(100, 100);\n+        setBackground(Color.white);\n+\n+        setLayout(null);\n+        if (checkBounds()) {\n+            layoutCheck = true;\n+        }\n+        System.out.println(\"setLayout bounds: \" + getBounds());\n+\n+        setVisible(true);\n+        if (checkBounds()) {\n+            visibleCheck = true;\n+        }\n+        System.out.println(\"setVisible bounds: \" + getBounds());\n+    }\n+\n+    private boolean checkBounds() {\n+        return getBounds().equals(expectedBounds);\n+    }\n+\n+    public void checkResult() {\n+        if (layoutCheck\n+                && visibleCheck\n+                && openedCheck\n+                && closingCheck\n+                && closedCheck) {\n+            System.out.println(\"Test passed.\");\n+        } else {\n+            failMessage = \"\"\"\n+                    Some of the checks failed:\n+                    layoutCheck %s\n+                    visibleCheck %s\n+                    openedCheck %s\n+                    closingCheck %s\n+                    closedCheck %s\n+                    \"\"\"\n+                    .formatted(\n+                            layoutCheck,\n+                            visibleCheck,\n+                            openedCheck,\n+                            closingCheck,\n+                            closedCheck\n+                    );\n+        }\n+\n+        latch.countDown();\n+    }\n+\n+    public void windowClosing(WindowEvent evt) {\n+        if (checkBounds()) {\n+            closingCheck = true;\n+        }\n+        System.out.println(\"Closing bounds: \" + getBounds());\n+\n+        setVisible(false);\n+        dispose();\n+    }\n+\n+    public void windowClosed(WindowEvent evt) {\n+        if (checkBounds()) {\n+            closedCheck = true;\n+        }\n+        System.out.println(\"Closed bounds: \" + getBounds());\n+\n+        checkResult();\n+    }\n+\n+    public void windowOpened(WindowEvent evt) {\n+        if (checkBounds()) {\n+            openedCheck = true;\n+        }\n+        System.out.println(\"Opening bounds: \" + getBounds());\n+    }\n+\n+    public void windowActivated(WindowEvent evt) {}\n+\n+    public void windowIconified(WindowEvent evt) {}\n+\n+    public void windowDeactivated(WindowEvent evt) {}\n+\n+    public void windowDeiconified(WindowEvent evt) {}\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/WindowMoveTest.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"}]}