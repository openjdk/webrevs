{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n@@ -70,1 +68,1 @@\n-        int ec = SimpleFileServerImpl.start(new PrintWriter(System.out, true, UTF_8), \"jwebserver\", args);\n+        int ec = SimpleFileServerImpl.start(new PrintWriter(System.out, true), \"jwebserver\", args);\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/JWebServer.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -64,1 +63,1 @@\n-        int ec = SimpleFileServerImpl.start(new PrintWriter(System.out, true, UTF_8), \"java\", args);\n+        int ec = SimpleFileServerImpl.start(new PrintWriter(System.out, true), \"java\", args);\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/Main.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.net.Inet6Address;\n@@ -172,0 +173,7 @@\n+            if (inetAddr instanceof Inet6Address && addr.contains(\":\") && !addr.startsWith(\"[\")) {\n+                \/\/ we use the \"addr\" when printing the URL, so make sure it\n+                \/\/ conforms to RFC-2732, section 2:\n+                \/\/ To use a literal IPv6 address in a URL, the literal\n+                \/\/ address should be enclosed in \"[\" and \"]\" characters.\n+                addr = \"[\" + addr + \"]\";\n+            }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerImpl.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+    static final String LOCALE_OPT = \"-Duser.language=en -Duser.country=US\";\n@@ -77,1 +78,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt)\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt)\n@@ -100,1 +101,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, arg, arg)\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, arg, arg)\n@@ -127,1 +128,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt)\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt)\n@@ -151,1 +152,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, val)\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, val)\n@@ -162,1 +163,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"65536\")  \/\/ range 0 to 65535\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, \"65536\")  \/\/ range 0 to 65535\n@@ -175,1 +176,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, root.toString())\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, root.toString())\n@@ -185,1 +186,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, file)\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, file)\n@@ -195,1 +196,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, root.toString())\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, root.toString())\n@@ -212,1 +213,1 @@\n-            simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, root.toString())\n+            simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, root.toString())\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLineNegativeTest.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+    static final String LOCALE_OPT = \"-Duser.language=en -Duser.country=US\";\n@@ -87,1 +88,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\")\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\")\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePortNotSpecifiedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+    static final String LOCALE_OPT = \"-Duser.language=en -Duser.country=US\";\n@@ -87,1 +88,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, TEST_DIR_STR)\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, TEST_DIR_STR)\n@@ -100,1 +101,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"0\")\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, \"0\")\n@@ -131,1 +132,1 @@\n-                     JAVA, \"-m\", \"jdk.httpserver\", opt)\n+                     JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt)\n@@ -145,1 +146,1 @@\n-                JAVA, \"-m\", \"jdk.httpserver\", opt)\n+                JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt)\n@@ -155,1 +156,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, \"0.0.0.0\")\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, \"0.0.0.0\")\n@@ -160,1 +161,1 @@\n-            simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"::0\")\n+            simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, \"::0\")\n@@ -170,1 +171,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, \"123.4.5.6\", opt, LOOPBACK_ADDR)\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, \"123.4.5.6\", opt, LOOPBACK_ADDR)\n@@ -180,1 +181,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, TEST_DIR_STR, opt, TEST_DIR_STR)\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, TEST_DIR_STR, opt, TEST_DIR_STR)\n@@ -193,1 +194,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, \"none\", opt, \"verbose\")\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, \"none\", opt, \"verbose\")\n@@ -203,1 +204,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"-999\", opt, \"0\")\n+        simpleserver(JAVA, LOCALE_OPT, \"-m\", \"jdk.httpserver\", opt, \"-999\", opt, \"0\")\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePositiveTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+    static final String LOCALE_OPT = \"-J-Duser.language=en -J-Duser.country=US\";\n@@ -77,1 +78,1 @@\n-        simpleserver(JWEBSERVER, opt)\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt)\n@@ -100,1 +101,1 @@\n-        simpleserver(JWEBSERVER, opt, arg, arg)\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt, arg, arg)\n@@ -127,1 +128,1 @@\n-        simpleserver(JWEBSERVER, opt)\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt)\n@@ -151,1 +152,1 @@\n-        simpleserver(JWEBSERVER, opt, val)\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt, val)\n@@ -162,1 +163,1 @@\n-        simpleserver(JWEBSERVER, opt, \"65536\")  \/\/ range 0 to 65535\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt, \"65536\")  \/\/ range 0 to 65535\n@@ -175,1 +176,1 @@\n-        simpleserver(JWEBSERVER, opt, root.toString())\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt, root.toString())\n@@ -185,1 +186,1 @@\n-        simpleserver(JWEBSERVER, opt, file)\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt, file)\n@@ -195,1 +196,1 @@\n-        simpleserver(JWEBSERVER, opt, root.toString())\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt, root.toString())\n@@ -212,1 +213,1 @@\n-            simpleserver(JWEBSERVER, opt, root.toString())\n+            simpleserver(JWEBSERVER, LOCALE_OPT, opt, root.toString())\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLineNegativeTest.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+    static final String LOCALE_OPT = \"-J-Duser.language=en -J-Duser.country=US\";\n@@ -87,1 +88,1 @@\n-        simpleserver(JWEBSERVER)\n+        simpleserver(JWEBSERVER, LOCALE_OPT)\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLinePortNotSpecifiedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+    static final String LOCALE_OPT = \"-J-Duser.language=en -J-Duser.country=US\";\n@@ -87,1 +88,1 @@\n-        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, TEST_DIR_STR)\n+        simpleserver(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\", opt, TEST_DIR_STR)\n@@ -100,1 +101,1 @@\n-        simpleserver(JWEBSERVER, opt, \"0\")\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt, \"0\")\n@@ -131,1 +132,1 @@\n-                JWEBSERVER, opt)\n+                JWEBSERVER, LOCALE_OPT, opt)\n@@ -145,1 +146,1 @@\n-                JWEBSERVER, opt)\n+                JWEBSERVER, LOCALE_OPT, opt)\n@@ -155,1 +156,1 @@\n-        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, \"0.0.0.0\")\n+        simpleserver(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\", opt, \"0.0.0.0\")\n@@ -160,1 +161,1 @@\n-            simpleserver(JWEBSERVER, opt, \"::0\")\n+            simpleserver(JWEBSERVER, LOCALE_OPT, opt, \"::0\")\n@@ -170,1 +171,1 @@\n-        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, \"123.4.5.6\", opt, LOOPBACK_ADDR)\n+        simpleserver(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\", opt, \"123.4.5.6\", opt, LOOPBACK_ADDR)\n@@ -180,1 +181,1 @@\n-        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, TEST_DIR_STR, opt, TEST_DIR_STR)\n+        simpleserver(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\", opt, TEST_DIR_STR, opt, TEST_DIR_STR)\n@@ -193,1 +194,1 @@\n-        simpleserver(JWEBSERVER, \"-p\", \"0\", opt, \"none\", opt, \"verbose\")\n+        simpleserver(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\", opt, \"none\", opt, \"verbose\")\n@@ -203,1 +204,1 @@\n-        simpleserver(JWEBSERVER, opt, \"-999\", opt, \"0\")\n+        simpleserver(JWEBSERVER, LOCALE_OPT, opt, \"-999\", opt, \"0\")\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/CommandLinePositiveTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+\n+import jdk.internal.util.OperatingSystem;\n+import jdk.test.lib.net.IPSupport;\n+import jdk.test.lib.process.ProcessTools;\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 8332020\n+ * @summary verifies that when jwebserver is launched with a IPv6 bind address\n+ *          then the URL printed contains the correct host literal\n+ * @modules jdk.httpserver java.base\/jdk.internal.util\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.IPSupport\n+ * @run driver IPv6BoundHost\n+ *\/\n+public class IPv6BoundHost {\n+\n+    private static final Path JDK_BIN_DIR = Path.of(System.getProperty(\"java.home\")).resolve(\"bin\");\n+    private static final Path JWEBSERVER_BINARY = OperatingSystem.isWindows()\n+            ? JDK_BIN_DIR.resolve(\"jwebserver.exe\") : JDK_BIN_DIR.resolve(\"jwebserver\");\n+    private static final String LOCALE_OPT = \"-J-Duser.language=en -J-Duser.country=US\";\n+\n+    public static void main(final String[] args) throws Exception {\n+        IPSupport.printPlatformSupport(System.err); \/\/ for debug purposes\n+        if (!IPSupport.hasIPv6()) {\n+            throw new SkippedException(\"Skipping test - IPv6 is not supported\");\n+        }\n+        final String output = launchJwebserverAndExit(List.of(\"-b\", \"::1\", \"-p\", \"0\"));\n+        if (output.contains(\"URL http:\/\/[::1]:\")\n+                || output.contains(\"URL http:\/\/[0:0:0:0:0:0:0:1]:\")) {\n+            \/\/ found expected content\n+            System.out.println(\"found expected URL in jwebserver output\");\n+        } else {\n+            throw new AssertionError(\"missing IPv6 address in jwebserver process output\");\n+        }\n+    }\n+\n+    private static String launchJwebserverAndExit(final List<String> args) throws Exception {\n+        final Predicate<String> waitForLine = (s) -> s.startsWith(\"URL http:\/\/\");\n+        final StringBuilder sb = new StringBuilder();  \/\/ stdout & stderr\n+        final List<String> cmd = new ArrayList<>();\n+        cmd.add(JWEBSERVER_BINARY.toString());\n+        cmd.add(LOCALE_OPT);\n+        cmd.addAll(args);\n+        \/\/ start the process and await the waitForLine before returning\n+        final Process p = ProcessTools.startProcess(\"8332020-test\", new ProcessBuilder(cmd),\n+                line -> sb.append(line).append(\"\\n\"),\n+                waitForLine,\n+                30,  \/\/ suitably high default timeout, not expected to timeout\n+                TimeUnit.SECONDS);\n+        System.out.println(sb.toString()); \/\/ print the process' stdout\/stderr\n+        \/\/ the process has started and it is confirmed that the process output has the line\n+        \/\/ we were waiting for. now kill the process.\n+        p.destroy();\n+        final int exitCode = p.waitFor();\n+        if (!isNormalExitCode(exitCode)) {\n+            throw new AssertionError(\"jwebserver exited with unexpected exit code: \" + exitCode);\n+        }\n+        return sb.toString();\n+    }\n+\n+    private static boolean isNormalExitCode(final int exitCode) {\n+        final int SIGTERM = 15;\n+        if (OperatingSystem.isWindows()) {\n+            return exitCode == 1; \/\/ we expect exit code == 1 on Windows for Process.destroy()\n+        } else {\n+            \/\/ signal terminated exit code on Unix is 128 + signal value\n+            return exitCode == (128 + SIGTERM);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/IPv6BoundHost.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,1 @@\n+    static final String LOCALE_OPT = \"-J-Duser.language=en -J-Duser.country=US\";\n@@ -177,1 +178,1 @@\n-                new ProcessBuilder(JWEBSERVER, \"-p\", \"0\").directory(TEST_DIR.toFile()),\n+                new ProcessBuilder(JWEBSERVER, LOCALE_OPT, \"-p\", \"0\").directory(TEST_DIR.toFile()),\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/MaxRequestTimeTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}