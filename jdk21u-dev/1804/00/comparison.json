{"files":[{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4094059\n+ * @summary drawing to a subclass of canvas didn't draw to the correct location.\n+ * @key headful\n+ * @run main LineLocationTest\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class LineLocationTest extends Frame {\n+    private DrawScreen screen;\n+\n+    public void initialize() {\n+        setSize(400, 400);\n+        setLocationRelativeTo(null);\n+        setTitle(\"Line Location Test\");\n+        Panel p = new Panel();\n+        screen = new DrawScreen();\n+        p.add(screen);\n+        p.setLocation(50, 50);\n+        p.setSize(300, 300);\n+        add(p);\n+        setBackground(Color.white);\n+        setForeground(Color.blue);\n+        setVisible(true);\n+    }\n+\n+    public void requestCoordinates(Rectangle r) {\n+        Point location = screen.getLocationOnScreen();\n+        Dimension size = screen.getSize();\n+        r.setBounds(location.x, location.y, size.width, size.height);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        LineLocationTest me = new LineLocationTest();\n+        EventQueue.invokeAndWait(me::initialize);\n+        try {\n+            Robot robot = new Robot();\n+            robot.delay(1000);\n+            Rectangle coords = new Rectangle();\n+            EventQueue.invokeAndWait(() -> {\n+                me.requestCoordinates(coords);\n+            });\n+            BufferedImage capture = robot.createScreenCapture(coords);\n+            robot.delay(2000);\n+            for (int y = 0; y < capture.getHeight(); y++) {\n+                for (int x = 0; x < capture.getWidth(); x++) {\n+                    int blue = Color.blue.getRGB();\n+                    if (capture.getRGB(x, y) == blue) {\n+                        throw new RuntimeException(\"Blue detected at \" + x + \", \" + y);\n+                    }\n+                }\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(me::dispose);\n+        }\n+    }\n+}\n+\n+class DrawScreen extends Canvas {\n+    public Dimension getPreferredSize() {\n+        return new Dimension(300, 300);\n+    }\n+\n+    public void paint(Graphics g) {\n+        g.setColor(Color.blue);\n+        g.drawLine(5, -3145583, 50, -3145583);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/LineLocationTest.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4216180\n+ * @summary This test verifies that Graphics2D.setBackground and clearRect\n+ *   performs correctly regardless of antialiasing hint.\n+ * @key headful\n+ * @run main NativeWin32Clear\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class NativeWin32Clear extends Frame {\n+\n+    public void initialize() {\n+        setLocationRelativeTo(null);\n+        setSize(300, 200);\n+        setBackground(Color.red);\n+        setVisible(true);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Graphics2D g2 = (Graphics2D) g;\n+        Dimension d = getSize();\n+        g2.setBackground(Color.green);\n+        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                            RenderingHints.VALUE_ANTIALIAS_ON);\n+        g2.clearRect(0, 0, d.width \/ 2, d.height);\n+        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                            RenderingHints.VALUE_ANTIALIAS_OFF);\n+        g2.clearRect(d.width \/ 2, 0, d.width \/ 2, d.height);\n+        g2.setColor(Color.black);\n+    }\n+\n+    public void cleanup() {\n+        setVisible(false);\n+        dispose();\n+    }\n+\n+    public void requestCoordinates(Rectangle r) {\n+        Insets insets = getInsets();\n+        Point location = getLocationOnScreen();\n+        Dimension size = getSize();\n+        r.x = location.x + insets.left + 5;\n+        r.y = location.y + insets.top + 5;\n+        r.width = size.width - (insets.left + insets.right + 10);\n+        r.height = size.height - (insets.top + insets.bottom + 10);\n+    }\n+\n+    \/*\n+     * Check color match within allowed deviation.\n+     * Prints first non-matching pixel coordinates and actual and expected values.\n+     * Returns true if image is filled with the provided color, false otherwise.\n+     *\/\n+    private boolean checkColor(BufferedImage img, Color c, int delta) {\n+        int cRed = c.getRed();\n+        int cGreen = c.getGreen();\n+        int cBlue = c.getBlue();\n+        for (int y = 0; y < img.getHeight(); y++) {\n+            for (int x = 0; x < img.getWidth(); x++) {\n+                int rgb = img.getRGB(x, y);\n+                int red = (rgb & 0x00ff0000) >> 16;\n+                int green = (rgb & 0x0000ff00) >> 8;\n+                int blue = rgb & 0x000000ff;\n+                if (cRed > (red + delta) || cRed < (red - delta)\n+                 || cGreen > (green + delta) || cGreen < (green - delta)\n+                 || cBlue > (blue + delta) || cBlue < (blue - delta)) {\n+                    System.err.println(\"Color at coordinates (\" + x + \", \" + y + \") does not match\");\n+                    System.err.println(\"Expected color: \" + c.getRGB());\n+                    System.err.println(\"Actual color: \" + rgb);\n+                    System.err.println(\"Allowed deviation: \" + delta);\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        NativeWin32Clear test = new NativeWin32Clear();\n+        try {\n+            EventQueue.invokeAndWait(test::initialize);\n+            Robot robot = new Robot();\n+            Rectangle coords = new Rectangle();\n+            EventQueue.invokeAndWait(() -> {\n+                test.requestCoordinates(coords);\n+            });\n+            robot.delay(2000);\n+            robot.mouseMove(coords.x - 50, coords.y - 50);\n+            robot.waitForIdle();\n+            BufferedImage capture = robot.createScreenCapture(coords);\n+            robot.delay(2000);\n+            if (!test.checkColor(capture, Color.green, 5)) {\n+                throw new RuntimeException(\"Incorrect color encountered, check error log for details\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(test::cleanup);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/NativeWin32Clear.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4465509 4453725 4489667\n+ * @summary verify that fillPolygon completely fills area defined by drawPolygon\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PolygonFillTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.Polygon;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class PolygonFillTest extends Frame {\n+    Polygon poly;\n+    static String INSTRUCTIONS = \"\"\"\n+                There should be two hourglass shapes drawn inside the window\n+                called \"Polygon Fill Test\". The outline should be blue\n+                and the interior should be green and there should be no gaps\n+                between the filled interior and the outline nor should the green\n+                filler spill outside the blue outline. You may need\n+                to use a screen magnifier to inspect the smaller shape\n+                on the left to verify that there are no gaps.\n+\n+                If both polygons painted correctly press \"Pass\" otherwise press \"Fail\".\n+                \"\"\";\n+\n+    public PolygonFillTest() {\n+        poly = new Polygon();\n+        poly.addPoint(0, 0);\n+        poly.addPoint(10, 10);\n+        poly.addPoint(0, 10);\n+        poly.addPoint(10, 0);\n+        setSize(300, 300);\n+        setTitle(\"Polygon Fill Test\");\n+    }\n+\n+    public void paint(Graphics g) {\n+        int w = getWidth();\n+        int h = getHeight();\n+        Image img = createImage(20, 20);\n+        Graphics g2 = img.getGraphics();\n+        drawPolys(g2, 20, 20, 5, 5);\n+        g2.dispose();\n+        drawPolys(g, w, h, (w \/ 4) - 5, (h \/ 2) - 5);\n+        g.drawImage(img, (3 * w \/ 4) - 40, (h \/ 2) - 40, 80, 80, null);\n+    }\n+\n+    public void drawPolys(Graphics g, int w, int h, int x, int y) {\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, w, h);\n+        g.translate(x, y);\n+        g.setColor(Color.green);\n+        g.fillPolygon(poly);\n+        g.setColor(Color.blue);\n+        g.drawPolygon(poly);\n+        g.translate(-x, -y);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Polygon Fill Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(PolygonFillTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/PolygonFillTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4844952\n+ * @summary test large text draws properly to the screen\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TallText\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class TallText extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+            There should be a window called \"Tall Text Test\" that contains text \"ABCDEFGHIJ\".\n+            Test should be properly displayed: no missing letters\n+            and all letters fit within the frame without overlapping.\n+            If all letters are properly displayed press \"Pass\", otherwise press \"Fail\".\n+            \"\"\";\n+\n+    public TallText() {\n+        setSize(800, 200);\n+        setTitle(\"Tall Text Test\");\n+    }\n+\n+    public void paint(Graphics g) {\n+        Font font = new Font(\"dialog\", Font.PLAIN, 99);\n+        g.setFont(font);\n+        g.setColor(Color.black);\n+        g.drawString(\"ABCDEFGHIJ\", 10, 150);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Tall Text Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(TallText::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/TallText.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}