{"files":[{"patch":"@@ -6219,1 +6219,1 @@\n-void Assembler::testb(Register dst, int imm8) {\n+void Assembler::testb(Register dst, int imm8, bool use_ral) {\n@@ -6222,2 +6222,8 @@\n-    emit_int8((unsigned char)0xA8);\n-    emit_int8(imm8);\n+    if (use_ral) {\n+      emit_int8((unsigned char)0xA8);\n+      emit_int8(imm8);\n+    } else {\n+      emit_int8((unsigned char)0xF6);\n+      emit_int8((unsigned char)0xC4);\n+      emit_int8(imm8);\n+    }\n@@ -10962,0 +10968,30 @@\n+void Assembler::fld_d(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDD);\n+  emit_operand32(rax, adr, 0);\n+}\n+\n+void Assembler::fprem() {\n+  emit_int16((unsigned char)0xD9, (unsigned char)0xF8);\n+}\n+\n+void Assembler::fnstsw_ax() {\n+  emit_int16((unsigned char)0xDF, (unsigned char)0xE0);\n+}\n+\n+void Assembler::fstp_d(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDD);\n+  emit_operand32(rbx, adr, 0);\n+}\n+\n+void Assembler::fstp_d(int index) {\n+  emit_farith(0xDD, 0xD8, index);\n+}\n+\n+void Assembler::emit_farith(int b1, int b2, int i) {\n+  assert(isByte(b1) && isByte(b2), \"wrong opcode\");\n+  assert(0 <= i &&  i < 8, \"illegal stack offset\");\n+  emit_int16(b1, b2 + i);\n+}\n+\n@@ -11005,6 +11041,0 @@\n-void Assembler::emit_farith(int b1, int b2, int i) {\n-  assert(isByte(b1) && isByte(b2), \"wrong opcode\");\n-  assert(0 <= i &&  i < 8, \"illegal stack offset\");\n-  emit_int16(b1, b2 + i);\n-}\n-\n@@ -11172,6 +11202,0 @@\n-void Assembler::fld_d(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDD);\n-  emit_operand32(rax, adr, 0);\n-}\n-\n@@ -11261,8 +11285,0 @@\n-void Assembler::fnstsw_ax() {\n-  emit_int16((unsigned char)0xDF, (unsigned char)0xE0);\n-}\n-\n-void Assembler::fprem() {\n-  emit_int16((unsigned char)0xD9, (unsigned char)0xF8);\n-}\n-\n@@ -11299,10 +11315,0 @@\n-void Assembler::fstp_d(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDD);\n-  emit_operand32(rbx, adr, 0);\n-}\n-\n-void Assembler::fstp_d(int index) {\n-  emit_farith(0xDD, 0xD8, index);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":39,"deletions":33,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -1245,1 +1245,6 @@\n-#ifndef _LP64\n+  void fnstsw_ax();\n+  void fprem();\n+  void fld_d(Address adr);\n+  void fstp_d(Address adr);\n+  void fstp_d(int index);\n+\n@@ -1251,0 +1256,1 @@\n+#ifndef _LP64\n@@ -1309,1 +1315,0 @@\n-  void fld_d(Address adr);\n@@ -1338,4 +1343,0 @@\n-\n-  void fnstsw_ax();\n-\n-  void fprem();\n@@ -1353,2 +1354,0 @@\n-  void fstp_d(Address adr);\n-  void fstp_d(int index);\n@@ -2184,1 +2183,1 @@\n-  void testb(Register dst, int imm8);\n+  void testb(Register dst, int imm8, bool use_ral = true);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-#if defined(TARGET_COMPILER_gcc) && !defined(_WIN64)\n@@ -97,18 +96,4 @@\n-  jfloat retval;\n-  const bool is_LP64 = LP64_ONLY(true) NOT_LP64(false);\n-  if (!is_LP64 || UseAVX < 1 || !UseFMA) {\n-  asm (\"\\\n-1:               \\n\\\n-fprem            \\n\\\n-fnstsw %%ax      \\n\\\n-test   $0x4,%%ah \\n\\\n-jne    1b        \\n\\\n-\"\n-    :\"=t\"(retval)\n-    :\"0\"(x), \"u\"(y)\n-    :\"cc\", \"ax\");\n-  } else {\n-    assert(StubRoutines::fmod() != nullptr, \"\");\n-    jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n-    jdouble dx = (jdouble) x;\n-    jdouble dy = (jdouble) y;\n+  assert(StubRoutines::fmod() != nullptr, \"\");\n+  jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n+  jdouble dx = (jdouble) x;\n+  jdouble dy = (jdouble) y;\n@@ -116,3 +101,1 @@\n-    retval = (jfloat) (*addr)(dx, dy);\n-  }\n-  return retval;\n+  return (jfloat) (*addr)(dx, dy);\n@@ -122,16 +105,2 @@\n-  jdouble retval;\n-  const bool is_LP64 = LP64_ONLY(true) NOT_LP64(false);\n-  if (!is_LP64 || UseAVX < 1 || !UseFMA) {\n-  asm (\"\\\n-1:               \\n\\\n-fprem            \\n\\\n-fnstsw %%ax      \\n\\\n-test   $0x4,%%ah \\n\\\n-jne    1b        \\n\\\n-\"\n-    :\"=t\"(retval)\n-    :\"0\"(x), \"u\"(y)\n-    :\"cc\", \"ax\");\n-  } else {\n-    assert(StubRoutines::fmod() != nullptr, \"\");\n-    jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n+  assert(StubRoutines::fmod() != nullptr, \"\");\n+  jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n@@ -139,3 +108,1 @@\n-    retval = (*addr)(x, y);\n-  }\n-  return retval;\n+  return (*addr)(x, y);\n@@ -143,1 +110,0 @@\n-#endif \/\/ TARGET_COMPILER_gcc && !_WIN64\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":8,"deletions":42,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -3950,0 +3950,2 @@\n+  \/\/ Round to zero, 64-bit mode, exceptions masked\n+  StubRoutines::x86::_mxcsr_rz = 0x7F80;\n@@ -4032,3 +4034,1 @@\n-  if ((UseAVX >= 1) && (VM_Version::supports_avx512vlbwdq() || VM_Version::supports_fma())) {\n-    StubRoutines::_fmod = generate_libmFmod(); \/\/ from stubGenerator_x86_64_fmod.cpp\n-  }\n+  StubRoutines::_fmod = generate_libmFmod(); \/\/ from stubGenerator_x86_64_fmod.cpp\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/stubRoutines.hpp\"\n@@ -75,0 +76,1 @@\n+  __ align(CodeEntryAlignment);\n@@ -290,10 +292,0 @@\n-    \/\/ unsigned mxcsr, mxcsr_rz;\n-\n-    \/\/   __asm { stmxcsr DWORD PTR[mxcsr] }\n-    \/\/   mxcsr_rz = 0x7f80 | mxcsr;\n-    __ push(rax);\n-    __ stmxcsr(Address(rsp, 0));\n-    __ movl(rax, Address(rsp, 0));\n-    __ movl(rcx, rax);\n-    __ orl(rcx, 0x7f80);\n-    __ movl(Address(rsp, 0x04), rcx);\n@@ -304,1 +296,1 @@\n-    __ vmovdqu(xmm3, ExternalAddress((address)CONST_NaN), rcx);\n+    __ movdqu(xmm3, ExternalAddress((address)CONST_NaN), rcx);\n@@ -316,1 +308,1 @@\n-    __ jcc(Assembler::belowEqual, L_104a);\n+    __ jccb(Assembler::belowEqual, L_104a);\n@@ -320,1 +312,1 @@\n-    \/\/   if (((mxcsr & 0x6000)!=0x2000) && (a < b * 0x1p+260))\n+    \/\/   if (a < b * 0x1p+260)\n@@ -322,3 +314,1 @@\n-    __ andl(rax, 0x6000);\n-    __ cmpl(rax, 0x2000);\n-    __ jcc(Assembler::equal, L_10c1);\n+\n@@ -327,1 +317,1 @@\n-    __ jcc(Assembler::belowEqual, L_10c1);\n+    __ jccb(Assembler::belowEqual, L_10c1);\n@@ -343,1 +333,1 @@\n-    __ align32();\n+    __ align(16);\n@@ -362,1 +352,1 @@\n-    __ jmp(L_1090);\n+    __ jmpb(L_1090);\n@@ -369,1 +359,1 @@\n-    __ ldmxcsr(Address(rsp, 0x04));\n+    __ ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_rz()), rax \/*rscratch*\/);\n@@ -381,1 +371,1 @@\n-    __ jcc(Assembler::above, L_10e7);\n+    __ jccb(Assembler::above, L_10e7);\n@@ -394,2 +384,2 @@\n-    __ jcc(Assembler::notEqual, L_10f3);\n-    __ jcc(Assembler::noParity, L_111c);\n+    __ jccb(Assembler::notEqual, L_10f3);\n+    __ jccb(Assembler::noParity, L_111c);\n@@ -400,1 +390,1 @@\n-    __ jcc(Assembler::below, L_111c);\n+    __ jccb(Assembler::below, L_111c);\n@@ -407,1 +397,1 @@\n-    __ jcc(Assembler::aboveEqual, L_112a);\n+    __ jccb(Assembler::aboveEqual, L_112a);\n@@ -411,1 +401,1 @@\n-    __ ldmxcsr(Address(rsp, 0));\n+    __ ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), rax \/*rscratch*\/);\n@@ -418,1 +408,1 @@\n-    __ ldmxcsr(Address(rsp, 0));\n+    __ ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), rax \/*rscratch*\/);\n@@ -438,1 +428,1 @@\n-    __ jcc(Assembler::below, L_116e);\n+    __ jccb(Assembler::below, L_116e);\n@@ -445,1 +435,1 @@\n-    __ jcc(Assembler::below, L_1173);\n+    __ jccb(Assembler::below, L_1173);\n@@ -456,2 +446,2 @@\n-    __ jcc(Assembler::aboveEqual, L_1157);\n-    __ jmp(L_1173);\n+    __ jccb(Assembler::aboveEqual, L_1157);\n+    __ jmpb(L_1173);\n@@ -468,1 +458,1 @@\n-    __ jcc(Assembler::aboveEqual, L_117f);\n+    __ jccb(Assembler::aboveEqual, L_117f);\n@@ -470,1 +460,1 @@\n-    __ jmp(L_11af);\n+    __ jmpb(L_11af);\n@@ -483,3 +473,3 @@\n-    __ jcc(Assembler::aboveEqual, L_117f);\n-    __ jmp(L_11af);\n-    __ align32();\n+    __ jccb(Assembler::aboveEqual, L_117f);\n+    __ jmpb(L_11af);\n+    __ align(16);\n@@ -499,1 +489,1 @@\n-    __ jcc(Assembler::aboveEqual, L_11a0);\n+    __ jccb(Assembler::aboveEqual, L_11a0);\n@@ -503,1 +493,1 @@\n-    __ ldmxcsr(Address(rsp, 0));\n+    __ ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), rax \/*rscratch*\/);\n@@ -512,1 +502,0 @@\n-    __ pop(rax);\n@@ -515,1 +504,15 @@\n-    assert(false, \"SSE not implemented\");\n+    Label x87_loop;\n+    __ movsd(Address(rbp, -8), xmm1);\n+    __ movsd(Address(rbp, -16), xmm0);\n+    __ fld_d(Address(rbp, -8));\n+    __ fld_d(Address(rbp, -16));\n+\n+    __ bind(x87_loop);\n+    __ fprem();\n+    __ fnstsw_ax();\n+    __ testb(rax, 0x4, false);\n+    __ jcc(Assembler::notZero, x87_loop);\n+\n+    __ fstp_d(1);\n+    __ fstp_d(Address(rbp, -8));\n+    __ movsd(xmm0, Address(rbp, -8));\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_fmod.cpp","additions":43,"deletions":40,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -129,0 +129,3 @@\n+#ifdef _LP64\n+  static jint    _mxcsr_rz;\n+#endif \/\/ _LP64\n@@ -210,0 +213,3 @@\n+#ifdef _LP64\n+  static address addr_mxcsr_rz()        { return (address)&_mxcsr_rz; }\n+#endif \/\/ _LP64\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+jint    StubRoutines::x86::_mxcsr_rz = 0;\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-#if !defined(X86) || !defined(TARGET_COMPILER_gcc) || defined(_WIN64)\n+#if !defined(X86)\n@@ -273,1 +273,1 @@\n-#endif \/\/ !X86 || !TARGET_COMPILER_gcc || _WIN64\n+#endif \/\/ !X86\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}