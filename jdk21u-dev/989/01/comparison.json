{"files":[{"patch":"@@ -612,1 +612,0 @@\n-com\/sun\/crypto\/provider\/Cipher\/DES\/PerformanceTest.java         8039280 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -615,1 +615,0 @@\n-    com\/sun\/crypto\/provider\/Cipher\/DES\/PerformanceTest.java \\\n","filename":"test\/jdk\/TEST.groups","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run main\/manual PerformanceTest\n@@ -31,1 +30,0 @@\n-import java.security.*;\n@@ -33,1 +31,0 @@\n-import java.io.*;\n@@ -181,1 +178,1 @@\n-        start = System.currentTimeMillis();\n+        start = getTimeInMicroseconds();\n@@ -186,1 +183,1 @@\n-        end = System.currentTimeMillis();\n+        end = getTimeInMicroseconds();\n@@ -188,1 +185,3 @@\n-        int speed = (int)((data.length * count)\/(end - start));\n+        \/\/ To avoid dividing by zero in the rare case where end is equal to start\n+        long executionTime = end != start ? end - start : 1L;\n+        int speed = (int) ((data.length * count) \/ executionTime);\n@@ -201,1 +200,1 @@\n-            (\"Algorithm                      DataSize Rounds Kbytes\/sec\");\n+            (\"Algorithm                      DataSize Rounds Bytes\/microsec\");\n@@ -205,0 +204,4 @@\n+    private static long getTimeInMicroseconds() {\n+        return System.nanoTime() \/ 1000;\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/DES\/PerformanceTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"}]}