{"files":[{"patch":"@@ -2970,0 +2970,1 @@\n+    MutexLocker throttle_ml(UseThreadsLockThrottleLock ? ThreadsLockThrottle_lock : nullptr);\n@@ -2972,1 +2973,1 @@\n-    MutexLocker mu(Threads_lock);\n+    MutexLocker ml(Threads_lock);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1993,0 +1993,3 @@\n+  product(bool, UseThreadsLockThrottleLock, true, DIAGNOSTIC,               \\\n+          \"Use an extra lock during Thread start and exit to alleviate\"     \\\n+          \"contention on Threads_lock.\")                                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+Monitor* ThreadsLockThrottle_lock     = nullptr;\n@@ -329,0 +330,2 @@\n+  MUTEX_DEFN(ThreadsLockThrottle_lock        , PaddedMonitor, safepoint);\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+extern Monitor* ThreadsLockThrottle_lock;        \/\/ used by Thread start\/exit to reduce competition for Threads_lock,\n+                                                 \/\/ so a VM thread calling a safepoint is prioritized\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1037,1 +1037,3 @@\n-  { MonitorLocker ml(Threads_lock);\n+  {\n+    MutexLocker throttle_ml(UseThreadsLockThrottleLock ? ThreadsLockThrottle_lock : nullptr);\n+    MonitorLocker ml(Threads_lock);\n@@ -1085,1 +1087,1 @@\n-  } \/\/ unlock Threads_lock\n+  } \/\/ unlock Threads_lock and ThreadsLockThrottle_lock\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}