{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -3429,0 +3429,13 @@\n+\n+            \/\/ Handle leading zeros\n+            int i = p, j;\n+            while ((j = scan(i, q, '0')) > i) i = j;\n+\n+            \/\/ Calculate the number of significant digits (after leading zeros)\n+            int significantDigitsNum = q - i;\n+\n+            if (significantDigitsNum < 3)  return q; \/\/ definitely < 255\n+\n+            \/\/ If more than 3 significant digits, it's definitely > 255\n+            if (significantDigitsNum > 3) return p;\n+\n","filename":"src\/java.base\/share\/classes\/java\/net\/URI.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- *      7171415 6339649 6933879 8037396 8272072 8051627 8297687\n+ *      7171415 6339649 6933879 8037396 8272072 8051627 8297687 8353013\n@@ -1623,0 +1623,1 @@\n+        b8353013();\n@@ -1789,0 +1790,33 @@\n+    \/\/ 8353013 - Increase test coverage for cases where the authority component of a hierarchical\n+    \/\/ URI has a host component that starts with a number.\n+    private static void b8353013() {\n+        testCreate(\"https:\/\/0.0.0.1\").s(\"https\").h(\"0.0.0.1\").p(\"\").z();\n+        testCreate(\"https:\/\/00.0.0.2\").s(\"https\").h(\"00.0.0.2\").p(\"\").z();\n+        testCreate(\"https:\/\/000.0.0.3\").s(\"https\").h(\"000.0.0.3\").p(\"\").z();\n+        testCreate(\"https:\/\/0000.0.0.4\").s(\"https\").h(\"0000.0.0.4\").p(\"\").z();\n+\n+        testCreate(\"https:\/\/00000.0.0.5\").s(\"https\").h(\"00000.0.0.5\").p(\"\").z();\n+        testCreate(\"https:\/\/00001.0.0.6\").s(\"https\").h(\"00001.0.0.6\").p(\"\").z();\n+\n+        testCreate(\"https:\/\/01.0.0.1\").s(\"https\").h(\"01.0.0.1\").p(\"\").z();\n+\n+        testCreate(\"https:\/\/111111.2.3.com\").s(\"https\").h(\"111111.2.3.com\").p(\"\").z();\n+\n+        testCreate(\"https:\/\/1.example.com\").s(\"https\").h(\"1.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/12.example.com\").s(\"https\").h(\"12.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/123.example.com\").s(\"https\").h(\"123.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/1234.example.com\").s(\"https\").h(\"1234.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/12345.example.com\").s(\"https\").h(\"12345.example.com\").p(\"\").z();\n+\n+        testCreate(\"https:\/\/98765432101.example.com\").s(\"https\").h(\"98765432101.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/98765432101.www.example.com\/\").s(\"https\").h(\"98765432101.www.example.com\").p(\"\/\").z();\n+        testCreate(\"https:\/\/98765432101.www.example.com\").s(\"https\").h(\"98765432101.www.example.com\").p(\"\").z();\n+\n+        testCreate(\"https:\/\/9223372036854775808.example.com\").s(\"https\").h(\"9223372036854775808.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/9223372036854775808.www.example.com\").s(\"https\").h(\"9223372036854775808.www.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/9223372036854775808.xyz.abc.com\").s(\"https\").h(\"9223372036854775808.xyz.abc.com\").p(\"\").z();\n+        testCreate(\"https:\/\/9223372036854775808.xyz.abc.pqr.com\").s(\"https\").h(\"9223372036854775808.xyz.abc.pqr.com\").p(\"\").z();\n+\n+        testCreate(\"https:\/\/256.example.com\").s(\"https\").h(\"256.example.com\").p(\"\").z();\n+    }\n+\n","filename":"test\/jdk\/java\/net\/URI\/Test.java","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.net;\n+\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests Java.net.URI.create performance on various URI types.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class URIAuthorityParsingBenchmark {\n+\n+    @Param({\n+            \"https:\/\/98765432101.abc.xyz.com\",\n+            \"https:\/\/ABCDEFGHIJK.abc.xyz.com\"\n+    })\n+    private String uri;\n+\n+    @Benchmark\n+    public void create(Blackhole blackhole) {\n+        blackhole.consume(URI.create(uri));\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/URIAuthorityParsingBenchmark.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}