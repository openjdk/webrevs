{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-            return new SSLException(reason, cause);\n+            return new SSLException(\"(\" + description + \") \" + reason, cause);\n@@ -128,1 +128,1 @@\n-            return new SSLProtocolException(reason, cause);\n+            return new SSLProtocolException(\"(\" + description + \") \" + reason, cause);\n@@ -130,1 +130,1 @@\n-            return new SSLHandshakeException(reason, cause);\n+            return new SSLHandshakeException(\"(\" + description + \") \" + reason, cause);\n@@ -132,1 +132,1 @@\n-            return new SSLException(reason, cause);\n+            return new SSLException(\"(\" + description + \") \" + reason, cause);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Alert.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -384,1 +384,1 @@\n-                    throw shc.conContext.fatal(Alert.BAD_CERTIFICATE,\n+                    throw shc.conContext.fatal(Alert.HANDSHAKE_FAILURE,\n@@ -1166,1 +1166,1 @@\n-                    throw shc.conContext.fatal(Alert.BAD_CERTIFICATE,\n+                    throw shc.conContext.fatal(Alert.CERTIFICATE_REQUIRED,\n@@ -1190,1 +1190,1 @@\n-                throw chc.conContext.fatal(Alert.BAD_CERTIFICATE,\n+                throw chc.conContext.fatal(Alert.DECODE_ERROR,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/javax\/net\/ssl\/templates\n+ * @bug 8311644\n+ * @summary Verify CertificateMessage alerts are correct to the TLS specs\n+ * @run main\/othervm -Djdk.tls.client.protocols=TLSv1.2 CertMsgCheck handshake_failure\n+ * @run main\/othervm -Djdk.tls.client.protocols=TLSv1.3 CertMsgCheck certificate_required\n+ *\n+ *\/\n+\n+public class CertMsgCheck {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Start server\n+        TLSBase.Server server = new TLSBase.ServerBuilder().setClientAuth(true).\n+            build();\n+\n+        \/\/ Initial client session\n+        TLSBase.Client client1 = new TLSBase.Client(true, false);\n+        if (server.getSession(client1).getSessionContext() == null) {\n+            for (Exception e : server.getExceptionList()) {\n+                System.out.println(\"Looking at \" + e.getClass() + \" \" +\n+                    e.getMessage());\n+                if (e.getMessage().contains(args[0])) {\n+                    System.out.println(\"Found correct exception: \" + args[0] +\n+                    \" in \" + e.getMessage());\n+                    return;\n+                } else {\n+                    System.out.println(\"No \\\"\" + args[0] + \"\\\" found.\");\n+                }\n+            }\n+\n+            throw new Exception(\"Failed to find expected alert: \" + args[0]);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLSession\/CertMsgCheck.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.util.HexFormat;\n@@ -42,6 +43,1 @@\n-    static void toHex(byte[] id) {\n-        for (byte b : id) {\n-            System.out.printf(\"%02X \", b);\n-        }\n-        System.out.println();\n-    }\n+    static HexFormat hex = HexFormat.of();\n@@ -55,1 +51,1 @@\n-            throw new Exception(\"Context was null\");\n+            throw new Exception(\"Context was null.  Handshake failure.\");\n@@ -62,2 +58,1 @@\n-        System.out.print(\"id = \");\n-        toHex(id);\n+        System.out.println(\"id = \" + hex.formatHex(id));\n@@ -67,2 +62,1 @@\n-            System.out.print(\"id = \");\n-            toHex(id);\n+            System.out.println(\"id = \" + hex.formatHex(id));\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLSession\/CheckSessionContext.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,10 +24,2 @@\n-import javax.net.ssl.SSLContext;\n-import javax.net.ssl.SSLServerSocket;\n-import javax.net.ssl.SSLServerSocketFactory;\n-import javax.net.ssl.SSLSession;\n-import javax.net.ssl.SSLSocket;\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.io.OutputStreamWriter;\n-import java.io.PrintWriter;\n+import javax.net.ssl.*;\n+import java.io.*;\n@@ -36,0 +28,4 @@\n+import java.security.KeyStore;\n+import java.security.cert.PKIXBuilderParameters;\n+import java.security.cert.X509CertSelector;\n+import java.util.ArrayList;\n@@ -37,0 +33,1 @@\n+import java.util.List;\n@@ -71,2 +68,2 @@\n-                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                        \"\/\" + keyStoreFile;\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                \"\/\" + keyStoreFile;\n@@ -74,2 +71,2 @@\n-                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                        \"\/\" + trustStoreFile;\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                \"\/\" + trustStoreFile;\n@@ -83,11 +80,6 @@\n-    byte[] read(SSLSocket sock) {\n-        try {\n-            BufferedReader reader = new BufferedReader(\n-                    new InputStreamReader(sock.getInputStream()));\n-            String s = reader.readLine();\n-            System.err.println(\"(read) \" + name + \": \" + s);\n-            return s.getBytes();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        return null;\n+    byte[] read(SSLSocket sock) throws Exception {\n+        BufferedReader reader = new BufferedReader(\n+            new InputStreamReader(sock.getInputStream()));\n+        String s = reader.readLine();\n+        System.err.println(\"(read) \" + name + \": \" + s);\n+        return s.getBytes();\n@@ -97,9 +89,13 @@\n-    public void write(SSLSocket sock, byte[] data) {\n-        try {\n-            PrintWriter out = new PrintWriter(\n-                    new OutputStreamWriter(sock.getOutputStream()));\n-            out.println(new String(data));\n-            out.flush();\n-            System.err.println(\"(write)\" + name + \": \" + new String(data));\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+    public void write(SSLSocket sock, byte[] data) throws Exception {\n+        PrintWriter out = new PrintWriter(\n+            new OutputStreamWriter(sock.getOutputStream()));\n+        out.println(new String(data));\n+        out.flush();\n+        System.err.println(\"(write)\" + name + \": \" + new String(data));\n+    }\n+\n+    private static KeyManager[] getKeyManager(boolean empty) throws Exception {\n+        FileInputStream fis = null;\n+        if (!empty) {\n+            fis = new FileInputStream(System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                \"\/\" + keyStoreFile);\n@@ -107,0 +103,36 @@\n+        \/\/ Load the keystore\n+        char[] pwd = passwd.toCharArray();\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        ks.load(fis, pwd);\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"PKIX\");\n+        kmf.init(ks, pwd);\n+        return kmf.getKeyManagers();\n+    }\n+\n+    private static TrustManager[] getTrustManager(boolean empty) throws Exception {\n+        FileInputStream fis = null;\n+        if (!empty) {\n+            fis = new FileInputStream(System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n+                \"\/\" + trustStoreFile);\n+        }\n+        \/\/ Load the keystore\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        ks.load(fis, passwd.toCharArray());\n+\n+        PKIXBuilderParameters pkixParams =\n+            new PKIXBuilderParameters(ks, new X509CertSelector());\n+\n+        \/\/ Explicitly set revocation based on the command-line\n+        \/\/ parameters, default false\n+        pkixParams.setRevocationEnabled(false);\n+\n+        \/\/ Register the PKIXParameters with the trust manager factory\n+        ManagerFactoryParameters trustParams =\n+            new CertPathTrustManagerParameters(pkixParams);\n+\n+        \/\/ Create the Trust Manager Factory using the PKIX variant\n+        \/\/ and initialize it with the parameters configured above\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(trustParams);\n+        return tmf.getTrustManagers();\n@@ -121,0 +153,1 @@\n+        List<Exception> exceptionList = new ArrayList<>();\n@@ -122,1 +155,1 @@\n-        Server() {\n+        Server(ServerBuilder builder) {\n@@ -126,1 +159,2 @@\n-                sslContext = SSLContext.getDefault();\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(TLSBase.getKeyManager(builder.km), TLSBase.getTrustManager(builder.tm), null);\n@@ -129,0 +163,1 @@\n+                ssock.setNeedClientAuth(builder.clientauth);\n@@ -140,1 +175,1 @@\n-                                serverPort);\n+                            serverPort);\n@@ -147,0 +182,1 @@\n+                            exceptionList.add(e);\n@@ -157,0 +193,45 @@\n+        Server() {\n+            this(new ServerBuilder());\n+        }\n+\n+        \/**\n+         * @param km - true for an empty key manager\n+         * @param tm - true for an empty trust manager\n+         *\/\n+        Server(boolean km, boolean tm) {\n+            super();\n+            name = \"server\";\n+            try {\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(TLSBase.getKeyManager(km), TLSBase.getTrustManager(tm), null);\n+                fac = sslContext.getServerSocketFactory();\n+                ssock = (SSLServerSocket) fac.createServerSocket(0);\n+                ssock.setNeedClientAuth(true);\n+                serverPort = ssock.getLocalPort();\n+            } catch (Exception e) {\n+                System.err.println(e.getMessage());\n+                e.printStackTrace();\n+            }\n+\n+                \/\/ Thread to allow multiple clients to connect\n+                t = new Thread(() -> {\n+                    try {\n+                        while (true) {\n+                            System.err.println(\"Server ready on port \" +\n+                                serverPort);\n+                            SSLSocket c = (SSLSocket)ssock.accept();\n+                            clientMap.put(c.getPort(), c);\n+                            try {\n+                                write(c, read(c));\n+                            } catch (Exception e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                    } catch (Exception ex) {\n+                        System.err.println(\"Server Down\");\n+                        ex.printStackTrace();\n+                    }\n+                });\n+                t.start();\n+            }\n+\n@@ -170,1 +251,1 @@\n-        byte[] read(Client client) {\n+        byte[] read(Client client) throws Exception {\n@@ -179,1 +260,1 @@\n-        void write(Client client, byte[] data) {\n+        void write(Client client, byte[] data) throws Exception {\n@@ -185,1 +266,1 @@\n-        boolean writeRead(Client client, String s) {\n+        boolean writeRead(Client client, String s) throws Exception{\n@@ -201,0 +282,4 @@\n+\n+        List<Exception> getExceptionList() {\n+            return exceptionList;\n+        }\n@@ -203,0 +288,22 @@\n+    static class ServerBuilder {\n+        boolean km = false, tm = false, clientauth = false;\n+\n+        ServerBuilder setKM(boolean b) {\n+            km = b;\n+            return this;\n+        }\n+\n+        ServerBuilder setTM(boolean b) {\n+            tm = b;\n+            return this;\n+        }\n+\n+        ServerBuilder setClientAuth(boolean b) {\n+            clientauth = b;\n+            return this;\n+        }\n+\n+        Server build() {\n+            return new Server(this);\n+        }\n+    }\n@@ -209,1 +316,1 @@\n-\n+        boolean km, tm;\n@@ -211,0 +318,8 @@\n+            this(false, false);\n+        }\n+\n+        \/**\n+         * @param km - true sets an empty key manager\n+         * @param tm - true sets an empty trust manager\n+         *\/\n+        Client(boolean km, boolean tm) {\n@@ -212,6 +327,2 @@\n-            try {\n-                sslContext = SSLContext.getDefault();\n-            } catch (Exception e) {\n-                System.err.println(e.getMessage());\n-                e.printStackTrace();\n-            }\n+            this.km = km;\n+            this.tm = tm;\n@@ -224,1 +335,2 @@\n-                sslContext = SSLContext.getDefault();\n+                sslContext = SSLContext.getInstance(\"TLS\");\n+                sslContext.init(TLSBase.getKeyManager(km), TLSBase.getTrustManager(tm), null);\n@@ -239,1 +351,1 @@\n-        byte[] read() {\n+        byte[] read() throws Exception {\n@@ -244,1 +356,1 @@\n-        void write(byte[] data) {\n+        void write(byte[] data) throws Exception {\n@@ -247,1 +359,1 @@\n-        void write(String s) {\n+        void write(String s) throws Exception {\n@@ -253,1 +365,1 @@\n-        boolean writeRead(Server server, String s) {\n+        boolean writeRead(Server server, String s) throws Exception {\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/TLSBase.java","additions":165,"deletions":53,"binary":false,"changes":218,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-            if (!expectedExMsg.equals(she.getMessage())) {\n+            if (!she.getMessage().endsWith(expectedExMsg)) {\n@@ -80,1 +80,1 @@\n-            if (!expectedExMsg.equals(she.getMessage())) {\n+            if (!she.getMessage().endsWith(expectedExMsg)) {\n","filename":"test\/jdk\/sun\/security\/ssl\/DHKeyExchange\/LegacyDHEKeyExchange.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (C) 2021, 2024 THL A29 Limited, a Tencent company. All rights reserved.\n@@ -125,1 +126,1 @@\n-            if (EXPECT_FAIL && e.getMessage().equals(\n+            if (EXPECT_FAIL && e.getMessage().endsWith(\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/SigAlgosExtTestWithTLS12.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +82,1 @@\n-            if (expectFail && e.getMessage().equals(\n+            if (expectFail && e.getMessage().endsWith(\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/SigAlgosExtTestWithTLS13.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}