{"files":[{"patch":"@@ -1020,0 +1020,16 @@\n+  int old_c2_count = 0, new_c2_count = 0, old_c1_count = 0, new_c1_count = 0;\n+  const int c2_tasks_per_thread = 2, c1_tasks_per_thread = 4;\n+\n+  \/\/ Quick check if we already have enough compiler threads without taking the lock.\n+  \/\/ Numbers may change concurrently, so we read them again after we have the lock.\n+  if (_c2_compile_queue != nullptr) {\n+    old_c2_count = get_c2_thread_count();\n+    new_c2_count = MIN2(_c2_count, _c2_compile_queue->size() \/ c2_tasks_per_thread);\n+  }\n+  if (_c1_compile_queue != nullptr) {\n+    old_c1_count = get_c1_thread_count();\n+    new_c1_count = MIN2(_c1_count, _c1_compile_queue->size() \/ c1_tasks_per_thread);\n+  }\n+  if (new_c2_count <= old_c2_count && new_c1_count <= old_c1_count) return;\n+\n+  \/\/ Now, we do the more expensive operations.\n@@ -1022,2 +1038,2 @@\n-  size_t available_cc_np  = CodeCache::unallocated_capacity(CodeBlobType::MethodNonProfiled),\n-         available_cc_p   = CodeCache::unallocated_capacity(CodeBlobType::MethodProfiled);\n+  size_t available_cc_np = CodeCache::unallocated_capacity(CodeBlobType::MethodNonProfiled),\n+         available_cc_p  = CodeCache::unallocated_capacity(CodeBlobType::MethodProfiled);\n@@ -1025,1 +1041,1 @@\n-  \/\/ Only do attempt to start additional threads if the lock is free.\n+  \/\/ Only attempt to start additional threads if the lock is free.\n@@ -1029,3 +1045,3 @@\n-    int old_c2_count = _compilers[1]->num_compiler_threads();\n-    int new_c2_count = MIN4(_c2_count,\n-        _c2_compile_queue->size() \/ 2,\n+    old_c2_count = get_c2_thread_count();\n+    new_c2_count = MIN4(_c2_count,\n+        _c2_compile_queue->size() \/ c2_tasks_per_thread,\n@@ -1065,1 +1081,1 @@\n-        if (_compilers[1]->num_compiler_threads() != i) break;\n+        if (get_c2_thread_count() != i) break;\n@@ -1087,3 +1103,3 @@\n-    int old_c1_count = _compilers[0]->num_compiler_threads();\n-    int new_c1_count = MIN4(_c1_count,\n-        _c1_compile_queue->size() \/ 4,\n+    old_c1_count = get_c1_thread_count();\n+    new_c1_count = MIN4(_c1_count,\n+        _c1_compile_queue->size() \/ c1_tasks_per_thread,\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":26,"deletions":10,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  int _size;\n+  volatile int _size;\n@@ -402,0 +402,2 @@\n+  static int get_c1_thread_count() {                return _compilers[0]->num_compiler_threads(); }\n+  static int get_c2_thread_count() {                return _compilers[1]->num_compiler_threads(); }\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}