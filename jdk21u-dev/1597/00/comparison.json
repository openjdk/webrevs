{"files":[{"patch":"@@ -1292,0 +1292,1 @@\n+                return null;\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -212,0 +212,3 @@\n+            \/\/ wait for our subscriber to be completed and get the\n+            \/\/ list of ByteBuffers it received.\n+            var buffers = subscriber.getBuffers().join();\n@@ -213,1 +216,1 @@\n-                responseBody = subscriber.buffers;\n+                responseBody = buffers;\n@@ -249,0 +252,7 @@\n+        \/\/ A CompletableFuture that will be completed with a list of ByteBuffers that the\n+        \/\/ ConsumingSubscriber has consumed.\n+        final CompletableFuture<List<ByteBuffer>> consumed = new CompletableFuture<>();\n+\n+        public final CompletableFuture<List<ByteBuffer>> getBuffers() {\n+            return consumed;\n+        }\n@@ -259,1 +269,1 @@\n-        @Override public void onError(Throwable throwable) { assert false : \"Unexpected\"; }\n+        @Override public void onError(Throwable throwable) { consumed.completeExceptionally(throwable); }\n@@ -261,1 +271,1 @@\n-        @Override public void onComplete() { \/* do nothing *\/ }\n+        @Override public void onComplete() { consumed.complete(buffers.stream().toList()); }\n","filename":"test\/jdk\/java\/net\/httpclient\/offline\/FixedResponseHttpClient.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8344361\n+ * @summary Restore null return for invalid services\n+ *\/\n+\n+import java.security.Provider;\n+\n+public class InvalidServiceTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        Provider p1 = new LProvider(\"LegacyFormat\");\n+        \/\/ this returns a service with null class name. Helps exercise the code path\n+        Provider.Service s1 = p1.getService(\"MessageDigest\", \"SHA-1\");\n+        if (s1 != null)\n+            throw new RuntimeException(\"expecting null service\");\n+    }\n+\n+    private static class LProvider extends Provider {\n+        LProvider(String name) {\n+            super(name, \"1.0\", null);\n+            put(\"Signature.MD5withRSA\", \"com.foo.Sig\");\n+            put(\"MessageDigest.SHA-1 ImplementedIn\", \"Software\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/Provider\/InvalidServiceTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}