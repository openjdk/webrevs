{"files":[{"patch":"@@ -676,1 +676,1 @@\n-            assertFalse(path.toFile().exists(), String.format(\n+            assertTrue(!path.toFile().exists(), String.format(\n@@ -681,2 +681,14 @@\n-    public static void assertPathNotEmptyDirectory(Path path) {\n-        if (Files.isDirectory(path)) {\n+    public static void assertDirectoryNotEmpty(Path path) {\n+        assertDirectoryExists(path, Optional.of(false));\n+    }\n+\n+    public static void assertDirectoryEmpty(Path path) {\n+        assertDirectoryExists(path, Optional.of(true));\n+    }\n+\n+    public static void assertDirectoryExists(Path path, Optional<Boolean> isEmptyCheck) {\n+        assertPathExists(path, true);\n+        boolean isDirectory = Files.isDirectory(path);\n+        if (isEmptyCheck.isEmpty() || !isDirectory) {\n+            assertTrue(isDirectory, String.format(\"Check [%s] is a directory\", path));\n+        } else {\n@@ -685,2 +697,6 @@\n-                    TKit.assertFalse(files.findFirst().isEmpty(), String.format\n-                            (\"Check [%s] is not an empty directory\", path));\n+                    boolean actualIsEmpty = files.findFirst().isEmpty();\n+                    if (isEmptyCheck.get()) {\n+                        TKit.assertTrue(actualIsEmpty, String.format(\"Check [%s] is not an empty directory\", path));\n+                    } else {\n+                        TKit.assertTrue(!actualIsEmpty, String.format(\"Check [%s] is an empty directory\", path));\n+                    }\n@@ -689,1 +705,1 @@\n-         }\n+        }\n@@ -693,3 +709,1 @@\n-        assertPathExists(path, true);\n-        assertTrue(path.toFile().isDirectory(), String.format(\n-                \"Check [%s] is a directory\", path));\n+        assertDirectoryExists(path, Optional.empty());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -301,1 +301,1 @@\n-                TKit.assertPathNotEmptyDirectory(shortcutPath.getParent());\n+                TKit.assertDirectoryNotEmpty(shortcutPath.getParent());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import jdk.jpackage.test.TKit;\n-\n-public class EmptyFolderBase {\n-\n-    \/\/ Note: To specify file use \".txt\" extension.\n-    \/\/ Note: createDirStrcture() will call mkdir() or createNewFile() for paths defined\n-    \/\/ in dirStruct, so make sure paths are defined in order.\n-\n-    \/\/ folder-empty\n-    \/\/ folder-not-empty\n-    \/\/ folder-not-empty\/folder-empty\n-    \/\/ folder-not-empty\/another-folder-empty\n-    \/\/ folder-not-empty\/folder-non-empty2\n-    \/\/ folder-not-empty\/folder-non-empty2\/file.txt\n-    private static final String [] DIR_STRUCT = {\n-        \"folder-empty\",\n-        \"folder-not-empty\",\n-        \"folder-not-empty\" + File.separator + \"folder-empty\",\n-        \"folder-not-empty\" + File.separator + \"another-folder-empty\",\n-        \"folder-not-empty\" + File.separator + \"folder-non-empty2\",\n-        \"folder-not-empty\" + File.separator + \"folder-non-empty2\" + File.separator +\n-            \"file.txt\"\n-    };\n-\n-    \/\/ See dirStruct\n-    public static void createDirStrcture(Path inputPath) throws IOException {\n-        File input = new File(inputPath.toString());\n-        input.mkdir();\n-\n-        for (String p : DIR_STRUCT) {\n-            File f = new File(input, p);\n-            if (p.endsWith(\".txt\")) {\n-                f.createNewFile();\n-            } else {\n-                f.mkdir();\n-            }\n-        }\n-    }\n-\n-    public static void validateDirStrcture(Path appDirPath) {\n-        for (String p : DIR_STRUCT) {\n-            Path path = appDirPath.resolve(p);\n-            TKit.assertPathExists(path, true);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/tools\/jpackage\/share\/EmptyFolderBase.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.nio.file.Path;\n-import jdk.jpackage.internal.ApplicationLayout;\n-import jdk.jpackage.test.PackageTest;\n-import jdk.jpackage.test.PackageType;\n-import jdk.jpackage.test.Annotations.Test;\n-\n-\/**\n- * Tests generation of packages with input folder containing empty folders.\n- *\/\n-\n-\/*\n- * @test\n- * @summary jpackage with input containing empty folders\n- * @library ..\/helpers\n- * @library \/test\/lib\n- * @key jpackagePlatformPackage\n- * @build EmptyFolderBase\n- * @build jdk.jpackage.test.*\n- * @build EmptyFolderPackageTest\n- * @modules jdk.jpackage\/jdk.jpackage.internal\n- * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n- *  --jpt-run=EmptyFolderPackageTest\n- *\/\n-public class EmptyFolderPackageTest {\n-\n-    @Test\n-    public static void test() throws Exception {\n-        new PackageTest().configureHelloApp()\n-                .addInitializer(cmd -> {\n-                    Path input = cmd.inputDir();\n-                    EmptyFolderBase.createDirStrcture(input);\n-                })\n-                .addInstallVerifier(cmd -> {\n-                    if (cmd.packageType() == PackageType.WIN_MSI) {\n-                        if (cmd.isPackageUnpacked(\"Not running file \"\n-                                + \"structure check for empty folders\")) {\n-                            return;\n-                        }\n-                    }\n-\n-                    ApplicationLayout appLayout = cmd.appLayout();\n-                    Path appDir = appLayout.appDirectory();\n-                    EmptyFolderBase.validateDirStrcture(appDir);\n-                })\n-                .run();\n-    }\n-}\n","filename":"test\/jdk\/tools\/jpackage\/share\/EmptyFolderPackageTest.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+import java.io.IOException;\n+import java.nio.file.Files;\n@@ -25,1 +27,1 @@\n-import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageTest;\n@@ -27,1 +29,3 @@\n-import jdk.jpackage.internal.ApplicationLayout;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.TKit;\n@@ -30,1 +34,14 @@\n- * Tests generation of app image with input folder containing empty folders.\n+ * Tests generation of packages and app image with input folder containing empty folders.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage for package with input containing empty folders\n+ * @library ..\/helpers\n+ * @library \/test\/lib\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build EmptyFolderTest\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=EmptyFolderTest.testPackage\n@@ -35,1 +52,1 @@\n- * @summary jpackage with input containing empty folders\n+ * @summary jpackage for app image with input containing empty folders\n@@ -38,1 +55,0 @@\n- * @build EmptyFolderBase\n@@ -43,1 +59,1 @@\n- *  --jpt-run=EmptyFolderTest\n+ *  --jpt-run=EmptyFolderTest.testAppImage\n@@ -45,0 +61,1 @@\n+\n@@ -48,2 +65,14 @@\n-    public static void test() throws Exception {\n-        JPackageCommand cmd = JPackageCommand.helloAppImage();\n+    public static void testPackage() {\n+        new PackageTest()\n+                .configureHelloApp()\n+                .addInitializer(EmptyFolderTest::createDirTree)\n+                .addInitializer(cmd -> {\n+                    cmd.setArgumentValue(\"--name\", \"EmptyFolderPackageTest\");\n+                })\n+                .addInstallVerifier(EmptyFolderTest::validateDirTree)\n+                .run();\n+    }\n+\n+    @Test\n+    public static void testAppImage() throws IOException {\n+        var cmd = JPackageCommand.helloAppImage();\n@@ -52,2 +81,1 @@\n-        Path input = cmd.inputDir();\n-        EmptyFolderBase.createDirStrcture(input);\n+        createDirTree(cmd);\n@@ -58,4 +86,37 @@\n-        \/\/ Verify directory strcture\n-        ApplicationLayout appLayout = cmd.appLayout();\n-        Path appDir = appLayout.appDirectory();\n-        EmptyFolderBase.validateDirStrcture(appDir);\n+        \/\/ Verify directory structure\n+        validateDirTree(cmd);\n+    }\n+\n+    private static void createDirTree(JPackageCommand cmd) throws IOException {\n+        var baseDir = cmd.inputDir();\n+        for (var path : DIR_STRUCT) {\n+            path = baseDir.resolve(path);\n+            if (isFile(path)) {\n+                Files.createDirectories(path.getParent());\n+                Files.write(path, new byte[0]);\n+            } else {\n+                Files.createDirectories(path);\n+            }\n+        }\n+    }\n+\n+    private static void validateDirTree(JPackageCommand cmd) {\n+        var outputBaseDir = cmd.appLayout().appDirectory();\n+        var inputBaseDir = cmd.inputDir();\n+        for (var path : DIR_STRUCT) {\n+            Path outputPath = outputBaseDir.resolve(path);\n+            if (isFile(outputPath)) {\n+                TKit.assertFileExists(outputPath);\n+            } else if (!PackageType.WINDOWS.contains(cmd.packageType())) {\n+                TKit.assertDirectoryExists(outputPath);\n+            } else if (inputBaseDir.resolve(path).toFile().list().length == 0) {\n+                \/\/ MSI packages don't support empty folders\n+                TKit.assertPathExists(outputPath, false);\n+            } else {\n+                TKit.assertDirectoryNotEmpty(outputPath);\n+            }\n+        }\n+    }\n+\n+    private static boolean isFile(Path path) {\n+        return path.getFileName().toString().endsWith(\".txt\");\n@@ -64,0 +125,8 @@\n+    \/\/ Note: To specify file use \".txt\" extension.\n+    private static final Path [] DIR_STRUCT = {\n+        Path.of(\"folder-empty\"),\n+        Path.of(\"folder-not-empty\"),\n+        Path.of(\"folder-not-empty\", \"folder-empty\"),\n+        Path.of(\"folder-not-empty\", \"another-folder-empty\"),\n+        Path.of(\"folder-not-empty\", \"folder-non-empty2\", \"file.txt\")\n+    };\n","filename":"test\/jdk\/tools\/jpackage\/share\/EmptyFolderTest.java","additions":84,"deletions":15,"binary":false,"changes":99,"status":"modified"}]}