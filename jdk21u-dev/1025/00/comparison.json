{"files":[{"patch":"@@ -28,0 +28,1 @@\n+ * @requires ! vm.opt.final.UnlockExperimentalVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/BlackholeExperimentalUnlockTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test VMOptionWarningExperimental\n@@ -27,1 +27,1 @@\n- * @summary Warn if diagnostic or experimental vm option is used and -XX:+UnlockDiagnosticVMOptions or -XX:+UnlockExperimentalVMOptions, respectively, isn't specified. Warn if develop or notproduct vm option is used with product version of VM.\n+ * @summary Warn if experimental vm option is used and -XX:+UnlockExperimentalVMOptions isn't specified.\n@@ -29,0 +29,1 @@\n+ * @requires ! vm.opt.final.UnlockExperimentalVMOptions\n@@ -32,1 +33,23 @@\n- * @run driver VMOptionWarning\n+ * @run driver VMOptionWarning Experimental\n+ *\/\n+\n+\/* @test VMOptionWarningDiagnostic\n+ * @bug 8027314\n+ * @summary Warn if diagnostic vm option is used and -XX:+UnlockDiagnosticVMOptions isn't specified.\n+ * @requires vm.flagless\n+ * @requires ! vm.debug\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver VMOptionWarning Diagnostic\n+ *\/\n+\n+\/* @test VMOptionWarningDevelop\n+ * @bug 8027314\n+ * @summary Warn if develop or notproduct vm option is used with product version of VM.\n+ * @requires vm.flagless\n+ * @requires ! vm.debug\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver VMOptionWarning Develop\n@@ -41,8 +64,2 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+AlwaysSafeConstructors\", \"-version\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldNotHaveExitValue(0);\n-        output.shouldContain(\"Error: VM option 'AlwaysSafeConstructors' is experimental and must be enabled via -XX:+UnlockExperimentalVMOptions.\");\n-\n-        if (Platform.isDebugBuild()) {\n-            System.out.println(\"Skip the rest of the tests on debug builds since diagnostic, develop, and notproduct options are available on debug builds.\");\n-            return;\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"wrong number of args: \" + args.length);\n@@ -51,4 +68,22 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+PrintInlining\", \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldNotHaveExitValue(0);\n-        output.shouldContain(\"Error: VM option 'PrintInlining' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.\");\n+        ProcessBuilder pb;\n+        OutputAnalyzer output;\n+        switch (args[0]) {\n+            case \"Experimental\": {\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+AlwaysSafeConstructors\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldNotHaveExitValue(0);\n+                output.shouldContain(\"Error: VM option 'AlwaysSafeConstructors' is experimental and must be enabled via -XX:+UnlockExperimentalVMOptions.\");\n+                break;\n+            }\n+            case \"Diagnostic\": {\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+PrintInlining\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldNotHaveExitValue(0);\n+                output.shouldContain(\"Error: VM option 'PrintInlining' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.\");\n+                break;\n+            }\n+            case \"Develop\": {\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+VerifyStack\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldNotHaveExitValue(0);\n+                output.shouldContain(\"Error: VM option 'VerifyStack' is develop and is available only in debug version of VM.\");\n@@ -56,9 +91,10 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+VerifyStack\", \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldNotHaveExitValue(0);\n-        output.shouldContain(\"Error: VM option 'VerifyStack' is develop and is available only in debug version of VM.\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+CheckCompressedOops\", \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldNotHaveExitValue(0);\n-        output.shouldContain(\"Error: VM option 'CheckCompressedOops' is notproduct and is available only in debug version of VM.\");\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+CheckCompressedOops\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldNotHaveExitValue(0);\n+                output.shouldContain(\"Error: VM option 'CheckCompressedOops' is notproduct and is available only in debug version of VM.\");\n+                break;\n+            }\n+            default: {\n+                throw new RuntimeException(\"Invalid argument: \" + args[0]);\n+            }\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMOptionWarning.java","additions":60,"deletions":24,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -382,0 +382,1 @@\n+        vmOptFinalFlag(map, \"UnlockExperimentalVMOptions\");\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}