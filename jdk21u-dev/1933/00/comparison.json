{"files":[{"patch":"@@ -49,0 +49,1 @@\n+  int yields = 0;\n@@ -71,1 +72,1 @@\n-          os::naked_yield();\n+          yield_or_sleep(yields);\n@@ -74,1 +75,1 @@\n-        os::naked_yield();\n+        yield_or_sleep(yields);\n@@ -77,1 +78,1 @@\n-      os::naked_yield();\n+      yield_or_sleep(yields);\n@@ -82,0 +83,12 @@\n+void ShenandoahLock::yield_or_sleep(int &yields) {\n+  \/\/ Simple yield-sleep policy: do one 100us sleep after every N yields.\n+  \/\/ Tested with different values of N, and chose 3 for best performance.\n+  if (yields < 3) {\n+    os::naked_yield();\n+    yields++;\n+  } else {\n+    os::naked_short_nanosleep(100000);\n+    yields = 0;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLock.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+  static void yield_or_sleep(int &yields);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLock.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}