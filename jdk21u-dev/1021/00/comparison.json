{"files":[{"patch":"@@ -570,2 +570,13 @@\n-            if (keySensitive) {\n-                return new P11RSAPrivateKeyInternal(session, keyID, algorithm,\n+            P11RSAPrivateKeyInternal p11Key = null;\n+            if (!keySensitive) {\n+                \/\/ Key is not sensitive: try to interpret as CRT or non-CRT.\n+                p11Key = asCRT(session, keyID, algorithm, keyLength, attrs);\n+                if (p11Key == null) {\n+                    p11Key = asNonCRT(session, keyID, algorithm, keyLength,\n+                            attrs);\n+                }\n+            }\n+            if (p11Key == null) {\n+                \/\/ Key is sensitive or there was a failure while querying its\n+                \/\/ attributes: handle as opaque.\n+                p11Key = new P11RSAPrivateKeyInternal(session, keyID, algorithm,\n@@ -573,20 +584,17 @@\n-            } else {\n-                CK_ATTRIBUTE[] rsaAttrs = new CK_ATTRIBUTE[] {\n-                        new CK_ATTRIBUTE(CKA_MODULUS),\n-                        new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n-                        new CK_ATTRIBUTE(CKA_PUBLIC_EXPONENT),\n-                        new CK_ATTRIBUTE(CKA_PRIME_1),\n-                        new CK_ATTRIBUTE(CKA_PRIME_2),\n-                        new CK_ATTRIBUTE(CKA_EXPONENT_1),\n-                        new CK_ATTRIBUTE(CKA_EXPONENT_2),\n-                        new CK_ATTRIBUTE(CKA_COEFFICIENT),\n-                };\n-                boolean isCRT = true;\n-                Session tempSession = null;\n-                try {\n-                    tempSession = session.token.getOpSession();\n-                    session.token.p11.C_GetAttributeValue(tempSession.id(),\n-                            keyID, rsaAttrs);\n-                    for (CK_ATTRIBUTE attr : rsaAttrs) {\n-                        isCRT &= (attr.pValue instanceof byte[]);\n-                        if (!isCRT) break;\n+            }\n+            return p11Key;\n+        }\n+\n+        private static CK_ATTRIBUTE[] tryFetchAttributes(Session session,\n+                long keyID, long... attrTypes) {\n+            int i = 0;\n+            CK_ATTRIBUTE[] attrs = new CK_ATTRIBUTE[attrTypes.length];\n+            for (long attrType : attrTypes) {\n+                attrs[i++] = new CK_ATTRIBUTE(attrType);\n+            }\n+            try {\n+                session.token.p11.C_GetAttributeValue(session.id(), keyID,\n+                        attrs);\n+                for (CK_ATTRIBUTE attr : attrs) {\n+                    if (!(attr.pValue instanceof byte[])) {\n+                        return null;\n@@ -594,15 +602,0 @@\n-                } catch (PKCS11Exception e) {\n-                    \/\/ ignore, assume not available\n-                    isCRT = false;\n-                } finally {\n-                    session.token.releaseSession(tempSession);\n-                }\n-                BigInteger n = rsaAttrs[0].getBigInteger();\n-                BigInteger d = rsaAttrs[1].getBigInteger();\n-                if (isCRT) {\n-                    return new P11RSAPrivateKey(session, keyID, algorithm,\n-                           keyLength, attrs, n, d,\n-                           Arrays.copyOfRange(rsaAttrs, 2, rsaAttrs.length));\n-                } else {\n-                    return new P11RSAPrivateNonCRTKey(session, keyID,\n-                           algorithm, keyLength, attrs, n, d);\n@@ -610,0 +603,30 @@\n+                return attrs;\n+            } catch (PKCS11Exception ignored) {\n+                \/\/ ignore, assume not available\n+                return null;\n+            }\n+        }\n+\n+        private static P11RSAPrivateKeyInternal asCRT(Session session,\n+                long keyID, String algorithm, int keyLength,\n+                CK_ATTRIBUTE[] attrs) {\n+            CK_ATTRIBUTE[] rsaCRTAttrs = tryFetchAttributes(session, keyID,\n+                    CKA_MODULUS, CKA_PRIVATE_EXPONENT, CKA_PUBLIC_EXPONENT,\n+                    CKA_PRIME_1, CKA_PRIME_2, CKA_EXPONENT_1, CKA_EXPONENT_2,\n+                    CKA_COEFFICIENT);\n+            if (rsaCRTAttrs == null) {\n+                return null;\n+            }\n+            return new P11RSAPrivateKey(session, keyID, algorithm, keyLength,\n+                    attrs, rsaCRTAttrs[0].getBigInteger(),\n+                    rsaCRTAttrs[1].getBigInteger(),\n+                    Arrays.copyOfRange(rsaCRTAttrs, 2, rsaCRTAttrs.length));\n+        }\n+\n+        private static P11RSAPrivateKeyInternal asNonCRT(Session session,\n+                long keyID, String algorithm, int keyLength,\n+                CK_ATTRIBUTE[] attrs) {\n+            CK_ATTRIBUTE[] rsaNonCRTAttrs = tryFetchAttributes(session, keyID,\n+                    CKA_MODULUS, CKA_PRIVATE_EXPONENT);\n+            if (rsaNonCRTAttrs == null) {\n+                return null;\n@@ -611,0 +634,3 @@\n+            return new P11RSAPrivateNonCRTKey(session, keyID, algorithm,\n+                    keyLength, attrs, rsaNonCRTAttrs[0].getBigInteger(),\n+                    rsaNonCRTAttrs[1].getBigInteger());\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Key.java","additions":63,"deletions":37,"binary":false,"changes":100,"status":"modified"}]}