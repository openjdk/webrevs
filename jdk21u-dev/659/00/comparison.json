{"files":[{"patch":"@@ -1085,7 +1085,8 @@\n-          Node* arg = kit.argument(0);\n-          const TypeOopPtr* arg_type = arg->bottom_type()->isa_oopptr();\n-          const Type*       sig_type = TypeOopPtr::make_from_klass(signature->accessing_klass());\n-          if (arg_type != nullptr && !arg_type->higher_equal(sig_type)) {\n-            const Type* recv_type = arg_type->filter_speculative(sig_type); \/\/ keep speculative part\n-            Node* cast_obj = gvn.transform(new CheckCastPPNode(kit.control(), arg, recv_type));\n-            kit.set_argument(0, cast_obj);\n+          Node* recv = kit.argument(0);\n+          Node* casted_recv = kit.maybe_narrow_object_type(recv, signature->accessing_klass());\n+          if (casted_recv->is_top()) {\n+            print_inlining_failure(C, callee, jvms->depth() - 1, jvms->bci(),\n+                                   \"argument types mismatch\");\n+            return nullptr; \/\/ FIXME: effectively dead; issue a halt node instead\n+          } else if (casted_recv != recv) {\n+            kit.set_argument(0, casted_recv);\n@@ -1099,6 +1100,7 @@\n-            const TypeOopPtr* arg_type = arg->bottom_type()->isa_oopptr();\n-            const Type*       sig_type = TypeOopPtr::make_from_klass(t->as_klass());\n-            if (arg_type != nullptr && !arg_type->higher_equal(sig_type)) {\n-              const Type* narrowed_arg_type = arg_type->filter_speculative(sig_type); \/\/ keep speculative part\n-              Node* cast_obj = gvn.transform(new CheckCastPPNode(kit.control(), arg, narrowed_arg_type));\n-              kit.set_argument(receiver_skip + j, cast_obj);\n+            Node* casted_arg = kit.maybe_narrow_object_type(arg, t->as_klass());\n+            if (casted_arg->is_top()) {\n+              print_inlining_failure(C, callee, jvms->depth() - 1, jvms->bci(),\n+                                     \"argument types mismatch\");\n+              return nullptr; \/\/ FIXME: effectively dead; issue a halt node instead\n+            } else if (casted_arg != arg) {\n+              kit.set_argument(receiver_skip + j, casted_arg);\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -4221,0 +4221,11 @@\n+\n+Node* GraphKit::maybe_narrow_object_type(Node* obj, ciKlass* type) {\n+  const TypeOopPtr* obj_type = obj->bottom_type()->isa_oopptr();\n+  const TypeOopPtr* sig_type = TypeOopPtr::make_from_klass(type);\n+  if (obj_type != nullptr && sig_type->is_loaded() && !obj_type->higher_equal(sig_type)) {\n+    const Type* narrow_obj_type = obj_type->filter_speculative(sig_type); \/\/ keep speculative part\n+    Node* casted_obj = gvn().transform(new CheckCastPPNode(control(), obj, narrow_obj_type));\n+    return casted_obj;\n+  }\n+  return obj;\n+}\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -444,0 +444,2 @@\n+  Node* maybe_narrow_object_type(Node* obj, ciKlass* type);\n+\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322726\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.org.objectweb.asm\n+ *\n+ * @compile TestMHUnloaded.java TestMHUnloadedHelper.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller compiler.runtime.unloaded.TestMHUnloadedHelper\n+ * @run main\/othervm -Xbootclasspath\/a:.\n+ *                   -Xbatch -XX:-TieredCompilation -XX:CompileCommand=exclude,*::test\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+PrintCompilation -XX:+PrintInlining\n+ *                      compiler.runtime.unloaded.TestMHUnloaded\n+ *\/\n+\n+package compiler.runtime.unloaded;\n+\n+import java.lang.invoke.MethodHandles;\n+\n+public class TestMHUnloaded {\n+    public static void main(String[] args) {\n+        TestMHUnloadedHelper.test(MethodHandles.lookup()); \/\/ launch test in bootstrap loader context\n+        TestMHUnloadedHelper.testConstant(MethodHandles.lookup()); \/\/ launch test in bootstrap loader context\n+        System.out.println(\"TEST PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/unloaded\/TestMHUnloaded.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.runtime.unloaded;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.BiPredicate;\n+import jdk.internal.org.objectweb.asm.ClassWriter;\n+\n+import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+\n+\/\/ Operates in bootstrap loader context.\n+public class TestMHUnloadedHelper {\n+    private static final MethodType METHOD_TYPE = MethodType.methodType(BiPredicate.class,\n+                                                                        BiPredicate.class, BiPredicate.class);\n+\n+    static byte[] generateClassFile(Class<?> caller) {\n+        var cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n+        String name = caller.getName().replace('.', '\/');\n+        cw.visit(V19, ACC_PUBLIC | ACC_SUPER, name, null, \"java\/lang\/Object\", null);\n+        {\n+            var mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"test\", METHOD_TYPE.toMethodDescriptorString(), null, null);\n+            mv.visitCode();\n+            mv.visitIntInsn(ALOAD, 1);\n+            mv.visitInsn(ARETURN);\n+            mv.visitMaxs(0, 0);\n+        }\n+        return cw.toByteArray();\n+    }\n+\n+    public static MethodHandle generateTest(MethodHandles.Lookup caller) {\n+        \/\/ Loaded in the caller context.\n+        byte[] classBytes = generateClassFile(caller.lookupClass());\n+        try {\n+            MethodHandles.Lookup lookup = caller.defineHiddenClass(classBytes, true);\n+            MethodHandle test = lookup.findStatic(lookup.lookupClass(), \"test\", METHOD_TYPE);\n+            test = MethodHandles.permuteArguments(test, test.type(), 1, 0); \/\/ mix arguments\n+            return test;\n+        } catch (Throwable e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    static BiPredicate[] ps = new BiPredicate[] { (a, b) -> false,\n+                                                  (a, b) -> true };\n+\n+    public static void test(MethodHandles.Lookup caller) {\n+        MethodHandle test = generateTest(caller);\n+\n+        for (int i = 0; i < 20_000; i++) {\n+            try {\n+                BiPredicate pr = (BiPredicate)test.invokeExact(ps[1], ps[0]);\n+                if (pr != ps[1]) {\n+                    throw new AssertionError(\"mismatch\");\n+                }\n+            } catch (Throwable e) {\n+                throw new AssertionError(e);\n+            }\n+        }\n+    }\n+\n+    public static void testConstant(MethodHandles.Lookup caller) {\n+        MethodHandle test = generateTest(caller);\n+\n+        \/\/ testMH() { return test(ps2, ps1); } where test(a, b) { return b; }.\n+        test = test.bindTo(ps[1]).bindTo(ps[0]); \/\/ make argument concrete types visible to the JIT-compiler\n+\n+        for (int i = 0; i < 20_000; i++) {\n+            try {\n+                BiPredicate pr = (BiPredicate)test.invokeExact();\n+                if (pr != ps[1]) {\n+                    throw new AssertionError(\"mismatch\");\n+                }\n+            } catch (Throwable e) {\n+                throw new AssertionError(e);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/unloaded\/TestMHUnloadedHelper.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}