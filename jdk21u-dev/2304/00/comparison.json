{"files":[{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4176525\n+ * @summary InputEvent.getWhen() returns the wrong event time.\n+ * @key headful\n+ * @run main InputEventTimeTest\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Date;\n+\n+public class InputEventTimeTest extends Frame {\n+    public void initUI() {\n+        setTitle(\"Input Event Time Test\");\n+        enableEvents(AWTEvent.MOUSE_EVENT_MASK);\n+        enableEvents(AWTEvent.KEY_EVENT_MASK);\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+    }\n+\n+    public void center(Point point) {\n+        Point loc = getLocationOnScreen();\n+        Dimension size = getSize();\n+        point.setLocation(loc.x + (size.width \/ 2), loc.y + (size.height \/ 2));\n+    }\n+\n+    public void processEvent(AWTEvent e) {\n+        long currentTime;\n+        long eventTime;\n+        long difference;\n+\n+        if (!(e instanceof InputEvent)) {\n+            return;\n+        }\n+\n+        currentTime = (new Date()).getTime();\n+        eventTime = ((InputEvent) e).getWhen();\n+        difference = currentTime - eventTime;\n+\n+        if ((difference > 5000) || (difference < -5000)) {\n+            throw new RuntimeException(\"The difference between current time\" +\n+                    \" and event creation time is \" + difference + \"ms\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        InputEventTimeTest test = new InputEventTimeTest();\n+        try {\n+            EventQueue.invokeAndWait(test::initUI);\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(50);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            Point center = new Point();\n+            EventQueue.invokeAndWait(() -> test.center(center));\n+            robot.mouseMove(center.x, center.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON2_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON2_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            for (int i = 0; i < 6; i++) {\n+                robot.keyPress(KeyEvent.VK_A + i);\n+                robot.keyRelease(KeyEvent.VK_A + i);\n+                robot.waitForIdle();\n+            }\n+            for (int i = 0; i < 150; i += 5) {\n+                robot.mouseMove(center.x - i, center.y - i);\n+            }\n+            for (int i = 150; i > 0; i -= 5) {\n+                robot.mouseMove(center.x - i, center.y - i);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/InputEvent\/InputEventTimeTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4425654\n+ * @summary Test wheel scrolling of heavyweight components\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual HWWheelScroll\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.TextArea;\n+import java.awt.Window;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+\n+public class HWWheelScroll {\n+    public static final int TEXT_TALL = 0;\n+    public static final int TEXT_WIDE = 1;\n+    public static final int TEXT_SMALL = 2;\n+    public static final int TEXT_BIG = 3;\n+    static String INSTRUCTIONS = \"\"\"\n+            Test for mouse wheel scrolling of heavyweight components with built-in\n+            scrollbars or similar functionality that is controlled by guestures\n+            such as Apple Magic Mouse or trackpad scrolling guesture.\n+            Several windows containing either a TextArea, List, Choice, or a\n+            FileDialog will appear. For each window, use the mouse wheel to\n+            scroll its content, and then minimize it or move away\n+            and continue with the next window.\n+            Do not close any of the opened windows except the FileDialog.\n+            For the FileDialog, first change to a directory with enough items that a\n+            scrollbar appears.\n+            Some of the other windows don't have enough text to warrant scrollbars,\n+            but should be tested anyway to make sure no crash or hang occurs.\n+            If all scrollbars scroll correctly, press \"Pass\", otherwise press \"Fail\".\n+            \"\"\";\n+\n+    public static ArrayList<Window> initUI() {\n+        ArrayList<Window> retValue = new ArrayList<>();\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_BOTH, TEXT_BIG));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_BOTH, TEXT_TALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_BOTH, TEXT_SMALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_BOTH, TEXT_WIDE));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_VERTICAL_ONLY, TEXT_TALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_VERTICAL_ONLY, TEXT_SMALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_HORIZONTAL_ONLY, TEXT_SMALL));\n+        retValue.add(makeTextFrame(TextArea.SCROLLBARS_HORIZONTAL_ONLY, TEXT_WIDE));\n+        retValue.add(makeListFrame(TEXT_TALL));\n+        retValue.add(makeListFrame(TEXT_WIDE));\n+        retValue.add(makeListFrame(TEXT_SMALL));\n+        Frame f = new Frame(\"File Dialog Owner\");\n+        f.setSize(150, 150);\n+        f.setLocationRelativeTo(null);\n+        FileDialog fd = new FileDialog(f, \"FileDialog\");\n+        fd.setDirectory(\".\");\n+        retValue.add(fd);\n+        retValue.add(f);\n+        Frame choiceFrame = new Frame(\"Choice\");\n+        Choice c = new Choice();\n+        for (int i = 0; i < 50; i++) {\n+            c.add(i + \" choice item\");\n+        }\n+        choiceFrame.add(c);\n+        choiceFrame.setSize(150, 150);\n+        choiceFrame.setLocationRelativeTo(null);\n+        retValue.add(choiceFrame);\n+        return retValue;\n+    }\n+\n+    public static Frame makeTextFrame(int policy, int textShape) {\n+        Frame f = new Frame(\"TextArea\");\n+        f.add(makeTextArea(policy, textShape));\n+        f.setSize(150, 150);\n+        f.setLocationRelativeTo(null);\n+        return f;\n+    }\n+\n+    public static Frame makeListFrame(int textShape) {\n+        Frame f = new Frame(\"List\");\n+        f.add(makeList(textShape));\n+        f.setSize(150, 150);\n+        f.setLocationRelativeTo(null);\n+        return f;\n+    }\n+\n+    public static TextArea makeTextArea(int policy, int textShape) {\n+        TextArea ta = new TextArea(\"\", 0, 0, policy);\n+        if (textShape == TEXT_TALL) {\n+            for (int i = 0; i < 50 ; i++) {\n+                ta.append(i + \"\\n\");\n+            }\n+        } else if (textShape == TEXT_WIDE) {\n+            for (int i = 0; i < 2; i++) {\n+                ta.append(i + \"very, very, very, very, very, very, very, long line of text number\\n\");\n+            }\n+        } else if (textShape == TEXT_SMALL) {\n+            ta.append(\"text\");\n+        } else if (textShape == TEXT_BIG) {\n+            for (int i = 0; i < 50 ; i++) {\n+                ta.append(i + \"very, very, very, very, very, very, very, long line of text number\\n\");\n+            }\n+        }\n+        return ta;\n+    }\n+\n+    public static List makeList(int textShape) {\n+        java.awt.List l = new java.awt.List();\n+        if (textShape == TEXT_TALL) {\n+            for (int i = 0; i < 50 ; i++) {\n+                l.add(\" \" + i + \" \");\n+            }\n+        }  else if (textShape == TEXT_WIDE) {\n+            for (int i = 0; i < 2 ; i++) {\n+                l.add(i + \"very, very, very, very, very, very, very, long line of text number\");\n+            }\n+        }  else if (textShape == TEXT_SMALL) {\n+            l.add(\"text\");\n+        } else if (textShape == TEXT_BIG) {\n+            for (int i = 0; i < 50 ; i++) {\n+                l.add(i + \"very, very, very, very, very, very, very, long line of text number\");\n+            }\n+        }\n+        return l;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(HWWheelScroll::initUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseWheelEvent\/HWWheelScroll.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4492456\n+ * @summary MouseWheelEvent coordinates are wrong\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual WheelEventCoord\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class WheelEventCoord extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+            This test requires mouse with scrolling wheel or device,\n+            that has capability to simulate scrolling wheel with gestures\n+            such as Apple mouse or a trackpad with gesture control.\n+            If you do not have such device press \"Pass\".\n+            Move mouse to the top of the button named \"Button 1\".\n+            While constantly turning mouse wheel up and down slowly move\n+            mouse cursor until it reaches bottom of the button named \"Button 3\".\n+            While doing so look at the log area.\n+            If despite the wheel direction y coordinate is steadily increases\n+            as you move the mouse down press \"Pass\".\n+            If y coordinate decreases when cursor is moving down or suddenly jumps\n+            by more than 50 points when crossing to another button press \"Fail\".\n+            \"\"\";\n+\n+    public WheelEventCoord() {\n+        super(\"Wheel Event Coordinates\");\n+        setLayout(new GridLayout(3, 1));\n+\n+        add(new BigButton(\"Button 1\"));\n+        add(new BigButton(\"Button 2\"));\n+        add(new BigButton(\"Button 3\"));\n+\n+        addMouseWheelListener(e -> PassFailJFrame.log(\"Mouse y coordinate = \" + e.getY()));\n+        pack();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Wheel Event Coordinates Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(WheelEventCoord::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class BigButton extends Button {\n+    public BigButton(String label) {\n+        super(label);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(300, 100);\n+    }\n+\n+    public Dimension getMinimumSize() {\n+        return getPreferredSize();\n+    }\n+\n+    public Dimension getMaximumSize() {\n+        return getPreferredSize();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseWheelEvent\/WheelEventCoord.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4372477\n+ * @summary Test disabling of wheel scrolling\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual WheelScrollEnabled\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Checkbox;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class WheelScrollEnabled extends Frame {\n+    static String INSTRUCTIONS = \"\"\"\n+            This test requires mouse with a scrolling wheel or\n+            device that is able to simulate scrolling using gestures.\n+            If you do not have such device press \"Pass\" to skip testing.\n+            You should see a ScrollPane with some labels in it and two checkboxes.\n+            For each of the four combinations of the two checkboxes,\n+            move the cursor over the ScrollPane and rotate the mouse wheel.\n+            When (and ONLY when) the 'WheelListener added' checkbox is checked,\n+            scrolling the mouse wheel should produce a text message in the log area.\n+            When (and ONLY when) the 'Wheel scrolling enabled' checkbox is checked,\n+            the ScrollPane should scroll when mouse wheel is scrolled on top of it.\n+            If all four checkbox combinations work properly press \"Pass\",\n+            otherwise press \"Fail\".\n+            \"\"\";\n+    MouseWheelListener mwl;\n+    Checkbox cb;\n+    Checkbox cb2;\n+    ScrollPane sp;\n+\n+    public WheelScrollEnabled() {\n+        setLayout(new BorderLayout());\n+        Panel pnl = new Panel();\n+        pnl.setLayout(new GridLayout(10, 10));\n+        for (int i = 0; i < 100; i++) {\n+            pnl.add(new Label(\"Label \" + i));\n+        }\n+        sp = new ScrollPane();\n+        sp.add(pnl);\n+        sp.setWheelScrollingEnabled(false);\n+        mwl = new MouseWheelListener() {\n+            int i;\n+            @Override\n+            public void mouseWheelMoved(MouseWheelEvent e) {\n+                PassFailJFrame.log(\"mouseWheelMoved \" + i++);\n+            }\n+        };\n+        sp.addMouseWheelListener(mwl);\n+        add(sp, BorderLayout.CENTER);\n+\n+        Panel pl2 = new Panel();\n+        ItemListener il = new ControlListener();\n+\n+        cb = new Checkbox(\"WheelListener added\", true);\n+        cb.addItemListener(il);\n+        pl2.add(cb);\n+\n+        cb2 = new Checkbox(\"Wheel scrolling enabled\", false);\n+        cb2.addItemListener(il);\n+        pl2.add(cb2);\n+\n+        add(pl2, BorderLayout.SOUTH);\n+        setSize(400, 200);\n+    }\n+\n+    class ControlListener implements ItemListener {\n+        public void itemStateChanged(ItemEvent e) {\n+            if (e.getSource() == cb) {\n+                boolean state = cb.getState();\n+                if (state) {\n+                    sp.addMouseWheelListener(mwl);\n+                }\n+                else {\n+                    sp.removeMouseWheelListener(mwl);\n+                }\n+            }\n+            if (e.getSource() == cb2) {\n+                sp.setWheelScrollingEnabled(cb2.getState());\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Wheel Scroll Enabled Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(WheelScrollEnabled::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/event\/MouseWheelEvent\/WheelScrollEnabled.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}