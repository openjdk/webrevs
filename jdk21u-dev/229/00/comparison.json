{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,2 +147,1 @@\n-        return Platform.jvmLibDir().resolve((Platform.isWindows() ? \"\" : \"lib\")\n-                + \"jsig.\" + Platform.sharedLibraryExt());\n+        return Platform.jvmLibDir().resolve(Platform.buildSharedLibraryName(\"jsig\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/signal\/SigTestDriver.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,8 +42,1 @@\n-        String libname;\n-        if (Platform.isWindows()) {\n-            libname = name + \".dll\";\n-        } else if (Platform.isOSX()) {\n-            libname = \"lib\" + name + \".dylib\";\n-        } else {\n-            libname = \"lib\" + name + \".so\";\n-        }\n+        String libname = Platform.buildSharedLibraryName(name);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/jvmti\/AttachFailed\/AttachFailedTestBase.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-        Path libpath = Paths.get(jdkPath, jdkLibPath(), sharedObjectName(\"instrument\"));\n+        Path libpath = Paths.get(jdkPath, jdkLibPath(), Platform.buildSharedLibraryName(\"instrument\"));\n@@ -160,13 +160,0 @@\n-    \/**\n-     * Build name of shared object according to platform rules\n-     *\/\n-    public static String sharedObjectName(String name) {\n-        if (Platform.isWindows()) {\n-            return name + \".dll\";\n-        }\n-        if (Platform.isOSX()) {\n-            return \"lib\" + name + \".dylib\";\n-        }\n-        return \"lib\" + name + \".so\";\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/jvmti\/LoadAgentDcmdTest.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,19 +47,3 @@\n-\n-        String osDependentBaseString = null;\n-        if (Platform.isAix()) {\n-            osDependentBaseString = \"lib%s.so\";\n-        } else if (Platform.isLinux()) {\n-            osDependentBaseString = \"lib%s.so\";\n-        } else if (Platform.isOSX()) {\n-            osDependentBaseString = \"lib%s.dylib\";\n-        } else if (Platform.isWindows()) {\n-            osDependentBaseString = \"%s.dll\";\n-        }\n-\n-        if (osDependentBaseString == null) {\n-            Assert.fail(\"Unsupported OS\");\n-        }\n-\n-        output.shouldContain(String.format(osDependentBaseString, \"jvm\"));\n-        output.shouldContain(String.format(osDependentBaseString, \"java\"));\n-        output.shouldContain(String.format(osDependentBaseString, \"management\"));\n+        output.shouldContain(Platform.buildSharedLibraryName(\"jvm\"));\n+        output.shouldContain(Platform.buildSharedLibraryName(\"java\"));\n+        output.shouldContain(Platform.buildSharedLibraryName(\"management\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/DynLibsTest.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-                        .resolve(libname(args[0]))\n+                        .resolve(Platform.buildSharedLibraryName(args[0]))\n@@ -42,1 +42,1 @@\n-            Path dst = dstDir.resolve(libname(args[i])).toAbsolutePath();\n+            Path dst = dstDir.resolve(Platform.buildSharedLibraryName(args[i])).toAbsolutePath();\n@@ -51,7 +51,0 @@\n-\n-    private static String libname(String name) {\n-        return String.format(\"%s%s.%s\",\n-                Platform.isWindows() ? \"\" : \"lib\",\n-                name,\n-                Platform.sharedLibraryExt());\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/NativeLibraryCopier.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -82,3 +82,2 @@\n-        String prefix = Platform.isWindows() ? \"\" : \"lib\";\n-        String libname1 = prefix + JVMTI_AGENT1_LIB + \".\" + Platform.sharedLibraryExt();\n-        String libname2 = prefix + JVMTI_AGENT2_LIB + \".\" + Platform.sharedLibraryExt();\n+        String libname1 = Platform.buildSharedLibraryName(JVMTI_AGENT1_LIB);\n+        String libname2 = Platform.buildSharedLibraryName(JVMTI_AGENT2_LIB);\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/warnings\/DynamicLoadWarningTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,15 +73,0 @@\n-        String libTemplate = null;\n-        if (Platform.isWindows()) {\n-            libTemplate = \"%s.dll\";\n-        } else if (Platform.isOSX()) {\n-            libTemplate = \"lib%s.dylib\";\n-        } else if (Platform.isLinux()) {\n-            libTemplate = \"lib%s.so\";\n-        } else if (Platform.isAix()) {\n-            libTemplate = \"lib%s.so\";\n-        }\n-\n-        if (libTemplate == null) {\n-            throw new Exception(\"Unsupported OS\");\n-        }\n-\n@@ -91,1 +76,1 @@\n-            libs.add(String.format(libTemplate, name));\n+            libs.add(Platform.buildSharedLibraryName(name));\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestNativeLibrariesEvent.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -380,0 +380,21 @@\n+    \/**\n+     * Returns the usual file prefix of a shared library, e.g. \"lib\" on linux, empty on windows.\n+     * @return file name prefix\n+     *\/\n+    public static String sharedLibraryPrefix() {\n+        if (isWindows()) {\n+            return \"\";\n+        } else {\n+            return \"lib\";\n+        }\n+    }\n+\n+    \/**\n+     * Returns the usual full shared lib name of a name without prefix and extension, e.g. for jsig\n+     * \"libjsig.so\" on linux, \"jsig.dll\" on windows.\n+     * @return the full shared lib name\n+     *\/\n+    public static String buildSharedLibraryName(String name) {\n+        return sharedLibraryPrefix() + name + \".\" + sharedLibraryExt();\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}