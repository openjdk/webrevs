{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -320,1 +320,1 @@\n-        AppOutputVerifier av = getVerifier(cmd, args);\n+        AppOutputVerifier av = assertMainLauncher(cmd, args);\n@@ -322,2 +322,1 @@\n-            \/\/ when running app launchers, clear users environment\n-            av.executeAndVerifyOutput(true, args);\n+            av.executeAndVerifyOutput(args);\n@@ -329,2 +328,6 @@\n-        AppOutputVerifier av = getVerifier(cmd, args);\n-        return av.executeOnly(true, args);\n+        AppOutputVerifier av = assertMainLauncher(cmd, args);\n+        if (av != null) {\n+            return av.saveOutput(true).execute(args);\n+        } else {\n+            return null;\n+        }\n@@ -333,1 +336,1 @@\n-    private static AppOutputVerifier getVerifier(JPackageCommand cmd,\n+    public static AppOutputVerifier assertMainLauncher(JPackageCommand cmd,\n@@ -357,0 +360,20 @@\n+\n+            if (TKit.isWindows()) {\n+                \/\/ When running app launchers on Windows, clear users environment (JDK-8254920)\n+                removePath(true);\n+            }\n+        }\n+\n+        public AppOutputVerifier removePath(boolean v) {\n+            removePath = v;\n+            return this;\n+        }\n+\n+        public AppOutputVerifier saveOutput(boolean v) {\n+            saveOutput = v;\n+            return this;\n+        }\n+\n+        public AppOutputVerifier expectedExitCode(int v) {\n+            expectedExitCode = v;\n+            return this;\n@@ -375,0 +398,2 @@\n+            } else if (\"jpackage.test.noexit\".equals(name)) {\n+                launcherNoExit = Boolean.parseBoolean(value);\n@@ -418,11 +443,2 @@\n-            executeAndVerifyOutput(false, args);\n-        }\n-\n-        public void executeAndVerifyOutput(boolean removePath,\n-                List<String> launcherArgs, List<String> appArgs) {\n-            final int attempts = 3;\n-            final int waitBetweenAttemptsSeconds = 5;\n-            getExecutor(launcherArgs.toArray(new String[0])).dumpOutput().setRemovePath(\n-                    removePath).executeAndRepeatUntilExitCode(expectedExitCode,\n-                            attempts, waitBetweenAttemptsSeconds);\n-            verifyOutputFile(outputFilePath, appArgs, params);\n+            execute(args);\n+            verifyOutput(args);\n@@ -431,5 +447,3 @@\n-        public void executeAndVerifyOutput(boolean removePath, String... args) {\n-            final List<String> launcherArgs = List.of(args);\n-            final List<String> appArgs;\n-            if (launcherArgs.isEmpty()) {\n-                appArgs = defaultLauncherArgs;\n+        public Executor.Result execute(String... args) {\n+            if (launcherNoExit) {\n+                return getExecutor(args).executeWithoutExitCodeCheck();\n@@ -437,1 +451,4 @@\n-                appArgs = launcherArgs;\n+                final int attempts = 3;\n+                final int waitBetweenAttemptsSeconds = 5;\n+                return getExecutor(args).executeAndRepeatUntilExitCode(expectedExitCode, attempts,\n+                        waitBetweenAttemptsSeconds);\n@@ -439,9 +456,0 @@\n-\n-            executeAndVerifyOutput(removePath, launcherArgs, appArgs);\n-        }\n-\n-        public Executor.Result executeOnly(boolean removePath, String...args) {\n-            return getExecutor(args)\n-                    .saveOutput()\n-                    .setRemovePath(removePath)\n-                    .executeWithoutExitCodeCheck();\n@@ -467,0 +475,3 @@\n+                    .saveOutput(saveOutput)\n+                    .dumpOutput()\n+                    .setRemovePath(removePath)\n@@ -471,0 +482,3 @@\n+        private boolean launcherNoExit;\n+        private boolean removePath;\n+        private boolean saveOutput;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/HelloApp.java","additions":47,"deletions":33,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,0 @@\n-import java.nio.file.Path;\n-import java.util.List;\n-import java.util.ArrayList;\n@@ -55,4 +52,5 @@\n-        Path launcherPath = cmd.appLauncherPath();\n-        HelloApp.assertApp(launcherPath)\n-                .executeAndVerifyOutput(false, List.of(\"-psn_1_1\"),\n-                        new ArrayList<>());\n+        var appVerifier = HelloApp.assertMainLauncher(cmd);\n+        if (appVerifier != null) {\n+            appVerifier.execute(\"-psn_1_1\");\n+            appVerifier.verifyOutput();\n+        }\n@@ -66,4 +64,5 @@\n-        Path launcherPath = cmd.appLauncherPath();\n-        HelloApp.assertApp(launcherPath)\n-                .executeAndVerifyOutput(false, List.of(\"-psn_1_1\"),\n-                        List.of(\"-psn_2_2\"));\n+        var appVerifier = HelloApp.assertMainLauncher(cmd);\n+        if (appVerifier != null) {\n+            appVerifier.execute(\"-psn_1_1\");\n+            appVerifier.verifyOutput(\"-psn_2_2\");\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/ArgumentsFilteringTest.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n@@ -67,6 +66,0 @@\n-        testIt(javaAppDesc, null);\n-    }\n-\n-    private static void testIt(String javaAppDesc,\n-            ThrowingConsumer<JPackageCommand> initializer) {\n-\n@@ -75,3 +68,0 @@\n-        if (initializer != null) {\n-            ThrowingConsumer.toConsumer(initializer).accept(cmd);\n-        }\n@@ -81,6 +71,2 @@\n-        Path launcherPath = cmd.appLauncherPath();\n-        if (!cmd.isFakeRuntime(String.format(\n-                \"Not running [%s] launcher\", launcherPath))) {\n-            HelloApp.assertApp(launcherPath)\n-                    .addDefaultArguments(TRICKY_ARGUMENTS)\n-                    .executeAndVerifyOutput();\n+        if (!cmd.canRunLauncher(\"Not running the test\")) {\n+            return;\n@@ -88,0 +74,5 @@\n+\n+        Path launcherPath = cmd.appLauncherPath();\n+        HelloApp.assertApp(launcherPath)\n+                .addDefaultArguments(TRICKY_ARGUMENTS)\n+                .executeAndVerifyOutput();\n","filename":"test\/jdk\/tools\/jpackage\/share\/ArgumentsTest.java","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -237,7 +237,6 @@\n-            if (!cmd.isFakeRuntime(String.format(\"Not running [%s]\",\n-                    cmd.appLauncherPath()))) {\n-                List<String> output = new Executor()\n-                    .setDirectory(cmd.outputDir())\n-                    .setExecutable(cmd.appLauncherPath())\n-                    .dumpOutput().saveOutput()\n-                    .execute(1).getOutput();\n+            var appVerifier = HelloApp.assertMainLauncher(cmd);\n+            if (appVerifier != null) {\n+                List<String> output = appVerifier\n+                        .saveOutput(true)\n+                        .expectedExitCode(1)\n+                        .execute().getOutput();\n","filename":"test\/jdk\/tools\/jpackage\/share\/MainClassTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n@@ -53,0 +52,6 @@\n+        if (!cmd.canRunLauncher(\"Not running the test\")) {\n+            return;\n+        }\n+\n+        HelloApp.executeLauncherAndVerifyOutput(cmd);\n+\n@@ -54,1 +59,0 @@\n-        HelloApp.assertApp(launcherPath).executeAndVerifyOutput();\n@@ -57,1 +61,1 @@\n-        TKit.assertTrue(lp.endsWith(\".exe\"), \"UNexpected launcher path: \" + lp);\n+        TKit.assertTrue(lp.endsWith(\".exe\"), \"Unexpected launcher path: \" + lp);\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinRenameTest.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}