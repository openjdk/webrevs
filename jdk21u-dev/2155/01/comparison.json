{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,0 +143,1 @@\n+                && profileClass != ICC_Profile.CLASS_DEVICELINK\n@@ -146,1 +147,1 @@\n-            throw new IllegalArgumentException(\"Invalid profile type\");\n+            throw new IllegalArgumentException(\"Invalid profile class\");\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_ColorSpace.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,0 +113,8 @@\n+\n+    \/**\n+     * Set to {@code true} for {@code BuiltInProfile}, {@code false} otherwise.\n+     * This flag is used in {@link #setData(int, byte[])} to prevent modifying\n+     * built-in profiles.\n+     *\/\n+    private final transient boolean builtIn;\n+\n@@ -120,2 +128,2 @@\n-         * Deferral is only used for standard profiles. Enabling the appropriate\n-         * access privileges is handled at a lower level.\n+         * ProfileDeferralInfo is used for built-in profile creation only,\n+         * and all built-in profiles should be constructed using it.\n@@ -762,0 +770,1 @@\n+    private static final int HEADER_SIZE = 128;\n@@ -768,0 +777,1 @@\n+        builtIn = false;\n@@ -773,0 +783,4 @@\n+     *\n+     * <p>\n+     * Note: {@code ProfileDeferralInfo} is used for built-in profile\n+     * creation only, and all built-in profiles should be constructed using it.\n@@ -776,0 +790,1 @@\n+        builtIn = true;\n@@ -792,0 +807,4 @@\n+            byte[] theHeader = new byte[HEADER_SIZE];\n+            System.arraycopy(data, 0, theHeader, 0, HEADER_SIZE);\n+            verifyHeader(theHeader);\n+\n@@ -796,0 +815,1 @@\n+\n@@ -981,0 +1001,4 @@\n+        return getProfileClass(theHeader);\n+    }\n+\n+    private static int getProfileClass(byte[] theHeader) {\n@@ -1022,0 +1046,5 @@\n+    private static int getColorSpaceType(byte[] theHeader) {\n+        int theColorSpaceSig = intFromBigEndian(theHeader, icHdrColorSpace);\n+        return iccCStoJCS(theColorSpaceSig);\n+    }\n+\n@@ -1041,0 +1070,15 @@\n+    private static int getPCSType(byte[] theHeader) {\n+        int thePCSSig = intFromBigEndian(theHeader, icHdrPcs);\n+        int theDeviceClass = intFromBigEndian(theHeader, icHdrDeviceClass);\n+\n+        if (theDeviceClass == icSigLinkClass) {\n+            return iccCStoJCS(thePCSSig);\n+        } else {\n+            return switch (thePCSSig) {\n+                case icSigXYZData -> ColorSpace.TYPE_XYZ;\n+                case icSigLabData -> ColorSpace.TYPE_Lab;\n+                default -> throw new IllegalArgumentException(\"Unexpected PCS type\");\n+            };\n+        }\n+    }\n+\n@@ -1110,0 +1154,9 @@\n+     * <p>\n+     * Note: JDK built-in ICC Profiles cannot be updated using this method\n+     * as it will result in {@code IllegalArgumentException}. JDK built-in\n+     * profiles are those obtained by {@code ICC_Profile.getInstance(int colorSpaceID)}\n+     * where {@code colorSpaceID} is one of the following:\n+     * {@link ColorSpace#CS_sRGB}, {@link ColorSpace#CS_LINEAR_RGB},\n+     * {@link ColorSpace#CS_PYCC}, {@link ColorSpace#CS_GRAY} or\n+     * {@link ColorSpace#CS_CIEXYZ}.\n+     *\n@@ -1115,1 +1168,1 @@\n-     * @throws IllegalArgumentException if a content of the {@code tagData}\n+     * @throws IllegalArgumentException if the content of the {@code tagData}\n@@ -1118,0 +1171,3 @@\n+     * @throws IllegalArgumentException if this is a built-in profile for one\n+     *         of the pre-defined color spaces, that is those which can be obtained\n+     *         by calling {@code ICC_Profile.getInstance(int colorSpaceID)}\n@@ -1119,0 +1175,1 @@\n+     * @see ColorSpace\n@@ -1121,0 +1178,7 @@\n+        if (builtIn) {\n+            throw new IllegalArgumentException(\"Built-in profile cannot be modified\");\n+        }\n+\n+        if (tagSignature == ICC_Profile.icSigHead) {\n+            verifyHeader(tagData);\n+        }\n@@ -1124,0 +1188,30 @@\n+    private static void verifyHeader(byte[] data) {\n+        if (data == null || data.length < HEADER_SIZE) {\n+            throw new IllegalArgumentException(\"Invalid header data\");\n+        }\n+        getProfileClass(data);\n+        getColorSpaceType(data);\n+        getPCSType(data);\n+        checkRenderingIntent(data);\n+    }\n+\n+    private static boolean checkRenderingIntent(byte[] header) {\n+        int index = ICC_Profile.icHdrRenderingIntent;\n+\n+        \/* According to ICC spec, only the least-significant 16 bits shall be\n+         * used to encode the rendering intent. The most significant 16 bits\n+         * shall be set to zero. Thus, we are ignoring two most significant\n+         * bytes here. Please refer ICC Spec Document for more details.\n+         *\/\n+        int renderingIntent = ((header[index+2] & 0xff) <<  8) |\n+                              (header[index+3] & 0xff);\n+\n+        switch (renderingIntent) {\n+            case icPerceptual, icMediaRelativeColorimetric,\n+                    icSaturation, icAbsoluteColorimetric -> {\n+                return true;\n+            }\n+            default -> throw new IllegalArgumentException(\"Unknown Rendering Intent\");\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":98,"deletions":4,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8346465\n+ * @summary Tests if setData() throws IAE for BuiltIn profiles\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Map;\n+\n+public class BuiltInProfileCheck {\n+    private static final int HEADER_TAG = ICC_Profile.icSigHead;\n+    private static final int INDEX = ICC_Profile.icHdrDeviceClass;\n+    private static final String EXCEPTION_MSG = \"Built-in profile cannot be modified\";\n+    \/**\n+     * {@link #prepareTestProfile(String, boolean, int)}\n+     * stores the profile to test in testProfile.\n+     *\/\n+    private static ICC_Profile testProfile;\n+\n+    private static final Map<Integer, String> colorSpace = Map.of(\n+            ColorSpace.CS_sRGB, \"CS_sRGB\",\n+            ColorSpace.CS_PYCC, \"CS_PYCC\",\n+            ColorSpace.CS_GRAY, \"CS_GRAY\",\n+            ColorSpace.CS_CIEXYZ, \"CS_CIEXYZ\",\n+            ColorSpace.CS_LINEAR_RGB, \"CS_LINEAR_RGB\"\n+    );\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"CASE 1: Testing BuiltIn Profile\");\n+        for (int cs : colorSpace.keySet()) {\n+            prepareTestProfile(\"Default\", true, cs);\n+            testProfile(true, cs);\n+        }\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 2: Testing Custom Profile\");\n+        prepareTestProfile(\"Default\", false, ColorSpace.CS_sRGB);\n+        testProfile(false, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 3: Testing Built-In Profile\"\n+                            + \" Serialization & Deserialization\");\n+        for (int cs : colorSpace.keySet()) {\n+            prepareTestProfile(\"Serialize\", true, cs);\n+            testProfile(true, cs);\n+        }\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 4: Testing Custom Profile\"\n+                            + \" Serialization & Deserialization\");\n+        prepareTestProfile(\"Serialize\", false, ColorSpace.CS_sRGB);\n+        testProfile(false, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 5: Test reading Built-In profile from .icc file\");\n+        prepareTestProfile(\"ReadFromFile\", true, ColorSpace.CS_sRGB);\n+        testProfile(true, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 6: Test reading Custom profile from .icc file\");\n+        prepareTestProfile(\"ReadFromFile\", false, ColorSpace.CS_sRGB);\n+        testProfile(false, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+    }\n+\n+    private static void prepareTestProfile(String testCase,\n+                                           boolean isBuiltIn, int cs) {\n+        ICC_Profile builtInProfile = ICC_Profile.getInstance(cs);\n+        \/\/ if isBuiltIn=true use builtInProfile else create a copy\n+        testProfile = isBuiltIn\n+                      ? builtInProfile\n+                      : ICC_Profile.getInstance(builtInProfile.getData());\n+\n+        switch (testCase) {\n+            case \"Default\" -> {\n+                \/\/ empty case block\n+                \/\/ no further processing of testProfile required for default case\n+            }\n+            case \"Serialize\" -> {\n+                try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                     ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n+                    oos.writeObject(testProfile);\n+\n+                    byte[] array = baos.toByteArray();\n+                    try (ObjectInputStream ois =\n+                                 new ObjectInputStream(new ByteArrayInputStream(array))) {\n+                        testProfile = (ICC_Profile) ois.readObject();\n+                    }\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"Test Failed ! Serial-Deserialization\"\n+                                               + \" case failed\", e);\n+                }\n+            }\n+            case \"ReadFromFile\" -> {\n+                \/\/ .icc files serialized on older JDK version\n+                String filename = isBuiltIn ? \"builtIn.icc\" : \"custom.icc\";\n+                String testDir = System.getProperty(\"test.src\")\n+                                 + System.getProperty(\"file.separator\");\n+                filename = testDir + filename;\n+\n+                try (FileInputStream fileIn = new FileInputStream(filename);\n+                     ObjectInputStream ois = new ObjectInputStream(fileIn)) {\n+                    testProfile = (ICC_Profile) ois.readObject();\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"Test Failed ! Unable to fetch\"\n+                                               + \" .icc files\", e);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void testProfile(boolean isBuiltIn, int cs) {\n+        byte[] headerData = testProfile.getData(HEADER_TAG);\n+        \/\/ Set profile class to valid icSigInputClass = 0x73636E72\n+        headerData[INDEX] = 0x73;\n+        headerData[INDEX + 1] = 0x63;\n+        headerData[INDEX + 2] = 0x6E;\n+        headerData[INDEX + 3] = 0x72;\n+\n+        if (isBuiltIn) {\n+            System.out.println(\"Testing: \" + colorSpace.get(cs));\n+            try {\n+                \/\/ Try updating a built-in profile, IAE is expected\n+                testProfile.setData(HEADER_TAG, headerData);\n+                throw new RuntimeException(\"Test Failed! IAE NOT thrown for profile \"\n+                                           + colorSpace.get(cs));\n+            } catch (IllegalArgumentException iae) {\n+                if (!iae.getMessage().equals(EXCEPTION_MSG)) {\n+                    throw new RuntimeException(\"Test Failed! IAE with exception msg \\\"\"\n+                                               + EXCEPTION_MSG + \"\\\" NOT thrown for profile \"\n+                                               + colorSpace.get(cs));\n+                }\n+            }\n+        } else {\n+            \/\/ Modifying custom profile should NOT throw IAE\n+            testProfile.setData(HEADER_TAG, headerData);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/BuiltInProfileCheck.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/builtIn.icc","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/custom.icc","binary":true,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/profiles\/sRGB.pf","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,3 @@\n-            ICC_Profile icc = ICC_Profile.getInstance(cspace);\n+            ICC_Profile builtInProfile = ICC_Profile.getInstance(cspace);\n+            ICC_Profile icc = ICC_Profile.getInstance(builtInProfile.getData());\n+\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/SetHeaderInfo.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,261 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8337703\n+ * @summary To verify if ICC_Profile's setData() and getInstance() methods\n+ *          validate header data and throw IAE for invalid values.\n+ * @run main ValidateICCHeaderData\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.ByteBuffer;\n+\n+public class ValidateICCHeaderData {\n+    private static ICC_Profile profile;\n+\n+    private static final boolean DEBUG = false;\n+    private static final int VALID_HEADER_SIZE = 128;\n+    private static final int HEADER_TAG = ICC_Profile.icSigHead;\n+    private static final int PROFILE_CLASS_START_INDEX = ICC_Profile.icHdrDeviceClass;\n+    private static final int COLOR_SPACE_START_INDEX = ICC_Profile.icHdrColorSpace;\n+    private static final int RENDER_INTENT_START_INDEX = ICC_Profile.icHdrRenderingIntent;\n+    private static final int PCS_START_INDEX = ICC_Profile.icHdrPcs;\n+\n+    private static final int[] VALID_PROFILE_CLASS = new int[] {\n+            ICC_Profile.icSigInputClass, ICC_Profile.icSigDisplayClass,\n+            ICC_Profile.icSigOutputClass, ICC_Profile.icSigLinkClass,\n+            ICC_Profile.icSigAbstractClass, ICC_Profile.icSigColorSpaceClass,\n+            ICC_Profile.icSigNamedColorClass\n+    };\n+\n+    private static final int[] VALID_COLOR_SPACE = new int[] {\n+            ICC_Profile.icSigXYZData, ICC_Profile.icSigLabData,\n+            ICC_Profile.icSigLuvData, ICC_Profile.icSigYCbCrData,\n+            ICC_Profile.icSigYxyData, ICC_Profile.icSigRgbData,\n+            ICC_Profile.icSigGrayData, ICC_Profile.icSigHsvData,\n+            ICC_Profile.icSigHlsData, ICC_Profile.icSigCmykData,\n+            ICC_Profile.icSigSpace2CLR, ICC_Profile.icSigSpace3CLR,\n+            ICC_Profile.icSigSpace4CLR, ICC_Profile.icSigSpace5CLR,\n+            ICC_Profile.icSigSpace6CLR, ICC_Profile.icSigSpace7CLR,\n+            ICC_Profile.icSigSpace8CLR, ICC_Profile.icSigSpace9CLR,\n+            ICC_Profile.icSigSpaceACLR, ICC_Profile.icSigSpaceBCLR,\n+            ICC_Profile.icSigSpaceCCLR, ICC_Profile.icSigSpaceDCLR,\n+            ICC_Profile.icSigSpaceECLR, ICC_Profile.icSigSpaceFCLR,\n+            ICC_Profile.icSigCmyData\n+    };\n+\n+    private static final int[] VALID_RENDER_INTENT = new int[] {\n+            ICC_Profile.icPerceptual, ICC_Profile.icMediaRelativeColorimetric,\n+            ICC_Profile.icSaturation, ICC_Profile.icAbsoluteColorimetric\n+    };\n+\n+    private static void createCopyOfBuiltInProfile() {\n+        ICC_Profile builtInProfile = ICC_Profile.getInstance(ColorSpace.CS_sRGB);\n+        \/\/copy of SRGB BuiltIn Profile that can be modified\n+        \/\/using ICC_Profile.setData()\n+        profile = ICC_Profile.getInstance(builtInProfile.getData());\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        createCopyOfBuiltInProfile();\n+\n+        System.out.println(\"CASE 1: Testing VALID Profile Classes ...\");\n+        testValidHeaderData(VALID_PROFILE_CLASS, PROFILE_CLASS_START_INDEX, 4);\n+        System.out.println(\"CASE 1: Passed \\n\");\n+\n+        \/\/ PCS field validation for Profile class != DEVICE_LINK\n+        System.out.println(\"CASE 2: Testing VALID PCS Type\"\n+                           + \" for Profile class != DEVICE_LINK ...\");\n+        testValidHeaderData(new int[] {ICC_Profile.icSigXYZData, ICC_Profile.icSigLabData},\n+                PCS_START_INDEX, 4);\n+        System.out.println(\"CASE 2: Passed \\n\");\n+\n+        System.out.println(\"CASE 3: Testing INVALID PCS Type\"\n+                           + \" for Profile class != DEVICE_LINK ...\");\n+        testInvalidHeaderData(ICC_Profile.icSigCmykData, PCS_START_INDEX, 4);\n+        System.out.println(\"CASE 3: Passed \\n\");\n+\n+        System.out.println(\"CASE 4: Testing DEVICE LINK PROFILE CLASS ...\");\n+        testValidHeaderData(new int[] {ICC_Profile.icSigLinkClass},\n+                PROFILE_CLASS_START_INDEX, 4);\n+        \/\/to check if instantiating BufferedImage with\n+        \/\/ICC_Profile device class = CLASS_DEVICELINK does not throw IAE.\n+        BufferedImage img = new BufferedImage(100, 100,\n+                                              BufferedImage.TYPE_3BYTE_BGR);\n+        System.out.println(\"CASE 4: Passed \\n\");\n+\n+        \/\/ PCS field validation for Profile class == DEVICE_LINK\n+        System.out.println(\"CASE 5: Testing VALID PCS Type\"\n+                           + \" for Profile class == DEVICE_LINK ...\");\n+        testValidHeaderData(VALID_COLOR_SPACE, PCS_START_INDEX, 4);\n+        System.out.println(\"CASE 5: Passed \\n\");\n+\n+        System.out.println(\"CASE 6: Testing INVALID PCS Type\"\n+                           + \" for Profile class == DEVICE_LINK ...\");\n+        \/\/original icSigLabData = 0x4C616220\n+        int invalidSigLabData = 0x4C616221;\n+        testInvalidHeaderData(invalidSigLabData, PCS_START_INDEX, 4);\n+        System.out.println(\"CASE 6: Passed \\n\");\n+\n+        System.out.println(\"CASE 7: Testing VALID Color Spaces ...\");\n+        testValidHeaderData(VALID_COLOR_SPACE, COLOR_SPACE_START_INDEX, 4);\n+        System.out.println(\"CASE 7: Passed \\n\");\n+\n+        System.out.println(\"CASE 8: Testing VALID Rendering Intent ...\");\n+        testValidHeaderData(VALID_RENDER_INTENT, RENDER_INTENT_START_INDEX, 4);\n+        System.out.println(\"CASE 8: Passed \\n\");\n+\n+        System.out.println(\"CASE 9: Testing INVALID Profile Class ...\");\n+        \/\/original icSigInputClass = 0x73636E72\n+        int invalidSigInputClass = 0x73636E70;\n+        testInvalidHeaderData(invalidSigInputClass, PROFILE_CLASS_START_INDEX, 4);\n+        System.out.println(\"CASE 9: Passed \\n\");\n+\n+        System.out.println(\"CASE 10: Testing INVALID Color Space ...\");\n+        \/\/original icSigXYZData = 0x58595A20\n+        int invalidSigXYZData = 0x58595A21;\n+        testInvalidHeaderData(invalidSigXYZData, COLOR_SPACE_START_INDEX, 4);\n+        System.out.println(\"CASE 10: Passed \\n\");\n+\n+        System.out.println(\"CASE 11: Testing INVALID Rendering Intent ...\");\n+        \/\/valid rendering intent values are 0-3\n+        int invalidRenderIntent = 5;\n+        testInvalidHeaderData(invalidRenderIntent, RENDER_INTENT_START_INDEX, 4);\n+        System.out.println(\"CASE 11: Passed \\n\");\n+\n+        System.out.println(\"CASE 12: Testing INVALID Header Size ...\");\n+        testInvalidHeaderSize();\n+        System.out.println(\"CASE 12: Passed \\n\");\n+\n+        System.out.println(\"CASE 13: Testing ICC_Profile.getInstance(..)\"\n+                           + \" with VALID profile data ...\");\n+        testProfileCreation(true);\n+        System.out.println(\"CASE 13: Passed \\n\");\n+\n+        System.out.println(\"CASE 14: Testing ICC_Profile.getInstance(..)\"\n+                           + \" with INVALID profile data ...\");\n+        testProfileCreation(false);\n+        System.out.println(\"CASE 14: Passed \\n\");\n+\n+        System.out.println(\"CASE 15: Testing Deserialization of ICC_Profile ...\");\n+        testDeserialization();\n+        System.out.println(\"CASE 15: Passed \\n\");\n+\n+        System.out.println(\"Successfully completed testing all 15 cases. Test Passed !!\");\n+    }\n+\n+    private static void testValidHeaderData(int[] validData, int startIndex,\n+                                            int fieldLength) {\n+        for (int value : validData) {\n+            setTag(value, startIndex, fieldLength);\n+        }\n+    }\n+\n+    private static void testInvalidHeaderData(int invalidData, int startIndex,\n+                                              int fieldLength) {\n+        try {\n+            setTag(invalidData, startIndex, fieldLength);\n+            throw new RuntimeException(\"Test Failed ! Expected IAE NOT thrown\");\n+        } catch (IllegalArgumentException iae) {\n+            System.out.println(\"Expected IAE thrown: \" + iae.getMessage());\n+        }\n+    }\n+\n+    private static void setTag(int value, int startIndex, int fieldLength) {\n+        byte[] byteArray;\n+        if (startIndex == RENDER_INTENT_START_INDEX) {\n+            byteArray = ByteBuffer.allocate(4).putInt(value).array();\n+        } else {\n+            BigInteger big = BigInteger.valueOf(value);\n+            byteArray = (big.toByteArray());\n+        }\n+\n+        if (DEBUG) {\n+            System.out.print(\"Byte Array : \");\n+            for (int i = 0; i < byteArray.length; i++) {\n+                System.out.print(byteArray[i] + \" \");\n+            }\n+            System.out.println(\"\\n\");\n+        }\n+\n+        byte[] iccProfileHeaderData = profile.getData(HEADER_TAG);\n+        System.arraycopy(byteArray, 0, iccProfileHeaderData, startIndex, fieldLength);\n+        profile.setData(HEADER_TAG, iccProfileHeaderData);\n+    }\n+\n+    private static void testProfileCreation(boolean validCase) {\n+        ICC_Profile builtInProfile = ICC_Profile.getInstance(ColorSpace.CS_GRAY);\n+        byte[] profileData = builtInProfile.getData();\n+\n+        int validDeviceClass = ICC_Profile.icSigInputClass;\n+        BigInteger big = BigInteger.valueOf(validDeviceClass);\n+        \/\/valid case set device class to 0x73636E72 (icSigInputClass)\n+        \/\/invalid case set device class to 0x00000000\n+        byte[] field = validCase ? big.toByteArray()\n+                                 : ByteBuffer.allocate(4).putInt(0).array();\n+        System.arraycopy(field, 0, profileData, PROFILE_CLASS_START_INDEX, 4);\n+\n+        try {\n+            ICC_Profile.getInstance(profileData);\n+            if (!validCase) {\n+                throw new RuntimeException(\"Test Failed ! Expected IAE NOT thrown\");\n+            }\n+        } catch (IllegalArgumentException iae) {\n+            if (!validCase) {\n+                System.out.println(\"Expected IAE thrown: \" + iae.getMessage());\n+            } else {\n+                throw new RuntimeException(\"Unexpected IAE thrown\");\n+            }\n+        }\n+    }\n+\n+    private static void testInvalidHeaderSize() {\n+        byte[] iccProfileHeaderData = profile.getData(HEADER_TAG);\n+        byte[] invalidHeaderSize = new byte[VALID_HEADER_SIZE - 1];\n+        System.arraycopy(iccProfileHeaderData, 0,\n+                invalidHeaderSize, 0, invalidHeaderSize.length);\n+        try {\n+            profile.setData(HEADER_TAG, invalidHeaderSize);\n+            throw new RuntimeException(\"Test Failed ! Expected IAE NOT thrown\");\n+        } catch (IllegalArgumentException iae) {\n+            System.out.println(\"Expected IAE thrown: \" + iae.getMessage());\n+        }\n+    }\n+\n+    private static void testDeserialization() throws IOException {\n+        \/\/invalidSRGB.icc is serialized on older version of JDK\n+        \/\/Upon deserialization, the invalid profile is expected to throw IAE\n+        try {\n+            ICC_Profile.getInstance(\".\/invalidSRGB.icc\");\n+            throw new RuntimeException(\"Test Failed ! Expected IAE NOT thrown\");\n+        } catch (IllegalArgumentException iae) {\n+            System.out.println(\"Expected IAE thrown: \" + iae.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/ValidateICCHeaderData\/ValidateICCHeaderData.java","additions":261,"deletions":0,"binary":false,"changes":261,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/ValidateICCHeaderData\/invalidSRGB.icc","binary":true,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/profiles\/sRGB.pf","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.util.Map;\n@@ -33,0 +34,7 @@\n+    private static final Map<Integer, String> colorSpace = Map.of(\n+            ColorSpace.CS_sRGB, \"CS_sRGB\",\n+            ColorSpace.CS_PYCC, \"CS_PYCC\",\n+            ColorSpace.CS_GRAY, \"CS_GRAY\",\n+            ColorSpace.CS_CIEXYZ, \"CS_CIEXYZ\",\n+            ColorSpace.CS_LINEAR_RGB, \"CS_LINEAR_RGB\"\n+    );\n@@ -35,13 +43,10 @@\n-        test(ICC_Profile.getInstance(ColorSpace.CS_sRGB));\n-        test(ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB));\n-        test(ICC_Profile.getInstance(ColorSpace.CS_CIEXYZ));\n-        test(ICC_Profile.getInstance(ColorSpace.CS_PYCC));\n-        test(ICC_Profile.getInstance(ColorSpace.CS_GRAY));\n-    }\n-\n-    private static void test(ICC_Profile profile) {\n-        byte[] tagData = null;\n-        try {\n-            profile.setData(ICC_Profile.icSigCmykData, tagData);\n-        } catch (IllegalArgumentException e) {\n-            return;\n+        for (int cs : colorSpace.keySet()) {\n+            ICC_Profile builtInProfile = ICC_Profile.getInstance(cs);\n+            ICC_Profile profile = ICC_Profile.getInstance(builtInProfile.getData());\n+            try {\n+                profile.setData(ICC_Profile.icSigCmykData, null);\n+                throw new RuntimeException(\"IAE expected, but not thrown for \"\n+                                           + \"ColorSpace: \" + colorSpace.get(cs));\n+            } catch (IllegalArgumentException e) {\n+                \/\/ IAE expected\n+            }\n@@ -49,1 +54,0 @@\n-        throw new RuntimeException(\"IllegalArgumentException expected\");\n","filename":"test\/jdk\/java\/awt\/color\/ICC_ProfileSetNullDataTest.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-\n@@ -50,1 +49,2 @@\n-            profile = ICC_Profile.getInstance(CS_GRAY);\n+            ICC_Profile builtInProfile = ICC_Profile.getInstance(CS_GRAY);\n+            profile = ICC_Profile.getInstance(builtInProfile.getData());\n","filename":"test\/jdk\/sun\/java2d\/cmm\/ProfileOp\/SetDataTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}