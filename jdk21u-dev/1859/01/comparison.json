{"files":[{"patch":"@@ -1021,1 +1021,5 @@\n-                    MethodSymbol exsym = (MethodSymbol) TreeInfo.symbol(invocation.getMethodSelect());\n+                    Symbol exsym = TreeInfo.symbol(invocation.getMethodSelect());\n+                    if (exsym.type.isErroneous()) {\n+                        \/\/ bail out, don't deal with erroneous types which would be reported anyways\n+                        return TypeAnnotationPosition.unknown;\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334756\n+ * @summary javac crashes on call to non-existent generic method with explicit annotated type arg\n+ * @compile\/fail\/ref=CrashOnNonExistingMethodTest.out -XDrawDiagnostics -XDdev CrashOnNonExistingMethodTest.java\n+ *\/\n+\n+import static java.lang.annotation.ElementType.TYPE_USE;\n+import java.lang.annotation.Target;\n+\n+class CrashOnNonExistingMethodTest {\n+    @Target(TYPE_USE)\n+    @interface Nullable {}\n+\n+    static <T extends @Nullable Object> T identity(T t) {\n+        return t;\n+    }\n+\n+    static void test() {\n+        CrashOnNonExistingMethodTest.<@Nullable Object>nonNullIdentity(null);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/CrashOnNonExistingMethodTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CrashOnNonExistingMethodTest.java:20:37: compiler.err.cant.resolve.location.args.params: kindname.method, nonNullIdentity, java.lang.Object, compiler.misc.type.null, (compiler.misc.location: kindname.class, CrashOnNonExistingMethodTest, null)\n+1 error\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/CrashOnNonExistingMethodTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}