{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.net.http.common.OperationTrackers;\n@@ -103,0 +104,10 @@\n+    static final long start = System.nanoTime();\n+\n+    public static String now() {\n+        long now = System.nanoTime() - start;\n+        long secs = now \/ 1000_000_000;\n+        long mill = (now % 1000_000_000) \/ 1000_000;\n+        long nan = now % 1000_000;\n+        return String.format(\"[%d s, %d ms, %d ns] \", secs, mill, nan);\n+    }\n+\n@@ -219,0 +230,6 @@\n+            \/\/ ensure client closes before next iteration\n+            if (!sameClient) {\n+                var tracker = TRACKER.getTracker(client);\n+                client = null;\n+                clientCleanup(tracker);\n+            }\n@@ -242,0 +259,6 @@\n+            \/\/ ensure client closes before next iteration\n+            if (!sameClient) {\n+                var tracker = TRACKER.getTracker(client);\n+                client = null;\n+                clientCleanup(tracker);\n+            }\n@@ -268,0 +291,6 @@\n+            \/\/ ensure client closes before next iteration\n+            if (!sameClient) {\n+                var tracker = TRACKER.getTracker(client);\n+                client = null;\n+                clientCleanup(tracker);\n+            }\n@@ -291,0 +320,6 @@\n+            \/\/ ensure client closes before next iteration\n+            if (!sameClient) {\n+                var tracker = TRACKER.getTracker(client);\n+                client = null;\n+                clientCleanup(tracker);\n+            }\n@@ -317,0 +352,6 @@\n+            \/\/ ensure client closes before next iteration\n+            if (!sameClient) {\n+                var tracker = TRACKER.getTracker(client);\n+                client = null;\n+                clientCleanup(tracker);\n+            }\n@@ -454,0 +495,17 @@\n+    \/\/ Wait for the client to be garbage collected.\n+    \/\/ we use the ReferenceTracker API rather than HttpClient::close here,\n+    \/\/ because we want to get some diagnosis if a client doesn't release\n+    \/\/ its resources and terminates as expected\n+    \/\/ By using the ReferenceTracker, we will get some diagnosis about what\n+    \/\/ is keeping the client alive if it doesn't get GC'ed within the\n+    \/\/ expected time frame.\n+    public void clientCleanup(OperationTrackers.Tracker tracker){\n+        System.gc();\n+        System.out.println(now() + \"waiting for client to shutdown: \" + tracker.getName());\n+        System.err.println(now() + \"waiting for client to shutdown: \" + tracker.getName());\n+        var error = TRACKER.check(tracker, 10000);\n+        if (error != null) throw error;\n+        System.out.println(now() + \"client shutdown normally: \" + tracker.getName());\n+        System.err.println(now() + \"client shutdown normally: \" + tracker.getName());\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/ResponsePublisher.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"}]}