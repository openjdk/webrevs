{"files":[{"patch":"@@ -156,0 +156,8 @@\n+\/\/ No direct support for 8-byte xchg; emulate using cmpxchg.\n+template<>\n+struct Atomic::PlatformXchg<8> : Atomic::XchgUsingCmpxchg<8> {};\n+\n+\/\/ No direct support for 8-byte add; emulate using cmpxchg.\n+template<>\n+struct Atomic::PlatformAdd<8> : Atomic::AddUsingCmpxchg<8> {};\n+\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/atomic_bsd_x86.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -131,0 +131,7 @@\n+\/\/ No direct support for 8-byte xchg; emulate using cmpxchg.\n+template<>\n+struct Atomic::PlatformXchg<8> : Atomic::XchgUsingCmpxchg<8> {};\n+\n+\/\/ No direct support for 8-byte add; emulate using cmpxchg.\n+template<>\n+struct Atomic::PlatformAdd<8> : Atomic::AddUsingCmpxchg<8> {};\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/atomic_linux_arm.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -156,0 +156,8 @@\n+\/\/ No direct support for 8-byte xchg; emulate using cmpxchg.\n+template<>\n+struct Atomic::PlatformXchg<8> : Atomic::XchgUsingCmpxchg<8> {};\n+\n+\/\/ No direct support for 8-byte add; emulate using cmpxchg.\n+template<>\n+struct Atomic::PlatformAdd<8> : Atomic::AddUsingCmpxchg<8> {};\n+\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/atomic_linux_x86.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -401,3 +401,3 @@\n-  \/\/ Support platforms that do not provide Read-Modify-Write\n-  \/\/ byte-level atomic access. To use, derive PlatformCmpxchg<1> from\n-  \/\/ this class.\n+  \/\/ Support platforms that do not provide Read-Modify-Write atomic\n+  \/\/ accesses for 1-byte and 8-byte widths. To use, derive PlatformCmpxchg<1>,\n+  \/\/ PlatformAdd<S>, PlatformXchg<S> from these classes.\n@@ -406,0 +406,4 @@\n+  template<size_t byte_size>\n+  struct XchgUsingCmpxchg;\n+  template<size_t byte_size>\n+  class AddUsingCmpxchg;\n@@ -680,0 +684,41 @@\n+\/\/ Define the class before including platform file, which may use this\n+\/\/ as a base class, requiring it be complete.  The definition is later\n+\/\/ in this file, near the other definitions related to xchg.\n+template<size_t byte_size>\n+struct Atomic::XchgUsingCmpxchg {\n+  template<typename T>\n+  T operator()(T volatile* dest,\n+               T exchange_value,\n+               atomic_memory_order order) const;\n+};\n+\n+\/\/ Define the class before including platform file, which may use this\n+\/\/ as a base class, requiring it be complete.\n+template<size_t byte_size>\n+class Atomic::AddUsingCmpxchg {\n+public:\n+  template<typename D, typename I>\n+  static inline D add_then_fetch(D volatile* dest,\n+                                 I add_value,\n+                                 atomic_memory_order order) {\n+    D addend = add_value;\n+    return fetch_then_add(dest, add_value, order) + add_value;\n+  }\n+\n+  template<typename D, typename I>\n+  static inline D fetch_then_add(D volatile* dest,\n+                          I add_value,\n+                          atomic_memory_order order) {\n+    STATIC_ASSERT(byte_size == sizeof(I));\n+    STATIC_ASSERT(byte_size == sizeof(D));\n+\n+    D old_value;\n+    D new_value;\n+    do {\n+      old_value = Atomic::load(dest);\n+      new_value = old_value + add_value;\n+    } while (old_value != Atomic::cmpxchg(dest, old_value, new_value, order));\n+    return old_value;\n+  }\n+};\n+\n@@ -1173,0 +1218,14 @@\n+template<size_t byte_size>\n+template<typename T>\n+inline T Atomic::XchgUsingCmpxchg<byte_size>::operator()(T volatile* dest,\n+                                             T exchange_value,\n+                                             atomic_memory_order order) const {\n+  STATIC_ASSERT(byte_size == sizeof(T));\n+\n+  T old_value;\n+  do {\n+    old_value = Atomic::load(dest);\n+  } while (old_value != Atomic::cmpxchg(dest, old_value, exchange_value, order));\n+  return old_value;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/atomic.hpp","additions":62,"deletions":3,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -62,2 +62,0 @@\n-\/\/ 64bit Atomic::add is only supported on 64bit platforms.\n-#ifdef _LP64\n@@ -65,0 +63,3 @@\n+  \/\/ Check if 64-bit atomics are available on the machine.\n+  if (!VM_Version::supports_cx8()) return;\n+\n@@ -69,1 +70,0 @@\n-#endif \/\/ _LP64\n@@ -111,2 +111,0 @@\n-\/\/ 64bit Atomic::xchg is only supported on 64bit platforms.\n-#ifdef _LP64\n@@ -114,0 +112,3 @@\n+  \/\/ Check if 64-bit atomics are available on the machine.\n+  if (!VM_Version::supports_cx8()) return;\n+\n@@ -117,1 +118,0 @@\n-#endif \/\/ _LP64\n@@ -145,0 +145,3 @@\n+  \/\/ Check if 64-bit atomics are available on the machine.\n+  if (!VM_Version::supports_cx8()) return;\n+\n@@ -348,1 +351,0 @@\n-#ifdef _LP64\n@@ -350,0 +352,3 @@\n+  \/\/ Check if 64-bit atomics are available on the machine.\n+  if (!VM_Version::supports_cx8()) return;\n+\n@@ -354,0 +359,3 @@\n+  \/\/ Check if 64-bit atomics are available on the machine.\n+  if (!VM_Version::supports_cx8()) return;\n+\n@@ -356,1 +364,0 @@\n-#endif \/\/ _LP64\n","filename":"test\/hotspot\/gtest\/runtime\/test_atomic.cpp","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"}]}