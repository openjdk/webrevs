{"files":[{"patch":"@@ -93,0 +93,6 @@\n+    public synchronized void closeInputStream() throws IOException {\n+        if (is != null) {\n+            is.close();\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/file\/FileURLConnection.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import sun.net.www.protocol.file.FileURLConnection;\n@@ -91,2 +92,8 @@\n-                if (!getUseCaches()) {\n-                    jarFile.close();\n+                try {\n+                    if (!getUseCaches()) {\n+                        jarFile.close();\n+                    }\n+                } finally {\n+                    if (jarFileURLConnection instanceof FileURLConnection fileURLConnection) {\n+                        fileURLConnection.closeInputStream();\n+                    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/JarURLConnection.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6956385\n+ * @summary JarURLConnection may fail to close its underlying FileURLConnection\n+ * @run main\/othervm FileURLConnectionLeak\n+ *\/\n+\n+import java.net.URI;\n+import java.net.URLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+public class FileURLConnectionLeak {\n+    public static void main(String[] args) throws Exception {\n+        URLConnection.setDefaultUseCaches(\"file\", false);\n+        URLConnection.setDefaultUseCaches(\"jar\", false);\n+        var jar = Path.of(\"x.jar\").toAbsolutePath();\n+        var mani = new Manifest();\n+        mani.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n+        try (var os = Files.newOutputStream(jar); var jos = new JarOutputStream(os, mani)) {}\n+        var u = URI.create(\"jar:\" + jar.toUri() + \"!\/META-INF\/MANIFEST.MF\").toURL();\n+        \/\/ FileURLConnection.is not used, so was always fine:\n+        try (var is = u.openStream()) {\n+            is.transferTo(System.out);\n+        }\n+        \/\/ FileURLConnection.is opened implicitly:\n+        var conn = u.openConnection();\n+        conn.getLastModified();\n+        \/\/ Idiom to close URLConnection (cf. JDK-8224095), which must also close the other stream:\n+        conn.getInputStream().close();\n+        var fds = Path.of(\"\/proc\/\" + ProcessHandle.current().pid() + \"\/fd\");\n+        if (Files.isDirectory(fds)) {\n+            \/\/ Linux: verify that x.jar is not open\n+            for (var fd : (Iterable<Path>) Files.list(fds)::iterator) {\n+                if (Files.isSymbolicLink(fd)) {\n+                    var file = Files.readSymbolicLink(fd);\n+                    if (file.equals(jar)) {\n+                        throw new IllegalStateException(\"Still held open \" + jar + \" from \" + fd);\n+                    }\n+                }\n+            }\n+        }\n+        \/\/ Windows: verify that mandatory file locks do not prevent deletion\n+        Files.delete(jar);\n+    }\n+}\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/FileURLConnectionLeak.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}