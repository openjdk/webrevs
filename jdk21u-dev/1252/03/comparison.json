{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import java.util.function.BiFunction;\n@@ -42,0 +41,1 @@\n+import java.util.stream.IntStream;\n@@ -2415,4 +2415,0 @@\n-            \/\/ Search the structure of the type to find the contained types at each type path\n-            Map<Type, List<Attribute.TypeCompound>> attributesByType = new HashMap<>();\n-            new TypeAnnotationLocator(attributesByPath, attributesByType).visit(type, List.nil());\n-\n@@ -2420,2 +2416,1 @@\n-            type = new TypeAnnotationTypeMapping(attributesByType).visit(type, null);\n-            Assert.check(attributesByType.isEmpty(), \"Failed to apply annotations to types\");\n+            type = new TypeAnnotationStructuralTypeMapping(attributesByPath).visit(type, List.nil());\n@@ -2449,2 +2444,4 @@\n-     * Visit all contained types, assembling a type path to represent the current location, and\n-     * record the types at each type path that need to be annotated.\n+     * A type mapping that rewrites the type to include type annotations.\n+     *\n+     * <p>This logic is similar to {@link Type.StructuralTypeMapping}, but also tracks the path to\n+     * the contained types being rewritten, and so cannot easily share the existing logic.\n@@ -2452,2 +2449,3 @@\n-    private static class TypeAnnotationLocator\n-            extends Types.DefaultTypeVisitor<Void, List<TypeAnnotationPosition.TypePathEntry>> {\n+    private static final class TypeAnnotationStructuralTypeMapping\n+            extends Types.TypeMapping<List<TypeAnnotationPosition.TypePathEntry>> {\n+\n@@ -2455,2 +2453,1 @@\n-                          ListBuffer<Attribute.TypeCompound>> attributesByPath;\n-        private final Map<Type, List<Attribute.TypeCompound>> attributesByType;\n+                ListBuffer<Attribute.TypeCompound>> attributesByPath;\n@@ -2458,1 +2455,1 @@\n-        private TypeAnnotationLocator(\n+        private TypeAnnotationStructuralTypeMapping(\n@@ -2460,2 +2457,1 @@\n-                        attributesByPath,\n-                Map<Type, List<Attribute.TypeCompound>> attributesByType) {\n+                    attributesByPath) {\n@@ -2463,1 +2459,0 @@\n-            this.attributesByType = attributesByType;\n@@ -2466,0 +2461,1 @@\n+\n@@ -2467,1 +2463,1 @@\n-        public Void visitClassType(ClassType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n+        public Type visitClassType(ClassType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n@@ -2473,3 +2469,4 @@\n-            List<ClassType> enclosing = List.nil();\n-            for (Type curr = t;\n-                    curr != null && curr != Type.noType;\n+            Type outer = t.getEnclosingType();\n+            Type outer1 = outer != Type.noType ? visit(outer, path) : outer;\n+            for (Type curr = t.getEnclosingType();\n+                    curr != Type.noType;\n@@ -2477,11 +2474,0 @@\n-                enclosing = enclosing.prepend((ClassType) curr);\n-            }\n-            for (ClassType te : enclosing) {\n-                if (te.typarams_field != null) {\n-                    int i = 0;\n-                    for (Type typaram : te.typarams_field) {\n-                        visit(typaram, path.append(new TypeAnnotationPosition.TypePathEntry(\n-                                TypeAnnotationPosition.TypePathEntryKind.TYPE_ARGUMENT, i++)));\n-                    }\n-                }\n-                visitType(te, path);\n@@ -2490,1 +2476,6 @@\n-            return null;\n+            List<Type> typarams = t.getTypeArguments();\n+            List<Type> typarams1 = rewriteTypeParams(path, typarams);\n+            if (outer1 != outer || typarams != typarams1) {\n+                t = new ClassType(outer1, typarams1, t.tsym, t.getMetadata());\n+            }\n+            return reannotate(t, path);\n@@ -2493,5 +2484,6 @@\n-        @Override\n-        public Void visitWildcardType(\n-                WildcardType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n-            visit(t.type, path.append(TypeAnnotationPosition.TypePathEntry.WILDCARD));\n-            return super.visitWildcardType(t, path);\n+        private List<Type> rewriteTypeParams(\n+                List<TypeAnnotationPosition.TypePathEntry> path, List<Type> typarams) {\n+            var i = IntStream.iterate(0, x -> x + 1).iterator();\n+            return typarams.map(typaram -> visit(typaram,\n+                    path.append(new TypeAnnotationPosition.TypePathEntry(\n+                            TypeAnnotationPosition.TypePathEntryKind.TYPE_ARGUMENT, i.nextInt()))));\n@@ -2501,3 +2493,10 @@\n-        public Void visitArrayType(ArrayType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n-            visit(t.elemtype, path.append(TypeAnnotationPosition.TypePathEntry.ARRAY));\n-            return super.visitArrayType(t, path);\n+        public Type visitWildcardType(\n+                WildcardType wt, List<TypeAnnotationPosition.TypePathEntry> path) {\n+            Type t = wt.type;\n+            if (t != null) {\n+                t = visit(t, path.append(TypeAnnotationPosition.TypePathEntry.WILDCARD));\n+            }\n+            if (t != wt.type) {\n+                wt = new WildcardType(t, wt.kind, wt.tsym, wt.bound, wt.getMetadata());\n+            }\n+            return reannotate(wt, path);\n@@ -2507,4 +2506,6 @@\n-        public Void visitType(Type t, List<TypeAnnotationPosition.TypePathEntry> path) {\n-            ListBuffer<Attribute.TypeCompound> attributes = attributesByPath.remove(path);\n-            if (attributes != null) {\n-                attributesByType.put(t, attributes.toList());\n+        public Type visitArrayType(ArrayType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n+            Type elemtype = t.elemtype;\n+            Type elemtype1 =\n+                    visit(elemtype, path.append(TypeAnnotationPosition.TypePathEntry.ARRAY));\n+            if (elemtype1 != elemtype)  {\n+                t = new ArrayType(elemtype1, t.tsym, t.getMetadata());\n@@ -2512,1 +2513,1 @@\n-            return null;\n+            return reannotate(t, path);\n@@ -2514,4 +2515,0 @@\n-    }\n-\n-    \/** A type mapping that rewrites the type to include type annotations. *\/\n-    private static class TypeAnnotationTypeMapping extends Type.StructuralTypeMapping<Void> {\n@@ -2519,5 +2516,3 @@\n-        private final Map<Type, List<Attribute.TypeCompound>> attributesByType;\n-\n-        private TypeAnnotationTypeMapping(\n-                Map<Type, List<Attribute.TypeCompound>> attributesByType) {\n-            this.attributesByType = attributesByType;\n+        @Override\n+        public Type visitType(Type t, List<TypeAnnotationPosition.TypePathEntry> path) {\n+            return reannotate(t, path);\n@@ -2526,8 +2521,4 @@\n-        private <T extends Type> Type reannotate(T t, BiFunction<T, Void, Type> f) {\n-            \/\/ We're relying on object identify of Type instances to record where the annotations\n-            \/\/ need to be added, so we have to retrieve the annotations for each type before\n-            \/\/ rewriting it, and then add them after its contained types have been rewritten.\n-            List<Attribute.TypeCompound> attributes = attributesByType.remove(t);\n-            Type mapped = f.apply(t, null);\n-            if (attributes == null) {\n-                return mapped;\n+        Type reannotate(Type type, List<TypeAnnotationPosition.TypePathEntry> path) {\n+            List<Attribute.TypeCompound> attributes = attributesForPath(path);\n+            if (attributes.isEmpty()) {\n+                return type;\n@@ -2537,1 +2528,1 @@\n-            TypeMetadata.Annotations existing = mapped.getMetadata(TypeMetadata.Annotations.class);\n+            TypeMetadata.Annotations existing = type.getMetadata(TypeMetadata.Annotations.class);\n@@ -2540,1 +2531,1 @@\n-                return mapped;\n+                return type;\n@@ -2542,1 +2533,1 @@\n-            return mapped.annotatedType(attributes);\n+            return type.annotatedType(attributes);\n@@ -2545,18 +2536,4 @@\n-        @Override\n-        public Type visitClassType(ClassType t, Void unused) {\n-            return reannotate(t, super::visitClassType);\n-        }\n-\n-        @Override\n-        public Type visitWildcardType(WildcardType t, Void unused) {\n-            return reannotate(t, super::visitWildcardType);\n-        }\n-\n-        @Override\n-        public Type visitArrayType(ArrayType t, Void unused) {\n-            return reannotate(t, super::visitArrayType);\n-        }\n-\n-        @Override\n-        public Type visitType(Type t, Void unused) {\n-            return reannotate(t, (x, u) -> x);\n+        List<Attribute.TypeCompound> attributesForPath(\n+                List<TypeAnnotationPosition.TypePathEntry> path) {\n+            ListBuffer<Attribute.TypeCompound> attributes = attributesByPath.remove(path);\n+            return attributes != null ? attributes.toList() : List.nil();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":61,"deletions":84,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -589,0 +589,4 @@\n+\n+    @Test(posn=1, annoType=TA.class, expect=\"130\")\n+    @Test(posn=23, annoType=TA.class, expect=\"131\")\n+    public Map<@TA(130) String, @TA(131) String> f130;\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/type\/BasicAnnoTests.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}