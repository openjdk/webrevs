{"files":[{"patch":"@@ -1039,1 +1039,1 @@\n-void ShenandoahHeap::trash_humongous_region_at(ShenandoahHeapRegion* start) {\n+size_t ShenandoahHeap::trash_humongous_region_at(ShenandoahHeapRegion* start) const {\n@@ -1041,6 +1041,0 @@\n-\n-  oop humongous_obj = cast_to_oop(start->bottom());\n-  size_t size = humongous_obj->size();\n-  size_t required_regions = ShenandoahHeapRegion::required_regions(size * HeapWordSize);\n-  size_t index = start->index() + required_regions - 1;\n-\n@@ -1049,6 +1043,6 @@\n-  for(size_t i = 0; i < required_regions; i++) {\n-    \/\/ Reclaim from tail. Otherwise, assertion fails when printing region to trace log,\n-    \/\/ as it expects that every region belongs to a humongous region starting with a humongous start region.\n-    ShenandoahHeapRegion* region = get_region(index --);\n-\n-    assert(region->is_humongous(), \"expect correct humongous start or continuation\");\n+  \/\/ Do not try to get the size of this humongous object. STW collections will\n+  \/\/ have already unloaded classes, so an unmarked object may have a bad klass pointer.\n+  ShenandoahHeapRegion* region = start;\n+  size_t index = region->index();\n+  do {\n+    assert(region->is_humongous(), \"Expect correct humongous start or continuation\");\n@@ -1056,1 +1050,0 @@\n-\n@@ -1058,1 +1051,5 @@\n-  }\n+    region = get_region(++index);\n+  } while (region != nullptr && region->is_humongous_continuation());\n+\n+  \/\/ Return number of regions trashed\n+  return index - start->index();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -653,1 +653,1 @@\n-  void trash_humongous_region_at(ShenandoahHeapRegion *r);\n+  size_t trash_humongous_region_at(ShenandoahHeapRegion *r) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}