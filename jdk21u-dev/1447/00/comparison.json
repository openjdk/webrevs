{"files":[{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6251983 6722236\n+ * @summary MouseDragged events not triggered for Choice when dragging it with left mouse button\n+ * @key headful\n+ * @run main ChoiceDragEventsInside\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseMotionAdapter;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ChoiceDragEventsInside extends Frame {\n+    Robot robot;\n+    Choice choice1;\n+    Point pt;\n+    Dimension size;\n+    volatile boolean mouseDragged = false;\n+    volatile boolean mouseDraggedOutside = false;\n+\n+    public void setupUI() {\n+        setTitle(\"Choce Drag Events Inside\");\n+        choice1 = new Choice();\n+        for (int i = 1; i < 50; i++) {\n+            choice1.add(\"item-0\" + i);\n+        }\n+        choice1.setForeground(Color.red);\n+        choice1.setBackground(Color.red);\n+        choice1.addMouseMotionListener(new MouseMotionAdapter() {\n+                public void mouseMoved(MouseEvent me) {\n+                    System.out.println(me);\n+                }\n+\n+                public void mouseDragged(MouseEvent me) {\n+                    System.out.println(me);\n+                    mouseDragged = true;\n+                    if (me.getY() < 0) {\n+                        mouseDraggedOutside = true;\n+                    }\n+                }\n+            }\n+        );\n+        add(choice1);\n+        setLayout(new FlowLayout());\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+        validate();\n+    }\n+\n+    public void start() {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+            robot.delay(100);\n+            EventQueue.invokeAndWait(() -> {\n+                pt = choice1.getLocationOnScreen();\n+                size = choice1.getSize();\n+            });\n+            testDragInsideChoice(InputEvent.BUTTON1_MASK);\n+            testDragInsideChoiceList(InputEvent.BUTTON1_MASK);\n+            testDragOutsideChoice(InputEvent.BUTTON1_MASK);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(\"Test failed. Exception thrown: \" + e);\n+        }\n+    }\n+\n+    public void testDragInsideChoice(int button) {\n+        robot.mouseMove(pt.x + size.width \/ 2, pt.y + size.height \/ 2);\n+        robot.delay(100);\n+        robot.mousePress(button);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+        robot.mousePress(button);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+\n+        robot.mouseMove(pt.x + size.width \/ 4, pt.y + size.height \/ 2);\n+        robot.mousePress(button);\n+\n+        dragMouse(pt.x + size.width \/ 4, pt.y + size.height \/ 2,\n+                pt.x + size.width * 3 \/ 4, pt.y + size.height \/ 2);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+        if (!mouseDragged) {\n+            throw new RuntimeException(\"Test failed. Choice should generate MouseDragged events inside Choice itself\");\n+        } else {\n+            System.out.println(\"Stage 1 passed. Choice generates MouseDragged events inside Choice itself\");\n+        }\n+        mouseDragged = false;\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+    }\n+\n+    public void testDragInsideChoiceList(int button) {\n+        robot.mouseMove(pt.x + size.width \/ 2, pt.y + size.height \/ 2);\n+        robot.delay(100);\n+        robot.mousePress(button);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+\n+        robot.mouseMove(pt.x + size.width \/ 2, pt.y + 5 * size.height);\n+        robot.delay(200);\n+        robot.mousePress(button);\n+\n+        dragMouse(pt.x + size.width \/ 2, pt.y + 5 * size.height,\n+                pt.x + size.width \/ 2, pt.y + 8 * size.height);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+        if (mouseDragged) {\n+            throw new RuntimeException(\"Test failed. Choice shouldn't generate MouseDragged events inside Choice's list\");\n+        } else {\n+            System.out.println(\"Stage 2 passed. Choice doesn't generate MouseDragged events inside Choice's list\");\n+        }\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+        mouseDragged = false;\n+    }\n+\n+    public void testDragOutsideChoice(int button) {\n+        pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + size.width \/ 2, pt.y + size.height \/ 2);\n+        robot.delay(100);\n+\n+        robot.mousePress(button);\n+        \/\/drag mouse outside of Choice\n+        dragMouse(pt.x + size.width \/ 2, pt.y + size.height \/ 2,\n+                pt.x + size.width \/ 2, pt.y - 3 * size.height);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+        if (!mouseDragged || !mouseDraggedOutside) {\n+            throw new RuntimeException(\"Test failed. Choice should generate MouseDragged events outside Choice\");\n+        } else {\n+            System.out.println(\"Stage 3 passed. Choice generates MouseDragged events outside Choice\");\n+        }\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+        mouseDragged = false;\n+    }\n+\n+    public void dragMouse(int x0, int y0, int x1, int y1) {\n+        int curX = x0;\n+        int curY = y0;\n+        int dx = x0 < x1 ? 1 : -1;\n+        int dy = y0 < y1 ? 1 : -1;\n+\n+        while (curX != x1) {\n+            curX += dx;\n+            robot.mouseMove(curX, curY);\n+        }\n+        while (curY != y1) {\n+            curY += dy;\n+            robot.mouseMove(curX, curY);\n+        }\n+    }\n+\n+    public static void main(final String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        ChoiceDragEventsInside app = new ChoiceDragEventsInside();\n+        try {\n+            EventQueue.invokeAndWait(app::setupUI);\n+            app.start();\n+        } finally {\n+            EventQueue.invokeAndWait(app::dispose);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceDragEventsInside.java","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4319246\n+ * @summary Tests that MouseReleased, MouseClicked and MouseDragged are triggered on choice\n+ * @key headful\n+ * @run main ChoiceMouseEventTest\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class ChoiceMouseEventTest extends Frame {\n+    static volatile boolean mousePressed = false;\n+    static volatile boolean mouseReleased = false;\n+    static volatile boolean mouseClicked = false;\n+    Choice choice = new Choice();\n+    static Point location;\n+    static Dimension size;\n+\n+    public void setupGUI() {\n+        setTitle(\"Choice Mouse Event Test\");\n+        this.setLayout(new BorderLayout());\n+        choice.add(\"item-1\");\n+        choice.add(\"item-2\");\n+        choice.add(\"item-3\");\n+        choice.add(\"item-4\");\n+        add(\"Center\", choice);\n+        choice.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                mouseClicked = true;\n+            }\n+\n+            @Override\n+            public void mousePressed(MouseEvent e) {\n+                mousePressed = true;\n+            }\n+\n+            @Override\n+            public void mouseReleased(MouseEvent e) {\n+                mouseReleased = true;\n+            }\n+        });\n+        setLocationRelativeTo(null);\n+        setSize(400, 200);\n+        setVisible(true);\n+    }\n+\n+    public Point _location() {\n+        return choice.getLocationOnScreen();\n+    }\n+\n+    public Dimension _size() {\n+        return choice.getSize();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        ChoiceMouseEventTest test = new ChoiceMouseEventTest();\n+        try {\n+            EventQueue.invokeAndWait(test::setupGUI);\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(50);\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+            EventQueue.invokeAndWait(() -> {\n+                location = test._location();\n+                size = test._size();\n+            });\n+            robot.waitForIdle();\n+            robot.mouseMove(location.x + size.width - 10, location.y + (size.height \/ 2));\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(2000);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(2000);\n+            robot.waitForIdle();\n+            if (!mouseClicked || !mousePressed || !mouseReleased) {\n+                throw new RuntimeException(String.format(\"One of the events not arrived: \" +\n+                        \"mouseClicked = %b, mousePressed = %b, mouseReleased = %b\",\n+                        mouseClicked, mousePressed, mouseReleased));\n+            }\n+        } finally {\n+            if (test != null) {\n+                EventQueue.invokeAndWait(test::dispose);\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceMouseEventTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4079027\n+ * @summary Removing an item dynamically from a Choice object breaks lower items.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ChoiceRemoveTest\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ChoiceRemoveTest extends Frame {\n+    Choice selector;\n+    static final String INSTRUCTIONS = \"\"\"\n+            After window 'Choice Remove Test' appears wait for three seconds\n+            and then click on the choice. In popup there should be no\n+            'Choice A' variant. Try selecting each variant with mouse\n+            and verify by the log that the correct variant gets selected.\n+            If after selecting item in the list the correct item gets selected\n+            and correct item name appears in the log press Pass otherwise press Fail.\n+            \"\"\";\n+\n+    public static void main(String[] argv) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .testUI(ChoiceRemoveTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public ChoiceRemoveTest() {\n+        super(\"Choice Remove Test\");\n+        Panel p;\n+        Label prompt;\n+\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowOpened(WindowEvent e) {\n+                super.windowOpened(e);\n+                new Thread(() -> {\n+                    try {\n+                        Thread.sleep(2000);\n+                    } catch (InterruptedException ignore) {\n+                    }\n+                    removeFirst();\n+                }).start();\n+            }\n+        });\n+\n+        setLayout(new GridLayout());\n+        p = new Panel();\n+\n+        prompt = new Label(\"Select different items including the last one\");\n+        p.add(prompt);\n+\n+        selector = new Choice();\n+        selector.add(\"Choice A\");\n+        selector.add(\"Choice B\");\n+        selector.add(\"Choice C\");\n+        selector.add(\"Choice D\");\n+        selector.add(\"Choice E\");\n+        selector.addItemListener(e -> {\n+            if (e.getStateChange() == ItemEvent.SELECTED) {\n+                Object selected = e.getItem();\n+                PassFailJFrame.log(selected.toString());\n+            }\n+        });\n+        p.add(selector);\n+        add(p);\n+        pack();\n+    }\n+\n+    public void removeFirst() {\n+        selector.remove(\"Choice A\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceRemoveTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6240046\n+ * @summary REG:Choice's Drop-down does not disappear when clicking somewhere, after popup menu is disposed-XTkt\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PopupMenuOnChoiceArea\n+ *\/\n+\n+\n+import java.awt.CheckboxMenuItem;\n+import java.awt.Choice;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.PopupMenu;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class PopupMenuOnChoiceArea extends Frame {\n+    static final String INSTRUCTIONS = \"\"\"\n+            You would see a window named 'Popup menu on choice area'\n+            with Choice in it. Move the mouse pointer to the choice.\n+            Click right mouse button on it.\n+            You should see a popup menu with 'File' in it.\n+            Close this popup menu by pressing Esc.\n+            Click the left mouse button on the Choice.\n+            You should see a Choice drop-down menu.\n+            Move mouse pointer into drop-down menu.\n+            Click right mouse button on any item in it.\n+            If you see a 'File' popup menu press Fail.\n+            If Choice drop-down closes instead press Pass.\n+            \"\"\";\n+\n+    public PopupMenuOnChoiceArea() {\n+        super(\"Popup menu on choice area\");\n+        this.setLayout(new FlowLayout());\n+        Choice choice = new Choice();\n+        choice.add(\"item-1\");\n+        choice.add(\"item-2\");\n+        choice.add(\"item-3\");\n+        choice.add(\"item-4\");\n+        add(\"Center\", choice);\n+        Menu fileMenu = new Menu(\"File\");\n+        Menu open = new Menu(\"Open\");\n+        Menu save = new Menu(\"save\");\n+        CheckboxMenuItem exit = new CheckboxMenuItem(\"Exit\");\n+        fileMenu.add(open);\n+        fileMenu.add(save);\n+        fileMenu.add(exit);\n+        final PopupMenu pop = new PopupMenu();\n+        pop.setLabel(\"This is a popup menu\");\n+        pop.setName(\"a menu\");\n+        pop.add(fileMenu);\n+        choice.add(pop);\n+        choice.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent me) {\n+                if (me.isPopupTrigger()) {\n+                    pop.show(me.getComponent(), me.getX(), me.getY());\n+                }\n+            }\n+\n+            public void mouseReleased(MouseEvent me) {\n+                if (me.isPopupTrigger()) {\n+                    pop.show(me.getComponent(), me.getX(), me.getY());\n+                }\n+            }\n+        });\n+        setSize(200, 200);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .testUI(PopupMenuOnChoiceArea::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/PopupMenuOnChoiceArea.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6405707\n+ * @summary Choice popup & scrollbar gets Flickering when mouse is pressed & drag on the scrollbar\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollbarFlickers\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ScrollbarFlickers extends Frame {\n+    static final String INSTRUCTIONS = \"\"\"\n+            Open the choice popup. Select any item in it and\n+            drag it with the mouse above or below the choice.\n+            Keep the choice opened.\n+            Continue dragging the mouse outside of the choice\n+            making content of the popup scroll.\n+            If you see that scrollbar flickers press Fail.\n+            Otherwise press Pass.\n+            \"\"\";\n+\n+    public ScrollbarFlickers() {\n+        super(\"Scrollbar Flickering Test\");\n+        Choice ch = new Choice();\n+        setLayout(new BorderLayout());\n+        ch.add(\"Praveen\");\n+        ch.add(\"Mohan\");\n+        ch.add(\"Rakesh\");\n+        ch.add(\"Menon\");\n+        ch.add(\"Girish\");\n+        ch.add(\"Ramachandran\");\n+        ch.add(\"Elancheran\");\n+        ch.add(\"Subramanian\");\n+        ch.add(\"Raju\");\n+        ch.add(\"Pallath\");\n+        ch.add(\"Mayank\");\n+        ch.add(\"Joshi\");\n+        ch.add(\"Sundar\");\n+        ch.add(\"Srinivas\");\n+        ch.add(\"Mandalika\");\n+        ch.add(\"Suresh\");\n+        ch.add(\"Chandar\");\n+        add(ch);\n+        setSize(200, 200);\n+        validate();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .testUI(ScrollbarFlickers::new)\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ScrollbarFlickers.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}