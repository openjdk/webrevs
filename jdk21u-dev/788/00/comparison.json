{"files":[{"patch":"@@ -276,1 +276,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_checkcast); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_checkcast); };\n@@ -286,1 +286,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_instanceof); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_instanceof); };\n@@ -295,1 +295,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_new); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_new); };\n@@ -304,1 +304,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_multianewarray); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_multianewarray); };\n@@ -313,1 +313,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_anewarray); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_anewarray); };\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-  nonstatic_field(JavaThread,                  _held_monitor_count,                           int64_t)                               \\\n+  nonstatic_field(JavaThread,                  _held_monitor_count,                           intx)                                  \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1182,1 +1182,1 @@\n-  char quote_c        = 0;\n+  int  quote_c        = 0;\n@@ -1194,1 +1194,1 @@\n-          token[pos++] = c;\n+          token[pos++] = checked_cast<char>(c);\n@@ -1214,1 +1214,1 @@\n-        token[pos++] = c;\n+        token[pos++] = checked_cast<char>(c);\n@@ -1570,1 +1570,1 @@\n-    MaxRAMPercentage = 100.0 \/ MaxRAMFraction;\n+    MaxRAMPercentage = 100.0 \/ (double)MaxRAMFraction;\n@@ -1574,1 +1574,1 @@\n-    MinRAMPercentage = 100.0 \/ MinRAMFraction;\n+    MinRAMPercentage = 100.0 \/ (double)MinRAMFraction;\n@@ -1578,1 +1578,1 @@\n-    InitialRAMPercentage = 100.0 \/ InitialRAMFraction;\n+    InitialRAMPercentage = 100.0 \/ (double)InitialRAMFraction;\n@@ -1584,2 +1584,2 @@\n-    julong reasonable_max = (julong)((phys_mem * MaxRAMPercentage) \/ 100);\n-    const julong reasonable_min = (julong)((phys_mem * MinRAMPercentage) \/ 100);\n+    julong reasonable_max = (julong)(((double)phys_mem * MaxRAMPercentage) \/ 100);\n+    const julong reasonable_min = (julong)(((double)phys_mem * MinRAMPercentage) \/ 100);\n@@ -1669,1 +1669,1 @@\n-      julong reasonable_initial = (julong)((phys_mem * InitialRAMPercentage) \/ 100);\n+      julong reasonable_initial = (julong)(((double)phys_mem * InitialRAMPercentage) \/ 100);\n@@ -1960,4 +1960,4 @@\n-bool Arguments::parse_uintx(const char* value,\n-                            uintx* uintx_arg,\n-                            uintx min_size) {\n-  uintx n;\n+bool Arguments::parse_uint(const char* value,\n+                           uint* uint_arg,\n+                           uint min_size) {\n+  uint n;\n@@ -1968,1 +1968,1 @@\n-    *uintx_arg = n;\n+    *uint_arg = n;\n@@ -2724,2 +2724,2 @@\n-      uintx max_tenuring_thresh = 0;\n-      if (!parse_uintx(tail, &max_tenuring_thresh, 0)) {\n+      uint max_tenuring_thresh = 0;\n+      if (!parse_uint(tail, &max_tenuring_thresh, 0)) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -379,4 +379,4 @@\n-  \/\/ parameter passed and returns the value in uintx_arg.  Returns\n-  \/\/ false otherwise, with uintx_arg undefined.\n-  static bool parse_uintx(const char* value, uintx* uintx_arg,\n-                          uintx min_size);\n+  \/\/ parameter passed and returns the value in uint_arg.  Returns\n+  \/\/ false otherwise, with uint_arg undefined.\n+  static bool parse_uint(const char* value, uint* uintx_arg,\n+                         uint min_size);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -408,1 +408,1 @@\n-  int cont_size() { return _cont_stack_bottom - _cont_stack_top; }\n+  int cont_size() { return pointer_delta_as_int(_cont_stack_bottom, _cont_stack_top); }\n@@ -1089,1 +1089,1 @@\n-  const int fsize = stack_frame_bottom - stack_frame_top;\n+  const int fsize = pointer_delta_as_int(stack_frame_bottom, stack_frame_top);\n@@ -1148,1 +1148,1 @@\n-  const int fsize = stack_frame_bottom + argsize - stack_frame_top;\n+  const int fsize = pointer_delta_as_int(stack_frame_bottom + argsize, stack_frame_top);\n@@ -1656,1 +1656,1 @@\n-      int monitor_count = entry->parent_held_monitor_count();\n+      intx monitor_count = entry->parent_held_monitor_count();\n@@ -2105,1 +2105,1 @@\n-  int total_thawed = _stream.unextended_sp() - _top_unextended_sp_before_thaw;\n+  int total_thawed = pointer_delta_as_int(_stream.unextended_sp(), _top_unextended_sp_before_thaw);\n@@ -2200,1 +2200,1 @@\n-  const int fsize = heap_frame_bottom - heap_frame_top;\n+  const int fsize = pointer_delta_as_int(heap_frame_bottom, heap_frame_top);\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-  int result = _caller_adjustment;\n+  intptr_t result = _caller_adjustment;\n@@ -255,1 +255,1 @@\n-  return result;\n+  return checked_cast<int>(result);\n@@ -1085,1 +1085,1 @@\n-      _high = _low + cache->length() - 1;\n+      _high = checked_cast<PrimitiveType>(_low + cache->length() - 1);\n@@ -1104,1 +1104,1 @@\n-      int offset = value - _low;\n+      int offset = checked_cast<int>(value - _low);\n@@ -1685,1 +1685,1 @@\n-  int frame_size = caller.sp() - fr.sp();\n+  int frame_size = pointer_delta_as_int(caller.sp(), fr.sp());\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -735,1 +735,1 @@\n-          \"at one time (minimum is 1024).\")                      \\\n+          \"at one time (minimum is 1024).\")                                 \\\n@@ -742,1 +742,1 @@\n-  product(intx, MonitorUsedDeflationThreshold, 90, DIAGNOSTIC,              \\\n+  product(int, MonitorUsedDeflationThreshold, 90, DIAGNOSTIC,               \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -208,0 +208,1 @@\n+  double total_div = (double)total;\n@@ -209,2 +210,2 @@\n-  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%) |- interpreted\", int_total,     100.0 * int_total    \/ total);\n-  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%) |- compiled\",    comp_total,    100.0 * comp_total   \/ total);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%) |- interpreted\", int_total,     100.0 * (double)int_total    \/ total_div);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%) |- compiled\",    comp_total,    100.0 * (double)comp_total   \/ total_div);\n@@ -212,6 +213,6 @@\n-                                                                         special_total, 100.0 * special_total\/ total);\n-  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- synchronized\",synch_total,   100.0 * synch_total  \/ total);\n-  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- final\",       final_total,   100.0 * final_total  \/ total);\n-  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- static\",      static_total,  100.0 * static_total \/ total);\n-  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- native\",      native_total,  100.0 * native_total \/ total);\n-  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- accessor\",    access_total,  100.0 * access_total \/ total);\n+                                                                         special_total, 100.0 * (double)special_total\/ total_div);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- synchronized\",synch_total,   100.0 * (double)synch_total  \/ total_div);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- final\",       final_total,   100.0 * (double)final_total  \/ total_div);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- static\",      static_total,  100.0 * (double)static_total \/ total_div);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- native\",      native_total,  100.0 * (double)native_total \/ total_div);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- accessor\",    access_total,  100.0 * (double)access_total \/ total_div);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -80,5 +80,5 @@\n-  uint8_t _major;\n-  uint8_t _minor;\n-  uint8_t _security;\n-  uint8_t _patch;\n-  uint8_t _build;\n+  int _major;\n+  int _minor;\n+  int _security;\n+  int _patch;\n+  int _build;\n@@ -99,2 +99,2 @@\n-  JDK_Version(uint8_t major, uint8_t minor = 0, uint8_t security = 0,\n-              uint8_t patch = 0, uint8_t build = 0) :\n+  JDK_Version(int major, int minor = 0, int security = 0,\n+              int patch = 0, int build = 0) :\n@@ -108,1 +108,1 @@\n-  static JDK_Version jdk(uint8_t m) {\n+  static JDK_Version jdk(int m) {\n@@ -120,5 +120,5 @@\n-  uint8_t major_version() const          { return _major; }\n-  uint8_t minor_version() const          { return _minor; }\n-  uint8_t security_version() const       { return _security; }\n-  uint8_t patch_version() const          { return _patch; }\n-  uint8_t build_number() const           { return _build; }\n+  int major_version() const          { return _major; }\n+  int minor_version() const          { return _minor; }\n+  int security_version() const       { return _security; }\n+  int patch_version() const          { return _patch; }\n+  int build_number() const           { return _build; }\n","filename":"src\/hotspot\/share\/runtime\/java.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -876,4 +876,4 @@\n-  assert(this->held_monitor_count() == this->jni_monitor_count(),\n-         \"held monitor count should be equal to jni: \" INT64_FORMAT \" != \" INT64_FORMAT,\n-         (int64_t)this->held_monitor_count(), (int64_t)this->jni_monitor_count());\n-  if (CheckJNICalls && this->jni_monitor_count() > 0) {\n+  assert(held_monitor_count() == jni_monitor_count(),\n+         \"held monitor count should be equal to jni: \" INTX_FORMAT \" != \" INTX_FORMAT,\n+         held_monitor_count(), jni_monitor_count());\n+  if (CheckJNICalls && jni_monitor_count() > 0) {\n@@ -1913,1 +1913,1 @@\n-void JavaThread::inc_held_monitor_count(int i, bool jni) {\n+void JavaThread::inc_held_monitor_count(intx i, bool jni) {\n@@ -1915,1 +1915,1 @@\n-  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_held_monitor_count);\n+  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INTX_FORMAT, _held_monitor_count);\n@@ -1918,1 +1918,1 @@\n-    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_jni_monitor_count);\n+    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INTX_FORMAT, _jni_monitor_count);\n@@ -1924,1 +1924,1 @@\n-void JavaThread::dec_held_monitor_count(int i, bool jni) {\n+void JavaThread::dec_held_monitor_count(intx i, bool jni) {\n@@ -1927,1 +1927,1 @@\n-  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_held_monitor_count);\n+  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INTX_FORMAT, _held_monitor_count);\n@@ -1930,1 +1930,1 @@\n-    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_jni_monitor_count);\n+    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INTX_FORMAT, _jni_monitor_count);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -449,0 +449,1 @@\n+\n@@ -450,7 +451,2 @@\n-#ifdef _LP64\n-  int64_t _held_monitor_count;  \/\/ used by continuations for fast lock detection\n-  int64_t _jni_monitor_count;\n-#else\n-  int32_t _held_monitor_count;  \/\/ used by continuations for fast lock detection\n-  int32_t _jni_monitor_count;\n-#endif\n+  intx _held_monitor_count;  \/\/ used by continuations for fast lock detection\n+  intx _jni_monitor_count;\n@@ -598,2 +594,2 @@\n-  void inc_held_monitor_count(int i = 1, bool jni = false);\n-  void dec_held_monitor_count(int i = 1, bool jni = false);\n+  void inc_held_monitor_count(intx i = 1, bool jni = false);\n+  void dec_held_monitor_count(intx i = 1, bool jni = false);\n@@ -601,2 +597,2 @@\n-  int64_t held_monitor_count() { return (int64_t)_held_monitor_count; }\n-  int64_t jni_monitor_count()  { return (int64_t)_jni_monitor_count;  }\n+  intx held_monitor_count() { return _held_monitor_count; }\n+  intx jni_monitor_count()  { return _jni_monitor_count;  }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-    ((in_bytes(ObjectMonitor::f ## _offset())) - markWord::monitor_value)\n+    ((in_bytes(ObjectMonitor::f ## _offset())) - checked_cast<int>(markWord::monitor_value))\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  const int milliseconds_per_microsecond = 1000;\n+  const int milliseconds_per_second = 1000;\n@@ -142,1 +142,1 @@\n-    milliseconds_since_19700101 \/ milliseconds_per_microsecond;\n+    milliseconds_since_19700101 \/ milliseconds_per_second;\n@@ -144,1 +144,1 @@\n-    milliseconds_since_19700101 % milliseconds_per_microsecond;\n+    checked_cast<int>(milliseconds_since_19700101 % milliseconds_per_second);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-      short_at_put(offset, new_delta);\n+      short_at_put(offset, checked_cast<short>(new_delta));\n@@ -400,2 +400,2 @@\n-      table.set_start_pc(index, table.start_pc(index) + delta);\n-      table.set_end_pc(index, table.end_pc(index) + delta);\n+      table.set_start_pc(index, checked_cast<u2>(table.start_pc(index) + delta));\n+      table.set_end_pc(index, checked_cast<u2>(table.end_pc(index) + delta));\n@@ -403,1 +403,1 @@\n-      table.set_end_pc(index, table.end_pc(index) + delta);\n+      table.set_end_pc(index, checked_cast<u2>(table.end_pc(index) + delta));\n@@ -406,1 +406,1 @@\n-      table.set_handler_pc(index, table.handler_pc(index) + delta);\n+      table.set_handler_pc(index, checked_cast<u2>(table.handler_pc(index) + delta));\n@@ -452,1 +452,1 @@\n-        table[i].start_bci = current_bci + delta;\n+        table[i].start_bci = checked_cast<u2>(current_bci + delta);\n@@ -456,1 +456,1 @@\n-          table[i].length = current_length + delta;\n+          table[i].length = checked_cast<u2>(current_length + delta);\n@@ -534,1 +534,1 @@\n-            same_frame_extended::create_at(frame_addr, new_offset_delta);\n+            same_frame_extended::create_at(frame_addr, checked_cast<u2>(new_offset_delta));\n@@ -552,1 +552,1 @@\n-          types->set_bci(types->bci() + delta);\n+          types->set_bci(checked_cast<u2>(types->bci() + delta));\n@@ -565,1 +565,1 @@\n-            types->set_bci(types->bci() + delta);\n+            types->set_bci(checked_cast<u2>(types->bci() + delta));\n@@ -635,0 +635,1 @@\n+\n@@ -710,1 +711,1 @@\n-      short_at_put(bci + 1, ilen + goto_length);\n+      short_at_put(bci + 1, checked_cast<short>(ilen + goto_length));\n@@ -715,1 +716,1 @@\n-      short_at_put(cbci + 1, add_bci);\n+      short_at_put(cbci + 1, checked_cast<short>(add_bci));\n","filename":"src\/hotspot\/share\/runtime\/relocator.cpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                                             uint64_t iterations) {\n+                                             int iterations) {\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -688,1 +688,1 @@\n-    int catch_pco = ret_pc - cm->code_begin();\n+    int catch_pco = pointer_delta_as_int(ret_pc, cm->code_begin());\n@@ -747,1 +747,1 @@\n-  int catch_pco = ret_pc - nm->code_begin();\n+  int catch_pco = pointer_delta_as_int(ret_pc, nm->code_begin());\n@@ -2313,1 +2313,1 @@\n-  return 100.0 * x \/ MAX2(y, (int64_t)1);\n+  return 100.0 * (double)x \/ (double)MAX2(y, (int64_t)1);\n@@ -2349,2 +2349,2 @@\n-    for (int i = 0; i <= n; i++) { sum += histo[i]; weighted_sum += i*histo[i]; }\n-    if (sum >= 1.0) { \/\/ prevent divide by zero or divide overflow\n+    for (int i = 0; i <= n; i++) { sum += (double)histo[i]; weighted_sum += (double)(i*histo[i]); }\n+    if (sum >= 1) { \/\/ prevent divide by zero or divide overflow\n@@ -2354,2 +2354,2 @@\n-        rest -= histo[i];\n-        tty->print_cr(\"%4d: \" UINT64_FORMAT_W(12) \" (%5.1f%%)\", i, histo[i], histo[i] \/ percent);\n+        rest -= (double)histo[i];\n+        tty->print_cr(\"%4d: \" UINT64_FORMAT_W(12) \" (%5.1f%%)\", i, histo[i], (double)histo[i] \/ percent);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-    return (tem == nullptr ? limit : tem + 1 - base);\n+    return (tem == nullptr ? limit : pointer_delta_as_int(tem + 1, base));\n@@ -352,1 +352,1 @@\n-      return (tem == nullptr ? limit : tem + 1 - base);\n+      return (tem == nullptr ? limit : pointer_delta_as_int(tem + 1, base));\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1146,2 +1146,2 @@\n-    float remainder = (100.0 - MonitorUsedDeflationThreshold) \/ 100.0;\n-    size_t new_ceiling = ceiling + (ceiling * remainder) + 1;\n+    double remainder = (100.0 - MonitorUsedDeflationThreshold) \/ 100.0;\n+    size_t new_ceiling = ceiling + (size_t)((double)ceiling * remainder) + 1;\n@@ -1160,1 +1160,1 @@\n-                               \", monitor_usage=\" SIZE_FORMAT \", threshold=\" INTX_FORMAT,\n+                               \", monitor_usage=\" SIZE_FORMAT \", threshold=%d\",\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -457,1 +457,1 @@\n-              os::thread_cpu_time(const_cast<Thread*>(this), true) \/ 1000000.0\n+              (double)os::thread_cpu_time(const_cast<Thread*>(this), true) \/ 1000000.0\n@@ -460,1 +460,1 @@\n-              _statistical_info.getElapsedTime() \/ 1000.0\n+              (double)_statistical_info.getElapsedTime() \/ 1000.0\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -359,1 +359,1 @@\n-  const uint32_t x_high = x >> 32;\n+  const uint32_t x_high = checked_cast<uint32_t>(x >> 32);\n","filename":"src\/hotspot\/share\/runtime\/threadHeapSampler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-  return counter \/ freq;\n+  return (double)counter \/ freq;\n","filename":"src\/hotspot\/share\/runtime\/timer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,2 +119,2 @@\n-            const int64_t wait_ms = MAX2(1.0, to_ms(next_trim_time - tnow));\n-            ml.wait(wait_ms);\n+            const double wait_ms = MAX2(1.0, to_ms(next_trim_time - tnow));\n+            ml.wait((int64_t)wait_ms);\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1004,3 +1004,0 @@\n-     static_field(JDK_Version,                 _current,                                      JDK_Version)                           \\\n-  nonstatic_field(JDK_Version,                 _major,                                        unsigned char)                         \\\n-                                                                                                                                     \\\n@@ -1926,1 +1923,0 @@\n-  declare_toplevel_type(JDK_Version)                                      \\\n@@ -3087,1 +3083,1 @@\n-    int len = end - start + 1;\n+    int len = pointer_delta_as_int(end, start) + 1;\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-    uintx level = 0;\n+    uint level = 0;\n@@ -239,1 +239,1 @@\n-      if (!Arguments::parse_uintx(num_str, &level, 0)) {\n+      if (!Arguments::parse_uint(num_str, &level, 0)) {\n@@ -243,1 +243,1 @@\n-        out->print_cr(\"Compression level out of range (1-9): \" UINTX_FORMAT, level);\n+        out->print_cr(\"Compression level out of range (1-9): %u\", level);\n@@ -255,1 +255,1 @@\n-    dumper.dump(path, out, (int)level, false, (uint)parallel_thread_num);\n+    dumper.dump(path, out, level, false, (uint)parallel_thread_num);\n@@ -293,2 +293,2 @@\n-    uintx num;\n-    if (!Arguments::parse_uintx(num_str, &num, 0)) {\n+    uint num;\n+    if (!Arguments::parse_uint(num_str, &num, 0)) {\n@@ -299,1 +299,1 @@\n-    parallel_thread_num = num == 0 ? parallel_thread_num : (uint)num;\n+    parallel_thread_num = num == 0 ? parallel_thread_num : num;\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-  int intmean = mean*100;\n+  int intmean = (int)(mean*100);\n@@ -150,1 +150,1 @@\n-  int intvariance = variance*100;\n+  int intvariance = (int)(variance*100);\n@@ -226,1 +226,1 @@\n-  for (int c = 0; c < 100; c++) {\n+  for (u1 c = 0; c < 100; c++) {\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-  int v = 0xcc;\n-  int v2 = 0x11;\n+  u_char v = 0xcc;\n+  u_char v2 = 0x11;\n","filename":"test\/hotspot\/gtest\/runtime\/test_stubRoutines.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}