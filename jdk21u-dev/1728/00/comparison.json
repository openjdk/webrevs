{"files":[{"patch":"@@ -356,1 +356,1 @@\n-            if (ns.getName().equals(\"X25519\")) {\n+            if (ns.getName().equalsIgnoreCase(\"X25519\")) {\n@@ -358,1 +358,1 @@\n-            } else if (ns.getName().equals(\"X448\")) {\n+            } else if (ns.getName().equalsIgnoreCase(\"X448\")) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKEM.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-        XECParameters params = paramSpec.getName().equals(\"X25519\")\n+        XECParameters params = paramSpec.getName().equalsIgnoreCase(\"X25519\")\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/XDHPrivateKeyImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8318328\n+ * @summary DHKEM should check XDH name in case-insensitive mode\n+ * @library \/test\/lib\n+ * @modules java.base\/com.sun.crypto.provider\n+ *\/\n+import javax.crypto.KEM;\n+import java.math.BigInteger;\n+import java.security.KeyPairGenerator;\n+import java.security.interfaces.XECPublicKey;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.NamedParameterSpec;\n+\n+public class NameSensitiveness {\n+    public static void main(String[] args) throws Exception {\n+        var g = KeyPairGenerator.getInstance(\"XDH\");\n+        g.initialize(NamedParameterSpec.X25519);\n+        var pk1 = (XECPublicKey) g.generateKeyPair().getPublic();\n+        var pk2 = new XECPublicKey() {\n+            public BigInteger getU() {\n+                return pk1.getU();\n+            }\n+            public AlgorithmParameterSpec getParams() {\n+                return new NamedParameterSpec(\"x25519\"); \/\/ lowercase!!!\n+            }\n+            public String getAlgorithm() {\n+                return pk1.getAlgorithm();\n+            }\n+            public String getFormat() {\n+                return pk1.getFormat();\n+            }\n+            public byte[] getEncoded() {\n+                return pk1.getEncoded();\n+            }\n+        };\n+        var kem = KEM.getInstance(\"DHKEM\");\n+        kem.newEncapsulator(pk2);\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/DHKEM\/NameSensitiveness.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}