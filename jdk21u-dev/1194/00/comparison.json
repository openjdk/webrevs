{"files":[{"patch":"@@ -120,1 +120,1 @@\n-    @IR(failOn = {IRNode.COUNTTRAILINGZEROS_VL})\n+    @IR(failOn = {IRNode.COUNT_TRAILING_ZEROS_VL})\n@@ -128,1 +128,1 @@\n-    @IR(failOn = {IRNode.COUNTLEADINGZEROS_VL})\n+    @IR(failOn = {IRNode.COUNT_LEADING_ZEROS_VL})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestDisableAutoVectOpcodes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1071,1 +1071,1 @@\n-    public static final String COUNTTRAILINGZEROS_VL = VECTOR_PREFIX + \"COUNTTRAILINGZEROS_VL\" + POSTFIX;\n+    public static final String COUNT_TRAILING_ZEROS_VL = VECTOR_PREFIX + \"COUNT_TRAILING_ZEROS_VL\" + POSTFIX;\n@@ -1073,1 +1073,1 @@\n-        vectorNode(COUNTTRAILINGZEROS_VL, \"CountTrailingZerosV\", TYPE_LONG);\n+        vectorNode(COUNT_TRAILING_ZEROS_VL, \"CountTrailingZerosV\", TYPE_LONG);\n@@ -1076,1 +1076,1 @@\n-    public static final String COUNTLEADINGZEROS_VL = VECTOR_PREFIX + \"COUNTLEADINGZEROS_VL\" + POSTFIX;\n+    public static final String COUNT_TRAILING_ZEROS_VI = VECTOR_PREFIX + \"COUNT_TRAILING_ZEROS_VI\" + POSTFIX;\n@@ -1078,1 +1078,11 @@\n-        vectorNode(COUNTLEADINGZEROS_VL, \"CountLeadingZerosV\", TYPE_LONG);\n+        vectorNode(COUNT_TRAILING_ZEROS_VI, \"CountTrailingZerosV\", TYPE_INT);\n+    }\n+\n+    public static final String COUNT_LEADING_ZEROS_VL = VECTOR_PREFIX + \"COUNT_LEADING_ZEROS_VL\" + POSTFIX;\n+    static {\n+        vectorNode(COUNT_LEADING_ZEROS_VL, \"CountLeadingZerosV\", TYPE_LONG);\n+    }\n+\n+    public static final String COUNT_LEADING_ZEROS_VI = VECTOR_PREFIX + \"COUNT_LEADING_ZEROS_VI\" + POSTFIX;\n+    static {\n+        vectorNode(COUNT_LEADING_ZEROS_VI, \"CountLeadingZerosV\", TYPE_INT);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,2 +42,4 @@\n-    private long[] input;\n-    private int[] output;\n+    private long[] inputLong;\n+    private int[] outputLong;\n+    private int[] inputInt;\n+    private int[] outputInt;\n@@ -52,2 +54,4 @@\n-        input = new long[LEN];\n-        output = new int[LEN];\n+        inputLong = new long[LEN];\n+        outputLong = new int[LEN];\n+        inputInt = new int[LEN];\n+        outputInt = new int[LEN];\n@@ -56,1 +60,2 @@\n-            input[i] = rng.nextLong();\n+            inputLong[i] = rng.nextLong();\n+            inputInt[i] = rng.nextInt();\n@@ -61,2 +66,2 @@\n-    @IR(counts = {IRNode.COUNTTRAILINGZEROS_VL, \"> 0\"})\n-    public void vectorizeNumberOfTrailingZeros() {\n+    @IR(counts = {IRNode.COUNT_TRAILING_ZEROS_VL, \"> 0\"})\n+    public void vectorizeNumberOfTrailingZerosLong() {\n@@ -64,1 +69,1 @@\n-            output[i] = Long.numberOfTrailingZeros(input[i]);\n+            outputLong[i] = Long.numberOfTrailingZeros(inputLong[i]);\n@@ -69,2 +74,2 @@\n-    @IR(counts = {IRNode.COUNTLEADINGZEROS_VL, \"> 0\"})\n-    public void vectorizeNumberOfLeadingZeros() {\n+    @IR(counts = {IRNode.COUNT_LEADING_ZEROS_VL, \"> 0\"})\n+    public void vectorizeNumberOfLeadingZerosLong() {\n@@ -72,1 +77,1 @@\n-            output[i] = Long.numberOfLeadingZeros(input[i]);\n+            outputLong[i] = Long.numberOfLeadingZeros(inputLong[i]);\n@@ -76,3 +81,3 @@\n-    @Run(test = {\"vectorizeNumberOfTrailingZeros\", \"vectorizeNumberOfLeadingZeros\"})\n-    public void checkResult() {\n-        vectorizeNumberOfTrailingZeros();\n+    @Run(test = {\"vectorizeNumberOfTrailingZerosLong\", \"vectorizeNumberOfLeadingZerosLong\"})\n+    public void checkResultLong() {\n+        vectorizeNumberOfTrailingZerosLong();\n@@ -80,1 +85,1 @@\n-            Asserts.assertEquals(output[i], Long.numberOfTrailingZeros(input[i]));\n+            Asserts.assertEquals(outputLong[i], Long.numberOfTrailingZeros(inputLong[i]));\n@@ -82,1 +87,1 @@\n-        vectorizeNumberOfLeadingZeros();\n+        vectorizeNumberOfLeadingZerosLong();\n@@ -84,1 +89,30 @@\n-            Asserts.assertEquals(output[i], Long.numberOfLeadingZeros(input[i]));\n+            Asserts.assertEquals(outputLong[i], Long.numberOfLeadingZeros(inputLong[i]));\n+        }\n+    }\n+\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_TRAILING_ZEROS_VI, \"> 0\"})\n+    public void vectorizeNumberOfTrailingZerosInt() {\n+        for (int i = 0; i < LEN; ++i) {\n+            outputInt[i] = Integer.numberOfTrailingZeros(inputInt[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_LEADING_ZEROS_VI, \"> 0\"})\n+    public void vectorizeNumberOfLeadingZerosInt() {\n+        for (int i = 0; i < LEN; ++i) {\n+            outputInt[i] = Integer.numberOfLeadingZeros(inputInt[i]);\n+        }\n+    }\n+\n+    @Run(test = {\"vectorizeNumberOfTrailingZerosInt\", \"vectorizeNumberOfLeadingZerosInt\"})\n+    public void checkResultInt() {\n+        vectorizeNumberOfTrailingZerosInt();\n+        for (int i = 0; i < LEN; ++i) {\n+            Asserts.assertEquals(outputInt[i], Integer.numberOfTrailingZeros(inputInt[i]));\n+        }\n+        vectorizeNumberOfLeadingZerosInt();\n+        for (int i = 0; i < LEN; ++i) {\n+            Asserts.assertEquals(outputInt[i], Integer.numberOfLeadingZeros(inputInt[i]));\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestNumberOfContinuousZeros.java","additions":51,"deletions":17,"binary":false,"changes":68,"status":"modified"}]}