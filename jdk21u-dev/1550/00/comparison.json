{"files":[{"patch":"@@ -664,1 +664,2 @@\n-      switch (fd->field_type()) {\n+      BasicType field_type = fd->field_type();\n+      switch (field_type) {\n@@ -685,1 +686,4 @@\n-            _out->print_cr(\"null\");\n+            if (field_type == T_ARRAY) {\n+              _out->print(\"%d\", -1);\n+            }\n+            _out->cr();\n@@ -687,1 +691,1 @@\n-            assert(fd->field_type() == T_OBJECT, \"\");\n+            assert(field_type == T_OBJECT, \"\");\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1068,38 +1068,17 @@\n-      if (field_signature[1] == JVM_SIGNATURE_ARRAY) {\n-        \/\/ multi dimensional array\n-        ArrayKlass* kelem = (ArrayKlass *)parse_klass(CHECK);\n-        if (kelem == nullptr) {\n-          return;\n-        }\n-        int rank = 0;\n-        while (field_signature[rank] == JVM_SIGNATURE_ARRAY) {\n-          rank++;\n-        }\n-        jint* dims = NEW_RESOURCE_ARRAY(jint, rank);\n-        dims[0] = length;\n-        for (int i = 1; i < rank; i++) {\n-          dims[i] = 1; \/\/ These aren't relevant to the compiler\n-        }\n-        value = kelem->multi_allocate(rank, dims, CHECK);\n-      } else {\n-        if (strcmp(field_signature, \"[B\") == 0) {\n-          value = oopFactory::new_byteArray(length, CHECK);\n-        } else if (strcmp(field_signature, \"[Z\") == 0) {\n-          value = oopFactory::new_boolArray(length, CHECK);\n-        } else if (strcmp(field_signature, \"[C\") == 0) {\n-          value = oopFactory::new_charArray(length, CHECK);\n-        } else if (strcmp(field_signature, \"[S\") == 0) {\n-          value = oopFactory::new_shortArray(length, CHECK);\n-        } else if (strcmp(field_signature, \"[F\") == 0) {\n-          value = oopFactory::new_floatArray(length, CHECK);\n-        } else if (strcmp(field_signature, \"[D\") == 0) {\n-          value = oopFactory::new_doubleArray(length, CHECK);\n-        } else if (strcmp(field_signature, \"[I\") == 0) {\n-          value = oopFactory::new_intArray(length, CHECK);\n-        } else if (strcmp(field_signature, \"[J\") == 0) {\n-          value = oopFactory::new_longArray(length, CHECK);\n-        } else if (field_signature[0] == JVM_SIGNATURE_ARRAY &&\n-                   field_signature[1] == JVM_SIGNATURE_CLASS) {\n-          parse_klass(CHECK); \/\/ eat up the array class name\n-          Klass* kelem = resolve_klass(field_signature + 1, CHECK);\n-          value = oopFactory::new_objArray(kelem, length, CHECK);\n+      if (length != -1) {\n+        if (field_signature[1] == JVM_SIGNATURE_ARRAY) {\n+          \/\/ multi dimensional array\n+          ArrayKlass* kelem = (ArrayKlass *)parse_klass(CHECK);\n+          if (kelem == nullptr) {\n+            return;\n+          }\n+          int rank = 0;\n+          while (field_signature[rank] == JVM_SIGNATURE_ARRAY) {\n+            rank++;\n+          }\n+          jint* dims = NEW_RESOURCE_ARRAY(jint, rank);\n+          dims[0] = length;\n+          for (int i = 1; i < rank; i++) {\n+            dims[i] = 1; \/\/ These aren't relevant to the compiler\n+          }\n+          value = kelem->multi_allocate(rank, dims, CHECK);\n@@ -1107,1 +1086,24 @@\n-          report_error(\"unhandled array staticfield\");\n+          if (strcmp(field_signature, \"[B\") == 0) {\n+            value = oopFactory::new_byteArray(length, CHECK);\n+          } else if (strcmp(field_signature, \"[Z\") == 0) {\n+            value = oopFactory::new_boolArray(length, CHECK);\n+          } else if (strcmp(field_signature, \"[C\") == 0) {\n+            value = oopFactory::new_charArray(length, CHECK);\n+          } else if (strcmp(field_signature, \"[S\") == 0) {\n+            value = oopFactory::new_shortArray(length, CHECK);\n+          } else if (strcmp(field_signature, \"[F\") == 0) {\n+            value = oopFactory::new_floatArray(length, CHECK);\n+          } else if (strcmp(field_signature, \"[D\") == 0) {\n+            value = oopFactory::new_doubleArray(length, CHECK);\n+          } else if (strcmp(field_signature, \"[I\") == 0) {\n+            value = oopFactory::new_intArray(length, CHECK);\n+          } else if (strcmp(field_signature, \"[J\") == 0) {\n+            value = oopFactory::new_longArray(length, CHECK);\n+          } else if (field_signature[0] == JVM_SIGNATURE_ARRAY &&\n+                     field_signature[1] == JVM_SIGNATURE_CLASS) {\n+            Klass* actual_array_klass = parse_klass(CHECK);\n+            Klass* kelem = ObjArrayKlass::cast(actual_array_klass)->element_klass();\n+            value = oopFactory::new_objArray(kelem, length, CHECK);\n+          } else {\n+            report_error(\"unhandled array staticfield\");\n+          }\n@@ -1145,2 +1147,5 @@\n-        Klass* k = resolve_klass(string_value, CHECK);\n-        oop value = InstanceKlass::cast(k)->allocate_instance(CHECK);\n+        oop value = nullptr;\n+        if (string_value != nullptr) {\n+          Klass* k = resolve_klass(string_value, CHECK);\n+          value = InstanceKlass::cast(k)->allocate_instance(CHECK);\n+        }\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":46,"deletions":41,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8333805\n+ * @library \/ \/test\/lib\n+ * @summary Replaying compilation with null static final fields results in a crash\n+ * @requires vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.compMode != \"Xcomp\" & vm.debug == true & vm.compiler2.enabled\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      compiler.ciReplay.TestNullStaticField\n+ *\/\n+\n+package compiler.ciReplay;\n+\n+public class TestNullStaticField extends DumpReplayBase {\n+\n+    public static void main(String[] args) {\n+        new TestNullStaticField().runTest(TIERED_DISABLED_VM_OPTION);\n+    }\n+\n+    @Override\n+    public void testAction() {\n+        positiveTest(TIERED_DISABLED_VM_OPTION, \"-XX:+ReplayIgnoreInitErrors\");\n+    }\n+\n+    @Override\n+    public String getTestClass() {\n+        return TestClassNullStaticField.class.getName();\n+    }\n+\n+}\n+\n+class TestClassNullStaticField {\n+\n+    static final Object[] staticNullArrayField = null;\n+    static final Object[][] staticNullMultiArrayField = null;\n+    static final Object staticNullObjectField = null;\n+    static final String staticNullStringField = null;\n+    static final int[] staticNullIntArrayField = null;\n+    static final Object[] staticNotNullArrayField = new A[10];\n+    static final Object[][] staticNotNullMultiArrayField = new A[10][10];\n+    static final Object staticNotNullObjectField = new A();\n+    static final String staticNotNullStringField = \"Not null\";\n+    static final int[] staticNotNullIntArrayField = new int[10];\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test();\n+        }\n+    }\n+    public static void test() {\n+\n+    }\n+\n+    private static class A {\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestNullStaticField.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}