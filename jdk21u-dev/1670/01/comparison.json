{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import java.util.function.BiFunction;\n@@ -42,0 +41,1 @@\n+import java.util.stream.IntStream;\n@@ -2329,1 +2329,6 @@\n-            mt.restype = addTypeAnnotations(mt.restype, TargetType.METHOD_RETURN);\n+            \/* possible information loss if the type of the method is void then we can't add type\n+             * annotations to it\n+             *\/\n+            if (!mt.restype.hasTag(TypeTag.VOID)) {\n+                mt.restype = addTypeAnnotations(mt.restype, TargetType.METHOD_RETURN);\n+            }\n@@ -2415,4 +2420,0 @@\n-            \/\/ Search the structure of the type to find the contained types at each type path\n-            Map<Type, List<Attribute.TypeCompound>> attributesByType = new HashMap<>();\n-            new TypeAnnotationLocator(attributesByPath, attributesByType).visit(type, List.nil());\n-\n@@ -2420,2 +2421,1 @@\n-            type = new TypeAnnotationTypeMapping(attributesByType).visit(type, null);\n-            Assert.check(attributesByType.isEmpty(), \"Failed to apply annotations to types\");\n+            type = new TypeAnnotationStructuralTypeMapping(attributesByPath).visit(type, List.nil());\n@@ -2449,2 +2449,4 @@\n-     * Visit all contained types, assembling a type path to represent the current location, and\n-     * record the types at each type path that need to be annotated.\n+     * A type mapping that rewrites the type to include type annotations.\n+     *\n+     * <p>This logic is similar to {@link Type.StructuralTypeMapping}, but also tracks the path to\n+     * the contained types being rewritten, and so cannot easily share the existing logic.\n@@ -2452,2 +2454,3 @@\n-    private static class TypeAnnotationLocator\n-            extends Types.DefaultTypeVisitor<Void, List<TypeAnnotationPosition.TypePathEntry>> {\n+    private static final class TypeAnnotationStructuralTypeMapping\n+            extends Types.TypeMapping<List<TypeAnnotationPosition.TypePathEntry>> {\n+\n@@ -2455,2 +2458,1 @@\n-                          ListBuffer<Attribute.TypeCompound>> attributesByPath;\n-        private final Map<Type, List<Attribute.TypeCompound>> attributesByType;\n+                ListBuffer<Attribute.TypeCompound>> attributesByPath;\n@@ -2458,1 +2460,1 @@\n-        private TypeAnnotationLocator(\n+        private TypeAnnotationStructuralTypeMapping(\n@@ -2460,2 +2462,1 @@\n-                        attributesByPath,\n-                Map<Type, List<Attribute.TypeCompound>> attributesByType) {\n+                    attributesByPath) {\n@@ -2463,1 +2464,0 @@\n-            this.attributesByType = attributesByType;\n@@ -2466,0 +2466,1 @@\n+\n@@ -2467,1 +2468,1 @@\n-        public Void visitClassType(ClassType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n+        public Type visitClassType(ClassType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n@@ -2473,3 +2474,4 @@\n-            List<ClassType> enclosing = List.nil();\n-            for (Type curr = t;\n-                    curr != null && curr != Type.noType;\n+            Type outer = t.getEnclosingType();\n+            Type outer1 = outer != Type.noType ? visit(outer, path) : outer;\n+            for (Type curr = t.getEnclosingType();\n+                    curr != Type.noType;\n@@ -2477,11 +2479,0 @@\n-                enclosing = enclosing.prepend((ClassType) curr);\n-            }\n-            for (ClassType te : enclosing) {\n-                if (te.typarams_field != null) {\n-                    int i = 0;\n-                    for (Type typaram : te.typarams_field) {\n-                        visit(typaram, path.append(new TypeAnnotationPosition.TypePathEntry(\n-                                TypeAnnotationPosition.TypePathEntryKind.TYPE_ARGUMENT, i++)));\n-                    }\n-                }\n-                visitType(te, path);\n@@ -2490,1 +2481,6 @@\n-            return null;\n+            List<Type> typarams = t.getTypeArguments();\n+            List<Type> typarams1 = rewriteTypeParams(path, typarams);\n+            if (outer1 != outer || typarams != typarams1) {\n+                t = new ClassType(outer1, typarams1, t.tsym, t.getMetadata());\n+            }\n+            return reannotate(t, path);\n@@ -2493,5 +2489,6 @@\n-        @Override\n-        public Void visitWildcardType(\n-                WildcardType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n-            visit(t.type, path.append(TypeAnnotationPosition.TypePathEntry.WILDCARD));\n-            return super.visitWildcardType(t, path);\n+        private List<Type> rewriteTypeParams(\n+                List<TypeAnnotationPosition.TypePathEntry> path, List<Type> typarams) {\n+            var i = IntStream.iterate(0, x -> x + 1).iterator();\n+            return typarams.map(typaram -> visit(typaram,\n+                    path.append(new TypeAnnotationPosition.TypePathEntry(\n+                            TypeAnnotationPosition.TypePathEntryKind.TYPE_ARGUMENT, i.nextInt()))));\n@@ -2501,3 +2498,10 @@\n-        public Void visitArrayType(ArrayType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n-            visit(t.elemtype, path.append(TypeAnnotationPosition.TypePathEntry.ARRAY));\n-            return super.visitArrayType(t, path);\n+        public Type visitWildcardType(\n+                WildcardType wt, List<TypeAnnotationPosition.TypePathEntry> path) {\n+            Type t = wt.type;\n+            if (t != null) {\n+                t = visit(t, path.append(TypeAnnotationPosition.TypePathEntry.WILDCARD));\n+            }\n+            if (t != wt.type) {\n+                wt = new WildcardType(t, wt.kind, wt.tsym, wt.bound, wt.getMetadata());\n+            }\n+            return reannotate(wt, path);\n@@ -2507,4 +2511,6 @@\n-        public Void visitType(Type t, List<TypeAnnotationPosition.TypePathEntry> path) {\n-            ListBuffer<Attribute.TypeCompound> attributes = attributesByPath.remove(path);\n-            if (attributes != null) {\n-                attributesByType.put(t, attributes.toList());\n+        public Type visitArrayType(ArrayType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n+            Type elemtype = t.elemtype;\n+            Type elemtype1 =\n+                    visit(elemtype, path.append(TypeAnnotationPosition.TypePathEntry.ARRAY));\n+            if (elemtype1 != elemtype)  {\n+                t = new ArrayType(elemtype1, t.tsym, t.getMetadata());\n@@ -2512,1 +2518,1 @@\n-            return null;\n+            return reannotate(t, path);\n@@ -2514,1 +2520,0 @@\n-    }\n@@ -2516,8 +2521,3 @@\n-    \/** A type mapping that rewrites the type to include type annotations. *\/\n-    private static class TypeAnnotationTypeMapping extends Type.StructuralTypeMapping<Void> {\n-\n-        private final Map<Type, List<Attribute.TypeCompound>> attributesByType;\n-\n-        private TypeAnnotationTypeMapping(\n-                Map<Type, List<Attribute.TypeCompound>> attributesByType) {\n-            this.attributesByType = attributesByType;\n+        @Override\n+        public Type visitType(Type t, List<TypeAnnotationPosition.TypePathEntry> path) {\n+            return reannotate(t, path);\n@@ -2526,8 +2526,4 @@\n-        private <T extends Type> Type reannotate(T t, BiFunction<T, Void, Type> f) {\n-            \/\/ We're relying on object identify of Type instances to record where the annotations\n-            \/\/ need to be added, so we have to retrieve the annotations for each type before\n-            \/\/ rewriting it, and then add them after its contained types have been rewritten.\n-            List<Attribute.TypeCompound> attributes = attributesByType.remove(t);\n-            Type mapped = f.apply(t, null);\n-            if (attributes == null) {\n-                return mapped;\n+        Type reannotate(Type type, List<TypeAnnotationPosition.TypePathEntry> path) {\n+            List<Attribute.TypeCompound> attributes = attributesForPath(path);\n+            if (attributes.isEmpty()) {\n+                return type;\n@@ -2537,1 +2533,1 @@\n-            TypeMetadata.Annotations existing = mapped.getMetadata(TypeMetadata.Annotations.class);\n+            TypeMetadata.Annotations existing = type.getMetadata(TypeMetadata.Annotations.class);\n@@ -2540,1 +2536,1 @@\n-                return mapped;\n+                return type;\n@@ -2542,6 +2538,1 @@\n-            return mapped.annotatedType(attributes);\n-        }\n-\n-        @Override\n-        public Type visitClassType(ClassType t, Void unused) {\n-            return reannotate(t, super::visitClassType);\n+            return type.annotatedType(attributes);\n@@ -2550,13 +2541,4 @@\n-        @Override\n-        public Type visitWildcardType(WildcardType t, Void unused) {\n-            return reannotate(t, super::visitWildcardType);\n-        }\n-\n-        @Override\n-        public Type visitArrayType(ArrayType t, Void unused) {\n-            return reannotate(t, super::visitArrayType);\n-        }\n-\n-        @Override\n-        public Type visitType(Type t, Void unused) {\n-            return reannotate(t, (x, u) -> x);\n+        List<Attribute.TypeCompound> attributesForPath(\n+                List<TypeAnnotationPosition.TypePathEntry> path) {\n+            ListBuffer<Attribute.TypeCompound> attributes = attributesByPath.remove(path);\n+            return attributes != null ? attributes.toList() : List.nil();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":67,"deletions":85,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8320001\n+ * @summary javac crashes while adding type annotations to the return type of a constructor\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main TypeAnnosOnConstructorsTest\n+ *\/\n+\n+import java.io.IOException;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.util.List;\n+import java.util.Set;\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.Mode;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class TypeAnnosOnConstructorsTest extends TestRunner {\n+    protected ToolBox tb;\n+\n+    TypeAnnosOnConstructorsTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new TypeAnnosOnConstructorsTest().runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[]{Paths.get(m.getName())});\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws IOException {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    @Test\n+    public void testAnnoOnConstructors(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path y = src.resolve(\"Y.java\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                import java.lang.annotation.Target;\n+                import java.lang.annotation.ElementType;\n+                import java.lang.annotation.Retention;\n+                import java.lang.annotation.RetentionPolicy;\n+\n+                class Y {\n+                    @TA public Y() {}\n+                }\n+\n+                @Target(ElementType.TYPE_USE)\n+                @Retention(RetentionPolicy.RUNTIME)\n+                @interface TA {}\n+                \"\"\");\n+\n+        \/\/ we need to compile Y first\n+        new JavacTask(tb)\n+                .files(y)\n+                .outdir(classes)\n+                .run();\n+\n+        Path classDir = getClassDir();\n+        new JavacTask(tb)\n+                .classpath(classes, classDir)\n+                .options(\"-processor\", SimpleProcessor.class.getName())\n+                .classes(\"Y\")\n+                .outdir(classes)\n+                .run(Task.Expect.SUCCESS);\n+    }\n+\n+    public Path getClassDir() {\n+        String classes = ToolBox.testClasses;\n+        if (classes == null) {\n+            return Paths.get(\"build\");\n+        } else {\n+            return Paths.get(classes);\n+        }\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class SimpleProcessor extends AbstractProcessor {\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latestSupported();\n+        }\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnosOnConstructorsTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -589,0 +589,4 @@\n+\n+    @Test(posn=1, annoType=TA.class, expect=\"130\")\n+    @Test(posn=23, annoType=TA.class, expect=\"131\")\n+    public Map<@TA(130) String, @TA(131) String> f130;\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/type\/BasicAnnoTests.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}