{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,3 @@\n- * @summary Confirm that BuddhistCalendar's add(), roll() and toString() work correctly with Buddhist Era years.\n+ * @summary Confirm that BuddhistCalendar's add(), roll(), set(), and toString()\n+ *          work correctly with Buddhist Era years.\n+ * @run junit BuddhistCalendarTest\n@@ -33,1 +35,21 @@\n-import static java.util.Calendar.*;\n+import java.util.stream.Stream;\n+\n+import static java.util.Calendar.APRIL;\n+import static java.util.Calendar.DATE;\n+import static java.util.Calendar.DECEMBER;\n+import static java.util.Calendar.ERA;\n+import static java.util.Calendar.FEBRUARY;\n+import static java.util.Calendar.JANUARY;\n+import static java.util.Calendar.MAY;\n+import static java.util.Calendar.MONTH;\n+import static java.util.Calendar.WEEK_OF_YEAR;\n+import static java.util.Calendar.YEAR;\n+\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -39,5 +61,86 @@\n-    public static void main(String[] args) {\n-        testAddRoll();\n-        testToString();\n-        testException();\n-        testLeastMax();\n+    \/*\n+     * Test some add values for the BuddhistCalendar. This test compares the same field\n+     * as the one added.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"addDataProvider\")\n+    public void buddhistAddTest(Calendar cal, int amount, int fieldToAdd) {\n+        int base = cal.get(YEAR);\n+        cal.add(fieldToAdd, amount);\n+        int yearAfterRoll = cal.get(YEAR);\n+        assertEquals(yearAfterRoll, base+amount, String.format(\n+                \"Added: %s to field: %s\", amount, fieldToAdd));\n+    }\n+\n+    \/*\n+     * Given in the format: Calendar, amount to add, and field to add.\n+     * Test adding of positive and negative year values.\n+     *\/\n+    private static Stream<Arguments> addDataProvider() {\n+        return Stream.of(\n+                Arguments.of(getBuddhistCalendar(), 1, YEAR),\n+                Arguments.of(getBuddhistCalendar(), -3, YEAR)\n+        );\n+    }\n+\n+    \/*\n+     * Test some add values for the BuddhistCalendar. Compare a bigger field\n+     * (year) than the one added (month). Larger field should roll over.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"alternateAddDataProvider\")\n+    public void buddhistAlternateAddTest(Calendar cal, int amount, int fieldToAdd) {\n+        int base = cal.get(YEAR);\n+        cal.add(fieldToAdd, amount);\n+        int yearAfterRoll = cal.get(YEAR);\n+        assertEquals(yearAfterRoll, (amount>0) ? (base+1): (base-1), String.format(\n+                \"Added: %s to field: %s\", amount, fieldToAdd));\n+    }\n+\n+    \/*\n+     * Given in the format: Calendar, amount to add, and field to add.\n+     * Test adding of positive and negative month values.\n+     *\/\n+    private static Stream<Arguments> alternateAddDataProvider() {\n+        return Stream.of(\n+                Arguments.of(getBuddhistCalendarBuilder().set(MONTH, DECEMBER).build(), 2, MONTH),\n+                Arguments.of(getBuddhistCalendarBuilder().set(MONTH, FEBRUARY).build(), -4, MONTH)\n+                );\n+    }\n+\n+    \/*\n+     * Test some roll values for the BuddhistCalendar. Compare same field\n+     * that was rolled, value should change.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"rollProvider\")\n+    public void buddhistRollTest(Calendar cal, int amount, int fieldToRoll) {\n+        int base = cal.get(YEAR);\n+        cal.roll(fieldToRoll, amount);\n+        int year = cal.get(YEAR);\n+        assertEquals(year, base+amount, \"Rolling field should change value\");\n+    }\n+\n+    \/*\n+     * Given in the format: Calendar, amount to roll, and field to roll.\n+     * Test rolling of positive and negative year values.\n+     *\/\n+    private static Stream<Arguments> rollProvider() {\n+        return Stream.of(\n+                Arguments.of(getBuddhistCalendar(), 2, YEAR),\n+                Arguments.of(getBuddhistCalendar(), -4, YEAR)\n+        );\n+    }\n+\n+    \/*\n+     * Set some calendar values and roll, however, measure a different\n+     * field than the field that was rolled. Rolling should not change the\n+     * larger field.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"alternateRollProvider\")\n+    public void buddhistAlternateRollTest(Calendar cal, int amount, int fieldToRoll) {\n+        int base = cal.get(YEAR);\n+        cal.roll(fieldToRoll, amount);\n+        int year = cal.get(YEAR);\n+        assertEquals(year, base, \"Rolling smaller field should not change bigger field\");\n@@ -46,2 +149,3 @@\n-    \/**\n-     * 4817812\n+    \/*\n+     * Given in the format: Calendar, amount to roll, and field to roll.\n+     * Test rolling of positive and negative week_of_year values.\n@@ -49,79 +153,13 @@\n-    static void testAddRoll() {\n-        Calendar cal;\n-        int base, year;\n-\n-        \/*\n-         * Test: BuddhistCalendar.add(YEAR)\n-         *\/\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n-        cal.add(YEAR, 1);\n-        year = cal.get(YEAR);\n-        check(year, base+1, \"add(+YEAR)\");\n-\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n-        cal.add(YEAR, -3);\n-        year = cal.get(YEAR);\n-        check(year, base-3, \"add(-YEAR)\");\n-\n-        \/*\n-         * Test BuddhistCalendar.add(MONTH)\n-         *\/\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n-        cal.set(MONTH, DECEMBER);\n-        cal.add(MONTH, 2);\n-        year = cal.get(YEAR);\n-        check(year, base+1, \"add(+MONTH)\");\n-\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n-        cal.set(MONTH, FEBRUARY);\n-        cal.add(MONTH, -4);\n-        year = cal.get(YEAR);\n-        check(year, base-1, \"add(-MONTH)\");\n-\n-        \/*\n-         * Test BuddhistCalendar.roll(YEAR)\n-         *\/\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n-        cal.roll(YEAR, 2);\n-        year = cal.get(YEAR);\n-        check(year, base+2, \"roll(+YEAR)\");\n-\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n-        cal.roll(YEAR, -4);\n-        year = cal.get(YEAR);\n-        check(year, base-4, \"roll(-YEAR)\");\n-\n-        \/*\n-         * Test BuddhistCalendar.roll(WEEK_OF_YEAR)\n-         *\/\n-        cal = getBuddhistCalendar();\n-        cal.set(YEAR, 2543);   \/\/ A.D.2000\n-        cal.set(MONTH, DECEMBER);\n-        cal.set(DATE, 31);\n-        base = cal.get(YEAR);\n-        check(base, 2543, \"roll(+WEEK_OF_YEAR)\");\n-        cal.roll(WEEK_OF_YEAR, 10);\n-        year = cal.get(YEAR);\n-        check(year, base, \"roll(+WEEK_OF_YEAR)\");\n-\n-        cal = getBuddhistCalendar();\n-        cal.set(YEAR, 2543);   \/\/ A.D.2000\n-        cal.set(MONTH, JANUARY);\n-        cal.set(DATE, 1);\n-        base = cal.get(YEAR);\n-        check(base, 2543, \"roll(+WEEK_OF_YEAR)\");\n-        cal.roll(WEEK_OF_YEAR, -10);\n-        year = cal.get(YEAR);\n-        check(year, base, \"roll(-WEEK_OF_YEAR)\");\n-\n-        \/*\n-         * Test Calendar.set(year, month, date)\n-         *\/\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n+    private static Stream<Arguments> alternateRollProvider() {\n+        return Stream.of(\n+                Arguments.of(getBuddhistCalendarBuilder().set(YEAR, 2543)\n+                        .set(MONTH, DECEMBER).set(DATE, 31).build(), 10, WEEK_OF_YEAR),\n+                Arguments.of(getBuddhistCalendarBuilder().set(YEAR, 2543)\n+                        .set(MONTH, JANUARY).set(DATE, 1).build(), -10, WEEK_OF_YEAR)\n+        );\n+    }\n+\n+    \/\/ Test the overloaded set() methods. Check year value.\n+    @Test\n+    public void buddhistSetTest() {\n+        Calendar cal = getBuddhistCalendar();\n@@ -129,8 +167,1 @@\n-        year = cal.get(YEAR);\n-        check(year, 3001, \"set(year, month, date)\");\n-\n-        \/*\n-         * Test Calendar.set(year, month, date, hour, minute)\n-         *\/\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n+        assertEquals(cal.get(YEAR), 3001);\n@@ -138,36 +169,9 @@\n-        year = cal.get(YEAR);\n-        check(year, 3020, \"set(year, month, date, hour, minute)\");\n-\n-        \/*\n-         * Test Calendar.set(year, month, date, hour, minute, second)\n-         *\/\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n-        cal.set(3120, MAY, 20, 9, 10, 52);\n-        year = cal.get(YEAR);\n-        check(year, 3120, \"set(year, month, date, hour, minute, second)\");\n-\n-        \/*\n-         * Test BuddhistCalendar.getActualMaximum(YEAR);\n-         *    set(YEAR)\/get(YEAR) in this method doesn't affect the real\n-         *    YEAR value because a clone is used with set()&get().\n-         *\/\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n-        int limit = cal.getActualMaximum(YEAR);\n-        year = cal.get(YEAR);\n-        check(year, base, \"BuddhistCalendar.getActualMaximum(YEAR)\");\n-\n-        \/*\n-         * Test BuddhistCalendar.getActualMinimum(YEAR);\n-         *   This doesn't call set(YEAR) nor get(YEAR), though.\n-         *\/\n-        cal = getBuddhistCalendar();\n-        base = cal.get(YEAR);\n-        limit = cal.getActualMinimum(YEAR);\n-        year = cal.get(YEAR);\n-        check(year, base, \"BuddhistCalendar.getActualMinimum(YEAR)\");\n-    }\n-\n-    \/**\n-     * 4847186: BuddhistCalendar: toString() returns Gregorian year\n+        assertEquals(cal.get(YEAR), 3020);\n+        cal.set(3120, MAY, 20, 9, 10, 52 );\n+        assertEquals(cal.get(YEAR), 3120);\n+    }\n+\n+    \/*\n+     * Test BuddhistCalendar.getActualMaximum(YEAR);\n+     * set(YEAR)\/get(YEAR) in this method doesn't affect the real\n+     * YEAR value because a clone is used with set() and get().\n@@ -175,1 +179,22 @@\n-    static void testToString() {\n+    @Test\n+    public void buddhistActualMaximumTest() {\n+        Calendar cal = getBuddhistCalendar();\n+        int base = cal.get(YEAR);\n+        int ignored = cal.getActualMaximum(YEAR);\n+        int year = cal.get(YEAR);\n+        assertEquals(year, base, \"BuddhistCalendar.getActualMaximum(YEAR)\");\n+    }\n+\n+    \/\/ Test BuddhistCalendar.getActualMinimum(YEAR), doesn't call set(YEAR) nor get(YEAR).\n+    @Test\n+    public void buddhistActualMinimumTest() {\n+        Calendar cal = getBuddhistCalendar();\n+        int base = cal.get(YEAR);\n+        int ignored = cal.getActualMinimum(YEAR);\n+        int year = cal.get(YEAR);\n+        assertEquals(year, base, \"BuddhistCalendar.getActualMinimum(YEAR)\");\n+    }\n+\n+    \/\/ 4847186: BuddhistCalendar: toString() returns Gregorian year\n+    @Test\n+    public void buddhistToStringTest() {\n@@ -180,4 +205,1 @@\n-        if (Integer.parseInt(y) != year) {\n-            throw new RuntimeException(\"toString(): wrong year value: got \" + y\n-                                       + \", expected \" + year);\n-        }\n+        assertEquals(year, Integer.parseInt(y), \"Wrong year value\");\n@@ -186,4 +208,3 @@\n-    \/**\n-     * 4956479: BuddhistCalendar methods may return wrong values after exception\n-     *\/\n-    static void testException() {\n+    \/\/ 4956479: BuddhistCalendar methods may return wrong values after exception\n+    @Test\n+    public void buddhistValuesAfterExceptionTest() {\n@@ -192,9 +213,1 @@\n-        boolean exceptionOccurred = false;\n-        try {\n-            cal.add(100, +1); \/\/ cause exception\n-        } catch (Exception e) {\n-            exceptionOccurred = true;\n-        }\n-        if (!exceptionOccurred) {\n-            throw new RuntimeException(\"testException: test case failed: no exception thrown\");\n-        }\n+        assertThrows(IllegalArgumentException.class, ()-> cal.add(100, +1));\n@@ -202,4 +215,1 @@\n-        if (year2 != year) {\n-            throw new RuntimeException(\"wrong year value after exception: got \" + year2\n-                                       + \", expected \" + year);\n-        }\n+        assertEquals(year2, year, \"Wrong year value after exception thrown\");\n@@ -208,4 +218,3 @@\n-    \/**\n-     * 4956227: getLeastMaximum(WEEK_OF_MONTH) return diff. val. for Greg. and Buddhist Calendar\n-     *\/\n-    static void testLeastMax() {\n+    \/\/ 4956227: getLeastMaximum(WEEK_OF_MONTH) return diff. val. for Greg. and Buddhist Calendar\n+    @Test\n+    public void buddhistLeastMaximumTest() {\n@@ -222,5 +231,1 @@\n-            if (bn != gn) {\n-                throw new RuntimeException(\"inconsistent Least Max value for \" + Koyomi.getFieldName(f)\n-                                           + \": Buddhist=\" + bn\n-                                           + \": Gregorian=\" + gn);\n-            }\n+            assertEquals(bn, gn, \"Inconsistent Least Max value for \" + Koyomi.getFieldName(f));\n@@ -230,5 +235,3 @@\n-    \/**\n-     * @return a BuddhistCalendar\n-     *\/\n-    static Calendar getBuddhistCalendar() {\n-        return Calendar.getInstance(THAI_LOCALE);\n+    \/\/ Utility to get a new Buddhist Calendar Builder (to allow setting of other values)\n+    private static Calendar.Builder getBuddhistCalendarBuilder() {\n+        return new Calendar.Builder().setLocale(THAI_LOCALE);\n@@ -237,5 +240,3 @@\n-    static void check(int got, int expected, String s) {\n-        if (got != expected) {\n-            throw new RuntimeException(\"Failed: \" +\n-                s + \": got:\" + got + \", expected:\" + expected);\n-        }\n+    \/\/ Utility to get a new Buddhist calendar\n+    private static Calendar getBuddhistCalendar() {\n+        return Calendar.getInstance(THAI_LOCALE);\n","filename":"test\/jdk\/java\/util\/Calendar\/BuddhistCalendarTest.java","additions":175,"deletions":174,"binary":false,"changes":349,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @run junit Bug4302966\n@@ -34,0 +35,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -36,1 +41,2 @@\n-    public static void main(String[] args) {\n+    \/\/ Specific day of week test for Czech locale\n+    public void czechDayOfWeekTest() {\n@@ -39,3 +45,1 @@\n-        if (firstDayOfWeek != Calendar.MONDAY) {\n-            throw new RuntimeException();\n-        }\n+        assertEquals(firstDayOfWeek, Calendar.MONDAY);\n","filename":"test\/jdk\/java\/util\/Calendar\/Bug4302966.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @summary Make sure that computeTime call doesn't reset the isTimeSet value.\n+ * @summary Make sure that calling computeTime doesn't reset the isTimeSet value.\n+ * @run junit Bug4766302\n@@ -32,1 +33,4 @@\n-@SuppressWarnings(\"serial\")\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n@@ -35,0 +39,2 @@\n+    \/\/ Extend GregorianCalendar to check the protected value of isTimeSet\n+    @SuppressWarnings(\"serial\")\n@@ -36,1 +42,0 @@\n-\n@@ -46,1 +51,3 @@\n-    public static void main(String[] args) {\n+    \/\/ Check the value of isTimeStillSet() after calling computeTime()\n+    @Test\n+    public void validateIsTimeSetTest() {\n@@ -49,3 +56,1 @@\n-        if (!cal.isTimeStillSet()) {\n-            throw new RuntimeException(\"computeTime() call reset isTimeSet.\");\n-        }\n+        assertTrue(cal.isTimeStillSet(), \"computeTime() call reset isTimeSet.\");\n","filename":"test\/jdk\/java\/util\/Calendar\/Bug4766302.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @summary Make sure cloned GregorianCalendar is unchanged by modifying its original.\n+ * @summary Ensure cloned GregorianCalendar is unchanged when modifying its original.\n+ * @run junit bug4028518\n@@ -30,2 +31,7 @@\n-import java.util.GregorianCalendar ;\n-import static java.util.Calendar.*;\n+import java.util.GregorianCalendar;\n+\n+import static java.util.Calendar.DAY_OF_MONTH;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n@@ -35,2 +41,6 @@\n-    public static void main(String[] args)\n-    {\n+    \/*\n+     * Ensure modifying the original GregorianCalendar does not\n+     * modify the cloned one as well\n+     *\/\n+    @Test\n+    public void clonedShouldNotChangeOriginalTest() {\n@@ -39,3 +49,0 @@\n-\n-        printdate(cal1, \"cal1: \") ;\n-        printdate(cal2, \"cal2 - cloned(): \") ;\n@@ -43,12 +50,2 @@\n-        printdate(cal1, \"cal1 after adding 1 day: \") ;\n-        printdate(cal2, \"cal2 should be unmodified: \") ;\n-        if (cal1.get(DAY_OF_MONTH) == cal2.get(DAY_OF_MONTH)) {\n-            throw new RuntimeException(\"cloned GregorianCalendar modified\");\n-        }\n-    }\n-\n-    private static void printdate(GregorianCalendar cal, String string)\n-    {\n-        System.out.println(string + (cal.get(MONTH) + 1)\n-                           + \"\/\" + cal.get(DAY_OF_MONTH)\n-                           + \"\/\" + cal.get(YEAR)) ;\n+        assertNotEquals(cal1.get(DAY_OF_MONTH), cal2.get(DAY_OF_MONTH),\n+                \"Cloned calendar should not have same value as original\");\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4028518.java","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @summary Make sure set(DAY_OF_YEAR, 1) works.\n+ * @summary Ensure set(DAY_OF_YEAR, 1) works.\n+ * @run junit bug4100311\n@@ -34,2 +35,7 @@\n-public class bug4100311\n-{\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class bug4100311 {\n+\n+    \/\/ GregorianCalendar should be able to date to january 1st properly\n@@ -37,2 +43,2 @@\n-    public static void main(String args[])\n-    {\n+    @Test\n+    public void dayOfYearIsOneTest() {\n@@ -42,4 +48,3 @@\n-        Date d = cal.getTime();             \/\/ Should be Jan 1\n-        if (d.getMonth() != 0 || d.getDate() != 1) {\n-            throw new RuntimeException(\"Date isn't Jan 1\");\n-        }\n+        Date d = cal.getTime();\n+        assertEquals(0, d.getMonth(), \"Date: \"+d+\" isn't January 1st\");\n+        assertEquals(1, d.getDate(),\"Date: \"+d+\" isn't January 1st\");\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4100311.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,3 @@\n- * @summary confirm that Calendar.setTimeInMillis() and\n- * getTimeInMillis() can be called from a user program. (They used to\n- * be protected methods.)\n- * @library \/java\/text\/testlib\n+ * @summary confirm that Calendar.setTimeInMillis() and getTimeInMillis()\n+ *          can be called from a user program. They used to be protected methods.\n+ * @run junit bug4243802\n@@ -33,1 +32,3 @@\n-import java.util.*;\n+import java.util.Calendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n@@ -35,1 +36,2 @@\n-public class bug4243802 extends IntlTest {\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -37,2 +39,21 @@\n-    public static void main(String[] args) throws Exception {\n-        new bug4243802().run(args);\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class bug4243802 {\n+\n+    private static final TimeZone savedTz = TimeZone.getDefault();\n+    private static final Locale savedLocale = Locale.getDefault();\n+\n+    \/\/ Save JVM default Locale and TimeZone\n+    @BeforeAll\n+    static void initAll() {\n+        Locale.setDefault(Locale.US);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n+    }\n+\n+    \/\/ Restore JVM default Locale and TimeZone\n+    @AfterAll\n+    static void tearDownAll() {\n+        Locale.setDefault(savedLocale);\n+        TimeZone.setDefault(savedTz);\n@@ -41,2 +62,4 @@\n-    \/**\n-     * 4243802: RFE: need way to set the date of a calendar without a Date object\n+    \/*\n+     * Test getTimeInMillis() and setTimeInMillis(). Compare a Calendar\n+     * set with a traditional date to one set using setTimeInMillis(),\n+     * where both Calendars should be of equal times.\n@@ -44,6 +67,4 @@\n-    public void Test4243802() {\n-        TimeZone saveZone = TimeZone.getDefault();\n-        Locale saveLocale = Locale.getDefault();\n-        try {\n-            Locale.setDefault(Locale.US);\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n+    @Test\n+    public void setCalendarWithoutDateTest() {\n+        Calendar cal1 = Calendar.getInstance();\n+        Calendar cal2 = Calendar.getInstance();\n@@ -51,2 +72,2 @@\n-            Calendar cal1 = Calendar.getInstance();\n-            Calendar cal2 = Calendar.getInstance();\n+        cal1.clear();\n+        cal2.clear();\n@@ -54,26 +75,23 @@\n-            cal1.clear();\n-            cal2.clear();\n-            cal1.set(2001, Calendar.JANUARY, 25, 1, 23, 45);\n-            cal2.setTimeInMillis(cal1.getTimeInMillis());\n-            if ((cal2.get(Calendar.YEAR) != 2001) ||\n-                (cal2.get(Calendar.MONTH) != Calendar.JANUARY) ||\n-                (cal2.get(Calendar.DAY_OF_MONTH) != 25) ||\n-                (cal2.get(Calendar.HOUR_OF_DAY) != 1) ||\n-                (cal2.get(Calendar.MINUTE) != 23) ||\n-                (cal2.get(Calendar.SECOND) != 45) ||\n-                (cal2.get(Calendar.MILLISECOND) != 0)) {\n-                 errln(\"Failed: expected 1\/25\/2001 1:23:45.000\" +\n-                       \", got \" + (cal2.get(Calendar.MONTH)+1) + \"\/\" +\n-                       cal2.get(Calendar.DAY_OF_MONTH) +\"\/\" +\n-                       cal2.get(Calendar.YEAR) + \" \" +\n-                       cal2.get(Calendar.HOUR_OF_DAY) + \":\" +\n-                       cal2.get(Calendar.MINUTE) + \":\" +\n-                       cal2.get(Calendar.SECOND) + \".\" +\n-                       toMillis(cal2.get(Calendar.MILLISECOND)));\n-            }\n-            logln(\"Passed.\");\n-        }\n-        finally {\n-            Locale.setDefault(saveLocale);\n-            TimeZone.setDefault(saveZone);\n-        }\n+        cal1.set(2001, Calendar.JANUARY, 25, 1, 23, 45);\n+        \/\/ Build the second calendar using the getTimeInMillis of the first\n+        cal2.setTimeInMillis(cal1.getTimeInMillis());\n+\n+        assertEquals(2001, cal2.get(Calendar.YEAR), getErrMsg(cal1));\n+        assertEquals(Calendar.JANUARY, cal2.get(Calendar.MONTH), getErrMsg(cal1));\n+        assertEquals(25, cal2.get(Calendar.DAY_OF_MONTH), getErrMsg(cal1));\n+        assertEquals(1, cal2.get(Calendar.HOUR_OF_DAY), getErrMsg(cal1));\n+        assertEquals(23, cal2.get(Calendar.MINUTE), getErrMsg(cal1));\n+        assertEquals(45, cal2.get(Calendar.SECOND), getErrMsg(cal1));\n+        assertEquals(0, cal2.get(Calendar.MILLISECOND), getErrMsg(cal1));\n+    }\n+\n+    \/\/ Utility to build a long error message\n+    private static String getErrMsg(Calendar cal) {\n+        return \"Failed: expected 1\/25\/2001 1:23:45.000\" +\n+                \", got \" + (cal.get(Calendar.MONTH)+1) + \"\/\" +\n+                cal.get(Calendar.DAY_OF_MONTH) +\"\/\" +\n+                cal.get(Calendar.YEAR) + \" \" +\n+                cal.get(Calendar.HOUR_OF_DAY) + \":\" +\n+                cal.get(Calendar.MINUTE) + \":\" +\n+                cal.get(Calendar.SECOND) + \".\" +\n+                toMillis(cal.get(Calendar.MILLISECOND));\n@@ -82,2 +100,3 @@\n-    private String toMillis(int m) {\n-        StringBuffer sb = new StringBuffer();\n+    \/\/ Utility to convert value to format of expected milisecond value\n+    private static String toMillis(int m) {\n+        StringBuilder sb = new StringBuilder();\n@@ -90,2 +109,1 @@\n-        sb.append(m);\n-        return sb.toString();\n+        return sb.append(m).toString();\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4243802.java","additions":67,"deletions":49,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,5 +24,1 @@\n-import java.io.*;\n-import java.util.*;\n-import java.text.*;\n-\n-\/**\n+\/*\n@@ -31,2 +27,2 @@\n- * @summary test that Calendar's Serializasion works correctly.\n- * @library \/java\/text\/testlib\n+ * @summary test that Calendar's Serialization works correctly.\n+ * @run junit bug4316678\n@@ -34,1 +30,0 @@\n-public class bug4316678 extends IntlTest {\n@@ -36,3 +31,8 @@\n-    public static void main(String[] args) throws Exception {\n-        new bug4316678().run(args);\n-    }\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n@@ -40,4 +40,7 @@\n-    public void Test4316678() throws Exception {\n-        GregorianCalendar gc1;\n-        GregorianCalendar gc2;\n-        TimeZone saveZone = TimeZone.getDefault();\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class bug4316678 {\n@@ -45,2 +48,2 @@\n-        try {\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+    private static final String serializedData = \"bug4316678.ser\";\n+    private static final TimeZone savedTz = TimeZone.getDefault();\n@@ -48,5 +51,11 @@\n-            gc1 = new GregorianCalendar(2000, Calendar.OCTOBER, 10);\n-            try (ObjectOutputStream out\n-                    = new ObjectOutputStream(new FileOutputStream(\"bug4316678.ser\"))) {\n-                out.writeObject(gc1);\n-            }\n+    \/\/ Save JVM default Locale and TimeZone\n+    @BeforeAll\n+    static void initAll() {\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+    }\n+\n+    \/\/ Restore JVM default Locale and TimeZone\n+    @AfterAll\n+    static void tearDownAll() {\n+        TimeZone.setDefault(savedTz);\n+    }\n@@ -54,4 +63,9 @@\n-            try (ObjectInputStream in\n-                    = new ObjectInputStream(new FileInputStream(\"bug4316678.ser\"))) {\n-                gc2 = (GregorianCalendar)in.readObject();\n-            }\n+    \/\/ Test that a serialized GregorianCalendar has the expected values\n+    @Test\n+    public void serializationTest() throws IOException, ClassNotFoundException {\n+        GregorianCalendar gc1 = new GregorianCalendar(2000, Calendar.OCTOBER, 10);\n+        GregorianCalendar gc2;\n+        try (ObjectOutputStream out\n+                = new ObjectOutputStream(new FileOutputStream(serializedData))) {\n+            out.writeObject(gc1);\n+        }\n@@ -59,8 +73,2 @@\n-            gc1.set(Calendar.DATE, 16);\n-            gc2.set(Calendar.DATE, 16);\n-            if (!gc1.getTime().equals(gc2.getTime())) {\n-                errln(\"Invalid Time :\" + gc2.getTime() +\n-                    \", expected :\" + gc1.getTime());\n-            }\n-        } finally {\n-            TimeZone.setDefault(saveZone);\n+        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(serializedData))) {\n+            gc2 = (GregorianCalendar)in.readObject();\n@@ -68,0 +76,5 @@\n+\n+        gc1.set(Calendar.DATE, 16);\n+        gc2.set(Calendar.DATE, 16);\n+        assertEquals(gc2.getTime(), gc1.getTime(),\n+                \"Times should be equal after serialization\");\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4316678.java","additions":48,"deletions":35,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/java\/text\/testlib\n+ * @run junit bug4372743\n@@ -33,0 +33,1 @@\n+import java.util.stream.Stream;\n@@ -34,1 +35,17 @@\n-import static java.util.GregorianCalendar.*;\n+import static java.util.GregorianCalendar.AD;\n+import static java.util.GregorianCalendar.APRIL;\n+import static java.util.GregorianCalendar.AUGUST;\n+import static java.util.GregorianCalendar.BC;\n+import static java.util.GregorianCalendar.DECEMBER;\n+import static java.util.GregorianCalendar.ERA;\n+import static java.util.GregorianCalendar.FEBRUARY;\n+import static java.util.GregorianCalendar.JANUARY;\n+import static java.util.GregorianCalendar.JULY;\n+import static java.util.GregorianCalendar.JUNE;\n+import static java.util.GregorianCalendar.MARCH;\n+import static java.util.GregorianCalendar.MAY;\n+import static java.util.GregorianCalendar.MONTH;\n+import static java.util.GregorianCalendar.NOVEMBER;\n+import static java.util.GregorianCalendar.OCTOBER;\n+import static java.util.GregorianCalendar.SEPTEMBER;\n+import static java.util.GregorianCalendar.YEAR;\n@@ -36,1 +53,2 @@\n-public class bug4372743 extends IntlTest {\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -38,2 +56,20 @@\n-    public static void main(String[] args) throws Exception {\n-        new bug4372743().run(args);\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class bug4372743 {\n+\n+    private static final TimeZone savedTz = TimeZone.getDefault();\n+\n+    \/\/ Save JVM default Locale and TimeZone\n+    @BeforeAll\n+    static void initAll() {\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+    }\n+\n+    \/\/ Restore JVM default Locale and TimeZone\n+    @AfterAll\n+    static void tearDownAll() {\n+        TimeZone.setDefault(savedTz);\n@@ -42,1 +78,50 @@\n-    private int[][] data = {\n+    \/*\n+     * Set GregorianCalendar to (March 3, A.D. 2) and test adding\n+     * to the month field. Ensure that the added field is as expected.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"A_D_Values\")\n+    public void A_D_Test(GregorianCalendar gc, int monthValue) {\n+        for (int i = 0; i < tableSize; i+=(-monthValue)) {\n+            check(gc, i);\n+            gc.add(MONTH, monthValue);\n+        }\n+    }\n+\n+    \/\/ Given in format: (A.D.) GregorianCalendar, amount to add\n+    private static Stream<Arguments> A_D_Values() {\n+        return Stream.of(\n+                Arguments.of(new GregorianCalendar(2, MARCH, 3), -1),\n+                Arguments.of(new GregorianCalendar(2, MARCH, 3), -7));\n+    }\n+\n+    \/*\n+     * Set GregorianCalendar to (March 10, 2 B.C.) and test adding\n+     * to the month field. Ensure that the added field is as expected.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"B_C_Values\")\n+    public void B_C_Test(GregorianCalendar gc, int monthValue) {\n+            gc.add(YEAR, -3);\n+            for (int i = tableSize - 1; i >= 0; i-=monthValue) {\n+                check(gc, i);\n+                gc.add(MONTH, monthValue);\n+            }\n+    }\n+\n+    \/\/ Given in format: (B.C.) GregorianCalendar, amount to add\n+    private static Stream<Arguments> B_C_Values() {\n+        return Stream.of(\n+                Arguments.of(new GregorianCalendar(2, OCTOBER, 10), 1),\n+                Arguments.of(new GregorianCalendar(2, OCTOBER, 10), 8));\n+    }\n+\n+    \/\/ Check golden data array with actual value\n+    private void check(GregorianCalendar gc, int index) {\n+        assertEquals(data[index][ERA], gc.get(ERA), \"Invalid era\");\n+        assertEquals(data[index][YEAR], gc.get(YEAR), \"Invalid year\");\n+        assertEquals(data[index][MONTH], gc.get(MONTH), \"Invalid month\");\n+    }\n+\n+    \/\/ Expected ERA, YEAR, and MONTH combinations\n+    private final int[][] data = {\n@@ -73,57 +158,1 @@\n-    private int tablesize = data.length;\n-\n-    private void check(GregorianCalendar gc, int index) {\n-        if (gc.get(ERA) != data[index][ERA]) {\n-            errln(\"Invalid era :\" + gc.get(ERA)\n-                    + \", expected :\" + data[index][ERA]);\n-        }\n-        if (gc.get(YEAR) != data[index][YEAR]) {\n-            errln(\"Invalid year :\" + gc.get(YEAR)\n-                    + \", expected :\" + data[index][YEAR]);\n-        }\n-        if (gc.get(MONTH) != data[index][MONTH]) {\n-            errln(\"Invalid month :\" + gc.get(MONTH)\n-                    + \", expected :\" + data[index][MONTH]);\n-        }\n-    }\n-\n-    public void Test4372743() {\n-        GregorianCalendar gc;\n-        TimeZone saveZone = TimeZone.getDefault();\n-\n-        try {\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n-\n-            \/* Set March 3, A.D. 2 *\/\n-            gc = new GregorianCalendar(2, MARCH, 3);\n-            for (int i = 0; i < tablesize; i++) {\n-                check(gc, i);\n-                gc.add(MONTH, -1);\n-            }\n-\n-            \/* Again, Set March 3, A.D. 2 *\/\n-            gc = new GregorianCalendar(2, MARCH, 3);\n-            for (int i = 0; i < tablesize; i += 7) {\n-                check(gc, i);\n-                gc.add(MONTH, -7);\n-            }\n-\n-            \/* Set March 10, 2 B.C. *\/\n-            gc = new GregorianCalendar(2, OCTOBER, 10);\n-            gc.add(YEAR, -3);\n-            for (int i = tablesize - 1; i >= 0; i--) {\n-                check(gc, i);\n-                gc.add(MONTH, 1);\n-            }\n-\n-            \/* Again, Set March 10, 2 B.C. *\/\n-            gc = new GregorianCalendar(2, OCTOBER, 10);\n-            gc.add(YEAR, -3);\n-            for (int i = tablesize - 1; i >= 0; i -= 8) {\n-                check(gc, i);\n-                gc.add(MONTH, 8);\n-            }\n-        } finally {\n-            TimeZone.setDefault(saveZone);\n-        }\n-    }\n+    private final int tableSize = data.length;\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4372743.java","additions":93,"deletions":64,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,4 @@\n- * @summary Make sure that GregorianCalendar doesn't cause IllegalArgumentException at some special situations which are related to the Leap Year.\n- * @library \/java\/text\/testlib\n+ * @summary Make sure that GregorianCalendar doesn't cause\n+ *          IllegalArgumentException at some special situations which are\n+ *          related to the Leap Year.\n+ * @run junit bug4401223\n@@ -34,1 +36,6 @@\n-import static java.util.GregorianCalendar.*;\n+import static java.util.GregorianCalendar.DATE;\n+import static java.util.GregorianCalendar.DAY_OF_YEAR;\n+import static java.util.GregorianCalendar.DECEMBER;\n+import static java.util.GregorianCalendar.FEBRUARY;\n+import static java.util.GregorianCalendar.MONTH;\n+import static java.util.GregorianCalendar.YEAR;\n@@ -36,1 +43,1 @@\n-public class bug4401223 extends IntlTest {\n+import org.junit.jupiter.api.Test;\n@@ -38,3 +45,2 @@\n-    public void Test4401223a() {\n-        int status = 0;\n-        String s = null;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -42,4 +48,9 @@\n-        try {\n-            @SuppressWarnings(\"deprecation\")\n-            Date date = new Date(2000 - 1900, FEBRUARY, 29);\n-            GregorianCalendar gc = new GregorianCalendar();\n+public class bug4401223 {\n+\n+    \/\/ Ensure IAE not thrown for date: 12-29-00\n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void checkExceptionTest() {\n+        Date date = new Date(2000 - 1900, FEBRUARY, 29);\n+        GregorianCalendar gc = new GregorianCalendar();\n+        assertDoesNotThrow(() -> {\n@@ -49,10 +60,1 @@\n-            s = \"02\/29\/00 & set(YEAR,2001) = \" + gc.getTime().toString();\n-        } catch (Exception ex) {\n-            status++;\n-            s = \"Exception occurred for 2\/29\/00 & set(YEAR,2001): \" + ex;\n-        }\n-        if (status > 0) {\n-            errln(s);\n-        } else {\n-            logln(s);\n-        }\n+        }, \"Exception occurred for 2\/29\/00 & set(YEAR,2001)\");\n@@ -61,8 +63,7 @@\n-    public void Test4401223b() {\n-        int status = 0;\n-        String s = null;\n-\n-        try {\n-            @SuppressWarnings(\"deprecation\")\n-            Date date = new Date(2000 - 1900, DECEMBER, 31);\n-            GregorianCalendar gc = new GregorianCalendar();\n+    \/\/ Ensure IAE not thrown for date: 12-31-00. Validate expected values.\n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void checkExceptionAndValuesTest() {\n+        Date date = new Date(2000 - 1900, DECEMBER, 31);\n+        GregorianCalendar gc = new GregorianCalendar();\n+        assertDoesNotThrow(() -> {\n@@ -72,0 +73,1 @@\n+        }, \"Exception occurred for 12\/31\/00 & set(YEAR,2001)\");\n@@ -73,19 +75,1 @@\n-            if (gc.get(YEAR) != 2001\n-                    || gc.get(MONTH) != DECEMBER\n-                    || gc.get(DATE) != 31\n-                    || gc.get(DAY_OF_YEAR) != 365) {\n-                status++;\n-                s = \"Wrong Date : 12\/31\/00 & set(YEAR,2001) ---> \" + gc.getTime().toString();\n-            } else {\n-                s = \"12\/31\/00 & set(YEAR,2001) = \" + gc.getTime().toString();\n-            }\n-        } catch (Exception ex) {\n-            status++;\n-            s = \"Exception occurred for 12\/31\/00 & set(YEAR,2001) : \" + ex;\n-        }\n-        if (status > 0) {\n-            errln(s);\n-        } else {\n-            logln(s);\n-        }\n-    }\n+        String errMsg = \"Wrong date,  got: \" + gc.getTime();\n@@ -93,2 +77,4 @@\n-    public static void main(String[] args) throws Exception {\n-        new bug4401223().run(args);\n+        assertEquals(2001, gc.get(YEAR), errMsg);\n+        assertEquals(DECEMBER, gc.get(MONTH), errMsg);\n+        assertEquals(31, gc.get(DATE), errMsg);\n+        assertEquals(365, gc.get(DAY_OF_YEAR), errMsg);\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4401223.java","additions":37,"deletions":51,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,3 @@\n- * @summary Confirm that GregorianCalendar.roll() works properly during transition from Daylight Saving Time to Standard Time.\n+ * @summary Confirm that GregorianCalendar.roll() works properly during\n+ *          transition from Daylight Saving Time to Standard Time.\n+ * @run junit bug4514831\n@@ -34,1 +36,6 @@\n-import static java.util.GregorianCalendar.*;\n+import static java.util.GregorianCalendar.DAY_OF_MONTH;\n+import static java.util.GregorianCalendar.DAY_OF_WEEK;\n+import static java.util.GregorianCalendar.DAY_OF_WEEK_IN_MONTH;\n+import static java.util.GregorianCalendar.DAY_OF_YEAR;\n+import static java.util.GregorianCalendar.OCTOBER;\n+import static java.util.GregorianCalendar.THURSDAY;\n@@ -36,0 +43,3 @@\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -37,6 +47,1 @@\n-public class bug4514831 {\n-\n-    public static void main(String[] args) {\n-        Locale savedLocale = Locale.getDefault();\n-        TimeZone savedTimeZone = TimeZone.getDefault();\n-        boolean err = false;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -44,3 +49,7 @@\n-        String golden_data1 = \"27-28 28-29 29-30 30-31 31-1 1-2 2-3 \";\n-        String golden_data2 = \"27-28 28-29 29-30 30-31 31-25 25-26 26-27 \";\n-        String golden_data3 = \"1-8 8-15 15-22 22-29 29-1 1-8 8-15 \";\n+public class bug4514831 {\n+    \/\/ Data of 7 rolls in the form of a string for the respective field\n+    private static final String expectedDayOfYearData = \"27-28 28-29 29-30 30-31 31-1 1-2 2-3 \";\n+    private static final String expectedDayOfWeekData = \"27-28 28-29 29-30 30-31 31-25 25-26 26-27 \";\n+    private static final String expectedDayOfWeekInMonthData = \"1-8 8-15 15-22 22-29 29-1 1-8 8-15 \";\n+    private static final TimeZone savedTz = TimeZone.getDefault();\n+    private static final Locale savedLocale = Locale.getDefault();\n@@ -48,3 +57,6 @@\n-        try {\n-            Locale.setDefault(Locale.US);\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"US\/Pacific\"));\n+    \/\/ Save JVM default Locale and TimeZone\n+    @BeforeAll\n+    void initAll() {\n+        Locale.setDefault(Locale.US);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"US\/Pacific\"));\n+    }\n@@ -52,12 +64,6 @@\n-            String test_roll = \"\";\n-            GregorianCalendar c_roll = new GregorianCalendar(2001, OCTOBER, 27);\n-            for (int i = 0; i < 7; i++) {\n-                test_roll += c_roll.get(DAY_OF_MONTH) + \"-\";\n-                c_roll.roll(DAY_OF_YEAR, true);\n-                test_roll += c_roll.get(DAY_OF_MONTH) + \" \";\n-            }\n-            if (!test_roll.equals(golden_data1)) {\n-                err = true;\n-                System.err.println(\"Wrong roll(DAY_OF_YEAR) transition: got \"\n-                        + test_roll + \"expected \" + golden_data1);\n-            }\n+    \/\/ Restore JVM default Locale and TimeZone\n+    @AfterAll\n+    void tearDownAll() {\n+        Locale.setDefault(savedLocale);\n+        TimeZone.setDefault(savedTz);\n+    }\n@@ -65,13 +71,16 @@\n-            test_roll = \"\";\n-            c_roll = new GregorianCalendar(2001, OCTOBER, 27);\n-            c_roll.setFirstDayOfWeek(THURSDAY);\n-            for (int i = 0; i < 7; i++) {\n-                test_roll += c_roll.get(DAY_OF_MONTH) + \"-\";\n-                c_roll.roll(DAY_OF_WEEK, true);\n-                test_roll += c_roll.get(DAY_OF_MONTH) + \" \";\n-            }\n-            if (!test_roll.equals(golden_data2)) {\n-                err = true;\n-                System.err.println(\"Wrong roll(DAY_OF_WEEK) transition: got \"\n-                        + test_roll + \"expected \" + golden_data2);\n-            }\n+    \/*\n+     * Test some roll values during transition (DAY_OF_YEAR field). Uses\n+     * the boolean roll method. Roll multiple times and attach the returned\n+     * values to a long string which is then compared to the expected data.\n+     *\/\n+    public void rollDayOfYearTest() {\n+        StringBuilder actualRollData = new StringBuilder();\n+        GregorianCalendar cal = new GregorianCalendar(2001, OCTOBER, 27);\n+        for (int i = 0; i < 7; i++) {\n+            actualRollData.append(cal.get(DAY_OF_MONTH)).append(\"-\");\n+            cal.roll(DAY_OF_YEAR, true);\n+            actualRollData.append(cal.get(DAY_OF_MONTH)).append(\" \");\n+        }\n+        assertEquals(expectedDayOfYearData, actualRollData.toString(),\n+                \"Wrong roll(DAY_OF_YEAR) transition\");\n+    }\n@@ -79,15 +88,13 @@\n-            test_roll = \"\";\n-            c_roll = new GregorianCalendar(2001, OCTOBER, 1);\n-            for (int i = 0; i < 7; i++) {\n-                test_roll += c_roll.get(DAY_OF_MONTH) + \"-\";\n-                c_roll.roll(DAY_OF_WEEK_IN_MONTH, true);\n-                test_roll += c_roll.get(DAY_OF_MONTH) + \" \";\n-            }\n-            if (!test_roll.equals(golden_data3)) {\n-                err = true;\n-                System.err.println(\"Wrong roll(DAY_OF_WEEK_IN_MONTH) transition: got \"\n-                        + test_roll + \"expected \" + golden_data3);\n-            }\n-        } finally {\n-            Locale.setDefault(savedLocale);\n-            TimeZone.setDefault(savedTimeZone);\n+    \/*\n+     * Test some roll values during transition (DAY_OF_WEEK field). Uses\n+     * the boolean roll method. Roll multiple times and attach the returned\n+     * values to a long string which is then compared to the expected data.\n+     *\/\n+    public void rollDayOfWeekTest() {\n+        StringBuilder actualRollData = new StringBuilder();\n+        GregorianCalendar cal = new GregorianCalendar(2001, OCTOBER, 27);\n+        cal.setFirstDayOfWeek(THURSDAY);\n+        for (int i = 0; i < 7; i++) {\n+            actualRollData.append(cal.get(DAY_OF_MONTH)).append(\"-\");\n+            cal.roll(DAY_OF_WEEK, true);\n+            actualRollData.append(cal.get(DAY_OF_MONTH)).append(\" \");\n@@ -95,0 +102,3 @@\n+        assertEquals(expectedDayOfWeekData, actualRollData.toString(),\n+                \"Wrong roll(DAY_OF_WEEK) transition\");\n+    }\n@@ -96,2 +106,12 @@\n-        if (err) {\n-            throw new RuntimeException(\"Wrong roll() transition\");\n+    \/*\n+     * Test some roll values during transition (DAY_OF_WEEK_IN_MONTH field). Uses\n+     * the boolean roll method. Roll multiple times and attach the returned\n+     * values to a long string which is then compared to the expected data.\n+     *\/\n+    public void rollDayOfWeekInMonthTest() {\n+        StringBuilder actualRollData = new StringBuilder();\n+        GregorianCalendar cal = new GregorianCalendar(2001, OCTOBER, 1);\n+        for (int i = 0; i < 7; i++) {\n+            actualRollData.append(cal.get(DAY_OF_MONTH)).append(\"-\");\n+            cal.roll(DAY_OF_WEEK_IN_MONTH, true);\n+            actualRollData.append(cal.get(DAY_OF_MONTH)).append(\" \");\n@@ -99,0 +119,2 @@\n+        assertEquals(expectedDayOfWeekInMonthData, actualRollData.toString(),\n+                \"Wrong roll(DAY_OF_WEEK_IN_MONTH) transition\");\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4514831.java","additions":79,"deletions":57,"binary":false,"changes":136,"status":"modified"}]}