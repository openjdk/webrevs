{"files":[{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.Robot;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4159883\n+ * @summary Adding\/Removing a menu causes frame to unexpected small size\n+ * @requires (os.family == \"linux\" | os.family == \"windows\")\n+ *\/\n+\n+public class AddRemoveMenuBarTest_5 {\n+\n+    static Frame frame;\n+    static MenuBar menu;\n+    static Button btnAdd, btnRemove;\n+    static Dimension oldSize;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(AddRemoveMenuBarTest_5::initAndShowGui);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                oldSize = frame.getSize();\n+                changeMenubar(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                checkSize();\n+                changeMenubar(false);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            EventQueue.invokeAndWait(AddRemoveMenuBarTest_5::checkSize);\n+        } finally {\n+            EventQueue.invokeAndWait(frame::dispose);\n+        }\n+    }\n+\n+    public static void initAndShowGui() {\n+        frame = new Frame();\n+        frame.setLocationRelativeTo(null);\n+        frame.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowOpened(WindowEvent e) {\n+                System.out.println(\"Frame size:\" + frame.getSize().toString());\n+                System.out.println(\"Button size:\" + btnAdd.getSize().toString());\n+            }\n+        });\n+        frame.add(\"West\", btnAdd = new Button(\"TRY:ADD\"));\n+        frame.add(\"East\", btnRemove = new Button(\"TRY:REMOVE\"));\n+\n+\n+        btnAdd.addActionListener((e) -> changeMenubar(true));\n+        btnRemove.addActionListener((e) -> changeMenubar(false));\n+        frame.setSize(500, 100);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void changeMenubar(boolean enable) {\n+        if (enable) {\n+            menu = new MenuBar();\n+            menu.add(new Menu(\"BAAAAAAAAAAAAAAA\"));\n+            menu.add(new Menu(\"BZZZZZZZZZZZZZZZ\"));\n+            menu.add(new Menu(\"BXXXXXXXXXXXXXXX\"));\n+        } else {\n+            menu = null;\n+        }\n+        frame.setMenuBar(menu);\n+        frame.invalidate();\n+        frame.validate();\n+\n+        System.out.println(\"Frame size:\" + frame.getSize().toString());\n+        System.out.println(\"Button size:\" + btnAdd.getSize().toString());\n+    }\n+\n+    private static void checkSize() {\n+        Dimension newSize = frame.getSize();\n+        if (!oldSize.equals(newSize)) {\n+            throw new RuntimeException(\"Frame size changed: old %s new %s\"\n+                    .formatted(oldSize, newSize));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/AddRemoveMenuBarTest_5.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.event.ActionListener;\n+\n+\/*\n+ * @test\n+ * @bug 1231233\n+ * @summary  Tests whether the resizable property of a Frame is\n+ *           respected after it is set.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrameResizableTest\n+ *\/\n+\n+public class FrameResizableTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            There is a frame with two buttons and a label.  The label\n+            reads 'true' or 'false' to indicate whether the frame can be\n+            resized or not.\n+\n+            When the first button, 'Set Resizable', is\n+            clicked, you should be able to resize the frame.\n+            When the second button, 'UnSet Resizable', is clicked, you should\n+            not be able to resize the frame.\n+\n+            A frame is resized in a way which depends upon the window manager (WM) running.\n+            You may resize the frame by dragging the corner resize handles or the borders,\n+            or you may use the title bar's resize menu items and buttons.\n+\n+            Upon test completion, click Pass or Fail appropriately.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"FrameResizableTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(FrameResizable::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static class FrameResizable extends Frame {\n+        Label label;\n+        Button buttonResizable;\n+        Button buttonNotResizable;\n+\n+        public FrameResizable() {\n+            super(\"FrameResizable\");\n+            setResizable(false);\n+            Panel panel = new Panel();\n+\n+            add(\"North\", panel);\n+            ActionListener actionListener = (e) -> {\n+                if (e.getSource() == buttonResizable) {\n+                    setResizable(true);\n+                } else if (e.getSource() == buttonNotResizable) {\n+                    setResizable(false);\n+                }\n+                label.setText(\"Resizable: \" + isResizable());\n+            };\n+\n+            panel.add(buttonResizable = new Button(\"Set Resizable\"));\n+            panel.add(buttonNotResizable = new Button(\"UnSet Resizable\"));\n+            panel.add(label = new Label(\"Resizable: \" + isResizable()));\n+            buttonResizable.addActionListener(actionListener);\n+            buttonNotResizable.addActionListener(actionListener);\n+\n+            setSize(400, 200);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameResizableTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Window;\n+\n+\/*\n+ * @test\n+ * @bug 6269884 4929291\n+ * @summary Tests that title which contains mix of non-English characters is displayed correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual I18NTitle\n+ *\/\n+\n+public class I18NTitle {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            You will see a frame with some title (S. Chinese, Cyrillic and German).\n+            Please check if non-English characters are visible and compare\n+            the visible title with the same string shown in the label\n+            (it should not look worse than the label).\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"I18NTitle Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(I18NTitle::createAndShowGUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Window createAndShowGUI() {\n+        String s = \"\\u4e2d\\u6587\\u6d4b\\u8bd5 \\u0420\\u0443\\u0441\\u0441\\u043a\\u0438\\u0439 Zur\\u00FCck\";\n+        Frame frame = new Frame(s);\n+        frame.setLayout(new BorderLayout());\n+        Label l = new Label(s);\n+        frame.add(l);\n+        frame.setSize(400, 100);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/I18NTitle.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+\n+\/*\n+ * @test\n+ * @bug 4180577\n+ * @summary offset problems with menus in frames: (2 * 1)  should be (2 * menuBarBorderSize)\n+ * @requires (os.family == \"linux\" | os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuBarOffsetTest\n+*\/\n+\n+public class MenuBarOffsetTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            If a menubar containing a menubar item labeled Test appears.\n+            in a frame, and fits within the frame, press Pass, else press Fail.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"MenuBarOffsetTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(FrameTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static class FrameTest extends Frame {\n+        public FrameTest() {\n+            super(\"MenuBarOffsetTest FrameTest\");\n+            MenuBar m = new MenuBar();\n+            setMenuBar(m);\n+            Menu test = m.add(new Menu(\"Test\"));\n+            test.add(\"1\");\n+            test.add(\"2\");\n+            setSize(100, 100);\n+        }\n+\n+        public void paint(Graphics g) {\n+            setForeground(Color.red);\n+            Insets i = getInsets();\n+            Dimension d = getSize();\n+            System.err.println(getBounds());\n+            System.err.println(\"\" + i);\n+\n+            g.drawRect(i.left, i.top,\n+                    d.width - i.left - i.right - 1,\n+                    d.height - i.top - i.bottom - 1);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/MenuBarOffsetTest.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 1256759\n+ * @summary Checks that Frames with a very small size don't cause Motif\n+ * to generate VendorShells which consume the entire desktop.\n+ *\/\n+\n+public class MinimumSizeTest {\n+\n+    private static final Color BG_COLOR = Color.RED;\n+    private static Frame backgroundFrame;\n+    private static Frame testedFrame;\n+\n+    private static Robot robot;\n+    private static final Point location = new Point(200, 200);\n+    private static final Point[] testPointLocations = {\n+            new Point(100, 200),\n+            new Point(200, 100),\n+            new Point(450, 210),\n+            new Point(210, 350),\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+\n+        try {\n+            EventQueue.invokeAndWait(MinimumSizeTest::initAndShowGui);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            test();\n+            System.out.println(\"Test passed.\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                backgroundFrame.dispose();\n+                testedFrame.dispose();\n+            });\n+        }\n+    }\n+\n+    private static void test() {\n+        for (Point testLocation : testPointLocations) {\n+            Color pixelColor = robot.getPixelColor(testLocation.x, testLocation.y);\n+\n+            if (!pixelColor.equals(BG_COLOR)) {\n+                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+                BufferedImage screenCapture = robot.createScreenCapture(new Rectangle(screenSize));\n+                try {\n+                    ImageIO.write(screenCapture, \"png\", new File(\"failure.png\"));\n+                } catch (IOException ignored) {}\n+                throw new RuntimeException(\"Pixel color does not match expected color %s at %s\"\n+                        .formatted(pixelColor, testLocation));\n+            }\n+        }\n+    }\n+\n+    private static void initAndShowGui() {\n+        backgroundFrame = new Frame(\"MinimumSizeTest background\");\n+        backgroundFrame.setUndecorated(true);\n+        backgroundFrame.setBackground(BG_COLOR);\n+        backgroundFrame.setBounds(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));\n+        backgroundFrame.setVisible(true);\n+\n+        testedFrame = new MinimumSizeTestFrame();\n+        testedFrame.setVisible(true);\n+    }\n+\n+    private static class MinimumSizeTestFrame extends Frame {\n+        public MinimumSizeTestFrame() {\n+            super(\"MinimumSizeTest\");\n+            setVisible(true);\n+            setBackground(Color.BLUE);\n+            setSize(0, 0);\n+            setLocation(location);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Frame\/MinimumSizeTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}