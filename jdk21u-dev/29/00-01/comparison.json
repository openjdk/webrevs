{"files":[{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.driver;\n+\n+import compiler.lib.ir_framework.driver.irmatching.irrule.constraint.Constraint;\n+\n+\/**\n+ * Exception used to signal that a {@link Constraint} should always succeed.\n+ *\/\n+public class SuccessOnlyConstraintException extends RuntimeException {\n+    public SuccessOnlyConstraintException(String message) {\n+        super(\"Unhandled SuccessOnlyConstraintException, should have created a Constraint that always succeeds:\" + System.lineSeparator() + message);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/SuccessOnlyConstraintException.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.driver.irmatching.irrule.constraint;\n+\n+import compiler.lib.ir_framework.driver.irmatching.MatchResult;\n+\n+import java.util.List;\n+\n+\/**\n+ * This class provides a check that always succeeds.\n+ *\n+ * @see Constraint\n+ *\/\n+class SuccessConstraintCheck implements ConstraintCheck {\n+\n+    @Override\n+    public MatchResult check(List<String> matchedNodes) {\n+        return SuccessResult.getInstance();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/SuccessConstraintCheck.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.driver.irmatching.parser;\n+\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.shared.TestFrameworkException;\n+\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * This class stores the key value mapping from the VMInfo.\n+ *\n+ * @see IREncodingParser\n+ *\/\n+public class VMInfo {\n+    \/**\n+     * Stores the key-value mapping.\n+     *\/\n+    private final Map<String, String> keyValueMap;\n+\n+    private static final Pattern CPU_SKYLAKE_PATTERN =\n+            Pattern.compile(\"family 6 model 85 stepping (\\\\d) \");\n+\n+    public VMInfo(Map<String, String> map) {\n+        this.keyValueMap = map;\n+\n+        TestFramework.check(isKey(\"cpuFeatures\"),   \"VMInfo does not contain cpuFeatures\");\n+        TestFramework.check(isKey(\"MaxVectorSize\"), \"VMInfo does not contain MaxVectorSize\");\n+        TestFramework.check(isKey(\"MaxVectorSizeIsDefault\"), \"VMInfo does not contain MaxVectorSizeIsDefault\");\n+        TestFramework.check(isKey(\"LoopMaxUnroll\"), \"VMInfo does not contain LoopMaxUnroll\");\n+        TestFramework.check(isKey(\"UseAVX\"), \"VMInfo does not contain UseAVX\");\n+        TestFramework.check(isKey(\"UseAVXIsDefault\"), \"VMInfo does not contain UseAVXIsDefault\");\n+    }\n+\n+    public String getStringValue(String key) {\n+        TestFramework.check(isKey(key), \"VMInfo does not contain \\\"\" + key + \"\\\"\");\n+        return keyValueMap.get(key);\n+    }\n+\n+    public long getLongValue(String key) {\n+        try {\n+            return Long.parseLong(getStringValue(key));\n+        } catch (NumberFormatException e) {\n+            throw new TestFrameworkException(\"VMInfo value for \\\"\" + key + \"\\\" is not a long, got \\\"\" + getStringValue(key) + \"\\\"\");\n+        }\n+    }\n+\n+    public boolean hasCPUFeature(String feature) {\n+        String features = getStringValue(\"cpuFeatures\") + \",\";\n+        return features.contains(\" \" + feature + \",\");\n+    }\n+\n+    public boolean isCascadeLake() {\n+        Matcher matcher = CPU_SKYLAKE_PATTERN.matcher(getStringValue(\"cpuFeatures\"));\n+        if (!matcher.find()) {\n+            return false; \/\/ skylake pattern not found\n+        }\n+        String stepping = matcher.group(1).trim();\n+        return Long.parseLong(stepping) >= 5; \/\/ this makes it Cascade Lake\n+    }\n+\n+    public boolean isDefaultCascadeLake() {\n+        \/\/ See VM_Version::is_default_intel_cascade_lake\n+        return isCascadeLake() &&\n+               getLongValue(\"MaxVectorSizeIsDefault\") == 1 &&\n+               getLongValue(\"UseAVXIsDefault\") == 1 &&\n+               getLongValue(\"UseAVX\") > 2;\n+    }\n+\n+    \/**\n+     * Some platforms do not behave as expected, and one cannot trust that the vectors\n+     * make use of the full MaxVectorSize. For Cascade Lake, we only use 32 bytes for\n+     * SuperWord by default even though MaxVectorSize is 64. But the VectorAPI still\n+     * uses 64 bytes. Thus MaxVectorSize is not a reliable indicator for the expected\n+     * maximal vector size on that platform.\n+     *\/\n+    public boolean canTrustVectorSize() {\n+        return !isDefaultCascadeLake();\n+    }\n+\n+    public boolean isKey(String key) {\n+        return keyValueMap.containsKey(key);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/VMInfo.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.driver.irmatching.parser;\n+\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.shared.TestFrameworkException;\n+import compiler.lib.ir_framework.test.VMInfoPrinter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Class to parse the VMInfo emitted by the test VM and creating {@link VMInfo} objects for each entry.\n+ *\n+ * @see VMInfo\n+ *\/\n+public class VMInfoParser {\n+\n+    private static final Pattern VM_INFO_PATTERN =\n+            Pattern.compile(\"(?<=\" + VMInfoPrinter.START_VM_INFO + \"\\r?\\n).*\\\\R([\\\\s\\\\S]*)(?=\" + VMInfoPrinter.END_VM_INFO + \")\");\n+\n+    \/**\n+     * Extract VMInfo from the irEncoding.\n+     *\/\n+    public static VMInfo parseVMInfo(String irEncoding) {\n+        Map<String, String> map = new HashMap<>();\n+        String[] lines = getVMInfoLines(irEncoding);\n+        for (String s : lines) {\n+            String line = s.trim();\n+            String[] splitLine = line.split(\":\", 2);\n+            if (splitLine.length != 2) {\n+                throw new TestFrameworkException(\"Invalid VMInfo key:value encoding. Found: \" + splitLine[0]);\n+            }\n+            String key = splitLine[0];\n+            String value = splitLine[1];\n+            map.put(key, value);\n+        }\n+        return new VMInfo(map);\n+    }\n+\n+    \/**\n+     * Extract the VMInfo from the irEncoding string, strip away the header and return the individual key-value lines.\n+     *\/\n+    private static String[] getVMInfoLines(String irEncoding) {\n+        Matcher matcher = VM_INFO_PATTERN.matcher(irEncoding);\n+        TestFramework.check(matcher.find(), \"Did not find VMInfo in:\" + System.lineSeparator() + irEncoding);\n+        String lines = matcher.group(1).trim();\n+        if (lines.isEmpty()) {\n+            \/\/ Nothing to IR match.\n+            return new String[0];\n+        }\n+        return lines.split(\"\\\\R\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/VMInfoParser.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.test;\n+\n+import compiler.lib.ir_framework.shared.TestFrameworkSocket;\n+import jdk.test.whitebox.WhiteBox;\n+\n+\/**\n+ * Prints some test VM info to the socket.\n+ *\/\n+public class VMInfoPrinter {\n+    public static final String START_VM_INFO = \"##### IRMatchingVMInfo - used by TestFramework #####\";\n+    public static final String END_VM_INFO = \"----- END VMInfo -----\";\n+\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    public static void emit() {\n+        StringBuilder vmInfo = new StringBuilder();\n+        vmInfo.append(START_VM_INFO).append(System.lineSeparator());\n+        vmInfo.append(\"<key>:<value>\").append(System.lineSeparator());\n+\n+        \/\/ CPU feature independent info\n+        String cpuFeatures = WHITE_BOX.getCPUFeatures();\n+        vmInfo.append(\"cpuFeatures:\").append(cpuFeatures).append(System.lineSeparator());\n+        long maxVectorSize = WHITE_BOX.getIntxVMFlag(\"MaxVectorSize\");\n+        vmInfo.append(\"MaxVectorSize:\").append(maxVectorSize).append(System.lineSeparator());\n+        boolean maxVectorSizeIsDefault = WHITE_BOX.isDefaultVMFlag(\"MaxVectorSize\");\n+        vmInfo.append(\"MaxVectorSizeIsDefault:\")\n+              .append(maxVectorSizeIsDefault ? 1 : 0)\n+              .append(System.lineSeparator());\n+        long loopMaxUnroll = WHITE_BOX.getIntxVMFlag(\"LoopMaxUnroll\");\n+        vmInfo.append(\"LoopMaxUnroll:\").append(loopMaxUnroll).append(System.lineSeparator());\n+\n+        \/\/ CPU feature dependent info\n+        long useAVX = 0;\n+        boolean useAVXIsDefault = true;\n+        if (cpuFeatures.contains(\" sse, \")) {\n+            useAVX = WHITE_BOX.getIntVMFlag(\"UseAVX\");\n+            useAVXIsDefault = WHITE_BOX.isDefaultVMFlag(\"UseAVX\");\n+        }\n+        vmInfo.append(\"UseAVX:\").append(useAVX).append(System.lineSeparator());\n+        vmInfo.append(\"UseAVXIsDefault:\")\n+              .append(useAVXIsDefault ? 1 : 0)\n+              .append(System.lineSeparator());\n+\n+        vmInfo.append(END_VM_INFO);\n+        TestFrameworkSocket.write(vmInfo.toString(), \"VMInfo\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/VMInfoPrinter.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}