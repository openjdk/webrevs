{"files":[{"patch":"@@ -45,0 +45,1 @@\n+import java.io.InvalidObjectException;\n@@ -1559,27 +1560,13 @@\n-\n-        String csName = (String) s.readObject();\n-        byte[] data = (byte[]) s.readObject();\n-\n-        int cspace = 0;         \/\/ ColorSpace.CS_* constant if known\n-        boolean isKnownPredefinedCS = false;\n-        if (csName != null) {\n-            isKnownPredefinedCS = true;\n-            if (csName.equals(\"CS_sRGB\")) {\n-                cspace = ColorSpace.CS_sRGB;\n-            } else if (csName.equals(\"CS_CIEXYZ\")) {\n-                cspace = ColorSpace.CS_CIEXYZ;\n-            } else if (csName.equals(\"CS_PYCC\")) {\n-                cspace = ColorSpace.CS_PYCC;\n-            } else if (csName.equals(\"CS_GRAY\")) {\n-                cspace = ColorSpace.CS_GRAY;\n-            } else if (csName.equals(\"CS_LINEAR_RGB\")) {\n-                cspace = ColorSpace.CS_LINEAR_RGB;\n-            } else {\n-                isKnownPredefinedCS = false;\n-            }\n-        }\n-\n-        if (isKnownPredefinedCS) {\n-            resolvedDeserializedProfile = getInstance(cspace);\n-        } else {\n-            resolvedDeserializedProfile = getInstance(data);\n+        try {\n+            String csName = (String) s.readObject();\n+            byte[] data = (byte[]) s.readObject();\n+            resolvedDeserializedProfile = switch (csName) {\n+                case \"CS_sRGB\" -> getInstance(ColorSpace.CS_sRGB);\n+                case \"CS_CIEXYZ\" -> getInstance(ColorSpace.CS_CIEXYZ);\n+                case \"CS_PYCC\" -> getInstance(ColorSpace.CS_PYCC);\n+                case \"CS_GRAY\" -> getInstance(ColorSpace.CS_GRAY);\n+                case \"CS_LINEAR_RGB\" -> getInstance(ColorSpace.CS_LINEAR_RGB);\n+                case null, default -> getInstance(data);\n+            };\n+        } catch (ClassCastException | IllegalArgumentException e) {\n+            throw new InvalidObjectException(\"Invalid ICC Profile Data\", e);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":14,"deletions":27,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InvalidObjectException;\n+import java.io.ObjectInputStream;\n+import java.io.OptionalDataException;\n+\n+\/**\n+ * @test\n+ * @bug 8367384\n+ * @summary Verify ICC_Profile serialization per spec, all name\/data cases\n+ *\/\n+public final class SerializationSpecTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Serialization form for ICC_Profile includes version, profile name,\n+        \/\/ and profile data. If the name is invalid or does not match a standard\n+        \/\/ profile, the data is used. An exception is thrown only if both the\n+        \/\/ name and the data are invalid, or if one of them is missing or is of\n+        \/\/ the wrong type.\n+\n+        \/\/ Naming conventions used in test file names:\n+        \/\/ null     : null reference\n+        \/\/ valid    : valid standard profile name or valid profile data (byte[])\n+        \/\/ invalid  : unrecognized name or data with incorrect ICC header\n+        \/\/ wrongType: incorrect type, e.g., int[] instead of String or byte[]\n+\n+        \/\/ No name or data\n+        test(\"empty\", OptionalDataException.class);\n+\n+        \/\/ Cases where only the profile name is present (no profile data)\n+        test(\"null\", OptionalDataException.class);\n+        test(\"valid\", OptionalDataException.class);\n+        test(\"invalid\", OptionalDataException.class);\n+        test(\"wrongType\", InvalidObjectException.class);\n+\n+        \/\/ The test files are named as <name>_<data>.ser\n+        test(\"null_null\", InvalidObjectException.class);\n+        test(\"null_valid\", null); \/\/ valid data is enough if name is null\n+        test(\"null_invalid\", InvalidObjectException.class);\n+        test(\"null_wrongType\", InvalidObjectException.class);\n+\n+        test(\"invalid_null\", InvalidObjectException.class);\n+        test(\"invalid_valid\", null); \/\/ valid data is enough if name is invalid\n+        test(\"invalid_invalid\", InvalidObjectException.class);\n+        test(\"invalid_wrongType\", InvalidObjectException.class);\n+\n+        test(\"wrongType_null\", InvalidObjectException.class);\n+        test(\"wrongType_valid\", InvalidObjectException.class);\n+        test(\"wrongType_invalid\", InvalidObjectException.class);\n+        test(\"wrongType_wrongType\", InvalidObjectException.class);\n+\n+        test(\"valid_null\", null); \/\/ the valid name is enough\n+        test(\"valid_valid\", null); \/\/ the valid name is enough\n+        test(\"valid_invalid\", null); \/\/ the valid name is enough\n+        test(\"valid_wrongType\", InvalidObjectException.class);\n+    }\n+\n+    private static void test(String test, Class<?> expected) {\n+        String fileName = test + \".ser\";\n+        File file = new File(System.getProperty(\"test.src\", \".\"), fileName);\n+        Class<?> actual = null;\n+        try (var fis = new FileInputStream(file);\n+             var ois = new ObjectInputStream(fis))\n+        {\n+            ois.readObject();\n+        } catch (Exception e) {\n+            actual = e.getClass();\n+        }\n+        if (actual != expected) {\n+            System.err.println(\"Test: \" + test);\n+            System.err.println(\"Expected: \" + expected);\n+            System.err.println(\"Actual: \" + actual);\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/SerializationSpecTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/empty.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/invalid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/invalid_invalid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/invalid_null.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/invalid_valid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/invalid_wrongType.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/null.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/null_invalid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/null_null.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/null_valid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/null_wrongType.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/valid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/valid_invalid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/valid_null.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/valid_valid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/valid_wrongType.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/wrongType.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/wrongType_invalid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/wrongType_null.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/wrongType_valid.ser","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/SerializationSpecTest\/wrongType_wrongType.ser","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+\/**\n+ * @test\n+ * @bug 8367384\n+ * @summary Checks ICC_Profile serialization for standard profiles\n+ *\/\n+public final class StandardProfilesRoundTrip {\n+\n+    private static final ICC_Profile[] PROFILES = {\n+            ICC_Profile.getInstance(ColorSpace.CS_sRGB),\n+            ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB),\n+            ICC_Profile.getInstance(ColorSpace.CS_CIEXYZ),\n+            ICC_Profile.getInstance(ColorSpace.CS_PYCC),\n+            ICC_Profile.getInstance(ColorSpace.CS_GRAY)\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Test profiles one by one\n+        for (ICC_Profile profile : PROFILES) {\n+            test(profile);\n+        }\n+        \/\/ Test all profiles at once\n+        test(PROFILES);\n+    }\n+\n+    private static void test(ICC_Profile... profiles) throws Exception {\n+        byte[] data;\n+        try (var bos = new ByteArrayOutputStream();\n+             var oos = new ObjectOutputStream(bos))\n+        {\n+            for (ICC_Profile p : profiles) {\n+                oos.writeObject(p);\n+            }\n+            data = bos.toByteArray();\n+        }\n+        try (var ois = new ObjectInputStream(new ByteArrayInputStream(data))) {\n+            for (ICC_Profile p : profiles) {\n+                if (p != ois.readObject()) {\n+                    throw new RuntimeException(\"Wrong deserialized object\");\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/Serialization\/StandardProfilesRoundTrip.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -166,2 +166,2 @@\n-        System.out.println(\"CASE 15: Testing Deserialization of ICC_Profile ...\");\n-        testDeserialization();\n+        System.out.println(\"CASE 15: Testing loading of ICC_Profile from file ...\");\n+        testLoading();\n@@ -251,3 +251,3 @@\n-    private static void testDeserialization() throws IOException {\n-        \/\/invalidSRGB.icc is serialized on older version of JDK\n-        \/\/Upon deserialization, the invalid profile is expected to throw IAE\n+    private static void testLoading() throws IOException {\n+        \/\/ invalidSRGB.icc is a profile file that was produced by an older JDK\n+        \/\/ When attempting to load it, the current JDK is expected to throw IAE\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/ValidateICCHeaderData\/ValidateICCHeaderData.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}