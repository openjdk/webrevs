{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,20 +24,1 @@\n-\/*\n-  @test\n-  @bug 4199506\n-  @summary  java.awt.print.PageFormat.setpaper(Paper paper)\n-                 assertion test fails by not throwing\n-                 NullPointerException when a null paper instance is\n-                 passed as argument and this is specified in the doc.\n-  @run main NullPaper\n-*\/\n-\n-\n-\/\/*** global search and replace NullPaper with name of the test ***\n-\n-\/**\n- * NullPaper.java\n- *\n- * summary: java.awt.print.PageFormat.setpaper(Paper paper)\n-                 assertion test fails by not throwing\n-                 NullPointerException when a null paper instance is\n-                 passed as argument and this is specified in the doc.\n+import java.awt.print.PageFormat;\n@@ -45,0 +26,6 @@\n+\/*\n+ * @test\n+ * @bug 4199506\n+ * @summary Verify PageFormat.setPaper(null) throws NullPointerException\n+ *          as specified\n+ * @run main NullPaper\n@@ -46,126 +33,13 @@\n-\n-import java.awt.print.*;\n-\n-\/\/ This test is a \"main\" test as applets would need Runtime permission\n-\/\/ \"queuePrintJob\".\n-\n-public class NullPaper {\n-\n-   private static void init()\n-    {\n-    boolean settingNullWorked = false;\n-\n-    try {\n-        \/* Setting the paper to null should throw an exception.\n-         * The bug was the exception was not being thrown.\n-         *\/\n-        new PageFormat().setPaper(null);\n-        settingNullWorked = true;\n-\n-    \/* If the test succeeds we'll end up here, so write\n-     * to standard out.\n-     *\/\n-    } catch (NullPointerException e) {\n-        pass();\n-\n-    \/* The test failed if we end up here because an exception\n-     * other than the one we were expecting was thrown.\n-     *\/\n-    } catch (Exception e) {\n-        fail(\"Instead of the expected NullPointerException, '\" + e + \"' was thrown.\");\n-    }\n-\n-    if (settingNullWorked) {\n-        fail(\"The expected NullPointerException was not thrown\");\n-    }\n-\n-    }\/\/End  init()\n-\n-\n-   \/*****************************************************\n-     Standard Test Machinery Section\n-      DO NOT modify anything in this section -- it's a\n-      standard chunk of code which has all of the\n-      synchronisation necessary for the test harness.\n-      By keeping it the same in all tests, it is easier\n-      to read and understand someone else's test, as\n-      well as insuring that all tests behave correctly\n-      with the test harness.\n-     There is a section following this for test-defined\n-      classes\n-   ******************************************************\/\n-   private static boolean theTestPassed = false;\n-   private static boolean testGeneratedInterrupt = false;\n-   private static String failureMessage = \"\";\n-\n-   private static Thread mainThread = null;\n-\n-   private static int sleepTime = 300000;\n-\n-   public static void main( String args[] ) throws InterruptedException\n-    {\n-      mainThread = Thread.currentThread();\n-      try\n-       {\n-         init();\n-       }\n-      catch( TestPassedException e )\n-       {\n-         \/\/The test passed, so just return from main and harness will\n-         \/\/ interepret this return as a pass\n-         return;\n-       }\n-      \/\/At this point, neither test passed nor test failed has been\n-      \/\/ called -- either would have thrown an exception and ended the\n-      \/\/ test, so we know we have multiple threads.\n-\n-      \/\/Test involves other threads, so sleep and wait for them to\n-      \/\/ called pass() or fail()\n-      try\n-       {\n-         Thread.sleep( sleepTime );\n-         \/\/Timed out, so fail the test\n-         throw new RuntimeException( \"Timed out after \" + sleepTime\/1000 + \" seconds\" );\n-       }\n-      catch (InterruptedException e)\n-       {\n-         if( ! testGeneratedInterrupt ) throw e;\n-\n-         \/\/reset flag in case hit this code more than once for some reason (just safety)\n-         testGeneratedInterrupt = false;\n-         if ( theTestPassed == false )\n-          {\n-            throw new RuntimeException( failureMessage );\n-          }\n-       }\n-\n-    }\/\/main\n-\n-   public static synchronized void setTimeoutTo( int seconds )\n-    {\n-      sleepTime = seconds * 1000;\n-    }\n-\n-   public static synchronized void pass()\n-    {\n-      System.out.println( \"The test passed.\" );\n-      \/\/first check if this is executing in main thread\n-      if ( mainThread == Thread.currentThread() )\n-       {\n-         \/\/Still in the main thread, so set the flag just for kicks,\n-         \/\/ and throw a test passed exception which will be caught\n-         \/\/ and end the test.\n-         theTestPassed = true;\n-         throw new TestPassedException();\n-       }\n-      \/\/pass was called from a different thread, so set the flag and interrupt\n-      \/\/ the main thead.\n-      theTestPassed = true;\n-      testGeneratedInterrupt = true;\n-      mainThread.interrupt();\n-    }\/\/pass()\n-\n-   public static synchronized void fail()\n-    {\n-      \/\/test writer didn't specify why test failed, so give generic\n-      fail( \"it just plain failed! :-)\" );\n+public final class NullPaper {\n+    public static void main(String[] args) {\n+        try {\n+            \/* Setting the paper to null should throw an exception.\n+             * The bug was the exception was not being thrown.\n+             *\/\n+            new PageFormat().setPaper(null);\n+\n+            throw new RuntimeException(\"NullPointerException is expected \"\n+                                       + \"but not thrown\");\n+        } catch (NullPointerException e) {\n+            System.out.println(\"NullPointerException caught - test passes\");\n+        }\n@@ -173,24 +47,1 @@\n-\n-   public static synchronized void fail( String whyFailed )\n-    {\n-      System.out.println( \"The test failed: \" + whyFailed );\n-      \/\/check if this called from main thread\n-      if ( mainThread == Thread.currentThread() )\n-       {\n-         \/\/If main thread, fail now 'cause not sleeping\n-         throw new RuntimeException( whyFailed );\n-       }\n-      theTestPassed = false;\n-      testGeneratedInterrupt = true;\n-      failureMessage = whyFailed;\n-      mainThread.interrupt();\n-    }\/\/fail()\n-\n- }\/\/ class NullPaper\n-\n-\/\/This exception is used to exit from any level of call nesting\n-\/\/ when it's determined that the test has passed, and immediately\n-\/\/ end the test.\n-class TestPassedException extends RuntimeException\n- {\n- }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PageFormat\/NullPaper.java","additions":22,"deletions":171,"binary":false,"changes":193,"status":"modified"}]}