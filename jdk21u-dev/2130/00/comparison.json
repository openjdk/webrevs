{"files":[{"patch":"@@ -104,1 +104,1 @@\n-        return handleFactory.apply(AccessMode.values()[mode], targetHandle);\n+        return handleFactory.apply(AccessMode.valueFromOrdinal(mode), targetHandle);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.vm.annotation.Hidden;\n@@ -111,0 +112,1 @@\n+    @Hidden\n@@ -118,1 +120,1 @@\n-                throw new UnsupportedOperationException();\n+                throw new UnsupportedOperationException(AccessMode.valueFromOrdinal(mode).methodName());\n@@ -135,1 +137,1 @@\n-        AccessMode value = AccessMode.values()[mode];\n+        AccessMode value = AccessMode.valueFromOrdinal(mode);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarForm.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1992,0 +1992,5 @@\n+\n+        private static final @Stable AccessMode[] VALUES = values();\n+        static AccessMode valueFromOrdinal(int mode) {\n+            return VALUES[mode];\n+        }\n@@ -2190,1 +2195,1 @@\n-        MethodType mt = accessModeType(AccessMode.values()[mode]).\n+        MethodType mt = accessModeType(AccessMode.valueFromOrdinal(mode)).\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleGuards.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}