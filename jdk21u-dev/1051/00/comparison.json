{"files":[{"patch":"@@ -272,0 +272,3 @@\n+    \/\/ Restore cpu control state after JNI call\n+    __ restore_cpu_control_state_after_jni(rscratch1, tmp1);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/downcallLinker_aarch64.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4438,0 +4438,17 @@\n+void MacroAssembler::restore_cpu_control_state_after_jni(Register tmp1, Register tmp2) {\n+  if (RestoreMXCSROnJNICalls) {\n+    Label OK;\n+    get_fpcr(tmp1);\n+    mov(tmp2, tmp1);\n+    \/\/ Set FPCR to the state we need. We do want Round to Nearest. We\n+    \/\/ don't want non-IEEE rounding modes or floating-point traps.\n+    bfi(tmp1, zr, 22, 4); \/\/ Clear DN, FZ, and Rmode\n+    bfi(tmp1, zr, 8, 5);  \/\/ Clear exception-control bits (8-12)\n+    bfi(tmp1, zr, 0, 2);  \/\/ Clear AH:FIZ\n+    eor(tmp2, tmp1, tmp2);\n+    cbz(tmp2, OK);        \/\/ Only reset FPCR if it's wrong\n+    set_fpcr(tmp1);\n+    bind(OK);\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1049,2 +1049,2 @@\n-  \/\/ only if +VerifyFPU\n-  void verify_FPU(int stack_depth, const char* s = \"illegal FPU state\");\n+  \/\/ Restore cpu control state after JNI call\n+  void restore_cpu_control_state_after_jni(Register tmp1, Register tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1848,0 +1848,3 @@\n+  \/\/ Verify or restore cpu control state after JNI call\n+  __ restore_cpu_control_state_after_jni(rscratch1, rscratch2);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1369,0 +1369,3 @@\n+  \/\/ Restore cpu control state after JNI call\n+  __ restore_cpu_control_state_after_jni(rscratch1, rscratch2);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}