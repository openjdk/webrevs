{"files":[{"patch":"@@ -0,0 +1,272 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4287882\n+ * @summary Tests internal use Windows properties\n+ * @requires os.family == \"windows\"\n+ * @key headful\n+ * @run main DesktopPropertyTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Font;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableModel;\n+import java.awt.Robot;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.util.Arrays;\n+import java.util.Vector;\n+\n+\/*\n+ * This is a test of new Windows-specific desktop\n+ * properties added in Kestrel.\n+ *\n+ * The new properties are meant for the use of the\n+ * Windows PLAF only and are not public at this time.\n+ *\/\n+public class DesktopPropertyTest {\n+    private static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(DesktopPropertyTest::runTest);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void runTest() {\n+        try {\n+            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+        frame = new DesktopPropertyFrame();\n+        frame.setVisible(true);\n+    }\n+\n+    static class DesktopPropertyFrame extends JFrame {\n+        JTable table;\n+\n+        DesktopPropertyFrame() {\n+            super(\"Toolkit.getDesktopProperty API Test\");\n+            setBackground(Color.white);\n+            add(new JScrollPane(createTable()));\n+            setLocationRelativeTo(null);\n+            setSize(500, 400);\n+        }\n+\n+        public JTable createTable() {\n+            TableModel dataModel = new AbstractTableModel() {\n+                final PropertyVector pv = new PropertyVector();\n+\n+                public int getColumnCount() {\n+                    return 3;\n+                }\n+\n+                public int getRowCount() {\n+                    return pv.size();\n+                }\n+\n+                public String getColumnName(int column) {\n+                    String[] colnames = {\"Property\", \"Type\", \"Value\"};\n+                    return colnames[column];\n+                }\n+\n+                public Object getValueAt(int row, int col) {\n+                    Object[] prow = pv.get(row);\n+                    return prow[col];\n+                }\n+            };\n+\n+            table = new JTable(dataModel);\n+            table.setDefaultRenderer(Object.class, new DesktopPropertyRenderer());\n+            table.addMouseListener(new ClickListener());\n+            return table;\n+        }\n+\n+        class ClickListener extends MouseAdapter {\n+            ClickListener() {\n+            }\n+\n+            public void mouseClicked(MouseEvent e) {\n+                for (int row = 0; row <= table.getModel().getRowCount(); row++) {\n+                    Rectangle r = table.getCellRect(row, 2, false);\n+                    if (r.contains(e.getX(), e.getY())) {\n+                        Object value = table.getModel().getValueAt(row, 2);\n+                        if (value instanceof Runnable) {\n+                            ((Runnable) value).run();\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        class PropertyVector {\n+            private static final int NAME = 0;\n+            private static final int TYPE = 1;\n+            private static final int VALUE = 2;\n+\n+            private final Vector<Object> vector = new Vector<>();\n+\n+            PropertyVector() {\n+                Object[] props = (Object[]) getToolkit()\n+                        .getDesktopProperty(\"win.propNames\");\n+                if (props == null) {\n+                    throw new RuntimeException(\n+                            \"'win.propNames' property not available. \" +\n+                            \"This test is valid only on Windows.\");\n+                }\n+                for (Object prop : props) {\n+                    String propertyName = prop.toString();\n+                    vector.addElement(createEntry(propertyName));\n+                }\n+            }\n+\n+            Object[] createEntry(String name) {\n+                Object[] row = new Object[3];\n+                Object value = getToolkit().getDesktopProperty(name);\n+                row[NAME] = name;\n+                row[TYPE] = value.getClass().getName();\n+                row[VALUE] = value;\n+\n+                System.out.println(Arrays.toString(row));\n+                \/\/ update this vector when property changes\n+                getToolkit().addPropertyChangeListener(name, new DesktopPropertyChangeListener(row));\n+                return row;\n+            }\n+\n+            Object[] get(int row) {\n+                return (Object[]) vector.elementAt(row);\n+            }\n+\n+            int size() {\n+                return vector.size();\n+            }\n+\n+            static class DesktopPropertyChangeListener implements PropertyChangeListener {\n+                Object[] row;\n+\n+                DesktopPropertyChangeListener(Object[] row) {\n+                    this.row = row;\n+                }\n+\n+                public void propertyChange(PropertyChangeEvent evt) {\n+                    this.row[VALUE] = evt.getNewValue();\n+                }\n+            }\n+        }\n+\n+        static class DesktopPropertyRenderer implements TableCellRenderer {\n+            ValueProp vprop = new ValueProp();\n+            FontProp fprop = new FontProp();\n+            ColorProp cprop = new ColorProp();\n+            RunnableProp rprop = new RunnableProp();\n+            RenderingHintsProp rhprop = new RenderingHintsProp();\n+\n+            public Component getTableCellRendererComponent(JTable table, Object value,\n+                                                           boolean isSelected, boolean hasFocus,\n+                                                           int row, int column) {\n+\n+                ValueProp propComponent;\n+                if (value instanceof Boolean\n+                        || value instanceof Integer\n+                        || value instanceof String) {\n+                    propComponent = vprop;\n+                } else if (value instanceof Font) {\n+                    propComponent = fprop;\n+                } else if (value instanceof Color) {\n+                    propComponent = cprop;\n+                } else if (value instanceof Runnable) {\n+                    propComponent = rprop;\n+                } else if (value instanceof RenderingHints) {\n+                    propComponent = rhprop;\n+                } else {\n+                    throw new RuntimeException(\"ASSERT unexpected value %s \/ %s\\n\"\n+                            .formatted(value != null ? value.getClass() : \"\", value));\n+                }\n+\n+                propComponent.setValue(value);\n+\n+                return propComponent;\n+            }\n+        }\n+\n+        static class ValueProp extends JLabel {\n+            public void setValue(Object value) {\n+                setText(value.toString());\n+            }\n+        }\n+\n+        static class FontProp extends ValueProp {\n+            public void setValue(Object value) {\n+                Font font = (Font) value;\n+                String style;\n+                if (font.getStyle() == Font.BOLD) {\n+                    style = \"Bold\";\n+                } else if (font.getStyle() > Font.BOLD) {\n+                    style = \"BoldItalic\";\n+                } else {\n+                    style = \"Plain\";\n+                }\n+                setText(font.getName() + \", \" + style + \", \" + font.getSize());\n+                setFont(font);\n+            }\n+        }\n+\n+        static class ColorProp extends ValueProp {\n+            public void setValue(Object value) {\n+                Color color = (Color) value;\n+                setText(\"%d, %d, %d\"\n+                        .formatted(color.getRed(), color.getGreen(), color.getBlue()));\n+                setBackground(color);\n+                setOpaque(true);\n+            }\n+        }\n+\n+        static class RunnableProp extends ValueProp {}\n+        static class RenderingHintsProp extends ValueProp {}\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Toolkit\/DesktopProperties\/DesktopPropertyTest.java","additions":272,"deletions":0,"binary":false,"changes":272,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5097241\n+ * @summary Tests the problem of time type conversion on XToolkit. The conversion should be unsigned.\n+ * @requires os.family == \"linux\"\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build Util jtreg.SkippedException\n+ * @run main\/othervm -Dsun.awt.disableGtkFileDialogs=true TimeUnsignedConversionTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.KeyEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import jtreg.SkippedException;\n+import test.java.awt.regtesthelpers.Util;\n+\n+public class TimeUnsignedConversionTest  {\n+    static Robot robot;\n+    static Frame frame;\n+    static volatile Button button;\n+    static volatile FileDialog dialog;\n+    static volatile boolean dialogShown = false;\n+\n+    static final CountDownLatch passedLatch = new CountDownLatch(1);\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!Toolkit.getDefaultToolkit().getClass().getName().equals(\"sun.awt.X11.XToolkit\")) {\n+            throw new SkippedException(\"XAWT test only! Skipped.\");\n+        }\n+\n+        try {\n+            EventQueue.invokeAndWait(TimeUnsignedConversionTest::createAndShowGUI);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new Frame(\"TimeUnsignedConversionTest frame\");\n+        button = new Button(\"Show Dialog\");\n+        dialog = new FileDialog(frame, \"TimeUnsignedConversionTest Dialog\", FileDialog.LOAD);\n+\n+        Toolkit.getDefaultToolkit().addAWTEventListener(e -> {\n+            System.out.println(e);\n+            if (dialogShown && ((KeyEvent)e).getKeyCode() == KeyEvent.VK_K) {\n+                passedLatch.countDown();\n+            }\n+        }, KeyEvent.KEY_EVENT_MASK);\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(button);\n+\n+        button.addActionListener(ae -> {\n+            if (ae.getActionCommand().equals(\"Show Dialog\")) {\n+                dialog.setSize(200, 200);\n+                dialog.setLocationRelativeTo(frame);\n+                dialog.setVisible(true);\n+            }\n+        });\n+\n+        frame.setSize(100, 100);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void test() throws Exception {\n+        robot = new Robot();\n+        robot.waitForIdle();\n+\n+        Util.waitTillShown(button);\n+\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_SPACE);\n+        robot.delay(50);\n+        robot.keyRelease(KeyEvent.VK_SPACE);\n+\n+        Util.waitTillShown(dialog);\n+        dialogShown = true;\n+\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_K);\n+        robot.delay(50);\n+        robot.keyRelease(KeyEvent.VK_K);\n+\n+        if (!passedLatch.await(2, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Test failed!\");\n+        }\n+\n+        System.out.println(\"Test passed.\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Toolkit\/TimeUnsignedConversionTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}