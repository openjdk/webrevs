{"files":[{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.Action;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPopupMenu;\n+import javax.swing.MenuElement;\n+import javax.swing.SwingUtilities;\n+import java.awt.event.ActionEvent;\n+import java.beans.PropertyChangeListener;\n+\n+\/*\n+ * @test\n+ * @bug 4236750\n+ * @summary Tests presence of JPopupMenu.insert(Action, int)\n+ * @run main bug4236750\n+ *\/\n+\n+public class bug4236750 {\n+    private static MenuElement[] elements;\n+    private static volatile boolean passed = true;\n+\n+    \/**\n+     * Auxilliary class implementing Action\n+     *\/\n+    static class NullAction implements Action {\n+        public void addPropertyChangeListener(\n+                PropertyChangeListener listener) {\n+        }\n+\n+        public void removePropertyChangeListener(\n+                PropertyChangeListener listener) {\n+        }\n+\n+        public void setEnabled(boolean b) {\n+        }\n+\n+        public boolean isEnabled() {\n+            return true;\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+        }\n+\n+        private String name;\n+\n+        public NullAction(String s) {\n+            name = s;\n+        }\n+\n+        public void putValue(String key, Object value) {\n+            if (key.equals(Action.NAME)) {\n+                name = (String) value;\n+            }\n+        }\n+\n+        public Object getValue(String key) {\n+            if (key.equals(Action.NAME)) {\n+                return name;\n+            }\n+            return null;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            JPopupMenu popup;\n+            popup = new JPopupMenu(\"Test Popup\");\n+            JMenuItem item0 = popup.add(new NullAction(\"0\"));\n+            JMenuItem item2 = popup.add(new NullAction(\"2\"));\n+            popup.insert(new NullAction(\"1\"), 1);\n+            elements = popup.getSubElements();\n+            for (int i = 0; i < 3; i++) {\n+                JMenuItem mi = (JMenuItem) elements[i];\n+                if (!mi.getText().equals(\"\" + i)) {\n+                    passed = false;\n+                }\n+            }\n+        });\n+\n+        if (!passed) {\n+            throw new RuntimeException(\"Failed: wrong order of menuitems\");\n+        }\n+        System.out.println(\"Test Passed!\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4236750.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import java.awt.Robot;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectOutputStream;\n+\n+\n+\/*\n+ * @test\n+ * @bug 4321273\n+ * @summary NotSerializableException during the menu serialization\n+ * @key headful\n+ * @run main bug4321273\n+*\/\n+\n+public class bug4321273 {\n+    public static JFrame frame;\n+    public static JMenu menu;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> {\n+                JMenuBar menuBar = new JMenuBar();\n+                frame = new JFrame();\n+                frame.setJMenuBar(menuBar);\n+                menu = new JMenu(\"Menu\");\n+                menuBar.add(menu);\n+                menu.add(new JMenuItem(\"item 1\"));\n+                menu.add(new JMenuItem(\"item 2\"));\n+                menu.add(new JMenuItem(\"item 3\"));\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                menu.doClick();\n+                try {\n+                    ByteArrayOutputStream byteArrayOutputStream =\n+                            new ByteArrayOutputStream();\n+                    ObjectOutputStream oos =\n+                            new ObjectOutputStream(byteArrayOutputStream);\n+                    oos.writeObject(menu);\n+                } catch (Exception se) {\n+                    throw new RuntimeException(\"NotSerializableException \" +\n+                            \"during the menu serialization\", se);\n+                }\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(100);\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4321273.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Insets;\n+import java.awt.Robot;\n+import java.awt.Window;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.InputEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4711693\n+ * @summary Pop-up doesn't stay up\n+ * @key headful\n+ * @run main bug4711693\n+ *\/\n+\n+public class bug4711693 {\n+    static JFrame fr;\n+    static Robot robot;\n+    static volatile boolean passed = true;\n+    static volatile Dimension scr;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"Test 4711693\");\n+                scr = new Dimension();\n+                fr.setSize(600, 600);\n+                GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+                GraphicsDevice[] gs = ge.getScreenDevices();\n+                GraphicsConfiguration gc = null;\n+\n+                for (int j = 0; j < gs.length; j++) {\n+                    GraphicsDevice gd = gs[j];\n+                    gc = gd.getDefaultConfiguration();\n+                    if (gc.getBounds().contains(100, 100)) break;\n+                }\n+                scr = Toolkit.getDefaultToolkit().getScreenSize();\n+                Insets ins = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+                scr.width -= ins.right;\n+                scr.height -= ins.bottom;\n+                fr.setLocation(scr.width - 400, scr.height - 400);\n+                fr.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                final JPopupMenu popupMenu = new JPopupMenu();\n+                final Component pane = fr.getContentPane();\n+                for (int i = 1; i < 10; i++) {\n+                    final String itemName = \"Item \" + i;\n+                    JMenuItem it = popupMenu.add(new JMenuItem(itemName));\n+                    it.addActionListener(new ActionListener() {\n+                        public void actionPerformed(ActionEvent a) {\n+                            passed = false;\n+                        }\n+                    });\n+                }\n+\n+                pane.addMouseListener(new MouseAdapter() {\n+                    public void mousePressed(MouseEvent e) {\n+                        if ((e.isAltDown() ||\n+                                ((e.getModifiersEx() &\n+                                        InputEvent.BUTTON3_DOWN_MASK) != 0))) {\n+                            Component parent = e.getComponent();\n+                            while (parent != null && !(parent instanceof Window)) {\n+                                parent = parent.getParent();\n+                            }\n+                            popupMenu.show(pane, e.getX(), e.getY());\n+                        }\n+                    }\n+                });\n+            });\n+\n+            robot.mouseMove(scr.width - 55, scr.height - 55);\n+            robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+        if (!passed) {\n+            throw new RuntimeException(\"Test failed. Popup disposed on mouse release.\");\n+        } else {\n+            System.out.println(\"Test Passed!\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4711693.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.plaf.PopupMenuUI;\n+import java.awt.BorderLayout;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+\/*\n+ * @test\n+ * @bug 4962731\n+ * @summary The PopupMenu is not repainted if the LAF is changed.\n+ * @key headful\n+ * @run main bug4962731\n+ *\/\n+\n+public class bug4962731 {\n+\n+    public static volatile boolean passed = false;\n+    public static boolean isLafOk = true;\n+    public static JFrame mainFrame;\n+    public static JButton button;\n+    public static MyPopup popup;\n+    public static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+        } catch (Exception ex) {\n+            System.err.println(\"Can not initialize Motif L&F. Testing skipped.\");\n+            isLafOk = false;\n+        }\n+\n+        try {\n+            UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        } catch (Exception ex) {\n+            System.err.println(\"Can not initialize Metal L&F. Testing skipped.\");\n+            isLafOk = false;\n+        }\n+\n+        if (isLafOk) {\n+            try {\n+                robot = new Robot();\n+                SwingUtilities.invokeAndWait(() -> {\n+                    mainFrame = new JFrame(\"Bug4962731\");\n+                    button = new JButton(\"Popup!\");\n+                    popup = new MyPopup();\n+                    popup.add(\"one\");\n+                    popup.add(\"two\");\n+                    button.setComponentPopupMenu(popup);\n+                    button.addActionListener(new ActionListener() {\n+                        public void actionPerformed(ActionEvent e) {\n+                            popup.show(button, 300, 300);\n+                            popup.engage();\n+                            try {\n+                                Thread.sleep(1000);\n+                            } catch (InterruptedException e1) {\n+                            }\n+                            try {\n+                                UIManager.setLookAndFeel\n+                                        (\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+                            } catch (Exception ex) {\n+                            }\n+                            try {\n+                                Thread.sleep(1000);\n+                            } catch (InterruptedException e1) {\n+                            }\n+                            SwingUtilities.updateComponentTreeUI(mainFrame);\n+                            passed = popup.check();\n+                        }\n+                    });\n+                    mainFrame.setLayout(new BorderLayout());\n+                    mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                    mainFrame.add(button, BorderLayout.CENTER);\n+                    mainFrame.pack();\n+                    mainFrame.setVisible(true);\n+                });\n+\n+                robot.delay(1000);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    button.doClick();\n+                });\n+\n+                if (!passed) {\n+                    throw new RuntimeException(\"The UI of popup was not changed\");\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (mainFrame != null) {\n+                        mainFrame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+        System.out.println(\"test Passed!\");\n+    }\n+\n+    public static class MyPopup extends JPopupMenu {\n+        PopupMenuUI thisUI;\n+\n+        public void engage() {\n+            thisUI = getUI();\n+        }\n+\n+        public boolean check() {\n+            return getUI() != thisUI;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4962731.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JLabel;\n+import javax.swing.JFrame;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import java.awt.BorderLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4966109\n+ * @summary Popup is not populated by mouse actions on lightweight components without mouse\n+ * @key headful\n+ * @run main bug4966109\n+ *\/\n+\n+public class bug4966109 {\n+    public static JFrame mainFrame;\n+    public static JPopupMenu popup;\n+    public static JLabel label1;\n+    public static JLabel label2;\n+    public static Robot robot;\n+    public static volatile Point loc;\n+    public static volatile Boolean passed = true;\n+    public static int popupTrigger;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> {\n+                mainFrame = new JFrame(\"Bug4966109\");\n+                popup = new JPopupMenu();\n+                label1 = new JLabel(\"Label with the listener\");\n+                label2 = new JLabel(\"Label w\/o listener\");\n+                mainFrame.setLayout(new BorderLayout());\n+                mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                mainFrame.add(label1, BorderLayout.NORTH);\n+                mainFrame.add(label2, BorderLayout.SOUTH);\n+                mainFrame.pack();\n+                mainFrame.setVisible(true);\n+                popup.add(\"One\");\n+                popup.add(\"Two\");\n+                popup.add(\"Three\");\n+                label1.setComponentPopupMenu(popup);\n+                label1.addMouseListener(new MouseAdapter() {\n+                });\n+                label2.setComponentPopupMenu(popup);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                loc = label1.getLocationOnScreen();\n+                loc.x = loc.x + (int) (label1.getWidth() \/ 2);\n+                loc.y = loc.y + (int) (label1.getHeight() \/ 2);\n+            });\n+            popupTrigger = MouseEvent.BUTTON2_DOWN_MASK;\n+            robot.mouseMove(loc.x, loc.y);\n+            robot.mousePress(popupTrigger);\n+            robot.mouseRelease(popupTrigger);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (popup.isVisible()) {\n+                    System.out.println(\"ZAV: Good!!! BUTTON2 is the way to go.\");\n+                } else {\n+                    System.out.println(\"ZAV: Bad :( Let's try BUTTON3\");\n+                    popupTrigger = MouseEvent.BUTTON3_DOWN_MASK;\n+                }\n+            });\n+\n+            robot.mousePress(popupTrigger);\n+            robot.mouseRelease(popupTrigger);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (popup.isVisible()) {\n+                    System.out.println(\"ZAV: Good!!! BUTTON3 is working. At last :)\");\n+                    popup.setVisible(false);\n+                } else {\n+                    System.out.println(\"ZAV: Bad :( Very bad. Nothing is working...\");\n+                    passed = false;\n+                }\n+            });\n+            if (!passed) {\n+                throw new RuntimeException(\"No popup trigger mouse events found\");\n+            }\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                loc = label2.getLocationOnScreen();\n+                loc.x = loc.x + (int) (label2.getWidth() \/ 2);\n+                loc.y = loc.y + (int) (label2.getHeight() \/ 2);\n+            });\n+            robot.mouseMove(loc.x, loc.y);\n+            robot.mousePress(popupTrigger);\n+            robot.mouseRelease(popupTrigger);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (!popup.isVisible()) {\n+                    passed = false;\n+                }\n+            });\n+            if (!passed) {\n+                throw new RuntimeException(\"Regression: bug 4966109, popup is not visible\");\n+            }\n+        } finally {\n+            if (mainFrame != null) {\n+                mainFrame.dispose();\n+            }\n+        }\n+        System.out.println(\"test Passed!\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4966109.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.PopupMenuListener;\n+import javax.swing.event.PopupMenuEvent;\n+import java.awt.BorderLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 5091257\n+ * @summary Application key does not display a pop-up menu in users view.\n+ * @key headful\n+ * @run main bug5091257\n+ *\/\n+\n+public class bug5091257 {\n+    public static volatile boolean passed = false;\n+    public static volatile boolean isKeyOk = false;\n+    public static JFrame mainFrame;\n+    public static JButton button;\n+    public static Robot robot;\n+    public static JPopupMenu popup;\n+    public static volatile Point loc;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(50);\n+            SwingUtilities.invokeAndWait(() -> {\n+                button = new JButton(\"Popup button\");\n+                button.addKeyListener(new KeyListener() {\n+                    public void keyTyped(KeyEvent e) {\n+                        if (e.getKeyCode() == KeyEvent.VK_CONTEXT_MENU) {\n+                            isKeyOk = true;\n+                        }\n+                    }\n+\n+                    public void keyPressed(KeyEvent e) {\n+                        if (e.getKeyCode() == KeyEvent.VK_CONTEXT_MENU) {\n+                            isKeyOk = true;\n+                        }\n+                    }\n+\n+                    public void keyReleased(KeyEvent e) {\n+                        if (e.getKeyCode() == KeyEvent.VK_CONTEXT_MENU) {\n+                            isKeyOk = true;\n+                        }\n+                    }\n+                });\n+                mainFrame = new JFrame(\"Bug5091257\");\n+                mainFrame.setLayout(new BorderLayout());\n+                mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                mainFrame.add(button, BorderLayout.CENTER);\n+                mainFrame.pack();\n+                mainFrame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                loc = button.getLocationOnScreen();\n+                loc.x = loc.x + (int) (button.getWidth() \/ 2);\n+                loc.y = loc.y + (int) (button.getHeight() \/ 2);\n+            });\n+            robot.mouseMove(loc.x, loc.y);\n+            robot.mousePress(MouseEvent.BUTTON3_DOWN_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON3_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            try {\n+                robot.keyPress(KeyEvent.VK_CONTEXT_MENU);\n+                robot.keyRelease(KeyEvent.VK_CONTEXT_MENU);\n+            } catch (IllegalArgumentException ex) {\n+                isKeyOk = false;\n+            }\n+\n+            if (!isKeyOk) {\n+                System.out.println(\"KeyEvent can't create or deliver \" +\n+                        \"VK_CONTEXT_MENU event to component. Testing skipped.\");\n+                passed = true;\n+            } else {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    popup = new JPopupMenu();\n+                    popup.add(\"Item to make popup not empty\");\n+                    popup.addPopupMenuListener(new PopupMenuListener() {\n+                        public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n+                            System.out.println(\"Popup menu became visible \" +\n+                                    \"on context menu key press. Test passed.\");\n+                            passed = true;\n+                        }\n+\n+                        public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n+                        }\n+\n+                        public void popupMenuCanceled(PopupMenuEvent e) {\n+                        }\n+                    });\n+                    button.setComponentPopupMenu(popup);\n+                });\n+                robot.keyPress(KeyEvent.VK_CONTEXT_MENU);\n+                robot.keyRelease(KeyEvent.VK_CONTEXT_MENU);\n+\n+                robot.waitForIdle();\n+                robot.delay(100);\n+\n+                if (!passed) {\n+                    throw new RuntimeException(\"Popup did not open on \" +\n+                            \"VK_CONTEXT_MENU press. Test failed.\");\n+                }\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (mainFrame != null) {\n+                    mainFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug5091257.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"}]}