{"files":[{"patch":"@@ -49,1 +49,1 @@\n-        assert !Modifier.isNative(method.getModifiers());\n+        assert !MethodHandleAccessorFactory.isSignaturePolymorphicMethod(method);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.lang.invoke.VarHandle;\n@@ -172,1 +173,1 @@\n-        var mtype = methodType(method.getReturnType(), method.getParameterTypes());\n+        var mtype = methodType(method.getReturnType(), reflectionFactory.getExecutableSharedParameterTypes(method));\n@@ -194,1 +195,1 @@\n-        MethodType mtype = methodType(method.getReturnType(), method.getParameterTypes())\n+        MethodType mtype = methodType(method.getReturnType(), reflectionFactory.getExecutableSharedParameterTypes(method))\n@@ -306,0 +307,12 @@\n+     *\n+     * Native accessor, i.e. VM reflection implementation, is used if one of\n+     * the following conditions is met:\n+     * 1. during VM early startup before method handle support is fully initialized\n+     * 2. -Djdk.reflect.useNativeAccessorOnly=true is set\n+     * 3. a signature polymorphic method\n+     * 4. the member takes a variable number of arguments and the last parameter\n+     *    is not an array (see details below)\n+     * 5. the member's method type has an arity >= 255\n+     *\n+     * Conditions 3-5 are due to the restrictions of method handles.\n+     * Otherwise, direct invocation of method handles is used.\n@@ -311,1 +324,1 @@\n-        if (Modifier.isNative(member.getModifiers()))\n+        if (ReflectionFactory.useNativeAccessorOnly())  \/\/ for testing only\n@@ -314,1 +327,4 @@\n-        if (ReflectionFactory.useNativeAccessorOnly())  \/\/ for testing only\n+        \/\/ java.lang.invoke cannot find the underlying native stubs of signature\n+        \/\/ polymorphic methods that core reflection must invoke.\n+        \/\/ Fall back to use the native implementation instead.\n+        if (member instanceof Method method && isSignaturePolymorphicMethod(method))\n@@ -317,7 +333,5 @@\n-        \/\/ MethodHandle::withVarargs on a member with varargs modifier bit set\n-        \/\/ verifies that the last parameter of the member must be an array type.\n-        \/\/ The JVMS does not require the last parameter descriptor of the method descriptor\n-        \/\/ is an array type if the ACC_VARARGS flag is set in the access_flags item.\n-        \/\/ Hence the reflection implementation does not check the last parameter type\n-        \/\/ if ACC_VARARGS flag is set.  Workaround this by invoking through\n-        \/\/ the native accessor.\n+        \/\/ For members with ACC_VARARGS bit set, MethodHandles produced by lookup\n+        \/\/ always have variable arity set and hence the last parameter of the member\n+        \/\/ must be an array type.  Such restriction does not exist in core reflection\n+        \/\/ and the JVM, which always use fixed-arity invocations.  Fall back to use\n+        \/\/ the native implementation instead.\n@@ -326,1 +340,1 @@\n-                (paramCount == 0 || !(member.getParameterTypes()[paramCount-1].isArray()))) {\n+                (paramCount == 0 || !(reflectionFactory.getExecutableSharedParameterTypes(member)[paramCount-1].isArray()))) {\n@@ -329,0 +343,1 @@\n+\n@@ -348,1 +363,1 @@\n-        Class<?>[] ptypes = member.getParameterTypes();\n+        Class<?>[] ptypes = reflectionFactory.getExecutableSharedParameterTypes(member);\n@@ -358,0 +373,25 @@\n+    \/**\n+     * Signature-polymorphic methods.  Lookup has special rules for these methods,\n+     * but core reflection must observe them as they are declared, and reflective\n+     * invocation must invoke the native method stubs that throw UOE.\n+     *\n+     * @param method the method to check\n+     * @return {@code true} if this method is signature polymorphic\n+     * @jls 15.12.3 Compile-Time Step 3: Is the Chosen Method Appropriate?\n+     * @jvms 2.9.3 Signature Polymorphic Methods\n+     *\/\n+    public static boolean isSignaturePolymorphicMethod(Method method) {\n+        \/\/ ACC_NATIVE and ACC_VARARGS\n+        if (!method.isVarArgs() || !Modifier.isNative(method.getModifiers())) {\n+            return false;\n+        }\n+        \/\/ Declared in MethodHandle or VarHandle\n+        var declaringClass = method.getDeclaringClass();\n+        if (declaringClass != MethodHandle.class && declaringClass != VarHandle.class) {\n+            return false;\n+        }\n+        \/\/ Single parameter of declared type Object[]\n+        Class<?>[] parameters = reflectionFactory.getExecutableSharedParameterTypes(method);\n+        return parameters.length == 1 && parameters[0] == Object[].class;\n+    }\n+\n@@ -366,0 +406,1 @@\n+    private static final ReflectionFactory reflectionFactory = ReflectionFactory.getReflectionFactory();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodHandleAccessorFactory.java","additions":55,"deletions":14,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.reflect;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.lang.reflect.Method;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Benchmark for regression in native method invocation.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+public class NativeMethodInvoke {\n+\n+    private Method objectHashCode;\n+    private Method threadCurrentThread;\n+\n+    private Object[] objects;\n+\n+    @Setup\n+    public void setup() throws ReflectiveOperationException {\n+        objects = new Object[]{\n+                1, 5L,\n+                5.6d, 23.11f,\n+                Boolean.TRUE, 'd'\n+        };\n+\n+        objectHashCode = Object.class.getDeclaredMethod(\"hashCode\");\n+        threadCurrentThread = Thread.class.getDeclaredMethod(\"currentThread\");\n+    }\n+\n+    @Benchmark\n+    public void objectHashCode(Blackhole bh) throws ReflectiveOperationException {\n+        for (var obj : objects) {\n+            bh.consume(objectHashCode.invoke(obj));\n+        }\n+    }\n+\n+    @Benchmark\n+    public Object threadCurrentThread() throws ReflectiveOperationException {\n+        return threadCurrentThread.invoke(null);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/NativeMethodInvoke.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}