{"files":[{"patch":"@@ -31,14 +31,0 @@\n-JVMFlag::Error ParallelGCThreadsConstraintFuncParallel(uint value, bool verbose) {\n-  \/\/ Parallel GC passes ParallelGCThreads when creating GrowableArray as 'int' type parameter.\n-  \/\/ So can't exceed with \"max_jint\"\n-\n-  if (UseParallelGC && (value > (uint)max_jint)) {\n-    JVMFlag::printError(verbose,\n-                        \"ParallelGCThreads (\" UINT32_FORMAT \") must be \"\n-                        \"less than or equal to \" UINT32_FORMAT \" for Parallel GC\\n\",\n-                        value, max_jint);\n-    return JVMFlag::VIOLATES_CONSTRAINT;\n-  }\n-  return JVMFlag::SUCCESS;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/jvmFlagConstraintsParallel.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-  f(uint, ParallelGCThreadsConstraintFuncParallel)          \\\n","filename":"src\/hotspot\/share\/gc\/parallel\/jvmFlagConstraintsParallel.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -134,0 +134,2 @@\n+  \/* notice: the max range value here is INT_MAX not UINT_MAX  *\/           \\\n+  \/* to protect from overflows                                 *\/           \\\n@@ -136,1 +138,1 @@\n-          constraint(ParallelGCThreadsConstraintFunc,AfterErgo)             \\\n+          range(0, INT_MAX)                                                 \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,14 +56,0 @@\n-\/\/ As ParallelGCThreads differs among GC modes, we need constraint function.\n-JVMFlag::Error ParallelGCThreadsConstraintFunc(uint value, bool verbose) {\n-  JVMFlag::Error status = JVMFlag::SUCCESS;\n-\n-#if INCLUDE_PARALLELGC\n-  status = ParallelGCThreadsConstraintFuncParallel(value, verbose);\n-  if (status != JVMFlag::SUCCESS) {\n-    return status;\n-  }\n-#endif\n-\n-  return status;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n- f(uint,   ParallelGCThreadsConstraintFunc)                    \\\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -114,2 +114,2 @@\n-    \/\/ 4294967295 == (unsigned int) -1\n-    \/\/ So setting ParallelGCThreads=4294967295 should give back 4294967295\n+    \/\/ Test the max value for ParallelGCThreads\n+    \/\/ So setting ParallelGCThreads=2147483647 should give back 2147483647\n@@ -118,1 +118,1 @@\n-        \"-XX:ParallelGCThreads=4294967295\",\n+        \"-XX:ParallelGCThreads=2147483647\",\n@@ -121,1 +121,1 @@\n-    Asserts.assertEQ(count, 4294967295L, \"Specifying ParallelGCThreads=4294967295 does not set the thread count properly!\");\n+    Asserts.assertEQ(count, 2147483647L, \"Specifying ParallelGCThreads=2147483647 does not set the thread count properly!\");\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelGCThreads.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}