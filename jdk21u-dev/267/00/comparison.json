{"files":[{"patch":"@@ -202,1 +202,1 @@\n-  } else {\n+  } else if (is_local_handle(thread, handle) || is_frame_handle(thread, handle)) {\n@@ -204,5 +204,1 @@\n-    if (is_local_handle(thread, handle) || is_frame_handle(thread, handle)) {\n-      result = JNILocalRefType;\n-    } else {\n-      ShouldNotReachHere();\n-    }\n+    result = JNILocalRefType;\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-                            init();\n-                            return true;\n@@ -51,0 +49,5 @@\n+                        if (!init()) {\n+                            \/\/ library failed to initialize. Do not silently mark as unsupported\n+                            throw new ExceptionInInitializerError(\"Fallback library failed to initialize\");\n+                        }\n+                        return true;\n@@ -198,1 +201,1 @@\n-    private static native void init();\n+    private static native boolean init();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/LibFallback.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,1 +43,6 @@\n-JNIEXPORT void JNICALL\n+#define CHECK_NULL(expr) \\\n+  if (expr == NULL) { \\\n+    return JNI_FALSE; \\\n+  }\n+\n+JNIEXPORT jboolean JNICALL\n@@ -45,2 +50,11 @@\n-  (*env)->GetJavaVM(env, &VM);\n-  LibFallback_class = (*env)->FindClass(env, \"jdk\/internal\/foreign\/abi\/fallback\/LibFallback\");\n+  jint result = (*env)->GetJavaVM(env, &VM);\n+  if (result != 0) {\n+    return JNI_FALSE;\n+  }\n+\n+  jclass LibFallback_class_local = (*env)->FindClass(env, \"jdk\/internal\/foreign\/abi\/fallback\/LibFallback\");\n+  CHECK_NULL(LibFallback_class_local)\n+\n+  LibFallback_class = (*env)->NewGlobalRef(env, LibFallback_class_local);\n+  CHECK_NULL(LibFallback_class)\n+\n@@ -49,0 +63,3 @@\n+  CHECK_NULL(LibFallback_doUpcall_ID)\n+\n+  return JNI_TRUE;\n","filename":"src\/java.base\/share\/native\/libfallbackLinker\/fallbackLinker.c","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run testng\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n+ * @run testng\/othervm -Xcheck:jni -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n","filename":"test\/jdk\/java\/foreign\/TestDowncallScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run testng\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n+ * @run testng\/othervm -Xcheck:jni -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n","filename":"test\/jdk\/java\/foreign\/TestDowncallStack.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run testng\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n+ * @run testng\/othervm -Xcheck:jni -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n","filename":"test\/jdk\/java\/foreign\/TestUpcallScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run testng\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n+ * @run testng\/othervm -Xcheck:jni -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStack.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}