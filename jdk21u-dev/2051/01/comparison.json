{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1867,16 +1867,1 @@\n-                long reader = readerThread;\n-                long writer = writerThread;\n-                if (reader != 0 || writer != 0) {\n-                    if (NativeThread.isVirtualThread(reader)\n-                            || NativeThread.isVirtualThread(writer)) {\n-                        Poller.stopPoll(fdVal);\n-                    }\n-                    if (NativeThread.isNativeThread(reader)\n-                            || NativeThread.isNativeThread(writer)) {\n-                        nd.preClose(fd);\n-                        if (NativeThread.isNativeThread(reader))\n-                            NativeThread.signal(reader);\n-                        if (NativeThread.isNativeThread(writer))\n-                            NativeThread.signal(writer);\n-                    }\n-                }\n+                nd.preClose(fd, readerThread, writerThread);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import jdk.internal.access.JavaIOFileDescriptorAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -37,0 +39,1 @@\n+    private static final JavaIOFileDescriptorAccess JIOFDA = SharedSecrets.getJavaIOFileDescriptorAccess();\n@@ -72,5 +75,22 @@\n-    \/\/ Prepare the given fd for closing by duping it to a known internal fd\n-    \/\/ that's already closed.  This is necessary on some operating systems\n-    \/\/ (Solaris and Linux) to prevent fd recycling.\n-    \/\/\n-    void preClose(FileDescriptor fd) throws IOException {\n+    \/**\n+     * Prepare the given file descriptor for closing. If a virtual thread is blocked\n+     * on the file descriptor then it is unparked so that it stops polling. On Unix systems,\n+     * if a platform thread is blocked on the file descriptor then the file descriptor is\n+     * dup'ed to a special fd and the thread signalled so that the syscall fails with EINTR.\n+     *\/\n+    final void preClose(FileDescriptor fd, long reader, long writer) throws IOException {\n+        if (NativeThread.isVirtualThread(reader) || NativeThread.isVirtualThread(writer)) {\n+            int fdVal = JIOFDA.get(fd);\n+            Poller.stopPoll(fdVal);\n+        }\n+        if (NativeThread.isNativeThread(reader) || NativeThread.isNativeThread(writer)) {\n+            implPreClose(fd, reader, writer);\n+        }\n+    }\n+\n+    \/**\n+     * This method does nothing by default. On Unix systems the file descriptor is dup'ed\n+     * to a special fd and native threads signalled.\n+     *\/\n+\n+    void implPreClose(FileDescriptor fd, long reader, long writer) throws IOException {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NativeDispatcher.java","additions":26,"deletions":6,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -903,14 +903,1 @@\n-                long reader = readerThread;\n-                long writer = writerThread;\n-                if (NativeThread.isVirtualThread(reader)\n-                        || NativeThread.isVirtualThread(writer)) {\n-                    Poller.stopPoll(fdVal(fd));\n-                }\n-                if (NativeThread.isNativeThread(reader)\n-                        || NativeThread.isNativeThread(writer)) {\n-                    nd.preClose(fd);\n-                    if (NativeThread.isNativeThread(reader))\n-                        NativeThread.signal(reader);\n-                    if (NativeThread.isNativeThread(writer))\n-                        NativeThread.signal(writer);\n-                }\n+                nd.preClose(fd, readerThread, writerThread);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -607,9 +607,1 @@\n-                long th = thread;\n-                if (th != 0) {\n-                    if (NativeThread.isVirtualThread(th)) {\n-                        Poller.stopPoll(fdVal);\n-                    } else {\n-                        nd.preClose(fd);\n-                        NativeThread.signal(th);\n-                    }\n-                }\n+                nd.preClose(fd, thread, 0);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1053,14 +1053,2 @@\n-                long reader = readerThread;\n-                long writer = writerThread;\n-                if (NativeThread.isVirtualThread(reader)\n-                        || NativeThread.isVirtualThread(writer)) {\n-                    Poller.stopPoll(fdVal);\n-                }\n-                if (NativeThread.isNativeThread(reader)\n-                        || NativeThread.isNativeThread(writer)) {\n-                    nd.preClose(fd);\n-                    if (NativeThread.isNativeThread(reader))\n-                        NativeThread.signal(reader);\n-                    if (NativeThread.isNativeThread(writer))\n-                        NativeThread.signal(writer);\n-                }\n+                \/\/ prepare file descriptor for closing\n+                nd.preClose(fd, readerThread, writerThread);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+    @Override\n@@ -46,0 +47,1 @@\n+    @Override\n@@ -50,0 +52,1 @@\n+    @Override\n@@ -54,0 +57,1 @@\n+    @Override\n@@ -58,8 +62,1 @@\n-    void close(FileDescriptor fd) throws IOException {\n-        close0(fd);\n-    }\n-\n-    void preClose(FileDescriptor fd) throws IOException {\n-        preClose0(fd);\n-    }\n-\n+    @Override\n@@ -70,1 +67,1 @@\n-    static native int read0(FileDescriptor fd, long address, int len)\n+    private static native int read0(FileDescriptor fd, long address, int len)\n@@ -73,1 +70,1 @@\n-    static native long readv0(FileDescriptor fd, long address, int len)\n+    private static native long readv0(FileDescriptor fd, long address, int len)\n@@ -76,1 +73,1 @@\n-    static native int write0(FileDescriptor fd, long address, int len)\n+    private static native int write0(FileDescriptor fd, long address, int len)\n@@ -79,1 +76,1 @@\n-    static native long writev0(FileDescriptor fd, long address, int len)\n+    private static native long writev0(FileDescriptor fd, long address, int len)\n@@ -82,1 +79,1 @@\n-    static native void dup0(FileDescriptor fd1, FileDescriptor fd2)\n+    private static native void dup0(FileDescriptor fd1, FileDescriptor fd2)\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/DatagramDispatcher.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-    private static final NativeDispatcher nd = new FileDispatcherImpl();\n+    private static final NativeDispatcher nd = new SocketDispatcher();\n@@ -155,9 +155,1 @@\n-                long th = thread;\n-                if (th != 0) {\n-                    if (NativeThread.isVirtualThread(th)) {\n-                        Poller.stopPoll(fdVal);\n-                    } else {\n-                        nd.preClose(fd);\n-                        NativeThread.signal(th);\n-                    }\n-                }\n+                nd.preClose(fd, thread, 0);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SinkChannelImpl.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+    @Override\n@@ -57,0 +58,1 @@\n+    @Override\n@@ -61,0 +63,1 @@\n+    @Override\n@@ -65,0 +68,1 @@\n+    @Override\n@@ -69,8 +73,0 @@\n-    void close(FileDescriptor fd) throws IOException {\n-        close0(fd);\n-    }\n-\n-    void preClose(FileDescriptor fd) throws IOException {\n-        preClose0(fd);\n-    }\n-\n@@ -85,1 +81,1 @@\n-    static native int write0(FileDescriptor fd, long address, int len)\n+    private static native int write0(FileDescriptor fd, long address, int len)\n@@ -88,1 +84,1 @@\n-    static native long writev0(FileDescriptor fd, long address, int len)\n+    private static native long writev0(FileDescriptor fd, long address, int len)\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SocketDispatcher.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-    private static final NativeDispatcher nd = new FileDispatcherImpl();\n+    private static final NativeDispatcher nd = new SocketDispatcher();\n@@ -155,9 +155,1 @@\n-                long th = thread;\n-                if (th != 0) {\n-                    if (NativeThread.isVirtualThread(th)) {\n-                        Poller.stopPoll(fdVal);\n-                    } else {\n-                        nd.preClose(fd);\n-                        NativeThread.signal(th);\n-                    }\n-                }\n+                nd.preClose(fd, thread, 0);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SourceChannelImpl.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+    @Override\n@@ -37,1 +38,2 @@\n-    void preClose(FileDescriptor fd) throws IOException {\n+    @Override\n+    void implPreClose(FileDescriptor fd, long reader, long writer) throws IOException {\n@@ -39,0 +41,4 @@\n+        if (NativeThread.isNativeThread(reader))\n+            NativeThread.signal(reader);\n+        if (NativeThread.isNativeThread(writer))\n+            NativeThread.signal(writer);\n@@ -41,1 +47,1 @@\n-    static native void close0(FileDescriptor fd) throws IOException;\n+    private static native void close0(FileDescriptor fd) throws IOException;\n@@ -43,1 +49,1 @@\n-    static native void preClose0(FileDescriptor fd) throws IOException;\n+    private static native void preClose0(FileDescriptor fd) throws IOException;\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixDispatcher.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+    @Override\n@@ -43,0 +44,1 @@\n+    @Override\n@@ -47,0 +49,1 @@\n+    @Override\n@@ -51,0 +54,1 @@\n+    @Override\n@@ -55,0 +59,1 @@\n+    @Override\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/DatagramDispatcher.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+    @Override\n@@ -49,0 +50,1 @@\n+    @Override\n@@ -53,0 +55,1 @@\n+    @Override\n@@ -57,0 +60,1 @@\n+    @Override\n@@ -61,4 +65,1 @@\n-    void preClose(FileDescriptor fd) throws IOException {\n-        throw new UnsupportedOperationException();\n-    }\n-\n+    @Override\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/SocketDispatcher.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}