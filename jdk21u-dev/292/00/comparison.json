{"files":[{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4859570\n+ * @summary SwingUtilities.sharedOwnerFrame is never disposed\n+ * @key headful\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.Window;\n+import javax.swing.JDialog;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4859570 {\n+    static Window owner;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            JDialog dialog = new JDialog();\n+            dialog.setTitle(\"bug4859570\");\n+            dialog.setBounds(100, 100, 100, 100);\n+            dialog.setVisible(true);\n+\n+            owner = dialog.getOwner();\n+            dialog.dispose();\n+        });\n+\n+        Robot r = new Robot();\n+        r.waitForIdle();\n+        r.delay(1000);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (owner.isDisplayable()) {\n+                throw new RuntimeException(\"The shared owner frame should be disposed.\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JDialog\/bug4859570.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4936652\n+ * @key headful\n+ * @summary JDialog.setVisible, JDialog.dispose works incorrectly\n+ *\/\n+\n+import javax.swing.JDialog;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4936652 {\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            for (int i = 0 ; i < 100; i++) {\n+                System.out.println(\"i: \" + i);\n+                JDialog o = new JDialog();\n+                o.setTitle(\"bug4936652\");\n+                o.setVisible(true);\n+                o.setVisible(false);\n+                o.dispose();\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JDialog\/bug4936652.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4768127\n+ * @summary ToolTipManager not removed from components\n+ * @key headful\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseMotionListener;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.ToolTipManager;\n+\n+public class bug4768127 {\n+    static JFrame fr;\n+    static volatile Point p;\n+    static volatile JLabel[] label = new JLabel[2];\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"bug4768127\");\n+\n+                JDesktopPane jdp = new JDesktopPane();\n+                JInternalFrame jif1 = new JInternalFrame(\"jif 1\");\n+                JInternalFrame jif2 = new JInternalFrame(\"jif 2\");\n+                label[0] = new JLabel(\"Label 1\");\n+                label[1] = new JLabel(\"Label 2\");\n+\n+                label[0].setToolTipText(\"tooltip 1\");\n+                jif1.getContentPane().add(label[0]);\n+                jif1.setBounds(0, 0, 130, 160);\n+                jif1.setVisible(true);\n+                jdp.add(jif1);\n+\n+                label[1].setToolTipText(\"tooltip 2\");\n+                jif2.getContentPane().add(label[1]);\n+                jif2.setBounds(210, 0, 130, 220);\n+                jif2.setVisible(true);\n+                jdp.add(jif2);\n+\n+                fr.getContentPane().add(jdp);\n+                fr.setLocationRelativeTo(null);\n+\n+                fr.setSize(400, 300);\n+                fr.setVisible(true);\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(10);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            clickLabel(0, robot);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            clickLabel(1, robot);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            clickLabel(0, robot);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            clickLabel(1, robot);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            MouseMotionListener[] mml = label[0].getMouseMotionListeners();\n+            if (mml.length > 0 && mml[0] instanceof ToolTipManager) {\n+                throw new RuntimeException(\"Extra MouseMotionListeners were added to the label \\\"Label 1\\\" by ToolTipManager\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static void clickLabel(int i, Robot robot) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            p = label[i].getLocationOnScreen();\n+        });\n+        final Rectangle rect = label[i].getBounds();\n+        robot.mouseMove(p.x + rect.width \/ 2, p.y + rect.height \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        \/\/Generate mouseMotionEvent\n+        robot.mouseMove(p.x + rect.width \/ 2 + 3, p.y + rect.height \/ 2 + 3);\n+        robot.mouseMove(p.x + rect.width \/ 2, p.y + rect.height \/ 2);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JLabel\/bug4768127.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4371134\n+ * @key headful\n+ * @summary displays an animating fps (frames per second)\n+ *  counter.  When the window is dragged from monitor to monitor,\n+ *  the speed of the animation should not change too greatly.\n+ * @library \/open\/test\/jdk\/java\/awt\/regtesthelpers\n+ * @run main\/manual MultimonVImage\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JViewport;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class MultimonVImage {\n+    private static final String instructionsText =\n+            \"This test should be run on any Windows platform that\\n\" +\n+            \"supports multiple monitors.\\n\" +\n+            \"You will see an animating fps (frames per second) counter at\\n\" +\n+            \"the bottom of the window.  Drag the window into the other monitor\\n\" +\n+            \"and that counter should not change drastically.  If the counter\\n\" +\n+            \"is much lower on one monitor than the other (barring situations\\n\" +\n+            \"described below) then the back buffer may not be accelerated\\n\" +\n+            \"on the second monitor and the test fails.\\n\" +\n+            \"Situations in which performance will differ even though there\\n\" +\n+            \"is acceleration on both monitors include:\\n\" +\n+            \"  - different bit depths on each monitor.  The higher the bits\\n\" +\n+            \"    per pixel, the more data to push and the lower the fps number.\\n\" +\n+            \"    Set the bit depths to be the same on both monitors to work\\n\" +\n+            \"    around this issue.\\n\" +\n+            \"  - the amount of acceleration available on each video card differs,\\n\" +\n+            \"    so if your system uses different video cards then you should\\n\" +\n+            \"    expect some difference between the cards.  To work around this\\n\" +\n+            \"    issue, try to use the same or similar video cards for each monitor.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"MultimonVImage Instructions\")\n+                .instructions(instructionsText)\n+                .testTimeOut(5)\n+                .rows(25)\n+                .columns(50)\n+                .build();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            AnimatingFrame af = new AnimatingFrame();\n+            af.test();\n+            af.run();\n+\n+            PassFailJFrame.addTestWindow(af);\n+            PassFailJFrame.positionTestWindow(af,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n+class FrameCounter {\n+\n+    String fpsString = \"Calculating...\";\n+    long startTime, endTime;\n+    int numFrames;\n+\n+    public FrameCounter() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    public String addFrame() {\n+        ++numFrames;\n+        return calculateFPS();\n+    }\n+\n+    String calculateFPS() {\n+        endTime = System.currentTimeMillis();\n+        double seconds = ((double) endTime - (double) startTime) \/ 1000;\n+        if (seconds > 1) {\n+            int fps = (int) (numFrames \/ seconds);\n+            fpsString = fps + \" fps\";\n+            startTime = endTime;\n+            numFrames = 0;\n+        }\n+        return fpsString;\n+    }\n+}\n+\n+class AnimatingComponent extends JViewport {\n+\n+    FrameCounter frameCounter;\n+    int boxX, boxY;\n+    int boxW, boxH;\n+    int xStep = 1;\n+\n+    public AnimatingComponent() {\n+        frameCounter = new FrameCounter();\n+        boxX = 0;\n+        boxY = 0;\n+        boxW = 100;\n+        boxH = 100;\n+    }\n+\n+    public void paintComponent(Graphics g) {\n+        boxX += xStep;\n+        if (boxX <= 0 || (boxX + boxW) > getWidth()) {\n+            xStep = -xStep;\n+            boxX += (2 * xStep);\n+        }\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, getWidth(), getHeight());\n+        g.setColor(Color.green);\n+        for (int i = 0; i < 100; ++i) {\n+            g.fillRect(boxX, boxY, 100, 100);\n+        }\n+        g.setColor(Color.black);\n+        g.drawString(frameCounter.addFrame(), 200, getHeight() - 30);\n+    }\n+}\n+\n+class AnimatingFrame extends JFrame implements Runnable {\n+    JViewport component;\n+    Thread thread;\n+\n+    public AnimatingFrame() {\n+        setSize(500, 500);\n+        setTitle(\"MultimonVImage Demo\");\n+        addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent e) {\n+                System.exit(0);\n+            }\n+        });\n+\n+        component = new AnimatingComponent();\n+        component.setPreferredSize(new Dimension(500, 500));\n+        setContentPane(component);\n+        component.setVisible(true);\n+\n+        setLocationRelativeTo(null);\n+        pack();\n+        setVisible(true);\n+    }\n+\n+    public void test() {\n+        thread = new Thread(this);\n+        thread.setPriority(Thread.MIN_PRIORITY);\n+        thread.start();\n+    }\n+\n+    public void run() {\n+        Thread me = Thread.currentThread();\n+        while (thread == me) {\n+            component.repaint();\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/MultiMonitor\/MultimonVImage.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"}]}