{"files":[{"patch":"@@ -2803,1 +2803,1 @@\n-PhiNode *ConnectionGraph::split_memory_phi(PhiNode *orig_phi, int alias_idx, GrowableArray<PhiNode *>  &orig_phi_worklist) {\n+PhiNode *ConnectionGraph::split_memory_phi(PhiNode *orig_phi, int alias_idx, GrowableArray<PhiNode *> &orig_phi_worklist, uint rec_depth) {\n@@ -2819,1 +2819,1 @@\n-      Node *mem = find_inst_mem(phi->in(idx), alias_idx, orig_phi_worklist);\n+      Node *mem = find_inst_mem(phi->in(idx), alias_idx, orig_phi_worklist, rec_depth + 1);\n@@ -2961,1 +2961,6 @@\n-Node* ConnectionGraph::find_inst_mem(Node *orig_mem, int alias_idx, GrowableArray<PhiNode *>  &orig_phis) {\n+#define FIND_INST_MEM_RECURSION_DEPTH_LIMIT 1000\n+Node* ConnectionGraph::find_inst_mem(Node *orig_mem, int alias_idx, GrowableArray<PhiNode *>  &orig_phis, uint rec_depth) {\n+  if (rec_depth > FIND_INST_MEM_RECURSION_DEPTH_LIMIT) {\n+    _compile->record_failure(_invocation > 0 ? C2Compiler::retry_no_iterative_escape_analysis() : C2Compiler::retry_no_escape_analysis());\n+    return nullptr;\n+  }\n@@ -3035,1 +3040,1 @@\n-        result = find_inst_mem(result, alias_idx, orig_phis);\n+        result = find_inst_mem(result, alias_idx, orig_phis, rec_depth + 1);\n@@ -3103,1 +3108,1 @@\n-      result = split_memory_phi(mphi, alias_idx, orig_phis);\n+      result = split_memory_phi(mphi, alias_idx, orig_phis, rec_depth + 1);\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -543,1 +543,1 @@\n-  PhiNode *split_memory_phi(PhiNode *orig_phi, int alias_idx, GrowableArray<PhiNode *>  &orig_phi_worklist);\n+  PhiNode *split_memory_phi(PhiNode *orig_phi, int alias_idx, GrowableArray<PhiNode *>  &orig_phi_worklist, uint rec_depth);\n@@ -546,1 +546,1 @@\n-  Node* find_inst_mem(Node* mem, int alias_idx,GrowableArray<PhiNode *>  &orig_phi_worklist);\n+  Node* find_inst_mem(Node* mem, int alias_idx,GrowableArray<PhiNode *>  &orig_phi_worklist, uint rec_depth = 0);\n","filename":"src\/hotspot\/share\/opto\/escape.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8324345\n+ * @summary Ensure that ConnectionGraph::find_inst_mem does not cause a stack\n+ *          overflow.\n+ *\n+ * @run main\/othervm -Xcomp -XX:CompileThreshold=10 -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=CompileOnly,javax.swing.plaf.basic.BasicLookAndFeel::initComponentDefaults\n+ *                   -XX:CompileCommand=MemLimit,*.*,0\n+ *                   compiler.escapeAnalysis.TestFindInstMemRecursion\n+ *\n+ *\/\n+\n+package compiler.escapeAnalysis;\n+\n+import javax.swing.*;\n+import javax.swing.plaf.metal.*;\n+\n+public class TestFindInstMemRecursion {\n+    public static void main(String[] args) throws Exception {\n+        LookAndFeel lookAndFeel = new MetalLookAndFeel();\n+        for (int i = 0; i < 20; ++i) {\n+            UIManager.setLookAndFeel(lookAndFeel);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestFindInstMemRecursion.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng\/othervm -XX:UseSVE=0 -XX:-TieredCompilation -XX:CompileThreshold=100 compiler.vectorapi.VectorReplicateLongSpecialImmTest\n+ * @run testng\/othervm -XX:UseSVE=0 -XX:-TieredCompilation -XX:CompileThreshold=100 -XX:+IgnoreUnrecognizedVMOptions -XX:CompileCommand=MemLimit,*.*,0 compiler.vectorapi.VectorReplicateLongSpecialImmTest\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorReplicateLongSpecialImmTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}