{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -47,2 +48,2 @@\n-CompiledICHolder* InlineCacheBuffer::_pending_released = nullptr;\n-int InlineCacheBuffer::_pending_count = 0;\n+CompiledICHolder* volatile InlineCacheBuffer::_pending_released = nullptr;\n+volatile int InlineCacheBuffer::_pending_count = 0;\n@@ -250,1 +251,1 @@\n-  CompiledICHolder* holder = _pending_released;\n+  CompiledICHolder* holder = Atomic::load(&_pending_released);\n@@ -252,0 +253,1 @@\n+  int count = 0;\n@@ -256,1 +258,1 @@\n-    _pending_count--;\n+    count++;\n@@ -258,1 +260,2 @@\n-  assert(_pending_count == 0, \"wrong count\");\n+  assert(pending_icholder_count() == count, \"wrong count\");\n+  Atomic::store(&_pending_count, 0);\n@@ -262,1 +265,1 @@\n-\/\/ not safe to free them until them since they might be visible to\n+\/\/ not safe to free them until then since they might be visible to\n@@ -265,4 +268,14 @@\n-  MutexLocker mex(InlineCacheBuffer_lock, Mutex::_no_safepoint_check_flag);\n-  icholder->set_next(_pending_released);\n-  _pending_released = icholder;\n-  _pending_count++;\n+  assert(icholder->next() == nullptr, \"multiple enqueue?\");\n+\n+  CompiledICHolder* old = Atomic::load(&_pending_released);\n+  for (;;) {\n+    icholder->set_next(old);\n+    \/\/ The only reader runs at a safepoint serially so there is no need for a more strict atomic.\n+    CompiledICHolder* cur = Atomic::cmpxchg(&_pending_released, old, icholder, memory_order_relaxed);\n+    if (cur == old) {\n+      break;\n+    }\n+    old = cur;\n+  }\n+  Atomic::inc(&_pending_count, memory_order_relaxed);\n+\n@@ -273,0 +286,4 @@\n+\n+int InlineCacheBuffer::pending_icholder_count() {\n+  return Atomic::load(&_pending_count);\n+}\n","filename":"src\/hotspot\/share\/code\/icBuffer.cpp","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -149,2 +149,2 @@\n-  static CompiledICHolder* _pending_released;\n-  static int _pending_count;\n+  static CompiledICHolder* volatile _pending_released;\n+  static volatile int _pending_count;\n@@ -179,1 +179,1 @@\n-  static int pending_icholder_count() { return _pending_count; }\n+  static int pending_icholder_count();\n","filename":"src\/hotspot\/share\/code\/icBuffer.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  : _holder_metadata(metadata), _holder_klass(klass), _is_metadata_method(is_method) {\n+  : _holder_metadata(metadata), _holder_klass(klass), _next(nullptr), _is_metadata_method(is_method) {\n","filename":"src\/hotspot\/share\/oops\/compiledICHolder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}