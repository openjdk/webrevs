{"files":[{"patch":"@@ -2401,0 +2401,1 @@\n+            @SuppressWarnings(\"fallthrough\")\n@@ -2404,9 +2405,13 @@\n-                    switch (s.getKind()) {\n-                        case OTHER:\n-                        case UNION:\n-                        case INTERSECTION:\n-                        case PACKAGE:\n-                        case EXECUTABLE:\n-                        case NONE:\n-                        case VOID:\n-                        case ERROR:\n+                    switch (s.getTag()) {\n+                        case CLASS:\n+                            if (s instanceof UnionClassType ||\n+                                s instanceof IntersectionClassType) {\n+                                return s;\n+                            }\n+                            \/\/fall-through\n+                        case BYTE, CHAR, SHORT, LONG, FLOAT, INT, DOUBLE, BOOLEAN,\n+                             ARRAY, MODULE, TYPEVAR, WILDCARD, BOT:\n+                            return s.dropMetadata(Annotations.class);\n+                        case VOID, METHOD, PACKAGE, FORALL, DEFERRED,\n+                             NONE, ERROR, UNKNOWN, UNDETVAR, UNINITIALIZED_THIS,\n+                             UNINITIALIZED_OBJECT:\n@@ -2414,1 +2419,2 @@\n-                        default: return s.dropMetadata(Annotations.class);\n+                        default:\n+                            throw new AssertionError(s.getTag().name());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8321164\n+ * @summary Indirectly verify that types.erasure does not complete, called from\n+ *          ClassReader.isSameBinaryType, which must not complete.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.JavacTask toolbox.TestRunner toolbox.ToolBox\n+ * @run main ReadingMethodWithTypeAnno\n+ *\/\n+\n+import com.sun.source.util.TaskEvent;\n+import com.sun.source.util.TaskListener;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task.Expect;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class ReadingMethodWithTypeAnno extends TestRunner {\n+    public static void main(String... args) throws Exception {\n+        ReadingMethodWithTypeAnno r = new ReadingMethodWithTypeAnno();\n+        r.runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    public ReadingMethodWithTypeAnno() throws IOException {\n+        super(System.err);\n+    }\n+\n+    @Test\n+    public void test_DeclNone_UseNone(Path base) throws IOException {\n+        Path libSrc = base.resolve(\"lib-src\");\n+        Path libClasses = Files.createDirectories(base.resolve(\"lib-classes\"));\n+\n+        tb.writeJavaFiles(libSrc,\n+                          \"\"\"\n+                          public class Lib {\n+                              public void test(java.lang.@Ann String s) {\n+                                  new Object() {};\n+                              }\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          import java.lang.annotation.ElementType;\n+                          import java.lang.annotation.Target;\n+                          @Target(ElementType.TYPE_USE)\n+                          public @interface Ann {}\n+                          \"\"\");\n+\n+        new JavacTask(tb)\n+                .outdir(libClasses)\n+                .files(tb.findJavaFiles(libSrc))\n+                .run(Expect.SUCCESS)\n+                .writeAll()\n+                .getOutput(OutputKind.DIRECT);\n+\n+        Path src = base.resolve(\"src\");\n+        Path classes = Files.createDirectories(base.resolve(\"classes\"));\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          public class Test {\n+                          }\n+                          \"\"\");\n+\n+        new JavacTask(tb)\n+                .outdir(classes)\n+                .classpath(libClasses)\n+                .files(tb.findJavaFiles(src))\n+                .callback(task -> {\n+                    task.addTaskListener(new TaskListener() {\n+                        @Override\n+                        public void finished(TaskEvent e) {\n+                            if (e.getKind() == TaskEvent.Kind.ENTER) {\n+                                task.getElements().getTypeElement(\"Lib\");\n+                                task.getElements().getTypeElement(\"Lib$1\");\n+                            }\n+                        }\n+                    });\n+                })\n+                .run(Expect.SUCCESS)\n+                .writeAll()\n+                .getOutput(OutputKind.DIRECT);\n+    }\n+\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/annotations\/ReadingMethodWithTypeAnno.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}