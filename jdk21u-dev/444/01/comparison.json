{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,1 +155,1 @@\n-        if (System.getProperty(\"main.wrapper\") != null) {\n+        if (System.getProperty(\"test.thread.factory\") != null) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/monitor\/monitor001\/monitor001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-        boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+        boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/threads\/threads003\/threads003.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -189,1 +189,1 @@\n-        if (System.getProperty(\"main.wrapper\") != null) {\n+        if (System.getProperty(\"test.thread.factory\") != null) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/unmonitor\/unmonitor001\/unmonitor001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -194,1 +194,1 @@\n-        boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+        boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StackFrame\/_bounds_\/bounds002.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,2 +137,2 @@\n-        boolean usingWrapper = System.getProperty(\"main.wrapper\") != null;\n-        boolean usingVThreadWrapper = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+        boolean usingTTF = System.getProperty(\"test.thread.factory\") != null;\n+        boolean usingVirtualTTF = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"));\n@@ -256,1 +256,1 @@\n-                if (usingVThreadWrapper) {\n+                if (usingVirtualTTF) {\n@@ -259,1 +259,1 @@\n-                    expectedNumThreads = usingWrapper ? 3 : 2;\n+                    expectedNumThreads = usingTTF ? 3 : 2;\n@@ -280,1 +280,1 @@\n-                if (nMain != 1 && !usingVThreadWrapper) {\n+                if (nMain != 1 && !usingVirtualTTF) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadGroupReference\/threads\/threads001.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    static final boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+    static final boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/stop\/stop001.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-    static final boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+    static final boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/stop\/stop001a.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-    static final boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+    static final boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/stop\/stop002.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    static final boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+    static final boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/stop\/stop002t.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -254,1 +254,1 @@\n-                                      if ((System.getProperty(\"main.wrapper\") != null) &&\n+                                      if ((System.getProperty(\"test.thread.factory\") != null) &&\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadStartEvent\/thread\/thread001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        System.setProperty(\"main.wrapper\", wrapperName);\n+        System.setProperty(\"test.thread.factory\", wrapperName);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/MainWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-            boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+            boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"));\n@@ -233,2 +233,2 @@\n-                if (System.getProperty(\"main.wrapper\") != null) {\n-                    cmdline = MainWrapper.class.getName() + \" \" + System.getProperty(\"main.wrapper\") +  \" \" + cmdline;\n+                if (System.getProperty(\"test.thread.factory\") != null) {\n+                    cmdline = MainWrapper.class.getName() + \" \" + System.getProperty(\"test.thread.factory\") +  \" \" + cmdline;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdb\/Launcher.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -711,2 +711,2 @@\n-        if(System.getProperty(\"main.wrapper\") != null) {\n-            cmdline = MainWrapper.class.getName() + \" \" + System.getProperty(\"main.wrapper\") + \" \" + cmdline;\n+        if (System.getProperty(\"test.thread.factory\") != null) {\n+            cmdline = MainWrapper.class.getName() + \" \" + System.getProperty(\"test.thread.factory\") + \" \" + cmdline;\n@@ -752,1 +752,1 @@\n-        boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+        boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/Binder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -254,1 +254,1 @@\n-        if (\"Virtual\".equals(System.getProperty(\"main.wrapper\"))) {\n+        if (\"Virtual\".equals(System.getProperty(\"test.thread.factory\"))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/Debugee.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    private static ThreadFactory threadFactory = \"Virtual\".equals(System.getProperty(\"main.wrapper\"))\n+    private static ThreadFactory threadFactory = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"))\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/JDIThreadFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-        if(System.getProperty(\"main.wrapper\") != null) {\n+        if (System.getProperty(\"test.thread.factory\") != null) {\n@@ -355,1 +355,1 @@\n-            args.add(System.getProperty(\"main.wrapper\"));\n+            args.add(System.getProperty(\"test.thread.factory\"));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/DebugeeBinder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,1 +228,1 @@\n-                if(System.getProperty(\"main.wrapper\") != null && System.getProperty(\"main.wrapper\").equals(\"Virtual\")) {\n+                if (\"Virtual\".equals(System.getProperty(\"test.thread.factory\"))) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/runner\/RunParams.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            Thread zero = TestScaffold.newThread (() -> {\n+            Thread zero = DebuggeeWrapper.newThread (() -> {\n@@ -58,1 +58,1 @@\n-            Thread one = TestScaffold.newThread (() -> {\n+            Thread one = DebuggeeWrapper.newThread (() -> {\n@@ -67,1 +67,1 @@\n-            Thread two = TestScaffold.newThread (() -> {\n+            Thread two = DebuggeeWrapper.newThread (() -> {\n","filename":"test\/jdk\/com\/sun\/jdi\/ClassesByName2Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.ThreadFactory;\n+\n+public class DebuggeeWrapper {\n+\n+    public static String PROPERTY_NAME = \"test.thread.factory\";\n+\n+    private static final String OLD_MAIN_THREAD_NAME = \"old-m-a-i-n\";\n+\n+    private static ThreadFactory threadFactory = r -> new Thread(r);\n+\n+    private static final String testThreadFactoryName = System.getProperty(PROPERTY_NAME);\n+\n+    public static String getTestThreadFactoryName() {\n+        return testThreadFactoryName;\n+    }\n+\n+    public static boolean isVirtual() {\n+        return \"Virtual\".equals(testThreadFactoryName);\n+    }\n+\n+    public static Thread newThread(Runnable task) {\n+        return threadFactory.newThread(task);\n+    }\n+\n+    public static Thread newThread(Runnable task, String name) {\n+        Thread t = newThread(task);\n+        t.setName(name);\n+        return t;\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        String className = args[0];\n+        String[] classArgs = new String[args.length - 1];\n+        System.arraycopy(args, 1, classArgs, 0, args.length - 1);\n+        Class c = Class.forName(className);\n+        java.lang.reflect.Method mainMethod = c.getMethod(\"main\", new Class[] { String[].class });\n+        mainMethod.setAccessible(true);\n+\n+        if (isVirtual()) {\n+            threadFactory = Thread.ofVirtual().factory();\n+            MainThreadGroup tg = new MainThreadGroup();\n+            Thread vthread = Thread.ofVirtual().unstarted(() -> {\n+                try {\n+                    mainMethod.invoke(null, new Object[] { classArgs });\n+                } catch (InvocationTargetException e) {\n+                    tg.uncaughtThrowable = e.getCause();\n+                } catch (Throwable error) {\n+                    tg.uncaughtThrowable = error;\n+                }\n+            });\n+            Thread.currentThread().setName(OLD_MAIN_THREAD_NAME);\n+            vthread.setName(\"main\");\n+            vthread.start();\n+            vthread.join();\n+            if (tg.uncaughtThrowable != null) {\n+                \/\/ Note we cant just rethrow tg.uncaughtThrowable because there are tests\n+                \/\/ that track ExceptionEvents, and they will complain about the extra\n+                \/\/ exception. So instead mimic what happens when the main thread exits\n+                \/\/ with an exception.\n+                System.out.println(\"Uncaught Exception: \" + tg.uncaughtThrowable);\n+                tg.uncaughtThrowable.printStackTrace(System.out);\n+                System.exit(1);\n+            }\n+        } else if (getTestThreadFactoryName().equals(\"Kernel\")) {\n+            MainThreadGroup tg = new MainThreadGroup();\n+            Thread t = new Thread(tg, () -> {\n+                try {\n+                    mainMethod.invoke(null, new Object[] { classArgs });\n+                } catch (InvocationTargetException e) {\n+                    tg.uncaughtThrowable = e.getCause();\n+                } catch (Throwable error) {\n+                    tg.uncaughtThrowable = error;\n+                }\n+            });\n+            t.start();\n+            t.join();\n+            if (tg.uncaughtThrowable != null) {\n+                throw new RuntimeException(tg.uncaughtThrowable);\n+            }\n+        } else {\n+            mainMethod.invoke(null, new Object[] { classArgs });\n+        }\n+    }\n+\n+    static class MainThreadGroup extends ThreadGroup {\n+        MainThreadGroup() {\n+            super(\"MainThreadGroup\");\n+        }\n+\n+        public void uncaughtException(Thread t, Throwable e) {\n+            if (e instanceof ThreadDeath) {\n+                return;\n+            }\n+            e.printStackTrace(System.err);\n+            uncaughtThrowable = e;\n+        }\n+        Throwable uncaughtThrowable = null;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/com\/sun\/jdi\/DebuggeeWrapper.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -77,2 +77,2 @@\n-        Thread thread1 = TestScaffold.newThread(obj1, \"jj1\");\n-        Thread thread2 = TestScaffold.newThread(obj2, \"jj2\");\n+        Thread thread1 = DebuggeeWrapper.newThread(obj1, \"jj1\");\n+        Thread thread2 = DebuggeeWrapper.newThread(obj2, \"jj2\");\n","filename":"test\/jdk\/com\/sun\/jdi\/DeferredStepTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -891,1 +891,1 @@\n-            inflatorThread = TestScaffold.newThread(() -> {\n+            inflatorThread = DebuggeeWrapper.newThread(() -> {\n","filename":"test\/jdk\/com\/sun\/jdi\/EATests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-        boolean is_vthread_mode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+        boolean is_vthread_mode = DebuggeeWrapper.isVirtual();\n","filename":"test\/jdk\/com\/sun\/jdi\/ForceEarlyReturnTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        Thread interruptorThread = TestScaffold.newThread(new Interruptor(Thread.currentThread()));\n+        Thread interruptorThread = DebuggeeWrapper.newThread(new Interruptor(Thread.currentThread()));\n","filename":"test\/jdk\/com\/sun\/jdi\/InterruptHangTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-        Thread t1 = TestScaffold.newThread(new InvokeHangTarg(), name1);\n-        Thread t2 = TestScaffold.newThread(new InvokeHangTarg(), name2);\n+        Thread t1 = DebuggeeWrapper.newThread(new InvokeHangTarg(), name1);\n+        Thread t2 = DebuggeeWrapper.newThread(new InvokeHangTarg(), name2);\n","filename":"test\/jdk\/com\/sun\/jdi\/InvokeHangTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            Thread xx = TestScaffold.newThread(new Sleeper());\n+            Thread xx = DebuggeeWrapper.newThread(new Sleeper());\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbLockTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,3 +54,3 @@\n-        Thread myThread1 = TestScaffold.newThread(myTask1, \"MYTHREAD-1\");\n-        Thread myThread2 = TestScaffold.newThread(myTask2, \"MYTHREAD-2\");\n-        Thread myThread3 = TestScaffold.newThread(myTask3, \"MYTHREAD-3\");\n+        Thread myThread1 = DebuggeeWrapper.newThread(myTask1, \"MYTHREAD-1\");\n+        Thread myThread2 = DebuggeeWrapper.newThread(myTask2, \"MYTHREAD-2\");\n+        Thread myThread3 = DebuggeeWrapper.newThread(myTask3, \"MYTHREAD-3\");\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbStopThreadidTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        Thread t1 = TestScaffold.newThread(new MyTask());\n+        Thread t1 = DebuggeeWrapper.newThread(new MyTask());\n","filename":"test\/jdk\/com\/sun\/jdi\/MonitorEventTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-        Thread thrd = TestScaffold.newThread(() -> {\n+        Thread thrd = DebuggeeWrapper.newThread(() -> {\n","filename":"test\/jdk\/com\/sun\/jdi\/MultiBreakpointsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-        TestScaffold.newThread(new HarassThread()).start();\n+        DebuggeeWrapper.newThread(new HarassThread()).start();\n","filename":"test\/jdk\/com\/sun\/jdi\/PopAsynchronousTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -321,2 +321,1 @@\n-            String mainWrapper = System.getProperty(\"main.wrapper\");\n-            if (\"Virtual\".equals(mainWrapper)) {\n+            if (DebuggeeWrapper.isVirtual()) {\n","filename":"test\/jdk\/com\/sun\/jdi\/PopFramesTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-        Thread t1 = TestScaffold.newThread(new ResumeOneThreadTarg(), name1);\n-        Thread t2 = TestScaffold.newThread(new ResumeOneThreadTarg(), name2);\n+        Thread t1 = DebuggeeWrapper.newThread(new ResumeOneThreadTarg(), name1);\n+        Thread t2 = DebuggeeWrapper.newThread(new ResumeOneThreadTarg(), name2);\n","filename":"test\/jdk\/com\/sun\/jdi\/ResumeOneThreadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-        boolean isVirtualThread = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+        boolean isVirtualThread = DebuggeeWrapper.isVirtual();\n","filename":"test\/jdk\/com\/sun\/jdi\/SetLocalWhileThreadInNative.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n-        Thread t1 = TestScaffold.newThread(new SimulResumerTarg(), name1);\n-        Thread t2 = TestScaffold.newThread(new SimulResumerTarg(), name2);\n+        Thread t1 = DebuggeeWrapper.newThread(new SimulResumerTarg(), name1);\n+        Thread t2 = DebuggeeWrapper.newThread(new SimulResumerTarg(), name2);\n","filename":"test\/jdk\/com\/sun\/jdi\/SimulResumerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.reflect.InvocationTargetException;\n@@ -30,1 +29,1 @@\n-import java.util.concurrent.ThreadFactory;\n+\n@@ -70,1 +69,0 @@\n-    public static final String OLD_MAIN_THREAD_NAME = \"old-m-a-i-n\";\n@@ -516,2 +514,2 @@\n-        \/\/     argInfo.targetAppCommandLine : TestScaffold Virtual Frames2Targ\n-        \/\/     argInfo.targetVMArgs : -Xss4M\n+        \/\/     argInfo.targetAppCommandLine : DebuggeeWrapper Frames2Targ\n+        \/\/     argInfo.targetVMArgs : -Xss4M -Dtest.thread.factory=Virtual\n@@ -552,6 +550,6 @@\n-        \/\/ Need to change args to run wrapper using command like 'TestScaffold Virtual <app-name>'\n-        String mainWrapper = System.getProperty(\"main.wrapper\");\n-        if (mainWrapper != null && !argInfo.targetAppCommandLine.isEmpty()) {\n-            argInfo.targetVMArgs += \"-Dmain.wrapper=\" + mainWrapper;\n-            argInfo.targetAppCommandLine = TestScaffold.class.getName() + ' '\n-                    + mainWrapper + ' ' + argInfo.targetAppCommandLine;\n+        \/\/ Need to change args to run wrapper using command like 'DebuggeeWrapper <app-name>'\n+        \/\/ and set property 'test.thread.factory' so test could use DebuggeeWrapper.isVirtual() method\n+        String testThreadFactoryName = DebuggeeWrapper.getTestThreadFactoryName();\n+        if (testThreadFactoryName != null && !argInfo.targetAppCommandLine.isEmpty()) {\n+            argInfo.targetVMArgs += \"-D\" + DebuggeeWrapper.PROPERTY_NAME + \"=\" + testThreadFactoryName;\n+            argInfo.targetAppCommandLine = DebuggeeWrapper.class.getName() + ' ' + argInfo.targetAppCommandLine;\n@@ -1047,82 +1045,0 @@\n-    private static ThreadFactory threadFactory = r -> new Thread(r);\n-\n-    public static void main(String[] args) throws Throwable {\n-        String wrapper = args[0];\n-        String className = args[1];\n-        String[] classArgs = new String[args.length - 2];\n-        System.arraycopy(args, 2, classArgs, 0, args.length - 2);\n-        Class c = Class.forName(className);\n-        java.lang.reflect.Method mainMethod = c.getMethod(\"main\", new Class[] { String[].class });\n-        mainMethod.setAccessible(true);\n-\n-        if (wrapper.equals(\"Virtual\")) {\n-            threadFactory = Thread.ofVirtual().factory();\n-            MainThreadGroup tg = new MainThreadGroup();\n-            \/\/ TODO fix to set virtual scheduler group when become available\n-            Thread vthread = Thread.ofVirtual().unstarted(() -> {\n-                try {\n-                    mainMethod.invoke(null, new Object[] { classArgs });\n-                } catch (InvocationTargetException e) {\n-                    tg.uncaughtThrowable = e.getCause();\n-                } catch (Throwable error) {\n-                    tg.uncaughtThrowable = error;\n-                }\n-            });\n-            Thread.currentThread().setName(OLD_MAIN_THREAD_NAME);\n-            vthread.setName(\"main\");\n-            vthread.start();\n-            vthread.join();\n-            if (tg.uncaughtThrowable != null) {\n-                \/\/ Note we cant just rethrow tg.uncaughtThrowable because there are tests\n-                \/\/ that track ExceptionEvents, and they will complain about the extra\n-                \/\/ exception. So instead mimic what happens when the main thread exits\n-                \/\/ with an exception.\n-                System.out.println(\"Uncaught Exception: \" + tg.uncaughtThrowable);\n-                tg.uncaughtThrowable.printStackTrace(System.out);\n-                System.exit(1);\n-            }\n-        } else if (wrapper.equals(\"Kernel\")) {\n-            MainThreadGroup tg = new MainThreadGroup();\n-            Thread t = new Thread(tg, () -> {\n-                try {\n-                    mainMethod.invoke(null, new Object[] { classArgs });\n-                } catch (InvocationTargetException e) {\n-                    tg.uncaughtThrowable = e.getCause();\n-                } catch (Throwable error) {\n-                    tg.uncaughtThrowable = error;\n-                }\n-            });\n-            t.start();\n-            t.join();\n-            if (tg.uncaughtThrowable != null) {\n-                throw new RuntimeException(tg.uncaughtThrowable);\n-            }\n-        } else {\n-            mainMethod.invoke(null, new Object[] { classArgs });\n-        }\n-    }\n-\n-    static class MainThreadGroup extends ThreadGroup {\n-        MainThreadGroup() {\n-            super(\"MainThreadGroup\");\n-        }\n-\n-        public void uncaughtException(Thread t, Throwable e) {\n-            if (e instanceof ThreadDeath) {\n-                return;\n-            }\n-            e.printStackTrace(System.err);\n-            uncaughtThrowable = e;\n-        }\n-        Throwable uncaughtThrowable = null;\n-    }\n-\n-    public static Thread newThread(Runnable task) {\n-        return threadFactory.newThread(task);\n-    }\n-\n-    public static Thread newThread(Runnable task, String name) {\n-        Thread t = newThread(task);\n-        t.setName(name);\n-        return t;\n-    }\n","filename":"test\/jdk\/com\/sun\/jdi\/TestScaffold.java","additions":9,"deletions":93,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-            TestScaffold.newThread(() -> {\n+            DebuggeeWrapper.newThread(() -> {\n@@ -68,1 +68,0 @@\n-                        String mainWrapper = System.getProperty(\"main.wrapper\");\n@@ -73,1 +72,1 @@\n-                        long timeToSleep = \"Virtual\".equals(mainWrapper) ? 100 : 50;\n+                        long timeToSleep = DebuggeeWrapper.isVirtual() ? 100 : 50;\n","filename":"test\/jdk\/com\/sun\/jdi\/ThreadMemoryLeakTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n-        Thread t1 = TestScaffold.newThread(new TwoThreadsTarg(), name1);\n-        Thread t2 = TestScaffold.newThread(new TwoThreadsTarg(), name2);\n+        Thread t1 = DebuggeeWrapper.newThread(new TwoThreadsTarg(), name1);\n+        Thread t2 = DebuggeeWrapper.newThread(new TwoThreadsTarg(), name2);\n","filename":"test\/jdk\/com\/sun\/jdi\/TwoThreadsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-            System.setProperty(\"main.wrapper\", \"Virtual\");\n+            System.setProperty(\"test.thread.factory\", \"Virtual\");\n","filename":"test\/jtreg_test_thread_factory\/src\/share\/classes\/Virtual.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.lang.Thread.State;\n@@ -381,2 +380,2 @@\n-      Convert arguments for tests running with virtual threads main wrapper\n-      When test is executed with process wrapper the line is changed from\n+      Convert arguments for tests running with virtual threads test thread factory.\n+      When test is executed with test thread factory the line is changed from\n@@ -385,1 +384,1 @@\n-      java <jvm-args> -Dmain.wrapper=<wrapper-name> jdk.test.lib.process.ProcessTools <wrapper-name> <test-class> <test-args>\n+      java <jvm-args> -Dtest.thread.factory=<test-thread-factory-name> jdk.test.lib.process.ProcessTools <test-thread-factory-name> <test-class> <test-args>\n@@ -388,1 +387,1 @@\n-    private static List<String> addMainWrapperArgs(String mainWrapper, List<String> command) {\n+    private static List<String> addTestThreadFactoryArgs(String testThreadFactoryName, List<String> command) {\n@@ -401,1 +400,1 @@\n-        boolean isWrapperClassAdded = false;\n+        boolean isTestThreadFactoryAdded = false;\n@@ -403,1 +402,1 @@\n-            if (isWrapperClassAdded) {\n+            if (isTestThreadFactoryAdded) {\n@@ -436,1 +435,1 @@\n-            args.add(\"-Dmain.wrapper=\" + mainWrapper);\n+            args.add(\"-Dtest.thread.factory=\" + testThreadFactoryName);\n@@ -438,2 +437,2 @@\n-            args.add(mainWrapper);\n-            isWrapperClassAdded = true;\n+            args.add(testThreadFactoryName);\n+            isTestThreadFactoryAdded = true;\n@@ -464,3 +463,3 @@\n-        String mainWrapper = System.getProperty(\"main.wrapper\");\n-        if (mainWrapper != null) {\n-            args.addAll(addMainWrapperArgs(mainWrapper, Arrays.asList(command)));\n+        String testThreadFactoryName = System.getProperty(\"test.thread.factory\");\n+        if (testThreadFactoryName != null) {\n+            args.addAll(addTestThreadFactoryArgs(testThreadFactoryName, Arrays.asList(command)));\n@@ -916,1 +915,1 @@\n-    \/\/ ProcessTools as a wrapper\n+    \/\/ ProcessTools as a wrapper for test execution\n@@ -919,1 +918,1 @@\n-        String wrapper = args[0];\n+        String testThreadFactoryName = args[0];\n@@ -927,1 +926,1 @@\n-        if (wrapper.equals(\"Virtual\")) {\n+        if (testThreadFactoryName.equals(\"Virtual\")) {\n@@ -947,1 +946,1 @@\n-        } else if (wrapper.equals(\"Kernel\")) {\n+        } else if (testThreadFactoryName.equals(\"Kernel\")) {\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"}]}