{"files":[{"patch":"@@ -31,1 +31,1 @@\n- *       https:\/\/bugs.openjdk.org\/browse\/JDK-8310308\n+ *       https:\/\/bugs.openjdk.org\/browse\/JDK-8312570\n@@ -94,1 +94,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -103,1 +103,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -112,1 +112,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -123,1 +123,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -134,1 +134,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -145,1 +145,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -156,1 +156,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -167,1 +167,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -178,1 +178,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -189,1 +189,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -200,1 +200,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -211,1 +211,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -222,1 +222,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -233,1 +233,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -244,1 +244,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -255,1 +255,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -266,1 +266,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -277,1 +277,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -288,1 +288,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -299,1 +299,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -310,1 +310,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -321,1 +321,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -332,1 +332,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -343,1 +343,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -354,1 +354,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -365,1 +365,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -376,1 +376,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -386,1 +386,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -396,1 +396,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -406,1 +406,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -416,1 +416,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -426,1 +426,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -436,1 +436,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -446,1 +446,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -456,1 +456,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -466,1 +466,1 @@\n- * @bug 8298935\n+ * @bug 8298935 8310308 8312570\n@@ -1405,1 +1405,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1408,1 +1408,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1449,1 +1453,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1452,1 +1464,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1456,1 +1468,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1482,1 +1494,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1513,1 +1528,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1516,1 +1535,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1548,1 +1567,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1552,1 +1576,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1593,1 +1617,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1596,1 +1628,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1600,1 +1632,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1632,1 +1664,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1636,1 +1673,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1665,1 +1702,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1668,1 +1709,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1703,1 +1744,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1707,1 +1756,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1748,1 +1797,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1751,1 +1800,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -1755,1 +1804,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1786,1 +1843,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1790,1 +1851,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1819,1 +1880,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1822,1 +1883,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1860,1 +1925,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1863,1 +1928,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -1867,1 +1932,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1896,1 +1966,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1899,1 +1973,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1929,1 +2003,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1932,1 +2006,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 56\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1961,1 +2040,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1964,1 +2047,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2005,1 +2088,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2008,1 +2091,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2012,1 +2095,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2041,1 +2129,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2044,1 +2136,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2073,1 +2165,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2076,1 +2168,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 72 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 72\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2105,1 +2202,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2108,1 +2205,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2141,1 +2242,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2144,1 +2245,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 80 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 80\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2185,1 +2295,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2188,1 +2306,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2192,1 +2310,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2221,1 +2339,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2224,1 +2342,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 124 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 124\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2253,1 +2376,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2256,1 +2383,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2297,1 +2424,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2300,1 +2427,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2304,1 +2431,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2345,1 +2477,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2348,1 +2488,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2352,1 +2492,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2381,1 +2521,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2384,1 +2524,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 252 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 252\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2413,1 +2558,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2416,1 +2565,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2457,1 +2606,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2460,1 +2617,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2464,1 +2621,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2505,1 +2662,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2508,1 +2673,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2512,1 +2677,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2541,1 +2706,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2544,1 +2713,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2573,1 +2742,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2576,1 +2745,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2617,1 +2790,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2620,1 +2801,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2624,1 +2805,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2665,1 +2846,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2668,1 +2849,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2672,1 +2853,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2701,1 +2890,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2704,1 +2893,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2733,1 +2926,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2736,1 +2933,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2777,1 +2974,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2780,1 +2977,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2784,1 +2981,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2813,1 +3018,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -2816,1 +3025,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2857,1 +3066,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -2860,1 +3069,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2864,1 +3073,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2890,1 +3107,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -2921,1 +3141,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -2924,1 +3148,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2959,1 +3183,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -2963,1 +3195,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3004,1 +3236,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3007,1 +3239,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3011,1 +3243,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3042,1 +3282,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3046,1 +3290,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3075,1 +3319,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3078,1 +3326,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3116,1 +3364,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3119,1 +3367,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3123,1 +3371,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3164,1 +3417,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3167,1 +3428,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3171,1 +3432,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3201,1 +3462,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3204,1 +3465,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 56\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3233,1 +3499,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3236,1 +3506,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3277,1 +3547,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3280,1 +3550,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3284,1 +3554,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3313,1 +3588,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3316,1 +3595,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3349,1 +3628,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3352,1 +3631,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 112 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 112\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3381,1 +3669,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3384,1 +3676,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3425,1 +3717,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3428,1 +3720,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3432,1 +3724,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3461,1 +3758,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3464,1 +3765,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3497,1 +3798,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3500,1 +3801,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 144 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 144\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3529,1 +3839,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3532,1 +3842,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3569,1 +3883,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3572,1 +3886,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3576,1 +3890,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 160 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 160\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3617,1 +3936,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3620,1 +3947,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3624,1 +3951,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3653,1 +3980,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3656,1 +3983,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 248 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 248\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3685,1 +4017,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3688,1 +4024,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3729,1 +4065,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3732,1 +4068,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3736,1 +4072,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3777,1 +4121,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3780,1 +4124,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3784,1 +4128,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3813,1 +4165,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3816,1 +4172,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3845,1 +4201,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3848,1 +4204,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3889,1 +4249,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3892,1 +4252,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3896,1 +4256,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3937,1 +4305,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3940,1 +4316,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3944,1 +4320,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3973,1 +4349,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3976,1 +4352,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4005,1 +4385,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -4008,1 +4392,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4049,1 +4433,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -4052,1 +4436,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -4056,1 +4440,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4097,1 +4489,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -4100,1 +4500,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4104,1 +4504,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4133,1 +4533,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -4136,1 +4540,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4165,1 +4569,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -4168,1 +4572,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4209,1 +4617,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -4212,1 +4628,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4216,1 +4632,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4245,1 +4661,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4248,1 +4664,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4289,1 +4709,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4292,1 +4720,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4296,1 +4724,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4322,1 +4750,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4353,1 +4784,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4356,1 +4791,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4388,1 +4823,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4392,1 +4832,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4433,1 +4873,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4436,1 +4876,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -4440,1 +4880,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4472,1 +4920,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4476,1 +4929,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4505,1 +4958,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4508,1 +4965,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4540,1 +4997,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4544,1 +5001,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4585,1 +5047,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4588,1 +5058,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4592,1 +5062,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4624,1 +5094,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4628,1 +5103,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4657,1 +5132,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4660,1 +5135,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4695,1 +5174,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4699,1 +5186,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4728,1 +5215,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4731,1 +5222,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4762,1 +5253,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4766,1 +5261,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4795,1 +5290,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4798,1 +5297,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4836,1 +5335,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4839,1 +5338,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -4843,1 +5342,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4872,1 +5376,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4875,1 +5379,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4905,1 +5413,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4908,1 +5416,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 36 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 36\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4937,1 +5450,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4940,1 +5457,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4970,1 +5487,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4973,1 +5490,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 40 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 40\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5014,1 +5536,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5017,1 +5539,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5021,1 +5543,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5051,1 +5581,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5054,1 +5584,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 62 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 62\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5083,1 +5618,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5086,1 +5625,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5127,1 +5666,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5130,1 +5669,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5134,1 +5673,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5175,1 +5719,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5178,1 +5730,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5182,1 +5734,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5211,1 +5763,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5214,1 +5766,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 126 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 126\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5243,1 +5800,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5246,1 +5803,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5287,1 +5848,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5290,1 +5851,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5294,1 +5855,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5335,1 +5901,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5338,1 +5912,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5342,1 +5916,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5371,1 +5945,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5374,1 +5948,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 130 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 130\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5403,1 +5982,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5406,1 +5985,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5447,1 +6030,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5450,1 +6041,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5454,1 +6045,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5495,1 +6086,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5498,1 +6089,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5502,1 +6093,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5531,1 +6130,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5534,1 +6137,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5563,1 +6166,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5566,1 +6173,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5607,1 +6214,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5610,1 +6217,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5614,1 +6221,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5643,1 +6254,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5646,1 +6261,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5687,1 +6302,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5690,1 +6313,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5694,1 +6317,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5720,1 +6343,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5751,1 +6377,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5754,1 +6380,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5786,1 +6416,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5790,1 +6425,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5831,1 +6466,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5834,1 +6477,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5838,1 +6481,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5870,1 +6513,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5874,1 +6517,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5903,1 +6551,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5906,1 +6558,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5938,1 +6590,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5942,1 +6599,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5983,1 +6640,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5986,1 +6651,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5990,1 +6655,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6022,1 +6687,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6026,1 +6696,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6055,1 +6725,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6058,1 +6732,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6093,1 +6767,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6097,1 +6779,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6126,1 +6808,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6129,1 +6815,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6160,1 +6846,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6164,1 +6854,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6193,1 +6883,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6196,1 +6890,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6234,1 +6928,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6237,1 +6931,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -6241,1 +6935,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6270,1 +6969,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6273,1 +6972,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6303,1 +7006,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6306,1 +7009,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 36 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 36\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6335,1 +7043,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6338,1 +7046,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6368,1 +7080,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6371,1 +7083,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 40 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 40\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6412,1 +7129,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6415,1 +7140,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6419,1 +7144,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6449,1 +7174,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6452,1 +7177,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 62 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 62\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6481,1 +7211,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6484,1 +7218,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6525,1 +7259,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6528,1 +7262,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -6532,1 +7266,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6573,1 +7312,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6576,1 +7323,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6580,1 +7327,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6609,1 +7356,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6612,1 +7359,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 126 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 126\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6641,1 +7393,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6644,1 +7400,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6685,1 +7441,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6688,1 +7444,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -6692,1 +7448,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6733,1 +7494,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6736,1 +7497,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -6740,1 +7501,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6769,1 +7538,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6772,1 +7541,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 130 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 130\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6801,1 +7575,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6804,1 +7582,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6845,1 +7623,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6848,1 +7634,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6852,1 +7638,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6893,1 +7679,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6896,1 +7690,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6900,1 +7694,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6929,1 +7723,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6932,1 +7726,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6961,1 +7759,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6964,1 +7766,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7005,1 +7807,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -7008,1 +7810,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7012,1 +7814,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7041,1 +7847,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7044,1 +7854,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7085,1 +7895,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7088,1 +7898,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7092,1 +7902,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7118,1 +7936,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 1 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7161,1 +7982,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7164,1 +7985,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7168,1 +7989,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7194,1 +8023,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7237,1 +8069,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7240,1 +8080,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7244,1 +8084,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7270,1 +8110,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 3 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7301,1 +8144,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7304,1 +8151,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7336,1 +8183,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7340,1 +8187,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7381,1 +8233,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7384,1 +8244,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7388,1 +8248,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7420,1 +8280,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7424,1 +8284,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 7 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7453,1 +8318,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7456,1 +8325,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7488,1 +8357,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7492,1 +8366,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7533,1 +8407,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7536,1 +8410,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7540,1 +8414,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7572,1 +8454,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7576,1 +8463,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7605,1 +8492,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7608,1 +8495,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7643,1 +8534,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7647,1 +8546,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7688,1 +8587,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7691,1 +8590,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7695,1 +8594,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7726,1 +8633,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7730,1 +8641,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7759,1 +8670,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7762,1 +8677,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7793,1 +8708,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7797,1 +8716,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7838,1 +8757,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7841,1 +8768,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7845,1 +8772,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7876,1 +8803,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7880,1 +8811,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7909,1 +8840,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7912,1 +8847,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7950,1 +8885,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7953,1 +8888,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7957,1 +8892,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7998,1 +8938,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -8001,1 +8949,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8005,1 +8953,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8035,1 +8983,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8038,1 +8986,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 63 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 63\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8067,1 +9020,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -8070,1 +9027,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8111,1 +9068,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8114,1 +9071,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -8118,1 +9075,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8159,1 +9121,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -8162,1 +9132,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8166,1 +9136,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8195,1 +9165,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8198,1 +9168,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 65 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 65\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8227,1 +9202,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8230,1 +9205,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8271,1 +9250,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8274,1 +9253,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -8278,1 +9257,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8319,1 +9303,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -8322,1 +9314,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8326,1 +9318,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8355,1 +9347,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8358,1 +9350,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 129 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 129\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8387,1 +9384,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -8390,1 +9391,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8431,1 +9432,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8434,1 +9435,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -8438,1 +9439,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 192 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 192\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8467,1 +9473,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -8470,1 +9476,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8511,1 +9521,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8514,1 +9532,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8518,1 +9536,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8544,1 +9562,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8575,1 +9596,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8578,1 +9603,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8610,1 +9635,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8614,1 +9644,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8655,1 +9685,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8658,1 +9696,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8662,1 +9700,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8694,1 +9732,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8698,1 +9741,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8727,1 +9770,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8730,1 +9777,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8765,1 +9812,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8769,1 +9824,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8810,1 +9865,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8813,1 +9876,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8817,1 +9880,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8848,1 +9911,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8852,1 +9919,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8881,1 +9948,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -8884,1 +9951,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8922,1 +9993,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -8925,1 +9996,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -8929,1 +10000,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8958,1 +10034,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8961,1 +10041,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8991,1 +10071,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -8994,1 +10074,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 56\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9023,1 +10108,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9026,1 +10115,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9067,1 +10156,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9070,1 +10159,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -9074,1 +10163,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9103,1 +10197,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9106,1 +10204,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9135,1 +10233,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9138,1 +10236,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 72 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 72\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9167,1 +10270,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9170,1 +10273,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9203,1 +10310,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9206,1 +10313,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 80 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 80\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9247,1 +10363,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9250,1 +10374,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9254,1 +10378,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9283,1 +10407,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9286,1 +10410,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 124 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 124\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9315,1 +10444,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9318,1 +10447,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9359,1 +10492,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9362,1 +10495,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -9366,1 +10499,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9407,1 +10545,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9410,1 +10556,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9414,1 +10560,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9443,1 +10589,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9446,1 +10592,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 252 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 252\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9475,1 +10626,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9478,1 +10633,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9519,1 +10674,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9522,1 +10685,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9526,1 +10689,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9567,1 +10730,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9570,1 +10741,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9574,1 +10745,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9603,1 +10774,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9606,1 +10781,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9635,1 +10810,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9638,1 +10817,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9679,1 +10858,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9682,1 +10869,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9686,1 +10873,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9727,1 +10914,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9730,1 +10925,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9734,1 +10929,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9763,1 +10958,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9766,1 +10965,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9795,1 +10994,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9798,1 +11001,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9839,1 +11042,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9842,1 +11053,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9846,1 +11057,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9875,1 +11086,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -9878,1 +11089,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9919,1 +11134,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -9922,1 +11145,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9926,1 +11149,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9952,1 +11175,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -9983,1 +11209,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -9986,1 +11216,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10021,1 +11251,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10025,1 +11263,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10066,1 +11304,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10069,1 +11307,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10073,1 +11311,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10104,1 +11350,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10108,1 +11358,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10137,1 +11387,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10140,1 +11394,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10178,1 +11432,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10181,1 +11435,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10185,1 +11439,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10226,1 +11485,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10229,1 +11496,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10233,1 +11500,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10263,1 +11530,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10266,1 +11533,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 56\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10295,1 +11567,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10298,1 +11570,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10339,1 +11615,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10342,1 +11618,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10346,1 +11622,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10375,1 +11656,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10378,1 +11663,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10411,1 +11696,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10414,1 +11699,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 112 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 112\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10443,1 +11737,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10446,1 +11744,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10487,1 +11785,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10490,1 +11788,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10494,1 +11792,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10523,1 +11826,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10526,1 +11829,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10559,1 +11866,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10562,1 +11869,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 144 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 144\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10591,1 +11907,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10594,1 +11914,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10631,1 +11951,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10634,1 +11954,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10638,1 +11958,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 160 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 160\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10679,1 +12004,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10682,1 +12015,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10686,1 +12019,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10715,1 +12048,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10718,1 +12051,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 248 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 248\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10747,1 +12085,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10750,1 +12092,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10791,1 +12133,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10794,1 +12144,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10798,1 +12148,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10839,1 +12189,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10842,1 +12200,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10846,1 +12204,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10875,1 +12233,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10878,1 +12240,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10907,1 +12269,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10910,1 +12276,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10951,1 +12317,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10954,1 +12328,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10958,1 +12332,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10999,1 +12373,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11002,1 +12384,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11006,1 +12388,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11035,1 +12417,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11038,1 +12424,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11067,1 +12453,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11070,1 +12460,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11111,1 +12501,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11114,1 +12512,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11118,1 +12516,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11159,1 +12557,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11162,1 +12568,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11166,1 +12572,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11195,1 +12601,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11198,1 +12608,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11227,1 +12637,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11230,1 +12644,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11271,1 +12685,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11274,1 +12696,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11278,1 +12700,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestDependencyOffsets.java","additions":2062,"deletions":640,"binary":false,"changes":2702,"status":"modified"}]}