{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1882,2 +1882,1 @@\n-                    UNSAFE.putReference(this, FORM_OFFSET, newForm);\n-                    UNSAFE.fullFence();\n+                    UNSAFE.putReferenceRelease(this, FORM_OFFSET, newForm); \/\/ properly publish newForm\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandle.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.util.ArrayList;\n+\n+\/**\n+  * @test\n+  * @bug 8340812\n+  * @summary Verify that LambdaForm customization via MethodHandle::updateForm is thread safe.\n+  * @run main TestLambdaFormCustomization\n+  * @run main\/othervm -Djava.lang.invoke.MethodHandle.CUSTOMIZE_THRESHOLD=0 TestLambdaFormCustomization\n+  *\/\n+public class TestLambdaFormCustomization {\n+\n+    String str = \"test\";\n+    static final String value = \"test\" + 42;\n+\n+    \/\/ Trigger concurrent LambdaForm customization for VarHandle invokers\n+    void test() throws NoSuchFieldException, IllegalAccessException {\n+        VarHandle varHandle = MethodHandles.lookup().in(getClass()).findVarHandle(getClass(), \"str\", String.class);\n+\n+        ArrayList<Thread> threads = new ArrayList<>();\n+        for (int threadIdx = 0; threadIdx < 10; threadIdx++) {\n+            threads.add(new Thread(() -> {\n+                for (int i = 0; i < 1000; i++) {\n+                    varHandle.compareAndExchange(this, value, value);\n+                    varHandle.compareAndExchange(this, value, value);\n+                    varHandle.compareAndExchange(this, value, value);\n+                }\n+            }));\n+        }\n+        threads.forEach(Thread::start);\n+        threads.forEach(t -> {\n+            try {\n+                t.join();\n+            } catch (Throwable e) {\n+                throw new IllegalStateException(e);\n+            }\n+        });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        TestLambdaFormCustomization t = new TestLambdaFormCustomization();\n+        for (int i = 0; i < 4000; ++i) {\n+            t.test();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/TestLambdaFormCustomization.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}