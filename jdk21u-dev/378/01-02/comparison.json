{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import java.nio.file.Paths;\n@@ -41,2 +40,0 @@\n-    private static String javaHome = System.getProperty(\"java.home\");\n-\n@@ -44,0 +41,1 @@\n+        String javaHome = System.getProperty(\"java.home\");\n@@ -48,1 +46,0 @@\n-                    JModSymbolFileMatcher jsfm = new JModSymbolFileMatcher(jmodFile.toString());\n@@ -50,1 +47,1 @@\n-                                    .anyMatch(jsfm::isNativeDebugSymbol)) {\n+                                    .anyMatch(JmodExcludedFiles::isNativeDebugSymbol)) {\n@@ -58,5 +55,4 @@\n-    static class JModSymbolFileMatcher {\n-        private String jmod;\n-\n-        JModSymbolFileMatcher(String jmod) {\n-            this.jmod = jmod;\n+    private static boolean isNativeDebugSymbol(String name) {\n+        int index = name.indexOf(\"\/\");\n+        if (index < 0) {\n+            throw new RuntimeException(\"unexpected entry name: \" + name);\n@@ -64,32 +60,7 @@\n-\n-        boolean isNativeDebugSymbol(String name) {\n-            int index = name.indexOf(\"\/\");\n-            if (index < 0) {\n-                throw new RuntimeException(\"unexpected entry name: \" + name);\n-            }\n-            String section = name.substring(0, index);\n-            if (section.equals(\"lib\") || section.equals(\"bin\")) {\n-                if (OperatingSystem.isMacOS()) {\n-                    String n = name.substring(index + 1);\n-                    int i = n.indexOf(\"\/\");\n-                    if (i != -1) {\n-                        if (n.substring(0, i).endsWith(\".dSYM\")) {\n-                            System.err.println(\"Found symbols in \" + jmod + \": \" + name);\n-                            return true;\n-                        }\n-                    }\n-                }\n-                if (OperatingSystem.isWindows() && name.endsWith(\".pdb\")) {\n-                    \/\/ on Windows we check if we should have public symbols through --with-external-symbols-in-bundles=public (JDK-8237192)\n-                    String strippedpdb = javaHome + \"\/bin\/\" + name.substring(index + 1, name.length() - 4) + \".stripped.pdb\";\n-                    if (!Files.exists(Paths.get(strippedpdb))) {\n-                        System.err.println(\"Found symbols in \" + jmod + \": \" + name +\n-                                \". No stripped pdb file \" + strippedpdb + \" exists.\");\n-                        return true;\n-                    }\n-                }\n-                if (name.endsWith(\".diz\")\n-                        || name.endsWith(\".debuginfo\")\n-                        || name.endsWith(\".map\")) {\n-                    System.err.println(\"Found symbols in \" + jmod + \": \" + name);\n-                    return true;\n+        String section = name.substring(0, index);\n+        if (section.equals(\"lib\") || section.equals(\"bin\")) {\n+            if (OperatingSystem.isMacOS()) {\n+                String n = name.substring(index+1);\n+                int i = n.indexOf(\"\/\");\n+                if (i != -1) {\n+                    return n.substring(0, i).endsWith(\".dSYM\");\n@@ -98,1 +69,4 @@\n-            return false;\n+            return name.endsWith(\".diz\")\n+                    || name.endsWith(\".debuginfo\")\n+                    || name.endsWith(\".map\")\n+                    || name.endsWith(\".pdb\");\n@@ -100,0 +74,1 @@\n+        return false;\n","filename":"test\/jdk\/jdk\/modules\/etc\/JmodExcludedFiles.java","additions":18,"deletions":43,"binary":false,"changes":61,"status":"modified"}]}