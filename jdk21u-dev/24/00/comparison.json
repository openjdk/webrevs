{"files":[{"patch":"@@ -4238,0 +4238,6 @@\n+      }\n+\n+      assert(current->vect_type() != nullptr, \"must have vector type\");\n+      if (current->vect_type() != last_ur->vect_type()) {\n+        \/\/ Reductions do not have the same vector type (length and element type).\n+        break; \/\/ Chain traversal fails.\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n- * @test\n- * @bug 8302652\n+ * @test id=Vanilla-Unaligned\n+ * @bug 8302652 8314612\n@@ -28,0 +28,1 @@\n+ * @requires vm.compiler2.enabled\n@@ -29,1 +30,28 @@\n- * @run driver compiler.loopopts.superword.TestUnorderedReduction\n+ * @run driver compiler.loopopts.superword.TestUnorderedReduction Vanilla-Unaligned\n+ *\/\n+\n+\/**\n+ * @test id=Vanilla-Aligned\n+ * @bug 8302652 8314612\n+ * @summary Special test cases for PhaseIdealLoop::move_unordered_reduction_out_of_loop\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestUnorderedReduction Vanilla-Aligned\n+ *\/\n+\n+\/**\n+ * @test id=MaxVectorSize16-Unaligned\n+ * @bug 8302652 8314612\n+ * @summary Special test cases for PhaseIdealLoop::move_unordered_reduction_out_of_loop\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestUnorderedReduction MaxVectorSize16-Unaligned\n+ *\/\n+\n+\/**\n+ * @test id=MaxVectorSize32-Aligned\n+ * @bug 8302652 8314612\n+ * @summary Special test cases for PhaseIdealLoop::move_unordered_reduction_out_of_loop\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestUnorderedReduction MaxVectorSize32-Aligned\n@@ -41,3 +69,16 @@\n-        TestFramework.runWithFlags(\"-Xbatch\",\n-                                   \"-XX:CompileCommand=compileonly,compiler.loopopts.superword.TestUnorderedReduction::test*\",\n-                                   \"-XX:MaxVectorSize=16\");\n+        TestFramework framework = new TestFramework(TestUnorderedReduction.class);\n+        framework.addFlags(\"-Xbatch\",\n+                           \"-XX:CompileCommand=compileonly,compiler.loopopts.superword.TestUnorderedReduction::test*\");\n+\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"Test requires exactly one argument!\");\n+        }\n+\n+        switch (args[0]) {\n+            case \"Vanilla-Unaligned\"         -> { framework.addFlags(\"-XX:-AlignVector\"); }\n+            case \"Vanilla-Aligned\"           -> { framework.addFlags(\"-XX:+AlignVector\"); }\n+            case \"MaxVectorSize16-Unaligned\" -> { framework.addFlags(\"-XX:-AlignVector\", \"-XX:MaxVectorSize=16\"); }\n+            case \"MaxVectorSize32-Aligned\"   -> { framework.addFlags(\"-XX:+AlignVector\", \"-XX:MaxVectorSize=32\"); }\n+            default -> { throw new RuntimeException(\"Test argument not recognized: \" + args[0]); }\n+        }\n+        framework.start();\n@@ -81,0 +122,1 @@\n+        applyIfAnd = {\"MaxVectorSize\", \"=16\", \"AlignVector\", \"false\"},\n@@ -121,0 +163,1 @@\n+        applyIfAnd = {\"MaxVectorSize\", \"=16\", \"AlignVector\", \"false\"},\n@@ -156,0 +199,1 @@\n+        applyIfAnd = {\"MaxVectorSize\", \"=16\", \"AlignVector\", \"false\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestUnorderedReduction.java","additions":50,"deletions":6,"binary":false,"changes":56,"status":"modified"}]}