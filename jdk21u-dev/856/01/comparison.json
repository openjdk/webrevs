{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import javax.lang.model.type.TypeKind;\n@@ -188,0 +189,2 @@\n+        if (te.asType().getKind() == TypeKind.ERROR)\n+            return Kind.OTHER;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ToolEnvironment.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug      4632553 4973607 8026567\n+ * @bug      4632553 4973607 8026567 8242564\n@@ -31,1 +31,3 @@\n- * @library  ..\/..\/lib\n+ *           Make sure class tree handles undefined types in the class\n+ *           hierarchy.\n+ * @library  \/tools\/lib ..\/..\/lib\n@@ -33,1 +35,1 @@\n- * @build    javadoc.tester.*\n+ * @build    toolbox.ToolBox javadoc.tester.*\n@@ -37,0 +39,3 @@\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n@@ -38,0 +43,1 @@\n+import toolbox.ToolBox;\n@@ -41,0 +47,2 @@\n+    private final ToolBox tb = new ToolBox();\n+\n@@ -46,0 +54,45 @@\n+    \/**\n+     * Given badpkg package containing class ChildClass with UndefinedClass\n+     *       base class, implementing UndefinedInterface and a defined\n+     *       interface\n+     * When the javadoc is generated with '--ignore-source-errors option'\n+     * Then javadoc exits successfully\n+     * And generates html for the ChildClass with UndefinedClass base class\n+     * And UndefinedInterface is not present in html\n+     *\/\n+    @Test\n+    public void testBadPkg(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package badpkg;\n+                    public class ChildClass extends UndefinedClass\n+                        implements UndefinedInterface, Iterable {\n+\n+                    }\n+                    \"\"\"\n+        );\n+\n+        javadoc(\"--ignore-source-errors\",\n+                \"-d\", base.resolve(\"badout\").toString(),\n+                \"--no-platform-links\",\n+                \"-sourcepath\", src.toString(),\n+                \"badpkg\");\n+\n+\n+        checkExit(Exit.OK);\n+        checkOutput(\"badpkg\/package-tree.html\", true,\n+                \"\"\"\n+                    <li class=\"circle\">badpkg.<a href=\"ChildClass.html\" class=\"type-name-link\" title=\"\\\n+                    class in badpkg\">ChildClass<\/a> (implements java.lang.Iterable&lt;T&gt;)<\/li>\n+                    \"\"\");\n+        checkOutput(\"badpkg\/ChildClass.html\", true,\n+                \"\"\"\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span>\\\n+                    <span class=\"element-name type-name-label\">ChildClass<\/span>\n+                    <span class=\"extends-implements\">extends UndefinedClass\n+                    implements java.lang.Iterable<\/span><\/div>\n+                    \"\"\");\n+        checkOutput(\"badpkg\/ChildClass.html\", false, \"UndefinedInterface\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testClassTree\/TestClassTree.java","additions":57,"deletions":4,"binary":false,"changes":61,"status":"modified"}]}