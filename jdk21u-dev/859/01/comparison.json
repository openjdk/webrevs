{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,2 +118,3 @@\n-                                       \"|(GC triggered before VM initialization completed)\" +\n-                                       \"|(java.lang.OutOfMemoryError: Java heap space))\";\n+                                     \"|(GC triggered before VM initialization completed)\" +\n+                                     \"|(java.lang.OutOfMemoryError: Java heap space)\" +\n+                                     \"|(Initial heap size set to a larger value than the maximum heap size))\";\n@@ -121,0 +122,1 @@\n+                    out.shouldNotHaveFatalError();\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestParallelGCWithCDS.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+    private static final String FATAL_ERROR_PAT = \"# A fatal error has been detected.*\";\n+\n@@ -852,0 +854,7 @@\n+    \/**\n+     * Assert that we did not crash with a hard VM error (generating an hs_err_pidXXX.log)\n+     *\/\n+    public void shouldNotHaveFatalError() {\n+        shouldNotMatch(FATAL_ERROR_PAT);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}