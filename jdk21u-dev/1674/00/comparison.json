{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -708,0 +708,1 @@\n+            populateAttributes(entry);\n@@ -788,0 +789,1 @@\n+        populateAttributes(entry);\n@@ -991,0 +993,1 @@\n+        populateAttributes(certEntry);\n@@ -1267,1 +1270,1 @@\n-        return Collections.unmodifiableSet(new HashSet<>(getAttributes(entry)));\n+        return Collections.unmodifiableSet(new HashSet<>(entry.attributes));\n@@ -1316,1 +1319,1 @@\n-                        ((CertEntry)entry).cert, getAttributes(entry));\n+                        ((CertEntry)entry).cert, entry.attributes);\n@@ -1338,1 +1341,1 @@\n-                        getAttributes(entry));\n+                        entry.attributes);\n@@ -1343,1 +1346,1 @@\n-                        getAttributes(entry));\n+                        entry.attributes);\n@@ -1432,1 +1435,1 @@\n-     * Assemble the entry attributes\n+     * Populate the entry with additional attributes used by the implementation.\n@@ -1434,1 +1437,1 @@\n-    private Set<KeyStore.Entry.Attribute> getAttributes(Entry entry) {\n+    private void populateAttributes(Entry entry) {\n@@ -1467,2 +1470,0 @@\n-\n-        return entry.attributes;\n@@ -2525,0 +2526,1 @@\n+                populateAttributes(entry);\n@@ -2546,0 +2548,1 @@\n+                    populateAttributes(certEntry);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309667\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.tools.keytool\n+ *          java.base\/sun.security.x509\n+ * @summary ensures attributes reading is correct\n+ *\/\n+import jdk.test.lib.Asserts;\n+import sun.security.tools.keytool.CertAndKeyGen;\n+import sun.security.x509.X500Name;\n+\n+import javax.crypto.EncryptedPrivateKeyInfo;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.security.KeyStore;\n+import java.security.PKCS12Attribute;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.Set;\n+\n+public class AttributesCorrectness {\n+\n+    static final char[] PASSWORD = \"changeit\".toCharArray();\n+    static final String LOCAL_KEY_ID = \"1.2.840.113549.1.9.21\";\n+    static final String TRUSTED_KEY_USAGE = \"2.16.840.1.113894.746875.1.1\";\n+    static final String FRIENDLY_NAME = \"1.2.840.113549.1.9.20\";\n+\n+    static CertAndKeyGen cag;\n+    static KeyStore ks;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        ks = KeyStore.getInstance(\"pkcs12\");\n+        ks.load(null, null);\n+        cag = new CertAndKeyGen(\"Ed25519\", \"Ed25519\");\n+\n+        cag.generate(-1);\n+        ks.setCertificateEntry(\"c\", ss(\"c\"));\n+\n+        cag.generate(-1);\n+        ks.setKeyEntry(\"d\", cag.getPrivateKey(), PASSWORD, chain(\"d\"));\n+\n+        cag.generate(-1);\n+        ks.setKeyEntry(\"e\", new EncryptedPrivateKeyInfo(\n+                \"PBEWithMD5AndDES\", new byte[100]).getEncoded(), chain(\"e\"));\n+\n+        var f = new KeyStore.SecretKeyEntry(new SecretKeySpec(new byte[16], \"AES\"),\n+                Set.of(new PKCS12Attribute(\"1.2.3\", \"456\")));\n+        ks.setEntry(\"f\", f, new KeyStore.PasswordProtection(PASSWORD));\n+\n+        cag.generate(-1);\n+        var g = new KeyStore.TrustedCertificateEntry(ss(\"g\"),\n+                Set.of(new PKCS12Attribute(\"1.2.4\", \"456\")));\n+        ks.setEntry(\"g\", g, null);\n+\n+        cag.generate(-1);\n+        var h = new KeyStore.PrivateKeyEntry(cag.getPrivateKey(), chain(\"h\"),\n+                Set.of(new PKCS12Attribute(\"1.2.5\", \"456\")));\n+        ks.setEntry(\"h\", h, new KeyStore.PasswordProtection(PASSWORD));\n+\n+        var i = new KeyStore.SecretKeyEntry(new SecretKeySpec(new byte[16], \"AES\"));\n+        ks.setEntry(\"i\", i, new KeyStore.PasswordProtection(PASSWORD));\n+\n+        cag.generate(-1);\n+        var j = new KeyStore.TrustedCertificateEntry(ss(\"g\"));\n+        ks.setEntry(\"j\", j, null);\n+\n+        cag.generate(-1);\n+        var k = new KeyStore.PrivateKeyEntry(cag.getPrivateKey(), chain(\"h\"));\n+        ks.setEntry(\"k\", k, new KeyStore.PasswordProtection(PASSWORD));\n+        check();\n+\n+        var bout = new ByteArrayOutputStream();\n+        ks.store(bout, PASSWORD);\n+        ks.load(new ByteArrayInputStream(bout.toByteArray()), PASSWORD);\n+        check();\n+    }\n+\n+    static X509Certificate ss(String alias) throws Exception {\n+        return cag.getSelfCertificate(new X500Name(\"CN=\" + alias), 100);\n+    }\n+\n+    static Certificate[] chain(String alias) throws Exception {\n+        return new Certificate[] { ss(alias) };\n+    }\n+\n+    static Void check() {\n+        checkAttributes(\"c\", TRUSTED_KEY_USAGE);\n+        checkAttributes(\"d\", LOCAL_KEY_ID);\n+        checkAttributes(\"e\", LOCAL_KEY_ID);\n+        checkAttributes(\"f\", LOCAL_KEY_ID, \"1.2.3\");\n+        checkAttributes(\"g\", TRUSTED_KEY_USAGE, \"1.2.4\");\n+        checkAttributes(\"h\", LOCAL_KEY_ID, \"1.2.5\");\n+        checkAttributes(\"i\", LOCAL_KEY_ID);\n+        checkAttributes(\"j\", TRUSTED_KEY_USAGE);\n+        checkAttributes(\"k\", LOCAL_KEY_ID);\n+        return null;\n+    }\n+\n+    static void checkAttributes(String alias, String... keys) {\n+        try {\n+            var attrs = keys[0].equals(LOCAL_KEY_ID)\n+                    ? ks.getAttributes(alias)\n+                    : ks.getEntry(alias, null).getAttributes();\n+            Asserts.assertEQ(attrs.size(), keys.length + 1);\n+            Asserts.assertTrue(\n+                    attrs.contains(new PKCS12Attribute(FRIENDLY_NAME, alias)));\n+            for (var attr : attrs) {\n+                var name = attr.getName();\n+                if (name.equals(FRIENDLY_NAME)) continue;\n+                var found = false;\n+                for (var key : keys) {\n+                    if (key.equals(name)) {\n+                        found = true;\n+                        break;\n+                    }\n+                }\n+                Asserts.assertTrue(found, name);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/AttributesCorrectness.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309667\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.tools.keytool\n+ *          java.base\/sun.security.x509\n+ * @summary ensures attributes reading is thread safe\n+ *\/\n+import sun.security.tools.keytool.CertAndKeyGen;\n+import sun.security.x509.X500Name;\n+\n+import java.security.KeyStore;\n+import java.security.PKCS12Attribute;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class AttributesMultiThread {\n+\n+    static KeyStore ks;\n+    static AtomicBoolean ab = new AtomicBoolean();\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        ks = KeyStore.getInstance(\"pkcs12\");\n+        ks.load(null, null);\n+        var cak = new CertAndKeyGen(\"ed25519\", \"ed25519\");\n+        cak.generate(\"ed25519\");\n+        var c = cak.getSelfCertificate(new X500Name(\"CN=A\"), 1000);\n+        Set<KeyStore.Entry.Attribute> ss = Set.of(\n+                new PKCS12Attribute(\"1.1.1.1\", \"b\"),\n+                new PKCS12Attribute(\"1.1.1.2\", \"b\"),\n+                new PKCS12Attribute(\"1.1.1.3\", \"b\"),\n+                new PKCS12Attribute(\"1.1.1.4\", \"b\"),\n+                new PKCS12Attribute(\"1.1.1.5\", \"b\"),\n+                new PKCS12Attribute(\"1.1.1.6\", \"b\"),\n+                new PKCS12Attribute(\"1.1.1.7\", \"b\"),\n+                new PKCS12Attribute(\"1.1.1.8\", \"b\"),\n+                new PKCS12Attribute(\"1.1.1.9\", \"b\"),\n+                new PKCS12Attribute(\"1.1.1.10\", \"b\"));\n+        ks.setEntry(\"a\", new KeyStore.TrustedCertificateEntry(c, ss), null);\n+\n+        var x = Executors.newVirtualThreadPerTaskExecutor();\n+        for (int i = 0; i < 1000; i++) {\n+            x.submit(AttributesMultiThread::check);\n+        }\n+        x.shutdown();\n+        x.awaitTermination(1, TimeUnit.MINUTES);\n+\n+        if (ab.get()) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    static void check() {\n+        for (int i = 0; i < 100; i++) {\n+            var s = get();\n+            if (s.size() != 12) { \/\/ 10 presets and 2 added by PKCS12\n+                ab.set(true);\n+                throw new RuntimeException();\n+            }\n+        }\n+    }\n+\n+    static Set<?> get() {\n+        try {\n+            return ks.getAttributes(\"a\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/AttributesMultiThread.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}