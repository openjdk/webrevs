{"files":[{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4696499\n+ * @summary new tree model asked about nodes of previous tree model\n+ * @run main bug4696499\n+ *\/\n+\n+import java.util.ArrayList;\n+\n+import javax.swing.JTree;\n+import javax.swing.event.TreeModelListener;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.TreeModel;\n+import javax.swing.tree.TreeNode;\n+import javax.swing.tree.TreePath;\n+\n+public class bug4696499 {\n+    public static void main(String[] args) throws Exception {\n+        JTree tree = new JTree();\n+        TreeModel model = new MyModel();\n+        tree.setModel(model);\n+\n+        tree.setSelectionRow(1);\n+        model = new MyModel();\n+        tree.setModel(model);\n+    }\n+}\n+\n+class MyModel implements TreeModel {\n+    private Object root = \"Root\";\n+    private ArrayList listeners = new ArrayList();\n+    private TreeNode ONE;\n+    static int next = 1;\n+\n+    MyModel() {\n+        ONE = new DefaultMutableTreeNode(next);\n+        next *= 2;\n+    }\n+\n+    public void addTreeModelListener(TreeModelListener l) {\n+        listeners.add(l);\n+    }\n+\n+    public void removeTreeModelListener(TreeModelListener l) {\n+        listeners.remove(l);\n+    }\n+\n+    public void valueForPathChanged(TreePath tp, Object newValue) {\n+    }\n+\n+    public Object getRoot() {\n+        return root;\n+    }\n+\n+    public boolean isLeaf(Object o) {\n+        return o == ONE;\n+    }\n+\n+    public int getIndexOfChild(Object parent, Object child) {\n+        if (parent != root || child != ONE) {\n+            throw new RuntimeException(\"This method is called with the child \" +\n+                    \"of the previous tree model\");\n+        }\n+        return 0;\n+    }\n+\n+    public int getChildCount(Object o) {\n+        if (o == root) {\n+            return 1;\n+        }\n+        if (o == ONE) {\n+            return 0;\n+        }\n+        throw new IllegalArgumentException(o.toString());\n+    }\n+\n+    public Object getChild(Object o, int index) {\n+        if (o != root || index != 0) {\n+            throw new IllegalArgumentException(o + \", \" + index);\n+        }\n+        return ONE;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/bug4696499.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 5039542\n+ * @summary JTree's setToolTipText() doesn't work\n+ * @run main bug5039542\n+ *\/\n+\n+import javax.swing.JTree;\n+\n+public class bug5039542 {\n+    public static void main(String[] args) throws Exception {\n+        final String exampleStr = \"TEST\";\n+        JTree tree = new JTree();\n+        tree.setToolTipText(exampleStr);\n+        if (tree.getToolTipText(null) != exampleStr) {\n+            throw new RuntimeException(\"The default JTree tooltip text \" +\n+                    \"have to be used if renderer doesn't provide it.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/bug5039542.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4546474\n+ * @summary JScrollPane's always-visible scrollbars not updated when\n+ * viewport is replaced\n+ * @run main bug4546474\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Robot;\n+\n+import javax.swing.JPanel;\n+import javax.swing.JScrollBar;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4546474 {\n+    static JScrollPane scrollpane;\n+    static JScrollBar sbar;\n+    static volatile boolean viewChanged;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            JPanel panel = new JPanel();\n+            panel.setPreferredSize(new Dimension(500, 500));\n+            scrollpane = new JScrollPane(panel,\n+                    JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n+                    JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n+            sbar = scrollpane.getVerticalScrollBar();\n+        });\n+\n+        Robot robot = new Robot();\n+        robot.delay(500);\n+        SwingUtilities.invokeAndWait(() -> {\n+            sbar.addAdjustmentListener(e -> viewChanged = true);\n+            scrollpane.setViewportView(null);\n+        });\n+        robot.delay(500);\n+        if (!viewChanged) {\n+            viewChanged = true;\n+        }\n+        robot.delay(500);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (sbar.getVisibleAmount() > 0) {\n+                throw new RuntimeException(\"Vertical scrollbar is not \" +\n+                        \"updated when viewport is replaced\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JViewport\/bug4546474.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4677611\n+ * @summary JViewport sets Opaque after UpdateUI (prevents UI delegates\n+ * to determine look)\n+ * @run main bug4677611\n+ *\/\n+\n+import java.awt.Color;\n+\n+import javax.swing.JScrollPane;\n+import javax.swing.JViewport;\n+\n+public class bug4677611 {\n+    public static void main(String[] args) throws Exception {\n+        JScrollPane sp = new JScrollPane();\n+        JViewport vp = new MyViewport();\n+        vp.setBackground(Color.blue);\n+        sp.setViewport(vp);\n+\n+        if (vp.isOpaque()) {\n+            throw new RuntimeException(\"JViewport shouldn't set Opaque \" +\n+                    \"after update the UI\");\n+        }\n+    }\n+\n+    static class MyViewport extends JViewport {\n+        public void updateUI() {\n+            setOpaque(false);\n+            super.updateUI();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JViewport\/bug4677611.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4345798\n+ * @summary Tests if Pressing enter to dismiss menu works when a JRootPane\n+ * has a default button.\n+ * @key headful\n+ * @run main bug4345798\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRootPane;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4345798 {\n+    private static JFrame f;\n+    private static JButton b;\n+    private static JMenu menu;\n+    private static volatile boolean passed = true;\n+    private static volatile Point p;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"bug4345798\");\n+                JMenuBar mbar = new JMenuBar();\n+                JMenuItem item = new JMenuItem(\"Open...\");\n+                menu = new JMenu(\"File\");\n+                item.addActionListener(new TestActionListener());\n+                menu.add(item);\n+                mbar.add(menu);\n+\n+                f.setJMenuBar(mbar);\n+\n+                b = new JButton(\"Default\");\n+                b.addActionListener(new TestActionListener());\n+                f.getContentPane().add(b);\n+                JRootPane rp = f.getRootPane();\n+                rp.setDefaultButton(b);\n+\n+                f.setSize(200, 200);\n+                f.setLocationRelativeTo(null);\n+                f.setVisible(true);\n+                b.requestFocus();\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> p = menu.getLocationOnScreen());\n+            robot.mouseMove(p.x, p.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.keyPress(KeyEvent.VK_F10);\n+            robot.keyRelease(KeyEvent.VK_F10);\n+\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+\n+        if (!passed) {\n+            throw new RuntimeException(\"Test failed.\");\n+        }\n+    }\n+\n+    static class TestActionListener implements ActionListener {\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            if (e.getSource() == b) {\n+                passed = false;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/KeyboardManager\/bug4345798.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}