{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main Bug6989440\n+ * @run junit Bug6989440\n@@ -40,0 +40,2 @@\n+import org.junit.jupiter.api.Test;\n+\n@@ -44,1 +46,5 @@\n-    public static void main(String[] args) throws Exception {\n+    \/* Multiple instances of Locale Service Provider Pool calling\n+     * getAvailableLocales() should not throw ConcurrentModificationException\n+     *\/\n+    @Test\n+    public void multiThreadAccessTest() throws Exception {\n@@ -61,4 +67,0 @@\n-        public TestThread(Class<? extends LocaleServiceProvider> providerClass) {\n-            cls = providerClass;\n-        }\n-\n@@ -68,4 +70,4 @@\n-                case 0 : cls = LocaleNameProvider.class; break;\n-                case 1 : cls = TimeZoneNameProvider.class; break;\n-                case 2 : cls = DateFormatProvider.class; break;\n-                default : throw new AssertionError(\"Should not reach here\");\n+                case 0 -> cls = LocaleNameProvider.class;\n+                case 1 -> cls = TimeZoneNameProvider.class;\n+                case 2 -> cls = DateFormatProvider.class;\n+                default -> throw new AssertionError(\"Should not reach here\");\n","filename":"test\/jdk\/java\/util\/Locale\/Bug6989440.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit Bug8035133\n@@ -34,0 +35,1 @@\n+import java.util.stream.Stream;\n@@ -35,0 +37,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -36,42 +41,1 @@\n-public class Bug8035133 {\n-\n-    private static boolean err = false;\n-\n-    public static void main(String[] args) {\n-\n-        \/\/ checking Locale.lookup with de-ch;q=0\n-        checkLookup(\"en;q=0.1, *-ch;q=0.5, de-ch;q=0\",\n-                \"de-ch, en, fr-ch\", \"fr-CH\");\n-\n-        \/* checking Locale.lookup with *;q=0 '*' should be ignored\n-         * in lookup\n-         *\/\n-        checkLookup(\"en;q=0.1, *-ch;q=0.5, *;q=0\",\n-                \"de-ch, en, fr-ch\", \"de-CH\");\n-\n-        \/\/ checking Locale.filter with fr-ch;q=0 in BASIC_FILTERING\n-        checkFilter(\"en;q=0.1, fr-ch;q=0.0, de-ch;q=0.5\",\n-                \"de-ch, en, fr-ch\", \"de-CH, en\");\n-\n-        \/\/ checking Locale.filter with *;q=0 in BASIC_FILTERING\n-        checkFilter(\"de-ch;q=0.6, *;q=0\", \"de-ch, fr-ch\", \"\");\n-\n-        \/\/ checking Locale.filter with *;q=0 in BASIC_FILTERING\n-        checkFilter(\"de-ch;q=0.6, de;q=0\", \"de-ch\", \"\");\n-\n-        \/\/ checking Locale.filter with *;q=0.6, en;q=0 in BASIC_FILTERING\n-        checkFilter(\"*;q=0.6, en;q=0\", \"de-ch, hi-in, en\", \"de-CH, hi-IN\");\n-\n-        \/\/ checking Locale.filter with de-ch;q=0 in EXTENDED_FILTERING\n-        checkFilter(\"en;q=0.1, *-ch;q=0.5, de-ch;q=0\",\n-                \"de-ch, en, fr-ch\", \"fr-CH, en\");\n-\n-        \/* checking Locale.filter with *-ch;q=0 in EXTENDED_FILTERING which\n-         * must make filter to return \"\" empty or no match\n-         *\/\n-        checkFilter(\"de-ch;q=0.5, *-ch;q=0\", \"de-ch, fr-ch\", \"\");\n-\n-        \/* checking Locale.filter with *;q=0 in EXTENDED_FILTERING which\n-         * must make filter to return \"\" empty or no match\n-         *\/\n-        checkFilter(\"*-ch;q=0.5, *;q=0\", \"de-ch, fr-ch\", \"\");\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -79,11 +43,1 @@\n-        \/* checking Locale.filter with *;q=0.6, *-Latn;q=0 in\n-         * EXTENDED_FILTERING\n-         *\/\n-        checkFilter(\"*;q=0.6, *-Latn;q=0\", \"de-ch, hi-in, en-Latn\",\n-                \"de-CH, hi-IN\");\n-\n-        if (err) {\n-            throw new RuntimeException(\"[LocaleMatcher method(s) failed]\");\n-        }\n-\n-    }\n+public class Bug8035133 {\n@@ -91,1 +45,4 @@\n-    private static void checkLookup(String ranges, String tags,\n+    \/\/ Ensure weights with 'q=0' work as expected during lookup\n+    @ParameterizedTest\n+    @MethodSource(\"lookupProvider\")\n+    public void lookupTest(String ranges, String tags,\n@@ -98,9 +55,3 @@\n-        String actualLocale\n-                = loc.toLanguageTag();\n-\n-        if (!actualLocale.equals(expectedLocale)) {\n-            System.err.println(\"Locale.lookup failed with ranges: \" + ranges\n-                    + \" Expected: \" + expectedLocale\n-                    + \" Actual: \" + actualLocale);\n-            err = true;\n-        }\n+        String actualLocale = loc.toLanguageTag();\n+        assertEquals(expectedLocale, actualLocale);\n+    }\n@@ -108,0 +59,9 @@\n+    private static Stream<Arguments> lookupProvider() {\n+        return Stream.of(\n+                \/\/ checking Locale.lookup with de-ch;q=0\n+                Arguments.of(\"en;q=0.1, *-ch;q=0.5, de-ch;q=0\",\n+                        \"de-ch, en, fr-ch\", \"fr-CH\"),\n+                \/\/ checking Locale.lookup with *;q=0 '*' should be ignored in lookup\n+                Arguments.of(\"en;q=0.1, *-ch;q=0.5, *;q=0\",\n+                        \"de-ch, en, fr-ch\", \"de-CH\")\n+        );\n@@ -110,1 +70,4 @@\n-    private static void checkFilter(String ranges, String tags,\n+    \/\/ Ensure weights with 'q=0' work as expected during filtering\n+    @ParameterizedTest\n+    @MethodSource(\"filterProvider\")\n+    public void filterTest(String ranges, String tags,\n@@ -118,0 +81,2 @@\n+        assertEquals(expectedLocales, actualLocales);\n+    }\n@@ -119,7 +84,28 @@\n-        if (!actualLocales.equals(expectedLocales)) {\n-            System.err.println(\"Locale.filter failed with ranges: \" + ranges\n-                    + \" Expected: \" + expectedLocales\n-                    + \" Actual: \" + actualLocales);\n-            err = true;\n-        }\n-\n+    private static Stream<Arguments> filterProvider() {\n+        return Stream.of(\n+                \/\/ checking Locale.filter with fr-ch;q=0 in BASIC_FILTERING\n+                Arguments.of(\"en;q=0.1, fr-ch;q=0.0, de-ch;q=0.5\",\n+                        \"de-ch, en, fr-ch\", \"de-CH, en\"),\n+                \/\/ checking Locale.filter with *;q=0 in BASIC_FILTERING\n+                Arguments.of(\"de-ch;q=0.6, *;q=0\", \"de-ch, fr-ch\", \"\"),\n+                \/\/ checking Locale.filter with *;q=0 in BASIC_FILTERING\n+                Arguments.of(\"de-ch;q=0.6, de;q=0\", \"de-ch\", \"\"),\n+                \/\/ checking Locale.filter with *;q=0.6, en;q=0 in BASIC_FILTERING\n+                Arguments.of(\"*;q=0.6, en;q=0\", \"de-ch, hi-in, en\", \"de-CH, hi-IN\"),\n+                \/\/ checking Locale.filter with de-ch;q=0 in EXTENDED_FILTERING\n+                Arguments.of(\"en;q=0.1, *-ch;q=0.5, de-ch;q=0\",\n+                        \"de-ch, en, fr-ch\", \"fr-CH, en\"),\n+                \/* checking Locale.filter with *-ch;q=0 in EXTENDED_FILTERING which\n+                 * must make filter to return \"\" empty or no match\n+                 *\/\n+                Arguments.of(\"de-ch;q=0.5, *-ch;q=0\", \"de-ch, fr-ch\", \"\"),\n+                \/* checking Locale.filter with *;q=0 in EXTENDED_FILTERING which\n+                 * must make filter to return \"\" empty or no match\n+                 *\/\n+                Arguments.of(\"*-ch;q=0.5, *;q=0\", \"de-ch, fr-ch\", \"\"),\n+                \/* checking Locale.filter with *;q=0.6, *-Latn;q=0 in\n+                 * EXTENDED_FILTERING\n+                 *\/\n+                Arguments.of(\"*;q=0.6, *-Latn;q=0\", \"de-ch, hi-in, en-Latn\",\n+                        \"de-CH, hi-IN\")\n+        );\n@@ -158,1 +144,0 @@\n-\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8035133.java","additions":58,"deletions":73,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main Bug8135061\n+ * @run junit Bug8135061\n@@ -38,1 +38,4 @@\n-public class Bug8135061 {\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -40,1 +43,1 @@\n-    public static void main(String[] args) {\n+public class Bug8135061 {\n@@ -42,4 +45,6 @@\n-        \/* lookup should run without throwing any exception and\n-         * return null as the language range does not match with the language\n-         * tag\n-         *\/\n+    \/**\n+     * Lookup should run without throwing any exception and return null as\n+     * the language range does not match with the language tag.\n+     *\/\n+    @Test\n+    public void lookupReturnNullTest() {\n@@ -48,1 +53,0 @@\n-\n@@ -51,4 +55,1 @@\n-            if (match != null) {\n-                throw new RuntimeException(\"Locale.lookup returned non-null: \"\n-                        + match);\n-            }\n+            assertNull(match);\n@@ -60,0 +61,1 @@\n+    }\n@@ -61,6 +63,8 @@\n-        \/* lookup should run without throwing any exception and\n-         * return \"nv\" as the matching tag\n-         *\/\n-        ranges = LanguageRange.parse(\"i-navajo\");\n-        locales = Collections.singleton(Locale.of(\"nv\"));\n-\n+    \/**\n+     * Lookup should run without throwing any exception and return \"nv\"\n+     * as the matching tag.\n+     *\/\n+    @Test\n+    public void lookupReturnValueTest() {\n+        List<LanguageRange> ranges = LanguageRange.parse(\"i-navajo\");\n+        Collection<Locale> locales = Collections.singleton(Locale.of(\"nv\"));\n@@ -69,4 +73,1 @@\n-            if (!match.toLanguageTag().equals(\"nv\")) {\n-                throw new RuntimeException(\"Locale.lookup returned unexpected\"\n-                        + \" result: \" + match);\n-            }\n+            assertEquals(match.toLanguageTag(), \"nv\");\n@@ -78,1 +79,0 @@\n-\n@@ -80,1 +80,0 @@\n-\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8135061.java","additions":24,"deletions":25,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @run main Bug8159420\n+ * @run junit\/othervm -Duser.language=tr -Duser.country=TR Bug8159420\n@@ -38,0 +38,3 @@\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n@@ -43,3 +46,2 @@\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n@@ -49,3 +51,4 @@\n-public class Bug8159420 {\n-\n-    static boolean err = false;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -53,1 +56,4 @@\n-    public static void main(String[] args) {\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -55,21 +61,1 @@\n-        Locale origLocale = null;\n-        try {\n-\n-            origLocale = Locale.getDefault();\n-            Locale.setDefault(Locale.of(\"tr\", \"TR\"));\n-            testParse();\n-            testFilter(EXTENDED_FILTERING);\n-            testFilter(AUTOSELECT_FILTERING);\n-            testLookup();\n-            testMapEquivalents();\n-\n-            if (err) {\n-                throw new RuntimeException(\"[LocaleMatcher method(s) in turkish\"\n-                        + \" locale failed]\");\n-            }\n-\n-        } finally {\n-            Locale.setDefault(origLocale);\n-        }\n-\n-    }\n+public class Bug8159420 {\n@@ -77,2 +63,3 @@\n-    \/* Before the fix, the testParse() method was throwing\n-     * IllegalArgumentException in Turkish Locale\n+    \/*\n+     * Ensure parse() does not throw IllegalArgumentException for the Turkish Locale\n+     * with the given input.\n@@ -80,1 +67,2 @@\n-    private static void testParse() {\n+    @Test\n+    public void parseTest() {\n@@ -82,7 +70,1 @@\n-        try {\n-            LanguageRange.parse(ranges);\n-        } catch (Exception ex) {\n-            System.err.println(\"[testParse() failed on range string: \"\n-                    + ranges + \"] due to \"+ex);\n-            err = true;\n-        }\n+        assertDoesNotThrow(() -> LanguageRange.parse(ranges));\n@@ -91,2 +73,3 @@\n-    \/* Before the fix, the testFilter() method was returning empty list in\n-     * Turkish Locale\n+    \/*\n+     * Ensure filter() does not return empty list for the Turkish Locale\n+     * with the given input.\n@@ -94,2 +77,3 @@\n-    private static void testFilter(FilteringMode mode) {\n-\n+    @ParameterizedTest\n+    @MethodSource(\"modes\")\n+    public void filterTest(FilteringMode mode) {\n@@ -102,0 +86,2 @@\n+        assertEquals(expectedLocales, actualLocales);\n+    }\n@@ -103,5 +89,5 @@\n-        if (!expectedLocales.equals(actualLocales)) {\n-            System.err.println(\"testFilter(\" + mode + \") failed on language ranges:\"\n-                    + \" [\" + ranges + \"] and language tags: [\" + tags + \"]\");\n-            err = true;\n-        }\n+    private static Stream<FilteringMode> modes() {\n+        return Stream.of(\n+                EXTENDED_FILTERING,\n+                AUTOSELECT_FILTERING\n+        );\n@@ -110,2 +96,3 @@\n-    \/* Before the fix, the testLookup() method was returning null in Turkish\n-     * Locale\n+    \/*\n+     * Ensure lookup() does not return null for the Turkish Locale with\n+     * the given input.\n@@ -113,2 +100,2 @@\n-    private static void testLookup() {\n-        boolean error = false;\n+    @Test\n+    public void lookupTest() {\n@@ -119,10 +106,3 @@\n-        Locale actualLocale\n-                = Locale.lookup(priorityList, localeList);\n-        String actualLocaleString = \"\";\n-\n-        if (actualLocale != null) {\n-            actualLocaleString = actualLocale.toLanguageTag();\n-        } else {\n-            error = true;\n-        }\n-\n+        Locale actualLocale = Locale.lookup(priorityList, localeList);\n+        assertNotNull(actualLocale);\n+        String actualLocaleString = actualLocale.toLanguageTag();\n@@ -130,11 +110,1 @@\n-\n-        if (!expectedLocale.equals(actualLocaleString)) {\n-            error = true;\n-        }\n-\n-        if (error) {\n-            System.err.println(\"testLookup() failed on language ranges:\"\n-                    + \" [\" + ranges + \"] and language tags: [\" + tags + \"]\");\n-            err = true;\n-        }\n-\n+        assertEquals(expectedLocale, actualLocaleString);\n@@ -143,2 +113,3 @@\n-    \/* Before the fix, testMapEquivalents() method was returning only \"hi-in\"\n-     * in Turkish Locale\n+    \/*\n+     * Ensure mapEquivalents() does not only return \"hi-in\" for the Turkish\n+     * Locale with the given input.\n@@ -146,2 +117,2 @@\n-    private static void testMapEquivalents() {\n-\n+    @Test\n+    public void mapEquivalentsTest() {\n@@ -159,8 +130,3 @@\n-        List<LanguageRange> got\n-                = LanguageRange.mapEquivalents(priorityList, map);\n-\n-        if (!areEqual(expected, got)) {\n-            System.err.println(\"testMapEquivalents() failed\");\n-            err = true;\n-        }\n-\n+        List<LanguageRange> got =\n+                LanguageRange.mapEquivalents(priorityList, map);\n+        assertEquals(expected, got, getDifferences(expected, got));\n@@ -169,1 +135,1 @@\n-    private static boolean areEqual(List<LanguageRange> expected,\n+    private static String getDifferences(List<LanguageRange> expected,\n@@ -171,6 +137,1 @@\n-\n-        boolean error = false;\n-        if (expected.equals(got)) {\n-            return !error;\n-        }\n-\n+        StringBuilder diffs = new StringBuilder();\n@@ -180,2 +141,3 @@\n-            error = true;\n-            System.err.println(\"Found missing range(s): \" + cloneExpected);\n+            diffs.append(\"Found missing range(s): \")\n+                    .append(cloneExpected)\n+                    .append(System.lineSeparator());\n@@ -183,3 +145,2 @@\n-\n-        \/\/ not creating the 'got' clone as the list will not be used after this\n-        got.removeAll(expected);\n+        List<LanguageRange> cloneGot = new ArrayList<>(got);\n+        cloneGot.removeAll(expected);\n@@ -187,2 +148,3 @@\n-            error = true;\n-            System.err.println(\"Found extra range(s): \" + got);\n+            diffs.append(\"Got extra range(s): \")\n+                    .append(cloneGot)\n+                    .append(System.lineSeparator());\n@@ -190,1 +152,1 @@\n-        return !error;\n+        return diffs.toString();\n@@ -223,1 +185,0 @@\n-\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8159420.java","additions":63,"deletions":102,"binary":false,"changes":165,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -30,0 +31,1 @@\n+ * @run junit Bug8166994\n@@ -36,0 +38,1 @@\n+import java.util.stream.Stream;\n@@ -37,1 +40,3 @@\n-public class Bug8166994 {\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -39,4 +44,1 @@\n-    public static void main(String[] args) {\n-        List<String> list = Arrays.asList(\"ccq-aa\", \"ybd-aa\", \"rki-aa\");\n-        String ranges = \"ccq-aa\";\n-        testParseConsistency(list, ranges);\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -44,2 +46,1 @@\n-        \/\/ consecutive call to check the language range parse consistency\n-        testParseConsistency(list, ranges);\n+public class Bug8166994 {\n@@ -47,6 +48,7 @@\n-        \/\/ another case with ranges consisting of multiple equivalents and\n-        \/\/ single equivalents\n-        list = Arrays.asList(\"gfx-xz\", \"oun-xz\", \"mwj-xz\", \"vaj-xz\",\n-                \"taj-xy\", \"tsf-xy\");\n-        ranges = \"gfx-xz, taj-xy\";\n-        testParseConsistency(list, ranges);\n+    \/*\n+     * Checks that consecutive calls to parse the same language ranges\n+     * generate the same list of language ranges.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"ranges\")\n+    public void parseConsistencyTest(List<String> list, String ranges) {\n@@ -55,1 +57,1 @@\n-\n+        testParseConsistency(list, ranges);\n@@ -58,0 +60,1 @@\n+    \/\/ Ensure that parsing the ranges returns the expected list.\n@@ -60,5 +63,1 @@\n-        if (!list.equals(priorityList)) {\n-            throw new RuntimeException(\"Failed to parse the language range [\"\n-                    + ranges + \"], Expected: \" + list + \" Found: \"\n-                    + priorityList);\n-        }\n+        assertEquals(list, priorityList, \"Failed to parse the language range:\");\n@@ -73,0 +72,9 @@\n+    \/\/ Ranges that have multiple equivalents and single equivalents.\n+    private static Stream<Arguments> ranges() {\n+        return Stream.of(\n+                Arguments.of(Arrays.asList(\"ccq-aa\", \"ybd-aa\", \"rki-aa\"),\n+                        \"ccq-aa\"),\n+                Arguments.of(Arrays.asList(\"gfx-xz\", \"oun-xz\", \"mwj-xz\",\n+                        \"vaj-xz\", \"taj-xy\", \"tsf-xy\"), \"gfx-xz, taj-xy\")\n+        );\n+    }\n@@ -74,1 +82,0 @@\n-\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8166994.java","additions":28,"deletions":21,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.locale.providers=CLDR Bug8179071\n+ * @run junit\/othervm -Djava.locale.providers=CLDR Bug8179071\n@@ -32,1 +32,1 @@\n-\/**\n+\/*\n@@ -41,1 +41,0 @@\n-import java.util.Map;\n@@ -43,0 +42,9 @@\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -46,2 +54,4 @@\n-    \/\/ Deprecated and Legacy tags.\n-    \/\/ As of CLDR 38, language aliases for some of the legacy tags have been removed.\n+    \/*\n+     * Deprecated and Legacy tags.\n+     * As of CLDR 38, language aliases for some legacy tags have been removed.\n+     *\/\n@@ -53,8 +63,0 @@\n-    \/\/ expected month format data for  locales after language aliases replacement.\n-    private static final Map<String, String> shortJanuaryNames = Map.of( \"pa-PK\", \"\\u0a1c\\u0a28\",\n-                                                          \"uz-AF\" , \"yan\",\n-                                                          \"sr-ME\", \"\\u0458\\u0430\\u043d\",\n-                                                          \"scc\", \"\\u0458\\u0430\\u043d\",\n-                                                          \"sh\", \"jan\",\n-                                                          \"ha-Latn-NE\", \"Jan\",\n-                                                          \"i-lux\", \"Jan.\");\n@@ -62,2 +64,4 @@\n-\n-    private static void test(String tag, String expected) {\n+    \/\/ Ensure the display name for the given tag's January is correct\n+    @ParameterizedTest\n+    @MethodSource(\"shortJanuaryNames\")\n+    public void janDisplayNameTest(String tag, String expected) {\n@@ -68,3 +72,1 @@\n-        if (!actual.equals(expected)) {\n-            throw new RuntimeException(\"failed for locale  \" + tag + \" actual output \" + actual +\"  does not match with  \" + expected);\n-        }\n+        assertEquals(expected, actual);\n@@ -73,11 +75,11 @@\n-    \/**\n-     * getAvailableLocales() should not contain any deprecated or Legacy language tags\n-     *\/\n-    private static void checkInvalidTags() {\n-        Set<String> invalidTags = new HashSet<>();\n-        Arrays.asList(Locale.getAvailableLocales()).stream()\n-                .map(loc -> loc.toLanguageTag())\n-                .forEach( tag -> {if(LegacyAliases.contains(tag)) {invalidTags.add(tag);}});\n-        if (!invalidTags.isEmpty()) {\n-          throw new RuntimeException(\"failed: Deprecated and Legacy tags found  \" + invalidTags  + \" in AvailableLocales \");\n-        }\n+    \/\/ Expected month format data for locales after language aliases replacement.\n+    private static Stream<Arguments> shortJanuaryNames() {\n+        return Stream.of(\n+                Arguments.of(\"pa-PK\", \"\\u0a1c\\u0a28\"),\n+                Arguments.of(\"uz-AF\", \"yan\"),\n+                Arguments.of(\"sr-ME\", \"\\u0458\\u0430\\u043d\"),\n+                Arguments.of(\"scc\", \"\\u0458\\u0430\\u043d\"),\n+                Arguments.of(\"sh\", \"jan\"),\n+                Arguments.of(\"ha-Latn-NE\", \"Jan\"),\n+                Arguments.of(\"i-lux\", \"Jan.\")\n+        );\n@@ -86,3 +88,9 @@\n-    public static void main(String[] args) {\n-        shortJanuaryNames.forEach(Bug8179071::test);\n-        checkInvalidTags();\n+    \/\/ getAvailableLocales() should not contain any deprecated or Legacy language tags\n+    @Test\n+    public void invalidTagsTest() {\n+        Set<String> invalidTags = new HashSet<>();\n+        Arrays.stream(Locale.getAvailableLocales())\n+                .map(Locale::toLanguageTag)\n+                .forEach(tag -> {if(LegacyAliases.contains(tag)) {invalidTags.add(tag);}});\n+        assertTrue(invalidTags.isEmpty(),\n+                \"Deprecated and Legacy tags found  \" + invalidTags + \" in AvailableLocales \");\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8179071.java","additions":41,"deletions":33,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main FilteringModeTest\n+ * @run junit FilteringModeTest\n@@ -35,0 +35,9 @@\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -37,6 +46,0 @@\n-    private static boolean err = false;\n-    private static List<String> modeNames = List.of(\"AUTOSELECT_FILTERING\",\n-                                                    \"EXTENDED_FILTERING\",\n-                                                    \"IGNORE_EXTENDED_RANGES\",\n-                                                    \"MAP_EXTENDED_RANGES\",\n-                                                    \"REJECT_EXTENDED_RANGES\");\n@@ -44,3 +47,7 @@\n-    public static void main(String[] args) throws Exception {\n-        testValues();\n-        testValueOf();\n+    private static final List<String> expectedModeNames = List.of(\n+            \"AUTOSELECT_FILTERING\",\n+            \"EXTENDED_FILTERING\",\n+            \"IGNORE_EXTENDED_RANGES\",\n+            \"MAP_EXTENDED_RANGES\",\n+            \"REJECT_EXTENDED_RANGES\"\n+    );\n@@ -48,3 +55,7 @@\n-        if (err) {\n-            throw new RuntimeException(\"Failed.\");\n-        }\n+    \/\/ Ensure valueOf() exceptions are thrown\n+    @Test\n+    public void valueOfExceptionsTest() {\n+        assertThrows(IllegalArgumentException.class,\n+                () -> FilteringMode.valueOf(\"\").name());\n+        assertThrows(NullPointerException.class,\n+                () -> FilteringMode.valueOf(null).name());\n@@ -53,14 +64,7 @@\n-    private static void testValueOf() {\n-        try {\n-            FilteringMode.valueOf(\"\").name();\n-            err = true;\n-            System.err.println(\"IAE should be thrown for valueOf(\\\"\\\").\");\n-        } catch (IllegalArgumentException ex) {\n-        }\n-\n-        try {\n-            FilteringMode.valueOf(null).name();\n-            err = true;\n-            System.err.println(\"NPE should be thrown for valueOf(null).\");\n-        } catch (NullPointerException ex) {\n-        }\n+    \/\/ Ensure valueOf() returns expected results\n+    @ParameterizedTest\n+    @MethodSource(\"modes\")\n+    public void valueOfTest(String expectedName) {\n+        String name = FilteringMode.valueOf(expectedName).name();\n+        assertEquals(expectedName, name);\n+    }\n@@ -68,9 +72,2 @@\n-        modeNames.forEach((expectedName) -> {\n-            String name = FilteringMode.valueOf(expectedName).name();\n-            if (!expectedName.equals(name)) {\n-                err = true;\n-                System.err.println(\"FilteringMode.valueOf(\" + expectedName\n-                        + \") returned unexpected value. Expected: \"\n-                        + expectedName + \", got: \" + name);\n-            }\n-        });\n+    private static Stream<String> modes() {\n+        return expectedModeNames.stream();\n@@ -79,1 +76,3 @@\n-    private static void testValues() {\n+    \/\/ Ensure values() returns expected results\n+    @Test\n+    public void valuesTest() {\n@@ -81,1 +80,1 @@\n-        List<String> modeNames2 = Arrays.stream(modeArray)\n+        List<String> actualNames = Arrays.stream(modeArray)\n@@ -84,6 +83,1 @@\n-\n-        if (!modeNames.equals(modeNames2)) {\n-            err = true;\n-            System.err.println(\"FilteringMode.values() returned unexpected value. Expected:\"\n-                    + modeNames + \" Got:\" + modeNames2);\n-        }\n+        assertEquals(expectedModeNames, actualNames);\n","filename":"test\/jdk\/java\/util\/Locale\/FilteringModeTest.java","additions":39,"deletions":45,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -28,0 +29,1 @@\n+ * @run junit HashCodeTest\n@@ -34,0 +36,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n@@ -36,1 +42,3 @@\n-    public static void main(String[] args) {\n+    \/\/ Ensure Locale.hashCode() has less than 10% conflicts\n+    @Test\n+    public void hashConflictsTest() {\n@@ -43,2 +51,1 @@\n-        for (int i = 0; i < locales.length; i++) {\n-            Locale loc = locales[i];\n+        for (Locale loc : locales) {\n@@ -58,4 +65,2 @@\n-        if (conflicts >= (locales.length \/ 10)) {\n-            throw new RuntimeException(\"too many conflicts: \" + conflicts\n-                    + \" per \" + locales.length + \" locales\");\n-        }\n+        assertFalse(conflicts >= (locales.length \/ 10),\n+                String.format(\"%s conflicts per %s locales\", conflicts, locales.length));\n","filename":"test\/jdk\/java\/util\/Locale\/HashCodeTest.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,2 @@\n-\/**\n+\n+\/*\n@@ -26,0 +27,1 @@\n+ * @summary Tests some localized methods with Thai locale\n@@ -28,1 +30,1 @@\n- * @run main\/othervm -Djava.locale.providers=COMPAT ThaiGov\n+ * @run junit\/othervm -Djava.locale.providers=COMPAT ThaiGov\n@@ -31,4 +33,6 @@\n-import java.util.*;\n-import java.text.*;\n-\n-public class ThaiGov {\n+import java.text.DateFormat;\n+import java.text.NumberFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n@@ -36,2 +40,1 @@\n-    ThaiGov() {\n-        System.out.println(\"ThaiGov locale test...\");\n+import org.junit.jupiter.api.Test;\n@@ -39,5 +42,1 @@\n-    }\n-\n-    void numberTest() throws RuntimeException {\n-        final String strExpected = \"\\u0E51\\u0E52\\u002C\\u0E53\\u0E54\\u0E55\\u002C\\u0E56\\u0E57\\u0E58\\u002E\\u0E52\\u0E53\\u0E54\";\n-        final double value =  12345678.234;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -45,5 +44,1 @@\n-        Locale locTH = Locale.of(\"th\", \"TH\", \"TH\");\n-\n-        \/\/ th_TH_TH test\n-        NumberFormat nf = NumberFormat.getInstance(locTH);\n-        String str = nf.format(value);\n+public class ThaiGov {\n@@ -51,3 +46,2 @@\n-        if (!strExpected.equals(str)) {\n-            throw new RuntimeException();\n-        }\n+    private static final double VALUE = 12345678.234;\n+    private static final Locale TH = Locale.of(\"th\", \"TH\", \"TH\");\n@@ -55,0 +49,7 @@\n+    \/\/ Test number formatting for thai\n+    @Test\n+    public void numberTest() {\n+        final String strExpected = \"\\u0E51\\u0E52\\u002C\\u0E53\\u0E54\\u0E55\\u002C\\u0E56\\u0E57\\u0E58\\u002E\\u0E52\\u0E53\\u0E54\";\n+        NumberFormat nf = NumberFormat.getInstance(TH);\n+        String str = nf.format(VALUE);\n+        assertEquals(strExpected, str);\n@@ -57,1 +58,3 @@\n-    void currencyTest() throws RuntimeException {\n+    \/\/ Test currency formatting for Thai\n+    @Test\n+    public void currencyTest() {\n@@ -59,12 +62,3 @@\n-        final double value =  12345678.234;\n-\n-        Locale locTH = Locale.of(\"th\", \"TH\", \"TH\");\n-\n-        \/\/ th_TH_TH test\n-        NumberFormat nf = NumberFormat.getCurrencyInstance(locTH);\n-        String str = nf.format(value);\n-\n-        if (!strExpected.equals(str)) {\n-            throw new RuntimeException();\n-        }\n-\n+        NumberFormat nf = NumberFormat.getCurrencyInstance(TH);\n+        String str = nf.format(VALUE);\n+        assertEquals(strExpected, str);\n@@ -73,4 +67,4 @@\n-    void dateTest() throws RuntimeException {\n-        Locale locTH = Locale.of(\"th\", \"TH\", \"TH\");\n-        TimeZone tz = TimeZone.getTimeZone(\"PST\");\n-\n+    \/\/ Test date formatting for Thai\n+    @Test\n+    public void dateTest() {\n+        TimeZone tz = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -81,1 +75,1 @@\n-        Calendar cal = Calendar.getInstance(tz, locTH);\n+        Calendar cal = Calendar.getInstance(tz, TH);\n@@ -87,1 +81,1 @@\n-        Date value =  cal.getTime();\n+        Date value = cal.getTime();\n@@ -90,1 +84,1 @@\n-        DateFormat df = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, locTH);\n+        DateFormat df = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, TH);\n@@ -93,5 +87,1 @@\n-\n-        if (!strExpected.equals(str)) {\n-            throw new RuntimeException();\n-        }\n-\n+        assertEquals(strExpected, str);\n@@ -99,18 +89,0 @@\n-\n-    public static void main(String[] args) {\n-\n-        ThaiGov app = new ThaiGov();\n-        System.out.print(\"Running numberTest...\");\n-        app.numberTest();\n-        System.out.print(\"Finished\\n\");\n-        System.out.print(\"Running currencyTest...\");\n-        app.currencyTest();\n-        System.out.print(\"Finished\\n\");\n-        System.out.print(\"Running dateTest...\");\n-        app.dateTest();\n-        System.out.print(\"Finished\\n\");\n-\n-        System.out.println(\"PASSED\");\n-    }\n-\n-\n","filename":"test\/jdk\/java\/util\/Locale\/ThaiGov.java","additions":37,"deletions":65,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,2 @@\n-\/**\n+\n+\/*\n@@ -28,1 +29,1 @@\n- * @run main UseOldISOCodesTest\n+ * @run junit UseOldISOCodesTest\n@@ -30,0 +31,1 @@\n+\n@@ -33,0 +35,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -34,1 +40,4 @@\n-    public static void main(String[] args) throws Exception {\n+\n+    \/\/ Ensure java.locale.useOldISOCodes is only interpreted at runtime startup\n+    @Test\n+    public void staticInitializationTest() throws Exception {\n@@ -46,0 +55,1 @@\n+            \/\/ Should have no effect\n@@ -48,3 +58,2 @@\n-            if(!obsoleteCode.equals(locale.getLanguage())){\n-                throw new RuntimeException(\"Expected that newcode mapped to old \");\n-            }\n+            assertEquals(obsoleteCode, locale.getLanguage(),\n+                    \"newCode 'he' was not mapped to 'iw' with useOldISOCodes=true\");\n","filename":"test\/jdk\/java\/util\/Locale\/UseOldISOCodesTest.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"}]}