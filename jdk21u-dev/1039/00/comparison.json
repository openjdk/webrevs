{"files":[{"patch":"@@ -55,1 +55,1 @@\n-compiler\/rtm\/locking\/TestRTMAbortThreshold.java 8183263 generic-x64,generic-i586\n+compiler\/rtm\/locking\/TestRTMAbortThreshold.java 8183263,8313877 generic-x64,generic-i586,generic-ppc64le\n@@ -61,1 +61,1 @@\n-compiler\/rtm\/locking\/TestRTMSpinLoopCount.java 8183263 generic-x64,generic-i586\n+compiler\/rtm\/locking\/TestRTMSpinLoopCount.java 8183263,8313877 generic-x64,generic-i586,generic-ppc64le\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.lang.Thread.State;\n@@ -380,2 +381,2 @@\n-      Convert arguments for tests running with virtual threads test thread factory.\n-      When test is executed with test thread factory the line is changed from\n+      Convert arguments for tests running with virtual threads main wrapper\n+      When test is executed with process wrapper the line is changed from\n@@ -384,1 +385,1 @@\n-      java <jvm-args> -Dtest.thread.factory=<test-thread-factory-name> jdk.test.lib.process.ProcessTools <test-thread-factory-name> <test-class> <test-args>\n+      java <jvm-args> -Dmain.wrapper=<wrapper-name> jdk.test.lib.process.ProcessTools <wrapper-name> <test-class> <test-args>\n@@ -387,1 +388,1 @@\n-    private static List<String> addTestThreadFactoryArgs(String testThreadFactoryName, List<String> command) {\n+    private static List<String> addMainWrapperArgs(String mainWrapper, List<String> command) {\n@@ -400,1 +401,1 @@\n-        boolean isTestThreadFactoryAdded = false;\n+        boolean isWrapperClassAdded = false;\n@@ -402,1 +403,1 @@\n-            if (isTestThreadFactoryAdded) {\n+            if (isWrapperClassAdded) {\n@@ -435,1 +436,1 @@\n-            args.add(\"-Dtest.thread.factory=\" + testThreadFactoryName);\n+            args.add(\"-Dmain.wrapper=\" + mainWrapper);\n@@ -437,2 +438,2 @@\n-            args.add(testThreadFactoryName);\n-            isTestThreadFactoryAdded = true;\n+            args.add(mainWrapper);\n+            isWrapperClassAdded = true;\n@@ -463,3 +464,3 @@\n-        String testThreadFactoryName = System.getProperty(\"test.thread.factory\");\n-        if (testThreadFactoryName != null) {\n-            args.addAll(addTestThreadFactoryArgs(testThreadFactoryName, Arrays.asList(command)));\n+        String mainWrapper = System.getProperty(\"main.wrapper\");\n+        if (mainWrapper != null) {\n+            args.addAll(addMainWrapperArgs(mainWrapper, Arrays.asList(command)));\n@@ -495,15 +496,6 @@\n-     * Create ProcessBuilder using the java launcher from the jdk to\n-     * be tested. The default jvm options from jtreg, test.vm.opts and\n-     * test.java.opts, are added.\n-     *\n-     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n-     * classpath property \"java.class.path\" is appended to the command\n-     * line and the environment of the ProcessBuilder is modified to\n-     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n-     * provided the command args are updated and appended to invoke\n-     * ProcessTools main() and provide the name of the thread factory.\n-     *\n-     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n-     * with the thread factory value. The remaining command args are\n-     * scanned for unsupported options and are appended to the\n-     * ProcessBuilder.\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n+     * <p>\n+     * The command line will be like:\n+     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n@@ -519,15 +511,6 @@\n-     * Create ProcessBuilder using the java launcher from the jdk to\n-     * be tested. The default jvm options from jtreg, test.vm.opts and\n-     * test.java.opts, are added.\n-     *\n-     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n-     * classpath property \"java.class.path\" is appended to the command\n-     * line and the environment of the ProcessBuilder is modified to\n-     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n-     * provided the command args are updated and appended to invoke\n-     * ProcessTools main() and provide the name of the thread factory.\n-     *\n-     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n-     * with the thread factory value. The remaining command args are\n-     * scanned for unsupported options and are appended to the\n-     * ProcessBuilder.\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n+     * <p>\n+     * The command line will be like:\n+     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n@@ -557,12 +540,0 @@\n-     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n-     * classpath property \"java.class.path\" is appended to the command\n-     * line and the environment of the ProcessBuilder is modified to\n-     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n-     * provided the command args are updated and appended to invoke\n-     * ProcessTools main() and provide the name of the thread factory.\n-     *\n-     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n-     * with the thread factory value. The remaining command args are\n-     * scanned for unsupported options and are appended to the\n-     * ProcessBuilder.\n-     *\n@@ -591,12 +562,0 @@\n-     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n-     * classpath property \"java.class.path\" is appended to the command\n-     * line and the environment of the ProcessBuilder is modified to\n-     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n-     * provided the command args are updated and appended to invoke\n-     * ProcessTools main() and provide the name of the thread factory.\n-     *\n-     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n-     * with the thread factory value. The remaining command args are\n-     * scanned for unsupported options and are appended to the\n-     * ProcessBuilder.\n-     *\n@@ -611,7 +570,8 @@\n-     * Executes a process using the java launcher from the jdk to\n-     * be tested, waits for it to finish and returns\n-     * the process output.\n-     *\n-     * <p>The process is created using runtime flags set up by:\n-     * {@link #createTestJavaProcessBuilder(String...)}. The\n-     * jvm process will have exited before this method returns.\n+     * Executes a test jvm process, waits for it to finish and returns the process output.\n+     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n+     * The java from the test.jdk is used to execute the command.\n+     * <p>\n+     * The command line will be like:\n+     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n+     * <p>\n+     * The jvm process will have exited before this method returns.\n@@ -619,1 +579,1 @@\n-     * @param command User specified arguments.\n+     * @param cmds User specified arguments.\n@@ -622,2 +582,2 @@\n-    public static OutputAnalyzer executeTestJava(List<String> command) throws Exception {\n-        return executeTestJava(command.toArray(String[]::new));\n+    public static OutputAnalyzer executeTestJvm(List<String> cmds) throws Exception {\n+        return executeTestJvm(cmds.toArray(String[]::new));\n@@ -627,7 +587,8 @@\n-     * Executes a process using the java launcher from the jdk to\n-     * be tested, waits for it to finish and returns\n-     * the process output.\n-     *\n-     * <p>The process is created using runtime flags set up by:\n-     * {@link #createTestJavaProcessBuilder(String...)}. The\n-     * jvm process will have exited before this method returns.\n+     * Executes a test jvm process, waits for it to finish and returns the process output.\n+     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n+     * The java from the test.jdk is used to execute the command.\n+     * <p>\n+     * The command line will be like:\n+     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n+     * <p>\n+     * The jvm process will have exited before this method returns.\n@@ -635,1 +596,1 @@\n-     * @param command User specified arguments.\n+     * @param cmds User specified arguments.\n@@ -638,2 +599,2 @@\n-    public static OutputAnalyzer executeTestJava(String... command) throws Exception {\n-        ProcessBuilder pb = createTestJavaProcessBuilder(command);\n+    public static OutputAnalyzer executeTestJvm(String... cmds) throws Exception {\n+        ProcessBuilder pb = createTestJavaProcessBuilder(cmds);\n@@ -644,25 +605,1 @@\n-     * Executes a process using the java launcher from the jdk to\n-     * be tested, waits for it to finish and returns\n-     * the process output.\n-     *\n-     * <p>The process is created using runtime flags set up by:\n-     * {@link #createLimitedTestJavaProcessBuilder(String...)}. The\n-     * jvm process will have exited before this method returns.\n-     *\n-     * @param command User specified arguments.\n-     * @return The output from the process.\n-     *\/\n-    public static OutputAnalyzer executeLimitedTestJava(List<String> command) throws Exception {\n-        return executeLimitedTestJava(command.toArray(String[]::new));\n-    }\n-\n-    \/**\n-     * Executes a process using the java launcher from the jdk to\n-     * be tested, waits for it to finish and returns\n-     * the process output.\n-     *\n-     * <p>The process is created using runtime flags set up by:\n-     * {@link #createLimitedTestJavaProcessBuilder(String...)}. The\n-     * jvm process will have exited before this method returns.\n-     *\n-     * @param command User specified arguments.\n+     * @param cmds User specified arguments.\n@@ -670,0 +607,1 @@\n+     * @see #executeTestJvm(String...)\n@@ -671,3 +609,2 @@\n-    public static OutputAnalyzer executeLimitedTestJava(String... command) throws Exception {\n-        ProcessBuilder pb = createLimitedTestJavaProcessBuilder(command);\n-        return executeProcess(pb);\n+    public static OutputAnalyzer executeTestJava(String... cmds) throws Exception {\n+        return executeTestJvm(cmds);\n@@ -726,4 +663,1 @@\n-\n-            \/\/ Wait for the process to finish. Call through the output\n-            \/\/ analyzer to get correct logging and timestamps.\n-            output.waitFor();\n+            p.waitFor();\n@@ -767,1 +701,1 @@\n-    public static OutputAnalyzer executeProcess(String... cmds) throws Exception {\n+    public static OutputAnalyzer executeProcess(String... cmds) throws Throwable {\n@@ -812,1 +746,2 @@\n-    public static OutputAnalyzer executeCommand(String... cmds) throws Exception {\n+    public static OutputAnalyzer executeCommand(String... cmds)\n+            throws Throwable {\n@@ -829,1 +764,2 @@\n-    public static OutputAnalyzer executeCommand(ProcessBuilder pb) throws Exception {\n+    public static OutputAnalyzer executeCommand(ProcessBuilder pb)\n+            throws Throwable {\n@@ -982,1 +918,1 @@\n-    \/\/ ProcessTools as a wrapper for test execution\n+    \/\/ ProcessTools as a wrapper\n@@ -985,1 +921,1 @@\n-        String testThreadFactoryName = args[0];\n+        String wrapper = args[0];\n@@ -989,1 +925,1 @@\n-        Class<?> c = Class.forName(className);\n+        Class c = Class.forName(className);\n@@ -993,1 +929,1 @@\n-        if (testThreadFactoryName.equals(\"Virtual\")) {\n+        if (wrapper.equals(\"Virtual\")) {\n@@ -1013,1 +949,1 @@\n-        } else if (testThreadFactoryName.equals(\"Kernel\")) {\n+        } else if (wrapper.equals(\"Kernel\")) {\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":63,"deletions":127,"binary":false,"changes":190,"status":"modified"}]}