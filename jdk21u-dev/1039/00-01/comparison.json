{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.lang.Thread.State;\n@@ -381,2 +380,2 @@\n-      Convert arguments for tests running with virtual threads main wrapper\n-      When test is executed with process wrapper the line is changed from\n+      Convert arguments for tests running with virtual threads test thread factory.\n+      When test is executed with test thread factory the line is changed from\n@@ -385,1 +384,1 @@\n-      java <jvm-args> -Dmain.wrapper=<wrapper-name> jdk.test.lib.process.ProcessTools <wrapper-name> <test-class> <test-args>\n+      java <jvm-args> -Dtest.thread.factory=<test-thread-factory-name> jdk.test.lib.process.ProcessTools <test-thread-factory-name> <test-class> <test-args>\n@@ -388,1 +387,1 @@\n-    private static List<String> addMainWrapperArgs(String mainWrapper, List<String> command) {\n+    private static List<String> addTestThreadFactoryArgs(String testThreadFactoryName, List<String> command) {\n@@ -401,1 +400,1 @@\n-        boolean isWrapperClassAdded = false;\n+        boolean isTestThreadFactoryAdded = false;\n@@ -403,1 +402,1 @@\n-            if (isWrapperClassAdded) {\n+            if (isTestThreadFactoryAdded) {\n@@ -436,1 +435,1 @@\n-            args.add(\"-Dmain.wrapper=\" + mainWrapper);\n+            args.add(\"-Dtest.thread.factory=\" + testThreadFactoryName);\n@@ -438,2 +437,2 @@\n-            args.add(mainWrapper);\n-            isWrapperClassAdded = true;\n+            args.add(testThreadFactoryName);\n+            isTestThreadFactoryAdded = true;\n@@ -464,3 +463,3 @@\n-        String mainWrapper = System.getProperty(\"main.wrapper\");\n-        if (mainWrapper != null) {\n-            args.addAll(addMainWrapperArgs(mainWrapper, Arrays.asList(command)));\n+        String testThreadFactoryName = System.getProperty(\"test.thread.factory\");\n+        if (testThreadFactoryName != null) {\n+            args.addAll(addTestThreadFactoryArgs(testThreadFactoryName, Arrays.asList(command)));\n@@ -496,6 +495,15 @@\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n-     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n-     * <p>\n-     * The command line will be like:\n-     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     * Create ProcessBuilder using the java launcher from the jdk to\n+     * be tested. The default jvm options from jtreg, test.vm.opts and\n+     * test.java.opts, are added.\n+     *\n+     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n+     * classpath property \"java.class.path\" is appended to the command\n+     * line and the environment of the ProcessBuilder is modified to\n+     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n+     * provided the command args are updated and appended to invoke\n+     * ProcessTools main() and provide the name of the thread factory.\n+     *\n+     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n+     * with the thread factory value. The remaining command args are\n+     * scanned for unsupported options and are appended to the\n+     * ProcessBuilder.\n@@ -511,6 +519,15 @@\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n-     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n-     * <p>\n-     * The command line will be like:\n-     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     * Create ProcessBuilder using the java launcher from the jdk to\n+     * be tested. The default jvm options from jtreg, test.vm.opts and\n+     * test.java.opts, are added.\n+     *\n+     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n+     * classpath property \"java.class.path\" is appended to the command\n+     * line and the environment of the ProcessBuilder is modified to\n+     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n+     * provided the command args are updated and appended to invoke\n+     * ProcessTools main() and provide the name of the thread factory.\n+     *\n+     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n+     * with the thread factory value. The remaining command args are\n+     * scanned for unsupported options and are appended to the\n+     * ProcessBuilder.\n@@ -540,0 +557,12 @@\n+     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n+     * classpath property \"java.class.path\" is appended to the command\n+     * line and the environment of the ProcessBuilder is modified to\n+     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n+     * provided the command args are updated and appended to invoke\n+     * ProcessTools main() and provide the name of the thread factory.\n+     *\n+     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n+     * with the thread factory value. The remaining command args are\n+     * scanned for unsupported options and are appended to the\n+     * ProcessBuilder.\n+     *\n@@ -562,0 +591,12 @@\n+     * <p>Unless the \"test.noclasspath\" property is \"true\" the\n+     * classpath property \"java.class.path\" is appended to the command\n+     * line and the environment of the ProcessBuilder is modified to\n+     * remove \"CLASSPATH\". If the property \"test.thread.factory\" is\n+     * provided the command args are updated and appended to invoke\n+     * ProcessTools main() and provide the name of the thread factory.\n+     *\n+     * <p>The \"-Dtest.thread.factory\" is appended to the arguments\n+     * with the thread factory value. The remaining command args are\n+     * scanned for unsupported options and are appended to the\n+     * ProcessBuilder.\n+     *\n@@ -570,8 +611,7 @@\n-     * Executes a test jvm process, waits for it to finish and returns the process output.\n-     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n-     * The java from the test.jdk is used to execute the command.\n-     * <p>\n-     * The command line will be like:\n-     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-     * <p>\n-     * The jvm process will have exited before this method returns.\n+     * Executes a process using the java launcher from the jdk to\n+     * be tested, waits for it to finish and returns\n+     * the process output.\n+     *\n+     * <p>The process is created using runtime flags set up by:\n+     * {@link #createTestJavaProcessBuilder(String...)}. The\n+     * jvm process will have exited before this method returns.\n@@ -579,1 +619,1 @@\n-     * @param cmds User specified arguments.\n+     * @param command User specified arguments.\n@@ -582,2 +622,2 @@\n-    public static OutputAnalyzer executeTestJvm(List<String> cmds) throws Exception {\n-        return executeTestJvm(cmds.toArray(String[]::new));\n+    public static OutputAnalyzer executeTestJava(List<String> command) throws Exception {\n+        return executeTestJava(command.toArray(String[]::new));\n@@ -587,8 +627,3 @@\n-     * Executes a test jvm process, waits for it to finish and returns the process output.\n-     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n-     * The java from the test.jdk is used to execute the command.\n-     * <p>\n-     * The command line will be like:\n-     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-     * <p>\n-     * The jvm process will have exited before this method returns.\n+     * Executes a process using the java launcher from the jdk to\n+     * be tested, waits for it to finish and returns\n+     * the process output.\n@@ -596,1 +631,5 @@\n-     * @param cmds User specified arguments.\n+     * <p>The process is created using runtime flags set up by:\n+     * {@link #createTestJavaProcessBuilder(String...)}. The\n+     * jvm process will have exited before this method returns.\n+     *\n+     * @param command User specified arguments.\n@@ -599,2 +638,2 @@\n-    public static OutputAnalyzer executeTestJvm(String... cmds) throws Exception {\n-        ProcessBuilder pb = createTestJavaProcessBuilder(cmds);\n+    public static OutputAnalyzer executeTestJava(String... command) throws Exception {\n+        ProcessBuilder pb = createTestJavaProcessBuilder(command);\n@@ -605,1 +644,25 @@\n-     * @param cmds User specified arguments.\n+     * Executes a process using the java launcher from the jdk to\n+     * be tested, waits for it to finish and returns\n+     * the process output.\n+     *\n+     * <p>The process is created using runtime flags set up by:\n+     * {@link #createLimitedTestJavaProcessBuilder(String...)}. The\n+     * jvm process will have exited before this method returns.\n+     *\n+     * @param command User specified arguments.\n+     * @return The output from the process.\n+     *\/\n+    public static OutputAnalyzer executeLimitedTestJava(List<String> command) throws Exception {\n+        return executeLimitedTestJava(command.toArray(String[]::new));\n+    }\n+\n+    \/**\n+     * Executes a process using the java launcher from the jdk to\n+     * be tested, waits for it to finish and returns\n+     * the process output.\n+     *\n+     * <p>The process is created using runtime flags set up by:\n+     * {@link #createLimitedTestJavaProcessBuilder(String...)}. The\n+     * jvm process will have exited before this method returns.\n+     *\n+     * @param command User specified arguments.\n@@ -607,1 +670,0 @@\n-     * @see #executeTestJvm(String...)\n@@ -609,2 +671,3 @@\n-    public static OutputAnalyzer executeTestJava(String... cmds) throws Exception {\n-        return executeTestJvm(cmds);\n+    public static OutputAnalyzer executeLimitedTestJava(String... command) throws Exception {\n+        ProcessBuilder pb = createLimitedTestJavaProcessBuilder(command);\n+        return executeProcess(pb);\n@@ -663,1 +726,4 @@\n-            p.waitFor();\n+\n+            \/\/ Wait for the process to finish. Call through the output\n+            \/\/ analyzer to get correct logging and timestamps.\n+            output.waitFor();\n@@ -701,1 +767,1 @@\n-    public static OutputAnalyzer executeProcess(String... cmds) throws Throwable {\n+    public static OutputAnalyzer executeProcess(String... cmds) throws Exception {\n@@ -746,2 +812,1 @@\n-    public static OutputAnalyzer executeCommand(String... cmds)\n-            throws Throwable {\n+    public static OutputAnalyzer executeCommand(String... cmds) throws Exception {\n@@ -764,2 +829,1 @@\n-    public static OutputAnalyzer executeCommand(ProcessBuilder pb)\n-            throws Throwable {\n+    public static OutputAnalyzer executeCommand(ProcessBuilder pb) throws Exception {\n@@ -918,1 +982,1 @@\n-    \/\/ ProcessTools as a wrapper\n+    \/\/ ProcessTools as a wrapper for test execution\n@@ -921,1 +985,1 @@\n-        String wrapper = args[0];\n+        String testThreadFactoryName = args[0];\n@@ -925,1 +989,1 @@\n-        Class c = Class.forName(className);\n+        Class<?> c = Class.forName(className);\n@@ -929,1 +993,1 @@\n-        if (wrapper.equals(\"Virtual\")) {\n+        if (testThreadFactoryName.equals(\"Virtual\")) {\n@@ -949,1 +1013,1 @@\n-        } else if (wrapper.equals(\"Kernel\")) {\n+        } else if (testThreadFactoryName.equals(\"Kernel\")) {\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":127,"deletions":63,"binary":false,"changes":190,"status":"modified"}]}