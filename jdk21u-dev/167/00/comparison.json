{"files":[{"patch":"@@ -554,1 +554,0 @@\n-  ttyLocker ttyl;\n@@ -559,6 +558,6 @@\n-  if (xtty != nullptr) {\n-    xtty->head(\"ideal compile_id='%d'%s compile_phase='%s'\",\n-               compile_id(),\n-               is_osr_compilation() ? \" compile_kind='osr'\" : \"\",\n-               phase_name);\n-  }\n+\n+  \/\/ Node dumping can cause a safepoint, which can break the tty lock.\n+  \/\/ Buffer all node dumps, so that all safepoints happen before we lock.\n+  ResourceMark rm;\n+  stringStream ss;\n+\n@@ -566,1 +565,1 @@\n-    tty->print_cr(\"AFTER: %s\", phase_name);\n+    ss.print_cr(\"AFTER: %s\", phase_name);\n@@ -568,1 +567,1 @@\n-    root()->dump_bfs(MaxNodeLimit, nullptr, \"+S$\");\n+    root()->dump_bfs(MaxNodeLimit, nullptr, \"+S$\", &ss);\n@@ -571,1 +570,1 @@\n-    _output->print_scheduling();\n+    _output->print_scheduling(&ss);\n@@ -574,0 +573,3 @@\n+  \/\/ Check that the lock is not broken by a safepoint.\n+  NoSafepointVerifier nsv;\n+  ttyLocker ttyl;\n@@ -575,0 +577,5 @@\n+    xtty->head(\"ideal compile_id='%d'%s compile_phase='%s'\",\n+               compile_id(),\n+               is_osr_compilation() ? \" compile_kind='osr'\" : \"\",\n+               phase_name);\n+    xtty->print(\"%s\", ss.as_string()); \/\/ print to tty would use xml escape encoding\n@@ -576,0 +583,2 @@\n+  } else {\n+    tty->print(\"%s\", ss.as_string());\n@@ -4994,2 +5003,2 @@\n-void NodeCloneInfo::dump() const {\n-  tty->print(\" {%d:%d} \", idx(), gen());\n+void NodeCloneInfo::dump_on(outputStream* st) const {\n+  st->print(\" {%d:%d} \", idx(), gen());\n@@ -5042,1 +5051,1 @@\n-void CloneMap::dump(node_idx_t key) const {\n+void CloneMap::dump(node_idx_t key, outputStream* st) const {\n@@ -5046,1 +5055,1 @@\n-    ni.dump();\n+    ni.dump_on(st);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-  void dump() const;\n+  void dump_on(outputStream* st) const;\n@@ -161,1 +161,1 @@\n-  void dump(node_idx_t key)       const;\n+  void dump(node_idx_t key, outputStream* st) const;\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1762,2 +1762,2 @@\n-  PrintBFS(const Node* start, const int max_distance, const Node* target, const char* options)\n-  : _start(start), _max_distance(max_distance), _target(target), _options(options),\n+  PrintBFS(const Node* start, const int max_distance, const Node* target, const char* options, outputStream* st)\n+  : _start(start), _max_distance(max_distance), _target(target), _options(options), _output(st),\n@@ -1783,0 +1783,1 @@\n+  outputStream* _output;\n@@ -1822,1 +1823,1 @@\n-  static void print_options_help(bool print_examples);\n+  void print_options_help(bool print_examples);\n@@ -1839,3 +1840,3 @@\n-  static void print_node_idx(const Node* n); \/\/ to tty\n-  static void print_block_id(const Block* b); \/\/ to tty\n-  static void print_node_block(const Node* n); \/\/ to tty: _pre_order, head idx, _idom, _dom_depth\n+  void print_node_idx(const Node* n);\n+  void print_block_id(const Block* b);\n+  void print_node_block(const Node* n); \/\/ _pre_order, head idx, _idom, _dom_depth\n@@ -1906,1 +1907,1 @@\n-    tty->print(\"dump_bfs: max_distance must be non-negative!\\n\");\n+    _output->print_cr(\"dump_bfs: max_distance must be non-negative!\");\n@@ -1944,1 +1945,1 @@\n-      tty->print(\"Could not find target in BFS.\\n\");\n+      _output->print_cr(\"Could not find target in BFS.\");\n@@ -2040,1 +2041,1 @@\n-    tty->print(\"No nodes to print.\\n\");\n+    _output->print_cr(\"No nodes to print.\");\n@@ -2045,57 +2046,57 @@\n-  tty->print(\"Usage: node->dump_bfs(int max_distance, Node* target, char* options)\\n\");\n-  tty->print(\"\\n\");\n-  tty->print(\"Use cases:\\n\");\n-  tty->print(\"  BFS traversal: no target required\\n\");\n-  tty->print(\"  shortest path: set target\\n\");\n-  tty->print(\"  all paths: set target and put 'A' in options\\n\");\n-  tty->print(\"  detect loop: subcase of all paths, have start==target\\n\");\n-  tty->print(\"\\n\");\n-  tty->print(\"Arguments:\\n\");\n-  tty->print(\"  this\/start: staring point of BFS\\n\");\n-  tty->print(\"  target:\\n\");\n-  tty->print(\"    if null: simple BFS\\n\");\n-  tty->print(\"    else: shortest path or all paths between this\/start and target\\n\");\n-  tty->print(\"  options:\\n\");\n-  tty->print(\"    if null: same as \\\"cdmox@B\\\"\\n\");\n-  tty->print(\"    else: use combination of following characters\\n\");\n-  tty->print(\"      h: display this help info\\n\");\n-  tty->print(\"      H: display this help info, with examples\\n\");\n-  tty->print(\"      +: traverse in-edges (on if neither + nor -)\\n\");\n-  tty->print(\"      -: traverse out-edges\\n\");\n-  tty->print(\"      c: visit control nodes\\n\");\n-  tty->print(\"      d: visit data nodes\\n\");\n-  tty->print(\"      m: visit memory nodes\\n\");\n-  tty->print(\"      o: visit other nodes\\n\");\n-  tty->print(\"      x: visit mixed nodes\\n\");\n-  tty->print(\"      C: boundary control nodes\\n\");\n-  tty->print(\"      D: boundary data nodes\\n\");\n-  tty->print(\"      M: boundary memory nodes\\n\");\n-  tty->print(\"      O: boundary other nodes\\n\");\n-  tty->print(\"      X: boundary mixed nodes\\n\");\n-  tty->print(\"      #: display node category in color (not supported in all terminals)\\n\");\n-  tty->print(\"      S: sort displayed nodes by node idx\\n\");\n-  tty->print(\"      A: all paths (not just shortest path to target)\\n\");\n-  tty->print(\"      @: print old nodes - before matching (if available)\\n\");\n-  tty->print(\"      B: print scheduling blocks (if available)\\n\");\n-  tty->print(\"      $: dump only, no header, no other columns\\n\");\n-  tty->print(\"\\n\");\n-  tty->print(\"recursively follow edges to nodes with permitted visit types,\\n\");\n-  tty->print(\"on the boundary additionally display nodes allowed in boundary types\\n\");\n-  tty->print(\"Note: the categories can be overlapping. For example a mixed node\\n\");\n-  tty->print(\"      can contain control and memory output. Some from the other\\n\");\n-  tty->print(\"      category are also control (Halt, Return, etc).\\n\");\n-  tty->print(\"\\n\");\n-  tty->print(\"output columns:\\n\");\n-  tty->print(\"  dist:  BFS distance to this\/start\\n\");\n-  tty->print(\"  apd:   all paths distance (d_start + d_target)\\n\");\n-  tty->print(\"  block: block identifier, based on _pre_order\\n\");\n-  tty->print(\"  head:  first node in block\\n\");\n-  tty->print(\"  idom:  head node of idom block\\n\");\n-  tty->print(\"  depth: depth of block (_dom_depth)\\n\");\n-  tty->print(\"  old:   old IR node - before matching\\n\");\n-  tty->print(\"  dump:  node->dump()\\n\");\n-  tty->print(\"\\n\");\n-  tty->print(\"Note: if none of the \\\"cmdxo\\\" characters are in the options string\\n\");\n-  tty->print(\"      then we set all of them.\\n\");\n-  tty->print(\"      This allows for short strings like \\\"#\\\" for colored input traversal\\n\");\n-  tty->print(\"      or \\\"-#\\\" for colored output traversal.\\n\");\n+  _output->print_cr(\"Usage: node->dump_bfs(int max_distance, Node* target, char* options)\");\n+  _output->print_cr(\"\");\n+  _output->print_cr(\"Use cases:\");\n+  _output->print_cr(\"  BFS traversal: no target required\");\n+  _output->print_cr(\"  shortest path: set target\");\n+  _output->print_cr(\"  all paths: set target and put 'A' in options\");\n+  _output->print_cr(\"  detect loop: subcase of all paths, have start==target\");\n+  _output->print_cr(\"\");\n+  _output->print_cr(\"Arguments:\");\n+  _output->print_cr(\"  this\/start: staring point of BFS\");\n+  _output->print_cr(\"  target:\");\n+  _output->print_cr(\"    if null: simple BFS\");\n+  _output->print_cr(\"    else: shortest path or all paths between this\/start and target\");\n+  _output->print_cr(\"  options:\");\n+  _output->print_cr(\"    if null: same as \\\"cdmox@B\\\"\");\n+  _output->print_cr(\"    else: use combination of following characters\");\n+  _output->print_cr(\"      h: display this help info\");\n+  _output->print_cr(\"      H: display this help info, with examples\");\n+  _output->print_cr(\"      +: traverse in-edges (on if neither + nor -)\");\n+  _output->print_cr(\"      -: traverse out-edges\");\n+  _output->print_cr(\"      c: visit control nodes\");\n+  _output->print_cr(\"      d: visit data nodes\");\n+  _output->print_cr(\"      m: visit memory nodes\");\n+  _output->print_cr(\"      o: visit other nodes\");\n+  _output->print_cr(\"      x: visit mixed nodes\");\n+  _output->print_cr(\"      C: boundary control nodes\");\n+  _output->print_cr(\"      D: boundary data nodes\");\n+  _output->print_cr(\"      M: boundary memory nodes\");\n+  _output->print_cr(\"      O: boundary other nodes\");\n+  _output->print_cr(\"      X: boundary mixed nodes\");\n+  _output->print_cr(\"      #: display node category in color (not supported in all terminals)\");\n+  _output->print_cr(\"      S: sort displayed nodes by node idx\");\n+  _output->print_cr(\"      A: all paths (not just shortest path to target)\");\n+  _output->print_cr(\"      @: print old nodes - before matching (if available)\");\n+  _output->print_cr(\"      B: print scheduling blocks (if available)\");\n+  _output->print_cr(\"      $: dump only, no header, no other columns\");\n+  _output->print_cr(\"\");\n+  _output->print_cr(\"recursively follow edges to nodes with permitted visit types,\");\n+  _output->print_cr(\"on the boundary additionally display nodes allowed in boundary types\");\n+  _output->print_cr(\"Note: the categories can be overlapping. For example a mixed node\");\n+  _output->print_cr(\"      can contain control and memory output. Some from the other\");\n+  _output->print_cr(\"      category are also control (Halt, Return, etc).\");\n+  _output->print_cr(\"\");\n+  _output->print_cr(\"output columns:\");\n+  _output->print_cr(\"  dist:  BFS distance to this\/start\");\n+  _output->print_cr(\"  apd:   all paths distance (d_outputart + d_target)\");\n+  _output->print_cr(\"  block: block identifier, based on _pre_order\");\n+  _output->print_cr(\"  head:  first node in block\");\n+  _output->print_cr(\"  idom:  head node of idom block\");\n+  _output->print_cr(\"  depth: depth of block (_dom_depth)\");\n+  _output->print_cr(\"  old:   old IR node - before matching\");\n+  _output->print_cr(\"  dump:  node->dump()\");\n+  _output->print_cr(\"\");\n+  _output->print_cr(\"Note: if none of the \\\"cmdxo\\\" characters are in the options string\");\n+  _output->print_cr(\"      then we set all of them.\");\n+  _output->print_cr(\"      This allows for short strings like \\\"#\\\" for colored input traversal\");\n+  _output->print_cr(\"      or \\\"-#\\\" for colored output traversal.\");\n@@ -2103,27 +2104,27 @@\n-    tty->print(\"\\n\");\n-    tty->print(\"Examples:\\n\");\n-    tty->print(\"  if->dump_bfs(10, 0, \\\"+cxo\\\")\\n\");\n-    tty->print(\"    starting at some if node, traverse inputs recursively\\n\");\n-    tty->print(\"    only along control (mixed and other can also be control)\\n\");\n-    tty->print(\"  phi->dump_bfs(5, 0, \\\"-dxo\\\")\\n\");\n-    tty->print(\"    starting at phi node, traverse outputs recursively\\n\");\n-    tty->print(\"    only along data (mixed and other can also have data flow)\\n\");\n-    tty->print(\"  find_node(385)->dump_bfs(3, 0, \\\"cdmox+#@B\\\")\\n\");\n-    tty->print(\"    find inputs of node 385, up to 3 nodes up (+)\\n\");\n-    tty->print(\"    traverse all nodes (cdmox), use colors (#)\\n\");\n-    tty->print(\"    display old nodes and blocks, if they exist\\n\");\n-    tty->print(\"    useful call to start with\\n\");\n-    tty->print(\"  find_node(102)->dump_bfs(10, 0, \\\"dCDMOX-\\\")\\n\");\n-    tty->print(\"    find non-data dependencies of a data node\\n\");\n-    tty->print(\"    follow data node outputs until we find another category\\n\");\n-    tty->print(\"    node as the boundary\\n\");\n-    tty->print(\"  x->dump_bfs(10, y, 0)\\n\");\n-    tty->print(\"    find shortest path from x to y, along any edge or node\\n\");\n-    tty->print(\"    will not find a path if it is longer than 10\\n\");\n-    tty->print(\"    useful to find how x and y are related\\n\");\n-    tty->print(\"  find_node(741)->dump_bfs(20, find_node(746), \\\"c+\\\")\\n\");\n-    tty->print(\"    find shortest control path between two nodes\\n\");\n-    tty->print(\"  find_node(741)->dump_bfs(8, find_node(746), \\\"cdmox+A\\\")\\n\");\n-    tty->print(\"    find all paths (A) between two nodes of length at most 8\\n\");\n-    tty->print(\"  find_node(741)->dump_bfs(7, find_node(741), \\\"c+A\\\")\\n\");\n-    tty->print(\"    find all control loops for this node\\n\");\n+    _output->print_cr(\"\");\n+    _output->print_cr(\"Examples:\");\n+    _output->print_cr(\"  if->dump_bfs(10, 0, \\\"+cxo\\\")\");\n+    _output->print_cr(\"    starting at some if node, traverse inputs recursively\");\n+    _output->print_cr(\"    only along control (mixed and other can also be control)\");\n+    _output->print_cr(\"  phi->dump_bfs(5, 0, \\\"-dxo\\\")\");\n+    _output->print_cr(\"    starting at phi node, traverse outputs recursively\");\n+    _output->print_cr(\"    only along data (mixed and other can also have data flow)\");\n+    _output->print_cr(\"  find_node(385)->dump_bfs(3, 0, \\\"cdmox+#@B\\\")\");\n+    _output->print_cr(\"    find inputs of node 385, up to 3 nodes up (+)\");\n+    _output->print_cr(\"    traverse all nodes (cdmox), use colors (#)\");\n+    _output->print_cr(\"    display old nodes and blocks, if they exist\");\n+    _output->print_cr(\"    useful call to start with\");\n+    _output->print_cr(\"  find_node(102)->dump_bfs(10, 0, \\\"dCDMOX-\\\")\");\n+    _output->print_cr(\"    find non-data dependencies of a data node\");\n+    _output->print_cr(\"    follow data node outputs until we find another category\");\n+    _output->print_cr(\"    node as the boundary\");\n+    _output->print_cr(\"  x->dump_bfs(10, y, 0)\");\n+    _output->print_cr(\"    find shortest path from x to y, along any edge or node\");\n+    _output->print_cr(\"    will not find a path if it is longer than 10\");\n+    _output->print_cr(\"    useful to find how x and y are related\");\n+    _output->print_cr(\"  find_node(741)->dump_bfs(20, find_node(746), \\\"c+\\\")\");\n+    _output->print_cr(\"    find shortest control path between two nodes\");\n+    _output->print_cr(\"  find_node(741)->dump_bfs(8, find_node(746), \\\"cdmox+A\\\")\");\n+    _output->print_cr(\"    find all paths (A) between two nodes of length at most 8\");\n+    _output->print_cr(\"  find_node(741)->dump_bfs(7, find_node(741), \\\"c+A\\\")\");\n+    _output->print_cr(\"    find all control loops for this node\");\n@@ -2201,2 +2202,2 @@\n-        tty->print_cr(\"dump_bfs: Unrecognized option \\'%c\\'\", _options[i]);\n-        tty->print_cr(\"for help, run: find_node(0)->dump_bfs(0,0,\\\"H\\\")\");\n+        _output->print_cr(\"dump_bfs: Unrecognized option \\'%c\\'\", _options[i]);\n+        _output->print_cr(\"for help, run: find_node(0)->dump_bfs(0,0,\\\"H\\\")\");\n@@ -2281,1 +2282,1 @@\n-  tty->print(\"%6s\", buf);\n+  _output->print(\"%6s\", buf);\n@@ -2288,1 +2289,1 @@\n-  tty->print(\"%7s\", buf);\n+  _output->print(\"%7s\", buf);\n@@ -2297,4 +2298,4 @@\n-    tty->print(\"      _\"); \/\/ Block\n-    tty->print(\"     _\");  \/\/ head\n-    tty->print(\"     _\");  \/\/ idom\n-    tty->print(\"      _\"); \/\/ depth\n+    _output->print(\"      _\"); \/\/ Block\n+    _output->print(\"     _\");  \/\/ head\n+    _output->print(\"     _\");  \/\/ idom\n+    _output->print(\"      _\"); \/\/ depth\n@@ -2307,1 +2308,1 @@\n-      tty->print(\"     _\"); \/\/ idom\n+      _output->print(\"     _\"); \/\/ idom\n@@ -2309,1 +2310,1 @@\n-    tty->print(\"%6d \", b->_dom_depth);\n+    _output->print(\"%6d \", b->_dom_depth);\n@@ -2339,1 +2340,1 @@\n-  tty->print(\"dist\");                         \/\/ distance\n+  _output->print(\"dist\");                         \/\/ distance\n@@ -2341,1 +2342,1 @@\n-    tty->print(\" apd\");                       \/\/ all paths distance\n+    _output->print(\" apd\");                       \/\/ all paths distance\n@@ -2344,1 +2345,1 @@\n-    tty->print(\" [block  head  idom depth]\"); \/\/ block\n+    _output->print(\" [block  head  idom depth]\"); \/\/ block\n@@ -2347,1 +2348,1 @@\n-    tty->print(\"   old\");                     \/\/ old node\n+    _output->print(\"   old\");                     \/\/ old node\n@@ -2349,2 +2350,2 @@\n-  tty->print(\" dump\\n\");                      \/\/ node dump\n-  tty->print(\"---------------------------------------------\\n\");\n+  _output->print(\" dump\\n\");                      \/\/ node dump\n+  _output->print_cr(\"---------------------------------------------\");\n@@ -2355,1 +2356,1 @@\n-    n->dump(\"\\n\", false, tty, &_dcc);\n+    n->dump(\"\\n\", false, _output, &_dcc);\n@@ -2358,1 +2359,1 @@\n-  tty->print(\"%4d\", find_info(n)->distance());\/\/ distance\n+  _output->print(\"%4d\", find_info(n)->distance());\/\/ distance\n@@ -2362,1 +2363,1 @@\n-    tty->print(\"%4d\", apd);                   \/\/ all paths distance\n+    _output->print(\"%4d\", apd);                   \/\/ all paths distance\n@@ -2365,1 +2366,1 @@\n-    print_node_block(n);                      \/\/ block\n+    print_node_block(n);                          \/\/ block\n@@ -2368,1 +2369,1 @@\n-    print_node_idx(old_node(n));              \/\/ old node\n+    print_node_idx(old_node(n));                  \/\/ old node\n@@ -2370,2 +2371,2 @@\n-  tty->print(\" \");\n-  n->dump(\"\\n\", false, tty, &_dcc);           \/\/ node dump\n+  _output->print(\" \");\n+  n->dump(\"\\n\", false, _output, &_dcc);           \/\/ node dump\n@@ -2381,1 +2382,6 @@\n-  PrintBFS bfs(this, max_distance, target, options);\n+  dump_bfs(max_distance, target, options, tty);\n+}\n+\n+\/\/ Used to dump to stream.\n+void Node::dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st) const {\n+  PrintBFS bfs(this, max_distance, target, options, st);\n@@ -2525,1 +2531,1 @@\n-    C->clone_map().dump(_idx);\n+    C->clone_map().dump(_idx, st);\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":124,"deletions":118,"binary":false,"changes":242,"status":"modified"},{"patch":"@@ -1218,1 +1218,2 @@\n-  void dump_bfs(const int max_distance, Node* target, const char* options) const; \/\/ Print BFS traversal\n+  void dump_bfs(const int max_distance, Node* target, const char* options, outputStream* st) const;\n+  void dump_bfs(const int max_distance, Node* target, const char* options) const; \/\/ directly to tty\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2071,2 +2071,6 @@\n-    tty->print(\"\\n---- After ScheduleAndBundle ----\\n\");\n-    print_scheduling();\n+    \/\/ Buffer and print all at once\n+    ResourceMark rm;\n+    stringStream ss;\n+    ss.print(\"\\n---- After ScheduleAndBundle ----\\n\");\n+    print_scheduling(&ss);\n+    tty->print(\"%s\", ss.as_string());\n@@ -2080,0 +2084,4 @@\n+  print_scheduling(tty);\n+}\n+\n+void PhaseOutput::print_scheduling(outputStream* output_stream) {\n@@ -2081,1 +2089,1 @@\n-    tty->print(\"\\nBB#%03d:\\n\", i);\n+    output_stream->print(\"\\nBB#%03d:\\n\", i);\n@@ -2086,2 +2094,2 @@\n-      tty->print(\" %-6s \", reg >= 0 && reg < REG_COUNT ? Matcher::regName[reg] : \"\");\n-      n->dump();\n+      output_stream->print(\" %-6s \", reg >= 0 && reg < REG_COUNT ? Matcher::regName[reg] : \"\");\n+      n->dump(\"\\n\", false, output_stream);\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -225,1 +225,2 @@\n-  void print_scheduling();\n+  void print_scheduling(outputStream* output_stream);\n+  void print_scheduling(); \/\/ to tty for debugging\n","filename":"src\/hotspot\/share\/opto\/output.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,2 +73,0 @@\n-compiler\/c2\/irTests\/TestVectorConditionalMove.java 8306922 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,4 +46,1 @@\n-        TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n-                                   \"-XX:+UseCMoveUnconditionally\",\n-                                   \"-XX:+UseVectorCmov\",\n-                                   \"-XX:CompileCommand=compileonly,*.TestVectorConditionalMove.test*\");\n+        TestFramework.runWithFlags(\"-XX:+UseCMoveUnconditionally\", \"-XX:+UseVectorCmov\");\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorConditionalMove.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}