{"files":[{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6801704\n+ * @summary Test the expected behavior for a wide range of patterns (both\n+ *          correct and incorrect). This test documents the behavior of incorrect\n+ *          ChoiceFormat patterns either throwing an exception, or discarding\n+ *          the incorrect portion of a pattern.\n+ * @run junit PatternsTest\n+ *\/\n+\n+import java.text.ChoiceFormat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+public class PatternsTest {\n+\n+    private static final String ERR1 =\n+            \"Each interval must contain a number before a format\";\n+    private static final String ERR2 =\n+            \"Incorrect order of intervals, must be in ascending order\";\n+\n+    \/\/ Check that some valid patterns do not throw an exception. Check\n+    \/\/ them against the expected values they should be formatted as.\n+    @ParameterizedTest\n+    @MethodSource\n+    public void validPatternsTest(String pattern, String[] expectedValues) {\n+        var fmt = new ChoiceFormat(pattern);\n+        for (int i=1; i<=expectedValues.length; i++) {\n+            assertEquals(expectedValues[i-1], fmt.format(i),\n+                    String.format(\"ChoiceFormat formatted %s incorrectly:\", i));\n+        }\n+    }\n+\n+    \/\/ Valid patterns ranging from normal appearing to odd. These should not\n+    \/\/ throw an exception or discard any portions of the pattern.\n+    private static Arguments[] validPatternsTest() {\n+        return new Arguments[] {\n+                \/\/ Multi pattern with trailing empty string Format\n+                arguments(\"1#foo|2#bar|3#\", new String[]{\"foo\", \"bar\", \"\"}),\n+                \/\/ Multi patten with trailing '|'\n+                arguments(\"1#foo|2#bar|\", new String[]{\"foo\", \"bar\"}),\n+                \/\/ Using a '>' (not a Relation) within a Format\n+                arguments(\"1#foo|2#bar>\", new String[]{\"foo\", \"bar>\"}),\n+                \/\/ Standard Multi Pattern\n+                arguments(\"1#foo|2#bar\", new String[]{\"foo\", \"bar\"}),\n+                \/\/ Same numerical value Limits, different Relations\n+                arguments(\"1#foo|1<baz\", new String[]{\"foo\", \"baz\"}),\n+                \/\/ Standard Single Pattern\n+                arguments(\"1#foo\", new String[]{\"foo\"}),\n+                \/\/ Single pattern with empty string Format\n+                arguments(\"1#\", new String[]{\"\"})\n+        };\n+    }\n+\n+    \/\/ Check that the incorrect pattern throws an IAE with the desired error msg\n+    \/\/ This also tests applyPattern, as the ChoiceFormat constructor calls applyPattern\n+    @ParameterizedTest\n+    @MethodSource\n+    public void invalidPatternsThrowsTest(String pattern, String errMsg) {\n+        var ex = assertThrows(IllegalArgumentException.class,\n+                () -> new ChoiceFormat(pattern));\n+        assertEquals(errMsg, ex.getMessage());\n+    }\n+\n+    \/\/ Variety of patterns that break the ChoiceFormat pattern syntax and throw\n+    \/\/ an exception.\n+    private static Arguments[] invalidPatternsThrowsTest() {\n+        return new Arguments[] {\n+                arguments(\"#foo\", ERR1), \/\/ No Limit\n+                arguments(\"0#foo|#|1#bar\", ERR1), \/\/ Missing Relation in SubPattern\n+                arguments(\"#|\", ERR1), \/\/ Missing Limit\n+                arguments(\"##|\", ERR1), \/\/ Double Relations\n+                arguments(\"0#foo1#\", ERR1), \/\/ SubPattern not separated by '|'\n+                arguments(\"0#foo#\", ERR1), \/\/ Using a Relation in a format\n+                arguments(\"0#test|#\", ERR1), \/\/ SubPattern missing Limit\n+                arguments(\"0#foo|3#bar|1#baz\", ERR2), \/\/ Non-ascending Limits\n+        };\n+    }\n+\n+    \/\/ Check that the incorrect pattern discards the trailing incorrect portion.\n+    \/\/ These incorrect patterns should ideally throw an exception, but for\n+    \/\/ behavioral compatibility reasons do not.\n+    @ParameterizedTest\n+    @MethodSource\n+    public void invalidPatternsDiscardedTest(String brokenPattern, String actualPattern) {\n+        var cf1 = new ChoiceFormat(brokenPattern);\n+        var cf2 = new ChoiceFormat(actualPattern);\n+        assertEquals(cf2, cf1,\n+                String.format(\"Expected %s, but got %s\", cf2.toPattern(), cf1.toPattern()));\n+    }\n+\n+    \/\/ Variety of incorrect patterns with the actual expected pattern\n+    \/\/ after discarding occurs.\n+    private static Arguments[] invalidPatternsDiscardedTest() {\n+        return new Arguments[] {\n+                \/\/ Incomplete SubPattern at the end of the Pattern\n+                arguments(\"0#foo|1#bar|baz\", \"0#foo|1#bar\"),\n+\n+                \/\/ --- These throw an ArrayIndexOutOfBoundsException\n+                \/\/ when attempting to format with them ---\n+                \/\/ SubPattern with only a Limit (which is interpreted as a Format)\n+                arguments(\"0\", \"\"),\n+                \/\/ SubPattern with only a Format\n+                arguments(\"foo\", \"\"),\n+                \/\/ empty string\n+                arguments(\"\", \"\")\n+        };\n+    }\n+\n+    \/\/ Calling format() with empty limits and formats\n+    \/\/ throws an ArrayIndexOutOfBoundsException\n+    @Test\n+    public void emptyLimitsAndFormatsTest() {\n+        var cf1 = new ChoiceFormat(\"\");\n+        assertThrows(ArrayIndexOutOfBoundsException.class,\n+                () -> cf1.format(1));\n+\n+        var cf2 = new ChoiceFormat(new double[]{}, new String[]{});\n+        assertThrows(ArrayIndexOutOfBoundsException.class,\n+                () -> cf2.format(2));\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/ChoiceFormat\/PatternsTest.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}