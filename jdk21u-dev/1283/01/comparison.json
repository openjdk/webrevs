{"files":[{"patch":"@@ -30,1 +30,1 @@\n-\n+import java.util.stream.Collectors;\n@@ -1238,0 +1238,1 @@\n+\n@@ -1239,0 +1240,3 @@\n+        Set<Long> supportedMechSet =\n+                Arrays.stream(supportedMechanisms).boxed().collect\n+                (Collectors.toCollection(HashSet::new));\n@@ -1247,1 +1251,1 @@\n-                                        new HashMap<Descriptor,Integer>();\n+                new HashMap<Descriptor,Integer>();\n@@ -1249,2 +1253,1 @@\n-        for (int i = 0; i < supportedMechanisms.length; i++) {\n-            long longMech = supportedMechanisms[i];\n+        for (long longMech : supportedMechanisms) {\n@@ -1284,0 +1287,1 @@\n+                    \/\/ check all required mechs are supported\n@@ -1285,6 +1289,11 @@\n-                        \/\/ Check that other mechanisms required for the\n-                        \/\/ service are supported before listing it as\n-                        \/\/ available for the first time.\n-                        for (int requiredMech : d.requiredMechs) {\n-                            if (token.getMechanismInfo(\n-                                    requiredMech & 0xFFFFFFFFL) == null) {\n+                        for (int reqMech : d.requiredMechs) {\n+                            long longReqMech = reqMech & 0xFFFFFFFFL;\n+                            if (!config.isEnabled(longReqMech) ||\n+                                    !supportedMechSet.contains(longReqMech) \/*||\n+                                    brokenMechanisms.contains(longReqMech)*\/) {\n+                                if (showInfo) {\n+                                    System.out.println(\"DISABLED \" + d.type +\n+                                        \" \" + d.algorithm +\n+                                        \" due to no support for req'd mech \" +\n+                                        Functions.getMechanismName(longReqMech));\n+                                }\n@@ -1303,1 +1312,1 @@\n-                                System.out.println(\"DISABLED \" +  d.type +\n+                                System.out.println(\"DISABLED \" + d.type +\n@@ -1327,1 +1336,0 @@\n-\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SunPKCS11.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,14 @@\n+name = NSS\n+\n+showInfo = true\n+\n+slot = 1\n+\n+library = ${pkcs11test.nss.lib}\n+\n+disabledMechanisms = {\n+    CKM_SHA224_HMAC\n+    CKM_SHA256_HMAC\n+}\n+\n+nssArgs = \"configdir='${pkcs11test.nss.db}' certPrefix='' keyPrefix=''\"\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/RequiredMechCheck.cfg","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8335288\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ * @summary check that if any required mech is unavailable, then the\n+ * mechanism will be unavailable as well.\n+ * @run testng\/othervm RequiredMechCheck\n+ *\/\n+import java.nio.file.Path;\n+import java.security.Provider;\n+import java.security.NoSuchAlgorithmException;\n+import javax.crypto.Cipher;\n+import javax.crypto.Mac;\n+import javax.crypto.SecretKeyFactory;\n+\n+import jtreg.SkippedException;\n+import org.testng.SkipException;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+public class RequiredMechCheck extends PKCS11Test {\n+\n+    private static record TestData(String serviceType, String algo,\n+            boolean disabled) {}\n+\n+    private static TestData[] testValues = {\n+        new TestData(\"MAC\", \"HmacPBESHA1\", false),\n+        new TestData(\"MAC\", \"HmacPBESHA224\", true),\n+        new TestData(\"MAC\", \"HmacPBESHA256\", true),\n+        new TestData(\"MAC\", \"HmacPBESHA384\", false),\n+        new TestData(\"MAC\", \"HmacPBESHA512\", false),\n+        new TestData(\"SKF\", \"PBEWithHmacSHA1AndAES_128\", false),\n+        new TestData(\"SKF\", \"PBEWithHmacSHA224AndAES_128\", true),\n+        new TestData(\"SKF\", \"PBEWithHmacSHA256AndAES_128\", true),\n+        new TestData(\"SKF\", \"PBEWithHmacSHA384AndAES_128\", false),\n+        new TestData(\"SKF\", \"PBEWithHmacSHA512AndAES_128\", false),\n+        new TestData(\"CIP\", \"PBEWithHmacSHA1AndAES_128\", false),\n+        new TestData(\"CIP\", \"PBEWithHmacSHA224AndAES_128\", true),\n+        new TestData(\"CIP\", \"PBEWithHmacSHA256AndAES_128\", true),\n+        new TestData(\"CIP\", \"PBEWithHmacSHA384AndAES_128\", false),\n+        new TestData(\"CIP\", \"PBEWithHmacSHA512AndAES_128\", false),\n+    };\n+\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        Path configPath = Path.of(BASE).resolve(\"RequiredMechCheck.cfg\");\n+        System.setProperty(\"CUSTOM_P11_CONFIG\", configPath.toString());\n+    }\n+\n+    @Test\n+    public void test() throws Exception {\n+        try {\n+            main(new RequiredMechCheck());\n+        } catch (SkippedException se) {\n+            throw new SkipException(\"One or more tests are skipped\");\n+        }\n+    }\n+\n+    public void main(Provider p) throws Exception {\n+        for (TestData td : testValues) {\n+            String desc = td.serviceType + \" \" + td.algo;\n+            Object t;\n+            try {\n+                switch (td.serviceType) {\n+                    case \"MAC\":\n+                        t = Mac.getInstance(td.algo, p);\n+                    break;\n+                    case \"SKF\":\n+                        t = SecretKeyFactory.getInstance(td.algo, p);\n+                    break;\n+                    case \"CIP\":\n+                        t = Cipher.getInstance(td.algo, p);\n+                    break;\n+                    default:\n+                        throw new RuntimeException(\"Unsupported Test Type!\");\n+                }\n+\n+                if (td.disabled) {\n+                    throw new RuntimeException(\"Fail, no NSAE for \" + desc);\n+                } else {\n+                    System.out.println(\"Ok, getInstance() works for \" + desc);\n+                }\n+            } catch (NoSuchAlgorithmException e) {\n+                if (td.disabled) {\n+                    System.out.println(\"Ok, NSAE thrown for \" + desc);\n+                } else {\n+                    throw new RuntimeException(\"Unexpected Ex for \" + desc, e);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/RequiredMechCheck.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}