{"files":[{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4029465\n+ * @summary Win95 Multiselect List doesn't display scrollbar\n+ * @key headful\n+ * @run main ListScrollbarTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+\n+public class ListScrollbarTest {\n+\n+    private static final Color BG_COLOR = Color.RED;\n+    private static Robot robot;\n+    private static Frame frame;\n+    private static List list;\n+    private static int counter = 0;\n+    private static volatile Rectangle listBounds;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(ListScrollbarTest::createAndShowUI);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void test() throws Exception {\n+        robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            Point locationOnScreen = list.getLocationOnScreen();\n+            Dimension size = list.getSize();\n+            listBounds = new Rectangle(locationOnScreen, size);\n+        });\n+\n+        Point point = new Point(listBounds.x + listBounds.width - 5,\n+                listBounds.y + listBounds.height \/ 2);\n+\n+\n+        for (int i = 0; i < 4; i++) {\n+            scrollbarCheck(point, false);\n+            addListItem();\n+        }\n+        scrollbarCheck(point, true);\n+    }\n+\n+    public static boolean areColorsSimilar(Color c1, Color c2, int tolerance) {\n+        return Math.abs(c1.getRed() - c2.getRed()) <= tolerance\n+                && Math.abs(c1.getGreen() - c2.getGreen()) <= tolerance\n+                && Math.abs(c1.getBlue() - c2.getBlue()) <= tolerance;\n+    }\n+\n+    private static void scrollbarCheck(Point point, boolean isScrollbarExpected) {\n+        Color pixelColor = robot.getPixelColor(point.x, point.y);\n+        boolean areColorsSimilar = areColorsSimilar(BG_COLOR, pixelColor, 5);\n+\n+        if (isScrollbarExpected && areColorsSimilar) {\n+            throw new RuntimeException((\"\"\"\n+                    Scrollbar is expected, but pixel color \\\n+                    is similar to the background color\n+                    %s pixel color\n+                    %s bg color\"\"\")\n+                    .formatted(pixelColor, BG_COLOR));\n+        }\n+\n+        if (!isScrollbarExpected && !areColorsSimilar) {\n+            throw new RuntimeException((\"\"\"\n+                    Scrollbar is not expected, but pixel color \\\n+                    is not similar to the background color\n+                    %s pixel color\n+                    %s bg color\"\"\")\n+                    .formatted(pixelColor, BG_COLOR));\n+        }\n+    }\n+\n+    private static void addListItem() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            counter++;\n+            System.out.println(\"Adding list item \" + counter);\n+            list.add(\"List Item \" + counter);\n+            frame.validate();\n+        });\n+        robot.waitForIdle();\n+        robot.delay(150);\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new Frame(\"ListScrollbarTest\");\n+        list = new List(3, true);\n+        list.setBackground(BG_COLOR);\n+\n+        \/\/ do not draw border around items, it can affect screen capture\n+        list.setFocusable(false);\n+\n+        frame.add(list);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/ListScrollbarTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4075950\n+ * @summary Test for functionality of Control Click on Scrollbar\n+ * @key headful\n+ * @run main ScrollbarCtrlClickTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class ScrollbarCtrlClickTest {\n+    private static Frame frame;\n+    private static TextArea ta;\n+    private static Scrollbar scrollbar;\n+    private static final CountDownLatch latch = new CountDownLatch(1);\n+    private static volatile Rectangle sbBounds;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(ScrollbarCtrlClickTest::initAndShowGUI);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void initAndShowGUI() {\n+        frame = new Frame(\"ScrollbarDimensionTest\");\n+        ta = new TextArea(\"\", 30, 100);\n+\n+\n+        scrollbar = new Scrollbar(Scrollbar.VERTICAL,\n+                0, 10, 0, 20);\n+\n+        \/\/ Just setting layout so scrollbar thumb will be big enough to use\n+        frame.setLayout(new BorderLayout());\n+        frame.add(\"East\", scrollbar);\n+        frame.add(\"West\", ta);\n+\n+        scrollbar.addAdjustmentListener(e -> {\n+            System.out.println(e.paramString());\n+            ta.append(e.paramString() + \"\\n\");\n+            latch.countDown();\n+        });\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void test() throws Exception {\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+        robot.setAutoDelay(25);\n+        robot.delay(500);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            Point locationOnScreen = scrollbar.getLocationOnScreen();\n+            Dimension size = scrollbar.getSize();\n+            sbBounds = new Rectangle(locationOnScreen, size);\n+        });\n+\n+        robot.mouseMove(sbBounds.x + sbBounds.width \/ 2,\n+                sbBounds.y + sbBounds.height - 50);\n+\n+        robot.keyPress(KeyEvent.VK_CONTROL);\n+        robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+        if (!latch.await(1, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Timed out waiting for latch\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/ScrollbarCtrlClickTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4169461\n+ * @summary Test for Motif Scrollbar unit increment\n+ * @key headful\n+ * @run main UnitIncrementTest\n+ *\/\n+\n+import javax.swing.UIManager;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Scrollbar;\n+import java.awt.event.AdjustmentEvent;\n+import java.awt.event.MouseEvent;\n+import java.util.ArrayList;\n+\n+public class UnitIncrementTest {\n+    private static Frame frame;\n+    private static Scrollbar scrollbar;\n+    private static final java.util.List<AdjustmentEvent> eventsList = new ArrayList<>();\n+    private static final int UNIT_INCREMENT_VALUE = 5;\n+    private static final int INCREMENTS_COUNT = 10;\n+    private static volatile Rectangle scrollbarBounds;\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+\n+        try {\n+            EventQueue.invokeAndWait(UnitIncrementTest::createAndShowUI);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new Frame(\"UnitIncrementTest\");\n+\n+        scrollbar = new Scrollbar(Scrollbar.HORIZONTAL);\n+\n+        scrollbar.setUnitIncrement(UNIT_INCREMENT_VALUE);\n+        scrollbar.setBlockIncrement(20);\n+\n+        scrollbar.addAdjustmentListener(e -> {\n+            eventsList.add(e);\n+            System.out.println(e);\n+        });\n+\n+        frame.add(scrollbar);\n+\n+        frame.setSize(300, 100);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void test() throws Exception {\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+        robot.setAutoDelay(25);\n+        robot.delay(500);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            Point locationOnScreen = scrollbar.getLocationOnScreen();\n+            Dimension size = scrollbar.getSize();\n+            scrollbarBounds = new Rectangle(locationOnScreen, size);\n+        });\n+\n+        robot.mouseMove(scrollbarBounds.x + scrollbarBounds.width - 10,\n+                scrollbarBounds.y + scrollbarBounds.height \/ 2);\n+\n+        for (int i = 0; i < INCREMENTS_COUNT; i++) {\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(150);\n+        }\n+\n+        robot.waitForIdle();\n+        robot.delay(250);\n+\n+        if (eventsList.size() != INCREMENTS_COUNT) {\n+            throw new RuntimeException(\"Wrong number of events: \" + eventsList.size());\n+        }\n+\n+        int oldValue = 0;\n+        for (AdjustmentEvent event : eventsList) {\n+            System.out.println(\"\\nChecking event \" + event);\n+\n+            int diff = event.getValue() - oldValue;\n+            System.out.printf(\"diff: %d - %d = %d\\n\", event.getValue(), oldValue, diff);\n+\n+            if (diff != UNIT_INCREMENT_VALUE) {\n+                throw new RuntimeException(\"Unexpected adjustment value: %d\".formatted(diff));\n+            }\n+\n+            oldValue = event.getValue();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/UnitIncrementTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}