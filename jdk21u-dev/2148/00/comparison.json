{"files":[{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4122687 4209844\n+ * @summary Characters typed with AltGr have Alt bit set on\n+ *                 KEY_TYPED events\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AltGrTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class AltGrTest extends Frame implements KeyListener {\n+    static String INSTRUCTIONS = \"\"\"\n+            Switch to German (Germany) keyboard layout and type\n+            few characters using <AltGr> key.\n+            Note: on windows keyboards without an AltGr key,\n+            you should use Ctrl-Alt to synthesize AltGr.\n+            For example, on German keyboards, `@' is AltGr-Q\n+            `{' is AltGr-7 and '[' is AltGr-8\n+            If you see the corresponding symbols appear in the text field\n+            and there are no entries in log area starting with word \"FAIL:\"\n+            press \"Pass\", otherwise press \"Fail\".\n+            \"\"\";\n+\n+    public AltGrTest() {\n+        setLayout(new BorderLayout());\n+        TextField entry = new TextField();\n+        entry.addKeyListener(this);\n+        add(entry, BorderLayout.CENTER);\n+        pack();\n+    }\n+\n+    public void keyTyped(KeyEvent e) {\n+        PassFailJFrame.log(\"----\");\n+        PassFailJFrame.log(\"Got \" + e);\n+\n+        if (e.isControlDown() || e.isAltDown()) {\n+            PassFailJFrame.log(\"FAIL: character typed has following modifiers bits set:\");\n+            PassFailJFrame.log((e.isControlDown() ? \" Control\" : \"\")\n+                             + (e.isAltDown() ? \" Alt\" : \"\"));\n+        }\n+\n+        if (!(e.isAltGraphDown())) {\n+            PassFailJFrame.log(\"FAIL: AltGraph modifier is missing\");\n+        }\n+    }\n+\n+    public void keyPressed(KeyEvent ignore)  {}\n+    public void keyReleased(KeyEvent ignore) {}\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(AltGrTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/AltGrTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4257434\n+ * @summary Ensures that the right results are produced by the\n+ *          carriage return keys.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CRTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class CRTest extends Frame implements KeyListener, ActionListener {\n+    StringBuilder error = new StringBuilder();\n+    AtomicBoolean actionCompleted = new AtomicBoolean(false);\n+    static String INSTRUCTIONS = \"\"\"\n+            This test requires keyboard with the numeric keypad (numpad).\n+            If your keyboard does not have numpad press \"Pass\" to skip testing.\n+            Click on the text field in window named \"Check KeyChar values\".\n+            Press Enter on keypad. Then press Return key on a standard keyboard.\n+            Then click on \"Done\" button. Test will pass or fail automatically.\n+            \"\"\";\n+\n+    public CRTest() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+\n+        tf.addKeyListener(this);\n+        tf.addActionListener(this);\n+\n+        add(tf, BorderLayout.CENTER);\n+\n+        Button done = new Button(\"Done\");\n+        done.addActionListener((event) -> {\n+            checkAndComplete();\n+        });\n+        add(done, BorderLayout.SOUTH);\n+        pack();\n+    }\n+\n+    public void checkAndComplete() {\n+        if (!actionCompleted.get()) {\n+            error.append(\"\\nNo action received!\");\n+        }\n+\n+        if (!error.isEmpty()) {\n+            PassFailJFrame.forceFail(error.toString());\n+        } else {\n+            PassFailJFrame.forcePass();\n+        }\n+    }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        if ((evt.getKeyChar() != '\\n') || (evt.getKeyCode() != KeyEvent.VK_ENTER)) {\n+            error.append(\"\\nKeyPressed: Unexpected code \" + evt.getKeyCode());\n+        } else {\n+            PassFailJFrame.log(\"KeyPressed Test PASSED\");\n+        }\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        if ((evt.getKeyChar() != '\\n') || (evt.getKeyCode() != KeyEvent.VK_UNDEFINED)) {\n+            error.append(\"\\nKeyTyped: Unexpected code \" + evt.getKeyCode());\n+        } else {\n+            PassFailJFrame.log(\"KeyTyped Test PASSED\");\n+        }\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        if ((evt.getKeyChar() != '\\n') || (evt.getKeyCode() != KeyEvent.VK_ENTER)) {\n+            error.append(\"\\nKeyReleased: Unexpected code \" + evt.getKeyCode());\n+        } else {\n+            PassFailJFrame.log(\"KeyReleased Test PASSED\");\n+        }\n+    }\n+\n+    public void actionPerformed(ActionEvent evt) {\n+        PassFailJFrame.log(\"ActionPerformed Test PASSED\");\n+        actionCompleted.set(true);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(CRTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/CRTest.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4279566\n+ * @summary Tests that numpad keys produce the correct key codes and\n+ *           key chars when both the NumLock and CapsLock are on.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NumpadTest2\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class NumpadTest2 extends Frame implements KeyListener {\n+    static String INSTRUCTIONS = \"\"\"\n+           Make sure that the NumLock and CapsLock are both ON.\n+           Click on the text field inside the window named \"Check KeyChar values\"\n+           Then, type the NumPad 7 key (not the regular 7 key).\n+           Verify that the keyChar and keyCode is correct for each key pressed.\n+           Remember that the keyCode for the KEY_TYPED event should be zero.\n+           If 7 appears in the text field and the key code printed is correct\n+           press \"Pass\", otherwise press \"Fail\".\n+\n+           Key               Name             keyChar    Keycode\n+           -------------------------------------------------\n+           Numpad-7     Numpad-7      55         103\n+           \"\"\";\n+\n+    public NumpadTest2() {\n+        super(\"Check KeyChar values\");\n+        setLayout(new BorderLayout());\n+        TextField tf = new TextField(30);\n+        tf.addKeyListener(this);\n+        add(tf, BorderLayout.CENTER);\n+        pack();\n+    }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    protected void printKey(KeyEvent evt) {\n+        switch (evt.getID()) {\n+            case KeyEvent.KEY_TYPED:\n+                break;\n+            case KeyEvent.KEY_PRESSED:\n+                break;\n+            case KeyEvent.KEY_RELEASED:\n+                break;\n+            default:\n+                System.out.println(\"Other Event \");\n+                return;\n+        }\n+\n+        if (evt.isActionKey()) {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar: \" +\n+                    (int) evt.getKeyChar() + \" Action Key\");\n+        } else {\n+            PassFailJFrame.log(\"params= \" + evt.paramString() + \"  KeyChar: \" +\n+                    (int) evt.getKeyChar());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .logArea(10)\n+                .testUI(NumpadTest2::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/NumpadTest2.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4495473\n+ * @summary Tests that when you press key on canvas-type heavyweight only one key event arrives\n+ * @key headful\n+ * @run main TestDoubleKeyEvent\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JFrame;\n+import javax.swing.JWindow;\n+import javax.swing.JTextField;\n+\n+public class TestDoubleKeyEvent extends JFrame {\n+    JWindow w;\n+    JTextField tf;\n+\n+    public void initUI() {\n+        setLayout(new BorderLayout());\n+        setTitle(\"Double Key Event Test\");\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+        w = new JWindow(this);\n+        w.setLayout(new FlowLayout());\n+        tf = new JTextField(20);\n+        w.add(tf);\n+        w.pack();\n+        w.setLocationRelativeTo(null);\n+        w.setVisible(true);\n+        tf.requestFocus();\n+    }\n+\n+    public void testAndClean() {\n+        String str = tf.getText();\n+        w.dispose();\n+        dispose();\n+        if (str.length() != str.chars().distinct().count()) {\n+            throw new RuntimeException(\"Duplicate characters found!\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        TestDoubleKeyEvent test = new TestDoubleKeyEvent();\n+        EventQueue.invokeAndWait(test::initUI);\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+        for (int i = 0; i < 15; i++) {\n+            robot.keyPress(KeyEvent.VK_A + i);\n+            robot.keyRelease(KeyEvent.VK_A + i);\n+            robot.waitForIdle();\n+        }\n+        robot.delay(1000);\n+        EventQueue.invokeAndWait(test::testAndClean);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/TestDoubleKeyEvent.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}