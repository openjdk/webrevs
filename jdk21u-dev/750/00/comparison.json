{"files":[{"patch":"@@ -63,0 +63,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -122,0 +124,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(double[] r, double rc, double[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            double relativeError) {\n@@ -124,1 +132,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -126,1 +134,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -129,2 +137,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -144,0 +152,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(double[] r, double rc, double[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            double relativeError) {\n@@ -146,1 +160,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -148,1 +162,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -151,2 +166,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1081,0 +1096,8 @@\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n@@ -2171,1 +2194,1 @@\n-                Double128VectorTests::ADDReduce, Double128VectorTests::ADDReduceAll);\n+                Double128VectorTests::ADDReduce, Double128VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2217,1 +2240,1 @@\n-                Double128VectorTests::ADDReduceMasked, Double128VectorTests::ADDReduceAllMasked);\n+                Double128VectorTests::ADDReduceMasked, Double128VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2260,1 +2283,1 @@\n-                Double128VectorTests::MULReduce, Double128VectorTests::MULReduceAll);\n+                Double128VectorTests::MULReduce, Double128VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2306,1 +2329,1 @@\n-                Double128VectorTests::MULReduceMasked, Double128VectorTests::MULReduceAllMasked);\n+                Double128VectorTests::MULReduceMasked, Double128VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -122,0 +124,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(double[] r, double rc, double[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            double relativeError) {\n@@ -124,1 +132,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -126,1 +134,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -129,2 +137,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -144,0 +152,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(double[] r, double rc, double[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            double relativeError) {\n@@ -146,1 +160,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -148,1 +162,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -151,2 +166,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1081,0 +1096,8 @@\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n@@ -2171,1 +2194,1 @@\n-                Double256VectorTests::ADDReduce, Double256VectorTests::ADDReduceAll);\n+                Double256VectorTests::ADDReduce, Double256VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2217,1 +2240,1 @@\n-                Double256VectorTests::ADDReduceMasked, Double256VectorTests::ADDReduceAllMasked);\n+                Double256VectorTests::ADDReduceMasked, Double256VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2260,1 +2283,1 @@\n-                Double256VectorTests::MULReduce, Double256VectorTests::MULReduceAll);\n+                Double256VectorTests::MULReduce, Double256VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2306,1 +2329,1 @@\n-                Double256VectorTests::MULReduceMasked, Double256VectorTests::MULReduceAllMasked);\n+                Double256VectorTests::MULReduceMasked, Double256VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -122,0 +124,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(double[] r, double rc, double[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            double relativeError) {\n@@ -124,1 +132,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -126,1 +134,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -129,2 +137,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -144,0 +152,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(double[] r, double rc, double[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            double relativeError) {\n@@ -146,1 +160,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -148,1 +162,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -151,2 +166,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1081,0 +1096,8 @@\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n@@ -2171,1 +2194,1 @@\n-                Double512VectorTests::ADDReduce, Double512VectorTests::ADDReduceAll);\n+                Double512VectorTests::ADDReduce, Double512VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2217,1 +2240,1 @@\n-                Double512VectorTests::ADDReduceMasked, Double512VectorTests::ADDReduceAllMasked);\n+                Double512VectorTests::ADDReduceMasked, Double512VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2260,1 +2283,1 @@\n-                Double512VectorTests::MULReduce, Double512VectorTests::MULReduceAll);\n+                Double512VectorTests::MULReduce, Double512VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2306,1 +2329,1 @@\n-                Double512VectorTests::MULReduceMasked, Double512VectorTests::MULReduceAllMasked);\n+                Double512VectorTests::MULReduceMasked, Double512VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -122,0 +124,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(double[] r, double rc, double[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            double relativeError) {\n@@ -124,1 +132,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -126,1 +134,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -129,2 +137,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -144,0 +152,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(double[] r, double rc, double[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            double relativeError) {\n@@ -146,1 +160,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -148,1 +162,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -151,2 +166,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1081,0 +1096,8 @@\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n@@ -2171,1 +2194,1 @@\n-                Double64VectorTests::ADDReduce, Double64VectorTests::ADDReduceAll);\n+                Double64VectorTests::ADDReduce, Double64VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2217,1 +2240,1 @@\n-                Double64VectorTests::ADDReduceMasked, Double64VectorTests::ADDReduceAllMasked);\n+                Double64VectorTests::ADDReduceMasked, Double64VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2260,1 +2283,1 @@\n-                Double64VectorTests::MULReduce, Double64VectorTests::MULReduceAll);\n+                Double64VectorTests::MULReduce, Double64VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2306,1 +2329,1 @@\n-                Double64VectorTests::MULReduceMasked, Double64VectorTests::MULReduceAllMasked);\n+                Double64VectorTests::MULReduceMasked, Double64VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -68,0 +68,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final double RELATIVE_ROUNDING_ERROR = (double)0.000001;\n@@ -127,0 +129,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(double[] r, double rc, double[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            double relativeError) {\n@@ -129,1 +137,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -131,1 +139,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -134,2 +142,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -149,0 +157,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (double)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(double[] r, double rc, double[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            double relativeError) {\n@@ -151,1 +165,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -153,1 +167,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -156,2 +171,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1086,0 +1101,8 @@\n+            withToString(\"double[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n+            withToString(\"double[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (double)0.01 + ((double)i \/ (i + 1)));\n+            }),\n@@ -2176,1 +2199,1 @@\n-                DoubleMaxVectorTests::ADDReduce, DoubleMaxVectorTests::ADDReduceAll);\n+                DoubleMaxVectorTests::ADDReduce, DoubleMaxVectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2222,1 +2245,1 @@\n-                DoubleMaxVectorTests::ADDReduceMasked, DoubleMaxVectorTests::ADDReduceAllMasked);\n+                DoubleMaxVectorTests::ADDReduceMasked, DoubleMaxVectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2265,1 +2288,1 @@\n-                DoubleMaxVectorTests::MULReduce, DoubleMaxVectorTests::MULReduceAll);\n+                DoubleMaxVectorTests::MULReduce, DoubleMaxVectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2311,1 +2334,1 @@\n-                DoubleMaxVectorTests::MULReduceMasked, DoubleMaxVectorTests::MULReduceAllMasked);\n+                DoubleMaxVectorTests::MULReduceMasked, DoubleMaxVectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -122,0 +124,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(float[] r, float rc, float[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            float relativeError) {\n@@ -124,1 +132,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -126,1 +134,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -129,2 +137,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -144,0 +152,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(float[] r, float rc, float[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            float relativeError) {\n@@ -146,1 +160,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -148,1 +162,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -151,2 +166,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1092,0 +1107,8 @@\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n@@ -2182,1 +2205,1 @@\n-                Float128VectorTests::ADDReduce, Float128VectorTests::ADDReduceAll);\n+                Float128VectorTests::ADDReduce, Float128VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2228,1 +2251,1 @@\n-                Float128VectorTests::ADDReduceMasked, Float128VectorTests::ADDReduceAllMasked);\n+                Float128VectorTests::ADDReduceMasked, Float128VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2271,1 +2294,1 @@\n-                Float128VectorTests::MULReduce, Float128VectorTests::MULReduceAll);\n+                Float128VectorTests::MULReduce, Float128VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2317,1 +2340,1 @@\n-                Float128VectorTests::MULReduceMasked, Float128VectorTests::MULReduceAllMasked);\n+                Float128VectorTests::MULReduceMasked, Float128VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -122,0 +124,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(float[] r, float rc, float[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            float relativeError) {\n@@ -124,1 +132,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -126,1 +134,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -129,2 +137,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -144,0 +152,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(float[] r, float rc, float[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            float relativeError) {\n@@ -146,1 +160,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -148,1 +162,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -151,2 +166,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1092,0 +1107,8 @@\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n@@ -2182,1 +2205,1 @@\n-                Float256VectorTests::ADDReduce, Float256VectorTests::ADDReduceAll);\n+                Float256VectorTests::ADDReduce, Float256VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2228,1 +2251,1 @@\n-                Float256VectorTests::ADDReduceMasked, Float256VectorTests::ADDReduceAllMasked);\n+                Float256VectorTests::ADDReduceMasked, Float256VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2271,1 +2294,1 @@\n-                Float256VectorTests::MULReduce, Float256VectorTests::MULReduceAll);\n+                Float256VectorTests::MULReduce, Float256VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2317,1 +2340,1 @@\n-                Float256VectorTests::MULReduceMasked, Float256VectorTests::MULReduceAllMasked);\n+                Float256VectorTests::MULReduceMasked, Float256VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -122,0 +124,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(float[] r, float rc, float[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            float relativeError) {\n@@ -124,1 +132,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -126,1 +134,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -129,2 +137,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -144,0 +152,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(float[] r, float rc, float[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            float relativeError) {\n@@ -146,1 +160,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -148,1 +162,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -151,2 +166,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1092,0 +1107,8 @@\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n@@ -2182,1 +2205,1 @@\n-                Float512VectorTests::ADDReduce, Float512VectorTests::ADDReduceAll);\n+                Float512VectorTests::ADDReduce, Float512VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2228,1 +2251,1 @@\n-                Float512VectorTests::ADDReduceMasked, Float512VectorTests::ADDReduceAllMasked);\n+                Float512VectorTests::ADDReduceMasked, Float512VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2271,1 +2294,1 @@\n-                Float512VectorTests::MULReduce, Float512VectorTests::MULReduceAll);\n+                Float512VectorTests::MULReduce, Float512VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2317,1 +2340,1 @@\n-                Float512VectorTests::MULReduceMasked, Float512VectorTests::MULReduceAllMasked);\n+                Float512VectorTests::MULReduceMasked, Float512VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -122,0 +124,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(float[] r, float rc, float[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            float relativeError) {\n@@ -124,1 +132,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -126,1 +134,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -129,2 +137,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -144,0 +152,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(float[] r, float rc, float[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            float relativeError) {\n@@ -146,1 +160,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -148,1 +162,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -151,2 +166,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1092,0 +1107,8 @@\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n@@ -2182,1 +2205,1 @@\n-                Float64VectorTests::ADDReduce, Float64VectorTests::ADDReduceAll);\n+                Float64VectorTests::ADDReduce, Float64VectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2228,1 +2251,1 @@\n-                Float64VectorTests::ADDReduceMasked, Float64VectorTests::ADDReduceAllMasked);\n+                Float64VectorTests::ADDReduceMasked, Float64VectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2271,1 +2294,1 @@\n-                Float64VectorTests::MULReduce, Float64VectorTests::MULReduceAll);\n+                Float64VectorTests::MULReduce, Float64VectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2317,1 +2340,1 @@\n-                Float64VectorTests::MULReduceMasked, Float64VectorTests::MULReduceAllMasked);\n+                Float64VectorTests::MULReduceMasked, Float64VectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -68,0 +68,2 @@\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final float RELATIVE_ROUNDING_ERROR = (float)0.000001;\n@@ -127,0 +129,6 @@\n+        assertReductionArraysEquals(r, rc, a, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEquals(float[] r, float rc, float[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            float relativeError) {\n@@ -129,1 +137,1 @@\n-            Assert.assertEquals(rc, fa.apply(a));\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n@@ -131,1 +139,1 @@\n-                Assert.assertEquals(r[i], f.apply(a, i));\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n@@ -134,2 +142,2 @@\n-            Assert.assertEquals(rc, fa.apply(a), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -149,0 +157,6 @@\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, (float)0.0);\n+    }\n+\n+    static void assertReductionArraysEqualsMasked(float[] r, float rc, float[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            float relativeError) {\n@@ -151,1 +165,1 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask));\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n@@ -153,1 +167,2 @@\n-                Assert.assertEquals(r[i], f.apply(a, i, mask));\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n@@ -156,2 +171,2 @@\n-            Assert.assertEquals(rc, fa.apply(a, mask), \"Final result is incorrect!\");\n-            Assert.assertEquals(r[i], f.apply(a, i, mask), \"at index #\" + i);\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n@@ -1097,0 +1112,8 @@\n+            withToString(\"float[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n+            withToString(\"float[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : (float)0.01 + ((float)i \/ (i + 1)));\n+            }),\n@@ -2187,1 +2210,1 @@\n-                FloatMaxVectorTests::ADDReduce, FloatMaxVectorTests::ADDReduceAll);\n+                FloatMaxVectorTests::ADDReduce, FloatMaxVectorTests::ADDReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2233,1 +2256,1 @@\n-                FloatMaxVectorTests::ADDReduceMasked, FloatMaxVectorTests::ADDReduceAllMasked);\n+                FloatMaxVectorTests::ADDReduceMasked, FloatMaxVectorTests::ADDReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n@@ -2276,1 +2299,1 @@\n-                FloatMaxVectorTests::MULReduce, FloatMaxVectorTests::MULReduceAll);\n+                FloatMaxVectorTests::MULReduce, FloatMaxVectorTests::MULReduceAll, RELATIVE_ROUNDING_ERROR);\n@@ -2322,1 +2345,1 @@\n-                FloatMaxVectorTests::MULReduceMasked, FloatMaxVectorTests::MULReduceAllMasked);\n+                FloatMaxVectorTests::MULReduceMasked, FloatMaxVectorTests::MULReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -6,0 +6,3 @@\n+#if[FP]\n+                $vectorteststype$::[[TEST]]ReduceMasked, $vectorteststype$::[[TEST]]ReduceAllMasked, RELATIVE_ROUNDING_ERROR);\n+#else[FP]\n@@ -7,0 +10,1 @@\n+#end[FP]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Masked-op.template","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,0 +6,3 @@\n+#if[FP]\n+                $vectorteststype$::[[TEST]]Reduce, $vectorteststype$::[[TEST]]ReduceAll, RELATIVE_ROUNDING_ERROR);\n+#else[FP]\n@@ -7,0 +10,1 @@\n+#end[FP]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-op.template","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,0 +95,4 @@\n+#if[FP]\n+    \/\/ for floating point reduction ops that may introduce rounding errors\n+    private static final $type$ RELATIVE_ROUNDING_ERROR = ($type$)0.000001;\n+#end[FP]\n@@ -154,0 +158,3 @@\n+#if[FP]\n+        assertReductionArraysEquals(r, rc, a, f, fa, ($type$)0.0);\n+#else[FP]\n@@ -164,0 +171,1 @@\n+#end[FP]\n@@ -165,0 +173,17 @@\n+#if[FP]\n+\n+    static void assertReductionArraysEquals($type$[] r, $type$ rc, $type$[] a,\n+                                            FReductionOp f, FReductionAllOp fa,\n+                                            $type$ relativeError) {\n+        int i = 0;\n+        try {\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError));\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rc, fa.apply(a), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+        }\n+    }\n+#end[FP]\n@@ -176,0 +201,3 @@\n+#if[FP]\n+        assertReductionArraysEqualsMasked(r, rc, a, mask, f, fa, ($type$)0.0);\n+#else[FP]\n@@ -186,0 +214,18 @@\n+#end[FP]\n+    }\n+#if[FP]\n+\n+    static void assertReductionArraysEqualsMasked($type$[] r, $type$ rc, $type$[] a, boolean[] mask,\n+                                            FReductionMaskedOp f, FReductionAllMaskedOp fa,\n+                                            $type$ relativeError) {\n+        int i = 0;\n+        try {\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError));\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] *\n+relativeError));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(rc, fa.apply(a, mask), Math.abs(rc * relativeError), \"Final result is incorrect!\");\n+            Assert.assertEquals(r[i], f.apply(a, i, mask), Math.abs(r[i] * relativeError), \"at index #\" + i);\n+        }\n@@ -187,0 +233,1 @@\n+#end[FP]\n@@ -1150,0 +1197,10 @@\n+#if[FP]\n+            withToString(\"$type$[0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> ($type$)0.01 + (($type$)i \/ (i + 1)));\n+            }),\n+            withToString(\"$type$[i -> i % 17 == 0 ? cornerCaseValue(i) : 0.01 + (i \/ (i + 1))]\", (int s) -> {\n+                return fill(s * BUFFER_REPS,\n+                            i -> i % 17 == 0 ? cornerCaseValue(i) : ($type$)0.01 + (($type$)i \/ (i + 1)));\n+            }),\n+#end[FP]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":57,"deletions":0,"binary":false,"changes":57,"status":"modified"}]}