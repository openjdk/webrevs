{"files":[{"patch":"@@ -250,2 +250,1 @@\n-        int parentGroupCount = Math.max(parent.capturingGroupCount, 10);\n-        groups = new int[parentGroupCount * 2];\n+        groups = new int[parent.capturingGroupCount * 2];\n@@ -425,2 +424,1 @@\n-        int parentGroupCount = Math.max(newPattern.capturingGroupCount, 10);\n-        groups = new int[parentGroupCount * 2];\n+        groups = new int[newPattern.capturingGroupCount * 2];\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Matcher.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5190,0 +5190,6 @@\n+            \/\/ reference to not existing group must never match\n+            \/\/ group does not exist if matcher didn't allocate space for it\n+            if (groupIndex >= matcher.groups.length) {\n+                return false;\n+            }\n+\n@@ -5226,0 +5232,6 @@\n+            \/\/ reference to not existing group must never match\n+            \/\/ group does not exist if matcher didn't allocate space for it\n+            if (groupIndex >= matcher.groups.length) {\n+                return false;\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2044,0 +2044,52 @@\n+    @Test\n+    public static void ciBackRefTest() {\n+        Pattern pattern = Pattern.compile(\"(?i)(a*)bc\\\\1\");\n+        check(pattern, \"zzzaabcazzz\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(a*)bc\\\\1\");\n+        check(pattern, \"zzzaabcaazzz\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(abc)(def)\\\\1\");\n+        check(pattern, \"abcdefabc\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(abc)(def)\\\\3\");\n+        check(pattern, \"abcdefabc\", false);\n+\n+        for (int i = 1; i < 10; i++) {\n+            \/\/ Make sure backref 1-9 are always accepted\n+            pattern = Pattern.compile(\"(?i)abcdef\\\\\" + i);\n+            \/\/ and fail to match if the target group does not exit\n+            check(pattern, \"abcdef\", false);\n+        }\n+\n+        pattern = Pattern.compile(\"(?i)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)\\\\11\");\n+        check(pattern, \"abcdefghija\", false);\n+        check(pattern, \"abcdefghija1\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\\\11\");\n+        check(pattern, \"abcdefghijkk\", true);\n+\n+        pattern = Pattern.compile(\"(?i)(a)bcdefghij\\\\11\");\n+        check(pattern, \"abcdefghija1\", true);\n+\n+        \/\/ Supplementary character tests\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(a*)bc\\\\1\"));\n+        check(pattern, toSupplementaries(\"zzzaabcazzz\"), true);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(a*)bc\\\\1\"));\n+        check(pattern, toSupplementaries(\"zzzaabcaazzz\"), true);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(abc)(def)\\\\1\"));\n+        check(pattern, toSupplementaries(\"abcdefabc\"), true);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(abc)(def)\\\\3\"));\n+        check(pattern, toSupplementaries(\"abcdefabc\"), false);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)\\\\11\"));\n+        check(pattern, toSupplementaries(\"abcdefghija\"), false);\n+        check(pattern, toSupplementaries(\"abcdefghija1\"), true);\n+\n+        pattern = Pattern.compile(\"(?i)\" + toSupplementaries(\"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\\\11\"));\n+        check(pattern, toSupplementaries(\"abcdefghijkk\"), true);\n+    }\n+\n","filename":"test\/jdk\/java\/util\/regex\/RegExTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"}]}