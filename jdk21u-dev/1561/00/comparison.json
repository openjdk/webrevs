{"files":[{"patch":"@@ -141,0 +141,1 @@\n+java\/awt\/Focus\/FocusPolicyTest.java 7160904 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4369903\n+ * @summary Focus on window activation does not work correctly\n+ * @key headful\n+ * @run main ActivateFocusTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Toolkit;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class ActivateFocusTest {\n+\n+    public static void main(final String[] args) {\n+        ActivateFocusTest app = new ActivateFocusTest();\n+        app.doTest();\n+    }\n+\n+    public void doTest() {\n+      ActivateFocus[] af = new ActivateFocus[2];\n+      boolean testFailed = false;\n+      Dimension scrSize = Toolkit.getDefaultToolkit().getScreenSize();\n+      for (int i = 0; i < 2; i++) {\n+          af[i] = new ActivateFocus(i);\n+          af[i].setLocation(i * 160 + scrSize.width \/ 2, scrSize.height \/ 2);\n+          af[i].setVisible(true);\n+      }\n+      try {\n+          Thread.sleep(5000);\n+      } catch (InterruptedException ie) {\n+          throw new RuntimeException(\"TEST FAILED - thread was interrupted\");\n+      }\n+      for (int i = 0; i < 2; i++) {\n+          testFailed = (af[i].lw.focusCounter > 1);\n+      }\n+      if (testFailed) {\n+          throw new RuntimeException(\"TEST FAILED - focus is gained more than one time\");\n+      } else {\n+          System.out.println(\"TEST PASSED\");\n+      }\n+    }\n+\n+ }\n+\n+class ActivateFocus extends Frame {\n+\n+    public LightWeight lw = null;\n+    int num;\n+\n+    public String toString() {\n+        return (\"Window \" + num);\n+    }\n+\n+    public ActivateFocus(int i) {\n+        setTitle(\"Window \" + i);\n+        lw = new LightWeight(i);\n+        num=i;\n+        addWindowListener(new WindowAdapter() {\n+            public void windowActivated(WindowEvent e) {\n+                if(lw != null) {\n+                    lw.requestFocus();\n+                }\n+            }\n+        });\n+        add(lw);\n+        pack();\n+    }\n+\n+    \/\/ A very simple lightweight component\n+    class LightWeight extends Component implements FocusListener {\n+\n+        boolean focused = false;\n+        int num;\n+        public int focusCounter = 0;\n+\n+        public LightWeight(int num) {\n+            this.num = num;\n+            addFocusListener(this);\n+        }\n+\n+        public void paint(Graphics g) {\n+            Dimension size = getSize();\n+            int w = size.width;\n+            int h = size.height;\n+            g.setColor(getBackground());\n+            g.fillRect(0, 0, w, h);\n+            g.setColor(Color.black);\n+            g.drawOval(0, 0, w-1, h-1);\n+            if (focused) {\n+                g.drawLine(w\/2, 0, w\/2, h);\n+                g.drawLine(0, h\/2, w, h\/2);\n+            }\n+\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return new Dimension(150, 150);\n+        }\n+\n+        public void focusGained(FocusEvent e) {\n+            focused = true;\n+            focusCounter++;\n+            System.out.println(\"focusGained on \" + e.getComponent());\n+            repaint();\n+        }\n+\n+        public void focusLost(FocusEvent e) {\n+            focused = false;\n+            System.out.println(\"focusLost on \" + e.getComponent());\n+            repaint();\n+        }\n+\n+        public String toString() {\n+            return (\"Component \" + num);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/ActivateFocusTest.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -0,0 +1,212 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4041703 4096228 4032657 4066152 4149866 4025223\n+ * @summary Ensures that an Panel\/Canvas without heavyweight children\n+           receives focus on mouse click\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CanvasPanelFocusOnClickTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+\n+public class CanvasPanelFocusOnClickTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+\n+         Click on the red Canvas. Verify that it has focus by key pressing.\n+         Click on the yellow Panel.  Verify that it has focus by key pressing.\n+         Click on the blue heavyweight Panel (NOT ON THE BUTTON!).\n+           Verify that it doesn't have focus by key pressing.\n+         If two empty containers are able to the get focus by a mouse click\n+         and the container with heavyweight children are unable to get\n+         the focus by a mouse click which can be verified through messages in message dialog\n+         the test passes.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"CanvasPanelFocusOnClickTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(CanvasPanelFocusOnClickTest::createTestUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        Canvas canvas = new Canvas();;\n+        Panel  emptyPanel = new Panel();\n+        Panel  panel = new Panel();\n+        Button buttonInPanel = new Button(\"BUTTON ON PANEL\");\n+\n+        Frame frame = new Frame(\"CanvasPanelFocusOnClickTest Frame\");\n+        frame.setLayout(new GridLayout(3, 1));\n+        canvas.setBackground(Color.red);\n+        canvas.setName(\"RED CANVAS\");\n+        canvas.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                println(e.toString());\n+            }\n+            public void focusLost(FocusEvent e) {\n+                println(e.toString());\n+            }\n+        });\n+        canvas.addKeyListener(new KeyAdapter() {\n+            public void keyPressed(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            public void keyTyped(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            public void keyReleased(KeyEvent e) {\n+                printKey(e);\n+            }\n+        });\n+        frame.add(canvas);\n+\n+        emptyPanel.setBackground(Color.yellow);\n+        emptyPanel.setName(\"YELLOW PANEL\");\n+        emptyPanel.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                println(e.toString());\n+            }\n+            public void focusLost(FocusEvent e) {\n+                println(e.toString());\n+            }\n+        });\n+        emptyPanel.addKeyListener(new KeyAdapter() {\n+            public void keyPressed(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            public void keyTyped(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            public void keyReleased(KeyEvent e) {\n+                printKey(e);\n+            }\n+        });\n+        frame.add(emptyPanel);\n+\n+        panel.setBackground(Color.blue);\n+        panel.setName(\"BLUE PANEL\");\n+        buttonInPanel.setName(\"BUTTON ON PANEL\");\n+        buttonInPanel.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                println(e.toString());\n+            }\n+            public void focusLost(FocusEvent e) {\n+                println(e.toString());\n+            }\n+        });\n+        buttonInPanel.addKeyListener(new KeyAdapter() {\n+            public void keyPressed(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            public void keyTyped(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            public void keyReleased(KeyEvent e) {\n+                printKey(e);\n+            }\n+        });\n+        panel.add(buttonInPanel);\n+        panel.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                println(e.toString());\n+            }\n+            public void focusLost(FocusEvent e) {\n+                println(e.toString());\n+            }\n+        });\n+        panel.addKeyListener(new KeyAdapter() {\n+            public void keyPressed(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            public void keyTyped(KeyEvent e) {\n+                printKey(e);\n+            }\n+\n+            public void keyReleased(KeyEvent e) {\n+                printKey(e);\n+            }\n+        });\n+        frame.add(panel);\n+\n+        frame.setSize(200, 200);\n+\n+        return frame;\n+\n+    }\n+\n+    static void printKey(KeyEvent e) {\n+        String typeStr;\n+        switch(e.getID()) {\n+          case KeyEvent.KEY_PRESSED:\n+              typeStr = \"KEY_PRESSED\";\n+              break;\n+          case KeyEvent.KEY_RELEASED:\n+              typeStr = \"KEY_RELEASED\";\n+              break;\n+          case KeyEvent.KEY_TYPED:\n+              typeStr = \"KEY_TYPED\";\n+              break;\n+          default:\n+              typeStr = \"unknown type\";\n+        }\n+\n+        Object source = e.getSource();\n+        if (source instanceof Component) {\n+            typeStr += \" on \" + ((Component)source).getName();\n+        } else {\n+            typeStr += \" on \" + source;\n+        }\n+\n+        println(typeStr);\n+    }\n+\n+    static void println(String messageIn) {\n+        PassFailJFrame.log(messageIn);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/CanvasPanelFocusOnClickTest.java","additions":212,"deletions":0,"binary":false,"changes":212,"status":"added"},{"patch":"@@ -0,0 +1,177 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4897459\n+ * @key headful\n+ * @summary The <Tab> key does not switches focus in the internal frames in Swing apps.\n+ * @run main FocusPolicyTest\n+ *\/\n+\n+import java.awt.Container;\n+import java.awt.Component;\n+import java.awt.DefaultFocusTraversalPolicy;\n+import java.awt.Dialog;\n+import java.awt.FocusTraversalPolicy;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import javax.swing.JDialog;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JFrame;\n+import javax.swing.JWindow;\n+import javax.swing.LayoutFocusTraversalPolicy;\n+\n+public class FocusPolicyTest {\n+    static int stageNum;\n+    static FocusTraversalPolicy customPolicy = new CustomPolicy();\n+    final static Class awtDefaultPolicy = DefaultFocusTraversalPolicy.class;\n+    final static Class swingDefaultPolicy = LayoutFocusTraversalPolicy.class;\n+\n+    public static void main(String[] args) {\n+        final boolean isXawt = \"sun.awt.X11.XToolkit\".equals(Toolkit.getDefaultToolkit().getClass().getName());\n+\n+        System.err.println(\"isXawt = \" + isXawt);\n+\n+        \/\/ 1. Check default policy\n+        if (KeyboardFocusManager.getCurrentKeyboardFocusManager().\n+                getDefaultFocusTraversalPolicy().getClass() != awtDefaultPolicy) {\n+            throw new RuntimeException(\"Error: stage 1: default policy is not DefaultFocusTraversalPolicy\");\n+        }\n+\n+        \/\/ 2. Check AWT top-levels policies\n+        stageNum = 2;\n+        checkAWTPoliciesFor(awtDefaultPolicy);\n+\n+        \/\/ 3. Check Swing top-levels policies\n+        stageNum = 3;\n+        checkSwingPoliciesFor(swingDefaultPolicy);\n+\n+        \/\/ 4. Check default policy if not XToolkit\n+        if (!isXawt) {\n+            if (KeyboardFocusManager.getCurrentKeyboardFocusManager().\n+                    getDefaultFocusTraversalPolicy().getClass() != swingDefaultPolicy) {\n+                throw new RuntimeException(\"Error: stage 4: default policy is not LayoutFocusTraversalPolicy\");\n+            }\n+        }\n+\n+        \/\/ 5. Check AWT top-levels policies\n+        \/\/ this is a bug in XAWT we should change the test as soon as\n+        \/\/ we will be able to fix this bug.\n+        stageNum = 5;\n+        Class defaultPolicy = swingDefaultPolicy;\n+        if (isXawt) {\n+            defaultPolicy = awtDefaultPolicy;\n+        }\n+        checkAWTPoliciesFor(defaultPolicy);\n+\n+        \/\/ Set custom policy as default\n+        KeyboardFocusManager.getCurrentKeyboardFocusManager().setDefaultFocusTraversalPolicy(customPolicy);\n+\n+        \/\/ 6. Check AWT top-levels policies for custom\n+        stageNum = 6;\n+        checkAWTPoliciesFor(customPolicy.getClass());\n+\n+        \/\/ 7. Check Swing top-levels policies for custom\n+        stageNum = 7;\n+        checkSwingPoliciesFor(customPolicy.getClass());\n+\n+        return;\n+    }\n+\n+    public static void checkAWTPoliciesFor(Class expectedPolicyClass) {\n+        Window[] tlvs = new Window[7];\n+\n+        tlvs[0] = new Frame(\"\");\n+        tlvs[1] = new Frame(\"\", tlvs[0].getGraphicsConfiguration());\n+        tlvs[2] = new Window((Frame)tlvs[0]);\n+        tlvs[3] = new Dialog((Frame)tlvs[0], \"\", false);\n+        tlvs[4] = new Dialog((Frame)tlvs[0], \"\", false, tlvs[0].getGraphicsConfiguration());\n+        tlvs[5] = new Dialog((Dialog)tlvs[3], \"\", false);\n+        tlvs[6] = new Dialog((Dialog)tlvs[3], \"\", false, tlvs[0].getGraphicsConfiguration());\n+\n+        for (int i = 0; i < 7; i++) {\n+            Class policyClass = tlvs[i].getFocusTraversalPolicy().getClass();\n+            if (policyClass != expectedPolicyClass) {\n+                throw new RuntimeException(\"Error: stage \" + stageNum + \": \"\n+                                           + tlvs[i].getClass().getName()\n+                                           + \"'s policy is \" + policyClass.getName()\n+                                           + \" but not \" + expectedPolicyClass.getName());\n+            }\n+        }\n+    }\n+\n+    public static void checkSwingPoliciesFor(Class expectedPolicyClass) {\n+        Container[] tlvs = new Container[12];\n+\n+        tlvs[0] = new JFrame();\n+        tlvs[1] = new JFrame(tlvs[0].getGraphicsConfiguration());\n+        tlvs[2] = new JFrame(\"\");\n+        tlvs[3] = new JFrame(\"\", tlvs[0].getGraphicsConfiguration());\n+        tlvs[4] = new JWindow((Frame)tlvs[0]);\n+        tlvs[5] = new JWindow((Window)tlvs[4]);\n+        tlvs[6] = new JWindow((Window)tlvs[4], tlvs[0].getGraphicsConfiguration());\n+        tlvs[7] = new JDialog((Frame)tlvs[0], \"\", false);\n+        tlvs[8] = new JDialog((Frame)tlvs[0], \"\", false, tlvs[0].getGraphicsConfiguration());\n+        tlvs[9] = new JDialog((Dialog)tlvs[7], \"\", false);\n+        tlvs[10] = new JDialog((Dialog)tlvs[7], \"\", false, tlvs[0].getGraphicsConfiguration());\n+        tlvs[11] = new JInternalFrame(\"\", false, false, false, false);\n+\n+        for (int i = 0; i < tlvs.length; i++) {\n+            Class policyClass = tlvs[i].getFocusTraversalPolicy().getClass();\n+            if (policyClass != expectedPolicyClass) {\n+                throw new RuntimeException(\"Error: stage \" + stageNum\n+                                           + \": \" + tlvs[i].getClass().getName()\n+                                           + \"'s policy is \" + policyClass.getName() + \" but not \"\n+                                           + expectedPolicyClass.getName());\n+            }\n+        }\n+    }\n+\n+    \/\/ Dummy policy.\n+    static class CustomPolicy extends FocusTraversalPolicy {\n+        public Component getComponentAfter(Container focusCycleRoot,\n+                                           Component aComponent) {\n+            return null;\n+        }\n+\n+        public Component getComponentBefore(Container focusCycleRoot,\n+                                            Component aComponent) {\n+            return null;\n+        }\n+\n+        public Component getFirstComponent(Container focusCycleRoot) {\n+            return null;\n+        }\n+\n+        public Component getLastComponent(Container focusCycleRoot) {\n+            return null;\n+        }\n+\n+        public Component getDefaultComponent(Container focusCycleRoot) {\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/FocusPolicyTest.java","additions":177,"deletions":0,"binary":false,"changes":177,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6458497\n+ * @summary check focus requests in inactive frames\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RequestInInactiveFrame\n+ *\/\n+\n+import java.util.ArrayList;\n+\n+import java.awt.FlowLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.Window;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class RequestInInactiveFrame {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            After the tests starts you will see two frames: \\\"test frame\\\" and \\\"opposite frame\\\"\n+            activate the former by click on its title\n+            Focus should be on \\\"press me\\\" button (if it's not, the test fails)\n+            press on \\\"press me\\\" button and activate \\\"opposite frame\\\"\n+            wait for several seconds.\n+            Focus should either remain on button in the \\\"opposite frame\\\"\n+            or goes to \\\"focus target\\\" button (in this case \\\"test frame\\\" should be activated\n+            if it's not, the test failed.\n+            Activate \\\"test frame\\\" one more time, press on \\\"press me\\\" button and switch focus\n+            to some native window.  Wait for several seconds,\n+            If you see focus border around\n+            \\\"focus target\\\" and \\\"test frame\\\" is not active then the test failed.\n+            if focus transfered to that button and the frame is activated, or if there is no focus\n+            in java - tests passed.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"RequestInInactiveFrame Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(RequestInInactiveFrame::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static ArrayList<Window> createTestUI() {\n+        JFrame frame = new JFrame(\"test frame\");\n+        final JButton btn2 = new JButton(\"focus target\");\n+        JButton btn1 = new JButton(\"press me\");\n+        btn1.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                System.out.println(\"waiting...\");\n+                try {\n+                    Thread.sleep(3000);\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+                System.out.println(\"requesting focus\");\n+                btn2.requestFocus();\n+            }\n+        });\n+        frame.setLayout(new FlowLayout());\n+        frame.add(btn1);\n+        frame.add(btn2);\n+        frame.pack();\n+        frame.setLocation(200, 100);\n+\n+        JFrame frame2 = new JFrame(\"opposite frame\");\n+        JButton btn3 = new JButton(\"just a button\");\n+        frame2.add(btn3);\n+        frame2.pack();\n+        frame2.setLocation(200, 200);\n+\n+        ArrayList<Window> list = new ArrayList<>();\n+        list.add(frame);\n+        list.add(frame2);\n+        return list;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/RequestInInactiveFrame.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}