{"files":[{"patch":"@@ -0,0 +1,216 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4124460\n+ * @key headful\n+ * @summary Test for initializing a Motif peer component causes a crash.\n+*\/\n+\n+public class ScrollPaneTest {\n+    private static volatile Point p1 = null;\n+    private static volatile Point p2 = null;\n+    private static Robot robot = null;\n+\n+    private static Point getClickPoint(Component component) {\n+        Point locationOnScreen = component.getLocationOnScreen();\n+        Dimension size = component.getSize();\n+        locationOnScreen.x += size.width \/ 2;\n+        locationOnScreen.y += size.height \/ 2;\n+        return locationOnScreen;\n+    }\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(100);\n+\n+        try {\n+            doTest();\n+        } finally {\n+            ScrollPaneTester.disposeAll();\n+        }\n+    }\n+\n+    private static void doTest() throws Exception {\n+        EventQueue.invokeAndWait(ScrollPaneTester::initAndShowGui);\n+\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            p1 = getClickPoint(ScrollPaneTester.st1.buttonRight);\n+            p2 = getClickPoint(ScrollPaneTester.st1.buttonSwap);\n+        });\n+\n+        robot.mouseMove(p1.x, p1.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.mouseMove(p2.x, p2.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.delay(1000);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            p1 = getClickPoint(ScrollPaneTester.st2.buttonRight);\n+            p2 = getClickPoint(ScrollPaneTester.st2.buttonSwap);\n+        });\n+\n+        robot.mouseMove(p1.x, p1.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.mouseMove(p2.x, p2.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+}\n+\n+class ScrollPaneTester implements ActionListener {\n+    static ScrollPaneTester st1, st2;\n+    final Button buttonLeft, buttonRight, buttonQuit, buttonSwap;\n+    protected ScrollPane sp;\n+    protected Frame f;\n+\n+    public static void initAndShowGui() {\n+        ScrollPaneTester.st1 = new ScrollPaneTester(true);\n+        ScrollPaneTester.st2 = new ScrollPaneTester(false);\n+    }\n+\n+    public ScrollPaneTester(boolean large) {\n+        sp = new ScrollPane(ScrollPane.SCROLLBARS_NEVER);\n+\n+        Panel p = new Panel();\n+\n+        if (large) {\n+            p.setLayout(new GridLayout(10, 10));\n+            for (int i = 0; i < 10; i++)\n+                for (int j = 0; j < 10; j++) {\n+                    TextField tf = new TextField(\"I am \" + i + j);\n+                    tf.setSize(100, 20);\n+                    p.add(tf);\n+                }\n+        } else {\n+            TextField tf = new TextField(\"Smallness:\");\n+            tf.setSize(150, 50);\n+            p.add(tf);\n+        }\n+\n+        sp.add(p);\n+\n+        \/\/ Button panel\n+        buttonLeft = new Button(\"Left\");\n+        buttonLeft.addActionListener(this);\n+        buttonQuit = new Button(\"Quit\");\n+        buttonQuit.addActionListener(this);\n+        buttonSwap = new Button(\"Swap\");\n+        buttonSwap.addActionListener(this);\n+        buttonRight = new Button(\"Right\");\n+        buttonRight.addActionListener(this);\n+\n+        Panel bp = new Panel();\n+        bp.add(buttonLeft);\n+        bp.add(buttonSwap);\n+        bp.add(buttonQuit);\n+        bp.add(buttonRight);\n+\n+        \/\/ Window w\/ button panel and scrollpane\n+        f = new Frame(\"ScrollPane Test \" + (large ? \"large\" : \"small\"));\n+        f.setLayout(new BorderLayout());\n+        f.add(\"South\", bp);\n+        f.add(\"Center\", sp);\n+\n+        if (large) {\n+            f.setSize(300, 200);\n+            f.setLocation(100, 100);\n+        } else {\n+            f.setSize(200, 100);\n+            f.setLocation(500, 100);\n+        }\n+\n+        f.setVisible(true);\n+    }\n+\n+    public static void disposeAll() {\n+        ScrollPaneTester.st1.f.dispose();\n+        ScrollPaneTester.st2.f.dispose();\n+    }\n+\n+    public static void\n+    swapPanels() {\n+        ScrollPane sss = st1.sp;\n+\n+        st1.f.add(\"Center\", st2.sp);\n+        st1.sp = st2.sp;\n+\n+        st2.f.add(\"Center\", sss);\n+        st2.sp = sss;\n+    }\n+\n+    public void\n+    actionPerformed(ActionEvent ev) {\n+        Object s = ev.getSource();\n+\n+        if (s == buttonLeft) {\n+            scroll(true);\n+        } else if (s == buttonRight) {\n+            scroll(false);\n+        } else if (s == buttonSwap) {\n+            swapPanels();\n+        } else if (s == buttonQuit) {\n+            disposeAll();\n+        }\n+    }\n+\n+    private void\n+    scroll(boolean scroll_left) {\n+        Point p = sp.getScrollPosition();\n+\n+        if (scroll_left)\n+            p.x = Math.max(0, p.x - 20);\n+        else {\n+            int cwidth = sp.getComponent(0).getSize().width;\n+            p.x = Math.min(p.x + 20, cwidth);\n+        }\n+\n+        sp.setScrollPosition(p);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneTest.java","additions":216,"deletions":0,"binary":false,"changes":216,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.TextArea;\n+\n+\/*\n+ * @test\n+ * @bug 4120876\n+ * @key headful\n+ * @summary Ensure that getText can handle strings of various lengths,\n+ *          in particular strings longer than 255 characters\n+ *\/\n+\n+public class Length {\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            TextArea ta = new TextArea();\n+            StringBuffer sb = new StringBuffer(\"x\");\n+\n+            for (int i = 0; i < 14; i++) {\n+                String s = sb.toString();\n+                check(ta, s.substring(1));\n+                check(ta, s);\n+                check(ta, s + \"y\");\n+                sb.append(s);\n+            }\n+        });\n+    }\n+\n+    static void check(TextArea ta, String s) {\n+        ta.setText(s);\n+        String s2 = ta.getText();\n+        System.err.println(s.length() + \" \" + s2.length());\n+        if (s.length() != s2.length()) {\n+            throw new RuntimeException(\"Expected \" + s.length() +\n+                                       \"chars, got \" + s2.length());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextArea\/Length.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Window;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @summary automated test for window-ownership on Windows, Frames, and Dialogs\n+ *\/\n+\n+public class WindowOwner extends Panel {\n+\n+    Label status = null;\n+    static List<Window> windowsToDispose = new ArrayList<>();\n+\n+    public static void main(String[] args) throws Exception {\n+        WindowOwner windowOwner = new WindowOwner();\n+        try {\n+            EventQueue.invokeAndWait(windowOwner::init);\n+            Thread.sleep(2000);\n+        } finally {\n+            EventQueue.invokeAndWait(\n+                    () -> windowsToDispose.forEach(Window::dispose)\n+            );\n+        }\n+    }\n+\n+    public void init() {\n+        status = new Label();\n+        add(status);\n+\n+        statusMessage(\"Testing Window Ownership...\");\n+\n+        \/\/ Test Frame as owner\n+        Frame frame0 = new Frame(\"WindowOwner Test\");\n+        windowsToDispose.add(frame0);\n+        frame0.add(\"Center\", new Label(\"Frame Level0\"));\n+\n+        Dialog dialog1 = new Dialog(frame0, \"WindowOwner Test\");\n+        windowsToDispose.add(dialog1);\n+        dialog1.add(\"Center\", new Label(\"Dialog Level1\"));\n+        verifyOwner(dialog1, frame0);\n+\n+        Window window1 = new Window(frame0);\n+        windowsToDispose.add(window1);\n+        window1.add(\"Center\", new Label(\"Window Level1\"));\n+        window1.setBounds(10, 10, 140, 70);\n+        verifyOwner(window1, frame0);\n+\n+        verifyOwnee(frame0, dialog1);\n+        verifyOwnee(frame0, window1);\n+\n+        \/\/ Test Dialog as owner\n+        Dialog dialog2 = new Dialog(dialog1, \"WindowOwner Test\");\n+        windowsToDispose.add(dialog2);\n+        dialog2.add(\"Center\", new Label(\"Dialog Level2\"));\n+        verifyOwner(dialog2, dialog1);\n+\n+        Window window2 = new Window(dialog1);\n+        windowsToDispose.add(window2);\n+        window2.add(\"Center\", new Label(\"Window Level2\"));\n+        window2.setBounds(110, 110, 140, 70);\n+        verifyOwner(window2, dialog1);\n+\n+        verifyOwnee(dialog1, window2);\n+        verifyOwnee(dialog1, dialog2);\n+\n+        \/\/ Test Window as owner\n+        Window window3 = new Window(window2);\n+        windowsToDispose.add(window3);\n+        window3.add(\"Center\", new Label(\"Window Level3\"));\n+        window3.setBounds(210, 210, 140, 70);\n+        verifyOwner(window3, window2);\n+        verifyOwnee(window2, window3);\n+\n+        \/\/ Ensure native peers handle ownership without errors\n+        frame0.pack();\n+        frame0.setVisible(true);\n+\n+        dialog1.pack();\n+        dialog1.setVisible(true);\n+\n+        window1.setLocation(50, 50);\n+        window1.setVisible(true);\n+\n+        dialog2.pack();\n+        dialog2.setVisible(true);\n+\n+        window2.setLocation(100, 100);\n+        window2.setVisible(true);\n+\n+        window3.setLocation(150, 150);\n+        window3.setVisible(true);\n+\n+        statusMessage(\"Window Ownership test completed successfully.\");\n+    }\n+\n+  public void statusMessage(String msg) {\n+      status.setText(msg);\n+      status.invalidate();\n+      validate();\n+  }\n+\n+  public static void verifyOwner(Window ownee, Window owner) {\n+      if (ownee.getOwner() != owner) {\n+          throw new RuntimeException(\"Window owner not valid for \"\n+                  + ownee.getName());\n+      }\n+  }\n+\n+  public static void verifyOwnee(Window owner, Window ownee) {\n+      Window[] ownedWins = owner.getOwnedWindows();\n+      if (!windowInList(ownedWins, ownee)) {\n+          throw new RuntimeException(\"Ownee \" + ownee.getName()\n+                  + \" not found in owner list for \" + owner.getName());\n+      }\n+  }\n+\n+  public static boolean windowInList(Window[] windows, Window target) {\n+      for (Window window : windows) {\n+          if (window == target) {\n+              return true;\n+          }\n+      }\n+      return false;\n+  }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/WindowOwner.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4240228\n+ * @summary This test is designed to test for a crashing bug in the zh\n+ *          locale on Solaris. Rotated text should be displayed, but\n+ *          anything other than a crash passes the specific test.\n+ *          For example, the missing glyph empty box may be displayed\n+ *          in some locales, or no text at all.\n+ *\/\n+\n+public class RotateTest3 extends Panel {\n+    static JFrame frame;\n+\n+    protected Java2DView java2DView;\n+\n+    public RotateTest3(){\n+        this.setLayout(new GridLayout(1, 1));\n+        this.setSize(300, 300);\n+        this.java2DView = new Java2DView();\n+        this.add(this.java2DView);\n+    }\n+\n+    public static void main(String[] s) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(RotateTest3::initAndShowGui);\n+            Thread.sleep(1000);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void initAndShowGui() {\n+        RotateTest3 panel = new RotateTest3();\n+\n+        frame = new JFrame(\"RotateTest3\");\n+        frame.addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent e) {\n+                frame.dispose();\n+            }\n+        });\n+        frame.getContentPane().setLayout(new GridLayout(1, 1));\n+        frame.getContentPane().add(\"Center\", panel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    static public class Java2DView extends Component {\n+\n+        public void paint(Graphics g){\n+            Graphics2D g2d = (Graphics2D) g;\n+            Dimension d = this.getSize();\n+            g.setColor(this.getBackground());\n+            g.fillRect(0, 0, d.width, d.height);\n+            g2d.setPaint(Color.black);\n+\n+            g2d.translate(150,150);\n+            g2d.rotate(-Math.PI \/ 3);\n+\n+            String testString =\n+             \"\\u4e00\\u4e8c\\u4e09\\u56db\\u4e94\\u516d\\u4e03\\u516b\\u4e5d\\u5341\";\n+            g2d.drawString(testString, 0, 0);\n+        }\n+\n+        public Dimension getMinimumSize(){\n+            return new Dimension(300, 300);\n+        }\n+\n+        public Dimension getPreferredSize(){\n+            return new Dimension(300, 300);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/Rotate\/RotateTest3.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}