{"files":[{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests.gc;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+import jdk.test.whitebox.gc.GC;\n+\n+import java.lang.ref.*;\n+import java.util.*;\n+\n+\/*\n+ * @test\n+ * @bug 8256999\n+ * @summary Test that Reference.refersTo intrinsics are properly handled\n+ * @library \/test\/lib \/\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @requires vm.compiler2.enabled\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI compiler.c2.irTests.gc.ReferenceRefersToTests\n+ *\/\n+public class ReferenceRefersToTests {\n+\n+    private static String[] args(String... add) {\n+        List<String> args = new ArrayList<>();\n+\n+         \/\/ Use PerMethodTrapLimit=0 to compile all branches in the intrinsics.\n+        args.add(\"-XX:PerMethodTrapLimit=0\");\n+\n+        \/\/ Forcefully inline all methods to reach the intrinsic code.\n+        args.add(\"-XX:CompileCommand=inline,compiler.c2.irTests.gc.ReferenceRefersToTests::*\");\n+        args.add(\"-XX:CompileCommand=inline,java.lang.ref.Reference::*\");\n+        args.add(\"-XX:CompileCommand=inline,java.lang.ref.PhantomReference::*\");\n+\n+        \/\/ Mix in test config code.\n+        args.addAll(Arrays.asList(add));\n+\n+        return args.toArray(new String[0]);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework framework = new TestFramework();\n+\n+        int idx = 0;\n+        if (GC.isSelectedErgonomically() && GC.Serial.isSupported()) {\n+            \/\/ Serial does not have any barriers in refersTo.\n+            framework.addScenarios(new Scenario(idx++, args(\n+                \"-XX:+UseSerialGC\"\n+            )));\n+        }\n+        if (GC.isSelectedErgonomically() && GC.Parallel.isSupported()) {\n+            \/\/ Parallel does not have any barriers in refersTo.\n+            framework.addScenarios(new Scenario(idx++, args(\n+                \"-XX:+UseParallelGC\"\n+            )));\n+        }\n+        if (GC.isSelectedErgonomically() && GC.G1.isSupported()) {\n+            \/\/ G1 nominally needs keep-alive barriers for Reference loads,\n+            \/\/ but should not have them for refersTo.\n+            framework.addScenarios(new Scenario(idx++, args(\n+                \"-XX:+UseG1GC\"\n+            )));\n+        }\n+        if (GC.isSelectedErgonomically() && GC.Shenandoah.isSupported()) {\n+            \/\/ Shenandoah nominally needs keep-alive barriers for Reference loads,\n+            \/\/ but should not have them for refersTo. We only care to check that\n+            \/\/ SATB barrier is not emitted. Shenandoah would also emit LRB barrier,\n+            \/\/ which would false-negative the test.\n+            framework.addScenarios(new Scenario(idx++, args(\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:ShenandoahGCMode=passive\",\n+                \"-XX:+ShenandoahSATBBarrier\",\n+                \"-XX:+UseShenandoahGC\"\n+            )));\n+        }\n+        if (GC.isSelectedErgonomically() && GC.Z.isSupported()) {\n+            \/\/ ZGC does not emit barriers in IR.\n+            framework.addScenarios(new Scenario(idx++, args(\n+                \"-XX:+UseZGC\"\n+            )));\n+        }\n+        framework.start();\n+    }\n+\n+    static final Object REF = new Object();\n+\n+    static final SoftReference<Object> SR = new SoftReference<>(REF);\n+    static final WeakReference<Object> WR = new WeakReference<>(REF);\n+    static final PhantomReference<Object> PR = new PhantomReference<>(REF, null);\n+\n+    \/\/ Verify that we are left with a single load of Reference.referent and no stores.\n+    \/\/ This serves as a signal that no GC barriers are emitted in IR.\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD, \"1\" })\n+    @IR(failOn = { IRNode.STORE })\n+    public boolean soft_null() {\n+        return SR.refersTo(null);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD, \"1\" })\n+    @IR(failOn = { IRNode.STORE })\n+    public boolean soft_ref() {\n+        return SR.refersTo(REF);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD, \"1\" })\n+    @IR(failOn = { IRNode.STORE })\n+    public boolean weak_null() {\n+        return WR.refersTo(null);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD, \"1\" })\n+    @IR(failOn = { IRNode.STORE })\n+    public boolean weak_ref() {\n+        return WR.refersTo(REF);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD, \"1\" })\n+    @IR(failOn = { IRNode.STORE })\n+    public boolean phantom_null() {\n+        return PR.refersTo(null);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.LOAD, \"1\" })\n+    @IR(failOn = { IRNode.STORE })\n+    public boolean phantom_ref() {\n+        return PR.refersTo(REF);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/gc\/ReferenceRefersToTests.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}