{"files":[{"patch":"@@ -26,1 +26,3 @@\n- * @bug 4981566 5028634 5094412 6304984 7025786 7025789 8001112 8028545 8000961 8030610 8028546 8188870 8173382 8173382 8193290 8205619 8028563 8245147 8245586 8257453 8286035\n+ * @bug 4981566 5028634 5094412 6304984 7025786 7025789 8001112 8028545\n+ * 8000961 8030610 8028546 8188870 8173382 8173382 8193290 8205619 8028563\n+ * 8245147 8245586 8257453 8286035\n@@ -43,1 +45,0 @@\n-import java.util.Arrays;\n@@ -45,1 +46,0 @@\n-import java.util.function.BiConsumer;\n@@ -79,14 +79,15 @@\n-        EIGHT(true,      \"52.0\",  \"8\", Versions::checksrc8),\n-        NINE(true,       \"53.0\",  \"9\", Versions::checksrc9),\n-        TEN(true,        \"54.0\", \"10\", Versions::checksrc10),\n-        ELEVEN(false,    \"55.0\", \"11\", Versions::checksrc11),\n-        TWELVE(false,    \"56.0\", \"12\", Versions::checksrc12),\n-        THIRTEEN(false,  \"57.0\", \"13\", Versions::checksrc13),\n-        FOURTEEN(false,  \"58.0\", \"14\", Versions::checksrc14),\n-        FIFTEEN(false,   \"59.0\", \"15\", Versions::checksrc15),\n-        SIXTEEN(false,   \"60.0\", \"16\", Versions::checksrc16),\n-        SEVENTEEN(false, \"61.0\", \"17\", Versions::checksrc17),\n-        EIGHTEEN(false,  \"62.0\", \"18\", Versions::checksrc18),\n-        NINETEEN(false,  \"63.0\", \"19\", Versions::checksrc19),\n-        TWENTY(false,    \"64.0\", \"20\", Versions::checksrc20),\n-        TWENTY_ONE(false,\"65.0\", \"21\", Versions::checksrc21);\n+        EIGHT(true,      \"52.0\",  \"8\"),\n+        NINE(true,       \"53.0\",  \"9\"),\n+        TEN(true,        \"54.0\", \"10\"),\n+        ELEVEN(false,    \"55.0\", \"11\"),\n+        TWELVE(false,    \"56.0\", \"12\"),\n+        THIRTEEN(false,  \"57.0\", \"13\"),\n+        FOURTEEN(false,  \"58.0\", \"14\"),\n+        FIFTEEN(false,   \"59.0\", \"15\"),\n+        SIXTEEN(false,   \"60.0\", \"16\"),\n+        SEVENTEEN(false, \"61.0\", \"17\"),\n+        EIGHTEEN(false,  \"62.0\", \"18\"),\n+        NINETEEN(false,  \"63.0\", \"19\"),\n+        TWENTY(false,    \"64.0\", \"20\"),\n+        TWENTY_ONE(false,\"65.0\", \"21\"),\n+        ; \/\/ Reduce code churn when appending new constants\n@@ -97,1 +98,1 @@\n-        private final BiConsumer<Versions, List<String>> checker;\n+        private final int intTarget;\n@@ -99,2 +100,1 @@\n-        private SourceTarget(boolean dotOne, String classFileVer, String target,\n-                             BiConsumer<Versions, List<String>> checker) {\n+        private SourceTarget(boolean dotOne, String classFileVer, String target) {\n@@ -104,1 +104,1 @@\n-            this.checker = checker;\n+            this.intTarget = Integer.parseInt(target);\n@@ -107,2 +107,14 @@\n-        public void checksrc(Versions version, List<String> args) {\n-            checker.accept(version, args);\n+        public void checksrc(Versions versions, List<String> args) {\n+            \/\/ checker.accept(version, args);\n+            versions.printargs(\"checksrc\" + target, args);\n+            List<String> expectedPassFiles = new ArrayList<>();\n+            List<String> expectedFailFiles = new ArrayList<>();\n+\n+            for (SourceExample srcEg : SourceExample.values()) {\n+                var x = (srcEg.sourceLevel <= this.intTarget) ?\n+                    expectedPassFiles.add(srcEg.fileName()):\n+                    expectedFailFiles.add(srcEg.fileName());\n+            }\n+\n+            versions.expectedPass(args, expectedPassFiles);\n+            versions.expectedFail(args, expectedFailFiles);\n@@ -122,0 +134,4 @@\n+\n+        public int intTarget() {\n+            return intTarget;\n+        }\n@@ -224,2 +240,0 @@\n-        List<String> jcargs = new ArrayList<>();\n-        jcargs.add(\"-Xlint:-options\");\n@@ -227,7 +241,1 @@\n-        \/\/ add in args conforming to List requrements of JavaCompiler\n-        for (String onearg : args) {\n-            String[] fields = onearg.split(\" \");\n-            for (String onefield : fields) {\n-                jcargs.add(onefield);\n-            }\n-        }\n+        List<String> jcargs = javaCompilerOptions(args);\n@@ -248,39 +256,8 @@\n-    protected void checksrc8(List<String> args) {\n-        printargs(\"checksrc8\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\"));\n-        expectedFail(args, List.of(\"New10.java\", \"New11.java\", \"New14.java\", \"New15.java\",\n-                                   \"New16.java\", \"New17.java\", \"New21.java\"));\n-\n-    }\n-\n-    protected void checksrc9(List<String> args) {\n-        printargs(\"checksrc9\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\"));\n-        expectedFail(args, List.of(\"New10.java\", \"New11.java\", \"New14.java\", \"New15.java\",\n-                                   \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-    protected void checksrc10(List<String> args) {\n-        printargs(\"checksrc10\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\"));\n-        expectedFail(args, List.of(\"New11.java\", \"New14.java\", \"New15.java\",\n-                                   \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-    protected void checksrc11(List<String> args) {\n-        printargs(\"checksrc11\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\"));\n-        expectedFail(args, List.of(\"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-    protected void checksrc12(List<String> args) {\n-        printargs(\"checksrc12\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\"));\n-        expectedFail(args, List.of(\"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-    protected void checksrc13(List<String> args) {\n-        printargs(\"checksrc13\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\"));\n-        expectedFail(args, List.of(\"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n+    \/**\n+     * Create a list of options suitable for use with {@link JavaCompiler}\n+     * @param args a list of space-delimited options, such as \"-source 11\"\n+     * @return a list of arguments suitable for use with {@link JavaCompiler}\n+     *\/\n+    private static List<String> javaCompilerOptions(List<String> args) {\n+        List<String> jcargs = new ArrayList<>();\n+        jcargs.add(\"-Xlint:-options\");\n@@ -288,5 +265,8 @@\n-    protected void checksrc14(List<String> args) {\n-        printargs(\"checksrc14\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                   \"New14.java\"));\n-        expectedFail(args, List.of(\"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n+        \/\/ add in args conforming to List requirements of JavaCompiler\n+        for (String onearg : args) {\n+            String[] fields = onearg.split(\" \");\n+            for (String onefield : fields) {\n+                jcargs.add(onefield);\n+            }\n+        }\n+        return jcargs;\n@@ -295,6 +275,24 @@\n-   protected void checksrc15(List<String> args) {\n-       printargs(\"checksrc15\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\"));\n-       expectedFail(args, List.of(\"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n+    \/**\n+     * The BASE source example is expected to compile on all source\n+     * levels. Otherwise, an example is expected to compile on its\n+     * declared source level and later, but to _not_ compile on\n+     * earlier source levels. (This enum is _not_ intended to capture\n+     * the uncommon program that is accepted in one version of the\n+     * language and rejected in a later version.)\n+     *\n+     * When version of the language get a new, non-preview feature, a\n+     * new source example enum constant should be added.\n+     *\/\n+    enum SourceExample {\n+        BASE(7, \"Base.java\", \"public class Base { }\\n\"),\n+\n+\n+        SOURCE_8(8, \"New8.java\",\n+            \/\/ New feature in 8: lambda\n+            \"\"\"\n+            public class New8 {\n+                void m() {\n+                    new Thread(() -> { });\n+                }\n+            }\n+             \"\"\"),\n@@ -302,6 +300,9 @@\n-   protected void checksrc16(List<String> args) {\n-       printargs(\"checksrc16\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\"));\n-       expectedFail(args, List.of(\"New17.java\", \"New21.java\"));\n-    }\n+        SOURCE_10(10, \"New10.java\",\n+            \/\/ New feature in 10: var\n+            \"\"\"\n+            public class New10 {\n+                void m() {\n+                    var tmp = new Thread(() -> { });\n+                }\n+            }\n+            \"\"\"),\n@@ -309,6 +310,10 @@\n-   protected void checksrc17(List<String> args) {\n-       printargs(\"checksrc17\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\"));\n-       expectedFail(args, List.of(\"New21.java\"));\n-    }\n+        SOURCE_11(11, \"New11.java\",\n+            \/\/ New feature in 11: var for lambda parameters\n+            \"\"\"\n+            public class New11 {\n+                static java.util.function.Function<String,String> f = (var x) -> x.substring(0);\n+                void m(String name) {\n+                    var tmp = new Thread(() -> { }, f.apply(name));\n+                }\n+            }\n+            \"\"\"),\n@@ -316,6 +321,43 @@\n-   protected void checksrc18(List<String> args) {\n-       printargs(\"checksrc18\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\"));\n-       expectedFail(args, List.of(\"New21.java\"));\n-    }\n+         SOURCE_14(14, \"New14.java\",\n+             \/\/ New feature in 14: switch expressions\n+             \"\"\"\n+             public class New14 {\n+                 static {\n+                     int i = 5;\n+                     System.out.println(\n+                         switch(i) {\n+                             case 0 -> false;\n+                             default -> true;\n+                         }\n+                     );\n+                 }\n+             }\n+             \"\"\"),\n+\n+         SOURCE_15(15, \"New15.java\",\n+             \/\/ New feature in 15: text blocks\n+             \"\"\"\n+             public class New15 {\n+                 public static final String s =\n+                 \\\"\\\"\\\"\n+                 Hello, World.\n+                 \\\"\\\"\\\"\n+                 ;\n+             }\n+             \"\"\"),\n+\n+         SOURCE_16(16, \"New16.java\",\n+             \/\/ New feature in 16: records\n+             \"\"\"\n+             public class New16 {\n+                 public record Record(double rpm) {\n+                     public static final Record LONG_PLAY = new Record(100.0\/3.0);\n+                 }\n+             }\n+             \"\"\"),\n+\n+         SOURCE_17(17, \"New17.java\",\n+             \/\/ New feature in 17: sealed classes\n+             \"\"\"\n+             public class New17 {\n+                 public static sealed class Seal {}\n@@ -323,6 +365,5 @@\n-   protected void checksrc19(List<String> args) {\n-       printargs(\"checksrc19\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\"));\n-       expectedFail(args, List.of(\"New21.java\"));\n-    }\n+                 public static final class Pinniped extends Seal {}\n+                 public static final class TaperedThread extends Seal {}\n+                 public static final class Wax extends Seal {}\n+             }\n+             \"\"\"),\n@@ -330,6 +371,26 @@\n-   protected void checksrc20(List<String> args) {\n-       printargs(\"checksrc20\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\"));\n-       expectedFail(args, List.of(\"New21.java\"));\n-    }\n+         SOURCE_21(21, \"New21.java\",\n+             \/\/ New feature in 21: pattern matching for switch\n+             \"\"\"\n+             public class New21 {\n+                 public static void main(String... args) {\n+                     Object o = new Object(){};\n+\n+                     System.out.println(switch (o) {\n+                                        case Integer i -> String.format(\"%d\", i);\n+                                        default        -> o.toString();\n+                                        });\n+                 }\n+             }\n+             \"\"\"),\n+\n+            ; \/\/ Reduce code churn when appending new constants\n+\n+        private int sourceLevel;\n+        private String fileName;\n+        private String fileContents;\n+\n+        private SourceExample(int sourceLevel, String fileName, String fileContents) {\n+            this.sourceLevel = sourceLevel;\n+            this.fileName = fileName;\n+            this.fileContents = fileContents;\n+        }\n@@ -337,6 +398,2 @@\n-   protected void checksrc21(List<String> args) {\n-       printargs(\"checksrc21\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\",\n-                                  \"New21.java\"));\n-       \/\/ Add expectedFail after new language features added in a later release.\n+        public String fileName() {return fileName;}\n+        public String fileContents() {return fileContents;}\n@@ -367,10 +424,1 @@\n-        List<String> jcargs = new ArrayList<>();\n-        jcargs.add(\"-Xlint:-options\");\n-\n-        \/\/ add in args conforming to List requrements of JavaCompiler\n-        for (String onearg : args) {\n-            String[] fields = onearg.split(\" \");\n-            for (String onefield : fields) {\n-                jcargs.add(onefield);\n-            }\n-        }\n+        List<String> jcargs = javaCompilerOptions(args);\n@@ -404,10 +452,1 @@\n-        List<String> jcargs = new ArrayList<>();\n-        jcargs.add(\"-Xlint:-options\");\n-\n-        \/\/ add in args conforming to List requrements of JavaCompiler\n-        for (String onearg : args) {\n-            String[] fields = onearg.split(\" \");\n-            for (String onefield : fields) {\n-                jcargs.add(onefield);\n-            }\n-        }\n+        List<String> jcargs = javaCompilerOptions(args);\n@@ -468,133 +507,3 @@\n-        \/* Create a file that executes with all supported versions. *\/\n-        writeSourceFile(\"Base.java\",\"public class Base { }\\n\");\n-\n-        \/*\n-         * Create a file with a new feature in 7, not in 6 : \"<>\"\n-         *\/\n-        writeSourceFile(\"New7.java\",\n-            \"\"\"\n-            import java.util.List;\n-            import java.util.ArrayList;\n-            class New7 { List<String> s = new ArrayList<>(); }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 8, not in 7 : lambda\n-         *\/\n-        writeSourceFile(\"New8.java\",\n-            \"\"\"\n-            public class New8 {\n-                void m() {\n-                new Thread(() -> { });\n-                }\n-            }\n-             \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 10, not in 9 : var\n-         *\/\n-        writeSourceFile(\"New10.java\",\n-            \"\"\"\n-            public class New10 {\n-                void m() {\n-                var tmp = new Thread(() -> { });\n-                }\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 11, not in 10 : var for lambda parameters\n-         *\/\n-        writeSourceFile(\"New11.java\",\n-            \"\"\"\n-            public class New11 {\n-                static java.util.function.Function<String,String> f = (var x) -> x.substring(0);\n-                void m(String name) {\n-                var tmp = new Thread(() -> { }, f.apply(name));\n-                }\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 14, not in 13 : switch expressions\n-         *\/\n-        writeSourceFile(\"New14.java\",\n-            \"\"\"\n-            public class New14 {\n-                static {\n-                    int i = 5;\n-                    System.out.println(\n-                        switch(i) {\n-                            case 0 -> false;\n-                            default -> true;\n-                        }\n-                    );\n-                }\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 15, not in 14 : text blocks\n-         *\/\n-        writeSourceFile(\"New15.java\",\n-            \"\"\"\n-            public class New15 {\n-                public static final String s =\n-                \\\"\\\"\\\"\n-                Hello, World.\n-                \\\"\\\"\\\"\n-                ;\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 16, not in 15 : records\n-         *\/\n-        writeSourceFile(\"New16.java\",\n-            \"\"\"\n-            public class New16 {\n-                public record Record(double rpm) {\n-                    public static final Record LONG_PLAY = new Record(100.0\/3.0);\n-                }\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 17, not in 16 : sealed classes\n-         *\/\n-        writeSourceFile(\"New17.java\",\n-            \"\"\"\n-            public class New17 {\n-                public static sealed class Seal {}\n-\n-                public static final class Pinniped extends Seal {}\n-                public static final class TaperedThread extends Seal {}\n-                public static final class Wax extends Seal {}\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 21, not in 20 : pattern matching for switch\n-         *\/\n-        writeSourceFile(\"New21.java\",\n-            \"\"\"\n-            public class New21 {\n-                public static void main(String... args) {\n-                    Object o = new Object(){};\n-\n-                    System.out.println(switch (o) {\n-                                       case Integer i -> String.format(\"%d\", i);\n-                                       default        -> o.toString();\n-                                       });\n-                }\n-            }\n-            \"\"\"\n-        );\n+        for (SourceExample srcEg : SourceExample.values()) {\n+            writeSourceFile(srcEg.fileName(), srcEg.fileContents());\n+        }\n","filename":"test\/langtools\/tools\/javac\/versions\/Versions.java","additions":180,"deletions":271,"binary":false,"changes":451,"status":"modified"}]}