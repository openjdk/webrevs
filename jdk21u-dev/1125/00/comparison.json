{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,5 @@\n-    private static final Object OBJA = new Object();\n-    private static final Object OBJB = new Object();\n+    private static class ObjectA { }\n+    private static class ObjectB { }\n+\n+    private static final Object OBJA = new ObjectA();\n+    private static final Object OBJB = new ObjectB();\n@@ -68,0 +71,2 @@\n+                                            \/* Carrier Thread can hold a lock on a VirtualThread, which we ignore: *\/\n+                                            .filter(i -> !i.getLockName().contains(\"java.lang.VirtualThread\"))\n@@ -120,1 +125,1 @@\n-        String result = TM.getThreadInfo(tid).getLockName();\n+        String lockName = TM.getThreadInfo(tid).getLockName();\n@@ -125,1 +130,1 @@\n-        if (p.test(result)) {\n+        if (p.test(lockName)) {\n@@ -128,1 +133,1 @@\n-            while (p.test(result)) {\n+            while (p.test(lockName)) {\n@@ -132,1 +137,1 @@\n-                            + expectedLock + \" but got \" + result);\n+                            + expectedLock + \" but got \" + lockName);\n@@ -135,1 +140,1 @@\n-                result = TM.getThreadInfo(tid).getLockName();\n+                lockName = TM.getThreadInfo(tid).getLockName();\n@@ -139,2 +144,2 @@\n-        result = TM.getThreadInfo(tid).getLockOwnerName();\n-        final String expectedOwner = (owner != null ? owner.getName() : null);\n+        String lockOwnerName = TM.getThreadInfo(tid).getLockOwnerName();\n+        final String expectedOwnerName = (owner != null ? owner.getName() : null);\n@@ -142,3 +147,3 @@\n-        p = (res) -> ((res != null && !res.equals(expectedOwner))\n-                || (res == null && expectedOwner != null));\n-        if (p.test(result)) {\n+        p = (res) -> ((res != null && !res.equals(expectedOwnerName))\n+                || (res == null && expectedOwnerName != null));\n+        if (p.test(lockOwnerName)) {\n@@ -147,1 +152,1 @@\n-                    + expectedOwner + \" but got \" + result);\n+                    + expectedOwnerName + \" but got \" + lockOwnerName);\n@@ -345,1 +350,0 @@\n-\n@@ -352,1 +356,1 @@\n-                \/\/ Make sure the main thread is not holding any lock\n+                \/\/ Make sure the main thread is not holding any lock (except possibly a VirtualThread)\n@@ -365,0 +369,1 @@\n+\n@@ -366,1 +371,4 @@\n-                checkBlockedObject(t2, OBJC, mainThread);\n+                if (!mainThread.isVirtual()) {\n+                    \/\/ ThreadInfo not available for Virtual Threads.\n+                    checkBlockedObject(t2, OBJC, mainThread);\n+                }\n@@ -370,1 +378,1 @@\n-                long[] expectedThreads = new long[3];\n+                long[] expectedThreads = new long[mainThread.isVirtual() ? 2: 3];\n@@ -373,1 +381,4 @@\n-                expectedThreads[2] = mainThread.getId(); \/\/ owner of lockC\n+                if (!mainThread.isVirtual()) {\n+                    \/\/ ThreadInfo not available for Virtual Threads.\n+                    expectedThreads[2] = mainThread.getId(); \/\/ owner of lockC\n+                }\n@@ -403,0 +414,3 @@\n+            if (info == null) {\n+                continue; \/\/ Missing thread, e.g. completed. Ignore.\n+            }\n@@ -424,2 +438,2 @@\n-        ThreadInfo[] infos = TM.getThreadInfo(TM.getAllThreadIds());\n-        doCheck(infos, lock, expectedThreads);\n+        ThreadInfo[] allThreadInfos = TM.getThreadInfo(TM.getAllThreadIds());\n+        doCheck(allThreadInfos, lock, expectedThreads);\n@@ -428,2 +442,2 @@\n-        infos = TM.getThreadInfo(TM.getAllThreadIds(), 1);\n-        doCheck(infos, lock, expectedThreads);\n+        allThreadInfos = TM.getThreadInfo(TM.getAllThreadIds(), 1);\n+        doCheck(allThreadInfos, lock, expectedThreads);\n@@ -437,0 +451,3 @@\n+            if (info == null) {\n+                continue; \/\/ Missing thread, e.g. completed. Ignore.\n+            }\n@@ -448,0 +465,1 @@\n+        \/\/ Follow chain of locks:\n@@ -453,0 +471,7 @@\n+            log(\"ownerInfo = %s\", ownerInfo);\n+            if (ownerInfo.getThreadName().contains(\"ForkJoinPool\")) {\n+                \/\/ Ignore e.g. \"ForkJoinPool-1-worker-1\" waiting on a VirtualThread\n+                log (\"skipping %s\", ownerInfo);\n+                lock = ownerInfo.getLockName();\n+                continue;\n+            }\n@@ -471,0 +496,1 @@\n+        int failures = 0;\n@@ -477,0 +503,1 @@\n+                failures++;\n@@ -479,0 +506,3 @@\n+        if (failures > 0) {\n+            throw new RuntimeException(\"TEST FAILED: \" + failures + \" unexpected thread(s).\");\n+        }\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/Locks.java","additions":53,"deletions":23,"binary":false,"changes":76,"status":"modified"}]}