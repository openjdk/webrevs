{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.ArrayList;\n@@ -542,2 +543,10 @@\n-        if (list.isEmpty()) {\n-            throw new NoSuchAlgorithmException(algorithm + \" KEM not available\");\n+        List<Provider.Service> allowed = new ArrayList<>();\n+        for (Provider.Service s : list) {\n+            if (!JceSecurity.canUseProvider(s.getProvider())) {\n+                continue;\n+            }\n+            allowed.add(s);\n+        }\n+        if (allowed.isEmpty()) {\n+            throw new NoSuchAlgorithmException\n+                    (algorithm + \" KEM not available\");\n@@ -545,1 +554,2 @@\n-        return new KEM(algorithm, new DelayedKEM(list.toArray(new Provider.Service[0])));\n+\n+        return new KEM(algorithm, new DelayedKEM(allowed.toArray(new Provider.Service[0])));\n@@ -571,1 +581,1 @@\n-        GetInstance.Instance instance = GetInstance.getInstance(\n+        GetInstance.Instance instance = JceSecurity.getInstance(\n@@ -604,1 +614,1 @@\n-        GetInstance.Instance instance = GetInstance.getInstance(\n+        GetInstance.Instance instance = JceSecurity.getInstance(\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KEM.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @build java.base\/com.sun.crypto.provider.EvenKEMImpl\n@@ -30,0 +31,1 @@\n+ * @run main\/othervm Compliance\n@@ -48,0 +50,2 @@\n+import static com.sun.crypto.provider.EvenKEMImpl.isEven;\n+\n@@ -54,6 +58,5 @@\n-        try {\n-            Security.insertProviderAt(new ProviderImpl(), 1);\n-            delayed();\n-        } finally {\n-            Security.removeProvider(\"XP\");\n-        }\n+        \/\/ Patch an alternate DHKEM in SunEC which is ahead of SunJCE\n+        \/\/ in security provider listing.\n+        Security.getProvider(\"SunEC\")\n+                .put(\"KEM.DHKEM\", \"com.sun.crypto.provider.EvenKEMImpl\");\n+        delayed();\n@@ -223,28 +226,0 @@\n-    public static class ProviderImpl extends Provider {\n-        ProviderImpl() {\n-            super(\"XP\", \"1\", \"XP\");\n-            put(\"KEM.DHKEM\", \"Compliance$KEMImpl\");\n-        }\n-    }\n-\n-    static boolean isEven(Key k) {\n-        return Arrays.hashCode(k.getEncoded()) % 2 == 0;\n-    }\n-\n-    public static class KEMImpl extends DHKEM {\n-\n-        @Override\n-        public EncapsulatorSpi engineNewEncapsulator(PublicKey pk, AlgorithmParameterSpec spec, SecureRandom secureRandom)\n-                throws InvalidAlgorithmParameterException, InvalidKeyException {\n-            if (!isEven(pk)) throw new InvalidKeyException(\"Only accept even keys\");\n-            return super.engineNewEncapsulator(pk, spec, secureRandom);\n-        }\n-\n-        @Override\n-        public DecapsulatorSpi engineNewDecapsulator(PrivateKey sk, AlgorithmParameterSpec spec)\n-                throws InvalidAlgorithmParameterException, InvalidKeyException {\n-            if (!isEven(sk)) throw new InvalidKeyException(\"Only accept even keys\");\n-            return super.engineNewDecapsulator(sk, spec);\n-        }\n-    }\n-\n@@ -269,1 +244,1 @@\n-        Asserts.assertEQ(eeven.providerName(), \"XP\");\n+        Asserts.assertEQ(eeven.providerName(), \"SunEC\");\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/DHKEM\/Compliance.java","additions":11,"deletions":36,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.crypto.provider;\n+\n+import java.security.*;\n+import java.security.spec.*;\n+import java.util.Arrays;\n+\n+\/\/ The alternate DHKEM implementation used by the Compliance.java test.\n+public class EvenKEMImpl extends DHKEM {\n+\n+    public static boolean isEven(Key k) {\n+        return Arrays.hashCode(k.getEncoded()) % 2 == 0;\n+    }\n+\n+    @Override\n+    public EncapsulatorSpi engineNewEncapsulator(\n+            PublicKey pk, AlgorithmParameterSpec spec, SecureRandom secureRandom)\n+            throws InvalidAlgorithmParameterException, InvalidKeyException {\n+        if (!isEven(pk)) throw new InvalidKeyException(\"Only accept even keys\");\n+        return super.engineNewEncapsulator(pk, spec, secureRandom);\n+    }\n+\n+    @Override\n+    public DecapsulatorSpi engineNewDecapsulator(\n+            PrivateKey sk, AlgorithmParameterSpec spec)\n+            throws InvalidAlgorithmParameterException, InvalidKeyException {\n+        if (!isEven(sk)) throw new InvalidKeyException(\"Only accept even keys\");\n+        return super.engineNewDecapsulator(sk, spec);\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/DHKEM\/java.base\/com\/sun\/crypto\/provider\/EvenKEMImpl.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ *          java.base\/javax.crypto:+open\n@@ -91,1 +92,1 @@\n-                KEM kem1 = KEM.getInstance(\"RSA-KEM\", p);\n+                KEM kem1 = getKemImpl(p);\n@@ -104,1 +105,1 @@\n-                KEM kem2 = KEM.getInstance(\"RSA-KEM\", p);\n+                KEM kem2 = getKemImpl(p);\n@@ -125,0 +126,8 @@\n+    \/\/ To bypass the JCE security provider signature check\n+    private static KEM getKemImpl(Provider p) throws Exception {\n+        var ctor = KEM.class.getDeclaredConstructor(\n+                String.class, KEMSpi.class, Provider.class);\n+        ctor.setAccessible(true);\n+        return ctor.newInstance(\"RSA-KEM\", new KEMImpl(), p);\n+    }\n+\n","filename":"test\/jdk\/javax\/crypto\/KEM\/RSA_KEM.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"}]}