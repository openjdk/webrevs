{"files":[{"patch":"@@ -63,6 +63,0 @@\n-####\n-## NSK JDWP Tests failing with wrapper\n-\n-vmTestbase\/nsk\/jdwp\/ThreadReference\/ForceEarlyReturn\/forceEarlyReturn002\/forceEarlyReturn002.java 8286789 generic-all\n-\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList-Virtual.txt","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n- *         - debuggee starts test thread which executes infinite loop in native method, debugger calls command for\n+ *         - debuggee starts test thread which executes loop in native method, debugger calls command for\n@@ -251,0 +251,3 @@\n+        \/\/ signal native method to exit; the thread will be actually suspended\n+        pipe.println(forceEarlyReturn002a.COMMAND_EXIT_THREAD_IN_NATIVE);\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ThreadReference\/ForceEarlyReturn\/forceEarlyReturn002\/forceEarlyReturn002.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,2 @@\n+    public final static String COMMAND_EXIT_THREAD_IN_NATIVE = \"exitInNative\";\n+\n@@ -52,0 +54,4 @@\n+            return true;\n+        } else if (command.equals(COMMAND_EXIT_THREAD_IN_NATIVE)) {\n+            exitThreadInNative();\n+\n@@ -98,0 +104,2 @@\n+    private static native void exitThreadInNative();\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ThreadReference\/ForceEarlyReturn\/forceEarlyReturn002\/forceEarlyReturn002a.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,8 @@\n+#if defined(_WIN32)\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+#include <atomic>\n+\n@@ -28,0 +36,9 @@\n+static std::atomic<bool> wait_in_native(true);\n+\n+static void delay(int seconds) {\n+#if defined(_WIN32)\n+    Sleep(1000L * seconds);\n+#else\n+    sleep(seconds);\n+#endif\n+}\n@@ -32,1 +49,0 @@\n-    static volatile int dummy_counter = 0;\n@@ -39,1 +55,3 @@\n-    while (dummy_counter == 0) {}\n+    while (wait_in_native) {\n+        delay(1);\n+    }\n@@ -41,1 +59,0 @@\n-    \/\/ Should not reach here\n@@ -45,0 +62,6 @@\n+JNIEXPORT void JNICALL\n+Java_nsk_jdwp_ThreadReference_ForceEarlyReturn_forceEarlyReturn002_forceEarlyReturn002a_exitThreadInNative(JNIEnv *env, jobject classObject)\n+{\n+    wait_in_native = false;\n+}\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ThreadReference\/ForceEarlyReturn\/forceEarlyReturn002\/libforceEarlyReturn002a.cpp","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"}]}