{"files":[{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4207383\n+ * @summary This tests, in a round about manner, that SwingGraphics does\n+ *          not wrongly translate the original graphics when disposed. While\n+ *          this test seems rather ugly, it was possible to get this to happen\n+ *          in real world apps. This test is really only valid for 1.1.x.\n+ * @key headful\n+ * @run main TranslateTest\n+ *\/\n+\n+import java.io.File;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.plaf.ComponentUI;\n+import javax.imageio.ImageIO;\n+\n+public class TranslateTest {\n+    static JFrame frame;\n+    static volatile Point pt;\n+    static volatile Dimension dim;\n+    static final int WIDTH = 200;\n+    static final int HEIGHT = 200;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"TranslateTest\");\n+\n+                \/\/ paintComponent() triggers create swing graphics which will\n+                \/\/ be invoked on child.\n+                MyPanel panel = new MyPanel();\n+                panel.setPreferredSize(new Dimension(WIDTH, HEIGHT));\n+                frame.getContentPane().add(panel);\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                panel.test();\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                pt = frame.getLocationOnScreen();\n+                dim = frame.getSize();\n+            });\n+            BufferedImage img = robot.createScreenCapture(\n+                                    new Rectangle(pt.x + dim.width \/ 2,\n+                                                  pt.y + dim.height \/ 2,\n+                                                  WIDTH \/ 2, HEIGHT \/ 2));\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            Color c = new Color(img.getRGB(img.getWidth() \/ 2, img.getHeight() \/ 2));\n+            if (c.getRed() < 250) {\n+                ImageIO.write(img, \"png\", new File(\"image.png\"));\n+                System.out.println(\"Color \" + c);\n+                throw new RuntimeException(\"Translated Color is not red\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+\n+    static class MyPanel extends JPanel {\n+        int            state;\n+        Graphics       realG;\n+        Image          image;\n+\n+        public void test() {\n+            image = createImage(TranslateTest.WIDTH, TranslateTest.HEIGHT);\n+            Graphics g = image.getGraphics();\n+            g.setClip(0, 0, TranslateTest.WIDTH, TranslateTest.HEIGHT);\n+            realG = g;\n+            state = 1;\n+            paintComponent(g);\n+            state = 3;\n+            paintComponent(g);\n+            state = 4;\n+        }\n+\n+\n+        public void paint(Graphics g) {\n+            if (state == 0) {\n+                test();\n+            }\n+            super.paint(g);\n+        }\n+\n+        protected void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+        }\n+\n+        public void updateUI() {\n+            setUI(new ComponentUI() {\n+                public void paint(Graphics g, JComponent c) {\n+                    if (state == 1) {\n+                        \/\/ g is the first SwingGraphics, when it is disposed\n+                        \/\/ translateX\/translateY will be wrong\n+                        \/\/System.out.println(\"FIRST:\" + g);\n+                        g.translate(100, 100);\n+                        state = 2;\n+                        paintComponent(realG);\n+                    }\n+                    else if (state == 2) {\n+                        \/\/ g is the first SwingGraphics, when it is disposed\n+                        \/\/ translateX\/translateY will be wrong\n+                        g.translate(100, 100);\n+                        \/\/System.out.println(\"Second:\" + g);\n+                    }\n+                    else if (state == 3) {\n+                        \/\/ g should be the same as the first, with the wrong\n+                        \/\/ translate.\n+                        \/\/ otherG should be the second graphics, again with\n+                        \/\/ the wrong translation, disposing the second will\n+                        \/\/ cause g to be translated to -100, -100, which\n+                        \/\/ should not happen.\n+                        Graphics otherG = g.create(0, 0, 100, 100);\n+                        \/\/System.out.println(\"THIRD:\" + g);\n+                        otherG.dispose();\n+                        g.setColor(Color.red);\n+                        \/\/System.out.println(\"LAST: \" + g);\n+                        g.fillRect(100, 100, 100, 100);\n+                    }\n+                    else if (state == 4) {\n+                        g.drawImage(image, 0, 0, null);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/SwingGraphics\/TranslateTest.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"}]}