{"files":[{"patch":"@@ -1149,1 +1149,1 @@\n-          float worst_case_trip_cnt = ((float)t->_hi - t->_lo) \/ ABS(cl->stride_con());\n+          float worst_case_trip_cnt = ((float)t->_hi - t->_lo) \/ ABS((float)cl->stride_con());\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8328822\n+ * @summary C2: \"negative trip count?\" assert failure in profile predicate code\n+ * @run main\/othervm  -XX:-BackgroundCompilation TestCountedLoopMinJintStride\n+ *\/\n+\n+import java.util.Objects;\n+\n+public class TestCountedLoopMinJintStride {\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(Integer.MAX_VALUE-1, Integer.MAX_VALUE, 0);\n+            testHelper1(100, -1, Integer.MAX_VALUE, 0);\n+            test2(Integer.MAX_VALUE-1, Integer.MAX_VALUE, 0);\n+            testHelper2(100, -1, Integer.MAX_VALUE, 0);\n+        }\n+    }\n+\n+    private static void test1(int stop, int range, int start) {\n+        testHelper1(stop, Integer.MIN_VALUE, range, start);\n+    }\n+\n+    private static void testHelper1(int stop, int stride, int range, int start) {\n+        for (int i = stop; i >= start; i += stride) {\n+            Objects.checkIndex(i, range);\n+        }\n+    }\n+\n+    private static void test2(int stop, int range, int start) {\n+        testHelper1(stop, Integer.MIN_VALUE, range, start);\n+    }\n+\n+    private static void testHelper2(int stop, int stride, int range, int start) {\n+        for (int i = stop; i >= start; i += stride) {\n+            if (i < 0 || i >= range) {\n+                throw new RuntimeException(\"out of bounds\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestCountedLoopMinJintStride.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}