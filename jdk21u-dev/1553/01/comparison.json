{"files":[{"patch":"@@ -486,1 +486,1 @@\n-       unused-result array-bounds parentheses\n+       unused-result array-bounds parentheses dangling-pointer\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-  friend class CgroupSubsystem;\n@@ -35,1 +34,0 @@\n-  friend class OSContainer;\n@@ -62,1 +60,0 @@\n-  static int active_processor_count();\n@@ -112,0 +109,1 @@\n+  static int active_processor_count();\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## Harfbuzz v8.2.2\n+## Harfbuzz v10.4.0\n@@ -11,1 +11,1 @@\n-Copyright © 2010-2023  Google, Inc.\n+Copyright © 2010-2024  Google, Inc.\n@@ -18,1 +18,1 @@\n-Copyright © 2006-2023 Behdad Esfahbod\n+Copyright © 2006-2025 Behdad Esfahbod\n@@ -57,1 +57,1 @@\n-The below license applies to the following files:\n+The below applies to the following file(s):\n@@ -75,1 +75,1 @@\n-The below license applies to the following files:\n+The below applies to the following file(s):\n@@ -78,1 +78,2 @@\n-© 2023 Unicode®, Inc.\n+© 2024 Unicode®, Inc.\n+\n@@ -81,1 +82,1 @@\n-For terms of use, see https:\/\/www.unicode.org\/terms_of_use.html\n+For terms of use and license, see https:\/\/www.unicode.org\/terms_of_use.html\n","filename":"src\/java.desktop\/share\/legal\/harfbuzz.md","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -207,0 +207,1 @@\n+    hb_barrier ();\n@@ -381,0 +382,1 @@\n+                  hb_barrier () &&\n@@ -638,0 +640,1 @@\n+                  hb_barrier () &&\n@@ -741,0 +744,1 @@\n+                  hb_barrier () &&\n@@ -742,0 +746,1 @@\n+                  hb_barrier () &&\n@@ -939,1 +944,1 @@\n-    bool has_data () const { return cbdt.get_length (); }\n+    bool has_data () const { return cbdt->version.major; }\n@@ -943,0 +948,2 @@\n+      if (!has_data ()) return false;\n+\n@@ -978,0 +985,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Color\/CBDT\/CBDT.hh","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"..\/..\/..\/hb-decycler.hh\"\n@@ -37,0 +38,2 @@\n+#include \"..\/CPAL\/CPAL.hh\"\n+\n@@ -69,1 +72,1 @@\n-  unsigned int palette_index;\n+  hb_array_t<const BGRAColor> palette;\n@@ -71,3 +74,3 @@\n-  VarStoreInstancer &instancer;\n-  hb_map_t current_glyphs;\n-  hb_map_t current_layers;\n+  ItemVarStoreInstancer &instancer;\n+  hb_decycler_t glyphs_decycler;\n+  hb_decycler_t layers_decycler;\n@@ -75,1 +78,1 @@\n-  int edge_count = HB_COLRV1_MAX_EDGE_COUNT;\n+  int edge_count = HB_MAX_GRAPH_EDGE_COUNT;\n@@ -83,1 +86,1 @@\n-                      VarStoreInstancer &instancer_) :\n+                      ItemVarStoreInstancer &instancer_) :\n@@ -88,1 +91,5 @@\n-    palette_index (palette_),\n+    palette (\n+#ifndef HB_NO_COLOR\n+             font->face->table.CPAL->get_palette_colors (palette_)\n+#endif\n+    ),\n@@ -102,6 +109,1 @@\n-      {\n-        unsigned int clen = 1;\n-        hb_face_t *face = hb_font_get_face (font);\n-\n-        hb_ot_color_palette_get_colors (face, palette_index, color_index, &clen, &color);\n-      }\n+        color = palette[color_index];\n@@ -162,0 +164,6 @@\n+  void add_var_idxes (unsigned first_var_idx, unsigned num_idxes)\n+  {\n+    if (!num_idxes || first_var_idx == VarIdx::NO_VARIATION) return;\n+    variation_indices->add_range (first_var_idx, first_var_idx + num_idxes - 1);\n+  }\n+\n@@ -168,0 +176,2 @@\n+  hb_set_t *variation_indices;\n+  unsigned num_var_idxes;\n@@ -174,0 +184,2 @@\n+                               hb_set_t *variation_indices_,\n+                               unsigned num_var_idxes_ = 1,\n@@ -179,0 +191,2 @@\n+                          variation_indices (variation_indices_),\n+                          num_var_idxes (num_var_idxes_),\n@@ -245,1 +259,6 @@\n-  { value.closurev1 (c); }\n+  {\n+    c->num_var_idxes = 0;\n+    \/\/ update c->num_var_idxes during value closure\n+    value.closurev1 (c);\n+    c->add_var_idxes (varIdxBase, c->num_var_idxes);\n+  }\n@@ -248,1 +267,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -255,2 +274,12 @@\n-    \/\/TODO: update varIdxBase for partial-instancing\n-    return_trace (c->serializer->embed (varIdxBase));\n+    VarIdx new_varidx;\n+    new_varidx = varIdxBase;\n+    if (varIdxBase != VarIdx::NO_VARIATION)\n+    {\n+      hb_pair_t<unsigned, int> *new_varidx_delta;\n+      if (!c->plan->colrv1_variation_idx_delta_map.has (varIdxBase, &new_varidx_delta))\n+        return_trace (false);\n+\n+      new_varidx = hb_first (*new_varidx_delta);\n+    }\n+\n+    return_trace (c->serializer->embed (new_varidx));\n@@ -273,1 +302,1 @@\n-                       const VarStoreInstancer &instancer) const\n+                       const ItemVarStoreInstancer &instancer) const\n@@ -308,1 +337,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -328,1 +357,1 @@\n-                       const VarStoreInstancer &instancer) const\n+                       const ItemVarStoreInstancer &instancer) const\n@@ -348,1 +377,4 @@\n-  { c->add_palette_index (paletteIndex); }\n+  {\n+    c->add_palette_index (paletteIndex);\n+    c->num_var_idxes = 2;\n+  }\n@@ -351,1 +383,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -377,1 +409,1 @@\n-                       const VarStoreInstancer &instancer) const\n+                       const ItemVarStoreInstancer &instancer) const\n@@ -413,1 +445,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -442,1 +474,1 @@\n-                   const VarStoreInstancer &instancer) const\n+                   const ItemVarStoreInstancer &instancer) const\n@@ -545,0 +577,3 @@\n+  void closurev1 (hb_colrv1_closure_context_t* c) const\n+  { c->num_var_idxes = 6; }\n+\n@@ -546,1 +581,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -591,1 +626,1 @@\n-               const VarStoreInstancer &instancer HB_UNUSED) const\n+               const ItemVarStoreInstancer &instancer HB_UNUSED) const\n@@ -620,1 +655,4 @@\n-  { c->add_palette_index (paletteIndex); }\n+  {\n+    c->add_palette_index (paletteIndex);\n+    c->num_var_idxes = 1;\n+  }\n@@ -623,1 +661,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -669,1 +707,4 @@\n-  { (this+colorLine).closurev1 (c); }\n+  {\n+    (this+colorLine).closurev1 (c);\n+    c->num_var_idxes = 6;\n+  }\n@@ -672,1 +713,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -736,1 +777,4 @@\n-  { (this+colorLine).closurev1 (c); }\n+  {\n+    (this+colorLine).closurev1 (c);\n+    c->num_var_idxes = 6;\n+  }\n@@ -739,1 +783,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -803,1 +847,4 @@\n-  { (this+colorLine).closurev1 (c); }\n+  {\n+    (this+colorLine).closurev1 (c);\n+    c->num_var_idxes = 4;\n+  }\n@@ -806,1 +853,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -866,1 +913,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -909,1 +956,1 @@\n-               const VarStoreInstancer &instancer HB_UNUSED) const\n+               const ItemVarStoreInstancer &instancer HB_UNUSED) const\n@@ -939,1 +986,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -961,1 +1008,1 @@\n-    (this+transform).paint_glyph (c);\n+    (this+transform).paint_glyph (c); \/\/ This does a push_transform()\n@@ -978,1 +1025,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1027,1 +1074,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1076,1 +1123,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1135,1 +1182,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1179,1 +1226,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1235,1 +1282,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1279,1 +1326,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1335,1 +1382,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1384,1 +1431,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1443,1 +1490,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -1494,1 +1541,1 @@\n-  void get_clip_box (ClipBoxData &clip_box, const VarStoreInstancer &instancer HB_UNUSED) const\n+  void get_clip_box (ClipBoxData &clip_box, const ItemVarStoreInstancer &instancer HB_UNUSED) const\n@@ -1503,1 +1550,1 @@\n-               const VarStoreInstancer &instancer,\n+               const ItemVarStoreInstancer &instancer,\n@@ -1536,1 +1583,1 @@\n-  void get_clip_box (ClipBoxData &clip_box, const VarStoreInstancer &instancer) const\n+  void get_clip_box (ClipBoxData &clip_box, const ItemVarStoreInstancer &instancer) const\n@@ -1547,0 +1594,3 @@\n+\n+  void closurev1 (hb_colrv1_closure_context_t* c) const\n+  { c->variation_indices->add_range (varIdxBase, varIdxBase + 3); }\n@@ -1552,1 +1602,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -1562,0 +1612,8 @@\n+  void closurev1 (hb_colrv1_closure_context_t* c) const\n+  {\n+    switch (u.format) {\n+    case 2: u.format2.closurev1 (c);\n+    default:return;\n+    }\n+  }\n+\n@@ -1575,1 +1633,1 @@\n-                    const VarStoreInstancer &instancer) const\n+                    const ItemVarStoreInstancer &instancer) const\n@@ -1609,0 +1667,6 @@\n+  void closurev1 (hb_colrv1_closure_context_t* c, const void *base) const\n+  {\n+    if (!c->glyphs->intersects (startGlyphID, endGlyphID)) return;\n+    (base+clipBox).closurev1 (c);\n+  }\n+\n@@ -1611,1 +1675,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -1628,1 +1692,1 @@\n-                    const VarStoreInstancer &instancer) const\n+                    const ItemVarStoreInstancer &instancer) const\n@@ -1645,1 +1709,1 @@\n-                                   const VarStoreInstancer &instancer,\n+                                   const ItemVarStoreInstancer &instancer,\n@@ -1698,1 +1762,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -1738,1 +1802,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -1858,1 +1922,1 @@\n-                  const VarStoreInstancer &instancer) const\n+                  const ItemVarStoreInstancer &instancer) const\n@@ -1887,1 +1951,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -1919,1 +1983,1 @@\n-               const VarStoreInstancer &instancer) const\n+               const ItemVarStoreInstancer &instancer) const\n@@ -1944,0 +2008,70 @@\n+struct delta_set_index_map_subset_plan_t\n+{\n+  unsigned get_inner_bit_count () const { return inner_bit_count; }\n+  unsigned get_width ()           const { return ((outer_bit_count + inner_bit_count + 7) \/ 8); }\n+  hb_array_t<const uint32_t> get_output_map () const { return output_map.as_array (); }\n+\n+  delta_set_index_map_subset_plan_t (const hb_map_t &new_deltaset_idx_varidx_map)\n+  {\n+    map_count = 0;\n+    outer_bit_count = 0;\n+    inner_bit_count = 1;\n+    output_map.init ();\n+\n+    \/* search backwards *\/\n+    unsigned count = new_deltaset_idx_varidx_map.get_population ();\n+    if (!count) return;\n+\n+    unsigned last_idx = (unsigned)-1;\n+    unsigned last_varidx = (unsigned)-1;\n+\n+    for (unsigned i = count; i; i--)\n+    {\n+      unsigned delta_set_idx = i - 1;\n+      unsigned var_idx = new_deltaset_idx_varidx_map.get (delta_set_idx);\n+      if (i == count)\n+      {\n+        last_idx = delta_set_idx;\n+        last_varidx = var_idx;\n+        continue;\n+      }\n+      if (var_idx != last_varidx)\n+        break;\n+      last_idx = delta_set_idx;\n+    }\n+\n+    map_count = last_idx + 1;\n+  }\n+\n+  bool remap (const hb_map_t &new_deltaset_idx_varidx_map)\n+  {\n+    \/* recalculate bit_count *\/\n+    outer_bit_count = 1;\n+    inner_bit_count = 1;\n+\n+    if (unlikely (!output_map.resize (map_count, false))) return false;\n+\n+    for (unsigned idx = 0; idx < map_count; idx++)\n+    {\n+      uint32_t *var_idx;\n+      if (!new_deltaset_idx_varidx_map.has (idx, &var_idx)) return false;\n+      output_map.arrayZ[idx] = *var_idx;\n+\n+      unsigned outer = (*var_idx) >> 16;\n+      unsigned bit_count = (outer == 0) ? 1 : hb_bit_storage (outer);\n+      outer_bit_count = hb_max (bit_count, outer_bit_count);\n+\n+      unsigned inner = (*var_idx) & 0xFFFF;\n+      bit_count = (inner == 0) ? 1 : hb_bit_storage (inner);\n+      inner_bit_count = hb_max (bit_count, inner_bit_count);\n+    }\n+    return true;\n+  }\n+\n+  private:\n+  unsigned map_count;\n+  unsigned outer_bit_count;\n+  unsigned inner_bit_count;\n+  hb_vector_t<uint32_t> output_map;\n+};\n+\n@@ -1951,2 +2085,3 @@\n-    if (version == 1)\n-      return (this+baseGlyphList).len > 0;\n+    if (version < 1)\n+      return false;\n+    hb_barrier ();\n@@ -1954,1 +2089,1 @@\n-    return false;\n+    return (this+baseGlyphList).len > 0;\n@@ -1994,2 +2129,20 @@\n-                        hb_set_t *palette_indices) const\n-    { colr->closure_forV1 (glyphset, layer_indices, palette_indices); }\n+                        hb_set_t *palette_indices,\n+                        hb_set_t *variation_indices,\n+                        hb_set_t *delta_set_indices) const\n+    { colr->closure_forV1 (glyphset, layer_indices, palette_indices, variation_indices, delta_set_indices); }\n+\n+    bool has_var_store () const\n+    { return colr->has_var_store (); }\n+\n+    const ItemVariationStore &get_var_store () const\n+    { return colr->get_var_store (); }\n+    const ItemVariationStore *get_var_store_ptr () const\n+    { return colr->get_var_store_ptr (); }\n+\n+    bool has_delta_set_index_map () const\n+    { return colr->has_delta_set_index_map (); }\n+\n+    const DeltaSetIndexMap &get_delta_set_index_map () const\n+    { return colr->get_delta_set_index_map (); }\n+    const DeltaSetIndexMap *get_delta_set_index_map_ptr () const\n+    { return colr->get_delta_set_index_map_ptr (); }\n@@ -2032,1 +2185,3 @@\n-                      hb_set_t *palette_indices) const\n+                      hb_set_t *palette_indices,\n+                      hb_set_t *variation_indices,\n+                      hb_set_t *delta_set_indices) const\n@@ -2034,1 +2189,3 @@\n-    if (version != 1) return;\n+    if (version < 1) return;\n+    hb_barrier ();\n+\n@@ -2037,1 +2194,1 @@\n-    hb_colrv1_closure_context_t c (this, &visited_glyphs, layer_indices, palette_indices);\n+    hb_colrv1_closure_context_t c (this, &visited_glyphs, layer_indices, palette_indices, variation_indices);\n@@ -2049,0 +2206,16 @@\n+\n+    const ClipList &cliplist = this+clipList;\n+    c.glyphs = glyphset;\n+    for (const ClipRecord &clip_record : cliplist.clips.iter())\n+      clip_record.closurev1 (&c, &cliplist);\n+\n+    \/\/ if a DeltaSetIndexMap is included, collected variation indices are\n+    \/\/ actually delta set indices, we need to map them into variation indices\n+    if (has_delta_set_index_map ())\n+    {\n+      const DeltaSetIndexMap &var_idx_map = this+varIdxMap;\n+      delta_set_indices->set (*variation_indices);\n+      variation_indices->clear ();\n+      for (unsigned delta_set_idx : *delta_set_indices)\n+        variation_indices->add (var_idx_map.map (delta_set_idx));\n+    }\n@@ -2057,0 +2230,22 @@\n+  bool has_var_store () const\n+  { return version >= 1 && hb_barrier () && varStore != 0; }\n+\n+  bool has_delta_set_index_map () const\n+  { return version >= 1 && hb_barrier () && varIdxMap != 0; }\n+\n+  bool has_clip_list () const\n+  { return version >= 1 && hb_barrier () && clipList != 0; }\n+\n+  const DeltaSetIndexMap &get_delta_set_index_map () const\n+  { return has_delta_set_index_map () && hb_barrier () ? this+varIdxMap : Null (DeltaSetIndexMap); }\n+  const DeltaSetIndexMap *get_delta_set_index_map_ptr () const\n+  { return has_delta_set_index_map () && hb_barrier () ? &(this+varIdxMap) : nullptr; }\n+\n+  const ItemVariationStore &get_var_store () const\n+  { return has_var_store () && hb_barrier () ? this+varStore : Null (ItemVariationStore); }\n+  const ItemVariationStore *get_var_store_ptr () const\n+  { return has_var_store () && hb_barrier () ? &(this+varStore) : nullptr; }\n+\n+  const ClipList &get_clip_list () const\n+  { return has_clip_list () && hb_barrier () ? this+clipList : Null (ClipList); }\n+\n@@ -2061,0 +2256,1 @@\n+                  hb_barrier () &&\n@@ -2064,1 +2260,1 @@\n-                   (version == 1 &&\n+                   (hb_barrier () &&\n@@ -2130,0 +2326,88 @@\n+  bool downgrade_to_V0 (const hb_set_t &glyphset) const\n+  {\n+    \/\/no more COLRv1 glyphs, downgrade to version 0\n+    for (const BaseGlyphPaintRecord& _ : get_baseglyphList ())\n+      if (glyphset.has (_.glyphId))\n+        return false;\n+\n+    return true;\n+  }\n+\n+  bool subset_varstore (hb_subset_context_t *c,\n+                        COLR* out \/* OUT *\/) const\n+  {\n+    TRACE_SUBSET (this);\n+    if (!varStore || c->plan->all_axes_pinned ||\n+        !c->plan->colrv1_variation_idx_delta_map)\n+      return_trace (true);\n+\n+    const ItemVariationStore& var_store = this+varStore;\n+    if (c->plan->normalized_coords)\n+    {\n+      item_variations_t item_vars;\n+      \/* turn off varstore optimization when varIdxMap is null, so we maintain\n+       * original var_idx sequence *\/\n+      bool optimize = (varIdxMap != 0) ? true : false;\n+      if (!item_vars.instantiate (var_store, c->plan,\n+                                  optimize, \/* optimization *\/\n+                                  optimize, \/* use_no_variation_idx = false *\/\n+                                  c->plan->colrv1_varstore_inner_maps.as_array ()))\n+        return_trace (false);\n+\n+      \/* do not serialize varStore if there's no variation data after\n+       * instancing: region_list or var_data is empty *\/\n+      if (item_vars.get_region_list () &&\n+          item_vars.get_vardata_encodings () &&\n+          !out->varStore.serialize_serialize (c->serializer,\n+                                              item_vars.has_long_word (),\n+                                              c->plan->axis_tags,\n+                                              item_vars.get_region_list (),\n+                                              item_vars.get_vardata_encodings ()))\n+        return_trace (false);\n+\n+      \/* if varstore is optimized, update colrv1_new_deltaset_idx_varidx_map in\n+       * subset plan.\n+       * If varstore is empty after instancing, varidx_map would be empty and\n+       * all var_idxes will be updated to VarIdx::NO_VARIATION *\/\n+      if (optimize)\n+      {\n+        const hb_map_t &varidx_map = item_vars.get_varidx_map ();\n+        for (auto _ : c->plan->colrv1_new_deltaset_idx_varidx_map.iter_ref ())\n+        {\n+          uint32_t varidx = _.second;\n+          uint32_t *new_varidx;\n+          if (varidx_map.has (varidx, &new_varidx))\n+            _.second = *new_varidx;\n+          else\n+            _.second = VarIdx::NO_VARIATION;\n+        }\n+      }\n+    }\n+    else\n+    {\n+      if (unlikely (!out->varStore.serialize_serialize (c->serializer,\n+                                                        &var_store,\n+                                                        c->plan->colrv1_varstore_inner_maps.as_array ())))\n+        return_trace (false);\n+    }\n+\n+    return_trace (true);\n+  }\n+\n+  bool subset_delta_set_index_map (hb_subset_context_t *c,\n+                                   COLR* out \/* OUT *\/) const\n+  {\n+    TRACE_SUBSET (this);\n+    if (!varIdxMap || c->plan->all_axes_pinned ||\n+        !c->plan->colrv1_new_deltaset_idx_varidx_map)\n+      return_trace (true);\n+\n+    const hb_map_t &deltaset_idx_varidx_map = c->plan->colrv1_new_deltaset_idx_varidx_map;\n+    delta_set_index_map_subset_plan_t index_map_plan (deltaset_idx_varidx_map);\n+\n+    if (unlikely (!index_map_plan.remap (deltaset_idx_varidx_map)))\n+      return_trace (false);\n+\n+    return_trace (out->varIdxMap.serialize_serialize (c->serializer, index_map_plan));\n+  }\n+\n@@ -2198,2 +2482,4 @@\n-    if (version == 0)\n-    return_trace (colr_prime->serialize_V0 (c->serializer, version, base_it, layer_it));\n+    if (version == 0 || downgrade_to_V0 (glyphset))\n+      return_trace (colr_prime->serialize_V0 (c->serializer, 0, base_it, layer_it));\n+\n+    hb_barrier ();\n@@ -2201,1 +2487,1 @@\n-    auto snap = c->serializer->snapshot ();\n+    \/\/start version 1\n@@ -2203,0 +2489,1 @@\n+    if (!colr_prime->serialize_V0 (c->serializer, version, base_it, layer_it)) return_trace (false);\n@@ -2204,3 +2491,3 @@\n-    VarStoreInstancer instancer (varStore ? &(this+varStore) : nullptr,\n-                                 varIdxMap ? &(this+varIdxMap) : nullptr,\n-                                 c->plan->normalized_coords.as_array ());\n+    \/* subset ItemVariationStore first, cause varidx_map needs to be updated\n+     * after instancing *\/\n+    if (!subset_varstore (c, colr_prime)) return_trace (false);\n@@ -2208,7 +2495,3 @@\n-    if (!colr_prime->baseGlyphList.serialize_subset (c, baseGlyphList, this, instancer))\n-    {\n-      if (c->serializer->in_error ()) return_trace (false);\n-      \/\/no more COLRv1 glyphs: downgrade to version 0\n-      c->serializer->revert (snap);\n-      return_trace (colr_prime->serialize_V0 (c->serializer, 0, base_it, layer_it));\n-    }\n+    ItemVarStoreInstancer instancer (get_var_store_ptr (),\n+                                     get_delta_set_index_map_ptr (),\n+                                     c->plan->normalized_coords.as_array ());\n@@ -2216,1 +2499,2 @@\n-    if (!colr_prime->serialize_V0 (c->serializer, version, base_it, layer_it)) return_trace (false);\n+    if (!colr_prime->baseGlyphList.serialize_subset (c, baseGlyphList, this, instancer))\n+      return_trace (false);\n@@ -2220,2 +2504,0 @@\n-    if (!varStore || c->plan->all_axes_pinned)\n-      return_trace (true);\n@@ -2223,3 +2505,1 @@\n-    colr_prime->varIdxMap.serialize_copy (c->serializer, varIdxMap, this);\n-    colr_prime->varStore.serialize_copy (c->serializer, varStore, this);\n-    return_trace (true);\n+    return_trace (subset_delta_set_index_map (c, colr_prime));\n@@ -2245,2 +2525,0 @@\n-    if (version != 1)\n-      return false;\n@@ -2248,3 +2526,3 @@\n-    VarStoreInstancer instancer (&(this+varStore),\n-                                 &(this+varIdxMap),\n-                                 hb_array (font->coords, font->num_coords));\n+    ItemVarStoreInstancer instancer (get_var_store_ptr (),\n+                                     get_delta_set_index_map_ptr (),\n+                                     hb_array (font->coords, font->num_coords));\n@@ -2285,1 +2563,1 @@\n-    if (version == 1)\n+    if (version >= 1)\n@@ -2287,0 +2565,2 @@\n+      hb_barrier ();\n+\n@@ -2297,1 +2577,1 @@\n-                 const VarStoreInstancer instancer) const\n+                 const ItemVarStoreInstancer instancer) const\n@@ -2299,1 +2579,1 @@\n-    return (this+clipList).get_extents (glyph,\n+    return get_clip_list ().get_extents (glyph,\n@@ -2308,3 +2588,3 @@\n-    VarStoreInstancer instancer (&(this+varStore),\n-                                 &(this+varIdxMap),\n-                                 hb_array (font->coords, font->num_coords));\n+    ItemVarStoreInstancer instancer (get_var_store_ptr (),\n+                                     get_delta_set_index_map_ptr (),\n+                                     hb_array (font->coords, font->num_coords));\n@@ -2312,1 +2592,0 @@\n-    c.current_glyphs.add (glyph);\n@@ -2314,1 +2593,4 @@\n-    if (version == 1)\n+    hb_decycler_node_t node (c.glyphs_decycler);\n+    node.visit (glyph);\n+\n+    if (version >= 1)\n@@ -2316,0 +2598,2 @@\n+      hb_barrier ();\n+\n@@ -2321,4 +2605,0 @@\n-        VarStoreInstancer instancer (&(this+varStore),\n-                                     &(this+varIdxMap),\n-                                     hb_array (font->coords, font->num_coords));\n-\n@@ -2407,1 +2687,1 @@\n-  Offset32To<VariationStore>            varStore;\n+  Offset32To<ItemVariationStore>        varStore;\n@@ -2430,0 +2710,1 @@\n+  hb_decycler_node_t node (c->layers_decycler);\n@@ -2432,4 +2713,2 @@\n-    if (unlikely (c->current_layers.has (i)))\n-      continue;\n-\n-    c->current_layers.add (i);\n+    if (unlikely (!node.visit (i)))\n+      return;\n@@ -2441,2 +2720,0 @@\n-\n-    c->current_layers.del (i);\n@@ -2450,1 +2727,2 @@\n-  if (unlikely (c->current_glyphs.has (gid)))\n+  hb_decycler_node_t node (c->glyphs_decycler);\n+  if (unlikely (!node.visit (gid)))\n@@ -2453,2 +2731,0 @@\n-  c->current_glyphs.add (gid);\n-\n@@ -2459,1 +2735,0 @@\n-    c->current_glyphs.del (gid);\n@@ -2482,2 +2757,0 @@\n-\n-  c->current_glyphs.del (gid);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Color\/COLR\/COLR.hh","additions":393,"deletions":120,"binary":false,"changes":513,"status":"modified"},{"patch":"@@ -69,1 +69,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  (this+transform).closurev1 (c);\n+}\n@@ -72,1 +75,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  c->num_var_idxes = 2;\n+}\n@@ -75,1 +81,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  c->num_var_idxes = 2;\n+}\n@@ -78,1 +87,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  c->num_var_idxes = 4;\n+}\n@@ -81,1 +93,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  c->num_var_idxes = 1;\n+}\n@@ -84,1 +99,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  c->num_var_idxes = 3;\n+}\n@@ -87,1 +105,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  c->num_var_idxes = 1;\n+}\n@@ -90,1 +111,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  c->num_var_idxes = 3;\n+}\n@@ -93,1 +117,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  c->num_var_idxes = 2;\n+}\n@@ -96,1 +123,4 @@\n-{ (this+src).dispatch (c); }\n+{\n+  (this+src).dispatch (c);\n+  c->num_var_idxes = 4;\n+}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Color\/COLR\/colrv1-closure.hh","additions":40,"deletions":10,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -190,0 +190,8 @@\n+  hb_array_t<const BGRAColor> get_palette_colors (unsigned int palette_index) const\n+  {\n+    if (unlikely (palette_index >= numPalettes))\n+      return hb_array_t<const BGRAColor> ();\n+    unsigned int start_index = colorRecordIndicesZ[palette_index];\n+    hb_array_t<const BGRAColor> all_colors ((this+colorRecordsZ).arrayZ, numColorRecords);\n+    return all_colors.sub_array (start_index, numColors);\n+  }\n@@ -217,0 +225,2 @@\n+    {\n+      hb_barrier ();\n@@ -218,0 +228,1 @@\n+    }\n@@ -224,0 +235,1 @@\n+    hb_barrier ();\n@@ -315,0 +327,2 @@\n+    {\n+      hb_barrier ();\n@@ -316,0 +330,1 @@\n+    }\n@@ -324,0 +339,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Color\/CPAL\/CPAL.hh","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -371,0 +371,1 @@\n+                          hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Color\/sbix\/sbix.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Color\/svg\/svg.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+    hb_barrier ();\n@@ -98,0 +99,9 @@\n+  unsigned int get_coverage (hb_codepoint_t glyph_id,\n+                             hb_ot_lookup_cache_t *cache) const\n+  {\n+    unsigned coverage;\n+    if (cache && cache->get (glyph_id, &coverage)) return coverage;\n+    coverage = get_coverage (glyph_id);\n+    if (cache) cache->set (glyph_id, coverage);\n+    return coverage;\n+  }\n@@ -203,0 +213,13 @@\n+  unsigned cost () const\n+  {\n+    switch (u.format) {\n+    case 1: hb_barrier (); return u.format1.cost ();\n+    case 2: hb_barrier (); return u.format2.cost ();\n+#ifndef HB_NO_BEYOND_64K\n+    case 3: hb_barrier (); return u.format3.cost ();\n+    case 4: hb_barrier (); return u.format4.cost ();\n+#endif\n+    default:return 0u;\n+    }\n+  }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/Common\/Coverage.hh","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -106,0 +106,2 @@\n+  unsigned cost () const { return hb_bit_storage ((unsigned) glyphArray.len); \/* bsearch cost *\/ }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/Common\/CoverageFormat1.hh","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,0 +160,2 @@\n+  unsigned cost () const { return hb_bit_storage ((unsigned) rangeRecord.len); \/* bsearch cost *\/ }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/Common\/CoverageFormat2.hh","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-                                 const VariationStore &var_store) const\n+                                 const ItemVariationStore &var_store) const\n@@ -254,1 +254,1 @@\n-                                 const VariationStore &var_store) const\n+                                 const ItemVariationStore &var_store) const\n@@ -294,0 +294,1 @@\n+    hb_barrier ();\n@@ -318,1 +319,1 @@\n-                           const VariationStore &var_store,\n+                           const ItemVariationStore &var_store,\n@@ -374,1 +375,1 @@\n-                               const VariationStore &var_store,\n+                               const ItemVariationStore &var_store,\n@@ -444,0 +445,14 @@\n+  void collect_used_mark_sets (const hb_set_t& glyph_set,\n+                               hb_set_t& used_mark_sets \/* OUT *\/) const\n+  {\n+    unsigned i = 0;\n+    for (const auto &offset : coverage)\n+     {\n+       const auto &cov = this+offset;\n+       if (cov.intersects (&glyph_set))\n+         used_mark_sets.add (i);\n+\n+       i++;\n+     }\n+  }\n+\n@@ -464,0 +479,1 @@\n+      auto snap = c->serializer->snapshot ();\n@@ -471,3 +487,1 @@\n-      \/\/not using o->serialize_subset (c, offset, this, out) here because\n-      \/\/OTS doesn't allow null offset.\n-      \/\/See issue: https:\/\/github.com\/khaledhosny\/ots\/issues\/172\n+      \/\/skip empty coverage\n@@ -475,1 +489,9 @@\n-      c->dispatch (this+offset);\n+      bool res = false;\n+      if (offset) res = c->dispatch (this+offset);\n+      if (!res)\n+      {\n+        c->serializer->pop_discard ();\n+        c->serializer->revert (snap);\n+        (out->coverage.len)--;\n+        continue;\n+      }\n@@ -516,0 +538,9 @@\n+  void collect_used_mark_sets (const hb_set_t& glyph_set,\n+                               hb_set_t& used_mark_sets \/* OUT *\/) const\n+  {\n+    switch (u.format) {\n+    case 1: u.format1.collect_used_mark_sets (glyph_set, used_mark_sets); return;\n+    default:return;\n+    }\n+  }\n+\n@@ -529,0 +560,1 @@\n+    hb_barrier ();\n@@ -580,1 +612,1 @@\n-  Offset32To<VariationStore>\n+  Offset32To<ItemVariationStore>\n@@ -603,2 +635,3 @@\n-                  (version.to_int () < 0x00010002u || markGlyphSetsDef.sanitize (c, this)) &&\n-                  (version.to_int () < 0x00010003u || varStore.sanitize (c, this)));\n+                  hb_barrier () &&\n+                  ((version.to_int () < 0x00010002u && hb_barrier ()) || markGlyphSetsDef.sanitize (c, this)) &&\n+                  ((version.to_int () < 0x00010003u && hb_barrier ()) || varStore.sanitize (c, this)));\n@@ -630,7 +663,2 @@\n-    auto *out = c->serializer->embed (*this);\n-    if (unlikely (!out)) return_trace (false);\n-\n-    bool subset_glyphclassdef = out->glyphClassDef.serialize_subset (c, glyphClassDef, this, nullptr, false, true);\n-    bool subset_attachlist = out->attachList.serialize_subset (c, attachList, this);\n-    bool subset_ligcaretlist = out->ligCaretList.serialize_subset (c, ligCaretList, this);\n-    bool subset_markattachclassdef = out->markAttachClassDef.serialize_subset (c, markAttachClassDef, this, nullptr, false, true);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n@@ -638,5 +666,7 @@\n-    bool subset_markglyphsetsdef = false;\n-    if (version.to_int () >= 0x00010002u)\n-    {\n-      subset_markglyphsetsdef = out->markGlyphSetsDef.serialize_subset (c, markGlyphSetsDef, this);\n-    }\n+    \/\/ Push var store first (if it's needed) so that it's last in the\n+    \/\/ serialization order. Some font consumers assume that varstore runs to\n+    \/\/ the end of the GDEF table.\n+    \/\/ See: https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/4636\n+    auto snapshot_version0 = c->serializer->snapshot ();\n+    if (unlikely (version.to_int () >= 0x00010002u && hb_barrier () && !c->serializer->embed (markGlyphSetsDef)))\n+      return_trace (false);\n@@ -645,1 +675,3 @@\n-    if (version.to_int () >= 0x00010003u)\n+    unsigned varstore_index = (unsigned) -1;\n+    auto snapshot_version2 = c->serializer->snapshot ();\n+    if (version.to_int () >= 0x00010003u && hb_barrier ())\n@@ -647,0 +679,1 @@\n+      if (unlikely (!c->serializer->embed (varStore))) return_trace (false);\n@@ -655,1 +688,1 @@\n-                                     c->plan->gdef_varstore_inner_maps.as_array ()))\n+                                     c->plan->gdef_varstore_inner_maps.as_array ())) {\n@@ -661,0 +694,2 @@\n+            varstore_index = c->serializer->last_added_child_index();\n+          }\n@@ -666,0 +701,1 @@\n+      {\n@@ -667,0 +703,15 @@\n+        varstore_index = c->serializer->last_added_child_index();\n+      }\n+    }\n+\n+    out->version.major = version.major;\n+    out->version.minor = version.minor;\n+\n+    if (!subset_varstore && version.to_int () >= 0x00010002u) {\n+      c->serializer->revert (snapshot_version2);\n+    }\n+\n+    bool subset_markglyphsetsdef = false;\n+    if (version.to_int () >= 0x00010002u && hb_barrier ())\n+    {\n+      subset_markglyphsetsdef = out->markGlyphSetsDef.serialize_subset (c, markGlyphSetsDef, this);\n@@ -672,0 +723,1 @@\n+      c->plan->has_gdef_varstore = true;\n@@ -676,0 +728,10 @@\n+      c->serializer->revert (snapshot_version0);\n+    }\n+\n+    bool subset_glyphclassdef = out->glyphClassDef.serialize_subset (c, glyphClassDef, this, nullptr, false, true);\n+    bool subset_attachlist = out->attachList.serialize_subset (c, attachList, this);\n+    bool subset_markattachclassdef = out->markAttachClassDef.serialize_subset (c, markAttachClassDef, this, nullptr, false, true);\n+    bool subset_ligcaretlist = out->ligCaretList.serialize_subset (c, ligCaretList, this);\n+\n+    if (subset_varstore && varstore_index != (unsigned) -1) {\n+      c->serializer->repack_last(varstore_index);\n@@ -712,0 +774,1 @@\n+    hb_barrier ();\n@@ -815,1 +878,1 @@\n-    case 1: return u.version.to_int () >= 0x00010002u && u.version1.markGlyphSetsDef != 0;\n+    case 1: return u.version.to_int () >= 0x00010002u && hb_barrier () && u.version1.markGlyphSetsDef != 0;\n@@ -825,1 +888,1 @@\n-    case 1: return u.version.to_int () >= 0x00010002u ? this+u.version1.markGlyphSetsDef : Null(MarkGlyphSets);\n+    case 1: return u.version.to_int () >= 0x00010002u && hb_barrier () ? this+u.version1.markGlyphSetsDef : Null(MarkGlyphSets);\n@@ -835,1 +898,1 @@\n-    case 1: return u.version.to_int () >= 0x00010003u && u.version1.varStore != 0;\n+    case 1: return u.version.to_int () >= 0x00010003u && hb_barrier () && u.version1.varStore != 0;\n@@ -842,1 +905,1 @@\n-  const VariationStore &get_var_store () const\n+  const ItemVariationStore &get_var_store () const\n@@ -845,1 +908,1 @@\n-    case 1: return u.version.to_int () >= 0x00010003u ? this+u.version1.varStore : Null(VariationStore);\n+    case 1: return u.version.to_int () >= 0x00010003u && hb_barrier () ? this+u.version1.varStore : Null(ItemVariationStore);\n@@ -849,1 +912,1 @@\n-    default: return Null(VariationStore);\n+    default: return Null(ItemVariationStore);\n@@ -962,41 +1025,0 @@\n-  void remap_layout_variation_indices (const hb_set_t *layout_variation_indices,\n-                                       const hb_vector_t<int>& normalized_coords,\n-                                       bool calculate_delta, \/* not pinned at default *\/\n-                                       bool no_variations, \/* all axes pinned *\/\n-                                       hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *layout_variation_idx_delta_map \/* OUT *\/) const\n-  {\n-    if (!has_var_store ()) return;\n-    const VariationStore &var_store = get_var_store ();\n-    float *store_cache = var_store.create_cache ();\n-\n-    unsigned new_major = 0, new_minor = 0;\n-    unsigned last_major = (layout_variation_indices->get_min ()) >> 16;\n-    for (unsigned idx : layout_variation_indices->iter ())\n-    {\n-      int delta = 0;\n-      if (calculate_delta)\n-        delta = roundf (var_store.get_delta (idx, normalized_coords.arrayZ,\n-                                             normalized_coords.length, store_cache));\n-\n-      if (no_variations)\n-      {\n-        layout_variation_idx_delta_map->set (idx, hb_pair_t<unsigned, int> (HB_OT_LAYOUT_NO_VARIATIONS_INDEX, delta));\n-        continue;\n-      }\n-\n-      uint16_t major = idx >> 16;\n-      if (major >= var_store.get_sub_table_count ()) break;\n-      if (major != last_major)\n-      {\n-        new_minor = 0;\n-        ++new_major;\n-      }\n-\n-      unsigned new_idx = (new_major << 16) + new_minor;\n-      layout_variation_idx_delta_map->set (idx, hb_pair_t<unsigned, int> (new_idx, delta));\n-      ++new_minor;\n-      last_major = major;\n-    }\n-    var_store.destroy_cache (store_cache);\n-  }\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GDEF\/GDEF.hh","additions":94,"deletions":72,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+    hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/Anchor.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+    {\n+      hb_barrier ();\n@@ -42,0 +44,1 @@\n+    }\n@@ -43,0 +46,2 @@\n+    {\n+      hb_barrier ();\n@@ -44,0 +49,1 @@\n+    }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/AnchorFormat3.hh","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-  UnsizedArrayOf<Offset16To<Anchor>>\n+  UnsizedArrayOf<Offset16To<Anchor, AnchorMatrix>>\n@@ -21,0 +21,1 @@\n+    hb_barrier ();\n@@ -28,0 +29,1 @@\n+    hb_barrier ();\n@@ -41,0 +43,1 @@\n+    hb_barrier ();\n@@ -68,1 +71,0 @@\n-    bool ret = false;\n@@ -73,1 +75,1 @@\n-      ret |= offset->serialize_subset (c, matrixZ[i], this);\n+      offset->serialize_subset (c, matrixZ[i], this);\n@@ -76,1 +78,1 @@\n-    return_trace (ret);\n+    return_trace (true);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/AnchorMatrix.hh","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-                                 bool all_axes_pinned);\n+                                 unsigned new_format);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/Common.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-  bool sanitize (hb_sanitize_context_t *c, const void *base) const\n+  bool sanitize (hb_sanitize_context_t *c, const struct CursivePosFormat1 *base) const\n@@ -21,1 +21,1 @@\n-                                  const void *src_base) const\n+                                  const struct CursivePosFormat1 *src_base) const\n@@ -28,1 +28,1 @@\n-               const void *src_base) const\n+               const struct CursivePosFormat1 *src_base) const\n@@ -41,1 +41,1 @@\n-  Offset16To<Anchor>\n+  Offset16To<Anchor, struct CursivePosFormat1>\n@@ -45,1 +45,1 @@\n-  Offset16To<Anchor>\n+  Offset16To<Anchor, struct CursivePosFormat1>\n@@ -131,0 +131,1 @@\n+    hb_barrier ();\n@@ -148,0 +149,1 @@\n+    hb_barrier ();\n@@ -265,1 +267,1 @@\n-                  const void *src_base)\n+                  const struct CursivePosFormat1 *src_base)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/CursivePosFormat1.hh","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/MarkMarkPosFormat1.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    hb_barrier ();\n@@ -105,1 +106,32 @@\n-  bool apply (hb_ot_apply_context_t *c) const\n+  unsigned cache_cost () const\n+  {\n+    return (this+coverage).cost ();\n+  }\n+  static void * cache_func (void *p, hb_ot_lookup_cache_op_t op)\n+  {\n+    switch (op)\n+    {\n+      case hb_ot_lookup_cache_op_t::CREATE:\n+      {\n+        hb_ot_lookup_cache_t *cache = (hb_ot_lookup_cache_t *) hb_malloc (sizeof (hb_ot_lookup_cache_t));\n+        if (likely (cache))\n+          cache->clear ();\n+        return cache;\n+      }\n+      case hb_ot_lookup_cache_op_t::ENTER:\n+        return (void *) true;\n+      case hb_ot_lookup_cache_op_t::LEAVE:\n+        return nullptr;\n+      case hb_ot_lookup_cache_op_t::DESTROY:\n+      {\n+        hb_ot_lookup_cache_t *cache = (hb_ot_lookup_cache_t *) p;\n+        hb_free (cache);\n+        return nullptr;\n+      }\n+    }\n+    return nullptr;\n+  }\n+\n+  bool apply_cached (hb_ot_apply_context_t *c) const { return _apply (c, true); }\n+  bool apply (hb_ot_apply_context_t *c) const { return _apply (c, false); }\n+  bool _apply (hb_ot_apply_context_t *c, bool cached) const\n@@ -108,0 +140,1 @@\n+\n@@ -109,0 +142,5 @@\n+\n+#ifndef HB_NO_OT_LAYOUT_LOOKUP_CACHE\n+    hb_ot_lookup_cache_t *cache = cached ? (hb_ot_lookup_cache_t *) c->lookup_accel->cache : nullptr;\n+    unsigned int index = (this+coverage).get_coverage  (buffer->cur().codepoint, cache);\n+#else\n@@ -110,1 +148,2 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+#endif\n+    if (index == NOT_COVERED) return_trace (false);\n@@ -134,3 +173,4 @@\n-    out->valueFormat[0] = valueFormat[0];\n-    out->valueFormat[1] = valueFormat[1];\n-    if (c->plan->flags & HB_SUBSET_FLAGS_NO_HINTING)\n+\n+    hb_pair_t<unsigned, unsigned> newFormats = hb_pair (valueFormat[0], valueFormat[1]);\n+\n+    if (c->plan->normalized_coords)\n@@ -138,3 +178,4 @@\n-      hb_pair_t<unsigned, unsigned> newFormats = compute_effective_value_formats (glyphset);\n-      out->valueFormat[0] = newFormats.first;\n-      out->valueFormat[1] = newFormats.second;\n+      \/* all device flags will be dropped when full instancing, no need to strip\n+       * hints, also do not strip emtpy cause we don't compute the new default\n+       * value during stripping *\/\n+      newFormats = compute_effective_value_formats (glyphset, false, false, &c->plan->layout_variation_idx_delta_map);\n@@ -142,2 +183,2 @@\n-\n-    if (c->plan->all_axes_pinned)\n+    \/* do not strip hints for VF *\/\n+    else if (c->plan->flags & HB_SUBSET_FLAGS_NO_HINTING)\n@@ -145,2 +186,10 @@\n-      out->valueFormat[0] = out->valueFormat[0].drop_device_table_flags ();\n-      out->valueFormat[1] = out->valueFormat[1].drop_device_table_flags ();\n+      hb_blob_t* blob = hb_face_reference_table (c->plan->source, HB_TAG ('f','v','a','r'));\n+      bool has_fvar = (blob != hb_blob_get_empty ());\n+      hb_blob_destroy (blob);\n+\n+      bool strip = !has_fvar;\n+      \/* special case: strip hints when a VF has no GDEF varstore after\n+       * subsetting*\/\n+      if (has_fvar && !c->plan->has_gdef_varstore)\n+        strip = true;\n+      newFormats = compute_effective_value_formats (glyphset, strip, true);\n@@ -149,0 +198,3 @@\n+    out->valueFormat[0] = newFormats.first;\n+    out->valueFormat[1] = newFormats.second;\n+\n@@ -178,1 +230,3 @@\n-  hb_pair_t<unsigned, unsigned> compute_effective_value_formats (const hb_set_t& glyphset) const\n+  hb_pair_t<unsigned, unsigned> compute_effective_value_formats (const hb_set_t& glyphset,\n+                                                                 bool strip_hints, bool strip_empty,\n+                                                                 const hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *varidx_delta_map = nullptr) const\n@@ -198,2 +252,2 @@\n-          format1 = format1 | valueFormat[0].get_effective_format (record->get_values_1 ());\n-          format2 = format2 | valueFormat[1].get_effective_format (record->get_values_2 (valueFormat[0]));\n+          format1 = format1 | valueFormat[0].get_effective_format (record->get_values_1 (), strip_hints, strip_empty, &set, varidx_delta_map);\n+          format2 = format2 | valueFormat[1].get_effective_format (record->get_values_2 (valueFormat[0]), strip_hints, strip_empty, &set, varidx_delta_map);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/PairPosFormat1.hh","additions":69,"deletions":15,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-struct PairPosFormat2_4\n+struct PairPosFormat2_4 : ValueBase\n@@ -126,1 +126,43 @@\n-  bool apply (hb_ot_apply_context_t *c) const\n+  struct pair_pos_cache_t\n+  {\n+    hb_ot_lookup_cache_t coverage;\n+    hb_ot_lookup_cache_t first;\n+    hb_ot_lookup_cache_t second;\n+  };\n+\n+  unsigned cache_cost () const\n+  {\n+    return (this+coverage).cost () + (this+classDef1).cost () + (this+classDef2).cost ();\n+  }\n+  static void * cache_func (void *p, hb_ot_lookup_cache_op_t op)\n+  {\n+    switch (op)\n+    {\n+      case hb_ot_lookup_cache_op_t::CREATE:\n+      {\n+        pair_pos_cache_t *cache = (pair_pos_cache_t *) hb_malloc (sizeof (pair_pos_cache_t));\n+        if (likely (cache))\n+        {\n+          cache->coverage.clear ();\n+          cache->first.clear ();\n+          cache->second.clear ();\n+        }\n+        return cache;\n+      }\n+      case hb_ot_lookup_cache_op_t::ENTER:\n+        return (void *) true;\n+      case hb_ot_lookup_cache_op_t::LEAVE:\n+        return nullptr;\n+      case hb_ot_lookup_cache_op_t::DESTROY:\n+        {\n+          pair_pos_cache_t *cache = (pair_pos_cache_t *) p;\n+          hb_free (cache);\n+          return nullptr;\n+        }\n+    }\n+    return nullptr;\n+  }\n+\n+  bool apply_cached (hb_ot_apply_context_t *c) const { return _apply (c, true); }\n+  bool apply (hb_ot_apply_context_t *c) const { return _apply (c, false); }\n+  bool _apply (hb_ot_apply_context_t *c, bool cached) const\n@@ -129,0 +171,1 @@\n+\n@@ -130,0 +173,5 @@\n+\n+#ifndef HB_NO_OT_LAYOUT_LOOKUP_CACHE\n+    pair_pos_cache_t *cache = cached ? (pair_pos_cache_t *) c->lookup_accel->cache : nullptr;\n+    unsigned int index = (this+coverage).get_coverage  (buffer->cur().codepoint, cache ? &cache->coverage : nullptr);\n+#else\n@@ -131,1 +179,2 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+#endif\n+    if (index == NOT_COVERED) return_trace (false);\n@@ -142,7 +191,4 @@\n-    unsigned int klass2 = (this+classDef2).get_class (buffer->info[skippy_iter.idx].codepoint);\n-    if (!klass2)\n-    {\n-      buffer->unsafe_to_concat (buffer->idx, skippy_iter.idx + 1);\n-      return_trace (false);\n-    }\n-\n+#ifndef HB_NO_OT_LAYOUT_LOOKUP_CACHE\n+    unsigned int klass1 = (this+classDef1).get_class (buffer->cur().codepoint, cache ? &cache->first : nullptr);\n+    unsigned int klass2 = (this+classDef2).get_class (buffer->info[skippy_iter.idx].codepoint, cache ? &cache->second : nullptr);\n+#else\n@@ -150,0 +196,2 @@\n+    unsigned int klass2 = (this+classDef2).get_class (buffer->info[skippy_iter.idx].codepoint);\n+#endif\n@@ -290,5 +338,0 @@\n-    if (c->plan->flags & HB_SUBSET_FLAGS_NO_HINTING)\n-      newFormats = compute_effective_value_formats (klass1_map, klass2_map);\n-\n-    out->valueFormat1 = newFormats.first;\n-    out->valueFormat2 = newFormats.second;\n@@ -296,1 +339,1 @@\n-    if (c->plan->all_axes_pinned)\n+    if (c->plan->normalized_coords)\n@@ -298,2 +341,17 @@\n-      out->valueFormat1 = out->valueFormat1.drop_device_table_flags ();\n-      out->valueFormat2 = out->valueFormat2.drop_device_table_flags ();\n+      \/* in case of full instancing, all var device flags will be dropped so no\n+       * need to strip hints here *\/\n+      newFormats = compute_effective_value_formats (klass1_map, klass2_map, false, false, &c->plan->layout_variation_idx_delta_map);\n+    }\n+    \/* do not strip hints for VF *\/\n+    else if (c->plan->flags & HB_SUBSET_FLAGS_NO_HINTING)\n+    {\n+      hb_blob_t* blob = hb_face_reference_table (c->plan->source, HB_TAG ('f','v','a','r'));\n+      bool has_fvar = (blob != hb_blob_get_empty ());\n+      hb_blob_destroy (blob);\n+\n+      bool strip = !has_fvar;\n+      \/* special case: strip hints when a VF has no GDEF varstore after\n+       * subsetting*\/\n+      if (has_fvar && !c->plan->has_gdef_varstore)\n+        strip = true;\n+      newFormats = compute_effective_value_formats (klass1_map, klass2_map, strip, true);\n@@ -302,0 +360,3 @@\n+    out->valueFormat1 = newFormats.first;\n+    out->valueFormat2 = newFormats.second;\n+\n@@ -314,11 +375,2 @@\n-    const hb_set_t &glyphset = *c->plan->glyphset_gsub ();\n-    const hb_map_t &glyph_map = *c->plan->glyph_map;\n-\n-    auto it =\n-    + hb_iter (this+coverage)\n-    | hb_filter (glyphset)\n-    | hb_map_retains_sorting (glyph_map)\n-    ;\n-\n-    out->coverage.serialize_serialize (c->serializer, it);\n-    return_trace (out->class1Count && out->class2Count && bool (it));\n+    bool ret = out->coverage.serialize_subset(c, coverage, this);\n+    return_trace (out->class1Count && out->class2Count && ret);\n@@ -329,1 +381,3 @@\n-                                                                 const hb_map_t& klass2_map) const\n+                                                                 const hb_map_t& klass2_map,\n+                                                                 bool strip_hints, bool strip_empty,\n+                                                                 const hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *varidx_delta_map = nullptr) const\n@@ -343,2 +397,2 @@\n-        format1 = format1 | valueFormat1.get_effective_format (&values[idx]);\n-        format2 = format2 | valueFormat2.get_effective_format (&values[idx + len1]);\n+        format1 = format1 | valueFormat1.get_effective_format (&values[idx], strip_hints, strip_empty, this, varidx_delta_map);\n+        format2 = format2 | valueFormat2.get_effective_format (&values[idx + len1], strip_hints, strip_empty, this, varidx_delta_map);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/PairPosFormat2.hh","additions":86,"deletions":32,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-struct PairSet\n+struct PairSet : ValueBase\n@@ -48,2 +48,3 @@\n-    if (!(c->check_struct (this)\n-       && c->check_range (&firstPairValueRecord,\n+    if (!(c->check_struct (this) &&\n+          hb_barrier () &&\n+          c->check_range (&firstPairValueRecord,\n@@ -52,0 +53,1 @@\n+    hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/PairSet.hh","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    const void          *base;\n+    const ValueBase     *base;\n@@ -65,1 +65,1 @@\n-                                  const void *base) const\n+                                  const ValueBase *base) const\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/PairValueRecord.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-                  bool all_axes_pinned)\n+                  unsigned newFormat)\n@@ -46,4 +46,2 @@\n-    ValueFormat new_format = src->get_value_format ();\n-\n-    if (all_axes_pinned)\n-      new_format = new_format.drop_device_table_flags ();\n+    ValueFormat new_format;\n+    new_format = newFormat;\n@@ -92,2 +90,2 @@\n-                     bool all_axes_pinned)\n-{ c->start_embed<SinglePos> ()->serialize (c, src, it, layout_variation_idx_delta_map, all_axes_pinned); }\n+                     unsigned new_format)\n+{ c->start_embed<SinglePos> ()->serialize (c, src, it, layout_variation_idx_delta_map, new_format); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/SinglePos.hh","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-struct SinglePosFormat1\n+struct SinglePosFormat1 : ValueBase\n@@ -31,0 +31,1 @@\n+                  hb_barrier () &&\n@@ -69,1 +70,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n@@ -149,0 +150,24 @@\n+    unsigned new_format = valueFormat;\n+\n+    if (c->plan->normalized_coords)\n+    {\n+      new_format = valueFormat.get_effective_format (values.arrayZ, false, false, this, &c->plan->layout_variation_idx_delta_map);\n+    }\n+    \/* do not strip hints for VF *\/\n+    else if (c->plan->flags & HB_SUBSET_FLAGS_NO_HINTING)\n+    {\n+      hb_blob_t* blob = hb_face_reference_table (c->plan->source, HB_TAG ('f','v','a','r'));\n+      bool has_fvar = (blob != hb_blob_get_empty ());\n+      hb_blob_destroy (blob);\n+\n+      bool strip = !has_fvar;\n+      \/* special case: strip hints when a VF has no GDEF varstore after\n+       * subsetting*\/\n+      if (has_fvar && !c->plan->has_gdef_varstore)\n+        strip = true;\n+      new_format = valueFormat.get_effective_format (values.arrayZ,\n+                                                     strip, \/* strip hints *\/\n+                                                     true, \/* strip empty *\/\n+                                                     this, nullptr);\n+    }\n+\n@@ -156,1 +181,1 @@\n-    SinglePos_serialize (c->serializer, this, it, &c->plan->layout_variation_idx_delta_map, c->plan->all_axes_pinned);\n+    SinglePos_serialize (c->serializer, this, it, &c->plan->layout_variation_idx_delta_map, new_format);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/SinglePosFormat1.hh","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-struct SinglePosFormat2\n+struct SinglePosFormat2 : ValueBase\n@@ -69,1 +69,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n@@ -146,0 +146,31 @@\n+  template<typename Iterator,\n+      hb_requires (hb_is_iterator (Iterator))>\n+  unsigned compute_effective_format (const hb_face_t *face,\n+                                     Iterator it,\n+                                     bool is_instancing, bool strip_hints,\n+                                     bool has_gdef_varstore,\n+                                     const hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *varidx_delta_map) const\n+  {\n+    hb_blob_t* blob = hb_face_reference_table (face, HB_TAG ('f','v','a','r'));\n+    bool has_fvar = (blob != hb_blob_get_empty ());\n+    hb_blob_destroy (blob);\n+\n+    unsigned new_format = 0;\n+    if (is_instancing)\n+    {\n+      new_format = new_format | valueFormat.get_effective_format (+ it | hb_map (hb_second), false, false, this, varidx_delta_map);\n+    }\n+    \/* do not strip hints for VF *\/\n+    else if (strip_hints)\n+    {\n+      bool strip = !has_fvar;\n+      if (has_fvar && !has_gdef_varstore)\n+        strip = true;\n+      new_format = new_format | valueFormat.get_effective_format (+ it | hb_map (hb_second), strip, true, this, nullptr);\n+    }\n+    else\n+      new_format = valueFormat;\n+\n+    return new_format;\n+  }\n+\n@@ -166,0 +197,5 @@\n+    unsigned new_format = compute_effective_format (c->plan->source, it,\n+                                                    bool (c->plan->normalized_coords),\n+                                                    bool (c->plan->flags & HB_SUBSET_FLAGS_NO_HINTING),\n+                                                    c->plan->has_gdef_varstore,\n+                                                    &c->plan->layout_variation_idx_delta_map);\n@@ -167,1 +203,1 @@\n-    SinglePos_serialize (c->serializer, this, it, &c->plan->layout_variation_idx_delta_map, c->plan->all_axes_pinned);\n+    SinglePos_serialize (c->serializer, this, it, &c->plan->layout_variation_idx_delta_map, new_format);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/SinglePosFormat2.hh","additions":39,"deletions":3,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -12,0 +12,2 @@\n+struct ValueBase {}; \/\/ Dummy base class tag for OffsetTo<Value> bases.\n+\n@@ -81,1 +83,1 @@\n-                    const void            *base,\n+                    const ValueBase       *base,\n@@ -117,1 +119,1 @@\n-    const VariationStore &store = c->var_store;\n+    const ItemVariationStore &store = c->var_store;\n@@ -145,1 +147,2 @@\n-  unsigned int get_effective_format (const Value *values) const\n+  unsigned int get_effective_format (const Value *values, bool strip_hints, bool strip_empty, const ValueBase *base,\n+                                     const hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *varidx_delta_map) const\n@@ -149,1 +152,18 @@\n-      if (format & flag) should_drop (*values++, (Flags) flag, &format);\n+      if (format & flag)\n+      {\n+        if (strip_hints && flag >= xPlaDevice)\n+        {\n+          format = format & ~flag;\n+          values++;\n+          continue;\n+        }\n+        if (varidx_delta_map && flag >= xPlaDevice)\n+        {\n+          update_var_flag (values++, (Flags) flag, &format, base, varidx_delta_map);\n+          continue;\n+        }\n+        \/* do not strip empty when instancing, cause we don't know whether the new\n+         * default value is 0 or not *\/\n+        if (strip_empty) should_drop (*values, (Flags) flag, &format);\n+        values++;\n+      }\n@@ -157,1 +177,2 @@\n-  unsigned int get_effective_format (Iterator it) const {\n+  unsigned int get_effective_format (Iterator it, bool strip_hints, bool strip_empty, const ValueBase *base,\n+                                     const hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *varidx_delta_map) const {\n@@ -161,1 +182,1 @@\n-      new_format = new_format | get_effective_format (&values);\n+      new_format = new_format | get_effective_format (&values, strip_hints, strip_empty, base, varidx_delta_map);\n@@ -168,1 +189,1 @@\n-                    const void *base,\n+                    const ValueBase *base,\n@@ -220,1 +241,1 @@\n-                                  const void *base,\n+                                  const ValueBase *base,\n@@ -254,9 +275,0 @@\n-  unsigned drop_device_table_flags () const\n-  {\n-    unsigned format = *this;\n-    for (unsigned flag = xPlaDevice; flag <= yAdvDevice; flag = flag << 1)\n-      format = format & ~flag;\n-\n-    return format;\n-  }\n-\n@@ -264,1 +276,1 @@\n-  bool sanitize_value_devices (hb_sanitize_context_t *c, const void *base, const Value *values) const\n+  bool sanitize_value_devices (hb_sanitize_context_t *c, const ValueBase *base, const Value *values) const\n@@ -281,1 +293,1 @@\n-  static inline Offset16To<Device>& get_device (Value* value)\n+  static inline Offset16To<Device, ValueBase>& get_device (Value* value)\n@@ -283,1 +295,1 @@\n-    return *static_cast<Offset16To<Device> *> (value);\n+    return *static_cast<Offset16To<Device, ValueBase> *> (value);\n@@ -285,1 +297,1 @@\n-  static inline const Offset16To<Device>& get_device (const Value* value)\n+  static inline const Offset16To<Device, ValueBase>& get_device (const Value* value)\n@@ -287,1 +299,1 @@\n-    return *static_cast<const Offset16To<Device> *> (value);\n+    return *static_cast<const Offset16To<Device, ValueBase> *> (value);\n@@ -291,1 +303,1 @@\n-                                          const void *base,\n+                                          const ValueBase *base,\n@@ -299,0 +311,1 @@\n+    hb_barrier ();\n@@ -304,1 +317,1 @@\n-                           const void *base,\n+                           const ValueBase *base,\n@@ -316,1 +329,2 @@\n-  bool copy_device (hb_serialize_context_t *c, const void *base,\n+  bool copy_device (hb_serialize_context_t *c,\n+                    const ValueBase *base,\n@@ -357,1 +371,1 @@\n-  bool sanitize_value (hb_sanitize_context_t *c, const void *base, const Value *values) const\n+  bool sanitize_value (hb_sanitize_context_t *c, const ValueBase *base, const Value *values) const\n@@ -369,1 +383,1 @@\n-  bool sanitize_values (hb_sanitize_context_t *c, const void *base, const Value *values, unsigned int count) const\n+  bool sanitize_values (hb_sanitize_context_t *c, const ValueBase *base, const Value *values, unsigned int count) const\n@@ -379,0 +393,1 @@\n+    hb_barrier ();\n@@ -383,1 +398,1 @@\n-  bool sanitize_values_stride_unsafe (hb_sanitize_context_t *c, const void *base, const Value *values, unsigned int count, unsigned int stride) const\n+  bool sanitize_values_stride_unsafe (hb_sanitize_context_t *c, const ValueBase *base, const Value *values, unsigned int count, unsigned int stride) const\n@@ -406,0 +421,14 @@\n+  void update_var_flag (const Value* value, Flags flag,\n+                        unsigned int* format, const ValueBase *base,\n+                        const hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *varidx_delta_map) const\n+  {\n+    if (*value)\n+    {\n+      unsigned varidx = (base + get_device (value)).get_variation_index ();\n+      hb_pair_t<unsigned, int> *varidx_delta;\n+      if (varidx_delta_map->has (varidx, &varidx_delta) &&\n+          varidx_delta->first != HB_OT_LAYOUT_NO_VARIATIONS_INDEX)\n+        return;\n+    }\n+    *format = *format & ~flag;\n+  }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GPOS\/ValueFormat.hh","additions":57,"deletions":28,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/AlternateSubstFormat1.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,0 +93,10 @@\n+    if (unlikely (count > HB_MAX_CONTEXT_LENGTH)) return false;\n+    unsigned match_positions_stack[4];\n+    unsigned *match_positions = match_positions_stack;\n+    if (unlikely (count > ARRAY_LENGTH (match_positions_stack)))\n+    {\n+      match_positions = (unsigned *) hb_malloc (hb_max (count, 1u) * sizeof (unsigned));\n+      if (unlikely (!match_positions))\n+        return_trace (false);\n+    }\n+\n@@ -94,1 +104,0 @@\n-    unsigned int match_positions[HB_MAX_CONTEXT_LENGTH];\n@@ -105,0 +114,2 @@\n+      if (match_positions != match_positions_stack)\n+        hb_free (match_positions);\n@@ -148,0 +159,2 @@\n+    if (match_positions != match_positions_stack)\n+      hb_free (match_positions);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/Ligature.hh","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  bool apply (hb_ot_apply_context_t *c) const\n+  unsigned cache_cost () const\n@@ -83,1 +83,26 @@\n-    TRACE_APPLY (this);\n+    return (this+coverage).cost ();\n+  }\n+  static void * cache_func (void *p, hb_ot_lookup_cache_op_t op)\n+  {\n+    switch (op)\n+    {\n+      case hb_ot_lookup_cache_op_t::CREATE:\n+      {\n+        hb_ot_lookup_cache_t *cache = (hb_ot_lookup_cache_t *) hb_malloc (sizeof (hb_ot_lookup_cache_t));\n+        if (likely (cache))\n+          cache->clear ();\n+        return cache;\n+      }\n+      case hb_ot_lookup_cache_op_t::ENTER:\n+        return (void *) true;\n+      case hb_ot_lookup_cache_op_t::LEAVE:\n+        return nullptr;\n+      case hb_ot_lookup_cache_op_t::DESTROY:\n+      {\n+        hb_ot_lookup_cache_t *cache = (hb_ot_lookup_cache_t *) p;\n+        hb_free (cache);\n+        return nullptr;\n+      }\n+    }\n+    return nullptr;\n+  }\n@@ -85,2 +110,14 @@\n-    unsigned int index = (this+coverage).get_coverage (c->buffer->cur ().codepoint);\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+  bool apply_cached (hb_ot_apply_context_t *c) const { return _apply (c, true); }\n+  bool apply (hb_ot_apply_context_t *c) const { return _apply (c, false); }\n+  bool _apply (hb_ot_apply_context_t *c, bool cached) const\n+  {\n+    TRACE_APPLY (this);\n+    hb_buffer_t *buffer = c->buffer;\n+\n+#ifndef HB_NO_OT_LAYOUT_LOOKUP_CACHE\n+    hb_ot_lookup_cache_t *cache = cached ? (hb_ot_lookup_cache_t *) c->lookup_accel->cache : nullptr;\n+    unsigned int index = (this+coverage).get_coverage  (buffer->cur().codepoint, cache);\n+#else\n+    unsigned int index = (this+coverage).get_coverage  (buffer->cur().codepoint);\n+#endif\n+    if (index == NOT_COVERED) return_trace (false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/LigatureSubstFormat1.hh","additions":41,"deletions":4,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/MultipleSubstFormat1.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+    hb_barrier ();\n@@ -39,0 +40,1 @@\n+    hb_barrier ();\n@@ -112,0 +114,3 @@\n+    unsigned int index = (this+coverage).get_coverage (c->buffer->cur ().codepoint);\n+    if (index == NOT_COVERED) return_trace (false);\n+\n@@ -115,3 +120,0 @@\n-    unsigned int index = (this+coverage).get_coverage (c->buffer->cur ().codepoint);\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/ReverseChainSingleSubstFormat1.hh","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/SingleSubstFormat1.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/GSUB\/SingleSubstFormat2.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+using hb_ot_lookup_cache_t = hb_cache_t<15, 8, 7>;\n+static_assert (sizeof (hb_ot_lookup_cache_t) == 256, \"\");\n+\n@@ -41,2 +44,2 @@\n-  template <typename Type, bool has_null=true>\n-  using OffsetTo = OT::Offset16To<Type, has_null>;\n+  template <typename Type, typename BaseType=void, bool has_null=true>\n+  using OffsetTo = OT::Offset16To<Type, BaseType, has_null>;\n@@ -55,2 +58,2 @@\n-  template <typename Type, bool has_null=true>\n-  using OffsetTo = OT::Offset24To<Type, has_null>;\n+  template <typename Type, typename BaseType=void, bool has_null=true>\n+  using OffsetTo = OT::Offset24To<Type, BaseType, has_null>;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/Layout\/types.hh","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-    if (unlikely (!points.alloc (points.length + 4))) return false; \/\/ For phantom points\n+    if (unlikely (!points.alloc (points.length + 1 + 4))) return false; \/\/ For phantom points\n@@ -243,1 +243,2 @@\n-    trans.init ((float) tx, (float) ty);\n+    \/* set is_end_point flag to true, used by IUP delta optimization *\/\n+    trans.init ((float) tx, (float) ty, true);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/CompositeGlyph.hh","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -10,2 +10,0 @@\n-#include \"VarCompositeGlyph.hh\"\n-#include \"coord-setter.hh\"\n@@ -36,3 +34,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-    VAR_COMPOSITE,\n-#endif\n@@ -47,9 +42,0 @@\n-  var_composite_iter_t get_var_composite_iterator () const\n-  {\n-#ifndef HB_NO_VAR_COMPOSITES\n-    if (type != VAR_COMPOSITE) return var_composite_iter_t ();\n-    return VarCompositeGlyph (*header, bytes).iter ();\n-#else\n-    return var_composite_iter_t ();\n-#endif\n-  }\n@@ -60,3 +46,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-    case VAR_COMPOSITE: return VarCompositeGlyph (*header, bytes).trim_padding ();\n-#endif\n@@ -73,3 +56,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-    case VAR_COMPOSITE: return; \/\/ No hinting\n-#endif\n@@ -85,3 +65,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-    case VAR_COMPOSITE: return; \/\/ No overlaps flag\n-#endif\n@@ -97,3 +74,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-    case VAR_COMPOSITE: return; \/\/ No hinting\n-#endif\n@@ -106,0 +80,3 @@\n+  bool is_composite () const\n+  { return type == COMPOSITE; }\n+\n@@ -120,8 +97,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-    case VAR_COMPOSITE:\n-    {\n-      for (auto &item : get_var_composite_iterator ())\n-        if (unlikely (!item.get_points (points))) return false;\n-      break;\n-    }\n-#endif\n@@ -285,1 +254,2 @@\n-    if (!get_points (font, glyf, all_points, &points_with_deltas, head_maxp_info_p, composite_contours_p, false, false))\n+    hb_glyf_scratch_t scratch;\n+    if (!get_points (font, glyf, all_points, scratch, &points_with_deltas, head_maxp_info_p, composite_contours_p, false, false))\n@@ -303,7 +273,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-      case VAR_COMPOSITE:\n-        \/\/ TODO\n-        dest_end = hb_bytes_t ();\n-        break;\n-#endif\n-\n@@ -346,0 +309,1 @@\n+                   hb_glyf_scratch_t &scratch,\n@@ -352,2 +316,1 @@\n-                   hb_array_t<int> coords = hb_array_t<int> (),\n-                   hb_map_t *current_glyphs = nullptr,\n+                   hb_array_t<const int> coords = hb_array_t<const int> (),\n@@ -360,1 +323,1 @@\n-    if (unlikely (*edge_count > HB_GLYF_MAX_EDGE_COUNT)) return false;\n+    if (unlikely (*edge_count > HB_MAX_GRAPH_EDGE_COUNT)) return false;\n@@ -363,4 +326,0 @@\n-    hb_map_t current_glyphs_stack;\n-    if (current_glyphs == nullptr)\n-      current_glyphs = &current_glyphs_stack;\n-\n@@ -375,2 +334,1 @@\n-    contour_point_vector_t stack_points;\n-    contour_point_vector_t &points = type == SIMPLE ? all_points : stack_points;\n+    contour_point_vector_t &points = type == SIMPLE ? all_points : scratch.comp_points;\n@@ -394,8 +352,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-    case VAR_COMPOSITE:\n-    {\n-      for (auto &item : get_var_composite_iterator ())\n-        if (unlikely (!item.get_points (points))) return false;\n-      break;\n-    }\n-#endif\n@@ -437,4 +387,16 @@\n-      glyf_accelerator.gvar->apply_deltas_to_points (gid,\n-                                                     coords,\n-                                                     points.as_array ().sub_array (old_length),\n-                                                     phantom_only && type == SIMPLE);\n+    {\n+#ifndef HB_NO_BEYOND_64K\n+      if (glyf_accelerator.GVAR->has_data ())\n+        glyf_accelerator.GVAR->apply_deltas_to_points (gid,\n+                                                       coords,\n+                                                       points.as_array ().sub_array (old_length),\n+                                                       scratch,\n+                                                       phantom_only && type == SIMPLE);\n+      else\n+#endif\n+        glyf_accelerator.gvar->apply_deltas_to_points (gid,\n+                                                       coords,\n+                                                       points.as_array ().sub_array (old_length),\n+                                                       scratch,\n+                                                       phantom_only && type == SIMPLE);\n+    }\n@@ -447,1 +409,1 @@\n-      if (unlikely (!points_with_deltas->resize (points.length))) return false;\n+      assert (old_length == 0);\n@@ -451,0 +413,1 @@\n+    float shift = 0;\n@@ -455,0 +418,1 @@\n+      shift = phantoms[PHANTOM_LEFT].x;\n@@ -458,0 +422,2 @@\n+      hb_decycler_node_t decycler_node (scratch.decycler);\n+\n@@ -463,1 +429,3 @@\n-        if (unlikely (current_glyphs->has (item_gid)))\n+        if (unlikely (!decycler_node.visit (item_gid)))\n+        {\n+          comp_index++;\n@@ -465,2 +433,1 @@\n-\n-        current_glyphs->add (item_gid);\n+        }\n@@ -475,0 +442,1 @@\n+                                                    scratch,\n@@ -482,1 +450,0 @@\n-                                                    current_glyphs,\n@@ -486,1 +453,1 @@\n-          current_glyphs->del (item_gid);\n+          points.resize (old_length);\n@@ -490,0 +457,3 @@\n+        \/\/ points might have been reallocated. Relocate phantoms.\n+        phantoms = points.as_array ().sub_array (points.length - PHANTOM_COUNT, PHANTOM_COUNT);\n+\n@@ -504,1 +474,1 @@\n-          item.transform_points (comp_points, matrix, points[comp_index]);\n+          item.transform_points (comp_points, matrix, points[old_length + comp_index]);\n@@ -525,1 +495,1 @@\n-          current_glyphs->del (item_gid);\n+          points.resize (old_length);\n@@ -530,1 +500,0 @@\n-        current_glyphs->del (item_gid);\n@@ -541,0 +510,2 @@\n+      shift = phantoms[PHANTOM_LEFT].x;\n+      points.resize (old_length);\n@@ -542,75 +513,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-    case VAR_COMPOSITE:\n-    {\n-      hb_array_t<contour_point_t> points_left = points.as_array ();\n-      for (auto &item : get_var_composite_iterator ())\n-      {\n-        hb_codepoint_t item_gid = item.get_gid ();\n-\n-        if (unlikely (current_glyphs->has (item_gid)))\n-          continue;\n-\n-        current_glyphs->add (item_gid);\n-\n-        unsigned item_num_points = item.get_num_points ();\n-        hb_array_t<contour_point_t> record_points = points_left.sub_array (0, item_num_points);\n-        assert (record_points.length == item_num_points);\n-\n-        auto component_coords = coords;\n-        \/* Copying coords is expensive; so we have put an arbitrary\n-         * limit on the max number of coords for now. *\/\n-        if (item.is_reset_unspecified_axes () ||\n-            coords.length > HB_GLYF_VAR_COMPOSITE_MAX_AXES)\n-          component_coords = hb_array<int> ();\n-\n-        coord_setter_t coord_setter (component_coords);\n-        item.set_variations (coord_setter, record_points);\n-\n-        unsigned old_count = all_points.length;\n-\n-        if (unlikely ((!phantom_only || (use_my_metrics && item.is_use_my_metrics ())) &&\n-                      !glyf_accelerator.glyph_for_gid (item_gid)\n-                                       .get_points (font,\n-                                                    glyf_accelerator,\n-                                                    all_points,\n-                                                    points_with_deltas,\n-                                                    head_maxp_info,\n-                                                    nullptr,\n-                                                    shift_points_hori,\n-                                                    use_my_metrics,\n-                                                    phantom_only,\n-                                                    coord_setter.get_coords (),\n-                                                    current_glyphs,\n-                                                    depth + 1,\n-                                                    edge_count)))\n-        {\n-          current_glyphs->del (item_gid);\n-          return false;\n-        }\n-\n-        auto comp_points = all_points.as_array ().sub_array (old_count);\n-\n-        \/* Apply component transformation *\/\n-        if (comp_points) \/\/ Empty in case of phantom_only\n-          item.transform_points (record_points, comp_points);\n-\n-        \/* Copy phantom points from component if USE_MY_METRICS flag set *\/\n-        if (use_my_metrics && item.is_use_my_metrics ())\n-          for (unsigned int i = 0; i < PHANTOM_COUNT; i++)\n-            phantoms[i] = comp_points[comp_points.length - PHANTOM_COUNT + i];\n-\n-        all_points.resize (all_points.length - PHANTOM_COUNT);\n-\n-        if (all_points.length > HB_GLYF_MAX_POINTS)\n-        {\n-          current_glyphs->del (item_gid);\n-          return false;\n-        }\n-\n-        points_left += item_num_points;\n-\n-        current_glyphs->del (item_gid);\n-      }\n-      all_points.extend (phantoms);\n-    } break;\n-#endif\n@@ -619,0 +515,2 @@\n+      shift = phantoms[PHANTOM_LEFT].x;\n+      points.resize (old_length);\n@@ -627,2 +525,1 @@\n-      int v = -phantoms[PHANTOM_LEFT].x;\n-      if (v)\n+      if (shift)\n@@ -630,1 +527,1 @@\n-          point.x += v;\n+          point.x -= shift;\n@@ -661,4 +558,1 @@\n-    else if (num_contours == -1) type = COMPOSITE;\n-#ifndef HB_NO_VAR_COMPOSITES\n-    else if (num_contours == -2) type = VAR_COMPOSITE;\n-#endif\n+    else if (num_contours <= -1) type = COMPOSITE;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/Glyph.hh","additions":48,"deletions":154,"binary":false,"changes":202,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+    auto *points = points_.arrayZ;\n@@ -135,1 +136,1 @@\n-      points_.arrayZ[i++].flag = flag;\n+      points[i++].flag = flag;\n@@ -142,1 +143,1 @@\n-          points_.arrayZ[i].flag = flag;\n+          points[i].flag = flag;\n@@ -163,4 +164,1 @@\n-        if (flag & same_flag)\n-          v += *p++;\n-        else\n-          v -= *p++;\n+        v += (bool(flag & same_flag) * 2 - 1) * *p++;\n@@ -193,1 +191,1 @@\n-    points.alloc (points.length + num_points + 4, true); \/\/ Allocate for phantom points, to avoid a possible copy\n+    points.alloc (points.length + num_points + 4); \/\/ Allocate for phantom points, to avoid a possible copy\n@@ -284,3 +282,3 @@\n-    if (unlikely (!flags.alloc (num_points, true))) return false;\n-    if (unlikely (!x_coords.alloc (2*num_points, true))) return false;\n-    if (unlikely (!y_coords.alloc (2*num_points, true))) return false;\n+    if (unlikely (!flags.alloc_exact (num_points))) return false;\n+    if (unlikely (!x_coords.alloc_exact (2*num_points))) return false;\n+    if (unlikely (!y_coords.alloc_exact (2*num_points))) return false;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/SimpleGlyph.hh","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -56,8 +56,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-    for (auto &_ : Glyph (dest_glyph).get_var_composite_iterator ())\n-    {\n-      hb_codepoint_t new_gid;\n-      if (plan->new_gid_for_old_gid (_.get_gid(), &new_gid))\n-        const_cast<VarCompositeGlyphRecord &> (_).set_gid (new_gid);\n-    }\n-#endif\n@@ -69,4 +61,1 @@\n-      \/* lower GID24 to GID16 in components if possible.\n-       *\n-       * TODO: VarComposite. Not as critical, since VarComposite supports\n-       * gid24 from the first version. *\/\n+      \/* lower GID24 to GID16 in components if possible. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/SubsetGlyph.hh","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,401 +0,0 @@\n-#ifndef OT_GLYF_VARCOMPOSITEGLYPH_HH\n-#define OT_GLYF_VARCOMPOSITEGLYPH_HH\n-\n-\n-#include \"..\/..\/hb-open-type.hh\"\n-#include \"coord-setter.hh\"\n-\n-\n-namespace OT {\n-namespace glyf_impl {\n-\n-\n-struct VarCompositeGlyphRecord\n-{\n-  protected:\n-  enum var_composite_glyph_flag_t\n-  {\n-    USE_MY_METRICS              = 0x0001,\n-    AXIS_INDICES_ARE_SHORT      = 0x0002,\n-    UNIFORM_SCALE               = 0x0004,\n-    HAVE_TRANSLATE_X            = 0x0008,\n-    HAVE_TRANSLATE_Y            = 0x0010,\n-    HAVE_ROTATION               = 0x0020,\n-    HAVE_SCALE_X                = 0x0040,\n-    HAVE_SCALE_Y                = 0x0080,\n-    HAVE_SKEW_X                 = 0x0100,\n-    HAVE_SKEW_Y                 = 0x0200,\n-    HAVE_TCENTER_X              = 0x0400,\n-    HAVE_TCENTER_Y              = 0x0800,\n-    GID_IS_24BIT                = 0x1000,\n-    AXES_HAVE_VARIATION         = 0x2000,\n-    RESET_UNSPECIFIED_AXES      = 0x4000,\n-  };\n-\n-  public:\n-\n-  unsigned int get_size () const\n-  {\n-    unsigned fl = flags;\n-    unsigned int size = min_size;\n-\n-    unsigned axis_width = (fl & AXIS_INDICES_ARE_SHORT) ? 4 : 3;\n-    size += numAxes * axis_width;\n-\n-    if (fl & GID_IS_24BIT)      size += 1;\n-\n-    \/\/ 2 bytes each for the following flags\n-    fl = fl & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y |\n-               HAVE_ROTATION |\n-               HAVE_SCALE_X | HAVE_SCALE_Y |\n-               HAVE_SKEW_X | HAVE_SKEW_Y |\n-               HAVE_TCENTER_X | HAVE_TCENTER_Y);\n-    size += hb_popcount (fl) * 2;\n-\n-    return size;\n-  }\n-\n-  bool has_more () const { return true; }\n-\n-  bool is_use_my_metrics () const { return flags & USE_MY_METRICS; }\n-  bool is_reset_unspecified_axes () const { return flags & RESET_UNSPECIFIED_AXES; }\n-\n-  hb_codepoint_t get_gid () const\n-  {\n-    if (flags & GID_IS_24BIT)\n-      return * (const HBGlyphID24 *) &pad;\n-    else\n-      return * (const HBGlyphID16 *) &pad;\n-  }\n-\n-  void set_gid (hb_codepoint_t gid)\n-  {\n-    if (flags & GID_IS_24BIT)\n-      * (HBGlyphID24 *) &pad = gid;\n-    else\n-      * (HBGlyphID16 *) &pad = gid;\n-  }\n-\n-  unsigned get_numAxes () const\n-  {\n-    return numAxes;\n-  }\n-\n-  unsigned get_num_points () const\n-  {\n-    unsigned fl = flags;\n-    unsigned num = 0;\n-    if (fl & AXES_HAVE_VARIATION)                       num += numAxes;\n-\n-    \/* Hopefully faster code, relying on the value of the flags. *\/\n-    fl = (((fl & (HAVE_TRANSLATE_Y | HAVE_SCALE_Y | HAVE_SKEW_Y | HAVE_TCENTER_Y)) >> 1) | fl) &\n-         (HAVE_TRANSLATE_X | HAVE_ROTATION | HAVE_SCALE_X | HAVE_SKEW_X | HAVE_TCENTER_X);\n-    num += hb_popcount (fl);\n-    return num;\n-\n-    \/* Slower but more readable code. *\/\n-    if (fl & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))     num++;\n-    if (fl & HAVE_ROTATION)                             num++;\n-    if (fl & (HAVE_SCALE_X | HAVE_SCALE_Y))             num++;\n-    if (fl & (HAVE_SKEW_X | HAVE_SKEW_Y))               num++;\n-    if (fl & (HAVE_TCENTER_X | HAVE_TCENTER_Y))         num++;\n-    return num;\n-  }\n-\n-  void transform_points (hb_array_t<const contour_point_t> record_points,\n-                         hb_array_t<contour_point_t> points) const\n-  {\n-    float matrix[4];\n-    contour_point_t trans;\n-\n-    get_transformation_from_points (record_points.arrayZ, matrix, trans);\n-\n-    auto arrayZ = points.arrayZ;\n-    unsigned count = points.length;\n-\n-    if (matrix[0] != 1.f || matrix[1] != 0.f ||\n-        matrix[2] != 0.f || matrix[3] != 1.f)\n-      for (unsigned i = 0; i < count; i++)\n-        arrayZ[i].transform (matrix);\n-\n-    if (trans.x != 0.f || trans.y != 0.f)\n-      for (unsigned i = 0; i < count; i++)\n-        arrayZ[i].translate (trans);\n-  }\n-\n-  static inline void transform (float (&matrix)[4], contour_point_t &trans,\n-                                float (other)[6])\n-  {\n-    \/\/ https:\/\/github.com\/fonttools\/fonttools\/blob\/f66ee05f71c8b57b5f519ee975e95edcd1466e14\/Lib\/fontTools\/misc\/transform.py#L268\n-    float xx1 = other[0];\n-    float xy1 = other[1];\n-    float yx1 = other[2];\n-    float yy1 = other[3];\n-    float dx1 = other[4];\n-    float dy1 = other[5];\n-    float xx2 = matrix[0];\n-    float xy2 = matrix[1];\n-    float yx2 = matrix[2];\n-    float yy2 = matrix[3];\n-    float dx2 = trans.x;\n-    float dy2 = trans.y;\n-\n-    matrix[0] = xx1*xx2 + xy1*yx2;\n-    matrix[1] = xx1*xy2 + xy1*yy2;\n-    matrix[2] = yx1*xx2 + yy1*yx2;\n-    matrix[3] = yx1*xy2 + yy1*yy2;\n-    trans.x = xx2*dx1 + yx2*dy1 + dx2;\n-    trans.y = xy2*dx1 + yy2*dy1 + dy2;\n-  }\n-\n-  static void translate (float (&matrix)[4], contour_point_t &trans,\n-                         float translateX, float translateY)\n-  {\n-    if (!translateX && !translateY)\n-      return;\n-\n-    trans.x += matrix[0] * translateX + matrix[2] * translateY;\n-    trans.y += matrix[1] * translateX + matrix[3] * translateY;\n-  }\n-\n-  static void scale (float (&matrix)[4], contour_point_t &trans,\n-                     float scaleX, float scaleY)\n-  {\n-    if (scaleX == 1.f && scaleY == 1.f)\n-      return;\n-\n-    matrix[0] *= scaleX;\n-    matrix[1] *= scaleX;\n-    matrix[2] *= scaleY;\n-    matrix[3] *= scaleY;\n-  }\n-\n-  static void rotate (float (&matrix)[4], contour_point_t &trans,\n-                      float rotation)\n-  {\n-    if (!rotation)\n-      return;\n-\n-    \/\/ https:\/\/github.com\/fonttools\/fonttools\/blob\/f66ee05f71c8b57b5f519ee975e95edcd1466e14\/Lib\/fontTools\/misc\/transform.py#L240\n-    rotation = rotation * HB_PI;\n-    float c;\n-    float s;\n-#ifdef HAVE_SINCOSF\n-    sincosf (rotation, &s, &c);\n-#else\n-    c = cosf (rotation);\n-    s = sinf (rotation);\n-#endif\n-    float other[6] = {c, s, -s, c, 0.f, 0.f};\n-    transform (matrix, trans, other);\n-  }\n-\n-  static void skew (float (&matrix)[4], contour_point_t &trans,\n-                    float skewX, float skewY)\n-  {\n-    if (!skewX && !skewY)\n-      return;\n-\n-    \/\/ https:\/\/github.com\/fonttools\/fonttools\/blob\/f66ee05f71c8b57b5f519ee975e95edcd1466e14\/Lib\/fontTools\/misc\/transform.py#L255\n-    skewX = skewX * HB_PI;\n-    skewY = skewY * HB_PI;\n-    float other[6] = {1.f,\n-                      skewY ? tanf (skewY) : 0.f,\n-                      skewX ? tanf (skewX) : 0.f,\n-                      1.f,\n-                      0.f, 0.f};\n-    transform (matrix, trans, other);\n-  }\n-\n-  bool get_points (contour_point_vector_t &points) const\n-  {\n-    unsigned num_points = get_num_points ();\n-\n-    points.alloc (points.length + num_points + 4); \/\/ For phantom points\n-    if (unlikely (!points.resize (points.length + num_points, false))) return false;\n-    contour_point_t *rec_points = points.arrayZ + (points.length - num_points);\n-    hb_memset (rec_points, 0, num_points * sizeof (rec_points[0]));\n-\n-    unsigned fl = flags;\n-\n-    unsigned num_axes = numAxes;\n-    unsigned axis_width = (fl & AXIS_INDICES_ARE_SHORT) ? 2 : 1;\n-    unsigned axes_size = num_axes * axis_width;\n-\n-    const F2DOT14 *q = (const F2DOT14 *) (axes_size +\n-                                          (fl & GID_IS_24BIT ? 3 : 2) +\n-                                          (const HBUINT8 *) &pad);\n-\n-    unsigned count = num_axes;\n-    if (fl & AXES_HAVE_VARIATION)\n-    {\n-      for (unsigned i = 0; i < count; i++)\n-        rec_points++->x = q++->to_int ();\n-    }\n-    else\n-      q += count;\n-\n-    const HBUINT16 *p = (const HBUINT16 *) q;\n-\n-    if (fl & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))\n-    {\n-      int translateX = (fl & HAVE_TRANSLATE_X) ? * (const FWORD *) p++ : 0;\n-      int translateY = (fl & HAVE_TRANSLATE_Y) ? * (const FWORD *) p++ : 0;\n-      rec_points->x = translateX;\n-      rec_points->y = translateY;\n-      rec_points++;\n-    }\n-    if (fl & HAVE_ROTATION)\n-    {\n-      int rotation = (fl & HAVE_ROTATION) ? ((const F4DOT12 *) p++)->to_int () : 0;\n-      rec_points->x = rotation;\n-      rec_points++;\n-    }\n-    if (fl & (HAVE_SCALE_X | HAVE_SCALE_Y))\n-    {\n-      int scaleX = (fl & HAVE_SCALE_X) ? ((const F6DOT10 *) p++)->to_int () : 1 << 10;\n-      int scaleY = (fl & HAVE_SCALE_Y) ? ((const F6DOT10 *) p++)->to_int () : 1 << 10;\n-      if ((fl & UNIFORM_SCALE) && !(fl & HAVE_SCALE_Y))\n-        scaleY = scaleX;\n-      rec_points->x = scaleX;\n-      rec_points->y = scaleY;\n-      rec_points++;\n-    }\n-    if (fl & (HAVE_SKEW_X | HAVE_SKEW_Y))\n-    {\n-      int skewX = (fl & HAVE_SKEW_X) ? ((const F4DOT12 *) p++)->to_int () : 0;\n-      int skewY = (fl & HAVE_SKEW_Y) ? ((const F4DOT12 *) p++)->to_int () : 0;\n-      rec_points->x = skewX;\n-      rec_points->y = skewY;\n-      rec_points++;\n-    }\n-    if (fl & (HAVE_TCENTER_X | HAVE_TCENTER_Y))\n-    {\n-      int tCenterX = (fl & HAVE_TCENTER_X) ? * (const FWORD *) p++ : 0;\n-      int tCenterY = (fl & HAVE_TCENTER_Y) ? * (const FWORD *) p++ : 0;\n-      rec_points->x = tCenterX;\n-      rec_points->y = tCenterY;\n-      rec_points++;\n-    }\n-\n-    return true;\n-  }\n-\n-  void get_transformation_from_points (const contour_point_t *rec_points,\n-                                       float (&matrix)[4], contour_point_t &trans) const\n-  {\n-    unsigned fl = flags;\n-\n-    if (fl & AXES_HAVE_VARIATION)\n-      rec_points += numAxes;\n-\n-    matrix[0] = matrix[3] = 1.f;\n-    matrix[1] = matrix[2] = 0.f;\n-    trans.init (0.f, 0.f);\n-\n-    float translateX = 0.f;\n-    float translateY = 0.f;\n-    float rotation = 0.f;\n-    float scaleX = 1.f;\n-    float scaleY = 1.f;\n-    float skewX = 0.f;\n-    float skewY = 0.f;\n-    float tCenterX = 0.f;\n-    float tCenterY = 0.f;\n-\n-    if (fl & (HAVE_TRANSLATE_X | HAVE_TRANSLATE_Y))\n-    {\n-      translateX = rec_points->x;\n-      translateY = rec_points->y;\n-      rec_points++;\n-    }\n-    if (fl & HAVE_ROTATION)\n-    {\n-      rotation = rec_points->x \/ (1 << 12);\n-      rec_points++;\n-    }\n-    if (fl & (HAVE_SCALE_X | HAVE_SCALE_Y))\n-    {\n-      scaleX = rec_points->x \/ (1 << 10);\n-      scaleY = rec_points->y \/ (1 << 10);\n-      rec_points++;\n-    }\n-    if (fl & (HAVE_SKEW_X | HAVE_SKEW_Y))\n-    {\n-      skewX = rec_points->x \/ (1 << 12);\n-      skewY = rec_points->y \/ (1 << 12);\n-      rec_points++;\n-    }\n-    if (fl & (HAVE_TCENTER_X | HAVE_TCENTER_Y))\n-    {\n-      tCenterX = rec_points->x;\n-      tCenterY = rec_points->y;\n-      rec_points++;\n-    }\n-\n-    translate (matrix, trans, translateX + tCenterX, translateY + tCenterY);\n-    rotate (matrix, trans, rotation);\n-    scale (matrix, trans, scaleX, scaleY);\n-    skew (matrix, trans, -skewX, skewY);\n-    translate (matrix, trans, -tCenterX, -tCenterY);\n-  }\n-\n-  void set_variations (coord_setter_t &setter,\n-                       hb_array_t<contour_point_t> rec_points) const\n-  {\n-    bool have_variations = flags & AXES_HAVE_VARIATION;\n-    unsigned axis_width = (flags & AXIS_INDICES_ARE_SHORT) ? 2 : 1;\n-    unsigned num_axes = numAxes;\n-\n-    const HBUINT8  *p = (const HBUINT8 *)  (((HBUINT8 *) &numAxes) + numAxes.static_size + (flags & GID_IS_24BIT ? 3 : 2));\n-    const HBUINT16 *q = (const HBUINT16 *) (((HBUINT8 *) &numAxes) + numAxes.static_size + (flags & GID_IS_24BIT ? 3 : 2));\n-\n-    const F2DOT14 *a = (const F2DOT14 *) ((HBUINT8 *) (axis_width == 1 ? (p + num_axes) : (HBUINT8 *) (q + num_axes)));\n-\n-    unsigned count = num_axes;\n-    for (unsigned i = 0; i < count; i++)\n-    {\n-      unsigned axis_index = axis_width == 1 ? (unsigned) *p++ : (unsigned) *q++;\n-\n-      signed v = have_variations ? rec_points.arrayZ[i].x : a++->to_int ();\n-\n-      v = hb_clamp (v, -(1<<14), (1<<14));\n-      setter[axis_index] = v;\n-    }\n-  }\n-\n-  protected:\n-  HBUINT16      flags;\n-  HBUINT8       numAxes;\n-  HBUINT16      pad;\n-  public:\n-  DEFINE_SIZE_MIN (5);\n-};\n-\n-using var_composite_iter_t = composite_iter_tmpl<VarCompositeGlyphRecord>;\n-\n-struct VarCompositeGlyph\n-{\n-  const GlyphHeader &header;\n-  hb_bytes_t bytes;\n-  VarCompositeGlyph (const GlyphHeader &header_, hb_bytes_t bytes_) :\n-    header (header_), bytes (bytes_) {}\n-\n-  var_composite_iter_t iter () const\n-  { return var_composite_iter_t (bytes, &StructAfter<VarCompositeGlyphRecord, GlyphHeader> (header)); }\n-\n-  const hb_bytes_t trim_padding () const\n-  {\n-    unsigned length = GlyphHeader::static_size;\n-    for (auto &comp : iter ())\n-      length += comp.get_size ();\n-    return bytes.sub_array (0, length);\n-  }\n-};\n-\n-\n-} \/* namespace glyf_impl *\/\n-} \/* namespace OT *\/\n-\n-\n-#endif \/* OT_GLYF_VARCOMPOSITEGLYPH_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/VarCompositeGlyph.hh","additions":0,"deletions":401,"binary":false,"changes":401,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-#ifndef OT_GLYF_COORD_SETTER_HH\n-#define OT_GLYF_COORD_SETTER_HH\n-\n-\n-#include \"..\/..\/hb.hh\"\n-\n-\n-namespace OT {\n-namespace glyf_impl {\n-\n-\n-struct coord_setter_t\n-{\n-  coord_setter_t (hb_array_t<int> coords) :\n-    coords (coords) {}\n-\n-  int& operator [] (unsigned idx)\n-  {\n-    if (unlikely (idx >= HB_GLYF_VAR_COMPOSITE_MAX_AXES))\n-      return Crap(int);\n-    if (coords.length < idx + 1)\n-      coords.resize (idx + 1);\n-    return coords[idx];\n-  }\n-\n-  hb_array_t<int> get_coords ()\n-  { return coords.as_array (); }\n-\n-  hb_vector_t<int> coords;\n-};\n-\n-\n-} \/* namespace glyf_impl *\/\n-} \/* namespace OT *\/\n-\n-#endif \/* OT_GLYF_COORD_SETTER_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/coord-setter.hh","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -41,1 +41,1 @@\n-    DEBUG_MSG (SUBSET, nullptr, \"loca entry gid %u offset %u padded-size %u\", gid, offset, padded_size);\n+    DEBUG_MSG (SUBSET, nullptr, \"loca entry gid %\" PRIu32 \" offset %u padded-size %u\", gid, offset, padded_size);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/glyf-helpers.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    if (unlikely (!padded_offsets.alloc (c->plan->new_to_old_gid_list.length, true)))\n+    if (unlikely (!padded_offsets.alloc_exact (c->plan->new_to_old_gid_list.length)))\n@@ -175,0 +175,3 @@\n+#ifndef HB_NO_BEYOND_64K\n+    GVAR = nullptr;\n+#endif\n@@ -190,0 +193,3 @@\n+#ifndef HB_NO_BEYOND_64K\n+    GVAR = face->table.GVAR;\n+#endif\n@@ -201,0 +207,7 @@\n+    auto *scratch = cached_scratch.get_relaxed ();\n+    if (scratch)\n+    {\n+      scratch->~hb_glyf_scratch_t ();\n+      hb_free (scratch);\n+    }\n+\n@@ -208,1 +221,3 @@\n-  bool get_points (hb_font_t *font, hb_codepoint_t gid, T consumer) const\n+  bool get_points (hb_font_t *font, hb_codepoint_t gid, T consumer,\n+                   hb_array_t<const int> coords,\n+                   hb_glyf_scratch_t &scratch) const\n@@ -212,5 +227,2 @@\n-    \/* Making this allocfree is not that easy\n-       https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/2095\n-       mostly because of gvar handling in VF fonts,\n-       perhaps a separate path for non-VF fonts can be considered *\/\n-    contour_point_vector_t all_points;\n+    auto &all_points = scratch.all_points;\n+    all_points.resize (0);\n@@ -219,1 +231,1 @@\n-    if (unlikely (!glyph_for_gid (gid).get_points (font, *this, all_points, nullptr, nullptr, nullptr, true, true, phantom_only)))\n+    if (unlikely (!glyph_for_gid (gid).get_points (font, *this, all_points, scratch, nullptr, nullptr, nullptr, true, true, phantom_only, coords)))\n@@ -228,2 +240,55 @@\n-      for (auto &point : all_points.as_array ().sub_array (0, count))\n-        consumer.consume_point (point);\n+      auto *points = all_points.arrayZ;\n+\n+      if (false)\n+      {\n+        \/* Our path-builder was designed to work with this simple loop.\n+         * But FreeType and CoreText do it differently, so we match those\n+         * with the other, more complicated, code branch below. *\/\n+        for (unsigned i = 0; i < count; i++)\n+        {\n+          consumer.consume_point (points[i]);\n+          if (points[i].is_end_point)\n+            consumer.contour_end ();\n+        }\n+      }\n+      else\n+      {\n+        for (unsigned i = 0; i < count; i++)\n+        {\n+          \/\/ Start of a contour.\n+          if (points[i].flag & glyf_impl::SimpleGlyph::FLAG_ON_CURVE)\n+          {\n+            \/\/ First point is on-curve. Draw the contour.\n+            for (; i < count; i++)\n+            {\n+              consumer.consume_point (points[i]);\n+              if (points[i].is_end_point)\n+              {\n+                consumer.contour_end ();\n+                break;\n+              }\n+            }\n+          }\n+          else\n+          {\n+            unsigned start = i;\n+\n+            \/\/ Find end of the contour.\n+            for (; i < count; i++)\n+              if (points[i].is_end_point)\n+                break;\n+\n+            unsigned end = i;\n+\n+            \/\/ Enough to start from the end. Our path-builder takes care of the rest.\n+            if (likely (end < count)) \/\/ Can only fail in case of alloc failure *maybe*.\n+              consumer.consume_point (points[end]);\n+\n+            for (i = start; i < end; i++)\n+              consumer.consume_point (points[i]);\n+\n+            consumer.contour_end ();\n+          }\n+        }\n+      }\n+\n@@ -302,0 +367,1 @@\n+    void contour_end () {}\n@@ -317,1 +383,6 @@\n-      success = get_points (font, gid, points_aggregator_t (font, nullptr, phantoms, false));\n+    {\n+      hb_glyf_scratch_t scratch;\n+      success = get_points (font, gid, points_aggregator_t (font, nullptr, phantoms, false),\n+                            hb_array (font->coords, font->num_coords),\n+                            scratch);\n+    }\n@@ -337,1 +408,1 @@\n-\n+    hb_glyf_scratch_t scratch;\n@@ -339,1 +410,3 @@\n-    if (unlikely (!get_points (font, gid, points_aggregator_t (font, &extents, phantoms, false))))\n+    if (unlikely (!get_points (font, gid, points_aggregator_t (font, &extents, phantoms, false),\n+                               hb_array (font->coords, font->num_coords),\n+                               scratch)))\n@@ -365,1 +438,6 @@\n-      return get_points (font, gid, points_aggregator_t (font, extents, nullptr, true));\n+    {\n+      hb_glyf_scratch_t scratch;\n+      return get_points (font, gid, points_aggregator_t (font, extents, nullptr, true),\n+                         hb_array (font->coords, font->num_coords),\n+                         scratch);\n+    }\n@@ -370,9 +448,0 @@\n-  bool paint_glyph (hb_font_t *font, hb_codepoint_t gid, hb_paint_funcs_t *funcs, void *data, hb_color_t foreground) const\n-  {\n-    funcs->push_clip_glyph (data, gid, font);\n-    funcs->color (data, true, foreground);\n-    funcs->pop_clip (data);\n-\n-    return true;\n-  }\n-\n@@ -409,1 +478,40 @@\n-  { return get_points (font, gid, glyf_impl::path_builder_t (font, draw_session)); }\n+  {\n+    if (!has_data ()) return false;\n+\n+    hb_glyf_scratch_t *scratch;\n+\n+    \/\/ Borrow the cached strach buffer.\n+    {\n+      scratch = cached_scratch.get_acquire ();\n+      if (!scratch || unlikely (!cached_scratch.cmpexch (scratch, nullptr)))\n+      {\n+        scratch = (hb_glyf_scratch_t *) hb_calloc (1, sizeof (hb_glyf_scratch_t));\n+        if (unlikely (!scratch))\n+          return true;\n+      }\n+    }\n+\n+    bool ret = get_points (font, gid, glyf_impl::path_builder_t (font, draw_session),\n+                           hb_array (font->coords, font->num_coords),\n+                           *scratch);\n+\n+    \/\/ Put it back.\n+    if (!cached_scratch.cmpexch (nullptr, scratch))\n+    {\n+      scratch->~hb_glyf_scratch_t ();\n+      hb_free (scratch);\n+    }\n+\n+    return ret;\n+  }\n+\n+  bool\n+  get_path_at (hb_font_t *font, hb_codepoint_t gid, hb_draw_session_t &draw_session,\n+               hb_array_t<const int> coords,\n+               hb_glyf_scratch_t &scratch) const\n+  {\n+    if (!has_data ()) return false;\n+    return get_points (font, gid, glyf_impl::path_builder_t (font, draw_session),\n+                       coords,\n+                       scratch);\n+  }\n@@ -413,0 +521,3 @@\n+#ifndef HB_NO_BEYOND_64K\n+  const GVAR_accelerator_t *GVAR;\n+#endif\n@@ -424,0 +535,1 @@\n+  hb_atomic_ptr_t<hb_glyf_scratch_t> cached_scratch;\n@@ -433,1 +545,1 @@\n-  if (!glyphs.alloc (plan->new_to_old_gid_list.length, true)) return false;\n+  if (!glyphs.alloc_exact (plan->new_to_old_gid_list.length)) return false;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/glyf.hh","additions":137,"deletions":25,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    bool is_cubic = false;\n+    constexpr bool is_cubic = false;\n@@ -127,17 +127,1 @@\n-    if (unlikely (point.is_end_point))\n-    {\n-      if (first_offcurve && last_offcurve)\n-      {\n-        optional_point_t mid = last_offcurve.mid (first_offcurve2 ?\n-                                                  first_offcurve2 :\n-                                                  first_offcurve);\n-        if (last_offcurve2)\n-          draw_session->cubic_to (last_offcurve2.x, last_offcurve2.y,\n-                                  last_offcurve.x, last_offcurve.y,\n-                                  mid.x, mid.y);\n-        else\n-          draw_session->quadratic_to (last_offcurve.x, last_offcurve.y,\n-                                     mid.x, mid.y);\n-        last_offcurve = optional_point_t ();\n-      }\n-      \/* now check the rest *\/\n+  }\n@@ -145,28 +129,17 @@\n-      if (first_offcurve && first_oncurve)\n-      {\n-        if (first_offcurve2)\n-          draw_session->cubic_to (first_offcurve2.x, first_offcurve2.y,\n-                                  first_offcurve.x, first_offcurve.y,\n-                                  first_oncurve.x, first_oncurve.y);\n-        else\n-          draw_session->quadratic_to (first_offcurve.x, first_offcurve.y,\n-                                     first_oncurve.x, first_oncurve.y);\n-      }\n-      else if (last_offcurve && first_oncurve)\n-      {\n-        if (last_offcurve2)\n-          draw_session->cubic_to (last_offcurve2.x, last_offcurve2.y,\n-                                  last_offcurve.x, last_offcurve.y,\n-                                  first_oncurve.x, first_oncurve.y);\n-        else\n-          draw_session->quadratic_to (last_offcurve.x, last_offcurve.y,\n-                                     first_oncurve.x, first_oncurve.y);\n-      }\n-      else if (first_oncurve)\n-        draw_session->line_to (first_oncurve.x, first_oncurve.y);\n-      else if (first_offcurve)\n-      {\n-        float x = first_offcurve.x, y = first_offcurve.y;\n-        draw_session->move_to (x, y);\n-        draw_session->quadratic_to (x, y, x, y);\n-      }\n+  void contour_end ()\n+  {\n+    if (first_offcurve && last_offcurve)\n+    {\n+      optional_point_t mid = last_offcurve.mid (first_offcurve2 ?\n+                                                first_offcurve2 :\n+                                                first_offcurve);\n+      if (last_offcurve2)\n+        draw_session->cubic_to (last_offcurve2.x, last_offcurve2.y,\n+                                last_offcurve.x, last_offcurve.y,\n+                                mid.x, mid.y);\n+      else\n+        draw_session->quadratic_to (last_offcurve.x, last_offcurve.y,\n+                                   mid.x, mid.y);\n+      last_offcurve = optional_point_t ();\n+    }\n+    \/* now check the rest *\/\n@@ -174,3 +147,9 @@\n-      \/* Getting ready for the next contour *\/\n-      first_oncurve = first_offcurve = last_offcurve = last_offcurve2 = optional_point_t ();\n-      draw_session->close_path ();\n+    if (first_offcurve && first_oncurve)\n+    {\n+      if (first_offcurve2)\n+        draw_session->cubic_to (first_offcurve2.x, first_offcurve2.y,\n+                                first_offcurve.x, first_offcurve.y,\n+                                first_oncurve.x, first_oncurve.y);\n+      else\n+        draw_session->quadratic_to (first_offcurve.x, first_offcurve.y,\n+                                   first_oncurve.x, first_oncurve.y);\n@@ -178,0 +157,22 @@\n+    else if (last_offcurve && first_oncurve)\n+    {\n+      if (last_offcurve2)\n+        draw_session->cubic_to (last_offcurve2.x, last_offcurve2.y,\n+                                last_offcurve.x, last_offcurve.y,\n+                                first_oncurve.x, first_oncurve.y);\n+      else\n+        draw_session->quadratic_to (last_offcurve.x, last_offcurve.y,\n+                                   first_oncurve.x, first_oncurve.y);\n+    }\n+    else if (first_oncurve)\n+      draw_session->line_to (first_oncurve.x, first_oncurve.y);\n+    else if (first_offcurve)\n+    {\n+      float x = first_offcurve.x, y = first_offcurve.y;\n+      draw_session->move_to (x, y);\n+      draw_session->quadratic_to (x, y, x, y);\n+    }\n+\n+    \/* Getting ready for the next contour *\/\n+    first_oncurve = first_offcurve = last_offcurve = last_offcurve2 = optional_point_t ();\n+    draw_session->close_path ();\n@@ -179,0 +180,1 @@\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/glyf\/path-builder.hh","additions":51,"deletions":49,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -245,1 +245,3 @@\n-    return_trace (c->check_struct (this) && offset.sanitize (c, base, length));\n+    return_trace (c->check_struct (this) &&\n+                  hb_barrier () &&\n+                  offset.sanitize (c, base, length));\n@@ -468,0 +470,1 @@\n+                  hb_barrier () &&\n@@ -485,1 +488,1 @@\n-      this->names.alloc (all_names.length, true);\n+      this->names.alloc_exact (all_names.length);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/OT\/name\/name.hh","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-- Update make parameters in Awt2DLibraries.gmk\n+- Update make parameters in make\/modules\/java.desktop\/lib\/ClientLibraries.gmk\n@@ -58,1 +58,1 @@\n-  we need in the Harfbuzz section of Awt2DLibraries.gmk.\n+  we need in the Harfbuzz section of ClientLibraries.gmk.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/UPDATING.txt","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    hb_barrier ();\n@@ -53,0 +54,1 @@\n+    hb_barrier ();\n@@ -117,0 +119,1 @@\n+    hb_barrier ();\n@@ -134,0 +137,7 @@\n+  \/\/ TODO(garretrieger): update to support beyond64k coverage\/classdef tables.\n+  constexpr static unsigned class_def_format1_base_size = 6;\n+  constexpr static unsigned class_def_format2_base_size = 4;\n+  constexpr static unsigned coverage_base_size = 4;\n+  constexpr static unsigned bytes_per_range = 6;\n+  constexpr static unsigned bytes_per_glyph = 2;\n+\n@@ -136,1 +146,1 @@\n-      : gids_consecutive (true), num_ranges_per_class (), glyphs_per_class ()\n+      : num_ranges_per_class (), glyphs_per_class ()\n@@ -138,1 +148,1 @@\n-    unsigned last_gid = (unsigned) -1;\n+    reset();\n@@ -144,4 +154,0 @@\n-      if (last_gid != (unsigned) -1 && gid != last_gid + 1)\n-        gids_consecutive = false;\n-      last_gid = gid;\n-\n@@ -177,3 +183,9 @@\n-  \/\/ Incremental increase in the Coverage and ClassDef table size\n-  \/\/ (worst case) if all glyphs associated with 'klass' were added.\n-  unsigned incremental_coverage_size (unsigned klass) const\n+  void reset() {\n+    class_def_1_size = class_def_format1_base_size;\n+    class_def_2_size = class_def_format2_base_size;\n+    included_glyphs.clear();\n+    included_classes.clear();\n+  }\n+\n+  \/\/ Compute the size of coverage for all glyphs added via 'add_class_def_size'.\n+  unsigned coverage_size () const\n@@ -181,2 +193,3 @@\n-    \/\/ Coverage takes 2 bytes per glyph worst case,\n-    return 2 * glyphs_per_class.get (klass).get_population ();\n+    unsigned format1_size = coverage_base_size + bytes_per_glyph * included_glyphs.get_population();\n+    unsigned format2_size = coverage_base_size + bytes_per_range * num_glyph_ranges();\n+    return hb_min(format1_size, format2_size);\n@@ -185,3 +198,2 @@\n-  \/\/ Incremental increase in the Coverage and ClassDef table size\n-  \/\/ (worst case) if all glyphs associated with 'klass' were added.\n-  unsigned incremental_class_def_size (unsigned klass) const\n+  \/\/ Compute the new size of the ClassDef table if all glyphs associated with 'klass' were added.\n+  unsigned add_class_def_size (unsigned klass)\n@@ -189,7 +201,16 @@\n-    \/\/ ClassDef takes 6 bytes per range\n-    unsigned class_def_2_size = 6 * num_ranges_per_class.get (klass);\n-    if (gids_consecutive)\n-    {\n-      \/\/ ClassDef1 takes 2 bytes per glyph, but only can be used\n-      \/\/ when gids are consecutive.\n-      return hb_min (2 * glyphs_per_class.get (klass).get_population (), class_def_2_size);\n+    if (!included_classes.has(klass)) {\n+      hb_set_t* glyphs = nullptr;\n+      if (glyphs_per_class.has(klass, &glyphs)) {\n+        included_glyphs.union_(*glyphs);\n+      }\n+\n+      class_def_1_size = class_def_format1_base_size;\n+      if (!included_glyphs.is_empty()) {\n+        unsigned min_glyph = included_glyphs.get_min();\n+        unsigned max_glyph = included_glyphs.get_max();\n+        class_def_1_size += bytes_per_glyph * (max_glyph - min_glyph + 1);\n+      }\n+\n+      class_def_2_size += bytes_per_range * num_ranges_per_class.get (klass);\n+\n+      included_classes.add(klass);\n@@ -198,1 +219,12 @@\n-    return class_def_2_size;\n+    return hb_min (class_def_1_size, class_def_2_size);\n+  }\n+\n+  unsigned num_glyph_ranges() const {\n+    hb_codepoint_t start = HB_SET_VALUE_INVALID;\n+    hb_codepoint_t end = HB_SET_VALUE_INVALID;\n+\n+    unsigned count = 0;\n+    while (included_glyphs.next_range (&start, &end)) {\n+        count++;\n+    }\n+    return count;\n@@ -214,1 +246,0 @@\n-  bool gids_consecutive;\n@@ -217,0 +248,4 @@\n+  hb_set_t included_classes;\n+  hb_set_t included_glyphs;\n+  unsigned class_def_1_size;\n+  unsigned class_def_2_size;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/classdef-graph.hh","additions":58,"deletions":23,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    hb_barrier ();\n@@ -53,0 +54,1 @@\n+    hb_barrier ();\n@@ -141,0 +143,1 @@\n+    hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/coverage-graph.hh","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -198,0 +198,9 @@\n+    unsigned incoming_edges_from_parent (unsigned parent_index) const {\n+      if (single_parent != (unsigned) -1) {\n+        return single_parent == parent_index ? 1 : 0;\n+      }\n+\n+      unsigned* count;\n+      return  parents.has(parent_index, &count) ? *count : 0;\n+    }\n+\n@@ -337,0 +346,10 @@\n+    bool give_max_priority ()\n+    {\n+      bool result = false;\n+      while (!has_max_priority()) {\n+        result = true;\n+        priority++;\n+      }\n+      return result;\n+    }\n+\n@@ -352,1 +371,1 @@\n-          hb_min (hb_max(distance + distance_modifier (), 0), 0x7FFFFFFFFFF);\n+          hb_clamp (distance + distance_modifier (), (int64_t) 0, 0x7FFFFFFFFFF);\n@@ -570,0 +589,1 @@\n+    queue.alloc (vertices_.length);\n@@ -1025,0 +1045,5 @@\n+   *\n+   * Returns the index of the newly created duplicate.\n+   *\n+   * If the child_idx only has incoming edges from parent_idx, this\n+   * will do nothing and return the original child_idx.\n@@ -1038,0 +1063,5 @@\n+   *\n+   * Returns the index of the newly created duplicate.\n+   *\n+   * If the child_idx only has incoming edges from parent_idx,\n+   * duplication isn't possible and this will return -1.\n@@ -1043,5 +1073,2 @@\n-    unsigned links_to_child = 0;\n-    for (const auto& l : vertices_[parent_idx].obj.all_links ())\n-    {\n-      if (l.objidx == child_idx) links_to_child++;\n-    }\n+    const auto& child = vertices_[child_idx];\n+    unsigned links_to_child = child.incoming_edges_from_parent(parent_idx);\n@@ -1049,1 +1076,1 @@\n-    if (vertices_[child_idx].incoming_edges () <= links_to_child)\n+    if (child.incoming_edges () <= links_to_child)\n@@ -1062,1 +1089,1 @@\n-    if (clone_idx == (unsigned) -1) return false;\n+    if (clone_idx == (unsigned) -1) return -1;\n@@ -1078,0 +1105,56 @@\n+  \/*\n+   * Creates a copy of child and re-assigns the links from\n+   * parents to the clone. The copy is a shallow copy, objects\n+   * linked from child are not duplicated.\n+   *\n+   * Returns the index of the newly created duplicate.\n+   *\n+   * If the child_idx only has incoming edges from parents,\n+   * duplication isn't possible or duplication fails and this will\n+   * return -1.\n+   *\/\n+  unsigned duplicate (const hb_set_t* parents, unsigned child_idx)\n+  {\n+    if (parents->is_empty()) {\n+      return -1;\n+    }\n+\n+    update_parents ();\n+\n+    const auto& child = vertices_[child_idx];\n+    unsigned links_to_child = 0;\n+    unsigned last_parent = parents->get_max();\n+    unsigned first_parent = parents->get_min();\n+    for (unsigned parent_idx : *parents) {\n+      links_to_child += child.incoming_edges_from_parent(parent_idx);\n+    }\n+\n+    if (child.incoming_edges () <= links_to_child)\n+    {\n+      \/\/ Can't duplicate this node, doing so would orphan the original one as all remaining links\n+      \/\/ to child are from parent.\n+      DEBUG_MSG (SUBSET_REPACK, nullptr, \"  Not duplicating %u, ..., %u => %u\", first_parent, last_parent, child_idx);\n+      return -1;\n+    }\n+\n+    DEBUG_MSG (SUBSET_REPACK, nullptr, \"  Duplicating %u, ..., %u => %u\", first_parent, last_parent, child_idx);\n+\n+    unsigned clone_idx = duplicate (child_idx);\n+    if (clone_idx == (unsigned) -1) return false;\n+\n+    for (unsigned parent_idx : *parents) {\n+      \/\/ duplicate shifts the root node idx, so if parent_idx was root update it.\n+      if (parent_idx == clone_idx) parent_idx++;\n+      auto& parent = vertices_[parent_idx];\n+      for (auto& l : parent.obj.all_links_writer ())\n+      {\n+        if (l.objidx != child_idx)\n+          continue;\n+\n+        reassign_link (l, parent_idx, clone_idx);\n+      }\n+    }\n+\n+    return clone_idx;\n+  }\n+\n@@ -1373,0 +1456,1 @@\n+    queue.alloc (count);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/graph.hh","additions":92,"deletions":8,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+    hb_barrier ();\n@@ -354,0 +355,1 @@\n+    hb_barrier ();\n@@ -367,0 +369,1 @@\n+    hb_barrier ();\n@@ -386,0 +389,1 @@\n+    hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/gsubgpos-graph.hh","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    hb_barrier ();\n@@ -131,0 +132,1 @@\n+    hb_barrier ();\n@@ -498,0 +500,1 @@\n+    hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/markbasepos-graph.hh","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+    hb_barrier ();\n@@ -201,0 +202,1 @@\n+    hb_barrier ();\n@@ -248,2 +250,2 @@\n-      coverage_size += estimator.incremental_coverage_size (i);\n-      class_def_1_size += estimator.incremental_class_def_size (i);\n+      class_def_1_size = estimator.add_class_def_size (i);\n+      coverage_size = estimator.coverage_size ();\n@@ -281,2 +283,4 @@\n-        coverage_size = 4 + estimator.incremental_coverage_size (i);\n-        class_def_1_size = 4 + estimator.incremental_class_def_size (i);\n+\n+        estimator.reset();\n+        class_def_1_size = estimator.add_class_def_size(i);\n+        coverage_size = estimator.coverage_size();\n@@ -628,0 +632,1 @@\n+    hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/graph\/pairpos-graph.hh","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+                          hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-ankr-table.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+    hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-bsln-table.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+#include \"hb-cache.hh\"\n+#include \"hb-bit-set.hh\"\n+#include \"hb-bit-page.hh\"\n+\n@@ -42,1 +46,0 @@\n-\n@@ -45,0 +48,3 @@\n+using hb_aat_class_cache_t = hb_cache_t<15, 8, 7>;\n+static_assert (sizeof (hb_aat_class_cache_t) == 256, \"\");\n+\n@@ -49,2 +55,3 @@\n-  template <typename T>\n-  return_t dispatch (const T &obj) { return obj.apply (this); }\n+  template <typename T, typename ...Ts>\n+  return_t dispatch (const T &obj, Ts&&... ds)\n+  { return obj.apply (this, std::forward<Ts> (ds)...); }\n@@ -62,0 +69,6 @@\n+  bool using_buffer_glyph_set = false;\n+  hb_bit_set_t buffer_glyph_set;\n+  const hb_bit_set_t *left_set = nullptr;\n+  const hb_bit_set_t *right_set = nullptr;\n+  const hb_bit_set_t *machine_glyph_set = nullptr;\n+  hb_aat_class_cache_t *machine_class_cache = nullptr;\n@@ -77,0 +90,19 @@\n+\n+  void setup_buffer_glyph_set ()\n+  {\n+    using_buffer_glyph_set = buffer->len >= 4;\n+\n+    if (using_buffer_glyph_set)\n+      buffer->collect_codepoints (buffer_glyph_set);\n+  }\n+  bool buffer_intersects_machine () const\n+  {\n+    if (using_buffer_glyph_set)\n+      return buffer_glyph_set.intersects (*machine_glyph_set);\n+\n+    \/\/ Faster for shorter buffers.\n+    for (unsigned i = 0; i < buffer->len; i++)\n+      if (machine_glyph_set->has (buffer->info[i].codepoint))\n+        return true;\n+    return false;\n+  }\n@@ -84,0 +116,2 @@\n+enum { DELETED_GLYPH = 0xFFFF };\n+\n@@ -98,0 +132,13 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs, unsigned num_glyphs) const\n+  {\n+    glyphs.add_range (0, num_glyphs - 1);\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, unsigned num_glyphs, const filter_t &filter) const\n+  {\n+    for (unsigned i = 0; i < num_glyphs; i++)\n+      if (filter (arrayZ[i]))\n+        glyphs.add (i);\n+  }\n+\n@@ -126,0 +173,13 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs) const\n+  {\n+    if (first == DELETED_GLYPH) return;\n+    glyphs.add_range (first, last);\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, const filter_t &filter) const\n+  {\n+    if (!filter (value)) return;\n+    glyphs.add_range (first, last);\n+  }\n+\n@@ -156,0 +216,15 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs) const\n+  {\n+    unsigned count = segments.get_length ();\n+    for (unsigned int i = 0; i < count; i++)\n+      segments[i].collect_glyphs (glyphs);\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, const filter_t &filter) const\n+  {\n+    unsigned count = segments.get_length ();\n+    for (unsigned int i = 0; i < count; i++)\n+      segments[i].collect_glyphs_filtered (glyphs, filter);\n+  }\n+\n@@ -187,0 +262,15 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs) const\n+  {\n+    if (first == DELETED_GLYPH) return;\n+    glyphs.add_range (first, last);\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, const void *base, const filter_t &filter) const\n+  {\n+    const auto &values = base+valuesZ;\n+    for (hb_codepoint_t i = first; i <= last; i++)\n+      if (filter (values[i - first]))\n+        glyphs.add (i);\n+  }\n+\n@@ -194,0 +284,1 @@\n+                  hb_barrier () &&\n@@ -202,0 +293,1 @@\n+                  hb_barrier () &&\n@@ -227,0 +319,15 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs) const\n+  {\n+    unsigned count = segments.get_length ();\n+    for (unsigned i = 0; i < count; i++)\n+      segments[i].collect_glyphs (glyphs);\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, const filter_t &filter) const\n+  {\n+    unsigned count = segments.get_length ();\n+    for (unsigned i = 0; i < count; i++)\n+      segments[i].collect_glyphs_filtered (glyphs, this, filter);\n+  }\n+\n@@ -255,0 +362,13 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs) const\n+  {\n+    if (glyph == DELETED_GLYPH) return;\n+    glyphs.add (glyph);\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, const filter_t &filter) const\n+  {\n+    if (!filter (value)) return;\n+    glyphs.add (glyph);\n+  }\n+\n@@ -284,0 +404,15 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs) const\n+  {\n+    unsigned count = entries.get_length ();\n+    for (unsigned i = 0; i < count; i++)\n+      entries[i].collect_glyphs (glyphs);\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, const filter_t &filter) const\n+  {\n+    unsigned count = entries.get_length ();\n+    for (unsigned i = 0; i < count; i++)\n+      entries[i].collect_glyphs_filtered (glyphs, filter);\n+  }\n+\n@@ -315,0 +450,18 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs) const\n+  {\n+    if (unlikely (!glyphCount)) return;\n+    if (firstGlyph == DELETED_GLYPH) return;\n+    glyphs.add_range (firstGlyph, firstGlyph + glyphCount - 1);\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, const filter_t &filter) const\n+  {\n+    if (unlikely (!glyphCount)) return;\n+    if (firstGlyph == DELETED_GLYPH) return;\n+    const T *p = valueArrayZ.arrayZ;\n+    for (unsigned i = 0; i < glyphCount; i++)\n+      if (filter (p[i]))\n+        glyphs.add (firstGlyph + i);\n+  }\n+\n@@ -359,0 +512,8 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs) const\n+  {\n+    if (unlikely (!glyphCount)) return;\n+    if (firstGlyph == DELETED_GLYPH) return;\n+    glyphs.add_range (firstGlyph, firstGlyph + glyphCount - 1);\n+  }\n+\n@@ -363,0 +524,1 @@\n+                  hb_barrier () &&\n@@ -386,5 +548,5 @@\n-    case 0: return u.format0.get_value (glyph_id, num_glyphs);\n-    case 2: return u.format2.get_value (glyph_id);\n-    case 4: return u.format4.get_value (glyph_id);\n-    case 6: return u.format6.get_value (glyph_id);\n-    case 8: return u.format8.get_value (glyph_id);\n+    case 0: hb_barrier (); return u.format0.get_value (glyph_id, num_glyphs);\n+    case 2: hb_barrier (); return u.format2.get_value (glyph_id);\n+    case 4: hb_barrier (); return u.format4.get_value (glyph_id);\n+    case 6: hb_barrier (); return u.format6.get_value (glyph_id);\n+    case 8: hb_barrier (); return u.format8.get_value (glyph_id);\n@@ -399,1 +561,1 @@\n-      case 10: return u.format10.get_value_or_null (glyph_id);\n+      case 10: hb_barrier (); return u.format10.get_value_or_null (glyph_id);\n@@ -406,0 +568,26 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs, unsigned int num_glyphs) const\n+  {\n+    switch (u.format) {\n+    case 0: hb_barrier (); u.format0.collect_glyphs (glyphs, num_glyphs); return;\n+    case 2: hb_barrier (); u.format2.collect_glyphs (glyphs); return;\n+    case 4: hb_barrier (); u.format4.collect_glyphs (glyphs); return;\n+    case 6: hb_barrier (); u.format6.collect_glyphs (glyphs); return;\n+    case 8: hb_barrier (); u.format8.collect_glyphs (glyphs); return;\n+    case 10: hb_barrier (); u.format10.collect_glyphs (glyphs); return;\n+    default:return;\n+    }\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, unsigned num_glyphs, const filter_t &filter) const\n+  {\n+    switch (u.format) {\n+    case 0: hb_barrier (); u.format0.collect_glyphs_filtered (glyphs, num_glyphs, filter); return;\n+    case 2: hb_barrier (); u.format2.collect_glyphs_filtered (glyphs, filter); return;\n+    case 4: hb_barrier (); u.format4.collect_glyphs_filtered (glyphs, filter); return;\n+    case 6: hb_barrier (); u.format6.collect_glyphs_filtered (glyphs, filter); return;\n+    case 8: hb_barrier (); u.format8.collect_glyphs_filtered (glyphs, filter); return;\n+    default:return;\n+    }\n+  }\n+\n@@ -418,0 +606,1 @@\n+    hb_barrier ();\n@@ -419,6 +608,6 @@\n-    case 0: return_trace (u.format0.sanitize (c));\n-    case 2: return_trace (u.format2.sanitize (c));\n-    case 4: return_trace (u.format4.sanitize (c));\n-    case 6: return_trace (u.format6.sanitize (c));\n-    case 8: return_trace (u.format8.sanitize (c));\n-    case 10: return_trace (u.format10.sanitize (c));\n+    case 0: hb_barrier (); return_trace (u.format0.sanitize (c));\n+    case 2: hb_barrier (); return_trace (u.format2.sanitize (c));\n+    case 4: hb_barrier (); return_trace (u.format4.sanitize (c));\n+    case 6: hb_barrier (); return_trace (u.format6.sanitize (c));\n+    case 8: hb_barrier (); return_trace (u.format8.sanitize (c));\n+    case 10: hb_barrier (); return_trace (u.format10.sanitize (c));\n@@ -432,0 +621,1 @@\n+    hb_barrier ();\n@@ -433,5 +623,5 @@\n-    case 0: return_trace (u.format0.sanitize (c, base));\n-    case 2: return_trace (u.format2.sanitize (c, base));\n-    case 4: return_trace (u.format4.sanitize (c, base));\n-    case 6: return_trace (u.format6.sanitize (c, base));\n-    case 8: return_trace (u.format8.sanitize (c, base));\n+    case 0: hb_barrier (); return_trace (u.format0.sanitize (c, base));\n+    case 2: hb_barrier (); return_trace (u.format2.sanitize (c, base));\n+    case 4: hb_barrier (); return_trace (u.format4.sanitize (c, base));\n+    case 6: hb_barrier (); return_trace (u.format6.sanitize (c, base));\n+    case 8: hb_barrier (); return_trace (u.format8.sanitize (c, base));\n@@ -458,2 +648,0 @@\n-enum { DELETED_GLYPH = 0xFFFF };\n-\n@@ -467,1 +655,1 @@\n-  \/\/ This does seem like it's ever called.\n+  \/\/ This doesn't seem like it's ever called.\n@@ -510,0 +698,8 @@\n+enum Class\n+{\n+  CLASS_END_OF_TEXT = 0,\n+  CLASS_OUT_OF_BOUNDS = 1,\n+  CLASS_DELETED_GLYPH = 2,\n+  CLASS_END_OF_LINE = 3,\n+};\n+\n@@ -522,1 +718,3 @@\n-  enum Class\n+\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs, unsigned num_glyphs) const\n@@ -524,5 +722,29 @@\n-    CLASS_END_OF_TEXT = 0,\n-    CLASS_OUT_OF_BOUNDS = 1,\n-    CLASS_DELETED_GLYPH = 2,\n-    CLASS_END_OF_LINE = 3,\n-  };\n+    (this+classTable).collect_glyphs (glyphs, num_glyphs);\n+  }\n+  template <typename set_t, typename table_t>\n+  void collect_initial_glyphs (set_t &glyphs, unsigned num_glyphs, const table_t &table) const\n+  {\n+    unsigned num_classes = nClasses;\n+\n+    if (unlikely (num_classes > hb_bit_page_t::BITS))\n+    {\n+      (this+classTable).collect_glyphs (glyphs, num_glyphs);\n+      return;\n+    }\n+\n+    \/\/ Collect all classes going out from the start state.\n+    hb_bit_page_t filter;\n+\n+    for (unsigned i = 0; i < num_classes; i++)\n+    {\n+      const auto &entry = get_entry (STATE_START_OF_TEXT, i);\n+      if (new_state (entry.newState) == STATE_START_OF_TEXT &&\n+          !table.is_action_initiable (entry) && !table.is_actionable (entry))\n+        continue;\n+\n+      filter.add (i);\n+    }\n+\n+    \/\/ And glyphs in those classes.\n+    (this+classTable).collect_glyphs_filtered (glyphs, num_glyphs, filter);\n+  }\n@@ -533,1 +755,3 @@\n-  unsigned int get_class (hb_codepoint_t glyph_id, unsigned int num_glyphs) const\n+  unsigned int get_class (hb_codepoint_t glyph_id,\n+                          unsigned int num_glyphs,\n+                          hb_aat_class_cache_t *cache = nullptr) const\n@@ -535,0 +759,2 @@\n+    unsigned klass;\n+    if (cache && cache->get (glyph_id, &klass)) return klass;\n@@ -536,1 +762,3 @@\n-    return (this+classTable).get_class (glyph_id, num_glyphs, 1);\n+    klass = (this+classTable).get_class (glyph_id, num_glyphs, CLASS_OUT_OF_BOUNDS);\n+    if (cache) cache->set (glyph_id, klass);\n+    return klass;\n@@ -544,2 +772,3 @@\n-    if (unlikely (klass >= nClasses))\n-      klass = StateTable::CLASS_OUT_OF_BOUNDS;\n+    unsigned n_classes = nClasses;\n+    if (unlikely (klass >= n_classes))\n+      klass = CLASS_OUT_OF_BOUNDS;\n@@ -550,1 +779,1 @@\n-    unsigned int entry = states[state * nClasses + klass];\n+    unsigned int entry = states[state * n_classes + klass];\n@@ -561,0 +790,1 @@\n+                    hb_barrier () &&\n@@ -687,0 +917,16 @@\n+\n+  template <typename set_t>\n+  void collect_glyphs (set_t &glyphs, unsigned num_glyphs) const\n+  {\n+    for (unsigned i = 0; i < classArray.len; i++)\n+      if (classArray.arrayZ[i] != CLASS_OUT_OF_BOUNDS)\n+        glyphs.add (firstGlyph + i);\n+  }\n+  template <typename set_t, typename filter_t>\n+  void collect_glyphs_filtered (set_t &glyphs, unsigned num_glyphs, const filter_t &filter) const\n+  {\n+    for (unsigned i = 0; i < classArray.len; i++)\n+      if (filter (classArray.arrayZ[i]))\n+        glyphs.add (firstGlyph + i);\n+  }\n+\n@@ -700,0 +946,32 @@\n+struct SubtableGlyphCoverage\n+{\n+  bool sanitize (hb_sanitize_context_t *c, unsigned subtable_count) const\n+  {\n+    TRACE_SANITIZE (this);\n+\n+    if (unlikely (!c->check_array (&subtableOffsets, subtable_count)))\n+      return_trace (false);\n+\n+    unsigned bytes = (c->get_num_glyphs () + CHAR_BIT - 1) \/ CHAR_BIT;\n+    for (unsigned i = 0; i < subtable_count; i++)\n+    {\n+      uint32_t offset = (uint32_t) subtableOffsets[i];\n+      if (offset == 0 || offset == 0xFFFFFFFF)\n+        continue;\n+      if (unlikely (!subtableOffsets[i].sanitize (c, this, bytes)))\n+        return_trace (false);\n+    }\n+\n+    return_trace (true);\n+  }\n+  protected:\n+  UnsizedArrayOf<NNOffset32To<UnsizedArrayOf<HBUINT8>>> subtableOffsets;\n+                                            \/* Array of offsets from the beginning of the\n+                                             * subtable glyph coverage table to the glyph\n+                                             * coverage bitfield for a given subtable; there\n+                                             * is one offset for each subtable in the chain *\/\n+  \/* UnsizedArrayOf<HBUINT8> coverageBitfields; *\/\/* The individual coverage bitfields. *\/\n+  public:\n+  DEFINE_SIZE_ARRAY (0, subtableOffsets);\n+};\n+\n@@ -769,1 +1047,1 @@\n-template <typename Types, typename EntryData>\n+template <typename Types, typename EntryData, typename Flags>\n@@ -776,1 +1054,0 @@\n-                    hb_buffer_t *buffer_,\n@@ -779,1 +1056,0 @@\n-              buffer (buffer_),\n@@ -785,0 +1061,2 @@\n+    hb_buffer_t *buffer = ac->buffer;\n+\n@@ -819,3 +1097,3 @@\n-      unsigned int klass = buffer->idx < buffer->len ?\n-                           machine.get_class (buffer->cur().codepoint, num_glyphs) :\n-                           (unsigned) StateTableT::CLASS_END_OF_TEXT;\n+      unsigned int klass = likely (buffer->idx < buffer->len) ?\n+                           machine.get_class (buffer->cur().codepoint, num_glyphs, ac->machine_class_cache) :\n+                           (unsigned) CLASS_END_OF_TEXT;\n@@ -854,17 +1132,3 @@\n-\n-      const auto is_safe_to_break_extra = [&]()\n-      {\n-          \/* 2c. *\/\n-          const auto wouldbe_entry = machine.get_entry(StateTableT::STATE_START_OF_TEXT, klass);\n-\n-          \/* 2c'. *\/\n-          if (c->is_actionable (this, wouldbe_entry))\n-              return false;\n-\n-          \/* 2c\". *\/\n-          return next_state == machine.new_state(wouldbe_entry.newState)\n-              && (entry.flags & context_t::DontAdvance) == (wouldbe_entry.flags & context_t::DontAdvance);\n-      };\n-\n-      const auto is_safe_to_break = [&]()\n-      {\n+      const EntryT *wouldbe_entry;\n+      bool is_safe_to_break =\n+      (\n@@ -872,2 +1136,1 @@\n-          if (c->is_actionable (this, entry))\n-              return false;\n+          !c->table->is_actionable (entry) &&\n@@ -877,1 +1140,1 @@\n-          const auto ok =\n+          (\n@@ -879,4 +1142,14 @@\n-              || ((entry.flags & context_t::DontAdvance) && next_state == StateTableT::STATE_START_OF_TEXT)\n-              || is_safe_to_break_extra();\n-          if (!ok)\n-              return false;\n+              || ((entry.flags & Flags::DontAdvance) && next_state == StateTableT::STATE_START_OF_TEXT)\n+              || (\n+                    \/* 2c. *\/\n+                    wouldbe_entry = &machine.get_entry(StateTableT::STATE_START_OF_TEXT, klass)\n+                    ,\n+                    \/* 2c'. *\/\n+                    !c->table->is_actionable (*wouldbe_entry) &&\n+                    \/* 2c\". *\/\n+                    (\n+                      next_state == machine.new_state(wouldbe_entry->newState) &&\n+                      (entry.flags & Flags::DontAdvance) == (wouldbe_entry->flags & Flags::DontAdvance)\n+                    )\n+                 )\n+          ) &&\n@@ -885,2 +1158,2 @@\n-          return !c->is_actionable (this, machine.get_entry (state, StateTableT::CLASS_END_OF_TEXT));\n-      };\n+          !c->table->is_actionable (machine.get_entry (state, CLASS_END_OF_TEXT))\n+      );\n@@ -888,1 +1161,1 @@\n-      if (!is_safe_to_break () && buffer->backtrack_len () && buffer->idx < buffer->len)\n+      if (!is_safe_to_break && buffer->backtrack_len () && buffer->idx < buffer->len)\n@@ -891,1 +1164,1 @@\n-      c->transition (this, entry);\n+      c->transition (buffer, this, entry);\n@@ -899,1 +1172,1 @@\n-      if (!(entry.flags & context_t::DontAdvance) || buffer->max_ops-- <= 0)\n+      if (!(entry.flags & Flags::DontAdvance) || buffer->max_ops-- <= 0)\n@@ -909,1 +1182,0 @@\n-  hb_buffer_t *buffer;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-common.hh","additions":342,"deletions":70,"binary":false,"changes":412,"status":"modified"},{"patch":"@@ -141,0 +141,1 @@\n+                          hb_barrier () &&\n@@ -203,0 +204,1 @@\n+                          hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-feat-table.hh","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,0 +188,1 @@\n+    hb_barrier ();\n@@ -191,6 +192,6 @@\n-    case 0:  return_trace (u.decompositionAction.sanitize (c));\n-    case 1:  return_trace (u.unconditionalAddGlyphAction.sanitize (c));\n-    case 2:  return_trace (u.conditionalAddGlyphAction.sanitize (c));\n-    \/\/ case 3: return_trace (u.stretchGlyphAction.sanitize (c));\n-    case 4:  return_trace (u.decompositionAction.sanitize (c));\n-    case 5:  return_trace (u.decompositionAction.sanitize (c));\n+    case 0: hb_barrier ();  return_trace (u.decompositionAction.sanitize (c));\n+    case 1: hb_barrier ();  return_trace (u.unconditionalAddGlyphAction.sanitize (c));\n+    case 2: hb_barrier ();  return_trace (u.conditionalAddGlyphAction.sanitize (c));\n+    \/\/ case 3: hb_barrier (); return_trace (u.stretchGlyphAction.sanitize (c));\n+    case 4: hb_barrier ();  return_trace (u.decompositionAction.sanitize (c));\n+    case 5: hb_barrier ();  return_trace (u.decompositionAction.sanitize (c));\n@@ -223,0 +224,1 @@\n+    hb_barrier ();\n@@ -392,0 +394,1 @@\n+                          hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-just-table.hh","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"hb-set-digest.hh\"\n@@ -57,0 +58,1 @@\n+  hb_barrier ();\n@@ -84,1 +86,1 @@\n-  protected:\n+  public:\n@@ -108,1 +110,1 @@\n-      return false;\n+      return_trace (false);\n@@ -111,1 +113,1 @@\n-      return false;\n+      return_trace (false);\n@@ -120,0 +122,10 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &left_set, set_t &right_set, unsigned num_glyphs) const\n+  {\n+    for (const KernPair& pair : pairs)\n+    {\n+      left_set.add (pair.left);\n+      right_set.add (pair.right);\n+    }\n+  }\n+\n@@ -130,1 +142,4 @@\n-    { return table.get_kerning (left, right, c); }\n+    {\n+      if (!(*c->left_set)[left] || !(*c->right_set)[right]) return 0;\n+      return table.get_kerning (left, right, c);\n+    }\n@@ -195,0 +210,3 @@\n+  static bool initiateAction (const Entry<EntryData> &entry)\n+  { return entry.flags & Push; }\n+\n@@ -211,0 +229,14 @@\n+  enum Flags\n+  {\n+    DontAdvance = Format1EntryT::DontAdvance,\n+  };\n+\n+  bool is_action_initiable (const Entry<EntryData> &entry) const\n+  {\n+    return Format1EntryT::initiateAction (entry);\n+  }\n+  bool is_actionable (const Entry<EntryData> &entry) const\n+  {\n+    return Format1EntryT::performAction (entry);\n+  }\n+\n@@ -214,4 +246,0 @@\n-    enum\n-    {\n-      DontAdvance       = Format1EntryT::DontAdvance,\n-    };\n@@ -230,4 +258,2 @@\n-    bool is_actionable (StateTableDriver<Types, EntryData> *driver HB_UNUSED,\n-                        const Entry<EntryData> &entry)\n-    { return Format1EntryT::performAction (entry); }\n-    void transition (StateTableDriver<Types, EntryData> *driver,\n+    void transition (hb_buffer_t *buffer,\n+                     StateTableDriver<Types, EntryData, Flags> *driver,\n@@ -236,1 +262,0 @@\n-      hb_buffer_t *buffer = driver->buffer;\n@@ -262,0 +287,1 @@\n+        hb_barrier ();\n@@ -333,1 +359,1 @@\n-    private:\n+    public:\n@@ -336,0 +362,1 @@\n+    private:\n@@ -352,1 +379,2 @@\n-    StateTableDriver<Types, EntryData> driver (machine, c->buffer, c->font->face);\n+    StateTableDriver<Types, EntryData, Flags> driver (machine, c->font->face);\n+\n@@ -366,0 +394,9 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &left_set, set_t &right_set, unsigned num_glyphs) const\n+  {\n+    set_t set;\n+    machine.collect_glyphs (set, num_glyphs);\n+    left_set.union_ (set);\n+    right_set.union_ (set);\n+  }\n+\n@@ -371,1 +408,1 @@\n-  DEFINE_SIZE_STATIC (KernSubTableHeader::static_size + 5 * sizeof (HBUINT));\n+  DEFINE_SIZE_STATIC (KernSubTableHeader::static_size + (StateTable<Types, EntryData>::static_size + HBUINT::static_size));\n@@ -392,0 +429,1 @@\n+    hb_barrier ();\n@@ -401,1 +439,1 @@\n-      return false;\n+      return_trace (false);\n@@ -404,1 +442,1 @@\n-      return false;\n+      return_trace (false);\n@@ -413,0 +451,7 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &left_set, set_t &right_set, unsigned num_glyphs) const\n+  {\n+    (this+leftClassTable).collect_glyphs (left_set, num_glyphs);\n+    (this+rightClassTable).collect_glyphs (right_set, num_glyphs);\n+  }\n+\n@@ -423,1 +468,4 @@\n-    { return table.get_kerning (left, right, c); }\n+    {\n+      if (!(*c->left_set)[left] || !(*c->right_set)[right]) return 0;\n+      return table.get_kerning (left, right, c);\n+    }\n@@ -432,0 +480,1 @@\n+                          hb_barrier () &&\n@@ -464,1 +513,1 @@\n-  struct driver_context_t\n+  enum Flags\n@@ -466,5 +515,2 @@\n-    static constexpr bool in_place = true;\n-    enum Flags\n-    {\n-      Mark              = 0x8000,       \/* If set, remember this glyph as the marked glyph. *\/\n-      DontAdvance       = 0x4000,       \/* If set, don't advance to the next glyph before\n+    Mark                = 0x8000,       \/* If set, remember this glyph as the marked glyph. *\/\n+    DontAdvance         = 0x4000,       \/* If set, don't advance to the next glyph before\n@@ -472,2 +518,11 @@\n-      Reserved          = 0x3FFF,       \/* Not used; set to 0. *\/\n-    };\n+    Reserved            = 0x3FFF,       \/* Not used; set to 0. *\/\n+  };\n+\n+  bool is_action_initiable (const Entry<EntryData> &entry) const\n+  {\n+    return (entry.flags & Mark);\n+  }\n+  bool is_actionable (const Entry<EntryData> &entry) const\n+  {\n+    return entry.data.ankrActionIndex != 0xFFFF;\n+  }\n@@ -475,0 +530,3 @@\n+  struct driver_context_t\n+  {\n+    static constexpr bool in_place = true;\n@@ -484,1 +542,1 @@\n-    driver_context_t (const KerxSubTableFormat4 *table,\n+    driver_context_t (const KerxSubTableFormat4 *table_,\n@@ -487,0 +545,1 @@\n+        table (table_),\n@@ -492,4 +551,2 @@\n-    bool is_actionable (StateTableDriver<Types, EntryData> *driver HB_UNUSED,\n-                        const Entry<EntryData> &entry)\n-    { return entry.data.ankrActionIndex != 0xFFFF; }\n-    void transition (StateTableDriver<Types, EntryData> *driver,\n+    void transition (hb_buffer_t *buffer,\n+                     StateTableDriver<Types, EntryData, Flags> *driver,\n@@ -498,2 +555,0 @@\n-      hb_buffer_t *buffer = driver->buffer;\n-\n@@ -512,0 +567,1 @@\n+            hb_barrier ();\n@@ -540,0 +596,1 @@\n+            hb_barrier ();\n@@ -560,0 +617,1 @@\n+            hb_barrier ();\n@@ -582,1 +640,1 @@\n-    private:\n+    public:\n@@ -584,0 +642,2 @@\n+    const KerxSubTableFormat4 *table;\n+    private:\n@@ -596,1 +656,2 @@\n-    StateTableDriver<Types, EntryData> driver (machine, c->buffer, c->font->face);\n+    StateTableDriver<Types, EntryData, Flags> driver (machine, c->font->face);\n+\n@@ -610,0 +671,9 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &left_set, set_t &right_set, unsigned num_glyphs) const\n+  {\n+    set_t set;\n+    machine.collect_glyphs (set, num_glyphs);\n+    left_set.union_ (set);\n+    right_set.union_ (set);\n+  }\n+\n@@ -615,1 +685,1 @@\n-  DEFINE_SIZE_STATIC (KernSubTableHeader::static_size + 20);\n+  DEFINE_SIZE_STATIC (KernSubTableHeader::static_size + (StateTable<Types, EntryData>::static_size + HBUINT32::static_size));\n@@ -634,1 +704,1 @@\n-      const typename U::Long &t = u.l;\n+      const auto &t = u.l;\n@@ -642,0 +712,1 @@\n+      hb_barrier ();\n@@ -646,1 +717,1 @@\n-      const typename U::Short &t = u.s;\n+      const auto &t = u.s;\n@@ -652,0 +723,1 @@\n+      hb_barrier ();\n@@ -661,1 +733,1 @@\n-      return false;\n+      return_trace (false);\n@@ -664,1 +736,1 @@\n-      return false;\n+      return_trace (false);\n@@ -677,0 +749,1 @@\n+                          hb_barrier () &&\n@@ -691,0 +764,17 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &left_set, set_t &right_set, unsigned num_glyphs) const\n+  {\n+    if (is_long ())\n+    {\n+      const auto &t = u.l;\n+      (this+t.rowIndexTable).collect_glyphs (left_set, num_glyphs);\n+      (this+t.columnIndexTable).collect_glyphs (right_set, num_glyphs);\n+    }\n+    else\n+    {\n+      const auto &t = u.s;\n+      (this+t.rowIndexTable).collect_glyphs (left_set, num_glyphs);\n+      (this+t.columnIndexTable).collect_glyphs (right_set, num_glyphs);\n+    }\n+  }\n+\n@@ -701,1 +791,4 @@\n-    { return table.get_kerning (left, right, c); }\n+    {\n+      if (!(*c->left_set)[left] || !(*c->right_set)[right]) return 0;\n+      return table.get_kerning (left, right, c);\n+    }\n@@ -787,0 +880,14 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &left_set, set_t &right_set, unsigned num_glyphs) const\n+  {\n+    unsigned int subtable_type = get_type ();\n+    switch (subtable_type) {\n+    case 0:     u.format0.collect_glyphs (left_set, right_set, num_glyphs); return;\n+    case 1:     u.format1.collect_glyphs (left_set, right_set, num_glyphs); return;\n+    case 2:     u.format2.collect_glyphs (left_set, right_set, num_glyphs); return;\n+    case 4:     u.format4.collect_glyphs (left_set, right_set, num_glyphs); return;\n+    case 6:     u.format6.collect_glyphs (left_set, right_set, num_glyphs); return;\n+    default:    return;\n+    }\n+  }\n+\n@@ -790,3 +897,4 @@\n-    if (!u.header.sanitize (c) ||\n-        u.header.length <= u.header.static_size ||\n-        !c->check_range (this, u.header.length))\n+    if (!(u.header.sanitize (c) &&\n+          hb_barrier () &&\n+          u.header.length >= u.header.static_size &&\n+          c->check_range (this, u.header.length)))\n@@ -816,0 +924,2 @@\n+using kern_accelerator_data_t = hb_vector_t<hb_pair_t<hb_bit_set_t, hb_bit_set_t>>;\n+\n@@ -832,0 +942,3 @@\n+\n+      \/\/ TODO: What about format 4? What's this API used for anyway?\n+\n@@ -870,1 +983,2 @@\n-  bool apply (AAT::hb_aat_apply_context_t *c) const\n+  bool apply (AAT::hb_aat_apply_context_t *c,\n+              const kern_accelerator_data_t &accel_data) const\n@@ -917,0 +1031,3 @@\n+      c->left_set = &accel_data[i].first;\n+      c->right_set = &accel_data[i].second;\n+\n@@ -939,3 +1056,4 @@\n-    if (unlikely (!thiz()->version.sanitize (c) ||\n-                  (unsigned) thiz()->version < (unsigned) T::minVersion ||\n-                  !thiz()->tableCount.sanitize (c)))\n+    if (unlikely (!(thiz()->version.sanitize (c) &&\n+                    hb_barrier () &&\n+                    (unsigned) thiz()->version >= (unsigned) T::minVersion &&\n+                    thiz()->tableCount.sanitize (c))))\n@@ -952,0 +1070,1 @@\n+      hb_barrier ();\n@@ -967,0 +1086,10 @@\n+    unsigned majorVersion = thiz()->version;\n+    if (sizeof (thiz()->version) == 4)\n+      majorVersion = majorVersion >> 16;\n+    if (majorVersion >= 3)\n+    {\n+      const SubtableGlyphCoverage *coverage = (const SubtableGlyphCoverage *) st;\n+      if (!coverage->sanitize (c, count))\n+        return_trace (false);\n+    }\n+\n@@ -969,0 +1098,43 @@\n+\n+  kern_accelerator_data_t create_accelerator_data (unsigned num_glyphs) const\n+  {\n+    kern_accelerator_data_t accel_data;\n+\n+    typedef typename T::SubTable SubTable;\n+\n+    const SubTable *st = &thiz()->firstSubTable;\n+    unsigned int count = thiz()->tableCount;\n+    for (unsigned int i = 0; i < count; i++)\n+    {\n+      hb_bit_set_t left_set, right_set;\n+      st->collect_glyphs (left_set, right_set, num_glyphs);\n+      accel_data.push (hb_pair (left_set, right_set));\n+      st = &StructAfter<SubTable> (*st);\n+    }\n+\n+    return accel_data;\n+  }\n+\n+  struct accelerator_t\n+  {\n+    accelerator_t (hb_face_t *face)\n+    {\n+      hb_sanitize_context_t sc;\n+      this->table = sc.reference_table<T> (face);\n+      this->accel_data = this->table->create_accelerator_data (face->get_num_glyphs ());\n+    }\n+    ~accelerator_t ()\n+    {\n+      this->table.destroy ();\n+    }\n+\n+    hb_blob_t *get_blob () const { return table.get_blob (); }\n+\n+    bool apply (AAT::hb_aat_apply_context_t *c) const\n+    {\n+      return table->apply (c, accel_data);\n+    }\n+\n+    hb_blob_ptr_t<T> table;\n+    kern_accelerator_data_t accel_data;\n+  };\n@@ -997,0 +1169,3 @@\n+struct kerx_accelerator_t : kerx::accelerator_t {\n+  kerx_accelerator_t (hb_face_t *face) : kerx::accelerator_t (face) {}\n+};\n@@ -1000,1 +1175,0 @@\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-kerx-table.hh","additions":224,"deletions":50,"binary":false,"changes":274,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"hb-ot-layout.hh\"\n@@ -56,1 +57,1 @@\n-  struct driver_context_t\n+  enum Flags\n@@ -58,4 +59,1 @@\n-    static constexpr bool in_place = true;\n-    enum Flags\n-    {\n-      MarkFirst         = 0x8000,       \/* If set, make the current glyph the first\n+    MarkFirst           = 0x8000,       \/* If set, make the current glyph the first\n@@ -63,1 +61,1 @@\n-      DontAdvance       = 0x4000,       \/* If set, don't advance to the next glyph\n+    DontAdvance         = 0x4000,       \/* If set, don't advance to the next glyph\n@@ -67,1 +65,1 @@\n-      MarkLast          = 0x2000,       \/* If set, make the current glyph the last\n+    MarkLast            = 0x2000,       \/* If set, make the current glyph the last\n@@ -69,3 +67,16 @@\n-      Reserved          = 0x1FF0,       \/* These bits are reserved and should be set to 0. *\/\n-      Verb              = 0x000F,       \/* The type of rearrangement specified. *\/\n-    };\n+    Reserved            = 0x1FF0,       \/* These bits are reserved and should be set to 0. *\/\n+    Verb                = 0x000F,       \/* The type of rearrangement specified. *\/\n+  };\n+\n+  bool is_action_initiable (const Entry<EntryData> &entry) const\n+  {\n+    return (entry.flags & MarkFirst);\n+  }\n+  bool is_actionable (const Entry<EntryData> &entry) const\n+  {\n+    return (entry.flags & Verb);\n+  }\n+\n+  struct driver_context_t\n+  {\n+    static constexpr bool in_place = true;\n@@ -73,1 +84,1 @@\n-    driver_context_t (const RearrangementSubtable *table HB_UNUSED) :\n+    driver_context_t (const RearrangementSubtable *table_) :\n@@ -75,0 +86,1 @@\n+        table (table_),\n@@ -77,6 +89,2 @@\n-    bool is_actionable (StateTableDriver<Types, EntryData> *driver HB_UNUSED,\n-                        const Entry<EntryData> &entry)\n-    {\n-      return (entry.flags & Verb) && start < end;\n-    }\n-    void transition (StateTableDriver<Types, EntryData> *driver,\n+    void transition (hb_buffer_t *buffer,\n+                     StateTableDriver<Types, EntryData, Flags> *driver,\n@@ -85,1 +93,0 @@\n-      hb_buffer_t *buffer = driver->buffer;\n@@ -160,0 +167,1 @@\n+    const RearrangementSubtable *table;\n@@ -171,1 +179,8 @@\n-    StateTableDriver<Types, EntryData> driver (machine, c->buffer, c->face);\n+    StateTableDriver<Types, EntryData, Flags> driver (machine, c->face);\n+\n+    if (!c->buffer_intersects_machine ())\n+    {\n+      (void) c->buffer->message (c->font, \"skipped chainsubtable because no glyph matches\");\n+      return_trace (false);\n+    }\n+\n@@ -183,1 +198,1 @@\n-  protected:\n+  public:\n@@ -186,1 +201,1 @@\n-  DEFINE_SIZE_STATIC (16);\n+  DEFINE_SIZE_STATIC ((StateTable<Types, EntryData>::static_size));\n@@ -204,0 +219,17 @@\n+  enum Flags\n+  {\n+    SetMark             = 0x8000,       \/* If set, make the current glyph the marked glyph. *\/\n+    DontAdvance         = 0x4000,       \/* If set, don't advance to the next glyph before\n+                                         * going to the new state. *\/\n+    Reserved            = 0x3FFF,       \/* These bits are reserved and should be set to 0. *\/\n+  };\n+\n+  bool is_action_initiable (const Entry<EntryData> &entry) const\n+  {\n+    return (entry.flags & SetMark);\n+  }\n+  bool is_actionable (const Entry<EntryData> &entry) const\n+  {\n+    return entry.data.markIndex != 0xFFFF || entry.data.currentIndex != 0xFFFF;\n+  }\n+\n@@ -207,7 +239,0 @@\n-    enum Flags\n-    {\n-      SetMark           = 0x8000,       \/* If set, make the current glyph the marked glyph. *\/\n-      DontAdvance       = 0x4000,       \/* If set, don't advance to the next glyph before\n-                                         * going to the new state. *\/\n-      Reserved          = 0x3FFF,       \/* These bits are reserved and should be set to 0. *\/\n-    };\n@@ -219,0 +244,1 @@\n+        table (table_),\n@@ -223,1 +249,0 @@\n-        table (table_),\n@@ -226,11 +251,2 @@\n-    bool is_actionable (StateTableDriver<Types, EntryData> *driver,\n-                        const Entry<EntryData> &entry)\n-    {\n-      hb_buffer_t *buffer = driver->buffer;\n-\n-      if (buffer->idx == buffer->len && !mark_set)\n-        return false;\n-\n-      return entry.data.markIndex != 0xFFFF || entry.data.currentIndex != 0xFFFF;\n-    }\n-    void transition (StateTableDriver<Types, EntryData> *driver,\n+    void transition (hb_buffer_t *buffer,\n+                     StateTableDriver<Types, EntryData, Flags> *driver,\n@@ -239,2 +255,0 @@\n-      hb_buffer_t *buffer = driver->buffer;\n-\n@@ -262,1 +276,3 @@\n-        if (!replacement->sanitize (&c->sanitizer) || !*replacement)\n+        if (!(replacement->sanitize (&c->sanitizer) &&\n+              hb_barrier () &&\n+              *replacement))\n@@ -268,1 +284,3 @@\n-        buffer->info[mark].codepoint = *replacement;\n+        hb_codepoint_t glyph = *replacement;\n+        buffer->info[mark].codepoint = glyph;\n+        c->buffer_glyph_set.add (glyph);\n@@ -290,1 +308,3 @@\n-        if (!replacement->sanitize (&c->sanitizer) || !*replacement)\n+        if (!(replacement->sanitize (&c->sanitizer) &&\n+              hb_barrier () &&\n+              *replacement))\n@@ -295,1 +315,3 @@\n-        buffer->info[idx].codepoint = *replacement;\n+        hb_codepoint_t glyph = *replacement;\n+        buffer->info[idx].codepoint = glyph;\n+        c->buffer_glyph_set.add (glyph);\n@@ -311,1 +333,0 @@\n-    private:\n@@ -313,0 +334,2 @@\n+    const ContextualSubtable *table;\n+    private:\n@@ -317,2 +340,1 @@\n-    const ContextualSubtable *table;\n-    const UnsizedListOfOffset16To<Lookup<HBGlyphID16>, HBUINT, false> &subs;\n+    const UnsizedListOfOffset16To<Lookup<HBGlyphID16>, HBUINT, void, false> &subs;\n@@ -327,1 +349,8 @@\n-    StateTableDriver<Types, EntryData> driver (machine, c->buffer, c->face);\n+    StateTableDriver<Types, EntryData, Flags> driver (machine, c->face);\n+\n+    if (!c->buffer_intersects_machine ())\n+    {\n+      (void) c->buffer->message (c->font, \"skipped chainsubtable because no glyph matches\");\n+      return_trace (false);\n+    }\n+\n@@ -339,0 +368,1 @@\n+    hb_barrier ();\n@@ -359,1 +389,1 @@\n-  protected:\n+  public:\n@@ -362,1 +392,2 @@\n-  NNOffsetTo<UnsizedListOfOffset16To<Lookup<HBGlyphID16>, HBUINT, false>, HBUINT>\n+  protected:\n+  NNOffsetTo<UnsizedListOfOffset16To<Lookup<HBGlyphID16>, HBUINT, void, false>, HBUINT>\n@@ -365,1 +396,1 @@\n-  DEFINE_SIZE_STATIC (20);\n+  DEFINE_SIZE_STATIC ((StateTable<Types, EntryData>::static_size + HBUINT::static_size));\n@@ -375,0 +406,10 @@\n+\n+  struct EntryData\n+  {\n+    HBUINT16    ligActionIndex; \/* Index to the first ligActionTable entry\n+                                 * for processing this group, if indicated\n+                                 * by the flags. *\/\n+    public:\n+    DEFINE_SIZE_STATIC (2);\n+  };\n+\n@@ -386,8 +427,2 @@\n-  struct EntryData\n-  {\n-    HBUINT16    ligActionIndex; \/* Index to the first ligActionTable entry\n-                                 * for processing this group, if indicated\n-                                 * by the flags. *\/\n-    public:\n-    DEFINE_SIZE_STATIC (2);\n-  };\n+  static bool initiateAction (const Entry<EntryData> &entry)\n+  { return entry.flags & SetComponent; }\n@@ -404,0 +439,2 @@\n+  typedef void EntryData;\n+\n@@ -415,1 +452,2 @@\n-  typedef void EntryData;\n+  static bool initiateAction (const Entry<EntryData> &entry)\n+  { return entry.flags & SetComponent; }\n@@ -433,0 +471,14 @@\n+  enum Flags\n+  {\n+    DontAdvance = LigatureEntryT::DontAdvance,\n+  };\n+\n+  bool is_action_initiable (const Entry<EntryData> &entry) const\n+  {\n+    return LigatureEntryT::initiateAction (entry);\n+  }\n+  bool is_actionable (const Entry<EntryData> &entry) const\n+  {\n+    return LigatureEntryT::performAction (entry);\n+  }\n+\n@@ -436,4 +488,0 @@\n-    enum\n-    {\n-      DontAdvance       = LigatureEntryT::DontAdvance,\n-    };\n@@ -462,6 +510,2 @@\n-    bool is_actionable (StateTableDriver<Types, EntryData> *driver HB_UNUSED,\n-                        const Entry<EntryData> &entry)\n-    {\n-      return LigatureEntryT::performAction (entry);\n-    }\n-    void transition (StateTableDriver<Types, EntryData> *driver,\n+    void transition (hb_buffer_t *buffer,\n+                     StateTableDriver<Types, EntryData, Flags> *driver,\n@@ -470,2 +514,0 @@\n-      hb_buffer_t *buffer = driver->buffer;\n-\n@@ -516,0 +558,1 @@\n+          hb_barrier ();\n@@ -526,0 +569,1 @@\n+          hb_barrier ();\n@@ -536,0 +580,1 @@\n+            hb_barrier ();\n@@ -547,0 +592,1 @@\n+              _hb_glyph_info_set_default_ignorable (&buffer->cur());\n@@ -563,1 +609,0 @@\n-    private:\n@@ -566,0 +611,1 @@\n+    private:\n@@ -579,1 +625,8 @@\n-    StateTableDriver<Types, EntryData> driver (machine, c->buffer, c->face);\n+    StateTableDriver<Types, EntryData, Flags> driver (machine, c->face);\n+\n+    if (!c->buffer_intersects_machine ())\n+    {\n+      (void) c->buffer->message (c->font, \"skipped chainsubtable because no glyph matches\");\n+      return_trace (false);\n+    }\n+\n@@ -590,0 +643,1 @@\n+                  hb_barrier () &&\n@@ -593,1 +647,1 @@\n-  protected:\n+  public:\n@@ -596,0 +650,1 @@\n+  protected:\n@@ -603,1 +658,1 @@\n-  DEFINE_SIZE_STATIC (28);\n+  DEFINE_SIZE_STATIC ((StateTable<Types, EntryData>::static_size + 3 * HBUINT::static_size));\n@@ -613,0 +668,6 @@\n+    if (!c->buffer_intersects_machine ())\n+    {\n+      (void) c->buffer->message (c->font, \"skipped chainsubtable because no glyph matches\");\n+      return_trace (false);\n+    }\n+\n@@ -645,1 +706,3 @@\n-        info[i].codepoint = *replacement;\n+        hb_codepoint_t glyph = *replacement;\n+        info[i].codepoint = glyph;\n+        c->buffer_glyph_set.add (glyph);\n@@ -656,0 +719,6 @@\n+  template <typename set_t>\n+  void collect_initial_glyphs (set_t &glyphs, unsigned num_glyphs) const\n+  {\n+    substitute.collect_glyphs (glyphs, num_glyphs);\n+  }\n+\n@@ -689,0 +758,58 @@\n+  enum Flags\n+  {\n+    SetMark             = 0x8000,     \/* If set, mark the current glyph. *\/\n+    DontAdvance         = 0x4000,     \/* If set, don't advance to the next glyph before\n+                                       * going to the new state.  This does not mean\n+                                       * that the glyph pointed to is the same one as\n+                                       * before. If you've made insertions immediately\n+                                       * downstream of the current glyph, the next glyph\n+                                       * processed would in fact be the first one\n+                                       * inserted. *\/\n+    CurrentIsKashidaLike= 0x2000,     \/* If set, and the currentInsertList is nonzero,\n+                                       * then the specified glyph list will be inserted\n+                                       * as a kashida-like insertion, either before or\n+                                       * after the current glyph (depending on the state\n+                                       * of the currentInsertBefore flag). If clear, and\n+                                       * the currentInsertList is nonzero, then the\n+                                       * specified glyph list will be inserted as a\n+                                       * split-vowel-like insertion, either before or\n+                                       * after the current glyph (depending on the state\n+                                       * of the currentInsertBefore flag). *\/\n+    MarkedIsKashidaLike= 0x1000,      \/* If set, and the markedInsertList is nonzero,\n+                                       * then the specified glyph list will be inserted\n+                                       * as a kashida-like insertion, either before or\n+                                       * after the marked glyph (depending on the state\n+                                       * of the markedInsertBefore flag). If clear, and\n+                                       * the markedInsertList is nonzero, then the\n+                                       * specified glyph list will be inserted as a\n+                                       * split-vowel-like insertion, either before or\n+                                       * after the marked glyph (depending on the state\n+                                       * of the markedInsertBefore flag). *\/\n+    CurrentInsertBefore= 0x0800,      \/* If set, specifies that insertions are to be made\n+                                       * to the left of the current glyph. If clear,\n+                                       * they're made to the right of the current glyph. *\/\n+    MarkedInsertBefore= 0x0400,       \/* If set, specifies that insertions are to be\n+                                       * made to the left of the marked glyph. If clear,\n+                                       * they're made to the right of the marked glyph. *\/\n+    CurrentInsertCount= 0x3E0,        \/* This 5-bit field is treated as a count of the\n+                                       * number of glyphs to insert at the current\n+                                       * position. Since zero means no insertions, the\n+                                       * largest number of insertions at any given\n+                                       * current location is 31 glyphs. *\/\n+    MarkedInsertCount= 0x001F,        \/* This 5-bit field is treated as a count of the\n+                                       * number of glyphs to insert at the marked\n+                                       * position. Since zero means no insertions, the\n+                                       * largest number of insertions at any given\n+                                       * marked location is 31 glyphs. *\/\n+  };\n+\n+  bool is_action_initiable (const Entry<EntryData> &entry) const\n+  {\n+    return (entry.flags & SetMark);\n+  }\n+  bool is_actionable (const Entry<EntryData> &entry) const\n+  {\n+    return (entry.flags & (CurrentInsertCount | MarkedInsertCount)) &&\n+           (entry.data.currentInsertIndex != 0xFFFF ||entry.data.markedInsertIndex != 0xFFFF);\n+  }\n+\n@@ -692,47 +819,0 @@\n-    enum Flags\n-    {\n-      SetMark           = 0x8000,       \/* If set, mark the current glyph. *\/\n-      DontAdvance       = 0x4000,       \/* If set, don't advance to the next glyph before\n-                                         * going to the new state.  This does not mean\n-                                         * that the glyph pointed to is the same one as\n-                                         * before. If you've made insertions immediately\n-                                         * downstream of the current glyph, the next glyph\n-                                         * processed would in fact be the first one\n-                                         * inserted. *\/\n-      CurrentIsKashidaLike= 0x2000,     \/* If set, and the currentInsertList is nonzero,\n-                                         * then the specified glyph list will be inserted\n-                                         * as a kashida-like insertion, either before or\n-                                         * after the current glyph (depending on the state\n-                                         * of the currentInsertBefore flag). If clear, and\n-                                         * the currentInsertList is nonzero, then the\n-                                         * specified glyph list will be inserted as a\n-                                         * split-vowel-like insertion, either before or\n-                                         * after the current glyph (depending on the state\n-                                         * of the currentInsertBefore flag). *\/\n-      MarkedIsKashidaLike= 0x1000,      \/* If set, and the markedInsertList is nonzero,\n-                                         * then the specified glyph list will be inserted\n-                                         * as a kashida-like insertion, either before or\n-                                         * after the marked glyph (depending on the state\n-                                         * of the markedInsertBefore flag). If clear, and\n-                                         * the markedInsertList is nonzero, then the\n-                                         * specified glyph list will be inserted as a\n-                                         * split-vowel-like insertion, either before or\n-                                         * after the marked glyph (depending on the state\n-                                         * of the markedInsertBefore flag). *\/\n-      CurrentInsertBefore= 0x0800,      \/* If set, specifies that insertions are to be made\n-                                         * to the left of the current glyph. If clear,\n-                                         * they're made to the right of the current glyph. *\/\n-      MarkedInsertBefore= 0x0400,       \/* If set, specifies that insertions are to be\n-                                         * made to the left of the marked glyph. If clear,\n-                                         * they're made to the right of the marked glyph. *\/\n-      CurrentInsertCount= 0x3E0,        \/* This 5-bit field is treated as a count of the\n-                                         * number of glyphs to insert at the current\n-                                         * position. Since zero means no insertions, the\n-                                         * largest number of insertions at any given\n-                                         * current location is 31 glyphs. *\/\n-      MarkedInsertCount= 0x001F,        \/* This 5-bit field is treated as a count of the\n-                                         * number of glyphs to insert at the marked\n-                                         * position. Since zero means no insertions, the\n-                                         * largest number of insertions at any given\n-                                         * marked location is 31 glyphs. *\/\n-    };\n@@ -740,1 +820,1 @@\n-    driver_context_t (const InsertionSubtable *table,\n+    driver_context_t (const InsertionSubtable *table_,\n@@ -744,0 +824,1 @@\n+        table (table_),\n@@ -747,7 +828,2 @@\n-    bool is_actionable (StateTableDriver<Types, EntryData> *driver HB_UNUSED,\n-                        const Entry<EntryData> &entry)\n-    {\n-      return (entry.flags & (CurrentInsertCount | MarkedInsertCount)) &&\n-             (entry.data.currentInsertIndex != 0xFFFF ||entry.data.markedInsertIndex != 0xFFFF);\n-    }\n-    void transition (StateTableDriver<Types, EntryData> *driver,\n+    void transition (hb_buffer_t *buffer,\n+                     StateTableDriver<Types, EntryData, Flags> *driver,\n@@ -756,1 +832,0 @@\n-      hb_buffer_t *buffer = driver->buffer;\n@@ -768,0 +843,1 @@\n+        hb_barrier ();\n@@ -778,0 +854,3 @@\n+        for (unsigned int i = 0; i < count; i++)\n+          c->buffer_glyph_set.add (glyphs[i]);\n+        ret = true;\n@@ -796,0 +875,1 @@\n+        hb_barrier ();\n@@ -829,1 +909,0 @@\n-    private:\n@@ -831,0 +910,2 @@\n+    const InsertionSubtable *table;\n+    private:\n@@ -841,1 +922,8 @@\n-    StateTableDriver<Types, EntryData> driver (machine, c->buffer, c->face);\n+    StateTableDriver<Types, EntryData, Flags> driver (machine, c->face);\n+\n+    if (!c->buffer_intersects_machine ())\n+    {\n+      (void) c->buffer->message (c->font, \"skipped chainsubtable because no glyph matches\");\n+      return_trace (false);\n+    }\n+\n@@ -852,0 +940,1 @@\n+                  hb_barrier () &&\n@@ -855,1 +944,1 @@\n-  protected:\n+  public:\n@@ -858,0 +947,1 @@\n+  protected:\n@@ -862,1 +952,1 @@\n-  DEFINE_SIZE_STATIC (20);\n+  DEFINE_SIZE_STATIC ((StateTable<Types, EntryData>::static_size + HBUINT::static_size));\n@@ -886,0 +976,101 @@\n+\n+struct hb_accelerate_subtables_context_t :\n+       hb_dispatch_context_t<hb_accelerate_subtables_context_t>\n+{\n+  struct hb_applicable_t\n+  {\n+    friend struct hb_accelerate_subtables_context_t;\n+    friend struct hb_aat_layout_lookup_accelerator_t;\n+\n+    public:\n+    hb_bit_set_t glyph_set;\n+    mutable hb_aat_class_cache_t class_cache;\n+\n+    template <typename T>\n+    auto init_ (const T &obj_, unsigned num_glyphs, hb_priority<1>) HB_AUTO_RETURN\n+    (\n+      obj_.machine.collect_initial_glyphs (glyph_set, num_glyphs, obj_)\n+    )\n+\n+    template <typename T>\n+    void init_ (const T &obj_, unsigned num_glyphs, hb_priority<0>)\n+    {\n+      obj_.collect_initial_glyphs (glyph_set, num_glyphs);\n+    }\n+\n+    template <typename T>\n+    void init (const T &obj_, unsigned num_glyphs)\n+    {\n+      glyph_set.init ();\n+      init_ (obj_, num_glyphs, hb_prioritize);\n+      class_cache.clear ();\n+    }\n+\n+    void\n+    fini ()\n+    {\n+      glyph_set.fini ();\n+    }\n+  };\n+\n+  \/* Dispatch interface. *\/\n+  template <typename T>\n+  return_t dispatch (const T &obj)\n+  {\n+    hb_applicable_t *entry = &array[i++];\n+\n+    entry->init (obj, num_glyphs);\n+\n+    return hb_empty_t ();\n+  }\n+  static return_t default_return_value () { return hb_empty_t (); }\n+\n+  bool stop_sublookup_iteration (return_t r) const { return false; }\n+\n+  hb_accelerate_subtables_context_t (hb_applicable_t *array_, unsigned num_glyphs_) :\n+                                     hb_dispatch_context_t<hb_accelerate_subtables_context_t> (),\n+                                     array (array_), num_glyphs (num_glyphs_) {}\n+\n+  hb_applicable_t *array;\n+  unsigned num_glyphs;\n+  unsigned i = 0;\n+};\n+\n+struct hb_aat_layout_chain_accelerator_t\n+{\n+  template <typename TChain>\n+  static hb_aat_layout_chain_accelerator_t *create (const TChain &chain, unsigned num_glyphs)\n+  {\n+    unsigned count = chain.get_subtable_count ();\n+\n+    unsigned size = sizeof (hb_aat_layout_chain_accelerator_t) -\n+                    HB_VAR_ARRAY * sizeof (hb_accelerate_subtables_context_t::hb_applicable_t) +\n+                    count * sizeof (hb_accelerate_subtables_context_t::hb_applicable_t);\n+\n+    \/* The following is a calloc because when we are collecting subtables,\n+     * some of them might be invalid and hence not collect; as a result,\n+     * we might not fill in all the count entries of the subtables array.\n+     * Zeroing it allows the set digest to gatekeep it without having to\n+     * initialize it further. *\/\n+    auto *thiz = (hb_aat_layout_chain_accelerator_t *) hb_calloc (1, size);\n+    if (unlikely (!thiz))\n+      return nullptr;\n+\n+    thiz->count = count;\n+\n+    hb_accelerate_subtables_context_t c_accelerate_subtables (thiz->subtables, num_glyphs);\n+    chain.dispatch (&c_accelerate_subtables);\n+\n+    return thiz;\n+  }\n+\n+  void destroy ()\n+  {\n+    for (unsigned i = 0; i < count; i++)\n+      subtables[i].fini ();\n+  }\n+\n+  unsigned count;\n+  hb_accelerate_subtables_context_t::hb_applicable_t subtables[HB_VAR_ARRAY];\n+};\n+\n@@ -940,1 +1131,2 @@\n-    hb_sanitize_with_object_t with (&c->sanitizer, this);\n+    \/\/ Disabled for https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/4873\n+    \/\/hb_sanitize_with_object_t with (&c->sanitizer, this);\n@@ -947,3 +1139,4 @@\n-    if (!length.sanitize (c) ||\n-        length <= min_size ||\n-        !c->check_range (this, length))\n+    if (!(length.sanitize (c) &&\n+          hb_barrier () &&\n+          length >= min_size &&\n+          c->check_range (this, length)))\n@@ -952,1 +1145,2 @@\n-    hb_sanitize_with_object_t with (c, this);\n+    \/\/ Disabled for https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/4873\n+    \/\/hb_sanitize_with_object_t with (c, this);\n@@ -976,0 +1170,2 @@\n+  unsigned get_subtable_count () const { return subtableCount; }\n+\n@@ -1016,1 +1212,2 @@\n-  void apply (hb_aat_apply_context_t *c) const\n+  void apply (hb_aat_apply_context_t *c,\n+              const hb_aat_layout_chain_accelerator_t *accel) const\n@@ -1024,0 +1221,3 @@\n+      auto coverage = subtable->get_coverage ();\n+\n+      hb_mask_t subtable_flags = subtable->subFeatureFlags;\n@@ -1025,1 +1225,1 @@\n-                   hb_map ([&subtable] (const hb_aat_map_t::range_flags_t _) -> bool { return subtable->subFeatureFlags & (_.flags); })))\n+                   hb_map ([subtable_flags] (const hb_aat_map_t::range_flags_t _) -> bool { return subtable_flags & (_.flags); })))\n@@ -1027,1 +1227,3 @@\n-      c->subtable_flags = subtable->subFeatureFlags;\n+      c->subtable_flags = subtable_flags;\n+      c->machine_glyph_set = accel ? &accel->subtables[i].glyph_set : &Null(hb_bit_set_t);\n+      c->machine_class_cache = accel ? &accel->subtables[i].class_cache : nullptr;\n@@ -1029,1 +1231,1 @@\n-      if (!(subtable->get_coverage() & ChainSubtable<Types>::AllDirections) &&\n+      if (!(coverage & ChainSubtable<Types>::AllDirections) &&\n@@ -1031,1 +1233,1 @@\n-          bool (subtable->get_coverage() & ChainSubtable<Types>::Vertical))\n+          bool (coverage & ChainSubtable<Types>::Vertical))\n@@ -1061,3 +1263,3 @@\n-      reverse = subtable->get_coverage () & ChainSubtable<Types>::Logical ?\n-                bool (subtable->get_coverage () & ChainSubtable<Types>::Backwards) :\n-                bool (subtable->get_coverage () & ChainSubtable<Types>::Backwards) !=\n+      reverse = coverage & ChainSubtable<Types>::Logical ?\n+                bool (coverage & ChainSubtable<Types>::Backwards) :\n+                bool (coverage & ChainSubtable<Types>::Backwards) !=\n@@ -1089,1 +1291,16 @@\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int version HB_UNUSED) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n+  {\n+    const ChainSubtable<Types> *subtable = &StructAfter<ChainSubtable<Types>> (featureZ.as_array (featureCount));\n+    unsigned int count = subtableCount;\n+    for (unsigned int i = 0; i < count; i++)\n+    {\n+      typename context_t::return_t ret = subtable->dispatch (c, std::forward<Ts> (ds)...);\n+      if (c->stop_sublookup_iteration (ret))\n+        return ret;\n+      subtable = &StructAfter<ChainSubtable<Types>> (*subtable);\n+    }\n+    return c->default_return_value ();\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c, unsigned int version) const\n@@ -1092,3 +1309,4 @@\n-    if (!length.sanitize (c) ||\n-        length < min_size ||\n-        !c->check_range (this, length))\n+    if (!(length.sanitize (c) &&\n+          hb_barrier () &&\n+          length >= min_size &&\n+          c->check_range (this, length)))\n@@ -1106,0 +1324,1 @@\n+      hb_barrier ();\n@@ -1109,0 +1328,7 @@\n+    if (version >= 3)\n+    {\n+      const SubtableGlyphCoverage *coverage = (const SubtableGlyphCoverage *) subtable;\n+      if (!coverage->sanitize (c, count))\n+        return_trace (false);\n+    }\n+\n@@ -1120,1 +1346,1 @@\n-\/*subtableGlyphCoverageArray*\/  \/* Only if version >= 3. We don't use. *\/\n+\/*SubtableGlyphCoverage coverages*\/\/* Only if version >= 3. *\/\n@@ -1131,1 +1357,1 @@\n-template <typename Types, hb_tag_t TAG>\n+template <typename T, typename Types, hb_tag_t TAG>\n@@ -1138,0 +1364,66 @@\n+  struct accelerator_t\n+  {\n+    accelerator_t (hb_face_t *face)\n+    {\n+      hb_sanitize_context_t sc;\n+      this->table = sc.reference_table<T> (face);\n+\n+      if (unlikely (this->table->is_blocklisted (this->table.get_blob (), face)))\n+      {\n+        hb_blob_destroy (this->table.get_blob ());\n+        this->table = hb_blob_get_empty ();\n+      }\n+\n+      this->chain_count = table->get_chain_count ();\n+\n+      this->accels = (hb_atomic_ptr_t<hb_aat_layout_chain_accelerator_t> *) hb_calloc (this->chain_count, sizeof (*accels));\n+      if (unlikely (!this->accels))\n+      {\n+        this->chain_count = 0;\n+        this->table.destroy ();\n+        this->table = hb_blob_get_empty ();\n+      }\n+    }\n+    ~accelerator_t ()\n+    {\n+      for (unsigned int i = 0; i < this->chain_count; i++)\n+      {\n+        if (this->accels[i])\n+          this->accels[i]->destroy ();\n+        hb_free (this->accels[i]);\n+      }\n+      hb_free (this->accels);\n+      this->table.destroy ();\n+    }\n+\n+    hb_blob_t *get_blob () const { return table.get_blob (); }\n+\n+    template <typename Chain>\n+    hb_aat_layout_chain_accelerator_t *get_accel (unsigned chain_index, const Chain &chain, unsigned num_glyphs) const\n+    {\n+      if (unlikely (chain_index >= chain_count)) return nullptr;\n+\n+    retry:\n+      auto *accel = accels[chain_index].get_acquire ();\n+      if (unlikely (!accel))\n+      {\n+        accel = hb_aat_layout_chain_accelerator_t::create (chain, num_glyphs);\n+        if (unlikely (!accel))\n+          return nullptr;\n+\n+        if (unlikely (!accels[chain_index].cmpexch (nullptr, accel)))\n+        {\n+          hb_free (accel);\n+          goto retry;\n+        }\n+      }\n+\n+      return accel;\n+    }\n+\n+    hb_blob_ptr_t<T> table;\n+    unsigned int chain_count;\n+    hb_atomic_ptr_t<hb_aat_layout_chain_accelerator_t> *accels;\n+  };\n+\n+\n@@ -1154,0 +1446,4 @@\n+  unsigned get_chain_count () const\n+  {\n+    return chainCount;\n+  }\n@@ -1155,1 +1451,2 @@\n-              const hb_aat_map_t &map) const\n+              const hb_aat_map_t &map,\n+              const accelerator_t &accel) const\n@@ -1161,0 +1458,2 @@\n+    c->setup_buffer_glyph_set ();\n+\n@@ -1166,0 +1465,1 @@\n+      auto *chain_accel = accel.get_accel (i, *chain, c->face->get_num_glyphs ());\n@@ -1167,1 +1467,1 @@\n-      chain->apply (c);\n+      chain->apply (c, chain_accel);\n@@ -1176,1 +1476,4 @@\n-    if (!version.sanitize (c) || !version || !chainCount.sanitize (c))\n+    if (!(version.sanitize (c) &&\n+          hb_barrier () &&\n+          version &&\n+          chainCount.sanitize (c)))\n@@ -1185,0 +1488,1 @@\n+      hb_barrier ();\n@@ -1203,2 +1507,18 @@\n-struct morx : mortmorx<ExtendedTypes, HB_AAT_TAG_morx> {};\n-struct mort : mortmorx<ObsoleteTypes, HB_AAT_TAG_mort> {};\n+struct morx : mortmorx<morx, ExtendedTypes, HB_AAT_TAG_morx>\n+{\n+  HB_INTERNAL bool is_blocklisted (hb_blob_t *blob,\n+                                   hb_face_t *face) const;\n+};\n+\n+struct mort : mortmorx<mort, ObsoleteTypes, HB_AAT_TAG_mort>\n+{\n+  HB_INTERNAL bool is_blocklisted (hb_blob_t *blob,\n+                                   hb_face_t *face) const;\n+};\n+\n+struct morx_accelerator_t : morx::accelerator_t {\n+  morx_accelerator_t (hb_face_t *face) : morx::accelerator_t (face) {}\n+};\n+struct mort_accelerator_t : mort::accelerator_t {\n+  mort_accelerator_t (hb_face_t *face) : mort::accelerator_t (face) {}\n+};\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-morx-table.hh","additions":483,"deletions":163,"binary":false,"changes":646,"status":"modified"},{"patch":"@@ -136,2 +136,2 @@\n-    case 0: return u.format0.get_bounds (font, glyph_id, extents, this);\n-    case 1: return u.format1.get_bounds (font, glyph_id, extents, this);\n+    case 0: hb_barrier (); return u.format0.get_bounds (font, glyph_id, extents, this);\n+    case 1: hb_barrier (); return u.format1.get_bounds (font, glyph_id, extents, this);\n@@ -147,0 +147,1 @@\n+    hb_barrier ();\n@@ -150,2 +151,2 @@\n-    case 0: return_trace (u.format0.sanitize (c, this));\n-    case 1: return_trace (u.format1.sanitize (c, this));\n+    case 0: hb_barrier (); return_trace (u.format0.sanitize (c, this));\n+    case 1: hb_barrier (); return_trace (u.format1.sanitize (c, this));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-opbd-table.hh","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -51,3 +51,54 @@\n-  int get_value (const void *base, unsigned int index,\n-                 unsigned int table_size) const\n-  { return (base+valuesZ).as_array (table_size)[index]; }\n+  float interpolate_at (unsigned int idx,\n+                        float ptem,\n+                        const void *base,\n+                        hb_array_t<const F16DOT16> size_table) const\n+  {\n+    const FWORD *values = (base+valuesZ).arrayZ;\n+\n+    float s0 = size_table[idx].to_float ();\n+    float s1 = size_table[idx + 1].to_float ();\n+    int v0 = values[idx];\n+    int v1 = values[idx + 1];\n+\n+    \/\/ Deal with font bugs.\n+    if (unlikely (s1 < s0))\n+    { hb_swap (s0, s1); hb_swap (v0, v1); }\n+    if (unlikely (ptem < s0)) return v0;\n+    if (unlikely (ptem > s1)) return v1;\n+    if (unlikely (s0 == s1)) return (v0 + v1) * 0.5f;\n+\n+    float t = (ptem - s0) \/ (s1 - s0);\n+    return v0 + t * (v1 - v0);\n+  }\n+\n+  float get_value (float ptem,\n+                   const void *base,\n+                   hb_array_t<const F16DOT16> size_table) const\n+  {\n+    const FWORD *values = (base+valuesZ).arrayZ;\n+\n+    unsigned int n_sizes = size_table.length;\n+\n+    \/*\n+     * Choose size.\n+     *\/\n+    if (!n_sizes) return 0.f;\n+    if (n_sizes == 1) return values[0];\n+\n+    \/\/ At least two entries.\n+\n+    unsigned i;\n+    for (i = 0; i < n_sizes; i++)\n+      if (size_table[i].to_float () >= ptem)\n+        break;\n+\n+    \/\/ Boundary conditions.\n+    if (i == 0)       return values[0];\n+    if (i == n_sizes) return values[n_sizes - 1];\n+\n+    \/\/ Exact match.\n+    if (size_table[i].to_float () == ptem) return values[i];\n+\n+    \/\/ Interpolate.\n+    return interpolate_at (i - 1, ptem, base, size_table);\n+  }\n@@ -56,2 +107,3 @@\n-  bool sanitize (hb_sanitize_context_t *c, const void *base,\n-                 unsigned int table_size) const\n+  bool sanitize (hb_sanitize_context_t *c,\n+                 const void *base,\n+                 unsigned int n_sizes) const\n@@ -61,1 +113,1 @@\n-                          (valuesZ.sanitize (c, base, table_size))));\n+                          (valuesZ.sanitize (c, base, n_sizes))));\n@@ -79,4 +131,1 @@\n-  float interpolate_at (unsigned int idx,\n-                        float target_size,\n-                        const TrackTableEntry &trackTableEntry,\n-                        const void *base) const\n+  float get_tracking (const void *base, float ptem, float track = 0.f) const\n@@ -84,2 +133,2 @@\n-    unsigned int sizes = nSizes;\n-    hb_array_t<const F16DOT16> size_table ((base+sizeTable).arrayZ, sizes);\n+    unsigned count = nTracks;\n+    hb_array_t<const F16DOT16> size_table = (base+sizeTable).as_array (nSizes);\n@@ -87,6 +136,2 @@\n-    float s0 = size_table[idx].to_float ();\n-    float s1 = size_table[idx + 1].to_float ();\n-    float t = unlikely (s0 == s1) ? 0.f : (target_size - s0) \/ (s1 - s0);\n-    return t * trackTableEntry.get_value (base, idx + 1, sizes) +\n-           (1.f - t) * trackTableEntry.get_value (base, idx, sizes);\n-  }\n+    if (!count) return 0.f;\n+    if (count == 1) return trackTable[0].get_value (ptem, base, size_table);\n@@ -94,21 +139,1 @@\n-  int get_tracking (const void *base, float ptem) const\n-  {\n-    \/*\n-     * Choose track.\n-     *\/\n-    const TrackTableEntry *trackTableEntry = nullptr;\n-    unsigned int count = nTracks;\n-    for (unsigned int i = 0; i < count; i++)\n-    {\n-      \/* Note: Seems like the track entries are sorted by values.  But the\n-       * spec doesn't explicitly say that.  It just mentions it in the example. *\/\n-\n-      \/* For now we only seek for track entries with zero tracking value *\/\n-\n-      if (trackTable[i].get_track_value () == 0.f)\n-      {\n-        trackTableEntry = &trackTable[i];\n-        break;\n-      }\n-    }\n-    if (!trackTableEntry) return 0;\n+    \/\/ At least two entries.\n@@ -116,12 +141,13 @@\n-    \/*\n-     * Choose size.\n-     *\/\n-    unsigned int sizes = nSizes;\n-    if (!sizes) return 0;\n-    if (sizes == 1) return trackTableEntry->get_value (base, 0, sizes);\n-\n-    hb_array_t<const F16DOT16> size_table ((base+sizeTable).arrayZ, sizes);\n-    unsigned int size_index;\n-    for (size_index = 0; size_index < sizes - 1; size_index++)\n-      if (size_table[size_index].to_float () >= ptem)\n-        break;\n+    unsigned i = 0;\n+    unsigned j = count - 1;\n+\n+    \/\/ Find the two entries that track is between.\n+    while (i + 1 < count && trackTable[i + 1].get_track_value () < track)\n+      i++;\n+    while (j > 0 && trackTable[j - 1].get_track_value () > track)\n+      j--;\n+\n+    \/\/ Exact match.\n+    if (i == j) return trackTable[i].get_value (ptem, base, size_table);\n+\n+    \/\/ Interpolate.\n@@ -129,2 +155,8 @@\n-    return roundf (interpolate_at (size_index ? size_index - 1 : 0, ptem,\n-                                   *trackTableEntry, base));\n+    float t0 = trackTable[i].get_track_value ();\n+    float t1 = trackTable[j].get_track_value ();\n+\n+    float t = (track - t0) \/ (t1 - t0);\n+\n+    float a = trackTable[i].get_value (ptem, base, size_table);\n+    float b = trackTable[j].get_value (ptem, base, size_table);\n+    return a + t * (b - a);\n@@ -137,0 +169,1 @@\n+                          hb_barrier () &&\n@@ -160,1 +193,6 @@\n-  bool apply (hb_aat_apply_context_t *c) const\n+  hb_position_t get_h_tracking (hb_font_t *font, float track = 0.f) const\n+  {\n+    float ptem = font->ptem > 0.f ? font->ptem : HB_CORETEXT_DEFAULT_FONT_SIZE;\n+    return font->em_scalef_x ((this+horizData).get_tracking (this, ptem, track));\n+  }\n+  hb_position_t get_v_tracking (hb_font_t *font, float track = 0.f) const\n@@ -162,37 +200,2 @@\n-    TRACE_APPLY (this);\n-\n-    hb_mask_t trak_mask = c->plan->trak_mask;\n-\n-    const float ptem = c->font->ptem;\n-    if (unlikely (ptem <= 0.f))\n-      return_trace (false);\n-\n-    hb_buffer_t *buffer = c->buffer;\n-    if (HB_DIRECTION_IS_HORIZONTAL (buffer->props.direction))\n-    {\n-      const TrackData &trackData = this+horizData;\n-      int tracking = trackData.get_tracking (this, ptem);\n-      hb_position_t offset_to_add = c->font->em_scalef_x (tracking \/ 2);\n-      hb_position_t advance_to_add = c->font->em_scalef_x (tracking);\n-      foreach_grapheme (buffer, start, end)\n-      {\n-        if (!(buffer->info[start].mask & trak_mask)) continue;\n-        buffer->pos[start].x_advance += advance_to_add;\n-        buffer->pos[start].x_offset += offset_to_add;\n-      }\n-    }\n-    else\n-    {\n-      const TrackData &trackData = this+vertData;\n-      int tracking = trackData.get_tracking (this, ptem);\n-      hb_position_t offset_to_add = c->font->em_scalef_y (tracking \/ 2);\n-      hb_position_t advance_to_add = c->font->em_scalef_y (tracking);\n-      foreach_grapheme (buffer, start, end)\n-      {\n-        if (!(buffer->info[start].mask & trak_mask)) continue;\n-        buffer->pos[start].y_advance += advance_to_add;\n-        buffer->pos[start].y_offset += offset_to_add;\n-      }\n-    }\n-\n-    return_trace (true);\n+    float ptem = font->ptem > 0.f ? font->ptem : HB_CORETEXT_DEFAULT_FONT_SIZE;\n+    return font->em_scalef_y ((this+vertData).get_tracking (this, ptem, track));\n@@ -206,0 +209,1 @@\n+                          hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-trak-table.hh","additions":95,"deletions":91,"binary":false,"changes":186,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#include \"hb-aat-layout-trak-table.hh\"\n+#include \"hb-aat-layout-trak-table.hh\" \/\/ Just so we compile it; unused otherwise.\n@@ -40,0 +40,3 @@\n+#include \"hb-ot-layout-gsub-table.hh\"\n+#include \"hb-ot-layout-gdef-table.hh\"\n+\n@@ -210,0 +213,30 @@\n+bool\n+AAT::morx::is_blocklisted (hb_blob_t *blob,\n+                           hb_face_t *face) const\n+{\n+#ifdef HB_NO_AAT_LAYOUT_BLOCKLIST\n+  return false;\n+#endif\n+\n+  switch HB_CODEPOINT_ENCODE3 (blob->length,\n+                               face->table.GSUB->table.get_length (),\n+                               face->table.GDEF->table.get_length ())\n+  {\n+    \/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/4108\n+       sha1sum:a71ca6813b7e56a772cffff7c24a5166b087197c  AALMAGHRIBI.ttf *\/\n+    case HB_CODEPOINT_ENCODE3 (19892, 2794, 340):\n+      return true;\n+  }\n+  return false;\n+}\n+\n+bool\n+AAT::mort::is_blocklisted (hb_blob_t *blob,\n+                           hb_face_t *face) const\n+{\n+#ifdef HB_NO_AAT_LAYOUT_BLOCKLIST\n+  return false;\n+#endif\n+  return false;\n+}\n+\n@@ -214,1 +247,1 @@\n-  const AAT::morx& morx = *mapper->face->table.morx;\n+  const AAT::morx& morx = *mapper->face->table.morx->table;\n@@ -221,1 +254,1 @@\n-  const AAT::mort& mort = *mapper->face->table.mort;\n+  const AAT::mort& mort = *mapper->face->table.mort->table;\n@@ -246,2 +279,2 @@\n-  return face->table.morx->has_data () ||\n-         face->table.mort->has_data ();\n+  return face->table.morx->table->has_data () ||\n+         face->table.mort->table->has_data ();\n@@ -263,3 +296,0 @@\n-  hb_blob_t *morx_blob = font->face->table.morx.get_blob ();\n-  const AAT::morx& morx = *morx_blob->as<AAT::morx> ();\n-  if (morx.has_data ())\n@@ -267,5 +297,10 @@\n-    AAT::hb_aat_apply_context_t c (plan, font, buffer, morx_blob);\n-    if (!buffer->message (font, \"start table morx\")) return;\n-    morx.apply (&c, map);\n-    (void) buffer->message (font, \"end table morx\");\n-    return;\n+    auto &accel = *font->face->table.morx;\n+    const AAT::morx& morx = *accel.table;\n+    if (morx.has_data ())\n+    {\n+      AAT::hb_aat_apply_context_t c (plan, font, buffer, accel.get_blob ());\n+      if (!buffer->message (font, \"start table morx\")) return;\n+      morx.apply (&c, map, accel);\n+      (void) buffer->message (font, \"end table morx\");\n+      return;\n+    }\n@@ -274,3 +309,0 @@\n-  hb_blob_t *mort_blob = font->face->table.mort.get_blob ();\n-  const AAT::mort& mort = *mort_blob->as<AAT::mort> ();\n-  if (mort.has_data ())\n@@ -278,5 +310,10 @@\n-    AAT::hb_aat_apply_context_t c (plan, font, buffer, mort_blob);\n-    if (!buffer->message (font, \"start table mort\")) return;\n-    mort.apply (&c, map);\n-    (void) buffer->message (font, \"end table mort\");\n-    return;\n+    auto &accel = *font->face->table.mort;\n+    const AAT::mort& mort = *accel.table;\n+    if (mort.has_data ())\n+    {\n+      AAT::hb_aat_apply_context_t c (plan, font, buffer, accel.get_blob ());\n+      if (!buffer->message (font, \"start table mort\")) return;\n+      mort.apply (&c, map, accel);\n+      (void) buffer->message (font, \"end table mort\");\n+      return;\n+    }\n@@ -325,1 +362,1 @@\n-  return face->table.kerx->has_data ();\n+  return face->table.kerx->table->has_data ();\n@@ -333,2 +370,1 @@\n-  hb_blob_t *kerx_blob = font->face->table.kerx.get_blob ();\n-  const AAT::kerx& kerx = *kerx_blob->as<AAT::kerx> ();\n+  auto &accel = *font->face->table.kerx;\n@@ -336,1 +372,1 @@\n-  AAT::hb_aat_apply_context_t c (plan, font, buffer, kerx_blob);\n+  AAT::hb_aat_apply_context_t c (plan, font, buffer, accel.get_blob ());\n@@ -339,1 +375,1 @@\n-  kerx.apply (&c);\n+  accel.apply (&c);\n@@ -361,11 +397,0 @@\n-void\n-hb_aat_layout_track (const hb_ot_shape_plan_t *plan,\n-                     hb_font_t *font,\n-                     hb_buffer_t *buffer)\n-{\n-  const AAT::trak& trak = *font->face->table.trak;\n-\n-  AAT::hb_aat_apply_context_t c (plan, font, buffer);\n-  trak.apply (&c);\n-}\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout.cc","additions":62,"deletions":37,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @HB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION: [Cursive Connection](https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM09\/AppendixF.html#Type2)\n+ * @HB_AAT_LAYOUT_FEATURE_TYPE_CURSIVE_CONNECTION: [Cursive Connection](https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM09\/AppendixF.html#Type2)\n@@ -91,1 +91,1 @@\n-  HB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION                 = 2,\n+  HB_AAT_LAYOUT_FEATURE_TYPE_CURSIVE_CONNECTION                 = 2,\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,3 @@\n+\/* https:\/\/developer.apple.com\/documentation\/coretext\/1508745-ctfontcreatewithgraphicsfont *\/\n+#define HB_CORETEXT_DEFAULT_FONT_SIZE 12.f\n+\n@@ -71,5 +74,0 @@\n-HB_INTERNAL void\n-hb_aat_layout_track (const hb_ot_shape_plan_t *plan,\n-                     hb_font_t *font,\n-                     hb_buffer_t *buffer);\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout.hh","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,3 @@\n-    return_trace (c->check_struct (this) && (base+tag).sanitize (c, length));\n+    return_trace (c->check_struct (this) &&\n+                  hb_barrier () &&\n+                  (base+tag).sanitize (c, length));\n@@ -76,0 +78,1 @@\n+                          hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-ltag-table.hh","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+  feature_events.alloc_exact (features.length * 2 + 1);\n@@ -93,1 +94,1 @@\n-    auto &feature = features[i];\n+    auto &feature = features.arrayZ[i];\n@@ -95,1 +96,1 @@\n-    if (features[i].start == features[i].end)\n+    if (feature.start == feature.end)\n@@ -101,1 +102,1 @@\n-    event->index = features[i].start;\n+    event->index = feature.start;\n@@ -106,1 +107,1 @@\n-    event->index = features[i].end;\n+    event->index = feature.end;\n@@ -142,1 +143,1 @@\n-          if (current_features[i].type != current_features[j].type ||\n+          if (current_features.arrayZ[i].type != current_features.arrayZ[j].type ||\n@@ -146,2 +147,2 @@\n-              (!current_features[i].is_exclusive && ((current_features[i].setting & ~1) != (current_features[j].setting & ~1))))\n-            current_features[++j] = current_features[i];\n+              (!current_features.arrayZ[i].is_exclusive && ((current_features.arrayZ[i].setting & ~1) != (current_features.arrayZ[j].setting & ~1))))\n+            current_features.arrayZ[++j] = current_features.arrayZ[i];\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-map.cc","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -205,0 +205,3 @@\n+static inline double\n+_hb_roundf (double x) { return floor (x + .5); }\n+\n@@ -207,0 +210,1 @@\n+\n@@ -285,1 +289,1 @@\n-#define mix(h) (                                        \\\n+#define fasthash_mix(h) (                                       \\\n@@ -309,1 +313,1 @@\n-            h ^= mix(v);\n+            h ^= fasthash_mix(v);\n@@ -319,1 +323,1 @@\n-            h ^= mix(v);\n+            h ^= fasthash_mix(v);\n@@ -335,1 +339,1 @@\n-                h ^= mix(v);\n+                h ^= fasthash_mix(v);\n@@ -339,1 +343,1 @@\n-        return mix(h);\n+        return fasthash_mix(h);\n@@ -674,1 +678,1 @@\n-  friend void swap (hb_pair_t& a, hb_pair_t& b)\n+  friend void swap (hb_pair_t& a, hb_pair_t& b) noexcept\n@@ -1056,0 +1060,12 @@\n+template <typename K, typename V>\n+static int\n+_hb_cmp_operator (const void *pkey, const void *pval)\n+{\n+  const K& key = * (const K*) pkey;\n+  const V& val = * (const V*) pval;\n+\n+  if (key < val) return -1;\n+  if (key > val) return  1;\n+  return 0;\n+}\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-algs.hh","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+  static constexpr bool realloc_move = true;\n+\n@@ -252,1 +254,2 @@\n-    for (unsigned lhs = start, rhs = end - 1; lhs < rhs; lhs++, rhs--)\n+    unsigned stop = start + (end - start) \/ 2;\n+    for (unsigned lhs = start, rhs = end - 1; lhs < stop; lhs++, rhs--)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-array.hh","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-#define _hb_compiler_memory_r_barrier() asm volatile(\"\": : :\"memory\")\n+static inline void _hb_compiler_memory_r_barrier () { asm volatile(\"\": : :\"memory\"); }\n@@ -126,1 +126,1 @@\n-#define _hb_compiler_memory_r_barrier() do {} while (0)\n+static inline void _hb_compiler_memory_r_barrier () {}\n@@ -215,0 +215,1 @@\n+  operator bool () const { return get_acquire () != nullptr; }\n@@ -221,0 +222,6 @@\n+static inline bool hb_barrier ()\n+{\n+  _hb_compiler_memory_r_barrier ();\n+  return true;\n+}\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-atomic.hh","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -81,0 +81,22 @@\n+  operator bool () const\n+  {\n+    for (unsigned int i = 0; i < ARRAY_LENGTH (v); i++)\n+      if (v[i])\n+        return true;\n+    return false;\n+  }\n+  operator unsigned int () const\n+  {\n+    unsigned int r = 0;\n+    for (unsigned int i = 0; i < ARRAY_LENGTH (v); i++)\n+      r += hb_popcount (v[i]);\n+    return r;\n+  }\n+  bool operator == (const hb_vector_size_t &o) const\n+  {\n+    for (unsigned int i = 0; i < ARRAY_LENGTH (v); i++)\n+      if (v[i] != o.v[i])\n+        return false;\n+    return true;\n+  }\n+\n@@ -92,0 +114,2 @@\n+  hb_bit_page_t () { init0 (); }\n+\n@@ -104,4 +128,3 @@\n-    return\n-    + hb_iter (v)\n-    | hb_none\n-    ;\n+    bool empty = !v;\n+    if (empty) population = 0;\n+    return empty;\n@@ -118,0 +141,4 @@\n+  bool may_have (hb_codepoint_t g) const { return get (g); }\n+\n+  bool operator [] (hb_codepoint_t g) const { return get (g); }\n+  bool operator () (hb_codepoint_t g) const { return get (g); }\n@@ -223,1 +250,2 @@\n-  bool is_equal (const hb_bit_page_t &other) const\n+  bool is_equal (const hb_bit_page_t &other) const { return v == other.v; }\n+  bool intersects (const hb_bit_page_t &other) const\n@@ -226,3 +254,3 @@\n-      if (v[i] != other.v[i])\n-        return false;\n-    return true;\n+      if (v[i] & other.v[i])\n+        return true;\n+    return false;\n@@ -230,0 +258,3 @@\n+  bool may_intersect (const hb_bit_page_t &other) const\n+  { return intersects (other); }\n+\n@@ -244,1 +275,1 @@\n-  unsigned int get_population () const\n+  unsigned get_population () const\n@@ -247,5 +278,1 @@\n-    population =\n-    + hb_iter (v)\n-    | hb_reduce ([] (unsigned pop, const elt_t &_) { return pop + hb_popcount (_); }, 0u)\n-    ;\n-    return population;\n+    return population = v;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-bit-page.hh","additions":41,"deletions":14,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  hb_bit_set_invertible_t (hb_bit_set_invertible_t&& other) : hb_bit_set_invertible_t () { hb_swap (*this, other); }\n+  hb_bit_set_invertible_t (hb_bit_set_invertible_t&& other)  noexcept : hb_bit_set_invertible_t () { hb_swap (*this, other); }\n@@ -44,2 +44,2 @@\n-  hb_bit_set_invertible_t& operator= (hb_bit_set_invertible_t&& other) { hb_swap (*this, other); return *this; }\n-  friend void swap (hb_bit_set_invertible_t &a, hb_bit_set_invertible_t &b)\n+  hb_bit_set_invertible_t& operator= (hb_bit_set_invertible_t&& other)  noexcept { hb_swap (*this, other); return *this; }\n+  friend void swap (hb_bit_set_invertible_t &a, hb_bit_set_invertible_t &b) noexcept\n@@ -129,0 +129,1 @@\n+  bool may_have (hb_codepoint_t g) const { return get (g); }\n@@ -142,0 +143,3 @@\n+  bool may_intersect (const hb_bit_set_invertible_t &other) const\n+  { return inverted || other.inverted || s.intersects (other.s); }\n+\n@@ -362,2 +366,2 @@\n-    void __next__ () { s->next (&v); if (l) l--; }\n-    void __prev__ () { s->previous (&v); }\n+    void __next__ () { s->next (&v); if (likely (l)) l--; }\n+    void __prev__ () { s->previous (&v); l++; }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-bit-set-invertible.hh","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  hb_bit_set_t ( hb_bit_set_t&& other) : hb_bit_set_t () { hb_swap (*this, other); }\n+  hb_bit_set_t ( hb_bit_set_t&& other)  noexcept : hb_bit_set_t () { hb_swap (*this, other); }\n@@ -43,2 +43,2 @@\n-  hb_bit_set_t& operator= (hb_bit_set_t&& other) { hb_swap (*this, other); return *this; }\n-  friend void swap (hb_bit_set_t &a, hb_bit_set_t &b)\n+  hb_bit_set_t& operator= (hb_bit_set_t&& other)  noexcept { hb_swap (*this, other); return *this; }\n+  friend void swap (hb_bit_set_t &a, hb_bit_set_t &b) noexcept\n@@ -91,1 +91,1 @@\n-    if (pages.length == 0 && count == 1)\n+    if (pages.length < count && count <= 2)\n@@ -94,1 +94,2 @@\n-    if (unlikely (!pages.resize (count, clear, exact_size) || !page_map.resize (count, clear, exact_size)))\n+    if (unlikely (!pages.resize (count, clear, exact_size) ||\n+        !page_map.resize (count, clear)))\n@@ -300,1 +301,1 @@\n-        int m = (int) page_map[i].major;\n+        int m = (int) page_map.arrayZ[i].major;\n@@ -302,1 +303,1 @@\n-          page_map[write_index++] = page_map[i];\n+          page_map.arrayZ[write_index++] = page_map.arrayZ[i];\n@@ -348,0 +349,1 @@\n+  bool may_have (hb_codepoint_t g) const { return get (g); }\n@@ -361,0 +363,25 @@\n+  bool intersects (const hb_bit_set_t &other) const\n+  {\n+    unsigned int na = pages.length;\n+    unsigned int nb = other.pages.length;\n+\n+    unsigned int a = 0, b = 0;\n+    for (; a < na && b < nb; )\n+    {\n+      if (page_map.arrayZ[a].major == other.page_map.arrayZ[b].major)\n+      {\n+        if (page_at (a).intersects (other.page_at (b)))\n+          return true;\n+        a++;\n+        b++;\n+      }\n+      else if (page_map.arrayZ[a].major < other.page_map.arrayZ[b].major)\n+        a++;\n+      else\n+        b++;\n+    }\n+    return false;\n+  }\n+  bool may_intersect (const hb_bit_set_t &other) const\n+  { return intersects (other); }\n+\n@@ -392,1 +419,1 @@\n-      if (page_map[a].major != other.page_map[b].major ||\n+      if (page_map.arrayZ[a].major != other.page_map.arrayZ[b].major ||\n@@ -415,2 +442,2 @@\n-      uint32_t spm = page_map[spi].major;\n-      uint32_t lpm = larger_set.page_map[lpi].major;\n+      uint32_t spm = page_map.arrayZ[spi].major;\n+      uint32_t lpm = larger_set.page_map.arrayZ[lpi].major;\n@@ -506,1 +533,1 @@\n-      if (page_map[a].major == other.page_map[b].major)\n+      if (page_map.arrayZ[a].major == other.page_map.arrayZ[b].major)\n@@ -515,1 +542,1 @@\n-            page_map[write_index] = page_map[a];\n+            page_map.arrayZ[write_index] = page_map.arrayZ[a];\n@@ -523,1 +550,1 @@\n-      else if (page_map[a].major < other.page_map[b].major)\n+      else if (page_map.arrayZ[a].major < other.page_map.arrayZ[b].major)\n@@ -768,2 +795,2 @@\n-      uint32_t base = major_start (page_map[i].major);\n-      unsigned int n = pages[page_map[i].index].write (base, start_page_value, out, size);\n+      uint32_t base = major_start (page_map.arrayZ[i].major);\n+      unsigned int n = pages[page_map.arrayZ[i].index].write (base, start_page_value, out, size);\n@@ -817,2 +844,2 @@\n-      uint32_t base = major_start (page_map[i].major);\n-      unsigned int n = pages[page_map[i].index].write_inverted (base, start_page_value, out, size, &next_value);\n+      uint32_t base = major_start (page_map.arrayZ[i].major);\n+      unsigned int n = pages[page_map.arrayZ[i].index].write_inverted (base, start_page_value, out, size, &next_value);\n@@ -849,2 +876,2 @@\n-      const auto& map = page_map[i];\n-      const auto& page = pages[map.index];\n+      const auto& map = page_map.arrayZ[i];\n+      const auto& page = pages.arrayZ[map.index];\n@@ -862,2 +889,2 @@\n-      const auto& map = page_map[(unsigned) i];\n-      const auto& page = pages[map.index];\n+      const auto& map = page_map.arrayZ[(unsigned) i];\n+      const auto& page = pages.arrayZ[map.index];\n@@ -964,1 +991,1 @@\n-    return &pages.arrayZ[page_map[i].index];\n+    return &pages.arrayZ[page_map.arrayZ[i].index];\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-bit-set.hh","additions":49,"deletions":22,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -601,0 +601,5 @@\n+ * The filename is passed directly to the system on all platforms,\n+ * except on Windows, where the filename is interpreted as UTF-8.\n+ * Only if the filename is not valid UTF-8, it will be interpreted\n+ * according to the system codepage.\n+ *\n@@ -615,1 +620,1 @@\n- * @file_name: A font filename\n+ * @file_name: A filename\n@@ -617,2 +622,6 @@\n- * Creates a new blob containing the data from the\n- * specified binary font file.\n+ * Creates a new blob containing the data from the specified file.\n+ *\n+ * The filename is passed directly to the system on all platforms,\n+ * except on Windows, where the filename is interpreted as UTF-8.\n+ * Only if the filename is not valid UTF-8, it will be interpreted\n+ * according to the system codepage.\n@@ -675,0 +684,1 @@\n+  int conversion;\n@@ -678,1 +688,9 @@\n-  mbstowcs (wchar_file_name, file_name, size);\n+\n+  \/* Assume file name is given in UTF-8 encoding *\/\n+  conversion = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, file_name, -1, wchar_file_name, size);\n+  if (conversion <= 0)\n+  {\n+    \/* Conversion failed due to invalid UTF-8 characters,\n+       Repeat conversion based on system code page *\/\n+    mbstowcs(wchar_file_name, file_name, size);\n+  }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-blob.cc","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-        0u, 0u, 9u, 123u, 9u, 34u, 97u, 117u, 120u, 121u, 34u, 34u, 9u, 58u, 9u, 57u,\n-        48u, 57u, 9u, 125u, 9u, 125u, 9u, 93u, 9u, 125u, 34u, 34u, 9u, 58u, 9u, 57u,\n+        0u, 0u, 9u, 123u, 9u, 123u, 9u, 34u, 97u, 117u, 120u, 121u, 34u, 34u, 9u, 58u,\n+        9u, 57u, 48u, 57u, 9u, 125u, 9u, 125u, 9u, 125u, 34u, 34u, 9u, 58u, 9u, 57u,\n@@ -44,1 +44,1 @@\n-        9u, 123u, 0u, 0u, 0\n+        9u, 93u, 9u, 123u, 0u, 0u, 0\n@@ -48,2 +48,2 @@\n-        0, 115, 26, 21, 2, 1, 50, 49,\n-        10, 117, 117, 85, 117, 1, 50, 49,\n+        0, 115, 115, 26, 21, 2, 1, 50,\n+        49, 10, 117, 117, 117, 1, 50, 49,\n@@ -55,1 +55,1 @@\n-        115, 0\n+        85, 115, 0\n@@ -59,8 +59,8 @@\n-        0, 0, 116, 143, 165, 168, 170, 221,\n-        271, 282, 400, 518, 604, 722, 724, 775,\n-        825, 836, 954, 1072, 1074, 1076, 1127, 1177,\n-        1295, 1413, 1416, 1418, 1469, 1519, 1530, 1648,\n-        1766, 1768, 1819, 1869, 1880, 1998, 2116, 2118,\n-        2120, 2171, 2221, 2339, 2457, 2459, 2510, 2560,\n-        2620, 2738, 2798, 2916, 3034, 3036, 3087, 3137,\n-        3255, 3371\n+        0, 0, 116, 232, 259, 281, 284, 286,\n+        337, 387, 398, 516, 634, 752, 754, 805,\n+        855, 866, 984, 1102, 1104, 1106, 1157, 1207,\n+        1325, 1443, 1446, 1448, 1499, 1549, 1560, 1678,\n+        1796, 1798, 1849, 1899, 1910, 2028, 2146, 2148,\n+        2150, 2201, 2251, 2369, 2487, 2489, 2540, 2590,\n+        2650, 2768, 2828, 2946, 3064, 3066, 3117, 3167,\n+        3285, 3371, 3487\n@@ -80,0 +80,1 @@\n+        1, 1, 1, 2, 1, 1, 1, 1,\n@@ -83,0 +84,2 @@\n+        1, 1, 1, 3, 1, 2, 2, 2,\n+        2, 2, 1, 1, 1, 1, 1, 1,\n@@ -84,2 +87,1 @@\n-        1, 1, 1, 2, 1, 3, 3, 3,\n-        3, 3, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 2, 1, 1, 1,\n@@ -87,2 +89,0 @@\n-        1, 1, 1, 1, 3, 1, 4, 1,\n-        5, 1, 6, 7, 1, 8, 9, 1,\n@@ -90,2 +90,0 @@\n-        1, 1, 1, 1, 10, 1, 11, 12,\n-        1, 13, 1, 13, 13, 13, 13, 13,\n@@ -94,1 +92,0 @@\n-        1, 1, 13, 1, 1, 1, 1, 1,\n@@ -97,2 +94,0 @@\n-        1, 1, 1, 1, 14, 1, 14, 14,\n-        14, 14, 14, 1, 1, 1, 1, 1,\n@@ -100,1 +95,0 @@\n-        1, 1, 1, 1, 1, 14, 1, 1,\n@@ -102,4 +96,0 @@\n-        1, 1, 15, 1, 1, 16, 17, 17,\n-        17, 17, 17, 17, 17, 17, 17, 1,\n-        18, 19, 19, 19, 19, 19, 19, 19,\n-        19, 19, 1, 20, 20, 20, 20, 20,\n@@ -108,2 +98,2 @@\n-        1, 1, 20, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 1, 21, 1,\n+        1, 1, 1, 1, 1, 1, 1, 3,\n+        1, 4, 4, 4, 4, 4, 1, 1,\n@@ -112,0 +102,2 @@\n+        4, 1, 5, 1, 6, 1, 7, 8,\n+        1, 9, 10, 1, 1, 1, 1, 1,\n@@ -113,0 +105,2 @@\n+        11, 1, 12, 13, 1, 14, 1, 14,\n+        14, 14, 14, 14, 1, 1, 1, 1,\n@@ -114,0 +108,1 @@\n+        1, 1, 1, 1, 1, 1, 14, 1,\n@@ -117,0 +112,1 @@\n+        15, 1, 15, 15, 15, 15, 15, 1,\n@@ -119,2 +115,6 @@\n-        1, 1, 1, 1, 1, 1, 1, 22,\n-        1, 23, 23, 23, 23, 23, 1, 1,\n+        1, 15, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 16, 1,\n+        1, 17, 18, 18, 18, 18, 18, 18,\n+        18, 18, 18, 1, 19, 20, 20, 20,\n+        20, 20, 20, 20, 20, 20, 1, 21,\n+        21, 21, 21, 21, 1, 1, 1, 1,\n@@ -122,0 +122,1 @@\n+        1, 1, 1, 1, 1, 1, 21, 1,\n@@ -123,2 +124,1 @@\n-        23, 1, 1, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 3, 1, 1, 1,\n+        1, 1, 22, 1, 1, 1, 1, 1,\n@@ -134,2 +134,2 @@\n-        1, 1, 1, 1, 1, 24, 1, 25,\n-        25, 25, 25, 25, 1, 1, 1, 1,\n+        1, 1, 1, 23, 1, 24, 24, 24,\n+        24, 24, 1, 1, 1, 1, 1, 1,\n@@ -137,1 +137,1 @@\n-        1, 1, 1, 1, 1, 1, 25, 1,\n+        1, 1, 1, 1, 24, 1, 1, 1,\n@@ -139,1 +139,1 @@\n-        1, 1, 26, 1, 1, 1, 1, 1,\n+        4, 1, 1, 1, 1, 1, 1, 1,\n@@ -145,2 +145,0 @@\n-        1, 1, 1, 27, 1, 20, 20, 20,\n-        20, 20, 1, 1, 1, 1, 1, 1,\n@@ -148,1 +146,0 @@\n-        1, 1, 1, 1, 20, 1, 1, 1,\n@@ -150,2 +147,0 @@\n-        21, 1, 1, 1, 19, 19, 19, 19,\n-        19, 19, 19, 19, 19, 19, 1, 1,\n@@ -154,0 +149,1 @@\n+        1, 25, 1, 21, 21, 21, 21, 21,\n@@ -156,0 +152,4 @@\n+        1, 1, 21, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 22, 1,\n+        1, 1, 20, 20, 20, 20, 20, 20,\n+        20, 20, 20, 20, 1, 1, 1, 1,\n@@ -160,2 +160,0 @@\n-        1, 22, 1, 28, 1, 28, 28, 28,\n-        28, 28, 1, 1, 1, 1, 1, 1,\n@@ -163,1 +161,0 @@\n-        1, 1, 1, 1, 28, 1, 1, 1,\n@@ -166,2 +163,2 @@\n-        1, 1, 1, 1, 1, 1, 29, 1,\n-        29, 29, 29, 29, 29, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 23,\n+        1, 26, 1, 26, 26, 26, 26, 26,\n@@ -169,1 +166,0 @@\n-        1, 1, 1, 1, 1, 1, 1, 29,\n@@ -171,5 +167,2 @@\n-        1, 1, 1, 1, 30, 1, 1, 31,\n-        32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 1, 33, 34, 34, 34, 34, 34,\n-        34, 34, 34, 34, 1, 35, 35, 35,\n-        35, 35, 1, 1, 1, 1, 1, 1,\n+        1, 1, 26, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n@@ -177,1 +170,2 @@\n-        1, 1, 1, 1, 35, 1, 1, 1,\n+        1, 1, 1, 1, 27, 1, 27, 27,\n+        27, 27, 27, 1, 1, 1, 1, 1,\n@@ -179,1 +173,1 @@\n-        36, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 27, 1, 1,\n@@ -181,0 +175,4 @@\n+        1, 1, 28, 1, 1, 29, 30, 30,\n+        30, 30, 30, 30, 30, 30, 30, 1,\n+        31, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 1, 33, 33, 33, 33, 33,\n@@ -183,0 +181,2 @@\n+        1, 1, 33, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 34, 1,\n@@ -189,1 +189,0 @@\n-        1, 37, 1, 35, 35, 35, 35, 35,\n@@ -192,4 +191,0 @@\n-        1, 1, 35, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 1, 36, 1,\n-        1, 1, 34, 34, 34, 34, 34, 34,\n-        34, 34, 34, 34, 1, 1, 1, 1,\n@@ -197,0 +192,2 @@\n+        1, 1, 1, 1, 1, 1, 1, 35,\n+        1, 33, 33, 33, 33, 33, 1, 1,\n@@ -199,0 +196,4 @@\n+        33, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 34, 1, 1, 1,\n+        32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 1, 1, 1, 1, 1, 1,\n@@ -203,3 +204,0 @@\n-        1, 1, 1, 1, 1, 1, 1, 37,\n-        1, 38, 1, 39, 1, 39, 39, 39,\n-        39, 39, 1, 1, 1, 1, 1, 1,\n@@ -207,1 +205,0 @@\n-        1, 1, 1, 1, 39, 1, 1, 1,\n@@ -210,2 +207,2 @@\n-        1, 1, 1, 1, 1, 1, 40, 1,\n-        40, 40, 40, 40, 40, 1, 1, 1,\n+        1, 1, 1, 1, 1, 35, 1, 36,\n+        1, 37, 1, 37, 37, 37, 37, 37,\n@@ -213,1 +210,12 @@\n-        1, 1, 1, 1, 1, 1, 1, 40,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 37, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 38, 1, 38, 38,\n+        38, 38, 38, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 38, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 39, 40, 40,\n+        40, 40, 40, 40, 40, 40, 40, 1,\n+        41, 41, 41, 41, 41, 1, 1, 1,\n@@ -216,2 +224,0 @@\n-        42, 42, 42, 42, 42, 42, 42, 42,\n-        42, 1, 43, 43, 43, 43, 43, 1,\n@@ -219,0 +225,1 @@\n+        1, 1, 1, 42, 1, 1, 1, 1,\n@@ -220,2 +227,0 @@\n-        1, 43, 1, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 44, 1, 1,\n@@ -230,0 +235,2 @@\n+        1, 1, 1, 1, 43, 1, 41, 41,\n+        41, 41, 41, 1, 1, 1, 1, 1,\n@@ -231,2 +238,1 @@\n-        1, 1, 1, 1, 1, 1, 45, 1,\n-        43, 43, 43, 43, 43, 1, 1, 1,\n+        1, 1, 1, 1, 1, 41, 1, 1,\n@@ -234,1 +240,2 @@\n-        1, 1, 1, 1, 1, 1, 1, 43,\n+        1, 42, 1, 1, 1, 44, 44, 44,\n+        44, 44, 44, 44, 44, 44, 44, 1,\n@@ -236,3 +243,0 @@\n-        1, 1, 1, 44, 1, 1, 1, 46,\n-        46, 46, 46, 46, 46, 46, 46, 46,\n-        46, 1, 1, 1, 1, 1, 1, 1,\n@@ -246,2 +250,2 @@\n-        1, 1, 1, 1, 45, 1, 47, 48,\n-        1, 49, 1, 49, 49, 49, 49, 49,\n+        1, 1, 43, 1, 45, 46, 1, 47,\n+        1, 47, 47, 47, 47, 47, 1, 1,\n@@ -250,1 +254,1 @@\n-        1, 1, 49, 1, 1, 1, 1, 1,\n+        47, 1, 1, 1, 1, 1, 1, 1,\n@@ -253,2 +257,2 @@\n-        1, 1, 1, 1, 50, 1, 50, 50,\n-        50, 50, 50, 1, 1, 1, 1, 1,\n+        1, 1, 48, 1, 48, 48, 48, 48,\n+        48, 1, 1, 1, 1, 1, 1, 1,\n@@ -256,1 +260,1 @@\n-        1, 1, 1, 1, 1, 50, 1, 1,\n+        1, 1, 1, 48, 1, 1, 1, 1,\n@@ -258,4 +262,4 @@\n-        1, 1, 51, 1, 1, 52, 53, 53,\n-        53, 53, 53, 53, 53, 53, 53, 1,\n-        54, 55, 55, 55, 55, 55, 55, 55,\n-        55, 55, 1, 56, 56, 56, 56, 56,\n+        49, 1, 1, 50, 51, 51, 51, 51,\n+        51, 51, 51, 51, 51, 1, 52, 53,\n+        53, 53, 53, 53, 53, 53, 53, 53,\n+        1, 54, 54, 54, 54, 54, 1, 1,\n@@ -264,2 +268,2 @@\n-        1, 1, 56, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 1, 57, 1,\n+        54, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 55, 1, 1, 1,\n@@ -275,2 +279,2 @@\n-        1, 1, 1, 1, 1, 1, 1, 58,\n-        1, 56, 56, 56, 56, 56, 1, 1,\n+        1, 1, 1, 1, 1, 56, 1, 54,\n+        54, 54, 54, 54, 1, 1, 1, 1,\n@@ -278,0 +282,1 @@\n+        1, 1, 1, 1, 1, 1, 54, 1,\n@@ -279,4 +284,2 @@\n-        56, 1, 1, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 57, 1, 1, 1,\n-        55, 55, 55, 55, 55, 55, 55, 55,\n-        55, 55, 1, 1, 1, 1, 1, 1,\n+        1, 1, 55, 1, 1, 1, 53, 53,\n+        53, 53, 53, 53, 53, 53, 53, 53,\n@@ -290,2 +293,0 @@\n-        1, 1, 1, 1, 1, 58, 1, 59,\n-        1, 59, 59, 59, 59, 59, 1, 1,\n@@ -293,0 +294,2 @@\n+        1, 1, 1, 56, 1, 57, 1, 57,\n+        57, 57, 57, 57, 1, 1, 1, 1,\n@@ -294,1 +297,13 @@\n-        59, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 57, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        58, 1, 58, 58, 58, 58, 58, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 58, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 59, 1,\n+        1, 60, 61, 61, 61, 61, 61, 61,\n+        61, 61, 61, 1, 62, 63, 63, 63,\n+        63, 63, 63, 63, 63, 63, 1, 64,\n+        64, 64, 64, 64, 1, 1, 1, 1,\n@@ -296,0 +311,1 @@\n+        1, 1, 1, 1, 1, 1, 64, 1,\n@@ -297,2 +313,1 @@\n-        1, 1, 60, 1, 60, 60, 60, 60,\n-        60, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 65, 1, 1, 1, 1, 1,\n@@ -300,1 +315,0 @@\n-        1, 1, 1, 60, 1, 1, 1, 1,\n@@ -302,4 +316,0 @@\n-        61, 1, 1, 62, 63, 63, 63, 63,\n-        63, 63, 63, 63, 63, 1, 64, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        1, 66, 66, 66, 66, 66, 1, 1,\n@@ -308,2 +318,0 @@\n-        66, 1, 1, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 67, 1, 1, 1,\n@@ -315,0 +323,2 @@\n+        1, 1, 1, 66, 1, 64, 64, 64,\n+        64, 64, 1, 1, 1, 1, 1, 1,\n@@ -316,0 +326,1 @@\n+        1, 1, 1, 1, 64, 1, 1, 1,\n@@ -317,0 +328,2 @@\n+        65, 1, 1, 1, 63, 63, 63, 63,\n+        63, 63, 63, 63, 63, 63, 1, 1,\n@@ -319,2 +332,0 @@\n-        1, 1, 1, 1, 1, 68, 1, 66,\n-        66, 66, 66, 66, 1, 1, 1, 1,\n@@ -322,1 +333,0 @@\n-        1, 1, 1, 1, 1, 1, 66, 1,\n@@ -324,2 +334,0 @@\n-        1, 1, 67, 1, 1, 1, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n@@ -330,0 +338,2 @@\n+        1, 66, 1, 67, 1, 68, 1, 68,\n+        68, 68, 68, 68, 1, 1, 1, 1,\n@@ -331,0 +341,1 @@\n+        1, 1, 1, 1, 1, 1, 68, 1,\n@@ -334,2 +345,1 @@\n-        1, 1, 1, 68, 1, 69, 1, 70,\n-        1, 70, 70, 70, 70, 70, 1, 1,\n+        69, 1, 69, 69, 69, 69, 69, 1,\n@@ -338,1 +348,1 @@\n-        70, 1, 1, 1, 1, 1, 1, 1,\n+        1, 69, 1, 1, 1, 1, 1, 1,\n@@ -340,0 +350,3 @@\n+        1, 70, 71, 71, 71, 71, 71, 71,\n+        71, 71, 71, 1, 72, 72, 72, 72,\n+        72, 1, 1, 1, 1, 1, 1, 1,\n@@ -341,2 +354,2 @@\n-        1, 1, 71, 1, 71, 71, 71, 71,\n-        71, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 72, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 73,\n@@ -344,1 +357,0 @@\n-        1, 1, 1, 71, 1, 1, 1, 1,\n@@ -346,3 +358,0 @@\n-        1, 1, 1, 72, 73, 73, 73, 73,\n-        73, 73, 73, 73, 73, 1, 74, 74,\n-        74, 74, 74, 1, 1, 1, 1, 1,\n@@ -350,1 +359,0 @@\n-        1, 1, 1, 1, 1, 74, 1, 1,\n@@ -352,1 +360,0 @@\n-        1, 75, 1, 1, 1, 1, 1, 1,\n@@ -359,0 +366,1 @@\n+        74, 1, 72, 72, 72, 72, 72, 1,\n@@ -361,0 +369,4 @@\n+        1, 72, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 73, 1, 1,\n+        1, 75, 75, 75, 75, 75, 75, 75,\n+        75, 75, 75, 1, 1, 1, 1, 1,\n@@ -362,2 +374,0 @@\n-        1, 1, 76, 1, 74, 74, 74, 74,\n-        74, 1, 1, 1, 1, 1, 1, 1,\n@@ -365,4 +375,0 @@\n-        1, 1, 1, 74, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 1, 1, 75,\n-        1, 1, 1, 77, 77, 77, 77, 77,\n-        77, 77, 77, 77, 77, 1, 1, 1,\n@@ -374,0 +380,2 @@\n+        1, 1, 1, 1, 1, 1, 74, 1,\n+        76, 1, 76, 76, 76, 76, 76, 1,\n@@ -376,0 +384,1 @@\n+        1, 76, 1, 1, 1, 1, 1, 1,\n@@ -377,2 +386,0 @@\n-        76, 1, 78, 1, 78, 78, 78, 78,\n-        78, 1, 1, 1, 1, 1, 1, 1,\n@@ -380,1 +387,2 @@\n-        1, 1, 1, 78, 1, 1, 1, 1,\n+        1, 1, 1, 77, 1, 77, 77, 77,\n+        77, 77, 1, 1, 1, 1, 1, 1,\n@@ -382,0 +390,1 @@\n+        1, 1, 1, 1, 77, 1, 78, 1,\n@@ -383,2 +392,10 @@\n-        1, 1, 1, 1, 1, 79, 1, 79,\n-        79, 79, 79, 79, 1, 1, 1, 1,\n+        1, 1, 1, 1, 79, 80, 80, 80,\n+        80, 80, 80, 80, 80, 80, 1, 82,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 83, 81, 84, 84, 84, 84, 84,\n@@ -386,13 +403,0 @@\n-        1, 1, 1, 1, 1, 1, 79, 1,\n-        80, 1, 1, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 1, 81, 82,\n-        82, 82, 82, 82, 82, 82, 82, 82,\n-        1, 84, 83, 83, 83, 83, 83, 83,\n-        83, 83, 83, 83, 83, 83, 83, 83,\n-        83, 83, 83, 83, 83, 83, 83, 83,\n-        83, 83, 83, 83, 83, 83, 83, 83,\n-        83, 83, 83, 83, 83, 83, 83, 83,\n-        83, 83, 83, 83, 83, 83, 83, 83,\n-        83, 83, 83, 83, 83, 83, 83, 83,\n-        83, 83, 83, 85, 83, 86, 86, 86,\n-        86, 86, 1, 1, 1, 1, 1, 1,\n@@ -400,1 +404,2 @@\n-        1, 1, 1, 1, 86, 1, 1, 1,\n+        1, 1, 84, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 85, 1,\n@@ -402,1 +407,0 @@\n-        87, 1, 1, 1, 1, 1, 1, 1,\n@@ -411,0 +415,2 @@\n+        1, 1, 1, 1, 1, 1, 1, 86,\n+        1, 81, 1, 1, 1, 1, 1, 1,\n@@ -412,1 +418,0 @@\n-        1, 88, 1, 83, 1, 1, 1, 1,\n@@ -418,0 +423,2 @@\n+        1, 1, 1, 81, 1, 87, 87, 87,\n+        87, 87, 1, 1, 1, 1, 1, 1,\n@@ -419,2 +426,1 @@\n-        1, 1, 1, 1, 1, 83, 1, 89,\n-        89, 89, 89, 89, 1, 1, 1, 1,\n+        1, 1, 1, 1, 87, 1, 1, 1,\n@@ -422,1 +428,1 @@\n-        1, 1, 1, 1, 1, 1, 89, 1,\n+        88, 1, 1, 1, 1, 1, 1, 1,\n@@ -424,1 +430,0 @@\n-        1, 1, 90, 1, 1, 1, 1, 1,\n@@ -433,0 +438,1 @@\n+        1, 89, 1, 87, 87, 87, 87, 87,\n@@ -434,2 +440,0 @@\n-        1, 1, 1, 91, 1, 89, 89, 89,\n-        89, 89, 1, 1, 1, 1, 1, 1,\n@@ -437,1 +441,4 @@\n-        1, 1, 1, 1, 89, 1, 1, 1,\n+        1, 1, 87, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 88, 1,\n+        1, 1, 90, 90, 90, 90, 90, 90,\n+        90, 90, 90, 90, 1, 1, 1, 1,\n@@ -439,2 +446,0 @@\n-        90, 1, 1, 1, 92, 92, 92, 92,\n-        92, 92, 92, 92, 92, 92, 1, 1,\n@@ -447,0 +452,2 @@\n+        1, 1, 1, 1, 1, 1, 1, 89,\n+        1, 91, 1, 91, 91, 91, 91, 91,\n@@ -449,2 +456,1 @@\n-        1, 91, 1, 93, 1, 93, 93, 93,\n-        93, 93, 1, 1, 1, 1, 1, 1,\n+        1, 1, 91, 1, 1, 1, 1, 1,\n@@ -452,1 +458,0 @@\n-        1, 1, 1, 1, 93, 1, 1, 1,\n@@ -454,0 +459,2 @@\n+        1, 1, 1, 1, 92, 1, 92, 92,\n+        92, 92, 92, 1, 1, 1, 1, 1,\n@@ -455,2 +462,1 @@\n-        1, 1, 1, 1, 1, 1, 94, 1,\n-        94, 94, 94, 94, 94, 1, 1, 1,\n+        1, 1, 1, 1, 1, 92, 1, 1,\n@@ -458,1 +464,3 @@\n-        1, 1, 1, 1, 1, 1, 1, 94,\n+        1, 1, 1, 1, 1, 93, 94, 94,\n+        94, 94, 94, 94, 94, 94, 94, 1,\n+        87, 87, 87, 87, 87, 1, 1, 1,\n@@ -460,3 +468,1 @@\n-        1, 1, 1, 1, 1, 1, 1, 95,\n-        96, 96, 96, 96, 96, 96, 96, 96,\n-        96, 1, 89, 89, 89, 89, 89, 1,\n+        1, 1, 1, 1, 1, 1, 1, 87,\n@@ -464,0 +470,3 @@\n+        1, 1, 1, 88, 1, 1, 1, 95,\n+        95, 95, 95, 95, 95, 95, 95, 95,\n+        95, 1, 1, 1, 1, 1, 1, 1,\n@@ -465,4 +474,0 @@\n-        1, 89, 1, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 90, 1, 1,\n-        1, 97, 97, 97, 97, 97, 97, 97,\n-        97, 97, 97, 1, 1, 1, 1, 1,\n@@ -475,0 +480,2 @@\n+        1, 1, 1, 1, 89, 1, 96, 96,\n+        96, 96, 96, 1, 1, 1, 1, 1,\n@@ -476,2 +483,1 @@\n-        1, 1, 1, 1, 1, 1, 91, 1,\n-        0, 0, 0, 0, 0, 1, 1, 1,\n+        1, 1, 1, 1, 1, 96, 1, 1,\n@@ -479,1 +485,1 @@\n-        1, 1, 1, 1, 1, 1, 1, 0,\n+        1, 97, 1, 1, 1, 1, 1, 1,\n@@ -485,0 +491,2 @@\n+        1, 1, 98, 1, 2, 2, 2, 2,\n+        2, 1, 1, 1, 1, 1, 1, 1,\n@@ -486,0 +494,1 @@\n+        1, 1, 1, 2, 1, 1, 1, 1,\n@@ -491,1 +500,7 @@\n-        1, 1, 2, 1, 1, 0\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 3, 1,\n+        1, 0\n@@ -495,13 +510,13 @@\n-        1, 0, 2, 2, 3, 4, 19, 25,\n-        38, 44, 52, 5, 13, 6, 7, 8,\n-        9, 12, 9, 12, 10, 2, 11, 10,\n-        11, 11, 56, 57, 14, 15, 16, 17,\n-        18, 17, 18, 10, 2, 11, 20, 21,\n-        22, 23, 24, 10, 2, 11, 24, 26,\n-        32, 27, 28, 29, 30, 31, 30, 31,\n-        10, 2, 11, 33, 34, 35, 36, 37,\n-        36, 37, 10, 2, 11, 39, 40, 41,\n-        42, 43, 10, 2, 11, 43, 45, 46,\n-        47, 50, 51, 47, 48, 49, 10, 2,\n-        11, 10, 2, 11, 51, 53, 54, 50,\n-        55, 55\n+        1, 0, 2, 3, 3, 4, 5, 19,\n+        25, 38, 44, 52, 6, 13, 7, 8,\n+        9, 10, 12, 10, 12, 11, 3, 56,\n+        11, 56, 14, 15, 16, 17, 18, 17,\n+        18, 11, 3, 56, 20, 21, 22, 23,\n+        24, 11, 3, 56, 24, 26, 32, 27,\n+        28, 29, 30, 31, 30, 31, 11, 3,\n+        56, 33, 34, 35, 36, 37, 36, 37,\n+        11, 3, 56, 39, 40, 41, 42, 43,\n+        11, 3, 56, 43, 45, 46, 47, 50,\n+        51, 47, 48, 49, 11, 3, 56, 11,\n+        3, 56, 51, 53, 54, 50, 55, 55,\n+        56, 57, 58\n@@ -511,13 +526,13 @@\n-        0, 0, 1, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 2,\n-        2, 2, 0, 0, 3, 3, 4, 0,\n-        5, 0, 0, 0, 0, 0, 2, 2,\n-        2, 0, 0, 6, 6, 7, 0, 0,\n-        0, 2, 2, 8, 8, 9, 0, 0,\n-        0, 0, 0, 2, 2, 2, 0, 0,\n-        10, 10, 11, 0, 0, 2, 2, 2,\n-        0, 0, 12, 12, 13, 0, 0, 0,\n-        2, 2, 14, 14, 15, 0, 0, 0,\n-        2, 16, 16, 0, 17, 0, 18, 18,\n-        19, 20, 20, 21, 17, 0, 0, 22,\n-        22, 23\n+        0, 0, 0, 1, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        2, 2, 2, 0, 0, 3, 3, 4,\n+        0, 5, 0, 0, 2, 2, 2, 0,\n+        0, 6, 6, 7, 0, 0, 0, 2,\n+        2, 8, 8, 9, 0, 0, 0, 0,\n+        0, 2, 2, 2, 0, 0, 10, 10,\n+        11, 0, 0, 2, 2, 2, 0, 0,\n+        12, 12, 13, 0, 0, 0, 2, 2,\n+        14, 14, 15, 0, 0, 0, 2, 16,\n+        16, 0, 17, 0, 18, 18, 19, 20,\n+        20, 21, 17, 0, 0, 22, 22, 23,\n+        0, 0, 0\n@@ -548,5 +563,0 @@\n-  while (p < pe && ISSPACE (*p))\n-    p++;\n-  if (p < pe && *p == (buffer->len ? ',' : '['))\n-    *end_ptr = ++p;\n-\n@@ -558,1 +568,1 @@\n-#line 559 \"hb-buffer-deserialize-json.hh\"\n+#line 569 \"hb-buffer-deserialize-json.hh\"\n@@ -563,1 +573,1 @@\n-#line 564 \"hb-buffer-deserialize-json.hh\"\n+#line 574 \"hb-buffer-deserialize-json.hh\"\n@@ -775,1 +785,1 @@\n-#line 776 \"hb-buffer-deserialize-json.hh\"\n+#line 786 \"hb-buffer-deserialize-json.hh\"\n@@ -787,1 +797,1 @@\n-#line 137 \"hb-buffer-deserialize-json.rl\"\n+#line 132 \"hb-buffer-deserialize-json.rl\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer-deserialize-json.hh","additions":222,"deletions":212,"binary":false,"changes":434,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-    if (0)\n+    if (false)\n@@ -291,1 +291,1 @@\n-      if (0)\n+      if (false)\n@@ -415,1 +415,1 @@\n-      buffer_verify_error (this, font, BUFFER_VERIFY_ERROR \"text was: %s.\", bytes.arrayZ);\n+      buffer_verify_error (this, font, BUFFER_VERIFY_ERROR \"text was: %s.\", bytes.arrayZ ? bytes.arrayZ : \"\");\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer-verify.cc","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -274,0 +274,1 @@\n+  not_found_variation_selector = src.not_found_variation_selector;\n@@ -286,0 +287,1 @@\n+  not_found_variation_selector = HB_CODEPOINT_INVALID;\n@@ -312,0 +314,1 @@\n+  random_state = 1;\n@@ -707,0 +710,1 @@\n+  HB_CODEPOINT_INVALID, \/* not_found_variation_selector *\/\n@@ -1362,0 +1366,83 @@\n+\/**\n+ * hb_buffer_set_not_found_variation_selector_glyph:\n+ * @buffer: An #hb_buffer_t\n+ * @not_found_variation_selector: the not-found-variation-selector #hb_codepoint_t\n+ *\n+ * Sets the #hb_codepoint_t that replaces variation-selector characters not resolved\n+ * in the font during shaping.\n+ *\n+ * The not-found-variation-selector glyph defaults to #HB_CODEPOINT_INVALID,\n+ * in which case an unresolved variation-selector will be removed from the glyph\n+ * string during shaping. This API allows for changing that and retaining a glyph,\n+ * such that the situation can be detected by the client and handled accordingly\n+ * (e.g. by using a different font).\n+ *\n+ * Since: 10.0.0\n+ **\/\n+void\n+hb_buffer_set_not_found_variation_selector_glyph (hb_buffer_t    *buffer,\n+                                                  hb_codepoint_t  not_found_variation_selector)\n+{\n+  buffer->not_found_variation_selector = not_found_variation_selector;\n+}\n+\n+\/**\n+ * hb_buffer_get_not_found_variation_selector_glyph:\n+ * @buffer: An #hb_buffer_t\n+ *\n+ * See hb_buffer_set_not_found_variation_selector_glyph().\n+ *\n+ * Return value:\n+ * The @buffer not-found-variation-selector #hb_codepoint_t\n+ *\n+ * Since: 10.0.0\n+ **\/\n+hb_codepoint_t\n+hb_buffer_get_not_found_variation_selector_glyph (const hb_buffer_t *buffer)\n+{\n+  return buffer->not_found_variation_selector;\n+}\n+\n+\/**\n+ * hb_buffer_set_random_state:\n+ * @buffer: An #hb_buffer_t\n+ * @state: the new random state\n+ *\n+ * Sets the random state of the buffer. The state changes\n+ * every time a glyph uses randomness (eg. the `rand`\n+ * OpenType feature). This function together with\n+ * hb_buffer_get_random_state() allow for transferring\n+ * the current random state to a subsequent buffer, to\n+ * get better randomness distribution.\n+ *\n+ * Defaults to 1 and when buffer contents are cleared.\n+ * A value of 0 disables randomness during shaping.\n+ *\n+ * Since: 8.4.0\n+ **\/\n+void\n+hb_buffer_set_random_state (hb_buffer_t    *buffer,\n+                            unsigned        state)\n+{\n+  if (unlikely (hb_object_is_immutable (buffer)))\n+    return;\n+\n+  buffer->random_state = state;\n+}\n+\n+\/**\n+ * hb_buffer_get_random_state:\n+ * @buffer: An #hb_buffer_t\n+ *\n+ * See hb_buffer_set_random_state().\n+ *\n+ * Return value:\n+ * The @buffer random state\n+ *\n+ * Since: 8.4.0\n+ **\/\n+unsigned\n+hb_buffer_get_random_state (const hb_buffer_t *buffer)\n+{\n+  return buffer->random_state;\n+}\n@@ -1899,1 +1986,1 @@\n- * @end: end index into source buffer to copy.  Use @HB_FEATURE_GLOBAL_END to copy to end of buffer.\n+ * @end: end index into source buffer to copy.  Use @UINT_MAX (or ((unsigned int) -1)) to copy to end of buffer.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer.cc","additions":88,"deletions":1,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -490,0 +490,13 @@\n+HB_EXTERN void\n+hb_buffer_set_not_found_variation_selector_glyph (hb_buffer_t    *buffer,\n+                                                  hb_codepoint_t  not_found_variation_selector);\n+\n+HB_EXTERN hb_codepoint_t\n+hb_buffer_get_not_found_variation_selector_glyph (const hb_buffer_t *buffer);\n+\n+HB_EXTERN void\n+hb_buffer_set_random_state (hb_buffer_t    *buffer,\n+                            unsigned        state);\n+\n+HB_EXTERN unsigned\n+hb_buffer_get_random_state (const hb_buffer_t *buffer);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer.h","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"hb-set-digest.hh\"\n@@ -55,0 +54,1 @@\n+  HB_BUFFER_SCRATCH_FLAG_HAS_VARIATION_SELECTOR_FALLBACK= 0x00000080u,\n@@ -83,0 +83,1 @@\n+  hb_codepoint_t not_found_variation_selector; \/* HB_CODEPOINT_INVALID or something else. *\/\n@@ -119,0 +120,1 @@\n+  uint32_t random_state;\n@@ -182,0 +184,1 @@\n+  HB_ALWAYS_INLINE\n@@ -183,0 +186,1 @@\n+  HB_ALWAYS_INLINE\n@@ -185,0 +189,1 @@\n+  HB_ALWAYS_INLINE\n@@ -186,0 +191,1 @@\n+  HB_ALWAYS_INLINE\n@@ -188,0 +194,1 @@\n+  HB_ALWAYS_INLINE\n@@ -189,0 +196,1 @@\n+  HB_ALWAYS_INLINE\n@@ -191,7 +199,3 @@\n-  hb_set_digest_t digest () const\n-  {\n-    hb_set_digest_t d;\n-    d.init ();\n-    d.add_array (&info[0].codepoint, len, sizeof (info[0]));\n-    return d;\n-  }\n+  template <typename set_t>\n+  void collect_codepoints (set_t &d) const\n+  { d.clear (); d.add_array (&info[0].codepoint, len, sizeof (info[0])); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer.hh","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -525,1 +525,1 @@\n-    values.alloc (n, true);\n+    values.alloc_exact (n);\n@@ -627,1 +627,0 @@\n-          env.set_error ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff-interp-common.hh","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-  unsigned int  charStringsOffset;\n-  unsigned int  FDArrayOffset;\n+  int  charStringsOffset;\n+  int  FDArrayOffset;\n@@ -87,1 +87,1 @@\n-    char buf[32];\n+    char buf[32] = {0};\n@@ -160,1 +160,1 @@\n-        dictval.charStringsOffset = env.argStack.pop_uint ();\n+        dictval.charStringsOffset = env.argStack.pop_int ();\n@@ -164,1 +164,1 @@\n-        dictval.FDArrayOffset = env.argStack.pop_uint ();\n+        dictval.FDArrayOffset = env.argStack.pop_int ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff-interp-dict-common.hh","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -79,3 +79,0 @@\n-    seen_blend = false;\n-    seen_vsindex_ = false;\n-    scalars.init ();\n@@ -88,1 +85,0 @@\n-    scalars.fini ();\n@@ -171,1 +167,1 @@\n-  const  CFF2VariationStore *varStore;\n+  const  CFF2ItemVariationStore *varStore;\n@@ -176,2 +172,2 @@\n-  bool    seen_vsindex_;\n-  bool    seen_blend;\n+  bool    seen_vsindex_ = false;\n+  bool    seen_blend = false;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff2-interp-cs.hh","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -628,0 +628,3 @@\n+    \/* Unicode-16.0 additions *\/\n+    case HB_SCRIPT_GARAY:\n+\n@@ -999,1 +1002,1 @@\n-    len += hb_max (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%u\", feature->value));\n+    len += hb_max (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%\" PRIu32, feature->value));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-common.cc","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,5 +50,1 @@\n-#if defined (_SVR4) || defined (SVR4) || defined (__OpenBSD__) || \\\n-    defined (_sgi) || defined (__sun) || defined (sun) || \\\n-    defined (__digital__) || defined (__HP_cc)\n-#  include <inttypes.h>\n-#elif defined (_AIX)\n+#if defined (_AIX)\n@@ -57,1 +53,1 @@\n-\/* VS 2010 (_MSC_VER 1600) has stdint.h *\/\n+\/* VS 2010 (_MSC_VER 1600) has stdint.h   *\/\n@@ -66,3 +62,2 @@\n-#elif defined (__KERNEL__)\n-#  include <linux\/types.h>\n-#else\n+#elif defined (_MSC_VER) && _MSC_VER < 1800\n+\/* VS 2013 (_MSC_VER 1800) has inttypes.h *\/\n@@ -70,0 +65,2 @@\n+#else\n+#  include <inttypes.h>\n@@ -510,0 +507,7 @@\n+ * @HB_SCRIPT_GARAY: `Gara`, Since: 10.0.0\n+ * @HB_SCRIPT_GURUNG_KHEMA: `Gukh`, Since: 10.0.0\n+ * @HB_SCRIPT_KIRAT_RAI: `Krai`, Since: 10.0.0\n+ * @HB_SCRIPT_OL_ONAL: `Onao`, Since: 10.0.0\n+ * @HB_SCRIPT_SUNUWAR: `Sunu`, Since: 10.0.0\n+ * @HB_SCRIPT_TODHRI: `Todr`, Since: 10.0.0\n+ * @HB_SCRIPT_TULU_TIGALARI: `Tutg`, Since: 10.0.0\n@@ -737,0 +741,11 @@\n+  \/*\n+   * Since 10.0.0\n+   *\/\n+  HB_SCRIPT_GARAY                       = HB_TAG ('G','a','r','a'), \/*16.0*\/\n+  HB_SCRIPT_GURUNG_KHEMA                = HB_TAG ('G','u','k','h'), \/*16.0*\/\n+  HB_SCRIPT_KIRAT_RAI                   = HB_TAG ('K','r','a','i'), \/*16.0*\/\n+  HB_SCRIPT_OL_ONAL                     = HB_TAG ('O','n','a','o'), \/*16.0*\/\n+  HB_SCRIPT_SUNUWAR                     = HB_TAG ('S','u','n','u'), \/*16.0*\/\n+  HB_SCRIPT_TODHRI                      = HB_TAG ('T','o','d','r'), \/*16.0*\/\n+  HB_SCRIPT_TULU_TIGALARI               = HB_TAG ('T','u','t','g'), \/*16.0*\/\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-common.h","additions":24,"deletions":9,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-#define HB_NDEBUG\n@@ -72,2 +71,0 @@\n-#define HB_NO_LANGUAGE_LONG\n-#define HB_NO_LANGUAGE_PRIVATE_SUBTAG\n@@ -121,0 +118,4 @@\n+#ifdef HB_NO_VAR\n+#define HB_NO_VAR_COMPOSITES\n+#endif\n+\n@@ -159,0 +160,1 @@\n+#define HB_NO_AAT_LAYOUT_BLOCKLIST\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-config.hh","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-HB_BEGIN_DECLS\n-HB_END_DECLS\n-\n@@ -59,1 +56,1 @@\n-  shared_ptr (shared_ptr &&o) : p (o.p) { o.p = nullptr; }\n+  shared_ptr (shared_ptr &&o)  noexcept : p (o.p) { o.p = nullptr; }\n@@ -61,1 +58,1 @@\n-  shared_ptr& operator = (shared_ptr &&o) { v::destroy (p); p = o.p; o.p = nullptr; return *this; }\n+  shared_ptr& operator = (shared_ptr &&o)  noexcept { v::destroy (p); p = o.p; o.p = nullptr; return *this; }\n@@ -66,2 +63,2 @@\n-  void swap (shared_ptr &o) { std::swap (p, o.p); }\n-  friend void swap (shared_ptr &a, shared_ptr &b) { std::swap (a.p, b.p); }\n+  void swap (shared_ptr &o)  noexcept { std::swap (p, o.p); }\n+  friend void swap (shared_ptr &a, shared_ptr &b)  noexcept { std::swap (a.p, b.p); }\n@@ -101,1 +98,1 @@\n-  unique_ptr (unique_ptr &&o) : p (o.p) { o.p = nullptr; }\n+  unique_ptr (unique_ptr &&o)  noexcept : p (o.p) { o.p = nullptr; }\n@@ -103,1 +100,1 @@\n-  unique_ptr& operator = (unique_ptr &&o) { v::destroy (p); p = o.p; o.p = nullptr; return *this; }\n+  unique_ptr& operator = (unique_ptr &&o)  noexcept { v::destroy (p); p = o.p; o.p = nullptr; return *this; }\n@@ -109,2 +106,2 @@\n-  void swap (unique_ptr &o) { std::swap (p, o.p); }\n-  friend void swap (unique_ptr &a, unique_ptr &b) { std::swap (a.p, b.p); }\n+  void swap (unique_ptr &o)  noexcept { std::swap (p, o.p); }\n+  friend void swap (unique_ptr &a, unique_ptr &b)  noexcept { std::swap (a.p, b.p); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cplusplus.hh","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n- * Use #HB_SCRIPT_CANADIAN_SYLLABICS instead:\n+ * Use #HB_SCRIPT_CANADIAN_SYLLABICS instead.\n@@ -304,0 +304,9 @@\n+\/**\n+ * HB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION:\n+ *\n+ * Use #HB_AAT_LAYOUT_FEATURE_TYPE_CURSIVE_CONNECTION instead.\n+ *\n+ * Deprecated: 8.3.0\n+ *\/\n+#define HB_AAT_LAYOUT_FEATURE_TYPE_CURISVE_CONNECTION HB_AAT_LAYOUT_FEATURE_TYPE_CURSIVE_CONNECTION\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-deprecated.h","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-#define HB_DRAW_STATE_DEFAULT {0, 0.f, 0.f, 0.f, 0.f, {0.}, {0.}, {0.}}\n+#define HB_DRAW_STATE_DEFAULT {0, 0.f, 0.f, 0.f, 0.f, {0.}, {0.}, {0.}, {0.}, {0.}, {0.}, {0.}}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-draw.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-  protected:\n+  public:\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-draw.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  signed order;\n+  unsigned order;\n@@ -156,0 +156,44 @@\n+static unsigned\n+_hb_face_builder_get_table_tags (const hb_face_t *face HB_UNUSED,\n+                                 unsigned int start_offset,\n+                                 unsigned int *table_count,\n+                                 hb_tag_t *table_tags,\n+                                 void *user_data)\n+{\n+  hb_face_builder_data_t *data = (hb_face_builder_data_t *) user_data;\n+\n+  unsigned population = data->tables.get_population ();\n+\n+  if (!table_count)\n+    return population;\n+\n+  if (unlikely (start_offset >= population))\n+  {\n+    if (table_count)\n+      *table_count = 0;\n+    return population;\n+  }\n+\n+  \/\/ Sort the tags.\n+  hb_vector_t<hb_tag_t> sorted_tags;\n+  data->tables.keys () | hb_sink (sorted_tags);\n+  if (unlikely (sorted_tags.in_error ()))\n+  {\n+    \/\/ Not much to do...\n+  }\n+  sorted_tags.qsort ([] (const void* a, const void* b) {\n+    return * (hb_tag_t *) a <  * (hb_tag_t *) b ? -1 :\n+           * (hb_tag_t *) a == * (hb_tag_t *) b ?  0 :\n+                                                  +1;\n+  });\n+\n+  auto array = sorted_tags.as_array ().sub_array (start_offset, table_count);\n+  auto out = hb_array (table_tags, *table_count);\n+\n+  + array.iter ()\n+  | hb_sink (out)\n+  ;\n+\n+  return population;\n+}\n+\n@@ -174,3 +218,10 @@\n-  return hb_face_create_for_tables (_hb_face_builder_reference_table,\n-                                    data,\n-                                    _hb_face_builder_data_destroy);\n+  hb_face_t *face = hb_face_create_for_tables (_hb_face_builder_reference_table,\n+                                               data,\n+                                               _hb_face_builder_data_destroy);\n+\n+  hb_face_set_get_table_tags_func (face,\n+                                   _hb_face_builder_get_table_tags,\n+                                   data,\n+                                   nullptr);\n+\n+  return face;\n@@ -202,1 +253,1 @@\n-  if (!data->tables.set (tag, face_table_info_t {hb_blob_reference (blob), -1}))\n+  if (!data->tables.set (tag, face_table_info_t {hb_blob_reference (blob), (unsigned) -1}))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-face-builder.cc","additions":56,"deletions":5,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -93,4 +93,0 @@\n-  nullptr, \/* reference_table_func *\/\n-  nullptr, \/* user_data *\/\n-  nullptr, \/* destroy *\/\n-\n@@ -113,2 +109,3 @@\n- * data. With the caveat that hb_face_get_table_tags() does not currently work\n- * with faces created this way.\n+ * data. With the caveat that hb_face_get_table_tags() would not work\n+ * with faces created this way. You can address that by calling the\n+ * hb_face_set_get_table_tags_func() function and setting the appropriate callback.\n@@ -197,0 +194,16 @@\n+static unsigned\n+_hb_face_for_data_get_table_tags (const hb_face_t *face HB_UNUSED,\n+                                  unsigned int start_offset,\n+                                  unsigned int *table_count,\n+                                  hb_tag_t *table_tags,\n+                                  void *user_data)\n+{\n+  hb_face_for_data_closure_t *data = (hb_face_for_data_closure_t *) user_data;\n+\n+  const OT::OpenTypeFontFile &ot_file = *data->blob->as<OT::OpenTypeFontFile> ();\n+  const OT::OpenTypeFontFace &ot_face = ot_file.get_face (data->index);\n+\n+  return ot_face.get_table_tags (start_offset, table_count, table_tags);\n+}\n+\n+\n@@ -243,0 +256,4 @@\n+  hb_face_set_get_table_tags_func (face,\n+                                   _hb_face_for_data_get_table_tags,\n+                                   closure,\n+                                   nullptr);\n@@ -249,0 +266,57 @@\n+\/**\n+ * hb_face_create_or_fail:\n+ * @blob: #hb_blob_t to work upon\n+ * @index: The index of the face within @blob\n+ *\n+ * Like hb_face_create(), but returns `NULL` if the blob data\n+ * contains no usable font face at the specified index.\n+ *\n+ * Return value: (transfer full): The new face object, or `NULL` if\n+ * no face is found at the specified index.\n+ *\n+ * Since: 10.1.0\n+ **\/\n+hb_face_t *\n+hb_face_create_or_fail (hb_blob_t    *blob,\n+                        unsigned int  index)\n+{\n+  unsigned num_faces = hb_face_count (blob);\n+  if (index >= num_faces)\n+    return nullptr;\n+\n+  hb_face_t *face = hb_face_create (blob, index);\n+  if (hb_object_is_immutable (face))\n+    return nullptr;\n+\n+  return face;\n+}\n+\n+#ifndef HB_NO_OPEN\n+\/**\n+ * hb_face_create_from_file_or_fail:\n+ * @file_name: A font filename\n+ * @index: The index of the face within the file\n+ *\n+ * A thin wrapper around hb_blob_create_from_file_or_fail()\n+ * followed by hb_face_create_or_fail().\n+ *\n+ * Return value: (transfer full): The new face object, or `NULL` if\n+ * no face is found at the specified index or the file cannot be read.\n+ *\n+ * Since: 10.1.0\n+ **\/\n+HB_EXTERN hb_face_t *\n+hb_face_create_from_file_or_fail (const char   *file_name,\n+                                  unsigned int  index)\n+{\n+  hb_blob_t *blob = hb_blob_create_from_file_or_fail (file_name);\n+  if (unlikely (!blob))\n+    return nullptr;\n+\n+  hb_face_t *face = hb_face_create_or_fail (blob, index);\n+  hb_blob_destroy (blob);\n+\n+  return face;\n+}\n+#endif\n+\n@@ -309,0 +383,3 @@\n+  if (face->get_table_tags_destroy)\n+    face->get_table_tags_destroy (face->get_table_tags_user_data);\n+\n@@ -398,1 +475,2 @@\n- * the specified face.\n+ * the specified face. Returns an empty blob if referencing table data is not\n+ * possible.\n@@ -418,3 +496,4 @@\n- * Fetches a pointer to the binary blob that contains the\n- * specified face. Returns an empty blob if referencing face data is not\n- * possible.\n+ * Fetches a pointer to the binary blob that contains the specified face.\n+ * If referencing the face data is not possible, this function creates a blob\n+ * out of individual table blobs if hb_face_get_table_tags() works with this\n+ * face, otherwise it returns an empty blob.\n@@ -429,1 +508,35 @@\n-  return face->reference_table (HB_TAG_NONE);\n+  hb_blob_t *blob = face->reference_table (HB_TAG_NONE);\n+\n+  if (blob == hb_blob_get_empty ())\n+  {\n+    \/\/ If referencing the face blob is not possible (e.g. not implemented by the\n+    \/\/ font functions), use face builder to create a blob out of individual\n+    \/\/ table blobs.\n+    unsigned total_count = hb_face_get_table_tags (face, 0, nullptr, nullptr);\n+    if (total_count)\n+    {\n+      hb_tag_t tags[64];\n+      unsigned count = ARRAY_LENGTH (tags);\n+      hb_face_t* builder = hb_face_builder_create ();\n+\n+      for (unsigned offset = 0; offset < total_count; offset += count)\n+      {\n+        hb_face_get_table_tags (face, offset, &count, tags);\n+        if (unlikely (!count))\n+          break; \/\/ Allocation error\n+        for (unsigned i = 0; i < count; i++)\n+        {\n+          if (unlikely (!tags[i]))\n+            continue;\n+          hb_blob_t *table = hb_face_reference_table (face, tags[i]);\n+          hb_face_builder_add_table (builder, tags[i], table);\n+          hb_blob_destroy (table);\n+        }\n+      }\n+\n+      blob = hb_face_reference_blob (builder);\n+      hb_face_destroy (builder);\n+    }\n+  }\n+\n+  return blob;\n@@ -550,0 +663,32 @@\n+\/**\n+ * hb_face_set_get_table_tags_func:\n+ * @face: A face object\n+ * @func: (closure user_data) (destroy destroy) (scope notified): The table-tag-fetching function\n+ * @user_data: A pointer to the user data, to be destroyed by @destroy when not needed anymore\n+ * @destroy: (nullable): A callback to call when @func is not needed anymore\n+ *\n+ * Sets the table-tag-fetching function for the specified face object.\n+ *\n+ * Since: 10.0.0\n+ *\/\n+HB_EXTERN void\n+hb_face_set_get_table_tags_func (hb_face_t *face,\n+                                 hb_get_table_tags_func_t func,\n+                                 void                    *user_data,\n+                                 hb_destroy_func_t        destroy)\n+{\n+  if (hb_object_is_immutable (face))\n+  {\n+    if (destroy)\n+      destroy (user_data);\n+    return;\n+  }\n+\n+  if (face->get_table_tags_destroy)\n+    face->get_table_tags_destroy (face->get_table_tags_user_data);\n+\n+  face->get_table_tags_func = func;\n+  face->get_table_tags_user_data = user_data;\n+  face->get_table_tags_destroy = destroy;\n+}\n+\n@@ -571,1 +716,1 @@\n-  if (face->destroy != (hb_destroy_func_t) _hb_face_for_data_closure_destroy)\n+  if (!face->get_table_tags_func)\n@@ -578,6 +723,1 @@\n-  hb_face_for_data_closure_t *data = (hb_face_for_data_closure_t *) face->user_data;\n-\n-  const OT::OpenTypeFontFile &ot_file = *data->blob->as<OT::OpenTypeFontFile> ();\n-  const OT::OpenTypeFontFace &ot_face = ot_file.get_face (data->index);\n-\n-  return ot_face.get_table_tags (start_offset, table_count, table_tags);\n+  return face->get_table_tags_func (face, start_offset, table_count, table_tags, face->get_table_tags_user_data);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-face.cc","additions":158,"deletions":18,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -62,0 +62,8 @@\n+HB_EXTERN hb_face_t *\n+hb_face_create_or_fail (hb_blob_t    *blob,\n+                        unsigned int  index);\n+\n+HB_EXTERN hb_face_t *\n+hb_face_create_from_file_or_fail (const char   *file_name,\n+                                  unsigned int  index);\n+\n@@ -68,1 +76,5 @@\n- * Callback function for hb_face_create_for_tables().\n+ * Callback function for hb_face_create_for_tables(). The @tag is the tag of the\n+ * table to reference, and the special tag #HB_TAG_NONE is used to reference the\n+ * blob of the face itself. If referencing the face blob is not possible, it is\n+ * recommended to set hb_get_table_tags_func_t on the @face to allow\n+ * hb_face_reference_blob() to create a face blob out of individual table blobs.\n@@ -70,1 +82,2 @@\n- * Return value: (transfer full): A pointer to the @tag table within @face\n+ * Return value: (transfer full): A pointer to the @tag table within @face or\n+ * `NULL` if the table is not found or cannot be referenced.\n@@ -138,0 +151,28 @@\n+\n+\/**\n+ * hb_get_table_tags_func_t:\n+ * @face: A face object\n+ * @start_offset: The index of first table tag to retrieve\n+ * @table_count: (inout): Input = the maximum number of table tags to return;\n+ *                Output = the actual number of table tags returned (may be zero)\n+ * @table_tags: (out) (array length=table_count): The array of table tags found\n+ * @user_data: User data pointer passed by the caller\n+ *\n+ * Callback function for hb_face_get_table_tags().\n+ *\n+ * Return value: Total number of tables, or zero if it is not possible to list\n+ *\n+ * Since: 10.0.0\n+ *\/\n+typedef unsigned int (*hb_get_table_tags_func_t) (const hb_face_t *face,\n+                                                  unsigned int  start_offset,\n+                                                  unsigned int *table_count, \/* IN\/OUT *\/\n+                                                  hb_tag_t     *table_tags \/* OUT *\/,\n+                                                  void         *user_data);\n+\n+HB_EXTERN void\n+hb_face_set_get_table_tags_func (hb_face_t *face,\n+                                 hb_get_table_tags_func_t func,\n+                                 void                    *user_data,\n+                                 hb_destroy_func_t        destroy);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-face.h","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -51,0 +51,4 @@\n+  unsigned int index;                   \/* Face index in a collection, zero-based. *\/\n+  mutable hb_atomic_int_t upem;         \/* Units-per-EM. *\/\n+  mutable hb_atomic_int_t num_glyphs;   \/* Number of glyphs. *\/\n+\n@@ -55,3 +59,3 @@\n-  unsigned int index;                   \/* Face index in a collection, zero-based. *\/\n-  mutable hb_atomic_int_t upem;         \/* Units-per-EM. *\/\n-  mutable hb_atomic_int_t num_glyphs;   \/* Number of glyphs. *\/\n+  hb_get_table_tags_func_t   get_table_tags_func;\n+  void                      *get_table_tags_user_data;\n+  hb_destroy_func_t          get_table_tags_destroy;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-face.hh","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-  return font->y_scale;\n+  return -font->y_scale;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-font.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -654,1 +654,1 @@\n-    if (size && snprintf (s, size, \"gid%u\", glyph) < 0)\n+    if (size && snprintf (s, size, \"gid%\" PRIu32, glyph) < 0)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-font.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,3 @@\n+#ifndef HB_NO_AAT\n+#include \"hb-aat-layout-trak-table.hh\"\n+#endif\n@@ -41,0 +44,1 @@\n+#include \"hb-ot-stat-table.hh\"\n@@ -44,0 +48,1 @@\n+#include FT_MODULE_H\n@@ -228,1 +233,1 @@\n- * https:\/\/www.freetype.org\/freetype2\/docs\/reference\/ft2-base_interface.html#ft_load_xxx\n+ * <https:\/\/freetype.org\/freetype2\/docs\/reference\/ft2-glyph_retrieval.html#ft_load_xxx>\n@@ -256,1 +261,1 @@\n- * https:\/\/www.freetype.org\/freetype2\/docs\/reference\/ft2-base_interface.html#ft_load_xxx\n+ * <https:\/\/freetype.org\/freetype2\/docs\/reference\/ft2-glyph_retrieval.html#ft_load_xxx>\n@@ -277,1 +282,1 @@\n- * hb_ft_font_get_face: (skip)\n+ * hb_ft_font_get_ft_face: (skip)\n@@ -288,1 +293,1 @@\n- * Since: 0.9.2\n+ * Since: 10.4.0\n@@ -291,1 +296,1 @@\n-hb_ft_font_get_face (hb_font_t *font)\n+hb_ft_font_get_ft_face (hb_font_t *font)\n@@ -301,0 +306,25 @@\n+#ifndef HB_DISABLE_DEPRECATED\n+\n+\/**\n+ * hb_ft_font_get_face: (skip)\n+ * @font: #hb_font_t to work upon\n+ *\n+ * Fetches the FT_Face associated with the specified #hb_font_t\n+ * font object.\n+ *\n+ * This function works with #hb_font_t objects created by\n+ * hb_ft_font_create() or hb_ft_font_create_referenced().\n+ *\n+ * Return value: (nullable): the FT_Face found or `NULL`\n+ *\n+ * Since: 0.9.2\n+ * Deprecated: 10.4.0: Use hb_ft_font_get_ft_face() instead.\n+ **\/\n+FT_Face\n+hb_ft_font_get_face (hb_font_t *font)\n+{\n+  return hb_ft_font_get_ft_face (font);\n+}\n+\n+#endif\n+\n@@ -504,0 +534,20 @@\n+\n+#ifndef HB_NO_AAT\n+  \/* According to Ned, trak is applied by default for \"modern fonts\", as detected by presence of STAT table. *\/\n+#ifndef HB_NO_STYLE\n+  bool apply_trak = font->face->table.STAT->has_data () && font->face->table.trak->has_data ();\n+#else\n+  bool apply_trak = false;\n+#endif\n+  if (apply_trak)\n+  {\n+    hb_position_t tracking = font->face->table.trak->get_h_tracking (font);\n+    first_advance = orig_first_advance;\n+    for (unsigned int i = 0; i < count; i++)\n+    {\n+      *first_advance += tracking;\n+      first_glyph = &StructAtOffsetUnaligned<hb_codepoint_t> (first_glyph, glyph_stride);\n+      first_advance = &StructAtOffsetUnaligned<hb_position_t> (first_advance, advance_stride);\n+    }\n+  }\n+#endif\n@@ -540,1 +590,14 @@\n-  return ((-v + (1<<9)) >> 10) + (font->embolden_in_place ? 0 : y_strength);\n+  v = ((-v + (1<<9)) >> 10) + (font->embolden_in_place ? 0 : y_strength);\n+\n+#ifndef HB_NO_AAT\n+  \/* According to Ned, trak is applied by default for \"modern fonts\", as detected by presence of STAT table. *\/\n+#ifndef HB_NO_STYLE\n+  bool apply_trak = font->face->table.STAT->has_data () && font->face->table.trak->has_data ();\n+#else\n+  bool apply_trak = false;\n+#endif\n+  if (apply_trak)\n+    v += font->face->table.trak->get_v_tracking (font);\n+#endif\n+\n+  return v;\n@@ -933,0 +996,5 @@\n+  FT_Long load_flags = ft_font->load_flags | FT_LOAD_NO_BITMAP | FT_LOAD_COLOR;\n+#if (FREETYPE_MAJOR*10000 + FREETYPE_MINOR*100 + FREETYPE_PATCH) >= 21301\n+  load_flags |= FT_LOAD_NO_SVG;\n+#endif\n+\n@@ -936,2 +1004,1 @@\n-  if (unlikely (FT_Load_Glyph (ft_face, gid,\n-                               ft_font->load_flags | FT_LOAD_COLOR)))\n+  if (unlikely (FT_Load_Glyph (ft_face, gid, load_flags)))\n@@ -1107,0 +1174,39 @@\n+static unsigned\n+_hb_ft_get_table_tags (const hb_face_t *face HB_UNUSED,\n+                       unsigned int start_offset,\n+                       unsigned int *table_count,\n+                       hb_tag_t *table_tags,\n+                       void *user_data)\n+{\n+  FT_Face ft_face = (FT_Face) user_data;\n+\n+  FT_ULong population = 0;\n+  FT_Sfnt_Table_Info (ft_face,\n+                      0, \/\/ table_index; ignored\n+                      nullptr,\n+                      &population);\n+\n+  if (!table_count)\n+    return population;\n+  else\n+    *table_count = 0;\n+\n+  if (unlikely (start_offset >= population))\n+    return population;\n+\n+  unsigned end_offset = hb_min (start_offset + *table_count, (unsigned) population);\n+  if (unlikely (end_offset < start_offset))\n+    return population;\n+\n+  *table_count = end_offset - start_offset;\n+  for (unsigned i = start_offset; i < end_offset; i++)\n+  {\n+    FT_ULong tag = 0, length;\n+    FT_Sfnt_Table_Info (ft_face, i, &tag, &length);\n+    table_tags[i - start_offset] = tag;\n+  }\n+\n+  return population;\n+}\n+\n+\n@@ -1148,0 +1254,1 @@\n+    hb_face_set_get_table_tags_func (face, _hb_ft_get_table_tags, ft_face, nullptr);\n@@ -1218,1 +1325,1 @@\n-  if (unlikely (!ft_face->generic.data || ft_face->generic.finalizer != (FT_Generic_Finalizer) hb_ft_face_finalize))\n+  if (unlikely (!ft_face->generic.data || ft_face->generic.finalizer != hb_ft_face_finalize))\n@@ -1248,1 +1355,1 @@\n- * after the #hb_font_t font object has been destroyed.\n+ * only after the #hb_font_t font object has been destroyed.\n@@ -1395,0 +1502,18 @@\n+\n+static void * _hb_ft_alloc (FT_Memory memory, long size)\n+{ return hb_malloc (size); }\n+\n+static void _hb_ft_free (FT_Memory memory, void *block)\n+{ hb_free (block); }\n+\n+static void * _hb_ft_realloc (FT_Memory memory, long cur_size, long new_size, void *block)\n+{ return hb_realloc (block, new_size); }\n+\n+static FT_MemoryRec_ m =\n+{\n+  nullptr,\n+  _hb_ft_alloc,\n+  _hb_ft_free,\n+  _hb_ft_realloc\n+};\n+\n@@ -1403,1 +1528,1 @@\n-    if (FT_Init_FreeType (&l))\n+    if (FT_New_Library (&m, &l))\n@@ -1406,0 +1531,3 @@\n+    FT_Add_Default_Modules (l);\n+    FT_Set_Default_Properties (l);\n+\n@@ -1412,1 +1540,1 @@\n-    FT_Done_FreeType (l);\n+    FT_Done_Library (l);\n@@ -1427,1 +1555,45 @@\n-get_ft_library ()\n+reference_ft_library ()\n+{\n+  FT_Library l = static_ft_library.get_unconst ();\n+  if (unlikely (FT_Reference_Library (l)))\n+  {\n+    DEBUG_MSG (FT, l, \"FT_Reference_Library() failed\");\n+    return nullptr;\n+  }\n+  return l;\n+}\n+\n+static hb_user_data_key_t ft_library_key = {0};\n+\n+static void\n+finalize_ft_library (void *arg)\n+{\n+  FT_Face ft_face = (FT_Face) arg;\n+  FT_Done_Library ((FT_Library) ft_face->generic.data);\n+}\n+\n+static void\n+destroy_ft_library (void *arg)\n+{\n+  FT_Done_Library ((FT_Library) arg);\n+}\n+\n+\/**\n+ * hb_ft_face_create_from_file_or_fail:\n+ * @file_name: A font filename\n+ * @index: The index of the face within the file\n+ *\n+ * Creates an #hb_face_t face object from the specified\n+ * font file and face index.\n+ *\n+ * This is similar in functionality to hb_face_create_from_file_or_fail(),\n+ * but uses the FreeType library for loading the font file.\n+ *\n+ * Return value: (transfer full): The new face object, or `NULL` if\n+ * no face is found at the specified index or the file cannot be read.\n+ *\n+ * Since: 10.1.0\n+ *\/\n+hb_face_t *\n+hb_ft_face_create_from_file_or_fail (const char   *file_name,\n+                                     unsigned int  index)\n@@ -1429,1 +1601,24 @@\n-  return static_ft_library.get_unconst ();\n+  FT_Library ft_library = reference_ft_library ();\n+  if (unlikely (!ft_library))\n+  {\n+    DEBUG_MSG (FT, ft_library, \"reference_ft_library failed\");\n+    return nullptr;\n+  }\n+\n+  FT_Face ft_face;\n+  if (unlikely (FT_New_Face (ft_library,\n+                             file_name,\n+                             index,\n+                             &ft_face)))\n+    return nullptr;\n+\n+  hb_face_t *face = hb_ft_face_create_referenced (ft_face);\n+  FT_Done_Face (ft_face);\n+\n+  ft_face->generic.data = ft_library;\n+  ft_face->generic.finalizer = finalize_ft_library;\n+\n+  if (hb_face_is_immutable (face))\n+    return nullptr;\n+\n+  return face;\n@@ -1468,0 +1663,5 @@\n+  \/\/ In case of failure...\n+  hb_font_set_funcs (font,\n+                     hb_font_funcs_get_empty (),\n+                     nullptr, nullptr);\n+\n@@ -1474,6 +1674,7 @@\n-  FT_Face ft_face = nullptr;\n-  FT_Error err = FT_New_Memory_Face (get_ft_library (),\n-                                     (const FT_Byte *) blob_data,\n-                                     blob_length,\n-                                     hb_face_get_index (font->face),\n-                                     &ft_face);\n+  FT_Library ft_library = reference_ft_library ();\n+  if (unlikely (!ft_library))\n+  {\n+    hb_blob_destroy (blob);\n+    DEBUG_MSG (FT, font, \"reference_ft_library failed\");\n+    return;\n+  }\n@@ -1481,1 +1682,7 @@\n-  if (unlikely (err)) {\n+  FT_Face ft_face = nullptr;\n+  if (unlikely (FT_New_Memory_Face (ft_library,\n+                                    (const FT_Byte *) blob_data,\n+                                    blob_length,\n+                                    hb_face_get_index (font->face),\n+                                    &ft_face)))\n+  {\n@@ -1483,1 +1690,1 @@\n-    DEBUG_MSG (FT, font, \"Font face FT_New_Memory_Face() failed\");\n+    DEBUG_MSG (FT, font, \"FT_New_Memory_Face() failed\");\n@@ -1490,1 +1697,1 @@\n-\n+  \/\/ Hook the blob to the FT_Face\n@@ -1494,0 +1701,3 @@\n+  \/\/ And the FT_Library to the blob\n+  hb_blob_set_user_data (blob, &ft_library_key, ft_library, destroy_ft_library, true);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ft.cc","additions":233,"deletions":23,"binary":false,"changes":256,"status":"modified"},{"patch":"@@ -87,0 +87,3 @@\n+HB_EXTERN hb_face_t *\n+hb_ft_face_create_from_file_or_fail (const char   *file_name,\n+                                     unsigned int  index);\n@@ -111,1 +114,1 @@\n-hb_ft_font_get_face (hb_font_t *font);\n+hb_ft_font_get_ft_face (hb_font_t *font);\n@@ -142,0 +145,7 @@\n+#ifndef HB_DISABLE_DEPRECATED\n+\n+HB_DEPRECATED_FOR (hb_ft_font_get_ft_face)\n+HB_EXTERN FT_Face\n+hb_ft_font_get_face (hb_font_t *font);\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ft.h","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -327,0 +327,10 @@\n+struct\n+{\n+  template <typename Iterable,\n+            hb_requires (hb_is_iterable (Iterable))>\n+  unsigned operator () (const Iterable &_) const { return hb_len (hb_iter (_)); }\n+\n+  unsigned operator () (unsigned _) const { return _; }\n+}\n+HB_FUNCOBJ (hb_len_of);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-iter.hh","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -91,3 +91,2 @@\n-\n-#ifndef HB_GLYF_VAR_COMPOSITE_MAX_AXES\n-#define HB_GLYF_VAR_COMPOSITE_MAX_AXES 4096\n+#ifndef HB_MAX_GRAPH_EDGE_COUNT\n+#define HB_MAX_GRAPH_EDGE_COUNT 2048\n@@ -96,2 +95,2 @@\n-#ifndef HB_GLYF_MAX_POINTS\n-#define HB_GLYF_MAX_POINTS 20000\n+#ifndef HB_VAR_COMPOSITE_MAX_AXES\n+#define HB_VAR_COMPOSITE_MAX_AXES 4096\n@@ -100,2 +99,2 @@\n-#ifndef HB_GLYF_MAX_EDGE_COUNT\n-#define HB_GLYF_MAX_EDGE_COUNT 1024\n+#ifndef HB_GLYF_MAX_POINTS\n+#define HB_GLYF_MAX_POINTS 200000\n@@ -105,1 +104,1 @@\n-#define HB_CFF_MAX_OPS 10000\n+#define HB_CFF_MAX_OPS 200000\n@@ -108,2 +107,2 @@\n-#ifndef HB_COLRV1_MAX_EDGE_COUNT\n-#define HB_COLRV1_MAX_EDGE_COUNT 65536\n+#ifndef HB_MAX_COMPOSITE_OPERATIONS_PER_GLYPH\n+#define HB_MAX_COMPOSITE_OPERATIONS_PER_GLYPH 64\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-limits.hh","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+  static constexpr bool realloc_move = true;\n+\n@@ -48,2 +50,24 @@\n-  hb_hashmap_t (const hb_hashmap_t& o) : hb_hashmap_t () { alloc (o.population); hb_copy (o, *this); }\n-  hb_hashmap_t (hb_hashmap_t&& o) : hb_hashmap_t () { hb_swap (*this, o); }\n+  hb_hashmap_t (const hb_hashmap_t& o) : hb_hashmap_t ()\n+  {\n+    if (unlikely (!o.mask)) return;\n+\n+    if (item_t::is_trivial)\n+    {\n+      items = (item_t *) hb_malloc (sizeof (item_t) * (o.mask + 1));\n+      if (unlikely (!items))\n+      {\n+        successful = false;\n+        return;\n+      }\n+      population = o.population;\n+      occupancy = o.occupancy;\n+      mask = o.mask;\n+      prime = o.prime;\n+      max_chain_length = o.max_chain_length;\n+      memcpy (items, o.items, sizeof (item_t) * (mask + 1));\n+      return;\n+    }\n+\n+    alloc (o.population); hb_copy (o, *this);\n+  }\n+  hb_hashmap_t (hb_hashmap_t&& o)  noexcept : hb_hashmap_t () { hb_swap (*this, o); }\n@@ -51,1 +75,1 @@\n-  hb_hashmap_t& operator= (hb_hashmap_t&& o)  { hb_swap (*this, o); return *this; }\n+  hb_hashmap_t& operator= (hb_hashmap_t&& o)   noexcept { hb_swap (*this, o); return *this; }\n@@ -116,2 +140,3 @@\n-  unsigned int successful : 1; \/* Allocations successful *\/\n-  unsigned int population : 31; \/* Not including tombstones. *\/\n+  bool successful; \/* Allocations successful *\/\n+  unsigned short max_chain_length;\n+  unsigned int population; \/* Not including tombstones. *\/\n@@ -121,1 +146,0 @@\n-  unsigned int max_chain_length;\n@@ -124,1 +148,1 @@\n-  friend void swap (hb_hashmap_t& a, hb_hashmap_t& b)\n+  friend void swap (hb_hashmap_t& a, hb_hashmap_t& b) noexcept\n@@ -128,4 +152,2 @@\n-    unsigned tmp = a.population;\n-    a.population = b.population;\n-    b.population = tmp;\n-    \/\/hb_swap (a.population, b.population);\n+    hb_swap (a.max_chain_length, b.max_chain_length);\n+    hb_swap (a.population, b.population);\n@@ -135,1 +157,0 @@\n-    hb_swap (a.max_chain_length, b.max_chain_length);\n@@ -143,0 +164,1 @@\n+    max_chain_length = 0;\n@@ -146,1 +168,0 @@\n-    max_chain_length = 0;\n@@ -212,2 +233,0 @@\n-      if (!item_t::is_trivial)\n-        old_items[i].~item_t ();\n@@ -215,0 +234,3 @@\n+    if (!item_t::is_trivial)\n+      for (unsigned int i = 0; i < old_size; i++)\n+        old_items[i].~item_t ();\n@@ -288,1 +310,1 @@\n-    auto *item = fetch_item (key, hb_hash (key));\n+    auto *item = fetch_item (key, hash);\n@@ -536,1 +558,1 @@\n-  hb_map_t (hb_map_t &&o) : hashmap (std::move ((hashmap &) o)) {}\n+  hb_map_t (hb_map_t &&o)  noexcept : hashmap (std::move ((hashmap &) o)) {}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-map.hh","additions":39,"deletions":17,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  memcpy (obj, std::addressof (Null (Type)), sizeof (*obj));\n+  memcpy (reinterpret_cast<void*>(obj), std::addressof (Null (Type)), sizeof (*obj));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-null.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-    user_data = (hb_user_data_array_t *) hb_calloc (sizeof (hb_user_data_array_t), 1);\n+    user_data = (hb_user_data_array_t *) hb_calloc (1, sizeof (hb_user_data_array_t));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-object.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -253,1 +253,1 @@\n-    case 1: return u.version1.get_face_count ();\n+    case 1: hb_barrier (); return u.version1.get_face_count ();\n@@ -261,1 +261,1 @@\n-    case 1: return u.version1.get_face (i);\n+    case 1: hb_barrier (); return u.version1.get_face (i);\n@@ -270,0 +270,1 @@\n+    hb_barrier ();\n@@ -272,1 +273,1 @@\n-    case 1: return_trace (u.version1.sanitize (c));\n+    case 1: hb_barrier (); return_trace (u.version1.sanitize (c));\n@@ -305,0 +306,1 @@\n+                  hb_barrier () &&\n@@ -340,0 +342,1 @@\n+                  hb_barrier () &&\n@@ -388,0 +391,1 @@\n+                  hb_barrier () &&\n@@ -431,0 +435,1 @@\n+                  hb_barrier () &&\n@@ -511,0 +516,1 @@\n+    hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-open-file.hh","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -89,9 +89,0 @@\n-  template <typename Type2,\n-            hb_enable_if (std::is_integral<Type2>::value &&\n-                          sizeof (Type2) < sizeof (int) &&\n-                          sizeof (Type) < sizeof (int))>\n-  int cmp (Type2 a) const\n-  {\n-    Type b = v;\n-    return (int) a - (int) b;\n-  }\n@@ -103,1 +94,1 @@\n-    return a < b ? -1 : a == b ? 0 : +1;\n+    return (a > b) - (a < b);\n@@ -135,0 +126,83 @@\n+\/* 32-bit unsigned integer with variable encoding. *\/\n+struct HBUINT32VAR\n+{\n+  unsigned get_size () const\n+  {\n+    unsigned b0 = v[0];\n+    if (b0 < 0x80)\n+      return 1;\n+    else if (b0 < 0xC0)\n+      return 2;\n+    else if (b0 < 0xE0)\n+      return 3;\n+    else if (b0 < 0xF0)\n+      return 4;\n+    else\n+      return 5;\n+  }\n+\n+  static unsigned get_size (uint32_t v)\n+  {\n+    if (v < 0x80)\n+      return 1;\n+    else if (v < 0x4000)\n+      return 2;\n+    else if (v < 0x200000)\n+      return 3;\n+    else if (v < 0x10000000)\n+      return 4;\n+    else\n+      return 5;\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (c->check_range (v, 1) &&\n+                  hb_barrier () &&\n+                  c->check_range (v, get_size ()));\n+  }\n+\n+  operator uint32_t () const\n+  {\n+    unsigned b0 = v[0];\n+    if (b0 < 0x80)\n+      return b0;\n+    else if (b0 < 0xC0)\n+      return ((b0 & 0x3F) << 8) | v[1];\n+    else if (b0 < 0xE0)\n+      return ((b0 & 0x1F) << 16) | (v[1] << 8) | v[2];\n+    else if (b0 < 0xF0)\n+      return ((b0 & 0x0F) << 24) | (v[1] << 16) | (v[2] << 8) | v[3];\n+    else\n+      return (v[1] << 24) | (v[2] << 16) | (v[3] << 8) | v[4];\n+  }\n+\n+  static bool serialize (hb_serialize_context_t *c, uint32_t v)\n+  {\n+    unsigned len = get_size (v);\n+\n+    unsigned char *buf = c->allocate_size<unsigned char> (len, false);\n+    if (unlikely (!buf))\n+      return false;\n+\n+    unsigned char *p = buf + len;\n+    for (unsigned i = 0; i < len; i++)\n+    {\n+      *--p = v & 0xFF;\n+      v >>= 8;\n+    }\n+\n+    if (len > 1)\n+      buf[0] |= ((1 << (len - 1)) - 1) << (9 - len);\n+\n+    return true;\n+  }\n+\n+  protected:\n+  unsigned char v[5];\n+\n+  public:\n+  DEFINE_SIZE_MIN (1);\n+};\n+\n@@ -152,0 +226,1 @@\n+  explicit operator float () const { return to_float (); }\n@@ -218,5 +293,0 @@\n-  static uint32_t add (uint32_t i, unsigned short v)\n-  {\n-    if (i == NO_VARIATION) return i;\n-    return i + v;\n-  }\n@@ -312,1 +382,1 @@\n-template <typename Type, typename OffsetType, bool has_null=true>\n+template <typename Type, typename OffsetType, typename BaseType=void, bool has_null=true>\n@@ -338,1 +408,1 @@\n-            hb_enable_if (hb_is_convertible (const Base, const void *))>\n+            hb_enable_if (hb_is_convertible (const Base, const BaseType *))>\n@@ -341,1 +411,1 @@\n-            hb_enable_if (hb_is_convertible (const Base, const void *))>\n+            hb_enable_if (hb_is_convertible (const Base, const BaseType *))>\n@@ -344,1 +414,1 @@\n-            hb_enable_if (hb_is_convertible (Base, void *))>\n+            hb_enable_if (hb_is_convertible (Base, BaseType *))>\n@@ -347,1 +417,1 @@\n-            hb_enable_if (hb_is_convertible (Base, void *))>\n+            hb_enable_if (hb_is_convertible (Base, BaseType *))>\n@@ -351,1 +421,1 @@\n-  template <typename ...Ts>\n+  template <typename Base, typename ...Ts>\n@@ -353,1 +423,1 @@\n-                         const void *src_base, Ts&&... ds)\n+                         const Base *src_base, Ts&&... ds)\n@@ -417,1 +487,1 @@\n-  bool sanitize_shallow (hb_sanitize_context_t *c, const void *base) const\n+  bool sanitize_shallow (hb_sanitize_context_t *c, const BaseType *base) const\n@@ -421,0 +491,1 @@\n+    hb_barrier ();\n@@ -430,1 +501,1 @@\n-  bool sanitize (hb_sanitize_context_t *c, const void *base, Ts&&... ds) const\n+  bool sanitize (hb_sanitize_context_t *c, const BaseType *base, Ts&&... ds) const\n@@ -434,0 +505,1 @@\n+                  hb_barrier () &&\n@@ -448,3 +520,3 @@\n-template <typename Type, bool has_null=true> using Offset16To = OffsetTo<Type, HBUINT16, has_null>;\n-template <typename Type, bool has_null=true> using Offset24To = OffsetTo<Type, HBUINT24, has_null>;\n-template <typename Type, bool has_null=true> using Offset32To = OffsetTo<Type, HBUINT32, has_null>;\n+template <typename Type, typename BaseType=void, bool has_null=true> using Offset16To = OffsetTo<Type, HBUINT16, BaseType, has_null>;\n+template <typename Type, typename BaseType=void, bool has_null=true> using Offset24To = OffsetTo<Type, HBUINT24, BaseType, has_null>;\n+template <typename Type, typename BaseType=void, bool has_null=true> using Offset32To = OffsetTo<Type, HBUINT32, BaseType, has_null>;\n@@ -452,4 +524,4 @@\n-template <typename Type, typename OffsetType> using NNOffsetTo = OffsetTo<Type, OffsetType, false>;\n-template <typename Type> using NNOffset16To = Offset16To<Type, false>;\n-template <typename Type> using NNOffset24To = Offset24To<Type, false>;\n-template <typename Type> using NNOffset32To = Offset32To<Type, false>;\n+template <typename Type, typename OffsetType, typename BaseType=void> using NNOffsetTo = OffsetTo<Type, OffsetType, BaseType, false>;\n+template <typename Type, typename BaseType=void> using NNOffset16To = Offset16To<Type, BaseType, false>;\n+template <typename Type, typename BaseType=void> using NNOffset24To = Offset24To<Type, BaseType, false>;\n+template <typename Type, typename BaseType=void> using NNOffset32To = Offset32To<Type, BaseType, false>;\n@@ -539,0 +611,1 @@\n+    hb_barrier ();\n@@ -558,2 +631,2 @@\n-template <typename Type, typename OffsetType, bool has_null=true>\n-using UnsizedArray16OfOffsetTo = UnsizedArrayOf<OffsetTo<Type, OffsetType, has_null>>;\n+template <typename Type, typename OffsetType, typename BaseType=void, bool has_null=true>\n+using UnsizedArray16OfOffsetTo = UnsizedArrayOf<OffsetTo<Type, OffsetType, BaseType, has_null>>;\n@@ -562,2 +635,2 @@\n-template <typename Type, typename OffsetType, bool has_null=true>\n-struct UnsizedListOfOffset16To : UnsizedArray16OfOffsetTo<Type, OffsetType, has_null>\n+template <typename Type, typename OffsetType, typename BaseType=void, bool has_null=true>\n+struct UnsizedListOfOffset16To : UnsizedArray16OfOffsetTo<Type, OffsetType, BaseType, has_null>\n@@ -568,1 +641,1 @@\n-    const OffsetTo<Type, OffsetType, has_null> *p = &this->arrayZ[i];\n+    const OffsetTo<Type, OffsetType, BaseType, has_null> *p = &this->arrayZ[i];\n@@ -570,1 +643,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -576,1 +649,1 @@\n-    const OffsetTo<Type, OffsetType, has_null> *p = &this->arrayZ[i];\n+    const OffsetTo<Type, OffsetType, BaseType, has_null> *p = &this->arrayZ[i];\n@@ -578,1 +651,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -586,1 +659,1 @@\n-    return_trace ((UnsizedArray16OfOffsetTo<Type, OffsetType, has_null>\n+    return_trace ((UnsizedArray16OfOffsetTo<Type, OffsetType, BaseType, has_null>\n@@ -629,1 +702,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -636,1 +709,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -728,0 +801,1 @@\n+    hb_barrier ();\n@@ -738,1 +812,3 @@\n-    return_trace (len.sanitize (c) && c->check_array_sized (arrayZ, len, sizeof (LenType)));\n+    return_trace (len.sanitize (c) &&\n+                  hb_barrier () &&\n+                  c->check_array_sized (arrayZ, len, sizeof (LenType)));\n@@ -753,0 +829,1 @@\n+template <typename Type> using Array8OfOffset24To = ArrayOf<OffsetTo<Type, HBUINT24>, HBUINT8>;\n@@ -765,1 +842,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -772,1 +849,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -810,1 +887,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -817,1 +894,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -869,0 +946,1 @@\n+    hb_barrier ();\n@@ -881,0 +959,1 @@\n+                  hb_barrier () &&\n@@ -902,1 +981,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -909,1 +988,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -922,0 +1001,1 @@\n+    hb_barrier ();\n@@ -934,0 +1014,1 @@\n+                  hb_barrier () &&\n@@ -978,0 +1059,7 @@\n+  SortedArrayOf* copy (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    SortedArrayOf* out = reinterpret_cast<SortedArrayOf *> (ArrayOf<Type, LenType>::copy (c));\n+    return_trace (out);\n+  }\n+\n@@ -1085,1 +1173,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -1092,1 +1180,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -1107,0 +1195,1 @@\n+    hb_barrier ();\n@@ -1133,0 +1222,1 @@\n+                  hb_barrier () &&\n@@ -1147,0 +1237,794 @@\n+\/* CFF INDEX *\/\n+\n+template <typename COUNT>\n+struct CFFIndex\n+{\n+  unsigned int offset_array_size () const\n+  { return offSize * (count + 1); }\n+\n+  template <typename Iterable,\n+            hb_requires (hb_is_iterable (Iterable))>\n+  bool serialize (hb_serialize_context_t *c,\n+                  const Iterable &iterable,\n+                  const unsigned *p_data_size = nullptr,\n+                  unsigned min_off_size = 0)\n+  {\n+    TRACE_SERIALIZE (this);\n+    unsigned data_size;\n+    if (p_data_size)\n+      data_size = *p_data_size;\n+    else\n+      total_size (iterable, &data_size);\n+\n+    auto it = hb_iter (iterable);\n+    if (unlikely (!serialize_header (c, +it, data_size, min_off_size))) return_trace (false);\n+    unsigned char *ret = c->allocate_size<unsigned char> (data_size, false);\n+    if (unlikely (!ret)) return_trace (false);\n+    for (const auto &_ : +it)\n+    {\n+      unsigned len = _.length;\n+      if (!len)\n+        continue;\n+      if (len <= 1)\n+      {\n+        *ret++ = *_.arrayZ;\n+        continue;\n+      }\n+      hb_memcpy (ret, _.arrayZ, len);\n+      ret += len;\n+    }\n+    return_trace (true);\n+  }\n+\n+  template <typename Iterator,\n+            hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize_header (hb_serialize_context_t *c,\n+                         Iterator it,\n+                         unsigned data_size,\n+                         unsigned min_off_size = 0)\n+  {\n+    TRACE_SERIALIZE (this);\n+\n+    unsigned off_size = (hb_bit_storage (data_size + 1) + 7) \/ 8;\n+    off_size = hb_max(min_off_size, off_size);\n+\n+    \/* serialize CFFIndex header *\/\n+    if (unlikely (!c->extend_min (this))) return_trace (false);\n+    this->count = hb_len (it);\n+    if (!this->count) return_trace (true);\n+    if (unlikely (!c->extend (this->offSize))) return_trace (false);\n+    this->offSize = off_size;\n+    if (unlikely (!c->allocate_size<HBUINT8> (off_size * (this->count + 1), false)))\n+      return_trace (false);\n+\n+    \/* serialize indices *\/\n+    unsigned int offset = 1;\n+    if (HB_OPTIMIZE_SIZE_VAL)\n+    {\n+      unsigned int i = 0;\n+      for (const auto &_ : +it)\n+      {\n+        set_offset_at (i++, offset);\n+        offset += hb_len_of (_);\n+      }\n+      set_offset_at (i, offset);\n+    }\n+    else\n+      switch (off_size)\n+      {\n+        case 1:\n+        {\n+          HBUINT8 *p = (HBUINT8 *) offsets;\n+          for (const auto &_ : +it)\n+          {\n+            *p++ = offset;\n+            offset += hb_len_of (_);\n+          }\n+          *p = offset;\n+        }\n+        break;\n+        case 2:\n+        {\n+          HBUINT16 *p = (HBUINT16 *) offsets;\n+          for (const auto &_ : +it)\n+          {\n+            *p++ = offset;\n+            offset += hb_len_of (_);\n+          }\n+          *p = offset;\n+        }\n+        break;\n+        case 3:\n+        {\n+          HBUINT24 *p = (HBUINT24 *) offsets;\n+          for (const auto &_ : +it)\n+          {\n+            *p++ = offset;\n+            offset += hb_len_of (_);\n+          }\n+          *p = offset;\n+        }\n+        break;\n+        case 4:\n+        {\n+          HBUINT32 *p = (HBUINT32 *) offsets;\n+          for (const auto &_ : +it)\n+          {\n+            *p++ = offset;\n+            offset += hb_len_of (_);\n+          }\n+          *p = offset;\n+        }\n+        break;\n+        default:\n+        break;\n+      }\n+\n+    assert (offset == data_size + 1);\n+    return_trace (true);\n+  }\n+\n+  template <typename Iterable,\n+            hb_requires (hb_is_iterable (Iterable))>\n+  static unsigned total_size (const Iterable &iterable, unsigned *data_size = nullptr, unsigned min_off_size = 0)\n+  {\n+    auto it = + hb_iter (iterable);\n+    if (!it)\n+    {\n+      if (data_size) *data_size = 0;\n+      return min_size;\n+    }\n+\n+    unsigned total = 0;\n+    for (const auto &_ : +it)\n+      total += hb_len_of (_);\n+\n+    if (data_size) *data_size = total;\n+\n+    unsigned off_size = (hb_bit_storage (total + 1) + 7) \/ 8;\n+    off_size = hb_max(min_off_size, off_size);\n+\n+    return min_size + HBUINT8::static_size + (hb_len (it) + 1) * off_size + total;\n+  }\n+\n+  void set_offset_at (unsigned int index, unsigned int offset)\n+  {\n+    assert (index <= count);\n+\n+    unsigned int size = offSize;\n+    const HBUINT8 *p = offsets;\n+    switch (size)\n+    {\n+      case 1: ((HBUINT8  *) p)[index] = offset; break;\n+      case 2: ((HBUINT16 *) p)[index] = offset; break;\n+      case 3: ((HBUINT24 *) p)[index] = offset; break;\n+      case 4: ((HBUINT32 *) p)[index] = offset; break;\n+      default: return;\n+    }\n+  }\n+\n+  private:\n+  unsigned int offset_at (unsigned int index) const\n+  {\n+    assert (index <= count);\n+\n+    unsigned int size = offSize;\n+    const HBUINT8 *p = offsets;\n+    switch (size)\n+    {\n+      case 1: return ((HBUINT8  *) p)[index];\n+      case 2: return ((HBUINT16 *) p)[index];\n+      case 3: return ((HBUINT24 *) p)[index];\n+      case 4: return ((HBUINT32 *) p)[index];\n+      default: return 0;\n+    }\n+  }\n+\n+  const unsigned char *data_base () const\n+  { return (const unsigned char *) this + min_size + offSize.static_size - 1 + offset_array_size (); }\n+  public:\n+\n+  hb_ubytes_t operator [] (unsigned int index) const\n+  {\n+    if (unlikely (index >= count)) return hb_ubytes_t ();\n+    hb_barrier ();\n+    unsigned offset0 = offset_at (index);\n+    unsigned offset1 = offset_at (index + 1);\n+    if (unlikely (offset1 < offset0 || offset1 > offset_at (count)))\n+      return hb_ubytes_t ();\n+    return hb_ubytes_t (data_base () + offset0, offset1 - offset0);\n+  }\n+\n+  unsigned int get_size () const\n+  {\n+    if (count)\n+      return min_size + offSize.static_size + offset_array_size () + (offset_at (count) - 1);\n+    return min_size;  \/* empty CFFIndex contains count only *\/\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (likely (c->check_struct (this) &&\n+                          hb_barrier () &&\n+                          (count == 0 || \/* empty INDEX *\/\n+                           (count < count + 1u &&\n+                            c->check_struct (&offSize) && offSize >= 1 && offSize <= 4 &&\n+                            c->check_array (offsets, offSize, count + 1u) &&\n+                            c->check_range (data_base (), offset_at (count))))));\n+  }\n+\n+  public:\n+  COUNT         count;          \/* Number of object data. Note there are (count+1) offsets *\/\n+  private:\n+  HBUINT8       offSize;        \/* The byte size of each offset in the offsets array. *\/\n+  HBUINT8       offsets[HB_VAR_ARRAY];\n+                                \/* The array of (count + 1) offsets into objects array (1-base). *\/\n+  \/* HBUINT8 data[HB_VAR_ARRAY];        Object data *\/\n+  public:\n+  DEFINE_SIZE_MIN (COUNT::static_size);\n+};\n+typedef CFFIndex<HBUINT16> CFF1Index;\n+typedef CFFIndex<HBUINT32> CFF2Index;\n+\n+\n+\/* TupleValues *\/\n+struct TupleValues\n+{\n+  enum packed_value_flag_t\n+  {\n+    VALUES_ARE_ZEROS     = 0x80,\n+    VALUES_ARE_BYTES     = 0x00,\n+    VALUES_ARE_WORDS     = 0x40,\n+    VALUES_ARE_LONGS     = 0xC0,\n+    VALUES_SIZE_MASK     = 0xC0,\n+    VALUE_RUN_COUNT_MASK = 0x3F\n+  };\n+\n+  static unsigned compile (hb_array_t<const int> values, \/* IN *\/\n+                           hb_array_t<unsigned char> encoded_bytes \/* OUT *\/)\n+  {\n+    unsigned num_values = values.length;\n+    unsigned encoded_len = 0;\n+    unsigned i = 0;\n+    while (i < num_values)\n+    {\n+      int val = values.arrayZ[i];\n+      if (val == 0)\n+        encoded_len += encode_value_run_as_zeroes (i, encoded_bytes.sub_array (encoded_len), values);\n+      else if (val >= -128 && val <= 127)\n+        encoded_len += encode_value_run_as_bytes (i, encoded_bytes.sub_array (encoded_len), values);\n+      else if (val >= -32768 && val <= 32767)\n+        encoded_len += encode_value_run_as_words (i, encoded_bytes.sub_array (encoded_len), values);\n+      else\n+        encoded_len += encode_value_run_as_longs (i, encoded_bytes.sub_array (encoded_len), values);\n+    }\n+    return encoded_len;\n+  }\n+\n+  static unsigned encode_value_run_as_zeroes (unsigned& i,\n+                                              hb_array_t<unsigned char> encoded_bytes,\n+                                              hb_array_t<const int> values)\n+  {\n+    unsigned num_values = values.length;\n+    unsigned run_length = 0;\n+    auto it = encoded_bytes.iter ();\n+    unsigned encoded_len = 0;\n+    while (i < num_values && values.arrayZ[i] == 0)\n+    {\n+      i++;\n+      run_length++;\n+    }\n+\n+    while (run_length >= 64)\n+    {\n+      *it++ = char (VALUES_ARE_ZEROS | 63);\n+      run_length -= 64;\n+      encoded_len++;\n+    }\n+\n+    if (run_length)\n+    {\n+      *it++ = char (VALUES_ARE_ZEROS | (run_length - 1));\n+      encoded_len++;\n+    }\n+    return encoded_len;\n+  }\n+\n+  static unsigned encode_value_run_as_bytes (unsigned &i,\n+                                             hb_array_t<unsigned char> encoded_bytes,\n+                                             hb_array_t<const int> values)\n+  {\n+    unsigned start = i;\n+    unsigned num_values = values.length;\n+    while (i < num_values)\n+    {\n+      int val = values.arrayZ[i];\n+      if (val > 127 || val < -128)\n+        break;\n+\n+      \/* from fonttools: if there're 2 or more zeros in a sequence,\n+       * it is better to start a new run to save bytes. *\/\n+      if (val == 0 && i + 1 < num_values && values.arrayZ[i+1] == 0)\n+        break;\n+\n+      i++;\n+    }\n+    unsigned run_length = i - start;\n+\n+    unsigned encoded_len = 0;\n+    auto it = encoded_bytes.iter ();\n+\n+    while (run_length >= 64)\n+    {\n+      *it++ = (VALUES_ARE_BYTES | 63);\n+      encoded_len++;\n+\n+      for (unsigned j = 0; j < 64; j++)\n+      {\n+        *it++ = static_cast<char> (values.arrayZ[start + j]);\n+        encoded_len++;\n+      }\n+\n+      start += 64;\n+      run_length -= 64;\n+    }\n+\n+    if (run_length)\n+    {\n+      *it++ = (VALUES_ARE_BYTES | (run_length - 1));\n+      encoded_len++;\n+\n+      while (start < i)\n+      {\n+        *it++ = static_cast<char> (values.arrayZ[start++]);\n+        encoded_len++;\n+      }\n+    }\n+\n+    return encoded_len;\n+  }\n+\n+  static unsigned encode_value_run_as_words (unsigned &i,\n+                                             hb_array_t<unsigned char> encoded_bytes,\n+                                             hb_array_t<const int> values)\n+  {\n+    unsigned start = i;\n+    unsigned num_values = values.length;\n+    while (i < num_values)\n+    {\n+      int val = values.arrayZ[i];\n+\n+      \/* start a new run for a single zero value*\/\n+      if (val == 0) break;\n+\n+      \/* from fonttools: continue word-encoded run if there's only one\n+       * single value in the range [-128, 127] because it is more compact.\n+       * Only start a new run when there're 2 continuous such values. *\/\n+      if (val >= -128 && val <= 127 &&\n+          i + 1 < num_values &&\n+          values.arrayZ[i+1] >= -128 && values.arrayZ[i+1] <= 127)\n+        break;\n+\n+      i++;\n+    }\n+\n+    unsigned run_length = i - start;\n+    auto it = encoded_bytes.iter ();\n+    unsigned encoded_len = 0;\n+    while (run_length >= 64)\n+    {\n+      *it++ = (VALUES_ARE_WORDS | 63);\n+      encoded_len++;\n+\n+      for (unsigned j = 0; j < 64; j++)\n+      {\n+        int16_t value_val = values.arrayZ[start + j];\n+        *it++ = static_cast<char> (value_val >> 8);\n+        *it++ = static_cast<char> (value_val & 0xFF);\n+\n+        encoded_len += 2;\n+      }\n+\n+      start += 64;\n+      run_length -= 64;\n+    }\n+\n+    if (run_length)\n+    {\n+      *it++ = (VALUES_ARE_WORDS | (run_length - 1));\n+      encoded_len++;\n+      while (start < i)\n+      {\n+        int16_t value_val = values.arrayZ[start++];\n+        *it++ = static_cast<char> (value_val >> 8);\n+        *it++ = static_cast<char> (value_val & 0xFF);\n+\n+        encoded_len += 2;\n+      }\n+    }\n+    return encoded_len;\n+  }\n+\n+  static unsigned encode_value_run_as_longs (unsigned &i,\n+                                             hb_array_t<unsigned char> encoded_bytes,\n+                                             hb_array_t<const int> values)\n+  {\n+    unsigned start = i;\n+    unsigned num_values = values.length;\n+    while (i < num_values)\n+    {\n+      int val = values.arrayZ[i];\n+\n+      if (val >= -32768 && val <= 32767)\n+        break;\n+\n+      i++;\n+    }\n+\n+    unsigned run_length = i - start;\n+    auto it = encoded_bytes.iter ();\n+    unsigned encoded_len = 0;\n+    while (run_length >= 64)\n+    {\n+      *it++ = (VALUES_ARE_LONGS | 63);\n+      encoded_len++;\n+\n+      for (unsigned j = 0; j < 64; j++)\n+      {\n+        int32_t value_val = values.arrayZ[start + j];\n+        *it++ = static_cast<char> (value_val >> 24);\n+        *it++ = static_cast<char> (value_val >> 16);\n+        *it++ = static_cast<char> (value_val >> 8);\n+        *it++ = static_cast<char> (value_val & 0xFF);\n+\n+        encoded_len += 4;\n+      }\n+\n+      start += 64;\n+      run_length -= 64;\n+    }\n+\n+    if (run_length)\n+    {\n+      *it++ = (VALUES_ARE_LONGS | (run_length - 1));\n+      encoded_len++;\n+      while (start < i)\n+      {\n+        int32_t value_val = values.arrayZ[start++];\n+        *it++ = static_cast<char> (value_val >> 24);\n+        *it++ = static_cast<char> (value_val >> 16);\n+        *it++ = static_cast<char> (value_val >> 8);\n+        *it++ = static_cast<char> (value_val & 0xFF);\n+\n+        encoded_len += 4;\n+      }\n+    }\n+    return encoded_len;\n+  }\n+\n+  template <typename T>\n+  static bool decompile (const HBUINT8 *&p \/* IN\/OUT *\/,\n+                         hb_vector_t<T> &values \/* IN\/OUT *\/,\n+                         const HBUINT8 *end,\n+                         bool consume_all = false)\n+  {\n+    unsigned i = 0;\n+    unsigned count = consume_all ? UINT_MAX : values.length;\n+    if (consume_all)\n+      values.alloc ((end - p) \/ 2);\n+    while (i < count)\n+    {\n+      if (unlikely (p + 1 > end)) return consume_all;\n+      unsigned control = *p++;\n+      unsigned run_count = (control & VALUE_RUN_COUNT_MASK) + 1;\n+      if (consume_all)\n+      {\n+        if (unlikely (!values.resize (values.length + run_count, false)))\n+          return false;\n+      }\n+      unsigned stop = i + run_count;\n+      if (unlikely (stop > count)) return false;\n+      if ((control & VALUES_SIZE_MASK) == VALUES_ARE_ZEROS)\n+      {\n+        for (; i < stop; i++)\n+          values.arrayZ[i] = 0;\n+      }\n+      else if ((control & VALUES_SIZE_MASK) ==  VALUES_ARE_WORDS)\n+      {\n+        if (unlikely (p + run_count * HBINT16::static_size > end)) return false;\n+#ifndef HB_OPTIMIZE_SIZE\n+        for (; i + 3 < stop; i += 4)\n+        {\n+          values.arrayZ[i] = * (const HBINT16 *) p;\n+          p += HBINT16::static_size;\n+          values.arrayZ[i + 1] = * (const HBINT16 *) p;\n+          p += HBINT16::static_size;\n+          values.arrayZ[i + 2] = * (const HBINT16 *) p;\n+          p += HBINT16::static_size;\n+          values.arrayZ[i + 3] = * (const HBINT16 *) p;\n+          p += HBINT16::static_size;\n+        }\n+#endif\n+        for (; i < stop; i++)\n+        {\n+          values.arrayZ[i] = * (const HBINT16 *) p;\n+          p += HBINT16::static_size;\n+        }\n+      }\n+      else if ((control & VALUES_SIZE_MASK) ==  VALUES_ARE_LONGS)\n+      {\n+        if (unlikely (p + run_count * HBINT32::static_size > end)) return false;\n+        for (; i < stop; i++)\n+        {\n+          values.arrayZ[i] = * (const HBINT32 *) p;\n+          p += HBINT32::static_size;\n+        }\n+      }\n+      else if ((control & VALUES_SIZE_MASK) ==  VALUES_ARE_BYTES)\n+      {\n+        if (unlikely (p + run_count > end)) return false;\n+#ifndef HB_OPTIMIZE_SIZE\n+        for (; i + 3 < stop; i += 4)\n+        {\n+          values.arrayZ[i] = * (const HBINT8 *) p++;\n+          values.arrayZ[i + 1] = * (const HBINT8 *) p++;\n+          values.arrayZ[i + 2] = * (const HBINT8 *) p++;\n+          values.arrayZ[i + 3] = * (const HBINT8 *) p++;\n+        }\n+#endif\n+        for (; i < stop; i++)\n+          values.arrayZ[i] = * (const HBINT8 *) p++;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  struct iter_t : hb_iter_with_fallback_t<iter_t, int>\n+  {\n+    iter_t (const unsigned char *p_, unsigned len_)\n+            : p (p_), endp (p_ + len_)\n+    { if (ensure_run ()) read_value (); }\n+\n+    private:\n+    const unsigned char *p;\n+    const unsigned char * const endp;\n+    int current_value = 0;\n+    signed run_count = 0;\n+    unsigned width = 0;\n+\n+    bool ensure_run ()\n+    {\n+      if (likely (run_count > 0)) return true;\n+\n+      if (unlikely (p >= endp))\n+      {\n+        run_count = 0;\n+        current_value = 0;\n+        return false;\n+      }\n+\n+      unsigned control = *p++;\n+      run_count = (control & VALUE_RUN_COUNT_MASK) + 1;\n+      width = control & VALUES_SIZE_MASK;\n+      switch (width)\n+      {\n+        case VALUES_ARE_ZEROS: width = 0; break;\n+        case VALUES_ARE_BYTES: width = HBINT8::static_size;  break;\n+        case VALUES_ARE_WORDS: width = HBINT16::static_size; break;\n+        case VALUES_ARE_LONGS: width = HBINT32::static_size; break;\n+        default: assert (false);\n+      }\n+\n+      if (unlikely (p + run_count * width > endp))\n+      {\n+        run_count = 0;\n+        current_value = 0;\n+        return false;\n+      }\n+\n+      return true;\n+    }\n+    void read_value ()\n+    {\n+      switch (width)\n+      {\n+        case 0: current_value = 0; break;\n+        case 1: current_value = * (const HBINT8  *) p; break;\n+        case 2: current_value = * (const HBINT16 *) p; break;\n+        case 4: current_value = * (const HBINT32 *) p; break;\n+      }\n+      p += width;\n+    }\n+\n+    public:\n+\n+    typedef int __item_t__;\n+    __item_t__ __item__ () const\n+    { return current_value; }\n+\n+    bool __more__ () const { return run_count || p < endp; }\n+    void __next__ ()\n+    {\n+      run_count--;\n+      if (unlikely (!ensure_run ()))\n+        return;\n+      read_value ();\n+    }\n+    void __forward__ (unsigned n)\n+    {\n+      if (unlikely (!ensure_run ()))\n+        return;\n+      while (n)\n+      {\n+        unsigned i = hb_min (n, (unsigned) run_count);\n+        run_count -= i;\n+        n -= i;\n+        p += (i - 1) * width;\n+        if (unlikely (!ensure_run ()))\n+          return;\n+        read_value ();\n+      }\n+    }\n+    bool operator != (const iter_t& o) const\n+    { return p != o.p || run_count != o.run_count; }\n+    iter_t __end__ () const\n+    {\n+      iter_t it (endp, 0);\n+      return it;\n+    }\n+  };\n+\n+  struct fetcher_t\n+  {\n+    fetcher_t (const unsigned char *p_, unsigned len_)\n+              : p (p_), end (p_ + len_) {}\n+\n+    private:\n+    const unsigned char *p;\n+    const unsigned char * const end;\n+    signed run_count = 0;\n+    unsigned width = 0;\n+\n+    bool ensure_run ()\n+    {\n+      if (likely (run_count > 0)) return true;\n+\n+      if (unlikely (p >= end))\n+      {\n+        run_count = 0;\n+        return false;\n+      }\n+\n+      unsigned control = *p++;\n+      run_count = (control & VALUE_RUN_COUNT_MASK) + 1;\n+      width = control & VALUES_SIZE_MASK;\n+      switch (width)\n+      {\n+        case VALUES_ARE_ZEROS: width = 0; break;\n+        case VALUES_ARE_BYTES: width = HBINT8::static_size;  break;\n+        case VALUES_ARE_WORDS: width = HBINT16::static_size; break;\n+        case VALUES_ARE_LONGS: width = HBINT32::static_size; break;\n+        default: assert (false);\n+      }\n+\n+      if (unlikely (p + run_count * width > end))\n+      {\n+        run_count = 0;\n+        return false;\n+      }\n+\n+      return true;\n+    }\n+\n+    void skip (unsigned n)\n+    {\n+      while (n)\n+      {\n+        if (unlikely (!ensure_run ()))\n+          return;\n+        unsigned i = hb_min (n, (unsigned) run_count);\n+        run_count -= i;\n+        n -= i;\n+        p += i * width;\n+      }\n+    }\n+\n+    template <bool scaled>\n+    void _add_to (hb_array_t<float> out, float scale = 1.0f)\n+    {\n+      unsigned n = out.length;\n+      float *arrayZ = out.arrayZ;\n+\n+      for (unsigned i = 0; i < n;)\n+      {\n+        if (unlikely (!ensure_run ()))\n+          break;\n+        unsigned count = hb_min (n - i, (unsigned) run_count);\n+        switch (width)\n+        {\n+          case 1:\n+          {\n+            const auto *pp = (const HBINT8 *) p;\n+            unsigned j = 0;\n+#ifndef HB_OPTIMIZE_SIZE\n+            for (; j + 3 < count; j += 4)\n+            {\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+            }\n+#endif\n+            for (; j < count; j++)\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+          }\n+          break;\n+          case 2:\n+          {\n+            const auto *pp = (const HBINT16 *) p;\n+            unsigned j = 0;\n+#ifndef HB_OPTIMIZE_SIZE\n+            for (; j + 3 < count; j += 4)\n+            {\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+            }\n+#endif\n+            for (; j < count; j++)\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+          }\n+          break;\n+          case 4:\n+          {\n+            const auto *pp = (const HBINT32 *) p;\n+            for (unsigned j = 0; j < count; j++)\n+              *arrayZ++ += scaled ? *pp++ * scale : *pp++;\n+          }\n+          break;\n+        }\n+        p += count * width;\n+        run_count -= count;\n+        i += count;\n+      }\n+    }\n+\n+    public:\n+    void add_to (hb_array_t<float> out, float scale = 1.0f)\n+    {\n+      unsigned n = out.length;\n+\n+      if (scale == 0.0f)\n+      {\n+        skip (n);\n+        return;\n+      }\n+\n+#ifndef HB_OPTIMIZE_SIZE\n+      if (scale == 1.0f)\n+        _add_to<false> (out);\n+      else\n+#endif\n+        _add_to<true> (out, scale);\n+    }\n+  };\n+};\n+\n+struct TupleList : CFF2Index\n+{\n+  TupleValues::iter_t operator [] (unsigned i) const\n+  {\n+    auto bytes = CFF2Index::operator [] (i);\n+    return TupleValues::iter_t (bytes.arrayZ, bytes.length);\n+  }\n+\n+  TupleValues::fetcher_t fetcher (unsigned i) const\n+  {\n+    auto bytes = CFF2Index::operator [] (i);\n+    return TupleValues::fetcher_t (bytes.arrayZ, bytes.length);\n+  }\n+};\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-open-type.hh","additions":935,"deletions":51,"binary":false,"changes":986,"status":"modified"},{"patch":"@@ -44,4 +44,15 @@\n-\/* utility macro *\/\n-template<typename Type>\n-static inline const Type& StructAtOffsetOrNull (const void *P, unsigned int offset)\n-{ return offset ? StructAtOffset<Type> (P, offset) : Null (Type); }\n+\/* CFF offsets can technically be negative *\/\n+template<typename Type, typename ...Ts>\n+static inline const Type& StructAtOffsetOrNull (const void *P, int offset, hb_sanitize_context_t &sc, Ts&&... ds)\n+{\n+  if (!offset) return Null (Type);\n+\n+  const char *p = (const char *) P + offset;\n+  if (!sc.check_point (p)) return Null (Type);\n+\n+  const Type &obj = *reinterpret_cast<const Type *> (p);\n+  if (!obj.sanitize (&sc, std::forward<Ts> (ds)...)) return Null (Type);\n+\n+  return obj;\n+}\n+\n@@ -60,235 +71,0 @@\n-struct length_f_t\n-{\n-  template <typename Iterable,\n-            hb_requires (hb_is_iterable (Iterable))>\n-  unsigned operator () (const Iterable &_) const { return hb_len (hb_iter (_)); }\n-\n-  unsigned operator () (unsigned _) const { return _; }\n-}\n-HB_FUNCOBJ (length_f);\n-\n-\/* CFF INDEX *\/\n-template <typename COUNT>\n-struct CFFIndex\n-{\n-  unsigned int offset_array_size () const\n-  { return offSize * (count + 1); }\n-\n-  template <typename Iterable,\n-            hb_requires (hb_is_iterable (Iterable))>\n-  bool serialize (hb_serialize_context_t *c,\n-                  const Iterable &iterable,\n-                  const unsigned *p_data_size = nullptr)\n-  {\n-    TRACE_SERIALIZE (this);\n-    unsigned data_size;\n-    if (p_data_size)\n-      data_size = *p_data_size;\n-    else\n-      total_size (iterable, &data_size);\n-\n-    auto it = hb_iter (iterable);\n-    if (unlikely (!serialize_header (c, +it, data_size))) return_trace (false);\n-    unsigned char *ret = c->allocate_size<unsigned char> (data_size, false);\n-    if (unlikely (!ret)) return_trace (false);\n-    for (const auto &_ : +it)\n-    {\n-      unsigned len = _.length;\n-      if (!len)\n-        continue;\n-      if (len <= 1)\n-      {\n-        *ret++ = *_.arrayZ;\n-        continue;\n-      }\n-      hb_memcpy (ret, _.arrayZ, len);\n-      ret += len;\n-    }\n-    return_trace (true);\n-  }\n-\n-  template <typename Iterator,\n-            hb_requires (hb_is_iterator (Iterator))>\n-  bool serialize_header (hb_serialize_context_t *c,\n-                         Iterator it,\n-                         unsigned data_size)\n-  {\n-    TRACE_SERIALIZE (this);\n-\n-    unsigned off_size = (hb_bit_storage (data_size + 1) + 7) \/ 8;\n-\n-    \/* serialize CFFIndex header *\/\n-    if (unlikely (!c->extend_min (this))) return_trace (false);\n-    this->count = hb_len (it);\n-    if (!this->count) return_trace (true);\n-    if (unlikely (!c->extend (this->offSize))) return_trace (false);\n-    this->offSize = off_size;\n-    if (unlikely (!c->allocate_size<HBUINT8> (off_size * (this->count + 1), false)))\n-      return_trace (false);\n-\n-    \/* serialize indices *\/\n-    unsigned int offset = 1;\n-    if (HB_OPTIMIZE_SIZE_VAL)\n-    {\n-      unsigned int i = 0;\n-      for (const auto &_ : +it)\n-      {\n-        set_offset_at (i++, offset);\n-        offset += length_f (_);\n-      }\n-      set_offset_at (i, offset);\n-    }\n-    else\n-      switch (off_size)\n-      {\n-        case 1:\n-        {\n-          HBUINT8 *p = (HBUINT8 *) offsets;\n-          for (const auto &_ : +it)\n-          {\n-            *p++ = offset;\n-            offset += length_f (_);\n-          }\n-          *p = offset;\n-        }\n-        break;\n-        case 2:\n-        {\n-          HBUINT16 *p = (HBUINT16 *) offsets;\n-          for (const auto &_ : +it)\n-          {\n-            *p++ = offset;\n-            offset += length_f (_);\n-          }\n-          *p = offset;\n-        }\n-        break;\n-        case 3:\n-        {\n-          HBUINT24 *p = (HBUINT24 *) offsets;\n-          for (const auto &_ : +it)\n-          {\n-            *p++ = offset;\n-            offset += length_f (_);\n-          }\n-          *p = offset;\n-        }\n-        break;\n-        case 4:\n-        {\n-          HBUINT32 *p = (HBUINT32 *) offsets;\n-          for (const auto &_ : +it)\n-          {\n-            *p++ = offset;\n-            offset += length_f (_);\n-          }\n-          *p = offset;\n-        }\n-        break;\n-        default:\n-        break;\n-      }\n-\n-    assert (offset == data_size + 1);\n-    return_trace (true);\n-  }\n-\n-  template <typename Iterable,\n-            hb_requires (hb_is_iterable (Iterable))>\n-  static unsigned total_size (const Iterable &iterable, unsigned *data_size = nullptr)\n-  {\n-    auto it = + hb_iter (iterable);\n-    if (!it)\n-    {\n-      if (data_size) *data_size = 0;\n-      return min_size;\n-    }\n-\n-    unsigned total = 0;\n-    for (const auto &_ : +it)\n-      total += length_f (_);\n-\n-    if (data_size) *data_size = total;\n-\n-    unsigned off_size = (hb_bit_storage (total + 1) + 7) \/ 8;\n-\n-    return min_size + HBUINT8::static_size + (hb_len (it) + 1) * off_size + total;\n-  }\n-\n-  void set_offset_at (unsigned int index, unsigned int offset)\n-  {\n-    assert (index <= count);\n-\n-    unsigned int size = offSize;\n-    const HBUINT8 *p = offsets;\n-    switch (size)\n-    {\n-      case 1: ((HBUINT8  *) p)[index] = offset; break;\n-      case 2: ((HBUINT16 *) p)[index] = offset; break;\n-      case 3: ((HBUINT24 *) p)[index] = offset; break;\n-      case 4: ((HBUINT32 *) p)[index] = offset; break;\n-      default: return;\n-    }\n-  }\n-\n-  private:\n-  unsigned int offset_at (unsigned int index) const\n-  {\n-    assert (index <= count);\n-\n-    unsigned int size = offSize;\n-    const HBUINT8 *p = offsets;\n-    switch (size)\n-    {\n-      case 1: return ((HBUINT8  *) p)[index];\n-      case 2: return ((HBUINT16 *) p)[index];\n-      case 3: return ((HBUINT24 *) p)[index];\n-      case 4: return ((HBUINT32 *) p)[index];\n-      default: return 0;\n-    }\n-  }\n-\n-  const unsigned char *data_base () const\n-  { return (const unsigned char *) this + min_size + offSize.static_size - 1 + offset_array_size (); }\n-  public:\n-\n-  hb_ubytes_t operator [] (unsigned int index) const\n-  {\n-    if (unlikely (index >= count)) return hb_ubytes_t ();\n-    _hb_compiler_memory_r_barrier ();\n-    unsigned offset0 = offset_at (index);\n-    unsigned offset1 = offset_at (index + 1);\n-    if (unlikely (offset1 < offset0 || offset1 > offset_at (count)))\n-      return hb_ubytes_t ();\n-    return hb_ubytes_t (data_base () + offset0, offset1 - offset0);\n-  }\n-\n-  unsigned int get_size () const\n-  {\n-    if (count)\n-      return min_size + offSize.static_size + offset_array_size () + (offset_at (count) - 1);\n-    return min_size;  \/* empty CFFIndex contains count only *\/\n-  }\n-\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (likely (c->check_struct (this) &&\n-                          (count == 0 || \/* empty INDEX *\/\n-                           (count < count + 1u &&\n-                            c->check_struct (&offSize) && offSize >= 1 && offSize <= 4 &&\n-                            c->check_array (offsets, offSize, count + 1u) &&\n-                            c->check_array ((const HBUINT8*) data_base (), 1, offset_at (count))))));\n-  }\n-\n-  public:\n-  COUNT         count;          \/* Number of object data. Note there are (count+1) offsets *\/\n-  private:\n-  HBUINT8       offSize;        \/* The byte size of each offset in the offsets array. *\/\n-  HBUINT8       offsets[HB_VAR_ARRAY];\n-                                \/* The array of (count + 1) offsets into objects array (1-base). *\/\n-  \/* HBUINT8 data[HB_VAR_ARRAY];        Object data *\/\n-  public:\n-  DEFINE_SIZE_MIN (COUNT::static_size);\n-};\n-\n@@ -415,0 +191,1 @@\n+    hb_barrier ();\n@@ -441,1 +218,3 @@\n-    return_trace (first < c->get_num_glyphs () && (fd < fdcount));\n+    return_trace (c->check_struct (this) &&\n+                  hb_barrier () &&\n+                  first < c->get_num_glyphs () && (fd < fdcount));\n@@ -459,2 +238,5 @@\n-    if (unlikely (!c->check_struct (this) || !ranges.sanitize (c, nullptr, fdcount) ||\n-                  (nRanges () == 0) || ranges[0].first != 0))\n+    if (unlikely (!(c->check_struct (this) &&\n+                    ranges.sanitize (c, nullptr, fdcount) &&\n+                    hb_barrier () &&\n+                    (nRanges () != 0) &&\n+                    ranges[0].first == 0)))\n@@ -467,1 +249,3 @@\n-    if (unlikely (!sentinel().sanitize (c) || (sentinel() != c->get_num_glyphs ())))\n+    if (unlikely (!(sentinel().sanitize (c) &&\n+                   hb_barrier () &&\n+                   (sentinel() == c->get_num_glyphs ()))))\n@@ -527,2 +311,2 @@\n-    case 0: return format.static_size + u.format0.get_size (num_glyphs);\n-    case 3: return format.static_size + u.format3.get_size ();\n+    case 0: hb_barrier (); return format.static_size + u.format0.get_size (num_glyphs);\n+    case 3: hb_barrier (); return format.static_size + u.format3.get_size ();\n@@ -539,2 +323,2 @@\n-    case 0: return u.format0.get_fd (glyph);\n-    case 3: return u.format3.get_fd (glyph);\n+    case 0: hb_barrier (); return u.format0.get_fd (glyph);\n+    case 3: hb_barrier (); return u.format3.get_fd (glyph);\n@@ -551,2 +335,2 @@\n-    case 0: return u.format0.get_fd_range (glyph);\n-    case 3: return u.format3.get_fd_range (glyph);\n+    case 0: hb_barrier (); return u.format0.get_fd_range (glyph);\n+    case 3: hb_barrier (); return u.format3.get_fd_range (glyph);\n@@ -562,0 +346,1 @@\n+    hb_barrier ();\n@@ -565,2 +350,2 @@\n-    case 0: return_trace (u.format0.sanitize (c, fdcount));\n-    case 3: return_trace (u.format3.sanitize (c, fdcount));\n+    case 0: hb_barrier (); return_trace (u.format0.sanitize (c, fdcount));\n+    case 3: hb_barrier (); return_trace (u.format3.sanitize (c, fdcount));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff-common.hh","additions":36,"deletions":251,"binary":false,"changes":287,"status":"modified"},{"patch":"@@ -556,9 +556,0 @@\n-bool OT::cff1::accelerator_t::paint_glyph (hb_font_t *font, hb_codepoint_t glyph, hb_paint_funcs_t *funcs, void *data, hb_color_t foreground) const\n-{\n-  funcs->push_clip_glyph (data, glyph, font);\n-  funcs->color (data, true, foreground);\n-  funcs->pop_clip (data);\n-\n-  return true;\n-}\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff1-table.cc","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -54,3 +54,0 @@\n-typedef CFFIndex<HBUINT16>  CFF1Index;\n-\n-typedef CFFIndex<HBUINT16> CFF1Index;\n@@ -245,2 +242,2 @@\n-    case 0: size += u.format0.get_size (); break;\n-    case 1: size += u.format1.get_size (); break;\n+    case 0: hb_barrier (); size += u.format0.get_size (); break;\n+    case 1: hb_barrier (); size += u.format1.get_size (); break;\n@@ -257,2 +254,2 @@\n-    case 0: return u.format0.get_code (glyph);\n-    case 1: return u.format1.get_code (glyph);\n+    case 0: hb_barrier (); return u.format0.get_code (glyph);\n+    case 1: hb_barrier (); return u.format1.get_code (glyph);\n@@ -278,0 +275,1 @@\n+    hb_barrier ();\n@@ -281,2 +279,2 @@\n-    case 0: if (unlikely (!u.format0.sanitize (c))) { return_trace (false); } break;\n-    case 1: if (unlikely (!u.format1.sanitize (c))) { return_trace (false); } break;\n+    case 0: hb_barrier (); if (unlikely (!u.format0.sanitize (c))) { return_trace (false); } break;\n+    case 1: hb_barrier (); if (unlikely (!u.format1.sanitize (c))) { return_trace (false); } break;\n@@ -293,2 +291,2 @@\n-    case 0: return StructAfter<CFF1SuppEncData> (u.format0.codes[u.format0.nCodes ()-1]);\n-    case 1: return StructAfter<CFF1SuppEncData> (u.format1.ranges[u.format1.nRanges ()-1]);\n+    case 0: hb_barrier (); return StructAfter<CFF1SuppEncData> (u.format0.codes[u.format0.nCodes ()-1]);\n+    case 1: hb_barrier (); return StructAfter<CFF1SuppEncData> (u.format1.ranges[u.format1.nRanges ()-1]);\n@@ -379,2 +377,0 @@\n-    if (unlikely (!c->check_struct (this)))\n-      return_trace (false);\n@@ -385,1 +381,3 @@\n-      if (unlikely (!ranges[i].sanitize (c) || (num_glyphs < ranges[i].nLeft + 1)))\n+      if (unlikely (!(ranges[i].sanitize (c) &&\n+                      hb_barrier () &&\n+                      (num_glyphs >= ranges[i].nLeft + 1))))\n@@ -572,3 +570,3 @@\n-    case 0: return min_size + u.format0.get_size (num_glyphs);\n-    case 1: return min_size + u.format1.get_size (num_glyphs);\n-    case 2: return min_size + u.format2.get_size (num_glyphs);\n+    case 0: hb_barrier (); return min_size + u.format0.get_size (num_glyphs);\n+    case 1: hb_barrier (); return min_size + u.format1.get_size (num_glyphs);\n+    case 2: hb_barrier (); return min_size + u.format2.get_size (num_glyphs);\n@@ -584,3 +582,3 @@\n-    case 0: return u.format0.get_sid (glyph, num_glyphs);\n-    case 1: return u.format1.get_sid (glyph, num_glyphs, cache);\n-    case 2: return u.format2.get_sid (glyph, num_glyphs, cache);\n+    case 0: hb_barrier (); return u.format0.get_sid (glyph, num_glyphs);\n+    case 1: hb_barrier (); return u.format1.get_sid (glyph, num_glyphs, cache);\n+    case 2: hb_barrier (); return u.format2.get_sid (glyph, num_glyphs, cache);\n@@ -595,3 +593,3 @@\n-    case 0: u.format0.collect_glyph_to_sid_map (mapping, num_glyphs); return;\n-    case 1: u.format1.collect_glyph_to_sid_map (mapping, num_glyphs); return;\n-    case 2: u.format2.collect_glyph_to_sid_map (mapping, num_glyphs); return;\n+    case 0: hb_barrier (); u.format0.collect_glyph_to_sid_map (mapping, num_glyphs); return;\n+    case 1: hb_barrier (); u.format1.collect_glyph_to_sid_map (mapping, num_glyphs); return;\n+    case 2: hb_barrier (); u.format2.collect_glyph_to_sid_map (mapping, num_glyphs); return;\n@@ -606,3 +604,3 @@\n-    case 0: return u.format0.get_glyph (sid, num_glyphs);\n-    case 1: return u.format1.get_glyph (sid, num_glyphs);\n-    case 2: return u.format2.get_glyph (sid, num_glyphs);\n+    case 0: hb_barrier (); return u.format0.get_glyph (sid, num_glyphs);\n+    case 1: hb_barrier (); return u.format1.get_glyph (sid, num_glyphs);\n+    case 2: hb_barrier (); return u.format2.get_glyph (sid, num_glyphs);\n@@ -618,0 +616,1 @@\n+    hb_barrier ();\n@@ -621,3 +620,3 @@\n-    case 0: return_trace (u.format0.sanitize (c, c->get_num_glyphs (), num_charset_entries));\n-    case 1: return_trace (u.format1.sanitize (c, c->get_num_glyphs (), num_charset_entries));\n-    case 2: return_trace (u.format2.sanitize (c, c->get_num_glyphs (), num_charset_entries));\n+    case 0: hb_barrier (); return_trace (u.format0.sanitize (c, c->get_num_glyphs (), num_charset_entries));\n+    case 1: hb_barrier (); return_trace (u.format1.sanitize (c, c->get_num_glyphs (), num_charset_entries));\n+    case 2: hb_barrier (); return_trace (u.format2.sanitize (c, c->get_num_glyphs (), num_charset_entries));\n@@ -764,3 +763,3 @@\n-  unsigned int    EncodingOffset;\n-  unsigned int    CharsetOffset;\n-  unsigned int    FDSelectOffset;\n+  int             EncodingOffset;\n+  int             CharsetOffset;\n+  int             FDSelectOffset;\n@@ -822,1 +821,1 @@\n-        dictval.EncodingOffset = env.argStack.pop_uint ();\n+        dictval.EncodingOffset = env.argStack.pop_int ();\n@@ -828,1 +827,1 @@\n-        dictval.CharsetOffset = env.argStack.pop_uint ();\n+        dictval.CharsetOffset = env.argStack.pop_int ();\n@@ -834,1 +833,1 @@\n-        dictval.FDSelectOffset = env.argStack.pop_uint ();\n+        dictval.FDSelectOffset = env.argStack.pop_int ();\n@@ -839,1 +838,1 @@\n-        dictval.privateDictInfo.offset = env.argStack.pop_uint ();\n+        dictval.privateDictInfo.offset = env.argStack.pop_int ();\n@@ -914,1 +913,1 @@\n-  unsigned int      subrsOffset;\n+  int                 subrsOffset;\n@@ -949,1 +948,1 @@\n-        dictval.subrsOffset = env.argStack.pop_uint ();\n+        dictval.subrsOffset = env.argStack.pop_int ();\n@@ -991,1 +990,1 @@\n-        dictval.subrsOffset = env.argStack.pop_uint ();\n+        dictval.subrsOffset = env.argStack.pop_int ();\n@@ -1058,0 +1057,1 @@\n+                  hb_barrier () &&\n@@ -1088,0 +1088,1 @@\n+      hb_barrier ();\n@@ -1089,2 +1090,2 @@\n-      topDictIndex = &StructAtOffset<CFF1TopDictIndex> (nameIndex, nameIndex->get_size ());\n-      if ((topDictIndex == &Null (CFF1TopDictIndex)) || !topDictIndex->sanitize (&sc) || (topDictIndex->count == 0))\n+      topDictIndex = &StructAtOffsetOrNull<CFF1TopDictIndex> (nameIndex, nameIndex->get_size (), sc);\n+      if (topDictIndex == &Null (CFF1TopDictIndex) || (topDictIndex->count == 0))\n@@ -1092,0 +1093,1 @@\n+      hb_barrier ();\n@@ -1096,0 +1098,1 @@\n+        hb_barrier ();\n@@ -1105,2 +1108,2 @@\n-        charset = &StructAtOffsetOrNull<Charset> (cff, topDict.CharsetOffset);\n-        if (unlikely ((charset == &Null (Charset)) || !charset->sanitize (&sc, &num_charset_entries)))   goto fail;\n+        charset = &StructAtOffsetOrNull<Charset> (cff, topDict.CharsetOffset, sc, &num_charset_entries);\n+        if (unlikely (charset == &Null (Charset)))   goto fail;\n@@ -1112,4 +1115,4 @@\n-        fdArray = &StructAtOffsetOrNull<CFF1FDArray> (cff, topDict.FDArrayOffset);\n-        fdSelect = &StructAtOffsetOrNull<CFF1FDSelect> (cff, topDict.FDSelectOffset);\n-        if (unlikely ((fdArray == &Null (CFF1FDArray)) || !fdArray->sanitize (&sc) ||\n-            (fdSelect == &Null (CFF1FDSelect)) || !fdSelect->sanitize (&sc, fdArray->count)))\n+        fdArray = &StructAtOffsetOrNull<CFF1FDArray> (cff, topDict.FDArrayOffset, sc);\n+        fdSelect = &StructAtOffsetOrNull<CFF1FDSelect> (cff, topDict.FDSelectOffset, sc, fdArray->count);\n+        if (unlikely (fdArray == &Null (CFF1FDArray) ||\n+                      fdSelect == &Null (CFF1FDSelect)))\n@@ -1135,2 +1138,2 @@\n-          encoding = &StructAtOffsetOrNull<Encoding> (cff, topDict.EncodingOffset);\n-          if (unlikely ((encoding == &Null (Encoding)) || !encoding->sanitize (&sc)))   goto fail;\n+          encoding = &StructAtOffsetOrNull<Encoding> (cff, topDict.EncodingOffset, sc);\n+          if (unlikely (encoding == &Null (Encoding)))   goto fail;\n@@ -1140,2 +1143,2 @@\n-      stringIndex = &StructAtOffset<CFF1StringIndex> (topDictIndex, topDictIndex->get_size ());\n-      if ((stringIndex == &Null (CFF1StringIndex)) || !stringIndex->sanitize (&sc))\n+      stringIndex = &StructAtOffsetOrNull<CFF1StringIndex> (topDictIndex, topDictIndex->get_size (), sc);\n+      if (stringIndex == &Null (CFF1StringIndex))\n@@ -1144,7 +1147,3 @@\n-      globalSubrs = &StructAtOffset<CFF1Subrs> (stringIndex, stringIndex->get_size ());\n-      if ((globalSubrs != &Null (CFF1Subrs)) && !globalSubrs->sanitize (&sc))\n-        goto fail;\n-\n-      charStrings = &StructAtOffsetOrNull<CFF1CharStrings> (cff, topDict.charStringsOffset);\n-\n-      if ((charStrings == &Null (CFF1CharStrings)) || unlikely (!charStrings->sanitize (&sc)))\n+      globalSubrs = &StructAtOffsetOrNull<CFF1Subrs> (stringIndex, stringIndex->get_size (), sc);\n+      charStrings = &StructAtOffsetOrNull<CFF1CharStrings> (cff, topDict.charStringsOffset, sc);\n+      if (charStrings == &Null (CFF1CharStrings))\n@@ -1169,0 +1168,1 @@\n+          hb_barrier ();\n@@ -1178,2 +1178,2 @@\n-          const hb_ubytes_t privDictStr = StructAtOffset<UnsizedByteStr> (cff, font->privateDictInfo.offset).as_ubytes (font->privateDictInfo.size);\n-          if (unlikely (!privDictStr.sanitize (&sc)))   goto fail;\n+          const hb_ubytes_t privDictStr = StructAtOffsetOrNull<UnsizedByteStr> (cff, font->privateDictInfo.offset, sc, font->privateDictInfo.size).as_ubytes (font->privateDictInfo.size);\n+          if (unlikely (privDictStr == (const unsigned char *) &Null (UnsizedByteStr))) goto fail;\n@@ -1185,4 +1185,1 @@\n-          priv->localSubrs = &StructAtOffsetOrNull<CFF1Subrs> (&privDictStr, priv->subrsOffset);\n-          if (priv->localSubrs != &Null (CFF1Subrs) &&\n-              unlikely (!priv->localSubrs->sanitize (&sc)))\n-            goto fail;\n+          priv->localSubrs = &StructAtOffsetOrNull<CFF1Subrs> (&privDictStr, priv->subrsOffset, sc);\n@@ -1196,2 +1193,2 @@\n-        const hb_ubytes_t privDictStr = StructAtOffset<UnsizedByteStr> (cff, font->privateDictInfo.offset).as_ubytes (font->privateDictInfo.size);\n-        if (unlikely (!privDictStr.sanitize (&sc)))   goto fail;\n+        const hb_ubytes_t privDictStr = StructAtOffsetOrNull<UnsizedByteStr> (cff, font->privateDictInfo.offset, sc, font->privateDictInfo.size).as_ubytes (font->privateDictInfo.size);\n+        if (unlikely (privDictStr == (const unsigned char *) &Null (UnsizedByteStr))) goto fail;\n@@ -1203,4 +1200,2 @@\n-        priv->localSubrs = &StructAtOffsetOrNull<CFF1Subrs> (&privDictStr, priv->subrsOffset);\n-        if (priv->localSubrs != &Null (CFF1Subrs) &&\n-            unlikely (!priv->localSubrs->sanitize (&sc)))\n-          goto fail;\n+        priv->localSubrs = &StructAtOffsetOrNull<CFF1Subrs> (&privDictStr, priv->subrsOffset, sc);\n+        hb_barrier ();\n@@ -1423,1 +1418,1 @@\n-        names = (hb_sorted_vector_t<gname_t> *) hb_calloc (sizeof (hb_sorted_vector_t<gname_t>), 1);\n+        names = (hb_sorted_vector_t<gname_t> *) hb_calloc (1, sizeof (hb_sorted_vector_t<gname_t>));\n@@ -1470,1 +1465,0 @@\n-    HB_INTERNAL bool paint_glyph (hb_font_t *font, hb_codepoint_t glyph, hb_paint_funcs_t *funcs, void *data, hb_color_t foreground) const;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff1-table.hh","additions":66,"deletions":72,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -146,9 +146,0 @@\n-bool OT::cff2::accelerator_t::paint_glyph (hb_font_t *font, hb_codepoint_t glyph, hb_paint_funcs_t *funcs, void *data, hb_color_t foreground) const\n-{\n-  funcs->push_clip_glyph (data, glyph, font);\n-  funcs->color (data, true, foreground);\n-  funcs->pop_clip (data);\n-\n-  return true;\n-}\n-\n@@ -205,0 +196,5 @@\n+{\n+  return get_path_at (font, glyph, draw_session, hb_array (font->coords, font->num_coords));\n+}\n+\n+bool OT::cff2::accelerator_t::get_path_at (hb_font_t *font, hb_codepoint_t glyph, hb_draw_session_t &draw_session, hb_array_t<const int> coords) const\n@@ -215,1 +211,1 @@\n-  cff2_cs_interp_env_t<number_t> env (str, *this, fd, font->coords, font->num_coords);\n+  cff2_cs_interp_env_t<number_t> env (str, *this, fd, coords.arrayZ, coords.length);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff2-table.cc","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n-typedef CFFIndex<HBUINT32>  CFF2Index;\n-\n@@ -67,3 +65,3 @@\n-    case 0: return format.static_size + u.format0.get_size (num_glyphs);\n-    case 3: return format.static_size + u.format3.get_size ();\n-    case 4: return format.static_size + u.format4.get_size ();\n+    case 0: hb_barrier (); return format.static_size + u.format0.get_size (num_glyphs);\n+    case 3: hb_barrier (); return format.static_size + u.format3.get_size ();\n+    case 4: hb_barrier (); return format.static_size + u.format4.get_size ();\n@@ -81,3 +79,3 @@\n-    case 0: return u.format0.get_fd (glyph);\n-    case 3: return u.format3.get_fd (glyph);\n-    case 4: return u.format4.get_fd (glyph);\n+    case 0: hb_barrier (); return u.format0.get_fd (glyph);\n+    case 3: hb_barrier (); return u.format3.get_fd (glyph);\n+    case 4: hb_barrier (); return u.format4.get_fd (glyph);\n@@ -93,0 +91,1 @@\n+    hb_barrier ();\n@@ -96,3 +95,3 @@\n-    case 0: return_trace (u.format0.sanitize (c, fdcount));\n-    case 3: return_trace (u.format3.sanitize (c, fdcount));\n-    case 4: return_trace (u.format4.sanitize (c, fdcount));\n+    case 0: hb_barrier (); return_trace (u.format0.sanitize (c, fdcount));\n+    case 3: hb_barrier (); return_trace (u.format3.sanitize (c, fdcount));\n+    case 4: hb_barrier (); return_trace (u.format4.sanitize (c, fdcount));\n@@ -113,1 +112,1 @@\n-struct CFF2VariationStore\n+struct CFF2ItemVariationStore\n@@ -118,1 +117,4 @@\n-    return_trace (likely (c->check_struct (this)) && c->check_range (&varStore, size) && varStore.sanitize (c));\n+    return_trace (c->check_struct (this) &&\n+                  hb_barrier () &&\n+                  c->check_range (&varStore, size) &&\n+                  varStore.sanitize (c));\n@@ -121,1 +123,1 @@\n-  bool serialize (hb_serialize_context_t *c, const CFF2VariationStore *varStore)\n+  bool serialize (hb_serialize_context_t *c, const CFF2ItemVariationStore *varStore)\n@@ -125,1 +127,1 @@\n-    CFF2VariationStore *dest = c->allocate_size<CFF2VariationStore> (size_);\n+    CFF2ItemVariationStore *dest = c->allocate_size<CFF2ItemVariationStore> (size_);\n@@ -134,1 +136,1 @@\n-  VariationStore  varStore;\n+  ItemVariationStore  varStore;\n@@ -136,1 +138,1 @@\n-  DEFINE_SIZE_MIN (2 + VariationStore::min_size);\n+  DEFINE_SIZE_MIN (2 + ItemVariationStore::min_size);\n@@ -149,2 +151,2 @@\n-  unsigned int  vstoreOffset;\n-  unsigned int  FDSelectOffset;\n+  int  vstoreOffset;\n+  int  FDSelectOffset;\n@@ -168,1 +170,1 @@\n-        dictval.vstoreOffset = env.argStack.pop_uint ();\n+        dictval.vstoreOffset = env.argStack.pop_int ();\n@@ -172,1 +174,1 @@\n-        dictval.FDSelectOffset = env.argStack.pop_uint ();\n+        dictval.FDSelectOffset = env.argStack.pop_int ();\n@@ -240,1 +242,1 @@\n-  unsigned int      subrsOffset;\n+  int                subrsOffset;\n@@ -294,1 +296,1 @@\n-        dictval.subrsOffset = env.argStack.pop_uint ();\n+        dictval.subrsOffset = env.argStack.pop_int ();\n@@ -343,1 +345,1 @@\n-        dictval.subrsOffset = env.argStack.pop_uint ();\n+        dictval.subrsOffset = env.argStack.pop_int ();\n@@ -387,0 +389,1 @@\n+                  hb_barrier () &&\n@@ -417,0 +420,1 @@\n+        hb_barrier ();\n@@ -423,11 +427,9 @@\n-      globalSubrs = &StructAtOffset<CFF2Subrs> (cff2, cff2->topDict + cff2->topDictSize);\n-      varStore = &StructAtOffsetOrNull<CFF2VariationStore> (cff2, topDict.vstoreOffset);\n-      charStrings = &StructAtOffsetOrNull<CFF2CharStrings> (cff2, topDict.charStringsOffset);\n-      fdArray = &StructAtOffsetOrNull<CFF2FDArray> (cff2, topDict.FDArrayOffset);\n-      fdSelect = &StructAtOffsetOrNull<CFF2FDSelect> (cff2, topDict.FDSelectOffset);\n-\n-      if (((varStore != &Null (CFF2VariationStore)) && unlikely (!varStore->sanitize (&sc))) ||\n-          (charStrings == &Null (CFF2CharStrings)) || unlikely (!charStrings->sanitize (&sc)) ||\n-          (globalSubrs == &Null (CFF2Subrs)) || unlikely (!globalSubrs->sanitize (&sc)) ||\n-          (fdArray == &Null (CFF2FDArray)) || unlikely (!fdArray->sanitize (&sc)) ||\n-          (((fdSelect != &Null (CFF2FDSelect)) && unlikely (!fdSelect->sanitize (&sc, fdArray->count)))))\n+      globalSubrs = &StructAtOffsetOrNull<CFF2Subrs> (cff2, cff2->topDict + cff2->topDictSize, sc);\n+      varStore = &StructAtOffsetOrNull<CFF2ItemVariationStore> (cff2, topDict.vstoreOffset, sc);\n+      charStrings = &StructAtOffsetOrNull<CFF2CharStrings> (cff2, topDict.charStringsOffset, sc);\n+      fdArray = &StructAtOffsetOrNull<CFF2FDArray> (cff2, topDict.FDArrayOffset, sc);\n+      fdSelect = &StructAtOffsetOrNull<CFF2FDSelect> (cff2, topDict.FDSelectOffset, sc, fdArray->count);\n+\n+      if (charStrings == &Null (CFF2CharStrings) ||\n+          globalSubrs == &Null (CFF2Subrs) ||\n+          fdArray == &Null (CFF2FDArray))\n@@ -449,0 +451,1 @@\n+        hb_barrier ();\n@@ -457,2 +460,2 @@\n-        const hb_ubytes_t privDictStr = StructAtOffsetOrNull<UnsizedByteStr> (cff2, font->privateDictInfo.offset).as_ubytes (font->privateDictInfo.size);\n-        if (unlikely (!privDictStr.sanitize (&sc))) goto fail;\n+        const hb_ubytes_t privDictStr = StructAtOffsetOrNull<UnsizedByteStr> (cff2, font->privateDictInfo.offset, sc, font->privateDictInfo.size).as_ubytes (font->privateDictInfo.size);\n+        if (unlikely (privDictStr == (const unsigned char *) &Null (UnsizedByteStr))) goto fail;\n@@ -464,4 +467,1 @@\n-        privateDicts[i].localSubrs = &StructAtOffsetOrNull<CFF2Subrs> (&privDictStr[0], privateDicts[i].subrsOffset);\n-        if (privateDicts[i].localSubrs != &Null (CFF2Subrs) &&\n-          unlikely (!privateDicts[i].localSubrs->sanitize (&sc)))\n-          goto fail;\n+        privateDicts[i].localSubrs = &StructAtOffsetOrNull<CFF2Subrs> (&privDictStr[0], privateDicts[i].subrsOffset, sc);\n@@ -502,1 +502,1 @@\n-    const CFF2VariationStore    *varStore = nullptr;\n+    const CFF2ItemVariationStore        *varStore = nullptr;\n@@ -521,1 +521,0 @@\n-    HB_INTERNAL bool paint_glyph (hb_font_t *font, hb_codepoint_t glyph, hb_paint_funcs_t *funcs, void *data, hb_color_t foreground) const;\n@@ -523,0 +522,1 @@\n+    HB_INTERNAL bool get_path_at (hb_font_t *font, hb_codepoint_t glyph, hb_draw_session_t &draw_session, hb_array_t<const int> coords) const;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff2-table.hh","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -44,0 +44,142 @@\n+static inline uint8_t unicode_to_macroman (hb_codepoint_t u)\n+{\n+  static const struct unicode_to_macroman_t\n+  {\n+    uint16_t unicode;\n+    uint8_t macroman;\n+  }\n+  mapping[] =\n+  {\n+    { 0x00A0, 0xCA },\n+    { 0x00A1, 0xC1 },\n+    { 0x00A2, 0xA2 },\n+    { 0x00A3, 0xA3 },\n+    { 0x00A5, 0xB4 },\n+    { 0x00A7, 0xA4 },\n+    { 0x00A8, 0xAC },\n+    { 0x00A9, 0xA9 },\n+    { 0x00AA, 0xBB },\n+    { 0x00AB, 0xC7 },\n+    { 0x00AC, 0xC2 },\n+    { 0x00AE, 0xA8 },\n+    { 0x00AF, 0xF8 },\n+    { 0x00B0, 0xA1 },\n+    { 0x00B1, 0xB1 },\n+    { 0x00B4, 0xAB },\n+    { 0x00B5, 0xB5 },\n+    { 0x00B6, 0xA6 },\n+    { 0x00B7, 0xE1 },\n+    { 0x00B8, 0xFC },\n+    { 0x00BA, 0xBC },\n+    { 0x00BB, 0xC8 },\n+    { 0x00BF, 0xC0 },\n+    { 0x00C0, 0xCB },\n+    { 0x00C1, 0xE7 },\n+    { 0x00C2, 0xE5 },\n+    { 0x00C3, 0xCC },\n+    { 0x00C4, 0x80 },\n+    { 0x00C5, 0x81 },\n+    { 0x00C6, 0xAE },\n+    { 0x00C7, 0x82 },\n+    { 0x00C8, 0xE9 },\n+    { 0x00C9, 0x83 },\n+    { 0x00CA, 0xE6 },\n+    { 0x00CB, 0xE8 },\n+    { 0x00CC, 0xED },\n+    { 0x00CD, 0xEA },\n+    { 0x00CE, 0xEB },\n+    { 0x00CF, 0xEC },\n+    { 0x00D1, 0x84 },\n+    { 0x00D2, 0xF1 },\n+    { 0x00D3, 0xEE },\n+    { 0x00D4, 0xEF },\n+    { 0x00D5, 0xCD },\n+    { 0x00D6, 0x85 },\n+    { 0x00D8, 0xAF },\n+    { 0x00D9, 0xF4 },\n+    { 0x00DA, 0xF2 },\n+    { 0x00DB, 0xF3 },\n+    { 0x00DC, 0x86 },\n+    { 0x00DF, 0xA7 },\n+    { 0x00E0, 0x88 },\n+    { 0x00E1, 0x87 },\n+    { 0x00E2, 0x89 },\n+    { 0x00E3, 0x8B },\n+    { 0x00E4, 0x8A },\n+    { 0x00E5, 0x8C },\n+    { 0x00E6, 0xBE },\n+    { 0x00E7, 0x8D },\n+    { 0x00E8, 0x8F },\n+    { 0x00E9, 0x8E },\n+    { 0x00EA, 0x90 },\n+    { 0x00EB, 0x91 },\n+    { 0x00EC, 0x93 },\n+    { 0x00ED, 0x92 },\n+    { 0x00EE, 0x94 },\n+    { 0x00EF, 0x95 },\n+    { 0x00F1, 0x96 },\n+    { 0x00F2, 0x98 },\n+    { 0x00F3, 0x97 },\n+    { 0x00F4, 0x99 },\n+    { 0x00F5, 0x9B },\n+    { 0x00F6, 0x9A },\n+    { 0x00F7, 0xD6 },\n+    { 0x00F8, 0xBF },\n+    { 0x00F9, 0x9D },\n+    { 0x00FA, 0x9C },\n+    { 0x00FB, 0x9E },\n+    { 0x00FC, 0x9F },\n+    { 0x00FF, 0xD8 },\n+    { 0x0131, 0xF5 },\n+    { 0x0152, 0xCE },\n+    { 0x0153, 0xCF },\n+    { 0x0178, 0xD9 },\n+    { 0x0192, 0xC4 },\n+    { 0x02C6, 0xF6 },\n+    { 0x02C7, 0xFF },\n+    { 0x02D8, 0xF9 },\n+    { 0x02D9, 0xFA },\n+    { 0x02DA, 0xFB },\n+    { 0x02DB, 0xFE },\n+    { 0x02DC, 0xF7 },\n+    { 0x02DD, 0xFD },\n+    { 0x03A9, 0xBD },\n+    { 0x03C0, 0xB9 },\n+    { 0x2013, 0xD0 },\n+    { 0x2014, 0xD1 },\n+    { 0x2018, 0xD4 },\n+    { 0x2019, 0xD5 },\n+    { 0x201A, 0xE2 },\n+    { 0x201C, 0xD2 },\n+    { 0x201D, 0xD3 },\n+    { 0x201E, 0xE3 },\n+    { 0x2020, 0xA0 },\n+    { 0x2021, 0xE0 },\n+    { 0x2022, 0xA5 },\n+    { 0x2026, 0xC9 },\n+    { 0x2030, 0xE4 },\n+    { 0x2039, 0xDC },\n+    { 0x203A, 0xDD },\n+    { 0x2044, 0xDA },\n+    { 0x20AC, 0xDB },\n+    { 0x2122, 0xAA },\n+    { 0x2202, 0xB6 },\n+    { 0x2206, 0xC6 },\n+    { 0x220F, 0xB8 },\n+    { 0x2211, 0xB7 },\n+    { 0x221A, 0xC3 },\n+    { 0x221E, 0xB0 },\n+    { 0x222B, 0xBA },\n+    { 0x2248, 0xC5 },\n+    { 0x2260, 0xAD },\n+    { 0x2264, 0xB2 },\n+    { 0x2265, 0xB3 },\n+    { 0x25CA, 0xD7 },\n+    { 0xF8FF, 0xF0 },\n+    { 0xFB01, 0xDE },\n+    { 0xFB02, 0xDF },\n+  };\n+  auto *c = hb_bsearch (u, mapping, ARRAY_LENGTH (mapping), sizeof (mapping[0]),\n+                        _hb_cmp_operator<uint16_t, uint16_t>);\n+  return c ? c->macroman : 0;\n+}\n@@ -559,0 +701,1 @@\n+    hb_barrier ();\n@@ -745,1 +888,2 @@\n-    for (unsigned i = 0; i < this->groups.len; i++)\n+    unsigned count = this->groups.len;\n+    for (unsigned i = 0; i < count; i++)\n@@ -747,2 +891,2 @@\n-      hb_codepoint_t start = this->groups[i].startCharCode;\n-      hb_codepoint_t end = hb_min ((hb_codepoint_t) this->groups[i].endCharCode,\n+      hb_codepoint_t start = this->groups.arrayZ[i].startCharCode;\n+      hb_codepoint_t end = hb_min ((hb_codepoint_t) this->groups.arrayZ[i].endCharCode,\n@@ -757,1 +901,1 @@\n-      hb_codepoint_t gid = this->groups[i].glyphID;\n+      hb_codepoint_t gid = this->groups.arrayZ[i].glyphID;\n@@ -770,0 +914,1 @@\n+      unicodes->add_range (start, end);\n@@ -772,1 +917,0 @@\n-        unicodes->add (cp);\n@@ -1256,0 +1400,3 @@\n+      if (!unicodes->has(src_tbl->record[i].varSelector))\n+        continue;\n+\n@@ -1312,0 +1459,1 @@\n+    | hb_filter (unicodes, &VariationSelectorRecord::varSelector)\n@@ -1356,6 +1504,6 @@\n-    case  0: return u.format0 .get_glyph (codepoint, glyph);\n-    case  4: return u.format4 .get_glyph (codepoint, glyph);\n-    case  6: return u.format6 .get_glyph (codepoint, glyph);\n-    case 10: return u.format10.get_glyph (codepoint, glyph);\n-    case 12: return u.format12.get_glyph (codepoint, glyph);\n-    case 13: return u.format13.get_glyph (codepoint, glyph);\n+    case  0: hb_barrier (); return u.format0 .get_glyph (codepoint, glyph);\n+    case  4: hb_barrier (); return u.format4 .get_glyph (codepoint, glyph);\n+    case  6: hb_barrier (); return u.format6 .get_glyph (codepoint, glyph);\n+    case 10: hb_barrier (); return u.format10.get_glyph (codepoint, glyph);\n+    case 12: hb_barrier (); return u.format12.get_glyph (codepoint, glyph);\n+    case 13: hb_barrier (); return u.format13.get_glyph (codepoint, glyph);\n@@ -1369,6 +1517,6 @@\n-    case  0: u.format0 .collect_unicodes (out); return;\n-    case  4: u.format4 .collect_unicodes (out); return;\n-    case  6: u.format6 .collect_unicodes (out); return;\n-    case 10: u.format10.collect_unicodes (out); return;\n-    case 12: u.format12.collect_unicodes (out, num_glyphs); return;\n-    case 13: u.format13.collect_unicodes (out, num_glyphs); return;\n+    case  0: hb_barrier (); u.format0 .collect_unicodes (out); return;\n+    case  4: hb_barrier (); u.format4 .collect_unicodes (out); return;\n+    case  6: hb_barrier (); u.format6 .collect_unicodes (out); return;\n+    case 10: hb_barrier (); u.format10.collect_unicodes (out); return;\n+    case 12: hb_barrier (); u.format12.collect_unicodes (out, num_glyphs); return;\n+    case 13: hb_barrier (); u.format13.collect_unicodes (out, num_glyphs); return;\n@@ -1385,6 +1533,6 @@\n-    case  0: u.format0 .collect_mapping (unicodes, mapping); return;\n-    case  4: u.format4 .collect_mapping (unicodes, mapping); return;\n-    case  6: u.format6 .collect_mapping (unicodes, mapping); return;\n-    case 10: u.format10.collect_mapping (unicodes, mapping); return;\n-    case 12: u.format12.collect_mapping (unicodes, mapping, num_glyphs); return;\n-    case 13: u.format13.collect_mapping (unicodes, mapping, num_glyphs); return;\n+    case  0: hb_barrier (); u.format0 .collect_mapping (unicodes, mapping); return;\n+    case  4: hb_barrier (); u.format4 .collect_mapping (unicodes, mapping); return;\n+    case  6: hb_barrier (); u.format6 .collect_mapping (unicodes, mapping); return;\n+    case 10: hb_barrier (); u.format10.collect_mapping (unicodes, mapping); return;\n+    case 12: hb_barrier (); u.format12.collect_mapping (unicodes, mapping, num_glyphs); return;\n+    case 13: hb_barrier (); u.format13.collect_mapping (unicodes, mapping, num_glyphs); return;\n@@ -1399,6 +1547,6 @@\n-    case  0: return u.format0 .get_language ();\n-    case  4: return u.format4 .get_language ();\n-    case  6: return u.format6 .get_language ();\n-    case 10: return u.format10.get_language ();\n-    case 12: return u.format12.get_language ();\n-    case 13: return u.format13.get_language ();\n+    case  0: hb_barrier (); return u.format0 .get_language ();\n+    case  4: hb_barrier (); return u.format4 .get_language ();\n+    case  6: hb_barrier (); return u.format6 .get_language ();\n+    case 10: hb_barrier (); return u.format10.get_language ();\n+    case 12: hb_barrier (); return u.format12.get_language ();\n+    case 13: hb_barrier (); return u.format13.get_language ();\n@@ -1419,3 +1567,3 @@\n-    case  4: return u.format4.serialize (c, it);\n-    case 12: return u.format12.serialize (c, it);\n-    case 14: return u.format14.serialize (c, &plan->unicodes, &plan->glyphs_requested, plan->glyph_map, base);\n+    case  4: hb_barrier (); return u.format4.serialize (c, it);\n+    case 12: hb_barrier (); return u.format12.serialize (c, it);\n+    case 14: hb_barrier (); return u.format14.serialize (c, &plan->unicodes, &plan->glyphs_requested, plan->glyph_map, base);\n@@ -1430,0 +1578,1 @@\n+    hb_barrier ();\n@@ -1431,7 +1580,7 @@\n-    case  0: return_trace (u.format0 .sanitize (c));\n-    case  4: return_trace (u.format4 .sanitize (c));\n-    case  6: return_trace (u.format6 .sanitize (c));\n-    case 10: return_trace (u.format10.sanitize (c));\n-    case 12: return_trace (u.format12.sanitize (c));\n-    case 13: return_trace (u.format13.sanitize (c));\n-    case 14: return_trace (u.format14.sanitize (c));\n+    case  0: hb_barrier (); return_trace (u.format0 .sanitize (c));\n+    case  4: hb_barrier (); return_trace (u.format4 .sanitize (c));\n+    case  6: hb_barrier (); return_trace (u.format6 .sanitize (c));\n+    case 10: hb_barrier (); return_trace (u.format10.sanitize (c));\n+    case 12: hb_barrier (); return_trace (u.format12.sanitize (c));\n+    case 13: hb_barrier (); return_trace (u.format13.sanitize (c));\n+    case 14: hb_barrier (); return_trace (u.format14.sanitize (c));\n@@ -1465,2 +1614,5 @@\n-    ret = encodingID.cmp (other.encodingID);\n-    if (ret) return ret;\n+    if (other.encodingID != 0xFFFF)\n+    {\n+      ret = encodingID.cmp (other.encodingID);\n+      if (ret) return ret;\n+    }\n@@ -1814,1 +1966,3 @@\n-  const CmapSubtable *find_best_subtable (bool *symbol = nullptr) const\n+  const CmapSubtable *find_best_subtable (bool *symbol = nullptr,\n+                                          bool *mac = nullptr,\n+                                          bool *macroman = nullptr) const\n@@ -1817,0 +1971,2 @@\n+    if (mac) *mac = false;\n+    if (macroman) *macroman = false;\n@@ -1841,0 +1997,14 @@\n+    \/* MacRoman subtable. *\/\n+    if ((subtable = this->find_subtable (1, 0)))\n+    {\n+      if (mac) *mac = true;\n+      if (macroman) *macroman = true;\n+      return subtable;\n+    }\n+    \/* Any other Mac subtable; we just map ASCII for these. *\/\n+    if ((subtable = this->find_subtable (1, 0xFFFF)))\n+    {\n+      if (mac) *mac = true;\n+      return subtable;\n+    }\n+\n@@ -1852,2 +2022,2 @@\n-      bool symbol;\n-      this->subtable = table->find_best_subtable (&symbol);\n+      bool symbol, mac, macroman;\n+      this->subtable = table->find_best_subtable (&symbol, &mac, &macroman);\n@@ -1862,0 +2032,1 @@\n+#ifndef HB_NO_CMAP_LEGACY_SUBTABLES\n@@ -1881,0 +2052,8 @@\n+      else if (unlikely (macroman))\n+      {\n+        this->get_glyph_funcZ = get_glyph_from_macroman<CmapSubtable>;\n+      }\n+      else if (unlikely (mac))\n+      {\n+        this->get_glyph_funcZ = get_glyph_from_ascii<CmapSubtable>;\n+      }\n@@ -1882,0 +2061,1 @@\n+#endif\n@@ -1924,1 +2104,1 @@\n-      if (unlikely (!this->get_glyph_funcZ)) return 0;\n+      if (unlikely (!this->get_glyph_funcZ)) return false;\n@@ -2006,0 +2186,22 @@\n+    template <typename Type>\n+    HB_INTERNAL static bool get_glyph_from_ascii (const void *obj,\n+                                                  hb_codepoint_t codepoint,\n+                                                  hb_codepoint_t *glyph)\n+    {\n+      const Type *typed_obj = (const Type *) obj;\n+      return codepoint < 0x80 && typed_obj->get_glyph (codepoint, glyph);\n+    }\n+\n+    template <typename Type>\n+    HB_INTERNAL static bool get_glyph_from_macroman (const void *obj,\n+                                                     hb_codepoint_t codepoint,\n+                                                     hb_codepoint_t *glyph)\n+    {\n+      if (get_glyph_from_ascii<Type> (obj, codepoint, glyph))\n+        return true;\n+\n+      const Type *typed_obj = (const Type *) obj;\n+      unsigned c = unicode_to_macroman (codepoint);\n+      return c && typed_obj->get_glyph (c, glyph);\n+    }\n+\n@@ -2035,22 +2237,0 @@\n-  const EncodingRecord *find_encodingrec (unsigned int platform_id,\n-                                          unsigned int encoding_id) const\n-  {\n-    EncodingRecord key;\n-    key.platformID = platform_id;\n-    key.encodingID = encoding_id;\n-\n-    return encodingRecord.as_array ().bsearch (key);\n-  }\n-\n-  bool find_subtable (unsigned format) const\n-  {\n-    auto it =\n-    + hb_iter (encodingRecord)\n-    | hb_map (&EncodingRecord::subtable)\n-    | hb_map (hb_add (this))\n-    | hb_filter ([&] (const CmapSubtable& _) { return _.u.format == format; })\n-    ;\n-\n-    return it.len ();\n-  }\n-\n@@ -2063,0 +2243,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cmap-table.hh","additions":248,"deletions":67,"binary":false,"changes":315,"status":"modified"},{"patch":"@@ -98,0 +98,3 @@\n+#ifndef HB_NO_BEYOND_64K\n+HB_OT_ACCELERATOR (OT, GVAR)\n+#endif\n@@ -99,0 +102,3 @@\n+#ifndef HB_NO_VAR_COMPOSITES\n+HB_OT_ACCELERATOR (OT, VARC)\n+#endif\n@@ -103,1 +109,1 @@\n-HB_OT_CORE_TABLE (OT, kern)\n+HB_OT_ACCELERATOR (OT, kern)\n@@ -121,3 +127,3 @@\n-HB_OT_TABLE (AAT, morx)\n-HB_OT_TABLE (AAT, mort)\n-HB_OT_TABLE (AAT, kerx)\n+HB_OT_ACCELERATOR (AAT, morx)\n+HB_OT_ACCELERATOR (AAT, mort)\n+HB_OT_ACCELERATOR (AAT, kerx)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-face-table-list.hh","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,0 +44,3 @@\n+#include \"hb-ot-var-varc-table.hh\"\n+#include \"hb-aat-layout-kerx-table.hh\"\n+#include \"hb-aat-layout-morx-table.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-face.cc","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+#ifndef HB_NO_AAT\n+#include \"hb-aat-layout-trak-table.hh\"\n+#endif\n@@ -45,1 +48,2 @@\n-#include \"hb-ot-stat-table.hh\" \/\/ Just so we compile it; unused otherwise.\n+#include \"hb-ot-stat-table.hh\"\n+#include \"hb-ot-var-varc-table.hh\"\n@@ -75,0 +79,4 @@\n+#ifndef HB_NO_AAT\n+  bool apply_trak;\n+#endif\n+\n@@ -93,0 +101,9 @@\n+#ifndef HB_NO_AAT\n+  \/* According to Ned, trak is applied by default for \"modern fonts\", as detected by presence of STAT table. *\/\n+#ifndef HB_NO_STYLE\n+  ot_font->apply_trak = font->face->table.STAT->has_data () && font->face->table.trak->has_data ();\n+#else\n+  ot_font->apply_trak = false;\n+#endif\n+#endif\n+\n@@ -202,1 +219,0 @@\n-\n@@ -211,2 +227,2 @@\n-  const OT::VariationStore &varStore = &HVAR + HVAR.varStore;\n-  OT::VariationStore::cache_t *varStore_cache = font->num_coords * count >= 128 ? varStore.create_cache () : nullptr;\n+  const OT::ItemVariationStore &varStore = &HVAR + HVAR.varStore;\n+  OT::ItemVariationStore::cache_t *varStore_cache = font->num_coords * count >= 128 ? varStore.create_cache () : nullptr;\n@@ -216,1 +232,1 @@\n-  OT::VariationStore::cache_t *varStore_cache = nullptr;\n+  OT::ItemVariationStore::cache_t *varStore_cache = nullptr;\n@@ -280,1 +296,1 @@\n-  OT::VariationStore::destroy_cache (varStore_cache);\n+  OT::ItemVariationStore::destroy_cache (varStore_cache);\n@@ -294,0 +310,14 @@\n+\n+#ifndef HB_NO_AAT\n+  if (ot_font->apply_trak)\n+  {\n+    hb_position_t tracking = font->face->table.trak->get_h_tracking (font);\n+    first_advance = orig_first_advance;\n+    for (unsigned int i = 0; i < count; i++)\n+    {\n+      *first_advance += tracking;\n+      first_glyph = &StructAtOffsetUnaligned<hb_codepoint_t> (first_glyph, glyph_stride);\n+      first_advance = &StructAtOffsetUnaligned<hb_position_t> (first_advance, advance_stride);\n+    }\n+  }\n+#endif\n@@ -316,2 +346,2 @@\n-    const OT::VariationStore &varStore = &VVAR + VVAR.varStore;\n-    OT::VariationStore::cache_t *varStore_cache = font->num_coords ? varStore.create_cache () : nullptr;\n+    const OT::ItemVariationStore &varStore = &VVAR + VVAR.varStore;\n+    OT::ItemVariationStore::cache_t *varStore_cache = font->num_coords ? varStore.create_cache () : nullptr;\n@@ -319,1 +349,1 @@\n-    OT::VariationStore::cache_t *varStore_cache = nullptr;\n+    OT::ItemVariationStore::cache_t *varStore_cache = nullptr;\n@@ -330,1 +360,1 @@\n-    OT::VariationStore::destroy_cache (varStore_cache);\n+    OT::ItemVariationStore::destroy_cache (varStore_cache);\n@@ -358,0 +388,14 @@\n+\n+#ifndef HB_NO_AAT\n+  if (ot_font->apply_trak)\n+  {\n+    hb_position_t tracking = font->face->table.trak->get_v_tracking (font);\n+    first_advance = orig_first_advance;\n+    for (unsigned int i = 0; i < count; i++)\n+    {\n+      *first_advance += tracking;\n+      first_glyph = &StructAtOffsetUnaligned<hb_codepoint_t> (first_glyph, glyph_stride);\n+      first_advance = &StructAtOffsetUnaligned<hb_position_t> (first_advance, advance_stride);\n+    }\n+  }\n+#endif\n@@ -526,0 +570,4 @@\n+#ifndef HB_NO_VAR_COMPOSITES\n+    if (!font->face->table.VARC->get_path (font, glyph, draw_session))\n+#endif\n+    \/\/ Keep the following in synch with VARC::get_path_at()\n@@ -566,5 +614,5 @@\n-  if (font->face->table.glyf->paint_glyph (font, glyph, paint_funcs, paint_data, foreground)) return;\n-#ifndef HB_NO_CFF\n-  if (font->face->table.cff2->paint_glyph (font, glyph, paint_funcs, paint_data, foreground)) return;\n-  if (font->face->table.cff1->paint_glyph (font, glyph, paint_funcs, paint_data, foreground)) return;\n-#endif\n+\n+  \/\/ Outline glyph\n+  paint_funcs->push_clip_glyph (paint_data, glyph, font);\n+  paint_funcs->color (paint_data, true, foreground);\n+  paint_funcs->pop_clip (paint_data);\n@@ -637,1 +685,3 @@\n- * Sets the font functions to use when working with @font.\n+ * Sets the font functions to use when working with @font to\n+ * the HarfBuzz's native implementation. This is the default\n+ * for fonts newly created.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-font.cc","additions":66,"deletions":16,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+                          hb_barrier () &&\n@@ -97,1 +98,1 @@\n-                  const hb_vector_t<hb_codepoint_pair_t> &new_to_old_gid_list,\n+                  hb_array_t<const hb_codepoint_pair_t> new_to_old_gid_list,\n@@ -155,0 +156,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-hdmx-table.hh","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-head-table.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,3 @@\n-    return_trace (c->check_struct (this) && likely (version.major == 1));\n+    return_trace (c->check_struct (this) &&\n+                  hb_barrier () &&\n+                  likely (version.major == 1));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-hhea-table.hh","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"hb-ot-os2-table.hh\"\n@@ -148,0 +149,23 @@\n+\n+      if (T::is_horizontal)\n+      {\n+        const auto &OS2 = *c->plan->source->table.OS2;\n+        if (OS2.has_data () &&\n+            table->ascender == OS2.sTypoAscender &&\n+            table->descender == OS2.sTypoDescender &&\n+            table->lineGap == OS2.sTypoLineGap)\n+        {\n+          table->ascender = static_cast<int> (roundf (OS2.sTypoAscender +\n+                                                      MVAR.get_var (HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER,\n+                                                                    c->plan->normalized_coords.arrayZ,\n+                                                                    c->plan->normalized_coords.length)));\n+          table->descender = static_cast<int> (roundf (OS2.sTypoDescender +\n+                                                       MVAR.get_var (HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER,\n+                                                                     c->plan->normalized_coords.arrayZ,\n+                                                                     c->plan->normalized_coords.length)));\n+          table->lineGap = static_cast<int> (roundf (OS2.sTypoLineGap +\n+                                                     MVAR.get_var (HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP,\n+                                                                   c->plan->normalized_coords.arrayZ,\n+                                                                   c->plan->normalized_coords.length)));\n+        }\n+      }\n@@ -161,1 +185,1 @@\n-                  const hb_vector_t<hb_codepoint_pair_t> new_to_old_gid_list,\n+                  hb_array_t<const hb_codepoint_pair_t> new_to_old_gid_list,\n@@ -377,1 +401,1 @@\n-                                            VariationStore::cache_t *store_cache = nullptr) const\n+                                            ItemVariationStore::cache_t *store_cache = nullptr) const\n@@ -390,1 +414,2 @@\n-      return _glyf_get_advance_with_var_unscaled (font, glyph, T::tableTag == HB_OT_TAG_vmtx);\n+      unsigned glyf_advance = _glyf_get_advance_with_var_unscaled (font, glyph, T::tableTag == HB_OT_TAG_vmtx);\n+      return glyf_advance ? glyf_advance : advance;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-hmtx-table.hh","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+                  hb_barrier () &&\n@@ -88,0 +89,10 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &left_set, set_t &right_set, unsigned num_glyphs) const\n+  {\n+    set_t set;\n+    if (likely (glyphCount))\n+      set.add_range (0, glyphCount - 1);\n+    left_set.union_ (set);\n+    right_set.union_ (set);\n+  }\n+\n@@ -124,1 +135,1 @@\n-    case 0: return u.format0.get_kerning (left, right);\n+    case 0: hb_barrier (); return u.format0.get_kerning (left, right);\n@@ -137,1 +148,1 @@\n-    case 1:     return_trace (u.header.apple ? c->dispatch (u.format1, std::forward<Ts> (ds)...) : c->default_return_value ());\n+    case 1:     return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n@@ -141,1 +152,1 @@\n-    case 3:     return_trace (u.header.apple ? c->dispatch (u.format3, std::forward<Ts> (ds)...) : c->default_return_value ());\n+    case 3:     return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));\n@@ -147,0 +158,13 @@\n+  template <typename set_t>\n+  void collect_glyphs (set_t &left_set, set_t &right_set, unsigned num_glyphs) const\n+  {\n+    unsigned int subtable_type = get_type ();\n+    switch (subtable_type) {\n+    case 0:     u.format0.collect_glyphs (left_set, right_set, num_glyphs); return;\n+    case 1:     u.format1.collect_glyphs (left_set, right_set, num_glyphs); return;\n+    case 2:     u.format2.collect_glyphs (left_set, right_set, num_glyphs); return;\n+    case 3:     u.format3.collect_glyphs (left_set, right_set, num_glyphs); return;\n+    default:    return;\n+    }\n+  }\n+\n@@ -150,3 +174,4 @@\n-    if (unlikely (!u.header.sanitize (c) ||\n-                  u.header.length < u.header.min_size ||\n-                  !c->check_range (this, u.header.length))) return_trace (false);\n+    if (unlikely (!(u.header.sanitize (c) &&\n+                    hb_barrier () &&\n+                    u.header.length >= u.header.min_size &&\n+                    c->check_range (this, u.header.length)))) return_trace (false);\n@@ -289,1 +314,1 @@\n-    case 0: return u.ot.has_state_machine ();\n+    case 0: hb_barrier (); return u.ot.has_state_machine ();\n@@ -291,1 +316,1 @@\n-    case 1: return u.aat.has_state_machine ();\n+    case 1: hb_barrier (); return u.aat.has_state_machine ();\n@@ -300,1 +325,1 @@\n-    case 0: return u.ot.has_cross_stream ();\n+    case 0: hb_barrier (); return u.ot.has_cross_stream ();\n@@ -302,1 +327,1 @@\n-    case 1: return u.aat.has_cross_stream ();\n+    case 1: hb_barrier (); return u.aat.has_cross_stream ();\n@@ -311,1 +336,1 @@\n-    case 0: return u.ot.get_h_kerning (left, right);\n+    case 0: hb_barrier (); return u.ot.get_h_kerning (left, right);\n@@ -313,1 +338,1 @@\n-    case 1: return u.aat.get_h_kerning (left, right);\n+    case 1: hb_barrier (); return u.aat.get_h_kerning (left, right);\n@@ -319,2 +344,3 @@\n-  bool apply (AAT::hb_aat_apply_context_t *c) const\n-  { return dispatch (c); }\n+  bool apply (AAT::hb_aat_apply_context_t *c,\n+              const AAT::kern_accelerator_data_t &accel_data) const\n+  { return dispatch (c, accel_data); }\n@@ -340,0 +366,1 @@\n+    hb_barrier ();\n@@ -343,0 +370,35 @@\n+  AAT::kern_accelerator_data_t create_accelerator_data (unsigned num_glyphs) const\n+  {\n+    switch (get_type ()) {\n+    case 0: hb_barrier (); return u.ot.create_accelerator_data (num_glyphs);\n+#ifndef HB_NO_AAT_SHAPE\n+    case 1: hb_barrier (); return u.aat.create_accelerator_data (num_glyphs);\n+#endif\n+    default:return AAT::kern_accelerator_data_t ();\n+    }\n+  }\n+\n+  struct accelerator_t\n+  {\n+    accelerator_t (hb_face_t *face)\n+    {\n+      hb_sanitize_context_t sc;\n+      this->table = sc.reference_table<kern> (face);\n+      this->accel_data = this->table->create_accelerator_data (face->get_num_glyphs ());\n+    }\n+    ~accelerator_t ()\n+    {\n+      this->table.destroy ();\n+    }\n+\n+    hb_blob_t *get_blob () const { return table.get_blob (); }\n+\n+    bool apply (AAT::hb_aat_apply_context_t *c) const\n+    {\n+      return table->apply (c, accel_data);\n+    }\n+\n+    hb_blob_ptr_t<kern> table;\n+    AAT::kern_accelerator_data_t accel_data;\n+  };\n+\n@@ -356,0 +418,4 @@\n+struct kern_accelerator_t : kern::accelerator_t {\n+  kern_accelerator_t (hb_face_t *face) : kern::accelerator_t (face) {}\n+};\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-kern-table.hh","additions":80,"deletions":14,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -49,0 +49,6 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    return_trace ((bool) c->serializer->embed (*this));\n+  }\n+\n@@ -70,0 +76,11 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    return_trace (c->serializer->check_assign (out->referenceGlyph,\n+                                               c->plan->glyph_map->get (referenceGlyph),\n+                                               HB_SERIALIZE_ERROR_INT_OVERFLOW));\n+  }\n+\n@@ -89,1 +106,1 @@\n-                           const VariationStore &var_store,\n+                           const ItemVariationStore &var_store,\n@@ -99,0 +116,31 @@\n+  void collect_variation_indices (hb_set_t& varidx_set \/* OUT *\/) const\n+  {\n+    unsigned varidx = (this+deviceTable).get_variation_index ();\n+    varidx_set.add (varidx);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    if (!c->plan->pinned_at_default)\n+    {\n+      unsigned var_idx = (this+deviceTable).get_variation_index ();\n+      if (var_idx != VarIdx::NO_VARIATION)\n+      {\n+        hb_pair_t<unsigned, int> *v;\n+        if (!c->plan->base_variation_idx_map.has (var_idx, &v))\n+          return_trace (false);\n+\n+        if (unlikely (!c->serializer->check_assign (out->coordinate, coordinate + hb_second (*v),\n+                                                    HB_SERIALIZE_ERROR_INT_OVERFLOW)))\n+          return_trace (false);\n+      }\n+    }\n+    return_trace (out->deviceTable.serialize_copy (c->serializer, deviceTable,\n+                                                   this, 0,\n+                                                   hb_serialize_context_t::Head,\n+                                                   &c->plan->base_variation_idx_map));\n+  }\n@@ -123,1 +171,1 @@\n-                           const VariationStore &var_store,\n+                           const ItemVariationStore &var_store,\n@@ -127,3 +175,3 @@\n-    case 1: return u.format1.get_coord (font, direction);\n-    case 2: return u.format2.get_coord (font, direction);\n-    case 3: return u.format3.get_coord (font, var_store, direction);\n+    case 1: hb_barrier (); return u.format1.get_coord (font, direction);\n+    case 2: hb_barrier (); return u.format2.get_coord (font, direction);\n+    case 3: hb_barrier (); return u.format3.get_coord (font, var_store, direction);\n@@ -134,0 +182,21 @@\n+  void collect_variation_indices (hb_set_t& varidx_set \/* OUT *\/) const\n+  {\n+    switch (u.format) {\n+    case 3: hb_barrier (); u.format3.collect_variation_indices (varidx_set);\n+    default:return;\n+    }\n+  }\n+\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n+  {\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return c->no_dispatch_return_value ();\n+    TRACE_DISPATCH (this, u.format);\n+    switch (u.format) {\n+    case 1: hb_barrier (); return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n+    case 2: hb_barrier (); return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));\n+    case 3: hb_barrier (); return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));\n+    default:return_trace (c->default_return_value ());\n+    }\n+  }\n+\n@@ -138,0 +207,1 @@\n+    hb_barrier ();\n@@ -139,3 +209,3 @@\n-    case 1: return_trace (u.format1.sanitize (c));\n-    case 2: return_trace (u.format2.sanitize (c));\n-    case 3: return_trace (u.format3.sanitize (c));\n+    case 1: hb_barrier (); return_trace (u.format1.sanitize (c));\n+    case 2: hb_barrier (); return_trace (u.format2.sanitize (c));\n+    case 3: hb_barrier (); return_trace (u.format3.sanitize (c));\n@@ -163,0 +233,2 @@\n+  hb_tag_t get_feature_tag () const { return tag; }\n+\n@@ -169,0 +241,23 @@\n+  void collect_variation_indices (const hb_subset_plan_t* plan,\n+                                  const void *base,\n+                                  hb_set_t& varidx_set \/* OUT *\/) const\n+  {\n+    if (!plan->layout_features.has (tag))\n+      return;\n+\n+    (base+minCoord).collect_variation_indices (varidx_set);\n+    (base+maxCoord).collect_variation_indices (varidx_set);\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               const void *base) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n+    if (!(out->minCoord.serialize_subset (c, minCoord, base)))\n+      return_trace (false);\n+\n+    return_trace (out->maxCoord.serialize_subset (c, maxCoord, base));\n+  }\n+\n@@ -208,0 +303,33 @@\n+  void collect_variation_indices (const hb_subset_plan_t* plan,\n+                                  hb_set_t& varidx_set \/* OUT *\/) const\n+  {\n+    (this+minCoord).collect_variation_indices (varidx_set);\n+    (this+maxCoord).collect_variation_indices (varidx_set);\n+    for (const FeatMinMaxRecord& record : featMinMaxRecords)\n+      record.collect_variation_indices (plan, this, varidx_set);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    if (!(out->minCoord.serialize_subset (c, minCoord, this)) ||\n+        !(out->maxCoord.serialize_subset (c, maxCoord, this)))\n+      return_trace (false);\n+\n+    unsigned len = 0;\n+    for (const FeatMinMaxRecord& _ : featMinMaxRecords)\n+    {\n+      hb_tag_t feature_tag = _.get_feature_tag ();\n+      if (!c->plan->layout_features.has (feature_tag))\n+        continue;\n+\n+      if (!_.subset (c, this)) return false;\n+      len++;\n+    }\n+    return_trace (c->serializer->check_assign (out->featMinMaxRecords.len, len,\n+                                               HB_SERIALIZE_ERROR_INT_OVERFLOW));\n+  }\n+\n@@ -242,0 +370,20 @@\n+  void collect_variation_indices (hb_set_t& varidx_set \/* OUT *\/) const\n+  {\n+    for (const auto& _ : baseCoords)\n+      (this+_).collect_variation_indices (varidx_set);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    out->defaultIndex = defaultIndex;\n+\n+    for (const auto& _ : baseCoords)\n+      if (!subset_offset_array (c, out->baseCoords, this) (_))\n+        return_trace (false);\n+\n+    return_trace (bool (out->baseCoords));\n+  }\n+\n@@ -270,1 +418,16 @@\n-  const MinMax &get_min_max () const { return this+minMax; }\n+  const MinMax &get_min_max (const void* base) const { return base+minMax; }\n+\n+  void collect_variation_indices (const void* base,\n+                                  const hb_subset_plan_t* plan,\n+                                  hb_set_t& varidx_set \/* OUT *\/) const\n+  { (base+minMax).collect_variation_indices (plan, varidx_set); }\n+\n+  bool subset (hb_subset_context_t *c,\n+               const void *base) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    return_trace (out->minMax.serialize_subset (c, minMax, base));\n+  }\n@@ -293,1 +456,1 @@\n-    return record.has_data () ? record.get_min_max () : this+defaultMinMax;\n+    return record.has_data () ? record.get_min_max (this) : this+defaultMinMax;\n@@ -300,1 +463,30 @@\n-  bool has_min_max () const { return defaultMinMax; \/* TODO What if only per-language is present? *\/ }\n+  bool has_min_max () const { return defaultMinMax || baseLangSysRecords; }\n+\n+  void collect_variation_indices (const hb_subset_plan_t* plan,\n+                                  hb_set_t& varidx_set \/* OUT *\/) const\n+  {\n+    (this+baseValues).collect_variation_indices (varidx_set);\n+    (this+defaultMinMax).collect_variation_indices (plan, varidx_set);\n+\n+    for (const BaseLangSysRecord& _ : baseLangSysRecords)\n+      _.collect_variation_indices (this, plan, varidx_set);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    if (baseValues && !out->baseValues.serialize_subset (c, baseValues, this))\n+      return_trace (false);\n+\n+    if (defaultMinMax && !out->defaultMinMax.serialize_subset (c, defaultMinMax, this))\n+      return_trace (false);\n+\n+    for (const auto& _ : baseLangSysRecords)\n+      if (!_.subset (c, this)) return_trace (false);\n+\n+    return_trace (c->serializer->check_assign (out->baseLangSysRecords.len, baseLangSysRecords.len,\n+                                               HB_SERIALIZE_ERROR_INT_OVERFLOW));\n+  }\n@@ -334,0 +526,2 @@\n+  hb_tag_t get_script_tag () const { return baseScriptTag; }\n+\n@@ -337,0 +531,20 @@\n+  void collect_variation_indices (const hb_subset_plan_t* plan,\n+                                  const void* list,\n+                                  hb_set_t& varidx_set \/* OUT *\/) const\n+  {\n+    if (!plan->layout_scripts.has (baseScriptTag))\n+      return;\n+\n+    (list+baseScript).collect_variation_indices (plan, varidx_set);\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               const void *base) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    return_trace (out->baseScript.serialize_subset (c, baseScript, base));\n+  }\n+\n@@ -363,0 +577,27 @@\n+  void collect_variation_indices (const hb_subset_plan_t* plan,\n+                                  hb_set_t& varidx_set \/* OUT *\/) const\n+  {\n+    for (const BaseScriptRecord& _ : baseScriptRecords)\n+      _.collect_variation_indices (plan, this, varidx_set);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    unsigned len = 0;\n+    for (const BaseScriptRecord& _ : baseScriptRecords)\n+    {\n+      hb_tag_t script_tag = _.get_script_tag ();\n+      if (!c->plan->layout_scripts.has (script_tag))\n+        continue;\n+\n+      if (!_.subset (c, this)) return false;\n+      len++;\n+    }\n+    return_trace (c->serializer->check_assign (out->baseScriptRecords.len, len,\n+                                               HB_SERIALIZE_ERROR_INT_OVERFLOW));\n+  }\n+\n@@ -424,0 +665,14 @@\n+  void collect_variation_indices (const hb_subset_plan_t* plan,\n+                                  hb_set_t& varidx_set \/* OUT *\/) const\n+  { (this+baseScriptList).collect_variation_indices (plan, varidx_set); }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    out->baseTagList.serialize_copy (c->serializer, baseTagList, this);\n+    return_trace (out->baseScriptList.serialize_subset (c, baseScriptList, this));\n+  }\n+\n@@ -455,2 +710,71 @@\n-  const VariationStore &get_var_store () const\n-  { return version.to_int () < 0x00010001u ? Null (VariationStore) : this+varStore; }\n+  bool has_var_store () const\n+  { return version.to_int () >= 0x00010001u && varStore != 0; }\n+\n+  const ItemVariationStore &get_var_store () const\n+  { return version.to_int () < 0x00010001u ? Null (ItemVariationStore) : this+varStore; }\n+\n+  void collect_variation_indices (const hb_subset_plan_t* plan,\n+                                  hb_set_t& varidx_set \/* OUT *\/) const\n+  {\n+    (this+hAxis).collect_variation_indices (plan, varidx_set);\n+    (this+vAxis).collect_variation_indices (plan, varidx_set);\n+  }\n+\n+  bool subset_varstore (hb_subset_context_t *c,\n+                        BASE *out \/* OUT *\/) const\n+  {\n+    TRACE_SUBSET (this);\n+    if (!c->serializer->allocate_size<Offset32To<ItemVariationStore>> (Offset32To<ItemVariationStore>::static_size))\n+        return_trace (false);\n+    if (!c->plan->normalized_coords)\n+      return_trace (out->varStore.serialize_subset (c, varStore, this, c->plan->base_varstore_inner_maps.as_array ()));\n+\n+    if (c->plan->all_axes_pinned)\n+      return_trace (true);\n+\n+    item_variations_t item_vars;\n+    if (!item_vars.instantiate (this+varStore, c->plan, true, true,\n+                                c->plan->base_varstore_inner_maps.as_array ()))\n+      return_trace (false);\n+\n+    if (!out->varStore.serialize_serialize (c->serializer,\n+                                            item_vars.has_long_word (),\n+                                            c->plan->axis_tags,\n+                                            item_vars.get_region_list (),\n+                                            item_vars.get_vardata_encodings ()))\n+      return_trace (false);\n+\n+    const hb_map_t &varidx_map = item_vars.get_varidx_map ();\n+    \/* base_variation_idx_map in the plan is old_varidx->(varidx, delta)\n+     * mapping, new varidx is generated for subsetting, we need to remap this\n+     * after instancing *\/\n+    for (auto _ : c->plan->base_variation_idx_map.iter_ref ())\n+    {\n+      uint32_t varidx = _.second.first;\n+      uint32_t *new_varidx;\n+      if (varidx_map.has (varidx, &new_varidx))\n+        _.second.first = *new_varidx;\n+      else\n+        _.second.first = HB_OT_LAYOUT_NO_VARIATIONS_INDEX;\n+    }\n+    return_trace (true);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    out->version = version;\n+    if (has_var_store () && !subset_varstore (c, out))\n+        return_trace (false);\n+\n+    if (hAxis && !out->hAxis.serialize_subset (c, hAxis, this))\n+      return_trace (false);\n+\n+    if (vAxis && !out->vAxis.serialize_subset (c, vAxis, this))\n+      return_trace (false);\n+\n+    return_trace (true);\n+  }\n@@ -489,1 +813,1 @@\n-    const VariationStore &var_store = get_var_store ();\n+    const ItemVariationStore &var_store = get_var_store ();\n@@ -499,0 +823,1 @@\n+                          hb_barrier () &&\n@@ -511,1 +836,1 @@\n-  Offset32To<VariationStore>\n+  Offset32To<ItemVariationStore>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-base-table.hh","additions":340,"deletions":15,"binary":false,"changes":355,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"hb-cache.hh\"\n@@ -67,1 +68,1 @@\n-  bool& insert_catch_all_feature_variation_record;\n+  hb_set_t& catch_all_record_feature_idxes;\n@@ -145,0 +146,2 @@\n+  const hb_set_t *catch_all_record_feature_idxes;\n+  const hb_hashmap_t<unsigned, hb_pair_t<const void*, const void*>> *feature_idx_tag_map;\n@@ -167,0 +170,2 @@\n+      catch_all_record_feature_idxes = &c_->plan->gsub_old_features;\n+      feature_idx_tag_map = &c_->plan->gsub_old_feature_idx_tag_map;\n@@ -175,0 +180,2 @@\n+      catch_all_record_feature_idxes = &c_->plan->gpos_old_features;\n+      feature_idx_tag_map = &c_->plan->gpos_old_feature_idx_tag_map;\n@@ -185,1 +192,1 @@\n-struct VariationStore;\n+struct ItemVariationStore;\n@@ -457,0 +464,1 @@\n+    hb_barrier ();\n@@ -642,2 +650,1 @@\n-    if (last_name_id >= 256 && last_name_id <= 32767)\n-      nameids_to_retain->add_range (firstParamUILabelNameID, last_name_id);\n+    nameids_to_retain->add_range (firstParamUILabelNameID, last_name_id);\n@@ -823,0 +830,1 @@\n+    hb_barrier ();\n@@ -841,0 +849,1 @@\n+    hb_barrier ();\n@@ -903,1 +912,2 @@\n-    return_trace (c->check_struct (this) && offset.sanitize (c, base, &closure));\n+    return_trace (c->check_struct (this) &&\n+                  offset.sanitize (c, base, &closure));\n@@ -1374,1 +1384,0 @@\n-      if (unlikely (!c->serializer->extend (out))) return_trace (false);\n@@ -1376,2 +1385,13 @@\n-      HBUINT16 &outMarkFilteringSet = StructAfter<HBUINT16> (out->subTable);\n-      outMarkFilteringSet = markFilteringSet;\n+      hb_codepoint_t *idx;\n+      if (!c->plan->used_mark_sets_map.has (markFilteringSet, &idx))\n+      {\n+        unsigned new_flag = lookupFlag;\n+        new_flag &= ~LookupFlag::UseMarkFilteringSet;\n+        out->lookupFlag = new_flag;\n+      }\n+      else\n+      {\n+        if (unlikely (!c->serializer->extend (out))) return_trace (false);\n+        HBUINT16 &outMarkFilteringSet = StructAfter<HBUINT16> (out->subTable);\n+        outMarkFilteringSet = *idx;\n+      }\n@@ -1394,0 +1414,1 @@\n+    hb_barrier ();\n@@ -1409,0 +1430,2 @@\n+      hb_barrier ();\n+\n@@ -2048,2 +2071,2 @@\n-    case 1: return u.format1.get_class (glyph_id);\n-    case 2: return u.format2.get_class (glyph_id);\n+    case 1: hb_barrier (); return u.format1.get_class (glyph_id);\n+    case 2: hb_barrier (); return u.format2.get_class (glyph_id);\n@@ -2051,2 +2074,2 @@\n-    case 3: return u.format3.get_class (glyph_id);\n-    case 4: return u.format4.get_class (glyph_id);\n+    case 3: hb_barrier (); return u.format3.get_class (glyph_id);\n+    case 4: hb_barrier (); return u.format4.get_class (glyph_id);\n@@ -2057,0 +2080,9 @@\n+  unsigned int get_class (hb_codepoint_t glyph_id,\n+                          hb_ot_lookup_cache_t *cache) const\n+  {\n+    unsigned klass;\n+    if (cache && cache->get (glyph_id, &klass)) return klass;\n+    klass = get_class (glyph_id);\n+    if (cache) cache->set (glyph_id, klass);\n+    return klass;\n+  }\n@@ -2061,2 +2093,2 @@\n-    case 1: return u.format1.get_population ();\n-    case 2: return u.format2.get_population ();\n+    case 1: hb_barrier (); return u.format1.get_population ();\n+    case 2: hb_barrier (); return u.format2.get_population ();\n@@ -2064,2 +2096,2 @@\n-    case 3: return u.format3.get_population ();\n-    case 4: return u.format4.get_population ();\n+    case 3: hb_barrier (); return u.format3.get_population ();\n+    case 4: hb_barrier (); return u.format4.get_population ();\n@@ -2127,2 +2159,2 @@\n-    case 1: return_trace (u.format1.serialize (c, it));\n-    case 2: return_trace (u.format2.serialize (c, it));\n+    case 1: hb_barrier (); return_trace (u.format1.serialize (c, it));\n+    case 2: hb_barrier (); return_trace (u.format2.serialize (c, it));\n@@ -2130,2 +2162,2 @@\n-    case 3: return_trace (u.format3.serialize (c, it));\n-    case 4: return_trace (u.format4.serialize (c, it));\n+    case 3: hb_barrier (); return_trace (u.format3.serialize (c, it));\n+    case 4: hb_barrier (); return_trace (u.format4.serialize (c, it));\n@@ -2145,2 +2177,2 @@\n-    case 1: return_trace (u.format1.subset (c, klass_map, keep_empty_table, use_class_zero, glyph_filter));\n-    case 2: return_trace (u.format2.subset (c, klass_map, keep_empty_table, use_class_zero, glyph_filter));\n+    case 1: hb_barrier (); return_trace (u.format1.subset (c, klass_map, keep_empty_table, use_class_zero, glyph_filter));\n+    case 2: hb_barrier (); return_trace (u.format2.subset (c, klass_map, keep_empty_table, use_class_zero, glyph_filter));\n@@ -2148,2 +2180,2 @@\n-    case 3: return_trace (u.format3.subset (c, klass_map, keep_empty_table, use_class_zero, glyph_filter));\n-    case 4: return_trace (u.format4.subset (c, klass_map, keep_empty_table, use_class_zero, glyph_filter));\n+    case 3: hb_barrier (); return_trace (u.format3.subset (c, klass_map, keep_empty_table, use_class_zero, glyph_filter));\n+    case 4: hb_barrier (); return_trace (u.format4.subset (c, klass_map, keep_empty_table, use_class_zero, glyph_filter));\n@@ -2159,0 +2191,1 @@\n+    hb_barrier ();\n@@ -2160,2 +2193,2 @@\n-    case 1: return_trace (u.format1.sanitize (c));\n-    case 2: return_trace (u.format2.sanitize (c));\n+    case 1: hb_barrier (); return_trace (u.format1.sanitize (c));\n+    case 2: hb_barrier (); return_trace (u.format2.sanitize (c));\n@@ -2163,2 +2196,2 @@\n-    case 3: return_trace (u.format3.sanitize (c));\n-    case 4: return_trace (u.format4.sanitize (c));\n+    case 3: hb_barrier (); return_trace (u.format3.sanitize (c));\n+    case 4: hb_barrier (); return_trace (u.format4.sanitize (c));\n@@ -2173,2 +2206,2 @@\n-    case 1: return u.format1.cost ();\n-    case 2: return u.format2.cost ();\n+    case 1: hb_barrier (); return u.format1.cost ();\n+    case 2: hb_barrier (); return u.format2.cost ();\n@@ -2176,2 +2209,2 @@\n-    case 3: return u.format3.cost ();\n-    case 4: return u.format4.cost ();\n+    case 3: hb_barrier (); return u.format3.cost ();\n+    case 4: hb_barrier (); return u.format4.cost ();\n@@ -2189,2 +2222,2 @@\n-    case 1: return u.format1.collect_coverage (glyphs);\n-    case 2: return u.format2.collect_coverage (glyphs);\n+    case 1: hb_barrier (); return u.format1.collect_coverage (glyphs);\n+    case 2: hb_barrier (); return u.format2.collect_coverage (glyphs);\n@@ -2192,2 +2225,2 @@\n-    case 3: return u.format3.collect_coverage (glyphs);\n-    case 4: return u.format4.collect_coverage (glyphs);\n+    case 3: hb_barrier (); return u.format3.collect_coverage (glyphs);\n+    case 4: hb_barrier (); return u.format4.collect_coverage (glyphs);\n@@ -2205,2 +2238,2 @@\n-    case 1: return u.format1.collect_class (glyphs, klass);\n-    case 2: return u.format2.collect_class (glyphs, klass);\n+    case 1: hb_barrier (); return u.format1.collect_class (glyphs, klass);\n+    case 2: hb_barrier (); return u.format2.collect_class (glyphs, klass);\n@@ -2208,2 +2241,2 @@\n-    case 3: return u.format3.collect_class (glyphs, klass);\n-    case 4: return u.format4.collect_class (glyphs, klass);\n+    case 3: hb_barrier (); return u.format3.collect_class (glyphs, klass);\n+    case 4: hb_barrier (); return u.format4.collect_class (glyphs, klass);\n@@ -2218,2 +2251,2 @@\n-    case 1: return u.format1.intersects (glyphs);\n-    case 2: return u.format2.intersects (glyphs);\n+    case 1: hb_barrier (); return u.format1.intersects (glyphs);\n+    case 2: hb_barrier (); return u.format2.intersects (glyphs);\n@@ -2221,2 +2254,2 @@\n-    case 3: return u.format3.intersects (glyphs);\n-    case 4: return u.format4.intersects (glyphs);\n+    case 3: hb_barrier (); return u.format3.intersects (glyphs);\n+    case 4: hb_barrier (); return u.format4.intersects (glyphs);\n@@ -2230,2 +2263,2 @@\n-    case 1: return u.format1.intersects_class (glyphs, klass);\n-    case 2: return u.format2.intersects_class (glyphs, klass);\n+    case 1: hb_barrier (); return u.format1.intersects_class (glyphs, klass);\n+    case 2: hb_barrier (); return u.format2.intersects_class (glyphs, klass);\n@@ -2233,2 +2266,2 @@\n-    case 3: return u.format3.intersects_class (glyphs, klass);\n-    case 4: return u.format4.intersects_class (glyphs, klass);\n+    case 3: hb_barrier (); return u.format3.intersects_class (glyphs, klass);\n+    case 4: hb_barrier (); return u.format4.intersects_class (glyphs, klass);\n@@ -2243,2 +2276,2 @@\n-    case 1: return u.format1.intersected_class_glyphs (glyphs, klass, intersect_glyphs);\n-    case 2: return u.format2.intersected_class_glyphs (glyphs, klass, intersect_glyphs);\n+    case 1: hb_barrier (); return u.format1.intersected_class_glyphs (glyphs, klass, intersect_glyphs);\n+    case 2: hb_barrier (); return u.format2.intersected_class_glyphs (glyphs, klass, intersect_glyphs);\n@@ -2246,2 +2279,2 @@\n-    case 3: return u.format3.intersected_class_glyphs (glyphs, klass, intersect_glyphs);\n-    case 4: return u.format4.intersected_class_glyphs (glyphs, klass, intersect_glyphs);\n+    case 3: hb_barrier (); return u.format3.intersected_class_glyphs (glyphs, klass, intersect_glyphs);\n+    case 4: hb_barrier (); return u.format4.intersected_class_glyphs (glyphs, klass, intersect_glyphs);\n@@ -2256,2 +2289,2 @@\n-    case 1: return u.format1.intersected_classes (glyphs, intersect_classes);\n-    case 2: return u.format2.intersected_classes (glyphs, intersect_classes);\n+    case 1: hb_barrier (); return u.format1.intersected_classes (glyphs, intersect_classes);\n+    case 2: hb_barrier (); return u.format2.intersected_classes (glyphs, intersect_classes);\n@@ -2259,2 +2292,2 @@\n-    case 3: return u.format3.intersected_classes (glyphs, intersect_classes);\n-    case 4: return u.format4.intersected_classes (glyphs, intersect_classes);\n+    case 3: hb_barrier (); return u.format3.intersected_classes (glyphs, intersect_classes);\n+    case 4: hb_barrier (); return u.format4.intersected_classes (glyphs, intersect_classes);\n@@ -2450,0 +2483,2 @@\n+    else if (coord == 0) \/\/ Faster\n+      return 0.f;\n@@ -2473,2 +2508,0 @@\n-    \/* TODO Handle invalid start\/peak\/end configs, so we don't\n-     * have to do that at runtime. *\/\n@@ -2490,0 +2523,27 @@\n+struct SparseVarRegionAxis\n+{\n+  float evaluate (const int *coords, unsigned int coord_len) const\n+  {\n+    unsigned i = axisIndex;\n+    int coord = i < coord_len ? coords[i] : 0;\n+    return axis.evaluate (coord);\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (c->check_struct (this));\n+  }\n+\n+  bool serialize (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace (c->embed (this));\n+  }\n+\n+  public:\n+  HBUINT16 axisIndex;\n+  VarRegionAxis axis;\n+  public:\n+  DEFINE_SIZE_STATIC (8);\n+};\n@@ -2537,1 +2597,3 @@\n-    return_trace (c->check_struct (this) && axesZ.sanitize (c, axisCount * regionCount));\n+    return_trace (c->check_struct (this) &&\n+                  hb_barrier () &&\n+                  axesZ.sanitize (c, axisCount * regionCount));\n@@ -2618,1 +2680,1 @@\n-        axis_tuples.set (*axis_tag, Triple (min_val, def_val, max_val));\n+        axis_tuples.set (*axis_tag, Triple ((double) min_val, (double) def_val, (double) max_val));\n@@ -2652,0 +2714,59 @@\n+struct SparseVariationRegion : Array16Of<SparseVarRegionAxis>\n+{\n+  float evaluate (const int *coords, unsigned int coord_len) const\n+  {\n+    float v = 1.f;\n+    unsigned int count = len;\n+    for (unsigned int i = 0; i < count; i++)\n+    {\n+      float factor = arrayZ[i].evaluate (coords, coord_len);\n+      if (factor == 0.f)\n+        return 0.;\n+      v *= factor;\n+    }\n+    return v;\n+  }\n+};\n+\n+struct SparseVarRegionList\n+{\n+  using cache_t = float;\n+\n+  float evaluate (unsigned int region_index,\n+                  const int *coords, unsigned int coord_len,\n+                  cache_t *cache = nullptr) const\n+  {\n+    if (unlikely (region_index >= regions.len))\n+      return 0.;\n+\n+    float *cached_value = nullptr;\n+    if (cache)\n+    {\n+      cached_value = &(cache[region_index]);\n+      if (likely (*cached_value != REGION_CACHE_ITEM_CACHE_INVALID))\n+        return *cached_value;\n+    }\n+\n+    const SparseVariationRegion &region = this+regions[region_index];\n+\n+    float v = region.evaluate (coords, coord_len);\n+\n+    if (cache)\n+      *cached_value = v;\n+    return v;\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (regions.sanitize (c, this));\n+  }\n+\n+  public:\n+  Array16Of<Offset32To<SparseVariationRegion>>\n+                regions;\n+  public:\n+  DEFINE_SIZE_ARRAY (2, regions);\n+};\n+\n+\n@@ -2731,0 +2852,1 @@\n+                  hb_barrier () &&\n@@ -3012,1 +3134,47 @@\n-struct VariationStore\n+struct MultiVarData\n+{\n+  unsigned int get_size () const\n+  { return min_size\n+         - regionIndices.min_size + regionIndices.get_size ()\n+         + StructAfter<CFF2Index> (regionIndices).get_size ();\n+  }\n+\n+  void get_delta (unsigned int inner,\n+                  const int *coords, unsigned int coord_count,\n+                  const SparseVarRegionList &regions,\n+                  hb_array_t<float> out,\n+                  SparseVarRegionList::cache_t *cache = nullptr) const\n+  {\n+    auto &deltaSets = StructAfter<decltype (deltaSetsX)> (regionIndices);\n+\n+    auto values_iter = deltaSets.fetcher (inner);\n+    unsigned regionCount = regionIndices.len;\n+    for (unsigned regionIndex = 0; regionIndex < regionCount; regionIndex++)\n+    {\n+      float scalar = regions.evaluate (regionIndices.arrayZ[regionIndex],\n+                                       coords, coord_count,\n+                                       cache);\n+      values_iter.add_to (out, scalar);\n+    }\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (format.sanitize (c) &&\n+                  hb_barrier () &&\n+                  format == 1 &&\n+                  regionIndices.sanitize (c) &&\n+                  hb_barrier () &&\n+                  StructAfter<decltype (deltaSetsX)> (regionIndices).sanitize (c));\n+  }\n+\n+  protected:\n+  HBUINT8             format; \/\/ 1\n+  Array16Of<HBUINT16> regionIndices;\n+  TupleList           deltaSetsX;\n+  public:\n+  DEFINE_SIZE_MIN (8);\n+};\n+\n+struct ItemVariationStore\n@@ -3064,1 +3232,1 @@\n-                   hb_array_t<int> coords,\n+                   hb_array_t<const int> coords,\n@@ -3080,0 +3248,1 @@\n+                  hb_barrier () &&\n@@ -3116,1 +3285,1 @@\n-                  const VariationStore *src,\n+                  const ItemVariationStore *src,\n@@ -3172,1 +3341,1 @@\n-  VariationStore *copy (hb_serialize_context_t *c) const\n+  ItemVariationStore *copy (hb_serialize_context_t *c) const\n@@ -3183,0 +3352,2 @@\n+      if (!c->propagate_error(inner_maps))\n+        return_trace(nullptr);\n@@ -3202,1 +3373,1 @@\n-    VariationStore *varstore_prime = c->serializer->start_embed<VariationStore> ();\n+    ItemVariationStore *varstore_prime = c->serializer->start_embed<ItemVariationStore> ();\n@@ -3268,0 +3439,97 @@\n+struct MultiItemVariationStore\n+{\n+  using cache_t = SparseVarRegionList::cache_t;\n+\n+  cache_t *create_cache (hb_array_t<float> static_cache = hb_array_t<float> ()) const\n+  {\n+#ifdef HB_NO_VAR\n+    return nullptr;\n+#endif\n+    auto &r = this+regions;\n+    unsigned count = r.regions.len;\n+\n+    float *cache;\n+    if (count <= static_cache.length)\n+      cache = static_cache.arrayZ;\n+    else\n+    {\n+      cache = (float *) hb_malloc (sizeof (float) * count);\n+      if (unlikely (!cache)) return nullptr;\n+    }\n+\n+    for (unsigned i = 0; i < count; i++)\n+      cache[i] = REGION_CACHE_ITEM_CACHE_INVALID;\n+\n+    return cache;\n+  }\n+\n+  static void destroy_cache (cache_t *cache,\n+                             hb_array_t<float> static_cache = hb_array_t<float> ())\n+  {\n+    if (cache != static_cache.arrayZ)\n+      hb_free (cache);\n+  }\n+\n+  private:\n+  void get_delta (unsigned int outer, unsigned int inner,\n+                  const int *coords, unsigned int coord_count,\n+                  hb_array_t<float> out,\n+                  VarRegionList::cache_t *cache = nullptr) const\n+  {\n+#ifdef HB_NO_VAR\n+    return;\n+#endif\n+\n+    if (unlikely (outer >= dataSets.len))\n+      return;\n+\n+    return (this+dataSets[outer]).get_delta (inner,\n+                                             coords, coord_count,\n+                                             this+regions,\n+                                             out,\n+                                             cache);\n+  }\n+\n+  public:\n+  void get_delta (unsigned int index,\n+                  const int *coords, unsigned int coord_count,\n+                  hb_array_t<float> out,\n+                  VarRegionList::cache_t *cache = nullptr) const\n+  {\n+    unsigned int outer = index >> 16;\n+    unsigned int inner = index & 0xFFFF;\n+    get_delta (outer, inner, coords, coord_count, out, cache);\n+  }\n+  void get_delta (unsigned int index,\n+                  hb_array_t<const int> coords,\n+                  hb_array_t<float> out,\n+                  VarRegionList::cache_t *cache = nullptr) const\n+  {\n+    return get_delta (index,\n+                      coords.arrayZ, coords.length,\n+                      out,\n+                      cache);\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+#ifdef HB_NO_VAR\n+    return true;\n+#endif\n+\n+    TRACE_SANITIZE (this);\n+    return_trace (c->check_struct (this) &&\n+                  hb_barrier () &&\n+                  format == 1 &&\n+                  regions.sanitize (c, this) &&\n+                  dataSets.sanitize (c, this));\n+  }\n+\n+  protected:\n+  HBUINT16                              format; \/\/ 1\n+  Offset32To<SparseVarRegionList>       regions;\n+  Array16OfOffset32To<MultiVarData>     dataSets;\n+  public:\n+  DEFINE_SIZE_ARRAY_SIZED (8, dataSets);\n+};\n+\n@@ -3270,0 +3538,265 @@\n+template <typename MapCountT>\n+struct DeltaSetIndexMapFormat01\n+{\n+  friend struct DeltaSetIndexMap;\n+\n+  unsigned get_size () const\n+  { return min_size + mapCount * get_width (); }\n+\n+  private:\n+  DeltaSetIndexMapFormat01* copy (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace (c->embed (this));\n+  }\n+\n+  template <typename T>\n+  bool serialize (hb_serialize_context_t *c, const T &plan)\n+  {\n+    unsigned int width = plan.get_width ();\n+    unsigned int inner_bit_count = plan.get_inner_bit_count ();\n+    const hb_array_t<const uint32_t> output_map = plan.get_output_map ();\n+\n+    TRACE_SERIALIZE (this);\n+    if (unlikely (output_map.length && ((((inner_bit_count-1)&~0xF)!=0) || (((width-1)&~0x3)!=0))))\n+      return_trace (false);\n+    if (unlikely (!c->extend_min (this))) return_trace (false);\n+\n+    entryFormat = ((width-1)<<4)|(inner_bit_count-1);\n+    mapCount = output_map.length;\n+    HBUINT8 *p = c->allocate_size<HBUINT8> (width * output_map.length);\n+    if (unlikely (!p)) return_trace (false);\n+    for (unsigned int i = 0; i < output_map.length; i++)\n+    {\n+      unsigned int v = output_map.arrayZ[i];\n+      if (v)\n+      {\n+        unsigned int outer = v >> 16;\n+        unsigned int inner = v & 0xFFFF;\n+        unsigned int u = (outer << inner_bit_count) | inner;\n+        for (unsigned int w = width; w > 0;)\n+        {\n+          p[--w] = u;\n+          u >>= 8;\n+        }\n+      }\n+      p += width;\n+    }\n+    return_trace (true);\n+  }\n+\n+  uint32_t map (unsigned int v) const \/* Returns 16.16 outer.inner. *\/\n+  {\n+    \/* If count is zero, pass value unchanged.  This takes\n+     * care of direct mapping for advance map. *\/\n+    if (!mapCount)\n+      return v;\n+\n+    if (v >= mapCount)\n+      v = mapCount - 1;\n+\n+    unsigned int u = 0;\n+    { \/* Fetch it. *\/\n+      unsigned int w = get_width ();\n+      const HBUINT8 *p = mapDataZ.arrayZ + w * v;\n+      for (; w; w--)\n+        u = (u << 8) + *p++;\n+    }\n+\n+    { \/* Repack it. *\/\n+      unsigned int n = get_inner_bit_count ();\n+      unsigned int outer = u >> n;\n+      unsigned int inner = u & ((1 << n) - 1);\n+      u = (outer<<16) | inner;\n+    }\n+\n+    return u;\n+  }\n+\n+  unsigned get_map_count () const       { return mapCount; }\n+  unsigned get_width () const           { return ((entryFormat >> 4) & 3) + 1; }\n+  unsigned get_inner_bit_count () const { return (entryFormat & 0xF) + 1; }\n+\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (c->check_struct (this) &&\n+                  hb_barrier () &&\n+                  c->check_range (mapDataZ.arrayZ,\n+                                  mapCount,\n+                                  get_width ()));\n+  }\n+\n+  protected:\n+  HBUINT8       format;         \/* Format identifier--format = 0 *\/\n+  HBUINT8       entryFormat;    \/* A packed field that describes the compressed\n+                                 * representation of delta-set indices. *\/\n+  MapCountT     mapCount;       \/* The number of mapping entries. *\/\n+  UnsizedArrayOf<HBUINT8>\n+                mapDataZ;       \/* The delta-set index mapping data. *\/\n+\n+  public:\n+  DEFINE_SIZE_ARRAY (2+MapCountT::static_size, mapDataZ);\n+};\n+\n+struct DeltaSetIndexMap\n+{\n+  template <typename T>\n+  bool serialize (hb_serialize_context_t *c, const T &plan)\n+  {\n+    TRACE_SERIALIZE (this);\n+    unsigned length = plan.get_output_map ().length;\n+    u.format = length <= 0xFFFF ? 0 : 1;\n+    switch (u.format) {\n+    case 0: hb_barrier (); return_trace (u.format0.serialize (c, plan));\n+    case 1: hb_barrier (); return_trace (u.format1.serialize (c, plan));\n+    default:return_trace (false);\n+    }\n+  }\n+\n+  uint32_t map (unsigned v) const\n+  {\n+    switch (u.format) {\n+    case 0: hb_barrier (); return (u.format0.map (v));\n+    case 1: hb_barrier (); return (u.format1.map (v));\n+    default:return v;\n+    }\n+  }\n+\n+  unsigned get_map_count () const\n+  {\n+    switch (u.format) {\n+    case 0: hb_barrier (); return u.format0.get_map_count ();\n+    case 1: hb_barrier (); return u.format1.get_map_count ();\n+    default:return 0;\n+    }\n+  }\n+\n+  unsigned get_width () const\n+  {\n+    switch (u.format) {\n+    case 0: hb_barrier (); return u.format0.get_width ();\n+    case 1: hb_barrier (); return u.format1.get_width ();\n+    default:return 0;\n+    }\n+  }\n+\n+  unsigned get_inner_bit_count () const\n+  {\n+    switch (u.format) {\n+    case 0: hb_barrier (); return u.format0.get_inner_bit_count ();\n+    case 1: hb_barrier (); return u.format1.get_inner_bit_count ();\n+    default:return 0;\n+    }\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    if (!u.format.sanitize (c)) return_trace (false);\n+    hb_barrier ();\n+    switch (u.format) {\n+    case 0: hb_barrier (); return_trace (u.format0.sanitize (c));\n+    case 1: hb_barrier (); return_trace (u.format1.sanitize (c));\n+    default:return_trace (true);\n+    }\n+  }\n+\n+  DeltaSetIndexMap* copy (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    switch (u.format) {\n+    case 0: hb_barrier (); return_trace (reinterpret_cast<DeltaSetIndexMap *> (u.format0.copy (c)));\n+    case 1: hb_barrier (); return_trace (reinterpret_cast<DeltaSetIndexMap *> (u.format1.copy (c)));\n+    default:return_trace (nullptr);\n+    }\n+  }\n+\n+  protected:\n+  union {\n+  HBUINT8                            format;         \/* Format identifier *\/\n+  DeltaSetIndexMapFormat01<HBUINT16> format0;\n+  DeltaSetIndexMapFormat01<HBUINT32> format1;\n+  } u;\n+  public:\n+  DEFINE_SIZE_UNION (1, format);\n+};\n+\n+\n+struct ItemVarStoreInstancer\n+{\n+  ItemVarStoreInstancer (const ItemVariationStore *varStore_,\n+                         const DeltaSetIndexMap *varIdxMap,\n+                         hb_array_t<const int> coords,\n+                         VarRegionList::cache_t *cache = nullptr) :\n+    varStore (varStore_), varIdxMap (varIdxMap), coords (coords), cache (cache)\n+  {\n+    if (!varStore)\n+      varStore = &Null(ItemVariationStore);\n+  }\n+\n+  operator bool () const { return varStore && bool (coords); }\n+\n+  float operator[] (uint32_t varIdx) const\n+  { return (*this) (varIdx); }\n+\n+  float operator() (uint32_t varIdx, unsigned short offset = 0) const\n+  {\n+   if (!coords || varIdx == VarIdx::NO_VARIATION)\n+     return 0.f;\n+\n+    varIdx += offset;\n+    if (varIdxMap)\n+      varIdx = varIdxMap->map (varIdx);\n+    return varStore->get_delta (varIdx, coords, cache);\n+  }\n+\n+  const ItemVariationStore *varStore;\n+  const DeltaSetIndexMap *varIdxMap;\n+  hb_array_t<const int> coords;\n+  VarRegionList::cache_t *cache;\n+};\n+\n+struct MultiItemVarStoreInstancer\n+{\n+  MultiItemVarStoreInstancer (const MultiItemVariationStore *varStore,\n+                              const DeltaSetIndexMap *varIdxMap,\n+                              hb_array_t<const int> coords,\n+                              SparseVarRegionList::cache_t *cache = nullptr) :\n+    varStore (varStore), varIdxMap (varIdxMap), coords (coords), cache (cache)\n+  {\n+    if (!varStore)\n+      varStore = &Null(MultiItemVariationStore);\n+  }\n+\n+  operator bool () const { return varStore && bool (coords); }\n+\n+  float operator[] (uint32_t varIdx) const\n+  {\n+    float v = 0;\n+    (*this) (hb_array (&v, 1), varIdx);\n+    return v;\n+  }\n+\n+  void operator() (hb_array_t<float> out, uint32_t varIdx, unsigned short offset = 0) const\n+  {\n+    if (coords && varIdx != VarIdx::NO_VARIATION)\n+    {\n+      varIdx += offset;\n+      if (varIdxMap)\n+        varIdx = varIdxMap->map (varIdx);\n+      varStore->get_delta (varIdx, coords, out, cache);\n+    }\n+    else\n+      for (unsigned i = 0; i < out.length; i++)\n+        out.arrayZ[i] = 0.f;\n+  }\n+\n+  const MultiItemVariationStore *varStore;\n+  const DeltaSetIndexMap *varIdxMap;\n+  hb_array_t<const int> coords;\n+  SparseVarRegionList::cache_t *cache;\n+};\n+\n+\n@@ -3281,1 +3814,10 @@\n-struct ConditionFormat1\n+struct Condition;\n+\n+template <typename Instancer>\n+static bool\n+_hb_recurse_condition_evaluate (const struct Condition &condition,\n+                                const int *coords,\n+                                unsigned int coord_len,\n+                                Instancer *instancer);\n+\n+struct ConditionAxisRange\n@@ -3301,1 +3843,1 @@\n-    Triple axis_limit{-1.f, 0.f, 1.f};\n+    Triple axis_limit{-1.0, 0.0, 1.0};\n@@ -3307,1 +3849,1 @@\n-    TripleDistances axis_triple_distances{1.f, 1.f};\n+    TripleDistances axis_triple_distances{1.0, 1.0};\n@@ -3312,2 +3854,2 @@\n-    float normalized_min = renormalizeValue (filterRangeMinValue.to_float (), axis_limit, axis_triple_distances, false);\n-    float normalized_max = renormalizeValue (filterRangeMaxValue.to_float (), axis_limit, axis_triple_distances, false);\n+    float normalized_min = renormalizeValue ((double) filterRangeMinValue.to_float (), axis_limit, axis_triple_distances, false);\n+    float normalized_max = renormalizeValue ((double) filterRangeMaxValue.to_float (), axis_limit, axis_triple_distances, false);\n@@ -3331,1 +3873,1 @@\n-    Triple axis_range (-1.f, 0.f, 1.f);\n+    Triple axis_range (-1.0, 0.0, 1.0);\n@@ -3333,0 +3875,1 @@\n+    bool axis_set_by_user = false;\n@@ -3334,0 +3877,1 @@\n+    {\n@@ -3335,0 +3879,2 @@\n+      axis_set_by_user = true;\n+    }\n@@ -3353,2 +3899,1 @@\n-    if (c->axes_location->has (axis_tag) &&\n-        c->axes_location->get (axis_tag).is_point ())\n+    if (axis_set_by_user && axis_range.is_point ())\n@@ -3361,2 +3906,2 @@\n-      int16_t int_filter_max_val = filterRangeMaxValue.to_int ();\n-      int16_t int_filter_min_val = filterRangeMinValue.to_int ();\n+      uint16_t int_filter_max_val = (uint16_t) filterRangeMaxValue.to_int ();\n+      uint16_t int_filter_min_val = (uint16_t) filterRangeMinValue.to_int ();\n@@ -3368,1 +3913,0 @@\n-\n@@ -3372,1 +3916,3 @@\n-  bool evaluate (const int *coords, unsigned int coord_len) const\n+  template <typename Instancer>\n+  bool evaluate (const int *coords, unsigned int coord_len,\n+                 Instancer *instancer HB_UNUSED) const\n@@ -3393,0 +3939,181 @@\n+struct ConditionValue\n+{\n+  friend struct Condition;\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    \/\/ TODO(subset)\n+    return_trace (false);\n+  }\n+\n+  private:\n+  template <typename Instancer>\n+  bool evaluate (const int *coords, unsigned int coord_len,\n+                 Instancer *instancer) const\n+  {\n+    signed value = defaultValue;\n+    value += (*instancer)[varIdx];\n+    return value > 0;\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               hb_subset_layout_context_t *l,\n+               bool insert_catch_all) const\n+  {\n+    TRACE_SUBSET (this);\n+    \/\/ TODO(subset)\n+    return_trace (false);\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (c->check_struct (this));\n+  }\n+\n+  protected:\n+  HBUINT16      format;         \/* Format identifier--format = 2 *\/\n+  HBINT16       defaultValue;   \/* Value at default instance. *\/\n+  VarIdx        varIdx;         \/* Variation index *\/\n+  public:\n+  DEFINE_SIZE_STATIC (8);\n+};\n+\n+struct ConditionAnd\n+{\n+  friend struct Condition;\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    \/\/ TODO(subset)\n+    return_trace (false);\n+  }\n+\n+  private:\n+  template <typename Instancer>\n+  bool evaluate (const int *coords, unsigned int coord_len,\n+                 Instancer *instancer) const\n+  {\n+    unsigned int count = conditions.len;\n+    for (unsigned int i = 0; i < count; i++)\n+      if (!_hb_recurse_condition_evaluate (this+conditions.arrayZ[i],\n+                                           coords, coord_len,\n+                                           instancer))\n+        return false;\n+    return true;\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               hb_subset_layout_context_t *l,\n+               bool insert_catch_all) const\n+  {\n+    TRACE_SUBSET (this);\n+    \/\/ TODO(subset)\n+    return_trace (false);\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (conditions.sanitize (c, this));\n+  }\n+\n+  protected:\n+  HBUINT16      format;         \/* Format identifier--format = 3 *\/\n+  Array8OfOffset24To<struct Condition>  conditions;\n+  public:\n+  DEFINE_SIZE_ARRAY (3, conditions);\n+};\n+\n+struct ConditionOr\n+{\n+  friend struct Condition;\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    \/\/ TODO(subset)\n+    return_trace (false);\n+  }\n+\n+  private:\n+  template <typename Instancer>\n+  bool evaluate (const int *coords, unsigned int coord_len,\n+                 Instancer *instancer) const\n+  {\n+    unsigned int count = conditions.len;\n+    for (unsigned int i = 0; i < count; i++)\n+      if (_hb_recurse_condition_evaluate (this+conditions.arrayZ[i],\n+                                          coords, coord_len,\n+                                          instancer))\n+        return true;\n+    return false;\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               hb_subset_layout_context_t *l,\n+               bool insert_catch_all) const\n+  {\n+    TRACE_SUBSET (this);\n+    \/\/ TODO(subset)\n+    return_trace (false);\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (conditions.sanitize (c, this));\n+  }\n+\n+  protected:\n+  HBUINT16      format;         \/* Format identifier--format = 4 *\/\n+  Array8OfOffset24To<struct Condition>  conditions;\n+  public:\n+  DEFINE_SIZE_ARRAY (3, conditions);\n+};\n+\n+struct ConditionNegate\n+{\n+  friend struct Condition;\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    \/\/ TODO(subset)\n+    return_trace (false);\n+  }\n+\n+  private:\n+  template <typename Instancer>\n+  bool evaluate (const int *coords, unsigned int coord_len,\n+                 Instancer *instancer) const\n+  {\n+    return !_hb_recurse_condition_evaluate (this+condition,\n+                                            coords, coord_len,\n+                                            instancer);\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               hb_subset_layout_context_t *l,\n+               bool insert_catch_all) const\n+  {\n+    TRACE_SUBSET (this);\n+    \/\/ TODO(subset)\n+    return_trace (false);\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (condition.sanitize (c, this));\n+  }\n+\n+  protected:\n+  HBUINT16      format;         \/* Format identifier--format = 5 *\/\n+  Offset24To<struct Condition>  condition;\n+  public:\n+  DEFINE_SIZE_STATIC (5);\n+};\n+\n@@ -3395,1 +4122,3 @@\n-  bool evaluate (const int *coords, unsigned int coord_len) const\n+  template <typename Instancer>\n+  bool evaluate (const int *coords, unsigned int coord_len,\n+                 Instancer *instancer) const\n@@ -3398,1 +4127,5 @@\n-    case 1: return u.format1.evaluate (coords, coord_len);\n+    case 1: hb_barrier (); return u.format1.evaluate (coords, coord_len, instancer);\n+    case 2: hb_barrier (); return u.format2.evaluate (coords, coord_len, instancer);\n+    case 3: hb_barrier (); return u.format3.evaluate (coords, coord_len, instancer);\n+    case 4: hb_barrier (); return u.format4.evaluate (coords, coord_len, instancer);\n+    case 5: hb_barrier (); return u.format5.evaluate (coords, coord_len, instancer);\n@@ -3407,1 +4140,2 @@\n-    case 1: return u.format1.keep_with_variations (c, condition_map);\n+    case 1: hb_barrier (); return u.format1.keep_with_variations (c, condition_map);\n+    \/\/ TODO(subset)\n@@ -3418,1 +4152,5 @@\n-    case 1: return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n+    case 1: hb_barrier (); return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n+    case 2: hb_barrier (); return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));\n+    case 3: hb_barrier (); return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));\n+    case 4: hb_barrier (); return_trace (c->dispatch (u.format4, std::forward<Ts> (ds)...));\n+    case 5: hb_barrier (); return_trace (c->dispatch (u.format5, std::forward<Ts> (ds)...));\n@@ -3427,0 +4165,1 @@\n+    hb_barrier ();\n@@ -3428,1 +4167,5 @@\n-    case 1: return_trace (u.format1.sanitize (c));\n+    case 1: hb_barrier (); return_trace (u.format1.sanitize (c));\n+    case 2: hb_barrier (); return_trace (u.format2.sanitize (c));\n+    case 3: hb_barrier (); return_trace (u.format3.sanitize (c));\n+    case 4: hb_barrier (); return_trace (u.format4.sanitize (c));\n+    case 5: hb_barrier (); return_trace (u.format5.sanitize (c));\n@@ -3436,1 +4179,5 @@\n-  ConditionFormat1      format1;\n+  ConditionAxisRange    format1;\n+  ConditionValue        format2;\n+  ConditionAnd          format3;\n+  ConditionOr           format4;\n+  ConditionNegate       format5;\n@@ -3442,0 +4189,27 @@\n+template <typename Instancer>\n+bool\n+_hb_recurse_condition_evaluate (const struct Condition &condition,\n+                                const int *coords,\n+                                unsigned int coord_len,\n+                                Instancer *instancer)\n+{\n+  return condition.evaluate (coords, coord_len, instancer);\n+}\n+\n+struct ConditionList\n+{\n+  const Condition& operator[] (unsigned i) const\n+  { return this+conditions[i]; }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (conditions.sanitize (c, this));\n+  }\n+\n+  protected:\n+  Array32OfOffset32To<Condition> conditions;\n+  public:\n+  DEFINE_SIZE_ARRAY (4, conditions);\n+};\n+\n@@ -3444,1 +4218,2 @@\n-  bool evaluate (const int *coords, unsigned int coord_len) const\n+  bool evaluate (const int *coords, unsigned int coord_len,\n+                 ItemVarStoreInstancer *instancer) const\n@@ -3448,1 +4223,1 @@\n-      if (!(this+conditions.arrayZ[i]).evaluate (coords, coord_len))\n+      if (!(this+conditions.arrayZ[i]).evaluate (coords, coord_len, instancer))\n@@ -3500,1 +4275,2 @@\n-               hb_subset_layout_context_t *l) const\n+               hb_subset_layout_context_t *l,\n+               bool insert_catch_all) const\n@@ -3506,0 +4282,2 @@\n+    if (insert_catch_all) return_trace (true);\n+\n@@ -3551,0 +4329,1 @@\n+                                                    hb_set_t& catch_all_record_feature_idxes,\n@@ -3555,0 +4334,1 @@\n+    {\n@@ -3556,0 +4336,25 @@\n+      catch_all_record_feature_idxes.add (featureIndex);\n+    }\n+  }\n+\n+  bool serialize (hb_subset_layout_context_t *c,\n+                  unsigned feature_index,\n+                  const Feature *f, const Tag *tag)\n+  {\n+    TRACE_SERIALIZE (this);\n+    hb_serialize_context_t *s = c->subset_context->serializer;\n+    if (unlikely (!s->extend_min (this))) return_trace (false);\n+\n+    uint32_t *new_feature_idx;\n+    if (!c->feature_index_map->has (feature_index, &new_feature_idx))\n+      return_trace (false);\n+\n+    if (!s->check_assign (featureIndex, *new_feature_idx, HB_SERIALIZE_ERROR_INT_OVERFLOW))\n+      return_trace (false);\n+\n+    s->push ();\n+    bool ret = f->subset (c->subset_context, c, tag);\n+    if (ret) s->add_link (feature, s->pop_pack ());\n+    else s->pop_discard ();\n+\n+    return_trace (ret);\n@@ -3561,4 +4366,2 @@\n-    if (!c->feature_index_map->has (featureIndex) ||\n-        c->feature_substitutes_map->has (featureIndex)) {\n-      \/\/ Feature that is being substituted is not being retained, so we don't\n-      \/\/ need this.\n+    uint32_t *new_feature_index;\n+    if (!c->feature_index_map->has (featureIndex, &new_feature_index))\n@@ -3566,1 +4369,0 @@\n-    }\n@@ -3571,1 +4373,1 @@\n-    out->featureIndex = c->feature_index_map->get (featureIndex);\n+    out->featureIndex = *new_feature_index;\n@@ -3603,1 +4405,0 @@\n-                        const hb_hashmap_t<unsigned, const Feature*> *feature_substitutes_map,\n@@ -3608,5 +4409,0 @@\n-    | hb_filter ([feature_substitutes_map] (const FeatureTableSubstitutionRecord& record)\n-                 {\n-                   if (feature_substitutes_map == nullptr) return true;\n-                   return !feature_substitutes_map->has (record.featureIndex);\n-                 })\n@@ -3637,1 +4433,3 @@\n-      record.collect_feature_substitutes_with_variations (c->feature_substitutes_map, c->feature_indices, this);\n+      record.collect_feature_substitutes_with_variations (c->feature_substitutes_map,\n+                                                          c->catch_all_record_feature_idxes,\n+                                                          c->feature_indices, this);\n@@ -3641,1 +4439,2 @@\n-               hb_subset_layout_context_t *l) const\n+               hb_subset_layout_context_t *l,\n+               bool insert_catch_all) const\n@@ -3650,0 +4449,16 @@\n+    if (insert_catch_all)\n+    {\n+      for (unsigned feature_index : *(l->catch_all_record_feature_idxes))\n+      {\n+        hb_pair_t<const void*, const void*> *p;\n+        if (!l->feature_idx_tag_map->has (feature_index, &p))\n+          return_trace (false);\n+        auto *o = out->substitutions.serialize_append (c->serializer);\n+        if (!o->serialize (l, feature_index,\n+                           reinterpret_cast<const Feature*> (p->first),\n+                           reinterpret_cast<const Tag*> (p->second)))\n+          return_trace (false);\n+      }\n+      return_trace (true);\n+    }\n+\n@@ -3661,0 +4476,1 @@\n+                  hb_barrier () &&\n@@ -3679,1 +4495,0 @@\n-                        const hb_hashmap_t<unsigned, const Feature*> *feature_substitutes_map,\n@@ -3682,1 +4497,1 @@\n-    return (base+substitutions).collect_lookups (feature_indexes, feature_substitutes_map, lookup_indexes);\n+    return (base+substitutions).collect_lookups (feature_indexes, lookup_indexes);\n@@ -3708,1 +4523,2 @@\n-  bool subset (hb_subset_layout_context_t *c, const void *base) const\n+  bool subset (hb_subset_layout_context_t *c, const void *base,\n+               bool insert_catch_all = false) const\n@@ -3714,2 +4530,2 @@\n-    out->conditions.serialize_subset (c->subset_context, conditions, base, c);\n-    out->substitutions.serialize_subset (c->subset_context, substitutions, base, c);\n+    out->conditions.serialize_subset (c->subset_context, conditions, base, c, insert_catch_all);\n+    out->substitutions.serialize_subset (c->subset_context, substitutions, base, c, insert_catch_all);\n@@ -3741,1 +4557,2 @@\n-                   unsigned int *index) const\n+                   unsigned int *index,\n+                   ItemVarStoreInstancer *instancer) const\n@@ -3747,1 +4564,1 @@\n-      if ((this+record.conditions).evaluate (coords, coord_len))\n+      if ((this+record.conditions).evaluate (coords, coord_len, instancer))\n@@ -3774,3 +4591,2 @@\n-    if (c->variation_applied && !c->universal &&\n-        !c->record_cond_idx_map->is_empty ())\n-      c->insert_catch_all_feature_variation_record = true;\n+    if (c->universal || c->record_cond_idx_map->is_empty ())\n+      c->catch_all_record_feature_idxes.reset ();\n@@ -3786,1 +4602,1 @@\n-                        const hb_hashmap_t<unsigned, const Feature*> *feature_substitutes_map,\n+                        const hb_hashmap_t<unsigned, hb::shared_ptr<hb_set_t>> *feature_record_cond_idx_map,\n@@ -3789,2 +4605,8 @@\n-    for (const FeatureVariationRecord& r : varRecords)\n-      r.collect_lookups (this, feature_indexes, feature_substitutes_map, lookup_indexes);\n+    unsigned count = varRecords.len;\n+    for (unsigned int i = 0; i < count; i++)\n+    {\n+      if (feature_record_cond_idx_map &&\n+          !feature_record_cond_idx_map->has (i))\n+        continue;\n+      varRecords[i].collect_lookups (this, feature_indexes, lookup_indexes);\n+    }\n@@ -3835,0 +4657,7 @@\n+\n+    if (out->varRecords.len && !l->catch_all_record_feature_idxes->is_empty ())\n+    {\n+      bool insert_catch_all_record = true;\n+      subset_record_array (l, &(out->varRecords), this, insert_catch_all_record) (varRecords[0]);\n+    }\n+\n@@ -3842,0 +4671,1 @@\n+                  hb_barrier () &&\n@@ -3948,2 +4778,2 @@\n-                             const VariationStore &store,\n-                             VariationStore::cache_t *store_cache = nullptr) const\n+                             const ItemVariationStore &store,\n+                             ItemVariationStore::cache_t *store_cache = nullptr) const\n@@ -3953,2 +4783,2 @@\n-                             const VariationStore &store,\n-                             VariationStore::cache_t *store_cache = nullptr) const\n+                             const ItemVariationStore &store,\n+                             ItemVariationStore::cache_t *store_cache = nullptr) const\n@@ -3988,2 +4818,2 @@\n-                   const VariationStore &store,\n-                   VariationStore::cache_t *store_cache = nullptr) const\n+                   const ItemVariationStore &store,\n+                   ItemVariationStore::cache_t *store_cache = nullptr) const\n@@ -3991,1 +4821,1 @@\n-    return store.get_delta (varIdx, font->coords, font->num_coords, (VariationStore::cache_t *) store_cache);\n+    return store.get_delta (varIdx, font->coords, font->num_coords, (ItemVariationStore::cache_t *) store_cache);\n@@ -3995,1 +4825,1 @@\n-  VarIdx        varIdx;\n+  VarIdx        varIdx;         \/* Variation index *\/\n@@ -4015,2 +4845,2 @@\n-                             const VariationStore &store=Null (VariationStore),\n-                             VariationStore::cache_t *store_cache = nullptr) const\n+                             const ItemVariationStore &store=Null (ItemVariationStore),\n+                             ItemVariationStore::cache_t *store_cache = nullptr) const\n@@ -4033,2 +4863,2 @@\n-                             const VariationStore &store=Null (VariationStore),\n-                             VariationStore::cache_t *store_cache = nullptr) const\n+                             const ItemVariationStore &store=Null (ItemVariationStore),\n+                             ItemVariationStore::cache_t *store_cache = nullptr) const\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-common.hh","additions":955,"deletions":125,"binary":false,"changes":1080,"status":"modified"},{"patch":"@@ -409,0 +409,1 @@\n+    void set_ignore_hidden (bool ignore_hidden_) { ignore_hidden = ignore_hidden_; }\n@@ -454,1 +455,1 @@\n-      if (unlikely (_hb_glyph_info_is_default_ignorable_and_not_hidden (&info) &&\n+      if (unlikely (_hb_glyph_info_is_default_ignorable (&info) &&\n@@ -456,1 +457,2 @@\n-                    (ignore_zwj || !_hb_glyph_info_is_zwj (&info))))\n+                    (ignore_zwj || !_hb_glyph_info_is_zwj (&info)) &&\n+                    (ignore_hidden || !_hb_glyph_info_is_hidden (&info))))\n@@ -467,0 +469,1 @@\n+    bool ignore_hidden = false;\n@@ -489,0 +492,2 @@\n+      \/* Ignore hidden glyphs (like CGJ) during GPOS. *\/\n+      matcher.set_ignore_hidden (c->table_index == 1);\n@@ -711,2 +716,3 @@\n-  const VariationStore &var_store;\n-  VariationStore::cache_t *var_store_cache;\n+  const hb_ot_layout_lookup_accelerator_t *lookup_accel = nullptr;\n+  const ItemVariationStore &var_store;\n+  ItemVariationStore::cache_t *var_store_cache;\n@@ -726,1 +732,0 @@\n-  uint32_t random_state = 1;\n@@ -761,1 +766,0 @@\n-                        digest (buffer_->digest ()),\n@@ -764,1 +768,4 @@\n-  { init_iters (); }\n+  {\n+    init_iters ();\n+    buffer->collect_codepoints (digest);\n+  }\n@@ -769,1 +776,1 @@\n-    VariationStore::destroy_cache (var_store_cache);\n+    ItemVariationStore::destroy_cache (var_store_cache);\n@@ -791,2 +798,2 @@\n-    random_state = random_state * 48271 % 2147483647;\n-    return random_state;\n+    buffer->random_state = buffer->random_state * 48271 % 2147483647;\n+    return buffer->random_state;\n@@ -898,0 +905,7 @@\n+enum class hb_ot_lookup_cache_op_t\n+{\n+  CREATE,\n+  ENTER,\n+  LEAVE,\n+  DESTROY,\n+};\n@@ -922,3 +936,7 @@\n-  static inline auto cache_func_ (const T *obj, hb_ot_apply_context_t *c, bool enter, hb_priority<1>) HB_RETURN (bool, obj->cache_func (c, enter) )\n-  template <typename T>\n-  static inline bool cache_func_ (const T *obj, hb_ot_apply_context_t *c, bool enter, hb_priority<0>) { return false; }\n+  static inline auto cache_func_ (void *p,\n+                                  hb_ot_lookup_cache_op_t op,\n+                                  hb_priority<1>) HB_RETURN (void *, T::cache_func (p, op) )\n+  template <typename T=void>\n+  static inline void * cache_func_ (void *p,\n+                                    hb_ot_lookup_cache_op_t op HB_UNUSED,\n+                                    hb_priority<0>) { return (void *) false; }\n@@ -926,1 +944,2 @@\n-  static inline bool cache_func_to (const void *obj, hb_ot_apply_context_t *c, bool enter)\n+  static inline void * cache_func_to (void *p,\n+                                      hb_ot_lookup_cache_op_t op)\n@@ -928,2 +947,1 @@\n-    const Type *typed_obj = (const Type *) obj;\n-    return cache_func_ (typed_obj, c, enter, hb_prioritize);\n+    return cache_func_<Type> (p, op, hb_prioritize);\n@@ -934,1 +952,1 @@\n-  typedef bool (*hb_cache_func_t) (const void *obj, hb_ot_apply_context_t *c, bool enter);\n+  typedef void * (*hb_cache_func_t) (void *p, hb_ot_lookup_cache_op_t op);\n@@ -971,1 +989,1 @@\n-      return cache_func (obj, c, true);\n+      return (bool) cache_func (c, hb_ot_lookup_cache_op_t::ENTER);\n@@ -975,1 +993,1 @@\n-      cache_func (obj, c, false);\n+      cache_func (c, hb_ot_lookup_cache_op_t::LEAVE);\n@@ -1258,1 +1276,1 @@\n-                         unsigned int match_positions[HB_MAX_CONTEXT_LENGTH],\n+                         unsigned int *match_positions,\n@@ -1382,1 +1400,1 @@\n-                                 const unsigned int match_positions[HB_MAX_CONTEXT_LENGTH], \/* Including the first glyph *\/\n+                                 const unsigned int *match_positions, \/* Including the first glyph *\/\n@@ -1461,0 +1479,1 @@\n+        assert (components_so_far >= last_num_components);\n@@ -1486,0 +1505,1 @@\n+      assert (components_so_far >= last_num_components);\n@@ -1541,0 +1561,1 @@\n+  assert (start_index >= 1);\n@@ -1690,1 +1711,1 @@\n-                                 unsigned int match_positions[HB_MAX_CONTEXT_LENGTH], \/* Including the first glyph *\/\n+                                 unsigned int *match_positions, \/* Including the first glyph *\/\n@@ -1698,0 +1719,3 @@\n+  unsigned int *match_positions_input = match_positions;\n+  unsigned int match_positions_count = count;\n+\n@@ -1801,0 +1825,21 @@\n+      if (unlikely (delta + count > match_positions_count))\n+      {\n+        unsigned new_match_positions_count = hb_max (delta + count, hb_max(match_positions_count, 4u) * 1.5);\n+        if (match_positions == match_positions_input)\n+        {\n+          match_positions = (unsigned int *) hb_malloc (new_match_positions_count * sizeof (match_positions[0]));\n+          if (unlikely (!match_positions))\n+            break;\n+          memcpy (match_positions, match_positions_input, count * sizeof (match_positions[0]));\n+          match_positions_count = new_match_positions_count;\n+        }\n+        else\n+        {\n+          unsigned int *new_match_positions = (unsigned int *) hb_realloc (match_positions, new_match_positions_count * sizeof (match_positions[0]));\n+          if (unlikely (!new_match_positions))\n+            break;\n+          match_positions = new_match_positions;\n+          match_positions_count = new_match_positions_count;\n+        }\n+      }\n+\n@@ -1824,0 +1869,4 @@\n+  if (match_positions != match_positions_input)\n+    hb_free (match_positions);\n+\n+  assert (end >= 0);\n@@ -1924,0 +1973,10 @@\n+  if (unlikely (inputCount > HB_MAX_CONTEXT_LENGTH)) return false;\n+  unsigned match_positions_stack[4];\n+  unsigned *match_positions = match_positions_stack;\n+  if (unlikely (inputCount > ARRAY_LENGTH (match_positions_stack)))\n+  {\n+    match_positions = (unsigned *) hb_malloc (hb_max (inputCount, 1u) * sizeof (match_positions[0]));\n+    if (unlikely (!match_positions))\n+      return false;\n+  }\n+\n@@ -1925,1 +1984,1 @@\n-  unsigned match_positions[HB_MAX_CONTEXT_LENGTH];\n+  bool ret = false;\n@@ -1936,1 +1995,1 @@\n-    return true;\n+    ret = true;\n@@ -1941,1 +2000,1 @@\n-    return false;\n+    ret = false;\n@@ -1943,0 +2002,5 @@\n+\n+  if (unlikely (match_positions != match_positions_stack))\n+    hb_free (match_positions);\n+\n+  return ret;\n@@ -2054,0 +2118,1 @@\n+                  hb_barrier () &&\n@@ -2575,1 +2640,1 @@\n-  bool cache_func (hb_ot_apply_context_t *c, bool enter) const\n+  static void * cache_func (void *p, hb_ot_lookup_cache_op_t op)\n@@ -2577,12 +2642,1 @@\n-    if (enter)\n-    {\n-      if (!HB_BUFFER_TRY_ALLOCATE_VAR (c->buffer, syllable))\n-        return false;\n-      auto &info = c->buffer->info;\n-      unsigned count = c->buffer->len;\n-      for (unsigned i = 0; i < count; i++)\n-        info[i].syllable() = 255;\n-      c->new_syllables = 255;\n-      return true;\n-    }\n-    else\n+    switch (op)\n@@ -2590,3 +2644,23 @@\n-      c->new_syllables = (unsigned) -1;\n-      HB_BUFFER_DEALLOCATE_VAR (c->buffer, syllable);\n-      return true;\n+      case hb_ot_lookup_cache_op_t::CREATE:\n+        return (void *) true;\n+      case hb_ot_lookup_cache_op_t::ENTER:\n+      {\n+        hb_ot_apply_context_t *c = (hb_ot_apply_context_t *) p;\n+        if (!HB_BUFFER_TRY_ALLOCATE_VAR (c->buffer, syllable))\n+          return (void *) false;\n+        auto &info = c->buffer->info;\n+        unsigned count = c->buffer->len;\n+        for (unsigned i = 0; i < count; i++)\n+          info[i].syllable() = 255;\n+        c->new_syllables = 255;\n+        return (void *) true;\n+      }\n+      case hb_ot_lookup_cache_op_t::LEAVE:\n+      {\n+        hb_ot_apply_context_t *c = (hb_ot_apply_context_t *) p;\n+        c->new_syllables = (unsigned) -1;\n+        HB_BUFFER_DEALLOCATE_VAR (c->buffer, syllable);\n+        return nullptr;\n+      }\n+      case hb_ot_lookup_cache_op_t::DESTROY:\n+        return nullptr;\n@@ -2594,0 +2668,1 @@\n+    return nullptr;\n@@ -2602,1 +2677,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n@@ -2788,1 +2863,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n@@ -2829,0 +2904,1 @@\n+    hb_barrier ();\n@@ -2861,3 +2937,3 @@\n-    case 1: return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n-    case 2: return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));\n-    case 3: return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));\n+    case 1: hb_barrier (); return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n+    case 2: hb_barrier (); return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));\n+    case 3: hb_barrier (); return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));\n@@ -2865,2 +2941,2 @@\n-    case 4: return_trace (c->dispatch (u.format4, std::forward<Ts> (ds)...));\n-    case 5: return_trace (c->dispatch (u.format5, std::forward<Ts> (ds)...));\n+    case 4: hb_barrier (); return_trace (c->dispatch (u.format4, std::forward<Ts> (ds)...));\n+    case 5: hb_barrier (); return_trace (c->dispatch (u.format5, std::forward<Ts> (ds)...));\n@@ -3020,0 +3096,11 @@\n+  if (unlikely (inputCount > HB_MAX_CONTEXT_LENGTH)) return false;\n+  unsigned match_positions_stack[4];\n+  unsigned *match_positions = match_positions_stack;\n+  if (unlikely (inputCount > ARRAY_LENGTH (match_positions_stack)))\n+  {\n+    match_positions = (unsigned *) hb_malloc (hb_max (inputCount, 1u) * sizeof (match_positions[0]));\n+    if (unlikely (!match_positions))\n+      return false;\n+  }\n+\n+  unsigned start_index = c->buffer->out_len;\n@@ -3022,1 +3109,1 @@\n-  unsigned match_positions[HB_MAX_CONTEXT_LENGTH];\n+  bool ret = true;\n@@ -3033,1 +3120,2 @@\n-    return false;\n+    ret = false;\n+    goto done;\n@@ -3036,1 +3124,0 @@\n-  unsigned start_index = c->buffer->out_len;\n@@ -3043,1 +3130,2 @@\n-    return false;\n+    ret = false;\n+    goto done;\n@@ -3051,1 +3139,6 @@\n-  return true;\n+  done:\n+\n+  if (unlikely (match_positions != match_positions_stack))\n+    hb_free (match_positions);\n+\n+  return ret;\n@@ -3222,0 +3315,1 @@\n+    hb_barrier ();\n@@ -3224,0 +3318,1 @@\n+    hb_barrier ();\n@@ -3226,0 +3321,1 @@\n+    hb_barrier ();\n@@ -3330,0 +3426,9 @@\n+    \/* If the input skippy has non-auto joiners behavior (as in Indic shapers),\n+     * skip this fast path, as we don't distinguish between input & lookahead\n+     * matching in the fast path.\n+     *\n+     * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/4813\n+     *\/\n+    if (!c->auto_zwnj || !c->auto_zwj)\n+      goto slow;\n+\n@@ -3369,1 +3474,1 @@\n-     {\n+    {\n@@ -3372,1 +3477,1 @@\n-     }\n+    }\n@@ -3572,1 +3677,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n@@ -3783,2 +3888,1 @@\n-    unsigned c = (this+lookaheadClassDef).cost () * ruleSet.len;\n-    return c >= 4 ? c : 0;\n+    return (this+lookaheadClassDef).cost () * ruleSet.len;\n@@ -3786,1 +3890,1 @@\n-  bool cache_func (hb_ot_apply_context_t *c, bool enter) const\n+  static void * cache_func (void *p, hb_ot_lookup_cache_op_t op)\n@@ -3788,1 +3892,1 @@\n-    if (enter)\n+    switch (op)\n@@ -3790,14 +3894,23 @@\n-      if (!HB_BUFFER_TRY_ALLOCATE_VAR (c->buffer, syllable))\n-        return false;\n-      auto &info = c->buffer->info;\n-      unsigned count = c->buffer->len;\n-      for (unsigned i = 0; i < count; i++)\n-        info[i].syllable() = 255;\n-      c->new_syllables = 255;\n-      return true;\n-    }\n-    else\n-    {\n-      c->new_syllables = (unsigned) -1;\n-      HB_BUFFER_DEALLOCATE_VAR (c->buffer, syllable);\n-      return true;\n+      case hb_ot_lookup_cache_op_t::CREATE:\n+        return (void *) true;\n+      case hb_ot_lookup_cache_op_t::ENTER:\n+      {\n+        hb_ot_apply_context_t *c = (hb_ot_apply_context_t *) p;\n+        if (!HB_BUFFER_TRY_ALLOCATE_VAR (c->buffer, syllable))\n+          return (void *) false;\n+        auto &info = c->buffer->info;\n+        unsigned count = c->buffer->len;\n+        for (unsigned i = 0; i < count; i++)\n+          info[i].syllable() = 255;\n+        c->new_syllables = 255;\n+        return (void *) true;\n+      }\n+      case hb_ot_lookup_cache_op_t::LEAVE:\n+      {\n+        hb_ot_apply_context_t *c = (hb_ot_apply_context_t *) p;\n+        c->new_syllables = (unsigned) -1;\n+        HB_BUFFER_DEALLOCATE_VAR (c->buffer, syllable);\n+        return nullptr;\n+      }\n+      case hb_ot_lookup_cache_op_t::DESTROY:\n+        return nullptr;\n@@ -3805,0 +3918,1 @@\n+    return nullptr;\n@@ -3813,1 +3927,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n@@ -4059,1 +4173,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (index == NOT_COVERED) return_trace (false);\n@@ -4124,0 +4238,1 @@\n+    hb_barrier ();\n@@ -4126,0 +4241,1 @@\n+    hb_barrier ();\n@@ -4129,0 +4245,1 @@\n+    hb_barrier ();\n@@ -4162,3 +4279,3 @@\n-    case 1: return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n-    case 2: return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));\n-    case 3: return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));\n+    case 1: hb_barrier (); return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n+    case 2: hb_barrier (); return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));\n+    case 3: hb_barrier (); return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));\n@@ -4166,2 +4283,2 @@\n-    case 4: return_trace (c->dispatch (u.format4, std::forward<Ts> (ds)...));\n-    case 5: return_trace (c->dispatch (u.format5, std::forward<Ts> (ds)...));\n+    case 4: hb_barrier (); return_trace (c->dispatch (u.format4, std::forward<Ts> (ds)...));\n+    case 5: hb_barrier (); return_trace (c->dispatch (u.format5, std::forward<Ts> (ds)...));\n@@ -4212,0 +4329,1 @@\n+                  hb_barrier () &&\n@@ -4250,1 +4368,1 @@\n-    case 1: return u.format1.get_type ();\n+    case 1: hb_barrier (); return u.format1.get_type ();\n@@ -4258,1 +4376,1 @@\n-    case 1: return u.format1.template get_subtable<typename T::SubTable> ();\n+    case 1: hb_barrier (); return u.format1.template get_subtable<typename T::SubTable> ();\n@@ -4270,1 +4388,1 @@\n-    case 1: return u.format1.subset (c);\n+    case 1: hb_barrier (); return u.format1.subset (c);\n@@ -4281,1 +4399,1 @@\n-    case 1: return_trace (u.format1.dispatch (c, std::forward<Ts> (ds)...));\n+    case 1: hb_barrier (); return_trace (u.format1.dispatch (c, std::forward<Ts> (ds)...));\n@@ -4323,1 +4441,1 @@\n-      thiz->digest.add (subtable.digest);\n+      thiz->digest.union_ (subtable.digest);\n@@ -4326,0 +4444,3 @@\n+    if (c_accelerate_subtables.cache_user_cost < 4)\n+      c_accelerate_subtables.cache_user_idx = (unsigned) -1;\n+\n@@ -4327,0 +4448,8 @@\n+\n+    if (thiz->cache_user_idx != (unsigned) -1)\n+    {\n+      thiz->cache = thiz->subtables[thiz->cache_user_idx].cache_func (nullptr, hb_ot_lookup_cache_op_t::CREATE);\n+      if (!thiz->cache)\n+        thiz->cache_user_idx = (unsigned) -1;\n+    }\n+\n@@ -4335,0 +4464,11 @@\n+  void fini ()\n+  {\n+#ifndef HB_NO_OT_LAYOUT_LOOKUP_CACHE\n+    if (cache)\n+    {\n+      assert (cache_user_idx != (unsigned) -1);\n+      subtables[cache_user_idx].cache_func (cache, hb_ot_lookup_cache_op_t::DESTROY);\n+    }\n+#endif\n+  }\n+\n@@ -4343,0 +4483,1 @@\n+    c->lookup_accel = this;\n@@ -4382,1 +4523,0 @@\n-  private:\n@@ -4384,0 +4524,3 @@\n+  public:\n+  void *cache = nullptr;\n+  private:\n@@ -4386,0 +4529,1 @@\n+  private:\n@@ -4475,7 +4619,0 @@\n-      \/\/ TODO(qxliu76): the current implementation doesn't correctly handle feature variations\n-      \/\/                that are dropped by instancing when the associated conditions don't trigger.\n-      \/\/                Since partial instancing isn't yet supported this isn't an issue yet but will\n-      \/\/                need to be fixed for partial instancing.\n-\n-\n-\n@@ -4503,1 +4640,1 @@\n-    case 1: return u.version1.get_size ();\n+    case 1: hb_barrier (); return u.version1.get_size ();\n@@ -4505,1 +4642,1 @@\n-    case 2: return u.version2.get_size ();\n+    case 2: hb_barrier (); return u.version2.get_size ();\n@@ -4516,0 +4653,1 @@\n+    hb_barrier ();\n@@ -4517,1 +4655,1 @@\n-    case 1: return_trace (u.version1.sanitize<TLookup> (c));\n+    case 1: hb_barrier (); return_trace (u.version1.sanitize<TLookup> (c));\n@@ -4519,1 +4657,1 @@\n-    case 2: return_trace (u.version2.sanitize<TLookup> (c));\n+    case 2: hb_barrier (); return_trace (u.version2.sanitize<TLookup> (c));\n@@ -4529,1 +4667,1 @@\n-    case 1: return u.version1.subset<TLookup> (c);\n+    case 1: hb_barrier (); return u.version1.subset<TLookup> (c);\n@@ -4531,1 +4669,1 @@\n-    case 2: return u.version2.subset<TLookup> (c);\n+    case 2: hb_barrier (); return u.version2.subset<TLookup> (c);\n@@ -4540,1 +4678,1 @@\n-    case 1: return this+u.version1.scriptList;\n+    case 1: hb_barrier (); return this+u.version1.scriptList;\n@@ -4542,1 +4680,1 @@\n-    case 2: return this+u.version2.scriptList;\n+    case 2: hb_barrier (); return this+u.version2.scriptList;\n@@ -4550,1 +4688,1 @@\n-    case 1: return this+u.version1.featureList;\n+    case 1: hb_barrier (); return this+u.version1.featureList;\n@@ -4552,1 +4690,1 @@\n-    case 2: return this+u.version2.featureList;\n+    case 2: hb_barrier (); return this+u.version2.featureList;\n@@ -4560,1 +4698,1 @@\n-    case 1: return (this+u.version1.lookupList).len;\n+    case 1: hb_barrier (); return (this+u.version1.lookupList).len;\n@@ -4562,1 +4700,1 @@\n-    case 2: return (this+u.version2.lookupList).len;\n+    case 2: hb_barrier (); return (this+u.version2.lookupList).len;\n@@ -4570,1 +4708,1 @@\n-    case 1: return (this+u.version1.lookupList)[i];\n+    case 1: hb_barrier (); return (this+u.version1.lookupList)[i];\n@@ -4572,1 +4710,1 @@\n-    case 2: return (this+u.version2.lookupList)[i];\n+    case 2: hb_barrier (); return (this+u.version2.lookupList)[i];\n@@ -4580,1 +4718,1 @@\n-    case 1: return (u.version.to_int () >= 0x00010001u ? this+u.version1.featureVars : Null (FeatureVariations));\n+    case 1: hb_barrier (); return (u.version.to_int () >= 0x00010001u && hb_barrier () ? this+u.version1.featureVars : Null (FeatureVariations));\n@@ -4582,1 +4720,1 @@\n-    case 2: return this+u.version2.featureVars;\n+    case 2: hb_barrier (); return this+u.version2.featureVars;\n@@ -4616,1 +4754,2 @@\n-                              unsigned int *index) const\n+                              unsigned int *index,\n+                              ItemVarStoreInstancer *instancer) const\n@@ -4622,1 +4761,1 @@\n-    return get_feature_variations ().find_index (coords, num_coords, index);\n+    return get_feature_variations ().find_index (coords, num_coords, index, instancer);\n@@ -4641,1 +4780,1 @@\n-                                          const hb_hashmap_t<unsigned, const Feature*> *feature_substitutes_map,\n+                                          const hb_hashmap_t<unsigned, hb::shared_ptr<hb_set_t>> *feature_record_cond_idx_map,\n@@ -4645,1 +4784,1 @@\n-    get_feature_variations ().collect_lookups (feature_indexes, feature_substitutes_map, lookup_indexes);\n+    get_feature_variations ().collect_lookups (feature_indexes, feature_record_cond_idx_map, lookup_indexes);\n@@ -4775,1 +4914,6 @@\n-        hb_free (this->accels[i]);\n+      {\n+        auto *accel = this->accels[i].get_relaxed ();\n+        if (accel)\n+          accel->fini ();\n+        hb_free (accel);\n+      }\n@@ -4796,0 +4940,1 @@\n+          accel->fini ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-gsubgpos.hh","additions":260,"deletions":115,"binary":false,"changes":375,"status":"modified"},{"patch":"@@ -217,0 +217,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-jstf-table.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  return face->table.kern->has_data ();\n+  return face->table.kern->table->has_data ();\n@@ -106,1 +106,1 @@\n-  return face->table.kern->has_state_machine ();\n+  return face->table.kern->table->has_state_machine ();\n@@ -126,1 +126,1 @@\n-  return face->table.kern->has_cross_stream ();\n+  return face->table.kern->table->has_cross_stream ();\n@@ -135,1 +135,1 @@\n-  const AAT::kern& kern = *blob->as<AAT::kern> ();\n+  const auto& kern = *font->face->table.kern;\n@@ -249,0 +249,12 @@\n+    \/* 88d2006ca084f04af2df1954ed714a8c71e8400f  Courier New.ttf from macOS 15 *\/\n+    case HB_CODEPOINT_ENCODE3 (588, 5078, 14418):\n+    \/* 608e3ebb6dd1aee521cff08eb07d500a2c59df68  Courier New Bold.ttf from macOS 15 *\/\n+    case HB_CODEPOINT_ENCODE3 (588, 5078, 14238):\n+    \/* d13221044ff054efd78f1cd8631b853c3ce85676  cour.ttf from Windows 10 *\/\n+    case HB_CODEPOINT_ENCODE3 (894, 17162, 33960):\n+    \/* 68ed4a22d8067fcf1622ac6f6e2f4d3a2e3ec394  courbd.ttf from Windows 10 *\/\n+    case HB_CODEPOINT_ENCODE3 (894, 17154, 34472):\n+    \/* 4cdb0259c96b7fd7c103821bb8f08f7cc6b211d7  cour.ttf from Windows 8.1 *\/\n+    case HB_CODEPOINT_ENCODE3 (816, 7868, 17052):\n+    \/* 920483d8a8ed37f7f0afdabbe7f679aece7c75d8  courbd.ttf from Windows 8.1 *\/\n+    case HB_CODEPOINT_ENCODE3 (816, 7868, 17138):\n@@ -1446,0 +1458,1 @@\n+  const OT::GDEF &gdef = *face->table.GDEF->table;\n@@ -1447,1 +1460,4 @@\n-  return g.find_variations_index (coords, num_coords, variations_index);\n+  auto instancer = OT::ItemVarStoreInstancer(&gdef.get_var_store(), nullptr,\n+                                             hb_array (coords, num_coords));\n+\n+  return g.find_variations_index (coords, num_coords, variations_index, &instancer);\n@@ -1910,3 +1926,4 @@\n-    if (accel.digest.may_have (buffer->cur().codepoint) &&\n-        (buffer->cur().mask & c->lookup_mask) &&\n-        c->check_glyph_property (&buffer->cur(), c->lookup_props))\n+    auto &cur = buffer->cur();\n+    if (accel.digest.may_have (cur.codepoint) &&\n+        (cur.mask & c->lookup_mask) &&\n+        c->check_glyph_property (&cur, c->lookup_props))\n@@ -1938,3 +1955,4 @@\n-    if (accel.digest.may_have (buffer->cur().codepoint) &&\n-        (buffer->cur().mask & c->lookup_mask) &&\n-        c->check_glyph_property (&buffer->cur(), c->lookup_props))\n+    auto &cur = buffer->cur();\n+    if (accel.digest.may_have (cur.codepoint) &&\n+        (cur.mask & c->lookup_mask) &&\n+        c->check_glyph_property (&cur, c->lookup_props))\n@@ -2020,1 +2038,1 @@\n-      if (accel->digest.may_have (c.digest))\n+      if (accel->digest.may_intersect (c.digest))\n@@ -2046,1 +2064,1 @@\n-        c.digest = buffer->digest ();\n+        buffer->collect_codepoints (c.digest);\n@@ -2130,1 +2148,1 @@\n-  hb_position_t min, max;\n+  hb_position_t min = 0, max = 0;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout.cc","additions":32,"deletions":14,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n- * - General_Category: 5 bits.\n+ * - Modified General_Category: 5 bits.\n@@ -181,1 +181,1 @@\n- *     like most other Default_Ignorable()s do during matching.\n+ *     like most other Default_Ignorable()s do during GSUB matching.\n@@ -189,0 +189,5 @@\n+ *\n+ * Above I said \"modified\" General_Category. This is because we need to\n+ * remember Variation Selectors, and we don't have bits left. So we\n+ * change their Gen_Cat from Mn to Cf, and use a bit of the high byte to\n+ * remember them.\n@@ -194,1 +199,1 @@\n-  UPROPS_MASK_HIDDEN    = 0x0040u, \/* MONGOLIAN FREE VARIATION SELECTOR 1..4, or TAG characters *\/\n+  UPROPS_MASK_HIDDEN    = 0x0040u, \/* MONGOLIAN FREE VARIATION SELECTOR 1..4, or TAG characters, or CGJ sometimes *\/\n@@ -199,1 +204,2 @@\n-  UPROPS_MASK_Cf_ZWNJ   = 0x0200u\n+  UPROPS_MASK_Cf_ZWNJ   = 0x0200u,\n+  UPROPS_MASK_Cf_VS     = 0x0400u\n@@ -232,1 +238,1 @@\n-      \/* COMBINING GRAPHEME JOINER should not be skipped; at least some times.\n+      \/* COMBINING GRAPHEME JOINER should not be skipped during GSUB either.\n@@ -305,0 +311,21 @@\n+static inline bool\n+_hb_glyph_info_is_variation_selector (const hb_glyph_info_t *info)\n+{\n+  return _hb_glyph_info_get_general_category (info) ==\n+         HB_UNICODE_GENERAL_CATEGORY_FORMAT &&\n+         (info->unicode_props() & UPROPS_MASK_Cf_VS);\n+}\n+static inline void\n+_hb_glyph_info_set_variation_selector (hb_glyph_info_t *info, bool customize)\n+{\n+  if (customize)\n+  {\n+    _hb_glyph_info_set_general_category (info, HB_UNICODE_GENERAL_CATEGORY_FORMAT);\n+    info->unicode_props() |= UPROPS_MASK_Cf_VS;\n+  }\n+  else\n+  {\n+    \/\/ Reset to their original condition\n+    _hb_glyph_info_set_general_category (info, HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK);\n+  }\n+}\n@@ -314,0 +341,10 @@\n+static inline void\n+_hb_glyph_info_set_default_ignorable (hb_glyph_info_t *info)\n+{\n+  info->unicode_props() |= UPROPS_MASK_IGNORABLE;\n+}\n+static inline void\n+_hb_glyph_info_clear_default_ignorable (hb_glyph_info_t *info)\n+{\n+  info->unicode_props() &= ~ UPROPS_MASK_IGNORABLE;\n+}\n@@ -315,1 +352,1 @@\n-_hb_glyph_info_is_default_ignorable_and_not_hidden (const hb_glyph_info_t *info)\n+_hb_glyph_info_is_hidden (const hb_glyph_info_t *info)\n@@ -317,3 +354,1 @@\n-  return ((info->unicode_props() & (UPROPS_MASK_IGNORABLE|UPROPS_MASK_HIDDEN))\n-          == UPROPS_MASK_IGNORABLE) &&\n-         !_hb_glyph_info_substituted (info);\n+  return info->unicode_props() & UPROPS_MASK_HIDDEN;\n@@ -333,1 +368,1 @@\n-_hb_glyph_info_reset_continuation (hb_glyph_info_t *info)\n+_hb_glyph_info_clear_continuation (hb_glyph_info_t *info)\n@@ -606,2 +641,1 @@\n-#undef unicode_props0\n-#undef unicode_props1\n+#undef unicode_props\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout.hh","additions":46,"deletions":12,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -393,0 +393,14 @@\n+unsigned int hb_ot_map_t::get_feature_tags (unsigned int start_offset, unsigned int *tag_count, hb_tag_t *tags) const\n+{\n+  if (tag_count)\n+  {\n+    auto sub_features = features.as_array ().sub_array (start_offset, tag_count);\n+    if (tags)\n+    {\n+      for (unsigned int i = 0; i < sub_features.length; i++)\n+        tags[i] = sub_features[i].tag;\n+    }\n+  }\n+\n+  return features.length;\n+}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-map.cc","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -169,0 +169,3 @@\n+  HB_INTERNAL unsigned int get_feature_tags (unsigned int  start_offset,\n+                                             unsigned int *tag_count, \/* IN\/OUT *\/\n+                                             hb_tag_t     *tags \/* OUT *\/) const;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-map.hh","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -336,0 +336,1 @@\n+                  hb_barrier () &&\n@@ -346,7 +347,5 @@\n-    \/* The description of the MathKern table is a ambiguous, but interpreting\n-     * \"between the two heights found at those indexes\" for 0 < i < len as\n-     *\n-     *   correctionHeight[i-1] < correction_height <= correctionHeight[i]\n-     *\n-     * makes the result consistent with the limit cases and we can just use the\n-     * binary search algorithm of std::upper_bound:\n+    \/* According to OpenType spec (v1.9), except for the boundary cases, the index\n+     * chosen for kern value should be i such that\n+     *    correctionHeight[i-1] <= correction_height < correctionHeight[i]\n+     * We can use the binary search algorithm of std::upper_bound(). Or, we can\n+     * use the internal hb_bsearch_impl.\n@@ -354,13 +353,8 @@\n-    unsigned int i = 0;\n-    unsigned int count = heightCount;\n-    while (count > 0)\n-    {\n-      unsigned int half = count \/ 2;\n-      hb_position_t height = correctionHeight[i + half].get_y_value (font, this);\n-      if (sign * height < sign * correction_height)\n-      {\n-        i += half + 1;\n-        count -= half + 1;\n-      } else\n-        count = half;\n-    }\n+    unsigned int pos;\n+    auto cmp = +[](const void* key, const void* p,\n+                   int sign, hb_font_t* font, const MathKern* mathKern) -> int {\n+      return sign * *(hb_position_t*)key - sign * ((MathValueRecord*)p)->get_y_value(font, mathKern);\n+    };\n+    unsigned int i = hb_bsearch_impl(&pos, correction_height, correctionHeight,\n+                                     heightCount, MathValueRecord::static_size,\n+                                     cmp, sign, font, this) ? pos + 1 : pos;\n@@ -987,0 +981,1 @@\n+                  hb_barrier () &&\n@@ -1106,0 +1101,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-math-table.hh","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-\n+    hb_barrier ();\n@@ -106,0 +106,1 @@\n+      hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-maxp-table.hh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+                          hb_barrier () &&\n@@ -104,0 +105,1 @@\n+                          hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-meta-table.hh","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,0 +212,17 @@\n+  static unsigned calc_avg_char_width (const hb_hashmap_t<hb_codepoint_t, hb_pair_t<unsigned, int>>& hmtx_map)\n+  {\n+    unsigned num = 0;\n+    unsigned total_width = 0;\n+    for (const auto& _ : hmtx_map.values_ref ())\n+    {\n+      unsigned width = _.first;\n+      if (width)\n+      {\n+        total_width += width;\n+        num++;\n+      }\n+    }\n+\n+    return num ? (unsigned) roundf ((double) total_width \/ (double) num) : 0;\n+  }\n+\n@@ -242,0 +259,1 @@\n+        hb_barrier ();\n@@ -246,0 +264,5 @@\n+\n+      unsigned avg_char_width = calc_avg_char_width (c->plan->hmtx_map);\n+      if (!c->serializer->check_assign (os2_prime->xAvgCharWidth, avg_char_width,\n+                                        HB_SERIALIZE_ERROR_INT_OVERFLOW))\n+        return_trace (false);\n@@ -252,1 +275,1 @@\n-      unsigned weight_class = static_cast<unsigned> (roundf (hb_clamp (axis_range->middle, 1.0f, 1000.0f)));\n+      unsigned weight_class = static_cast<unsigned> (roundf (hb_clamp (axis_range->middle, 1.0, 1000.0)));\n@@ -264,0 +287,3 @@\n+    os2_prime->usFirstCharIndex = hb_min (0xFFFFu, c->plan->os2_info.min_cmap_codepoint);\n+    os2_prime->usLastCharIndex  = hb_min (0xFFFFu, c->plan->os2_info.max_cmap_codepoint);\n+\n@@ -267,3 +293,0 @@\n-    os2_prime->usFirstCharIndex = hb_min (0xFFFFu, c->plan->unicodes.get_min ());\n-    os2_prime->usLastCharIndex  = hb_min (0xFFFFu, c->plan->unicodes.get_max ());\n-\n@@ -337,0 +360,1 @@\n+    hb_barrier ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-os2-table.hh","additions":28,"deletions":4,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  for (hb_codepoint_t new_gid = 0; new_gid < num_glyphs; new_gid++)\n+  for (auto _ : c->plan->new_to_old_gid_list)\n@@ -89,1 +89,1 @@\n-    hb_codepoint_t old_gid = reverse_glyph_map.get (new_gid);\n+    hb_codepoint_t old_gid = _.second;\n@@ -128,0 +128,3 @@\n+  if (old_gid_new_index_map.in_error())\n+    return_trace (false);\n+\n@@ -130,2 +133,1 @@\n-  | hb_map (reverse_glyph_map)\n-  | hb_map_retains_sorting ([&](hb_codepoint_t old_gid)\n+  | hb_map_retains_sorting ([&](hb_codepoint_t new_gid)\n@@ -133,2 +135,9 @@\n-                              unsigned new_index = old_gid_new_index_map.get (old_gid);\n-                              return hb_pair_t<unsigned, unsigned> (old_gid, new_index);\n+                              hb_codepoint_t *old_gid;\n+                              \/* use 0 for retain-gid holes, which refers to the name .notdef,\n+                               * as the glyphNameIndex entry for that glyph ID.\"*\/\n+                              unsigned new_index = 0;\n+                              if (reverse_glyph_map.has (new_gid, &old_gid)) {\n+                                new_index = old_gid_new_index_map.get (*old_gid);\n+                                return hb_pair_t<unsigned, unsigned> (*old_gid, new_index);\n+                              }\n+                              return hb_pair_t<unsigned, unsigned> (new_gid, new_index);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-post-table-v2subset.hh","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-      float italic_angle = hb_max (-90.f, hb_min (axis_range->middle, 90.f));\n+      float italic_angle = hb_max (-90.0, hb_min (axis_range->middle, 90.0));\n@@ -125,0 +125,2 @@\n+    {\n+      hb_barrier ();\n@@ -126,0 +128,1 @@\n+    }\n@@ -141,0 +144,1 @@\n+      hb_barrier ();\n@@ -220,0 +224,2 @@\n+      {\n+        hb_barrier ();\n@@ -221,0 +227,1 @@\n+      }\n@@ -223,0 +230,2 @@\n+      {\n+        hb_barrier ();\n@@ -224,0 +233,1 @@\n+      }\n@@ -248,0 +258,1 @@\n+        hb_barrier ();\n@@ -254,1 +265,5 @@\n-      if (version != 0x00020000 || glyph >= glyphNameIndex->len)\n+      if (version != 0x00020000)\n+        return hb_bytes_t ();\n+      hb_barrier ();\n+\n+      if (glyph >= glyphNameIndex->len)\n@@ -287,0 +302,1 @@\n+                  hb_barrier () &&\n@@ -288,1 +304,1 @@\n-                   (version.to_int () == 0x00020000 && v2X.sanitize (c)) ||\n+                   (version.to_int () == 0x00020000 && hb_barrier () && v2X.sanitize (c)) ||\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-post-table.hh","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -77,17 +77,0 @@\n-static bool\n-decompose_unicode (const hb_ot_shape_normalize_context_t *c,\n-                   hb_codepoint_t  ab,\n-                   hb_codepoint_t *a,\n-                   hb_codepoint_t *b)\n-{\n-  return (bool) c->unicode->decompose (ab, a, b);\n-}\n-\n-static bool\n-compose_unicode (const hb_ot_shape_normalize_context_t *c,\n-                 hb_codepoint_t  a,\n-                 hb_codepoint_t  b,\n-                 hb_codepoint_t *ab)\n-{\n-  return (bool) c->unicode->compose (a, b, ab);\n-}\n@@ -173,1 +156,1 @@\n-  if (shortest && c->font->get_nominal_glyph (u, &glyph, c->not_found))\n+  if (shortest && c->font->get_nominal_glyph (u, &glyph, buffer->not_found))\n@@ -185,1 +168,1 @@\n-  if (!shortest && c->font->get_nominal_glyph (u, &glyph, c->not_found))\n+  if (!shortest && c->font->get_nominal_glyph (u, &glyph, buffer->not_found))\n@@ -240,0 +223,6 @@\n+\n+        buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_VARIATION_SELECTOR_FALLBACK;\n+        _hb_glyph_info_set_variation_selector (&buffer->cur(), true);\n+        if (buffer->not_found_variation_selector != HB_CODEPOINT_INVALID)\n+          _hb_glyph_info_clear_default_ignorable (&buffer->cur());\n+\n@@ -310,1 +299,1 @@\n-  const hb_ot_shape_normalize_context_t c = {\n+  hb_ot_shape_normalize_context_t c = {\n@@ -315,3 +304,2 @@\n-    buffer->not_found,\n-    plan->shaper->decompose ? plan->shaper->decompose : decompose_unicode,\n-    plan->shaper->compose   ? plan->shaper->compose   : compose_unicode\n+    plan->shaper->decompose ? plan->shaper->decompose : hb_ot_shape_normalize_context_t::decompose_unicode,\n+    plan->shaper->compose   ? plan->shaper->compose   : hb_ot_shape_normalize_context_t::compose_unicode\n@@ -319,0 +307,1 @@\n+  c.override_decompose_and_compose (plan->shaper->decompose, plan->shaper->compose);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-normalize.cc","additions":12,"deletions":23,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"hb-unicode.hh\"\n@@ -55,0 +56,32 @@\n+  static bool\n+  decompose_unicode (const hb_ot_shape_normalize_context_t *c,\n+                     hb_codepoint_t  ab,\n+                     hb_codepoint_t *a,\n+                     hb_codepoint_t *b)\n+  {\n+    return (bool) c->unicode->decompose (ab, a, b);\n+  }\n+\n+  static bool\n+  compose_unicode (const hb_ot_shape_normalize_context_t *c,\n+                   hb_codepoint_t  a,\n+                   hb_codepoint_t  b,\n+                   hb_codepoint_t *ab)\n+  {\n+    return (bool) c->unicode->compose (a, b, ab);\n+  }\n+\n+  void\n+  override_decompose_and_compose (bool (*decompose) (const hb_ot_shape_normalize_context_t *c,\n+                                                      hb_codepoint_t  ab,\n+                                                      hb_codepoint_t *a,\n+                                                      hb_codepoint_t *b),\n+                                  bool (*compose) (const hb_ot_shape_normalize_context_t *c,\n+                                                   hb_codepoint_t  a,\n+                                                   hb_codepoint_t  b,\n+                                                   hb_codepoint_t *ab))\n+  {\n+    this->decompose = decompose ? decompose : decompose_unicode;\n+    this->compose = compose ? compose : compose_unicode;\n+  }\n+\n@@ -59,1 +92,0 @@\n-  const hb_codepoint_t not_found;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-normalize.hh","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+#include \"hb-ot-stat-table.hh\"\n+\n@@ -88,1 +90,1 @@\n-  shaper = hb_ot_shaper_categorize (this);\n+  shaper = hb_ot_shaper_categorize (props.script, props.direction, map.chosen_script[0]);\n@@ -124,4 +126,0 @@\n-#ifndef HB_NO_AAT_SHAPE\n-  plan.trak_mask = plan.map.get_mask (HB_TAG ('t','r','a','k'));\n-  plan.requested_tracking = !!plan.trak_mask;\n-#endif\n@@ -158,1 +156,1 @@\n-    ;\n+    {}\n@@ -170,0 +168,1 @@\n+    if (false) {}\n@@ -171,1 +170,1 @@\n-    if (has_kerx)\n+    else if (has_kerx)\n@@ -173,1 +172,0 @@\n-    else\n@@ -176,1 +174,1 @@\n-    if (hb_ot_layout_has_kerning (face))\n+    else if (hb_ot_layout_has_kerning (face))\n@@ -179,0 +177,1 @@\n+    else {}\n@@ -209,3 +208,0 @@\n-\n-  \/* Currently we always apply trak. *\/\n-  plan.apply_trak = plan.requested_tracking && hb_aat_layout_has_tracking (face);\n@@ -276,5 +272,0 @@\n-\n-#ifndef HB_NO_AAT_SHAPE\n-  if (this->apply_trak)\n-    hb_aat_layout_track (this, font, buffer);\n-#endif\n@@ -348,7 +339,0 @@\n-#ifndef HB_NO_AAT_SHAPE\n-  \/* Tracking.  We enable dummy feature here just to allow disabling\n-   * AAT 'trak' table using features.\n-   * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1303 *\/\n-  map->enable_feature (HB_TAG ('t','r','a','k'), F_HAS_FALLBACK);\n-#endif\n-\n@@ -839,0 +823,22 @@\n+static void\n+hb_ot_deal_with_variation_selectors (hb_buffer_t *buffer)\n+{\n+  if (!(buffer->scratch_flags & HB_BUFFER_SCRATCH_FLAG_HAS_VARIATION_SELECTOR_FALLBACK) ||\n+        buffer->not_found_variation_selector == HB_CODEPOINT_INVALID)\n+    return;\n+\n+  unsigned int count = buffer->len;\n+  hb_glyph_info_t *info = buffer->info;\n+  hb_glyph_position_t *pos = buffer->pos;\n+\n+  for (unsigned int i = 0; i < count; i++)\n+  {\n+    if (_hb_glyph_info_is_variation_selector (&info[i]))\n+    {\n+      info[i].codepoint = buffer->not_found_variation_selector;\n+      pos[i].x_advance = pos[i].y_advance = pos[i].x_offset = pos[i].y_offset = 0;\n+      _hb_glyph_info_set_variation_selector (&info[i], false);\n+    }\n+  }\n+}\n+\n@@ -968,0 +974,1 @@\n+  hb_ot_deal_with_variation_selectors (c->buffer);\n@@ -1256,0 +1263,30 @@\n+\/**\n+ * hb_ot_shape_plan_get_feature_tags:\n+ * @shape_plan: A shaping plan\n+ * @start_offset: The index of first feature to retrieve\n+ * @tag_count: (inout): Input = the maximum number of features to return;\n+ *                      Output = the actual number of features returned (may be zero)\n+ * @tags: (out) (array length=tag_count): The array of enabled feature\n+ *\n+ * Fetches the list of OpenType feature tags enabled for a shaping plan, if possible.\n+ *\n+ * Return value: Total number of feature tagss.\n+ *\n+ * Since: 10.3.0\n+ *\/\n+unsigned int\n+hb_ot_shape_plan_get_feature_tags (hb_shape_plan_t *shape_plan,\n+                                   unsigned int     start_offset,\n+                                   unsigned int    *tag_count, \/* IN\/OUT *\/\n+                                   hb_tag_t        *tags \/* OUT *\/)\n+{\n+#ifndef HB_NO_OT_SHAPE\n+  return shape_plan->ot.map.get_feature_tags (start_offset, tag_count, tags);\n+#else\n+  if (tag_count)\n+        *tag_count = 0;\n+  return 0;\n+#endif\n+}\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape.cc","additions":61,"deletions":24,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -51,0 +51,6 @@\n+HB_EXTERN unsigned int\n+hb_ot_shape_plan_get_feature_tags (hb_shape_plan_t *shape_plan,\n+                                   unsigned int     start_offset,\n+                                   unsigned int    *tag_count, \/* IN\/OUT *\/\n+                                   hb_tag_t        *tags \/* OUT *\/);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape.h","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,1 +54,2 @@\n-    return 0 == hb_memcmp (this, other, sizeof (*this));\n+    return variations_index[0] == other->variations_index[0] &&\n+           variations_index[1] == other->variations_index[1];\n@@ -82,5 +83,0 @@\n-#ifndef HB_NO_AAT_SHAPE\n-  hb_mask_t trak_mask;\n-#else\n-  static constexpr hb_mask_t trak_mask = 0;\n-#endif\n@@ -93,5 +89,0 @@\n-#ifndef HB_NO_AAT_SHAPE\n-  bool requested_tracking : 1;\n-#else\n-  static constexpr bool requested_tracking = false;\n-#endif\n@@ -120,1 +111,0 @@\n-  bool apply_trak : 1;\n@@ -124,1 +114,0 @@\n-  static constexpr bool apply_trak = false;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape.hh","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -358,0 +358,2 @@\n+      if (fallback_plan->accel_array[i])\n+        fallback_plan->accel_array[i]->fini ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-arabic-fallback.hh","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,4 +9,4 @@\n- * # ArabicShaping-15.1.0.txt\n- * # Date: 2023-01-05\n- * # Scripts-15.1.0.txt\n- * # Date: 2023-07-28, 16:01:07 GMT\n+ * # ArabicShaping-16.0.0.txt\n+ * # Date: 2024-07-30\n+ * # Scripts-16.0.0.txt\n+ * # Date: 2024-04-30, 21:48:40 GMT\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-arabic-joining-list.hh","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -9,4 +9,4 @@\n- * # ArabicShaping-15.1.0.txt\n- * # Date: 2023-01-05\n- * # Blocks-15.1.0.txt\n- * # Date: 2023-07-28, 15:47:20 GMT\n+ * # ArabicShaping-16.0.0.txt\n+ * # Date: 2024-07-30\n+ * # Blocks-16.0.0.txt\n+ * # Date: 2024-02-02\n@@ -139,1 +139,7 @@\n-#define joining_offset_0x10f30u 1182\n+#define joining_offset_0x10ec2u 1182\n+\n+  \/* Arabic Extended-C *\/\n+\n+  \/* 10EC0 *\/     R,D,D,\n+\n+#define joining_offset_0x10f30u 1185\n@@ -158,1 +164,1 @@\n-#define joining_offset_0x110bdu 1338\n+#define joining_offset_0x110bdu 1341\n@@ -165,1 +171,1 @@\n-#define joining_offset_0x1e900u 1355\n+#define joining_offset_0x1e900u 1358\n@@ -173,1 +179,1 @@\n-}; \/* Table items: 1431; occupancy: 57% *\/\n+}; \/* Table items: 1434; occupancy: 57% *\/\n@@ -201,0 +207,1 @@\n+      if (hb_in_range<hb_codepoint_t> (u, 0x10EC2u, 0x10EC4u)) return joining_table[u - 0x10EC2u + joining_offset_0x10ec2u];\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-arabic-table.hh","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -236,1 +236,0 @@\n-   {\n@@ -238,2 +237,0 @@\n-     map->enable_feature (HB_TAG('r','c','l','t'), F_MANUAL_ZWJ);\n-   }\n@@ -563,3 +560,3 @@\n-      DEBUG_MSG (ARABIC, nullptr, \"rest of word:    count=%u width %d\", start - context, w_total);\n-      DEBUG_MSG (ARABIC, nullptr, \"fixed tiles:     count=%d width=%d\", n_fixed, w_fixed);\n-      DEBUG_MSG (ARABIC, nullptr, \"repeating tiles: count=%d width=%d\", n_repeating, w_repeating);\n+      DEBUG_MSG (ARABIC, nullptr, \"rest of word:    count=%u width %\" PRId32, start - context, w_total);\n+      DEBUG_MSG (ARABIC, nullptr, \"fixed tiles:     count=%d width=%\" PRId32, n_fixed, w_fixed);\n+      DEBUG_MSG (ARABIC, nullptr, \"repeating tiles: count=%d width=%\" PRId32, n_repeating, w_repeating);\n@@ -605,1 +602,1 @@\n-          DEBUG_MSG (ARABIC, nullptr, \"appending %u copies of glyph %u; j=%u\",\n+          DEBUG_MSG (ARABIC, nullptr, \"appending %u copies of glyph %\" PRIu32 \"; j=%u\",\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-arabic.cc","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  if (!found && !c->plan->has_gpos_mark)\n+  if (!found && (c->plan && !c->plan->has_gpos_mark))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-hebrew.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+#define indic_syllable_machine_ex_SMPst 57u\n@@ -79,1 +80,1 @@\n-#line 80 \"hb-ot-shaper-indic-machine.hh\"\n+#line 81 \"hb-ot-shaper-indic-machine.hh\"\n@@ -81,17 +82,17 @@\n-        8u, 8u, 4u, 13u, 5u, 13u, 5u, 13u, 13u, 13u, 4u, 13u, 4u, 13u, 4u, 13u,\n-        8u, 8u, 5u, 13u, 5u, 13u, 13u, 13u, 4u, 13u, 4u, 13u, 4u, 13u, 4u, 13u,\n-        8u, 8u, 5u, 13u, 5u, 13u, 13u, 13u, 4u, 13u, 4u, 13u, 4u, 13u, 8u, 8u,\n-        5u, 13u, 5u, 13u, 13u, 13u, 4u, 13u, 4u, 13u, 5u, 13u, 8u, 8u, 1u, 18u,\n-        3u, 16u, 3u, 16u, 4u, 16u, 1u, 15u, 5u, 9u, 5u, 9u, 9u, 9u, 5u, 9u,\n-        1u, 15u, 1u, 15u, 1u, 15u, 3u, 13u, 4u, 13u, 5u, 13u, 5u, 13u, 4u, 13u,\n-        5u, 9u, 3u, 9u, 5u, 9u, 3u, 16u, 3u, 16u, 3u, 16u, 3u, 16u, 4u, 16u,\n-        1u, 15u, 3u, 16u, 3u, 16u, 4u, 16u, 1u, 15u, 5u, 9u, 9u, 9u, 5u, 9u,\n-        1u, 15u, 1u, 15u, 3u, 13u, 4u, 13u, 5u, 13u, 5u, 13u, 4u, 13u, 5u, 9u,\n-        5u, 9u, 3u, 9u, 5u, 9u, 3u, 16u, 3u, 16u, 4u, 13u, 3u, 16u, 3u, 16u,\n-        4u, 16u, 1u, 15u, 3u, 16u, 1u, 15u, 5u, 9u, 9u, 9u, 5u, 9u, 1u, 15u,\n-        1u, 15u, 3u, 13u, 4u, 13u, 5u, 13u, 5u, 13u, 3u, 16u, 4u, 13u, 5u, 9u,\n-        5u, 9u, 3u, 9u, 5u, 9u, 3u, 16u, 4u, 13u, 4u, 13u, 3u, 16u, 3u, 16u,\n-        4u, 16u, 1u, 15u, 3u, 16u, 1u, 15u, 5u, 9u, 9u, 9u, 5u, 9u, 1u, 15u,\n-        1u, 15u, 3u, 13u, 4u, 13u, 5u, 13u, 5u, 13u, 3u, 16u, 4u, 13u, 5u, 9u,\n-        5u, 9u, 3u, 9u, 5u, 9u, 1u, 16u, 3u, 16u, 1u, 16u, 4u, 13u, 5u, 13u,\n-        5u, 13u, 9u, 9u, 5u, 9u, 1u, 15u, 3u, 9u, 5u, 9u, 5u, 9u, 9u, 9u,\n+        8u, 57u, 4u, 57u, 5u, 57u, 5u, 57u, 13u, 13u, 4u, 57u, 4u, 57u, 4u, 57u,\n+        8u, 57u, 5u, 57u, 5u, 57u, 13u, 13u, 4u, 57u, 4u, 57u, 4u, 57u, 4u, 57u,\n+        8u, 57u, 5u, 57u, 5u, 57u, 13u, 13u, 4u, 57u, 4u, 57u, 4u, 57u, 8u, 57u,\n+        5u, 57u, 5u, 57u, 13u, 13u, 4u, 57u, 4u, 57u, 5u, 57u, 8u, 57u, 1u, 57u,\n+        3u, 57u, 3u, 57u, 4u, 57u, 1u, 57u, 5u, 57u, 5u, 57u, 9u, 9u, 5u, 9u,\n+        1u, 57u, 1u, 57u, 1u, 57u, 3u, 57u, 4u, 57u, 5u, 57u, 5u, 57u, 4u, 57u,\n+        5u, 57u, 3u, 57u, 5u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 4u, 57u,\n+        1u, 57u, 3u, 57u, 3u, 57u, 4u, 57u, 1u, 57u, 5u, 57u, 9u, 9u, 5u, 9u,\n+        1u, 57u, 1u, 57u, 3u, 57u, 4u, 57u, 5u, 57u, 5u, 57u, 4u, 57u, 5u, 57u,\n+        5u, 57u, 3u, 57u, 5u, 57u, 3u, 57u, 3u, 57u, 4u, 57u, 3u, 57u, 3u, 57u,\n+        4u, 57u, 1u, 57u, 3u, 57u, 1u, 57u, 5u, 57u, 9u, 9u, 5u, 9u, 1u, 57u,\n+        1u, 57u, 3u, 57u, 4u, 57u, 5u, 57u, 5u, 57u, 3u, 57u, 4u, 57u, 5u, 57u,\n+        5u, 57u, 3u, 57u, 5u, 57u, 3u, 57u, 4u, 57u, 4u, 57u, 3u, 57u, 3u, 57u,\n+        4u, 57u, 1u, 57u, 3u, 57u, 1u, 57u, 5u, 57u, 9u, 9u, 5u, 9u, 1u, 57u,\n+        1u, 57u, 3u, 57u, 4u, 57u, 5u, 57u, 5u, 57u, 3u, 57u, 4u, 57u, 5u, 57u,\n+        5u, 57u, 3u, 57u, 5u, 57u, 1u, 57u, 3u, 57u, 1u, 57u, 4u, 57u, 5u, 57u,\n+        5u, 57u, 9u, 9u, 5u, 9u, 1u, 57u, 3u, 57u, 5u, 57u, 5u, 57u, 9u, 9u,\n@@ -102,17 +103,17 @@\n-        1, 10, 9, 9, 1, 10, 10, 10,\n-        1, 9, 9, 1, 10, 10, 10, 10,\n-        1, 9, 9, 1, 10, 10, 10, 1,\n-        9, 9, 1, 10, 10, 9, 1, 18,\n-        14, 14, 13, 15, 5, 5, 1, 5,\n-        15, 15, 15, 11, 10, 9, 9, 10,\n-        5, 7, 5, 14, 14, 14, 14, 13,\n-        15, 14, 14, 13, 15, 5, 1, 5,\n-        15, 15, 11, 10, 9, 9, 10, 5,\n-        5, 7, 5, 14, 14, 10, 14, 14,\n-        13, 15, 14, 15, 5, 1, 5, 15,\n-        15, 11, 10, 9, 9, 14, 10, 5,\n-        5, 7, 5, 14, 10, 10, 14, 14,\n-        13, 15, 14, 15, 5, 1, 5, 15,\n-        15, 11, 10, 9, 9, 14, 10, 5,\n-        5, 7, 5, 16, 14, 16, 10, 9,\n-        9, 1, 5, 15, 7, 5, 5, 1,\n+        50, 54, 53, 53, 1, 54, 54, 54,\n+        50, 53, 53, 1, 54, 54, 54, 54,\n+        50, 53, 53, 1, 54, 54, 54, 50,\n+        53, 53, 1, 54, 54, 53, 50, 57,\n+        55, 55, 54, 57, 53, 53, 1, 5,\n+        57, 57, 57, 55, 54, 53, 53, 54,\n+        53, 55, 53, 55, 55, 55, 55, 54,\n+        57, 55, 55, 54, 57, 53, 1, 5,\n+        57, 57, 55, 54, 53, 53, 54, 53,\n+        53, 55, 53, 55, 55, 54, 55, 55,\n+        54, 57, 55, 57, 53, 1, 5, 57,\n+        57, 55, 54, 53, 53, 55, 54, 53,\n+        53, 55, 53, 55, 54, 54, 55, 55,\n+        54, 57, 55, 57, 53, 1, 5, 57,\n+        57, 55, 54, 53, 53, 55, 54, 53,\n+        53, 55, 53, 57, 55, 57, 54, 53,\n+        53, 1, 5, 57, 55, 53, 53, 1,\n@@ -123,18 +124,18 @@\n-        0, 2, 13, 23, 33, 35, 46, 57,\n-        68, 70, 80, 90, 92, 103, 114, 125,\n-        136, 138, 148, 158, 160, 171, 182, 193,\n-        195, 205, 215, 217, 228, 239, 249, 251,\n-        270, 285, 300, 314, 330, 336, 342, 344,\n-        350, 366, 382, 398, 410, 421, 431, 441,\n-        452, 458, 466, 472, 487, 502, 517, 532,\n-        546, 562, 577, 592, 606, 622, 628, 630,\n-        636, 652, 668, 680, 691, 701, 711, 722,\n-        728, 734, 742, 748, 763, 778, 789, 804,\n-        819, 833, 849, 864, 880, 886, 888, 894,\n-        910, 926, 938, 949, 959, 969, 984, 995,\n-        1001, 1007, 1015, 1021, 1036, 1047, 1058, 1073,\n-        1088, 1102, 1118, 1133, 1149, 1155, 1157, 1163,\n-        1179, 1195, 1207, 1218, 1228, 1238, 1253, 1264,\n-        1270, 1276, 1284, 1290, 1307, 1322, 1339, 1350,\n-        1360, 1370, 1372, 1378, 1394, 1402, 1408, 1414,\n-        1416, 1422\n+        0, 51, 106, 160, 214, 216, 271, 326,\n+        381, 432, 486, 540, 542, 597, 652, 707,\n+        762, 813, 867, 921, 923, 978, 1033, 1088,\n+        1139, 1193, 1247, 1249, 1304, 1359, 1413, 1464,\n+        1522, 1578, 1634, 1689, 1747, 1801, 1855, 1857,\n+        1863, 1921, 1979, 2037, 2093, 2148, 2202, 2256,\n+        2311, 2365, 2421, 2475, 2531, 2587, 2643, 2699,\n+        2754, 2812, 2868, 2924, 2979, 3037, 3091, 3093,\n+        3099, 3157, 3215, 3271, 3326, 3380, 3434, 3489,\n+        3543, 3597, 3653, 3707, 3763, 3819, 3874, 3930,\n+        3986, 4041, 4099, 4155, 4213, 4267, 4269, 4275,\n+        4333, 4391, 4447, 4502, 4556, 4610, 4666, 4721,\n+        4775, 4829, 4885, 4939, 4995, 5050, 5105, 5161,\n+        5217, 5272, 5330, 5386, 5444, 5498, 5500, 5506,\n+        5564, 5622, 5678, 5733, 5787, 5841, 5897, 5952,\n+        6006, 6060, 6116, 6170, 6228, 6284, 6342, 6397,\n+        6451, 6505, 6507, 6513, 6571, 6627, 6681, 6735,\n+        6737, 6743\n@@ -144,24 +145,142 @@\n-        1, 0, 2, 3, 3, 4, 5, 0,\n-        0, 0, 0, 4, 0, 3, 3, 4,\n-        6, 0, 0, 0, 0, 4, 0, 3,\n-        3, 4, 5, 0, 0, 0, 0, 4,\n-        0, 4, 0, 7, 3, 3, 4, 5,\n-        0, 0, 0, 0, 4, 0, 2, 3,\n-        3, 4, 5, 0, 0, 0, 8, 4,\n-        0, 10, 11, 11, 12, 13, 9, 9,\n-        9, 9, 12, 9, 14, 9, 11, 11,\n-        12, 15, 9, 9, 9, 9, 12, 9,\n-        11, 11, 12, 13, 9, 9, 9, 9,\n-        12, 9, 12, 9, 16, 11, 11, 12,\n-        13, 9, 9, 9, 9, 12, 9, 10,\n-        11, 11, 12, 13, 9, 9, 9, 17,\n-        12, 9, 10, 11, 11, 12, 13, 9,\n-        9, 9, 18, 12, 9, 20, 21, 21,\n-        22, 23, 19, 19, 19, 24, 22, 19,\n-        25, 19, 21, 21, 22, 27, 26, 26,\n-        26, 26, 22, 26, 21, 21, 22, 23,\n-        19, 19, 19, 19, 22, 19, 22, 26,\n-        20, 21, 21, 22, 23, 19, 19, 19,\n-        19, 22, 19, 28, 21, 21, 22, 23,\n-        19, 19, 19, 19, 22, 19, 30, 31,\n-        31, 32, 33, 29, 29, 29, 34, 32,\n+        1, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 1, 0, 2, 3, 3, 4, 5,\n+        0, 0, 0, 0, 4, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        5, 0, 3, 3, 4, 6, 0, 0,\n+        0, 0, 4, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 6, 0,\n+        3, 3, 4, 5, 0, 0, 0, 0,\n+        4, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 5, 0, 4, 0,\n+        7, 3, 3, 4, 5, 0, 0, 0,\n+        0, 4, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 5, 0, 2,\n+        3, 3, 4, 5, 0, 0, 0, 8,\n+        4, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 5, 0, 10, 11,\n+        11, 12, 13, 9, 9, 9, 9, 12,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 13, 9, 14, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 14, 9,\n+        11, 11, 12, 15, 9, 9, 9, 9,\n+        12, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 15, 9, 11, 11,\n+        12, 13, 9, 9, 9, 9, 12, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 13, 9, 12, 9, 16, 11,\n+        11, 12, 13, 9, 9, 9, 9, 12,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 13, 9, 10, 11, 11,\n+        12, 13, 9, 9, 9, 17, 12, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 13, 9, 10, 11, 11, 12,\n+        13, 9, 9, 9, 18, 12, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 9, 9, 9, 9, 9, 9, 9,\n+        9, 13, 9, 20, 21, 21, 22, 23,\n+        19, 19, 19, 24, 22, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        23, 19, 25, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 25, 19, 21, 21, 22,\n+        27, 26, 26, 26, 26, 22, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        26, 27, 26, 21, 21, 22, 23, 19,\n+        19, 19, 19, 22, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 23,\n+        19, 22, 26, 20, 21, 21, 22, 23,\n+        19, 19, 19, 19, 22, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        23, 19, 28, 21, 21, 22, 23, 19,\n+        19, 19, 19, 22, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 19,\n+        19, 19, 19, 19, 19, 19, 19, 23,\n+        19, 30, 31, 31, 32, 33, 29, 29,\n+        29, 34, 32, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 33, 29,\n+        35, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n@@ -169,2 +288,13 @@\n-        29, 29, 29, 32, 29, 31, 31, 32,\n-        33, 29, 29, 29, 29, 32, 29, 32,\n+        29, 29, 29, 32, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 36,\n+        29, 31, 31, 32, 33, 29, 29, 29,\n+        29, 32, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 33, 29, 32,\n@@ -172,2 +302,13 @@\n-        29, 29, 32, 29, 37, 31, 31, 32,\n-        33, 29, 29, 29, 29, 32, 29, 21,\n+        29, 29, 32, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 33, 29,\n+        37, 31, 31, 32, 33, 29, 29, 29,\n+        29, 32, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 29, 29, 29,\n+        29, 29, 29, 29, 29, 33, 29, 21,\n@@ -175,149 +316,674 @@\n-        0, 40, 39, 42, 43, 44, 45, 46,\n-        47, 22, 23, 48, 49, 49, 24, 22,\n-        50, 51, 52, 53, 54, 41, 56, 57,\n-        58, 59, 4, 5, 60, 55, 55, 8,\n-        4, 55, 55, 61, 55, 62, 57, 63,\n-        63, 4, 5, 60, 55, 55, 55, 4,\n-        55, 55, 61, 55, 57, 63, 63, 4,\n-        5, 60, 55, 55, 55, 4, 55, 55,\n-        61, 55, 42, 55, 55, 55, 64, 65,\n-        55, 1, 60, 55, 55, 55, 55, 55,\n-        42, 55, 66, 66, 55, 1, 60, 55,\n-        60, 55, 55, 67, 60, 55, 60, 55,\n-        60, 55, 55, 55, 60, 55, 42, 55,\n-        68, 55, 66, 66, 55, 1, 60, 55,\n-        55, 55, 55, 55, 42, 55, 42, 55,\n-        55, 55, 66, 66, 55, 1, 60, 55,\n-        55, 55, 55, 55, 42, 55, 42, 55,\n-        55, 55, 66, 65, 55, 1, 60, 55,\n-        55, 55, 55, 55, 42, 55, 69, 70,\n-        71, 71, 4, 5, 60, 55, 55, 55,\n-        4, 55, 70, 71, 71, 4, 5, 60,\n-        55, 55, 55, 4, 55, 71, 71, 4,\n-        5, 60, 55, 55, 55, 4, 55, 60,\n-        55, 55, 67, 60, 55, 55, 55, 4,\n-        55, 72, 73, 73, 4, 5, 60, 55,\n-        55, 55, 4, 55, 64, 74, 55, 1,\n-        60, 55, 64, 55, 66, 66, 55, 1,\n-        60, 55, 66, 74, 55, 1, 60, 55,\n-        56, 57, 63, 63, 4, 5, 60, 55,\n-        55, 55, 4, 55, 55, 61, 55, 56,\n-        57, 58, 63, 4, 5, 60, 55, 55,\n-        8, 4, 55, 55, 61, 55, 76, 77,\n-        78, 79, 12, 13, 80, 75, 75, 18,\n-        12, 75, 75, 81, 75, 82, 77, 83,\n-        79, 12, 13, 80, 75, 75, 75, 12,\n-        75, 75, 81, 75, 77, 83, 79, 12,\n-        13, 80, 75, 75, 75, 12, 75, 75,\n-        81, 75, 84, 75, 75, 75, 85, 86,\n-        75, 14, 80, 75, 75, 75, 75, 75,\n-        84, 75, 87, 77, 88, 89, 12, 13,\n-        80, 75, 75, 17, 12, 75, 75, 81,\n-        75, 90, 77, 83, 83, 12, 13, 80,\n-        75, 75, 75, 12, 75, 75, 81, 75,\n-        77, 83, 83, 12, 13, 80, 75, 75,\n-        75, 12, 75, 75, 81, 75, 84, 75,\n-        75, 75, 91, 86, 75, 14, 80, 75,\n-        75, 75, 75, 75, 84, 75, 80, 75,\n-        75, 92, 80, 75, 80, 75, 80, 75,\n-        75, 75, 80, 75, 84, 75, 93, 75,\n-        91, 91, 75, 14, 80, 75, 75, 75,\n-        75, 75, 84, 75, 84, 75, 75, 75,\n-        91, 91, 75, 14, 80, 75, 75, 75,\n-        75, 75, 84, 75, 94, 95, 96, 96,\n-        12, 13, 80, 75, 75, 75, 12, 75,\n-        95, 96, 96, 12, 13, 80, 75, 75,\n-        75, 12, 75, 96, 96, 12, 13, 80,\n-        75, 75, 75, 12, 75, 80, 75, 75,\n-        92, 80, 75, 75, 75, 12, 75, 97,\n-        98, 98, 12, 13, 80, 75, 75, 75,\n-        12, 75, 85, 99, 75, 14, 80, 75,\n-        91, 91, 75, 14, 80, 75, 85, 75,\n-        91, 91, 75, 14, 80, 75, 91, 99,\n-        75, 14, 80, 75, 87, 77, 83, 83,\n-        12, 13, 80, 75, 75, 75, 12, 75,\n-        75, 81, 75, 87, 77, 88, 83, 12,\n-        13, 80, 75, 75, 17, 12, 75, 75,\n-        81, 75, 10, 11, 11, 12, 13, 75,\n-        75, 75, 75, 12, 75, 76, 77, 83,\n-        79, 12, 13, 80, 75, 75, 75, 12,\n-        75, 75, 81, 75, 101, 45, 102, 102,\n-        22, 23, 48, 100, 100, 100, 22, 100,\n-        100, 52, 100, 45, 102, 102, 22, 23,\n-        48, 100, 100, 100, 22, 100, 100, 52,\n-        100, 103, 100, 100, 100, 104, 105, 100,\n-        25, 48, 100, 100, 100, 100, 100, 103,\n-        100, 44, 45, 106, 107, 22, 23, 48,\n-        100, 100, 24, 22, 100, 100, 52, 100,\n-        103, 100, 100, 100, 108, 105, 100, 25,\n-        48, 100, 100, 100, 100, 100, 103, 100,\n-        48, 100, 100, 109, 48, 100, 48, 100,\n-        48, 100, 100, 100, 48, 100, 103, 100,\n-        110, 100, 108, 108, 100, 25, 48, 100,\n-        100, 100, 100, 100, 103, 100, 103, 100,\n-        100, 100, 108, 108, 100, 25, 48, 100,\n-        100, 100, 100, 100, 103, 100, 111, 112,\n-        113, 113, 22, 23, 48, 100, 100, 100,\n-        22, 100, 112, 113, 113, 22, 23, 48,\n-        100, 100, 100, 22, 100, 113, 113, 22,\n-        23, 48, 100, 100, 100, 22, 100, 48,\n-        100, 100, 109, 48, 100, 100, 100, 22,\n-        100, 44, 45, 102, 102, 22, 23, 48,\n-        100, 100, 100, 22, 100, 100, 52, 100,\n-        114, 115, 115, 22, 23, 48, 100, 100,\n-        100, 22, 100, 104, 116, 100, 25, 48,\n-        100, 108, 108, 100, 25, 48, 100, 104,\n-        100, 108, 108, 100, 25, 48, 100, 108,\n-        116, 100, 25, 48, 100, 44, 45, 106,\n-        102, 22, 23, 48, 100, 100, 24, 22,\n-        100, 100, 52, 100, 20, 21, 21, 22,\n-        23, 117, 117, 117, 24, 22, 117, 20,\n-        21, 21, 22, 23, 117, 117, 117, 117,\n-        22, 117, 119, 120, 121, 122, 32, 33,\n-        123, 118, 118, 34, 32, 118, 118, 124,\n-        118, 125, 120, 122, 122, 32, 33, 123,\n-        118, 118, 118, 32, 118, 118, 124, 118,\n-        120, 122, 122, 32, 33, 123, 118, 118,\n-        118, 32, 118, 118, 124, 118, 126, 118,\n-        118, 118, 127, 128, 118, 35, 123, 118,\n-        118, 118, 118, 118, 126, 118, 119, 120,\n-        121, 49, 32, 33, 123, 118, 118, 34,\n-        32, 118, 118, 124, 118, 126, 118, 118,\n-        118, 129, 128, 118, 35, 123, 118, 118,\n-        118, 118, 118, 126, 118, 123, 118, 118,\n-        130, 123, 118, 123, 118, 123, 118, 118,\n-        118, 123, 118, 126, 118, 131, 118, 129,\n-        129, 118, 35, 123, 118, 118, 118, 118,\n-        118, 126, 118, 126, 118, 118, 118, 129,\n-        129, 118, 35, 123, 118, 118, 118, 118,\n-        118, 126, 118, 132, 133, 134, 134, 32,\n-        33, 123, 118, 118, 118, 32, 118, 133,\n-        134, 134, 32, 33, 123, 118, 118, 118,\n-        32, 118, 134, 134, 32, 33, 123, 118,\n-        118, 118, 32, 118, 123, 118, 118, 130,\n-        123, 118, 118, 118, 32, 118, 119, 120,\n-        122, 122, 32, 33, 123, 118, 118, 118,\n-        32, 118, 118, 124, 118, 135, 136, 136,\n-        32, 33, 123, 118, 118, 118, 32, 118,\n-        127, 137, 118, 35, 123, 118, 129, 129,\n-        118, 35, 123, 118, 127, 118, 129, 129,\n-        118, 35, 123, 118, 129, 137, 118, 35,\n-        123, 118, 42, 43, 44, 45, 106, 102,\n-        22, 23, 48, 49, 49, 24, 22, 100,\n-        42, 52, 100, 56, 138, 58, 59, 4,\n-        5, 60, 55, 55, 8, 4, 55, 55,\n-        61, 55, 42, 43, 44, 45, 139, 140,\n-        22, 141, 142, 55, 49, 24, 22, 55,\n-        42, 52, 55, 20, 143, 143, 22, 141,\n-        60, 55, 55, 24, 22, 55, 60, 55,\n-        55, 67, 60, 55, 55, 55, 22, 55,\n-        142, 55, 55, 144, 142, 55, 55, 55,\n-        22, 55, 142, 55, 142, 55, 55, 55,\n-        142, 55, 42, 55, 68, 20, 143, 143,\n-        22, 141, 60, 55, 55, 55, 22, 55,\n-        42, 55, 146, 145, 147, 147, 145, 40,\n-        148, 145, 147, 147, 145, 40, 148, 145,\n-        148, 145, 145, 149, 148, 145, 148, 145,\n-        148, 145, 145, 145, 148, 145, 42, 117,\n-        117, 117, 117, 117, 117, 117, 117, 49,\n-        117, 117, 117, 117, 42, 117, 0\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 38, 0, 40, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 40, 39,\n+        42, 43, 44, 45, 46, 47, 22, 23,\n+        48, 49, 49, 24, 22, 50, 51, 52,\n+        53, 54, 41, 41, 41, 41, 41, 41,\n+        41, 41, 41, 41, 41, 41, 41, 41,\n+        41, 41, 41, 41, 41, 41, 41, 41,\n+        41, 41, 41, 41, 41, 41, 41, 41,\n+        41, 41, 41, 41, 41, 41, 41, 41,\n+        55, 41, 57, 58, 59, 60, 4, 5,\n+        61, 56, 56, 8, 4, 56, 56, 62,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        5, 56, 63, 58, 64, 64, 4, 5,\n+        61, 56, 56, 56, 4, 56, 56, 62,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        5, 56, 58, 64, 64, 4, 5, 61,\n+        56, 56, 56, 4, 56, 56, 62, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 5,\n+        56, 42, 56, 56, 56, 65, 66, 56,\n+        1, 61, 56, 56, 56, 56, 56, 42,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 1, 56, 67, 67, 56, 1, 61,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 1,\n+        56, 61, 56, 56, 68, 61, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 68, 56, 61,\n+        56, 61, 56, 56, 56, 61, 56, 42,\n+        56, 69, 56, 67, 67, 56, 1, 61,\n+        56, 56, 56, 56, 56, 42, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 1,\n+        56, 42, 56, 56, 56, 67, 67, 56,\n+        1, 61, 56, 56, 56, 56, 56, 42,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 1, 56, 42, 56, 56, 56, 67,\n+        66, 56, 1, 61, 56, 56, 56, 56,\n+        56, 42, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 1, 56, 70, 71, 72,\n+        72, 4, 5, 61, 56, 56, 56, 4,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 5, 56, 71, 72, 72,\n+        4, 5, 61, 56, 56, 56, 4, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 5, 56, 72, 72, 4, 5,\n+        61, 56, 56, 56, 4, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        5, 56, 61, 56, 56, 68, 61, 56,\n+        56, 56, 4, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 68, 56,\n+        73, 74, 74, 4, 5, 61, 56, 56,\n+        56, 4, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 5, 56, 65,\n+        75, 56, 1, 61, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 1, 56, 65, 56, 67,\n+        67, 56, 1, 61, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 1, 56, 67, 75, 56,\n+        1, 61, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 1, 56, 57, 58, 64, 64, 4,\n+        5, 61, 56, 56, 56, 4, 56, 56,\n+        62, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 5, 56, 57, 58, 59, 64, 4,\n+        5, 61, 56, 56, 8, 4, 56, 56,\n+        62, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 5, 56, 77, 78, 79, 80, 12,\n+        13, 81, 76, 76, 18, 12, 76, 76,\n+        82, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 13, 76, 83, 78, 84, 80, 12,\n+        13, 81, 76, 76, 76, 12, 76, 76,\n+        82, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 13, 76, 78, 84, 80, 12, 13,\n+        81, 76, 76, 76, 12, 76, 76, 82,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        13, 76, 85, 76, 76, 76, 86, 87,\n+        76, 14, 81, 76, 76, 76, 76, 76,\n+        85, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 14, 76, 88, 78, 89, 90,\n+        12, 13, 81, 76, 76, 17, 12, 76,\n+        76, 82, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 13, 76, 91, 78, 84, 84,\n+        12, 13, 81, 76, 76, 76, 12, 76,\n+        76, 82, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 13, 76, 78, 84, 84, 12,\n+        13, 81, 76, 76, 76, 12, 76, 76,\n+        82, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 13, 76, 85, 76, 76, 76, 92,\n+        87, 76, 14, 81, 76, 76, 76, 76,\n+        76, 85, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 14, 76, 81, 76, 76,\n+        93, 81, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 93, 76, 81, 76, 81, 76, 76,\n+        76, 81, 76, 85, 76, 94, 76, 92,\n+        92, 76, 14, 81, 76, 76, 76, 76,\n+        76, 85, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 14, 76, 85, 76, 76,\n+        76, 92, 92, 76, 14, 81, 76, 76,\n+        76, 76, 76, 85, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 14, 76, 95,\n+        96, 97, 97, 12, 13, 81, 76, 76,\n+        76, 12, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 13, 76, 96,\n+        97, 97, 12, 13, 81, 76, 76, 76,\n+        12, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 13, 76, 97, 97,\n+        12, 13, 81, 76, 76, 76, 12, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 13, 76, 81, 76, 76, 93,\n+        81, 76, 76, 76, 12, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        93, 76, 98, 99, 99, 12, 13, 81,\n+        76, 76, 76, 12, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 13,\n+        76, 86, 100, 76, 14, 81, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 14, 76, 92,\n+        92, 76, 14, 81, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 14, 76, 86, 76, 92,\n+        92, 76, 14, 81, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 14, 76, 92, 100, 76,\n+        14, 81, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 14, 76, 88, 78, 84, 84, 12,\n+        13, 81, 76, 76, 76, 12, 76, 76,\n+        82, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 13, 76, 88, 78, 89, 84, 12,\n+        13, 81, 76, 76, 17, 12, 76, 76,\n+        82, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 13, 76, 10, 11, 11, 12, 13,\n+        76, 76, 76, 76, 12, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        13, 76, 77, 78, 84, 80, 12, 13,\n+        81, 76, 76, 76, 12, 76, 76, 82,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        76, 76, 76, 76, 76, 76, 76, 76,\n+        13, 76, 102, 45, 103, 103, 22, 23,\n+        48, 101, 101, 101, 22, 101, 101, 52,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        23, 101, 45, 103, 103, 22, 23, 48,\n+        101, 101, 101, 22, 101, 101, 52, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 23,\n+        101, 104, 101, 101, 101, 105, 106, 101,\n+        25, 48, 101, 101, 101, 101, 101, 104,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 25, 101, 44, 45, 107, 108, 22,\n+        23, 48, 101, 101, 24, 22, 101, 101,\n+        52, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 23, 101, 104, 101, 101, 101, 109,\n+        106, 101, 25, 48, 101, 101, 101, 101,\n+        101, 104, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 25, 101, 48, 101, 101,\n+        110, 48, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 110, 101, 48, 101, 48, 101, 101,\n+        101, 48, 101, 104, 101, 111, 101, 109,\n+        109, 101, 25, 48, 101, 101, 101, 101,\n+        101, 104, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 25, 101, 104, 101, 101,\n+        101, 109, 109, 101, 25, 48, 101, 101,\n+        101, 101, 101, 104, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 25, 101, 112,\n+        113, 114, 114, 22, 23, 48, 101, 101,\n+        101, 22, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 23, 101, 113,\n+        114, 114, 22, 23, 48, 101, 101, 101,\n+        22, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 23, 101, 114, 114,\n+        22, 23, 48, 101, 101, 101, 22, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 23, 101, 48, 26, 26, 110,\n+        48, 26, 26, 26, 22, 26, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        26, 26, 26, 26, 26, 26, 26, 26,\n+        110, 26, 44, 45, 103, 103, 22, 23,\n+        48, 101, 101, 101, 22, 101, 101, 52,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        23, 101, 115, 116, 116, 22, 23, 48,\n+        101, 101, 101, 22, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 23,\n+        101, 105, 117, 101, 25, 48, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 25, 101, 109,\n+        109, 101, 25, 48, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 25, 101, 105, 101, 109,\n+        109, 101, 25, 48, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 25, 101, 109, 117, 101,\n+        25, 48, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 25, 101, 44, 45, 107, 103, 22,\n+        23, 48, 101, 101, 24, 22, 101, 101,\n+        52, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 23, 101, 20, 21, 21, 22, 23,\n+        118, 118, 118, 24, 22, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        23, 118, 20, 21, 21, 22, 23, 118,\n+        118, 118, 118, 22, 118, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        118, 118, 118, 118, 118, 118, 118, 23,\n+        118, 120, 121, 122, 123, 32, 33, 124,\n+        119, 119, 34, 32, 119, 119, 125, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 33,\n+        119, 126, 121, 123, 123, 32, 33, 124,\n+        119, 119, 119, 32, 119, 119, 125, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 33,\n+        119, 121, 123, 123, 32, 33, 124, 119,\n+        119, 119, 32, 119, 119, 125, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 33, 119,\n+        127, 119, 119, 119, 128, 129, 119, 35,\n+        124, 119, 119, 119, 119, 119, 127, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        35, 119, 120, 121, 122, 49, 32, 33,\n+        124, 119, 119, 34, 32, 119, 119, 125,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        33, 119, 127, 119, 119, 119, 130, 129,\n+        119, 35, 124, 119, 119, 119, 119, 119,\n+        127, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 35, 119, 124, 119, 119, 131,\n+        124, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        131, 119, 124, 119, 124, 119, 119, 119,\n+        124, 119, 127, 119, 132, 119, 130, 130,\n+        119, 35, 124, 119, 119, 119, 119, 119,\n+        127, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 35, 119, 127, 119, 119, 119,\n+        130, 130, 119, 35, 124, 119, 119, 119,\n+        119, 119, 127, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 35, 119, 133, 134,\n+        135, 135, 32, 33, 124, 119, 119, 119,\n+        32, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 33, 119, 134, 135,\n+        135, 32, 33, 124, 119, 119, 119, 32,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 33, 119, 135, 135, 32,\n+        33, 124, 119, 119, 119, 32, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 33, 119, 124, 119, 119, 131, 124,\n+        119, 119, 119, 32, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 131,\n+        119, 120, 121, 123, 123, 32, 33, 124,\n+        119, 119, 119, 32, 119, 119, 125, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 33,\n+        119, 136, 137, 137, 32, 33, 124, 119,\n+        119, 119, 32, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 33, 119,\n+        128, 138, 119, 35, 124, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 35, 119, 130, 130,\n+        119, 35, 124, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 35, 119, 128, 119, 130, 130,\n+        119, 35, 124, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 35, 119, 130, 138, 119, 35,\n+        124, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        119, 119, 119, 119, 119, 119, 119, 119,\n+        35, 119, 42, 43, 44, 45, 107, 103,\n+        22, 23, 48, 49, 49, 24, 22, 101,\n+        42, 52, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 101, 101, 101, 101, 101, 101,\n+        101, 101, 23, 101, 57, 139, 59, 60,\n+        4, 5, 61, 56, 56, 8, 4, 56,\n+        56, 62, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 5, 56, 42, 43, 44, 45,\n+        140, 141, 22, 142, 143, 56, 49, 24,\n+        22, 56, 42, 52, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 142, 56, 20, 144,\n+        144, 22, 142, 61, 56, 56, 24, 22,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 142, 56, 61, 56, 56,\n+        68, 61, 56, 56, 56, 22, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 68, 56, 143, 56, 56, 145, 143,\n+        56, 56, 56, 22, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 145,\n+        56, 143, 56, 143, 56, 56, 56, 143,\n+        56, 42, 56, 69, 20, 144, 144, 22,\n+        142, 61, 56, 56, 56, 22, 56, 42,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 56, 56, 56, 56, 56, 56, 56,\n+        56, 142, 56, 147, 146, 148, 148, 146,\n+        40, 149, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 40, 146, 148, 148, 146, 40, 149,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 40,\n+        146, 149, 146, 146, 150, 149, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 146, 146, 146,\n+        146, 146, 146, 146, 146, 150, 146, 149,\n+        146, 149, 146, 146, 146, 149, 146, 42,\n+        118, 118, 118, 118, 118, 118, 118, 118,\n+        49, 118, 118, 118, 118, 42, 118, 0\n@@ -333,13 +999,13 @@\n-        85, 102, 123, 124, 94, 132, 137, 31,\n-        33, 35, 6, 52, 38, 47, 34, 1,\n-        36, 40, 0, 39, 41, 44, 45, 3,\n-        48, 5, 49, 31, 54, 56, 14, 77,\n-        62, 70, 55, 7, 57, 72, 64, 58,\n-        13, 76, 59, 8, 63, 65, 67, 68,\n-        10, 71, 12, 73, 31, 80, 20, 82,\n-        96, 87, 15, 99, 16, 86, 88, 90,\n-        91, 18, 95, 21, 97, 31, 31, 103,\n-        105, 22, 27, 109, 118, 104, 106, 120,\n-        111, 23, 110, 112, 114, 115, 25, 119,\n-        28, 121, 125, 126, 131, 128, 129, 29,\n-        130, 31, 133, 30, 135, 136\n+        85, 102, 123, 124, 94, 132, 137, 92,\n+        31, 33, 35, 6, 52, 38, 47, 34,\n+        1, 36, 40, 0, 39, 41, 44, 45,\n+        3, 48, 5, 49, 31, 54, 56, 14,\n+        77, 62, 70, 55, 7, 57, 72, 64,\n+        58, 13, 76, 59, 8, 63, 65, 67,\n+        68, 10, 71, 12, 73, 31, 80, 20,\n+        82, 96, 87, 15, 99, 16, 86, 88,\n+        90, 91, 18, 95, 21, 97, 31, 31,\n+        103, 105, 22, 27, 109, 118, 104, 106,\n+        120, 111, 23, 110, 112, 114, 115, 25,\n+        119, 28, 121, 125, 126, 131, 128, 129,\n+        29, 130, 31, 133, 30, 135, 136\n@@ -351,1 +1017,1 @@\n-        2, 2, 2, 4, 2, 0, 5, 0,\n+        2, 2, 2, 4, 2, 0, 5, 5,\n@@ -356,4 +1022,1 @@\n-        2, 0, 0, 2, 0, 2, 2, 0,\n-        2, 2, 0, 0, 2, 2, 2, 0,\n-        0, 0, 2, 14, 2, 0, 0, 2,\n-        0, 2, 2, 0, 2, 2, 2, 2,\n+        14, 2, 0, 0, 2, 0, 2, 2,\n@@ -361,7 +1024,10 @@\n-        0, 0, 0, 2, 15, 5, 0, 5,\n-        2, 2, 0, 5, 0, 0, 2, 5,\n-        5, 0, 0, 0, 2, 16, 17, 2,\n-        0, 0, 0, 0, 2, 2, 2, 2,\n-        2, 0, 0, 2, 2, 2, 0, 0,\n-        0, 2, 0, 18, 18, 0, 0, 0,\n-        0, 19, 2, 0, 0, 0\n+        0, 0, 0, 2, 15, 2, 0, 0,\n+        2, 0, 2, 2, 0, 2, 2, 2,\n+        2, 0, 2, 2, 0, 0, 2, 2,\n+        2, 0, 0, 0, 2, 16, 5, 0,\n+        5, 2, 2, 0, 5, 0, 0, 2,\n+        5, 5, 0, 0, 0, 2, 17, 18,\n+        2, 0, 0, 0, 0, 2, 2, 2,\n+        2, 2, 0, 0, 2, 2, 2, 0,\n+        0, 0, 2, 0, 19, 19, 0, 0,\n+        0, 0, 20, 2, 0, 0, 0\n@@ -417,14 +1083,14 @@\n-        56, 56, 56, 56, 56, 56, 56, 56,\n-        56, 56, 56, 56, 56, 56, 56, 56,\n-        56, 56, 56, 56, 56, 76, 76, 76,\n-        76, 76, 76, 76, 76, 76, 76, 76,\n-        76, 76, 76, 76, 76, 76, 76, 76,\n-        76, 76, 76, 76, 76, 76, 76, 101,\n-        101, 101, 101, 101, 101, 101, 101, 101,\n-        101, 101, 101, 101, 101, 101, 101, 101,\n-        101, 101, 101, 101, 118, 118, 119, 119,\n-        119, 119, 119, 119, 119, 119, 119, 119,\n-        119, 119, 119, 119, 119, 119, 119, 119,\n-        119, 119, 119, 101, 56, 56, 56, 56,\n-        56, 56, 56, 56, 146, 146, 146, 146,\n-        146, 118\n+        57, 57, 57, 57, 57, 57, 57, 57,\n+        57, 57, 57, 57, 57, 57, 57, 57,\n+        57, 57, 57, 57, 57, 77, 77, 77,\n+        77, 77, 77, 77, 77, 77, 77, 77,\n+        77, 77, 77, 77, 77, 77, 77, 77,\n+        77, 77, 77, 77, 77, 77, 77, 102,\n+        102, 102, 102, 102, 102, 102, 102, 102,\n+        102, 102, 102, 102, 27, 102, 102, 102,\n+        102, 102, 102, 102, 119, 119, 120, 120,\n+        120, 120, 120, 120, 120, 120, 120, 120,\n+        120, 120, 120, 120, 120, 120, 120, 120,\n+        120, 120, 120, 102, 57, 57, 57, 57,\n+        57, 57, 57, 57, 147, 147, 147, 147,\n+        147, 119\n@@ -444,1 +1110,1 @@\n-#line 118 \"hb-ot-shaper-indic-machine.rl\"\n+#line 121 \"hb-ot-shaper-indic-machine.rl\"\n@@ -463,1 +1129,1 @@\n-#line 464 \"hb-ot-shaper-indic-machine.hh\"\n+#line 1130 \"hb-ot-shaper-indic-machine.hh\"\n@@ -471,1 +1137,1 @@\n-#line 138 \"hb-ot-shaper-indic-machine.rl\"\n+#line 141 \"hb-ot-shaper-indic-machine.rl\"\n@@ -479,1 +1145,1 @@\n-#line 480 \"hb-ot-shaper-indic-machine.hh\"\n+#line 1146 \"hb-ot-shaper-indic-machine.hh\"\n@@ -493,1 +1159,1 @@\n-#line 494 \"hb-ot-shaper-indic-machine.hh\"\n+#line 1160 \"hb-ot-shaper-indic-machine.hh\"\n@@ -516,1 +1182,1 @@\n-#line 114 \"hb-ot-shaper-indic-machine.rl\"\n+#line 117 \"hb-ot-shaper-indic-machine.rl\"\n@@ -519,2 +1185,2 @@\n-        case 13:\n-#line 109 \"hb-ot-shaper-indic-machine.rl\"\n+        case 14:\n+#line 111 \"hb-ot-shaper-indic-machine.rl\"\n@@ -523,2 +1189,2 @@\n-        case 14:\n-#line 110 \"hb-ot-shaper-indic-machine.rl\"\n+        case 15:\n+#line 112 \"hb-ot-shaper-indic-machine.rl\"\n@@ -527,2 +1193,2 @@\n-        case 17:\n-#line 111 \"hb-ot-shaper-indic-machine.rl\"\n+        case 18:\n+#line 113 \"hb-ot-shaper-indic-machine.rl\"\n@@ -531,2 +1197,2 @@\n-        case 19:\n-#line 112 \"hb-ot-shaper-indic-machine.rl\"\n+        case 20:\n+#line 114 \"hb-ot-shaper-indic-machine.rl\"\n@@ -535,2 +1201,2 @@\n-        case 15:\n-#line 113 \"hb-ot-shaper-indic-machine.rl\"\n+        case 16:\n+#line 116 \"hb-ot-shaper-indic-machine.rl\"\n@@ -539,2 +1205,2 @@\n-        case 16:\n-#line 114 \"hb-ot-shaper-indic-machine.rl\"\n+        case 17:\n+#line 117 \"hb-ot-shaper-indic-machine.rl\"\n@@ -544,1 +1210,1 @@\n-#line 109 \"hb-ot-shaper-indic-machine.rl\"\n+#line 111 \"hb-ot-shaper-indic-machine.rl\"\n@@ -548,1 +1214,1 @@\n-#line 110 \"hb-ot-shaper-indic-machine.rl\"\n+#line 112 \"hb-ot-shaper-indic-machine.rl\"\n@@ -552,1 +1218,1 @@\n-#line 111 \"hb-ot-shaper-indic-machine.rl\"\n+#line 113 \"hb-ot-shaper-indic-machine.rl\"\n@@ -556,1 +1222,1 @@\n-#line 112 \"hb-ot-shaper-indic-machine.rl\"\n+#line 114 \"hb-ot-shaper-indic-machine.rl\"\n@@ -560,1 +1226,1 @@\n-#line 113 \"hb-ot-shaper-indic-machine.rl\"\n+#line 116 \"hb-ot-shaper-indic-machine.rl\"\n@@ -570,1 +1236,1 @@\n-        {{p = ((te))-1;} found_syllable (indic_broken_cluster); buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE; }\n+        {{p = ((te))-1;} found_syllable (indic_non_indic_cluster); }\n@@ -573,0 +1239,3 @@\n+        {{p = ((te))-1;} found_syllable (indic_broken_cluster); buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE; }\n+        break;\n+        case 7:\n@@ -578,1 +1247,1 @@\n-        case 18:\n+        case 19:\n@@ -581,1 +1250,1 @@\n-#line 109 \"hb-ot-shaper-indic-machine.rl\"\n+#line 111 \"hb-ot-shaper-indic-machine.rl\"\n@@ -584,1 +1253,1 @@\n-        case 5:\n+        case 13:\n@@ -587,1 +1256,1 @@\n-#line 113 \"hb-ot-shaper-indic-machine.rl\"\n+#line 115 \"hb-ot-shaper-indic-machine.rl\"\n@@ -590,1 +1259,1 @@\n-        case 12:\n+        case 5:\n@@ -593,1 +1262,1 @@\n-#line 114 \"hb-ot-shaper-indic-machine.rl\"\n+#line 116 \"hb-ot-shaper-indic-machine.rl\"\n@@ -596,1 +1265,7 @@\n-#line 597 \"hb-ot-shaper-indic-machine.hh\"\n+        case 12:\n+#line 1 \"NONE\"\n+        {te = p+1;}\n+#line 117 \"hb-ot-shaper-indic-machine.rl\"\n+        {act = 7;}\n+        break;\n+#line 1272 \"hb-ot-shaper-indic-machine.hh\"\n@@ -605,1 +1280,1 @@\n-#line 606 \"hb-ot-shaper-indic-machine.hh\"\n+#line 1281 \"hb-ot-shaper-indic-machine.hh\"\n@@ -621,1 +1296,1 @@\n-#line 146 \"hb-ot-shaper-indic-machine.rl\"\n+#line 149 \"hb-ot-shaper-indic-machine.rl\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-indic-machine.hh","additions":977,"deletions":302,"binary":false,"changes":1279,"status":"modified"},{"patch":"@@ -9,6 +9,6 @@\n- * # IndicSyllabicCategory-15.1.0.txt\n- * # Date: 2023-01-05\n- * # IndicPositionalCategory-15.1.0.txt\n- * # Date: 2023-01-05\n- * # Blocks-15.1.0.txt\n- * # Date: 2023-07-28, 15:47:20 GMT\n+ * # IndicSyllabicCategory-16.0.0.txt\n+ * # Date: 2024-04-30, 21:48:21 GMT\n+ * # IndicPositionalCategory-16.0.0.txt\n+ * # Date: 2024-04-30, 21:48:21 GMT\n+ * # Blocks-16.0.0.txt\n+ * # Date: 2024-02-02\n@@ -51,0 +51,1 @@\n+#define OT_SMPst I_Cat(SMPst)\n@@ -92,1 +93,1 @@\n-#define _OT_GB   OT_PLACEHOLDER  \/* 165 chars; PLACEHOLDER *\/\n+#define _OT_GB   OT_PLACEHOLDER  \/* 185 chars; PLACEHOLDER *\/\n@@ -97,1 +98,2 @@\n-#define _OT_SM   OT_SM           \/*  56 chars; SM *\/\n+#define _OT_SM   OT_SM           \/*  50 chars; SM *\/\n+#define _OT_SP   OT_SMPst        \/*   6 chars; SMPst *\/\n@@ -115,1 +117,1 @@\n-#define _POS_C   POS_BASE_C      \/* 833 chars; BASE_C *\/\n+#define _POS_C   POS_BASE_C      \/* 853 chars; BASE_C *\/\n@@ -148,1 +150,1 @@\n-  \/* 00B0 *\/  _(X,X),  _(X,X),_(SM,SM),_(SM,SM),  _(X,X),  _(X,X),  _(X,X),  _(X,X),\n+  \/* 00B0 *\/  _(X,X),  _(X,X),_(SP,SM),_(SP,SM),  _(X,X),  _(X,X),  _(X,X),  _(X,X),\n@@ -401,1 +403,1 @@\n-  \/* 2070 *\/  _(X,X),  _(X,X),  _(X,X),  _(X,X),_(SM,SM),  _(X,X),  _(X,X),  _(X,X),\n+  \/* 2070 *\/  _(X,X),  _(X,X),  _(X,X),  _(X,X),_(SP,SM),  _(X,X),  _(X,X),  _(X,X),\n@@ -403,1 +405,1 @@\n-  \/* 2080 *\/  _(X,X),  _(X,X),_(SM,SM),_(SM,SM),_(SM,SM),  _(X,X),  _(X,X),  _(X,X),\n+  \/* 2080 *\/  _(X,X),  _(X,X),_(SP,SM),_(SP,SM),_(SP,SM),  _(X,X),  _(X,X),  _(X,X),\n@@ -461,1 +463,10 @@\n-}; \/* Table items: 1728; occupancy: 71% *\/\n+#define indic_offset_0x116d0u 1728\n+\n+\n+  \/* Myanmar Extended-C *\/\n+\n+  \/* 116D0 *\/ _(GB,C), _(GB,C), _(GB,C), _(GB,C), _(GB,C), _(GB,C), _(GB,C), _(GB,C),\n+  \/* 116D8 *\/ _(GB,C), _(GB,C), _(GB,C), _(GB,C), _(GB,C), _(GB,C), _(GB,C), _(GB,C),\n+  \/* 116E0 *\/ _(GB,C), _(GB,C), _(GB,C), _(GB,C),  _(X,X),  _(X,X),  _(X,X),  _(X,X),\n+\n+}; \/* Table items: 1752; occupancy: 71% *\/\n@@ -501,0 +512,1 @@\n+      if (hb_in_range<hb_codepoint_t> (u, 0x116D0u, 0x116E7u)) return indic_table[u - 0x116D0u + indic_offset_0x116d0u];\n@@ -533,0 +545,1 @@\n+#undef _OT_SP\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-indic-table.cc","additions":26,"deletions":13,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+#define myanmar_syllable_machine_ex_SMPst 57u\n@@ -80,1 +81,1 @@\n-#line 81 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 82 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -82,7 +83,7 @@\n-        1u, 41u, 3u, 41u, 5u, 39u, 5u, 8u, 3u, 41u, 3u, 39u, 3u, 39u, 5u, 39u,\n-        5u, 39u, 3u, 39u, 3u, 39u, 3u, 41u, 5u, 39u, 1u, 15u, 3u, 39u, 3u, 39u,\n-        3u, 40u, 3u, 39u, 3u, 41u, 3u, 41u, 3u, 39u, 3u, 41u, 3u, 41u, 3u, 41u,\n-        3u, 41u, 3u, 41u, 5u, 39u, 5u, 8u, 3u, 41u, 3u, 39u, 3u, 39u, 5u, 39u,\n-        5u, 39u, 3u, 39u, 3u, 39u, 3u, 41u, 5u, 39u, 1u, 15u, 3u, 41u, 3u, 39u,\n-        3u, 39u, 3u, 40u, 3u, 39u, 3u, 41u, 3u, 41u, 3u, 39u, 3u, 41u, 3u, 41u,\n-        3u, 41u, 3u, 41u, 3u, 41u, 3u, 41u, 3u, 41u, 1u, 41u, 1u, 15u, 0\n+        1u, 57u, 3u, 57u, 5u, 57u, 5u, 57u, 3u, 57u, 5u, 57u, 3u, 57u, 3u, 57u,\n+        3u, 57u, 3u, 57u, 3u, 57u, 5u, 57u, 1u, 15u, 3u, 57u, 3u, 57u, 3u, 57u,\n+        3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u,\n+        3u, 57u, 5u, 57u, 5u, 57u, 3u, 57u, 5u, 57u, 3u, 57u, 3u, 57u, 3u, 57u,\n+        3u, 57u, 3u, 57u, 5u, 57u, 1u, 15u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u,\n+        3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u, 3u, 57u,\n+        3u, 57u, 3u, 57u, 3u, 57u, 1u, 57u, 1u, 15u, 0\n@@ -92,7 +93,7 @@\n-        41, 39, 35, 4, 39, 37, 37, 35,\n-        35, 37, 37, 39, 35, 15, 37, 37,\n-        38, 37, 39, 39, 37, 39, 39, 39,\n-        39, 39, 35, 4, 39, 37, 37, 35,\n-        35, 37, 37, 39, 35, 15, 39, 37,\n-        37, 38, 37, 39, 39, 37, 39, 39,\n-        39, 39, 39, 39, 39, 41, 15\n+        57, 55, 53, 53, 55, 53, 55, 55,\n+        55, 55, 55, 53, 15, 55, 55, 55,\n+        55, 55, 55, 55, 55, 55, 55, 55,\n+        55, 53, 53, 55, 53, 55, 55, 55,\n+        55, 55, 53, 15, 55, 55, 55, 55,\n+        55, 55, 55, 55, 55, 55, 55, 55,\n+        55, 55, 55, 57, 15\n@@ -102,7 +103,7 @@\n-        0, 42, 82, 118, 123, 163, 201, 239,\n-        275, 311, 349, 387, 427, 463, 479, 517,\n-        555, 594, 632, 672, 712, 750, 790, 830,\n-        870, 910, 950, 986, 991, 1031, 1069, 1107,\n-        1143, 1179, 1217, 1255, 1295, 1331, 1347, 1387,\n-        1425, 1463, 1502, 1540, 1580, 1620, 1658, 1698,\n-        1738, 1778, 1818, 1858, 1898, 1938, 1980\n+        0, 58, 114, 168, 222, 278, 332, 388,\n+        444, 500, 556, 612, 666, 682, 738, 794,\n+        850, 906, 962, 1018, 1074, 1130, 1186, 1242,\n+        1298, 1354, 1408, 1462, 1518, 1572, 1628, 1684,\n+        1740, 1796, 1852, 1906, 1922, 1978, 2034, 2090,\n+        2146, 2202, 2258, 2314, 2370, 2426, 2482, 2538,\n+        2594, 2650, 2706, 2762, 2820\n@@ -117,114 +118,185 @@\n-        20, 0, 22, 23, 24, 24, 21, 25,\n-        26, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 27, 28, 29, 30, 21,\n-        21, 21, 21, 21, 21, 21, 21, 31,\n-        21, 21, 32, 33, 34, 35, 36, 37,\n-        38, 21, 24, 24, 21, 25, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 30, 21, 21, 21,\n-        21, 21, 21, 21, 21, 39, 21, 21,\n-        21, 21, 21, 21, 36, 21, 24, 24,\n-        21, 25, 21, 22, 21, 24, 24, 21,\n-        25, 26, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 40, 21, 21, 30,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        41, 21, 21, 42, 21, 21, 21, 36,\n-        21, 41, 21, 22, 21, 24, 24, 21,\n-        25, 26, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 30,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 36,\n-        21, 43, 21, 24, 24, 21, 25, 36,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 44, 21,\n-        21, 21, 21, 21, 21, 36, 21, 24,\n-        24, 21, 25, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 44, 21, 21, 21, 21, 21,\n-        21, 36, 21, 24, 24, 21, 25, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 36, 21, 22,\n-        21, 24, 24, 21, 25, 26, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        40, 21, 21, 30, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 36, 21, 22, 21, 24,\n-        24, 21, 25, 26, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 40, 21,\n-        21, 30, 21, 21, 21, 21, 21, 21,\n-        21, 21, 41, 21, 21, 21, 21, 21,\n-        21, 36, 21, 22, 21, 24, 24, 21,\n-        25, 26, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 40, 21, 21, 30,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        41, 21, 21, 21, 21, 21, 21, 36,\n-        21, 41, 21, 24, 24, 21, 25, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 30, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 36, 21, 1,\n-        1, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 1, 21, 22,\n-        21, 24, 24, 21, 25, 26, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        27, 28, 21, 30, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 36, 21, 22, 21, 24,\n-        24, 21, 25, 26, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 28,\n-        21, 30, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 36, 21, 22, 21, 24, 24, 21,\n-        25, 26, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 27, 28, 29, 30,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 36,\n-        45, 21, 22, 21, 24, 24, 21, 25,\n-        26, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 27, 28, 29, 30, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 36, 21,\n-        22, 21, 24, 24, 21, 25, 26, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 27, 28, 29, 30, 21, 21, 21,\n-        21, 21, 21, 21, 21, 31, 21, 21,\n-        32, 33, 34, 35, 36, 21, 38, 21,\n-        22, 21, 24, 24, 21, 25, 26, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 27, 28, 29, 30, 21, 21, 21,\n-        21, 21, 21, 21, 21, 45, 21, 21,\n-        21, 21, 21, 21, 36, 21, 38, 21,\n-        22, 21, 24, 24, 21, 25, 26, 21,\n-        21, 21, 21, 21, 21, 21, 21, 21,\n-        21, 27, 28, 29, 30, 21, 21, 21,\n-        21, 21, 21, 21, 21, 45, 21, 21,\n-        21, 21, 21, 21, 36, 21, 22, 21,\n-        24, 24, 21, 25, 26, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 27,\n-        28, 29, 30, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 32, 21,\n-        34, 21, 36, 21, 38, 21, 22, 21,\n-        24, 24, 21, 25, 26, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 27,\n-        28, 29, 30, 21, 21, 21, 21, 21,\n-        21, 21, 21, 45, 21, 21, 32, 21,\n-        21, 21, 36, 21, 38, 21, 22, 21,\n-        24, 24, 21, 25, 26, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 27,\n-        28, 29, 30, 21, 21, 21, 21, 21,\n-        21, 21, 21, 46, 21, 21, 32, 33,\n-        34, 21, 36, 21, 38, 21, 22, 21,\n-        24, 24, 21, 25, 26, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 27,\n-        28, 29, 30, 21, 21, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 32, 33,\n-        34, 21, 36, 21, 38, 21, 22, 23,\n-        24, 24, 21, 25, 26, 21, 21, 21,\n-        21, 21, 21, 21, 21, 21, 21, 27,\n-        28, 29, 30, 21, 21, 21, 21, 21,\n-        21, 21, 21, 31, 21, 21, 32, 33,\n-        34, 35, 36, 21, 38, 21, 48, 48,\n+        20, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        21, 0, 23, 24, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 32,\n+        22, 22, 33, 34, 35, 36, 37, 38,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 25, 25, 22, 26, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 31, 22, 22, 22,\n+        22, 22, 22, 22, 22, 40, 22, 22,\n+        22, 22, 22, 22, 37, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 26, 22,\n+        25, 25, 22, 26, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 37, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 26, 22, 41, 22,\n+        25, 25, 22, 26, 37, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 26, 22, 22, 22, 22,\n+        22, 22, 37, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 26, 22, 25, 25,\n+        22, 26, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 26, 22, 22, 22, 22, 22, 22,\n+        37, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 26, 22, 23, 22, 25, 25,\n+        22, 26, 27, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 42, 22, 22,\n+        31, 22, 22, 22, 22, 22, 22, 22,\n+        22, 43, 22, 22, 44, 22, 22, 22,\n+        37, 22, 43, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 26, 22, 23, 22, 25, 25,\n+        22, 26, 27, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        31, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        37, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 26, 22, 23, 22, 25, 25,\n+        22, 26, 27, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 42, 22, 22,\n+        31, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        37, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 26, 22, 23, 22, 25, 25,\n+        22, 26, 27, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 42, 22, 22,\n+        31, 22, 22, 22, 22, 22, 22, 22,\n+        22, 43, 22, 22, 22, 22, 22, 22,\n+        37, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 26, 22, 23, 22, 25, 25,\n+        22, 26, 27, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 42, 22, 22,\n+        31, 22, 22, 22, 22, 22, 22, 22,\n+        22, 43, 22, 22, 22, 22, 22, 22,\n+        37, 22, 43, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 26, 22, 25, 25, 22, 26,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 37, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 1, 1, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        1, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 22, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 37, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 29, 22, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 37, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 37, 45,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 37, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 32,\n+        22, 22, 33, 34, 35, 36, 37, 22,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 45,\n+        22, 22, 22, 22, 22, 22, 37, 22,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 45,\n+        22, 22, 22, 22, 22, 22, 37, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 33, 22, 35, 22, 37, 22,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 45,\n+        22, 22, 33, 22, 22, 22, 37, 22,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 46,\n+        22, 22, 33, 34, 35, 22, 37, 22,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 22, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 33, 34, 35, 22, 37, 22,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 24, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 32,\n+        22, 22, 33, 34, 35, 36, 37, 22,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 48, 48, 47, 5, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 12, 47, 47, 47,\n+        47, 47, 47, 47, 47, 49, 47, 47,\n+        47, 47, 47, 47, 18, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 5, 47,\n+        48, 48, 50, 5, 50, 50, 50, 50,\n+        50, 50, 50, 50, 50, 50, 50, 50,\n+        50, 50, 50, 50, 50, 50, 50, 50,\n+        50, 50, 50, 50, 50, 50, 50, 50,\n+        50, 50, 18, 50, 50, 50, 50, 50,\n+        50, 50, 50, 50, 50, 50, 50, 50,\n+        50, 50, 50, 50, 5, 50, 51, 47,\n+        48, 48, 47, 5, 18, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 5, 47, 47, 47, 47,\n+        47, 47, 18, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 5, 47, 48, 48,\n@@ -233,0 +305,35 @@\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 5, 47, 47, 47, 47, 47, 47,\n+        18, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 5, 47, 2, 47, 48, 48,\n+        47, 5, 6, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 52, 47, 47,\n+        12, 47, 47, 47, 47, 47, 47, 47,\n+        47, 53, 47, 47, 54, 47, 47, 47,\n+        18, 47, 53, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 5, 47, 2, 47, 48, 48,\n+        47, 5, 6, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        12, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        18, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 5, 47, 2, 47, 48, 48,\n+        47, 5, 6, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 52, 47, 47,\n+        12, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        18, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 5, 47, 2, 47, 48, 48,\n+        47, 5, 6, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 52, 47, 47,\n+        12, 47, 47, 47, 47, 47, 47, 47,\n+        47, 53, 47, 47, 47, 47, 47, 47,\n+        18, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 5, 47, 2, 47, 48, 48,\n+        47, 5, 6, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 52, 47, 47,\n@@ -234,3 +341,2 @@\n-        47, 49, 47, 47, 47, 47, 47, 47,\n-        18, 47, 48, 48, 47, 5, 47, 2,\n-        47, 48, 48, 47, 5, 6, 47, 47,\n+        47, 53, 47, 47, 47, 47, 47, 47,\n+        18, 47, 53, 47, 47, 47, 47, 47,\n@@ -238,4 +344,1 @@\n-        50, 47, 47, 12, 47, 47, 47, 47,\n-        47, 47, 47, 47, 51, 47, 47, 52,\n-        47, 47, 47, 18, 47, 51, 47, 2,\n-        47, 48, 48, 47, 5, 6, 47, 47,\n+        47, 47, 5, 47, 48, 48, 47, 5,\n@@ -243,1 +346,1 @@\n-        47, 47, 47, 12, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 12, 47,\n@@ -245,2 +348,1 @@\n-        47, 47, 47, 18, 47, 53, 47, 48,\n-        48, 47, 5, 18, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 18, 47,\n@@ -249,2 +351,1 @@\n-        47, 47, 54, 47, 47, 47, 47, 47,\n-        47, 18, 47, 48, 48, 47, 5, 47,\n+        5, 47, 55, 55, 47, 47, 47, 47,\n@@ -252,0 +353,6 @@\n+        55, 47, 2, 3, 48, 48, 47, 5,\n+        6, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 9, 10, 11, 12, 47,\n+        47, 47, 47, 47, 47, 47, 47, 13,\n+        47, 47, 14, 15, 16, 17, 18, 19,\n+        20, 47, 47, 47, 47, 47, 47, 47,\n@@ -253,3 +360,3 @@\n-        47, 47, 47, 47, 47, 47, 54, 47,\n-        47, 47, 47, 47, 47, 18, 47, 48,\n-        48, 47, 5, 47, 47, 47, 47, 47,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n+        6, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 9, 10, 47, 12, 47,\n@@ -257,0 +364,1 @@\n+        47, 47, 47, 47, 47, 47, 18, 47,\n@@ -259,3 +367,3 @@\n-        47, 18, 47, 2, 47, 48, 48, 47,\n-        5, 6, 47, 47, 47, 47, 47, 47,\n-        47, 47, 47, 47, 50, 47, 47, 12,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n+        6, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 10, 47, 12, 47,\n@@ -263,2 +371,1 @@\n-        47, 47, 47, 47, 47, 47, 47, 18,\n-        47, 2, 47, 48, 48, 47, 5, 6,\n+        47, 47, 47, 47, 47, 47, 18, 47,\n@@ -266,4 +373,0 @@\n-        47, 47, 50, 47, 47, 12, 47, 47,\n-        47, 47, 47, 47, 47, 47, 51, 47,\n-        47, 47, 47, 47, 47, 18, 47, 2,\n-        47, 48, 48, 47, 5, 6, 47, 47,\n@@ -271,4 +374,3 @@\n-        50, 47, 47, 12, 47, 47, 47, 47,\n-        47, 47, 47, 47, 51, 47, 47, 47,\n-        47, 47, 47, 18, 47, 51, 47, 48,\n-        48, 47, 5, 47, 47, 47, 47, 47,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n+        6, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 9, 10, 11, 12, 47,\n@@ -276,1 +378,1 @@\n-        47, 12, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 18, 56,\n@@ -278,1 +380,0 @@\n-        47, 18, 47, 55, 55, 47, 47, 47,\n@@ -280,3 +381,3 @@\n-        47, 55, 47, 2, 3, 48, 48, 47,\n-        5, 6, 47, 47, 47, 47, 47, 47,\n-        47, 47, 47, 47, 9, 10, 11, 12,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n+        6, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 9, 10, 11, 12, 47,\n@@ -284,4 +385,1 @@\n-        13, 47, 47, 14, 15, 16, 17, 18,\n-        19, 20, 47, 2, 47, 48, 48, 47,\n-        5, 6, 47, 47, 47, 47, 47, 47,\n-        47, 47, 47, 47, 9, 10, 47, 12,\n+        47, 47, 47, 47, 47, 47, 18, 47,\n@@ -289,2 +387,0 @@\n-        47, 47, 47, 47, 47, 47, 47, 18,\n-        47, 2, 47, 48, 48, 47, 5, 6,\n@@ -292,1 +388,6 @@\n-        47, 47, 47, 10, 47, 12, 47, 47,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n+        6, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 9, 10, 11, 12, 47,\n+        47, 47, 47, 47, 47, 47, 47, 13,\n+        47, 47, 14, 15, 16, 17, 18, 47,\n+        20, 47, 47, 47, 47, 47, 47, 47,\n@@ -294,2 +395,6 @@\n-        47, 47, 47, 47, 47, 18, 47, 2,\n-        47, 48, 48, 47, 5, 6, 47, 47,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n+        6, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 9, 10, 11, 12, 47,\n+        47, 47, 47, 47, 47, 47, 47, 56,\n+        47, 47, 47, 47, 47, 47, 18, 47,\n+        20, 47, 47, 47, 47, 47, 47, 47,\n@@ -297,1 +402,5 @@\n-        9, 10, 11, 12, 47, 47, 47, 47,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n+        6, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 9, 10, 11, 12, 47,\n+        47, 47, 47, 47, 47, 47, 47, 56,\n+        47, 47, 47, 47, 47, 47, 18, 47,\n@@ -299,4 +408,0 @@\n-        47, 47, 47, 18, 56, 47, 2, 47,\n-        48, 48, 47, 5, 6, 47, 47, 47,\n-        47, 47, 47, 47, 47, 47, 47, 9,\n-        10, 11, 12, 47, 47, 47, 47, 47,\n@@ -304,16 +409,1 @@\n-        47, 47, 18, 47, 2, 47, 48, 48,\n-        47, 5, 6, 47, 47, 47, 47, 47,\n-        47, 47, 47, 47, 47, 9, 10, 11,\n-        12, 47, 47, 47, 47, 47, 47, 47,\n-        47, 13, 47, 47, 14, 15, 16, 17,\n-        18, 47, 20, 47, 2, 47, 48, 48,\n-        47, 5, 6, 47, 47, 47, 47, 47,\n-        47, 47, 47, 47, 47, 9, 10, 11,\n-        12, 47, 47, 47, 47, 47, 47, 47,\n-        47, 56, 47, 47, 47, 47, 47, 47,\n-        18, 47, 20, 47, 2, 47, 48, 48,\n-        47, 5, 6, 47, 47, 47, 47, 47,\n-        47, 47, 47, 47, 47, 9, 10, 11,\n-        12, 47, 47, 47, 47, 47, 47, 47,\n-        47, 56, 47, 47, 47, 47, 47, 47,\n-        18, 47, 2, 47, 48, 48, 47, 5,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n@@ -324,1 +414,3 @@\n-        20, 47, 2, 47, 48, 48, 47, 5,\n+        20, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n@@ -329,1 +421,3 @@\n-        20, 47, 2, 47, 48, 48, 47, 5,\n+        20, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n@@ -334,1 +428,3 @@\n-        20, 47, 2, 47, 48, 48, 47, 5,\n+        20, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        5, 47, 2, 47, 48, 48, 47, 5,\n@@ -339,1 +435,3 @@\n-        20, 47, 2, 3, 48, 48, 47, 5,\n+        20, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        5, 47, 2, 3, 48, 48, 47, 5,\n@@ -344,11 +442,17 @@\n-        20, 47, 22, 23, 24, 24, 21, 25,\n-        26, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 27, 28, 29, 30, 21,\n-        21, 21, 21, 21, 21, 21, 21, 58,\n-        21, 21, 32, 33, 34, 35, 36, 37,\n-        38, 21, 22, 59, 24, 24, 21, 25,\n-        26, 21, 21, 21, 21, 21, 21, 21,\n-        21, 21, 21, 27, 28, 29, 30, 21,\n-        21, 21, 21, 21, 21, 21, 21, 31,\n-        21, 21, 32, 33, 34, 35, 36, 21,\n-        38, 21, 1, 1, 2, 3, 48, 48,\n+        20, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        5, 47, 23, 24, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 58,\n+        22, 22, 33, 34, 35, 36, 37, 38,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 23, 59, 25, 25, 22, 26,\n+        27, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 28, 29, 30, 31, 22,\n+        22, 22, 22, 22, 22, 22, 22, 32,\n+        22, 22, 33, 34, 35, 36, 37, 22,\n+        39, 22, 22, 22, 22, 22, 22, 22,\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        26, 22, 1, 1, 2, 3, 48, 48,\n@@ -359,1 +463,3 @@\n-        18, 19, 20, 47, 1, 1, 60, 60,\n+        18, 19, 20, 47, 47, 47, 47, 47,\n+        47, 47, 47, 47, 47, 47, 47, 47,\n+        47, 47, 5, 47, 1, 1, 60, 60,\n@@ -365,8 +471,8 @@\n-        0, 1, 26, 37, 0, 27, 29, 51,\n-        54, 39, 40, 41, 28, 43, 44, 46,\n-        47, 48, 30, 50, 45, 0, 2, 13,\n-        0, 3, 5, 14, 15, 16, 4, 18,\n-        19, 21, 22, 23, 6, 25, 20, 12,\n-        9, 10, 11, 7, 8, 17, 24, 0,\n-        0, 36, 33, 34, 35, 31, 32, 38,\n-        42, 49, 52, 53, 0\n+        0, 1, 25, 35, 0, 26, 30, 49,\n+        52, 37, 38, 39, 29, 41, 42, 44,\n+        45, 46, 27, 48, 43, 26, 0, 2,\n+        12, 0, 3, 7, 13, 14, 15, 6,\n+        17, 18, 20, 21, 22, 4, 24, 19,\n+        11, 5, 8, 9, 10, 16, 23, 0,\n+        0, 34, 0, 28, 31, 32, 33, 36,\n+        40, 47, 50, 51, 0\n@@ -376,1 +482,1 @@\n-        3, 0, 0, 0, 4, 0, 0, 0,\n+        3, 0, 0, 0, 4, 5, 0, 0,\n@@ -378,2 +484,2 @@\n-        0, 0, 0, 0, 0, 5, 0, 0,\n-        6, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 6, 7, 0,\n+        0, 8, 0, 0, 0, 0, 0, 0,\n@@ -381,3 +487,3 @@\n-        0, 0, 0, 0, 0, 0, 0, 7,\n-        8, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 9\n+        0, 0, 0, 0, 0, 0, 0, 9,\n+        10, 0, 11, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 12\n@@ -393,1 +499,1 @@\n-        0, 0, 0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0\n@@ -403,1 +509,1 @@\n-        0, 0, 0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0\n@@ -407,4 +513,4 @@\n-        0, 22, 22, 22, 22, 22, 22, 22,\n-        22, 22, 22, 22, 22, 22, 22, 22,\n-        22, 22, 22, 22, 22, 22, 22, 22,\n-        22, 22, 48, 48, 48, 48, 48, 48,\n+        0, 23, 23, 23, 23, 23, 23, 23,\n+        23, 23, 23, 23, 23, 23, 23, 23,\n+        23, 23, 23, 23, 23, 23, 23, 23,\n+        23, 48, 51, 48, 48, 48, 48, 48,\n@@ -413,1 +519,1 @@\n-        48, 48, 48, 22, 22, 48, 61\n+        48, 23, 23, 48, 61\n@@ -427,1 +533,1 @@\n-#line 117 \"hb-ot-shaper-myanmar-machine.rl\"\n+#line 118 \"hb-ot-shaper-myanmar-machine.rl\"\n@@ -446,1 +552,1 @@\n-#line 447 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 553 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -454,1 +560,1 @@\n-#line 137 \"hb-ot-shaper-myanmar-machine.rl\"\n+#line 138 \"hb-ot-shaper-myanmar-machine.rl\"\n@@ -462,1 +568,1 @@\n-#line 463 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 569 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -476,1 +582,1 @@\n-#line 477 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 583 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -494,2 +600,2 @@\n-        case 6:\n-#line 110 \"hb-ot-shaper-myanmar-machine.rl\"\n+        case 8:\n+#line 111 \"hb-ot-shaper-myanmar-machine.rl\"\n@@ -499,1 +605,1 @@\n-#line 111 \"hb-ot-shaper-myanmar-machine.rl\"\n+#line 112 \"hb-ot-shaper-myanmar-machine.rl\"\n@@ -502,2 +608,2 @@\n-        case 8:\n-#line 112 \"hb-ot-shaper-myanmar-machine.rl\"\n+        case 10:\n+#line 113 \"hb-ot-shaper-myanmar-machine.rl\"\n@@ -507,1 +613,1 @@\n-#line 113 \"hb-ot-shaper-myanmar-machine.rl\"\n+#line 114 \"hb-ot-shaper-myanmar-machine.rl\"\n@@ -510,4 +616,0 @@\n-        case 5:\n-#line 110 \"hb-ot-shaper-myanmar-machine.rl\"\n-        {te = p;p--;{ found_syllable (myanmar_consonant_syllable); }}\n-        break;\n@@ -515,2 +617,2 @@\n-#line 112 \"hb-ot-shaper-myanmar-machine.rl\"\n-        {te = p;p--;{ found_syllable (myanmar_broken_cluster); buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE; }}\n+#line 111 \"hb-ot-shaper-myanmar-machine.rl\"\n+        {te = p;p--;{ found_syllable (myanmar_consonant_syllable); }}\n@@ -520,0 +622,4 @@\n+        {te = p;p--;{ found_syllable (myanmar_broken_cluster); buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE; }}\n+        break;\n+        case 12:\n+#line 114 \"hb-ot-shaper-myanmar-machine.rl\"\n@@ -522,1 +628,25 @@\n-#line 523 \"hb-ot-shaper-myanmar-machine.hh\"\n+        case 11:\n+#line 1 \"NONE\"\n+        {       switch( act ) {\n+        case 2:\n+        {{p = ((te))-1;} found_syllable (myanmar_non_myanmar_cluster); }\n+        break;\n+        case 3:\n+        {{p = ((te))-1;} found_syllable (myanmar_broken_cluster); buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE; }\n+        break;\n+        }\n+        }\n+        break;\n+        case 6:\n+#line 1 \"NONE\"\n+        {te = p+1;}\n+#line 112 \"hb-ot-shaper-myanmar-machine.rl\"\n+        {act = 2;}\n+        break;\n+        case 5:\n+#line 1 \"NONE\"\n+        {te = p+1;}\n+#line 113 \"hb-ot-shaper-myanmar-machine.rl\"\n+        {act = 3;}\n+        break;\n+#line 653 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -531,1 +661,1 @@\n-#line 532 \"hb-ot-shaper-myanmar-machine.hh\"\n+#line 662 \"hb-ot-shaper-myanmar-machine.hh\"\n@@ -547,1 +677,1 @@\n-#line 145 \"hb-ot-shaper-myanmar-machine.rl\"\n+#line 146 \"hb-ot-shaper-myanmar-machine.rl\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-myanmar-machine.hh","additions":386,"deletions":256,"binary":false,"changes":642,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+#define use_syllable_machine_ex_RK 56u\n@@ -102,1 +103,1 @@\n-#line 103 \"hb-ot-shaper-use-machine.hh\"\n+#line 104 \"hb-ot-shaper-use-machine.hh\"\n@@ -104,1 +105,1 @@\n-        49u, 51u, 0u, 53u, 11u, 53u, 11u, 53u, 1u, 53u, 14u, 48u, 14u, 47u, 14u, 47u,\n+        49u, 51u, 0u, 56u, 11u, 56u, 11u, 56u, 1u, 53u, 14u, 48u, 14u, 47u, 14u, 47u,\n@@ -107,1 +108,1 @@\n-        12u, 53u, 12u, 53u, 11u, 53u, 1u, 14u, 1u, 48u, 14u, 42u, 14u, 42u, 11u, 53u,\n+        12u, 53u, 12u, 53u, 11u, 56u, 1u, 14u, 1u, 48u, 14u, 42u, 14u, 42u, 11u, 56u,\n@@ -110,10 +111,10 @@\n-        14u, 53u, 12u, 53u, 14u, 53u, 12u, 53u, 12u, 53u, 12u, 53u, 11u, 53u, 1u, 14u,\n-        1u, 14u, 1u, 48u, 13u, 14u, 4u, 14u, 11u, 53u, 11u, 53u, 1u, 53u, 14u, 48u,\n-        14u, 47u, 14u, 47u, 14u, 47u, 14u, 46u, 14u, 46u, 14u, 14u, 14u, 48u, 14u, 48u,\n-        14u, 48u, 1u, 14u, 14u, 48u, 14u, 53u, 14u, 53u, 14u, 53u, 14u, 53u, 12u, 53u,\n-        14u, 53u, 12u, 53u, 12u, 53u, 12u, 53u, 11u, 53u, 1u, 14u, 1u, 14u, 1u, 48u,\n-        11u, 53u, 1u, 53u, 14u, 48u, 14u, 47u, 14u, 47u, 14u, 47u, 14u, 46u, 14u, 46u,\n-        14u, 14u, 14u, 48u, 14u, 48u, 14u, 48u, 1u, 14u, 14u, 48u, 14u, 53u, 14u, 53u,\n-        14u, 53u, 14u, 53u, 12u, 53u, 14u, 53u, 12u, 53u, 12u, 53u, 12u, 53u, 11u, 53u,\n-        1u, 14u, 1u, 48u, 4u, 14u, 13u, 14u, 1u, 53u, 14u, 42u, 14u, 42u, 1u, 5u,\n-        14u, 55u, 14u, 51u, 14u, 52u, 14u, 54u, 11u, 53u, 0\n+        14u, 53u, 12u, 53u, 14u, 53u, 12u, 53u, 12u, 53u, 12u, 53u, 11u, 56u, 1u, 14u,\n+        1u, 14u, 1u, 48u, 14u, 14u, 13u, 14u, 4u, 14u, 11u, 56u, 11u, 56u, 1u, 53u,\n+        14u, 48u, 14u, 47u, 14u, 47u, 14u, 47u, 14u, 46u, 14u, 46u, 14u, 14u, 14u, 48u,\n+        14u, 48u, 14u, 48u, 1u, 14u, 14u, 48u, 14u, 53u, 14u, 53u, 14u, 53u, 14u, 53u,\n+        12u, 53u, 14u, 53u, 12u, 53u, 12u, 53u, 12u, 53u, 11u, 56u, 1u, 14u, 1u, 14u,\n+        1u, 48u, 14u, 14u, 11u, 56u, 1u, 53u, 14u, 48u, 14u, 47u, 14u, 47u, 14u, 47u,\n+        14u, 46u, 14u, 46u, 14u, 14u, 14u, 48u, 14u, 48u, 14u, 48u, 1u, 14u, 14u, 48u,\n+        14u, 53u, 14u, 53u, 14u, 53u, 14u, 53u, 12u, 53u, 14u, 53u, 12u, 53u, 12u, 53u,\n+        12u, 53u, 11u, 56u, 1u, 14u, 1u, 48u, 4u, 14u, 13u, 14u, 1u, 56u, 14u, 42u,\n+        14u, 42u, 1u, 5u, 14u, 55u, 14u, 51u, 14u, 52u, 14u, 54u, 11u, 56u, 0\n@@ -123,1 +124,1 @@\n-        3, 54, 43, 43, 53, 35, 34, 34,\n+        3, 57, 46, 46, 53, 35, 34, 34,\n@@ -126,1 +127,1 @@\n-        42, 42, 43, 14, 48, 29, 29, 43,\n+        42, 42, 46, 14, 48, 29, 29, 46,\n@@ -129,10 +130,10 @@\n-        40, 42, 40, 42, 42, 42, 43, 14,\n-        14, 48, 2, 11, 43, 43, 53, 35,\n-        34, 34, 34, 33, 33, 1, 35, 35,\n-        35, 14, 35, 40, 40, 40, 40, 42,\n-        40, 42, 42, 42, 43, 14, 14, 48,\n-        43, 53, 35, 34, 34, 34, 33, 33,\n-        1, 35, 35, 35, 14, 35, 40, 40,\n-        40, 40, 42, 40, 42, 42, 42, 43,\n-        14, 48, 11, 2, 53, 29, 29, 5,\n-        42, 38, 39, 41, 43\n+        40, 42, 40, 42, 42, 42, 46, 14,\n+        14, 48, 1, 2, 11, 46, 46, 53,\n+        35, 34, 34, 34, 33, 33, 1, 35,\n+        35, 35, 14, 35, 40, 40, 40, 40,\n+        42, 40, 42, 42, 42, 46, 14, 14,\n+        48, 1, 46, 53, 35, 34, 34, 34,\n+        33, 33, 1, 35, 35, 35, 14, 35,\n+        40, 40, 40, 40, 42, 40, 42, 42,\n+        42, 46, 14, 48, 11, 2, 56, 29,\n+        29, 5, 42, 38, 39, 41, 46\n@@ -142,16 +143,16 @@\n-        0, 4, 59, 103, 147, 201, 237, 272,\n-        307, 342, 376, 410, 412, 448, 484, 520,\n-        535, 571, 612, 653, 694, 735, 778, 819,\n-        862, 905, 948, 992, 1007, 1056, 1086, 1116,\n-        1160, 1214, 1250, 1285, 1320, 1355, 1389, 1423,\n-        1425, 1461, 1497, 1533, 1548, 1584, 1625, 1666,\n-        1707, 1748, 1791, 1832, 1875, 1918, 1961, 2005,\n-        2020, 2035, 2084, 2087, 2099, 2143, 2187, 2241,\n-        2277, 2312, 2347, 2382, 2416, 2450, 2452, 2488,\n-        2524, 2560, 2575, 2611, 2652, 2693, 2734, 2775,\n-        2818, 2859, 2902, 2945, 2988, 3032, 3047, 3062,\n-        3111, 3155, 3209, 3245, 3280, 3315, 3350, 3384,\n-        3418, 3420, 3456, 3492, 3528, 3543, 3579, 3620,\n-        3661, 3702, 3743, 3786, 3827, 3870, 3913, 3956,\n-        4000, 4015, 4064, 4076, 4079, 4133, 4163, 4193,\n-        4199, 4242, 4281, 4321, 4363\n+        0, 4, 62, 109, 156, 210, 246, 281,\n+        316, 351, 385, 419, 421, 457, 493, 529,\n+        544, 580, 621, 662, 703, 744, 787, 828,\n+        871, 914, 957, 1004, 1019, 1068, 1098, 1128,\n+        1175, 1229, 1265, 1300, 1335, 1370, 1404, 1438,\n+        1440, 1476, 1512, 1548, 1563, 1599, 1640, 1681,\n+        1722, 1763, 1806, 1847, 1890, 1933, 1976, 2023,\n+        2038, 2053, 2102, 2104, 2107, 2119, 2166, 2213,\n+        2267, 2303, 2338, 2373, 2408, 2442, 2476, 2478,\n+        2514, 2550, 2586, 2601, 2637, 2678, 2719, 2760,\n+        2801, 2844, 2885, 2928, 2971, 3014, 3061, 3076,\n+        3091, 3140, 3142, 3189, 3243, 3279, 3314, 3349,\n+        3384, 3418, 3452, 3454, 3490, 3526, 3562, 3577,\n+        3613, 3654, 3695, 3736, 3777, 3820, 3861, 3904,\n+        3947, 3990, 4037, 4052, 4101, 4113, 4116, 4173,\n+        4203, 4233, 4239, 4282, 4321, 4361, 4403\n@@ -168,113 +169,8 @@\n-        5, 37, 5, 39, 40, 38, 41, 38,\n-        38, 38, 38, 38, 38, 38, 42, 43,\n-        44, 45, 46, 47, 48, 49, 50, 39,\n-        51, 52, 53, 54, 38, 55, 56, 57,\n-        38, 58, 59, 38, 60, 61, 62, 63,\n-        60, 38, 38, 38, 38, 64, 38, 39,\n-        40, 38, 41, 38, 38, 38, 38, 38,\n-        38, 38, 42, 43, 44, 45, 46, 47,\n-        48, 49, 50, 39, 51, 52, 53, 54,\n-        38, 55, 56, 57, 38, 38, 38, 38,\n-        60, 61, 62, 63, 60, 38, 38, 38,\n-        38, 64, 38, 39, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        41, 38, 38, 38, 38, 38, 38, 38,\n-        38, 43, 44, 45, 46, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 55,\n-        56, 57, 38, 38, 38, 38, 38, 61,\n-        62, 63, 65, 38, 38, 38, 38, 43,\n-        38, 41, 38, 38, 38, 38, 38, 38,\n-        38, 38, 43, 44, 45, 46, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        55, 56, 57, 38, 38, 38, 38, 38,\n-        61, 62, 63, 65, 38, 41, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 44,\n-        45, 46, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 61, 62, 63, 38,\n-        41, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 45, 46, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 61,\n-        62, 63, 38, 41, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 46,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 61, 62, 63, 38, 41, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 61, 62, 38,\n-        41, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        62, 38, 41, 38, 41, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 44, 45,\n-        46, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 55, 56, 57, 38, 38,\n-        38, 38, 38, 61, 62, 63, 65, 38,\n-        41, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 44, 45, 46, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        56, 57, 38, 38, 38, 38, 38, 61,\n-        62, 63, 65, 38, 41, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 44, 45,\n-        46, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 57, 38, 38,\n-        38, 38, 38, 61, 62, 63, 65, 38,\n-        66, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 41, 38, 41,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 44, 45, 46, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 61, 62,\n-        63, 65, 38, 41, 38, 38, 38, 38,\n-        38, 38, 38, 42, 43, 44, 45, 46,\n-        38, 38, 38, 38, 38, 38, 52, 53,\n-        54, 38, 55, 56, 57, 38, 38, 38,\n-        38, 38, 61, 62, 63, 65, 38, 38,\n-        38, 38, 43, 38, 41, 38, 38, 38,\n-        38, 38, 38, 38, 38, 43, 44, 45,\n-        46, 38, 38, 38, 38, 38, 38, 52,\n-        53, 54, 38, 55, 56, 57, 38, 38,\n-        38, 38, 38, 61, 62, 63, 65, 38,\n-        38, 38, 38, 43, 38, 41, 38, 38,\n-        38, 38, 38, 38, 38, 38, 43, 44,\n-        45, 46, 38, 38, 38, 38, 38, 38,\n-        38, 53, 54, 38, 55, 56, 57, 38,\n-        38, 38, 38, 38, 61, 62, 63, 65,\n-        38, 38, 38, 38, 43, 38, 41, 38,\n-        38, 38, 38, 38, 38, 38, 38, 43,\n-        44, 45, 46, 38, 38, 38, 38, 38,\n-        38, 38, 38, 54, 38, 55, 56, 57,\n-        38, 38, 38, 38, 38, 61, 62, 63,\n-        65, 38, 38, 38, 38, 43, 38, 67,\n-        38, 41, 38, 38, 38, 38, 38, 38,\n-        38, 42, 43, 44, 45, 46, 38, 48,\n-        49, 38, 38, 38, 52, 53, 54, 38,\n-        55, 56, 57, 38, 38, 38, 38, 38,\n-        61, 62, 63, 65, 38, 38, 38, 38,\n-        43, 38, 41, 38, 38, 38, 38, 38,\n-        38, 38, 38, 43, 44, 45, 46, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 55, 56, 57, 38, 38, 38, 38,\n-        38, 61, 62, 63, 65, 38, 38, 38,\n-        38, 43, 38, 67, 38, 41, 38, 38,\n-        38, 38, 38, 38, 38, 42, 43, 44,\n-        45, 46, 38, 38, 49, 38, 38, 38,\n-        52, 53, 54, 38, 55, 56, 57, 38,\n-        38, 38, 38, 38, 61, 62, 63, 65,\n-        38, 38, 38, 38, 43, 38, 67, 38,\n-        41, 38, 38, 38, 38, 38, 38, 38,\n-        42, 43, 44, 45, 46, 38, 38, 38,\n-        38, 38, 38, 52, 53, 54, 38, 55,\n-        56, 57, 38, 38, 38, 38, 38, 61,\n-        62, 63, 65, 38, 38, 38, 38, 43,\n-        38, 67, 38, 41, 38, 38, 38, 38,\n-        38, 38, 38, 42, 43, 44, 45, 46,\n-        47, 48, 49, 38, 38, 38, 52, 53,\n-        54, 38, 55, 56, 57, 38, 38, 38,\n-        38, 38, 61, 62, 63, 65, 38, 38,\n-        38, 38, 43, 38, 39, 40, 38, 41,\n-        38, 38, 38, 38, 38, 38, 38, 42,\n+        5, 37, 5, 5, 38, 5, 40, 41,\n+        39, 42, 39, 39, 39, 39, 39, 39,\n+        39, 43, 44, 45, 46, 47, 48, 49,\n+        50, 51, 40, 52, 53, 54, 55, 39,\n+        56, 57, 58, 39, 59, 60, 39, 61,\n+        62, 63, 64, 61, 39, 39, 39, 39,\n+        65, 39, 39, 64, 39, 40, 41, 39,\n+        42, 39, 39, 39, 39, 39, 39, 39,\n@@ -282,430 +178,541 @@\n-        38, 51, 52, 53, 54, 38, 55, 56,\n-        57, 38, 38, 38, 38, 60, 61, 62,\n-        63, 60, 38, 38, 38, 38, 64, 38,\n-        39, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 41, 38, 39,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 41, 38, 38, 38,\n-        38, 38, 38, 38, 38, 43, 44, 45,\n-        46, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 55, 56, 57, 38, 38,\n-        38, 38, 38, 61, 62, 63, 65, 38,\n-        41, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 58, 59, 38, 41, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 38, 38, 38, 38, 38, 38,\n-        38, 38, 59, 38, 4, 69, 68, 70,\n-        68, 68, 68, 68, 68, 68, 68, 71,\n-        72, 73, 74, 75, 76, 77, 78, 79,\n-        4, 80, 81, 82, 83, 68, 84, 85,\n-        86, 68, 68, 68, 68, 87, 88, 89,\n-        90, 91, 68, 68, 68, 68, 92, 68,\n-        4, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 70, 68, 68,\n-        68, 68, 68, 68, 68, 68, 72, 73,\n-        74, 75, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 84, 85, 86, 68,\n-        68, 68, 68, 68, 88, 89, 90, 93,\n-        68, 68, 68, 68, 72, 68, 70, 68,\n-        68, 68, 68, 68, 68, 68, 68, 72,\n-        73, 74, 75, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 84, 85, 86,\n-        68, 68, 68, 68, 68, 88, 89, 90,\n-        93, 68, 70, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 73, 74, 75, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 88, 89, 90, 68, 70, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        74, 75, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 88, 89, 90, 68,\n-        70, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 75, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 88,\n-        89, 90, 68, 70, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 88, 89, 68, 70, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 89, 68, 70,\n-        68, 70, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 73, 74, 75, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        84, 85, 86, 68, 68, 68, 68, 68,\n-        88, 89, 90, 93, 68, 70, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 73,\n-        74, 75, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 85, 86, 68,\n-        68, 68, 68, 68, 88, 89, 90, 93,\n-        68, 70, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 73, 74, 75, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 86, 68, 68, 68, 68, 68,\n-        88, 89, 90, 93, 68, 95, 94, 94,\n-        94, 94, 94, 94, 94, 94, 94, 94,\n-        94, 94, 96, 94, 70, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 73, 74,\n-        75, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 88, 89, 90, 93, 68,\n-        70, 68, 68, 68, 68, 68, 68, 68,\n-        71, 72, 73, 74, 75, 68, 68, 68,\n-        68, 68, 68, 81, 82, 83, 68, 84,\n-        85, 86, 68, 68, 68, 68, 68, 88,\n-        89, 90, 93, 68, 68, 68, 68, 72,\n-        68, 70, 68, 68, 68, 68, 68, 68,\n-        68, 68, 72, 73, 74, 75, 68, 68,\n-        68, 68, 68, 68, 81, 82, 83, 68,\n-        84, 85, 86, 68, 68, 68, 68, 68,\n-        88, 89, 90, 93, 68, 68, 68, 68,\n-        72, 68, 70, 68, 68, 68, 68, 68,\n-        68, 68, 68, 72, 73, 74, 75, 68,\n-        68, 68, 68, 68, 68, 68, 82, 83,\n-        68, 84, 85, 86, 68, 68, 68, 68,\n-        68, 88, 89, 90, 93, 68, 68, 68,\n-        68, 72, 68, 70, 68, 68, 68, 68,\n-        68, 68, 68, 68, 72, 73, 74, 75,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        83, 68, 84, 85, 86, 68, 68, 68,\n-        68, 68, 88, 89, 90, 93, 68, 68,\n-        68, 68, 72, 68, 97, 68, 70, 68,\n-        68, 68, 68, 68, 68, 68, 71, 72,\n-        73, 74, 75, 68, 77, 78, 68, 68,\n-        68, 81, 82, 83, 68, 84, 85, 86,\n-        68, 68, 68, 68, 68, 88, 89, 90,\n-        93, 68, 68, 68, 68, 72, 68, 70,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        72, 73, 74, 75, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 84, 85,\n-        86, 68, 68, 68, 68, 68, 88, 89,\n-        90, 93, 68, 68, 68, 68, 72, 68,\n-        97, 68, 70, 68, 68, 68, 68, 68,\n-        68, 68, 71, 72, 73, 74, 75, 68,\n-        68, 78, 68, 68, 68, 81, 82, 83,\n-        68, 84, 85, 86, 68, 68, 68, 68,\n-        68, 88, 89, 90, 93, 68, 68, 68,\n-        68, 72, 68, 97, 68, 70, 68, 68,\n-        68, 68, 68, 68, 68, 71, 72, 73,\n-        74, 75, 68, 68, 68, 68, 68, 68,\n-        81, 82, 83, 68, 84, 85, 86, 68,\n-        68, 68, 68, 68, 88, 89, 90, 93,\n-        68, 68, 68, 68, 72, 68, 97, 68,\n-        70, 68, 68, 68, 68, 68, 68, 68,\n-        71, 72, 73, 74, 75, 76, 77, 78,\n-        68, 68, 68, 81, 82, 83, 68, 84,\n-        85, 86, 68, 68, 68, 68, 68, 88,\n-        89, 90, 93, 68, 68, 68, 68, 72,\n-        68, 4, 69, 68, 70, 68, 68, 68,\n-        68, 68, 68, 68, 71, 72, 73, 74,\n-        75, 76, 77, 78, 79, 68, 80, 81,\n-        82, 83, 68, 84, 85, 86, 68, 68,\n-        68, 68, 87, 88, 89, 90, 91, 68,\n-        68, 68, 68, 92, 68, 4, 98, 98,\n-        98, 98, 98, 98, 98, 98, 98, 98,\n-        98, 98, 99, 98, 4, 94, 94, 94,\n-        94, 94, 94, 94, 94, 94, 94, 94,\n-        94, 96, 94, 4, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        70, 68, 68, 68, 68, 68, 68, 68,\n-        68, 72, 73, 74, 75, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 84,\n-        85, 86, 68, 68, 68, 68, 68, 88,\n-        89, 90, 93, 68, 101, 102, 100, 6,\n-        103, 103, 103, 103, 103, 103, 103, 103,\n-        103, 104, 103, 105, 106, 68, 70, 68,\n-        68, 68, 68, 68, 68, 68, 107, 108,\n-        109, 110, 111, 112, 113, 114, 115, 105,\n-        116, 117, 118, 119, 68, 120, 121, 122,\n-        68, 58, 59, 68, 123, 124, 125, 126,\n-        127, 68, 68, 68, 68, 128, 68, 105,\n-        106, 68, 70, 68, 68, 68, 68, 68,\n-        68, 68, 107, 108, 109, 110, 111, 112,\n-        113, 114, 115, 105, 116, 117, 118, 119,\n-        68, 120, 121, 122, 68, 68, 68, 68,\n-        123, 124, 125, 126, 127, 68, 68, 68,\n-        68, 128, 68, 105, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        70, 68, 68, 68, 68, 68, 68, 68,\n-        68, 108, 109, 110, 111, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 120,\n-        121, 122, 68, 68, 68, 68, 68, 124,\n-        125, 126, 129, 68, 68, 68, 68, 108,\n-        68, 70, 68, 68, 68, 68, 68, 68,\n-        68, 68, 108, 109, 110, 111, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        120, 121, 122, 68, 68, 68, 68, 68,\n-        124, 125, 126, 129, 68, 70, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 109,\n-        110, 111, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 124, 125, 126, 68,\n-        70, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 110, 111, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 124,\n-        125, 126, 68, 70, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 111,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 124, 125, 126, 68, 70, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 124, 125, 68,\n-        70, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        125, 68, 70, 68, 70, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 109, 110,\n-        111, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 120, 121, 122, 68, 68,\n-        68, 68, 68, 124, 125, 126, 129, 68,\n-        70, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 109, 110, 111, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        121, 122, 68, 68, 68, 68, 68, 124,\n-        125, 126, 129, 68, 70, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 109, 110,\n-        111, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 122, 68, 68,\n-        68, 68, 68, 124, 125, 126, 129, 68,\n-        130, 94, 94, 94, 94, 94, 94, 94,\n-        94, 94, 94, 94, 94, 96, 94, 70,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 109, 110, 111, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 68, 68, 68, 124, 125,\n-        126, 129, 68, 70, 68, 68, 68, 68,\n-        68, 68, 68, 107, 108, 109, 110, 111,\n-        68, 68, 68, 68, 68, 68, 117, 118,\n-        119, 68, 120, 121, 122, 68, 68, 68,\n-        68, 68, 124, 125, 126, 129, 68, 68,\n-        68, 68, 108, 68, 70, 68, 68, 68,\n-        68, 68, 68, 68, 68, 108, 109, 110,\n-        111, 68, 68, 68, 68, 68, 68, 117,\n-        118, 119, 68, 120, 121, 122, 68, 68,\n-        68, 68, 68, 124, 125, 126, 129, 68,\n-        68, 68, 68, 108, 68, 70, 68, 68,\n-        68, 68, 68, 68, 68, 68, 108, 109,\n-        110, 111, 68, 68, 68, 68, 68, 68,\n-        68, 118, 119, 68, 120, 121, 122, 68,\n-        68, 68, 68, 68, 124, 125, 126, 129,\n-        68, 68, 68, 68, 108, 68, 70, 68,\n-        68, 68, 68, 68, 68, 68, 68, 108,\n-        109, 110, 111, 68, 68, 68, 68, 68,\n-        68, 68, 68, 119, 68, 120, 121, 122,\n-        68, 68, 68, 68, 68, 124, 125, 126,\n-        129, 68, 68, 68, 68, 108, 68, 131,\n-        68, 70, 68, 68, 68, 68, 68, 68,\n-        68, 107, 108, 109, 110, 111, 68, 113,\n-        114, 68, 68, 68, 117, 118, 119, 68,\n-        120, 121, 122, 68, 68, 68, 68, 68,\n-        124, 125, 126, 129, 68, 68, 68, 68,\n-        108, 68, 70, 68, 68, 68, 68, 68,\n-        68, 68, 68, 108, 109, 110, 111, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 120, 121, 122, 68, 68, 68, 68,\n-        68, 124, 125, 126, 129, 68, 68, 68,\n-        68, 108, 68, 131, 68, 70, 68, 68,\n-        68, 68, 68, 68, 68, 107, 108, 109,\n-        110, 111, 68, 68, 114, 68, 68, 68,\n-        117, 118, 119, 68, 120, 121, 122, 68,\n-        68, 68, 68, 68, 124, 125, 126, 129,\n-        68, 68, 68, 68, 108, 68, 131, 68,\n-        70, 68, 68, 68, 68, 68, 68, 68,\n-        107, 108, 109, 110, 111, 68, 68, 68,\n-        68, 68, 68, 117, 118, 119, 68, 120,\n-        121, 122, 68, 68, 68, 68, 68, 124,\n-        125, 126, 129, 68, 68, 68, 68, 108,\n-        68, 131, 68, 70, 68, 68, 68, 68,\n-        68, 68, 68, 107, 108, 109, 110, 111,\n-        112, 113, 114, 68, 68, 68, 117, 118,\n-        119, 68, 120, 121, 122, 68, 68, 68,\n-        68, 68, 124, 125, 126, 129, 68, 68,\n-        68, 68, 108, 68, 105, 106, 68, 70,\n-        68, 68, 68, 68, 68, 68, 68, 107,\n-        108, 109, 110, 111, 112, 113, 114, 115,\n-        68, 116, 117, 118, 119, 68, 120, 121,\n-        122, 68, 68, 68, 68, 123, 124, 125,\n-        126, 127, 68, 68, 68, 68, 128, 68,\n-        105, 98, 98, 98, 98, 98, 98, 98,\n-        98, 98, 98, 98, 98, 99, 98, 105,\n-        94, 94, 94, 94, 94, 94, 94, 94,\n-        94, 94, 94, 94, 96, 94, 105, 68,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 68, 70, 68, 68, 68, 68,\n-        68, 68, 68, 68, 108, 109, 110, 111,\n-        68, 68, 68, 68, 68, 68, 68, 68,\n-        68, 68, 120, 121, 122, 68, 68, 68,\n-        68, 68, 124, 125, 126, 129, 68, 8,\n-        9, 132, 11, 132, 132, 132, 132, 132,\n-        132, 132, 13, 14, 15, 16, 17, 18,\n-        19, 20, 21, 8, 22, 23, 24, 25,\n-        132, 26, 27, 28, 132, 132, 132, 132,\n-        32, 33, 34, 35, 32, 132, 132, 132,\n-        132, 37, 132, 8, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        11, 132, 132, 132, 132, 132, 132, 132,\n-        132, 14, 15, 16, 17, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 26,\n-        27, 28, 132, 132, 132, 132, 132, 33,\n-        34, 35, 133, 132, 132, 132, 132, 14,\n-        132, 11, 132, 132, 132, 132, 132, 132,\n-        132, 132, 14, 15, 16, 17, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        26, 27, 28, 132, 132, 132, 132, 132,\n-        33, 34, 35, 133, 132, 11, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 15,\n-        16, 17, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 33, 34, 35, 132,\n-        11, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 16, 17, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 33,\n-        34, 35, 132, 11, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 17,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 33, 34, 35, 132, 11, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 33, 34, 132,\n-        11, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        34, 132, 11, 132, 11, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 15, 16,\n-        17, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 26, 27, 28, 132, 132,\n-        132, 132, 132, 33, 34, 35, 133, 132,\n-        11, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 15, 16, 17, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        27, 28, 132, 132, 132, 132, 132, 33,\n-        34, 35, 133, 132, 11, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 15, 16,\n-        17, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 28, 132, 132,\n-        132, 132, 132, 33, 34, 35, 133, 132,\n-        134, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 11, 132, 11,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 15, 16, 17, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 33, 34,\n-        35, 133, 132, 11, 132, 132, 132, 132,\n-        132, 132, 132, 13, 14, 15, 16, 17,\n-        132, 132, 132, 132, 132, 132, 23, 24,\n-        25, 132, 26, 27, 28, 132, 132, 132,\n-        132, 132, 33, 34, 35, 133, 132, 132,\n-        132, 132, 14, 132, 11, 132, 132, 132,\n-        132, 132, 132, 132, 132, 14, 15, 16,\n-        17, 132, 132, 132, 132, 132, 132, 23,\n-        24, 25, 132, 26, 27, 28, 132, 132,\n-        132, 132, 132, 33, 34, 35, 133, 132,\n-        132, 132, 132, 14, 132, 11, 132, 132,\n-        132, 132, 132, 132, 132, 132, 14, 15,\n-        16, 17, 132, 132, 132, 132, 132, 132,\n-        132, 24, 25, 132, 26, 27, 28, 132,\n-        132, 132, 132, 132, 33, 34, 35, 133,\n-        132, 132, 132, 132, 14, 132, 11, 132,\n-        132, 132, 132, 132, 132, 132, 132, 14,\n-        15, 16, 17, 132, 132, 132, 132, 132,\n-        132, 132, 132, 25, 132, 26, 27, 28,\n-        132, 132, 132, 132, 132, 33, 34, 35,\n-        133, 132, 132, 132, 132, 14, 132, 135,\n-        132, 11, 132, 132, 132, 132, 132, 132,\n-        132, 13, 14, 15, 16, 17, 132, 19,\n-        20, 132, 132, 132, 23, 24, 25, 132,\n-        26, 27, 28, 132, 132, 132, 132, 132,\n-        33, 34, 35, 133, 132, 132, 132, 132,\n-        14, 132, 11, 132, 132, 132, 132, 132,\n-        132, 132, 132, 14, 15, 16, 17, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 26, 27, 28, 132, 132, 132, 132,\n-        132, 33, 34, 35, 133, 132, 132, 132,\n-        132, 14, 132, 135, 132, 11, 132, 132,\n-        132, 132, 132, 132, 132, 13, 14, 15,\n-        16, 17, 132, 132, 20, 132, 132, 132,\n-        23, 24, 25, 132, 26, 27, 28, 132,\n-        132, 132, 132, 132, 33, 34, 35, 133,\n-        132, 132, 132, 132, 14, 132, 135, 132,\n-        11, 132, 132, 132, 132, 132, 132, 132,\n-        13, 14, 15, 16, 17, 132, 132, 132,\n-        132, 132, 132, 23, 24, 25, 132, 26,\n-        27, 28, 132, 132, 132, 132, 132, 33,\n-        34, 35, 133, 132, 132, 132, 132, 14,\n-        132, 135, 132, 11, 132, 132, 132, 132,\n-        132, 132, 132, 13, 14, 15, 16, 17,\n-        18, 19, 20, 132, 132, 132, 23, 24,\n-        25, 132, 26, 27, 28, 132, 132, 132,\n-        132, 132, 33, 34, 35, 133, 132, 132,\n-        132, 132, 14, 132, 8, 9, 132, 11,\n-        132, 132, 132, 132, 132, 132, 132, 13,\n-        14, 15, 16, 17, 18, 19, 20, 21,\n-        132, 22, 23, 24, 25, 132, 26, 27,\n-        28, 132, 132, 132, 132, 32, 33, 34,\n-        35, 32, 132, 132, 132, 132, 37, 132,\n-        8, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 11, 132, 8,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 11, 132, 132, 132,\n-        132, 132, 132, 132, 132, 14, 15, 16,\n-        17, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 26, 27, 28, 132, 132,\n-        132, 132, 132, 33, 34, 35, 133, 132,\n-        136, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 11, 132, 10, 11, 132, 4,\n-        132, 132, 132, 4, 132, 132, 132, 132,\n-        132, 8, 9, 10, 11, 132, 132, 132,\n-        132, 132, 132, 132, 13, 14, 15, 16,\n-        17, 18, 19, 20, 21, 8, 22, 23,\n-        24, 25, 132, 26, 27, 28, 132, 29,\n-        30, 132, 32, 33, 34, 35, 32, 132,\n-        132, 132, 132, 37, 132, 11, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        29, 30, 132, 11, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 132,\n-        132, 132, 132, 132, 132, 132, 132, 30,\n-        132, 4, 137, 137, 137, 4, 137, 139,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 140, 138, 141, 138, 141,\n-        142, 138, 139, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 1, 140, 140,\n-        138, 139, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 140, 138, 141,\n-        138, 139, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 138, 138, 138,\n-        138, 138, 138, 138, 138, 140, 138, 141,\n-        138, 141, 138, 39, 40, 38, 41, 38,\n-        38, 38, 38, 38, 38, 38, 42, 43,\n-        44, 45, 46, 47, 48, 49, 50, 39,\n-        51, 52, 53, 54, 38, 55, 56, 57,\n-        38, 58, 59, 38, 60, 61, 62, 63,\n-        60, 1, 38, 2, 38, 64, 38, 0\n+        51, 40, 52, 53, 54, 55, 39, 56,\n+        57, 58, 39, 39, 39, 39, 61, 62,\n+        63, 64, 61, 39, 39, 39, 39, 65,\n+        39, 39, 64, 39, 40, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 42, 39, 39, 39, 39, 39, 39,\n+        39, 39, 44, 45, 46, 47, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        56, 57, 58, 39, 39, 39, 39, 39,\n+        62, 63, 64, 66, 39, 39, 39, 39,\n+        44, 39, 42, 39, 39, 39, 39, 39,\n+        39, 39, 39, 44, 45, 46, 47, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 56, 57, 58, 39, 39, 39, 39,\n+        39, 62, 63, 64, 66, 39, 42, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        45, 46, 47, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 62, 63, 64,\n+        39, 42, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 46, 47, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        62, 63, 64, 39, 42, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        47, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 62, 63, 64, 39, 42,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 62, 63,\n+        39, 42, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 63, 39, 42, 39, 42, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 45,\n+        46, 47, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 56, 57, 58, 39,\n+        39, 39, 39, 39, 62, 63, 64, 66,\n+        39, 42, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 45, 46, 47, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 57, 58, 39, 39, 39, 39, 39,\n+        62, 63, 64, 66, 39, 42, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 45,\n+        46, 47, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 58, 39,\n+        39, 39, 39, 39, 62, 63, 64, 66,\n+        39, 67, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 42, 39,\n+        42, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 45, 46, 47, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 62,\n+        63, 64, 66, 39, 42, 39, 39, 39,\n+        39, 39, 39, 39, 43, 44, 45, 46,\n+        47, 39, 39, 39, 39, 39, 39, 53,\n+        54, 55, 39, 56, 57, 58, 39, 39,\n+        39, 39, 39, 62, 63, 64, 66, 39,\n+        39, 39, 39, 44, 39, 42, 39, 39,\n+        39, 39, 39, 39, 39, 39, 44, 45,\n+        46, 47, 39, 39, 39, 39, 39, 39,\n+        53, 54, 55, 39, 56, 57, 58, 39,\n+        39, 39, 39, 39, 62, 63, 64, 66,\n+        39, 39, 39, 39, 44, 39, 42, 39,\n+        39, 39, 39, 39, 39, 39, 39, 44,\n+        45, 46, 47, 39, 39, 39, 39, 39,\n+        39, 39, 54, 55, 39, 56, 57, 58,\n+        39, 39, 39, 39, 39, 62, 63, 64,\n+        66, 39, 39, 39, 39, 44, 39, 42,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        44, 45, 46, 47, 39, 39, 39, 39,\n+        39, 39, 39, 39, 55, 39, 56, 57,\n+        58, 39, 39, 39, 39, 39, 62, 63,\n+        64, 66, 39, 39, 39, 39, 44, 39,\n+        68, 39, 42, 39, 39, 39, 39, 39,\n+        39, 39, 43, 44, 45, 46, 47, 39,\n+        49, 50, 39, 39, 39, 53, 54, 55,\n+        39, 56, 57, 58, 39, 39, 39, 39,\n+        39, 62, 63, 64, 66, 39, 39, 39,\n+        39, 44, 39, 42, 39, 39, 39, 39,\n+        39, 39, 39, 39, 44, 45, 46, 47,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 56, 57, 58, 39, 39, 39,\n+        39, 39, 62, 63, 64, 66, 39, 39,\n+        39, 39, 44, 39, 68, 39, 42, 39,\n+        39, 39, 39, 39, 39, 39, 43, 44,\n+        45, 46, 47, 39, 39, 50, 39, 39,\n+        39, 53, 54, 55, 39, 56, 57, 58,\n+        39, 39, 39, 39, 39, 62, 63, 64,\n+        66, 39, 39, 39, 39, 44, 39, 68,\n+        39, 42, 39, 39, 39, 39, 39, 39,\n+        39, 43, 44, 45, 46, 47, 39, 39,\n+        39, 39, 39, 39, 53, 54, 55, 39,\n+        56, 57, 58, 39, 39, 39, 39, 39,\n+        62, 63, 64, 66, 39, 39, 39, 39,\n+        44, 39, 68, 39, 42, 39, 39, 39,\n+        39, 39, 39, 39, 43, 44, 45, 46,\n+        47, 48, 49, 50, 39, 39, 39, 53,\n+        54, 55, 39, 56, 57, 58, 39, 39,\n+        39, 39, 39, 62, 63, 64, 66, 39,\n+        39, 39, 39, 44, 39, 40, 41, 39,\n+        42, 39, 39, 39, 39, 39, 39, 39,\n+        43, 44, 45, 46, 47, 48, 49, 50,\n+        51, 39, 52, 53, 54, 55, 39, 56,\n+        57, 58, 39, 39, 39, 39, 61, 62,\n+        63, 64, 61, 39, 39, 39, 39, 65,\n+        39, 39, 64, 39, 40, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 42, 39, 40, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        42, 39, 39, 39, 39, 39, 39, 39,\n+        39, 44, 45, 46, 47, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 56,\n+        57, 58, 39, 39, 39, 39, 39, 62,\n+        63, 64, 66, 39, 42, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 59,\n+        60, 39, 42, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 39, 39,\n+        39, 39, 39, 39, 39, 39, 60, 39,\n+        4, 70, 69, 71, 69, 69, 69, 69,\n+        69, 69, 69, 72, 73, 74, 75, 76,\n+        77, 78, 79, 80, 4, 81, 82, 83,\n+        84, 69, 85, 86, 87, 69, 69, 69,\n+        69, 88, 89, 90, 91, 92, 69, 69,\n+        69, 69, 93, 69, 69, 94, 69, 4,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 71, 69, 69, 69,\n+        69, 69, 69, 69, 69, 73, 74, 75,\n+        76, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 85, 86, 87, 69, 69,\n+        69, 69, 69, 89, 90, 91, 95, 69,\n+        69, 69, 69, 73, 69, 71, 69, 69,\n+        69, 69, 69, 69, 69, 69, 73, 74,\n+        75, 76, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 85, 86, 87, 69,\n+        69, 69, 69, 69, 89, 90, 91, 95,\n+        69, 71, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 74, 75, 76, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        89, 90, 91, 69, 71, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 75,\n+        76, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 89, 90, 91, 69, 71,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 76, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 89, 90,\n+        91, 69, 71, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 89, 90, 69, 71, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 90, 69, 71, 69,\n+        71, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 74, 75, 76, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 85,\n+        86, 87, 69, 69, 69, 69, 69, 89,\n+        90, 91, 95, 69, 71, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 74, 75,\n+        76, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 86, 87, 69, 69,\n+        69, 69, 69, 89, 90, 91, 95, 69,\n+        71, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 74, 75, 76, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 87, 69, 69, 69, 69, 69, 89,\n+        90, 91, 95, 69, 97, 96, 96, 96,\n+        96, 96, 96, 96, 96, 96, 96, 96,\n+        96, 98, 96, 71, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 74, 75, 76,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 89, 90, 91, 95, 69, 71,\n+        69, 69, 69, 69, 69, 69, 69, 72,\n+        73, 74, 75, 76, 69, 69, 69, 69,\n+        69, 69, 82, 83, 84, 69, 85, 86,\n+        87, 69, 69, 69, 69, 69, 89, 90,\n+        91, 95, 69, 69, 69, 69, 73, 69,\n+        71, 69, 69, 69, 69, 69, 69, 69,\n+        69, 73, 74, 75, 76, 69, 69, 69,\n+        69, 69, 69, 82, 83, 84, 69, 85,\n+        86, 87, 69, 69, 69, 69, 69, 89,\n+        90, 91, 95, 69, 69, 69, 69, 73,\n+        69, 71, 69, 69, 69, 69, 69, 69,\n+        69, 69, 73, 74, 75, 76, 69, 69,\n+        69, 69, 69, 69, 69, 83, 84, 69,\n+        85, 86, 87, 69, 69, 69, 69, 69,\n+        89, 90, 91, 95, 69, 69, 69, 69,\n+        73, 69, 71, 69, 69, 69, 69, 69,\n+        69, 69, 69, 73, 74, 75, 76, 69,\n+        69, 69, 69, 69, 69, 69, 69, 84,\n+        69, 85, 86, 87, 69, 69, 69, 69,\n+        69, 89, 90, 91, 95, 69, 69, 69,\n+        69, 73, 69, 99, 69, 71, 69, 69,\n+        69, 69, 69, 69, 69, 72, 73, 74,\n+        75, 76, 69, 78, 79, 69, 69, 69,\n+        82, 83, 84, 69, 85, 86, 87, 69,\n+        69, 69, 69, 69, 89, 90, 91, 95,\n+        69, 69, 69, 69, 73, 69, 71, 69,\n+        69, 69, 69, 69, 69, 69, 69, 73,\n+        74, 75, 76, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 85, 86, 87,\n+        69, 69, 69, 69, 69, 89, 90, 91,\n+        95, 69, 69, 69, 69, 73, 69, 99,\n+        69, 71, 69, 69, 69, 69, 69, 69,\n+        69, 72, 73, 74, 75, 76, 69, 69,\n+        79, 69, 69, 69, 82, 83, 84, 69,\n+        85, 86, 87, 69, 69, 69, 69, 69,\n+        89, 90, 91, 95, 69, 69, 69, 69,\n+        73, 69, 99, 69, 71, 69, 69, 69,\n+        69, 69, 69, 69, 72, 73, 74, 75,\n+        76, 69, 69, 69, 69, 69, 69, 82,\n+        83, 84, 69, 85, 86, 87, 69, 69,\n+        69, 69, 69, 89, 90, 91, 95, 69,\n+        69, 69, 69, 73, 69, 99, 69, 71,\n+        69, 69, 69, 69, 69, 69, 69, 72,\n+        73, 74, 75, 76, 77, 78, 79, 69,\n+        69, 69, 82, 83, 84, 69, 85, 86,\n+        87, 69, 69, 69, 69, 69, 89, 90,\n+        91, 95, 69, 69, 69, 69, 73, 69,\n+        4, 70, 69, 71, 69, 69, 69, 69,\n+        69, 69, 69, 72, 73, 74, 75, 76,\n+        77, 78, 79, 80, 69, 81, 82, 83,\n+        84, 69, 85, 86, 87, 69, 69, 69,\n+        69, 88, 89, 90, 91, 92, 69, 69,\n+        69, 69, 93, 69, 69, 94, 69, 4,\n+        100, 100, 100, 100, 100, 100, 100, 100,\n+        100, 100, 100, 100, 101, 100, 4, 96,\n+        96, 96, 96, 96, 96, 96, 96, 96,\n+        96, 96, 96, 98, 96, 4, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 71, 69, 69, 69, 69, 69,\n+        69, 69, 69, 73, 74, 75, 76, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 85, 86, 87, 69, 69, 69, 69,\n+        69, 89, 90, 91, 95, 69, 101, 100,\n+        103, 104, 102, 6, 105, 105, 105, 105,\n+        105, 105, 105, 105, 105, 106, 105, 107,\n+        108, 69, 71, 69, 69, 69, 69, 69,\n+        69, 69, 109, 110, 111, 112, 113, 114,\n+        115, 116, 117, 107, 118, 119, 120, 121,\n+        69, 122, 123, 124, 69, 59, 60, 69,\n+        125, 126, 127, 128, 129, 69, 69, 69,\n+        69, 130, 69, 69, 131, 69, 107, 108,\n+        69, 71, 69, 69, 69, 69, 69, 69,\n+        69, 109, 110, 111, 112, 113, 114, 115,\n+        116, 117, 107, 118, 119, 120, 121, 69,\n+        122, 123, 124, 69, 69, 69, 69, 125,\n+        126, 127, 128, 129, 69, 69, 69, 69,\n+        130, 69, 69, 131, 69, 107, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 71, 69, 69, 69, 69, 69,\n+        69, 69, 69, 110, 111, 112, 113, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 122, 123, 124, 69, 69, 69, 69,\n+        69, 126, 127, 128, 132, 69, 69, 69,\n+        69, 110, 69, 71, 69, 69, 69, 69,\n+        69, 69, 69, 69, 110, 111, 112, 113,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 122, 123, 124, 69, 69, 69,\n+        69, 69, 126, 127, 128, 132, 69, 71,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 111, 112, 113, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 126, 127,\n+        128, 69, 71, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 112, 113, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 126, 127, 128, 69, 71, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 113, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 126, 127, 128, 69,\n+        71, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 126,\n+        127, 69, 71, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 127, 69, 71, 69, 71, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        111, 112, 113, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 122, 123, 124,\n+        69, 69, 69, 69, 69, 126, 127, 128,\n+        132, 69, 71, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 111, 112, 113, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 123, 124, 69, 69, 69, 69,\n+        69, 126, 127, 128, 132, 69, 71, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        111, 112, 113, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 124,\n+        69, 69, 69, 69, 69, 126, 127, 128,\n+        132, 69, 133, 96, 96, 96, 96, 96,\n+        96, 96, 96, 96, 96, 96, 96, 98,\n+        96, 71, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 111, 112, 113, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        126, 127, 128, 132, 69, 71, 69, 69,\n+        69, 69, 69, 69, 69, 109, 110, 111,\n+        112, 113, 69, 69, 69, 69, 69, 69,\n+        119, 120, 121, 69, 122, 123, 124, 69,\n+        69, 69, 69, 69, 126, 127, 128, 132,\n+        69, 69, 69, 69, 110, 69, 71, 69,\n+        69, 69, 69, 69, 69, 69, 69, 110,\n+        111, 112, 113, 69, 69, 69, 69, 69,\n+        69, 119, 120, 121, 69, 122, 123, 124,\n+        69, 69, 69, 69, 69, 126, 127, 128,\n+        132, 69, 69, 69, 69, 110, 69, 71,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        110, 111, 112, 113, 69, 69, 69, 69,\n+        69, 69, 69, 120, 121, 69, 122, 123,\n+        124, 69, 69, 69, 69, 69, 126, 127,\n+        128, 132, 69, 69, 69, 69, 110, 69,\n+        71, 69, 69, 69, 69, 69, 69, 69,\n+        69, 110, 111, 112, 113, 69, 69, 69,\n+        69, 69, 69, 69, 69, 121, 69, 122,\n+        123, 124, 69, 69, 69, 69, 69, 126,\n+        127, 128, 132, 69, 69, 69, 69, 110,\n+        69, 134, 69, 71, 69, 69, 69, 69,\n+        69, 69, 69, 109, 110, 111, 112, 113,\n+        69, 115, 116, 69, 69, 69, 119, 120,\n+        121, 69, 122, 123, 124, 69, 69, 69,\n+        69, 69, 126, 127, 128, 132, 69, 69,\n+        69, 69, 110, 69, 71, 69, 69, 69,\n+        69, 69, 69, 69, 69, 110, 111, 112,\n+        113, 69, 69, 69, 69, 69, 69, 69,\n+        69, 69, 69, 122, 123, 124, 69, 69,\n+        69, 69, 69, 126, 127, 128, 132, 69,\n+        69, 69, 69, 110, 69, 134, 69, 71,\n+        69, 69, 69, 69, 69, 69, 69, 109,\n+        110, 111, 112, 113, 69, 69, 116, 69,\n+        69, 69, 119, 120, 121, 69, 122, 123,\n+        124, 69, 69, 69, 69, 69, 126, 127,\n+        128, 132, 69, 69, 69, 69, 110, 69,\n+        134, 69, 71, 69, 69, 69, 69, 69,\n+        69, 69, 109, 110, 111, 112, 113, 69,\n+        69, 69, 69, 69, 69, 119, 120, 121,\n+        69, 122, 123, 124, 69, 69, 69, 69,\n+        69, 126, 127, 128, 132, 69, 69, 69,\n+        69, 110, 69, 134, 69, 71, 69, 69,\n+        69, 69, 69, 69, 69, 109, 110, 111,\n+        112, 113, 114, 115, 116, 69, 69, 69,\n+        119, 120, 121, 69, 122, 123, 124, 69,\n+        69, 69, 69, 69, 126, 127, 128, 132,\n+        69, 69, 69, 69, 110, 69, 107, 108,\n+        69, 71, 69, 69, 69, 69, 69, 69,\n+        69, 109, 110, 111, 112, 113, 114, 115,\n+        116, 117, 69, 118, 119, 120, 121, 69,\n+        122, 123, 124, 69, 69, 69, 69, 125,\n+        126, 127, 128, 129, 69, 69, 69, 69,\n+        130, 69, 69, 131, 69, 107, 100, 100,\n+        100, 100, 100, 100, 100, 100, 100, 100,\n+        100, 100, 101, 100, 107, 96, 96, 96,\n+        96, 96, 96, 96, 96, 96, 96, 96,\n+        96, 98, 96, 107, 69, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 69,\n+        71, 69, 69, 69, 69, 69, 69, 69,\n+        69, 110, 111, 112, 113, 69, 69, 69,\n+        69, 69, 69, 69, 69, 69, 69, 122,\n+        123, 124, 69, 69, 69, 69, 69, 126,\n+        127, 128, 132, 69, 101, 100, 8, 9,\n+        135, 11, 135, 135, 135, 135, 135, 135,\n+        135, 13, 14, 15, 16, 17, 18, 19,\n+        20, 21, 8, 22, 23, 24, 25, 135,\n+        26, 27, 28, 135, 135, 135, 135, 32,\n+        33, 34, 38, 32, 135, 135, 135, 135,\n+        37, 135, 135, 38, 135, 8, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 11, 135, 135, 135, 135, 135,\n+        135, 135, 135, 14, 15, 16, 17, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 26, 27, 28, 135, 135, 135, 135,\n+        135, 33, 34, 38, 136, 135, 135, 135,\n+        135, 14, 135, 11, 135, 135, 135, 135,\n+        135, 135, 135, 135, 14, 15, 16, 17,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 26, 27, 28, 135, 135, 135,\n+        135, 135, 33, 34, 38, 136, 135, 11,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 15, 16, 17, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 33, 34,\n+        38, 135, 11, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 16, 17, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 33, 34, 38, 135, 11, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 17, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 33, 34, 38, 135,\n+        11, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 33,\n+        34, 135, 11, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 34, 135, 11, 137, 11, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        15, 16, 17, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 26, 27, 28,\n+        135, 135, 135, 135, 135, 33, 34, 38,\n+        136, 135, 11, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 15, 16, 17, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 27, 28, 135, 135, 135, 135,\n+        135, 33, 34, 38, 136, 135, 11, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        15, 16, 17, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 28,\n+        135, 135, 135, 135, 135, 33, 34, 38,\n+        136, 135, 138, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 11,\n+        135, 11, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 15, 16, 17, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        33, 34, 38, 136, 135, 11, 135, 135,\n+        135, 135, 135, 135, 135, 13, 14, 15,\n+        16, 17, 135, 135, 135, 135, 135, 135,\n+        23, 24, 25, 135, 26, 27, 28, 135,\n+        135, 135, 135, 135, 33, 34, 38, 136,\n+        135, 135, 135, 135, 14, 135, 11, 135,\n+        135, 135, 135, 135, 135, 135, 135, 14,\n+        15, 16, 17, 135, 135, 135, 135, 135,\n+        135, 23, 24, 25, 135, 26, 27, 28,\n+        135, 135, 135, 135, 135, 33, 34, 38,\n+        136, 135, 135, 135, 135, 14, 135, 11,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        14, 15, 16, 17, 135, 135, 135, 135,\n+        135, 135, 135, 24, 25, 135, 26, 27,\n+        28, 135, 135, 135, 135, 135, 33, 34,\n+        38, 136, 135, 135, 135, 135, 14, 135,\n+        11, 135, 135, 135, 135, 135, 135, 135,\n+        135, 14, 15, 16, 17, 135, 135, 135,\n+        135, 135, 135, 135, 135, 25, 135, 26,\n+        27, 28, 135, 135, 135, 135, 135, 33,\n+        34, 38, 136, 135, 135, 135, 135, 14,\n+        135, 139, 135, 11, 135, 135, 135, 135,\n+        135, 135, 135, 13, 14, 15, 16, 17,\n+        135, 19, 20, 135, 135, 135, 23, 24,\n+        25, 135, 26, 27, 28, 135, 135, 135,\n+        135, 135, 33, 34, 38, 136, 135, 135,\n+        135, 135, 14, 135, 11, 135, 135, 135,\n+        135, 135, 135, 135, 135, 14, 15, 16,\n+        17, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 26, 27, 28, 135, 135,\n+        135, 135, 135, 33, 34, 38, 136, 135,\n+        135, 135, 135, 14, 135, 139, 135, 11,\n+        135, 135, 135, 135, 135, 135, 135, 13,\n+        14, 15, 16, 17, 135, 135, 20, 135,\n+        135, 135, 23, 24, 25, 135, 26, 27,\n+        28, 135, 135, 135, 135, 135, 33, 34,\n+        38, 136, 135, 135, 135, 135, 14, 135,\n+        139, 135, 11, 135, 135, 135, 135, 135,\n+        135, 135, 13, 14, 15, 16, 17, 135,\n+        135, 135, 135, 135, 135, 23, 24, 25,\n+        135, 26, 27, 28, 135, 135, 135, 135,\n+        135, 33, 34, 38, 136, 135, 135, 135,\n+        135, 14, 135, 139, 135, 11, 135, 135,\n+        135, 135, 135, 135, 135, 13, 14, 15,\n+        16, 17, 18, 19, 20, 135, 135, 135,\n+        23, 24, 25, 135, 26, 27, 28, 135,\n+        135, 135, 135, 135, 33, 34, 38, 136,\n+        135, 135, 135, 135, 14, 135, 8, 9,\n+        135, 11, 135, 135, 135, 135, 135, 135,\n+        135, 13, 14, 15, 16, 17, 18, 19,\n+        20, 21, 135, 22, 23, 24, 25, 135,\n+        26, 27, 28, 135, 135, 135, 135, 32,\n+        33, 34, 38, 32, 135, 135, 135, 135,\n+        37, 135, 135, 38, 135, 8, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 11, 135, 8, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 11, 135, 135, 135, 135, 135, 135,\n+        135, 135, 14, 15, 16, 17, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        26, 27, 28, 135, 135, 135, 135, 135,\n+        33, 34, 38, 136, 135, 140, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 11,\n+        135, 10, 11, 135, 4, 135, 135, 135,\n+        4, 135, 135, 135, 135, 135, 8, 9,\n+        10, 11, 135, 135, 135, 135, 135, 135,\n+        135, 13, 14, 15, 16, 17, 18, 19,\n+        20, 21, 8, 22, 23, 24, 25, 135,\n+        26, 27, 28, 135, 29, 30, 135, 32,\n+        33, 34, 38, 32, 135, 135, 135, 135,\n+        37, 135, 135, 38, 135, 11, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        29, 30, 135, 11, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 135,\n+        135, 135, 135, 135, 135, 135, 135, 30,\n+        135, 4, 141, 141, 141, 4, 141, 143,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 144, 142, 145, 142, 145,\n+        146, 142, 143, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 1, 144, 144,\n+        142, 143, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 144, 142, 145,\n+        142, 143, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 142, 142, 142,\n+        142, 142, 142, 142, 142, 144, 142, 145,\n+        142, 145, 142, 40, 41, 39, 42, 39,\n+        39, 39, 39, 39, 39, 39, 43, 44,\n+        45, 46, 47, 48, 49, 50, 51, 40,\n+        52, 53, 54, 55, 39, 56, 57, 58,\n+        39, 59, 60, 39, 61, 62, 63, 64,\n+        61, 1, 39, 2, 39, 65, 39, 39,\n+        64, 39, 0\n@@ -715,18 +722,19 @@\n-        1, 120, 0, 2, 31, 1, 58, 60,\n-        88, 89, 114, 1, 116, 102, 90, 91,\n-        92, 93, 106, 108, 109, 110, 111, 103,\n-        104, 105, 97, 98, 99, 117, 118, 119,\n-        112, 94, 95, 96, 124, 113, 1, 3,\n-        4, 1, 17, 5, 6, 7, 8, 21,\n-        23, 24, 25, 26, 18, 19, 20, 12,\n-        13, 14, 29, 30, 27, 9, 10, 11,\n-        28, 15, 16, 22, 1, 32, 1, 45,\n-        33, 34, 35, 36, 49, 51, 52, 53,\n-        54, 46, 47, 48, 40, 41, 42, 55,\n-        37, 38, 39, 56, 57, 43, 1, 44,\n-        1, 50, 1, 1, 1, 59, 1, 1,\n-        1, 61, 62, 75, 63, 64, 65, 66,\n-        79, 81, 82, 83, 84, 76, 77, 78,\n-        70, 71, 72, 85, 67, 68, 69, 86,\n-        87, 73, 74, 80, 1, 100, 101, 107,\n-        115, 1, 1, 1, 121, 122, 123\n+        1, 122, 0, 2, 31, 1, 59, 61,\n+        90, 91, 116, 1, 118, 104, 92, 93,\n+        94, 95, 108, 110, 111, 112, 113, 105,\n+        106, 107, 99, 100, 101, 119, 120, 121,\n+        114, 96, 97, 98, 126, 115, 98, 1,\n+        3, 4, 1, 17, 5, 6, 7, 8,\n+        21, 23, 24, 25, 26, 18, 19, 20,\n+        12, 13, 14, 29, 30, 27, 9, 10,\n+        11, 28, 15, 16, 22, 1, 32, 1,\n+        45, 33, 34, 35, 36, 49, 51, 52,\n+        53, 54, 46, 47, 48, 40, 41, 42,\n+        55, 37, 38, 39, 56, 57, 58, 43,\n+        1, 44, 1, 50, 1, 1, 1, 60,\n+        1, 1, 1, 62, 63, 76, 64, 65,\n+        66, 67, 80, 82, 83, 84, 85, 77,\n+        78, 79, 71, 72, 73, 86, 68, 69,\n+        70, 87, 88, 89, 74, 75, 81, 1,\n+        102, 1, 103, 109, 117, 1, 1, 1,\n+        123, 124, 125\n@@ -740,2 +748,2 @@\n-        0, 0, 0, 0, 6, 0, 7, 0,\n-        0, 8, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 6, 7, 0, 8, 9,\n+        0, 0, 10, 0, 0, 0, 0, 0,\n@@ -744,1 +752,1 @@\n-        0, 0, 0, 0, 9, 0, 10, 0,\n+        0, 0, 0, 0, 0, 11, 0, 12,\n@@ -747,3 +755,0 @@\n-        0, 0, 0, 0, 0, 0, 11, 0,\n-        12, 0, 13, 14, 15, 0, 16, 17,\n-        18, 0, 0, 0, 0, 0, 0, 0,\n@@ -751,0 +756,2 @@\n+        13, 0, 14, 0, 15, 16, 17, 0,\n+        18, 19, 20, 0, 0, 0, 0, 0,\n@@ -752,2 +759,4 @@\n-        0, 0, 0, 0, 19, 0, 0, 0,\n-        0, 20, 21, 22, 0, 0, 0\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 21,\n+        0, 22, 0, 0, 0, 23, 24, 25,\n+        0, 0, 0\n@@ -772,1 +781,1 @@\n-        0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0, 0, 0\n@@ -791,1 +800,1 @@\n-        0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0, 0, 0\n@@ -795,16 +804,16 @@\n-        1, 0, 39, 39, 39, 39, 39, 39,\n-        39, 39, 39, 39, 39, 39, 39, 39,\n-        39, 39, 39, 39, 39, 39, 39, 39,\n-        39, 39, 39, 39, 39, 39, 39, 69,\n-        69, 69, 69, 69, 69, 69, 69, 69,\n-        69, 69, 69, 95, 69, 69, 69, 69,\n-        69, 69, 69, 69, 69, 69, 69, 99,\n-        95, 69, 101, 104, 69, 69, 69, 69,\n-        69, 69, 69, 69, 69, 69, 69, 69,\n-        69, 95, 69, 69, 69, 69, 69, 69,\n-        69, 69, 69, 69, 69, 99, 95, 69,\n-        133, 133, 133, 133, 133, 133, 133, 133,\n-        133, 133, 133, 133, 133, 133, 133, 133,\n-        133, 133, 133, 133, 133, 133, 133, 133,\n-        133, 133, 133, 133, 133, 133, 133, 138,\n-        139, 139, 139, 139, 39\n+        1, 0, 40, 40, 40, 40, 40, 40,\n+        40, 40, 40, 40, 40, 40, 40, 40,\n+        40, 40, 40, 40, 40, 40, 40, 40,\n+        40, 40, 40, 40, 40, 40, 40, 70,\n+        70, 70, 70, 70, 70, 70, 70, 70,\n+        70, 70, 70, 97, 70, 70, 70, 70,\n+        70, 70, 70, 70, 70, 70, 70, 101,\n+        97, 70, 101, 103, 106, 70, 70, 70,\n+        70, 70, 70, 70, 70, 70, 70, 70,\n+        70, 70, 97, 70, 70, 70, 70, 70,\n+        70, 70, 70, 70, 70, 70, 101, 97,\n+        70, 101, 136, 136, 136, 136, 136, 136,\n+        136, 136, 138, 136, 136, 136, 136, 136,\n+        136, 136, 136, 136, 136, 136, 136, 136,\n+        136, 136, 136, 136, 136, 136, 136, 136,\n+        136, 142, 143, 143, 143, 143, 40\n@@ -824,1 +833,1 @@\n-#line 184 \"hb-ot-shaper-use-machine.rl\"\n+#line 186 \"hb-ot-shaper-use-machine.rl\"\n@@ -923,1 +932,1 @@\n-#line 924 \"hb-ot-shaper-use-machine.hh\"\n+#line 933 \"hb-ot-shaper-use-machine.hh\"\n@@ -931,1 +940,1 @@\n-#line 284 \"hb-ot-shaper-use-machine.rl\"\n+#line 286 \"hb-ot-shaper-use-machine.rl\"\n@@ -936,1 +945,1 @@\n-#line 937 \"hb-ot-shaper-use-machine.hh\"\n+#line 946 \"hb-ot-shaper-use-machine.hh\"\n@@ -950,1 +959,1 @@\n-#line 951 \"hb-ot-shaper-use-machine.hh\"\n+#line 960 \"hb-ot-shaper-use-machine.hh\"\n@@ -968,1 +977,1 @@\n-        case 6:\n+        case 7:\n@@ -972,2 +981,2 @@\n-        case 14:\n-#line 172 \"hb-ot-shaper-use-machine.rl\"\n+        case 16:\n+#line 173 \"hb-ot-shaper-use-machine.rl\"\n@@ -976,2 +985,2 @@\n-        case 12:\n-#line 173 \"hb-ot-shaper-use-machine.rl\"\n+        case 14:\n+#line 174 \"hb-ot-shaper-use-machine.rl\"\n@@ -980,2 +989,2 @@\n-        case 10:\n-#line 174 \"hb-ot-shaper-use-machine.rl\"\n+        case 12:\n+#line 175 \"hb-ot-shaper-use-machine.rl\"\n@@ -984,2 +993,2 @@\n-        case 18:\n-#line 175 \"hb-ot-shaper-use-machine.rl\"\n+        case 20:\n+#line 176 \"hb-ot-shaper-use-machine.rl\"\n@@ -988,2 +997,2 @@\n-        case 16:\n-#line 176 \"hb-ot-shaper-use-machine.rl\"\n+        case 18:\n+#line 177 \"hb-ot-shaper-use-machine.rl\"\n@@ -992,2 +1001,2 @@\n-        case 8:\n-#line 177 \"hb-ot-shaper-use-machine.rl\"\n+        case 10:\n+#line 178 \"hb-ot-shaper-use-machine.rl\"\n@@ -996,2 +1005,2 @@\n-        case 22:\n-#line 178 \"hb-ot-shaper-use-machine.rl\"\n+        case 25:\n+#line 179 \"hb-ot-shaper-use-machine.rl\"\n@@ -1001,1 +1010,1 @@\n-#line 179 \"hb-ot-shaper-use-machine.rl\"\n+#line 181 \"hb-ot-shaper-use-machine.rl\"\n@@ -1005,1 +1014,1 @@\n-#line 180 \"hb-ot-shaper-use-machine.rl\"\n+#line 182 \"hb-ot-shaper-use-machine.rl\"\n@@ -1008,2 +1017,2 @@\n-        case 13:\n-#line 172 \"hb-ot-shaper-use-machine.rl\"\n+        case 15:\n+#line 173 \"hb-ot-shaper-use-machine.rl\"\n@@ -1012,2 +1021,2 @@\n-        case 11:\n-#line 173 \"hb-ot-shaper-use-machine.rl\"\n+        case 13:\n+#line 174 \"hb-ot-shaper-use-machine.rl\"\n@@ -1016,2 +1025,2 @@\n-        case 9:\n-#line 174 \"hb-ot-shaper-use-machine.rl\"\n+        case 11:\n+#line 175 \"hb-ot-shaper-use-machine.rl\"\n@@ -1020,2 +1029,2 @@\n-        case 17:\n-#line 175 \"hb-ot-shaper-use-machine.rl\"\n+        case 19:\n+#line 176 \"hb-ot-shaper-use-machine.rl\"\n@@ -1024,2 +1033,2 @@\n-        case 15:\n-#line 176 \"hb-ot-shaper-use-machine.rl\"\n+        case 17:\n+#line 177 \"hb-ot-shaper-use-machine.rl\"\n@@ -1028,2 +1037,2 @@\n-        case 7:\n-#line 177 \"hb-ot-shaper-use-machine.rl\"\n+        case 9:\n+#line 178 \"hb-ot-shaper-use-machine.rl\"\n@@ -1032,2 +1041,2 @@\n-        case 21:\n-#line 178 \"hb-ot-shaper-use-machine.rl\"\n+        case 24:\n+#line 179 \"hb-ot-shaper-use-machine.rl\"\n@@ -1036,2 +1045,2 @@\n-        case 19:\n-#line 179 \"hb-ot-shaper-use-machine.rl\"\n+        case 21:\n+#line 181 \"hb-ot-shaper-use-machine.rl\"\n@@ -1040,2 +1049,2 @@\n-        case 20:\n-#line 180 \"hb-ot-shaper-use-machine.rl\"\n+        case 23:\n+#line 182 \"hb-ot-shaper-use-machine.rl\"\n@@ -1045,1 +1054,1 @@\n-#line 177 \"hb-ot-shaper-use-machine.rl\"\n+#line 178 \"hb-ot-shaper-use-machine.rl\"\n@@ -1048,1 +1057,25 @@\n-#line 1049 \"hb-ot-shaper-use-machine.hh\"\n+        case 22:\n+#line 1 \"NONE\"\n+        {       switch( act ) {\n+        case 8:\n+        {{p = ((te))-1;} found_syllable (use_non_cluster); }\n+        break;\n+        case 9:\n+        {{p = ((te))-1;} found_syllable (use_broken_cluster); buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE; }\n+        break;\n+        }\n+        }\n+        break;\n+        case 6:\n+#line 1 \"NONE\"\n+        {te = p+1;}\n+#line 180 \"hb-ot-shaper-use-machine.rl\"\n+        {act = 8;}\n+        break;\n+        case 8:\n+#line 1 \"NONE\"\n+        {te = p+1;}\n+#line 181 \"hb-ot-shaper-use-machine.rl\"\n+        {act = 9;}\n+        break;\n+#line 1082 \"hb-ot-shaper-use-machine.hh\"\n@@ -1057,1 +1090,1 @@\n-#line 1058 \"hb-ot-shaper-use-machine.hh\"\n+#line 1091 \"hb-ot-shaper-use-machine.hh\"\n@@ -1073,1 +1106,1 @@\n-#line 289 \"hb-ot-shaper-use-machine.rl\"\n+#line 291 \"hb-ot-shaper-use-machine.rl\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-use-machine.hh","additions":705,"deletions":672,"binary":false,"changes":1377,"status":"modified"},{"patch":"@@ -9,12 +9,12 @@\n- * # IndicSyllabicCategory-15.1.0.txt\n- * # Date: 2023-01-05\n- * # IndicPositionalCategory-15.1.0.txt\n- * # Date: 2023-01-05\n- * # ArabicShaping-15.1.0.txt\n- * # Date: 2023-01-05\n- * # DerivedCoreProperties-15.1.0.txt\n- * # Date: 2023-08-07, 15:21:24 GMT\n- * # Blocks-15.1.0.txt\n- * # Date: 2023-07-28, 15:47:20 GMT\n- * # Scripts-15.1.0.txt\n- * # Date: 2023-07-28, 16:01:07 GMT\n+ * # IndicSyllabicCategory-16.0.0.txt\n+ * # Date: 2024-04-30, 21:48:21 GMT\n+ * # IndicPositionalCategory-16.0.0.txt\n+ * # Date: 2024-04-30, 21:48:21 GMT\n+ * # ArabicShaping-16.0.0.txt\n+ * # Date: 2024-07-30\n+ * # DerivedCoreProperties-16.0.0.txt\n+ * # Date: 2024-05-31, 18:09:32 GMT\n+ * # Blocks-16.0.0.txt\n+ * # Date: 2024-02-02\n+ * # Scripts-16.0.0.txt\n+ * # Date: 2024-04-30, 21:48:40 GMT\n@@ -30,0 +30,1 @@\n+ * # Updated for Unicode 16.0 by Andrew Glass 2024-09-11\n@@ -41,0 +42,1 @@\n+ * # Updated for Unicode 16.0 by Andrew Glass 2024-09-11\n@@ -68,0 +70,1 @@\n+#define RK      USE(RK) \/* REORDERING_KILLER *\/\n@@ -102,1 +105,1 @@\n-hb_use_u8[3187] =\n+hb_use_u8[3345] =\n@@ -104,1 +107,1 @@\n-     16,   50,   51,   51,   51,   52,   51,   83,  118,  131,   51,   57,   58,  179,  195,   61,\n+     16,   50,   51,   51,   51,   52,   51,   83,  118,  131,   57,   58,   59,  195,  211,   62,\n@@ -111,1 +114,1 @@\n-     14,    0,    1,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    4,    2,    2,\n+     15,    0,    1,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    4,    2,    2,\n@@ -124,4 +127,6 @@\n-      2,    2,    2,    2,    2,   52,   53,    2,   54,    2,    2,   55,    2,    2,   56,   57,\n-     58,   59,   60,   61,   62,   63,   64,   65,    2,   66,   67,    2,   68,   69,   70,   71,\n-      2,   72,    2,   73,   74,   75,   76,    2,    2,   77,   78,   79,   80,    2,   81,   82,\n-      2,   83,   83,   83,   83,   83,   83,   83,   83,   84,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,   52,   53,    2,   54,    2,    2,   55,   56,    2,   57,   58,\n+     59,   60,   61,   62,   63,   64,   65,   66,   67,   68,   69,    2,   70,   71,   72,   73,\n+      2,   74,    2,   75,   76,   77,   78,    2,    2,   79,   80,   81,   82,    2,   83,   84,\n+      2,   85,   85,   85,   85,   85,   85,   85,   85,   86,   85,   85,   85,   85,   85,   85,\n+     85,   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,\n+     85,   85,   85,   85,   85,   85,   85,   85,   87,    2,    2,    2,    2,    2,    2,    2,\n@@ -129,0 +134,4 @@\n+      2,    2,    2,   88,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,   89,   90,    2,    2,    2,   91,    2,    2,    2,   92,\n+     93,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,    2,   94,   94,   94,   95,    2,    2,    2,    2,    2,\n@@ -130,3 +139,2 @@\n-      2,    2,    2,    2,    2,    2,   85,   86,    2,    2,    2,    2,    2,    2,    2,   87,\n-     88,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,    2,   89,   89,   89,   90,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,    2,    2,    2,   96,   97,    2,    2,    2,    2,    2,\n+      2,    2,    2,   98,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n@@ -134,8 +142,5 @@\n-      2,    2,    2,    2,    2,    2,    2,    2,    2,   91,   92,    2,    2,    2,    2,    2,\n-      2,    2,    2,   93,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n-      2,    2,    2,   94,    2,    2,   95,    2,    2,    2,   96,    2,    2,    2,    2,    2,\n-      2,    2,    2,   97,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n-      2,   98,   98,   99,  100,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,\n-     98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,\n-     98,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,\n+      2,    2,    2,   99,    2,    2,  100,    2,    2,    2,  101,    2,  102,    2,    2,    2,\n+      2,    2,    2,  103,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,\n+      2,  104,  104,  105,  106,  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,\n+    104,  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,  104,\n+    104,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,\n@@ -170,1 +175,1 @@\n-      2,    2,    2,    2,    2,    2,   52,   53,   23,   23,   19,   31,   48,   33,   48,   34,\n+      2,    2,    2,    2,    2,    2,   52,   53,   23,   19,   20,   31,   48,   33,   48,   34,\n@@ -198,3 +203,3 @@\n-      0,    0,    0,    0,    0,    0,  109,  110,  111,  111,  111,    0,    0,    0,    0,    0,\n-      0,  106,   74,    2,    2,    2,    2,    2,    2,   60,   61,   59,   25,   22,  112,   61,\n-      2,    2,    2,    2,  107,   22,   23,   45,   45,  102,   14,    0,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    0,  109,  110,  110,  110,  110,    0,    0,    0,    0,    0,\n+      0,  106,   74,    2,    2,    2,    2,    2,    2,   60,   61,   59,   25,   22,  111,   61,\n+      2,    2,    2,    2,  107,   22,   23,   45,   45,  102,  112,    0,    0,    0,    0,    0,\n@@ -229,0 +234,1 @@\n+      0,    2,    2,    2,    0,   27,   22,   22,   30,    2,    2,    2,    0,    0,    0,    0,\n@@ -247,33 +253,39 @@\n-      0,    2,    2,   65,   25,   20,   20,   20,   22,   23,  126,   15,   17,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    0,    0,  163,  164,    0,    0,    0,    0,    0,    0,\n-      0,   18,   19,   20,   20,   66,   99,   25,  160,   11,  165,    9,    0,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    2,    2,   65,   25,   20,   20,    0,   48,   48,   11,\n-    166,   37,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    2,   20,\n-      0,   23,   19,   20,   20,   21,   16,   82,  166,   38,    0,    0,    0,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,   10,  167,   25,   20,   22,   22,  165,    9,    0,    0,\n-      0,    2,    2,    2,    2,    2,    9,   43,  136,   23,   22,   20,   76,   21,   22,    0,\n-      0,    2,    2,    2,    9,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,   18,\n-     19,   20,   21,   22,  105,  166,   37,    0,    0,    2,    2,    2,    9,   30,    0,    2,\n-      2,    2,    2,   30,    9,    2,    2,    2,    2,   23,   23,   18,   32,   33,   12,  168,\n-    169,  170,  171,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    0,    2,    2,\n-      2,   65,   25,   20,   20,    0,   22,   23,   29,  108,    0,   33,    0,    0,    0,    0,\n-      0,   52,   20,   22,   22,   22,  140,    2,    2,    2,  172,  173,   11,   15,  174,   72,\n-    175,    0,    0,    1,  147,    0,    0,    0,    0,   52,   20,   22,   16,   19,   20,    2,\n-      2,    2,    2,  158,  158,  158,  176,  176,  176,  176,  176,  176,   15,  177,    0,   30,\n-      0,   22,   20,   20,   31,   22,   22,   11,  166,    0,   61,   61,   61,   61,   61,   61,\n-     61,   66,   21,   82,   46,    0,    0,    0,    0,    2,    2,    2,    9,    2,   30,    2,\n-      2,   52,   22,   22,   31,    0,   38,   22,   27,   11,  159,  178,  174,    0,    0,    0,\n-      0,    2,    2,    2,   30,    9,    2,    2,    2,    2,    2,    2,    2,    2,   23,   23,\n-     47,   22,   35,   82,   68,    0,    0,    0,    0,    2,  179,   66,   47,    0,    0,    0,\n-      0,   11,  180,    2,    2,    2,    2,    2,    2,    2,    2,   23,   22,   20,   31,    0,\n-     48,   16,  143,    0,    0,    0,    0,    0,    0,  181,  181,  181,  181,  181,  181,  181,\n-    181,  182,  182,  182,  183,  184,  182,  181,  181,  185,  181,  181,  186,  187,  187,  187,\n-    187,  187,  187,  187,    0,    0,    0,    0,    0,   11,   11,   11,   46,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    9,    0,   58,  188,   20,   20,   20,   20,   20,   20,\n-     20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,    0,    0,    0,\n-     40,  116,   26,    0,    0,    0,    0,    0,    0,    0,    0,    9,    0,    0,    0,    0,\n-      0,    2,    2,    2,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,   58,\n-     37,    0,    6,  120,  120,  120,  121,    0,    0,   11,   11,   11,   49,    2,    2,    2,\n-      0,    2,    2,    2,    2,    2,    0,    0,    2,    2,    2,    2,    2,    2,    2,    2,\n-     46,    2,    2,    2,    2,    2,    2,   11,   11,    2,    2,    2,    2,    2,    2,   22,\n-     22,    2,    2,   44,   44,   44,   92,    0,    0,    O,    O,    O,   GB,    B,    B,    O,\n+      0,    2,    2,    2,    2,    2,   30,    0,    9,    2,    2,    2,   30,   45,   59,   20,\n+     20,   31,   33,   32,   32,   25,  163,   29,  164,  165,   37,    0,    0,    0,    0,    0,\n+      0,   12,   26,    0,    0,    0,    0,    0,    0,    2,    2,   65,   25,   20,   20,   20,\n+     22,   23,  126,   15,   17,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,    0,\n+    166,  167,    0,    0,    0,    0,    0,    0,    0,   18,   19,   20,   20,   66,   99,   25,\n+    160,   11,  168,    9,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    2,\n+     65,   25,   20,   20,    0,   48,   48,   11,  169,   37,    0,    0,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    2,    2,   20,    0,   23,   19,   20,   20,   21,   16,   82,\n+    169,   38,    0,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,   10,  170,\n+     25,   20,   22,   22,  168,    9,    0,    0,    0,    2,    2,    2,    2,    2,    9,   43,\n+    136,   23,   22,   20,   76,   21,   22,    0,    0,    2,    2,    2,    9,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    2,   18,   19,   20,   21,   22,  105,  169,   37,    0,\n+      0,    2,    2,    2,    9,   30,    0,    2,    2,    2,    2,   30,    9,    2,    2,    2,\n+      2,   23,   23,   18,   32,   33,   12,  171,  165,  172,  173,    0,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    0,    2,    2,    2,   65,   25,   20,   20,    0,   22,   23,\n+     29,  108,    0,   33,    0,    0,    0,    0,    0,   52,   20,   22,   22,   22,  140,    2,\n+      2,    2,  174,  175,   11,   15,  176,   61,  177,    0,    0,    1,  147,    0,    0,    0,\n+      0,   52,   20,   22,   16,   19,   20,    2,    2,    2,    2,  158,  158,  158,  178,  178,\n+    178,  178,  178,  178,   15,  179,    0,   30,    0,   22,   20,   20,   31,   22,   22,   11,\n+    169,    0,   61,   61,   61,   61,   61,   61,   61,   66,   21,   82,   46,    0,    0,    0,\n+      0,    2,    2,    2,    9,    2,   30,    2,    2,   52,   22,   22,   31,    0,   38,   22,\n+     27,   11,  159,  180,  181,    0,    0,    0,    0,    2,    2,    2,   30,    9,    2,    2,\n+      2,    2,    2,    2,    2,    2,   23,   23,   47,   22,   35,   82,   68,    0,    0,    0,\n+      0,    2,  182,   66,   47,    0,    0,    0,    0,   11,  183,    2,    2,    2,    2,    2,\n+      2,    2,    2,   23,   22,   20,   31,    0,   48,   16,  143,    0,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,  156,    0,    0,  184,  184,  184,  184,  184,  184,  184,\n+    184,  185,  185,  185,  186,  187,  185,  184,  184,  188,  184,  184,  189,  190,  190,  190,\n+    190,  190,  190,  190,    0,    0,    0,    0,    0,  184,  184,  184,  184,  184,  191,    0,\n+      0,    2,    2,    2,    2,    2,    2,    2,   22,   22,   22,   22,   22,   22,  192,  193,\n+    194,   11,   11,   11,   46,    0,    0,    0,    0,   29,   74,    2,    2,    2,    2,    2,\n+      2,    2,    2,    2,    2,    2,   65,   47,    0,    2,    2,    2,    2,    2,    9,    0,\n+     58,  195,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,\n+     20,   20,   20,   20,   20,    0,    0,    0,   40,  116,   26,    0,    0,    0,    0,    0,\n+      0,    0,    0,    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n+     30,    2,    2,    2,    2,    2,    0,   58,   37,    0,    6,  120,  120,  120,  121,    0,\n+      0,   11,   11,   11,   49,    2,    2,    2,    0,    2,    2,    2,    2,    2,    0,    0,\n+      2,    2,    2,    2,    2,    2,    2,    2,   46,    2,    2,    2,    2,    2,    2,   11,\n+     11,    2,    2,    2,    2,    2,    2,   22,   22,    2,    2,    2,    2,    2,    2,    2,\n+     20,    2,    2,   44,   44,   44,   92,    0,    0,    O,    O,    O,   GB,    B,    B,    O,\n@@ -293,1 +305,1 @@\n-   VPst,    H,    B,    O,SMAbv,SMBlw,SMAbv,SMAbv,SMAbv, VPst,   IS, VBlw, FAbv,VMPre,VMPre,FMAbv,\n+   VPst,    H,    B,    O,SMAbv,SMAbv,SMAbv, VPst,   IS,   RK,   RK, VBlw, FAbv,VMPre,VMPre,FMAbv,\n@@ -299,5 +311,6 @@\n-     IS,CMAbv,    O, VPst,    B,    R,    R,CMBlw, VAbv, VPre,VMAbv,VMAbv,    H, VAbv,CMBlw,FMAbv,\n-      B,   CS,   CS,    H,CMBlw,VMPst,    H,VMPst, VAbv,VMAbv, VPst,   IS,    R, MPst,    R, MPst,\n-  CMBlw,    B,FMBlw, VBlw,VMAbv,    R, MBlw, MBlw,   GB, FBlw, FBlw,CMAbv,   IS, VBlw,   IS,   GB,\n-   VAbv,    R,VMPst,    G,    G,    J,    J,    J,   SB,   SE,    J,   HR,    G,    G,   HM,   HM,\n-     HM,    O, VBlw,\n+     IS,CMAbv,    O, VPst,    B,    R,    R,CMBlw, VAbv, VPre,VMAbv,VMAbv,    H, VAbv,CMBlw,VMPst,\n+      O,VMAbv,CMBlw,   IS,    R,FMAbv,    B,   CS,   CS,    H,CMBlw,VMPst,    H,VMPst, VAbv,VMAbv,\n+   VPst, MPst,    R, MPst,CMBlw,    B,FMBlw, VBlw,VMAbv,   CS,  SUB,  SUB,   GB, FBlw, FBlw,CMAbv,\n+     IS, VBlw,   IS,    R, MBlw,   GB, VAbv,    R,VMPst,    G,    G,    J,    J,    J,   SB,   SE,\n+      J,   HR,    G,    G,   HM,   HM,   HM,    G,    O, MPre, MPre, MPst,VMAbv, MBlw, VBlw,    O,\n+   VBlw,\n@@ -306,1 +319,1 @@\n-hb_use_u16[808] =\n+hb_use_u16[856] =\n@@ -335,22 +348,25 @@\n-   10,173,174,  0,  0,  0,  0,  0, 10, 10,175,  2,  0,  0,  0,  0,\n-   10, 10,176,173,  0,  0,  0,  0,  0,  0,  0, 10,177,178,  0, 10,\n-  179,  0,  0,180,181,  0,  0,  0,182, 10, 10,183,184,185,186,187,\n-  188, 10, 10,189,190,  0,  0,  0,191, 10,192,193,194, 10, 10,195,\n-  188, 10, 10,196,197,106,198,103, 10, 34,199,200,201,  0,  0,  0,\n-  202,203, 95, 10, 10,204,205,  2,206, 21, 22,207,208,209,210,211,\n-   10, 10, 10,212,213,214,215,  0,198, 10, 10,216,217,  2,  0,  0,\n-   10, 10,218,219,220,221,  0,  0, 10, 10, 10,222,223,  2,  0,  0,\n-   10, 10,224,225,  2,  0,  0,  0, 10,226,227,104,228,  0,  0,  0,\n-   10, 10,229,230,  0,  0,  0,  0,231,232, 10,233,234,  2,  0,  0,\n-    0,  0,235, 10, 10,236,237,  0,238, 10, 10,239,240,241, 10, 10,\n-  242,243,  0,  0,  0,  0,  0,  0, 22, 10,218,244,  8, 10, 71, 19,\n-   10,245, 74,246,  0,  0,  0,  0,247, 10, 10,248,249,  2,250, 10,\n-  251,252,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,253,\n-  254, 49, 10,255,256,  2,  0,  0,257,257,257,257,257,257,257,257,\n-  257,257,257,258,259,260,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,\n-   10, 10, 10,261,  0,  0,  0,  0, 10, 10, 10, 10,262,263,264,264,\n-  265,266,  0,  0,  0,  0,267,  0, 10, 10, 10, 10, 10, 10, 10, 10,\n-   10, 10, 10, 10, 10,268,  0,  0, 10, 10, 10, 10, 10, 10,106, 71,\n-   95,269,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,270,\n-   10, 10, 71,271,272,  0,  0,  0,  0, 10,273,  0, 10, 10,274,  2,\n-    0,  0,  0,  0,  0, 10,275,  2, 10, 10, 10, 10,276,  2,  0,  0,\n+   10,173,174,  0,  0,  0,  0,  0, 10, 10,175,  2,  9, 10,176, 10,\n+  177,  0,  0,  0,  0,  0,  0,  0, 10, 10,178,173,  0,  0,  0,  0,\n+    0,  0,  0, 10,179,180,  0, 10,181,  0,  0,182,183,  0,  0,  0,\n+  184, 10, 10,185,186,187,188,189,190, 10, 10,191,192,  0,  0,  0,\n+  193, 10,194,195,196, 10, 10,197,190, 10, 10,198,199,106,200,103,\n+   10, 34,201,202,203,  0,  0,  0,204,205, 95, 10, 10,206,207,  2,\n+  208, 21, 22,209,210,211,212,213,214, 10, 10,215,216,217,218,  0,\n+   10, 10, 10,219,220,221,222,  0,200, 10, 10,223,224,  2,  0,  0,\n+   10, 10,225,226,227,228,  0,  0, 10, 10, 10,229,230,  2,  0,  0,\n+   10, 10,231,232,  2, 10,141,  0, 10,233,234,104,235,  0,  0,  0,\n+   10, 10,236,237,  0,  0,  0,  0,238,239, 10,240,241,  2,  0,  0,\n+    0,  0,242, 10, 10,243,244,  0,245, 10, 10,246,247,248, 10, 10,\n+  249,250,  0,  0,  0,  0,  0,  0, 22, 10,225,251,  8, 10, 71, 19,\n+   10,252, 74,253,  0,  0,  0,  0,254, 10, 10,255,256,  2,257, 10,\n+  258,259,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,260,\n+  261, 49, 10,262,263,264,  0,  0,265,265,265,265,265,265,265,265,\n+  265,265,265,266,267,268,265,265,265,265,265,265,265,265,265,269,\n+   10,270,271,  2,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,\n+   10, 10, 10,272,  0,  0,  0,  0,  0,  0,  0,  0,273, 10,274,  2,\n+   10, 10, 10, 10,275,276,277,277,278,279,  0,  0,  0,  0,280,  0,\n+   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,177,  0,281,\n+   10, 10, 10, 10, 10, 10,106, 71, 95,282,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,283, 10, 10, 71,284,285,  0,  0,  0,\n+    0, 10,286,  0, 10, 10,287,  2,  0,  0,  0,  0,  0, 10,288,  2,\n+    0,  0,  0,  0,  0, 10,289,106, 10, 10, 10, 10,290,  2,  0,  0,\n@@ -369,1 +385,1 @@\n-  return u<921600u?hb_use_u8[2809+(((hb_use_u8[593+(((hb_use_u16[((hb_use_u8[113+(((hb_use_b4(hb_use_u8,u>>1>>3>>3>>5))<<5)+((u>>1>>3>>3)&31u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:O;\n+  return u<921600u?hb_use_u8[2953+(((hb_use_u8[625+(((hb_use_u16[((hb_use_u8[113+(((hb_use_b4(hb_use_u8,u>>1>>3>>3>>5))<<5)+((u>>1>>3>>3)&31u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:O;\n@@ -376,1 +392,1 @@\n-hb_use_u8[3483] =\n+hb_use_u8[3657] =\n@@ -378,1 +394,1 @@\n-     16,   50,   51,   51,   51,   52,   51,   83,  118,  131,   51,   57,   58,  179,  195,   61,\n+     16,   50,   51,   51,   51,   52,   51,   83,  118,  131,   57,   58,   59,  195,  211,   62,\n@@ -385,1 +401,1 @@\n-     14,    0,    1,    1,    2,    1,    1,    3,    4,    5,    6,    7,    8,    9,   10,    1,\n+     15,    0,    1,    1,    2,    1,    1,    3,    4,    5,    6,    7,    8,    9,   10,    1,\n@@ -393,8 +409,9 @@\n-     51,   52,   52,   52,   52,   53,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n-      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   54,   55,    1,    1,    1,\n-     56,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   57,   58,    1,    1,\n-      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   59,    1,    1,\n-      1,    1,   60,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n-      1,    1,   61,   62,    1,   63,    1,    1,    1,    1,   64,    1,    1,    1,    1,    1,\n-      1,   65,   66,   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,\n-     65,    0,    1,    2,    2,    0,    3,    4,    0,    0,    0,    0,    0,    0,    0,    0,\n+     51,   52,   52,   52,   52,   53,   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,\n+     52,   52,   52,   52,   54,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n+      1,    1,   55,    1,    1,    1,    1,    1,    1,    1,    1,   56,   57,    1,   58,    1,\n+     59,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   60,   61,    1,    1,\n+      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   62,    1,    1,\n+      1,    1,   63,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n+      1,    1,   64,   65,    1,   66,   67,    1,    1,    1,   68,    1,    1,    1,    1,    1,\n+      1,   69,   70,   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,\n+     69,    0,    1,    2,    2,    0,    3,    4,    0,    0,    0,    0,    0,    0,    0,    0,\n@@ -417,17 +434,19 @@\n-      0,   56,  136,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   56,  137,    0,\n-      0,    0,  101,  138,  101,  139,  140,  141,    0,  142,  143,  144,  145,  146,  147,  148,\n-      0,  149,  150,  151,  152,  146,  153,  154,  155,  156,  157,  158,    0,  159,  160,  161,\n-    162,  163,  164,  165,  166,    0,    0,    0,    0,   56,  167,  168,  169,  170,  171,  172,\n-      0,    0,    0,    0,    0,   56,  173,  174,    0,   56,  175,  176,    0,   56,  177,   67,\n-      0,  178,  179,  180,    0,    0,    0,    0,    0,   56,  181,    0,    0,    0,    0,    0,\n-      0,  182,  183,  184,    0,    0,  185,  186,  187,  188,  189,  190,   56,  191,    0,    0,\n-      0,  192,  193,  194,  195,  196,  197,    0,    0,  198,  199,  200,  201,  202,   67,    0,\n-      0,    0,    0,    0,    0,    0,    0,    0,  203,  204,  205,  206,    0,    0,    0,    0,\n-      0,  207,  207,  207,  207,  207,  207,  207,  207,  207,  208,  209,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,    0,    0,   67,    0,   56,  210,    0,    0,    0,    0,    0,\n-      0,   56,   56,  211,  212,  213,    0,    0,  214,   56,   56,   56,   56,   56,   56,   56,\n-     56,   56,   56,   56,   56,   56,   56,  215,    0,   56,   56,   56,  216,  217,    0,    0,\n-      0,    0,    0,    0,  218,    0,    0,    0,    0,   56,  219,  220,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,  101,  221,   56,  222,    0,    0,    0,    0,    0,    0,  101,\n-    223,   56,   56,  224,    0,    0,    0,    0,    0,  225,  225,  225,  225,  225,  225,  225,\n-    225,  226,  226,  226,  226,  226,  226,  226,  227,    0,    0,    0,    0,    0,    0,    0,\n+      0,   56,  136,    7,  137,  138,    0,    0,    0,    0,    0,    0,    0,   56,  139,    0,\n+      0,    0,  101,  140,  101,  141,  142,  143,    0,  144,  145,  146,  147,  148,  149,  150,\n+      0,  151,  152,  153,  154,  148,  155,  156,  157,  158,  159,  160,    0,  161,  162,  163,\n+    164,  165,  166,  167,  168,  169,  170,  171,  172,   56,  173,  174,  175,  176,  177,  178,\n+      0,    0,    0,    0,    0,   56,  179,  180,    0,   56,  181,  182,    0,   56,  183,  184,\n+    185,  186,  187,  188,    0,    0,    0,    0,    0,   56,  189,    0,    0,    0,    0,    0,\n+      0,  190,  191,  192,    0,    0,  193,  194,  195,  196,  197,  198,   56,  199,    0,    0,\n+      0,  200,  201,  202,  203,  204,  205,    0,    0,  206,  207,  208,  209,  210,   67,    0,\n+      0,    0,    0,    0,    0,    0,    0,    0,  211,  212,  213,  214,    0,    0,    0,    0,\n+      0,  215,  215,  215,  215,  215,  215,  215,  215,  215,  216,  217,  215,  215,  215,  215,\n+    215,  215,  215,  215,  215,  215,  215,  215,  218,  219,  220,    0,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    0,    0,   67,    0,   56,  221,    0,    0,    0,    0,    0,\n+      0,    0,    0,  222,  223,    0,    0,    0,    0,   56,   56,  224,  225,  226,    0,    0,\n+    227,   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,  228,\n+    229,   56,   56,   56,  230,  231,    0,    0,    0,    0,    0,    0,  232,    0,    0,    0,\n+      0,   56,  233,  234,    0,    0,    0,    0,    0,    0,    0,    0,    0,  101,  235,   56,\n+    236,    0,    0,    0,    0,    0,    0,  101,  237,    0,    0,    0,    0,    0,    0,  101,\n+    238,   56,   56,  239,    0,    0,    0,    0,    0,  240,  240,  240,  240,  240,  240,  240,\n+    240,  241,  241,  241,  241,  241,  241,  241,  242,    0,    0,    0,    0,    0,    0,    0,\n@@ -463,1 +482,1 @@\n-     23,   23,   19,   31,   48,   33,   48,   34,   54,    0,    0,    0,   35,    0,    0,    0,\n+     23,   19,   20,   31,   48,   33,   48,   34,   54,    0,    0,    0,   35,    0,    0,    0,\n@@ -491,3 +510,3 @@\n-    111,  111,  111,    0,    0,    0,    0,    0,    0,  106,   74,    2,    2,    2,    2,    2,\n-      2,   60,   61,   59,   25,   22,  112,   61,    2,    2,    2,    2,  107,   22,   23,   45,\n-     45,  102,   14,    0,    0,    0,    0,    0,    0,    2,    2,   61,   18,   48,   23,  113,\n+    110,  110,  110,    0,    0,    0,    0,    0,    0,  106,   74,    2,    2,    2,    2,    2,\n+      2,   60,   61,   59,   25,   22,  111,   61,    2,    2,    2,    2,  107,   22,   23,   45,\n+     45,  102,  112,    0,    0,    0,    0,    0,    0,    2,    2,   61,   18,   48,   23,  113,\n@@ -521,1 +540,2 @@\n-      9,    2,    2,   11,   41,    0,    0,    0,    0,    2,    2,    2,    2,    2,   27,   38,\n+      9,    2,    2,   11,   41,    0,    0,    0,    0,    2,    2,    2,    0,   27,   22,   22,\n+     30,    2,    2,    2,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,   27,   38,\n@@ -539,33 +559,39 @@\n-      0,   11,   11,   46,    0,    0,    0,    0,    0,    2,    2,   65,   25,   20,   20,   20,\n-     22,   23,  126,   15,   17,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,    0,\n-    163,  164,    0,    0,    0,    0,    0,    0,    0,   18,   19,   20,   20,   66,   99,   25,\n-    160,   11,  165,    9,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,    2,\n-     65,   25,   20,   20,    0,   48,   48,   11,  166,   37,    0,    0,    0,    0,    0,    0,\n-      0,    0,    0,    0,    0,    2,    2,   20,    0,   23,   19,   20,   20,   21,   16,   82,\n-    166,   38,    0,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,   10,  167,\n-     25,   20,   22,   22,  165,    9,    0,    0,    0,    2,    2,    2,    2,    2,    9,   43,\n-    136,   23,   22,   20,   76,   21,   22,    0,    0,    2,    2,    2,    9,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    2,   18,   19,   20,   21,   22,  105,  166,   37,    0,\n-      0,    2,    2,    2,    9,   30,    0,    2,    2,    2,    2,   30,    9,    2,    2,    2,\n-      2,   23,   23,   18,   32,   33,   12,  168,  169,  170,  171,    0,    0,    0,    0,    0,\n-      0,    2,    2,    2,    2,    0,    2,    2,    2,   65,   25,   20,   20,    0,   22,   23,\n-     29,  108,    0,   33,    0,    0,    0,    0,    0,   52,   20,   22,   22,   22,  140,    2,\n-      2,    2,  172,  173,   11,   15,  174,   72,  175,    0,    0,    1,  147,    0,    0,    0,\n-      0,   52,   20,   22,   16,   19,   20,    2,    2,    2,    2,  158,  158,  158,  176,  176,\n-    176,  176,  176,  176,   15,  177,    0,   30,    0,   22,   20,   20,   31,   22,   22,   11,\n-    166,    0,   61,   61,   61,   61,   61,   61,   61,   66,   21,   82,   46,    0,    0,    0,\n-      0,    2,    2,    2,    9,    2,   30,    2,    2,   52,   22,   22,   31,    0,   38,   22,\n-     27,   11,  159,  178,  174,    0,    0,    0,    0,    2,    2,    2,   30,    9,    2,    2,\n-      2,    2,    2,    2,    2,    2,   23,   23,   47,   22,   35,   82,   68,    0,    0,    0,\n-      0,    2,  179,   66,   47,    0,    0,    0,    0,   11,  180,    2,    2,    2,    2,    2,\n-      2,    2,    2,   23,   22,   20,   31,    0,   48,   16,  143,    0,    0,    0,    0,    0,\n-      0,  181,  181,  181,  181,  181,  181,  181,  181,  182,  182,  182,  183,  184,  182,  181,\n-    181,  185,  181,  181,  186,  187,  187,  187,  187,  187,  187,  187,    0,    0,    0,    0,\n-      0,   11,   11,   11,   46,    0,    0,    0,    0,    2,    2,    2,    2,    2,    9,    0,\n-     58,  188,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,\n-     20,   20,   20,   20,   20,    0,    0,    0,   40,  116,   26,    0,    0,    0,    0,    0,\n-      0,    0,    0,    9,    0,    0,    0,    0,    0,    2,    2,    2,    0,    0,    0,    0,\n-      0,    2,    2,    2,    2,    2,    0,   58,   37,    0,    6,  120,  120,  120,  121,    0,\n-      0,   11,   11,   11,   49,    2,    2,    2,    0,    2,    2,    2,    2,    2,    0,    0,\n-      2,    2,    2,    2,    2,    2,    2,    2,   46,    2,    2,    2,    2,    2,    2,   11,\n-     11,    2,    2,    2,    2,    2,    2,   22,   22,    2,    2,   44,   44,   44,   92,    0,\n+      0,   11,   11,   46,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,   30,    0,\n+      9,    2,    2,    2,   30,   45,   59,   20,   20,   31,   33,   32,   32,   25,  163,   29,\n+    164,  165,   37,    0,    0,    0,    0,    0,    0,   12,   26,    0,    0,    0,    0,    0,\n+      0,    2,    2,   65,   25,   20,   20,   20,   22,   23,  126,   15,   17,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    0,    0,  166,  167,    0,    0,    0,    0,    0,    0,\n+      0,   18,   19,   20,   20,   66,   99,   25,  160,   11,  168,    9,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,    2,    2,   65,   25,   20,   20,    0,   48,   48,   11,\n+    169,   37,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    2,   20,\n+      0,   23,   19,   20,   20,   21,   16,   82,  169,   38,    0,    0,    0,    0,    0,    0,\n+      0,    2,    2,    2,    2,    2,   10,  170,   25,   20,   22,   22,  168,    9,    0,    0,\n+      0,    2,    2,    2,    2,    2,    9,   43,  136,   23,   22,   20,   76,   21,   22,    0,\n+      0,    2,    2,    2,    9,    0,    0,    0,    0,    2,    2,    2,    2,    2,    2,   18,\n+     19,   20,   21,   22,  105,  169,   37,    0,    0,    2,    2,    2,    9,   30,    0,    2,\n+      2,    2,    2,   30,    9,    2,    2,    2,    2,   23,   23,   18,   32,   33,   12,  171,\n+    165,  172,  173,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    0,    2,    2,\n+      2,   65,   25,   20,   20,    0,   22,   23,   29,  108,    0,   33,    0,    0,    0,    0,\n+      0,   52,   20,   22,   22,   22,  140,    2,    2,    2,  174,  175,   11,   15,  176,   61,\n+    177,    0,    0,    1,  147,    0,    0,    0,    0,   52,   20,   22,   16,   19,   20,    2,\n+      2,    2,    2,  158,  158,  158,  178,  178,  178,  178,  178,  178,   15,  179,    0,   30,\n+      0,   22,   20,   20,   31,   22,   22,   11,  169,    0,   61,   61,   61,   61,   61,   61,\n+     61,   66,   21,   82,   46,    0,    0,    0,    0,    2,    2,    2,    9,    2,   30,    2,\n+      2,   52,   22,   22,   31,    0,   38,   22,   27,   11,  159,  180,  181,    0,    0,    0,\n+      0,    2,    2,    2,   30,    9,    2,    2,    2,    2,    2,    2,    2,    2,   23,   23,\n+     47,   22,   35,   82,   68,    0,    0,    0,    0,    2,  182,   66,   47,    0,    0,    0,\n+      0,   11,  183,    2,    2,    2,    2,    2,    2,    2,    2,   23,   22,   20,   31,    0,\n+     48,   16,  143,    0,    0,    0,    0,    0,    0,    2,    2,    2,    2,    2,  156,    0,\n+      0,  184,  184,  184,  184,  184,  184,  184,  184,  185,  185,  185,  186,  187,  185,  184,\n+    184,  188,  184,  184,  189,  190,  190,  190,  190,  190,  190,  190,    0,    0,    0,    0,\n+      0,  184,  184,  184,  184,  184,  191,    0,    0,    2,    2,    2,    2,    2,    2,    2,\n+     22,   22,   22,   22,   22,   22,  192,  193,  194,   11,   11,   11,   46,    0,    0,    0,\n+      0,   29,   74,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,   65,   47,\n+      0,    2,    2,    2,    2,    2,    9,    0,   58,  195,   20,   20,   20,   20,   20,   20,\n+     20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,    0,    0,    0,\n+     40,  116,   26,    0,    0,    0,    0,    0,    0,    0,    0,    9,    0,    0,    0,    0,\n+      0,    0,    0,    0,    0,    0,    0,    0,   30,    2,    2,    2,    2,    2,    0,   58,\n+     37,    0,    6,  120,  120,  120,  121,    0,    0,   11,   11,   11,   49,    2,    2,    2,\n+      0,    2,    2,    2,    2,    2,    0,    0,    2,    2,    2,    2,    2,    2,    2,    2,\n+     46,    2,    2,    2,    2,    2,    2,   11,   11,    2,    2,    2,    2,    2,    2,   22,\n+     22,    2,    2,    2,    2,    2,    2,    2,   20,    2,    2,   44,   44,   44,   92,    0,\n@@ -585,2 +611,2 @@\n-    SUB,   Sk, VPst, VAbv,VMAbv,VMAbv, FAbv,CMAbv, VPst,    H,    B,    O,SMAbv,SMBlw,SMAbv,SMAbv,\n-  SMAbv, VPst,   IS, VBlw, FAbv,VMPre,VMPre,FMAbv,CMBlw,VMBlw,VMBlw,VMAbv,   CS,    O,FMAbv, ZWNJ,\n+    SUB,   Sk, VPst, VAbv,VMAbv,VMAbv, FAbv,CMAbv, VPst,    H,    B,    O,SMAbv,SMAbv,SMAbv, VPst,\n+     IS,   RK,   RK, VBlw, FAbv,VMPre,VMPre,FMAbv,CMBlw,VMBlw,VMBlw,VMAbv,   CS,    O,FMAbv, ZWNJ,\n@@ -592,4 +618,5 @@\n-   VAbv, VPre,VMAbv,VMAbv,    H, VAbv,CMBlw,FMAbv,    B,   CS,   CS,    H,CMBlw,VMPst,    H,VMPst,\n-   VAbv,VMAbv, VPst,   IS,    R, MPst,    R, MPst,CMBlw,    B,FMBlw, VBlw,VMAbv,    R, MBlw, MBlw,\n-     GB, FBlw, FBlw,CMAbv,   IS, VBlw,   IS,   GB, VAbv,    R,VMPst,    G,    G,    J,    J,    J,\n-     SB,   SE,    J,   HR,    G,    G,   HM,   HM,   HM,    O, VBlw,\n+   VAbv, VPre,VMAbv,VMAbv,    H, VAbv,CMBlw,VMPst,    O,VMAbv,CMBlw,   IS,    R,FMAbv,    B,   CS,\n+     CS,    H,CMBlw,VMPst,    H,VMPst, VAbv,VMAbv, VPst, MPst,    R, MPst,CMBlw,    B,FMBlw, VBlw,\n+  VMAbv,   CS,  SUB,  SUB,   GB, FBlw, FBlw,CMAbv,   IS, VBlw,   IS,    R, MBlw,   GB, VAbv,    R,\n+  VMPst,    G,    G,    J,    J,    J,   SB,   SE,    J,   HR,    G,    G,   HM,   HM,   HM,    G,\n+      O, MPre, MPre, MPst,VMAbv, MBlw, VBlw,    O, VBlw,\n@@ -598,1 +625,1 @@\n-hb_use_u16[456] =\n+hb_use_u16[486] =\n@@ -617,12 +644,14 @@\n-  175,  2,176,173,177,178,179,  0,  0,180,181,  0,182, 10, 10,183,\n-  184,185,186,187,188, 10, 10,189,190,  0,191, 10,192,193,194, 10,\n-   10,195, 10,196,197,106,198,103, 10, 34,199,200,201,  0,202,203,\n-   95, 10, 10,204,205,  2,206, 21, 22,207,208,209,210,211, 10,212,\n-  213,214,215,  0,198, 10, 10,216,217,  2,218,219,220,221, 10,222,\n-  223,  2,224,225, 10,226,227,104,228,  0,229,230,231,232, 10,233,\n-  234,  2,235, 10, 10,236,237,  0,238, 10, 10,239,240,241,242,243,\n-   22, 10,218,244,  8, 10, 71, 19, 10,245, 74,246,247, 10, 10,248,\n-  249,  2,250, 10,251,252, 10,253,254, 49, 10,255,256,  2,257,257,\n-  257,258,259,260, 10,261,262,263,264,264,265,266,267,  0, 10,268,\n-  106, 71, 95,269,  0,270, 71,271,272,  0,273,  0,274,  2,275,  2,\n-  276,  2,130,130,163,163,163,130,\n+  175,  2,176, 10,177,  0,178,173,179,180,181,  0,  0,182,183,  0,\n+  184, 10, 10,185,186,187,188,189,190, 10, 10,191,192,  0,193, 10,\n+  194,195,196, 10, 10,197, 10,198,199,106,200,103, 10, 34,201,202,\n+  203,  0,204,205, 95, 10, 10,206,207,  2,208, 21, 22,209,210,211,\n+  212,213,214, 10, 10,215,216,217,218,  0, 10,219,220,221,222,  0,\n+  200, 10, 10,223,224,  2,225,226,227,228, 10,229,230,  2,231,232,\n+    2, 10,141,  0, 10,233,234,104,235,  0,236,237,238,239, 10,240,\n+  241,  2,242, 10, 10,243,244,  0,245, 10, 10,246,247,248,249,250,\n+   22, 10,225,251,  8, 10, 71, 19, 10,252, 74,253,254, 10, 10,255,\n+  256,  2,257, 10,258,259, 10,260,261, 49, 10,262,263,264,265,265,\n+  265,266,267,268,265,269, 10,270,271,  2, 10,272,273, 10,274,  2,\n+  275,276,277,277,278,279,280,  0, 10,177,  0,281,106, 71, 95,282,\n+    0,283, 71,284,285,  0,286,  0,287,  2,288,  2,289,106,290,  2,\n+  130,130,163,163,163,130,\n@@ -639,1 +668,1 @@\n-  return u<921600u?hb_use_u8[3105+(((hb_use_u8[889+(((hb_use_u16[((hb_use_u8[353+(((hb_use_u8[113+(((hb_use_b4(hb_use_u8,u>>1>>3>>1>>3>>4))<<4)+((u>>1>>3>>1>>3)&15u))])<<3)+((u>>1>>3>>1)&7u))])<<1)+((u>>1>>3)&1u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:O;\n+  return u<921600u?hb_use_u8[3265+(((hb_use_u8[937+(((hb_use_u16[((hb_use_u8[369+(((hb_use_u8[113+(((hb_use_b4(hb_use_u8,u>>1>>3>>1>>3>>4))<<4)+((u>>1>>3>>1>>3)&15u))])<<3)+((u>>1>>3>>1)&7u))])<<1)+((u>>1>>3)&1u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:O;\n@@ -659,0 +688,1 @@\n+#undef RK\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-use-table.hh","additions":213,"deletions":183,"binary":false,"changes":396,"status":"modified"},{"patch":"@@ -13,2 +13,2 @@\n- * # Scripts-15.1.0.txt\n- * # Date: 2023-07-28, 16:01:07 GMT\n+ * # Scripts-16.0.0.txt\n+ * # Date: 2024-04-30, 21:48:40 GMT\n@@ -27,1 +27,1 @@\n-  _hb_glyph_info_reset_continuation (&buffer->prev());\n+  _hb_glyph_info_clear_continuation (&buffer->prev());\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper-vowel-constraints.cc","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -177,1 +177,3 @@\n-hb_ot_shaper_categorize (const hb_ot_shape_planner_t *planner)\n+hb_ot_shaper_categorize (hb_script_t script,\n+                         hb_direction_t direction,\n+                         hb_tag_t gsub_script)\n@@ -179,1 +181,1 @@\n-  switch ((hb_tag_t) planner->props.script)\n+  switch ((hb_tag_t) script)\n@@ -195,3 +197,2 @@\n-      if ((planner->map.chosen_script[0] != HB_OT_TAG_DEFAULT_SCRIPT ||\n-           planner->props.script == HB_SCRIPT_ARABIC) &&\n-          HB_DIRECTION_IS_HORIZONTAL(planner->props.direction))\n+      if ((gsub_script != HB_OT_TAG_DEFAULT_SCRIPT || script == HB_SCRIPT_ARABIC) &&\n+          HB_DIRECTION_IS_HORIZONTAL (direction))\n@@ -238,2 +239,2 @@\n-      if (planner->map.chosen_script[0] == HB_TAG ('D','F','L','T') ||\n-          planner->map.chosen_script[0] == HB_TAG ('l','a','t','n'))\n+      if (gsub_script == HB_TAG ('D','F','L','T') ||\n+          gsub_script == HB_TAG ('l','a','t','n'))\n@@ -241,1 +242,1 @@\n-      else if ((planner->map.chosen_script[0] & 0x000000FF) == '3')\n+      else if ((gsub_script & 0x000000FF) == '3')\n@@ -257,3 +258,3 @@\n-      if (planner->map.chosen_script[0] == HB_TAG ('D','F','L','T') ||\n-          planner->map.chosen_script[0] == HB_TAG ('l','a','t','n') ||\n-          planner->map.chosen_script[0] == HB_TAG ('m','y','m','r'))\n+      if (gsub_script == HB_TAG ('D','F','L','T') ||\n+          gsub_script == HB_TAG ('l','a','t','n') ||\n+          gsub_script == HB_TAG ('m','y','m','r'))\n@@ -389,0 +390,9 @@\n+    \/* Unicode-16.0 additions *\/\n+    case HB_SCRIPT_GARAY:\n+    case HB_SCRIPT_GURUNG_KHEMA:\n+    case HB_SCRIPT_KIRAT_RAI:\n+    case HB_SCRIPT_OL_ONAL:\n+    case HB_SCRIPT_SUNUWAR:\n+    case HB_SCRIPT_TODHRI:\n+    case HB_SCRIPT_TULU_TIGALARI:\n+\n@@ -394,2 +404,2 @@\n-      if (planner->map.chosen_script[0] == HB_TAG ('D','F','L','T') ||\n-          planner->map.chosen_script[0] == HB_TAG ('l','a','t','n'))\n+      if (gsub_script == HB_TAG ('D','F','L','T') ||\n+          gsub_script == HB_TAG ('l','a','t','n'))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shaper.hh","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+  double axis_value_double = static_cast<double>(axis_value);\n@@ -67,1 +68,1 @@\n-  return (axis_value < axis_range.minimum || axis_value > axis_range.maximum);\n+  return (axis_value_double < axis_range.minimum || axis_value_double > axis_range.maximum);\n@@ -330,0 +331,1 @@\n+                          hb_barrier () &&\n@@ -351,1 +353,1 @@\n-  bool get_value (unsigned int axis_index) const\n+  float get_value (unsigned int axis_index) const\n@@ -355,5 +357,5 @@\n-    case 1: return u.format1.get_value ();\n-    case 2: return u.format2.get_value ();\n-    case 3: return u.format3.get_value ();\n-    case 4: return u.format4.get_axis_record (axis_index).get_value ();\n-    default:return 0;\n+    case 1: hb_barrier (); return u.format1.get_value ();\n+    case 2: hb_barrier (); return u.format2.get_value ();\n+    case 3: hb_barrier (); return u.format3.get_value ();\n+    case 4: hb_barrier (); return u.format4.get_axis_record (axis_index).get_value ();\n+    default:return 0.f;\n@@ -367,3 +369,3 @@\n-    case 1: return u.format1.get_axis_index ();\n-    case 2: return u.format2.get_axis_index ();\n-    case 3: return u.format3.get_axis_index ();\n+    case 1: hb_barrier (); return u.format1.get_axis_index ();\n+    case 2: hb_barrier (); return u.format2.get_axis_index ();\n+    case 3: hb_barrier (); return u.format3.get_axis_index ();\n@@ -379,4 +381,4 @@\n-    case 1: return u.format1.get_value_name_id ();\n-    case 2: return u.format2.get_value_name_id ();\n-    case 3: return u.format3.get_value_name_id ();\n-    case 4: return u.format4.get_value_name_id ();\n+    case 1: hb_barrier (); return u.format1.get_value_name_id ();\n+    case 2: hb_barrier (); return u.format2.get_value_name_id ();\n+    case 3: hb_barrier (); return u.format3.get_value_name_id ();\n+    case 4: hb_barrier (); return u.format4.get_value_name_id ();\n@@ -393,4 +395,4 @@\n-    case 1: return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n-    case 2: return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));\n-    case 3: return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));\n-    case 4: return_trace (c->dispatch (u.format4, std::forward<Ts> (ds)...));\n+    case 1: hb_barrier (); return_trace (c->dispatch (u.format1, std::forward<Ts> (ds)...));\n+    case 2: hb_barrier (); return_trace (c->dispatch (u.format2, std::forward<Ts> (ds)...));\n+    case 3: hb_barrier (); return_trace (c->dispatch (u.format3, std::forward<Ts> (ds)...));\n+    case 4: hb_barrier (); return_trace (c->dispatch (u.format4, std::forward<Ts> (ds)...));\n@@ -406,4 +408,4 @@\n-    case 1: return u.format1.keep_axis_value (axis_records, user_axes_location);\n-    case 2: return u.format2.keep_axis_value (axis_records, user_axes_location);\n-    case 3: return u.format3.keep_axis_value (axis_records, user_axes_location);\n-    case 4: return u.format4.keep_axis_value (axis_records, user_axes_location);\n+    case 1: hb_barrier (); return u.format1.keep_axis_value (axis_records, user_axes_location);\n+    case 2: hb_barrier (); return u.format2.keep_axis_value (axis_records, user_axes_location);\n+    case 3: hb_barrier (); return u.format3.keep_axis_value (axis_records, user_axes_location);\n+    case 4: hb_barrier (); return u.format4.keep_axis_value (axis_records, user_axes_location);\n@@ -419,0 +421,1 @@\n+    hb_barrier ();\n@@ -422,4 +425,4 @@\n-    case 1: return_trace (u.format1.sanitize (c));\n-    case 2: return_trace (u.format2.sanitize (c));\n-    case 3: return_trace (u.format3.sanitize (c));\n-    case 4: return_trace (u.format4.sanitize (c));\n+    case 1: hb_barrier (); return_trace (u.format1.sanitize (c));\n+    case 2: hb_barrier (); return_trace (u.format2.sanitize (c));\n+    case 3: hb_barrier (); return_trace (u.format3.sanitize (c));\n+    case 4: hb_barrier (); return_trace (u.format4.sanitize (c));\n@@ -486,1 +489,1 @@\n-      const AxisValue& axis_value = this+axis_values[i];\n+      const AxisValue& axis_value = this+offsetToAxisValueOffsets+axis_values[i];\n@@ -563,0 +566,1 @@\n+                          hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-stat-table.hh","additions":31,"deletions":27,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -9,2 +9,2 @@\n- * <meta name=\"updated_at\" content=\"2022-09-30 11:47 PM\" \/>\n- * File-Date: 2023-08-02\n+ * <meta name=\"updated_at\" content=\"2024-12-06 06:35 AM\" \/>\n+ * File-Date: 2025-01-21\n@@ -29,1 +29,1 @@\n-  {HB_TAG('b','e',' ',' '),     HB_TAG('B','E','L',' ')},       \/* Belarusian -> Belarussian *\/\n+  {HB_TAG('b','e',' ',' '),     HB_TAG('B','E','L',' ')},       \/* Belarusian *\/\n@@ -34,1 +34,1 @@\n-  {HB_TAG('b','n',' ',' '),     HB_TAG('B','E','N',' ')},       \/* Bengali *\/\n+  {HB_TAG('b','n',' ',' '),     HB_TAG('B','E','N',' ')},       \/* Bangla *\/\n@@ -67,1 +67,2 @@\n-  {HB_TAG('g','d',' ',' '),     HB_TAG('G','A','E',' ')},       \/* Scottish Gaelic (Gaelic) *\/\n+  {HB_TAG('g','a',' ',' '),     HB_TAG('I','R','T',' ')},       \/* Irish -> Irish Traditional *\/\n+  {HB_TAG('g','d',' ',' '),     HB_TAG('G','A','E',' ')},       \/* Scottish Gaelic *\/\n@@ -156,1 +157,1 @@\n-  {HB_TAG('o','r',' ',' '),     HB_TAG('O','R','I',' ')},       \/* Odia (formerly Oriya) [macrolanguage] *\/\n+  {HB_TAG('o','r',' ',' '),     HB_TAG('O','R','I',' ')},       \/* Odia [macrolanguage] *\/\n@@ -169,1 +170,1 @@\n-  {HB_TAG('s','a',' ',' '),     HB_TAG('S','A','N',' ')},       \/* Sanskrit *\/\n+  {HB_TAG('s','a',' ',' '),     HB_TAG('S','A','N',' ')},       \/* Sanskrit [macrolanguage] *\/\n@@ -226,0 +227,1 @@\n+\/*{HB_TAG('a','a','q',' '),     HB_TAG('A','A','Q',' ')},*\/     \/* Eastern Abnaki -> Eastern Abenaki *\/\n@@ -241,0 +243,1 @@\n+  {HB_TAG('a','c','y',' '),     HB_TAG('A','C','Y',' ')},       \/* Cypriot Arabic *\/\n@@ -291,0 +294,1 @@\n+\/*{HB_TAG('a','t','s',' '),     HB_TAG('A','T','S',' ')},*\/     \/* Gros Ventre (Atsina) *\/\n@@ -329,0 +333,1 @@\n+\/*{HB_TAG('b','d','c',' '),     HB_TAG('B','D','C',' ')},*\/     \/* Emberá-Baudó *\/\n@@ -424,0 +429,2 @@\n+\/*{HB_TAG('c','a','y',' '),     HB_TAG('C','A','Y',' ')},*\/     \/* Cayuga *\/\n+\/*{HB_TAG('c','b','g',' '),     HB_TAG('C','B','G',' ')},*\/     \/* Chimila *\/\n@@ -468,0 +475,1 @@\n+  {HB_TAG('c','l','s',' '),     HB_TAG('S','A','N',' ')},       \/* Classical Sanskrit -> Sanskrit *\/\n@@ -469,0 +477,1 @@\n+\/*{HB_TAG('c','m','i',' '),     HB_TAG('C','M','I',' ')},*\/     \/* Emberá-Chamí *\/\n@@ -482,0 +491,1 @@\n+\/*{HB_TAG('c','o','o',' '),     HB_TAG('C','O','O',' ')},*\/     \/* Comox *\/\n@@ -531,0 +541,1 @@\n+\/*{HB_TAG('c','t','o',' '),     HB_TAG('C','T','O',' ')},*\/     \/* Emberá-Catío *\/\n@@ -554,1 +565,1 @@\n-  {HB_TAG('d','g','r',' '),     HB_TAG('A','T','H',' ')},       \/* Dogrib -> Athapaskan *\/\n+  {HB_TAG('d','g','r',' '),     HB_TAG('A','T','H',' ')},       \/* Tlicho -> Athapaskan *\/\n@@ -593,0 +604,1 @@\n+\/*{HB_TAG('e','m','p',' '),     HB_TAG('E','M','P',' ')},*\/     \/* Northern Emberá *\/\n@@ -640,1 +652,1 @@\n-  {HB_TAG('g','a','e',' '),     HB_TAG_NONE            },       \/* Guarequena != Scottish Gaelic (Gaelic) *\/\n+  {HB_TAG('g','a','e',' '),     HB_TAG_NONE            },       \/* Guarequena != Scottish Gaelic *\/\n@@ -657,0 +669,1 @@\n+  {HB_TAG('g','h','c',' '),     HB_TAG('I','R','T',' ')},       \/* Hiberno-Scottish Gaelic -> Irish Traditional *\/\n@@ -735,0 +748,1 @@\n+  {HB_TAG('h','n','m',' '),     HB_TAG('Z','H','S',' ')},       \/* Hainanese -> Chinese, Simplified *\/\n@@ -746,0 +760,1 @@\n+\/*{HB_TAG('h','u','r',' '),     HB_TAG('H','U','R',' ')},*\/     \/* Halkomelem *\/\n@@ -783,0 +798,1 @@\n+\/*{HB_TAG('j','d','t',' '),     HB_TAG('J','D','T',' ')},*\/     \/* Judeo-Tat *\/\n@@ -797,0 +813,1 @@\n+\/*{HB_TAG('k','b','c',' '),     HB_TAG('K','B','C',' ')},*\/     \/* Kadiwéu *\/\n@@ -817,0 +834,1 @@\n+\/*{HB_TAG('k','g','f',' '),     HB_TAG('K','G','F',' ')},*\/     \/* Kube *\/\n@@ -832,0 +850,1 @@\n+\/*{HB_TAG('k','j','j',' '),     HB_TAG('K','J','J',' ')},*\/     \/* Khinalugh -> Khinalug *\/\n@@ -841,0 +860,1 @@\n+\/*{HB_TAG('k','m','g',' '),     HB_TAG('K','M','G',' ')},*\/     \/* Kâte *\/\n@@ -884,0 +904,1 @@\n+\/*{HB_TAG('k','s','u',' '),     HB_TAG('K','S','U',' ')},*\/     \/* Khamyang *\/\n@@ -897,0 +918,1 @@\n+  {HB_TAG('k','v','q',' '),     HB_TAG('K','V','Q',' ')},       \/* Geba Karen *\/\n@@ -933,0 +955,1 @@\n+\/*{HB_TAG('l','i','v',' '),     HB_TAG('L','I','V',' ')},*\/     \/* Liv *\/\n@@ -962,0 +985,1 @@\n+  {HB_TAG('l','u','h',' '),     HB_TAG('Z','H','S',' ')},       \/* Leizhou Chinese -> Chinese, Simplified *\/\n@@ -965,0 +989,1 @@\n+\/*{HB_TAG('l','u','t',' '),     HB_TAG('L','U','T',' ')},*\/     \/* Lushootseed *\/\n@@ -998,0 +1023,1 @@\n+\/*{HB_TAG('m','e','v',' '),     HB_TAG('M','E','V',' ')},*\/     \/* Mano *\/\n@@ -1004,0 +1030,1 @@\n+  {HB_TAG('m','g','a',' '),     HB_TAG('S','G','A',' ')},       \/* Middle Irish (900-1200) -> Old Irish *\/\n@@ -1129,0 +1156,1 @@\n+\/*{HB_TAG('n','o','p',' '),     HB_TAG('N','O','P',' ')},*\/     \/* Numanggang *\/\n@@ -1139,0 +1167,1 @@\n+\/*{HB_TAG('n','u','k',' '),     HB_TAG('N','U','K',' ')},*\/     \/* Nuu-chah-nulth *\/\n@@ -1156,0 +1185,2 @@\n+\/*{HB_TAG('o','n','e',' '),     HB_TAG('O','N','E',' ')},*\/     \/* Oneida *\/\n+\/*{HB_TAG('o','n','o',' '),     HB_TAG('O','N','O',' ')},*\/     \/* Onondaga *\/\n@@ -1163,1 +1194,1 @@\n-  {HB_TAG('o','r','y',' '),     HB_TAG('O','R','I',' ')},       \/* Odia (formerly Oriya) *\/\n+  {HB_TAG('o','r','y',' '),     HB_TAG('O','R','I',' ')},       \/* Odia *\/\n@@ -1196,1 +1227,1 @@\n-  {HB_TAG('p','l','g',' '),     HB_TAG_NONE            },       \/* Pilagá != Palaung *\/\n+  {HB_TAG('p','l','g',' '),     HB_TAG('P','L','G','0')},       \/* Pilagá *\/\n@@ -1356,0 +1387,1 @@\n+\/*{HB_TAG('s','e','e',' '),     HB_TAG('S','E','E',' ')},*\/     \/* Seneca *\/\n@@ -1377,0 +1409,2 @@\n+\/*{HB_TAG('s','j','a',' '),     HB_TAG('S','J','A',' ')},*\/     \/* Epena *\/\n+  {HB_TAG('s','j','c',' '),     HB_TAG('Z','H','S',' ')},       \/* Shaojiang Chinese -> Chinese, Simplified *\/\n@@ -1378,0 +1412,1 @@\n+\/*{HB_TAG('s','j','e',' '),     HB_TAG('S','J','E',' ')},*\/     \/* Pite Sami *\/\n@@ -1380,0 +1415,1 @@\n+\/*{HB_TAG('s','j','u',' '),     HB_TAG('S','J','U',' ')},*\/     \/* Ume Sami *\/\n@@ -1398,1 +1434,1 @@\n-  {HB_TAG('s','p','v',' '),     HB_TAG('O','R','I',' ')},       \/* Sambalpuri -> Odia (formerly Oriya) *\/\n+  {HB_TAG('s','p','v',' '),     HB_TAG('O','R','I',' ')},       \/* Sambalpuri -> Odia *\/\n@@ -1413,0 +1449,1 @@\n+\/*{HB_TAG('s','t','r',' '),     HB_TAG('S','T','R',' ')},*\/     \/* Straits Salish *\/\n@@ -1434,0 +1471,1 @@\n+  {HB_TAG('t','a','q',' '),     HB_TAG('T','A','Q',' ')},       \/* Tamasheq *\/\n@@ -1438,0 +1476,1 @@\n+\/*{HB_TAG('t','b','v',' '),     HB_TAG('T','B','V',' ')},*\/     \/* Tobo *\/\n@@ -1445,0 +1484,1 @@\n+\/*{HB_TAG('t','d','c',' '),     HB_TAG('T','D','C',' ')},*\/     \/* Emberá-Tadó *\/\n@@ -1458,0 +1498,1 @@\n+\/*{HB_TAG('t','h','p',' '),     HB_TAG('T','H','P',' ')},*\/     \/* Thompson *\/\n@@ -1459,0 +1500,1 @@\n+  {HB_TAG('t','h','v',' '),     HB_TAG('T','H','V',' ')},       \/* Tahaggart Tamahaq *\/\n@@ -1461,0 +1503,1 @@\n+  {HB_TAG('t','h','z',' '),     HB_TAG('T','H','Z',' ')},       \/* Tayart Tamajeq *\/\n@@ -1471,0 +1514,1 @@\n+\/*{HB_TAG('t','l','y',' '),     HB_TAG('T','L','Y',' ')},*\/     \/* Talysh *\/\n@@ -1496,0 +1540,1 @@\n+  {HB_TAG('t','t','q',' '),     HB_TAG('T','T','Q',' ')},       \/* Tawallammat Tamajaq *\/\n@@ -1501,0 +1546,1 @@\n+\/*{HB_TAG('t','u','s',' '),     HB_TAG('T','U','S',' ')},*\/     \/* Tuscarora *\/\n@@ -1517,0 +1563,1 @@\n+\/*{HB_TAG('u','d','i',' '),     HB_TAG('U','D','I',' ')},*\/     \/* Udi *\/\n@@ -1535,1 +1582,3 @@\n-\/*{HB_TAG('v','r','o',' '),     HB_TAG('V','R','O',' ')},*\/     \/* Võro *\/\n+  {HB_TAG('v','r','o',' '),     HB_TAG('V','R','O',' ')},       \/* Võro *\/\n+  {HB_TAG('v','r','o',' '),     HB_TAG('E','T','I',' ')},       \/* Võro -> Estonian *\/\n+  {HB_TAG('v','s','n',' '),     HB_TAG('S','A','N',' ')},       \/* Vedic Sanskrit -> Sanskrit *\/\n@@ -1538,0 +1587,1 @@\n+\/*{HB_TAG('w','b','l',' '),     HB_TAG('W','B','L',' ')},*\/     \/* Wakhi *\/\n@@ -1542,0 +1592,1 @@\n+\/*{HB_TAG('w','d','t',' '),     HB_TAG('W','D','T',' ')},*\/     \/* Wendat *\/\n@@ -1553,0 +1604,3 @@\n+  {HB_TAG('w','y','a',' '),     HB_TAG('W','D','T',' ')},       \/* Wyandot (retired code) -> Wendat *\/\n+  {HB_TAG('w','y','a',' '),     HB_TAG('W','Y','N',' ')},       \/* Wyandot (retired code) *\/\n+\/*{HB_TAG('w','y','n',' '),     HB_TAG('W','Y','N',' ')},*\/     \/* Wyandot *\/\n@@ -1585,1 +1639,1 @@\n-  {HB_TAG('y','c','r',' '),     HB_TAG_NONE            },       \/* Yilan Creole != Y-Cree *\/\n+  {HB_TAG('y','c','r',' '),     HB_TAG('C','P','P',' ')},       \/* Yilan Creole -> Creoles *\/\n@@ -1594,0 +1648,1 @@\n+\/*{HB_TAG('y','u','f',' '),     HB_TAG('Y','U','F',' ')},*\/     \/* Havasupai-Walapai-Yavapai *\/\n@@ -2338,0 +2393,20 @@\n+    if (lang_matches (&lang_str[1], limit, \"nm-hant-hk\", 10))\n+    {\n+      \/* Hainanese; Han (Traditional variant); Hong Kong *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], limit, \"nm-hant-mo\", 10))\n+    {\n+      \/* Hainanese; Han (Traditional variant); Macao *\/\n+      unsigned int i;\n+      hb_tag_t possible_tags[] = {\n+        HB_TAG('Z','H','T','M'),  \/* Chinese, Traditional, Macao SAR *\/\n+        HB_TAG('Z','H','H',' '),  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      };\n+      for (i = 0; i < 2 && i < *count; i++)\n+        tags[i] = possible_tags[i];\n+      *count = i;\n+      return true;\n+    }\n@@ -2372,0 +2447,14 @@\n+    if (lang_matches (&lang_str[1], limit, \"nm-hans\", 7))\n+    {\n+      \/* Hainanese; Han (Simplified variant) *\/\n+      tags[0] = HB_TAG('Z','H','S',' ');  \/* Chinese, Simplified *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], limit, \"nm-hant\", 7))\n+    {\n+      \/* Hainanese; Han (Traditional variant) *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese, Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -2416,0 +2505,30 @@\n+    if (0 == strncmp (&lang_str[1], \"nm-\", 3)\n+        && subtag_matches (lang_str, limit, \"-hk\", 3))\n+    {\n+      \/* Hainanese; Hong Kong *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"nm-\", 3)\n+        && subtag_matches (lang_str, limit, \"-mo\", 3))\n+    {\n+      \/* Hainanese; Macao *\/\n+      unsigned int i;\n+      hb_tag_t possible_tags[] = {\n+        HB_TAG('Z','H','T','M'),  \/* Chinese, Traditional, Macao SAR *\/\n+        HB_TAG('Z','H','H',' '),  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      };\n+      for (i = 0; i < 2 && i < *count; i++)\n+        tags[i] = possible_tags[i];\n+      *count = i;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"nm-\", 3)\n+        && subtag_matches (lang_str, limit, \"-tw\", 3))\n+    {\n+      \/* Hainanese; Taiwan, Province of China *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese, Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -2477,0 +2596,34 @@\n+    if (lang_matches (&lang_str[1], limit, \"uh-hant-hk\", 10))\n+    {\n+      \/* Leizhou Chinese; Han (Traditional variant); Hong Kong *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], limit, \"uh-hant-mo\", 10))\n+    {\n+      \/* Leizhou Chinese; Han (Traditional variant); Macao *\/\n+      unsigned int i;\n+      hb_tag_t possible_tags[] = {\n+        HB_TAG('Z','H','T','M'),  \/* Chinese, Traditional, Macao SAR *\/\n+        HB_TAG('Z','H','H',' '),  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      };\n+      for (i = 0; i < 2 && i < *count; i++)\n+        tags[i] = possible_tags[i];\n+      *count = i;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], limit, \"uh-hans\", 7))\n+    {\n+      \/* Leizhou Chinese; Han (Simplified variant) *\/\n+      tags[0] = HB_TAG('Z','H','S',' ');  \/* Chinese, Simplified *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], limit, \"uh-hant\", 7))\n+    {\n+      \/* Leizhou Chinese; Han (Traditional variant) *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese, Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -2484,0 +2637,30 @@\n+    if (0 == strncmp (&lang_str[1], \"uh-\", 3)\n+        && subtag_matches (lang_str, limit, \"-hk\", 3))\n+    {\n+      \/* Leizhou Chinese; Hong Kong *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"uh-\", 3)\n+        && subtag_matches (lang_str, limit, \"-mo\", 3))\n+    {\n+      \/* Leizhou Chinese; Macao *\/\n+      unsigned int i;\n+      hb_tag_t possible_tags[] = {\n+        HB_TAG('Z','H','T','M'),  \/* Chinese, Traditional, Macao SAR *\/\n+        HB_TAG('Z','H','H',' '),  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      };\n+      for (i = 0; i < 2 && i < *count; i++)\n+        tags[i] = possible_tags[i];\n+      *count = i;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"uh-\", 3)\n+        && subtag_matches (lang_str, limit, \"-tw\", 3))\n+    {\n+      \/* Leizhou Chinese; Taiwan, Province of China *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese, Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -2655,0 +2838,66 @@\n+  case 's':\n+    if (lang_matches (&lang_str[1], limit, \"jc-hant-hk\", 10))\n+    {\n+      \/* Shaojiang Chinese; Han (Traditional variant); Hong Kong *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], limit, \"jc-hant-mo\", 10))\n+    {\n+      \/* Shaojiang Chinese; Han (Traditional variant); Macao *\/\n+      unsigned int i;\n+      hb_tag_t possible_tags[] = {\n+        HB_TAG('Z','H','T','M'),  \/* Chinese, Traditional, Macao SAR *\/\n+        HB_TAG('Z','H','H',' '),  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      };\n+      for (i = 0; i < 2 && i < *count; i++)\n+        tags[i] = possible_tags[i];\n+      *count = i;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], limit, \"jc-hans\", 7))\n+    {\n+      \/* Shaojiang Chinese; Han (Simplified variant) *\/\n+      tags[0] = HB_TAG('Z','H','S',' ');  \/* Chinese, Simplified *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], limit, \"jc-hant\", 7))\n+    {\n+      \/* Shaojiang Chinese; Han (Traditional variant) *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese, Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"jc-\", 3)\n+        && subtag_matches (lang_str, limit, \"-hk\", 3))\n+    {\n+      \/* Shaojiang Chinese; Hong Kong *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"jc-\", 3)\n+        && subtag_matches (lang_str, limit, \"-mo\", 3))\n+    {\n+      \/* Shaojiang Chinese; Macao *\/\n+      unsigned int i;\n+      hb_tag_t possible_tags[] = {\n+        HB_TAG('Z','H','T','M'),  \/* Chinese, Traditional, Macao SAR *\/\n+        HB_TAG('Z','H','H',' '),  \/* Chinese, Traditional, Hong Kong SAR *\/\n+      };\n+      for (i = 0; i < 2 && i < *count; i++)\n+        tags[i] = possible_tags[i];\n+      *count = i;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"jc-\", 3)\n+        && subtag_matches (lang_str, limit, \"-tw\", 3))\n+    {\n+      \/* Shaojiang Chinese; Taiwan, Province of China *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese, Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n+    break;\n@@ -2819,3 +3068,4 @@\n- * many language tags) and the best tag is not the alphabetically first, or if\n- * the best tag consists of multiple subtags, or if the best tag does not appear\n- * in #ot_languages.\n+ * many language tags) and the best tag is not the first (sorted alphabetically,\n+ * with two-letter tags having priority over all three-letter tags), or if the\n+ * best tag consists of multiple subtags, or if the best tag does not appear in\n+ * #ot_languages2 or #ot_languages3.\n@@ -2835,2 +3085,0 @@\n-  case HB_TAG('A','R','A',' '):  \/* Arabic *\/\n-    return hb_language_from_string (\"ar\", -1);  \/* Arabic [macrolanguage] *\/\n@@ -2857,6 +3105,0 @@\n-  case HB_TAG('D','Z','N',' '):  \/* Dzongkha *\/\n-    return hb_language_from_string (\"dz\", -1);  \/* Dzongkha *\/\n-  case HB_TAG('E','T','I',' '):  \/* Estonian *\/\n-    return hb_language_from_string (\"et\", -1);  \/* Estonian [macrolanguage] *\/\n-  case HB_TAG('F','A','R',' '):  \/* Persian *\/\n-    return hb_language_from_string (\"fa\", -1);  \/* Persian [macrolanguage] *\/\n@@ -2877,4 +3119,0 @@\n-  case HB_TAG('I','N','U',' '):  \/* Inuktitut *\/\n-    return hb_language_from_string (\"iu\", -1);  \/* Inuktitut [macrolanguage] *\/\n-  case HB_TAG('I','P','K',' '):  \/* Inupiat *\/\n-    return hb_language_from_string (\"ik\", -1);  \/* Inupiaq [macrolanguage] *\/\n@@ -2884,1 +3122,1 @@\n-    return hb_language_from_string (\"ga-Latg\", -1);  \/* Irish; Latin (Gaelic variant) *\/\n+    return hb_language_from_string (\"ghc\", -1);  \/* Hiberno-Scottish Gaelic *\/\n@@ -2891,2 +3129,0 @@\n-  case HB_TAG('K','N','R',' '):  \/* Kanuri *\/\n-    return hb_language_from_string (\"kr\", -1);  \/* Kanuri [macrolanguage] *\/\n@@ -2897,2 +3133,0 @@\n-  case HB_TAG('K','O','M',' '):  \/* Komi *\/\n-    return hb_language_from_string (\"kv\", -1);  \/* Komi [macrolanguage] *\/\n@@ -2905,2 +3139,0 @@\n-  case HB_TAG('K','U','R',' '):  \/* Kurdish *\/\n-    return hb_language_from_string (\"ku\", -1);  \/* Kurdish [macrolanguage] *\/\n@@ -2911,2 +3143,0 @@\n-  case HB_TAG('L','V','I',' '):  \/* Latvian *\/\n-    return hb_language_from_string (\"lv\", -1);  \/* Latvian [macrolanguage] *\/\n@@ -2915,2 +3145,0 @@\n-  case HB_TAG('M','L','G',' '):  \/* Malagasy *\/\n-    return hb_language_from_string (\"mg\", -1);  \/* Malagasy [macrolanguage] *\/\n@@ -2919,2 +3147,0 @@\n-  case HB_TAG('M','N','G',' '):  \/* Mongolian *\/\n-    return hb_language_from_string (\"mn\", -1);  \/* Mongolian [macrolanguage] *\/\n@@ -2931,2 +3157,0 @@\n-  case HB_TAG('N','E','P',' '):  \/* Nepali *\/\n-    return hb_language_from_string (\"ne\", -1);  \/* Nepali [macrolanguage] *\/\n@@ -2937,6 +3161,0 @@\n-  case HB_TAG('O','J','B',' '):  \/* Ojibway *\/\n-    return hb_language_from_string (\"oj\", -1);  \/* Ojibwa [macrolanguage] *\/\n-  case HB_TAG('O','R','O',' '):  \/* Oromo *\/\n-    return hb_language_from_string (\"om\", -1);  \/* Oromo [macrolanguage] *\/\n-  case HB_TAG('P','A','S',' '):  \/* Pashto *\/\n-    return hb_language_from_string (\"ps\", -1);  \/* Pashto [macrolanguage] *\/\n@@ -2949,2 +3167,0 @@\n-  case HB_TAG('Q','U','Z',' '):  \/* Quechua *\/\n-    return hb_language_from_string (\"qu\", -1);  \/* Quechua [macrolanguage] *\/\n@@ -2961,2 +3177,2 @@\n-  case HB_TAG('S','Q','I',' '):  \/* Albanian *\/\n-    return hb_language_from_string (\"sq\", -1);  \/* Albanian [macrolanguage] *\/\n+  case HB_TAG('S','G','A',' '):  \/* Old Irish *\/\n+    return hb_language_from_string (\"sga\", -1);  \/* Old Irish (to 900) *\/\n@@ -2979,0 +3195,4 @@\n+  case HB_TAG('W','D','T',' '):  \/* Wendat *\/\n+    return hb_language_from_string (\"wdt\", -1);  \/* Wendat *\/\n+  case HB_TAG('W','Y','N',' '):  \/* Wyandot *\/\n+    return hb_language_from_string (\"wyn\", -1);  \/* Wyandot *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-tag-table.hh","additions":274,"deletions":54,"binary":false,"changes":328,"status":"modified"},{"patch":"@@ -550,1 +550,1 @@\n-    snprintf (str, 16, \"x-hbot-%08x\", tag);\n+    snprintf (str, 16, \"x-hbot-%08\" PRIx32, tag);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-tag.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  Offset32To<VariationStore>    varStore;       \/* Offset from the beginning of 'avar' table. *\/\n+  Offset32To<ItemVariationStore>        varStore;       \/* Offset from the beginning of 'avar' table. *\/\n@@ -83,1 +83,1 @@\n-    float from_coord = coords[0].to_float ();\n+    double from_coord = (double) coords[0].to_float ();\n@@ -103,2 +103,2 @@\n-    from_coord = renormalizeValue (from_coord, unmapped_range, triple_distances);\n-    to_coord = renormalizeValue (to_coord, axis_range, triple_distances);\n+    from_coord = renormalizeValue ((double) from_coord, unmapped_range, triple_distances);\n+    to_coord = renormalizeValue ((double) to_coord, axis_range, triple_distances);\n@@ -200,1 +200,1 @@\n-    return Triple{unmapped_min, unmapped_middle, unmapped_max};\n+    return Triple{(double) unmapped_min, (double) unmapped_middle, (double) unmapped_max};\n@@ -233,1 +233,1 @@\n-      value_mappings.push (std::move (mapping));\n+      value_mappings.push (mapping);\n@@ -276,0 +276,1 @@\n+          hb_barrier () &&\n@@ -296,0 +297,1 @@\n+    hb_barrier ();\n@@ -319,0 +321,1 @@\n+    hb_barrier ();\n@@ -343,1 +346,1 @@\n-    OT::VariationStore::destroy_cache (var_store_cache);\n+    OT::ItemVariationStore::destroy_cache (var_store_cache);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-avar-table.hh","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"hb-subset-instancer-iup.hh\"\n@@ -35,205 +36,0 @@\n-template <typename MapCountT>\n-struct DeltaSetIndexMapFormat01\n-{\n-  friend struct DeltaSetIndexMap;\n-\n-  unsigned get_size () const\n-  { return min_size + mapCount * get_width (); }\n-\n-  private:\n-  DeltaSetIndexMapFormat01* copy (hb_serialize_context_t *c) const\n-  {\n-    TRACE_SERIALIZE (this);\n-    return_trace (c->embed (this));\n-  }\n-\n-  template <typename T>\n-  bool serialize (hb_serialize_context_t *c, const T &plan)\n-  {\n-    unsigned int width = plan.get_width ();\n-    unsigned int inner_bit_count = plan.get_inner_bit_count ();\n-    const hb_array_t<const uint32_t> output_map = plan.get_output_map ();\n-\n-    TRACE_SERIALIZE (this);\n-    if (unlikely (output_map.length && ((((inner_bit_count-1)&~0xF)!=0) || (((width-1)&~0x3)!=0))))\n-      return_trace (false);\n-    if (unlikely (!c->extend_min (this))) return_trace (false);\n-\n-    entryFormat = ((width-1)<<4)|(inner_bit_count-1);\n-    mapCount = output_map.length;\n-    HBUINT8 *p = c->allocate_size<HBUINT8> (width * output_map.length);\n-    if (unlikely (!p)) return_trace (false);\n-    for (unsigned int i = 0; i < output_map.length; i++)\n-    {\n-      unsigned int v = output_map.arrayZ[i];\n-      if (v)\n-      {\n-        unsigned int outer = v >> 16;\n-        unsigned int inner = v & 0xFFFF;\n-        unsigned int u = (outer << inner_bit_count) | inner;\n-        for (unsigned int w = width; w > 0;)\n-        {\n-          p[--w] = u;\n-          u >>= 8;\n-        }\n-      }\n-      p += width;\n-    }\n-    return_trace (true);\n-  }\n-\n-  uint32_t map (unsigned int v) const \/* Returns 16.16 outer.inner. *\/\n-  {\n-    \/* If count is zero, pass value unchanged.  This takes\n-     * care of direct mapping for advance map. *\/\n-    if (!mapCount)\n-      return v;\n-\n-    if (v >= mapCount)\n-      v = mapCount - 1;\n-\n-    unsigned int u = 0;\n-    { \/* Fetch it. *\/\n-      unsigned int w = get_width ();\n-      const HBUINT8 *p = mapDataZ.arrayZ + w * v;\n-      for (; w; w--)\n-        u = (u << 8) + *p++;\n-    }\n-\n-    { \/* Repack it. *\/\n-      unsigned int n = get_inner_bit_count ();\n-      unsigned int outer = u >> n;\n-      unsigned int inner = u & ((1 << n) - 1);\n-      u = (outer<<16) | inner;\n-    }\n-\n-    return u;\n-  }\n-\n-  unsigned get_map_count () const       { return mapCount; }\n-  unsigned get_width () const           { return ((entryFormat >> 4) & 3) + 1; }\n-  unsigned get_inner_bit_count () const { return (entryFormat & 0xF) + 1; }\n-\n-\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (c->check_struct (this) &&\n-                  c->check_range (mapDataZ.arrayZ,\n-                                  mapCount,\n-                                  get_width ()));\n-  }\n-\n-  protected:\n-  HBUINT8       format;         \/* Format identifier--format = 0 *\/\n-  HBUINT8       entryFormat;    \/* A packed field that describes the compressed\n-                                 * representation of delta-set indices. *\/\n-  MapCountT     mapCount;       \/* The number of mapping entries. *\/\n-  UnsizedArrayOf<HBUINT8>\n-                mapDataZ;       \/* The delta-set index mapping data. *\/\n-\n-  public:\n-  DEFINE_SIZE_ARRAY (2+MapCountT::static_size, mapDataZ);\n-};\n-\n-struct DeltaSetIndexMap\n-{\n-  template <typename T>\n-  bool serialize (hb_serialize_context_t *c, const T &plan)\n-  {\n-    TRACE_SERIALIZE (this);\n-    unsigned length = plan.get_output_map ().length;\n-    u.format = length <= 0xFFFF ? 0 : 1;\n-    switch (u.format) {\n-    case 0: return_trace (u.format0.serialize (c, plan));\n-    case 1: return_trace (u.format1.serialize (c, plan));\n-    default:return_trace (false);\n-    }\n-  }\n-\n-  uint32_t map (unsigned v) const\n-  {\n-    switch (u.format) {\n-    case 0: return (u.format0.map (v));\n-    case 1: return (u.format1.map (v));\n-    default:return v;\n-    }\n-  }\n-\n-  unsigned get_map_count () const\n-  {\n-    switch (u.format) {\n-    case 0: return u.format0.get_map_count ();\n-    case 1: return u.format1.get_map_count ();\n-    default:return 0;\n-    }\n-  }\n-\n-  unsigned get_width () const\n-  {\n-    switch (u.format) {\n-    case 0: return u.format0.get_width ();\n-    case 1: return u.format1.get_width ();\n-    default:return 0;\n-    }\n-  }\n-\n-  unsigned get_inner_bit_count () const\n-  {\n-    switch (u.format) {\n-    case 0: return u.format0.get_inner_bit_count ();\n-    case 1: return u.format1.get_inner_bit_count ();\n-    default:return 0;\n-    }\n-  }\n-\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-    if (!u.format.sanitize (c)) return_trace (false);\n-    switch (u.format) {\n-    case 0: return_trace (u.format0.sanitize (c));\n-    case 1: return_trace (u.format1.sanitize (c));\n-    default:return_trace (true);\n-    }\n-  }\n-\n-  DeltaSetIndexMap* copy (hb_serialize_context_t *c) const\n-  {\n-    TRACE_SERIALIZE (this);\n-    switch (u.format) {\n-    case 0: return_trace (reinterpret_cast<DeltaSetIndexMap *> (u.format0.copy (c)));\n-    case 1: return_trace (reinterpret_cast<DeltaSetIndexMap *> (u.format1.copy (c)));\n-    default:return_trace (nullptr);\n-    }\n-  }\n-\n-  protected:\n-  union {\n-  HBUINT8                            format;         \/* Format identifier *\/\n-  DeltaSetIndexMapFormat01<HBUINT16> format0;\n-  DeltaSetIndexMapFormat01<HBUINT32> format1;\n-  } u;\n-  public:\n-  DEFINE_SIZE_UNION (1, format);\n-};\n-\n-\n-struct VarStoreInstancer\n-{\n-  VarStoreInstancer (const VariationStore *varStore,\n-                     const DeltaSetIndexMap *varIdxMap,\n-                     hb_array_t<int> coords) :\n-    varStore (varStore), varIdxMap (varIdxMap), coords (coords) {}\n-\n-  operator bool () const { return varStore && bool (coords); }\n-\n-  \/* according to the spec, if colr table has varStore but does not have\n-   * varIdxMap, then an implicit identity mapping is used *\/\n-  float operator() (uint32_t varIdx, unsigned short offset = 0) const\n-  { return coords ? varStore->get_delta (varIdxMap ? varIdxMap->map (VarIdx::add (varIdx, offset)) : varIdx + offset, coords) : 0; }\n-\n-  const VariationStore *varStore;\n-  const DeltaSetIndexMap *varIdxMap;\n-  hb_array_t<int> coords;\n-};\n@@ -299,1 +95,1 @@\n-      axis_tuples.set (*axis_tag, Triple (start, peak, end));\n+      axis_tuples.set (*axis_tag, Triple ((double) start, (double) peak, (double) end));\n@@ -305,3 +101,3 @@\n-  float calculate_scalar (hb_array_t<int> coords, unsigned int coord_count,\n-                          const hb_array_t<const F2DOT14> shared_tuples,\n-                          const hb_vector_t<hb_pair_t<int,int>> *shared_tuple_active_idx = nullptr) const\n+  double calculate_scalar (hb_array_t<const int> coords, unsigned int coord_count,\n+                           const hb_array_t<const F2DOT14> shared_tuples,\n+                           const hb_vector_t<hb_pair_t<int,int>> *shared_tuple_active_idx = nullptr) const\n@@ -321,1 +117,1 @@\n-        return 0.f;\n+        return 0.0;\n@@ -327,1 +123,1 @@\n-          return 0.f;\n+          return 0.0;\n@@ -352,1 +148,1 @@\n-    float scalar = 1.f;\n+    double scalar = 1.0;\n@@ -367,1 +163,1 @@\n-        if (v < start || v > end) return 0.f;\n+        if (v < start || v > end) return 0.0;\n@@ -369,1 +165,1 @@\n-        { if (peak != start) scalar *= (float) (v - start) \/ (peak - start); }\n+        { if (peak != start) scalar *= (double) (v - start) \/ (peak - start); }\n@@ -371,1 +167,1 @@\n-        { if (peak != end) scalar *= (float) (end - v) \/ (end - peak); }\n+        { if (peak != end) scalar *= (double) (end - v) \/ (end - peak); }\n@@ -373,1 +169,1 @@\n-      else if (!v || v < hb_min (0, peak) || v > hb_max (0, peak)) return 0.f;\n+      else if (!v || v < hb_min (0, peak) || v > hb_max (0, peak)) return 0.0;\n@@ -375,1 +171,1 @@\n-        scalar *= (float) v \/ peak;\n+        scalar *= (double) v \/ peak;\n@@ -428,7 +224,0 @@\n-enum packed_delta_flag_t\n-{\n-  DELTAS_ARE_ZERO      = 0x80,\n-  DELTAS_ARE_WORDS     = 0x40,\n-  DELTA_RUN_COUNT_MASK = 0x3F\n-};\n-\n@@ -437,0 +226,2 @@\n+  static constexpr bool realloc_move = true;  \/\/ Watch out when adding new members!\n+\n@@ -450,2 +241,2 @@\n-  hb_vector_t<char> compiled_tuple_header;\n-  hb_vector_t<char> compiled_deltas;\n+  hb_vector_t<unsigned char> compiled_tuple_header;\n+  hb_vector_t<unsigned char> compiled_deltas;\n@@ -459,1 +250,1 @@\n-  friend void swap (tuple_delta_t& a, tuple_delta_t& b)\n+  friend void swap (tuple_delta_t& a, tuple_delta_t& b) noexcept\n@@ -470,1 +261,1 @@\n-  tuple_delta_t (tuple_delta_t&& o) : tuple_delta_t ()\n+  tuple_delta_t (tuple_delta_t&& o)  noexcept : tuple_delta_t ()\n@@ -473,1 +264,1 @@\n-  tuple_delta_t& operator = (tuple_delta_t&& o)\n+  tuple_delta_t& operator = (tuple_delta_t&& o) noexcept\n@@ -517,6 +308,5 @@\n-    for (unsigned i = 0; i < num; i++)\n-    {\n-      if (!indices.arrayZ[i]) continue;\n-\n-      deltas_x[i] *= scalar;\n-      if (deltas_y)\n+    if (deltas_y)\n+      for (unsigned i = 0; i < num; i++)\n+      {\n+        if (!indices.arrayZ[i]) continue;\n+        deltas_x[i] *= scalar;\n@@ -524,1 +314,7 @@\n-    }\n+      }\n+    else\n+      for (unsigned i = 0; i < num; i++)\n+      {\n+        if (!indices.arrayZ[i]) continue;\n+        deltas_x[i] *= scalar;\n+      }\n@@ -539,1 +335,1 @@\n-    if ((tent->minimum < 0.f && tent->maximum > 0.f) ||\n+    if ((tent->minimum < 0.0 && tent->maximum > 0.0) ||\n@@ -543,1 +339,1 @@\n-    if (tent->middle == 0.f)\n+    if (tent->middle == 0.0)\n@@ -549,2 +345,2 @@\n-    result_t solutions = rebase_tent (*tent, axis_limit, axis_triple_distances);\n-    for (auto t : solutions)\n+    rebase_tent_result_t solutions = rebase_tent (*tent, axis_limit, axis_triple_distances);\n+    for (auto &t : solutions)\n@@ -603,1 +399,3 @@\n-    if (!compiled_deltas) return false;\n+    \/* compiled_deltas could be empty after iup delta optimization, we can skip\n+     * compiling this tuple and return true *\/\n+    if (!compiled_deltas) return true;\n@@ -717,0 +515,6 @@\n+  { return compile_deltas (indices, deltas_x, deltas_y, compiled_deltas); }\n+\n+  static bool compile_deltas (hb_array_t<const bool> point_indices,\n+                              hb_array_t<const float> x_deltas,\n+                              hb_array_t<const float> y_deltas,\n+                              hb_vector_t<unsigned char> &compiled_deltas \/* OUT *\/)\n@@ -719,1 +523,1 @@\n-    if (unlikely (!rounded_deltas.alloc (indices.length)))\n+    if (unlikely (!rounded_deltas.alloc (point_indices.length)))\n@@ -722,1 +526,1 @@\n-    for (unsigned i = 0; i < indices.length; i++)\n+    for (unsigned i = 0; i < point_indices.length; i++)\n@@ -724,2 +528,2 @@\n-      if (!indices[i]) continue;\n-      int rounded_delta = (int) roundf (deltas_x[i]);\n+      if (!point_indices[i]) continue;\n+      int rounded_delta = (int) roundf (x_deltas.arrayZ[i]);\n@@ -729,4 +533,4 @@\n-    if (!rounded_deltas) return false;\n-    \/* allocate enough memories 3 * num_deltas *\/\n-    unsigned alloc_len = 3 * rounded_deltas.length;\n-    if (deltas_y)\n+    if (!rounded_deltas) return true;\n+    \/* allocate enough memories 5 * num_deltas *\/\n+    unsigned alloc_len = 5 * rounded_deltas.length;\n+    if (y_deltas)\n@@ -737,2 +541,1 @@\n-    unsigned i = 0;\n-    unsigned encoded_len = encode_delta_run (i, compiled_deltas.as_array (), rounded_deltas);\n+    unsigned encoded_len = compile_deltas (compiled_deltas, rounded_deltas);\n@@ -740,1 +543,1 @@\n-    if (deltas_y)\n+    if (y_deltas)\n@@ -742,1 +545,1 @@\n-      \/* reuse the rounded_deltas vector, check that deltas_y have the same num of deltas as deltas_x *\/\n+      \/* reuse the rounded_deltas vector, check that y_deltas have the same num of deltas as x_deltas *\/\n@@ -744,1 +547,1 @@\n-      for (unsigned idx = 0; idx < indices.length; idx++)\n+      for (unsigned idx = 0; idx < point_indices.length; idx++)\n@@ -746,2 +549,2 @@\n-        if (!indices[idx]) continue;\n-        int rounded_delta = (int) roundf (deltas_y[idx]);\n+        if (!point_indices[idx]) continue;\n+        int rounded_delta = (int) roundf (y_deltas.arrayZ[idx]);\n@@ -755,3 +558,1 @@\n-      \/* reset i because we reuse rounded_deltas for deltas_y *\/\n-      i = 0;\n-      encoded_len += encode_delta_run (i, compiled_deltas.as_array ().sub_array (encoded_len), rounded_deltas);\n+      encoded_len += compile_deltas (compiled_deltas.as_array ().sub_array (encoded_len), rounded_deltas);\n@@ -762,105 +563,2 @@\n-  unsigned encode_delta_run (unsigned& i,\n-                             hb_array_t<char> encoded_bytes,\n-                             const hb_vector_t<int>& deltas) const\n-  {\n-    unsigned num_deltas = deltas.length;\n-    unsigned encoded_len = 0;\n-    while (i < num_deltas)\n-    {\n-      int val = deltas[i];\n-      if (val == 0)\n-        encoded_len += encode_delta_run_as_zeroes (i, encoded_bytes.sub_array (encoded_len), deltas);\n-      else if (val >= -128 && val <= 127)\n-        encoded_len += encode_delta_run_as_bytes (i, encoded_bytes.sub_array (encoded_len), deltas);\n-      else\n-        encoded_len += encode_delta_run_as_words (i, encoded_bytes.sub_array (encoded_len), deltas);\n-    }\n-    return encoded_len;\n-  }\n-\n-  unsigned encode_delta_run_as_zeroes (unsigned& i,\n-                                       hb_array_t<char> encoded_bytes,\n-                                       const hb_vector_t<int>& deltas) const\n-  {\n-    unsigned num_deltas = deltas.length;\n-    unsigned run_length = 0;\n-    auto it = encoded_bytes.iter ();\n-    unsigned encoded_len = 0;\n-    while (i < num_deltas && deltas[i] == 0)\n-    {\n-      i++;\n-      run_length++;\n-    }\n-\n-    while (run_length >= 64)\n-    {\n-      *it++ = char (DELTAS_ARE_ZERO | 63);\n-      run_length -= 64;\n-      encoded_len++;\n-    }\n-\n-    if (run_length)\n-    {\n-      *it++ = char (DELTAS_ARE_ZERO | (run_length - 1));\n-      encoded_len++;\n-    }\n-    return encoded_len;\n-  }\n-\n-  unsigned encode_delta_run_as_bytes (unsigned &i,\n-                                      hb_array_t<char> encoded_bytes,\n-                                      const hb_vector_t<int>& deltas) const\n-  {\n-    unsigned start = i;\n-    unsigned num_deltas = deltas.length;\n-    while (i < num_deltas)\n-    {\n-      int val = deltas[i];\n-      if (val > 127 || val < -128)\n-        break;\n-\n-      \/* from fonttools: if there're 2 or more zeros in a sequence,\n-       * it is better to start a new run to save bytes. *\/\n-      if (val == 0 && i + 1 < num_deltas && deltas[i+1] == 0)\n-        break;\n-\n-      i++;\n-    }\n-    unsigned run_length = i - start;\n-\n-    unsigned encoded_len = 0;\n-    auto it = encoded_bytes.iter ();\n-\n-    while (run_length >= 64)\n-    {\n-      *it++ = 63;\n-      encoded_len++;\n-\n-      for (unsigned j = 0; j < 64; j++)\n-      {\n-        *it++ = static_cast<char> (deltas[start + j]);\n-        encoded_len++;\n-      }\n-\n-      start += 64;\n-      run_length -= 64;\n-    }\n-\n-    if (run_length)\n-    {\n-      *it++ = run_length - 1;\n-      encoded_len++;\n-\n-      while (start < i)\n-      {\n-        *it++ = static_cast<char> (deltas[start++]);\n-        encoded_len++;\n-      }\n-    }\n-\n-    return encoded_len;\n-  }\n-\n-  unsigned encode_delta_run_as_words (unsigned &i,\n-                                      hb_array_t<char> encoded_bytes,\n-                                      const hb_vector_t<int>& deltas) const\n+  static unsigned compile_deltas (hb_array_t<unsigned char> encoded_bytes,\n+                                  hb_array_t<const int> deltas)\n@@ -868,55 +566,1 @@\n-    unsigned start = i;\n-    unsigned num_deltas = deltas.length;\n-    while (i < num_deltas)\n-    {\n-      int val = deltas[i];\n-\n-      \/* start a new run for a single zero value*\/\n-      if (val == 0) break;\n-\n-      \/* from fonttools: continue word-encoded run if there's only one\n-       * single value in the range [-128, 127] because it is more compact.\n-       * Only start a new run when there're 2 continuous such values. *\/\n-      if (val >= -128 && val <= 127 &&\n-          i + 1 < num_deltas &&\n-          deltas[i+1] >= -128 && deltas[i+1] <= 127)\n-        break;\n-\n-      i++;\n-    }\n-\n-    unsigned run_length = i - start;\n-    auto it = encoded_bytes.iter ();\n-    unsigned encoded_len = 0;\n-    while (run_length >= 64)\n-    {\n-      *it++ = (DELTAS_ARE_WORDS | 63);\n-      encoded_len++;\n-\n-      for (unsigned j = 0; j < 64; j++)\n-      {\n-        int16_t delta_val = deltas[start + j];\n-        *it++ = static_cast<char> (delta_val >> 8);\n-        *it++ = static_cast<char> (delta_val & 0xFF);\n-\n-        encoded_len += 2;\n-      }\n-\n-      start += 64;\n-      run_length -= 64;\n-    }\n-\n-    if (run_length)\n-    {\n-      *it++ = (DELTAS_ARE_WORDS | (run_length - 1));\n-      encoded_len++;\n-      while (start < i)\n-      {\n-        int16_t delta_val = deltas[start++];\n-        *it++ = static_cast<char> (delta_val >> 8);\n-        *it++ = static_cast<char> (delta_val & 0xFF);\n-\n-        encoded_len += 2;\n-      }\n-    }\n-    return encoded_len;\n+    return TupleValues::compile (deltas, encoded_bytes);\n@@ -985,4 +629,8 @@\n-          deltas_x.arrayZ[i] = infer_delta (orig_points.arrayZ[i].x, orig_points.arrayZ[prev].x, orig_points.arrayZ[next].x,\n-                                            deltas_x.arrayZ[prev], deltas_x.arrayZ[next]);\n-          deltas_y.arrayZ[i] = infer_delta (orig_points.arrayZ[i].y, orig_points.arrayZ[prev].y, orig_points.arrayZ[next].y,\n-                                            deltas_y.arrayZ[prev], deltas_y.arrayZ[next]);\n+          deltas_x.arrayZ[i] = infer_delta ((double) orig_points.arrayZ[i].x,\n+                                            (double) orig_points.arrayZ[prev].x,\n+                                            (double) orig_points.arrayZ[next].x,\n+                                            (double) deltas_x.arrayZ[prev], (double) deltas_x.arrayZ[next]);\n+          deltas_y.arrayZ[i] = infer_delta ((double) orig_points.arrayZ[i].y,\n+                                            (double) orig_points.arrayZ[prev].y,\n+                                            (double) orig_points.arrayZ[next].y,\n+                                            (double) deltas_y.arrayZ[prev], (double) deltas_y.arrayZ[next]);\n@@ -1005,2 +653,2 @@\n-          deltas_x.arrayZ[i] = 0.f;\n-          deltas_y.arrayZ[i] = 0.f;\n+          deltas_x.arrayZ[i] = 0.0;\n+          deltas_y.arrayZ[i] = 0.0;\n@@ -1014,1 +662,166 @@\n-  static float infer_delta (float target_val, float prev_val, float next_val, float prev_delta, float next_delta)\n+  bool optimize (const contour_point_vector_t& contour_points,\n+                 bool is_composite,\n+                 double tolerance = 0.5 + 1e-10)\n+  {\n+    unsigned count = contour_points.length;\n+    if (deltas_x.length != count ||\n+        deltas_y.length != count)\n+      return false;\n+\n+    hb_vector_t<bool> opt_indices;\n+    hb_vector_t<int> rounded_x_deltas, rounded_y_deltas;\n+\n+    if (unlikely (!rounded_x_deltas.alloc (count) ||\n+                  !rounded_y_deltas.alloc (count)))\n+      return false;\n+\n+    for (unsigned i = 0; i < count; i++)\n+    {\n+      int rounded_x_delta = (int) roundf (deltas_x.arrayZ[i]);\n+      int rounded_y_delta = (int) roundf (deltas_y.arrayZ[i]);\n+      rounded_x_deltas.push (rounded_x_delta);\n+      rounded_y_deltas.push (rounded_y_delta);\n+    }\n+\n+    if (!iup_delta_optimize (contour_points, rounded_x_deltas, rounded_y_deltas, opt_indices, tolerance))\n+      return false;\n+\n+    unsigned ref_count = 0;\n+    for (bool ref_flag : opt_indices)\n+       ref_count += ref_flag;\n+\n+    if (ref_count == count) return true;\n+\n+    hb_vector_t<float> opt_deltas_x, opt_deltas_y;\n+    bool is_comp_glyph_wo_deltas = (is_composite && ref_count == 0);\n+    if (is_comp_glyph_wo_deltas)\n+    {\n+      if (unlikely (!opt_deltas_x.resize (count) ||\n+                    !opt_deltas_y.resize (count)))\n+        return false;\n+\n+      opt_indices.arrayZ[0] = true;\n+      for (unsigned i = 1; i < count; i++)\n+        opt_indices.arrayZ[i] = false;\n+    }\n+\n+    hb_vector_t<unsigned char> opt_point_data;\n+    if (!compile_point_set (opt_indices, opt_point_data))\n+      return false;\n+    hb_vector_t<unsigned char> opt_deltas_data;\n+    if (!compile_deltas (opt_indices,\n+                         is_comp_glyph_wo_deltas ? opt_deltas_x : deltas_x,\n+                         is_comp_glyph_wo_deltas ? opt_deltas_y : deltas_y,\n+                         opt_deltas_data))\n+      return false;\n+\n+    hb_vector_t<unsigned char> point_data;\n+    if (!compile_point_set (indices, point_data))\n+      return false;\n+    hb_vector_t<unsigned char> deltas_data;\n+    if (!compile_deltas (indices, deltas_x, deltas_y, deltas_data))\n+      return false;\n+\n+    if (opt_point_data.length + opt_deltas_data.length < point_data.length + deltas_data.length)\n+    {\n+      indices.fini ();\n+      indices = std::move (opt_indices);\n+\n+      if (is_comp_glyph_wo_deltas)\n+      {\n+        deltas_x.fini ();\n+        deltas_x = std::move (opt_deltas_x);\n+\n+        deltas_y.fini ();\n+        deltas_y = std::move (opt_deltas_y);\n+      }\n+    }\n+    return !indices.in_error () && !deltas_x.in_error () && !deltas_y.in_error ();\n+  }\n+\n+  static bool compile_point_set (const hb_vector_t<bool> &point_indices,\n+                                 hb_vector_t<unsigned char>& compiled_points \/* OUT *\/)\n+  {\n+    unsigned num_points = 0;\n+    for (bool i : point_indices)\n+      if (i) num_points++;\n+\n+    \/* when iup optimization is enabled, num of referenced points could be 0 *\/\n+    if (!num_points) return true;\n+\n+    unsigned indices_length = point_indices.length;\n+    \/* If the points set consists of all points in the glyph, it's encoded with a\n+     * single zero byte *\/\n+    if (num_points == indices_length)\n+      return compiled_points.resize (1);\n+\n+    \/* allocate enough memories: 2 bytes for count + 3 bytes for each point *\/\n+    unsigned num_bytes = 2 + 3 *num_points;\n+    if (unlikely (!compiled_points.resize (num_bytes, false)))\n+      return false;\n+\n+    unsigned pos = 0;\n+    \/* binary data starts with the total number of reference points *\/\n+    if (num_points < 0x80)\n+      compiled_points.arrayZ[pos++] = num_points;\n+    else\n+    {\n+      compiled_points.arrayZ[pos++] = ((num_points >> 8) | 0x80);\n+      compiled_points.arrayZ[pos++] = num_points & 0xFF;\n+    }\n+\n+    const unsigned max_run_length = 0x7F;\n+    unsigned i = 0;\n+    unsigned last_value = 0;\n+    unsigned num_encoded = 0;\n+    while (i < indices_length && num_encoded < num_points)\n+    {\n+      unsigned run_length = 0;\n+      unsigned header_pos = pos;\n+      compiled_points.arrayZ[pos++] = 0;\n+\n+      bool use_byte_encoding = false;\n+      bool new_run = true;\n+      while (i < indices_length && num_encoded < num_points &&\n+             run_length <= max_run_length)\n+      {\n+        \/\/ find out next referenced point index\n+        while (i < indices_length && !point_indices[i])\n+          i++;\n+\n+        if (i >= indices_length) break;\n+\n+        unsigned cur_value = i;\n+        unsigned delta = cur_value - last_value;\n+\n+        if (new_run)\n+        {\n+          use_byte_encoding = (delta <= 0xFF);\n+          new_run = false;\n+        }\n+\n+        if (use_byte_encoding && delta > 0xFF)\n+          break;\n+\n+        if (use_byte_encoding)\n+          compiled_points.arrayZ[pos++] = delta;\n+        else\n+        {\n+          compiled_points.arrayZ[pos++] = delta >> 8;\n+          compiled_points.arrayZ[pos++] = delta & 0xFF;\n+        }\n+        i++;\n+        last_value = cur_value;\n+        run_length++;\n+        num_encoded++;\n+      }\n+\n+      if (use_byte_encoding)\n+        compiled_points.arrayZ[header_pos] = run_length - 1;\n+      else\n+        compiled_points.arrayZ[header_pos] = (run_length - 1) | 0x80;\n+    }\n+    return compiled_points.resize (pos, false);\n+  }\n+\n+  static double infer_delta (double target_val, double prev_val, double next_val, double prev_delta, double next_delta)\n@@ -1017,1 +830,1 @@\n-      return (prev_delta == next_delta) ? prev_delta : 0.f;\n+      return (prev_delta == next_delta) ? prev_delta : 0.0;\n@@ -1023,1 +836,1 @@\n-    float r = (target_val - prev_val) \/ (next_val - prev_val);\n+    double r = (target_val - prev_val) \/ (next_val - prev_val);\n@@ -1031,0 +844,1 @@\n+template <typename OffType = HBUINT16>\n@@ -1065,1 +879,1 @@\n-    hb_hashmap_t<const hb_vector_t<bool>*, hb_bytes_t> point_data_map;\n+    hb_hashmap_t<const hb_vector_t<bool>*, hb_vector_t<unsigned char>> point_data_map;\n@@ -1070,1 +884,1 @@\n-     * shared_points_bytes is just a copy of some value in the point_data_map,\n+     * shared_points_bytes is a pointer to some value in the point_data_map,\n@@ -1073,1 +887,1 @@\n-    hb_bytes_t shared_points_bytes;\n+    hb_vector_t<unsigned char> *shared_points_bytes = nullptr;\n@@ -1075,3 +889,6 @@\n-    \/* total compiled byte size as TupleVariationData format, initialized to its\n-     * min_size: 4 *\/\n-    unsigned compiled_byte_size = 4;\n+    \/* total compiled byte size as TupleVariationData format, initialized to 0 *\/\n+    unsigned compiled_byte_size = 0;\n+    bool needs_padding = false;\n+\n+    \/* for gvar iup delta optimization: whether this is a composite glyph *\/\n+    bool is_composite = false;\n@@ -1085,9 +902,1 @@\n-    ~tuple_variations_t () { fini (); }\n-    void fini ()\n-    {\n-      for (auto _ : point_data_map.values ())\n-        _.fini ();\n-\n-      point_set_count_map.fini ();\n-      tuple_vars.fini ();\n-    }\n+    ~tuple_variations_t () = default;\n@@ -1098,2 +907,7 @@\n-      unsigned count = tuple_vars.length;\n-      if (shared_points_bytes.length)\n+      unsigned count = 0;\n+      \/* when iup delta opt is enabled, compiled_deltas could be empty and we\n+       * should skip this tuple *\/\n+      for (auto& tuple: tuple_vars)\n+        if (tuple.compiled_deltas) count++;\n+\n+      if (shared_points_bytes && shared_points_bytes->length)\n@@ -1113,1 +927,2 @@\n-                                     const hb_array_t<const F2DOT14> shared_tuples)\n+                                     const hb_array_t<const F2DOT14> shared_tuples,\n+                                     bool is_composite_glyph)\n@@ -1120,1 +935,1 @@\n-        { fini (); return false; }\n+          return false;\n@@ -1125,1 +940,1 @@\n-        { fini (); return false; }\n+          return false;\n@@ -1131,2 +946,2 @@\n-            !TupleVariationData::unpack_points (p, private_indices, end))\n-        { fini (); return false; }\n+            !TupleVariationData::decompile_points (p, private_indices, end))\n+          return false;\n@@ -1141,2 +956,2 @@\n-                      !TupleVariationData::unpack_deltas (p, deltas_x, end)))\n-        { fini (); return false; }\n+                      !TupleVariationData::decompile_deltas (p, deltas_x, end)))\n+          return false;\n@@ -1148,2 +963,2 @@\n-                        !TupleVariationData::unpack_deltas (p, deltas_y, end)))\n-          { fini (); return false; }\n+                        !TupleVariationData::decompile_deltas (p, deltas_y, end)))\n+            return false;\n@@ -1156,1 +971,1 @@\n-        { fini (); return false; }\n+          return false;\n@@ -1159,1 +974,1 @@\n-        { fini (); return false; }\n+          return false;\n@@ -1166,1 +981,1 @@\n-          var.deltas_x[idx] = static_cast<float> (deltas_x[i]);\n+          var.deltas_x[idx] = deltas_x[i];\n@@ -1168,1 +983,1 @@\n-            var.deltas_y[idx] = static_cast<float> (deltas_y[i]);\n+            var.deltas_y[idx] = deltas_y[i];\n@@ -1172,0 +987,2 @@\n+\n+      is_composite = is_composite_glyph;\n@@ -1178,0 +995,1 @@\n+                                    unsigned& item_count,\n@@ -1187,1 +1005,2 @@\n-      unsigned item_count = inner_map ? inner_map->get_population () : var_data.get_item_count ();\n+      item_count = inner_map ? inner_map->get_population () : var_data.get_item_count ();\n+      if (!item_count) return true;\n@@ -1240,1 +1059,1 @@\n-        TripleDistances axis_triple_distances{1.f, 1.f};\n+        TripleDistances axis_triple_distances{1.0, 1.0};\n@@ -1253,1 +1072,1 @@\n-          { fini (); return false;}\n+            return false;\n@@ -1264,2 +1083,3 @@\n-    \/* merge tuple variations with overlapping tents *\/\n-    void merge_tuple_variations ()\n+    \/* merge tuple variations with overlapping tents, if iup delta optimization\n+     * is enabled, add default deltas to contour_points *\/\n+    bool merge_tuple_variations (contour_point_vector_t* contour_points = nullptr)\n@@ -1273,1 +1093,9 @@\n-        if (var.axis_tuples.is_empty ()) continue;\n+        if (var.axis_tuples.is_empty ())\n+        {\n+          \/* if iup_delta_optimize is enabled, add deltas to contour coords *\/\n+          if (contour_points && !contour_points->add_deltas (var.deltas_x,\n+                                                             var.deltas_y,\n+                                                             var.indices))\n+            return false;\n+          continue;\n+        }\n@@ -1283,1 +1111,2 @@\n-          m.set (&(var.axis_tuples), i);\n+          if (!m.set (&(var.axis_tuples), i))\n+            return false;\n@@ -1289,86 +1118,1 @@\n-    }\n-\n-    hb_bytes_t compile_point_set (const hb_vector_t<bool> &point_indices)\n-    {\n-      unsigned num_points = 0;\n-      for (bool i : point_indices)\n-        if (i) num_points++;\n-\n-      unsigned indices_length = point_indices.length;\n-      \/* If the points set consists of all points in the glyph, it's encoded with a\n-       * single zero byte *\/\n-      if (num_points == indices_length)\n-      {\n-        char *p = (char *) hb_calloc (1, sizeof (char));\n-        if (unlikely (!p)) return hb_bytes_t ();\n-\n-        return hb_bytes_t (p, 1);\n-      }\n-\n-      \/* allocate enough memories: 2 bytes for count + 3 bytes for each point *\/\n-      unsigned num_bytes = 2 + 3 *num_points;\n-      char *p = (char *) hb_calloc (num_bytes, sizeof (char));\n-      if (unlikely (!p)) return hb_bytes_t ();\n-\n-      unsigned pos = 0;\n-      \/* binary data starts with the total number of reference points *\/\n-      if (num_points < 0x80)\n-        p[pos++] = num_points;\n-      else\n-      {\n-        p[pos++] = ((num_points >> 8) | 0x80);\n-        p[pos++] = num_points & 0xFF;\n-      }\n-\n-      const unsigned max_run_length = 0x7F;\n-      unsigned i = 0;\n-      unsigned last_value = 0;\n-      unsigned num_encoded = 0;\n-      while (i < indices_length && num_encoded < num_points)\n-      {\n-        unsigned run_length = 0;\n-        unsigned header_pos = pos;\n-        p[pos++] = 0;\n-\n-        bool use_byte_encoding = false;\n-        bool new_run = true;\n-        while (i < indices_length && num_encoded < num_points &&\n-               run_length <= max_run_length)\n-        {\n-          \/\/ find out next referenced point index\n-          while (i < indices_length && !point_indices[i])\n-            i++;\n-\n-          if (i >= indices_length) break;\n-\n-          unsigned cur_value = i;\n-          unsigned delta = cur_value - last_value;\n-\n-          if (new_run)\n-          {\n-            use_byte_encoding = (delta <= 0xFF);\n-            new_run = false;\n-          }\n-\n-          if (use_byte_encoding && delta > 0xFF)\n-            break;\n-\n-          if (use_byte_encoding)\n-            p[pos++] = delta;\n-          else\n-          {\n-            p[pos++] = delta >> 8;\n-            p[pos++] = delta & 0xFF;\n-          }\n-          i++;\n-          last_value = cur_value;\n-          run_length++;\n-          num_encoded++;\n-        }\n-\n-        if (use_byte_encoding)\n-          p[header_pos] = run_length - 1;\n-        else\n-          p[header_pos] = (run_length - 1) | 0x80;\n-      }\n-      return hb_bytes_t (p, pos);\n+      return true;\n@@ -1394,2 +1138,2 @@\n-        hb_bytes_t compiled_data = compile_point_set (*points_set);\n-        if (unlikely (compiled_data == hb_bytes_t ()))\n+        hb_vector_t<unsigned char> compiled_point_data;\n+        if (!tuple_delta_t::compile_point_set (*points_set, compiled_point_data))\n@@ -1398,1 +1142,1 @@\n-        if (!point_data_map.set (points_set, compiled_data) ||\n+        if (!point_data_map.set (points_set, std::move (compiled_point_data)) ||\n@@ -1406,1 +1150,1 @@\n-    hb_bytes_t find_shared_points ()\n+    void find_shared_points ()\n@@ -1409,1 +1153,0 @@\n-      hb_bytes_t res{};\n@@ -1411,1 +1154,1 @@\n-      for (const auto& _ : point_data_map.iter ())\n+      for (const auto& _ : point_data_map.iter_ref ())\n@@ -1415,0 +1158,1 @@\n+        if (!data_length) continue;\n@@ -1418,1 +1162,4 @@\n-          return hb_bytes_t ();\n+        {\n+          shared_points_bytes = nullptr;\n+          return;\n+        }\n@@ -1424,1 +1171,1 @@\n-          res = _.second;\n+          shared_points_bytes = &(_.second);\n@@ -1427,1 +1174,0 @@\n-      return res;\n@@ -1430,1 +1176,1 @@\n-    bool calc_inferred_deltas (contour_point_vector_t& contour_points)\n+    bool calc_inferred_deltas (const contour_point_vector_t& contour_points)\n@@ -1439,0 +1185,10 @@\n+    bool iup_optimize (const contour_point_vector_t& contour_points)\n+    {\n+      for (tuple_delta_t& var : tuple_vars)\n+      {\n+        if (!var.optimize (contour_points, is_composite))\n+          return false;\n+      }\n+      return true;\n+    }\n+\n@@ -1442,1 +1198,2 @@\n-                      contour_point_vector_t* contour_points = nullptr)\n+                      contour_point_vector_t* contour_points = nullptr,\n+                      bool optimize = false)\n@@ -1452,1 +1209,8 @@\n-      merge_tuple_variations ();\n+      \/* if iup delta opt is on, contour_points can't be null *\/\n+      if (optimize && !contour_points)\n+        return false;\n+\n+      if (!merge_tuple_variations (optimize ? contour_points : nullptr))\n+        return false;\n+\n+      if (optimize && !iup_optimize (*contour_points)) return false;\n@@ -1459,0 +1223,1 @@\n+                        bool is_gvar = false,\n@@ -1461,0 +1226,4 @@\n+      \/\/ return true for empty glyph\n+      if (!tuple_vars)\n+        return true;\n+\n@@ -1465,0 +1234,4 @@\n+      \/* total compiled byte size as TupleVariationData format, initialized to its\n+       * min_size: 4 *\/\n+      compiled_byte_size += 4;\n+\n@@ -1467,2 +1240,3 @@\n-        shared_points_bytes = find_shared_points ();\n-        compiled_byte_size += shared_points_bytes.length;\n+        find_shared_points ();\n+        if (shared_points_bytes)\n+          compiled_byte_size += shared_points_bytes->length;\n@@ -1474,1 +1248,1 @@\n-        hb_bytes_t *points_data;\n+        hb_vector_t<unsigned char> *points_data;\n@@ -1478,0 +1252,5 @@\n+        \/* when iup optimization is enabled, num of referenced points could be 0\n+         * and thus the compiled points bytes is empty, we should skip compiling\n+         * this tuple *\/\n+        if (!points_data->length)\n+          continue;\n@@ -1481,1 +1260,1 @@\n-        unsigned points_data_length = (*points_data != shared_points_bytes) ? points_data->length : 0;\n+        unsigned points_data_length = (points_data != shared_points_bytes) ? points_data->length : 0;\n@@ -1487,0 +1266,7 @@\n+\n+      if (is_gvar && (compiled_byte_size % 2))\n+      {\n+        needs_padding = true;\n+        compiled_byte_size += 1;\n+      }\n+\n@@ -1505,2 +1291,5 @@\n-      if (is_gvar)\n-        shared_points_bytes.copy (c);\n+      if (is_gvar && shared_points_bytes)\n+      {\n+        hb_ubytes_t s (shared_points_bytes->arrayZ, shared_points_bytes->length);\n+        s.copy (c);\n+      }\n@@ -1511,1 +1300,1 @@\n-        hb_bytes_t *point_data;\n+        hb_vector_t<unsigned char> *point_data;\n@@ -1515,2 +1304,5 @@\n-        if (!is_gvar || *point_data != shared_points_bytes)\n-          point_data->copy (c);\n+        if (!is_gvar || point_data != shared_points_bytes)\n+        {\n+          hb_ubytes_t s (point_data->arrayZ, point_data->length);\n+          s.copy (c);\n+        }\n@@ -1523,1 +1315,1 @@\n-      if (is_gvar && (compiled_byte_size % 2))\n+      if (is_gvar && needs_padding)\n@@ -1554,1 +1346,1 @@\n-        if (!unpack_points (p, shared_indices, (const HBUINT8 *) (var_data_bytes.arrayZ + var_data_bytes.length))) return false;\n+        if (!decompile_points (p, shared_indices, (const HBUINT8 *) (var_data_bytes.arrayZ + var_data_bytes.length))) return false;\n@@ -1604,3 +1396,3 @@\n-  static bool unpack_points (const HBUINT8 *&p \/* IN\/OUT *\/,\n-                             hb_vector_t<unsigned int> &points \/* OUT *\/,\n-                             const HBUINT8 *end)\n+  static bool decompile_points (const HBUINT8 *&p \/* IN\/OUT *\/,\n+                                hb_vector_t<unsigned int> &points \/* OUT *\/,\n+                                const HBUINT8 *end)\n@@ -1656,3 +1448,5 @@\n-  static bool unpack_deltas (const HBUINT8 *&p \/* IN\/OUT *\/,\n-                             hb_vector_t<int> &deltas \/* IN\/OUT *\/,\n-                             const HBUINT8 *end)\n+  template <typename T>\n+  static bool decompile_deltas (const HBUINT8 *&p \/* IN\/OUT *\/,\n+                                hb_vector_t<T> &deltas \/* IN\/OUT *\/,\n+                                const HBUINT8 *end,\n+                                bool consume_all = false)\n@@ -1660,33 +1454,1 @@\n-    unsigned i = 0;\n-    unsigned count = deltas.length;\n-    while (i < count)\n-    {\n-      if (unlikely (p + 1 > end)) return false;\n-      unsigned control = *p++;\n-      unsigned run_count = (control & DELTA_RUN_COUNT_MASK) + 1;\n-      unsigned stop = i + run_count;\n-      if (unlikely (stop > count)) return false;\n-      if (control & DELTAS_ARE_ZERO)\n-      {\n-        for (; i < stop; i++)\n-          deltas.arrayZ[i] = 0;\n-      }\n-      else if (control & DELTAS_ARE_WORDS)\n-      {\n-        if (unlikely (p + run_count * HBUINT16::static_size > end)) return false;\n-        for (; i < stop; i++)\n-        {\n-          deltas.arrayZ[i] = * (const HBINT16 *) p;\n-          p += HBUINT16::static_size;\n-        }\n-      }\n-      else\n-      {\n-        if (unlikely (p + run_count > end)) return false;\n-        for (; i < stop; i++)\n-        {\n-          deltas.arrayZ[i] = * (const HBINT8 *) p++;\n-        }\n-      }\n-    }\n-    return true;\n+    return TupleValues::decompile (p, deltas, end, consume_all);\n@@ -1703,1 +1465,2 @@\n-                                   tuple_variations_t& tuple_variations \/* OUT *\/) const\n+                                   tuple_variations_t& tuple_variations, \/* OUT *\/\n+                                   bool is_composite_glyph = false) const\n@@ -1709,1 +1472,2 @@\n-                                                        shared_tuples);\n+                                                        shared_tuples,\n+                                                        is_composite_glyph);\n@@ -1761,1 +1525,1 @@\n-  Offset16To<HBUINT8>\n+  OffsetTo<HBUINT8, OffType>\n@@ -1766,1 +1530,1 @@\n-  DEFINE_SIZE_MIN (4);\n+  DEFINE_SIZE_MIN (2 + OffType::static_size);\n@@ -1769,1 +1533,2 @@\n-using tuple_variations_t = TupleVariationData::tuple_variations_t;\n+\/\/ TODO: Move tuple_variations_t to outside of TupleVariationData\n+using tuple_variations_t = TupleVariationData<HBUINT16>::tuple_variations_t;\n@@ -1778,0 +1543,8 @@\n+  \/* num of retained rows for each subtable, there're 2 cases when var_data is empty:\n+   * 1. retained item_count is zero\n+   * 2. regions is empty and item_count is non-zero.\n+   * when converting to tuples, both will be dropped because the tuple is empty,\n+   * however, we need to retain 2. as all-zero rows to keep original varidx\n+   * valid, so we need a way to remember the num of rows for each subtable *\/\n+  hb_vector_t<unsigned> var_data_num_rows;\n+\n@@ -1815,1 +1588,1 @@\n-  bool instantiate (const VariationStore& varStore,\n+  bool instantiate (const ItemVariationStore& varStore,\n@@ -1829,1 +1602,1 @@\n-  bool create_from_item_varstore (const VariationStore& varStore,\n+  bool create_from_item_varstore (const ItemVariationStore& varStore,\n@@ -1839,1 +1612,2 @@\n-    if (!vars.alloc (num_var_data)) return false;\n+    if (!vars.alloc (num_var_data) ||\n+        !var_data_num_rows.alloc (num_var_data)) return false;\n@@ -1846,0 +1620,1 @@\n+      unsigned item_count = 0;\n@@ -1849,0 +1624,1 @@\n+                                                      item_count,\n@@ -1852,0 +1628,1 @@\n+      var_data_num_rows.push (item_count);\n@@ -1854,1 +1631,1 @@\n-    return !vars.in_error ();\n+    return !vars.in_error () && !var_data_num_rows.in_error () && vars.length == var_data_num_rows.length;\n@@ -1907,1 +1684,3 @@\n-    if (!all_regions || !all_unique_regions) return false;\n+    \/* regions are empty means no variation data, return true *\/\n+    if (!all_regions || !all_unique_regions) return true;\n+\n@@ -1972,1 +1751,2 @@\n-    if (!region_list) return false;\n+    \/* return true if no variation data *\/\n+    if (!region_list) return true;\n@@ -1976,6 +1756,2 @@\n-    for (unsigned major = 0; major < vars.length; major++)\n-    {\n-      const tuple_variations_t& tuples = vars[major];\n-      \/* all tuples in each sub_table should have same num of deltas(num rows) *\/\n-      total_rows += tuples.tuple_vars[0].deltas_x.length;\n-    }\n+    for (unsigned major = 0; major < var_data_num_rows.length; major++)\n+      total_rows += var_data_num_rows[major];\n@@ -2001,1 +1777,1 @@\n-      unsigned num_rows = tuples.tuple_vars[0].deltas_x.length;\n+      unsigned num_rows = var_data_num_rows[major];\n@@ -2226,0 +2002,1 @@\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-common.hh","additions":408,"deletions":631,"binary":false,"changes":1039,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-                  version.sanitize (c) && likely (version.major == 1) &&\n+                  hb_barrier () &&\n+                  likely (version.major == 1) &&\n@@ -52,1 +53,1 @@\n-  const TupleVariationData* get_tuple_var_data (void) const\n+  const TupleVariationData<>* get_tuple_var_data (void) const\n@@ -60,1 +61,1 @@\n-                                   TupleVariationData::tuple_variations_t& tuple_variations \/* OUT *\/) const\n+                                   TupleVariationData<>::tuple_variations_t& tuple_variations \/* OUT *\/) const\n@@ -63,1 +64,1 @@\n-    TupleVariationData::tuple_iterator_t iterator;\n+    TupleVariationData<>::tuple_iterator_t iterator;\n@@ -65,1 +66,1 @@\n-    if (!TupleVariationData::get_tuple_iterator (var_data_bytes, axis_count, this,\n+    if (!TupleVariationData<>::get_tuple_iterator (var_data_bytes, axis_count, this,\n@@ -79,1 +80,1 @@\n-                                    const TupleVariationData *tuple_var_data,\n+                                    const TupleVariationData<> *tuple_var_data,\n@@ -85,1 +86,1 @@\n-    TupleVariationData::tuple_iterator_t iterator;\n+    TupleVariationData<>::tuple_iterator_t iterator;\n@@ -88,1 +89,1 @@\n-    if (!TupleVariationData::get_tuple_iterator (var_data_bytes, axis_count, base,\n+    if (!TupleVariationData<>::get_tuple_iterator (var_data_bytes, axis_count, base,\n@@ -109,1 +110,1 @@\n-          !TupleVariationData::unpack_points (p, private_indices, end))\n+          !TupleVariationData<>::decompile_points (p, private_indices, end))\n@@ -116,1 +117,1 @@\n-      if (unlikely (!TupleVariationData::unpack_deltas (p, unpacked_deltas, end))) return false;\n+      if (unlikely (!TupleVariationData<>::decompile_deltas (p, unpacked_deltas, end))) return false;\n@@ -131,1 +132,1 @@\n-                  TupleVariationData::tuple_variations_t& tuple_variations) const\n+                  TupleVariationData<>::tuple_variations_t& tuple_variations) const\n@@ -146,1 +147,1 @@\n-    OT::TupleVariationData::tuple_variations_t tuple_variations;\n+    OT::TupleVariationData<>::tuple_variations_t tuple_variations;\n@@ -171,1 +172,1 @@\n-                                        const TupleVariationData *tuple_var_data,\n+                                        const TupleVariationData<> *tuple_var_data,\n@@ -211,1 +212,1 @@\n-  TupleVariationData tupleVariationData; \/* TupleVariationDate for cvar table *\/\n+  TupleVariationData<> tupleVariationData; \/* TupleVariationDate for cvar table *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-cvar-table.hh","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  float axis_coord = coords[axis_index].to_float ();\n+  double axis_coord = static_cast<double>(coords[axis_index].to_float ());\n@@ -134,0 +134,1 @@\n+                  hb_barrier () &&\n@@ -235,1 +236,4 @@\n-    return TripleDistances (min, default_, max);\n+    return TripleDistances (\n+      static_cast<double>(min),\n+      static_cast<double>(default_),\n+      static_cast<double>(max));\n@@ -280,0 +284,1 @@\n+                  hb_barrier () &&\n@@ -282,0 +287,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-fvar-table.hh","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"hb-decycler.hh\"\n@@ -39,0 +40,1 @@\n+#define HB_OT_TAG_GVAR HB_TAG('G','V','A','R')\n@@ -40,1 +42,19 @@\n-namespace OT {\n+struct hb_glyf_scratch_t\n+{\n+  \/\/ glyf\n+  contour_point_vector_t all_points;\n+  contour_point_vector_t comp_points;\n+  hb_decycler_t decycler;\n+\n+  \/\/ gvar\n+  contour_point_vector_t orig_points;\n+  hb_vector_t<int> x_deltas;\n+  hb_vector_t<int> y_deltas;\n+  contour_point_vector_t deltas;\n+  hb_vector_t<unsigned int> shared_indices;\n+  hb_vector_t<unsigned int> private_indices;\n+\n+  \/\/ VARC\n+  hb_vector_t<unsigned> axisIndices;\n+  hb_vector_t<float> axisValues;\n+};\n@@ -42,2 +62,1 @@\n-struct GlyphVariationData : TupleVariationData\n-{};\n+namespace OT {\n@@ -45,0 +64,1 @@\n+template <typename OffsetType>\n@@ -47,1 +67,4 @@\n-  using tuple_variations_t = TupleVariationData::tuple_variations_t;\n+  \/\/ TODO: Move tuple_variations_t to outside of TupleVariationData\n+  using tuple_variations_t = typename TupleVariationData<OffsetType>::tuple_variations_t;\n+  using GlyphVariationData = TupleVariationData<OffsetType>;\n+\n@@ -75,1 +98,1 @@\n-    if (unlikely (!glyph_variations.alloc (plan->new_to_old_gid_list.length, true)))\n+    if (unlikely (!glyph_variations.alloc_exact (plan->new_to_old_gid_list.length)))\n@@ -89,2 +112,1 @@\n-      hb_vector_t<unsigned> shared_indices;\n-      GlyphVariationData::tuple_iterator_t iterator;\n+      typename GlyphVariationData::tuple_iterator_t iterator;\n@@ -93,0 +115,2 @@\n+      hb_vector_t<unsigned> shared_indices;\n+\n@@ -104,0 +128,3 @@\n+      bool is_composite_glyph = false;\n+      is_composite_glyph = plan->composite_new_gids.has (new_gid);\n+\n@@ -107,1 +134,2 @@\n-                                          tuple_vars \/* OUT *\/))\n+                                          tuple_vars, \/* OUT *\/\n+                                          is_composite_glyph))\n@@ -117,0 +145,2 @@\n+    bool iup_optimize = false;\n+    iup_optimize = plan->flags & HB_SUBSET_FLAGS_OPTIMIZE_IUP_DELTAS;\n@@ -123,1 +153,1 @@\n-      if (!glyph_variations[i].instantiate (plan->axes_location, plan->axes_triple_distances, all_points))\n+      if (!glyph_variations[i].instantiate (plan->axes_location, plan->axes_triple_distances, all_points, iup_optimize))\n@@ -137,0 +167,1 @@\n+                               true,\n@@ -255,1 +286,1 @@\n-    TupleVariationData* cur_glyph = c->start_embed<TupleVariationData> ();\n+    GlyphVariationData* cur_glyph = c->start_embed<GlyphVariationData> ();\n@@ -269,1 +300,1 @@\n-      TupleVariationData* next_glyph = c->start_embed<TupleVariationData> ();\n+      GlyphVariationData* next_glyph = c->start_embed<GlyphVariationData> ();\n@@ -292,1 +323,2 @@\n-struct gvar\n+template <typename GidOffsetType, unsigned TableTag>\n+struct gvar_GVAR\n@@ -294,1 +326,5 @@\n-  static constexpr hb_tag_t tableTag = HB_OT_TAG_gvar;\n+  static constexpr hb_tag_t tableTag = TableTag;\n+\n+  using GlyphVariationData = TupleVariationData<GidOffsetType>;\n+\n+  bool has_data () const { return version.to_int () != 0; }\n@@ -299,1 +335,3 @@\n-    return_trace (c->check_struct (this) && (version.major == 1) &&\n+    return_trace (c->check_struct (this) &&\n+                  hb_barrier () &&\n+                  (version.major == 1) &&\n@@ -311,1 +349,1 @@\n-                                   glyph_variations_t& glyph_vars \/* OUT *\/) const\n+                                   glyph_variations_t<GidOffsetType>& glyph_vars \/* OUT *\/) const\n@@ -338,1 +376,1 @@\n-                  const glyph_variations_t& glyph_vars,\n+                  const glyph_variations_t<GidOffsetType>& glyph_vars,\n@@ -341,1 +379,2 @@\n-                  unsigned num_glyphs) const\n+                  unsigned num_glyphs,\n+                  bool force_long_offsets) const\n@@ -344,1 +383,1 @@\n-    gvar *out = c->allocate_min<gvar> ();\n+    gvar_GVAR *out = c->allocate_min<gvar_GVAR> ();\n@@ -353,1 +392,4 @@\n-    bool long_offset = glyph_var_data_size & ~0xFFFFu;\n+    \/* According to the spec: If the short format (Offset16) is used for offsets,\n+     * the value stored is the offset divided by 2, so the maximum data size should\n+     * be 2 * 0xFFFFu, which is 0x1FFFEu *\/\n+    bool long_offset = glyph_var_data_size > 0x1FFFEu || force_long_offsets;\n@@ -383,1 +425,1 @@\n-    glyph_variations_t glyph_vars;\n+    glyph_variations_t<GidOffsetType> glyph_vars;\n@@ -394,1 +436,6 @@\n-    return_trace (serialize (c->serializer, glyph_vars, it, axis_count, num_glyphs));\n+\n+    bool force_long_offsets = false;\n+#ifdef HB_EXPERIMENTAL_API\n+    force_long_offsets = c->plan->flags & HB_SUBSET_FLAGS_IFTB_REQUIREMENTS;\n+#endif\n+    return_trace (serialize (c->serializer, glyph_vars, it, axis_count, num_glyphs, force_long_offsets));\n@@ -408,1 +455,1 @@\n-    gvar *out = c->serializer->allocate_min<gvar> ();\n+    gvar_GVAR *out = c->serializer->allocate_min<gvar_GVAR> ();\n@@ -429,1 +476,7 @@\n-    bool long_offset = subset_data_size & ~0xFFFFu;\n+    \/* According to the spec: If the short format (Offset16) is used for offsets,\n+     * the value stored is the offset divided by 2, so the maximum data size should\n+     * be 2 * 0xFFFFu, which is 0x1FFFEu *\/\n+    bool long_offset = subset_data_size > 0x1FFFEu;\n+#ifdef HB_EXPERIMENTAL_API\n+    long_offset = long_offset || (c->plan->flags & HB_SUBSET_FLAGS_IFTB_REQUIREMENTS);\n+#endif\n@@ -447,0 +500,2 @@\n+    \/* This ordering relative to the shared tuples array, which puts the glyphVariationData\n+       last in the table, is required when HB_SUBSET_FLAGS_IFTB_REQUIREMENTS is set *\/\n@@ -524,1 +579,1 @@\n-    _hb_compiler_memory_r_barrier ();\n+    hb_barrier ();\n@@ -534,0 +589,2 @@\n+    bool has_data () const { return table->has_data (); }\n+\n@@ -536,1 +593,1 @@\n-      table = hb_sanitize_context_t ().reference_table<gvar> (face);\n+      table = hb_sanitize_context_t ().reference_table<gvar_GVAR> (face);\n@@ -602,1 +659,1 @@\n-                                 hb_array_t<int> coords,\n+                                 hb_array_t<const int> coords,\n@@ -604,0 +661,1 @@\n+                                 hb_glyf_scratch_t &scratch,\n@@ -610,2 +668,5 @@\n-      hb_vector_t<unsigned int> shared_indices;\n-      GlyphVariationData::tuple_iterator_t iterator;\n+\n+      auto &shared_indices = scratch.shared_indices;\n+      shared_indices.clear ();\n+\n+      typename GlyphVariationData::tuple_iterator_t iterator;\n@@ -618,1 +679,2 @@\n-      contour_point_vector_t orig_points_vec; \/\/ Populated lazily\n+      auto &orig_points_vec = scratch.orig_points;\n+      orig_points_vec.clear (); \/\/ Populated lazily\n@@ -622,1 +684,2 @@\n-      contour_point_vector_t deltas_vec; \/\/ Populated lazily\n+      auto &deltas_vec = scratch.deltas;\n+      deltas_vec.clear (); \/\/ Populated lazily\n@@ -625,2 +688,0 @@\n-      hb_vector_t<unsigned> end_points; \/\/ Populated lazily\n-\n@@ -630,3 +691,4 @@\n-      hb_vector_t<unsigned int> private_indices;\n-      hb_vector_t<int> x_deltas;\n-      hb_vector_t<int> y_deltas;\n+      auto &private_indices = scratch.private_indices;\n+      auto &x_deltas = scratch.x_deltas;\n+      auto &y_deltas = scratch.y_deltas;\n+\n@@ -657,1 +719,1 @@\n-            !GlyphVariationData::unpack_points (p, private_indices, end))\n+            !GlyphVariationData::decompile_points (p, private_indices, end))\n@@ -664,1 +726,1 @@\n-        if (unlikely (!GlyphVariationData::unpack_deltas (p, x_deltas, end))) return false;\n+        if (unlikely (!GlyphVariationData::decompile_deltas (p, x_deltas, end))) return false;\n@@ -666,1 +728,1 @@\n-        if (unlikely (!GlyphVariationData::unpack_deltas (p, y_deltas, end))) return false;\n+        if (unlikely (!GlyphVariationData::decompile_deltas (p, y_deltas, end))) return false;\n@@ -703,2 +765,2 @@\n-            delta.x += x_deltas.arrayZ[i] * scalar;\n-            delta.y += y_deltas.arrayZ[i] * scalar;\n+            delta.add_delta (x_deltas.arrayZ[i] * scalar,\n+                             y_deltas.arrayZ[i] * scalar);\n@@ -715,4 +777,3 @@\n-                unsigned int pt_index = i;\n-                auto &delta = deltas.arrayZ[pt_index];\n-                delta.x += x_deltas.arrayZ[i] * scalar;\n-                delta.y += y_deltas.arrayZ[i] * scalar;\n+                auto &delta = deltas.arrayZ[i];\n+                delta.add_delta (x_deltas.arrayZ[i] * scalar,\n+                                 y_deltas.arrayZ[i] * scalar);\n@@ -728,2 +789,2 @@\n-                delta.x += x_deltas.arrayZ[i] * scalar;\n-                delta.y += y_deltas.arrayZ[i] * scalar;\n+                delta.add_delta (x_deltas.arrayZ[i] * scalar,\n+                                 y_deltas.arrayZ[i] * scalar);\n@@ -737,4 +798,3 @@\n-                unsigned int pt_index = i;\n-                auto &delta = deltas.arrayZ[pt_index];\n-                delta.x += x_deltas.arrayZ[i];\n-                delta.y += y_deltas.arrayZ[i];\n+                auto &delta = deltas.arrayZ[i];\n+                delta.add_delta (x_deltas.arrayZ[i],\n+                                 y_deltas.arrayZ[i]);\n@@ -750,2 +810,2 @@\n-                delta.x += x_deltas.arrayZ[i];\n-                delta.y += y_deltas.arrayZ[i];\n+                delta.add_delta (x_deltas.arrayZ[i],\n+                                 y_deltas.arrayZ[i]);\n@@ -759,8 +819,0 @@\n-          if (!end_points)\n-          {\n-            for (unsigned i = 0; i < count; ++i)\n-              if (points.arrayZ[i].is_end_point)\n-                end_points.push (i);\n-            if (unlikely (end_points.in_error ())) return false;\n-          }\n-\n@@ -768,1 +820,2 @@\n-          for (unsigned end_point : end_points)\n+          unsigned end_point = 0;\n+          while (true)\n@@ -770,0 +823,4 @@\n+            while (end_point < count && !points.arrayZ[end_point].is_end_point)\n+              end_point++;\n+            if (unlikely (end_point == count)) break;\n+\n@@ -812,1 +869,1 @@\n-            start_point = end_point + 1;\n+            start_point = end_point = end_point + 1;\n@@ -832,1 +889,1 @@\n-    hb_blob_ptr_t<gvar> table;\n+    hb_blob_ptr_t<gvar_GVAR> table;\n@@ -850,1 +907,1 @@\n-  HBUINT16      glyphCountX;    \/* The number of glyphs in this font. This must match the number of\n+  GidOffsetType glyphCountX;    \/* The number of glyphs in this font. This must match the number of\n@@ -865,0 +922,3 @@\n+using gvar = gvar_GVAR<HBUINT16, HB_OT_TAG_gvar>;\n+using GVAR = gvar_GVAR<HBUINT24, HB_OT_TAG_GVAR>;\n+\n@@ -868,0 +928,3 @@\n+struct GVAR_accelerator_t : GVAR::accelerator_t {\n+  GVAR_accelerator_t (hb_face_t *face) : GVAR::accelerator_t (face) {}\n+};\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-gvar-table.hh","additions":127,"deletions":64,"binary":false,"changes":191,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-             const VariationStore &_var_store,\n+             const ItemVariationStore &_var_store,\n@@ -266,1 +266,1 @@\n-  const VariationStore *var_store;\n+  const ItemVariationStore *var_store;\n@@ -291,0 +291,1 @@\n+                  hb_barrier () &&\n@@ -298,1 +299,1 @@\n-  const VariationStore& get_var_store () const\n+  const ItemVariationStore& get_var_store () const\n@@ -386,1 +387,1 @@\n-                                    VariationStore::cache_t *store_cache = nullptr) const\n+                                    ItemVariationStore::cache_t *store_cache = nullptr) const\n@@ -407,1 +408,1 @@\n-  Offset32To<VariationStore>\n+  Offset32To<ItemVariationStore>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-hvar-table.hh","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  VarIdx        varIdx;         \/* Outer\/inner index into VariationStore item. *\/\n+  VarIdx        varIdx;         \/* Outer\/inner index into ItemVariationStore item. *\/\n@@ -80,0 +80,1 @@\n+                  hb_barrier () &&\n@@ -82,0 +83,1 @@\n+                  hb_barrier () &&\n@@ -107,1 +109,1 @@\n-    const VariationStore& src_var_store = this+varStore;\n+    const ItemVariationStore& src_var_store = this+varStore;\n@@ -160,1 +162,1 @@\n-  Offset16To<VariationStore>\n+  Offset16To<ItemVariationStore>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-mvar-table.hh","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -120,0 +120,1 @@\n+                  hb_barrier () &&\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-vorg-table.hh","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"hb-geometry.hh\"\n@@ -32,162 +33,0 @@\n-typedef struct hb_extents_t\n-{\n-  hb_extents_t () {}\n-  hb_extents_t (float xmin, float ymin, float xmax, float ymax) :\n-    xmin (xmin), ymin (ymin), xmax (xmax), ymax (ymax) {}\n-\n-  bool is_empty () const { return xmin >= xmax || ymin >= ymax; }\n-  bool is_void () const { return xmin > xmax; }\n-\n-  void union_ (const hb_extents_t &o)\n-  {\n-    xmin = hb_min (xmin, o.xmin);\n-    ymin = hb_min (ymin, o.ymin);\n-    xmax = hb_max (xmax, o.xmax);\n-    ymax = hb_max (ymax, o.ymax);\n-  }\n-\n-  void intersect (const hb_extents_t &o)\n-  {\n-    xmin = hb_max (xmin, o.xmin);\n-    ymin = hb_max (ymin, o.ymin);\n-    xmax = hb_min (xmax, o.xmax);\n-    ymax = hb_min (ymax, o.ymax);\n-  }\n-\n-  void\n-  add_point (float x, float y)\n-  {\n-    if (unlikely (is_void ()))\n-    {\n-      xmin = xmax = x;\n-      ymin = ymax = y;\n-    }\n-    else\n-    {\n-      xmin = hb_min (xmin, x);\n-      ymin = hb_min (ymin, y);\n-      xmax = hb_max (xmax, x);\n-      ymax = hb_max (ymax, y);\n-    }\n-  }\n-\n-  float xmin = 0.f;\n-  float ymin = 0.f;\n-  float xmax = -1.f;\n-  float ymax = -1.f;\n-} hb_extents_t;\n-\n-typedef struct hb_transform_t\n-{\n-  hb_transform_t () {}\n-  hb_transform_t (float xx, float yx,\n-                  float xy, float yy,\n-                  float x0, float y0) :\n-    xx (xx), yx (yx), xy (xy), yy (yy), x0 (x0), y0 (y0) {}\n-\n-  void multiply (const hb_transform_t &o)\n-  {\n-    \/* Copied from cairo, with \"o\" being \"a\" there and \"this\" being \"b\" there. *\/\n-    hb_transform_t r;\n-\n-    r.xx = o.xx * xx + o.yx * xy;\n-    r.yx = o.xx * yx + o.yx * yy;\n-\n-    r.xy = o.xy * xx + o.yy * xy;\n-    r.yy = o.xy * yx + o.yy * yy;\n-\n-    r.x0 = o.x0 * xx + o.y0 * xy + x0;\n-    r.y0 = o.x0 * yx + o.y0 * yy + y0;\n-\n-    *this = r;\n-  }\n-\n-  void transform_distance (float &dx, float &dy) const\n-  {\n-    float new_x = xx * dx + xy * dy;\n-    float new_y = yx * dx + yy * dy;\n-    dx = new_x;\n-    dy = new_y;\n-  }\n-\n-  void transform_point (float &x, float &y) const\n-  {\n-    transform_distance (x, y);\n-    x += x0;\n-    y += y0;\n-  }\n-\n-  void transform_extents (hb_extents_t &extents) const\n-  {\n-    float quad_x[4], quad_y[4];\n-\n-    quad_x[0] = extents.xmin;\n-    quad_y[0] = extents.ymin;\n-    quad_x[1] = extents.xmin;\n-    quad_y[1] = extents.ymax;\n-    quad_x[2] = extents.xmax;\n-    quad_y[2] = extents.ymin;\n-    quad_x[3] = extents.xmax;\n-    quad_y[3] = extents.ymax;\n-\n-    extents = hb_extents_t {};\n-    for (unsigned i = 0; i < 4; i++)\n-    {\n-      transform_point (quad_x[i], quad_y[i]);\n-      extents.add_point (quad_x[i], quad_y[i]);\n-    }\n-  }\n-\n-  float xx = 1.f;\n-  float yx = 0.f;\n-  float xy = 0.f;\n-  float yy = 1.f;\n-  float x0 = 0.f;\n-  float y0 = 0.f;\n-} hb_transform_t;\n-\n-typedef struct hb_bounds_t\n-{\n-  enum status_t {\n-    UNBOUNDED,\n-    BOUNDED,\n-    EMPTY,\n-  };\n-\n-  hb_bounds_t (status_t status) : status (status) {}\n-  hb_bounds_t (const hb_extents_t &extents) :\n-    status (extents.is_empty () ? EMPTY : BOUNDED), extents (extents) {}\n-\n-  void union_ (const hb_bounds_t &o)\n-  {\n-    if (o.status == UNBOUNDED)\n-      status = UNBOUNDED;\n-    else if (o.status == BOUNDED)\n-    {\n-      if (status == EMPTY)\n-        *this = o;\n-      else if (status == BOUNDED)\n-        extents.union_ (o.extents);\n-    }\n-  }\n-\n-  void intersect (const hb_bounds_t &o)\n-  {\n-    if (o.status == EMPTY)\n-      status = EMPTY;\n-    else if (o.status == BOUNDED)\n-    {\n-      if (status == UNBOUNDED)\n-        *this = o;\n-      else if (status == BOUNDED)\n-      {\n-        extents.intersect (o.extents);\n-        if (extents.is_empty ())\n-          status = EMPTY;\n-      }\n-    }\n-  }\n-\n-  status_t status;\n-  hb_extents_t extents;\n-} hb_bounds_t;\n@@ -234,1 +73,4 @@\n-    clips.push (hb_bounds_t {extents});\n+    auto bounds = hb_bounds_t {extents};\n+    bounds.intersect (clips.tail ());\n+\n+    clips.push (bounds);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-paint-extents.hh","additions":5,"deletions":163,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n- * Return value: %true if the glyph was painted, %false otherwise.\n+ * Return value: `true` if the glyph was painted, `false` otherwise.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-paint.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+  bool alloc (unsigned size)\n+  { return heap.alloc (size); }\n+\n@@ -163,1 +166,1 @@\n-  void swap (unsigned a, unsigned b)\n+  void swap (unsigned a, unsigned b) noexcept\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-priority-queue.hh","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -241,0 +241,48 @@\n+static inline\n+bool _resolve_shared_overflow(const hb_vector_t<graph::overflow_record_t>& overflows,\n+                              int overflow_index,\n+                              graph_t& sorted_graph)\n+{\n+  const graph::overflow_record_t& r = overflows[overflow_index];\n+\n+  \/\/ Find all of the parents in overflowing links that link to this\n+  \/\/ same child node. We will then try duplicating the child node and\n+  \/\/ re-assigning all of these parents to the duplicate.\n+  hb_set_t parents;\n+  parents.add(r.parent);\n+  for (int i = overflow_index - 1; i >= 0; i--) {\n+    const graph::overflow_record_t& r2 = overflows[i];\n+    if (r2.child == r.child) {\n+      parents.add(r2.parent);\n+    }\n+  }\n+\n+  unsigned result = sorted_graph.duplicate(&parents, r.child);\n+  if (result == (unsigned) -1 && parents.get_population() > 2) {\n+    \/\/ All links to the child are overflowing, so we can't include all\n+    \/\/ in the duplication. Remove one parent from the duplication.\n+    \/\/ Remove the lowest index parent, which will be the closest to the child.\n+    parents.del(parents.get_min());\n+    result = sorted_graph.duplicate(&parents, r.child);\n+  }\n+\n+  if (result == (unsigned) -1) return result;\n+\n+  if (parents.get_population() > 1) {\n+    \/\/ If the duplicated node has more than one parent pre-emptively raise it's priority to the maximum.\n+    \/\/ This will place it close to the parents. Node's with only one parent, don't need this as normal overflow\n+    \/\/ resolution will raise priority if needed.\n+    \/\/\n+    \/\/ Reasoning: most of the parents to this child are likely at the same layer in the graph. Duplicating\n+    \/\/ the child will theoretically allow it to be placed closer to it's parents. However, due to the shortest\n+    \/\/ distance sort by default it's placement will remain in the same layer, thus it will remain in roughly the\n+    \/\/ same position (and distance from parents) as the original child node. The overflow resolution will attempt\n+    \/\/ to move nodes closer, but only for non-shared nodes. Since this node is shared, it will simply be given\n+    \/\/ further duplication which defeats the attempt to duplicate with multiple parents. To fix this we\n+    \/\/ pre-emptively raise priority now which allows the duplicated node to pack into the same layer as it's parents.\n+    sorted_graph.vertices_[result].give_max_priority();\n+  }\n+\n+  return result;\n+}\n+\n@@ -257,1 +305,1 @@\n-      if (sorted_graph.duplicate (r.parent, r.child) == (unsigned) -1) continue;\n+      if (!_resolve_shared_overflow(overflows, i, sorted_graph)) continue;\n@@ -292,1 +340,1 @@\n-                            bool recalculate_extensions,\n+                            bool always_recalculate_extensions,\n@@ -295,0 +343,1 @@\n+  DEBUG_MSG (SUBSET_REPACK, nullptr, \"Repacking %c%c%c%c.\", HB_UNTAG(table_tag));\n@@ -306,0 +355,1 @@\n+  bool is_gsub_or_gpos = (table_tag == HB_OT_TAG_GPOS ||  table_tag == HB_OT_TAG_GSUB);\n@@ -307,3 +357,1 @@\n-  if ((table_tag == HB_OT_TAG_GPOS\n-       ||  table_tag == HB_OT_TAG_GSUB)\n-      && will_overflow)\n+  if (is_gsub_or_gpos && will_overflow)\n@@ -311,1 +359,2 @@\n-    if (recalculate_extensions)\n+    DEBUG_MSG (SUBSET_REPACK, nullptr, \"Applying GSUB\/GPOS repacking specializations.\");\n+    if (always_recalculate_extensions)\n@@ -367,0 +416,7 @@\n+    if (is_gsub_or_gpos && !always_recalculate_extensions) {\n+      \/\/ If this a GSUB\/GPOS table and we didn't try to extension promotion and table splitting then\n+      \/\/ as a last ditch effort, re-run the repacker with it enabled.\n+      DEBUG_MSG (SUBSET_REPACK, nullptr, \"Failed to find a resolution. Re-running with extension promotion and table splitting enabled.\");\n+      return hb_resolve_graph_overflows (table_tag, max_rounds, true, sorted_graph);\n+    }\n+\n@@ -391,1 +447,1 @@\n-                      unsigned max_rounds = 20,\n+                      unsigned max_rounds = 32,\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-repacker.hh","additions":63,"deletions":7,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n- * The sanitize() method of each object type shall return true if it's safe to\n- * call other methods of the object, and %false otherwise.\n+ * The sanitize() method of each object type shall return `true` if it's safe to\n+ * call other methods of the object, and `false` otherwise.\n@@ -137,1 +137,4 @@\n-  { return format->sanitize (this); }\n+  {\n+    return format->sanitize (this) &&\n+           hb_barrier ();\n+  }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-sanitize.hh","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,3 +39,1 @@\n-#ifdef HB_EXPERIMENTAL_API\n-#include \"hb-subset-repacker.h\"\n-#endif\n+#include \"hb-subset-serialize.h\"\n@@ -78,2 +76,1 @@\n-#ifdef HB_EXPERIMENTAL_API\n-    object_t (const hb_object_t &o)\n+    object_t (const hb_subset_serialize_object_t &o)\n@@ -84,1 +81,1 @@\n-      real_links.alloc (o.num_real_links, true);\n+      real_links.alloc_exact (o.num_real_links);\n@@ -88,1 +85,1 @@\n-      virtual_links.alloc (o.num_virtual_links, true);\n+      virtual_links.alloc_exact (o.num_virtual_links);\n@@ -92,1 +89,0 @@\n-#endif\n@@ -94,1 +90,21 @@\n-    friend void swap (object_t& a, object_t& b)\n+    bool add_virtual_link (objidx_t objidx)\n+    {\n+      if (!objidx)\n+        return false;\n+\n+      auto& link = *virtual_links.push ();\n+      if (virtual_links.in_error ())\n+        return false;\n+\n+      link.objidx = objidx;\n+      \/\/ Remaining fields were previously zero'd by push():\n+      \/\/ link.width = 0;\n+      \/\/ link.is_signed = 0;\n+      \/\/ link.whence = 0;\n+      \/\/ link.position = 0;\n+      \/\/ link.bias = 0;\n+\n+      return true;\n+    }\n+\n+    friend void swap (object_t& a, object_t& b) noexcept\n@@ -131,2 +147,1 @@\n-#ifdef HB_EXPERIMENTAL_API\n-      link_t (const hb_link_t &o)\n+      link_t (const hb_subset_serialize_link_t &o)\n@@ -141,1 +156,0 @@\n-#endif\n@@ -159,1 +173,1 @@\n-        (( hb_concat (this->real_links, this->virtual_links) ));\n+        (( hb_concat (real_links, virtual_links) ));\n@@ -161,1 +175,1 @@\n-        (( hb_concat (this->real_links.writer (), this->virtual_links.writer ()) ));\n+        (( hb_concat (real_links.writer (), virtual_links.writer ()) ));\n@@ -383,0 +397,1 @@\n+        object_pool.release (obj);\n@@ -446,3 +461,5 @@\n-      packed_map.del (packed.tail ());\n-      assert (!packed.tail ()->next);\n-      packed.tail ()->fini ();\n+      object_t *obj = packed.tail ();\n+      packed_map.del (obj);\n+      assert (!obj->next);\n+      obj->fini ();\n+      object_pool.release (obj);\n@@ -472,2 +489,1 @@\n-    auto& link = *current->virtual_links.push ();\n-    if (current->virtual_links.in_error ())\n+    if (!current->add_virtual_link(objidx))\n@@ -475,0 +491,23 @@\n+  }\n+\n+  objidx_t last_added_child_index() const {\n+    if (unlikely (in_error ())) return (objidx_t) -1;\n+\n+    assert (current);\n+    if (!bool(current->real_links)) {\n+      return (objidx_t) -1;\n+    }\n+\n+    return current->real_links[current->real_links.length - 1].objidx;\n+  }\n+\n+  \/\/ For the current object ensure that the sub-table bytes for child objidx are always placed\n+  \/\/ after the subtable bytes for any other existing children. This only ensures that the\n+  \/\/ repacker will not move the target subtable before the other children\n+  \/\/ (by adding virtual links). It is up to the caller to ensure the initial serialization\n+  \/\/ order is correct.\n+  void repack_last(objidx_t objidx) {\n+    if (unlikely (in_error ())) return;\n+\n+    if (!objidx)\n+      return;\n@@ -476,6 +515,8 @@\n-    link.width = 0;\n-    link.objidx = objidx;\n-    link.is_signed = 0;\n-    link.whence = 0;\n-    link.position = 0;\n-    link.bias = 0;\n+    assert (current);\n+    for (auto& l : current->real_links) {\n+      if (l.objidx == objidx) {\n+        continue;\n+      }\n+\n+      packed[l.objidx]->add_virtual_link(objidx);\n+    }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-serialize.hh","additions":66,"deletions":25,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n- * The main filter we use is a combination of three bits-pattern\n+ * The main filter we use is a combination of four bits-pattern\n@@ -67,2 +67,3 @@\n-template <typename mask_t, unsigned int shift>\n-struct hb_set_digest_bits_pattern_t\n+static constexpr unsigned hb_set_digest_shifts[] = {4, 0, 6};\n+\n+struct hb_set_digest_t\n@@ -70,0 +71,4 @@\n+  \/\/ No science in these. Intuition and testing only.\n+  using mask_t = uint64_t;\n+\n+  static constexpr unsigned n = ARRAY_LENGTH_CONST (hb_set_digest_shifts);\n@@ -72,7 +77,3 @@\n-  static constexpr unsigned num_bits = 0\n-                                     + (mask_bytes >= 1 ? 3 : 0)\n-                                     + (mask_bytes >= 2 ? 1 : 0)\n-                                     + (mask_bytes >= 4 ? 1 : 0)\n-                                     + (mask_bytes >= 8 ? 1 : 0)\n-                                     + (mask_bytes >= 16? 1 : 0)\n-                                     + 0;\n+  static constexpr hb_codepoint_t mb1 = mask_bits - 1;\n+  static constexpr mask_t one = 1;\n+  static constexpr mask_t all = (mask_t) -1;\n@@ -80,2 +81,2 @@\n-  static_assert ((shift < sizeof (hb_codepoint_t) * 8), \"\");\n-  static_assert ((shift + num_bits <= sizeof (hb_codepoint_t) * 8), \"\");\n+  void init ()\n+  { for (unsigned i = 0; i < n; i++) masks[i] = 0; }\n@@ -83,1 +84,1 @@\n-  void init () { mask = 0; }\n+  void clear () { init (); }\n@@ -85,1 +86,6 @@\n-  void add (const hb_set_digest_bits_pattern_t &o) { mask |= o.mask; }\n+  static hb_set_digest_t full ()\n+  {\n+    hb_set_digest_t d;\n+    for (unsigned i = 0; i < n; i++) d.masks[i] = all;\n+    return d;\n+  }\n@@ -87,1 +93,2 @@\n-  void add (hb_codepoint_t g) { mask |= mask_for (g); }\n+  void union_ (const hb_set_digest_t &o)\n+  { for (unsigned i = 0; i < n; i++) masks[i] |= o.masks[i]; }\n@@ -91,7 +98,10 @@\n-    if (mask == (mask_t) -1) return false;\n-    if ((b >> shift) - (a >> shift) >= mask_bits - 1)\n-    {\n-      mask = (mask_t) -1;\n-      return false;\n-    }\n-    else\n+    bool ret;\n+\n+    ret = false;\n+    for (unsigned i = 0; i < n; i++)\n+      if (masks[i] != all)\n+        ret = true;\n+    if (!ret) return false;\n+\n+    ret = false;\n+    for (unsigned i = 0; i < n; i++)\n@@ -99,4 +109,10 @@\n-      mask_t ma = mask_for (a);\n-      mask_t mb = mask_for (b);\n-      mask |= mb + (mb - ma) - (mb < ma);\n-      return true;\n+      mask_t shift = hb_set_digest_shifts[i];\n+      if ((b >> shift) - (a >> shift) >= mb1)\n+        masks[i] = all;\n+      else\n+      {\n+        mask_t ma = one << ((a >> shift) & mb1);\n+        mask_t mb = one << ((b >> shift) & mb1);\n+        masks[i] |= mb + (mb - ma) - (mb < ma);\n+        ret = true;\n+      }\n@@ -104,0 +120,1 @@\n+    return ret;\n@@ -126,21 +143,2 @@\n-  bool may_have (const hb_set_digest_bits_pattern_t &o) const\n-  { return mask & o.mask; }\n-\n-  bool may_have (hb_codepoint_t g) const\n-  { return mask & mask_for (g); }\n-\n-  private:\n-\n-  static mask_t mask_for (hb_codepoint_t g)\n-  { return ((mask_t) 1) << ((g >> shift) & (mask_bits - 1)); }\n-  mask_t mask;\n-};\n-\n-template <typename head_t, typename tail_t>\n-struct hb_set_digest_combiner_t\n-{\n-  void init ()\n-  {\n-    head.init ();\n-    tail.init ();\n-  }\n+  bool operator [] (hb_codepoint_t g) const\n+  { return may_have (g); }\n@@ -148,5 +146,0 @@\n-  void add (const hb_set_digest_combiner_t &o)\n-  {\n-    head.add (o.head);\n-    tail.add (o.tail);\n-  }\n@@ -156,21 +149,2 @@\n-    head.add (g);\n-    tail.add (g);\n-  }\n-\n-  bool add_range (hb_codepoint_t a, hb_codepoint_t b)\n-  {\n-    return (int) head.add_range (a, b) | (int) tail.add_range (a, b);\n-  }\n-  template <typename T>\n-  void add_array (const T *array, unsigned int count, unsigned int stride=sizeof(T))\n-  {\n-    head.add_array (array, count, stride);\n-    tail.add_array (array, count, stride);\n-  }\n-  template <typename T>\n-  void add_array (const hb_array_t<const T>& arr) { add_array (&arr, arr.len ()); }\n-  template <typename T>\n-  bool add_sorted_array (const T *array, unsigned int count, unsigned int stride=sizeof(T))\n-  {\n-    return head.add_sorted_array (array, count, stride) &&\n-           tail.add_sorted_array (array, count, stride);\n+    for (unsigned i = 0; i < n; i++)\n+      masks[i] |= one << ((g >> hb_set_digest_shifts[i]) & mb1);\n@@ -178,2 +152,0 @@\n-  template <typename T>\n-  bool add_sorted_array (const hb_sorted_array_t<const T>& arr) { return add_sorted_array (&arr, arr.len ()); }\n@@ -181,1 +153,2 @@\n-  bool may_have (const hb_set_digest_combiner_t &o) const\n+  HB_ALWAYS_INLINE\n+  bool may_have (hb_codepoint_t g) const\n@@ -183,1 +156,4 @@\n-    return head.may_have (o.head) && tail.may_have (o.tail);\n+    for (unsigned i = 0; i < n; i++)\n+      if (!(masks[i] & (one << ((g >> hb_set_digest_shifts[i]) & mb1))))\n+        return false;\n+    return true;\n@@ -186,1 +162,1 @@\n-  bool may_have (hb_codepoint_t g) const\n+  bool may_intersect (const hb_set_digest_t &o) const\n@@ -188,1 +164,4 @@\n-    return head.may_have (g) && tail.may_have (g);\n+    for (unsigned i = 0; i < n; i++)\n+      if (!(masks[i] & o.masks[i]))\n+        return false;\n+    return true;\n@@ -192,4 +171,0 @@\n-  head_t head;\n-  tail_t tail;\n-};\n-\n@@ -197,18 +172,2 @@\n-\/*\n- * hb_set_digest_t\n- *\n- * This is a combination of digests that performs \"best\".\n- * There is not much science to this: it's a result of intuition\n- * and testing.\n- *\/\n-using hb_set_digest_t =\n-  hb_set_digest_combiner_t\n-  <\n-    hb_set_digest_bits_pattern_t<unsigned long, 4>,\n-    hb_set_digest_combiner_t\n-    <\n-      hb_set_digest_bits_pattern_t<unsigned long, 0>,\n-      hb_set_digest_bits_pattern_t<unsigned long, 9>\n-    >\n-  >\n-;\n+  mask_t masks[n] = {};\n+};\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-set-digest.hh","additions":60,"deletions":101,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+  static constexpr bool realloc_move = true;\n+\n@@ -45,1 +47,1 @@\n-  hb_sparseset_t (hb_sparseset_t&& other) : hb_sparseset_t () { s = std::move (other.s); }\n+  hb_sparseset_t (hb_sparseset_t&& other)  noexcept : hb_sparseset_t () { s = std::move (other.s); }\n@@ -47,2 +49,2 @@\n-  hb_sparseset_t& operator = (hb_sparseset_t&& other) { s = std::move (other.s); return *this; }\n-  friend void swap (hb_sparseset_t& a, hb_sparseset_t& b) { hb_swap (a.s, b.s); }\n+  hb_sparseset_t& operator = (hb_sparseset_t&& other)  noexcept { s = std::move (other.s); return *this; }\n+  friend void swap (hb_sparseset_t& a, hb_sparseset_t& b)  noexcept { hb_swap (a.s, b.s); }\n@@ -87,1 +89,1 @@\n-  bool add_range (hb_codepoint_t a, hb_codepoint_t b) { return s.add_range (a, b); }\n+  bool add_range (hb_codepoint_t first, hb_codepoint_t last) { return s.add_range (first, last); }\n@@ -107,0 +109,1 @@\n+  bool may_have (hb_codepoint_t g) const { return get (g); }\n@@ -121,0 +124,3 @@\n+  bool may_intersect (const hb_sparseset_t &other) const\n+  { return s.may_intersect (other.s); }\n+\n@@ -167,1 +173,1 @@\n-  hb_set_t (hb_set_t&& o) : sparseset (std::move ((sparseset &) o)) {}\n+  hb_set_t (hb_set_t&& o)  noexcept : sparseset (std::move ((sparseset &) o)) {}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-set.hh","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-  if (unlikely (props->direction == HB_DIRECTION_INVALID))\n+  if (unlikely (!HB_DIRECTION_IS_VALID (props->direction)))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shape-plan.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+#ifdef HB_EXPERIMENTAL_API\n@@ -67,0 +68,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shape.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n- * if not set, then tries to get default style values from different\n- * tables of the font.\n+ * if not set, first tries to get default style values in `STAT` table\n+ * then tries to polyfill from different tables of the font.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-style.cc","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-      \/\/ https:\/\/github.com\/fonttools\/fonttools\/blob\/97ed3a61cde03e17b8be36f866192fbd56f1d1a7\/Lib\/fontTools\/misc\/psCharStrings.py#L265-L294\n+      \/\/ https:\/\/github.com\/fonttools\/fonttools\/blob\/0738c41dfbcbc213ab9263f486ef0cccc6eb5ce5\/Lib\/fontTools\/misc\/psCharStrings.py#L267-L316\n@@ -136,0 +136,4 @@\n+      size_t len;\n+      char *comma = strchr (s, ',');\n+      if (comma) \/\/ Comma for some European locales in case no uselocale available.\n+        *comma = '.';\n@@ -143,0 +147,39 @@\n+      else if ((len = strlen (s)) > 3 && !strcmp (s + len - 3, \"000\"))\n+      {\n+        unsigned exponent = len - 3;\n+        char *s2 = s + exponent - 1;\n+        while (*s2 == '0' && exponent > 1)\n+        {\n+          s2--;\n+          exponent++;\n+        }\n+        snprintf (s2 + 1, sizeof (buf) - (s2 + 1 - buf), \"E%u\", exponent);\n+      }\n+      else\n+      {\n+        char *dot = strchr (s, '.');\n+        char *e = strchr (s, 'E');\n+        if (dot && e)\n+        {\n+          memmove (dot, dot + 1, e - (dot + 1));\n+          int exponent = atoi (e + 1);\n+          int new_exponent = exponent - (e - (dot + 1));\n+          if (new_exponent == 1)\n+          {\n+            e[-1] = '0';\n+            e[0] = '\\0';\n+          }\n+          else\n+            snprintf (e - 1, sizeof (buf) - (e - 1 - buf), \"E%d\", new_exponent);\n+        }\n+      }\n+      if ((s[0] == '.' && s[1] == '0') || (s[0] == '-' && s[1] == '.' && s[2] == '0'))\n+      {\n+        int sign = s[0] == '-';\n+        char *s2 = s + sign + 1;\n+        while (*s2 == '0')\n+          s2++;\n+        len = strlen (s2);\n+        memmove (s + sign, s2, len);\n+        snprintf (s + sign + len, sizeof (buf) - (s + sign + len - buf), \"E-%u\", (unsigned) (strlen (s + sign) - 1));\n+      }\n@@ -158,1 +201,4 @@\n-              continue;\n+            } else {\n+              if (c2 == '+')\n+                s++;\n+              nibbles.push (0x0B); \/\/ E\n@@ -160,1 +206,1 @@\n-            if (c2 == '+')\n+            if (*s == '0')\n@@ -162,1 +208,0 @@\n-            nibbles.push (0x0B); \/\/ E\n@@ -166,1 +211,1 @@\n-          case '.': case ',': \/\/ Comma for some European locales in case no uselocale available.\n+          case '.':\n@@ -171,1 +216,1 @@\n-            nibbles.push (0x0E); \/\/ .\n+            nibbles.push (0x0E); \/\/ -\n@@ -1086,1 +1131,1 @@\n-    if (!buff.alloc (buff.length + size, true))\n+    if (!buff.alloc_exact (buff.length + size))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff-common.hh","additions":52,"deletions":7,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    vector.alloc (size, true);\n+    vector.alloc_exact (size);\n@@ -623,0 +623,6 @@\n+ #ifdef HB_EXPERIMENTAL_API\n+    min_charstrings_off_size = (plan->flags & HB_SUBSET_FLAGS_IFTB_REQUIREMENTS) ? 4 : 0;\n+ #else\n+    min_charstrings_off_size = 0;\n+ #endif\n+\n@@ -781,0 +787,2 @@\n+\n+  unsigned      min_charstrings_off_size = 0;\n@@ -784,0 +792,21 @@\n+static bool _serialize_cff1_charstrings (hb_serialize_context_t *c,\n+                                         struct OT::cff1_subset_plan &plan,\n+                                         const OT::cff1::accelerator_subset_t  &acc)\n+{\n+  c->push<CFF1CharStrings> ();\n+\n+  unsigned data_size = 0;\n+  unsigned total_size = CFF1CharStrings::total_size (plan.subset_charstrings, &data_size, plan.min_charstrings_off_size);\n+  if (unlikely (!c->start_zerocopy (total_size)))\n+    return false;\n+\n+  auto *cs = c->start_embed<CFF1CharStrings> ();\n+  if (unlikely (!cs->serialize (c, plan.subset_charstrings, &data_size, plan.min_charstrings_off_size))) {\n+    c->pop_discard ();\n+    return false;\n+  }\n+\n+  plan.info.char_strings_link = c->pop_pack (false);\n+  return true;\n+}\n+\n@@ -788,0 +817,7 @@\n+  \/* push charstrings onto the object stack first which will ensure it packs as the last\n+     object in the table. Keeping the chastrings last satisfies the requirements for patching\n+     via IFTB. If this ordering needs to be changed in the future, charstrings should be left\n+     at the end whenever HB_SUBSET_FLAGS_ITFB_REQUIREMENTS is enabled. *\/\n+  if (!_serialize_cff1_charstrings(c, plan, *this))\n+    return false;\n+\n@@ -826,19 +862,0 @@\n-  \/* CharStrings *\/\n-  {\n-    c->push<CFF1CharStrings> ();\n-\n-    unsigned data_size = 0;\n-    unsigned total_size = CFF1CharStrings::total_size (plan.subset_charstrings, &data_size);\n-    if (unlikely (!c->start_zerocopy (total_size)))\n-       return false;\n-\n-    auto *cs = c->start_embed<CFF1CharStrings> ();\n-    if (likely (cs->serialize (c, plan.subset_charstrings, &data_size)))\n-      plan.info.char_strings_link = c->pop_pack (false);\n-    else\n-    {\n-      c->pop_discard ();\n-      return false;\n-    }\n-  }\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff1.cc","additions":37,"deletions":20,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-                                      const CFF2VariationStore *varStore,\n+                                      const CFF2ItemVariationStore *varStore,\n@@ -287,1 +287,1 @@\n-  const  CFF2VariationStore *varStore = nullptr;\n+  const  CFF2ItemVariationStore *varStore = nullptr;\n@@ -381,1 +381,1 @@\n-                                     const CFF::CFF2VariationStore* varStore_,\n+                                     const CFF::CFF2ItemVariationStore* varStore_,\n@@ -419,1 +419,1 @@\n-  const CFF::CFF2VariationStore* varStore;\n+  const CFF::CFF2ItemVariationStore* varStore;\n@@ -442,0 +442,6 @@\n+ #ifdef HB_EXPERIMENTAL_API\n+    min_charstrings_off_size = (plan->flags & HB_SUBSET_FLAGS_IFTB_REQUIREMENTS) ? 4 : 0;\n+ #else\n+    min_charstrings_off_size = 0;\n+ #endif\n+\n@@ -513,0 +519,2 @@\n+\n+  unsigned  min_charstrings_off_size = 0;\n@@ -516,0 +524,22 @@\n+static bool _serialize_cff2_charstrings (hb_serialize_context_t *c,\n+                             cff2_subset_plan &plan,\n+                             const OT::cff2::accelerator_subset_t  &acc)\n+{\n+  c->push ();\n+\n+  unsigned data_size = 0;\n+  unsigned total_size = CFF2CharStrings::total_size (plan.subset_charstrings, &data_size, plan.min_charstrings_off_size);\n+  if (unlikely (!c->start_zerocopy (total_size)))\n+    return false;\n+\n+  auto *cs = c->start_embed<CFF2CharStrings> ();\n+  if (unlikely (!cs->serialize (c, plan.subset_charstrings, &data_size, plan.min_charstrings_off_size)))\n+  {\n+    c->pop_discard ();\n+    return false;\n+  }\n+\n+  plan.info.char_strings_link = c->pop_pack (false);\n+  return true;\n+}\n+\n@@ -521,0 +551,7 @@\n+  \/* push charstrings onto the object stack first which will ensure it packs as the last\n+     object in the table. Keeping the chastrings last satisfies the requirements for patching\n+     via IFTB. If this ordering needs to be changed in the future, charstrings should be left\n+     at the end whenever HB_SUBSET_FLAGS_ITFB_REQUIREMENTS is enabled. *\/\n+  if (!_serialize_cff2_charstrings(c, plan, *this))\n+    return false;\n+\n@@ -559,19 +596,0 @@\n-  \/* CharStrings *\/\n-  {\n-    c->push ();\n-\n-    unsigned data_size = 0;\n-    unsigned total_size = CFF2CharStrings::total_size (plan.subset_charstrings, &data_size);\n-    if (unlikely (!c->start_zerocopy (total_size)))\n-       return false;\n-\n-    auto *cs = c->start_embed<CFF2CharStrings> ();\n-    if (likely (cs->serialize (c, plan.subset_charstrings, &data_size)))\n-      plan.info.char_strings_link = c->pop_pack (false);\n-    else\n-    {\n-      c->pop_discard ();\n-      return false;\n-    }\n-  }\n-\n@@ -613,1 +631,1 @@\n-  if (varStore != &Null (CFF2VariationStore) &&\n+  if (varStore != &Null (CFF2ItemVariationStore) &&\n@@ -616,1 +634,1 @@\n-    auto *dest = c->push<CFF2VariationStore> ();\n+    auto *dest = c->push<CFF2ItemVariationStore> ();\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff2.cc","additions":43,"deletions":25,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"hb-subset-instancer-solver.hh\"\n@@ -53,1 +54,0 @@\n-    HB_TAG ('B', 'A', 'S', 'E'),\n@@ -126,0 +126,6 @@\n+    \/\/East Asian spacing\n+    HB_TAG ('c', 'h', 'w', 's'),\n+    HB_TAG ('v', 'c', 'h', 'w'),\n+    HB_TAG ('h', 'a', 'l', 't'),\n+    HB_TAG ('v', 'h', 'a', 'l'),\n+\n@@ -409,0 +415,1 @@\n+                             HB_SUBSET_FLAGS_NAME_LEGACY |\n@@ -414,0 +421,40 @@\n+\/**\n+ * hb_subset_input_pin_all_axes_to_default: (skip)\n+ * @input: a #hb_subset_input_t object.\n+ * @face: a #hb_face_t object.\n+ *\n+ * Pin all axes to default locations in the given subset input object.\n+ *\n+ * All axes in a font must be pinned. Additionally, `CFF2` table, if present,\n+ * will be de-subroutinized.\n+ *\n+ * Return value: `true` if success, `false` otherwise\n+ *\n+ * Since: 8.3.1\n+ **\/\n+HB_EXTERN hb_bool_t\n+hb_subset_input_pin_all_axes_to_default (hb_subset_input_t  *input,\n+                                         hb_face_t          *face)\n+{\n+  unsigned axis_count = hb_ot_var_get_axis_count (face);\n+  if (!axis_count) return false;\n+\n+  hb_ot_var_axis_info_t *axis_infos = (hb_ot_var_axis_info_t *) hb_calloc (axis_count, sizeof (hb_ot_var_axis_info_t));\n+  if (unlikely (!axis_infos)) return false;\n+\n+  (void) hb_ot_var_get_axis_infos (face, 0, &axis_count, axis_infos);\n+\n+  for (unsigned i = 0; i < axis_count; i++)\n+  {\n+    hb_tag_t axis_tag = axis_infos[i].tag;\n+    double default_val = (double) axis_infos[i].default_value;\n+    if (!input->axes_location.set (axis_tag, Triple (default_val, default_val, default_val)))\n+    {\n+      hb_free (axis_infos);\n+      return false;\n+    }\n+  }\n+  hb_free (axis_infos);\n+  return true;\n+}\n+\n@@ -438,1 +485,1 @@\n-  float default_val = axis_info.default_value;\n+  double default_val = (double) axis_info.default_value;\n@@ -468,1 +515,1 @@\n-  float val = hb_clamp(axis_value, axis_info.min_value, axis_info.max_value);\n+  double val = hb_clamp((double) axis_value, (double) axis_info.min_value, (double) axis_info.max_value);\n@@ -472,1 +519,0 @@\n-#ifdef HB_EXPERIMENTAL_API\n@@ -478,4 +524,3 @@\n- * @axis_min_value: Minimum value of the axis variation range to set\n- * @axis_max_value: Maximum value of the axis variation range to set\n- * @axis_def_value: Default value of the axis variation range to set, in case of\n- * null, it'll be determined automatically\n+ * @axis_min_value: Minimum value of the axis variation range to set, if NaN the existing min will be used.\n+ * @axis_max_value: Maximum value of the axis variation range to set  if NaN the existing max will be used.\n+ * @axis_def_value: Default value of the axis variation range to set, if NaN the existing default will be used.\n@@ -485,3 +530,1 @@\n- * If the new default value is null:\n- * If the fvar axis default value is within the new range, then new default\n- * value is the same as original default value.\n+ *\n@@ -494,1 +537,0 @@\n- * Note: currently it supports gvar and cvar tables only.\n@@ -498,1 +540,1 @@\n- * XSince: EXPERIMENTAL\n+ * Since: 8.5.0\n@@ -506,1 +548,1 @@\n-                                float              *axis_def_value \/* IN, maybe NULL *\/)\n+                                float               axis_def_value)\n@@ -508,3 +550,0 @@\n-  if (axis_min_value > axis_max_value)\n-    return false;\n-\n@@ -515,5 +554,182 @@\n-  float new_min_val = hb_clamp(axis_min_value, axis_info.min_value, axis_info.max_value);\n-  float new_max_val = hb_clamp(axis_max_value, axis_info.min_value, axis_info.max_value);\n-  float new_default_val = axis_def_value ? *axis_def_value : axis_info.default_value;\n-  new_default_val = hb_clamp(new_default_val, new_min_val, new_max_val);\n-  return input->axes_location.set (axis_tag, Triple (new_min_val, new_default_val, new_max_val));\n+  float min = !std::isnan(axis_min_value) ? axis_min_value : axis_info.min_value;\n+  float max = !std::isnan(axis_max_value) ? axis_max_value : axis_info.max_value;\n+  float def = !std::isnan(axis_def_value) ? axis_def_value : axis_info.default_value;\n+\n+  if (min > max)\n+    return false;\n+\n+  float new_min_val = hb_clamp(min, axis_info.min_value, axis_info.max_value);\n+  float new_max_val = hb_clamp(max, axis_info.min_value, axis_info.max_value);\n+  float new_default_val = hb_clamp(def, new_min_val, new_max_val);\n+  return input->axes_location.set (axis_tag, Triple ((double) new_min_val, (double) new_default_val, (double) new_max_val));\n+}\n+\n+\/**\n+ * hb_subset_input_get_axis_range: (skip)\n+ * @input: a #hb_subset_input_t object.\n+ * @axis_tag: Tag of the axis\n+ * @axis_min_value: Set to the previously configured minimum value of the axis variation range.\n+ * @axis_max_value: Set to the previously configured maximum value of the axis variation range.\n+ * @axis_def_value: Set to the previously configured default value of the axis variation range.\n+ *\n+ * Gets the axis range assigned by previous calls to hb_subset_input_set_axis_range.\n+ *\n+ * Return value: `true` if a range has been set for this axis tag, `false` otherwise.\n+ *\n+ * Since: 8.5.0\n+ **\/\n+HB_EXTERN hb_bool_t\n+hb_subset_input_get_axis_range (hb_subset_input_t  *input,\n+                                hb_tag_t            axis_tag,\n+                                float              *axis_min_value,\n+                                float              *axis_max_value,\n+                                float              *axis_def_value)\n+\n+{\n+  Triple* triple;\n+  if (!input->axes_location.has(axis_tag, &triple)) {\n+    return false;\n+  }\n+\n+  *axis_min_value = triple->minimum;\n+  *axis_def_value = triple->middle;\n+  *axis_max_value = triple->maximum;\n+  return true;\n+}\n+\n+\/**\n+ * hb_subset_axis_range_from_string:\n+ * @str: a string to parse\n+ * @len: length of @str, or -1 if str is NULL terminated\n+ * @axis_min_value: (out): the axis min value to initialize with the parsed value\n+ * @axis_max_value: (out): the axis max value to initialize with the parsed value\n+ * @axis_def_value: (out): the axis default value to initialize with the parse\n+ * value\n+ *\n+ * Parses a string into a subset axis range(min, def, max).\n+ * Axis positions string is in the format of min:def:max or min:max\n+ * When parsing axis positions, empty values as meaning the existing value for that part\n+ * E.g: :300:500\n+ * Specifies min = existing, def = 300, max = 500\n+ * In the output axis_range, if a value should be set to it's default value,\n+ * then it will be set to NaN\n+ *\n+ * Return value:\n+ * `true` if @str is successfully parsed, `false` otherwise\n+ *\n+ * Since: 10.2.0\n+ *\/\n+HB_EXTERN hb_bool_t\n+hb_subset_axis_range_from_string (const char *str, int len,\n+                                  float *axis_min_value,\n+                                  float *axis_max_value,\n+                                  float *axis_def_value)\n+{\n+  if (len < 0)\n+    len = strlen (str);\n+\n+  const char *end = str + len;\n+  const char* part = strpbrk (str, \":\");\n+  if (!part)\n+  {\n+    \/\/ Single value.\n+    if (strcmp (str, \"drop\") == 0)\n+    {\n+      *axis_min_value = NAN;\n+      *axis_def_value = NAN;\n+      *axis_max_value = NAN;\n+      return true;\n+    }\n+\n+    double v;\n+    if (!hb_parse_double (&str, end, &v)) return false;\n+\n+    *axis_min_value = v;\n+    *axis_def_value = v;\n+    *axis_max_value = v;\n+    return true;\n+  }\n+\n+  float values[3];\n+  int count = 0;\n+  for (int i = 0; i < 3; i++) {\n+    count++;\n+    if (!*str || part == str)\n+    {\n+      values[i] = NAN;\n+\n+      if (part == NULL) break;\n+      str = part + 1;\n+      part = strpbrk (str, \":\");\n+      continue;\n+    }\n+\n+    double v;\n+    if (!hb_parse_double (&str, part, &v)) return false;\n+    values[i] = v;\n+\n+    if (part == NULL) break;\n+    str = part + 1;\n+    part = strpbrk (str, \":\");\n+  }\n+\n+  if (count == 2)\n+  {\n+    *axis_min_value = values[0];\n+    *axis_def_value = NAN;\n+    *axis_max_value = values[1];\n+    return true;\n+  }\n+  else if (count == 3)\n+  {\n+    *axis_min_value = values[0];\n+    *axis_def_value = values[1];\n+    *axis_max_value = values[2];\n+    return true;\n+  }\n+  return false;\n+}\n+\n+\/**\n+ * hb_subset_axis_range_to_string:\n+ * @input: a #hb_subset_input_t object.\n+ * @axis_tag: an axis to convert\n+ * @buf: (array length=size) (out caller-allocates): output string\n+ * @size: the allocated size of @buf\n+ *\n+ * Converts an axis range into a `NULL`-terminated string in the format\n+ * understood by hb_subset_axis_range_from_string(). The client in responsible for\n+ * allocating big enough size for @buf, 128 bytes is more than enough.\n+ *\n+ * Since: 10.2.0\n+ *\/\n+HB_EXTERN void\n+hb_subset_axis_range_to_string (hb_subset_input_t *input,\n+                                hb_tag_t axis_tag,\n+                                char *buf, unsigned size)\n+{\n+  if (unlikely (!size)) return;\n+  Triple* triple;\n+  if (!input->axes_location.has(axis_tag, &triple)) {\n+    return;\n+  }\n+\n+  char s[128];\n+  unsigned len = 0;\n+\n+  hb_locale_t clocale HB_UNUSED;\n+  hb_locale_t oldlocale HB_UNUSED;\n+  oldlocale = hb_uselocale (clocale = newlocale (LC_ALL_MASK, \"C\", NULL));\n+  len += hb_max (0, snprintf (s, ARRAY_LENGTH (s) - len, \"%g\", (double) triple->minimum));\n+  s[len++] = ':';\n+\n+  len += hb_max (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%g\", (double) triple->middle));\n+  s[len++] = ':';\n+\n+  len += hb_max (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%g\", (double) triple->maximum));\n+  (void) hb_uselocale (((void) freelocale (clocale), oldlocale));\n+\n+  assert (len < ARRAY_LENGTH (s));\n+  len = hb_min (len, size - 1);\n+  hb_memcpy (buf, s, len);\n+  buf[len] = '\\0';\n@@ -521,1 +737,0 @@\n-#endif\n@@ -656,1 +871,1 @@\n-          printf (\"Non-ascii character detected, ignored...This API supports acsii characters only for mac platform\\n\");\n+          printf (\"Non-ascii character detected, ignored...This API supports ascii characters only for mac platform\\n\");\n@@ -670,1 +885,0 @@\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-input.cc","additions":239,"deletions":25,"binary":false,"changes":264,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-constexpr static float EPSILON = 1.f \/ (1 << 14);\n-constexpr static float MAX_F2DOT14 = float (0x7FFF) \/ (1 << 14);\n+constexpr static double EPSILON = 1.0 \/ (1 << 14);\n+constexpr static double MAX_F2DOT14 = double (0x7FFF) \/ (1 << 14);\n@@ -42,1 +42,1 @@\n-static inline float supportScalar (float coord, const Triple &tent)\n+static inline double supportScalar (double coord, const Triple &tent)\n@@ -45,1 +45,1 @@\n-  float start = tent.minimum, peak = tent.middle, end = tent.maximum;\n+  double start = tent.minimum, peak = tent.middle, end = tent.maximum;\n@@ -65,1 +65,1 @@\n-static inline result_t\n+static inline rebase_tent_result_t\n@@ -68,6 +68,6 @@\n-  float axisMin = axisLimit.minimum;\n-  float axisDef = axisLimit.middle;\n-  float axisMax = axisLimit.maximum;\n-  float lower = tent.minimum;\n-  float peak  = tent.middle;\n-  float upper = tent.maximum;\n+  double axisMin = axisLimit.minimum;\n+  double axisDef = axisLimit.middle;\n+  double axisMax = axisLimit.maximum;\n+  double lower = tent.minimum;\n+  double peak  = tent.middle;\n+  double upper = tent.maximum;\n@@ -78,1 +78,1 @@\n-    result_t vec = _solve (_reverse_negate (tent),\n+    rebase_tent_result_t vec = _solve (_reverse_negate (tent),\n@@ -101,1 +101,1 @@\n-      return result_t{};  \/\/ No overlap\n+      return rebase_tent_result_t{};  \/\/ No overlap\n@@ -133,1 +133,1 @@\n-    float mult = supportScalar (axisMax, tent);\n+    double mult = supportScalar (axisMax, tent);\n@@ -136,1 +136,1 @@\n-    result_t vec = _solve (tent, axisLimit);\n+    rebase_tent_result_t vec = _solve (tent, axisLimit);\n@@ -146,2 +146,2 @@\n-  float gain = supportScalar (axisDef, tent);\n-  result_t out {hb_pair (gain, Triple{})};\n+  double gain = supportScalar (axisDef, tent);\n+  rebase_tent_result_t out {hb_pair (gain, Triple{})};\n@@ -152,1 +152,1 @@\n-  float outGain = supportScalar (axisMax, tent);\n+  double outGain = supportScalar (axisMax, tent);\n@@ -171,1 +171,1 @@\n-  if (gain > outGain)\n+  if (gain >= outGain)\n@@ -173,0 +173,2 @@\n+    \/\/ Note that this is the branch taken if both gain and outGain are 0.\n+\n@@ -174,1 +176,1 @@\n-    float crossing = peak + (1 - gain) * (upper - peak);\n+    double crossing = peak + (1 - gain) * (upper - peak);\n@@ -176,2 +178,2 @@\n-    Triple loc{axisDef, peak, crossing};\n-    float scalar = 1.f;\n+    Triple loc{hb_max (lower, axisDef), peak, crossing};\n+    double scalar = 1.0;\n@@ -192,1 +194,1 @@\n-      float scalar = outGain;\n+      double scalar = outGain;\n@@ -222,1 +224,1 @@\n-      float scalar1 = 0.f;\n+      double scalar1 = 0.0;\n@@ -226,1 +228,1 @@\n-      float scalar2 = 0.f;\n+      double scalar2 = 0.0;\n@@ -255,3 +257,6 @@\n-    float newUpper = peak + (1 - gain) * (upper - peak);\n-    assert (axisMax <= newUpper);  \/\/ Because outGain >= gain\n-    if (newUpper <= axisDef + (axisMax - axisDef) * 2)\n+    double newUpper = peak + (1 - gain) * (upper - peak);\n+    assert (axisMax <= newUpper);  \/\/ Because outGain > gain\n+    \/* Disabled because ots doesn't like us:\n+     * https:\/\/github.com\/fonttools\/fonttools\/issues\/3350 *\/\n+\n+    if (false && (newUpper <= axisDef + (axisMax - axisDef) * 2))\n@@ -268,1 +273,1 @@\n-      float scalar = 1.f;\n+      double scalar = 1.0;\n@@ -292,1 +297,1 @@\n-      float scalar1 = 1.f;\n+      double scalar1 = 1.0;\n@@ -295,1 +300,1 @@\n-      float scalar2 = outGain;\n+      double scalar2 = outGain;\n@@ -323,1 +328,1 @@\n-    float scalar = supportScalar (axisMin, tent);\n+    double scalar = supportScalar (axisMin, tent);\n@@ -351,1 +356,1 @@\n-    float scalar1 = 0.f;\n+    double scalar1 = 0.0;\n@@ -355,1 +360,1 @@\n-    float scalar2 = 0.f;\n+    double scalar2 = 0.0;\n@@ -367,2 +372,2 @@\n-float renormalizeValue (float v, const Triple &triple,\n-                        const TripleDistances &triple_distances, bool extrapolate)\n+double renormalizeValue (double v, const Triple &triple,\n+                         const TripleDistances &triple_distances, bool extrapolate)\n@@ -370,1 +375,1 @@\n-  float lower = triple.minimum, def = triple.middle, upper = triple.maximum;\n+  double lower = triple.minimum, def = triple.middle, upper = triple.maximum;\n@@ -374,1 +379,1 @@\n-      v = hb_max (hb_min (v, upper), lower);\n+    v = hb_clamp (v, lower, upper);\n@@ -377,1 +382,1 @@\n-    return 0.f;\n+    return 0.0;\n@@ -379,1 +384,1 @@\n-  if (def < 0.f)\n+  if (def < 0.0)\n@@ -388,1 +393,1 @@\n-  if (lower >= 0.f)\n+  if (lower >= 0.0)\n@@ -392,1 +397,1 @@\n-  float total_distance = triple_distances.negative * (-lower) + triple_distances.positive * def;\n+  double total_distance = triple_distances.negative * (-lower) + triple_distances.positive * def;\n@@ -394,2 +399,2 @@\n-  float v_distance;\n-  if (v >= 0.f)\n+  double v_distance;\n+  if (v >= 0.0)\n@@ -403,1 +408,1 @@\n-result_t\n+rebase_tent_result_t\n@@ -406,3 +411,3 @@\n-  assert (-1.f <= axisLimit.minimum && axisLimit.minimum <= axisLimit.middle && axisLimit.middle <= axisLimit.maximum && axisLimit.maximum <= +1.f);\n-  assert (-2.f <= tent.minimum && tent.minimum <= tent.middle && tent.middle <= tent.maximum && tent.maximum <= +2.f);\n-  assert (tent.middle != 0.f);\n+  assert (-1.0 <= axisLimit.minimum && axisLimit.minimum <= axisLimit.middle && axisLimit.middle <= axisLimit.maximum && axisLimit.maximum <= +1.0);\n+  assert (-2.0 <= tent.minimum && tent.minimum <= tent.middle && tent.middle <= tent.maximum && tent.maximum <= +2.0);\n+  assert (tent.middle != 0.0);\n@@ -410,1 +415,1 @@\n-  result_t sols = _solve (tent, axisLimit);\n+  rebase_tent_result_t sols = _solve (tent, axisLimit);\n@@ -412,1 +417,1 @@\n-  auto n = [&axisLimit, &axis_triple_distances] (float v) { return renormalizeValue (v, axisLimit, axis_triple_distances); };\n+  auto n = [&axisLimit, &axis_triple_distances] (double v) { return renormalizeValue (v, axisLimit, axis_triple_distances); };\n@@ -414,1 +419,1 @@\n-  result_t out;\n+  rebase_tent_result_t out;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-instancer-solver.cc","additions":56,"deletions":51,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -33,3 +33,3 @@\n-  TripleDistances (): negative (1.f), positive (1.f) {}\n-  TripleDistances (float neg_, float pos_): negative (neg_), positive (pos_) {}\n-  TripleDistances (float min, float default_, float max)\n+  TripleDistances (): negative (1.0), positive (1.0) {}\n+  TripleDistances (double neg_, double pos_): negative (neg_), positive (pos_) {}\n+  TripleDistances (double min, double default_, double max)\n@@ -41,2 +41,2 @@\n-  float negative;\n-  float positive;\n+  double negative;\n+  double positive;\n@@ -48,1 +48,1 @@\n-    minimum (0.f), middle (0.f), maximum (0.f) {}\n+    minimum (0.0), middle (0.0), maximum (0.0) {}\n@@ -50,1 +50,1 @@\n-  Triple (float minimum_, float middle_, float maximum_) :\n+  Triple (double minimum_, double middle_, double maximum_) :\n@@ -66,1 +66,1 @@\n-  bool contains (float point) const\n+  bool contains (double point) const\n@@ -85,3 +85,3 @@\n-  float minimum;\n-  float middle;\n-  float maximum;\n+  double minimum;\n+  double middle;\n+  double maximum;\n@@ -90,2 +90,2 @@\n-using result_item_t = hb_pair_t<float, Triple>;\n-using result_t = hb_vector_t<result_item_t>;\n+using rebase_tent_result_item_t = hb_pair_t<double, Triple>;\n+using rebase_tent_result_t = hb_vector_t<rebase_tent_result_item_t>;\n@@ -96,1 +96,1 @@\n-HB_INTERNAL float renormalizeValue (float v, const Triple &triple,\n+HB_INTERNAL double renormalizeValue (double v, const Triple &triple,\n@@ -110,1 +110,3 @@\n-HB_INTERNAL result_t rebase_tent (Triple tent, Triple axisLimit, TripleDistances axis_triple_distances);\n+HB_INTERNAL rebase_tent_result_t rebase_tent (Triple tent,\n+                                              Triple axisLimit,\n+                                              TripleDistances axis_triple_distances);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-instancer-solver.hh","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -73,0 +73,3 @@\n+\/\/use_mark_sets mapping: old->new\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, used_mark_sets_map)\n+\n@@ -90,0 +93,9 @@\n+\/\/ old feature_indexes set, used to reinstate the old features\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, gsub_old_features)\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, gpos_old_features)\n+\n+\/\/feature_index->pair of (address of old feature, feature tag), used for inserting a catch all record\n+\/\/if necessary\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<unsigned, hb_pair_t E(<const void*, const void*>)>), gsub_old_feature_idx_tag_map)\n+HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<unsigned, hb_pair_t E(<const void*, const void*>)>), gpos_old_feature_idx_tag_map)\n+\n@@ -93,0 +105,6 @@\n+\/\/colrv1 varstore retained varidx mapping\n+HB_SUBSET_PLAN_MEMBER (hb_vector_t<hb_inc_bimap_t>, colrv1_varstore_inner_maps)\n+\/\/colrv1 retained varidx -> (new varidx, delta) mapping\n+HB_SUBSET_PLAN_MEMBER (mutable hb_hashmap_t E(<unsigned, hb_pair_t E(<unsigned, int>)>), colrv1_variation_idx_delta_map)\n+\/\/colrv1 retained new delta set index -> new varidx mapping\n+HB_SUBSET_PLAN_MEMBER (hb_map_t, colrv1_new_deltaset_idx_varidx_map)\n@@ -131,0 +149,9 @@\n+\/\/new gids set for composite glyphs\n+HB_SUBSET_PLAN_MEMBER (hb_set_t, composite_new_gids)\n+\n+\/\/Old BASE item variation index -> (New varidx, 0) mapping\n+HB_SUBSET_PLAN_MEMBER (mutable hb_hashmap_t E(<unsigned, hb_pair_t E(<unsigned, int>)>), base_variation_idx_map)\n+\n+\/\/BASE table varstore retained varidx mapping\n+HB_SUBSET_PLAN_MEMBER (hb_vector_t<hb_inc_bimap_t>, base_varstore_inner_maps)\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-plan-member-list.hh","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"hb-ot-layout-base-table.hh\"\n@@ -153,1 +154,2 @@\n-                                     bool& insert_catch_all_feature_variation_record)\n+                                     hb_set_t& catch_all_record_feature_idxes, \/* OUT *\/\n+                                     hb_hashmap_t<unsigned, hb_pair_t<const void*, const void*>>& catch_all_record_idx_feature_map \/* OUT *\/)\n@@ -189,1 +191,1 @@\n-      insert_catch_all_feature_variation_record,\n+      catch_all_record_feature_idxes,\n@@ -211,0 +213,12 @@\n+#ifndef HB_NO_VAR\n+  if (catch_all_record_feature_idxes)\n+  {\n+    for (unsigned feature_index : catch_all_record_feature_idxes)\n+    {\n+      const OT::Feature& f = table.get_feature (feature_index);\n+      f.add_lookup_indexes_to (lookup_indices);\n+      const void *tag = reinterpret_cast<const void*> (&(table.get_feature_list ().get_tag (feature_index)));\n+      catch_all_record_idx_feature_map.set (feature_index, hb_pair (&f, tag));\n+    }\n+  }\n+\n@@ -214,8 +228,4 @@\n-  {\n-    \/\/ TODO(qxliu76): this collection doesn't work correctly for feature variations that are dropped\n-    \/\/                but not applied. The collection will collect and retain the lookup indices\n-    \/\/                associated with those dropped but not activated rules. Since partial instancing\n-    \/\/                isn't yet supported this isn't an issue yet but will need to be fixed for\n-    \/\/                partial instancing.\n-    table.feature_variation_collect_lookups (feature_indices, feature_substitutes_map, lookup_indices);\n-  }\n+    table.feature_variation_collect_lookups (feature_indices,\n+                                             plan->user_axes_location.is_empty () ? nullptr: feature_record_cond_idx_map,\n+                                             lookup_indices);\n+#endif\n@@ -305,1 +315,2 @@\n-                                  bool& insert_catch_all_feature_variation_record)\n+                                  hb_set_t &catch_all_record_feature_idxes,\n+                                  hb_hashmap_t<unsigned, hb_pair_t<const void*, const void*>>& catch_all_record_idx_feature_map)\n@@ -316,1 +327,2 @@\n-                              insert_catch_all_feature_variation_record);\n+                              catch_all_record_feature_idxes,\n+                              catch_all_record_idx_feature_map);\n@@ -389,0 +401,43 @@\n+static inline void\n+_remap_variation_indices (const OT::ItemVariationStore &var_store,\n+                          const hb_set_t &variation_indices,\n+                          const hb_vector_t<int>& normalized_coords,\n+                          bool calculate_delta, \/* not pinned at default *\/\n+                          bool no_variations, \/* all axes pinned *\/\n+                          hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> &variation_idx_delta_map \/* OUT *\/)\n+{\n+  if (&var_store == &Null (OT::ItemVariationStore)) return;\n+  unsigned subtable_count = var_store.get_sub_table_count ();\n+  float *store_cache = var_store.create_cache ();\n+\n+  unsigned new_major = 0, new_minor = 0;\n+  unsigned last_major = (variation_indices.get_min ()) >> 16;\n+  for (unsigned idx : variation_indices)\n+  {\n+    int delta = 0;\n+    if (calculate_delta)\n+      delta = roundf (var_store.get_delta (idx, normalized_coords.arrayZ,\n+                                           normalized_coords.length, store_cache));\n+\n+    if (no_variations)\n+    {\n+      variation_idx_delta_map.set (idx, hb_pair_t<unsigned, int> (HB_OT_LAYOUT_NO_VARIATIONS_INDEX, delta));\n+      continue;\n+    }\n+\n+    uint16_t major = idx >> 16;\n+    if (major >= subtable_count) break;\n+    if (major != last_major)\n+    {\n+      new_minor = 0;\n+      ++new_major;\n+    }\n+\n+    unsigned new_idx = (new_major << 16) + new_minor;\n+    variation_idx_delta_map.set (idx, hb_pair_t<unsigned, int> (new_idx, delta));\n+    ++new_minor;\n+    last_major = major;\n+  }\n+  var_store.destroy_cache (store_cache);\n+}\n+\n@@ -395,1 +450,1 @@\n-  if (!gdef->has_data ())\n+  if (!gdef->has_data () || !gdef->has_var_store ())\n@@ -411,5 +466,5 @@\n-  gdef->remap_layout_variation_indices (&varidx_set,\n-                                        plan->normalized_coords,\n-                                        !plan->pinned_at_default,\n-                                        plan->all_axes_pinned,\n-                                        &plan->layout_variation_idx_delta_map);\n+  _remap_variation_indices (gdef->get_var_store (),\n+                            varidx_set, plan->normalized_coords,\n+                            !plan->pinned_at_default,\n+                            plan->all_axes_pinned,\n+                            plan->layout_variation_idx_delta_map);\n@@ -417,1 +472,1 @@\n-  unsigned subtable_count = gdef->has_var_store () ? gdef->get_var_store ().get_sub_table_count () : 0;\n+  unsigned subtable_count = gdef->get_var_store ().get_sub_table_count ();\n@@ -423,0 +478,29 @@\n+\n+#ifndef HB_NO_BASE\n+static inline void\n+_collect_base_variation_indices (hb_subset_plan_t* plan)\n+{\n+  hb_blob_ptr_t<OT::BASE> base = plan->source_table<OT::BASE> ();\n+  if (!base->has_var_store ())\n+  {\n+    base.destroy ();\n+    return;\n+  }\n+\n+  hb_set_t varidx_set;\n+  base->collect_variation_indices (plan, varidx_set);\n+  const OT::ItemVariationStore &var_store = base->get_var_store ();\n+  unsigned subtable_count = var_store.get_sub_table_count ();\n+\n+\n+  _remap_variation_indices (var_store, varidx_set,\n+                            plan->normalized_coords,\n+                            !plan->pinned_at_default,\n+                            plan->all_axes_pinned,\n+                            plan->base_variation_idx_map);\n+  _generate_varstore_inner_maps (varidx_set, subtable_count, plan->base_varstore_inner_maps);\n+\n+  base.destroy ();\n+}\n+\n+#endif\n@@ -434,3 +518,36 @@\n-static void _colr_closure (hb_face_t *face,\n-                           hb_map_t *layers_map,\n-                           hb_map_t *palettes_map,\n+#ifndef HB_NO_VAR\n+static void\n+_remap_colrv1_delta_set_index_indices (const OT::DeltaSetIndexMap &index_map,\n+                                       const hb_set_t &delta_set_idxes,\n+                                       hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> &variation_idx_delta_map, \/* IN\/OUT *\/\n+                                       hb_map_t &new_deltaset_idx_varidx_map \/* OUT *\/)\n+{\n+  if (!index_map.get_map_count ())\n+    return;\n+\n+  hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> delta_set_idx_delta_map;\n+  unsigned new_delta_set_idx = 0;\n+  for (unsigned delta_set_idx : delta_set_idxes)\n+  {\n+    unsigned var_idx = index_map.map (delta_set_idx);\n+    unsigned new_varidx = HB_OT_LAYOUT_NO_VARIATIONS_INDEX;\n+    int delta = 0;\n+\n+    if (var_idx != HB_OT_LAYOUT_NO_VARIATIONS_INDEX)\n+    {\n+      hb_pair_t<unsigned, int> *new_varidx_delta;\n+      if (!variation_idx_delta_map.has (var_idx, &new_varidx_delta)) continue;\n+\n+      new_varidx = hb_first (*new_varidx_delta);\n+      delta = hb_second (*new_varidx_delta);\n+    }\n+\n+    new_deltaset_idx_varidx_map.set (new_delta_set_idx, new_varidx);\n+    delta_set_idx_delta_map.set (delta_set_idx, hb_pair_t<unsigned, int> (new_delta_set_idx, delta));\n+    new_delta_set_idx++;\n+  }\n+  variation_idx_delta_map = std::move (delta_set_idx_delta_map);\n+}\n+#endif\n+\n+static void _colr_closure (hb_subset_plan_t* plan,\n@@ -439,1 +556,1 @@\n-  OT::COLR::accelerator_t colr (face);\n+  OT::COLR::accelerator_t colr (plan->source);\n@@ -451,1 +568,2 @@\n-  colr.closure_forV1 (glyphs_colred, &layer_indices, &palette_indices);\n+  hb_set_t variation_indices, delta_set_indices;\n+  colr.closure_forV1 (glyphs_colred, &layer_indices, &palette_indices, &variation_indices, &delta_set_indices);\n@@ -454,2 +572,35 @@\n-  _remap_indexes (&layer_indices, layers_map);\n-  _remap_palette_indexes (&palette_indices, palettes_map);\n+  _remap_indexes (&layer_indices, &plan->colrv1_layers);\n+  _remap_palette_indexes (&palette_indices, &plan->colr_palettes);\n+\n+#ifndef HB_NO_VAR\n+  if (!colr.has_var_store () || !variation_indices) return;\n+\n+  const OT::ItemVariationStore &var_store = colr.get_var_store ();\n+  \/\/ generated inner_maps is used by ItemVariationStore serialize(), which is subset only\n+  unsigned subtable_count = var_store.get_sub_table_count ();\n+  _generate_varstore_inner_maps (variation_indices, subtable_count, plan->colrv1_varstore_inner_maps);\n+\n+  \/* colr variation indices mapping during planning phase:\n+   * generate colrv1_variation_idx_delta_map. When delta set index map is not\n+   * included, it's a mapping from varIdx-> (new varIdx,delta). Otherwise, it's\n+   * a mapping from old delta set idx-> (new delta set idx, delta). Mapping\n+   * delta set indices is the same as gid mapping.\n+   * Besides, we need to generate a delta set idx-> new var_idx map for updating\n+   * delta set index map if exists. This map will be updated again after\n+   * instancing. *\/\n+  if (!plan->all_axes_pinned)\n+  {\n+    _remap_variation_indices (var_store,\n+                              variation_indices,\n+                              plan->normalized_coords,\n+                              false, \/* no need to calculate delta for COLR during planning *\/\n+                              plan->all_axes_pinned,\n+                              plan->colrv1_variation_idx_delta_map);\n+\n+    if (colr.has_delta_set_index_map ())\n+      _remap_colrv1_delta_set_index_indices (colr.get_delta_set_index_map (),\n+                                             delta_set_indices,\n+                                             plan->colrv1_variation_idx_delta_map,\n+                                             plan->colrv1_new_deltaset_idx_varidx_map);\n+  }\n+#endif\n@@ -468,0 +619,18 @@\n+static inline void\n+_remap_used_mark_sets (hb_subset_plan_t *plan,\n+                       hb_map_t& used_mark_sets_map)\n+{\n+  hb_blob_ptr_t<OT::GDEF> gdef = plan->source_table<OT::GDEF> ();\n+\n+  if (!gdef->has_data () || !gdef->has_mark_glyph_sets ())\n+  {\n+    gdef.destroy ();\n+    return;\n+  }\n+\n+  hb_set_t used_mark_sets;\n+  gdef->get_mark_glyph_sets ().collect_used_mark_sets (plan->_glyphset_gsub, used_mark_sets);\n+  gdef.destroy ();\n+\n+  _remap_indexes (&used_mark_sets, &used_mark_sets_map);\n+}\n@@ -476,0 +645,30 @@\n+template<bool GID_ALWAYS_EXISTS = false, typename I, typename F, typename G, hb_requires (hb_is_iterator (I))>\n+static void\n+_fill_unicode_and_glyph_map(hb_subset_plan_t *plan,\n+                            I unicode_iterator,\n+                            F unicode_to_gid_for_iterator,\n+                            G unicode_to_gid_general)\n+{\n+  for (hb_codepoint_t cp : unicode_iterator)\n+  {\n+    hb_codepoint_t gid = unicode_to_gid_for_iterator(cp);\n+    if (!GID_ALWAYS_EXISTS && gid == HB_MAP_VALUE_INVALID)\n+    {\n+      DEBUG_MSG(SUBSET, nullptr, \"Drop U+%04X; no gid\", cp);\n+      continue;\n+    }\n+\n+    plan->codepoint_to_glyph->set (cp, gid);\n+    plan->unicode_to_new_gid_list.push (hb_pair (cp, gid));\n+  }\n+}\n+\n+template<bool GID_ALWAYS_EXISTS = false, typename I, typename F, hb_requires (hb_is_iterator (I))>\n+static void\n+_fill_unicode_and_glyph_map(hb_subset_plan_t *plan,\n+                            I unicode_iterator,\n+                            F unicode_to_gid_for_iterator)\n+{\n+  _fill_unicode_and_glyph_map(plan, unicode_iterator, unicode_to_gid_for_iterator, unicode_to_gid_for_iterator);\n+}\n+\n@@ -483,0 +682,1 @@\n+\n@@ -495,2 +695,1 @@\n-      for (hb_codepoint_t cp : *unicodes)\n-      {\n+      _fill_unicode_and_glyph_map(plan, unicodes->iter(), [&] (hb_codepoint_t cp) {\n@@ -498,4 +697,2 @@\n-        if (!cmap.get_nominal_glyph (cp, &gid))\n-        {\n-          DEBUG_MSG(SUBSET, nullptr, \"Drop U+%04X; no gid\", cp);\n-          continue;\n+        if (!cmap.get_nominal_glyph (cp, &gid)) {\n+          return HB_MAP_VALUE_INVALID;\n@@ -503,4 +700,2 @@\n-\n-        plan->codepoint_to_glyph->set (cp, gid);\n-        plan->unicode_to_new_gid_list.push (hb_pair (cp, gid));\n-      }\n+        return gid;\n+      });\n@@ -512,12 +707,3 @@\n-      for (hb_codepoint_t cp : *unicodes)\n-      {\n-        hb_codepoint_t gid = unicode_to_gid->get (cp);\n-        if (gid == HB_MAP_VALUE_INVALID)\n-        {\n-          DEBUG_MSG(SUBSET, nullptr, \"Drop U+%04X; no gid\", cp);\n-          continue;\n-        }\n-\n-        plan->codepoint_to_glyph->set (cp, gid);\n-        plan->unicode_to_new_gid_list.push (hb_pair (cp, gid));\n-      }\n+      _fill_unicode_and_glyph_map(plan, unicodes->iter(), [&] (hb_codepoint_t cp) {\n+        return unicode_to_gid->get (cp);\n+      });\n@@ -553,0 +739,1 @@\n+\n@@ -556,6 +743,6 @@\n-\n-        for (hb_codepoint_t cp : unicodes)\n-        {\n-          plan->codepoint_to_glyph->set (cp, gid);\n-          plan->unicode_to_new_gid_list.push (hb_pair (cp, gid));\n-        }\n+        _fill_unicode_and_glyph_map<true>(plan, unicodes, [&] (hb_codepoint_t cp) {\n+          return gid;\n+        },\n+        [&] (hb_codepoint_t cp) {\n+          return unicode_glyphid_map->get(cp);\n+        });\n@@ -563,3 +750,3 @@\n-      for (hb_codepoint_t cp : *unicodes)\n-      {\n-        \/* Don't double-add entry. *\/\n+\n+      _fill_unicode_and_glyph_map(plan, unicodes->iter(), [&] (hb_codepoint_t cp) {\n+          \/* Don't double-add entry. *\/\n@@ -567,1 +754,1 @@\n-          continue;\n+          return HB_MAP_VALUE_INVALID;\n@@ -569,3 +756,5 @@\n-        hb_codepoint_t *gid;\n-        if (!unicode_glyphid_map->has(cp, &gid))\n-          continue;\n+        return unicode_glyphid_map->get(cp);\n+      },\n+      [&] (hb_codepoint_t cp) {\n+          return unicode_glyphid_map->get(cp);\n+      });\n@@ -573,3 +762,0 @@\n-        plan->codepoint_to_glyph->set (cp, *gid);\n-        plan->unicode_to_new_gid_list.push (hb_pair (cp, *gid));\n-      }\n@@ -581,1 +767,2 @@\n-      for (hb_codepoint_t cp : *cmap_unicodes)\n+      hb_codepoint_t first = HB_SET_VALUE_INVALID, last = HB_SET_VALUE_INVALID;\n+      for (; cmap_unicodes->next_range (&first, &last); )\n@@ -583,6 +770,9 @@\n-        hb_codepoint_t gid = (*unicode_glyphid_map)[cp];\n-        if (!unicodes->has (cp) && !glyphs->has (gid))\n-          continue;\n-\n-        plan->codepoint_to_glyph->set (cp, gid);\n-        plan->unicode_to_new_gid_list.push (hb_pair (cp, gid));\n+        _fill_unicode_and_glyph_map(plan, hb_range(first, last + 1), [&] (hb_codepoint_t cp) {\n+          hb_codepoint_t gid = (*unicode_glyphid_map)[cp];\n+          if (!unicodes->has (cp) && !glyphs->has (gid))\n+            return HB_MAP_VALUE_INVALID;\n+          return gid;\n+        },\n+        [&] (hb_codepoint_t cp) {\n+          return unicode_glyphid_map->get(cp);\n+        });\n@@ -611,1 +801,0 @@\n-}\n@@ -613,3 +802,15 @@\n-#ifndef HB_COMPOSITE_OPERATIONS_PER_GLYPH\n-#define HB_COMPOSITE_OPERATIONS_PER_GLYPH 64\n-#endif\n+  \/\/ Variation selectors don't have glyphs associated with them in the cmap so they will have been filtered out above\n+  \/\/ but should still be retained. Add them back here.\n+\n+  \/\/ However, the min and max codepoints for OS\/2 should be calculated without considering variation selectors,\n+  \/\/ so record those first.\n+  plan->os2_info.min_cmap_codepoint = plan->unicodes.get_min();\n+  plan->os2_info.max_cmap_codepoint = plan->unicodes.get_max();\n+\n+  hb_set_t variation_selectors_to_retain;\n+  cmap.collect_variation_selectors(&variation_selectors_to_retain);\n+  + variation_selectors_to_retain.iter()\n+  | hb_filter(unicodes)\n+  | hb_sink(&plan->unicodes)\n+  ;\n+}\n@@ -642,12 +843,0 @@\n-#ifndef HB_NO_VAR_COMPOSITES\n-  for (auto &item : glyph.get_var_composite_iterator ())\n-   {\n-    operation_count =\n-      _glyf_add_gid_and_children (glyf,\n-                                  item.get_gid (),\n-                                  gids_to_retain,\n-                                  operation_count,\n-                                  depth);\n-   }\n-#endif\n-\n@@ -717,1 +906,2 @@\n-        plan->gsub_insert_catch_all_feature_variation_rec);\n+        plan->gsub_old_features,\n+        plan->gsub_old_feature_idx_tag_map);\n@@ -728,1 +918,2 @@\n-        plan->gpos_insert_catch_all_feature_variation_rec);\n+        plan->gpos_old_features,\n+        plan->gpos_old_feature_idx_tag_map);\n@@ -742,1 +933,1 @@\n-    _colr_closure (plan->source, &plan->colrv1_layers, &plan->colr_palettes, &cur_glyphset);\n+    _colr_closure (plan, &cur_glyphset);\n@@ -748,0 +939,2 @@\n+  \/\/ XXX TODO VARC closure \/ subset\n+\n@@ -754,1 +947,1 @@\n-                                  cur_glyphset.get_population () * HB_COMPOSITE_OPERATIONS_PER_GLYPH);\n+                                  cur_glyphset.get_population () * HB_MAX_COMPOSITE_OPERATIONS_PER_GLYPH);\n@@ -874,0 +1067,1 @@\n+  reverse_glyph_map->alloc (reverse_glyph_map->get_population () + new_to_old_gid_list->length);\n@@ -877,0 +1071,1 @@\n+  glyph_map->alloc (glyph_map->get_population () + new_to_old_gid_list->length);\n@@ -935,3 +1130,3 @@\n-      plan->axes_location.set (axis_tag, Triple (static_cast<float> (normalized_min \/ 16384.f),\n-                                                 static_cast<float> (normalized_default \/ 16384.f),\n-                                                 static_cast<float> (normalized_max \/ 16384.f)));\n+      plan->axes_location.set (axis_tag, Triple (static_cast<double> (normalized_min \/ 16384.0),\n+                                                 static_cast<double> (normalized_default \/ 16384.0),\n+                                                 static_cast<double> (normalized_max \/ 16384.0)));\n@@ -960,2 +1155,2 @@\n-  hb_font_t *font = nullptr;\n-  if (unlikely (!plan->check_success (font = _get_hb_font_with_variations (plan))))\n+  hb_font_t *font = _get_hb_font_with_variations (plan);\n+  if (unlikely (!plan->check_success (font != nullptr)))\n@@ -1039,2 +1234,2 @@\n-  \/* contour_points vector only needed for updating gvar table (infer delta)\n-   * during partial instancing *\/\n+  \/* contour_points vector only needed for updating gvar table (infer delta and\n+   * iup delta optimization) during partial instancing *\/\n@@ -1058,1 +1253,2 @@\n-    if (unlikely (!glyf.glyph_for_gid (old_gid).get_all_points_without_var (plan->source, all_points)))\n+    auto glyph = glyf.glyph_for_gid (old_gid);\n+    if (unlikely (!glyph.get_all_points_without_var (plan->source, all_points)))\n@@ -1062,0 +1258,4 @@\n+\n+    \/* composite new gids are only needed by iup delta optimization *\/\n+    if ((plan->flags & HB_SUBSET_FLAGS_OPTIMIZE_IUP_DELTAS) && glyph.is_composite ())\n+      plan->composite_new_gids.add (new_gid);\n@@ -1096,0 +1296,1 @@\n+  has_gdef_varstore = false;\n@@ -1115,0 +1316,4 @@\n+#ifdef HB_EXPERIMENTAL_API\n+  force_long_loca = force_long_loca || (flags & HB_SUBSET_FLAGS_IFTB_REQUIREMENTS);\n+#endif\n+\n@@ -1163,0 +1368,10 @@\n+  if (!drop_tables.has (HB_OT_TAG_GDEF))\n+    _remap_used_mark_sets (this, used_mark_sets_map);\n+\n+#ifndef HB_NO_VAR\n+#ifndef HB_NO_BASE\n+  if (!drop_tables.has (HB_OT_TAG_BASE))\n+    _collect_base_variation_indices (this);\n+#endif\n+#endif\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-plan.cc","additions":314,"deletions":99,"binary":false,"changes":413,"status":"modified"},{"patch":"@@ -44,0 +44,7 @@\n+struct os2_info_t {\n+  hb_codepoint_t min_cmap_codepoint;\n+  hb_codepoint_t max_cmap_codepoint;\n+};\n+\n+typedef struct os2_info_t os2_info_t;\n+\n@@ -81,0 +88,7 @@\n+\n+  void add_delta (float delta_x, float delta_y)\n+  {\n+    x += delta_x;\n+    y += delta_y;\n+  }\n+\n@@ -84,1 +98,0 @@\n-\n@@ -93,1 +106,3 @@\n-  void extend (const hb_array_t<contour_point_t> &a)\n+  bool add_deltas (hb_array_t<const float> deltas_x,\n+                   hb_array_t<const float> deltas_y,\n+                   hb_array_t<const bool> indices)\n@@ -95,6 +110,10 @@\n-    unsigned int old_len = length;\n-    if (unlikely (!resize (old_len + a.length, false)))\n-      return;\n-    auto arrayZ = this->arrayZ + old_len;\n-    unsigned count = a.length;\n-    hb_memcpy (arrayZ, a.arrayZ, count * sizeof (arrayZ[0]));\n+    if (indices.length != deltas_x.length ||\n+        indices.length != deltas_y.length)\n+      return false;\n+\n+    for (unsigned i = 0; i < indices.length; i++)\n+    {\n+      if (!indices.arrayZ[i]) continue;\n+      arrayZ[i].add_delta (deltas_x.arrayZ[i], deltas_y.arrayZ[i]);\n+    }\n+    return true;\n@@ -150,0 +169,3 @@\n+  \/\/ whether GDEF ItemVariationStore is retained\n+  mutable bool has_gdef_varstore;\n+\n@@ -157,0 +179,2 @@\n+  os2_info_t os2_info;\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-plan.hh","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"hb-ot-layout-base-table.hh\"\n@@ -297,2 +298,2 @@\n-  if (unlikely (buf_size > c->source_blob->length * 16 ||\n-                !buf->alloc (buf_size, true)))\n+  if (unlikely (buf_size > c->source_blob->length * 256 ||\n+                !buf->alloc_exact (buf_size)))\n@@ -463,0 +464,1 @@\n+  case HB_OT_TAG_OS2:\n@@ -465,1 +467,1 @@\n-    return !plan->normalized_coords || plan->all_axes_pinned || !pending_subset_tags.has (HB_OT_TAG_GDEF);\n+    return plan->all_axes_pinned || !pending_subset_tags.has (HB_OT_TAG_GDEF);\n@@ -505,0 +507,1 @@\n+  case HB_OT_TAG_BASE: return _subset<const OT::BASE> (plan, buf);\n@@ -550,0 +553,1 @@\n+\n@@ -593,1 +597,1 @@\n- * if the subset operation fails.\n+ * if the subset operation fails or the face has no glyphs.\n@@ -600,1 +604,7 @@\n-  if (unlikely (!input || !source)) return hb_face_get_empty ();\n+  if (unlikely (!input || !source)) return nullptr;\n+\n+  if (unlikely (!source->get_num_glyphs ()))\n+  {\n+    DEBUG_MSG (SUBSET, nullptr, \"No glyphs in source font.\");\n+    return nullptr;\n+  }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset.cc","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -76,0 +76,5 @@\n+ * @HB_SUBSET_FLAGS_OPTIMIZE_IUP_DELTAS: If set perform IUP delta optimization on the\n+ * remaining gvar table's deltas. Since: 8.5.0\n+ * @HB_SUBSET_FLAGS_IFTB_REQUIREMENTS: If set enforce requirements on the output subset\n+ * to allow it to be used with incremental font transfer IFTB patches. Primarily,\n+ * this forces all outline data to use long (32 bit) offsets. Since: EXPERIMENTAL\n@@ -93,0 +98,4 @@\n+  HB_SUBSET_FLAGS_OPTIMIZE_IUP_DELTAS     =  0x00000400u,\n+#ifdef HB_EXPERIMENTAL_API\n+  HB_SUBSET_FLAGS_IFTB_REQUIREMENTS       =  0x00000800u,\n+#endif\n@@ -167,0 +176,4 @@\n+HB_EXTERN hb_bool_t\n+hb_subset_input_pin_all_axes_to_default (hb_subset_input_t  *input,\n+                                         hb_face_t          *face);\n+\n@@ -178,1 +191,7 @@\n-#ifdef HB_EXPERIMENTAL_API\n+HB_EXTERN hb_bool_t\n+hb_subset_input_get_axis_range (hb_subset_input_t  *input,\n+                                hb_tag_t            axis_tag,\n+                                float              *axis_min_value,\n+                                float              *axis_max_value,\n+                                float              *axis_def_value);\n+\n@@ -185,1 +204,7 @@\n-                                float              *axis_def_value);\n+                                float               axis_def_value);\n+\n+HB_EXTERN hb_bool_t\n+hb_subset_axis_range_from_string (const char *str, int len,\n+                                  float *axis_min_value,\n+                                  float *axis_max_value,\n+                                  float *axis_def_value);\n@@ -187,0 +212,7 @@\n+HB_EXTERN void\n+hb_subset_axis_range_to_string (hb_subset_input_t *input,\n+                                hb_tag_t axis_tag,\n+                                char *buf,\n+                                unsigned size);\n+\n+#ifdef HB_EXPERIMENTAL_API\n@@ -195,1 +227,0 @@\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset.h","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * on file with this description: Unicode 15.1.0\n+ * on file with this description: Unicode 16.0.0\n@@ -16,1 +16,1 @@\n-_hb_ucd_sc_map[165] =\n+_hb_ucd_sc_map[172] =\n@@ -100,1 +100,4 @@\n-              HB_SCRIPT_NAG_MUNDARI,\n+              HB_SCRIPT_NAG_MUNDARI,                  HB_SCRIPT_GARAY,\n+             HB_SCRIPT_GURUNG_KHEMA,              HB_SCRIPT_KIRAT_RAI,\n+                  HB_SCRIPT_OL_ONAL,                HB_SCRIPT_SUNUWAR,\n+                   HB_SCRIPT_TODHRI,          HB_SCRIPT_TULU_TIGALARI,\n@@ -871,1 +874,1 @@\n-_hb_ucd_dm2_u64_map[388] =\n+_hb_ucd_dm2_u64_map[408] =\n@@ -1054,0 +1057,1 @@\n+   HB_CODEPOINT_ENCODE3 (0x105D2u, 0x0307u, 0x105C9u), HB_CODEPOINT_ENCODE3 (0x105DAu, 0x0307u, 0x105E4u),\n@@ -1057,4 +1061,13 @@\n-  HB_CODEPOINT_ENCODE3 (0x11347u, 0x11357u, 0x1134Cu),HB_CODEPOINT_ENCODE3 (0x114B9u, 0x114B0u, 0x114BCu),\n-  HB_CODEPOINT_ENCODE3 (0x114B9u, 0x114BAu, 0x114BBu),HB_CODEPOINT_ENCODE3 (0x114B9u, 0x114BDu, 0x114BEu),\n-  HB_CODEPOINT_ENCODE3 (0x115B8u, 0x115AFu, 0x115BAu),HB_CODEPOINT_ENCODE3 (0x115B9u, 0x115AFu, 0x115BBu),\n-  HB_CODEPOINT_ENCODE3 (0x11935u, 0x11930u, 0x11938u), HB_CODEPOINT_ENCODE3 (0x1D157u, 0x1D165u, 0x0000u),\n+  HB_CODEPOINT_ENCODE3 (0x11347u, 0x11357u, 0x1134Cu),HB_CODEPOINT_ENCODE3 (0x11382u, 0x113C9u, 0x11383u),\n+  HB_CODEPOINT_ENCODE3 (0x11384u, 0x113BBu, 0x11385u),HB_CODEPOINT_ENCODE3 (0x1138Bu, 0x113C2u, 0x1138Eu),\n+  HB_CODEPOINT_ENCODE3 (0x11390u, 0x113C9u, 0x11391u),HB_CODEPOINT_ENCODE3 (0x113C2u, 0x113B8u, 0x113C7u),\n+  HB_CODEPOINT_ENCODE3 (0x113C2u, 0x113C2u, 0x113C5u),HB_CODEPOINT_ENCODE3 (0x113C2u, 0x113C9u, 0x113C8u),\n+  HB_CODEPOINT_ENCODE3 (0x114B9u, 0x114B0u, 0x114BCu),HB_CODEPOINT_ENCODE3 (0x114B9u, 0x114BAu, 0x114BBu),\n+  HB_CODEPOINT_ENCODE3 (0x114B9u, 0x114BDu, 0x114BEu),HB_CODEPOINT_ENCODE3 (0x115B8u, 0x115AFu, 0x115BAu),\n+  HB_CODEPOINT_ENCODE3 (0x115B9u, 0x115AFu, 0x115BBu),HB_CODEPOINT_ENCODE3 (0x11935u, 0x11930u, 0x11938u),\n+  HB_CODEPOINT_ENCODE3 (0x1611Eu, 0x1611Eu, 0x16121u),HB_CODEPOINT_ENCODE3 (0x1611Eu, 0x1611Fu, 0x16123u),\n+  HB_CODEPOINT_ENCODE3 (0x1611Eu, 0x16120u, 0x16125u),HB_CODEPOINT_ENCODE3 (0x1611Eu, 0x16129u, 0x16122u),\n+  HB_CODEPOINT_ENCODE3 (0x16121u, 0x1611Fu, 0x16126u),HB_CODEPOINT_ENCODE3 (0x16121u, 0x16120u, 0x16128u),\n+  HB_CODEPOINT_ENCODE3 (0x16122u, 0x1611Fu, 0x16127u),HB_CODEPOINT_ENCODE3 (0x16129u, 0x1611Fu, 0x16124u),\n+  HB_CODEPOINT_ENCODE3 (0x16D63u, 0x16D67u, 0x16D69u),HB_CODEPOINT_ENCODE3 (0x16D67u, 0x16D67u, 0x16D68u),\n+  HB_CODEPOINT_ENCODE3 (0x16D69u, 0x16D67u, 0x16D6Au), HB_CODEPOINT_ENCODE3 (0x1D157u, 0x1D165u, 0x0000u),\n@@ -1072,1 +1085,1 @@\n-_hb_ucd_u8[17884] =\n+_hb_ucd_u8[17612] =\n@@ -1074,34 +1087,17 @@\n-    0,  1,  2,  3,  4,  5,  6,  7,  7,  8,  7,  7,  7,  7,  7,  7,\n-    7,  7,  7,  7,  9, 10,  7,  7,  7,  7, 11, 12, 13, 13, 13, 14,\n-   15, 16, 17, 18, 19, 20, 21, 22, 23, 22, 22, 22, 22, 24,  7,  7,\n-   25, 26, 22, 22, 22, 27, 28, 29, 22, 30, 31, 32, 33, 34, 35, 36,\n-    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n-    7,  7,  7,  7, 37,  7, 38, 39,  7, 40,  7,  7,  7, 41, 22, 42,\n-    7,  7, 43,  7, 44, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 46,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 47,\n+    0,  1,  2,  3,  4,  5,  5,  5,  5,  5,  6,  5,  5,  7,  8,  9,\n+   10, 11, 12, 13, 14, 15, 16,  5, 17, 15, 18, 19, 20, 21, 22, 23,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 24, 25, 26,  5, 27, 28,\n+    5, 29, 30, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 32,\n+    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 33,\n@@ -1109,47 +1105,33 @@\n-   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n-   32, 33, 34, 34, 35, 36, 37, 38, 39, 34, 34, 34, 40, 41, 42, 43,\n-   44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n-   60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69, 70, 71, 69, 72, 73,\n-   69, 69, 64, 74, 64, 64, 75, 76, 77, 78, 79, 80, 81, 82, 69, 83,\n-   84, 85, 86, 87, 88, 89, 69, 69, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 90, 34, 34, 34, 34,\n-   91, 34, 34, 34, 34, 34, 34, 34, 34, 92, 34, 34, 93, 94, 95, 96,\n-   97, 98, 99,100,101,102,103,104, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,105,\n-  106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,\n-  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,\n-  107,107, 34, 34,108,109,110,111, 34, 34,112,113,114,115,116,117,\n-  118,119,120,121,122,123,124,125,126,127,128,129, 34, 34,130,131,\n-  132,133,134,135,136,137,138,139,140,141,142,122,143,144,145,146,\n-  147,148,149,150,151,152,153,122,154,155,122,156,157,158,159,122,\n-  160,161,162,163,164,165,166,122,167,168,169,170,122,171,172,173,\n-   34, 34, 34, 34, 34, 34, 34,174,175, 34,176,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,177,\n-   34, 34, 34, 34, 34, 34, 34, 34,178,122,122,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122, 34, 34, 34, 34,179,122,122,122,\n-   34, 34, 34, 34,180,181,182,183,122,122,122,122,184,185,186,187,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,188,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34,189,190,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,191,\n-   34, 34,192, 34, 34,193,122,122,122,122,122,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,194,195,122,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,122,122,122,122,122,122,196,197,\n-   69,198,199,200,201,202,203,122,204,205,206,207,208,209,210,211,\n-   69, 69, 69, 69,212,213,122,122,122,122,122,122,122,122,214,122,\n-  215,216,217,122,122,218,122,122,122,219,122,122,122,122,122,220,\n-   34,221,222,122,122,122,122,122,223,224,225,122,226,227,122,122,\n-  228,229,230,231,232,122, 69,233, 69, 69, 69, 69, 69,234,235,236,\n-  237,238, 69, 69,239,240, 69,241,122,122,122,122,122,122,122,122,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,242, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,243, 34,\n-  244, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,245, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34,246, 34, 34, 34, 34,247,122,122,122,\n-   34, 34, 34, 34,248,122,122,122,122,122,122,122,122,122,122,122,\n-   34, 34, 34, 34, 34, 34,249, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34,250,122,122,122,122,122,122,122,122,\n-  251,122,252,253,122,122,122,122,122,122,122,122,122,122,122,122,\n-  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,254,\n-  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,255,\n+   16, 17, 18, 19, 20, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n+   31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 33, 41, 42, 43, 44, 45,\n+   46, 47, 48, 39, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 49, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   50, 17, 17, 17, 51, 17, 52, 53, 54, 55, 56, 57, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 58, 59, 59, 59, 59, 59, 59, 59, 59,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 17, 61, 62, 17, 63, 64, 65,\n+   66, 67, 68, 69, 70, 71, 17, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n+   81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n+   17, 17, 17, 97, 98, 99,100,100,100,100,100,100,100,100,100,101,\n+   17, 17, 17, 17,102, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17,103, 17, 17,104,100,100,100,100,100,100,100,100,100,\n+  100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,\n+  100,105,100,100,100,100,100,100, 17, 17,106,107,100,108,109,110,\n+   17, 17, 17, 17, 17, 17, 17,111, 17, 17, 17, 17,112,113,100,100,\n+  100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,114,\n+   17,115,116,100,100,100,100,100,100,100,100,100,117,100,100,100,\n+  100,100,100,100,100,100,100,100,100,100,100,100,118, 39,119,120,\n+  121,122,123,124,125,126,127,128, 39, 39,129,100,100,100,100,130,\n+  131,132,133,100,134,135,100,136,137,138,100,100,139,140,141,100,\n+  142,143,144,145, 39, 39,146,147,148, 39,149,150,100,100,100,100,\n+   17, 17, 17, 17, 17, 17,151, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17,152,153, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,154, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,155, 17, 17,156,100,\n+  100,100,100,100,100,100,100,100, 17, 17,157,100,100,100,100,100,\n+   17, 17, 17,158, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17,159,100,100,100,100,100,100,100,100,100,100,100,100,\n+  160,161,100,100,100,100,100,100,100,100,100,100,100,100,100,100,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,162,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,163,\n@@ -1192,1 +1174,1 @@\n-   36, 36, 36, 36, 82, 36, 36, 61, 65, 44, 44, 44, 43, 43, 43, 43,\n+   36, 36, 36, 36, 82, 36, 36, 61, 65, 44, 44, 57, 43, 43, 43, 43,\n@@ -1265,2 +1247,2 @@\n-   36, 36, 85, 43, 43, 85, 85, 86, 86, 85, 98, 36, 36, 36, 61, 44,\n-   97, 67, 67, 67, 67, 50, 43, 43, 43, 43, 67, 67, 67, 67, 21, 64,\n+   36, 36, 85, 43, 43, 85, 85, 86, 86, 85, 98, 36, 36, 36, 61,  2,\n+   97, 67, 67, 67, 67, 50, 43, 43, 43, 43, 67, 67, 67, 67, 21,  2,\n@@ -1271,1 +1253,1 @@\n-   16, 16, 16, 16,110, 44, 44, 44, 11, 11, 11, 11, 11, 47, 48, 11,\n+   16, 16, 16, 16, 34,110, 44, 44, 11, 11, 11, 11, 11, 47, 48, 11,\n@@ -1299,27 +1281,27 @@\n-    8, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 92, 44, 44, 44, 44,\n-   67, 67, 67, 67, 67, 92, 44, 44, 27, 27, 27, 27, 27, 27, 67, 67,\n-   67, 67, 67, 67, 67, 27, 27, 27, 67, 67, 67, 26, 67, 67, 67, 67,\n-   26, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,  8,  8,  8,  8,\n-   67, 67, 67, 67, 67, 67, 67, 26, 67, 67, 67, 67,  4,  4,  4,  4,\n-    4,  4,  4, 27, 27, 27, 27, 27, 27, 27, 67, 67, 67, 67, 67, 67,\n-    8,  8,129,147,  8,  8,  8,  8,  8,  8,  8,  4,  4,  4,  4,  4,\n-    8,129,148,148,148,148,148,148,148,148,148,148,147,  8,  8,  8,\n-    8,  8,  8,  8,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  4,  8,\n-    8,  8,144, 26,  8,  8,144, 67, 67, 67, 44, 67, 67, 67, 67, 67,\n-   67, 67, 67, 55, 67, 67, 67, 67, 32, 11, 32, 34, 34, 34, 34, 11,\n-   32, 32, 34, 16, 16, 16, 40, 11, 32, 32,140, 67, 67,138, 34,149,\n-   43, 32, 44, 44, 93,  2, 99,  2, 16, 16, 16,150, 44, 44,150, 44,\n-   36, 36, 36, 36, 44, 44, 44, 52, 64, 44, 44, 44, 44, 44, 44, 57,\n-   36, 36, 36, 61, 44, 44, 44, 44, 36, 36, 36, 61, 36, 36, 36, 61,\n-    2,121,121,  2,125,126,121,  2,  2,  2,  2,  6,  2,108,121,  2,\n-  121,  4,  4,  4,  4,  2,  2, 88,  2,  2,  2,  2,  2,120,  2,  2,\n-  108,151,  2,  2,  2,  2,  2,  2, 67,  2,152,148,148,148,153, 44,\n-   67, 67, 67, 67, 67, 55, 67, 67, 67, 67, 44, 44, 44, 44, 44, 44,\n-   67, 67, 67, 44, 44, 44, 44, 44,  1,  2,154,155,  4,  4,  4,  4,\n-    4, 67,  4,  4,  4,  4,156,157,158,105,105,105,105, 43, 43, 86,\n-  159, 40, 40, 67,105,160, 63, 67, 36, 36, 36, 61, 57,161,162, 69,\n-   36, 36, 36, 36, 36, 63, 40, 69, 44, 44, 62, 36, 36, 36, 36, 36,\n-   67, 27, 27, 67, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44, 44, 55,\n-   67, 67, 67, 67, 67, 67, 67, 92, 27, 27, 27, 27, 27, 67, 67, 67,\n-   67, 67, 67, 67, 27, 27, 27, 27,163, 27, 27, 27, 27, 27, 27, 27,\n-   36, 36, 83, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,164,  2,\n+    8, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 92, 44, 44,\n+   27, 27, 27, 27, 27, 27, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27,\n+   67, 67, 67, 26, 67, 67, 67, 67, 26, 67, 67, 67, 67, 67, 67, 67,\n+   67, 67, 67, 67,  8,  8,  8,  8, 67, 67, 67, 67, 67, 67, 67, 26,\n+   67, 67, 67, 67,  4,  4,  4,  4,  4,  4,  4, 27, 27, 27, 27, 27,\n+   27, 27, 67, 67, 67, 67, 67, 67,  8,  8,129,147,  8,  8,  8,  8,\n+    8,  8,  8,  4,  4,  4,  4,  4,  8,129,148,148,148,148,148,148,\n+  148,148,148,148,147,  8,  8,  8,  8,  8,  8,  8,  4,  4,  8,  8,\n+    8,  8,  8,  8,  8,  8,  4,  8,  8,  8,144, 26,  8,  8,144, 67,\n+   67, 67, 44, 67, 67, 67, 67, 67, 67, 67, 67, 55, 67, 67, 67, 67,\n+   32, 11, 32, 34, 34, 34, 34, 11, 32, 32, 34, 16, 16, 16, 40, 11,\n+   32, 32,140, 67, 67,138, 34,149, 43, 32, 44, 44, 93,  2, 99,  2,\n+   16, 16, 16,150, 44, 44,150, 44, 36, 36, 36, 36, 44, 44, 44, 52,\n+   64, 44, 44, 44, 44, 44, 44, 57, 36, 36, 36, 61, 44, 44, 44, 44,\n+   36, 36, 36, 61, 36, 36, 36, 61,  2,121,121,  2,125,126,121,  2,\n+    2,  2,  2,  6,  2,108,121,  2,121,  4,  4,  4,  4,  2,  2, 88,\n+    2,  2,  2,  2,  2,120,  2,  2,108,151,  2,  2,  2,  2,  2,  2,\n+   67,  2,152,148,148,148,153, 44, 67, 67, 67, 67, 67, 55, 67, 67,\n+   67, 67, 44, 44, 44, 44, 44, 44, 67, 67, 67, 44, 44, 44, 44, 44,\n+    1,  2,154,155,  4,  4,  4,  4,  4, 67,  4,  4,  4,  4,156,157,\n+  158,105,105,105,105, 43, 43, 86,159, 40, 40, 67,105,160, 63, 67,\n+   36, 36, 36, 61, 57,161,162, 69, 36, 36, 36, 36, 36, 63, 40, 69,\n+   44, 44, 62, 36, 36, 36, 36, 36, 67, 27, 27, 67, 67, 67, 67, 67,\n+   67, 67, 67, 44, 44, 44, 44, 55, 67, 67, 67, 67, 67, 67, 67, 92,\n+   27, 27, 27, 27, 27, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27, 27,\n+  163, 27, 27, 27, 27, 27, 27, 27, 36, 36, 83, 36, 36, 36, 36, 36,\n+   67, 67, 67, 92, 44, 44, 44, 44, 36, 36, 36, 36, 36, 36,164,  2,\n@@ -1333,1 +1315,1 @@\n-   32, 32, 11, 11, 34,110, 44, 44, 32,150,150, 32, 32, 44, 44, 44,\n+   32, 32, 11, 11, 34, 34, 32, 44, 32,150,150, 32, 32, 32, 47, 44,\n@@ -1394,2 +1376,4 @@\n-   27, 27, 27, 27, 27, 27, 27,100, 36, 36, 36, 36, 36, 57,184, 44,\n-   36, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 57, 43,\n+    7,  7,  7,  7,  7, 36, 36, 69, 11, 11, 11, 44, 57, 43, 43,159,\n+   16, 16, 16, 44, 44, 44, 44,  8, 27, 27, 27, 27, 27, 27, 27,100,\n+   36, 36, 36, 36, 36, 57,184, 44, 36, 44, 44, 44, 44, 44, 44, 44,\n+   44, 36, 61, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43,\n@@ -1413,8 +1397,12 @@\n-   43, 43, 80, 44, 44, 44, 44, 44, 36, 36, 94, 86, 43, 43, 43, 43,\n-   86, 43, 85, 71, 36, 63,  2,  2,  7,  7,  7,  7,  7,  2, 93, 71,\n-   86, 87, 43, 43, 85, 85, 86, 87, 85, 43, 36, 72, 44, 44, 44, 44,\n-   36, 36, 36, 36, 36, 36, 36, 94, 86, 43, 43, 44, 86, 86, 43, 87,\n-   60,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 36, 36, 43, 44,\n-   86, 87, 43, 43, 43, 85, 87, 87, 60,  2, 61, 44, 44, 44, 44, 44,\n-    2,  2,  2,  2,  2,  2, 64, 44, 36, 36, 36, 36, 36, 70, 87, 86,\n-   43, 43, 43, 87, 63, 44, 44, 44, 86, 43, 43, 87, 43, 43, 44, 44,\n+   43, 43, 80, 44, 44, 44, 44, 44, 36, 36, 36, 36, 36, 62, 44, 61,\n+   36, 36, 36, 62, 86, 87, 43, 43, 80, 90, 89, 89, 86, 90, 86, 85,\n+   71, 71,  2, 93, 64, 44, 44, 44, 57, 80, 44, 44, 44, 44, 44, 44,\n+   36, 36, 94, 86, 43, 43, 43, 43, 86, 43, 85, 71, 36, 63,  2,  2,\n+    7,  7,  7,  7,  7,  2, 93, 71, 86, 87, 43, 43, 85, 85, 86, 87,\n+   85, 43, 36, 72, 44, 44, 44, 44, 36, 36, 36, 36, 36, 36, 36, 94,\n+   86, 43, 43, 44, 86, 86, 43, 87, 60,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2, 36, 36, 43, 44, 86, 87, 43, 43, 43, 85, 87, 87,\n+   60,  2, 61, 44, 44, 44, 44, 44,  2,  2,  2,  2,  2,  2, 64, 44,\n+   36, 36, 36, 36, 36, 70, 87, 86, 43, 43, 43, 87, 63, 44, 44, 44,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 44, 44, 44, 44, 44, 44,\n+   36, 36, 36, 36, 36, 61, 57, 87, 86, 43, 43, 87, 43, 43, 44, 44,\n@@ -1430,8 +1418,9 @@\n-   43, 43, 43, 80, 43, 43, 43, 87, 63,  2,  2, 44, 44, 44, 44, 44,\n-    2, 36, 36, 36, 36, 36, 36, 36, 44, 43, 43, 43, 43, 43, 43, 43,\n-   43, 43, 43, 43, 89, 43, 43, 43, 85, 43, 87, 80, 44, 44, 44, 44,\n-   36, 36, 36, 61, 36, 62, 36, 36, 70, 43, 43, 80, 44, 80, 43, 57,\n-   43, 43, 43, 70, 44, 44, 44, 44, 36, 36, 36, 62, 61, 36, 36, 36,\n-   36, 36, 36, 36, 36, 86, 86, 90, 43, 89, 87, 87, 61, 44, 44, 44,\n-   36, 70, 85,107, 64, 44, 44, 44, 43, 94, 36, 36, 36, 36, 36, 36,\n-   36, 36, 86, 43, 43, 80, 44, 86, 85, 60,  2,  2,  2,  2,  2,  2,\n+   63, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 80, 43, 43, 43, 87,\n+   63,  2,  2, 44, 44, 44, 44, 44,  2, 36, 36, 36, 36, 36, 36, 36,\n+   44, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 89, 43, 43, 43,\n+   85, 43, 87, 80, 44, 44, 44, 44, 36, 36, 36, 61, 36, 62, 36, 36,\n+   70, 43, 43, 80, 44, 80, 43, 57, 43, 43, 43, 70, 44, 44, 44, 44,\n+   36, 36, 36, 62, 61, 36, 36, 36, 36, 36, 36, 36, 36, 86, 86, 90,\n+   43, 89, 87, 87, 61, 44, 44, 44, 36, 70, 85,107, 64, 44, 44, 44,\n+   43, 94, 36, 36, 36, 36, 36, 36, 36, 36, 86, 43, 43, 80, 44, 86,\n+   85, 60,  2,  2,  2,  2,  2,  2,  7,  7,  7,  7,  7, 80, 44, 44,\n@@ -1442,1 +1431,2 @@\n-   43, 43, 43, 44, 44, 44, 44, 44, 43, 43, 60, 44, 44, 44, 44, 44,\n+   43, 43, 43, 44, 44, 44, 44, 44, 36, 36, 36, 36, 36, 36, 36, 43,\n+   43, 43, 43, 43, 43, 86, 87, 43, 43, 43, 60, 44, 44, 44, 44, 44,\n@@ -1445,1 +1435,2 @@\n-   36, 36, 36, 36, 44, 44, 62, 36, 27, 27, 27, 30,  2, 64, 44, 44,\n+   36, 36, 36, 36, 44, 44, 62, 36, 40, 69, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 83,164,  2, 27, 27, 27, 30,  2, 64, 44, 44,\n@@ -1449,24 +1440,24 @@\n-   86, 44, 44, 44, 44, 44, 44, 44, 40, 40, 52, 40, 40, 40, 52, 81,\n-   36, 61, 44, 44, 44, 44, 44, 44, 44, 61, 44, 44, 44, 44, 44, 44,\n-   36, 61, 62, 44, 44, 44, 44, 44, 44, 44, 36, 36, 44, 44, 44, 44,\n-   36, 36, 36, 36, 36, 44, 50, 60, 65, 65, 44, 44, 44, 44, 44, 44,\n-   43, 43, 43, 43, 43, 43, 43, 44, 43, 43, 43, 80, 44, 44, 44, 44,\n-   67, 67, 67, 92, 55, 67, 67, 67, 67, 67,186, 87, 43, 67,186, 86,\n-   86,187, 65, 65, 65, 84, 43, 43, 43, 76, 50, 43, 43, 43, 67, 67,\n-   67, 67, 67, 67, 67, 43, 43, 67, 67, 43, 76, 44, 44, 44, 44, 44,\n-   27, 27, 44, 44, 44, 44, 44, 44, 11, 11, 11, 11, 11, 16, 16, 16,\n-   16, 16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 16,\n-   16, 16,110, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16, 16, 16, 16,\n-   16, 16, 16, 16, 16, 16, 47, 11, 44, 47, 48, 47, 48, 11, 47, 11,\n-   11, 11, 11, 16, 16,150,150, 16, 16, 16,150, 16, 16, 16, 16, 16,\n-   16, 16, 11, 48, 11, 47, 48, 11, 11, 11, 47, 11, 11, 11, 47, 16,\n-   16, 16, 16, 16, 11, 48, 11, 47, 11, 11, 47, 47, 44, 11, 11, 11,\n-   47, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 11, 11,\n-   11, 11, 11, 16, 16, 16, 16, 16, 16, 16, 16, 44, 11, 11, 11, 11,\n-   31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33, 16, 16,\n-   16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 31, 16, 16,\n-   16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 31, 16, 16, 16, 16, 16,\n-   16, 16, 16, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 11,\n-   11, 11, 11, 11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16,\n-   11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16, 32, 44,  7,\n-    7,  7,  7,  7,  7,  7,  7,  7, 43, 43, 43, 76, 67, 50, 43, 43,\n+   86, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 62,\n+   40, 40, 52, 40, 40, 40, 52, 81, 36, 61, 44, 44, 44, 44, 44, 44,\n+   44, 61, 44, 44, 44, 44, 44, 44, 36, 61, 62, 44, 44, 44, 44, 44,\n+   44, 44, 36, 36, 44, 44, 44, 44, 36, 36, 36, 36, 36, 44, 50, 60,\n+   65, 65, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 43, 44,\n+   43, 43, 43, 80, 44, 44, 44, 44, 67, 67, 67, 92, 55, 67, 67, 67,\n+   67, 67,186, 87, 43, 67,186, 86, 86,187, 65, 65, 65, 84, 43, 43,\n+   43, 76, 50, 43, 43, 43, 67, 67, 67, 67, 67, 67, 67, 43, 43, 67,\n+   67, 43, 76, 44, 44, 44, 44, 44, 27, 27, 44, 44, 44, 44, 44, 44,\n+   11, 11, 11, 11, 11, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11, 16, 16, 16,110, 16, 16, 16, 16, 16,\n+   11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 47, 11,\n+   44, 47, 48, 47, 48, 11, 47, 11, 11, 11, 11, 16, 16,150,150, 16,\n+   16, 16,150, 16, 16, 16, 16, 16, 16, 16, 11, 48, 11, 47, 48, 11,\n+   11, 11, 47, 11, 11, 11, 47, 16, 16, 16, 16, 16, 11, 48, 11, 47,\n+   11, 11, 47, 47, 44, 11, 11, 11, 47, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 16, 16, 16, 16, 16,\n+   16, 16, 16, 44, 11, 11, 11, 11, 31, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11,\n+   11, 11, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33,\n+   16, 16, 16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 31,\n+   16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 31, 16, 16, 16,\n+   16, 33, 16, 16, 16, 32, 44,  7, 43, 43, 43, 76, 67, 50, 43, 43,\n@@ -1482,16 +1473,17 @@\n-   36, 36, 36, 61, 36, 36, 62, 61, 36, 36, 61,179, 27, 27, 27, 27,\n-   16, 16, 43, 43, 43, 74, 44, 44, 27, 27, 27, 27, 27, 27,163, 27,\n-  188, 27,100, 44, 44, 44, 44, 44, 27, 27, 27, 27, 27, 27, 27,163,\n-   27, 27, 27, 27, 27, 27, 27, 44, 36, 36, 62, 36, 36, 36, 36, 36,\n-   62, 61, 61, 62, 62, 36, 36, 36, 36, 61, 36, 36, 62, 62, 44, 44,\n-   44, 61, 44, 62, 62, 62, 62, 36, 62, 61, 61, 62, 62, 62, 62, 62,\n-   62, 61, 61, 62, 36, 61, 36, 36, 36, 61, 36, 36, 62, 36, 61, 61,\n-   36, 36, 36, 36, 36, 62, 36, 36, 62, 36, 62, 36, 36, 62, 36, 36,\n-    8, 44, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 44, 44,\n-   55, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27, 27, 27, 27, 91, 67,\n-   67, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44, 67, 67, 67, 67, 67,\n-   67, 92, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 92, 44, 44, 44,\n-   67, 44, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 25, 41, 41,\n-   67, 67, 67, 67, 44, 44, 67, 67, 67, 67, 67, 92, 44, 55, 67, 67,\n-   67, 67, 67, 67, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 67, 55,\n-   67, 67, 67, 44, 44, 44, 44, 67, 67, 92, 67, 67, 67, 67, 67, 67,\n+  188,  7,  7,  7,  7,189, 44, 93, 36, 36, 36, 61, 36, 36, 62, 61,\n+   36, 36, 61,179, 27, 27, 27, 27, 16, 16, 43, 43, 43, 74, 44, 44,\n+   27, 27, 27, 27, 27, 27,163, 27,190, 27,100, 44, 44, 44, 44, 44,\n+   27, 27, 27, 27, 27, 27, 27,163, 27, 27, 27, 27, 27, 27, 27, 44,\n+   36, 36, 62, 36, 36, 36, 36, 36, 62, 61, 61, 62, 62, 36, 36, 36,\n+   36, 61, 36, 36, 62, 62, 44, 44, 44, 61, 44, 62, 62, 62, 62, 36,\n+   62, 61, 61, 62, 62, 62, 62, 62, 62, 61, 61, 62, 36, 61, 36, 36,\n+   36, 61, 36, 36, 62, 36, 61, 61, 36, 36, 36, 36, 36, 62, 36, 36,\n+   62, 36, 62, 36, 36, 62, 36, 36,  8, 44, 44, 44, 44, 44, 44, 44,\n+   67, 67, 67, 67, 67, 67, 44, 44, 55, 67, 67, 67, 67, 67, 67, 67,\n+   27, 27, 27, 27, 27, 27, 91, 67, 67, 67, 67, 67, 67, 67, 67, 44,\n+   44, 44, 44, 67, 67, 67, 67, 67, 67, 92, 44, 44, 44, 44, 44, 44,\n+   67, 67, 67, 67, 92, 44, 44, 44, 67, 44, 44, 44, 44, 44, 44, 44,\n+   67, 67, 67, 67, 67, 25, 41, 41, 67, 67, 67, 67, 44, 44, 67, 67,\n+   67, 67, 67, 92, 44, 55, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44,\n+   67, 67, 67, 67, 67, 44, 44, 55, 67, 67, 67, 92, 44, 44, 44, 67,\n+   67, 67, 67, 67, 67, 67, 92, 55, 67, 92, 67, 67, 67, 67, 67, 67,\n@@ -1523,2 +1515,3 @@\n-   23, 15,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0, 10, 11, 12,\n-   13,  0, 14,  0,  0,  0,  0,  0, 15,  0, 16,  0,  0,  0,  0,  0,\n+    7, 13, 13,  2, 23, 15,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,\n+    0, 10, 11, 12, 13,  0, 14,  0,  0,  0,  0,  0, 15,  0, 16,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -1527,0 +1520,1 @@\n+    0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 18, 19,  0,  0,  0,  0,\n@@ -1528,1 +1522,0 @@\n-    0,  0,  0,  0,  0, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -1530,3 +1523,2 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,\n-    0, 21, 22, 23,  0,  0,  0, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n-   33, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 20,  0, 21, 22, 23,  0,  0,  0, 24, 25, 26, 27, 28,\n+   29, 30, 31, 32, 33, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -1534,1 +1526,1 @@\n-    0,  0,  0,  0,  0,  0,  0, 35,  0, 36,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 35,  0,  0,  0,  0, 36,  0, 37,  0,  0,\n@@ -1537,77 +1529,79 @@\n-   37,  0,  0,  0,  0,  0,  0,  0,  0,  0, 38, 39,  0,  0,  0,  0,\n-    0,  0, 40, 41, 42,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  3,  0,  0,  0,  4,  5,\n-    6,  7,  0,  8,  9, 10,  0, 11, 12, 13, 14, 15, 16, 17, 16, 18,\n-   16, 19, 16, 19, 16, 19,  0, 19, 16, 20, 16, 19, 21, 19,  0, 22,\n-   23, 24, 25, 26, 27, 28, 29, 30, 31,  0, 32,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0,  0, 34,  0,  0, 35,\n-    0,  0, 36,  0, 37,  0,  0,  0, 38, 39, 40, 41, 42, 43, 44, 45,\n-   46,  0,  0, 47,  0,  0,  0, 48,  0,  0,  0, 49,  0,  0,  0,  0,\n-    0,  0,  0, 50,  0, 51,  0, 52, 53,  0, 54,  0,  0,  0,  0,  0,\n-    0, 55, 56, 57,  0,  0,  0,  0, 58,  0,  0, 59, 60, 61, 62, 63,\n-    0,  0, 64, 65,  0,  0,  0, 66,  0,  0,  0,  0, 67,  0,  0,  0,\n-   68,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 69,\n-    0,  0,  0, 70,  0, 71,  0,  0, 72,  0,  0, 73,  0,  0,  0,  0,\n-    0,  0,  0,  0, 74,  0,  0,  0,  0,  0, 75, 76,  0, 77, 78,  0,\n-    0, 79, 80,  0, 81, 62,  0, 82, 83,  0,  0, 84, 85, 86,  0,  0,\n-    0, 87,  0, 88,  0,  0, 51, 89, 51,  0, 90,  0, 91,  0,  0,  0,\n-   80,  0,  0,  0, 92, 93,  0, 94, 95, 96, 97,  0,  0,  0,  0,  0,\n-   51,  0,  0,  0,  0, 98, 99,  0,  0,  0,  0,  0,  0,100,  0,  0,\n-    0,  0,  0,101,102,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,103,\n-    0,  0,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,105,106,  0,\n-    0,107,  0,  0,  0,  0,  0,  0,108,  0,109,  0,102,  0,  0,  0,\n-    0,  0,110,111,  0,  0,  0,  0,  0,  0,  0,112,  0,  0,  0,  0,\n-    0,  0,  0,113,  0,114,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n-    5,  6,  7,  0,  8,  0,  0,  0,  0,  9, 10, 11, 12,  0,  0,  0,\n-    0, 13,  0,  0, 14, 15,  0, 16,  0, 17, 18,  0,  0, 19,  0, 20,\n-   21,  0,  0,  0,  0,  0, 22, 23,  0, 24, 25,  0,  0, 26,  0,  0,\n-    0, 27,  0,  0, 28, 29, 30, 31,  0,  0,  0, 32, 33, 34,  0,  0,\n-   33,  0,  0, 35, 33,  0,  0,  0, 33, 36,  0,  0,  0,  0,  0, 37,\n-   38,  0,  0,  0,  0,  0,  0, 39, 40,  0,  0,  0,  0,  0,  0, 41,\n-   42,  0,  0,  0,  0, 43,  0, 44,  0,  0,  0, 45, 46,  0,  0,  0,\n-   47,  0,  0,  0,  0,  0,  0, 48, 49,  0,  0,  0,  0, 50,  0,  0,\n-    0, 51,  0, 52,  0, 53,  0,  0,  0,  0, 54,  0,  0,  0,  0, 55,\n-    0, 56,  0,  0,  0,  0, 57, 58,  0,  0,  0, 59, 60,  0,  0,  0,\n-    0,  0,  0, 61, 52,  0, 62, 63,  0,  0, 64,  0,  0,  0, 65, 66,\n-    0,  0,  0, 67,  0, 68, 69, 70, 71, 72,  1, 73,  0, 74, 75, 76,\n-    0,  0, 77, 78,  0,  0,  0, 79,  0,  0,  1,  1,  0,  0, 80,  0,\n-    0, 81,  0,  0,  0,  0, 77, 82,  0, 83,  0,  0,  0,  0,  0, 78,\n-   84,  0, 85,  0, 52,  0,  1, 78,  0,  0, 86,  0,  0, 87,  0,  0,\n-    0,  0,  0, 88, 57,  0,  0,  0,  0,  0,  0, 89, 90,  0,  0, 84,\n-    0,  0, 33,  0,  0, 91,  0,  0,  0,  0, 92,  0,  0,  0,  0, 49,\n-    0,  0, 93,  0,  0,  0,  0, 94, 95,  0,  0, 96,  0,  0, 97,  0,\n-    0,  0, 98,  0,  0,  0, 99,  0,  0,  0,  0,100,101, 93,  0,  0,\n-  102,  0,  0,  0, 84,  0,  0,103,  0,  0,  0,104,105,  0,  0,106,\n-  107,  0,  0,  0,  0,  0,  0,108,  0,  0,109,  0,  0,  0,  0,110,\n-   33,  0,111,112,113, 35,  0,  0,114,  0,  0,  0,115,  0,  0,  0,\n-    0,  0,  0,116,  0,  0,117,  0,  0,  0,  0,118, 88,  0,  0,  0,\n-    0,  0, 57,  0,  0,  0,  0, 52,119,  0,  0,  0,  0,120,  0,  0,\n-  121,  0,  0,  0,  0,119,  0,  0,122,  0,  0,  0,  0,  0,  0,123,\n-    0,  0,  0,124,  0,  0,  0,125,  0,126,  0,  0,  0,  0,127,128,\n-  129,  0,130,  0,131,  0,  0,  0,132,133,134,  0, 77,  0,  0,  0,\n-    0,  0, 35,  0,  0,  0,135,  0,  0,  0,136,  0,  0,137,  0,  0,\n-  138,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  3,  4,\n-    5,  6,  7,  4,  4,  8,  9, 10,  1, 11, 12, 13, 14, 15, 16, 17,\n-   18,  1,  1,  1, 19,  1,  0,  0, 20, 21, 22,  1, 23,  4, 21, 24,\n-   25, 26, 27, 28, 29, 30,  0,  0,  1,  1, 31,  0,  0,  0, 32, 33,\n-   34, 35,  1, 36, 37,  0,  0,  0,  0, 38,  1, 39, 14, 39, 40, 41,\n-   42,  0,  0,  0, 43, 36, 44, 45, 21, 45, 46,  0,  0,  0, 19,  1,\n-   21,  0,  0, 47,  0, 38, 48,  1,  1, 49, 49, 50,  0,  0, 51,  0,\n-    0,  0, 52,  1,  0,  0, 38, 14,  4,  1,  1,  1, 53, 21, 43, 52,\n-   54, 21, 35,  1,  0,  0,  0, 55,  0,  0,  0, 56, 57, 58,  0,  0,\n-    0,  0,  0, 59,  0, 60,  0,  0,  0,  0, 61, 62,  0,  0, 63,  0,\n-    0,  0, 64,  0,  0,  0, 65,  0,  0,  0, 66,  0,  0,  0, 67,  0,\n-    0,  0, 68,  0,  0, 69, 70,  0, 71, 72, 73, 74, 75, 76,  0,  0,\n-    0, 77,  0,  0,  0, 78, 79,  0,  0,  0,  0, 47,  0,  0,  0, 49,\n-    0, 80,  0,  0,  0, 62,  0,  0, 63,  0,  0, 81,  0,  0, 82,  0,\n-    0,  0, 83,  0,  0, 19, 84,  0, 62,  0,  0,  0,  0, 49,  1, 85,\n-    1, 52, 15, 86, 36, 10, 21, 87,  0, 55,  0,  0,  0,  0, 19, 10,\n-    1,  0,  0,  0,  0,  0, 88,  0,  0, 89,  0,  0, 88,  0,  0,  0,\n-    0, 78,  0,  0, 87,  9, 12,  4, 90,  8, 91, 47,  0, 58, 50,  0,\n-   21,  1, 21, 92, 93,  1,  1,  1,  1, 94, 95, 96, 97,  1, 98, 58,\n-   81, 99,100,  4, 58,  0,  0,  0,  0,  0,  0, 19, 50,  0,  0,  0,\n-    0,  0,  0, 61,  0,  0,101,102,  0,  0,103,  0,  0,  1,  1, 50,\n-    0,  0,  0, 38,  0, 63,  0,  0,  0,  0,  0, 62,  0,  0,104, 68,\n-   61,  0,  0,  0, 78,  0,  0,  0,105,106, 58, 38, 81,  0,  0,  0,\n-    0,  0,  0,107,  1, 14,  4, 12, 84,  0,  0,  0,  0, 38, 87,  0,\n-    0,  0,  0,108,  0,  0,109, 61,  0,110,  0,  0,  0,  1,  0,  0,\n+    0,  0,  0,  0, 38,  0,  0,  0,  0,  0,  0,  0,  0,  0, 39, 40,\n+    0,  0,  0,  0,  0,  0, 41, 42, 43,  0, 44,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  3,  0,\n+    0,  0,  4,  5,  6,  7,  0,  8,  9, 10,  0, 11, 12, 13, 14, 15,\n+   16, 17, 16, 18, 16, 19, 16, 19, 16, 19,  0, 19, 16, 20, 16, 19,\n+   21, 19,  0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  0, 32,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0,  0,\n+   34,  0,  0, 35,  0,  0, 36,  0, 37,  0,  0,  0, 38, 39, 40, 41,\n+   42, 43, 44, 45, 46,  0,  0, 47,  0,  0,  0, 48,  0,  0,  0, 49,\n+    0,  0,  0,  0,  0,  0,  0, 50,  0, 51,  0, 52, 53,  0, 54,  0,\n+    0,  0,  0,  0,  0, 55, 56, 57,  0,  0,  0,  0, 58,  0,  0, 59,\n+   60, 61, 62, 63,  0,  0, 64, 65,  0,  0,  0, 66,  0,  0,  0,  0,\n+   67,  0,  0,  0, 68,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 69,  0,  0,  0, 70,  0, 71,  0,  0, 72,  0,  0, 73,\n+    0,  0,  0,  0,  0,  0,  0,  0, 74, 75,  0,  0,  0,  0, 76, 77,\n+    0, 78, 79,  0,  0, 80, 81,  0, 82, 62,  0, 83, 84,  0,  0, 85,\n+   86, 87,  0, 88,  0, 89,  0, 90,  0,  0, 51, 91, 51,  0, 92,  0,\n+   93,  0,  0,  0, 81,  0,  0,  0, 94, 95,  0, 96, 97, 98, 99,  0,\n+    0,  0,  0,  0, 51,  0,  0,  0,  0,100,101,  0,  0,  0,  0,  0,\n+    0,102,  0,  0,  0,  0,  0,  0,103,  0,  0,  0,  0,  0,  0,104,\n+  105,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,106,  0,  0,107,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,108,109,  0,  0,110,  0,  0,\n+    0,  0,  0,  0,111,  0,112,  0,105,  0,  0,  0,  0,  0,113,114,\n+    0,  0,  0,  0,  0,  0,  0,115,  0,  0,  0,116,  0,  0,  0,117,\n+    0,118,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  0,\n+    8,  0,  0,  0,  0,  9, 10, 11, 12,  0,  0,  0,  0, 13,  0,  0,\n+   14, 15,  0, 16,  0, 17, 18,  0,  0, 19,  0, 20, 21,  0,  0,  0,\n+    0,  0, 22, 23,  0, 24, 25,  0,  0, 26,  0,  0,  0, 27,  0,  0,\n+   28, 29, 30, 31,  0,  0,  0, 32, 33, 34,  0,  0, 33,  0,  0, 35,\n+   33,  0,  0,  0, 33, 36,  0,  0,  0,  0,  0, 37, 38,  0,  0,  0,\n+    0,  0,  0, 39, 40,  0,  0,  0,  0,  0,  0, 41, 42,  0,  0,  0,\n+    0, 43,  0, 44,  0,  0,  0, 45, 46,  0,  0,  0, 47,  0,  0,  0,\n+    0,  0,  0, 48, 49,  0,  0,  0,  0, 50,  0,  0,  0, 51,  0, 52,\n+    0, 53,  0,  0,  0,  0, 54,  0,  0,  0,  0, 55,  0, 56,  0,  0,\n+    0,  0, 57, 58,  0,  0,  0, 59, 60,  0,  0,  0,  0,  0,  0, 61,\n+   52,  0, 62, 63,  0,  0, 64,  0,  0,  0, 65, 66,  0,  0,  0, 67,\n+    0, 68, 69, 70, 71, 72,  1, 73,  0, 74, 75, 76,  0,  0, 77, 78,\n+    0,  0,  0, 79,  0,  0,  1,  1,  0,  0, 80,  0,  0, 81,  0,  0,\n+    0,  0, 77, 82,  0, 83,  0,  0,  0,  0,  0, 78, 84,  0, 85,  0,\n+   52,  0,  1, 78,  0,  0, 86,  0,  0, 87,  0,  0,  0,  0,  0, 88,\n+   57,  0,  0,  0,  0,  0,  0, 89, 90,  0,  0, 84,  0,  0, 33,  0,\n+    0, 91,  0,  0,  0,  0, 92,  0,  0,  0,  0, 49,  0,  0, 93,  0,\n+    0,  0,  0, 94, 95,  0,  0, 96,  0,  0, 97,  0,  0,  0, 98,  0,\n+    0,  0, 99,  0,  0,  0,100,  0,  0,  0,  0,101,102, 93,  0,  0,\n+  103,  0,  0,  0, 84,  0,  0,104,  0,  0,  0,105,106,  0,  0,107,\n+  108,  0,  0,  0,  0,  0,  0,109,  0,  0,110,  0,  0,  0,  0,111,\n+   33,  0,112,113,114, 57,  0,  0,115, 35,  0,  0,116,  0,  0,  0,\n+  117,  0,  0,  0,  0,  0,  0,118,  0,  0,119,  0,  0,  0,  0,120,\n+   88,  0,  0,  0,  0,  0, 57,  0,  0,  0,  0, 52,121,  0,  0,  0,\n+    0,122,  0,  0,123,  0,  0,  0,  0,121,  0,  0,124,  0,  0,  0,\n+    0,  0, 79,  0,  0,  0,  0,125,  0,  0,  0,126,  0,  0,  0,127,\n+    0,128,  0,  0,  0,  0,129,130,131,  0,132,  0,133,  0,  0,  0,\n+  134,135,136,  0, 77,  0,  0,  0,  0,  0, 35,  0,  0,  0,137,  0,\n+    0,  0,138,  0,  0,  0,139,  0,  0,140,  0,  0,141,  0,  0,  0,\n+    0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  3,  4,  5,  6,  7,  4,\n+    4,  8,  9, 10,  1, 11, 12, 13, 14, 15, 16, 17, 18,  1,  1,  1,\n+   19,  1,  0,  0, 20, 21, 22,  1, 23,  4, 21, 24, 25, 26, 27, 28,\n+   29, 30,  0,  0,  1,  1, 31,  0,  0,  0, 32, 33, 34, 35,  1, 36,\n+   37,  0,  0,  0,  0, 38,  1, 39, 14, 39, 40, 41, 42,  0,  0,  0,\n+   43, 36, 44, 45, 21, 45, 46,  0,  0,  0, 19,  1, 21,  0,  0, 47,\n+    0, 38, 48,  1,  1, 49, 49, 50,  0,  0, 51,  0,  0, 19, 52,  1,\n+    0,  0, 38, 14,  4,  1,  1,  1, 53, 21, 43, 52, 54, 21, 35,  1,\n+    0,  0,  0, 55,  0,  0,  0, 56, 57, 58,  0,  0,  0,  0,  0, 59,\n+    0, 60,  0,  0,  0,  0, 61, 62,  0,  0, 63,  0,  0,  0, 64,  0,\n+    0,  0, 65,  0,  0,  0, 66,  0,  0,  0, 67,  0,  0,  0, 68,  0,\n+    0, 69, 70,  0, 71, 72, 73, 74, 75, 76,  0,  0,  0, 77,  0,  0,\n+    0, 78, 79,  0,  0,  0,  0, 47,  0,  0,  0, 49,  0, 80,  0,  0,\n+    0, 62,  0,  0, 63,  0,  0, 81,  0,  0, 82,  0,  0,  0, 83,  0,\n+    0, 19, 84,  0, 62,  0,  0,  0,  0, 49,  1, 85,  1, 52, 15, 86,\n+   36, 10, 21, 87,  0, 55,  0,  0,  0,  0, 19, 10,  1,  0,  0,  0,\n+    0,  0, 88,  0,  0, 89,  0,  0, 88,  0,  0,  0,  0, 78,  0,  0,\n+   87,  9, 12,  4, 90,  8, 91, 47,  0, 58, 50,  0, 21,  1, 21, 92,\n+   93,  1,  1,  1,  1, 94, 95, 96, 97,  1, 98, 58, 81, 99,100,  4,\n+   58,  0,  0,  0,  0,  0,  0, 19, 50,  0,  0,  0,  0,  0,  0, 61,\n+    0,  0,101,102,  0,  0,103,  0,  0,  1,  1, 50,  0,  0,  0, 38,\n+    0, 63,  0,  0,  0,  0,  0, 62,  0,  0,104, 68, 61,  0,  0,  0,\n+   78,  0,  0,  0,105,106, 58, 38, 81,  0,  0,  0,  0,  0,  0,107,\n+    1, 14,  4, 12, 84,  0,  0,  0,  0, 38, 87,  0,  0,  0,  0,108,\n+    0,  0,109, 61,  0,110,  0,  0,  0,  1,  0,  0,  0,  0, 49, 50,\n@@ -1617,40 +1611,41 @@\n-    0, 38,  1, 58,  1, 58,  0,  0, 63, 89,  0,  0,115,  0,  0,  0,\n-   55,  0,  0,  0,  0,115,  0,  0,  0,  0, 61,  0,  0,  0,  0, 79,\n-    0, 61,  0,  0,  0,  0, 56,  0, 89, 80,  0,  0, 79,  0,  0,  0,\n-    8, 91,  0,  0,  1, 87,  0,  0,116,  0,  0,  0,  0,  0,  0,117,\n-    0,118,119,120,121,  0,104,  4,122, 49, 23,  0,  0,  0, 38, 50,\n-   38, 58,  0,  0,  1, 87,  1,  1,  1,  1, 39,  1, 48,105, 87,  0,\n-    0,  0,  0,  1,  0,  0,  0,123,  4,122,  0,  0,  0,  1,124,  0,\n-    0,  0,  0,  0,230,230,230,230,230,232,220,220,220,220,232,216,\n-  220,220,220,220,220,202,202,220,220,220,220,202,202,220,220,220,\n-    1,  1,  1,  1,  1,220,220,220,220,230,230,230,230,240,230,220,\n-  220,220,230,230,230,220,220,  0,230,230,230,220,220,220,220,230,\n-  232,220,220,230,233,234,234,233,234,234,233,230,  0,  0,  0,230,\n-    0,220,230,230,230,230,220,230,230,230,222,220,230,230,220,220,\n-  230,222,228,230, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20,\n-   21, 22,  0, 23,  0, 24, 25,  0,230,220,  0, 18, 30, 31, 32,  0,\n-    0,  0,  0, 27, 28, 29, 30, 31, 32, 33, 34,230,230,220,220,230,\n-  220,230,230,220, 35,  0,  0,  0,  0,  0,230,230,230,  0,  0,230,\n-  230,  0,220,230,230,220,  0,  0,  0, 36,  0,  0,230,220,230,230,\n-  220,220,230,220,220,230,220,230,220,230,230,  0,  0,220,  0,  0,\n-  230,230,  0,230,  0,230,230,230,230,230,  0,  0,  0,220,220,220,\n-  230,220,220,220,230,230,  0,220, 27, 28, 29,230,  7,  0,  0,  0,\n-    0,  9,  0,  0,  0,230,220,230,230,  0,  0,  0,  0,  0,230,  0,\n-    0, 84, 91,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,\n-  103,103,  9,  0,107,107,107,107,118,118,  9,  0,122,122,122,122,\n-  220,220,  0,  0,  0,220,  0,220,  0,216,  0,  0,  0,129,130,  0,\n-  132,  0,  0,  0,  0,  0,130,130,130,130,  0,  0,130,  0,230,230,\n-    9,  0,230,230,  0,  0,220,  0,  0,  0,  0,  7,  0,  9,  9,  0,\n-    9,  9,  0,  0,  0,230,  0,  0,  0,228,  0,  0,  0,222,230,220,\n-  220,  0,  0,  0,230,  0,  0,220,230,220,  0,220,230,230,230,  0,\n-    0,  0,  9,  9,  0,  0,  7,  0,230,  0,  1,  1,  1,  0,  0,  0,\n-  230,234,214,220,202,230,230,230,230,230,232,228,228,220,218,230,\n-  233,220,230,220,230,230,  1,  1,  1,  1,  1,230,  0,  1,  1,230,\n-  220,230,  1,  1,  0,  0,218,228,232,222,224,224,  0,  8,  8,  0,\n-    0,  0,  0,220,230,  0,230,230,220,  0,  0,230,  0,  0, 26,  0,\n-    0,220,  0,230,230,  1,220,  0,  0,230,220,  0,  0,  0,220,220,\n-    0,  0,230,220,  0,  9,  7,  0,  0,  7,  9,  0,  0,  0,  9,  7,\n-    6,  6,  0,  0,  0,  0,  1,  0,  0,216,216,  1,  1,  1,  0,  0,\n-    0,226,216,216,216,216,216,  0,220,220,220,  0,232,232,220,230,\n-  230,230,  7,  0, 16, 17, 17, 17, 17, 17, 17, 33, 17, 17, 17, 19,\n-   17, 17, 17, 17, 20,101, 17,113,129,169, 17, 27, 28, 17, 17, 17,\n+    0, 38,  1, 58,  1, 58,  0,  0,  0,  0,  0, 88, 63, 89,  0,  0,\n+  115,  0,  0,  0, 55,  0,  0,  0,  0,115,  0,  0,  0,  0, 61,  0,\n+    0,  0,  0, 79,  0, 61,  0,  0,  0,  0, 56,  0, 89, 80,  0,  0,\n+   79,  0,  0,  0,  8, 91,  0,  0,  1, 87,  0,  0,116,  0,  0,  0,\n+    0,  0,  0,117,  0,118,119,120,121,  0,104,  4,122, 49, 23,  0,\n+    0,  0, 38, 50, 38, 58,  0,  0,  1, 87,  1,  1,  1,  1, 39,  1,\n+   48,105, 87,  0,  0,  0,  0,  1,  0,  0,  0,123,  0,  0,  0,112,\n+    4,122,  0,  0,  0,  1,124,  0,  0,  0,  0,  0,230,230,230,230,\n+  230,232,220,220,220,220,232,216,220,220,220,220,220,202,202,220,\n+  220,220,220,202,202,220,220,220,  1,  1,  1,  1,  1,220,220,220,\n+  220,230,230,230,230,240,230,220,220,220,230,230,230,220,220,  0,\n+  230,230,230,220,220,220,220,230,232,220,220,230,233,234,234,233,\n+  234,234,233,230,  0,  0,  0,230,  0,220,230,230,230,230,220,230,\n+  230,230,222,220,230,230,220,220,230,222,228,230, 10, 11, 12, 13,\n+   14, 15, 16, 17, 18, 19, 19, 20, 21, 22,  0, 23,  0, 24, 25,  0,\n+  230,220,  0, 18, 30, 31, 32,  0,  0,  0,  0, 27, 28, 29, 30, 31,\n+   32, 33, 34,230,230,220,220,230,220,230,230,220, 35,  0,  0,  0,\n+    0,  0,230,230,230,  0,  0,230,230,  0,220,230,230,220,  0,  0,\n+    0, 36,  0,  0,230,220,230,230,220,220,230,220,220,230,220,230,\n+  220,230,230,  0,  0,220,  0,  0,230,230,  0,230,  0,230,230,230,\n+  230,230,  0,  0,  0,220,220,220,230,220,220,220,230,230,  0,220,\n+   27, 28, 29,230,  7,  0,  0,  0,  0,  9,  0,  0,  0,230,220,230,\n+  230,  0,  0,  0,  0,  0,230,  0,  0, 84, 91,  0,  0,  0,  0,  9,\n+    9,  0,  0,  0,  0,  0,  9,  0,103,103,  9,  0,107,107,107,107,\n+  118,118,  9,  0,122,122,122,122,220,220,  0,  0,  0,220,  0,220,\n+    0,216,  0,  0,  0,129,130,  0,132,  0,  0,  0,  0,  0,130,130,\n+  130,130,  0,  0,130,  0,230,230,  9,  0,230,230,  0,  0,220,  0,\n+    0,  0,  0,  7,  0,  9,  9,  0,  9,  9,  0,  0,  0,230,  0,  0,\n+    0,228,  0,  0,  0,222,230,220,220,  0,  0,  0,230,  0,  0,220,\n+  230,220,  0,220,230,230,230,  0,  0,  0,  9,  9,  0,  0,  7,  0,\n+  230,  0,  1,  1,  1,  0,  0,  0,230,234,214,220,202,230,230,230,\n+  230,230,232,228,228,220,218,230,233,220,230,220,230,230,  1,  1,\n+    1,  1,  1,230,  0,  1,  1,230,220,230,  1,  1,  0,  0,218,228,\n+  232,222,224,224,  0,  8,  8,  0,  0,  0,  0,220,230,  0,230,230,\n+  220,  0,  0,230,  0,  0, 26,  0,  0,220,  0,230,230,  1,220,  0,\n+    0,230,220,  0,  0,  0,220,220,  0,  0,230,220,  0,  9,  7,  0,\n+    0,  7,  9,  0,  0,  0,  9,  7,  6,  6,  0,  0,  0,  0,  1,  0,\n+    0,216,216,  1,  1,  1,  0,  0,  0,226,216,216,216,216,216,  0,\n+  220,220,220,  0,232,232,220,230,230,230,  7,  0, 16, 17, 17, 17,\n+   17, 17, 17, 33, 17, 17, 17, 19, 17, 17, 17, 17, 20,101, 17,113,\n+  129,169, 17, 27, 28, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n@@ -1662,46 +1657,38 @@\n-   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n-   17, 17, 17,237,  0,  1,  2,  2,  0,  3,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    5,  0,  0,  0,  0,  6,  7,  8,  9,  0,  0,  0, 10, 11, 12, 13,\n-   14, 15, 16, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,\n-    0,  0, 21, 22,  0,  0,  0,  0, 23, 24, 25, 26,  0, 27,  0, 28,\n-   29, 30, 31, 32,  0,  0,  0,  0,  0,  0,  0, 33, 34, 35, 36,  0,\n-    0,  0,  0,  0, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0, 38, 39,\n-    0,  0,  0,  0,  1,  2, 40, 41,  0,  1,  2,  2,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  2,  0,  0,  0,  0,\n-    0,  0,  3,  4,  0,  0,  5,  0,  0,  0,  6,  0,  0,  0,  0,  0,\n-    0,  0,  7,  1,  0,  0,  0,  0,  0,  0,  8,  9,  0,  0,  0,  0,\n-    0,  0, 10,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0, 10,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0, 11, 12,\n-    0, 13,  0, 14, 15, 16,  0,  0,  0,  0,  0,  1, 17, 18,  0, 19,\n-    7,  1,  0,  0,  0, 20, 20,  7, 20, 20, 20, 20, 20, 20, 20,  8,\n-   21,  0, 22,  0,  7, 23, 24,  0, 20, 20, 25,  0,  0,  0, 26, 27,\n-    1,  7, 20, 20, 20, 20, 20,  1, 28, 29, 30, 31,  0,  0, 20,  0,\n-    0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0, 20, 20,\n-   20,  1,  0,  0,  8, 21, 32,  4,  0, 10,  0, 33,  7, 20, 20, 20,\n-    0,  0,  0,  0,  8, 34, 34, 35, 36, 34, 37,  0, 38,  1, 20, 20,\n-    0,  0, 39,  0,  1,  1,  0,  8, 21,  1, 20,  0,  0,  0,  1,  0,\n-    0, 40,  1,  1,  0,  0,  8, 21,  0,  1,  0,  1,  0,  1,  0,  0,\n-    0,  0, 26, 34, 34, 34, 34, 34, 34, 34, 34, 34, 21,  7, 20, 41,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 21,  0, 42, 43, 44,  0, 45,\n-    0,  8, 21,  0,  0,  0,  0,  0,  0,  0,  0, 46,  7,  1, 10,  1,\n-    0,  0,  0,  1, 20, 20,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0, 26, 34,  9,  0,  0, 20, 20,  1, 20, 20,  0,  0,  0,  0,  0,\n-    0,  0, 26, 21,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  3, 47, 48,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,\n-    4,  5,  6,  7,  7,  8,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n-    9, 10, 11, 11, 11, 11, 12, 13, 13, 13, 13, 14, 15, 16, 17, 18,\n-   19, 20, 21, 13, 22, 13, 13, 13, 13, 23, 24, 24, 25, 26, 13, 13,\n-   13, 27, 28, 29, 13, 30, 31, 32, 33, 34, 35, 36,  7,  7,  7,  7,\n-    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n-   37,  7, 38, 39,  7, 40,  7,  7,  7, 41, 13, 42,  7,  7, 43,  7,\n-   44, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,237,  0,  1,  2,  2,\n+    0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  6,  7,  8,\n+    9,  0,  0,  0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 20,  0,  0, 21, 22,  0,  0,  0,  0,\n+   23, 24, 25, 26,  0, 27,  0, 28, 29, 30, 31, 32,  0,  0,  0,  0,\n+    0,  0,  0, 33, 34, 35, 36,  0,  0,  0,  0,  0, 37,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 38, 39,  0,  0,  0,  0,  1,  2, 40, 41,\n+    0,  1,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,\n+    0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  3,  4,  0,  0,  5,  0,\n+    0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  7,  1,  0,  0,  0,  0,\n+    0,  0,  8,  9,  0,  0,  0,  0,  0,  0, 10,  0,  0, 10,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0, 10,\n+    0,  0,  0,  0,  0,  0, 11, 12,  0, 13,  0, 14, 15, 16,  0,  0,\n+    0,  0,  0,  1, 17, 18,  0, 19,  7,  1,  0,  0,  0, 20, 20,  7,\n+   20, 20, 20, 20, 20, 20, 20,  8, 21,  0, 22,  0,  7, 23, 24,  0,\n+   20, 20, 25,  0,  0,  0, 26, 27,  1,  7, 20, 20, 20, 20, 20,  1,\n+   28, 29, 30, 31,  0,  0, 20,  0,  0,  0,  0,  0,  0,  0, 10,  0,\n+    0,  0,  0,  0,  0,  0, 20, 20, 20,  1,  0,  0,  8, 21, 32,  4,\n+    0, 10,  0, 33,  7, 20, 20, 20,  0,  0,  0,  0,  8, 34, 34, 35,\n+   36, 34, 37,  0, 38,  1, 20, 20,  0,  0, 39,  0,  1,  1,  0,  8,\n+   21,  1, 20,  0,  0,  0,  1,  0,  0, 40,  1,  1,  0,  0,  8, 21,\n+    0,  1,  0,  1,  0,  1,  0,  0,  0,  0, 26, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 21,  7, 20, 41, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 21,  0, 42, 43, 44,  0, 45,  0,  8, 21,  0,  0,  0,  0,  0,\n+    0,  0,  0, 46,  7,  1, 10,  1,  0,  0,  0,  1, 20, 20,  1,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0, 26, 34,  9,  0,  0, 20, 20,\n+    1, 20, 20,  0,  0,  0,  0,  0,  0,  0, 26, 21,  0,  1,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 47, 48,  0,  0,  0,\n+    0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,\n+   12, 13, 13, 13, 13, 13, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 16, 17, 18,\n+   18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20,\n+   20, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 20, 33,\n+   34, 35, 34, 34, 36, 37, 20, 20, 20, 20, 20, 20, 38, 20, 39, 40,\n+   41, 41, 41, 41, 41, 42, 43, 44, 20, 20, 20, 20, 20, 20, 20, 45,\n+   46, 20, 20, 47, 20, 20, 20, 48, 49, 50, 51, 52, 53, 54, 55, 56,\n+   57, 58, 59, 20, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n@@ -1709,170 +1696,159 @@\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 45,  0,  0,  1,\n-    2,  2,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n-   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n-   32, 32, 33, 34, 35, 36, 37, 37, 37, 37, 37, 38, 39, 40, 41, 42,\n-   43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  2,  2, 53, 54, 55, 56,\n-   57, 58, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 59, 59, 61, 61,\n-   59, 59, 59, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n-   74, 75, 76, 77, 78, 59, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 79, 70, 70, 70, 70, 80, 80,\n-   80, 80, 80, 80, 80, 80, 80, 81, 82, 82, 83, 84, 85, 86, 87, 88,\n-   89, 90, 91, 92, 93, 94, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   70, 70, 97, 98, 99,100,101,101,102,103,104,105,106,107,108,109,\n-  110,111, 96,112,113,114,115,116,117,118,119,119,120,121,122,123,\n-  124,125,126,127,128,129,130,131,132, 96,133,134,135,136,137,138,\n-  139,140,141,142,143, 96,144,145, 96,146,147,148,149, 96,150,151,\n-  152,153,154,155,156, 96,157,158,159,160, 96,161,162,163,164,164,\n-  164,164,164,164,164,165,166,164,167, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,168,169,169,\n-  169,169,169,169,169,169,170, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96,171,171,171,171,172, 96, 96, 96,173,173,\n-  173,173,174,175,176,177, 96, 96, 96, 96,178,179,180,181,182,182,\n-  182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,\n-  182,182,182,182,182,182,182,182,182,182,182,182,182,183,182,182,\n-  182,182,182,182,184,184,184,185,186, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,187,188,189,\n-  190,191,191,192, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96,193,194, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,195,196, 59,197,\n-  198,199,200,201,202, 96,203,204,205, 59, 59,206, 59,207,208,208,\n-  208,208,208,209, 96, 96, 96, 96, 96, 96, 96, 96,210, 96,211,212,\n-  213, 96, 96,214, 96, 96, 96,215, 96, 96, 96, 96, 96,216,217,218,\n-  219, 96, 96, 96, 96, 96,220,221,222, 96,223,224, 96, 96,225,226,\n-   59,227,228, 96, 59, 59, 59, 59, 59, 59, 59,229,230,231,232,233,\n-   59, 59,234,235, 59,236, 96, 96, 96, 96, 96, 96, 96, 96, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,237, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,238, 70,239, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,240, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70,241, 70, 70, 70, 70,242, 96, 96, 96, 70, 70,\n-   70, 70,243, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 70, 70,\n-   70, 70, 70, 70,244, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70,245, 96, 96, 96, 96, 96, 96, 96, 96,246, 96,\n-  247,248,  0,  1,  2,  2,  0,  1,  2,  2,  2,  3,  4,  5,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n-   19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0,\n-   19,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19,  0, 19,  0,\n-    0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,\n-   26, 26,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,\n-    9,  9,  0,  9,  9,  9,  2,  2,  9,  9,  9,  9,  0,  9,  2,  2,\n-    2,  2,  9,  0,  9,  0,  9,  9,  9,  2,  9,  2,  9,  9,  9,  9,\n-    9,  9,  9,  9,  9,  9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  9,\n-   55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,  6,  6,\n-    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  1,  1,  6,  2,  4,\n-    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n-    4,  4,  4,  4,  4,  2,  4,  4,  4,  2,  2,  4,  4,  4,  2, 14,\n-   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2,  2,\n-    2,  2,  2,  2,  2,  2, 14, 14, 14,  2,  2,  2,  2, 14, 14, 14,\n-   14, 14, 14,  2,  2,  2,  3,  3,  3,  3,  3,  0,  3,  3,  3,  3,\n-    3,  3,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n-    3,  0,  3,  3,  3,  0,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n-    3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  3,  1,  3,\n-    3,  3,  3,  3,  3,  3, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,\n-   37, 37, 37, 37,  2, 37, 37, 37, 37,  2,  2, 37, 37, 37, 38, 38,\n-   38, 38, 38, 38, 38, 38, 38, 38,  2,  2,  2,  2,  2,  2, 64, 64,\n-   64, 64, 64, 64, 64, 64, 64, 64, 64,  2,  2, 64, 64, 64, 90, 90,\n-   90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,  2,  2, 90, 90,\n-   90, 90, 90, 90, 90,  2, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,\n-   95, 95,  2,  2, 95,  2, 37, 37, 37,  2,  2,  2,  2,  2,  3,  3,\n-    3,  3,  3,  3,  3,  2,  3,  3,  2,  2,  2,  2,  2,  2,  3,  3,\n-    0,  3,  3,  3,  3,  3,  7,  7,  7,  7,  7,  7,  7,  7,  7,  1,\n-    1,  1,  1,  7,  7,  7,  7,  7,  7,  7,  0,  0,  7,  7,  5,  5,\n-    5,  5,  2,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2,  5,  5,  2,\n-    2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,\n-    5,  5,  5,  5,  5,  5,  5,  2,  5,  2,  2,  2,  5,  5,  5,  5,\n-    2,  2,  5,  5,  5,  5,  5,  2,  2,  5,  5,  5,  5,  2,  2,  2,\n-    2,  2,  2,  2,  2,  5,  2,  2,  2,  2,  5,  5,  2,  5,  5,  5,\n-    5,  5,  2,  2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2, 11,\n-   11, 11,  2, 11, 11, 11, 11, 11, 11,  2,  2,  2,  2, 11, 11,  2,\n-    2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,\n-   11, 11, 11, 11, 11, 11, 11,  2, 11, 11,  2, 11, 11,  2, 11, 11,\n-    2,  2, 11,  2, 11, 11, 11,  2,  2, 11, 11, 11,  2,  2,  2, 11,\n-    2,  2,  2,  2,  2,  2,  2, 11, 11, 11, 11,  2, 11,  2,  2,  2,\n-    2,  2,  2,  2, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,  2, 10,\n-   10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10,\n-    2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2,\n-   10, 10, 10, 10, 10, 10, 10,  2, 10, 10,  2, 10, 10, 10, 10, 10,\n-    2,  2, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10,  2,  2, 10,  2,\n-    2,  2,  2,  2,  2,  2, 10, 10, 10, 10,  2,  2, 10, 10, 10, 10,\n-    2,  2,  2,  2,  2,  2,  2, 10, 10, 10, 10, 10, 10, 10,  2, 21,\n-   21, 21,  2, 21, 21, 21, 21, 21, 21, 21, 21,  2,  2, 21, 21,  2,\n-    2, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,\n-   21, 21, 21, 21, 21, 21, 21,  2, 21, 21,  2, 21, 21, 21, 21, 21,\n-    2,  2, 21, 21, 21, 21, 21,  2,  2, 21, 21, 21,  2,  2,  2,  2,\n-    2,  2,  2, 21, 21, 21,  2,  2,  2,  2, 21, 21,  2, 21, 21, 21,\n-   21, 21,  2,  2, 21, 21,  2,  2, 22, 22,  2, 22, 22, 22, 22, 22,\n-   22,  2,  2,  2, 22, 22, 22,  2, 22, 22, 22, 22,  2,  2,  2, 22,\n-   22,  2, 22,  2, 22, 22,  2,  2,  2, 22, 22,  2,  2,  2, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22,  2,  2,  2,  2, 22, 22, 22,  2,\n-    2,  2,  2,  2,  2, 22,  2,  2,  2,  2,  2,  2, 22, 22, 22, 22,\n-   22,  2,  2,  2,  2,  2, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n-   23, 23, 23,  2, 23, 23, 23,  2, 23, 23, 23, 23, 23, 23, 23, 23,\n-    2,  2, 23, 23, 23, 23, 23,  2, 23, 23, 23, 23,  2,  2,  2,  2,\n-    2,  2,  2, 23, 23,  2, 23, 23, 23,  2,  2, 23,  2,  2, 23, 23,\n-   23, 23,  2,  2, 23, 23,  2,  2,  2,  2,  2,  2,  2, 23, 16, 16,\n-   16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16,  2,\n-   16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16, 16, 16,\n-    2,  2, 16, 16, 16, 16, 16,  2, 16, 16, 16, 16,  2,  2,  2,  2,\n-    2,  2,  2, 16, 16,  2, 16, 16, 16, 16,  2,  2, 16, 16,  2, 16,\n-   16, 16,  2,  2,  2,  2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n-   20, 20, 20,  2, 20, 20, 20,  2, 20, 20, 20, 20, 20, 20,  2,  2,\n-    2,  2, 20, 20, 20, 20, 20, 20, 20, 20,  2,  2, 20, 20,  2, 36,\n-   36, 36,  2, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n-   36, 36, 36, 36, 36,  2,  2,  2, 36, 36, 36, 36, 36, 36, 36, 36,\n-    2, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2, 36,  2,  2,  2,  2,\n-   36,  2,  2,  2,  2, 36, 36, 36, 36, 36, 36,  2, 36,  2,  2,  2,\n-    2,  2,  2,  2, 36, 36,  2,  2, 36, 36, 36,  2,  2,  2,  2, 24,\n-   24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n-   24,  2,  2,  2,  2,  0, 24, 24, 24, 24,  2,  2,  2,  2,  2, 18,\n-   18,  2, 18,  2, 18, 18, 18, 18, 18,  2, 18, 18, 18, 18, 18, 18,\n-   18, 18, 18, 18, 18, 18, 18, 18, 18, 18,  2, 18,  2, 18, 18, 18,\n-   18, 18, 18, 18,  2,  2, 18, 18, 18, 18, 18,  2, 18,  2, 18, 18,\n-   18, 18, 18, 18, 18,  2, 18, 18,  2,  2, 18, 18, 18, 18, 25, 25,\n-   25, 25, 25, 25, 25, 25,  2, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n-   25, 25, 25,  2,  2,  2, 25, 25, 25, 25, 25,  2, 25, 25, 25, 25,\n-   25, 25, 25,  0,  0,  0,  0, 25, 25,  2,  2,  2,  2,  2, 33, 33,\n-   33, 33, 33, 33, 33, 33,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n-    8,  8,  8,  8,  2,  8,  2,  2,  2,  2,  2,  8,  2,  2,  8,  8,\n-    8,  0,  8,  8,  8,  8, 12, 12, 12, 12, 12, 12, 12, 12, 30, 30,\n-   30, 30, 30, 30, 30, 30, 30,  2, 30, 30, 30, 30,  2,  2, 30, 30,\n-   30, 30, 30, 30, 30,  2, 30, 30, 30,  2,  2, 30, 30, 30, 30, 30,\n-   30, 30, 30,  2,  2,  2, 30, 30,  2,  2,  2,  2,  2,  2, 29, 29,\n-   29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,  2,  2, 28, 28,\n-   28, 28, 28, 28, 28, 28, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34,  2,  2,  2, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n-   35,  0,  0,  0, 35, 35, 35,  2,  2,  2,  2,  2,  2,  2, 45, 45,\n-   45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,  2,  2,  2,  2,\n-    2,  2,  2,  2,  2, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,\n-   44, 44, 44,  0,  0,  2, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,\n-   43, 43,  2,  2,  2,  2, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,\n-   46, 46, 46,  2, 46, 46, 46,  2, 46, 46,  2,  2,  2,  2, 31, 31,\n-   31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,  2,  2, 31, 31,\n-    2,  2,  2,  2,  2,  2, 32, 32,  0,  0, 32,  0, 32, 32, 32, 32,\n-   32, 32, 32, 32, 32, 32, 32, 32,  2,  2,  2,  2,  2,  2, 32,  2,\n-    2,  2,  2,  2,  2,  2, 32, 32, 32,  2,  2,  2,  2,  2, 28, 28,\n-   28, 28, 28, 28,  2,  2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n-   48, 48, 48, 48, 48,  2, 48, 48, 48, 48,  2,  2,  2,  2, 48,  2,\n-    2,  2, 48, 48, 48, 48, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-   52, 52, 52, 52,  2,  2, 52, 52, 52, 52, 52,  2,  2,  2, 58, 58,\n-   58, 58, 58, 58, 58, 58, 58, 58, 58, 58,  2,  2,  2,  2, 58, 58,\n-    2,  2,  2,  2,  2,  2, 58, 58, 58,  2,  2,  2, 58, 58, 54, 54,\n-   54, 54, 54, 54, 54, 54, 54, 54, 54, 54,  2,  2, 54, 54, 91, 91,\n-   91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,  2, 91, 91,\n-   91, 91, 91,  2,  2, 91, 91, 91,  2,  2,  2,  2,  2,  2, 91, 91,\n-   91, 91, 91, 91,  2,  2,  1,  1,  1,  1,  1,  1,  1,  2, 62, 62,\n-   62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,  2,  2,  2, 62, 62,\n-   62, 62, 62, 62, 62,  2, 76, 76, 76, 76, 76, 76, 76, 76, 93, 93,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 60, 13, 13,\n+   13, 61, 62, 13, 13, 13, 13, 63, 13, 13, 13, 13, 13, 13, 64, 65,\n+   20, 20, 66, 20, 13, 13, 13, 13, 67, 13, 13, 13, 68, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 69,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19,  0,  0,  0,  0,  0,  0,  0, 19,  0,  0,  0,  0,  0, 19, 19,\n+   19, 19, 19, 19, 19,  0, 19,  0,  0,  0,  0,  0,  0,  0, 19, 19,\n+   19, 19, 19,  0,  0,  0,  0,  0, 26, 26,  0,  0,  0,  0,  1,  1,\n+    1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  0,  9,  9,  9,  2,  2,\n+    9,  9,  9,  9,  0,  9,  2,  2,  2,  2,  9,  0,  9,  0,  9,  9,\n+    9,  2,  9,  2,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    2,  9,  9,  9,  9,  9,  9,  9, 55, 55, 55, 55, 55, 55, 55, 55,\n+   55, 55, 55, 55, 55, 55,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n+    6,  6,  6,  1,  1,  6,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n+    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,  4,  4,\n+    4,  2,  2,  4,  4,  4,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14,  2,  2,  2,  2,  2,  2,  2,  2, 14, 14,\n+   14,  2,  2,  2,  2, 14, 14, 14, 14, 14, 14,  2,  2,  2,  3,  3,\n+    3,  3,  3,  0,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  0,  0,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  1,  1,  1,  1,  1,  1,  1,\n+    1,  1,  1,  1,  3,  3,  1,  3,  3,  3,  3,  3,  3,  3, 37, 37,\n+   37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,  2, 37, 37, 37,\n+   37,  2,  2, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,\n+    2,  2,  2,  2,  2,  2, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n+   64,  2,  2, 64, 64, 64, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,\n+   90, 90, 90, 90,  2,  2, 90, 90, 90, 90, 90, 90, 90,  2, 95, 95,\n+   95, 95, 95, 95, 95, 95, 95, 95, 95, 95,  2,  2, 95,  2, 37, 37,\n+   37,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  2,  3,  3,\n+    2,  2,  2,  2,  2,  3,  3,  3,  0,  3,  3,  3,  3,  3,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  1,  1,  1,  1,  7,  7,  7,  7,  7,\n+    7,  7,  0,  0,  7,  7,  5,  5,  5,  5,  2,  5,  5,  5,  5,  5,\n+    5,  5,  5,  2,  2,  5,  5,  2,  2,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  2,  5,  5,  5,  5,  5,  5,  5,  2,\n+    5,  2,  2,  2,  5,  5,  5,  5,  2,  2,  5,  5,  5,  5,  5,  2,\n+    2,  5,  5,  5,  5,  2,  2,  2,  2,  2,  2,  2,  2,  5,  2,  2,\n+    2,  2,  5,  5,  2,  5,  5,  5,  5,  5,  2,  2,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  2,  2, 11, 11, 11,  2, 11, 11, 11, 11, 11,\n+   11,  2,  2,  2,  2, 11, 11,  2,  2, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11,  2, 11, 11, 11, 11, 11, 11, 11,  2,\n+   11, 11,  2, 11, 11,  2, 11, 11,  2,  2, 11,  2, 11, 11, 11,  2,\n+    2, 11, 11, 11,  2,  2,  2, 11,  2,  2,  2,  2,  2,  2,  2, 11,\n+   11, 11, 11,  2, 11,  2,  2,  2,  2,  2,  2,  2, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11,  2,  2, 10, 10, 10,  2, 10, 10, 10, 10, 10,\n+   10, 10, 10, 10,  2, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10,\n+   10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10,  2,\n+   10, 10,  2, 10, 10, 10, 10, 10,  2,  2, 10, 10, 10, 10, 10, 10,\n+    2, 10, 10, 10,  2,  2, 10,  2,  2,  2,  2,  2,  2,  2, 10, 10,\n+   10, 10,  2,  2, 10, 10, 10, 10,  2,  2,  2,  2,  2,  2,  2, 10,\n+   10, 10, 10, 10, 10, 10,  2, 21, 21, 21,  2, 21, 21, 21, 21, 21,\n+   21, 21, 21,  2,  2, 21, 21,  2,  2, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21,  2, 21, 21, 21, 21, 21, 21, 21,  2,\n+   21, 21,  2, 21, 21, 21, 21, 21,  2,  2, 21, 21, 21, 21, 21,  2,\n+    2, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2, 21, 21, 21,  2,  2,\n+    2,  2, 21, 21,  2, 21, 21, 21, 21, 21,  2,  2, 21, 21,  2,  2,\n+   22, 22,  2, 22, 22, 22, 22, 22, 22,  2,  2,  2, 22, 22, 22,  2,\n+   22, 22, 22, 22,  2,  2,  2, 22, 22,  2, 22,  2, 22, 22,  2,  2,\n+    2, 22, 22,  2,  2,  2, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+    2,  2,  2,  2, 22, 22, 22,  2,  2,  2,  2,  2,  2, 22,  2,  2,\n+    2,  2,  2,  2, 22, 22, 22, 22, 22,  2,  2,  2,  2,  2, 23, 23,\n+   23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  2, 23, 23, 23,  2,\n+   23, 23, 23, 23, 23, 23, 23, 23,  2,  2, 23, 23, 23, 23, 23,  2,\n+   23, 23, 23, 23,  2,  2,  2,  2,  2,  2,  2, 23, 23,  2, 23, 23,\n+   23,  2,  2, 23,  2,  2, 23, 23, 23, 23,  2,  2, 23, 23,  2,  2,\n+    2,  2,  2,  2,  2, 23, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16,  2, 16, 16, 16,  2, 16, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16,  2, 16, 16, 16, 16, 16,  2,  2, 16, 16, 16, 16, 16,  2,\n+   16, 16, 16, 16,  2,  2,  2,  2,  2,  2,  2, 16, 16,  2, 16, 16,\n+   16, 16,  2,  2, 16, 16,  2, 16, 16, 16,  2,  2,  2,  2, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  2, 20, 20, 20,  2,\n+   20, 20, 20, 20, 20, 20,  2,  2,  2,  2, 20, 20, 20, 20, 20, 20,\n+   20, 20,  2,  2, 20, 20,  2, 36, 36, 36,  2, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2,\n+   36, 36, 36, 36, 36, 36, 36, 36,  2, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36,  2, 36,  2,  2,  2,  2, 36,  2,  2,  2,  2, 36, 36, 36,\n+   36, 36, 36,  2, 36,  2,  2,  2,  2,  2,  2,  2, 36, 36,  2,  2,\n+   36, 36, 36,  2,  2,  2,  2, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24, 24, 24, 24, 24, 24, 24, 24, 24,  2,  2,  2,  2,  0, 24, 24,\n+   24, 24,  2,  2,  2,  2,  2, 18, 18,  2, 18,  2, 18, 18, 18, 18,\n+   18,  2, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n+   18, 18,  2, 18,  2, 18, 18, 18, 18, 18, 18, 18,  2,  2, 18, 18,\n+   18, 18, 18,  2, 18,  2, 18, 18, 18, 18, 18, 18, 18,  2, 18, 18,\n+    2,  2, 18, 18, 18, 18, 25, 25, 25, 25, 25, 25, 25, 25,  2, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,  2,  2,  2, 25, 25,\n+   25, 25, 25,  2, 25, 25, 25, 25, 25, 25, 25,  0,  0,  0,  0, 25,\n+   25,  2,  2,  2,  2,  2, 33, 33, 33, 33, 33, 33, 33, 33,  8,  8,\n+    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  2,  8,  2,  2,\n+    2,  2,  2,  8,  2,  2,  8,  8,  8,  0,  8,  8,  8,  8, 12, 12,\n+   12, 12, 12, 12, 12, 12, 30, 30, 30, 30, 30, 30, 30, 30, 30,  2,\n+   30, 30, 30, 30,  2,  2, 30, 30, 30, 30, 30, 30, 30,  2, 30, 30,\n+   30,  2,  2, 30, 30, 30, 30, 30, 30, 30, 30,  2,  2,  2, 30, 30,\n+    2,  2,  2,  2,  2,  2, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\n+   29, 29, 29, 29,  2,  2, 28, 28, 28, 28, 28, 28, 28, 28, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,  2,  2,  2, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35,  0,  0,  0, 35, 35, 35,  2,\n+    2,  2,  2,  2,  2,  2, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n+   45, 45, 45, 45,  2,  2,  2,  2,  2,  2,  2,  2,  2, 45, 44, 44,\n+   44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,  0,  0,  2, 43, 43,\n+   43, 43, 43, 43, 43, 43, 43, 43, 43, 43,  2,  2,  2,  2, 46, 46,\n+   46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,  2, 46, 46, 46,  2,\n+   46, 46,  2,  2,  2,  2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n+   31, 31, 31, 31,  2,  2, 31, 31,  2,  2,  2,  2,  2,  2, 32, 32,\n+    0,  0, 32,  0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    2,  2,  2,  2,  2,  2, 32,  2,  2,  2,  2,  2,  2,  2, 32, 32,\n+   32,  2,  2,  2,  2,  2, 28, 28, 28, 28, 28, 28,  2,  2, 48, 48,\n+   48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,  2, 48, 48,\n+   48, 48,  2,  2,  2,  2, 48,  2,  2,  2, 48, 48, 48, 48, 52, 52,\n+   52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,  2,  2, 52, 52,\n+   52, 52, 52,  2,  2,  2, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,\n+   58, 58,  2,  2,  2,  2, 58, 58,  2,  2,  2,  2,  2,  2, 58, 58,\n+   58,  2,  2,  2, 58, 58, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,\n+   54, 54,  2,  2, 54, 54, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,\n+   91, 91, 91, 91, 91,  2, 91, 91, 91, 91, 91,  2,  2, 91, 91, 91,\n+    2,  2,  2,  2,  2,  2, 91, 91, 91, 91, 91, 91,  2,  2,  1,  1,\n+    1,  1,  1,  1,  1,  2, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,\n+   62, 62, 62,  2, 62, 62, 76, 76, 76, 76, 76, 76, 76, 76, 93, 93,\n@@ -1882,1 +1858,1 @@\n-   73, 73, 73, 73, 73, 73,  6,  2,  2,  2,  2,  2,  2,  2,  8,  8,\n+   73, 73, 73, 73, 73, 73,  6,  6,  6,  2,  2,  2,  2,  2,  8,  8,\n@@ -1899,16 +1875,16 @@\n-    0,  2,  2,  2,  2,  2, 27, 27, 27, 27, 27, 27, 27, 27,  0,  0,\n-    0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0, 56, 56,\n-   56, 56, 56, 56, 56, 56, 55, 55, 55, 55,  2,  2,  2,  2,  2, 55,\n-   55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 61, 61, 61, 61,  2,  2,\n-    2,  2,  2,  2,  2, 61, 61,  2,  2,  2,  2,  2,  2,  2,  0,  0,\n-    0,  0,  0,  0,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-    2, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2, 13, 13,\n-   13, 13, 13, 13,  2,  2,  0,  0,  0,  0,  0, 13,  0, 13,  0, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13,  1,  1,  1,  1, 12, 12, 13, 13,\n-   13, 13,  0,  0,  0,  0,  2, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n-   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  1,\n-    1,  0,  0, 15, 15, 15,  0, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n-   17, 17, 17, 17, 17, 17, 17, 17, 17,  0,  0, 17, 17, 17,  2,  2,\n-    2,  2,  2, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2, 12,\n-   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  2,  0,  0,\n-    0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 12, 12,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  2,  2,  2,  2,  2, 27, 27,\n+   27, 27, 27, 27, 27, 27,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,\n+    0,  0,  0,  0,  2,  0, 56, 56, 56, 56, 56, 56, 56, 56, 55, 55,\n+   55, 55,  2,  2,  2,  2,  2, 55, 55, 55, 55, 55, 55, 55, 61, 61,\n+   61, 61, 61, 61, 61, 61,  2,  2,  2,  2,  2,  2,  2, 61, 61,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  2,  2, 13, 13,\n+   13, 13, 13, 13, 13, 13, 13, 13,  2, 13, 13, 13, 13, 13, 13, 13,\n+   13, 13,  2,  2,  2,  2, 13, 13, 13, 13, 13, 13,  2,  2,  0,  0,\n+    0,  0,  0, 13,  0, 13,  0, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    1,  1,  1,  1, 12, 12, 13, 13, 13, 13,  0,  0,  0,  0,  2, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15,  2,  2,  1,  1,  0,  0, 15, 15, 15,  0, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17,  0,  0, 17, 17, 17,  2,  2,  2,  2,  2, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26,  2, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,  0, 12, 12,\n@@ -1920,4 +1896,3 @@\n-    0, 19, 19, 19, 19, 19, 19, 19, 19,  2,  2,  2,  2,  2, 19, 19,\n-    2, 19,  2, 19, 19, 19, 19, 19,  2,  2,  2,  2,  2,  2,  2,  2,\n-   19, 19, 19, 19, 19, 19, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-   60, 60, 60,  2,  2,  2,  0,  0,  2,  2,  2,  2,  2,  2, 65, 65,\n+    0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  2,  2, 19, 19,\n+    2, 19,  2, 19, 19, 19,  2,  2, 19, 19, 19, 19, 19, 19, 60, 60,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,  2,  2,  2, 65, 65,\n@@ -1946,30 +1921,32 @@\n-    1,  1,  1,  1,  6,  6,  0,  0,  0,  2,  0,  0,  0,  0,  3,  3,\n-    3,  3,  3,  2,  3,  3,  3,  3,  3,  3,  3,  2,  2,  0,  2,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 17, 17, 17,\n-   17, 17, 17, 17,  0,  0,  2,  2, 12, 12, 12, 12, 12, 12,  2,  2,\n-   12, 12, 12,  2,  2,  2,  2,  0,  0,  0,  0,  0,  2,  2, 49, 49,\n-   49, 49, 49, 49, 49, 49, 49, 49, 49, 49,  2, 49, 49, 49, 49, 49,\n-   49, 49, 49, 49, 49,  2, 49, 49, 49,  2, 49, 49,  2, 49, 49, 49,\n-   49, 49, 49, 49,  2,  2, 49, 49, 49,  2,  2,  2,  2,  2,  0,  0,\n-    0,  2,  2,  2,  2,  0,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,\n-    0,  0,  0,  2,  2,  2,  9,  2,  2,  2,  2,  2,  2,  2,  0,  0,\n-    0,  0,  0,  1,  2,  2, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,\n-   71, 71, 71,  2,  2,  2, 67, 67, 67, 67, 67, 67, 67, 67, 67,  2,\n-    2,  2,  2,  2,  2,  2,  1,  0,  0,  0,  0,  0,  0,  0, 42, 42,\n-   42, 42, 42, 42, 42, 42, 42, 42, 42, 42,  2,  2,  2,  2,  2,  2,\n-    2,  2,  2, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,\n-   41,  2,  2,  2,  2,  2,118,118,118,118,118,118,118,118,118,118,\n-  118,  2,  2,  2,  2,  2, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,\n-   53, 53, 53, 53,  2, 53, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n-   59, 59,  2,  2,  2,  2, 59, 59, 59, 59, 59, 59,  2,  2, 40, 40,\n-   40, 40, 40, 40, 40, 40, 51, 51, 51, 51, 51, 51, 51, 51, 50, 50,\n-   50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,  2,  2, 50, 50,\n-    2,  2,  2,  2,  2,  2,135,135,135,135,135,135,135,135,135,135,\n-  135,135,  2,  2,  2,  2,106,106,106,106,106,106,106,106,104,104,\n-  104,104,104,104,104,104,104,104,104,104,  2,  2,  2,  2,  2,  2,\n-    2,  2,  2,  2,  2,104,161,161,161,161,161,161,161,161,161,161,\n-  161,  2,161,161,161,161,161,161,161,  2,161,161,  2,161,161,161,\n-    2,161,161,161,161,161,161,161,  2,161,161,  2,  2,  2,110,110,\n-  110,110,110,110,110,110,110,110,110,110,110,110,110,  2,110,110,\n-  110,110,110,110,  2,  2, 19, 19, 19, 19, 19, 19,  2, 19, 19,  2,\n-   19, 19, 19, 19, 19, 19, 47, 47, 47, 47, 47, 47,  2,  2, 47,  2,\n+    1,  1,  1,  1,  6,  6,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,\n+    0,  0,  2,  2,  2,  2,  3,  3,  3,  3,  3,  2,  3,  3,  3,  3,\n+    3,  3,  3,  2,  2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 17, 17, 17, 17, 17, 17, 17, 17,  0,  0,  2,  2,\n+   12, 12, 12, 12, 12, 12,  2,  2, 12, 12, 12,  2,  2,  2,  2,  0,\n+    0,  0,  0,  0,  2,  2, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n+   49, 49,  2, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,  2, 49, 49,\n+   49,  2, 49, 49,  2, 49, 49, 49, 49, 49, 49, 49,  2,  2, 49, 49,\n+   49,  2,  2,  2,  2,  2,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,\n+    0,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  2,  2,  2,  9,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  1,  2,  2, 71, 71,\n+   71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,  2,  2,  2, 67, 67,\n+   67, 67, 67, 67, 67, 67, 67,  2,  2,  2,  2,  2,  2,  2,  1,  0,\n+    0,  0,  0,  0,  0,  0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,\n+   42, 42,  2,  2,  2,  2,  2,  2,  2,  2,  2, 42, 42, 42, 41, 41,\n+   41, 41, 41, 41, 41, 41, 41, 41, 41,  2,  2,  2,  2,  2,118,118,\n+  118,118,118,118,118,118,118,118,118,  2,  2,  2,  2,  2, 53, 53,\n+   53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,  2, 53, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59,  2,  2,  2,  2, 59, 59,\n+   59, 59, 59, 59,  2,  2, 40, 40, 40, 40, 40, 40, 40, 40, 51, 51,\n+   51, 51, 51, 51, 51, 51, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n+   50, 50, 50, 50,  2,  2, 50, 50,  2,  2,  2,  2,  2,  2,135,135,\n+  135,135,135,135,135,135,135,135,135,135,  2,  2,  2,  2,106,106,\n+  106,106,106,106,106,106,104,104,104,104,104,104,104,104,104,104,\n+  104,104,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,104,161,161,\n+  161,161,161,161,161,161,161,161,161,  2,161,161,161,161,161,161,\n+  161,  2,161,161,  2,161,161,161,  2,161,161,161,161,161,161,161,\n+    2,161,161,  2,  2,  2,170,170,170,170,170,170,170,170,170,170,\n+  170,170,  2,  2,  2,  2,110,110,110,110,110,110,110,110,110,110,\n+  110,110,110,110,110,  2,110,110,110,110,110,110,  2,  2, 19, 19,\n+   19, 19, 19, 19,  2, 19, 19,  2, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19,  2,  2,  2,  2,  2, 47, 47, 47, 47, 47, 47,  2,  2, 47,  2,\n@@ -2001,1 +1978,3 @@\n-  144,144,144,144,144,144,144,144,  2,  2,  2,  2,  2,  2,156,156,\n+  144,144,144,144,144,144,144,144,  2,  2,  2,  2,  2,  2,165,165,\n+  165,165,165,165,165,165,165,165,165,165,165,165,  2,  2,  2,165,\n+  165,165,165,165,165,165,  2,  2,  2,  2,  2,  2,165,165,156,156,\n@@ -2003,26 +1982,30 @@\n-    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,147,147,\n-  147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,\n-    2,  2,  2,  2,  2,  2,158,158,158,158,158,158,158,158,158,158,\n-    2,  2,  2,  2,  2,  2,153,153,153,153,153,153,153,153,153,153,\n-  153,153,  2,  2,  2,  2,149,149,149,149,149,149,149,149,149,149,\n-  149,149,149,149,149,  2, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\n-   94, 94, 94, 94,  2,  2,  2,  2, 94, 94, 94, 94, 94, 94,  2,  2,\n-    2,  2,  2,  2,  2, 94, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,\n-   85,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 85,  2,  2,101,101,\n-  101,101,101,101,101,101,101,  2,  2,  2,  2,  2,  2,  2,101,101,\n-    2,  2,  2,  2,  2,  2, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96,  2, 96, 96,111,111,111,111,111,111,111,111,111,111,\n-  111,111,111,111,111,  2,100,100,100,100,100,100,100,100,  2, 36,\n-   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2,108,108,\n-  108,108,108,108,108,108,108,108,  2,108,108,108,108,108,108,108,\n-    2,  2,  2,  2,  2,  2,129,129,129,129,129,129,129,  2,129,  2,\n-  129,129,129,129,  2,129,129,129,129,129,129,129,129,129,129,129,\n-  129,129,129,129,  2,129,129,129,  2,  2,  2,  2,  2,  2,109,109,\n-  109,109,109,109,109,109,109,109,109,  2,  2,  2,  2,  2,109,109,\n-    2,  2,  2,  2,  2,  2,107,107,107,107,  2,107,107,107,107,107,\n-  107,107,107,  2,  2,107,107,  2,  2,107,107,107,107,107,107,107,\n-  107,107,107,107,107,107,107,  2,107,107,107,107,107,107,107,  2,\n-  107,107,  2,107,107,107,107,107,  2,  1,107,107,107,107,107,  2,\n-    2,107,107,107,  2,  2,107,  2,  2,  2,  2,  2,  2,107,  2,  2,\n-    2,  2,  2,107,107,107,107,107,107,107,  2,  2,107,107,107,107,\n-  107,107,107,  2,  2,  2,137,137,137,137,137,137,137,137,137,137,\n+    2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  2,  2,  2,  2,  2,\n+    2,  2,  3,  3,  3,  3,147,147,147,147,147,147,147,147,148,148,\n+  148,148,148,148,148,148,148,148,  2,  2,  2,  2,  2,  2,158,158,\n+  158,158,158,158,158,158,158,158,  2,  2,  2,  2,  2,  2,153,153,\n+  153,153,153,153,153,153,153,153,153,153,  2,  2,  2,  2,149,149,\n+  149,149,149,149,149,149,149,149,149,149,149,149,149,  2, 94, 94,\n+   94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,  2,  2,  2,  2,\n+   94, 94, 94, 94, 94, 94,  2,  2,  2,  2,  2,  2,  2, 94, 85, 85,\n+   85, 85, 85, 85, 85, 85, 85, 85, 85,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2, 85,  2,  2,101,101,101,101,101,101,101,101,101,  2,\n+    2,  2,  2,  2,  2,  2,101,101,  2,  2,  2,  2,  2,  2, 96, 96,\n+   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,  2, 96, 96,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,  2,100,100,\n+  100,100,100,100,100,100,  2, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36,  2,  2,  2,108,108,108,108,108,108,108,108,108,108,\n+    2,108,108,108,108,108,108,108,  2,  2,  2,  2,  2,  2,129,129,\n+  129,129,129,129,129,  2,129,  2,129,129,129,129,  2,129,129,129,\n+  129,129,129,129,129,129,129,129,129,129,129,129,  2,129,129,129,\n+    2,  2,  2,  2,  2,  2,109,109,109,109,109,109,109,109,109,109,\n+  109,  2,  2,  2,  2,  2,109,109,  2,  2,  2,  2,  2,  2,107,107,\n+  107,107,  2,107,107,107,107,107,107,107,107,  2,  2,107,107,  2,\n+    2,107,107,107,107,107,107,107,107,107,107,107,107,107,107,  2,\n+  107,107,107,107,107,107,107,  2,107,107,  2,107,107,107,107,107,\n+    2,  1,107,107,107,107,107,  2,  2,107,107,107,  2,  2,107,  2,\n+    2,  2,  2,  2,  2,107,  2,  2,  2,  2,  2,107,107,107,107,107,\n+  107,107,  2,  2,107,107,107,107,107,107,107,  2,  2,  2,171,171,\n+  171,171,171,171,171,171,171,171,  2,171,  2,  2,171,  2,171,171,\n+  171,171,171,171,  2,171,171,  2,171,  2,  2,171,  2,171,171,171,\n+  171,  2,171,171,171,171,171,  2,  2,  2,  2,  2,  2,  2,  2,171,\n+  171,  2,  2,  2,  2,  2,137,137,137,137,137,137,137,137,137,137,\n@@ -2034,34 +2017,37 @@\n-  102,102,102,102,102,102,102,102,  2,  2,  2,  2,  2,  2,126,126,\n-  126,126,126,126,126,126,126,126,126,  2,  2,126,126,126,126,126,\n-  126,126,  2,  2,  2,  2,126,126,126,126,126,126,126,  2,142,142,\n-  142,142,142,142,142,142,142,142,142,142,  2,  2,  2,  2,125,125,\n-  125,125,125,125,125,125,125,125,125,  2,  2,  2,  2,  2,  2,  2,\n-    2,  2,  2,  2,  2,125,154,154,154,154,154,154,154,  2,  2,154,\n-    2,  2,154,154,154,154,154,154,154,154,  2,154,154,  2,154,154,\n-  154,154,154,154,154,154,154,154,154,154,154,154,  2,154,154,  2,\n-    2,154,154,154,154,154,154,154,  2,  2,  2,  2,  2,  2,150,150,\n-  150,150,150,150,150,150,  2,  2,150,150,150,150,150,150,150,150,\n-  150,150,150,  2,  2,  2,141,141,141,141,141,141,141,141,140,140,\n-  140,140,140,140,140,140,140,140,140,  2,  2,  2,  2,  2,121,121,\n-  121,121,121,121,121,121,121,  2,  2,  2,  2,  2,  2,  2,  7,  7,\n-    2,  2,  2,  2,  2,  2,133,133,133,133,133,133,133,133,133,  2,\n-  133,133,133,133,133,133,133,133,133,133,133,133,133,  2,133,133,\n-  133,133,133,133,  2,  2,133,133,133,133,133,  2,  2,  2,134,134,\n-  134,134,134,134,134,134,  2,  2,134,134,134,134,134,134,  2,134,\n-  134,134,134,134,134,134,134,134,134,134,134,134,134,  2,138,138,\n-  138,138,138,138,138,  2,138,138,  2,138,138,138,138,138,138,138,\n-  138,138,138,138,138,138,  2,  2,138,  2,138,138,  2,138,138,138,\n-    2,  2,  2,  2,  2,  2,143,143,143,143,143,143,  2,143,143,  2,\n-  143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,\n-  143,143,143,143,143,  2,143,143,  2,143,143,143,143,143,143,  2,\n-    2,  2,  2,  2,  2,  2,143,143,  2,  2,  2,  2,  2,  2,145,145,\n-  145,145,145,145,145,145,145,  2,  2,  2,  2,  2,  2,  2,163,163,\n-  163,163,163,163,163,163,163,  2,163,163,163,163,163,163,163,163,\n-  163,  2,  2,  2,163,163,163,163,  2,  2,  2,  2,  2,  2, 86,  2,\n-    2,  2,  2,  2,  2,  2, 22, 22,  2,  2,  2,  2,  2,  2,  2,  2,\n-    2,  2,  2,  2,  2, 22, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,\n-    2,  2,  2,  2,  2,  2, 63, 63, 63, 63, 63, 63, 63,  2, 63, 63,\n-   63, 63, 63,  2,  2,  2, 63, 63, 63, 63,  2,  2,  2,  2,157,157,\n-  157,157,157,157,157,157,157,157,157,  2,  2,  2,  2,  2, 80, 80,\n-   80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,  2,  2,127,127,\n-  127,127,127,127,127,127,127,127,127,127,127,127,127,  2, 79,  2,\n+  102,102,102,102,102,102,102,102,  2,  2,  2,  2,  2,  2, 33, 33,\n+   33, 33,  2,  2,  2,  2,126,126,126,126,126,126,126,126,126,126,\n+  126,  2,  2,126,126,126,126,126,126,126,  2,  2,  2,  2,126,126,\n+  126,126,126,126,126,  2,142,142,142,142,142,142,142,142,142,142,\n+  142,142,  2,  2,  2,  2,125,125,125,125,125,125,125,125,125,125,\n+  125,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,125,154,154,\n+  154,154,154,154,154,  2,  2,154,  2,  2,154,154,154,154,154,154,\n+  154,154,  2,154,154,  2,154,154,154,154,154,154,154,154,154,154,\n+  154,154,154,154,  2,154,154,  2,  2,154,154,154,154,154,154,154,\n+    2,  2,  2,  2,  2,  2,150,150,150,150,150,150,150,150,  2,  2,\n+  150,150,150,150,150,150,150,150,150,150,150,  2,  2,  2,141,141,\n+  141,141,141,141,141,141,140,140,140,140,140,140,140,140,140,140,\n+  140,  2,  2,  2,  2,  2,121,121,121,121,121,121,121,121,121,  2,\n+    2,  2,  2,  2,  2,  2,  7,  7,  2,  2,  2,  2,  2,  2,169,169,\n+  169,169,169,169,169,169,169,169,  2,  2,  2,  2,  2,  2,133,133,\n+  133,133,133,133,133,133,133,  2,133,133,133,133,133,133,133,133,\n+  133,133,133,133,133,  2,133,133,133,133,133,133,  2,  2,133,133,\n+  133,133,133,  2,  2,  2,134,134,134,134,134,134,134,134,  2,  2,\n+  134,134,134,134,134,134,  2,134,134,134,134,134,134,134,134,134,\n+  134,134,134,134,134,  2,138,138,138,138,138,138,138,  2,138,138,\n+    2,138,138,138,138,138,138,138,138,138,138,138,138,138,  2,  2,\n+  138,  2,138,138,  2,138,138,138,  2,  2,  2,  2,  2,  2,143,143,\n+  143,143,143,143,  2,143,143,  2,143,143,143,143,143,143,143,143,\n+  143,143,143,143,143,143,143,143,143,143,143,143,143,  2,143,143,\n+    2,143,143,143,143,143,143,  2,  2,  2,  2,  2,  2,  2,143,143,\n+    2,  2,  2,  2,  2,  2,145,145,145,145,145,145,145,145,145,  2,\n+    2,  2,  2,  2,  2,  2,163,163,163,163,163,163,163,163,163,  2,\n+  163,163,163,163,163,163,163,163,163,  2,  2,  2,163,163,163,163,\n+  163,  2,  2,  2,  2,  2, 86,  2,  2,  2,  2,  2,  2,  2, 22, 22,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 22, 63, 63,\n+   63, 63, 63, 63, 63, 63, 63, 63,  2,  2,  2,  2,  2,  2, 63, 63,\n+   63, 63, 63, 63, 63,  2, 63, 63, 63, 63, 63,  2,  2,  2, 63, 63,\n+   63, 63,  2,  2,  2,  2,157,157,157,157,157,157,157,157,157,157,\n+  157,  2,  2,  2,  2,  2, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,\n+   80, 80, 80, 80,  2,  2, 80, 80, 80,  2,  2,  2,  2,  2,127,127,\n+  127,127,127,127,127,127,127,127,127,127,127,127,127,  2,166,166,\n+  166,166,166,166,166,166,166,166,  2,  2,  2,  2,  2,  2, 79,  2,\n@@ -2074,1 +2060,2 @@\n-    2,  2,  2,119,119,119,146,146,146,146,146,146,146,146,146,146,\n+    2,  2,  2,119,119,119,167,167,167,167,167,167,167,167,167,167,\n+    2,  2,  2,  2,  2,  2,146,146,146,146,146,146,146,146,146,146,\n@@ -2078,37 +2065,39 @@\n-  155,155,155,155,155,155,155,155,155,155,155,155,  2,  2,136,  2,\n-    2,  2,  2,  2,  2,  2, 17, 17, 17, 17,  2, 17, 17, 17, 17, 17,\n-   17, 17,  2, 17, 17,  2, 17, 15, 15, 15, 15, 15, 15, 15, 17, 17,\n-   17,  2,  2,  2,  2,  2,  2,  2, 15,  2,  2,  2,  2,  2, 15, 15,\n-   15,  2,  2, 17,  2,  2,  2,  2,  2,  2, 17, 17, 17, 17,139,139,\n-  139,139,139,139,139,139,139,139,139,139,  2,  2,  2,  2,105,105,\n-  105,105,105,105,105,105,105,105,105,  2,  2,  2,  2,  2,105,105,\n-  105,105,105,  2,  2,  2,105,  2,  2,  2,  2,  2,  2,  2,105,105,\n-    2,  2,105,105,105,105,  1,  1,  1,  1,  1,  1,  2,  2,  0,  0,\n-    0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,\n-    1,  1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  2,  2,\n-    0,  2,  2,  0,  0,  2,  2,  0,  0,  0,  0,  2,  0,  0,  0,  0,\n-    2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,\n-    0,  2,  2,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  2,  0,  0,\n-    0,  0,  0,  2,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  2,\n-    0,  0,  0,  0,  0,  0,131,131,131,131,131,131,131,131,131,131,\n-  131,131,  2,  2,  2,  2,  2,  2,  2,131,131,131,131,131,  2,131,\n-  131,131,131,131,131,131,  2,  2,  2,  2,  2, 19, 19, 19, 56, 56,\n-   56, 56, 56, 56, 56,  2, 56,  2,  2, 56, 56, 56, 56, 56, 56, 56,\n-    2, 56, 56,  2, 56, 56, 56, 56, 56,  2,  2,  2,  2,  2,  6,  6,\n-    6,  6,  6,  6,  2,  2,  2,  2,  2,  2,  2,  2,  2,  6,151,151,\n-  151,151,151,151,151,151,151,151,151,151,151,  2,  2,  2,151,151,\n-  151,151,151,151,  2,  2,151,151,  2,  2,  2,  2,151,151,160,160,\n-  160,160,160,160,160,160,160,160,160,160,160,160,160,  2,152,152,\n-  152,152,152,152,152,152,152,152,  2,  2,  2,  2,  2,152,164,164,\n-  164,164,164,164,164,164,164,164,  2,  2,  2,  2,  2,  2, 30, 30,\n-   30, 30,  2, 30, 30,  2,113,113,113,113,113,113,113,113,113,113,\n-  113,113,113,  2,  2,113,113,113,113,113,113,113,113,  2,132,132,\n-  132,132,132,132,132,132,132,132,132,132,  2,  2,  2,  2,132,132,\n-    2,  2,  2,  2,132,132,  3,  3,  3,  3,  2,  3,  3,  3,  2,  3,\n-    3,  2,  3,  2,  2,  3,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n-    3,  2,  3,  3,  3,  3,  2,  3,  2,  3,  2,  2,  2,  2,  2,  2,\n-    3,  2,  2,  2,  2,  3,  2,  3,  2,  3,  2,  3,  3,  3,  2,  3,\n-    2,  3,  2,  3,  2,  3,  2,  3,  3,  3,  3,  2,  3,  2,  3,  3,\n-    2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  3,\n-    3,  3,  2,  3,  3,  3,  2,  2,  2,  2,  2,  2,  0,  0, 15,  0,\n+  155,155,155,155,155,155,155,155,155,155,155,155,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,155,136,  2,  2,  2,  2,  2,  2,  2, 17, 17,\n+   17, 17,  2, 17, 17, 17, 17, 17, 17, 17,  2, 17, 17,  2, 17, 15,\n+   15, 15, 15, 15, 15, 15, 17, 17, 17,  2,  2,  2,  2,  2,  2,  2,\n+   15,  2,  2,  2,  2,  2, 15, 15, 15,  2,  2, 17,  2,  2,  2,  2,\n+    2,  2, 17, 17, 17, 17,139,139,139,139,139,139,139,139,139,139,\n+  139,139,  2,  2,  2,  2,105,105,105,105,105,105,105,105,105,105,\n+  105,  2,  2,  2,  2,  2,105,105,105,105,105,  2,  2,  2,105,  2,\n+    2,  2,  2,  2,  2,  2,105,105,  2,  2,105,105,105,105,  1,  1,\n+    1,  1,  1,  1,  2,  2,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,\n+    1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,\n+    1,  1,  1,  1,  0,  0,  2,  2,  0,  2,  2,  0,  0,  2,  2,  0,\n+    0,  0,  0,  2,  0,  0,  0,  0,  2,  0,  2,  0,  0,  0,  0,  0,\n+    0,  0,  2,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,\n+    2,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  2,  0,  2,  2,  2,\n+    0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,131,131,\n+  131,131,131,131,131,131,131,131,131,131,  2,  2,  2,  2,  2,  2,\n+    2,131,131,131,131,131,  2,131,131,131,131,131,131,131,  2,  2,\n+    2,  2,  2, 19, 19, 19, 56, 56, 56, 56, 56, 56, 56,  2, 56,  2,\n+    2, 56, 56, 56, 56, 56, 56, 56,  2, 56, 56,  2, 56, 56, 56, 56,\n+   56,  2,  2,  2,  2,  2,  6,  6,  6,  6,  6,  6,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  6,151,151,151,151,151,151,151,151,151,151,\n+  151,151,151,  2,  2,  2,151,151,151,151,151,151,  2,  2,151,151,\n+    2,  2,  2,  2,151,151,160,160,160,160,160,160,160,160,160,160,\n+  160,160,160,160,160,  2,152,152,152,152,152,152,152,152,152,152,\n+    2,  2,  2,  2,  2,152,164,164,164,164,164,164,164,164,164,164,\n+    2,  2,  2,  2,  2,  2,168,168,168,168,168,168,168,168,168,168,\n+  168,  2,  2,  2,  2,168, 30, 30, 30, 30,  2, 30, 30,  2,113,113,\n+  113,113,113,113,113,113,113,113,113,113,113,  2,  2,113,113,113,\n+  113,113,113,113,113,  2,132,132,132,132,132,132,132,132,132,132,\n+  132,132,  2,  2,  2,  2,132,132,  2,  2,  2,  2,132,132,  3,  3,\n+    3,  3,  2,  3,  3,  3,  2,  3,  3,  2,  3,  2,  2,  3,  2,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  3,  3,  3,  3,  2,  3,\n+    2,  3,  2,  2,  2,  2,  2,  2,  3,  2,  2,  2,  2,  3,  2,  3,\n+    2,  3,  2,  3,  3,  3,  2,  3,  2,  3,  2,  3,  2,  3,  2,  3,\n+    3,  3,  3,  2,  3,  2,  3,  3,  2,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  2,  2,  2,  2,  2,  3,  3,  3,  2,  3,  3,  3,  3,  3,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0, 15,  0,\n@@ -2116,1 +2105,2 @@\n-    2,  0,  0,  0,  0,  0, 13,  2,  2,  2,  2,  2,  2,  2, 13, 13,\n+    2,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  0,  0,  0,\n+    0,  0,  0,  2,  2,  0, 13,  2,  2,  2,  2,  2,  2,  2, 13, 13,\n@@ -2126,2 +2116,1 @@\n-    9,  9,  9,  9,  9,  9, 18, 19, 20,  9, 21,  9,  9,  9,  9,  9,\n-    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+   18,  9,  9,  9,  9,  9, 19, 20, 21,  9, 22,  9,  9,  9,  9,  9,\n@@ -2129,0 +2118,2 @@\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 23,  9,\n+    9,  9,  9,  9, 24,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n@@ -2131,0 +2122,1 @@\n+    9,  9,  9,  9,  9,  9, 25,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n@@ -2132,1 +2124,0 @@\n-    9,  9,  9,  9,  9,  9, 22,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n@@ -2140,2 +2131,1 @@\n-    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n-    9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 23, 24,  0,  0,  0,  0,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 26, 27,  0,  0,  0,  0,\n@@ -2178,1 +2168,0 @@\n-    0,  0,  0,  0,  0,162,163,  0,  0,  0,  0,  0,  0,  0,164,  0,\n@@ -2180,0 +2169,10 @@\n+    0,  0,  0,  0,  0,  0,  0,  0,162,  0,163,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,164,165,  0,  0,  0,  0,  0,  0,  0,166,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+  167,  0,  0,  0,168,169,  0,  0,170,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,171,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,172,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,173,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,174,  0,\n@@ -2181,4 +2180,0 @@\n-  165,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,166,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,167,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,168,\n@@ -2186,0 +2181,1 @@\n+    0,  0,175,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -2187,3 +2183,3 @@\n-    0,169,170,  0,  0,  0,  0,171,172,  0,  0,  0,173,174,175,176,\n-  177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,\n-  193,194,195,196,197,198,199,200,201,202,203,204,205,206,  0,  0,\n+    0,176,177,  0,  0,  0,  0,178,179,  0,  0,  0,180,181,182,183,\n+  184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,\n+  200,201,202,203,204,205,206,207,208,209,210,211,212,213,  0,  0,\n@@ -2194,1 +2190,1 @@\n-_hb_ucd_u16[9344] =\n+_hb_ucd_u16[10400] =\n@@ -2213,3 +2209,4 @@\n-    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 168, 169,  48,  48,\n-   168,  48,  48, 170, 171, 172,  48,  48,  48, 171,  48,  48,  48, 173, 174, 175,\n-    48, 176,   9,   9,   9,   9,   9, 177, 178,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48, 168, 169,  48,  48, 168,  48,  48, 170, 171, 172,  48,  48,\n+    48, 171,  48,  48,  48, 173, 174, 175,  48, 176,   9,   9,   9,   9,   9, 177,\n+   178,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n@@ -2228,22 +2225,28 @@\n-   279, 279, 279, 279, 279, 279, 279, 279, 280, 209, 281, 209, 209, 209, 209, 282,\n-   209, 283, 279, 284, 209, 285, 286, 209, 209, 209, 287, 140, 288, 140, 271, 271,\n-   271, 289, 209, 209, 209, 209, 290, 271, 209, 209, 209, 209, 209, 209, 209, 209,\n-   209, 209, 209, 291, 292, 209, 209, 293, 209, 209, 209, 209, 209, 209, 294, 209,\n-   209, 209, 209, 209, 209, 209, 295, 296, 271, 297, 209, 209, 298, 279, 299, 279,\n-   300, 301, 279, 279, 279, 302, 279, 303, 209, 209, 209, 279, 304, 209, 209, 305,\n-   209, 306, 209, 209, 209, 209, 209, 209,   9,   9,   9,  11,  11,  11, 307, 308,\n-    13,  13,  13,  13,  13,  13, 309, 310,  11,  11, 311,  48,  48,  48, 312, 313,\n-    48, 314, 315, 315, 315, 315,  32,  32, 316, 317, 318, 319, 320, 321, 140, 140,\n-   209, 322, 209, 209, 209, 209, 209, 323, 209, 209, 209, 209, 209, 324, 140, 209,\n-   325, 326, 327, 328, 136,  48,  48,  48,  48, 329, 178,  48,  48,  48,  48, 330,\n-   331,  48,  48, 136,  48,  48,  48,  48, 200, 332,  48,  48, 209, 209, 333,  48,\n-   209, 334, 335, 209, 336, 337, 209, 209, 335, 209, 209, 337, 209, 209, 209, 209,\n-    48,  48,  48,  48, 209, 209, 209, 209,  48, 338,  48,  48,  48,  48,  48,  48,\n-   151, 209, 209, 209, 287,  48,  48, 229, 339,  48, 340, 140,  13,  13, 341, 342,\n-    13, 343,  48,  48,  48,  48, 344, 345,  31, 346, 347, 348,  13,  13,  13, 349,\n-   350, 351, 352, 353, 354, 355, 140, 356, 357,  48, 358, 359,  48,  48,  48, 360,\n-   361,  48,  48, 362, 363, 192,  32, 364,  64,  48, 365,  48, 366, 367,  48, 151,\n-    76,  48,  48, 368, 369, 370, 371, 372,  48,  48, 373, 374, 375, 376,  48, 377,\n-    48,  48,  48, 378, 379, 380, 381, 382, 383, 384, 315,  11,  11, 385, 386,  11,\n-    11,  11,  11,  11,  48,  48, 387, 192,  48,  48, 388,  48, 389,  48,  48, 206,\n-   390, 390, 390, 390, 390, 390, 390, 390, 391, 391, 391, 391, 391, 391, 391, 391,\n+   279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279,\n+   280, 209, 281, 209, 209, 209, 209, 282, 209, 283, 279, 284, 209, 285, 286, 209,\n+   209, 209, 176, 140, 287, 140, 271, 271, 271, 288, 209, 209, 209, 209, 289, 271,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 290, 291, 209, 209, 292,\n+   209, 209, 209, 209, 209, 209, 293, 209, 209, 209, 209, 209, 209, 209, 209, 209,\n+   209, 209, 209, 209, 209, 209, 294, 295, 271, 296, 209, 209, 297, 279, 298, 279,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209,\n+   279, 279, 279, 279, 279, 279, 279, 279, 299, 300, 279, 279, 279, 301, 279, 302,\n+   209, 209, 209, 279, 303, 209, 209, 304, 209, 305, 209, 209, 209, 209, 209, 209,\n+     9,   9,   9,  11,  11,  11, 306, 307,  13,  13,  13,  13,  13,  13, 308, 309,\n+    11,  11, 310,  48,  48,  48, 311, 312,  48, 313, 314, 314, 314, 314,  32,  32,\n+   315, 316, 317, 318, 319, 320, 140, 140, 209, 321, 209, 209, 209, 209, 209, 322,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 323, 140, 209,\n+   324, 325, 326, 327, 136,  48,  48,  48,  48, 328, 178,  48,  48,  48,  48, 329,\n+   330,  48,  48, 136,  48,  48,  48,  48, 200, 331,  48,  48, 209, 209, 332,  48,\n+   209, 333, 334, 209, 335, 336, 209, 209, 334, 209, 209, 336, 209, 209, 209, 209,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 209, 209, 209, 209,\n+    48, 337,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48, 151, 209, 209, 209, 338,  48,  48, 229,\n+   339,  48, 340, 140,  13,  13, 341, 342,  13, 343,  48,  48,  48,  48, 344, 345,\n+    31, 346, 347, 348,  13,  13,  13, 349, 350, 351, 352, 353, 354, 355, 140, 356,\n+   357,  48, 358, 359,  48,  48,  48, 360, 361,  48,  48, 362, 363, 192,  32, 364,\n+    64,  48, 365,  48, 366, 367,  48, 151,  76,  48,  48, 368, 369, 370, 371, 372,\n+    48,  48, 373, 374, 375, 376,  48, 377,  48,  48,  48, 378, 379, 380, 381, 382,\n+   383, 384, 314,  11,  11, 385, 386,  11,  11,  11,  11,  11,  48,  48, 387, 192,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 388,  48, 389,  48,  48, 206,\n+   390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,\n@@ -2260,2 +2263,2 @@\n-    48,  48, 440,  48,  48,  48, 441, 442, 442, 443, 444, 445, 140, 140, 140, 140,\n-    48,  48,  48, 314,  48, 199, 440, 140, 446,  27,  27, 447, 140, 140, 140, 140,\n+    48,  48, 440,  48,  48,  48, 441, 442, 442, 443, 444, 445,  48,  48,  48, 388,\n+    48,  48,  48, 313,  48, 199, 440, 140, 446,  27,  27, 447, 140, 140, 140, 140,\n@@ -2267,55 +2270,83 @@\n-    48,  48, 475, 192, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 271, 476,\n-    48,  48, 477, 478, 140, 140, 140, 479,  48, 464, 480,  48,  62, 481, 140,  48,\n-   482, 140, 140,  48, 483, 140,  48, 314, 484,  48,  48, 485, 486, 457, 487, 488,\n-   222,  48,  48, 489, 490,  48, 196, 192, 491,  48, 492, 493, 494,  48,  48, 495,\n-   222,  48,  48, 496, 497, 498, 499, 500,  48,  97, 501, 502, 503, 140, 140, 140,\n-   504, 505, 506,  48,  48, 507, 508, 192, 509,  83,  84, 510, 511, 512, 513, 514,\n-    48,  48,  48, 515, 516, 517, 478, 140,  48,  48,  48, 518, 519, 192, 140, 140,\n-    48,  48, 520, 521, 522, 523, 140, 140,  48,  48,  48, 524, 525, 192, 526, 140,\n-    48,  48, 527, 528, 192, 140, 140, 140,  48, 173, 529, 530, 314, 140, 140, 140,\n-    48,  48, 501, 531, 140, 140, 140, 140, 140, 140,   9,   9,  11,  11, 148, 532,\n-   533, 534,  48, 535, 536, 192, 140, 140, 140, 140, 537,  48,  48, 538, 539, 140,\n-   540,  48,  48, 541, 542, 543,  48,  48, 544, 545, 546,  48,  48,  48,  48, 196,\n-   547, 140, 140, 140, 140, 140, 140, 140,  84,  48, 520, 548, 549, 148, 175, 550,\n-    48, 551, 552, 553, 140, 140, 140, 140, 554,  48,  48, 555, 556, 192, 557,  48,\n-   558, 559, 192, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 560,\n-   561, 115,  48, 562, 563, 192, 140, 140, 140, 140, 140, 100, 271, 564, 565, 566,\n-    48, 207, 140, 140, 140, 140, 140, 140, 272, 272, 272, 272, 272, 272, 567, 568,\n-    48,  48,  48,  48, 388, 140, 140, 140, 140,  48,  48,  48,  48,  48,  48, 569,\n-    48,  48,  48, 570, 571, 572, 140, 140,  48,  48,  48,  48, 314, 140, 140, 140,\n-    48,  48,  48, 196,  48, 200, 370,  48,  48,  48,  48, 200, 192,  48, 204, 573,\n-    48,  48,  48, 574, 575, 576, 577, 578,  48, 140, 140, 140, 140, 140, 140, 140,\n-   140, 140, 140, 140,   9,   9,  11,  11, 271, 579, 140, 140, 140, 140, 140, 140,\n-    48,  48,  48,  48, 580, 581, 582, 582, 583, 584, 140, 140, 140, 140, 585, 586,\n-    48,  48,  48,  48,  48,  48,  48, 440,  48,  48,  48,  48,  48, 199, 140, 140,\n-   196, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 587,\n-    48,  48, 588, 589, 140, 590, 591,  48,  48,  48,  48,  48,  48,  48,  48, 206,\n-    48,  48,  48,  48,  48,  48,  71, 151, 196, 592, 593, 140, 140, 140, 140, 140,\n-    32,  32, 594,  32, 595, 209, 209, 209, 209, 209, 209, 209, 323, 140, 140, 140,\n-   209, 209, 209, 209, 209, 209, 209, 324, 209, 209, 596, 209, 209, 209, 597, 598,\n-   599, 209, 600, 209, 209, 209, 288, 140, 209, 209, 209, 209, 601, 140, 140, 140,\n-   140, 140, 140, 140, 271, 602, 271, 602, 209, 209, 209, 209, 209, 287, 271, 461,\n-     9, 603,  11, 604, 605, 606, 241,   9, 607, 608, 609, 610, 611,   9, 603,  11,\n-   612, 613,  11, 614, 615, 616, 617,   9, 618,  11,   9, 603,  11, 604, 605,  11,\n-   241,   9, 607, 617,   9, 618,  11,   9, 603,  11, 619,   9, 620, 621, 622, 623,\n-    11, 624,   9, 625, 626, 627, 628,  11, 629,   9, 630,  11, 631, 632, 632, 632,\n-    32,  32,  32, 633,  32,  32, 634, 635, 636, 637,  45, 140, 140, 140, 140, 140,\n-   638, 639, 640, 140, 140, 140, 140, 140, 641, 642, 643,  27,  27,  27, 644, 140,\n-   645, 140, 140, 140, 140, 140, 140, 140,  48,  48, 151, 646, 647, 140, 140, 140,\n-   140,  48, 648, 140,  48,  48, 649, 650, 140, 140, 140, 140, 140,  48, 651, 192,\n-   140, 140, 140, 140, 140, 140, 652, 200,  48,  48,  48,  48, 653, 595, 140, 140,\n-     9,   9, 607,  11, 654, 370, 140, 140, 140, 140, 140, 140, 140, 140, 140, 499,\n-   271, 271, 655, 656, 140, 140, 140, 140, 499, 271, 657, 658, 140, 140, 140, 140,\n-   659,  48, 660, 661, 662, 663, 664, 665, 666, 206, 667, 206, 140, 140, 140, 668,\n-   209, 209, 669, 209, 209, 209, 209, 209, 209, 323, 334, 670, 670, 670, 209, 324,\n-   671, 209, 209, 209, 209, 209, 209, 209, 209, 209, 672, 140, 140, 140, 673, 209,\n-   674, 209, 209, 669, 675, 676, 324, 140, 209, 209, 209, 209, 209, 209, 209, 677,\n-   209, 209, 209, 209, 209, 678, 426, 426, 209, 209, 209, 209, 209, 209, 209, 679,\n-   209, 209, 209, 209, 209, 176, 669, 427, 669, 209, 209, 209, 680, 176, 209, 209,\n-   680, 209, 672, 676, 140, 140, 140, 140, 209, 209, 209, 209, 209, 323, 672, 426,\n-   675, 209, 209, 681, 682, 669, 675, 675, 209, 683, 209, 209, 288, 140, 140, 192,\n-    48,  48,  48,  48,  48,  48, 140, 140,  48,  48,  48, 207,  48,  48,  48,  48,\n-    48, 204,  48,  48,  48,  48,  48,  48,  48,  48, 478,  48,  48,  48,  48,  48,\n-    48,  48,  48,  48,  48,  48, 100,  48,  48,  48,  48,  48,  48, 204, 140, 140,\n-    48, 204, 140, 140, 140, 140, 140, 140,  48,  48,  48,  48,  71,  48,  48,  48,\n-    48,  48,  48, 140, 140, 140, 140, 140, 684, 140, 570, 570, 570, 570, 570, 570,\n+    48,  48, 475, 192, 476,   9, 477,  11, 478, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 271, 479,  48,  48, 480, 481, 482, 140, 140, 483,\n+    48, 464, 484,  48,  62, 485, 140,  48, 486, 140, 140,  48, 487, 140,  48, 313,\n+   488,  48,  48, 489, 490, 457, 491, 492, 222,  48,  48, 493, 494,  48, 196, 192,\n+   495,  48, 496, 497, 498,  48,  48, 499, 222,  48,  48, 500, 501, 502, 503, 504,\n+    48,  97, 505, 506, 507, 140, 140, 140, 508, 509, 510,  48,  48, 511, 512, 192,\n+   513,  83,  84, 514, 515, 516, 517, 518, 519,  48,  48, 520, 521, 522, 523, 140,\n+    48,  48,  48, 524, 525, 526, 481, 140,  48,  48,  48, 527, 528, 192, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140,  48,  48, 529, 530, 531, 532, 140, 140,\n+    48,  48,  48, 533, 534, 192, 535, 140,  48,  48, 536, 537, 192, 538, 539, 140,\n+    48, 540, 541, 542, 313, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48,  48, 505, 543, 140, 140, 140, 140, 140, 140,   9,   9,  11,  11, 148, 544,\n+   545, 546,  48, 547, 548, 192, 140, 140, 140, 140, 549,  48,  48, 550, 551, 140,\n+   552,  48,  48, 553, 554, 555,  48,  48, 556, 557, 558,  48,  48,  48,  48, 196,\n+   559, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48,  48, 560, 192,\n+    84,  48, 529, 561, 562, 148, 175, 563,  48, 564, 565, 566, 140, 140, 140, 140,\n+   567,  48,  48, 568, 569, 192, 570,  48, 571, 572, 192, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 573,\n+   574, 115,  48, 575, 576, 577, 140, 140, 140, 140, 140, 100, 271, 578, 579, 580,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48, 207, 140, 140, 140, 140, 140, 140,\n+   272, 272, 272, 272, 272, 272, 581, 582,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48, 388, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140,  48,  48,  48,  48,  48,  48, 583,\n+    48,  48,  48, 584, 585, 586,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  71,\n+    48,  48,  48,  48, 313, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48, 587, 588, 192, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48,  48,  48, 196,  48, 200, 370,  48,  48,  48,  48, 200, 192,  48, 204, 589,\n+    48,  48,  48, 590, 591, 592, 593, 594,  48, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 595,  48, 596, 192, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140,   9,   9,  11,  11, 271, 597, 140, 140, 140, 140, 140, 140,\n+    48,  48,  48,  48, 598, 599, 600, 600, 601, 602, 140, 140, 140, 140, 603, 604,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 440,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 199, 140, 605,\n+   196, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 606,\n+    48,  48, 607, 608, 140, 609, 610,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 206,\n+    48,  48,  48,  48,  48,  48,  71, 151, 196, 611, 612, 140, 140, 140, 140, 140,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 192,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 322, 140, 140, 140, 140,\n+    32,  32, 613,  32, 614, 209, 209, 209, 209, 209, 209, 209, 322, 140, 140, 140,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 323,\n+   209, 209, 615, 209, 209, 209, 616, 617, 618, 209, 619, 209, 209, 209, 287, 140,\n+   209, 209, 209, 209, 620, 140, 140, 140, 140, 140, 140, 140, 271, 621, 271, 621,\n+   209, 209, 209, 209, 209, 338, 271, 461, 140, 140, 140, 140, 140, 140, 140, 140,\n+     9, 622,  11, 623, 624, 625, 241,   9, 626, 627, 628, 629, 630,   9, 622,  11,\n+   631, 632,  11, 633, 634, 635, 636,   9, 637,  11,   9, 622,  11, 623, 624,  11,\n+   241,   9, 626, 636,   9, 637,  11,   9, 622,  11, 638,   9, 639, 640, 641, 642,\n+    11, 643,   9, 644, 645, 646, 647,  11, 648,   9, 649,  11, 650, 538, 538, 538,\n+    32,  32,  32, 651,  32,  32, 652, 653, 654, 655,  45, 140, 140, 140, 140, 140,\n+   656, 657, 658, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   659, 660, 661,  27,  27,  27, 662, 140, 663, 140, 140, 140, 140, 140, 140, 140,\n+    48,  48, 151, 664, 665, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 666, 140,  48,  48, 667, 668,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 669, 192,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 587, 670,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 671, 200,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 672, 614, 140, 140,\n+     9,   9, 626,  11, 673, 370, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 503, 271, 271, 674, 675, 140, 140, 140, 140,\n+   503, 271, 676, 677, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   678,  48, 679, 680, 681, 682, 683, 684, 685, 206, 686, 206, 140, 140, 140, 687,\n+   209, 209, 688, 209, 209, 209, 209, 209, 209, 322, 333, 689, 689, 689, 209, 323,\n+   690, 209, 209, 209, 209, 209, 209, 209, 209, 209, 691, 140, 140, 140, 692, 209,\n+   693, 209, 209, 688, 694, 695, 323, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 696,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 697, 426, 426,\n+   209, 209, 209, 209, 209, 209, 209, 698, 209, 209, 209, 209, 209, 176, 688, 427,\n+   688, 209, 209, 209, 699, 176, 209, 209, 699, 209, 691, 688, 695, 140, 140, 140,\n+   209, 209, 209, 209, 209, 322, 691, 426, 700, 209, 209, 209, 701, 702, 176, 694,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 703, 209, 209, 209, 209, 209, 192,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 140, 140,\n+    48,  48,  48, 207,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48, 204,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 481,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 100,  48,\n+    48,  48,  48,  48,  48, 204, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48, 204, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48,  48,  48,  48,  71,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 140, 140, 140, 140, 140,\n+   704, 140, 584, 584, 584, 584, 584, 584, 140, 140, 140, 140, 140, 140, 140, 140,\n@@ -2323,1 +2354,72 @@\n-   391, 391, 391, 391, 391, 391, 391, 685, 391, 391, 391, 391, 391, 391, 391, 686,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 705,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 706,\n+     0,   1,   2,   3,   4,   4,   4,   4,   4,   4,   5,   6,   7,   8,   9,  10,\n+    11,  11,  12,  11,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,\n+    25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,\n+    41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,\n+    57,  57,  58,  59,  60,  60,  60,  60,  61,  62,  63,  64,  65,  66,  67,  68,\n+    69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  70,  71,  72,  73,  74,  75,\n+    76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,\n+    92,  93,  94,  95,  96,  97,  98,   7,   4,   4,   4,   4,  99, 100, 101, 102,\n+   103, 104, 105, 106, 107, 108, 109,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   110, 111,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   112, 112, 112, 112,   0,   0,   0,   0,   0,   0,   0,   0,   0, 113, 114,   0,\n+   115, 116, 117, 118, 119, 120, 121, 122,   0, 123, 124, 125, 126, 126, 126, 127,\n+   128, 129, 130, 131, 132,  60, 133, 134, 135, 136,   0, 137, 138, 139,   0,   0,\n+   126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,\n+   126, 126, 126, 126, 126, 126, 126,   0, 126, 126, 126, 126, 126, 126, 126, 126,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 141, 142, 143, 143, 143, 143, 144,  11, 145, 146, 147,   4, 148, 149,\n+   150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\n+    60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,\n+    60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 166, 167,\n+   168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,\n+   168, 168, 168, 168, 126, 126, 126, 126, 126, 169, 126, 170, 171, 172,  19, 173,\n+    19,  19,  19,  19, 174,  19, 175, 176, 177, 178,  19, 179, 180, 181, 182, 183,\n+   184, 185, 186, 187, 188, 189, 190, 191, 168, 168, 192, 193, 194, 195, 196, 197,\n+   198, 199, 200, 201, 202, 203, 204, 205, 206, 206, 206, 206, 207, 208, 209, 168,\n+   210, 211, 212, 213, 214, 168, 215, 216, 217, 218, 219, 220, 221, 222, 223, 168,\n+   224, 225, 226, 227, 228, 229, 230, 168, 168, 231, 232, 233, 234, 235, 236, 237,\n+   238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253,\n+   254, 255, 256, 257, 168, 168, 258, 259, 260, 261, 262, 263, 264, 265, 168, 168,\n+   266, 168, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 168, 168, 278,\n+   279, 280, 281, 168, 282, 283, 284, 168, 168, 168, 168, 285, 286, 287, 288, 289,\n+   290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291, 168,\n+   290, 292, 290, 290, 290, 293, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,\n+   168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 294, 295,\n+   296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296,\n+   296, 297, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296,\n+   296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 298,\n+   299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 168, 168, 168, 168, 168, 168,\n+   168, 168, 168, 168, 301, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,\n+   302, 302, 302, 302, 302, 302, 302, 302, 303, 304, 305, 306, 307, 308, 309, 168,\n+   168, 168, 168, 168, 168, 310, 168, 168, 168, 311, 312, 168, 313, 314, 315, 316,\n+   317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317,\n+   317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 318,\n+   317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 319, 319, 319, 319,\n+   319, 319, 319, 320, 321, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,\n+   168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 322,\n+   323, 324, 324, 324, 325, 326, 327, 327, 327, 327, 327, 328, 168, 168, 168, 168,\n+   329, 330, 331, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,\n+     0,   0,   0, 332,   0,   0,   0,   0,   0,   0, 333, 168, 334, 335,   0, 336,\n+     0,   0,   0, 337, 338, 339, 340, 341, 189, 342, 168, 343,   0, 344, 168, 168,\n+     0, 345, 346, 347, 348, 349,   0,   0,   0,   0, 350,   0,   0,   0,   0, 351,\n+   352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 353, 168, 168, 168, 168, 168,\n+   168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 354, 168, 168, 168,\n+   355, 356, 357, 168, 358, 359, 168, 168, 168, 168, 360, 361, 168, 168, 168, 168,\n+   168, 168, 168, 362, 168, 168, 168, 363, 168, 168, 168, 168, 168, 168, 168, 364,\n+   365, 365, 365, 366, 367, 368, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,\n+   168, 369, 370, 168, 371, 168, 168, 168, 372, 373, 374, 375, 168, 168, 168, 168,\n+   376,   0, 377, 378,   0,   0, 379, 380, 381, 382, 168, 168,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 383,   0, 384,   0, 385,\n+   386, 387, 388, 389,   0,   0,   0,   0,   0, 390, 391, 392,   0,   0, 393, 332,\n+   126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 394, 126, 126, 126, 126,\n+   126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 395, 126, 126, 126,\n+   396, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,\n+   126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 397, 126, 126, 126, 126, 126,\n+   126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 398,\n+   126, 126, 126, 126, 126, 126, 126, 126, 126, 399, 168, 168, 168, 168, 168, 168,\n+   126, 126, 126, 126, 126, 126, 126, 126, 399, 168, 168, 168, 168, 168, 168, 168,\n+   126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 400, 126, 126,\n+   126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 401, 168,\n+   402,   0, 168, 168,   7,   7,   7, 403,   0,   1,   2,   3,   4,   4,   4,   4,\n@@ -2326,29 +2428,27 @@\n-     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,\n-     2,   2,   2,   2,   2,   2,   2,   6,   0,   0,   0,   0,   7,   8,   0,   0,\n-     9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,  10,  11,\n-    12,  13,  14,  14,  15,  14,  14,  14,  14,  14,  14,  14,  16,  17,  14,  14,\n-    18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,\n-    19,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,\n-    18,  18,  18,  18,  18,  18,  20,  21,  21,  21,  22,  20,  21,  21,  21,  21,\n-    21,  23,  24,  25,  25,  25,  25,  25,  25,  26,  25,  25,  25,  27,  28,  26,\n-    29,  30,  31,  32,  31,  31,  31,  31,  33,  34,  35,  31,  31,  31,  36,  31,\n-    31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  29,  31,  31,  31,  31,\n-    37,  38,  37,  37,  37,  37,  37,  37,  37,  39,  31,  31,  31,  31,  31,  31,\n-    40,  40,  40,  40,  40,  40,  41,  26,  42,  42,  42,  42,  42,  42,  42,  43,\n-    44,  44,  44,  44,  44,  45,  44,  46,  47,  47,  47,  48,  37,  49,  31,  31,\n-    31,  50,  51,  31,  31,  31,  31,  31,  31,  31,  31,  31,  52,  31,  31,  31,\n-    53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  54,  53,  55,  53,  53,  53,\n-    56,  57,  58,  59,  59,  60,  61,  62,  57,  63,  64,  65,  66,  59,  59,  67,\n-    68,  69,  70,  71,  71,  72,  73,  74,  69,  75,  76,  77,  78,  71,  79,  26,\n-    80,  81,  82,  83,  83,  84,  85,  86,  81,  87,  88,  26,  89,  83,  90,  91,\n-    92,  93,  94,  95,  95,  96,  97,  98,  93,  99, 100, 101, 102,  95,  95,  26,\n-   103, 104, 105, 106, 107, 104, 108, 109, 104, 105, 110,  26, 111, 108, 108, 112,\n-   113, 114, 115, 113, 113, 115, 113, 116, 114, 117, 118, 119, 120, 113, 121, 113,\n-   122, 123, 124, 122, 122, 124, 125, 126, 123, 127, 128, 128, 129, 122, 130,  26,\n-   131, 132, 133, 131, 131, 131, 131, 131, 132, 133, 134, 131, 135, 131, 131, 131,\n-   136, 137, 138, 139, 137, 137, 140, 141, 138, 142, 143, 137, 144, 137, 145,  26,\n-   146, 147, 147, 147, 147, 147, 147, 148, 147, 147, 147, 149,  26,  26,  26,  26,\n-   150, 151, 152, 152, 153, 152, 152, 154, 155, 156, 152, 157,  26,  26,  26,  26,\n-   158, 158, 158, 158, 158, 158, 158, 158, 158, 159, 158, 158, 158, 160, 159, 158,\n-   158, 158, 158, 159, 158, 158, 158, 161, 158, 161, 162, 163,  26,  26,  26,  26,\n-   164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,\n+     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   6,\n+     0,   0,   0,   0,   7,   8,   0,   0,   9,   9,   9,   9,   9,   9,   9,   9,\n+     9,   9,   9,   9,   9,   9,  10,  11,  12,  13,  14,  14,  15,  14,  14,  14,\n+    14,  14,  14,  14,  16,  17,  14,  14,  18,  18,  18,  18,  18,  18,  18,  18,\n+    19,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  20,  21,\n+    21,  21,  22,  20,  21,  21,  21,  21,  21,  23,  24,  25,  25,  25,  25,  25,\n+    25,  26,  25,  25,  25,  27,  28,  26,  29,  30,  31,  32,  31,  31,  31,  31,\n+    33,  34,  35,  31,  31,  31,  36,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n+    31,  31,  31,  29,  31,  31,  31,  31,  37,  38,  37,  37,  37,  37,  37,  37,\n+    37,  39,  31,  31,  31,  31,  31,  31,  40,  40,  40,  40,  40,  40,  41,  26,\n+    42,  42,  42,  42,  42,  42,  42,  43,  44,  44,  44,  44,  44,  45,  44,  46,\n+    47,  47,  47,  48,  37,  49,  31,  31,  31,  50,  51,  31,  31,  31,  31,  31,\n+    31,  31,  31,  31,  52,  31,  31,  31,  53,  53,  53,  53,  53,  53,  53,  53,\n+    53,  53,  54,  53,  55,  53,  53,  53,  56,  57,  58,  59,  59,  60,  61,  62,\n+    57,  63,  64,  65,  66,  59,  59,  67,  68,  69,  70,  71,  71,  72,  73,  74,\n+    69,  75,  76,  77,  78,  71,  79,  26,  80,  81,  82,  83,  83,  84,  85,  86,\n+    81,  87,  88,  26,  89,  83,  90,  91,  92,  93,  94,  95,  95,  96,  97,  98,\n+    93,  99, 100, 101, 102,  95,  95,  26, 103, 104, 105, 106, 107, 104, 108, 109,\n+   104, 105, 110,  26, 111, 108, 108, 112, 113, 114, 115, 113, 113, 115, 113, 116,\n+   114, 117, 118, 119, 120, 113, 121, 113, 122, 123, 124, 122, 122, 124, 125, 126,\n+   123, 127, 128, 128, 129, 122, 130,  26, 131, 132, 133, 131, 131, 131, 131, 131,\n+   132, 133, 134, 131, 135, 131, 131, 131, 136, 137, 138, 139, 137, 137, 140, 141,\n+   138, 142, 143, 137, 144, 137, 145,  26, 146, 147, 147, 147, 147, 147, 147, 148,\n+   147, 147, 147, 149,  26,  26,  26,  26, 150, 151, 152, 152, 153, 152, 152, 154,\n+   155, 156, 152, 157,  26,  26,  26,  26, 158, 158, 158, 158, 158, 158, 158, 158,\n+   158, 159, 158, 158, 158, 160, 159, 158, 158, 158, 158, 159, 158, 158, 158, 161,\n+   158, 161, 162, 163,  26,  26,  26,  26, 164, 164, 164, 164, 164, 164, 164, 164,\n@@ -2356,6 +2456,5 @@\n-   169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169,\n-   170, 170, 170, 170, 170, 170, 170, 170, 170, 171, 172, 171, 170, 170, 170, 170,\n-   170, 171, 170, 170, 170, 170, 171, 172, 171, 170, 172, 170, 170, 170, 170, 170,\n-   170, 170, 171, 170, 170, 170, 170, 170, 170, 170, 170, 173, 170, 170, 170, 174,\n-   170, 170, 170, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 177,\n-   178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178,\n+   169, 169, 169, 169, 169, 169, 169, 169, 170, 170, 170, 170, 170, 170, 170, 170,\n+   170, 171, 172, 171, 170, 170, 170, 170, 170, 171, 170, 170, 170, 170, 171, 172,\n+   171, 170, 172, 170, 170, 170, 170, 170, 170, 170, 171, 170, 170, 170, 170, 170,\n+   170, 170, 170, 173, 170, 170, 170, 174, 170, 170, 170, 175, 176, 176, 176, 176,\n+   176, 176, 176, 176, 176, 176, 177, 177, 178, 178, 178, 178, 178, 178, 178, 178,\n@@ -2371,22 +2470,18 @@\n-   222, 222, 222, 222, 222, 222, 222, 222, 222, 223, 222, 222, 222, 222, 222, 224,\n-   225, 225, 225, 225, 225, 225, 225, 225, 226, 226, 226, 226, 226, 226, 227, 228,\n-   229, 229, 229, 229, 229, 229, 229, 230, 229, 231, 232, 232, 232, 232, 232, 232,\n-    18, 233, 165, 165, 165, 165, 165, 234, 225,  26, 235,   9, 236, 237, 238, 239,\n-     2,   2,   2,   2, 240, 241,   2,   2,   2,   2,   2, 242, 243, 244,   2, 245,\n-     2,   2,   2,   2,   2,   2,   2, 246,   9,   9,   9,   9,   9,   9,   9,   9,\n-    14,  14, 247, 247,  14,  14,  14,  14, 247, 247,  14, 248,  14,  14,  14, 247,\n-    14,  14,  14,  14,  14,  14, 249,  14, 249,  14, 250, 251,  14,  14, 252, 253,\n-     0, 254,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0, 256, 257,\n-     0, 258,   2, 259,   0,   0,   0,   0, 260,  26,   9,   9,   9,   9, 261,  26,\n-     0,   0,   0,   0, 262, 263,   4,   0,   0, 264,   0,   0,   2,   2,   2,   2,\n-     2, 265,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0, 258,  26,  26,  26,   0, 266,  26,  26,   0,   0,   0,   0,\n-   267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 268,   0,\n-     0,   0, 269,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-   270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270,   2,   2,   2,   2,\n-    17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17, 271, 272,\n-   165, 165, 165, 165, 166, 167, 273, 273, 273, 273, 273, 273, 273, 274, 275, 274,\n-   170, 170, 172,  26, 172, 172, 172, 172, 172, 172, 172, 172,  18,  18,  18,  18,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 276,  26,  26,  26,  26,\n+   222, 222, 222, 222, 222, 222, 222, 222, 222, 223, 222, 222, 222, 222, 222, 222,\n+   224, 224, 224, 224, 224, 224, 224, 224, 225, 225, 225, 225, 225, 225, 226, 227,\n+   228, 228, 228, 228, 228, 228, 228, 229, 228, 230, 231, 231, 231, 231, 231, 231,\n+    18, 232, 165, 165, 165, 165, 165, 233, 224,  26, 234,   9, 235, 236, 237, 238,\n+     2,   2,   2,   2, 239, 240,   2,   2,   2,   2,   2, 241, 242, 243,   2, 244,\n+     2,   2,   2,   2,   2,   2,   2, 245,  14,  14, 246, 246,  14,  14,  14,  14,\n+   246, 246,  14, 247,  14,  14,  14, 246,  14,  14,  14,  14,  14,  14, 248,  14,\n+   248,  14, 249, 250,  14,  14, 251, 252,   0, 253,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0, 254,   0, 255, 256,   0, 257,   2, 258,   0,   0,   0,   0,\n+   259,  26,   9,   9,   9,   9, 260,  26,   0,   0,   0,   0, 261, 262,   4,   0,\n+     0, 263,   0,   0,   2,   2,   2,   2,   2, 264,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0, 265,  26,  26,   0, 266,  26,  26,   0,   0,   0,   0,\n+   267, 267, 267, 267, 267, 267, 267, 267,   0,   0,   0,   0,   0,   0, 268,   0,\n+     0,   0, 269,   0,   0,   0,   0,   0, 270, 270, 270, 270, 270, 270, 270, 270,\n+   270, 270, 270, 270,   2,   2,   2,   2,  17,  17,  17,  17,  17,  17,  17,  17,\n+    17,  17,  17,  17,  17,  17, 271, 272, 165, 165, 165, 165, 166, 167, 273, 273,\n+   273, 273, 273, 273, 273, 274, 275, 274, 170, 170, 172,  26, 172, 172, 172, 172,\n+   172, 172, 172, 172,  18,  18,  18,  18,   0,   0,   0, 276,  26,  26,  26,  26,\n@@ -2394,1 +2489,0 @@\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n@@ -2398,4 +2492,3 @@\n-   292, 293, 293, 293, 293, 293, 294, 169, 169, 169, 169, 169, 169, 169, 169, 169,\n-   169, 295,   0,   0, 293, 293, 293, 293,   0,   0,   0,   0, 296, 297, 290, 290,\n-   169, 169, 169, 295,   0,   0,   0,   0,   0,   0,   0,   0, 169, 169, 169, 298,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 290, 290, 290, 290, 290, 299,\n+   292, 293, 293, 293, 293, 293, 294, 169, 169, 295,   0,   0, 293, 293, 293, 293,\n+     0,   0,   0,   0, 276, 296, 290, 290, 169, 169, 169, 295,   0,   0,   0,   0,\n+     0,   0,   0,   0, 169, 169, 169, 297,   0,   0, 290, 290, 290, 290, 290, 298,\n@@ -2403,170 +2496,132 @@\n-   277, 277, 277, 277, 277, 277, 277, 277,   0,   0,   0,   0,   0,   0,   0,   0,\n-   300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300,\n-   300, 301, 300, 300, 300, 300, 300, 300, 302,  26, 303, 303, 303, 303, 303, 303,\n-   304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304,\n-   304, 304, 304, 304, 304, 305,  26,  26,  18,  18,  18,  18,  18,  18,  18,  18,\n-    18,  18,  18,  18, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,  26,\n-     0,   0,   0,   0, 307,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,\n-     2, 308,   2,   2,   2,   2,   2,   2,   2, 309, 310, 311,  26,  26, 312,   2,\n-   313, 313, 313, 313, 313, 314,   0, 315, 316, 316, 316, 316, 316, 316, 316,  26,\n-   317, 317, 317, 317, 317, 317, 317, 317, 318, 319, 317, 320,  53,  53,  53,  53,\n-   321, 321, 321, 321, 321, 322, 323, 323, 323, 323, 324, 325, 169, 169, 169, 326,\n-   327, 327, 327, 327, 327, 327, 327, 327, 327, 328, 327, 329, 164, 164, 164, 330,\n-   331, 331, 331, 331, 331, 331, 332,  26, 331, 333, 331, 334, 164, 164, 164, 164,\n-   335, 335, 335, 335, 335, 335, 335, 335, 336,  26,  26, 337, 338, 338, 339,  26,\n-   340, 340, 340,  26, 172, 172,   2,   2,   2,   2,   2, 341, 342, 343, 176, 176,\n-   176, 176, 176, 176, 176, 176, 176, 176, 338, 338, 338, 338, 338, 344, 338, 345,\n-   169, 169, 169, 169, 346,  26, 169, 169, 295, 347, 169, 169, 169, 169, 169, 346,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 280, 277, 277,\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 348,  26,  26,  26,  26,\n-   349,  26, 350, 351,  25,  25, 352, 353, 354,  25,  31,  31,  31,  31,  31,  31,\n-    31,  31,  31,  31,  31,  31,  31,  31, 355,  26, 356,  31,  31,  31,  31,  31,\n-    31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n-    31,  31,  31,  31,  31,  31,  31, 357,  31,  31,  31,  31,  31,  31,  31,  31,\n-    31,  31, 358,  31,  31,  31,  31,  31,  31, 359,  26,  26,  26,  26,  31,  31,\n-     9,   9,   0, 315,   9, 360,   0,   0,   0,   0, 361,   0, 258, 296, 362,  31,\n-    31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 363,\n-   364,   0,   0,   0,   1,   2,   2,   3,   1,   2,   2,   3, 365, 290, 289, 290,\n-   290, 290, 290, 366, 169, 169, 169, 295, 367, 367, 367, 368, 258, 258,  26, 369,\n-   370, 371, 370, 370, 372, 370, 370, 373, 370, 374, 370, 374,  26,  26,  26,  26,\n-   370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 375,\n-   376,   0,   0,   0,   0,   0, 377,   0,  14,  14,  14,  14,  14,  14,  14,  14,\n-    14, 253,   0, 378, 379,  26,  26,  26,  26,  26,   0,   0,   0,   0,   0, 380,\n-   381, 381, 381, 382, 383, 383, 383, 383, 383, 383, 384,  26, 385,   0,   0, 296,\n-   386, 386, 386, 386, 387, 388, 389, 389, 389, 390, 391, 391, 391, 391, 391, 392,\n-   393, 393, 393, 394, 395, 395, 395, 395, 396, 395, 397,  26,  26,  26,  26,  26,\n-   398, 398, 398, 398, 398, 398, 398, 398, 398, 398, 399, 399, 399, 399, 399, 399,\n-   400, 400, 400, 401, 400, 402, 403, 403, 403, 403, 404, 403, 403, 403, 403, 404,\n-   405, 405, 405, 405, 405,  26, 406, 406, 406, 406, 406, 406, 407, 408, 409, 410,\n-   409, 410, 411, 409, 412, 409, 412, 413,  26,  26,  26,  26,  26,  26,  26,  26,\n-   414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414,\n-   414, 414, 414, 414, 414, 414, 415,  26, 414, 414, 416,  26, 414,  26,  26,  26,\n-   417,   2,   2,   2,   2,   2, 418, 309,  26,  26,  26,  26,  26,  26,  26,  26,\n-   419, 420, 421, 421, 421, 421, 422, 423, 424, 424, 425, 424, 426, 426, 426, 426,\n-   427, 427, 427, 428, 429, 427,  26,  26,  26,  26,  26,  26, 430, 430, 431, 432,\n-   433, 433, 433, 434, 435, 435, 435, 436,  26,  26,  26,  26,  26,  26,  26,  26,\n-   437, 437, 437, 437, 438, 438, 438, 439, 438, 438, 440, 438, 438, 438, 438, 438,\n-   441, 442, 443, 444, 445, 445, 446, 447, 445, 448, 445, 448, 449, 449, 449, 449,\n-   450, 450, 450, 450,  26,  26,  26,  26, 451, 451, 451, 451, 452, 453, 452,  26,\n-   454, 454, 454, 454, 454, 454, 455, 456, 457, 457, 458, 457, 459, 459, 460, 459,\n-   461, 461, 462, 463,  26, 464,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   465, 465, 465, 465, 465, 465, 465, 465, 465, 466,  26,  26,  26,  26,  26,  26,\n-   467, 467, 467, 467, 467, 467, 468,  26, 467, 467, 467, 467, 467, 467, 468, 469,\n-   470, 470, 470, 470, 470,  26, 470, 471,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  31,  31,  31,  50,\n-   472, 472, 472, 472, 472, 473, 474,  26,  26,  26,  26,  26,  26,  26,  26, 475,\n-   476, 476, 476, 476, 476,  26, 477, 477, 477, 477, 477, 478,  26,  26, 479, 479,\n-   479, 480,  26,  26,  26,  26, 481, 481, 481, 482,  26,  26, 483, 483, 484,  26,\n-   485, 485, 485, 485, 485, 485, 485, 485, 485, 486, 487, 485, 485, 485, 486, 488,\n-   489, 489, 489, 489, 489, 489, 489, 489, 490, 491, 492, 492, 492, 493, 492, 494,\n-   495, 495, 495, 495, 495, 495, 496, 495, 495,  26, 497, 497, 497, 497, 498,  26,\n-   499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 500, 137, 501,  26,\n-   502, 502, 503, 502, 502, 502, 502, 502, 504,  26,  26,  26,  26,  26,  26,  26,\n-   505, 506, 507, 508, 507, 509, 510, 510, 510, 510, 510, 510, 510, 511, 510, 512,\n-   513, 514, 515, 516, 516, 517, 518, 519, 514, 520, 521, 522, 523, 524, 524,  26,\n-   525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 526, 527,  26,  26,  26,\n-   528, 528, 528, 528, 528, 528, 528, 528, 528,  26, 528, 529,  26,  26,  26,  26,\n-   530, 530, 530, 530, 530, 530, 531, 530, 530, 530, 530, 531,  26,  26,  26,  26,\n-   532, 532, 532, 532, 532, 532, 532, 532, 533,  26, 532, 534, 198, 535,  26,  26,\n-   536, 536, 536, 536, 536, 536, 536, 537, 536, 537,  26,  26,  26,  26,  26,  26,\n-   538, 538, 538, 539, 538, 540, 538, 538, 541,  26,  26,  26,  26,  26,  26,  26,\n-   542, 542, 542, 542, 542, 542, 542, 543,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 545, 546,\n-   547, 548, 549, 550, 550, 550, 551, 552, 547,  26, 550, 553,  26,  26,  26,  26,\n-    26,  26,  26,  26, 554, 555, 554, 554, 554, 554, 554, 555, 556,  26,  26,  26,\n-   557, 557, 557, 557, 557, 557, 557, 557, 557,  26, 558, 558, 558, 558, 558, 558,\n-   558, 558, 558, 558, 559,  26, 178, 178, 560, 560, 560, 560, 560, 560, 560, 561,\n-    53, 562,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   563, 564, 563, 563, 563, 563, 565, 563, 566,  26, 563, 563, 563, 567, 568, 568,\n-   568, 568, 569, 568, 568, 570, 571,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   572, 573, 574, 574, 574, 574, 572, 575, 574,  26, 574, 576, 577, 578, 579, 579,\n-   579, 580, 581, 582, 579, 583,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 584, 584, 584, 585,\n-   586, 586, 587, 586, 586, 586, 586, 588, 586, 586, 586, 589,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26, 590,  26, 108, 108, 108, 108, 108, 108, 591, 592,\n-   593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593,\n-   593, 593, 593, 594,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 595, 596,  26,\n-   593, 593, 593, 593, 593, 593, 593, 593, 597,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 599,  26,\n-   600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n-   600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 601,  26,  26,  26,  26,  26,\n-   602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602,\n-   602, 602, 602, 602, 602, 602, 602, 602, 603,  26,  26,  26,  26,  26,  26,  26,\n-   306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,\n-   306, 306, 306, 306, 306, 306, 306, 604, 605, 605, 605, 606, 605, 607, 608, 608,\n-   608, 608, 608, 608, 608, 608, 608, 609, 608, 610, 611, 611, 611, 612, 612,  26,\n-   613, 613, 613, 613, 613, 613, 613, 613, 614,  26, 613, 615, 615, 613, 613, 616,\n-   613, 613,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26, 617, 617, 617, 617, 617, 617, 617, 617,\n-   617, 617, 617, 618,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   619, 619, 619, 619, 619, 619, 619, 619, 619, 620, 619, 619, 619, 619, 619, 619,\n-   619, 621, 619, 619,  26,  26,  26,  26,  26,  26,  26,  26, 622,  26, 348,  26,\n-   623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623,\n-   623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623,  26,\n-   624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624,\n-   624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 625,  26,  26,  26,  26,  26,\n-   623, 626,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 627, 628,\n-   629, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286,\n-   286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286,\n-   286, 286, 286, 286, 630,  26, 631,  26,  26,  26, 632,  26, 633,  26, 634, 634,\n-   634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634,\n-   634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 634, 635,\n-   636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 637, 636, 638,\n-   636, 639, 636, 640, 296,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-     9,   9,   9,   9,   9, 641,   9,   9, 221,  26,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0, 296,  26,  26,  26,  26,  26,  26,  26,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 276,  26,\n-     0,   0,   0,   0, 258, 364,   0,   0,   0,   0,   0,   0, 642, 643,   0, 644,\n-   645, 646,   0,   0,   0, 647,   0,   0,   0,   0,   0,   0,   0, 266,  26,  26,\n-    14,  14,  14,  14,  14,  14,  14,  14, 247,  26,  26,  26,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,   0,   0, 296,  26,   0,   0, 296,  26,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 258,  26,   0,   0,   0, 260,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0,   0,   0,   0,   0,\n-     0,   0,   0, 255, 648, 649,   0, 650, 651,   0,   0,   0,   0,   0,   0,   0,\n-   269, 652, 255, 255,   0,   0,   0, 653, 654, 655, 656,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0, 276,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0, 268,   0,   0,   0,   0,   0,   0,\n-   657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657,\n-   657, 658,  26, 659, 660, 657,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-     2,   2,   2, 349, 661, 309,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   662, 270, 270, 663, 664, 665,  18,  18,  18,  18,  18,  18,  18, 666,  26,  26,\n-    26, 667,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   668, 668, 668, 668, 668, 669, 668, 670, 668, 671,  26,  26,  26,  26,  26,  26,\n-    26,  26, 672, 672, 672, 673,  26,  26, 674, 674, 674, 674, 674, 674, 674, 675,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 676, 676, 676, 676, 676, 677,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 172, 678, 170, 172,\n-   679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679, 679,\n-   679, 679, 679, 679, 679, 679, 679, 679, 680, 679, 681,  26,  26,  26,  26,  26,\n-   682, 682, 682, 682, 682, 682, 682, 682, 682, 683, 682, 684,  26,  26,  26,  26,\n-    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 364,   0,\n-     0,   0,   0,   0,   0,   0, 378,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   364,   0,   0,   0,   0,   0,   0, 276,  26,  26,  26,  26,  26,  26,  26,  26,\n-   685,  31,  31,  31, 686, 687, 688, 689, 690, 691, 686, 692, 686, 688, 688, 693,\n-    31, 694,  31, 695, 696, 694,  31, 695,  26,  26,  26,  26,  26,  26,  51,  26,\n-     0,   0,   0,   0,   0, 296,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0, 296,  26,   0, 258, 364,   0, 364,   0, 364,   0,   0,   0, 276,  26,\n-     0,   0,   0,   0,   0, 276,  26,  26,  26,  26,  26,  26, 697,   0,   0,   0,\n-   698,  26,   0,   0,   0,   0,   0, 296,   0, 260, 315,  26, 276,  26,  26,  26,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 699,   0, 378,   0, 378,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 258, 700,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 315,   0, 296, 260,  26,\n-     0, 296,   0,   0,   0,   0,   0,   0,   0,  26,   0, 315,   0,   0,   0,   0,\n-     0,  26,   0,   0,   0, 276, 315,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 296,  26,   0, 276,   0, 378,\n-     0, 260,   0,   0,   0,   0,   0, 269, 276, 697,   0, 296,   0, 260,   0, 260,\n-     0,   0, 361,   0,   0,   0,   0,   0,   0, 266,  26,  26,  26,  26,   0, 315,\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,  26,  26,  26,  26,\n-   277, 277, 277, 277, 277, 277, 277, 348, 277, 277, 277, 277, 277, 277, 277, 277,\n-   277, 277, 277, 280, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n-   277, 277, 277, 277, 348,  26, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 701,  26, 277, 277,\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 280,  26,  26,  26,  26,\n-   277, 277, 277, 280,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   277, 277, 277, 277, 277, 277, 277, 277, 277, 702, 277, 277, 277, 277, 277, 277,\n-   277, 277, 277, 277, 277, 277,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n-   703,  26,  26,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,\n-     9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   0,   0,\n+   299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 299, 299, 299, 299, 299, 299,\n+   301,  26, 302, 302, 302, 302, 302, 302, 303, 303, 303, 303, 303, 303, 303, 303,\n+   303, 303, 303, 303, 303, 304,  26,  26,  18,  18,  18,  18, 305, 305, 305, 305,\n+   305, 305, 305, 305, 305, 305, 305,  26,   0,   0,   0,   0, 306,   2,   2,   2,\n+     2, 307,   2,   2,   2,   2,   2,   2,   2, 308, 309, 258,  26,  26, 310,   2,\n+   311, 311, 311, 311, 311, 312,   0, 265, 313, 313, 313, 313, 313, 313, 313,  26,\n+   314, 314, 314, 314, 314, 314, 314, 314, 315, 316, 314, 317,  53,  53,  53,  53,\n+   318, 318, 318, 318, 318, 319, 320, 320, 320, 320, 321, 322, 169, 169, 169, 323,\n+   324, 324, 324, 324, 324, 324, 324, 324, 324, 325, 324, 326, 164, 164, 164, 327,\n+   328, 328, 328, 328, 328, 328, 329,  26, 328, 330, 328, 331, 164, 164, 164, 164,\n+   332, 332, 332, 332, 332, 332, 332, 332, 333,  26,  26, 334, 335, 335, 336,  26,\n+   337, 337, 337,  26, 172, 172,   2,   2,   2,   2,   2, 338, 339, 340, 176, 176,\n+   176, 176, 176, 176, 176, 176, 176, 176, 335, 335, 335, 335, 335, 341, 335, 342,\n+   169, 169, 169, 169, 343,  26, 169, 169, 295, 344, 169, 169, 169, 169, 169, 343,\n+    26,  26,  26,  26,  26,  26,  26,  26, 277, 277, 277, 277, 277, 280, 277, 277,\n+   277, 277, 277, 345,  26,  26,  26,  26, 346,  26, 347, 348,  25,  25, 349, 350,\n+   351,  25,  31,  31,  31,  31,  31,  31, 352,  26, 353,  31,  31,  31,  31,  31,\n+    31,  31,  31,  31,  31,  31,  31, 354,  31,  31, 355,  31,  31,  31,  31,  31,\n+    31, 356,  26,  26,  26,  26,  31,  31,   9,   9,   0, 265,   9, 357,   0,   0,\n+     0,   0, 358,   0, 257, 359, 360,  31,  31,  31,  31,  31,  31,  31,  31, 361,\n+   362,   0,   0,   0,   1,   2,   2,   3,   1,   2,   2,   3, 363, 290, 289, 290,\n+   290, 290, 290, 364, 169, 169, 169, 295, 365, 365, 365, 366, 257, 257,  26, 367,\n+   368, 369, 368, 368, 370, 368, 368, 371, 368, 372, 368, 372,  26,  26,  26,  26,\n+   368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 373,\n+   374,   0,   0,   0,   0,   0, 375,   0,  14,  14,  14,  14,  14,  14,  14,  14,\n+    14, 252,   0, 376, 377,  26,  26,  26,  26,  26,   0,   0,   0,   0,   0, 378,\n+   379, 379, 379, 380, 381, 381, 381, 381, 381, 381, 382,  26, 383,   0,   0, 359,\n+   384, 384, 384, 384, 385, 386, 387, 387, 387, 388, 389, 389, 389, 389, 389, 390,\n+   391, 391, 391, 392, 393, 393, 393, 393, 394, 393, 395,  26,  26,  26,  26,  26,\n+   396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 397, 397, 397, 397, 397, 397,\n+   398, 398, 398, 399, 398, 400, 401, 401, 401, 401, 402, 401, 401, 401, 401, 402,\n+   403, 403, 403, 403, 403,  26, 404, 404, 404, 404, 404, 404, 405, 406, 407, 408,\n+   407, 408, 409, 407, 410, 407, 410, 411, 412, 412, 412, 412, 412, 412, 413,  26,\n+   414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 415,  26,\n+   414, 414, 416,  26, 414,  26,  26,  26, 417,   2,   2,   2,   2,   2, 418, 419,\n+   420, 421, 422, 422, 422, 422, 423, 424, 425, 425, 426, 425, 427, 427, 427, 427,\n+   428, 428, 428, 429, 430, 428,  26,  26,  26,  26,  26,  26, 431, 431, 432, 433,\n+   434, 434, 434, 435, 436, 436, 436, 437, 438, 438, 438, 438, 439, 439, 439, 440,\n+   439, 439, 441, 439, 439, 439, 439, 439, 442, 443, 444, 445, 446, 446, 447, 448,\n+   446, 449, 446, 449, 450, 450, 450, 450, 451, 451, 451, 451,  26,  26,  26,  26,\n+   452, 452, 452, 452, 453, 454, 453,  26, 455, 455, 455, 455, 455, 455, 456, 457,\n+   458, 458, 459, 458, 460, 460, 461, 460, 462, 462, 463, 464,  26, 465,  26,  26,\n+   466, 466, 466, 466, 466, 466, 466, 466, 466, 467,  26,  26,  26,  26,  26,  26,\n+   468, 468, 468, 468, 468, 468, 469,  26, 468, 468, 468, 468, 468, 468, 469, 470,\n+   471, 471, 471, 471, 471,  26, 471, 472, 473, 473, 473, 473, 474, 475, 473, 473,\n+   474, 476,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  31,  31,  31,  50,\n+   477, 477, 477, 477, 477, 478, 479,  26, 480,  26,  26,  26,  26,  26,  26, 481,\n+   482, 482, 482, 482, 482,  26, 483, 483, 483, 483, 483, 484,  26,  26, 485, 485,\n+   485, 486,  26,  26,  26,  26, 487, 487, 487, 488,  26,  26, 489, 489, 490,  26,\n+   491, 491, 491, 491, 491, 491, 491, 491, 491, 492, 493, 491, 491, 491, 492, 494,\n+   495, 495, 495, 495, 495, 495, 495, 495, 496, 497, 498, 498, 498, 499, 498, 500,\n+   501, 501, 501, 501, 501, 501, 502, 501, 501,  26, 503, 503, 503, 503, 504,  26,\n+   505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 506, 137, 507,  26,\n+   508, 508, 509, 508, 508, 508, 508, 508, 510,  26,  26,  26,  26,  26,  26,  26,\n+   511, 512, 513, 514, 513, 515, 516, 516, 516, 516, 516, 516, 516, 517, 516, 518,\n+   519, 520, 521, 522, 522, 523, 524, 525, 520, 526, 527, 528, 529, 530, 530,  26,\n+   531, 532, 531, 531, 531, 531, 533, 531, 534, 535, 533, 536, 537,  26,  26,  26,\n+   538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 539, 540,  26,  26,  26,\n+   541, 541, 541, 541, 541, 541, 541, 541, 541,  26, 541, 542,  26,  26,  26,  26,\n+   543, 543, 543, 543, 543, 543, 544, 543, 543, 543, 543, 544,  26,  26,  26,  26,\n+   545, 545, 545, 545, 545, 545, 545, 545, 546,  26, 545, 547, 198, 548,  26,  26,\n+   549, 549, 549, 549, 549, 549, 549, 550, 549, 550, 164, 164, 551,  26,  26,  26,\n+   552, 552, 552, 553, 552, 554, 552, 552, 555,  26,  26,  26,  26,  26,  26,  26,\n+   556, 556, 556, 556, 556, 556, 556, 557,  26,  26,  26,  26, 558, 558, 558, 558,\n+   558, 558, 558, 558, 558, 558, 559, 560, 561, 562, 563, 564, 564, 564, 565, 566,\n+   561,  26, 564, 567,  26,  26,  26,  26,  26,  26,  26,  26, 568, 569, 568, 568,\n+   568, 568, 568, 569, 570,  26,  26,  26, 571, 571, 571, 571, 571, 571, 571, 571,\n+   571,  26, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 573,  26, 178, 178,\n+   574, 574, 574, 574, 574, 574, 574, 575,  53, 576,  26,  26,  26,  26,  26,  26,\n+   577, 577, 577, 577, 578,  26, 577, 578, 579, 580, 579, 579, 579, 579, 581, 579,\n+   582,  26, 579, 579, 579, 583, 584, 584, 584, 584, 585, 584, 584, 586, 587,  26,\n+   588, 589, 590, 590, 590, 590, 588, 591, 590,  26, 590, 592, 593, 594, 595, 595,\n+   595, 596, 597, 598, 595, 599,  26,  26,  26,  26,  26,  26, 600, 600, 600, 601,\n+   602, 602, 603, 602, 602, 602, 602, 604, 602, 602, 602, 605,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26, 606,  26, 108, 108, 108, 108, 108, 108, 607, 608,\n+   609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 610,  26,  26,  26,  26,\n+   609, 609, 609, 609, 609, 611, 612,  26, 613,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 615,  26,\n+   616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 617,  26, 616, 616, 616, 616,\n+   616, 616, 616, 616, 616, 616, 616, 618, 619, 619, 619, 619, 619, 619, 619, 619,\n+   620,  26,  26,  26,  26,  26,  26,  26, 621, 621, 621, 621, 621, 621, 621, 622,\n+   305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 623,\n+   624, 624, 624, 625, 624, 626, 627, 627, 627, 627, 627, 627, 627, 627, 627, 628,\n+   627, 629, 630, 630, 630, 631, 631,  26, 632, 632, 632, 632, 632, 632, 632, 632,\n+   633,  26, 632, 634, 634, 632, 632, 635, 632, 632,  26,  26,  26,  26,  26,  26,\n+   636, 636, 636, 636, 636, 636, 636, 637, 638, 638, 638, 638, 638, 638, 638, 638,\n+   638, 638, 638, 639,  26,  26,  26,  26, 640, 640, 640, 640, 640, 640, 640, 640,\n+   640, 641, 640, 640, 640, 640, 640, 640, 640, 642, 640, 640,  26,  26,  26,  26,\n+    26,  26,  26,  26, 643,  26, 345,  26, 644, 644, 644, 644, 644, 644, 644, 644,\n+   644, 644, 644, 644, 644, 644, 644,  26, 645, 645, 645, 645, 645, 645, 645, 645,\n+   645, 645, 646,  26,  26,  26,  26, 647, 644, 648,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26, 649, 650, 651, 286, 286, 286, 286, 286, 286, 286,\n+   286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 652,  26, 653,  26,\n+    26,  26, 654,  26, 655,  26, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656,\n+   656, 656, 656, 656, 656, 656, 656, 657, 658, 658, 658, 658, 658, 658, 658, 658,\n+   658, 658, 658, 658, 658, 659, 658, 660, 658, 661, 658, 662, 359,  26,  26,  26,\n+     0,   0,   0,   0,   0,   0,   0, 265,   0,   0,   0,   0,   0,   0, 359,  26,\n+     9,   9,   9,   9,   9, 663,   9,   9, 221,  26,   0,   0,   0,   0,   0,   0,\n+   359,  26,  26,  26,  26,  26,  26,  26,   0,   0,   0,   0,   0,   0, 276,  26,\n+     0,   0,   0,   0, 257, 362,   0,   0,   0,   0,   0,   0, 664, 665,   0, 666,\n+   667, 668,   0,   0,   0, 669,   0,   0,   0,   0,   0,   0,   0, 266,  26,  26,\n+   246,  26,  26,  26,  26,  26,  26,  26,   0,   0, 359,  26,   0,   0, 359,  26,\n+     0,   0, 257,  26,   0,   0,   0, 259,   0,   0, 254,   0,   0,   0,   0,   0,\n+     0,   0,   0, 254, 670, 671,   0, 672, 673,   0,   0,   0,   0,   0,   0,   0,\n+   269, 674, 254, 254,   0,   0,   0, 675, 676, 677, 678,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0, 276,   0,   0,   0,   0, 268,   0,   0,   0,   0,   0,   0,\n+   679, 679, 679, 679, 679, 679, 679, 679, 679, 680,  26, 681, 682, 679,  26,  26,\n+     2,   2,   2, 346, 683, 419,  26,  26, 684, 270, 270, 685, 686, 687,  18,  18,\n+    18,  18,  18,  18,  18, 688,  26,  26,  26, 689,  26,  26,  26,  26,  26,  26,\n+   690, 690, 690, 690, 690, 691, 690, 692, 690, 693,  26,  26,  26,  26,  26,  26,\n+    26,  26, 694, 694, 694, 695,  26,  26, 696, 696, 696, 696, 696, 696, 696, 697,\n+    26,  26, 698, 698, 698, 698, 698, 699,  26,  26, 700, 700, 700, 700, 700, 701,\n+    26,  26,  26,  26, 172, 702, 170, 172, 703, 703, 703, 703, 703, 703, 703, 703,\n+   704, 703, 705,  26,  26,  26,  26,  26, 706, 706, 706, 706, 706, 706, 706, 706,\n+   706, 707, 706, 708,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 362,   0,\n+     0,   0,   0,   0,   0,   0, 376,  26, 362,   0,   0,   0,   0,   0,   0, 276,\n+   709,  31,  31,  31, 710, 711, 712, 713, 714, 715, 710, 716, 710, 712, 712, 717,\n+    31, 718,  31, 719, 720, 718,  31, 719,  26,  26,  26,  26,  26,  26, 721,  26,\n+     0,   0,   0,   0,   0, 359,   0,   0,   0,   0, 359,  26,   0, 257, 362,   0,\n+   362,   0, 362,   0,   0,   0, 276,  26,   0,   0,   0,   0,   0, 276,  26,  26,\n+    26,  26,  26,  26, 722,   0,   0,   0, 723,  26,   0,   0,   0,   0,   0, 359,\n+     0, 259, 265,  26, 276,  26,  26,  26,   0,   0,   0, 724,   0, 376,   0, 376,\n+     0,   0,   0,   0,   0,   0, 257, 725,   0,   0,   0, 265,   0, 359, 259,  26,\n+     0, 359,   0,   0,   0,   0,   0,   0,   0,  26,   0, 265,   0,   0,   0,   0,\n+     0,  26,   0,   0,   0, 276,   0, 359, 265,  26,  26,  26,  26,  26,  26,  26,\n+     0,   0, 359,  26,   0, 276,   0, 376,   0, 726,   0,   0,   0,   0,   0,   0,\n+   257, 722,   0, 727,   0, 265,   0, 259,   0,   0, 358,   0,   0,   0,   0,   0,\n+   277, 277, 277, 277,  26,  26,  26,  26, 277, 277, 277, 277, 277, 277, 277, 345,\n+   277, 277, 277, 280, 277, 277, 277, 277, 277, 277, 277, 277, 345,  26, 277, 277,\n+   277, 277, 277, 277, 728,  26, 277, 277, 277, 277, 277, 280,  26,  26,  26,  26,\n+   277, 729, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,  26,  26,\n+   730,  26,  26,  26,   0,   0,   0,   0,   9,   9,   9,   9,   9,   9,   0,   0,\n@@ -2735,11 +2790,18 @@\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1936,   0,1937,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1938,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1939,1940,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1941,1942,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1944,1943,   0,1945,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1946,1947,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1948,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1949,1950,\n-  1951,1952,1953,1954,1955,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1956,1957,1958,1960,1959,\n-  1961,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1936,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1937,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1938,   0,1939,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1940,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1941,1942,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1943,1944,   0,   0,   0,\n+     0,   0,   0,1945,   0,1946,   0,   0,   0,   0,   0,   0,   0,   0,1947,   0,\n+     0,1948,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1950,   0,1949,1951,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1953,1952,   0,1954,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1955,1956,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1957,   0,   0,   0,   0,   0,   0,   0,\n+     0,1958,1961,1959,1965,1960,1962,1964,1963,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1967,1966,1968,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1969,1970,\n+  1971,1972,1973,1974,1975,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1976,1977,1978,1980,1979,\n+  1981,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n@@ -2802,1 +2864,1 @@\n-  return u<1114110u?_hb_ucd_u8[6808+(((_hb_ucd_u8[1312+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n+  return u<1114110u?_hb_ucd_u8[6472+(((_hb_ucd_u8[816+(((_hb_ucd_u16[((_hb_ucd_u8[272+(((_hb_ucd_u8[u>>1>>3>>4>>4])<<4)+((u>>1>>3>>4)&15u))])<<4)+((u>>1>>3)&15u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n@@ -2807,1 +2869,1 @@\n-  return u<125259u?_hb_ucd_u8[8800+(((_hb_ucd_u8[8244+(((_hb_ucd_u8[7784+(((_hb_ucd_u8[7432+(((_hb_ucd_u8[7186+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n+  return u<125259u?_hb_ucd_u8[8504+(((_hb_ucd_u8[7936+(((_hb_ucd_u8[7460+(((_hb_ucd_u8[7100+(((_hb_ucd_u8[6854+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n@@ -2817,1 +2879,1 @@\n-  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[9548+(((_hb_ucd_u8[9428+(((_hb_ucd_b4(9300+_hb_ucd_u8,u>>2>>3>>3))<<3)+((u>>2>>3)&7u))])<<3)+((u>>2)&7u))])<<2)+((u)&3u)]:0;\n+  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[9252+(((_hb_ucd_u8[9132+(((_hb_ucd_b4(9004+_hb_ucd_u8,u>>2>>3>>3))<<3)+((u>>2>>3)&7u))])<<3)+((u>>2)&7u))])<<2)+((u)&3u)]:0;\n@@ -2822,1 +2884,1 @@\n-  return u<918000u?_hb_ucd_u8[11070+(((_hb_ucd_u16[2048+(((_hb_ucd_u8[10334+(((_hb_ucd_u8[9884+(u>>3>>4>>4)])<<4)+((u>>3>>4)&15u))])<<4)+((u>>3)&15u))])<<3)+((u)&7u))]:2;\n+  return u<918000u?_hb_ucd_u8[10486+(((_hb_ucd_u16[3744+(((_hb_ucd_u16[2624+(((_hb_ucd_u8[9588+(u>>3>>3>>4)])<<4)+((u>>3>>3)&15u))])<<3)+((u>>3)&7u))])<<3)+((u)&7u))]:2;\n@@ -2827,1 +2889,1 @@\n-  return u<195102u?_hb_ucd_u16[6032+(((_hb_ucd_u8[17084+(((_hb_ucd_u8[16702+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n+  return u<195102u?_hb_ucd_u16[6976+(((_hb_ucd_u8[16716+(((_hb_ucd_u8[16334+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n@@ -2834,1 +2896,1 @@\n-_hb_ucd_u8[14752] =\n+_hb_ucd_u8[17524] =\n@@ -2836,34 +2898,17 @@\n-    0,  1,  2,  3,  4,  5,  6,  7,  7,  8,  7,  7,  7,  7,  7,  7,\n-    7,  7,  7,  7,  9, 10,  7,  7,  7,  7, 11, 12, 13, 13, 13, 14,\n-   15, 16, 17, 18, 19, 20, 21, 22, 23, 22, 22, 22, 22, 24,  7,  7,\n-   25, 26, 22, 22, 22, 27, 28, 29, 22, 30, 31, 32, 33, 34, 35, 36,\n-    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n-    7,  7,  7,  7, 37,  7, 38, 39,  7, 40,  7,  7,  7, 41, 22, 42,\n-    7,  7, 43,  7, 44, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   45, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 46,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 47,\n+    0,  1,  2,  3,  4,  5,  5,  5,  5,  5,  6,  5,  5,  7,  8,  9,\n+   10, 11, 12, 13, 14, 15, 16,  5, 17, 15, 18, 19, 20, 21, 22, 23,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 24, 25, 26,  5, 27, 28,\n+    5, 29, 30, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 32,\n+    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 33,\n@@ -2871,47 +2916,33 @@\n-   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n-   32, 33, 34, 34, 35, 36, 37, 38, 39, 34, 34, 34, 40, 41, 42, 43,\n-   44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n-   60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69, 70, 71, 69, 72, 73,\n-   69, 69, 64, 74, 64, 64, 75, 76, 77, 78, 79, 80, 81, 82, 69, 83,\n-   84, 85, 86, 87, 88, 89, 69, 69, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 90, 34, 34, 34, 34,\n-   91, 34, 34, 34, 34, 34, 34, 34, 34, 92, 34, 34, 93, 94, 95, 96,\n-   97, 98, 99,100,101,102,103,104, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,105,\n-  106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,\n-  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,\n-  107,107, 34, 34,108,109,110,111, 34, 34,112,113,114,115,116,117,\n-  118,119,120,121,122,123,124,125,126,127,128,129, 34, 34,130,131,\n-  132,133,134,135,136,137,138,139,140,141,142,122,143,144,145,146,\n-  147,148,149,150,151,152,153,122,154,155,122,156,157,158,159,122,\n-  160,161,162,163,164,165,166,122,167,168,169,170,122,171,172,173,\n-   34, 34, 34, 34, 34, 34, 34,174,175, 34,176,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,177,\n-   34, 34, 34, 34, 34, 34, 34, 34,178,122,122,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122, 34, 34, 34, 34,179,122,122,122,\n-   34, 34, 34, 34,180,181,182,183,122,122,122,122,184,185,186,187,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,188,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34,189,190,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,191,\n-   34, 34,192, 34, 34,193,122,122,122,122,122,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,194,195,122,122,122,122,122,122,\n-  122,122,122,122,122,122,122,122,122,122,122,122,122,122,196,197,\n-   69,198,199,200,201,202,203,122,204,205,206,207,208,209,210,211,\n-   69, 69, 69, 69,212,213,122,122,122,122,122,122,122,122,214,122,\n-  215,216,217,122,122,218,122,122,122,219,122,122,122,122,122,220,\n-   34,221,222,122,122,122,122,122,223,224,225,122,226,227,122,122,\n-  228,229,230,231,232,122, 69,233, 69, 69, 69, 69, 69,234,235,236,\n-  237,238, 69, 69,239,240, 69,241,122,122,122,122,122,122,122,122,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,242, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,243, 34,\n-  244, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,245, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34,246, 34, 34, 34, 34,247,122,122,122,\n-   34, 34, 34, 34,248,122,122,122,122,122,122,122,122,122,122,122,\n-   34, 34, 34, 34, 34, 34,249, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-   34, 34, 34, 34, 34, 34, 34,250,122,122,122,122,122,122,122,122,\n-  251,122,252,253,122,122,122,122,122,122,122,122,122,122,122,122,\n-  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,254,\n-  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,255,\n+   16, 17, 18, 19, 20, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n+   31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 33, 41, 42, 43, 44, 45,\n+   46, 47, 48, 39, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 49, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   50, 17, 17, 17, 51, 17, 52, 53, 54, 55, 56, 57, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 58, 59, 59, 59, 59, 59, 59, 59, 59,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 17, 61, 62, 17, 63, 64, 65,\n+   66, 67, 68, 69, 70, 71, 17, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n+   81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n+   17, 17, 17, 97, 98, 99,100,100,100,100,100,100,100,100,100,101,\n+   17, 17, 17, 17,102, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17,103, 17, 17,104,100,100,100,100,100,100,100,100,100,\n+  100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,\n+  100,105,100,100,100,100,100,100, 17, 17,106,107,100,108,109,110,\n+   17, 17, 17, 17, 17, 17, 17,111, 17, 17, 17, 17,112,113,100,100,\n+  100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,114,\n+   17,115,116,100,100,100,100,100,100,100,100,100,117,100,100,100,\n+  100,100,100,100,100,100,100,100,100,100,100,100,118, 39,119,120,\n+  121,122,123,124,125,126,127,128, 39, 39,129,100,100,100,100,130,\n+  131,132,133,100,134,135,100,136,137,138,100,100,139,140,141,100,\n+  142,143,144,145, 39, 39,146,147,148, 39,149,150,100,100,100,100,\n+   17, 17, 17, 17, 17, 17,151, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17,152,153, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,154, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,155, 17, 17,156,100,\n+  100,100,100,100,100,100,100,100, 17, 17,157,100,100,100,100,100,\n+   17, 17, 17,158, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17,159,100,100,100,100,100,100,100,100,100,100,100,100,\n+  160,161,100,100,100,100,100,100,100,100,100,100,100,100,100,100,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,162,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,163,\n@@ -2954,1 +2985,1 @@\n-   36, 36, 36, 36, 82, 36, 36, 61, 65, 44, 44, 44, 43, 43, 43, 43,\n+   36, 36, 36, 36, 82, 36, 36, 61, 65, 44, 44, 57, 43, 43, 43, 43,\n@@ -3027,2 +3058,2 @@\n-   36, 36, 85, 43, 43, 85, 85, 86, 86, 85, 98, 36, 36, 36, 61, 44,\n-   97, 67, 67, 67, 67, 50, 43, 43, 43, 43, 67, 67, 67, 67, 21, 64,\n+   36, 36, 85, 43, 43, 85, 85, 86, 86, 85, 98, 36, 36, 36, 61,  2,\n+   97, 67, 67, 67, 67, 50, 43, 43, 43, 43, 67, 67, 67, 67, 21,  2,\n@@ -3033,1 +3064,1 @@\n-   16, 16, 16, 16,110, 44, 44, 44, 11, 11, 11, 11, 11, 47, 48, 11,\n+   16, 16, 16, 16, 34,110, 44, 44, 11, 11, 11, 11, 11, 47, 48, 11,\n@@ -3061,27 +3092,27 @@\n-    8, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 92, 44, 44, 44, 44,\n-   67, 67, 67, 67, 67, 92, 44, 44, 27, 27, 27, 27, 27, 27, 67, 67,\n-   67, 67, 67, 67, 67, 27, 27, 27, 67, 67, 67, 26, 67, 67, 67, 67,\n-   26, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,  8,  8,  8,  8,\n-   67, 67, 67, 67, 67, 67, 67, 26, 67, 67, 67, 67,  4,  4,  4,  4,\n-    4,  4,  4, 27, 27, 27, 27, 27, 27, 27, 67, 67, 67, 67, 67, 67,\n-    8,  8,129,147,  8,  8,  8,  8,  8,  8,  8,  4,  4,  4,  4,  4,\n-    8,129,148,148,148,148,148,148,148,148,148,148,147,  8,  8,  8,\n-    8,  8,  8,  8,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  4,  8,\n-    8,  8,144, 26,  8,  8,144, 67, 67, 67, 44, 67, 67, 67, 67, 67,\n-   67, 67, 67, 55, 67, 67, 67, 67, 32, 11, 32, 34, 34, 34, 34, 11,\n-   32, 32, 34, 16, 16, 16, 40, 11, 32, 32,140, 67, 67,138, 34,149,\n-   43, 32, 44, 44, 93,  2, 99,  2, 16, 16, 16,150, 44, 44,150, 44,\n-   36, 36, 36, 36, 44, 44, 44, 52, 64, 44, 44, 44, 44, 44, 44, 57,\n-   36, 36, 36, 61, 44, 44, 44, 44, 36, 36, 36, 61, 36, 36, 36, 61,\n-    2,121,121,  2,125,126,121,  2,  2,  2,  2,  6,  2,108,121,  2,\n-  121,  4,  4,  4,  4,  2,  2, 88,  2,  2,  2,  2,  2,120,  2,  2,\n-  108,151,  2,  2,  2,  2,  2,  2, 67,  2,152,148,148,148,153, 44,\n-   67, 67, 67, 67, 67, 55, 67, 67, 67, 67, 44, 44, 44, 44, 44, 44,\n-   67, 67, 67, 44, 44, 44, 44, 44,  1,  2,154,155,  4,  4,  4,  4,\n-    4, 67,  4,  4,  4,  4,156,157,158,105,105,105,105, 43, 43, 86,\n-  159, 40, 40, 67,105,160, 63, 67, 36, 36, 36, 61, 57,161,162, 69,\n-   36, 36, 36, 36, 36, 63, 40, 69, 44, 44, 62, 36, 36, 36, 36, 36,\n-   67, 27, 27, 67, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44, 44, 55,\n-   67, 67, 67, 67, 67, 67, 67, 92, 27, 27, 27, 27, 27, 67, 67, 67,\n-   67, 67, 67, 67, 27, 27, 27, 27,163, 27, 27, 27, 27, 27, 27, 27,\n-   36, 36, 83, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,164,  2,\n+    8, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 92, 44, 44,\n+   27, 27, 27, 27, 27, 27, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27,\n+   67, 67, 67, 26, 67, 67, 67, 67, 26, 67, 67, 67, 67, 67, 67, 67,\n+   67, 67, 67, 67,  8,  8,  8,  8, 67, 67, 67, 67, 67, 67, 67, 26,\n+   67, 67, 67, 67,  4,  4,  4,  4,  4,  4,  4, 27, 27, 27, 27, 27,\n+   27, 27, 67, 67, 67, 67, 67, 67,  8,  8,129,147,  8,  8,  8,  8,\n+    8,  8,  8,  4,  4,  4,  4,  4,  8,129,148,148,148,148,148,148,\n+  148,148,148,148,147,  8,  8,  8,  8,  8,  8,  8,  4,  4,  8,  8,\n+    8,  8,  8,  8,  8,  8,  4,  8,  8,  8,144, 26,  8,  8,144, 67,\n+   67, 67, 44, 67, 67, 67, 67, 67, 67, 67, 67, 55, 67, 67, 67, 67,\n+   32, 11, 32, 34, 34, 34, 34, 11, 32, 32, 34, 16, 16, 16, 40, 11,\n+   32, 32,140, 67, 67,138, 34,149, 43, 32, 44, 44, 93,  2, 99,  2,\n+   16, 16, 16,150, 44, 44,150, 44, 36, 36, 36, 36, 44, 44, 44, 52,\n+   64, 44, 44, 44, 44, 44, 44, 57, 36, 36, 36, 61, 44, 44, 44, 44,\n+   36, 36, 36, 61, 36, 36, 36, 61,  2,121,121,  2,125,126,121,  2,\n+    2,  2,  2,  6,  2,108,121,  2,121,  4,  4,  4,  4,  2,  2, 88,\n+    2,  2,  2,  2,  2,120,  2,  2,108,151,  2,  2,  2,  2,  2,  2,\n+   67,  2,152,148,148,148,153, 44, 67, 67, 67, 67, 67, 55, 67, 67,\n+   67, 67, 44, 44, 44, 44, 44, 44, 67, 67, 67, 44, 44, 44, 44, 44,\n+    1,  2,154,155,  4,  4,  4,  4,  4, 67,  4,  4,  4,  4,156,157,\n+  158,105,105,105,105, 43, 43, 86,159, 40, 40, 67,105,160, 63, 67,\n+   36, 36, 36, 61, 57,161,162, 69, 36, 36, 36, 36, 36, 63, 40, 69,\n+   44, 44, 62, 36, 36, 36, 36, 36, 67, 27, 27, 67, 67, 67, 67, 67,\n+   67, 67, 67, 44, 44, 44, 44, 55, 67, 67, 67, 67, 67, 67, 67, 92,\n+   27, 27, 27, 27, 27, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27, 27,\n+  163, 27, 27, 27, 27, 27, 27, 27, 36, 36, 83, 36, 36, 36, 36, 36,\n+   67, 67, 67, 92, 44, 44, 44, 44, 36, 36, 36, 36, 36, 36,164,  2,\n@@ -3095,1 +3126,1 @@\n-   32, 32, 11, 11, 34,110, 44, 44, 32,150,150, 32, 32, 44, 44, 44,\n+   32, 32, 11, 11, 34, 34, 32, 44, 32,150,150, 32, 32, 32, 47, 44,\n@@ -3156,2 +3187,4 @@\n-   27, 27, 27, 27, 27, 27, 27,100, 36, 36, 36, 36, 36, 57,184, 44,\n-   36, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 57, 43,\n+    7,  7,  7,  7,  7, 36, 36, 69, 11, 11, 11, 44, 57, 43, 43,159,\n+   16, 16, 16, 44, 44, 44, 44,  8, 27, 27, 27, 27, 27, 27, 27,100,\n+   36, 36, 36, 36, 36, 57,184, 44, 36, 44, 44, 44, 44, 44, 44, 44,\n+   44, 36, 61, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43,\n@@ -3175,8 +3208,12 @@\n-   43, 43, 80, 44, 44, 44, 44, 44, 36, 36, 94, 86, 43, 43, 43, 43,\n-   86, 43, 85, 71, 36, 63,  2,  2,  7,  7,  7,  7,  7,  2, 93, 71,\n-   86, 87, 43, 43, 85, 85, 86, 87, 85, 43, 36, 72, 44, 44, 44, 44,\n-   36, 36, 36, 36, 36, 36, 36, 94, 86, 43, 43, 44, 86, 86, 43, 87,\n-   60,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 36, 36, 43, 44,\n-   86, 87, 43, 43, 43, 85, 87, 87, 60,  2, 61, 44, 44, 44, 44, 44,\n-    2,  2,  2,  2,  2,  2, 64, 44, 36, 36, 36, 36, 36, 70, 87, 86,\n-   43, 43, 43, 87, 63, 44, 44, 44, 86, 43, 43, 87, 43, 43, 44, 44,\n+   43, 43, 80, 44, 44, 44, 44, 44, 36, 36, 36, 36, 36, 62, 44, 61,\n+   36, 36, 36, 62, 86, 87, 43, 43, 80, 90, 89, 89, 86, 90, 86, 85,\n+   71, 71,  2, 93, 64, 44, 44, 44, 57, 80, 44, 44, 44, 44, 44, 44,\n+   36, 36, 94, 86, 43, 43, 43, 43, 86, 43, 85, 71, 36, 63,  2,  2,\n+    7,  7,  7,  7,  7,  2, 93, 71, 86, 87, 43, 43, 85, 85, 86, 87,\n+   85, 43, 36, 72, 44, 44, 44, 44, 36, 36, 36, 36, 36, 36, 36, 94,\n+   86, 43, 43, 44, 86, 86, 43, 87, 60,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2, 36, 36, 43, 44, 86, 87, 43, 43, 43, 85, 87, 87,\n+   60,  2, 61, 44, 44, 44, 44, 44,  2,  2,  2,  2,  2,  2, 64, 44,\n+   36, 36, 36, 36, 36, 70, 87, 86, 43, 43, 43, 87, 63, 44, 44, 44,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 44, 44, 44, 44, 44, 44,\n+   36, 36, 36, 36, 36, 61, 57, 87, 86, 43, 43, 87, 43, 43, 44, 44,\n@@ -3192,8 +3229,9 @@\n-   43, 43, 43, 80, 43, 43, 43, 87, 63,  2,  2, 44, 44, 44, 44, 44,\n-    2, 36, 36, 36, 36, 36, 36, 36, 44, 43, 43, 43, 43, 43, 43, 43,\n-   43, 43, 43, 43, 89, 43, 43, 43, 85, 43, 87, 80, 44, 44, 44, 44,\n-   36, 36, 36, 61, 36, 62, 36, 36, 70, 43, 43, 80, 44, 80, 43, 57,\n-   43, 43, 43, 70, 44, 44, 44, 44, 36, 36, 36, 62, 61, 36, 36, 36,\n-   36, 36, 36, 36, 36, 86, 86, 90, 43, 89, 87, 87, 61, 44, 44, 44,\n-   36, 70, 85,107, 64, 44, 44, 44, 43, 94, 36, 36, 36, 36, 36, 36,\n-   36, 36, 86, 43, 43, 80, 44, 86, 85, 60,  2,  2,  2,  2,  2,  2,\n+   63, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 80, 43, 43, 43, 87,\n+   63,  2,  2, 44, 44, 44, 44, 44,  2, 36, 36, 36, 36, 36, 36, 36,\n+   44, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 89, 43, 43, 43,\n+   85, 43, 87, 80, 44, 44, 44, 44, 36, 36, 36, 61, 36, 62, 36, 36,\n+   70, 43, 43, 80, 44, 80, 43, 57, 43, 43, 43, 70, 44, 44, 44, 44,\n+   36, 36, 36, 62, 61, 36, 36, 36, 36, 36, 36, 36, 36, 86, 86, 90,\n+   43, 89, 87, 87, 61, 44, 44, 44, 36, 70, 85,107, 64, 44, 44, 44,\n+   43, 94, 36, 36, 36, 36, 36, 36, 36, 36, 86, 43, 43, 80, 44, 86,\n+   85, 60,  2,  2,  2,  2,  2,  2,  7,  7,  7,  7,  7, 80, 44, 44,\n@@ -3204,1 +3242,2 @@\n-   43, 43, 43, 44, 44, 44, 44, 44, 43, 43, 60, 44, 44, 44, 44, 44,\n+   43, 43, 43, 44, 44, 44, 44, 44, 36, 36, 36, 36, 36, 36, 36, 43,\n+   43, 43, 43, 43, 43, 86, 87, 43, 43, 43, 60, 44, 44, 44, 44, 44,\n@@ -3207,1 +3246,2 @@\n-   36, 36, 36, 36, 44, 44, 62, 36, 27, 27, 27, 30,  2, 64, 44, 44,\n+   36, 36, 36, 36, 44, 44, 62, 36, 40, 69, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 83,164,  2, 27, 27, 27, 30,  2, 64, 44, 44,\n@@ -3211,24 +3251,24 @@\n-   86, 44, 44, 44, 44, 44, 44, 44, 40, 40, 52, 40, 40, 40, 52, 81,\n-   36, 61, 44, 44, 44, 44, 44, 44, 44, 61, 44, 44, 44, 44, 44, 44,\n-   36, 61, 62, 44, 44, 44, 44, 44, 44, 44, 36, 36, 44, 44, 44, 44,\n-   36, 36, 36, 36, 36, 44, 50, 60, 65, 65, 44, 44, 44, 44, 44, 44,\n-   43, 43, 43, 43, 43, 43, 43, 44, 43, 43, 43, 80, 44, 44, 44, 44,\n-   67, 67, 67, 92, 55, 67, 67, 67, 67, 67,186, 87, 43, 67,186, 86,\n-   86,187, 65, 65, 65, 84, 43, 43, 43, 76, 50, 43, 43, 43, 67, 67,\n-   67, 67, 67, 67, 67, 43, 43, 67, 67, 43, 76, 44, 44, 44, 44, 44,\n-   27, 27, 44, 44, 44, 44, 44, 44, 11, 11, 11, 11, 11, 16, 16, 16,\n-   16, 16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 16,\n-   16, 16,110, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16, 16, 16, 16,\n-   16, 16, 16, 16, 16, 16, 47, 11, 44, 47, 48, 47, 48, 11, 47, 11,\n-   11, 11, 11, 16, 16,150,150, 16, 16, 16,150, 16, 16, 16, 16, 16,\n-   16, 16, 11, 48, 11, 47, 48, 11, 11, 11, 47, 11, 11, 11, 47, 16,\n-   16, 16, 16, 16, 11, 48, 11, 47, 11, 11, 47, 47, 44, 11, 11, 11,\n-   47, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 11, 11,\n-   11, 11, 11, 16, 16, 16, 16, 16, 16, 16, 16, 44, 11, 11, 11, 11,\n-   31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33, 16, 16,\n-   16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 31, 16, 16,\n-   16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 31, 16, 16, 16, 16, 16,\n-   16, 16, 16, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 11,\n-   11, 11, 11, 11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16,\n-   11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16, 32, 44,  7,\n-    7,  7,  7,  7,  7,  7,  7,  7, 43, 43, 43, 76, 67, 50, 43, 43,\n+   86, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 62,\n+   40, 40, 52, 40, 40, 40, 52, 81, 36, 61, 44, 44, 44, 44, 44, 44,\n+   44, 61, 44, 44, 44, 44, 44, 44, 36, 61, 62, 44, 44, 44, 44, 44,\n+   44, 44, 36, 36, 44, 44, 44, 44, 36, 36, 36, 36, 36, 44, 50, 60,\n+   65, 65, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 43, 44,\n+   43, 43, 43, 80, 44, 44, 44, 44, 67, 67, 67, 92, 55, 67, 67, 67,\n+   67, 67,186, 87, 43, 67,186, 86, 86,187, 65, 65, 65, 84, 43, 43,\n+   43, 76, 50, 43, 43, 43, 67, 67, 67, 67, 67, 67, 67, 43, 43, 67,\n+   67, 43, 76, 44, 44, 44, 44, 44, 27, 27, 44, 44, 44, 44, 44, 44,\n+   11, 11, 11, 11, 11, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11, 16, 16, 16,110, 16, 16, 16, 16, 16,\n+   11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 47, 11,\n+   44, 47, 48, 47, 48, 11, 47, 11, 11, 11, 11, 16, 16,150,150, 16,\n+   16, 16,150, 16, 16, 16, 16, 16, 16, 16, 11, 48, 11, 47, 48, 11,\n+   11, 11, 47, 11, 11, 11, 47, 16, 16, 16, 16, 16, 11, 48, 11, 47,\n+   11, 11, 47, 47, 44, 11, 11, 11, 47, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 16, 16, 16, 16, 16,\n+   16, 16, 16, 44, 11, 11, 11, 11, 31, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11,\n+   11, 11, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33,\n+   16, 16, 16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 31,\n+   16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 31, 16, 16, 16,\n+   16, 33, 16, 16, 16, 32, 44,  7, 43, 43, 43, 76, 67, 50, 43, 43,\n@@ -3244,16 +3284,17 @@\n-   36, 36, 36, 61, 36, 36, 62, 61, 36, 36, 61,179, 27, 27, 27, 27,\n-   16, 16, 43, 43, 43, 74, 44, 44, 27, 27, 27, 27, 27, 27,163, 27,\n-  188, 27,100, 44, 44, 44, 44, 44, 27, 27, 27, 27, 27, 27, 27,163,\n-   27, 27, 27, 27, 27, 27, 27, 44, 36, 36, 62, 36, 36, 36, 36, 36,\n-   62, 61, 61, 62, 62, 36, 36, 36, 36, 61, 36, 36, 62, 62, 44, 44,\n-   44, 61, 44, 62, 62, 62, 62, 36, 62, 61, 61, 62, 62, 62, 62, 62,\n-   62, 61, 61, 62, 36, 61, 36, 36, 36, 61, 36, 36, 62, 36, 61, 61,\n-   36, 36, 36, 36, 36, 62, 36, 36, 62, 36, 62, 36, 36, 62, 36, 36,\n-    8, 44, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 44, 44,\n-   55, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27, 27, 27, 27, 91, 67,\n-   67, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44, 67, 67, 67, 67, 67,\n-   67, 92, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 92, 44, 44, 44,\n-   67, 44, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 25, 41, 41,\n-   67, 67, 67, 67, 44, 44, 67, 67, 67, 67, 67, 92, 44, 55, 67, 67,\n-   67, 67, 67, 67, 44, 44, 44, 44, 67, 67, 67, 67, 67, 67, 67, 55,\n-   67, 67, 67, 44, 44, 44, 44, 67, 67, 92, 67, 67, 67, 67, 67, 67,\n+  188,  7,  7,  7,  7,189, 44, 93, 36, 36, 36, 61, 36, 36, 62, 61,\n+   36, 36, 61,179, 27, 27, 27, 27, 16, 16, 43, 43, 43, 74, 44, 44,\n+   27, 27, 27, 27, 27, 27,163, 27,190, 27,100, 44, 44, 44, 44, 44,\n+   27, 27, 27, 27, 27, 27, 27,163, 27, 27, 27, 27, 27, 27, 27, 44,\n+   36, 36, 62, 36, 36, 36, 36, 36, 62, 61, 61, 62, 62, 36, 36, 36,\n+   36, 61, 36, 36, 62, 62, 44, 44, 44, 61, 44, 62, 62, 62, 62, 36,\n+   62, 61, 61, 62, 62, 62, 62, 62, 62, 61, 61, 62, 36, 61, 36, 36,\n+   36, 61, 36, 36, 62, 36, 61, 61, 36, 36, 36, 36, 36, 62, 36, 36,\n+   62, 36, 62, 36, 36, 62, 36, 36,  8, 44, 44, 44, 44, 44, 44, 44,\n+   67, 67, 67, 67, 67, 67, 44, 44, 55, 67, 67, 67, 67, 67, 67, 67,\n+   27, 27, 27, 27, 27, 27, 91, 67, 67, 67, 67, 67, 67, 67, 67, 44,\n+   44, 44, 44, 67, 67, 67, 67, 67, 67, 92, 44, 44, 44, 44, 44, 44,\n+   67, 67, 67, 67, 92, 44, 44, 44, 67, 44, 44, 44, 44, 44, 44, 44,\n+   67, 67, 67, 67, 67, 25, 41, 41, 67, 67, 67, 67, 44, 44, 67, 67,\n+   67, 67, 67, 92, 44, 55, 67, 67, 67, 67, 67, 67, 44, 44, 44, 44,\n+   67, 67, 67, 67, 67, 44, 44, 55, 67, 67, 67, 92, 44, 44, 44, 67,\n+   67, 67, 67, 67, 67, 67, 92, 55, 67, 92, 67, 67, 67, 67, 67, 67,\n@@ -3285,2 +3326,2 @@\n-   23, 15,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0, 10, 11, 12,\n-   13,  0, 14,  0,  0,  0,  0,  0, 15,  0, 16,  0,  0,  0,  0,  0,\n+    7, 13, 13,  2, 23, 15,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,\n+    0, 10, 11, 12, 13,  0, 14,  0,  0,  0,  0,  0, 15,  0, 16,  0,\n@@ -3290,1 +3331,1 @@\n-    0,  0,  0,  0,  0, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 18, 19,  0,  0,  0,  0,\n@@ -3292,3 +3333,0 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,\n-    0, 21, 22, 23,  0,  0,  0, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n-   33, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3296,1 +3334,2 @@\n-    0,  0,  0,  0,  0,  0,  0, 35,  0, 36,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 20,  0, 21, 22, 23,  0,  0,  0, 24, 25, 26, 27, 28,\n+   29, 30, 31, 32, 33, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3298,0 +3337,1 @@\n+    0,  0,  0,  0,  0,  0, 35,  0,  0,  0,  0, 36,  0, 37,  0,  0,\n@@ -3299,77 +3339,80 @@\n-   37,  0,  0,  0,  0,  0,  0,  0,  0,  0, 38, 39,  0,  0,  0,  0,\n-    0,  0, 40, 41, 42,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  3,  0,  0,  0,  4,  5,\n-    6,  7,  0,  8,  9, 10,  0, 11, 12, 13, 14, 15, 16, 17, 16, 18,\n-   16, 19, 16, 19, 16, 19,  0, 19, 16, 20, 16, 19, 21, 19,  0, 22,\n-   23, 24, 25, 26, 27, 28, 29, 30, 31,  0, 32,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0,  0, 34,  0,  0, 35,\n-    0,  0, 36,  0, 37,  0,  0,  0, 38, 39, 40, 41, 42, 43, 44, 45,\n-   46,  0,  0, 47,  0,  0,  0, 48,  0,  0,  0, 49,  0,  0,  0,  0,\n-    0,  0,  0, 50,  0, 51,  0, 52, 53,  0, 54,  0,  0,  0,  0,  0,\n-    0, 55, 56, 57,  0,  0,  0,  0, 58,  0,  0, 59, 60, 61, 62, 63,\n-    0,  0, 64, 65,  0,  0,  0, 66,  0,  0,  0,  0, 67,  0,  0,  0,\n-   68,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 69,\n-    0,  0,  0, 70,  0, 71,  0,  0, 72,  0,  0, 73,  0,  0,  0,  0,\n-    0,  0,  0,  0, 74,  0,  0,  0,  0,  0, 75, 76,  0, 77, 78,  0,\n-    0, 79, 80,  0, 81, 62,  0, 82, 83,  0,  0, 84, 85, 86,  0,  0,\n-    0, 87,  0, 88,  0,  0, 51, 89, 51,  0, 90,  0, 91,  0,  0,  0,\n-   80,  0,  0,  0, 92, 93,  0, 94, 95, 96, 97,  0,  0,  0,  0,  0,\n-   51,  0,  0,  0,  0, 98, 99,  0,  0,  0,  0,  0,  0,100,  0,  0,\n-    0,  0,  0,101,102,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,103,\n-    0,  0,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,105,106,  0,\n-    0,107,  0,  0,  0,  0,  0,  0,108,  0,109,  0,102,  0,  0,  0,\n-    0,  0,110,111,  0,  0,  0,  0,  0,  0,  0,112,  0,  0,  0,  0,\n-    0,  0,  0,113,  0,114,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n-    5,  6,  7,  0,  8,  0,  0,  0,  0,  9, 10, 11, 12,  0,  0,  0,\n-    0, 13,  0,  0, 14, 15,  0, 16,  0, 17, 18,  0,  0, 19,  0, 20,\n-   21,  0,  0,  0,  0,  0, 22, 23,  0, 24, 25,  0,  0, 26,  0,  0,\n-    0, 27,  0,  0, 28, 29, 30, 31,  0,  0,  0, 32, 33, 34,  0,  0,\n-   33,  0,  0, 35, 33,  0,  0,  0, 33, 36,  0,  0,  0,  0,  0, 37,\n-   38,  0,  0,  0,  0,  0,  0, 39, 40,  0,  0,  0,  0,  0,  0, 41,\n-   42,  0,  0,  0,  0, 43,  0, 44,  0,  0,  0, 45, 46,  0,  0,  0,\n-   47,  0,  0,  0,  0,  0,  0, 48, 49,  0,  0,  0,  0, 50,  0,  0,\n-    0, 51,  0, 52,  0, 53,  0,  0,  0,  0, 54,  0,  0,  0,  0, 55,\n-    0, 56,  0,  0,  0,  0, 57, 58,  0,  0,  0, 59, 60,  0,  0,  0,\n-    0,  0,  0, 61, 52,  0, 62, 63,  0,  0, 64,  0,  0,  0, 65, 66,\n-    0,  0,  0, 67,  0, 68, 69, 70, 71, 72,  1, 73,  0, 74, 75, 76,\n-    0,  0, 77, 78,  0,  0,  0, 79,  0,  0,  1,  1,  0,  0, 80,  0,\n-    0, 81,  0,  0,  0,  0, 77, 82,  0, 83,  0,  0,  0,  0,  0, 78,\n-   84,  0, 85,  0, 52,  0,  1, 78,  0,  0, 86,  0,  0, 87,  0,  0,\n-    0,  0,  0, 88, 57,  0,  0,  0,  0,  0,  0, 89, 90,  0,  0, 84,\n-    0,  0, 33,  0,  0, 91,  0,  0,  0,  0, 92,  0,  0,  0,  0, 49,\n-    0,  0, 93,  0,  0,  0,  0, 94, 95,  0,  0, 96,  0,  0, 97,  0,\n-    0,  0, 98,  0,  0,  0, 99,  0,  0,  0,  0,100,101, 93,  0,  0,\n-  102,  0,  0,  0, 84,  0,  0,103,  0,  0,  0,104,105,  0,  0,106,\n-  107,  0,  0,  0,  0,  0,  0,108,  0,  0,109,  0,  0,  0,  0,110,\n-   33,  0,111,112,113, 35,  0,  0,114,  0,  0,  0,115,  0,  0,  0,\n-    0,  0,  0,116,  0,  0,117,  0,  0,  0,  0,118, 88,  0,  0,  0,\n-    0,  0, 57,  0,  0,  0,  0, 52,119,  0,  0,  0,  0,120,  0,  0,\n-  121,  0,  0,  0,  0,119,  0,  0,122,  0,  0,  0,  0,  0,  0,123,\n-    0,  0,  0,124,  0,  0,  0,125,  0,126,  0,  0,  0,  0,127,128,\n-  129,  0,130,  0,131,  0,  0,  0,132,133,134,  0, 77,  0,  0,  0,\n-    0,  0, 35,  0,  0,  0,135,  0,  0,  0,136,  0,  0,137,  0,  0,\n-  138,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  3,  4,\n-    5,  6,  7,  4,  4,  8,  9, 10,  1, 11, 12, 13, 14, 15, 16, 17,\n-   18,  1,  1,  1, 19,  1,  0,  0, 20, 21, 22,  1, 23,  4, 21, 24,\n-   25, 26, 27, 28, 29, 30,  0,  0,  1,  1, 31,  0,  0,  0, 32, 33,\n-   34, 35,  1, 36, 37,  0,  0,  0,  0, 38,  1, 39, 14, 39, 40, 41,\n-   42,  0,  0,  0, 43, 36, 44, 45, 21, 45, 46,  0,  0,  0, 19,  1,\n-   21,  0,  0, 47,  0, 38, 48,  1,  1, 49, 49, 50,  0,  0, 51,  0,\n-    0,  0, 52,  1,  0,  0, 38, 14,  4,  1,  1,  1, 53, 21, 43, 52,\n-   54, 21, 35,  1,  0,  0,  0, 55,  0,  0,  0, 56, 57, 58,  0,  0,\n-    0,  0,  0, 59,  0, 60,  0,  0,  0,  0, 61, 62,  0,  0, 63,  0,\n-    0,  0, 64,  0,  0,  0, 65,  0,  0,  0, 66,  0,  0,  0, 67,  0,\n-    0,  0, 68,  0,  0, 69, 70,  0, 71, 72, 73, 74, 75, 76,  0,  0,\n-    0, 77,  0,  0,  0, 78, 79,  0,  0,  0,  0, 47,  0,  0,  0, 49,\n-    0, 80,  0,  0,  0, 62,  0,  0, 63,  0,  0, 81,  0,  0, 82,  0,\n-    0,  0, 83,  0,  0, 19, 84,  0, 62,  0,  0,  0,  0, 49,  1, 85,\n-    1, 52, 15, 86, 36, 10, 21, 87,  0, 55,  0,  0,  0,  0, 19, 10,\n-    1,  0,  0,  0,  0,  0, 88,  0,  0, 89,  0,  0, 88,  0,  0,  0,\n-    0, 78,  0,  0, 87,  9, 12,  4, 90,  8, 91, 47,  0, 58, 50,  0,\n-   21,  1, 21, 92, 93,  1,  1,  1,  1, 94, 95, 96, 97,  1, 98, 58,\n-   81, 99,100,  4, 58,  0,  0,  0,  0,  0,  0, 19, 50,  0,  0,  0,\n-    0,  0,  0, 61,  0,  0,101,102,  0,  0,103,  0,  0,  1,  1, 50,\n-    0,  0,  0, 38,  0, 63,  0,  0,  0,  0,  0, 62,  0,  0,104, 68,\n-   61,  0,  0,  0, 78,  0,  0,  0,105,106, 58, 38, 81,  0,  0,  0,\n-    0,  0,  0,107,  1, 14,  4, 12, 84,  0,  0,  0,  0, 38, 87,  0,\n-    0,  0,  0,108,  0,  0,109, 61,  0,110,  0,  0,  0,  1,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 38,  0,  0,  0,  0,  0,  0,  0,  0,  0, 39, 40,\n+    0,  0,  0,  0,  0,  0, 41, 42, 43,  0, 44,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  3,  0,\n+    0,  0,  4,  5,  6,  7,  0,  8,  9, 10,  0, 11, 12, 13, 14, 15,\n+   16, 17, 16, 18, 16, 19, 16, 19, 16, 19,  0, 19, 16, 20, 16, 19,\n+   21, 19,  0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  0, 32,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0,  0,\n+   34,  0,  0, 35,  0,  0, 36,  0, 37,  0,  0,  0, 38, 39, 40, 41,\n+   42, 43, 44, 45, 46,  0,  0, 47,  0,  0,  0, 48,  0,  0,  0, 49,\n+    0,  0,  0,  0,  0,  0,  0, 50,  0, 51,  0, 52, 53,  0, 54,  0,\n+    0,  0,  0,  0,  0, 55, 56, 57,  0,  0,  0,  0, 58,  0,  0, 59,\n+   60, 61, 62, 63,  0,  0, 64, 65,  0,  0,  0, 66,  0,  0,  0,  0,\n+   67,  0,  0,  0, 68,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 69,  0,  0,  0, 70,  0, 71,  0,  0, 72,  0,  0, 73,\n+    0,  0,  0,  0,  0,  0,  0,  0, 74, 75,  0,  0,  0,  0, 76, 77,\n+    0, 78, 79,  0,  0, 80, 81,  0, 82, 62,  0, 83, 84,  0,  0, 85,\n+   86, 87,  0, 88,  0, 89,  0, 90,  0,  0, 51, 91, 51,  0, 92,  0,\n+   93,  0,  0,  0, 81,  0,  0,  0, 94, 95,  0, 96, 97, 98, 99,  0,\n+    0,  0,  0,  0, 51,  0,  0,  0,  0,100,101,  0,  0,  0,  0,  0,\n+    0,102,  0,  0,  0,  0,  0,  0,103,  0,  0,  0,  0,  0,  0,104,\n+  105,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,106,  0,  0,107,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,108,109,  0,  0,110,  0,  0,\n+    0,  0,  0,  0,111,  0,112,  0,105,  0,  0,  0,  0,  0,113,114,\n+    0,  0,  0,  0,  0,  0,  0,115,  0,  0,  0,116,  0,  0,  0,117,\n+    0,118,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  0,\n+    8,  0,  0,  0,  0,  9, 10, 11, 12,  0,  0,  0,  0, 13,  0,  0,\n+   14, 15,  0, 16,  0, 17, 18,  0,  0, 19,  0, 20, 21,  0,  0,  0,\n+    0,  0, 22, 23,  0, 24, 25,  0,  0, 26,  0,  0,  0, 27,  0,  0,\n+   28, 29, 30, 31,  0,  0,  0, 32, 33, 34,  0,  0, 33,  0,  0, 35,\n+   33,  0,  0,  0, 33, 36,  0,  0,  0,  0,  0, 37, 38,  0,  0,  0,\n+    0,  0,  0, 39, 40,  0,  0,  0,  0,  0,  0, 41, 42,  0,  0,  0,\n+    0, 43,  0, 44,  0,  0,  0, 45, 46,  0,  0,  0, 47,  0,  0,  0,\n+    0,  0,  0, 48, 49,  0,  0,  0,  0, 50,  0,  0,  0, 51,  0, 52,\n+    0, 53,  0,  0,  0,  0, 54,  0,  0,  0,  0, 55,  0, 56,  0,  0,\n+    0,  0, 57, 58,  0,  0,  0, 59, 60,  0,  0,  0,  0,  0,  0, 61,\n+   52,  0, 62, 63,  0,  0, 64,  0,  0,  0, 65, 66,  0,  0,  0, 67,\n+    0, 68, 69, 70, 71, 72,  1, 73,  0, 74, 75, 76,  0,  0, 77, 78,\n+    0,  0,  0, 79,  0,  0,  1,  1,  0,  0, 80,  0,  0, 81,  0,  0,\n+    0,  0, 77, 82,  0, 83,  0,  0,  0,  0,  0, 78, 84,  0, 85,  0,\n+   52,  0,  1, 78,  0,  0, 86,  0,  0, 87,  0,  0,  0,  0,  0, 88,\n+   57,  0,  0,  0,  0,  0,  0, 89, 90,  0,  0, 84,  0,  0, 33,  0,\n+    0, 91,  0,  0,  0,  0, 92,  0,  0,  0,  0, 49,  0,  0, 93,  0,\n+    0,  0,  0, 94, 95,  0,  0, 96,  0,  0, 97,  0,  0,  0, 98,  0,\n+    0,  0, 99,  0,  0,  0,100,  0,  0,  0,  0,101,102, 93,  0,  0,\n+  103,  0,  0,  0, 84,  0,  0,104,  0,  0,  0,105,106,  0,  0,107,\n+  108,  0,  0,  0,  0,  0,  0,109,  0,  0,110,  0,  0,  0,  0,111,\n+   33,  0,112,113,114, 57,  0,  0,115, 35,  0,  0,116,  0,  0,  0,\n+  117,  0,  0,  0,  0,  0,  0,118,  0,  0,119,  0,  0,  0,  0,120,\n+   88,  0,  0,  0,  0,  0, 57,  0,  0,  0,  0, 52,121,  0,  0,  0,\n+    0,122,  0,  0,123,  0,  0,  0,  0,121,  0,  0,124,  0,  0,  0,\n+    0,  0, 79,  0,  0,  0,  0,125,  0,  0,  0,126,  0,  0,  0,127,\n+    0,128,  0,  0,  0,  0,129,130,131,  0,132,  0,133,  0,  0,  0,\n+  134,135,136,  0, 77,  0,  0,  0,  0,  0, 35,  0,  0,  0,137,  0,\n+    0,  0,138,  0,  0,  0,139,  0,  0,140,  0,  0,141,  0,  0,  0,\n+    0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  3,  4,  5,  6,  7,  4,\n+    4,  8,  9, 10,  1, 11, 12, 13, 14, 15, 16, 17, 18,  1,  1,  1,\n+   19,  1,  0,  0, 20, 21, 22,  1, 23,  4, 21, 24, 25, 26, 27, 28,\n+   29, 30,  0,  0,  1,  1, 31,  0,  0,  0, 32, 33, 34, 35,  1, 36,\n+   37,  0,  0,  0,  0, 38,  1, 39, 14, 39, 40, 41, 42,  0,  0,  0,\n+   43, 36, 44, 45, 21, 45, 46,  0,  0,  0, 19,  1, 21,  0,  0, 47,\n+    0, 38, 48,  1,  1, 49, 49, 50,  0,  0, 51,  0,  0, 19, 52,  1,\n+    0,  0, 38, 14,  4,  1,  1,  1, 53, 21, 43, 52, 54, 21, 35,  1,\n+    0,  0,  0, 55,  0,  0,  0, 56, 57, 58,  0,  0,  0,  0,  0, 59,\n+    0, 60,  0,  0,  0,  0, 61, 62,  0,  0, 63,  0,  0,  0, 64,  0,\n+    0,  0, 65,  0,  0,  0, 66,  0,  0,  0, 67,  0,  0,  0, 68,  0,\n+    0, 69, 70,  0, 71, 72, 73, 74, 75, 76,  0,  0,  0, 77,  0,  0,\n+    0, 78, 79,  0,  0,  0,  0, 47,  0,  0,  0, 49,  0, 80,  0,  0,\n+    0, 62,  0,  0, 63,  0,  0, 81,  0,  0, 82,  0,  0,  0, 83,  0,\n+    0, 19, 84,  0, 62,  0,  0,  0,  0, 49,  1, 85,  1, 52, 15, 86,\n+   36, 10, 21, 87,  0, 55,  0,  0,  0,  0, 19, 10,  1,  0,  0,  0,\n+    0,  0, 88,  0,  0, 89,  0,  0, 88,  0,  0,  0,  0, 78,  0,  0,\n+   87,  9, 12,  4, 90,  8, 91, 47,  0, 58, 50,  0, 21,  1, 21, 92,\n+   93,  1,  1,  1,  1, 94, 95, 96, 97,  1, 98, 58, 81, 99,100,  4,\n+   58,  0,  0,  0,  0,  0,  0, 19, 50,  0,  0,  0,  0,  0,  0, 61,\n+    0,  0,101,102,  0,  0,103,  0,  0,  1,  1, 50,  0,  0,  0, 38,\n+    0, 63,  0,  0,  0,  0,  0, 62,  0,  0,104, 68, 61,  0,  0,  0,\n+   78,  0,  0,  0,105,106, 58, 38, 81,  0,  0,  0,  0,  0,  0,107,\n+    1, 14,  4, 12, 84,  0,  0,  0,  0, 38, 87,  0,  0,  0,  0,108,\n+    0,  0,109, 61,  0,110,  0,  0,  0,  1,  0,  0,  0,  0, 49, 50,\n@@ -3379,40 +3422,40 @@\n-    0, 38,  1, 58,  1, 58,  0,  0, 63, 89,  0,  0,115,  0,  0,  0,\n-   55,  0,  0,  0,  0,115,  0,  0,  0,  0, 61,  0,  0,  0,  0, 79,\n-    0, 61,  0,  0,  0,  0, 56,  0, 89, 80,  0,  0, 79,  0,  0,  0,\n-    8, 91,  0,  0,  1, 87,  0,  0,116,  0,  0,  0,  0,  0,  0,117,\n-    0,118,119,120,121,  0,104,  4,122, 49, 23,  0,  0,  0, 38, 50,\n-   38, 58,  0,  0,  1, 87,  1,  1,  1,  1, 39,  1, 48,105, 87,  0,\n-    0,  0,  0,  1,  0,  0,  0,123,  4,122,  0,  0,  0,  1,124,  0,\n-    0,  0,  0,  0,230,230,230,230,230,232,220,220,220,220,232,216,\n-  220,220,220,220,220,202,202,220,220,220,220,202,202,220,220,220,\n-    1,  1,  1,  1,  1,220,220,220,220,230,230,230,230,240,230,220,\n-  220,220,230,230,230,220,220,  0,230,230,230,220,220,220,220,230,\n-  232,220,220,230,233,234,234,233,234,234,233,230,  0,  0,  0,230,\n-    0,220,230,230,230,230,220,230,230,230,222,220,230,230,220,220,\n-  230,222,228,230, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20,\n-   21, 22,  0, 23,  0, 24, 25,  0,230,220,  0, 18, 30, 31, 32,  0,\n-    0,  0,  0, 27, 28, 29, 30, 31, 32, 33, 34,230,230,220,220,230,\n-  220,230,230,220, 35,  0,  0,  0,  0,  0,230,230,230,  0,  0,230,\n-  230,  0,220,230,230,220,  0,  0,  0, 36,  0,  0,230,220,230,230,\n-  220,220,230,220,220,230,220,230,220,230,230,  0,  0,220,  0,  0,\n-  230,230,  0,230,  0,230,230,230,230,230,  0,  0,  0,220,220,220,\n-  230,220,220,220,230,230,  0,220, 27, 28, 29,230,  7,  0,  0,  0,\n-    0,  9,  0,  0,  0,230,220,230,230,  0,  0,  0,  0,  0,230,  0,\n-    0, 84, 91,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,\n-  103,103,  9,  0,107,107,107,107,118,118,  9,  0,122,122,122,122,\n-  220,220,  0,  0,  0,220,  0,220,  0,216,  0,  0,  0,129,130,  0,\n-  132,  0,  0,  0,  0,  0,130,130,130,130,  0,  0,130,  0,230,230,\n-    9,  0,230,230,  0,  0,220,  0,  0,  0,  0,  7,  0,  9,  9,  0,\n-    9,  9,  0,  0,  0,230,  0,  0,  0,228,  0,  0,  0,222,230,220,\n-  220,  0,  0,  0,230,  0,  0,220,230,220,  0,220,230,230,230,  0,\n-    0,  0,  9,  9,  0,  0,  7,  0,230,  0,  1,  1,  1,  0,  0,  0,\n-  230,234,214,220,202,230,230,230,230,230,232,228,228,220,218,230,\n-  233,220,230,220,230,230,  1,  1,  1,  1,  1,230,  0,  1,  1,230,\n-  220,230,  1,  1,  0,  0,218,228,232,222,224,224,  0,  8,  8,  0,\n-    0,  0,  0,220,230,  0,230,230,220,  0,  0,230,  0,  0, 26,  0,\n-    0,220,  0,230,230,  1,220,  0,  0,230,220,  0,  0,  0,220,220,\n-    0,  0,230,220,  0,  9,  7,  0,  0,  7,  9,  0,  0,  0,  9,  7,\n-    6,  6,  0,  0,  0,  0,  1,  0,  0,216,216,  1,  1,  1,  0,  0,\n-    0,226,216,216,216,216,216,  0,220,220,220,  0,232,232,220,230,\n-  230,230,  7,  0, 16, 17, 17, 33, 17, 49, 17, 17, 84, 97,135,145,\n-   26, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+    0, 38,  1, 58,  1, 58,  0,  0,  0,  0,  0, 88, 63, 89,  0,  0,\n+  115,  0,  0,  0, 55,  0,  0,  0,  0,115,  0,  0,  0,  0, 61,  0,\n+    0,  0,  0, 79,  0, 61,  0,  0,  0,  0, 56,  0, 89, 80,  0,  0,\n+   79,  0,  0,  0,  8, 91,  0,  0,  1, 87,  0,  0,116,  0,  0,  0,\n+    0,  0,  0,117,  0,118,119,120,121,  0,104,  4,122, 49, 23,  0,\n+    0,  0, 38, 50, 38, 58,  0,  0,  1, 87,  1,  1,  1,  1, 39,  1,\n+   48,105, 87,  0,  0,  0,  0,  1,  0,  0,  0,123,  0,  0,  0,112,\n+    4,122,  0,  0,  0,  1,124,  0,  0,  0,  0,  0,230,230,230,230,\n+  230,232,220,220,220,220,232,216,220,220,220,220,220,202,202,220,\n+  220,220,220,202,202,220,220,220,  1,  1,  1,  1,  1,220,220,220,\n+  220,230,230,230,230,240,230,220,220,220,230,230,230,220,220,  0,\n+  230,230,230,220,220,220,220,230,232,220,220,230,233,234,234,233,\n+  234,234,233,230,  0,  0,  0,230,  0,220,230,230,230,230,220,230,\n+  230,230,222,220,230,230,220,220,230,222,228,230, 10, 11, 12, 13,\n+   14, 15, 16, 17, 18, 19, 19, 20, 21, 22,  0, 23,  0, 24, 25,  0,\n+  230,220,  0, 18, 30, 31, 32,  0,  0,  0,  0, 27, 28, 29, 30, 31,\n+   32, 33, 34,230,230,220,220,230,220,230,230,220, 35,  0,  0,  0,\n+    0,  0,230,230,230,  0,  0,230,230,  0,220,230,230,220,  0,  0,\n+    0, 36,  0,  0,230,220,230,230,220,220,230,220,220,230,220,230,\n+  220,230,230,  0,  0,220,  0,  0,230,230,  0,230,  0,230,230,230,\n+  230,230,  0,  0,  0,220,220,220,230,220,220,220,230,230,  0,220,\n+   27, 28, 29,230,  7,  0,  0,  0,  0,  9,  0,  0,  0,230,220,230,\n+  230,  0,  0,  0,  0,  0,230,  0,  0, 84, 91,  0,  0,  0,  0,  9,\n+    9,  0,  0,  0,  0,  0,  9,  0,103,103,  9,  0,107,107,107,107,\n+  118,118,  9,  0,122,122,122,122,220,220,  0,  0,  0,220,  0,220,\n+    0,216,  0,  0,  0,129,130,  0,132,  0,  0,  0,  0,  0,130,130,\n+  130,130,  0,  0,130,  0,230,230,  9,  0,230,230,  0,  0,220,  0,\n+    0,  0,  0,  7,  0,  9,  9,  0,  9,  9,  0,  0,  0,230,  0,  0,\n+    0,228,  0,  0,  0,222,230,220,220,  0,  0,  0,230,  0,  0,220,\n+  230,220,  0,220,230,230,230,  0,  0,  0,  9,  9,  0,  0,  7,  0,\n+  230,  0,  1,  1,  1,  0,  0,  0,230,234,214,220,202,230,230,230,\n+  230,230,232,228,228,220,218,230,233,220,230,220,230,230,  1,  1,\n+    1,  1,  1,230,  0,  1,  1,230,220,230,  1,  1,  0,  0,218,228,\n+  232,222,224,224,  0,  8,  8,  0,  0,  0,  0,220,230,  0,230,230,\n+  220,  0,  0,230,  0,  0, 26,  0,  0,220,  0,230,230,  1,220,  0,\n+    0,230,220,  0,  0,  0,220,220,  0,  0,230,220,  0,  9,  7,  0,\n+    0,  7,  9,  0,  0,  0,  9,  7,  6,  6,  0,  0,  0,  0,  1,  0,\n+    0,216,216,  1,  1,  1,  0,  0,  0,226,216,216,216,216,216,  0,\n+  220,220,220,  0,232,232,220,230,230,230,  7,  0, 16, 17, 17, 33,\n+   17, 49, 17, 17, 84, 97,135,145, 26, 17, 17, 17, 17, 17, 17, 17,\n@@ -3421,265 +3464,451 @@\n-   17, 17, 17,177,  0,  1,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n-    3,  3,  3,  3,  3,  3,  3,  3,  4,  3,  3,  3,  3,  3,  5,  3,\n-    3,  3,  3,  3,  6,  7,  8,  3,  3,  3,  3,  3,  9, 10, 11, 12,\n-   13,  3,  3,  3,  3,  3,  3,  3,  3, 14,  3, 15,  3,  3,  3,  3,\n-    3,  3, 16, 17, 18, 19, 20, 21,  3,  3,  3, 22, 23, 24,  3,  3,\n-    3,  3,  3,  3, 25,  3,  3,  3,  3,  3,  3,  3,  3, 26,  3,  3,\n-   27, 28,  0,  1,  0,  0,  0,  0,  0,  1,  0,  2,  0,  0,  0,  3,\n-    0,  0,  0,  3,  0,  0,  0,  0,  0,  4,  0,  5,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  7,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  9,  0,  0,  0,\n-    0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0, 10, 11, 12,\n-   13,  0,  0, 14, 15, 16,  6,  0, 17, 18, 19, 19, 19, 20, 21, 22,\n-   23, 24, 19, 25,  0, 26, 27, 19, 19, 28, 29, 30,  0, 31,  0,  0,\n-    0,  8,  0,  0,  0,  0,  0,  0,  0, 19, 28,  0, 32, 33,  9, 34,\n-   35, 19,  0,  0, 36, 37, 38, 39, 40, 19,  0, 41, 42, 43, 44, 31,\n-    0,  1, 45, 42,  0,  0,  0,  0,  0, 32, 14, 14,  0,  0,  0,  0,\n-   14,  0,  0, 46, 47, 47, 47, 47, 48, 49, 47, 47, 47, 47, 50, 51,\n-   52, 53, 43, 21,  0,  0,  0,  0,  0,  0,  0, 54,  6, 55,  0, 14,\n-   19,  1,  0,  0,  0,  0, 56, 57,  0,  0,  0,  0,  0, 19, 58, 31,\n-    0,  0,  0,  0,  0,  0,  0, 59, 14,  0,  0,  0,  0,  1,  0,  2,\n-    0,  0,  0,  3,  0,  0,  0, 60, 61,  0,  0,  0,  0,  0,  0,  0,\n-    1,  0,  0,  0,  0,  0,  2,  3,  0,  4,  5,  0,  0,  6,  0,  0,\n-    0,  7,  0,  0,  0,  1,  1,  0,  0,  8,  9,  0,  8,  9,  0,  0,\n-    0,  0,  8,  9, 10, 11, 12,  0,  0,  0, 13,  0,  0,  0,  0, 14,\n-   15, 16, 17,  0,  0,  0,  1,  0,  0, 18, 19,  0,  0,  0, 20,  0,\n-    0,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,  8,\n-   21,  9,  0,  0, 22,  0,  0,  0,  0,  1,  0, 23, 24, 25,  0,  0,\n-   26,  0,  0,  0,  8, 21, 27,  0,  1,  0,  0,  1,  1,  1,  1,  0,\n-    1, 28, 29, 30,  0, 31, 32, 20,  1,  1,  0,  0,  0,  8, 21,  9,\n-    1,  4,  5,  0,  0,  0, 33,  9,  0,  1,  1,  1,  0,  8, 21, 21,\n-   21, 21, 34,  1, 35, 21, 21, 21,  9, 36,  0,  0, 37, 38,  1,  0,\n-   39,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  8, 21,  9,  1,  0,\n-    0,  0, 40,  0,  8, 21, 21, 21, 21, 21, 21, 21, 21,  9,  0,  1,\n-    1,  1,  1,  8, 21, 21, 21,  9,  0,  0,  0, 41,  0, 42, 43,  0,\n-    0,  0,  1, 44,  0,  0,  0, 45,  8,  9,  1,  0,  0,  0,  8, 21,\n-   21, 21,  9,  0,  1,  0,  1,  1,  8, 21, 21,  9,  0,  4,  5,  8,\n-    9,  1,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  7,  8,  7,  7,\n-    7,  7,  7,  7,  7,  7,  7,  7,  9, 10, 11, 11, 11, 11, 12, 13,\n-   13, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 13, 22, 13, 13, 13,\n-   13, 23, 24, 24, 25, 26, 13, 13, 13, 27, 28, 29, 13, 30, 31, 32,\n-   33, 34, 35, 36,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n-    7,  7,  7,  7,  7,  7,  7,  7, 37,  7, 38, 39,  7, 40,  7,  7,\n-    7, 41, 13, 42,  7,  7, 43,  7, 44, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n-   13, 13, 13, 13, 45,  0,  0,  1,  2,  2,  2,  3,  4,  5,  6,  7,\n-    8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n-   24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 37,\n-   37, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n-   51, 52,  2,  2, 53, 54, 55, 56, 57, 58, 59, 59, 59, 59, 60, 59,\n-   59, 59, 59, 59, 59, 59, 61, 61, 59, 59, 59, 59, 62, 63, 64, 65,\n-   66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 59, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 79, 70, 70, 70, 70, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81,\n-   82, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 32, 32,\n-   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-   32, 32, 32, 32, 32, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 70, 70, 97, 98, 99,100,101,101,\n-  102,103,104,105,106,107,108,109,110,111, 96,112,113,114,115,116,\n-  117,118,119,119,120,121,122,123,124,125,126,127,128,129,130,131,\n-  132, 96,133,134,135,136,137,138,139,140,141,142,143, 96,144,145,\n-   96,146,147,148,149, 96,150,151,152,153,154,155,156, 96,157,158,\n-  159,160, 96,161,162,163,164,164,164,164,164,164,164,165,166,164,\n-  167, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96,168,169,169,169,169,169,169,169,169,170, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,171,171,\n-  171,171,172, 96, 96, 96,173,173,173,173,174,175,176,177, 96, 96,\n-   96, 96,178,179,180,181,182,182,182,182,182,182,182,182,182,182,\n-  182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,\n-  182,182,182,182,182,183,182,182,182,182,182,182,184,184,184,185,\n-  186, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96,187,188,189,190,191,191,192, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,193,194,\n-   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96,195,196, 59,197,198,199,200,201,202, 96,203,204,\n-  205, 59, 59,206, 59,207,208,208,208,208,208,209, 96, 96, 96, 96,\n-   96, 96, 96, 96,210, 96,211,212,213, 96, 96,214, 96, 96, 96,215,\n-   96, 96, 96, 96, 96,216,217,218,219, 96, 96, 96, 96, 96,220,221,\n-  222, 96,223,224, 96, 96,225,226, 59,227,228, 96, 59, 59, 59, 59,\n-   59, 59, 59,229,230,231,232,233, 59, 59,234,235, 59,236, 96, 96,\n-   96, 96, 96, 96, 96, 96, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70,237, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70, 70,238, 70,239, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n-   70, 70, 70,240, 70, 70, 70, 70, 70, 70, 70, 70, 70,241, 70, 70,\n-   70, 70,242, 96, 96, 96, 70, 70, 70, 70,243, 96, 96, 96, 96, 96,\n-   96, 96, 96, 96, 96, 96, 70, 70, 70, 70, 70, 70,244, 70, 70, 70,\n-   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,245, 96, 96,\n-   96, 96, 96, 96, 96, 96,246, 96,247,248,  0,  1,  2,  2,  0,  1,\n-    2,  2,  2,  3,  4,  5,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19,\n-   19, 19, 19, 19, 19,  0,  0,  0, 19,  0, 19,  0,  0,  0,  0,  0,\n-   26, 26,  1,  1,  1,  1,  9,  9,  9,  9,  0,  9,  9,  9,  2,  2,\n-    9,  9,  9,  9,  0,  9,  2,  2,  2,  2,  9,  0,  9,  0,  9,  9,\n-    9,  2,  9,  2,  9,  9,  9,  9,  2,  9,  9,  9, 55, 55, 55, 55,\n-   55, 55,  6,  6,  6,  6,  6,  1,  1,  6,  2,  4,  4,  4,  4,  4,\n-    4,  4,  4,  4,  4,  2,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n-   14,  2,  2,  2,  2, 14, 14,  2,  2,  2,  3,  3,  3,  3,  3,  0,\n-    3,  3,  0,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  1,  1,  1,\n-    3,  3,  1,  3,  3,  3, 37, 37, 37, 37, 37, 37,  2, 37, 37, 37,\n-   37,  2,  2, 37, 37, 37, 38, 38, 38, 38, 38, 38,  2,  2, 64, 64,\n-   64, 64, 64, 64, 64,  2,  2, 64, 64, 64, 90, 90, 90, 90, 90, 90,\n-    2,  2, 90, 90, 90,  2, 95, 95, 95, 95,  2,  2, 95,  2,  3,  3,\n-    3,  2,  3,  3,  2,  2,  3,  3,  0,  3,  7,  7,  7,  7,  7,  1,\n-    1,  1,  1,  7,  7,  7,  0,  0,  7,  7,  5,  5,  5,  5,  2,  5,\n-    5,  5,  5,  2,  2,  5,  5,  2,  5,  5,  5,  2,  5,  2,  2,  2,\n-    5,  5,  5,  5,  2,  2,  5,  5,  5,  2,  2,  2,  2,  5,  5,  5,\n-    2,  5,  2, 11, 11, 11, 11, 11, 11,  2,  2,  2,  2, 11, 11,  2,\n-    2, 11, 11, 11, 11, 11, 11,  2, 11, 11,  2, 11, 11,  2, 11, 11,\n-    2,  2,  2, 11,  2,  2, 11,  2, 11,  2,  2,  2, 11, 11,  2, 10,\n-   10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10,  2, 10, 10, 10, 10,\n-    2,  2, 10,  2,  2,  2,  2,  2, 10, 10,  2, 21, 21, 21, 21, 21,\n-   21, 21, 21,  2,  2, 21, 21,  2, 21, 21, 21, 21,  2,  2, 21, 21,\n-    2, 21,  2,  2, 21, 21,  2,  2, 22, 22,  2, 22, 22, 22, 22, 22,\n-   22,  2, 22,  2, 22, 22, 22, 22,  2,  2,  2, 22, 22,  2,  2,  2,\n-    2, 22, 22,  2,  2,  2, 22, 22, 22, 22, 23, 23, 23, 23, 23,  2,\n-   23, 23, 23, 23,  2,  2,  2, 23, 23,  2, 23, 23, 23,  2,  2, 23,\n-    2,  2,  2,  2, 23, 23,  2,  2,  2, 23, 16, 16, 16, 16, 16,  2,\n-   16, 16,  2, 16, 16, 16, 16, 16,  2,  2,  2, 16, 16,  2,  2,  2,\n-   16, 16, 20, 20, 20, 20, 20,  2, 20, 20,  2,  2, 20, 20,  2, 36,\n-   36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2, 36, 36, 36, 36,\n-    2, 36,  2, 36,  2,  2,  2,  2, 36,  2,  2,  2,  2, 36, 36,  2,\n-   36,  2, 36,  2,  2,  2,  2, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n-   24,  2,  2,  2,  2,  0,  2, 18, 18,  2, 18,  2, 18, 18, 18, 18,\n-   18,  2, 18, 18, 18, 18,  2, 18,  2, 18, 18, 18,  2,  2, 18,  2,\n-   18,  2, 25, 25, 25, 25,  2, 25, 25, 25, 25,  2,  2,  2, 25,  2,\n-   25, 25, 25,  0,  0,  0,  0, 25, 25,  2, 33, 33, 33, 33,  8,  8,\n-    8,  8,  8,  8,  2,  8,  2,  8,  2,  2,  8,  8,  8,  0, 12, 12,\n-   12, 12, 30, 30, 30, 30, 30,  2, 30, 30, 30, 30,  2,  2, 30, 30,\n-   30,  2,  2, 30, 30, 30, 30,  2,  2,  2, 29, 29, 29, 29, 29, 29,\n-    2,  2, 28, 28, 28, 28, 34, 34, 34, 34, 34,  2,  2,  2, 35, 35,\n-   35, 35, 35, 35, 35,  0,  0,  0, 35, 35, 35,  2,  2,  2, 45, 45,\n-   45, 45, 45, 45,  2,  2,  2,  2,  2, 45, 44, 44, 44, 44, 44,  0,\n-    0,  2, 43, 43, 43, 43, 46, 46, 46, 46, 46,  2, 46, 46, 31, 31,\n-   31, 31, 31, 31,  2,  2, 32, 32,  0,  0, 32,  0, 32, 32, 32, 32,\n-   32, 32, 32, 32,  2,  2, 32,  2,  2,  2, 32, 32, 32,  2, 28, 28,\n-    2,  2, 48, 48, 48, 48, 48, 48, 48,  2, 48,  2,  2,  2, 52, 52,\n-   52, 52, 52, 52,  2,  2, 52,  2,  2,  2, 58, 58, 58, 58, 58, 58,\n-    2,  2, 58, 58, 58,  2,  2,  2, 58, 58, 54, 54, 54, 54,  2,  2,\n-   54, 54, 91, 91, 91, 91, 91, 91, 91,  2, 91,  2,  2, 91, 91, 91,\n-    2,  2,  1,  1,  1,  2, 62, 62, 62, 62, 62,  2,  2,  2, 62, 62,\n-   62,  2, 76, 76, 76, 76, 93, 93, 93, 93, 70, 70, 70, 70,  2,  2,\n-    2, 70, 70, 70,  2,  2,  2, 70, 70, 70, 73, 73, 73, 73,  6,  2,\n-    2,  2,  8,  8,  8,  2,  2,  8,  8,  8,  1,  1,  1,  0,  1,  0,\n-    1,  1,  1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  0,  2, 19, 19,\n-    9,  9,  9,  9,  9,  6, 19,  9,  9,  9,  9,  9, 19, 19,  9,  9,\n-    9, 19,  6, 19, 19, 19, 19, 19, 19,  9,  9,  9,  2,  2,  2,  9,\n-    2,  9,  2,  9,  9,  9,  1,  1,  0,  0,  0,  2,  0,  0,  0, 19,\n-    2,  2,  0,  0,  0, 19,  0,  0,  0,  2, 19,  2,  2,  2,  0,  2,\n-    2,  2,  1,  2,  2,  2,  0,  0,  9,  0,  0,  0, 19, 19, 27, 27,\n-   27, 27,  2,  2,  0,  0,  0,  0,  2,  0, 56, 56, 56, 56,  2, 55,\n-   55, 55, 61, 61, 61, 61,  2,  2,  2, 61, 61,  2,  2,  2,  0,  0,\n-    2,  2, 13, 13, 13, 13, 13, 13,  2, 13, 13, 13,  2,  2,  0, 13,\n-    0, 13,  0, 13, 13, 13, 13, 13,  1,  1,  1,  1, 12, 12,  2, 15,\n-   15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  1,  1,  0,  0, 15,\n-   15, 15,  0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  0,  2, 26,\n-   26, 26, 26, 26, 26, 26,  2, 12, 12, 12, 12, 12, 12,  2, 12, 12,\n-   12,  0, 39, 39, 39, 39, 39,  2,  2,  2, 39, 39, 39,  2, 86, 86,\n-   86, 86, 77, 77, 77, 77, 79, 79, 79, 79, 19, 19, 19,  2, 19, 19,\n-    2, 19,  2, 19, 19, 19, 19, 19,  2,  2,  2,  2, 19, 19, 60, 60,\n-   60, 60, 60,  2,  2,  2, 65, 65, 65, 65, 75, 75, 75, 75, 75, 75,\n-    2,  2,  2,  2, 75, 75, 69, 69, 69, 69, 69, 69,  0, 69, 74, 74,\n-   74, 74,  2,  2,  2, 74, 12,  2,  2,  2, 84, 84, 84, 84, 84, 84,\n-    2,  0, 84, 84,  2,  2,  2,  2, 84, 84, 33, 33, 33,  2, 68, 68,\n-   68, 68, 68, 68, 68,  2, 68, 68,  2,  2, 92, 92, 92, 92, 92, 92,\n-   92,  2,  2,  2,  2, 92, 87, 87, 87, 87, 87, 87, 87,  2, 19,  9,\n-   19, 19, 19, 19,  0,  0, 87, 87,  2,  2,  2,  2,  2, 12,  2,  2,\n-    2,  4, 14,  2, 14,  2, 14, 14,  2, 14, 14,  2, 14, 14,  2,  2,\n-    2,  3,  3,  3,  0,  0,  2,  2,  3,  3,  1,  1,  6,  6,  3,  2,\n-    3,  3,  3,  2,  2,  0,  2,  0,  0,  0,  0,  0, 17, 17, 17, 17,\n-    0,  0,  2,  2, 12, 12, 49, 49, 49, 49,  2, 49, 49, 49, 49, 49,\n-   49,  2, 49, 49,  2, 49, 49, 49,  2,  2,  9,  2,  2,  2,  0,  1,\n-    2,  2, 71, 71, 71, 71, 71,  2,  2,  2, 67, 67, 67, 67, 67,  2,\n-    2,  2, 42, 42, 42, 42,  2, 42, 42, 42, 41, 41, 41, 41, 41, 41,\n-   41,  2,118,118,118,118,118,118,118,  2, 53, 53, 53, 53, 53, 53,\n-    2, 53, 59, 59, 59, 59, 59, 59,  2,  2, 40, 40, 40, 40, 51, 51,\n-   51, 51, 50, 50, 50, 50, 50, 50,  2,  2,135,135,135,135,106,106,\n-  106,106,104,104,104,104,  2,  2,  2,104,161,161,161,161,161,161,\n-  161,  2,161,161,  2,161,161,  2,  2,  2,110,110,110,110,110,110,\n-  110,  2,110,110,  2,  2, 19,  2, 19, 19, 47, 47, 47, 47, 47, 47,\n-    2,  2, 47,  2, 47, 47, 47, 47,  2, 47, 47,  2,  2,  2, 47,  2,\n-    2, 47, 81, 81, 81, 81, 81, 81,  2, 81,120,120,120,120,116,116,\n-  116,116,116,116,116,  2,  2,  2,  2,116,128,128,128,128,128,128,\n-  128,  2,128,128,  2,  2,  2,  2,  2,128, 66, 66, 66, 66,  2,  2,\n-    2, 66, 72, 72, 72, 72, 72, 72,  2,  2,  2,  2,  2, 72, 98, 98,\n-   98, 98, 97, 97, 97, 97,  2,  2, 97, 97, 57, 57, 57, 57,  2, 57,\n-   57,  2,  2, 57, 57, 57, 57, 57,  2,  2, 57, 57, 57,  2,  2,  2,\n-    2, 57, 57,  2,  2,  2, 88, 88, 88, 88,117,117,117,117,112,112,\n-  112,112,112,112,112,  2,  2,  2,  2,112, 78, 78, 78, 78, 78, 78,\n-    2,  2,  2, 78, 78, 78, 83, 83, 83, 83, 83, 83,  2,  2, 82, 82,\n-   82, 82, 82, 82, 82,  2,122,122,122,122,122,122,  2,  2,  2,122,\n-  122,122,122,  2,  2,  2, 89, 89, 89, 89, 89,  2,  2,  2,130,130,\n-  130,130,130,130,130,  2,  2,  2,130,130,144,144,144,144,144,144,\n-    2,  2,156,156,156,156,156,156,  2,156,156,156,  2,  2,  2,  3,\n-    3,  3,147,147,147,147,148,148,148,148,148,148,  2,  2,158,158,\n-  158,158,158,158,  2,  2,153,153,153,153,149,149,149,149,149,149,\n-  149,  2, 94, 94, 94, 94, 94, 94,  2,  2,  2,  2, 94, 94,  2,  2,\n-    2, 94, 85, 85, 85, 85, 85, 85, 85,  2,  2, 85,  2,  2,101,101,\n-  101,101,101,  2,  2,  2,101,101,  2,  2, 96, 96, 96, 96, 96,  2,\n-   96, 96,111,111,111,111,111,111,111,  2,100,100,100,100,108,108,\n-  108,108,108,108,  2,108,108,108,  2,  2,129,129,129,129,129,129,\n-  129,  2,129,  2,129,129,129,129,  2,129,129,129,  2,  2,109,109,\n-  109,109,109,109,109,  2,109,109,  2,  2,107,107,107,107,  2,107,\n-  107,107,107,  2,  2,107,107,  2,107,107,107,107,  2,  1,107,107,\n-    2,  2,107,  2,  2,  2,  2,  2,  2,107,  2,  2,107,107,137,137,\n-  137,137,  2,137,137,137,137,137,  2,  2,124,124,124,124,124,124,\n-    2,  2,123,123,123,123,123,123,  2,  2,114,114,114,114,114,  2,\n-    2,  2,114,114,  2,  2,102,102,102,102,102,102,  2,  2,126,126,\n-  126,126,126,126,126,  2,  2,126,126,126,142,142,142,142,125,125,\n-  125,125,125,125,125,  2,  2,  2,  2,125,154,154,154,154,154,154,\n-  154,  2,  2,154,  2,  2,  2,154,154,  2,154,154,  2,154,154,  2,\n-    2,154,154,154,  2,  2,150,150,150,150,  2,  2,150,150,150,  2,\n-    2,  2,141,141,141,141,140,140,140,140,140,140,140,  2,121,121,\n-  121,121,121,  2,  2,  2,  7,  7,  2,  2,133,133,133,133,133,  2,\n-  133,133,133,133,133,  2,133,133,  2,  2,133,  2,  2,  2,134,134,\n-  134,134,  2,  2,134,134,  2,134,134,134,134,134,134,  2,138,138,\n-  138,138,138,138,138,  2,138,138,  2,138,  2,  2,138,  2,138,138,\n-    2,  2,143,143,143,143,143,143,  2,143,143,  2,143,143,143,143,\n-  143,  2,143,  2,  2,  2,143,143,  2,  2,145,145,145,145,145,  2,\n-    2,  2,163,163,163,163,163,  2,163,163,163,163,163,  2,  2,  2,\n-  163,163,163,163,  2,  2, 86,  2,  2,  2, 63, 63, 63, 63, 63, 63,\n-    2,  2, 63, 63, 63,  2, 63,  2,  2,  2,157,157,157,157,157,157,\n-  157,  2, 80, 80, 80, 80, 80, 80,  2,  2,127,127,127,127,127,127,\n-  127,  2, 79,  2,  2,  2,115,115,115,115,115,115,115,  2,115,115,\n-    2,  2,  2,  2,115,115,159,159,159,159,159,159,159,  2,159,159,\n-    2,  2,103,103,103,103,103,103,  2,  2,119,119,119,119,119,119,\n-    2,  2,119,119,  2,119,  2,119,119,119,146,146,146,146,146,146,\n-  146,  2, 99, 99, 99, 99, 99, 99, 99,  2,  2,  2,  2, 99,136,139,\n-   13, 13,155,  2,  2,  2,136,136,136,136,155,155,155,155,155,155,\n-    2,  2,136,  2,  2,  2,  2, 17, 17, 17,  2, 17, 17,  2, 17, 15,\n-   15, 15, 17, 17, 17,  2,  2,  2, 15,  2,  2, 17,  2,  2,139,139,\n-  139,139,105,105,105,105,105,105,105,  2,105,  2,  2,  2,105,105,\n-    2,  2,  1,  1,  2,  2,  0,  0,  0,  1,  0,  1,  1,  1,  0,  0,\n-    1,  1,  2,  2,  0,  2,  2,  0,  0,  2,  0,  2,  0,  2,131,131,\n-  131,131,  2,  2,  2,131,  2,131,131,131, 56, 56, 56,  2, 56,  2,\n-    2, 56, 56, 56,  2, 56, 56,  2, 56, 56,  6,  6,  2,  2,  2,  2,\n-    2,  6,151,151,151,151,151,  2,  2,  2,151,151,  2,  2,  2,  2,\n-  151,151,160,160,160,160,160,160,160,  2,152,152,152,152,152,152,\n-    2,  2,  2,  2,  2,152,164,164,164,164,164,164,  2,  2,  2, 30,\n-   30,  2,113,113,113,113,113,  2,  2,113,113,113,113,  2,132,132,\n-  132,132,132,132,  2,  2,  2,  2,132,132,  2,  3,  3,  2,  3,  2,\n-    2,  3,  2,  3,  2,  3,  2,  2,  3,  2,  3,  2,  3,  2,  3,  3,\n-    2,  3, 15,  0,  0,  2, 13,  2,  2,  2, 13, 13, 13,  2,  2,  0,\n-    2,  2,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9,  9, 10,\n-    9, 11, 12, 13,  9,  9,  9, 14,  9,  9, 15,  9,  9,  9,  9,  9,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,177,  0,  1,  2,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    4,  3,  3,  3,  3,  3,  5,  3,  3,  3,  3,  3,  6,  7,  8,  3,\n+    3,  3,  3,  3,  9, 10, 11, 12, 13,  3,  3,  3,  3,  3,  3,  3,\n+    3, 14,  3, 15,  3,  3,  3,  3,  3,  3, 16, 17, 18, 19, 20, 21,\n+    3,  3,  3, 22, 23, 24,  3,  3,  3,  3,  3,  3, 25,  3,  3,  3,\n+    3,  3,  3,  3,  3, 26,  3,  3, 27, 28,  0,  1,  0,  0,  0,  0,\n+    0,  1,  0,  2,  0,  0,  0,  3,  0,  0,  0,  3,  0,  0,  0,  0,\n+    0,  4,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  6,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  8,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,\n+    0,  0,  0,  0,  0, 10, 11, 12, 13,  0,  0, 14, 15, 16,  6,  0,\n+   17, 18, 19, 19, 19, 20, 21, 22, 23, 24, 19, 25,  0, 26, 27, 19,\n+   19, 28, 29, 30,  0, 31,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,\n+    0, 19, 28,  0, 32, 33,  9, 34, 35, 19,  0,  0, 36, 37, 38, 39,\n+   40, 19,  0, 41, 42, 43, 44, 31,  0,  1, 45, 42,  0,  0,  0,  0,\n+    0, 32, 14, 14,  0,  0,  0,  0, 14,  0,  0, 46, 47, 47, 47, 47,\n+   48, 49, 47, 47, 47, 47, 50, 51, 52, 53, 43, 21,  0,  0,  0,  0,\n+    0,  0,  0, 54,  6, 55,  0, 14, 19,  1,  0,  0,  0,  0, 56, 57,\n+    0,  0,  0,  0,  0, 19, 58, 31,  0,  0,  0,  0,  0,  0,  0, 59,\n+   14,  0,  0,  0,  0,  1,  0,  2,  0,  0,  0,  3,  0,  0,  0, 60,\n+   61,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  2,  3,\n+    0,  4,  5,  0,  0,  6,  0,  0,  0,  7,  0,  0,  0,  1,  1,  0,\n+    0,  8,  9,  0,  8,  9,  0,  0,  0,  0,  8,  9, 10, 11, 12,  0,\n+    0,  0, 13,  0,  0,  0,  0, 14, 15, 16, 17,  0,  0,  0,  1,  0,\n+    0, 18, 19,  0,  0,  0, 20,  0,  0,  0,  1,  1,  1,  1,  0,  1,\n+    1,  1,  1,  1,  1,  1,  0,  8, 21,  9,  0,  0, 22,  0,  0,  0,\n+    0,  1,  0, 23, 24, 25,  0,  0, 26,  0,  0,  0,  8, 21, 27,  0,\n+    1,  0,  0,  1,  1,  1,  1,  0,  1, 28, 29, 30,  0, 31, 32, 20,\n+    1,  1,  0,  0,  0,  8, 21,  9,  1,  4,  5,  0,  0,  0, 33,  9,\n+    0,  1,  1,  1,  0,  8, 21, 21, 21, 21, 34,  1, 35, 21, 21, 21,\n+    9, 36,  0,  0, 37, 38,  1,  0, 39,  0,  0,  0,  1,  0,  1,  0,\n+    0,  0,  0,  8, 21,  9,  1,  0,  0,  0, 40,  0,  8, 21, 21, 21,\n+   21, 21, 21, 21, 21,  9,  0,  1,  1,  1,  1,  8, 21, 21, 21,  9,\n+    0,  0,  0, 41,  0, 42, 43,  0,  0,  0,  1, 44,  0,  0,  0, 45,\n+    8,  9,  1,  0,  0,  0,  8, 21, 21, 21,  9,  0,  1,  0,  1,  1,\n+    8, 21, 21,  9,  0,  4,  5,  8,  9,  1,  0,  0,  0,  1,  2,  3,\n+    4,  5,  5,  5,  5,  5,  6,  7,  7,  8,  9, 10, 11, 12, 13, 14,\n+   15,  9, 16, 17, 18,  9, 19, 20, 21, 22, 23, 24,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5, 25, 26, 27,  5, 28, 29,  5, 30, 31,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 32,  0,  0,  1,\n+    2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n+   18, 19, 20, 20, 21, 22, 23, 24, 25, 26, 27, 28,  1, 29, 30, 31,\n+   32, 32, 33, 32, 32, 32, 34, 32, 32, 35, 36, 37, 38, 39, 40, 41,\n+   42, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,\n+   44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 44, 44, 44, 44,\n+   44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 46, 46,\n+   46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n+   56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n+   56, 56, 56, 56, 56, 56, 56, 44, 57, 58, 59, 60, 61, 62, 63, 64,\n+   65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n+   81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 95,\n+   95, 96, 97, 98, 56, 56, 56, 56, 56, 56, 56, 56, 56, 99,100,100,\n+  100,100,101,100,100,100,100,100,100,100,100,100,100,100,100,100,\n+  100,102,103,103,104, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,105,\n+   56, 56, 56, 56, 56, 56,106,106,107,108, 56,109,110,111,112,112,\n+  112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,\n+  112,112,112,112,112,113,112,112,112,114,115,116, 56, 56, 56, 56,\n+   56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,117,118,119,\n+  120, 56, 56, 56, 56, 56, 56, 56, 56, 56,121, 56, 56, 56, 56, 56,\n+   56, 56, 56, 56, 56, 56, 56, 56, 56, 56,122, 32,123,124,125,126,\n+  127,128,129,130,131,132,133,133,134, 56, 56, 56, 56,135,136,137,\n+  138, 56,139,140, 56,141,142,143, 56, 56,144,145,146, 56,147,148,\n+  149, 32, 32, 32,150,151,152, 32,153,154, 56, 56, 56, 56, 44, 44,\n+   44, 44, 44, 44,155, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,\n+   44, 44, 44, 44, 44,156,157, 44, 44, 44, 44, 44, 44, 44, 44, 44,\n+   44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,158, 44, 44, 44,\n+   44, 44, 44, 44, 44, 44, 44, 44, 44,159, 44, 44,160, 56, 56, 56,\n+   56, 56, 56, 56, 56, 56, 44, 44,161, 56, 56, 56, 56, 56, 44, 44,\n+   44,162, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,\n+   44,163, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,164,165,\n+    0,  1,  0,  1,  2,  3,  0,  1,  2,  3,  4,  5,  6,  7,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0,\n+   19,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19,  0, 19,  0,\n+    0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,\n+   26, 26,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,\n+    9,  9,  0,  9,  9,  9,  2,  2,  9,  9,  9,  9,  0,  9,  2,  2,\n+    2,  2,  9,  0,  9,  0,  9,  9,  9,  2,  9,  2,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  9,\n+   55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,  6,  6,\n+    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  1,  1,  6,  2,  4,\n+    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n+    4,  4,  4,  4,  4,  2,  4,  4,  4,  2,  2,  4,  4,  4,  2, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2,  2,\n+    2,  2,  2,  2,  2,  2, 14, 14, 14,  2,  2,  2,  2, 14, 14, 14,\n+   14, 14, 14,  2,  2,  2,  3,  3,  3,  3,  3,  0,  3,  3,  3,  3,\n+    3,  3,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  0,  3,  3,  3,  0,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  3,  1,  3,\n+    3,  3,  3,  3,  3,  3, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,\n+   37, 37, 37, 37,  2, 37, 37, 37, 37,  2,  2, 37, 37, 37, 38, 38,\n+   38, 38, 38, 38, 38, 38, 38, 38,  2,  2,  2,  2,  2,  2, 64, 64,\n+   64, 64, 64, 64, 64, 64, 64, 64, 64,  2,  2, 64, 64, 64, 90, 90,\n+   90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,  2,  2, 90, 90,\n+   90, 90, 90, 90, 90,  2, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,\n+   95, 95,  2,  2, 95,  2, 37, 37, 37,  2,  2,  2,  2,  2,  3,  3,\n+    3,  3,  3,  3,  3,  2,  3,  3,  2,  2,  2,  2,  2,  3,  3,  3,\n+    0,  3,  3,  3,  3,  3,  7,  7,  7,  7,  7,  7,  7,  7,  7,  1,\n+    1,  1,  1,  7,  7,  7,  7,  7,  7,  7,  0,  0,  7,  7,  5,  5,\n+    5,  5,  2,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2,  5,  5,  2,\n+    2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,\n+    5,  5,  5,  5,  5,  5,  5,  2,  5,  2,  2,  2,  5,  5,  5,  5,\n+    2,  2,  5,  5,  5,  5,  5,  2,  2,  5,  5,  5,  5,  2,  2,  2,\n+    2,  2,  2,  2,  2,  5,  2,  2,  2,  2,  5,  5,  2,  5,  5,  5,\n+    5,  5,  2,  2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2, 11,\n+   11, 11,  2, 11, 11, 11, 11, 11, 11,  2,  2,  2,  2, 11, 11,  2,\n+    2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,\n+   11, 11, 11, 11, 11, 11, 11,  2, 11, 11,  2, 11, 11,  2, 11, 11,\n+    2,  2, 11,  2, 11, 11, 11,  2,  2, 11, 11, 11,  2,  2,  2, 11,\n+    2,  2,  2,  2,  2,  2,  2, 11, 11, 11, 11,  2, 11,  2,  2,  2,\n+    2,  2,  2,  2, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,  2, 10,\n+   10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10,\n+    2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2,\n+   10, 10, 10, 10, 10, 10, 10,  2, 10, 10,  2, 10, 10, 10, 10, 10,\n+    2,  2, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10,  2,  2, 10,  2,\n+    2,  2,  2,  2,  2,  2, 10, 10, 10, 10,  2,  2, 10, 10, 10, 10,\n+    2,  2,  2,  2,  2,  2,  2, 10, 10, 10, 10, 10, 10, 10,  2, 21,\n+   21, 21,  2, 21, 21, 21, 21, 21, 21, 21, 21,  2,  2, 21, 21,  2,\n+    2, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,\n+   21, 21, 21, 21, 21, 21, 21,  2, 21, 21,  2, 21, 21, 21, 21, 21,\n+    2,  2, 21, 21, 21, 21, 21,  2,  2, 21, 21, 21,  2,  2,  2,  2,\n+    2,  2,  2, 21, 21, 21,  2,  2,  2,  2, 21, 21,  2, 21, 21, 21,\n+   21, 21,  2,  2, 21, 21,  2,  2, 22, 22,  2, 22, 22, 22, 22, 22,\n+   22,  2,  2,  2, 22, 22, 22,  2, 22, 22, 22, 22,  2,  2,  2, 22,\n+   22,  2, 22,  2, 22, 22,  2,  2,  2, 22, 22,  2,  2,  2, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22,  2,  2,  2,  2, 22, 22, 22,  2,\n+    2,  2,  2,  2,  2, 22,  2,  2,  2,  2,  2,  2, 22, 22, 22, 22,\n+   22,  2,  2,  2,  2,  2, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n+   23, 23, 23,  2, 23, 23, 23,  2, 23, 23, 23, 23, 23, 23, 23, 23,\n+    2,  2, 23, 23, 23, 23, 23,  2, 23, 23, 23, 23,  2,  2,  2,  2,\n+    2,  2,  2, 23, 23,  2, 23, 23, 23,  2,  2, 23,  2,  2, 23, 23,\n+   23, 23,  2,  2, 23, 23,  2,  2,  2,  2,  2,  2,  2, 23, 16, 16,\n+   16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16,  2,\n+   16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16, 16, 16,\n+    2,  2, 16, 16, 16, 16, 16,  2, 16, 16, 16, 16,  2,  2,  2,  2,\n+    2,  2,  2, 16, 16,  2, 16, 16, 16, 16,  2,  2, 16, 16,  2, 16,\n+   16, 16,  2,  2,  2,  2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20,  2, 20, 20, 20,  2, 20, 20, 20, 20, 20, 20,  2,  2,\n+    2,  2, 20, 20, 20, 20, 20, 20, 20, 20,  2,  2, 20, 20,  2, 36,\n+   36, 36,  2, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36,  2,  2,  2, 36, 36, 36, 36, 36, 36, 36, 36,\n+    2, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2, 36,  2,  2,  2,  2,\n+   36,  2,  2,  2,  2, 36, 36, 36, 36, 36, 36,  2, 36,  2,  2,  2,\n+    2,  2,  2,  2, 36, 36,  2,  2, 36, 36, 36,  2,  2,  2,  2, 24,\n+   24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24,  2,  2,  2,  2,  0, 24, 24, 24, 24,  2,  2,  2,  2,  2, 18,\n+   18,  2, 18,  2, 18, 18, 18, 18, 18,  2, 18, 18, 18, 18, 18, 18,\n+   18, 18, 18, 18, 18, 18, 18, 18, 18, 18,  2, 18,  2, 18, 18, 18,\n+   18, 18, 18, 18,  2,  2, 18, 18, 18, 18, 18,  2, 18,  2, 18, 18,\n+   18, 18, 18, 18, 18,  2, 18, 18,  2,  2, 18, 18, 18, 18, 25, 25,\n+   25, 25, 25, 25, 25, 25,  2, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25,  2,  2,  2, 25, 25, 25, 25, 25,  2, 25, 25, 25, 25,\n+   25, 25, 25,  0,  0,  0,  0, 25, 25,  2,  2,  2,  2,  2, 33, 33,\n+   33, 33, 33, 33, 33, 33,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+    8,  8,  8,  8,  2,  8,  2,  2,  2,  2,  2,  8,  2,  2,  8,  8,\n+    8,  0,  8,  8,  8,  8, 12, 12, 12, 12, 12, 12, 12, 12, 30, 30,\n+   30, 30, 30, 30, 30, 30, 30,  2, 30, 30, 30, 30,  2,  2, 30, 30,\n+   30, 30, 30, 30, 30,  2, 30, 30, 30,  2,  2, 30, 30, 30, 30, 30,\n+   30, 30, 30,  2,  2,  2, 30, 30,  2,  2,  2,  2,  2,  2, 29, 29,\n+   29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,  2,  2, 28, 28,\n+   28, 28, 28, 28, 28, 28, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34,  2,  2,  2, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35,  0,  0,  0, 35, 35, 35,  2,  2,  2,  2,  2,  2,  2, 45, 45,\n+   45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,\n+   44, 44, 44,  0,  0,  2, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,\n+   43, 43,  2,  2,  2,  2, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,\n+   46, 46, 46,  2, 46, 46, 46,  2, 46, 46,  2,  2,  2,  2, 31, 31,\n+   31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,  2,  2, 31, 31,\n+    2,  2,  2,  2,  2,  2, 32, 32,  0,  0, 32,  0, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32, 32, 32, 32,  2,  2,  2,  2,  2,  2, 32,  2,\n+    2,  2,  2,  2,  2,  2, 32, 32, 32,  2,  2,  2,  2,  2, 28, 28,\n+   28, 28, 28, 28,  2,  2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n+   48, 48, 48, 48, 48,  2, 48, 48, 48, 48,  2,  2,  2,  2, 48,  2,\n+    2,  2, 48, 48, 48, 48, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n+   52, 52, 52, 52,  2,  2, 52, 52, 52, 52, 52,  2,  2,  2, 58, 58,\n+   58, 58, 58, 58, 58, 58, 58, 58, 58, 58,  2,  2,  2,  2, 58, 58,\n+    2,  2,  2,  2,  2,  2, 58, 58, 58,  2,  2,  2, 58, 58, 54, 54,\n+   54, 54, 54, 54, 54, 54, 54, 54, 54, 54,  2,  2, 54, 54, 91, 91,\n+   91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,  2, 91, 91,\n+   91, 91, 91,  2,  2, 91, 91, 91,  2,  2,  2,  2,  2,  2, 91, 91,\n+   91, 91, 91, 91,  2,  2,  1,  1,  1,  1,  1,  1,  1,  2, 62, 62,\n+   62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,  2, 62, 62, 76, 76,\n+   76, 76, 76, 76, 76, 76, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,\n+   93, 93,  2,  2,  2,  2,  2,  2,  2,  2, 93, 93, 93, 93, 70, 70,\n+   70, 70, 70, 70, 70, 70,  2,  2,  2, 70, 70, 70, 70, 70, 70, 70,\n+    2,  2,  2, 70, 70, 70, 73, 73, 73, 73, 73, 73, 73, 73,  6,  6,\n+    6,  2,  2,  2,  2,  2,  8,  8,  8,  2,  2,  8,  8,  8,  1,  1,\n+    1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,\n+    0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1,\n+    0,  2,  2,  2,  2,  2, 19, 19, 19, 19, 19, 19,  9,  9,  9,  9,\n+    9,  6, 19, 19, 19, 19, 19, 19, 19, 19, 19,  9,  9,  9,  9,  9,\n+   19, 19, 19, 19,  9,  9,  9,  9,  9, 19, 19, 19, 19, 19,  6, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  9,  9,  9,\n+    9,  9,  9,  9,  2,  2,  2,  9,  2,  9,  2,  9,  2,  9,  9,  9,\n+    9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  2,  2,  9,  9,  9,  9,\n+    9,  9,  2,  9,  9,  9,  2,  2,  9,  9,  9,  2,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  2,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,\n+    0,  0,  0,  2,  0,  0,  0, 19,  2,  2,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0, 19,  0,  0,  0,  0,  0,  0,  0,  2, 19, 19,\n+   19, 19, 19,  2,  2,  2,  0,  2,  2,  2,  2,  2,  2,  2,  1,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,\n+   19, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19,  0, 19,  0,\n+    0,  0,  2,  2,  2,  2,  0,  0,  2,  2,  2,  2,  2,  2,  0,  0,\n+    0,  2,  2,  2,  2,  2, 27, 27, 27, 27, 27, 27, 27, 27,  0,  0,\n+    0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0, 56, 56,\n+   56, 56, 56, 56, 56, 56, 55, 55, 55, 55,  2,  2,  2,  2,  2, 55,\n+   55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 61, 61, 61, 61,  2,  2,\n+    2,  2,  2,  2,  2, 61, 61,  2,  2,  2,  2,  2,  2,  2,  0,  0,\n+    0,  0,  0,  0,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    2, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2, 13, 13,\n+   13, 13, 13, 13,  2,  2,  0,  0,  0,  0,  0, 13,  0, 13,  0, 13,\n+   13, 13, 13, 13, 13, 13, 13, 13,  1,  1,  1,  1, 12, 12, 13, 13,\n+   13, 13,  0,  0,  0,  0,  2, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  1,\n+    1,  0,  0, 15, 15, 15,  0, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17,  0,  0, 17, 17, 17,  2,  2,\n+    2,  2,  2, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  2,  2,  2,\n+    2,  2,  2,  2,  2,  0, 12, 12, 12, 12, 12, 12, 12,  0, 17, 17,\n+   17, 17, 17, 17, 17,  0, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,\n+   39, 39, 39,  2,  2,  2, 39, 39, 39, 39, 39, 39, 39,  2, 86, 86,\n+   86, 86, 86, 86, 86, 86, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n+   77, 77,  2,  2,  2,  2, 79, 79, 79, 79, 79, 79, 79, 79,  0,  0,\n+   19, 19, 19, 19, 19, 19,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19,  2,  2, 19, 19,  2, 19,  2, 19, 19, 19,  2,  2,\n+   19, 19, 19, 19, 19, 19, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n+   60, 60, 60,  2,  2,  2, 65, 65, 65, 65, 65, 65, 65, 65, 75, 75,\n+   75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,  2,  2,  2,  2,\n+    2,  2,  2,  2, 75, 75, 75, 75,  2,  2,  2,  2,  2,  2, 69, 69,\n+   69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,  0, 69, 74, 74,\n+   74, 74, 74, 74, 74, 74, 74, 74, 74, 74,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 74, 12, 12, 12, 12, 12,  2,  2,  2, 84, 84,\n+   84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,  2,  0, 84, 84,\n+    2,  2,  2,  2, 84, 84, 33, 33, 33, 33, 33, 33, 33,  2, 68, 68,\n+   68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,  2, 68, 68,\n+   68, 68, 68, 68,  2,  2, 68, 68,  2,  2, 68, 68, 68, 68, 92, 92,\n+   92, 92, 92, 92, 92, 92, 92, 92, 92,  2,  2,  2,  2,  2,  2,  2,\n+    2, 92, 92, 92, 92, 92, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,\n+   87, 87, 87, 87, 87,  2,  2, 30, 30, 30, 30, 30, 30,  2, 19, 19,\n+   19,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19,  9, 19, 19, 19, 19,\n+    0,  0,  2,  2,  2,  2, 87, 87, 87, 87, 87, 87,  2,  2, 87, 87,\n+    2,  2,  2,  2,  2,  2, 12, 12, 12, 12,  2,  2,  2,  2,  2,  2,\n+    2, 12, 12, 12, 12, 12, 13, 13,  2,  2,  2,  2,  2,  2, 19, 19,\n+   19, 19, 19, 19, 19,  2,  2,  2,  2,  4,  4,  4,  4,  4,  2,  2,\n+    2,  2,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2, 14, 14,\n+   14, 14, 14,  2, 14,  2, 14, 14,  2, 14, 14,  2, 14, 14,  3,  3,\n+    3,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  0,  0,  2,  2,  3,  3,  3,  3,  3,  3,  2,  2,\n+    2,  2,  2,  2,  2,  3,  1,  1,  1,  1,  1,  1,  6,  6,  0,  0,\n+    0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  3,  3,\n+    3,  3,  3,  2,  3,  3,  3,  3,  3,  3,  3,  2,  2,  0,  2,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 17, 17, 17,\n+   17, 17, 17, 17,  0,  0,  2,  2, 12, 12, 12, 12, 12, 12,  2,  2,\n+   12, 12, 12,  2,  2,  2,  2,  0,  0,  0,  0,  0,  2,  2, 49, 49,\n+   49, 49, 49, 49, 49, 49, 49, 49, 49, 49,  2, 49, 49, 49, 49, 49,\n+   49, 49, 49, 49, 49,  2, 49, 49, 49,  2, 49, 49,  2, 49, 49, 49,\n+   49, 49, 49, 49,  2,  2, 49, 49, 49,  2,  2,  2,  2,  2,  0,  0,\n+    0,  2,  2,  2,  2,  0,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,\n+    0,  0,  0,  2,  2,  2,  9,  2,  2,  2,  2,  2,  2,  2,  0,  0,\n+    0,  0,  0,  1,  2,  2, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,\n+   71, 71, 71,  2,  2,  2, 67, 67, 67, 67, 67, 67, 67, 67, 67,  2,\n+    2,  2,  2,  2,  2,  2,  1,  0,  0,  0,  0,  0,  0,  0, 42, 42,\n+   42, 42, 42, 42, 42, 42, 42, 42, 42, 42,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,\n+   41,  2,  2,  2,  2,  2,118,118,118,118,118,118,118,118,118,118,\n+  118,  2,  2,  2,  2,  2, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,\n+   53, 53, 53, 53,  2, 53, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59,  2,  2,  2,  2, 59, 59, 59, 59, 59, 59,  2,  2, 40, 40,\n+   40, 40, 40, 40, 40, 40, 51, 51, 51, 51, 51, 51, 51, 51, 50, 50,\n+   50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,  2,  2, 50, 50,\n+    2,  2,  2,  2,  2,  2,135,135,135,135,135,135,135,135,135,135,\n+  135,135,  2,  2,  2,  2,106,106,106,106,106,106,106,106,104,104,\n+  104,104,104,104,104,104,104,104,104,104,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,104,161,161,161,161,161,161,161,161,161,161,\n+  161,  2,161,161,161,161,161,161,161,  2,161,161,  2,161,161,161,\n+    2,161,161,161,161,161,161,161,  2,161,161,  2,  2,  2,170,170,\n+  170,170,170,170,170,170,170,170,170,170,  2,  2,  2,  2,110,110,\n+  110,110,110,110,110,110,110,110,110,110,110,110,110,  2,110,110,\n+  110,110,110,110,  2,  2, 19, 19, 19, 19, 19, 19,  2, 19, 19,  2,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19,  2,  2,  2,  2,  2, 47, 47,\n+   47, 47, 47, 47,  2,  2, 47,  2, 47, 47, 47, 47, 47, 47, 47, 47,\n+   47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,  2, 47, 47,  2,\n+    2,  2, 47,  2,  2, 47, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,\n+   81, 81, 81, 81,  2, 81,120,120,120,120,120,120,120,120,116,116,\n+  116,116,116,116,116,116,116,116,116,116,116,116,116,  2,  2,  2,\n+    2,  2,  2,  2,  2,116,128,128,128,128,128,128,128,128,128,128,\n+  128,  2,128,128,  2,  2,  2,  2,  2,128,128,128,128,128, 66, 66,\n+   66, 66, 66, 66, 66, 66, 66, 66, 66, 66,  2,  2,  2, 66, 72, 72,\n+   72, 72, 72, 72, 72, 72, 72, 72,  2,  2,  2,  2,  2, 72, 98, 98,\n+   98, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97,  2,  2,\n+    2,  2, 97, 97, 97, 97,  2,  2, 97, 97, 97, 97, 97, 97, 57, 57,\n+   57, 57,  2, 57, 57,  2,  2,  2,  2,  2, 57, 57, 57, 57, 57, 57,\n+   57, 57,  2, 57, 57, 57,  2, 57, 57, 57, 57, 57, 57, 57, 57, 57,\n+   57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,  2,  2, 57, 57,\n+   57,  2,  2,  2,  2, 57, 57,  2,  2,  2,  2,  2,  2,  2, 88, 88,\n+   88, 88, 88, 88, 88, 88,117,117,117,117,117,117,117,117,112,112,\n+  112,112,112,112,112,112,112,112,112,112,112,112,112,  2,  2,  2,\n+    2,112,112,112,112,112, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,\n+   78, 78, 78, 78,  2,  2,  2, 78, 78, 78, 78, 78, 78, 78, 83, 83,\n+   83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,  2,  2, 82, 82,\n+   82, 82, 82, 82, 82, 82, 82, 82, 82,  2,  2,  2,  2,  2,122,122,\n+  122,122,122,122,122,122,122,122,  2,  2,  2,  2,  2,  2,  2,122,\n+  122,122,122,  2,  2,  2,  2,122,122,122,122,122,122,122, 89, 89,\n+   89, 89, 89, 89, 89, 89, 89,  2,  2,  2,  2,  2,  2,  2,130,130,\n+  130,130,130,130,130,130,130,130,130,  2,  2,  2,  2,  2,  2,  2,\n+  130,130,130,130,130,130,144,144,144,144,144,144,144,144,144,144,\n+    2,  2,  2,  2,  2,  2,165,165,165,165,165,165,165,165,165,165,\n+  165,165,165,165,  2,  2,  2,165,165,165,165,165,165,165,  2,  2,\n+    2,  2,  2,  2,165,165,156,156,156,156,156,156,156,156,156,156,\n+    2,156,156,156,  2,  2,156,156,  2,  2,  2,  2,  2,  2,  2,  2,\n+    3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,147,147,\n+  147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,\n+    2,  2,  2,  2,  2,  2,158,158,158,158,158,158,158,158,158,158,\n+    2,  2,  2,  2,  2,  2,153,153,153,153,153,153,153,153,153,153,\n+  153,153,  2,  2,  2,  2,149,149,149,149,149,149,149,149,149,149,\n+  149,149,149,149,149,  2, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\n+   94, 94, 94, 94,  2,  2,  2,  2, 94, 94, 94, 94, 94, 94,  2,  2,\n+    2,  2,  2,  2,  2, 94, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,\n+   85,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 85,  2,  2,101,101,\n+  101,101,101,101,101,101,101,  2,  2,  2,  2,  2,  2,  2,101,101,\n+    2,  2,  2,  2,  2,  2, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96,  2, 96, 96,111,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,  2,100,100,100,100,100,100,100,100,  2, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2,108,108,\n+  108,108,108,108,108,108,108,108,  2,108,108,108,108,108,108,108,\n+    2,  2,  2,  2,  2,  2,129,129,129,129,129,129,129,  2,129,  2,\n+  129,129,129,129,  2,129,129,129,129,129,129,129,129,129,129,129,\n+  129,129,129,129,  2,129,129,129,  2,  2,  2,  2,  2,  2,109,109,\n+  109,109,109,109,109,109,109,109,109,  2,  2,  2,  2,  2,109,109,\n+    2,  2,  2,  2,  2,  2,107,107,107,107,  2,107,107,107,107,107,\n+  107,107,107,  2,  2,107,107,  2,  2,107,107,107,107,107,107,107,\n+  107,107,107,107,107,107,107,  2,107,107,107,107,107,107,107,  2,\n+  107,107,  2,107,107,107,107,107,  2,  1,107,107,107,107,107,  2,\n+    2,107,107,107,  2,  2,107,  2,  2,  2,  2,  2,  2,107,  2,  2,\n+    2,  2,  2,107,107,107,107,107,107,107,  2,  2,107,107,107,107,\n+  107,107,107,  2,  2,  2,171,171,171,171,171,171,171,171,171,171,\n+    2,171,  2,  2,171,  2,171,171,171,171,171,171,  2,171,171,  2,\n+  171,  2,  2,171,  2,171,171,171,171,  2,171,171,171,171,171,  2,\n+    2,  2,  2,  2,  2,  2,  2,171,171,  2,  2,  2,  2,  2,137,137,\n+  137,137,137,137,137,137,137,137,137,137,  2,137,137,137,137,137,\n+    2,  2,  2,  2,  2,  2,124,124,124,124,124,124,124,124,124,124,\n+    2,  2,  2,  2,  2,  2,123,123,123,123,123,123,123,123,123,123,\n+  123,123,123,123,  2,  2,114,114,114,114,114,114,114,114,114,114,\n+  114,114,114,  2,  2,  2,114,114,  2,  2,  2,  2,  2,  2, 32, 32,\n+   32, 32, 32,  2,  2,  2,102,102,102,102,102,102,102,102,102,102,\n+    2,  2,  2,  2,  2,  2, 33, 33, 33, 33,  2,  2,  2,  2,126,126,\n+  126,126,126,126,126,126,126,126,126,  2,  2,126,126,126,126,126,\n+  126,126,  2,  2,  2,  2,126,126,126,126,126,126,126,  2,142,142,\n+  142,142,142,142,142,142,142,142,142,142,  2,  2,  2,  2,125,125,\n+  125,125,125,125,125,125,125,125,125,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,125,154,154,154,154,154,154,154,  2,  2,154,\n+    2,  2,154,154,154,154,154,154,154,154,  2,154,154,  2,154,154,\n+  154,154,154,154,154,154,154,154,154,154,154,154,  2,154,154,  2,\n+    2,154,154,154,154,154,154,154,  2,  2,  2,  2,  2,  2,150,150,\n+  150,150,150,150,150,150,  2,  2,150,150,150,150,150,150,150,150,\n+  150,150,150,  2,  2,  2,141,141,141,141,141,141,141,141,140,140,\n+  140,140,140,140,140,140,140,140,140,  2,  2,  2,  2,  2,121,121,\n+  121,121,121,121,121,121,121,  2,  2,  2,  2,  2,  2,  2,  7,  7,\n+    2,  2,  2,  2,  2,  2,169,169,169,169,169,169,169,169,169,169,\n+    2,  2,  2,  2,  2,  2,133,133,133,133,133,133,133,133,133,  2,\n+  133,133,133,133,133,133,133,133,133,133,133,133,133,  2,133,133,\n+  133,133,133,133,  2,  2,133,133,133,133,133,  2,  2,  2,134,134,\n+  134,134,134,134,134,134,  2,  2,134,134,134,134,134,134,  2,134,\n+  134,134,134,134,134,134,134,134,134,134,134,134,134,  2,138,138,\n+  138,138,138,138,138,  2,138,138,  2,138,138,138,138,138,138,138,\n+  138,138,138,138,138,138,  2,  2,138,  2,138,138,  2,138,138,138,\n+    2,  2,  2,  2,  2,  2,143,143,143,143,143,143,  2,143,143,  2,\n+  143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,\n+  143,143,143,143,143,  2,143,143,  2,143,143,143,143,143,143,  2,\n+    2,  2,  2,  2,  2,  2,143,143,  2,  2,  2,  2,  2,  2,145,145,\n+  145,145,145,145,145,145,145,  2,  2,  2,  2,  2,  2,  2,163,163,\n+  163,163,163,163,163,163,163,  2,163,163,163,163,163,163,163,163,\n+  163,  2,  2,  2,163,163,163,163,163,  2,  2,  2,  2,  2, 86,  2,\n+    2,  2,  2,  2,  2,  2, 22, 22,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 22, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,\n+    2,  2,  2,  2,  2,  2, 63, 63, 63, 63, 63, 63, 63,  2, 63, 63,\n+   63, 63, 63,  2,  2,  2, 63, 63, 63, 63,  2,  2,  2,  2,157,157,\n+  157,157,157,157,157,157,157,157,157,  2,  2,  2,  2,  2, 80, 80,\n+   80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,  2,  2, 80, 80,\n+   80,  2,  2,  2,  2,  2,127,127,127,127,127,127,127,127,127,127,\n+  127,127,127,127,127,  2,166,166,166,166,166,166,166,166,166,166,\n+    2,  2,  2,  2,  2,  2, 79,  2,  2,  2,  2,  2,  2,  2,115,115,\n+  115,115,115,115,115,115,115,115,115,115,115,115,115,  2,115,115,\n+    2,  2,  2,  2,115,115,159,159,159,159,159,159,159,159,159,159,\n+  159,159,159,159,159,  2,159,159,  2,  2,  2,  2,  2,  2,103,103,\n+  103,103,103,103,103,103,103,103,103,103,103,103,  2,  2,119,119,\n+  119,119,119,119,119,119,119,119,119,119,119,119,  2,  2,119,119,\n+    2,119,119,119,119,119,  2,  2,  2,  2,  2,119,119,119,167,167,\n+  167,167,167,167,167,167,167,167,  2,  2,  2,  2,  2,  2,146,146,\n+  146,146,146,146,146,146,146,146,146,  2,  2,  2,  2,  2, 99, 99,\n+   99, 99, 99, 99, 99, 99, 99, 99, 99,  2,  2,  2,  2, 99,  2,  2,\n+    2,  2,  2,  2,  2, 99,136,139, 13, 13,155,  2,  2,  2,136,136,\n+  136,136,136,136,136,136,155,155,155,155,155,155,155,155,155,155,\n+  155,155,155,155,  2,  2,  2,  2,  2,  2,  2,  2,  2,155,136,  2,\n+    2,  2,  2,  2,  2,  2, 17, 17, 17, 17,  2, 17, 17, 17, 17, 17,\n+   17, 17,  2, 17, 17,  2, 17, 15, 15, 15, 15, 15, 15, 15, 17, 17,\n+   17,  2,  2,  2,  2,  2,  2,  2, 15,  2,  2,  2,  2,  2, 15, 15,\n+   15,  2,  2, 17,  2,  2,  2,  2,  2,  2, 17, 17, 17, 17,139,139,\n+  139,139,139,139,139,139,139,139,139,139,  2,  2,  2,  2,105,105,\n+  105,105,105,105,105,105,105,105,105,  2,  2,  2,  2,  2,105,105,\n+  105,105,105,  2,  2,  2,105,  2,  2,  2,  2,  2,  2,  2,105,105,\n+    2,  2,105,105,105,105,  1,  1,  1,  1,  1,  1,  2,  2,  0,  0,\n+    0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,\n+    1,  1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  2,  2,\n+    0,  2,  2,  0,  0,  2,  2,  0,  0,  0,  0,  2,  0,  0,  0,  0,\n+    2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,\n+    0,  2,  2,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  2,  0,  0,\n+    0,  0,  0,  2,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  2,\n+    0,  0,  0,  0,  0,  0,131,131,131,131,131,131,131,131,131,131,\n+  131,131,  2,  2,  2,  2,  2,  2,  2,131,131,131,131,131,  2,131,\n+  131,131,131,131,131,131,  2,  2,  2,  2,  2, 19, 19, 19, 56, 56,\n+   56, 56, 56, 56, 56,  2, 56,  2,  2, 56, 56, 56, 56, 56, 56, 56,\n+    2, 56, 56,  2, 56, 56, 56, 56, 56,  2,  2,  2,  2,  2,  6,  6,\n+    6,  6,  6,  6,  2,  2,  2,  2,  2,  2,  2,  2,  2,  6,151,151,\n+  151,151,151,151,151,151,151,151,151,151,151,  2,  2,  2,151,151,\n+  151,151,151,151,  2,  2,151,151,  2,  2,  2,  2,151,151,160,160,\n+  160,160,160,160,160,160,160,160,160,160,160,160,160,  2,152,152,\n+  152,152,152,152,152,152,152,152,  2,  2,  2,  2,  2,152,164,164,\n+  164,164,164,164,164,164,164,164,  2,  2,  2,  2,  2,  2,168,168,\n+  168,168,168,168,168,168,168,168,168,  2,  2,  2,  2,168, 30, 30,\n+   30, 30,  2, 30, 30,  2,113,113,113,113,113,113,113,113,113,113,\n+  113,113,113,  2,  2,113,113,113,113,113,113,113,113,  2,132,132,\n+  132,132,132,132,132,132,132,132,132,132,  2,  2,  2,  2,132,132,\n+    2,  2,  2,  2,132,132,  3,  3,  3,  3,  2,  3,  3,  3,  2,  3,\n+    3,  2,  3,  2,  2,  3,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  2,  3,  3,  3,  3,  2,  3,  2,  3,  2,  2,  2,  2,  2,  2,\n+    3,  2,  2,  2,  2,  3,  2,  3,  2,  3,  2,  3,  3,  3,  2,  3,\n+    2,  3,  2,  3,  2,  3,  2,  3,  3,  3,  3,  2,  3,  2,  3,  3,\n+    2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  3,\n+    3,  3,  2,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  0,  0, 15,  0,  0,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,\n+    2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  2,  2,  0, 13,  2,\n+    2,  2,  2,  2,  2,  2, 13, 13, 13,  2,  2,  2,  2,  2,  2,  0,\n+    2,  2,  2,  2,  2,  2,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,\n+    9,  9,  9, 10,  9, 11, 12, 13,  9,  9,  9, 14,  9,  9, 15,  9,\n@@ -3691,2 +3920,0 @@\n-    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 16, 17,\n-    9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 18, 19, 20,  9, 21,  9,\n@@ -3694,0 +3921,2 @@\n+    9,  9, 16, 17,  9,  9,  9,  9, 18,  9,  9,  9,  9,  9, 19, 20,\n+   21,  9, 22,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n@@ -3695,0 +3924,1 @@\n+    9,  9,  9,  9,  9,  9, 23,  9,  9,  9,  9,  9, 24,  9,  9,  9,\n@@ -3697,0 +3927,1 @@\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 25,  9,\n@@ -3698,1 +3929,0 @@\n-    9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 22,  9,  9,  9,  9,  9,\n@@ -3707,6 +3937,8 @@\n-    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 23, 24,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n-    5,  6,  7,  8,  9, 10, 11, 12,  0,  0, 13, 14, 15, 16, 17, 18,\n-   19, 20, 21, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0, 23,  0,  0, 24, 25, 26, 27, 28, 29, 30,  0,  0,\n-   31, 32,  0, 33,  0, 34,  0, 35,  0,  0,  0,  0, 36, 37, 38, 39,\n+    9,  9, 26, 27,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  0,  0, 13, 14,\n+   15, 16, 17, 18, 19, 20, 21, 22,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0, 23,  0,  0, 24, 25, 26, 27, 28,\n+   29, 30,  0,  0, 31, 32,  0, 33,  0, 34,  0, 35,  0,  0,  0,  0,\n+   36, 37, 38, 39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   41, 42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3714,1 +3946,8 @@\n-    0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0, 41, 42,  0,  0,\n+    0,  0,  0,  0,  0,  0, 43, 44,  0, 45,  0,  0,  0,  0,  0,  0,\n+   46, 47,  0,  0,  0,  0,  0, 48,  0, 49,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0, 50, 51,  0,  0,  0, 52,  0,  0,\n+   53,  0,  0,  0,  0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0,\n+   55,  0,  0,  0,  0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,  0,\n+    0, 57,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0, 58, 59, 60, 61, 62, 63, 64, 65,\n+    0,  0,  0,  0,  0,  0, 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3717,5 +3956,0 @@\n-    0,  0, 43, 44,  0, 45,  0,  0,  0,  0,  0,  0, 46, 47,  0,  0,\n-    0,  0,  0, 48,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0, 50, 51,  0,  0,  0, 52,  0,  0, 53,  0,  0,  0,\n-    0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0,\n-    0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,  0,  0, 57,  0,  0,\n@@ -3723,2 +3957,0 @@\n-    0,  0,  0,  0, 58, 59, 60, 61, 62, 63, 64, 65,  0,  0,  0,  0,\n-    0,  0, 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3726,0 +3958,7 @@\n+    0,  0,  0,  0, 67, 68,  0, 69, 70,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n+   83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n+   99,100,101,102,103,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,104,  0,  0,  0,  0,  0,  0,105,106,  0,\n+  107,  0,  0,  0,108,  0,109,  0,110,  0,111,112,113,  0,114,  0,\n+    0,  0,115,  0,  0,  0,116,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3727,0 +3966,3 @@\n+    0,117,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,118,119,120,121,  0,122,123,124,\n+  125,126,  0,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3728,0 +3970,3 @@\n+    0,  0,  0,  0,128,129,130,131,132,133,134,135,136,137,138,139,\n+  140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,\n+  156,157,  0,  0,  0,158,159,160,161,  0,  0,  0,  0,  0,  0,  0,\n@@ -3729,8 +3974,0 @@\n-   67, 68,  0, 69, 70,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-   71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\n-   87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,\n-  103,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,104,  0,  0,  0,  0,  0,  0,105,106,  0,107,  0,  0,  0,\n-  108,  0,109,  0,110,  0,111,112,113,  0,114,  0,  0,  0,115,  0,\n-    0,  0,116,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,117,  0,  0,\n@@ -3738,1 +3975,2 @@\n-    0,  0,  0,  0,118,119,120,121,  0,122,123,124,125,126,  0,127,\n+  162,  0,163,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,164,165,  0,\n+    0,  0,  0,  0,  0,  0,166,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3740,0 +3978,3 @@\n+    0,  0,  0,  0,  0,  0,  0,  0,167,  0,  0,  0,168,169,  0,  0,\n+  170,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,171,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,172,\n@@ -3741,5 +3982,1 @@\n-  128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,\n-  144,145,146,147,148,149,150,151,152,153,154,155,156,157,  0,  0,\n-    0,158,159,160,161,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,162,163,  0,  0,  0,  0,  0,\n-    0,  0,164,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,173,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3747,3 +3984,1 @@\n-    0,  0,  0,  0,165,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,166,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,167,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,174,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -3751,1 +3986,1 @@\n-    0,  0,  0,168,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,175,  0,  0,  0,  0,  0,\n@@ -3753,5 +3988,6 @@\n-    0,  0,  0,  0,  0,169,170,  0,  0,  0,  0,171,172,  0,  0,  0,\n-  173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,\n-  189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,\n-  205,206,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,176,177,  0,  0,  0,  0,178,\n+  179,  0,  0,  0,180,181,182,183,184,185,186,187,188,189,190,191,\n+  192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,\n+  208,209,210,211,212,213,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    1,  2,  3,  4,\n@@ -3760,1 +3996,1 @@\n-_hb_ucd_u16[10060] =\n+_hb_ucd_u16[9668] =\n@@ -3779,3 +4015,4 @@\n-    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 168, 169,  48,  48,\n-   168,  48,  48, 170, 171, 172,  48,  48,  48, 171,  48,  48,  48, 173, 174, 175,\n-    48, 176,   9,   9,   9,   9,   9, 177, 178,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48, 168, 169,  48,  48, 168,  48,  48, 170, 171, 172,  48,  48,\n+    48, 171,  48,  48,  48, 173, 174, 175,  48, 176,   9,   9,   9,   9,   9, 177,\n+   178,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n@@ -3794,22 +4031,28 @@\n-   279, 279, 279, 279, 279, 279, 279, 279, 280, 209, 281, 209, 209, 209, 209, 282,\n-   209, 283, 279, 284, 209, 285, 286, 209, 209, 209, 287, 140, 288, 140, 271, 271,\n-   271, 289, 209, 209, 209, 209, 290, 271, 209, 209, 209, 209, 209, 209, 209, 209,\n-   209, 209, 209, 291, 292, 209, 209, 293, 209, 209, 209, 209, 209, 209, 294, 209,\n-   209, 209, 209, 209, 209, 209, 295, 296, 271, 297, 209, 209, 298, 279, 299, 279,\n-   300, 301, 279, 279, 279, 302, 279, 303, 209, 209, 209, 279, 304, 209, 209, 305,\n-   209, 306, 209, 209, 209, 209, 209, 209,   9,   9,   9,  11,  11,  11, 307, 308,\n-    13,  13,  13,  13,  13,  13, 309, 310,  11,  11, 311,  48,  48,  48, 312, 313,\n-    48, 314, 315, 315, 315, 315,  32,  32, 316, 317, 318, 319, 320, 321, 140, 140,\n-   209, 322, 209, 209, 209, 209, 209, 323, 209, 209, 209, 209, 209, 324, 140, 209,\n-   325, 326, 327, 328, 136,  48,  48,  48,  48, 329, 178,  48,  48,  48,  48, 330,\n-   331,  48,  48, 136,  48,  48,  48,  48, 200, 332,  48,  48, 209, 209, 333,  48,\n-   209, 334, 335, 209, 336, 337, 209, 209, 335, 209, 209, 337, 209, 209, 209, 209,\n-    48,  48,  48,  48, 209, 209, 209, 209,  48, 338,  48,  48,  48,  48,  48,  48,\n-   151, 209, 209, 209, 287,  48,  48, 229, 339,  48, 340, 140,  13,  13, 341, 342,\n-    13, 343,  48,  48,  48,  48, 344, 345,  31, 346, 347, 348,  13,  13,  13, 349,\n-   350, 351, 352, 353, 354, 355, 140, 356, 357,  48, 358, 359,  48,  48,  48, 360,\n-   361,  48,  48, 362, 363, 192,  32, 364,  64,  48, 365,  48, 366, 367,  48, 151,\n-    76,  48,  48, 368, 369, 370, 371, 372,  48,  48, 373, 374, 375, 376,  48, 377,\n-    48,  48,  48, 378, 379, 380, 381, 382, 383, 384, 315,  11,  11, 385, 386,  11,\n-    11,  11,  11,  11,  48,  48, 387, 192,  48,  48, 388,  48, 389,  48,  48, 206,\n-   390, 390, 390, 390, 390, 390, 390, 390, 391, 391, 391, 391, 391, 391, 391, 391,\n+   279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279,\n+   280, 209, 281, 209, 209, 209, 209, 282, 209, 283, 279, 284, 209, 285, 286, 209,\n+   209, 209, 176, 140, 287, 140, 271, 271, 271, 288, 209, 209, 209, 209, 289, 271,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 290, 291, 209, 209, 292,\n+   209, 209, 209, 209, 209, 209, 293, 209, 209, 209, 209, 209, 209, 209, 209, 209,\n+   209, 209, 209, 209, 209, 209, 294, 295, 271, 296, 209, 209, 297, 279, 298, 279,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209,\n+   279, 279, 279, 279, 279, 279, 279, 279, 299, 300, 279, 279, 279, 301, 279, 302,\n+   209, 209, 209, 279, 303, 209, 209, 304, 209, 305, 209, 209, 209, 209, 209, 209,\n+     9,   9,   9,  11,  11,  11, 306, 307,  13,  13,  13,  13,  13,  13, 308, 309,\n+    11,  11, 310,  48,  48,  48, 311, 312,  48, 313, 314, 314, 314, 314,  32,  32,\n+   315, 316, 317, 318, 319, 320, 140, 140, 209, 321, 209, 209, 209, 209, 209, 322,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 323, 140, 209,\n+   324, 325, 326, 327, 136,  48,  48,  48,  48, 328, 178,  48,  48,  48,  48, 329,\n+   330,  48,  48, 136,  48,  48,  48,  48, 200, 331,  48,  48, 209, 209, 332,  48,\n+   209, 333, 334, 209, 335, 336, 209, 209, 334, 209, 209, 336, 209, 209, 209, 209,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 209, 209, 209, 209,\n+    48, 337,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48, 151, 209, 209, 209, 338,  48,  48, 229,\n+   339,  48, 340, 140,  13,  13, 341, 342,  13, 343,  48,  48,  48,  48, 344, 345,\n+    31, 346, 347, 348,  13,  13,  13, 349, 350, 351, 352, 353, 354, 355, 140, 356,\n+   357,  48, 358, 359,  48,  48,  48, 360, 361,  48,  48, 362, 363, 192,  32, 364,\n+    64,  48, 365,  48, 366, 367,  48, 151,  76,  48,  48, 368, 369, 370, 371, 372,\n+    48,  48, 373, 374, 375, 376,  48, 377,  48,  48,  48, 378, 379, 380, 381, 382,\n+   383, 384, 314,  11,  11, 385, 386,  11,  11,  11,  11,  11,  48,  48, 387, 192,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 388,  48, 389,  48,  48, 206,\n+   390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,\n@@ -3826,2 +4069,2 @@\n-    48,  48, 440,  48,  48,  48, 441, 442, 442, 443, 444, 445, 140, 140, 140, 140,\n-    48,  48,  48, 314,  48, 199, 440, 140, 446,  27,  27, 447, 140, 140, 140, 140,\n+    48,  48, 440,  48,  48,  48, 441, 442, 442, 443, 444, 445,  48,  48,  48, 388,\n+    48,  48,  48, 313,  48, 199, 440, 140, 446,  27,  27, 447, 140, 140, 140, 140,\n@@ -3833,55 +4076,83 @@\n-    48,  48, 475, 192, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 271, 476,\n-    48,  48, 477, 478, 140, 140, 140, 479,  48, 464, 480,  48,  62, 481, 140,  48,\n-   482, 140, 140,  48, 483, 140,  48, 314, 484,  48,  48, 485, 486, 457, 487, 488,\n-   222,  48,  48, 489, 490,  48, 196, 192, 491,  48, 492, 493, 494,  48,  48, 495,\n-   222,  48,  48, 496, 497, 498, 499, 500,  48,  97, 501, 502, 503, 140, 140, 140,\n-   504, 505, 506,  48,  48, 507, 508, 192, 509,  83,  84, 510, 511, 512, 513, 514,\n-    48,  48,  48, 515, 516, 517, 478, 140,  48,  48,  48, 518, 519, 192, 140, 140,\n-    48,  48, 520, 521, 522, 523, 140, 140,  48,  48,  48, 524, 525, 192, 526, 140,\n-    48,  48, 527, 528, 192, 140, 140, 140,  48, 173, 529, 530, 314, 140, 140, 140,\n-    48,  48, 501, 531, 140, 140, 140, 140, 140, 140,   9,   9,  11,  11, 148, 532,\n-   533, 534,  48, 535, 536, 192, 140, 140, 140, 140, 537,  48,  48, 538, 539, 140,\n-   540,  48,  48, 541, 542, 543,  48,  48, 544, 545, 546,  48,  48,  48,  48, 196,\n-   547, 140, 140, 140, 140, 140, 140, 140,  84,  48, 520, 548, 549, 148, 175, 550,\n-    48, 551, 552, 553, 140, 140, 140, 140, 554,  48,  48, 555, 556, 192, 557,  48,\n-   558, 559, 192, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 560,\n-   561, 115,  48, 562, 563, 192, 140, 140, 140, 140, 140, 100, 271, 564, 565, 566,\n-    48, 207, 140, 140, 140, 140, 140, 140, 272, 272, 272, 272, 272, 272, 567, 568,\n-    48,  48,  48,  48, 388, 140, 140, 140, 140,  48,  48,  48,  48,  48,  48, 569,\n-    48,  48,  48, 570, 571, 572, 140, 140,  48,  48,  48,  48, 314, 140, 140, 140,\n-    48,  48,  48, 196,  48, 200, 370,  48,  48,  48,  48, 200, 192,  48, 204, 573,\n-    48,  48,  48, 574, 575, 576, 577, 578,  48, 140, 140, 140, 140, 140, 140, 140,\n-   140, 140, 140, 140,   9,   9,  11,  11, 271, 579, 140, 140, 140, 140, 140, 140,\n-    48,  48,  48,  48, 580, 581, 582, 582, 583, 584, 140, 140, 140, 140, 585, 586,\n-    48,  48,  48,  48,  48,  48,  48, 440,  48,  48,  48,  48,  48, 199, 140, 140,\n-   196, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 587,\n-    48,  48, 588, 589, 140, 590, 591,  48,  48,  48,  48,  48,  48,  48,  48, 206,\n-    48,  48,  48,  48,  48,  48,  71, 151, 196, 592, 593, 140, 140, 140, 140, 140,\n-    32,  32, 594,  32, 595, 209, 209, 209, 209, 209, 209, 209, 323, 140, 140, 140,\n-   209, 209, 209, 209, 209, 209, 209, 324, 209, 209, 596, 209, 209, 209, 597, 598,\n-   599, 209, 600, 209, 209, 209, 288, 140, 209, 209, 209, 209, 601, 140, 140, 140,\n-   140, 140, 140, 140, 271, 602, 271, 602, 209, 209, 209, 209, 209, 287, 271, 461,\n-     9, 603,  11, 604, 605, 606, 241,   9, 607, 608, 609, 610, 611,   9, 603,  11,\n-   612, 613,  11, 614, 615, 616, 617,   9, 618,  11,   9, 603,  11, 604, 605,  11,\n-   241,   9, 607, 617,   9, 618,  11,   9, 603,  11, 619,   9, 620, 621, 622, 623,\n-    11, 624,   9, 625, 626, 627, 628,  11, 629,   9, 630,  11, 631, 632, 632, 632,\n-    32,  32,  32, 633,  32,  32, 634, 635, 636, 637,  45, 140, 140, 140, 140, 140,\n-   638, 639, 640, 140, 140, 140, 140, 140, 641, 642, 643,  27,  27,  27, 644, 140,\n-   645, 140, 140, 140, 140, 140, 140, 140,  48,  48, 151, 646, 647, 140, 140, 140,\n-   140,  48, 648, 140,  48,  48, 649, 650, 140, 140, 140, 140, 140,  48, 651, 192,\n-   140, 140, 140, 140, 140, 140, 652, 200,  48,  48,  48,  48, 653, 595, 140, 140,\n-     9,   9, 607,  11, 654, 370, 140, 140, 140, 140, 140, 140, 140, 140, 140, 499,\n-   271, 271, 655, 656, 140, 140, 140, 140, 499, 271, 657, 658, 140, 140, 140, 140,\n-   659,  48, 660, 661, 662, 663, 664, 665, 666, 206, 667, 206, 140, 140, 140, 668,\n-   209, 209, 669, 209, 209, 209, 209, 209, 209, 323, 334, 670, 670, 670, 209, 324,\n-   671, 209, 209, 209, 209, 209, 209, 209, 209, 209, 672, 140, 140, 140, 673, 209,\n-   674, 209, 209, 669, 675, 676, 324, 140, 209, 209, 209, 209, 209, 209, 209, 677,\n-   209, 209, 209, 209, 209, 678, 426, 426, 209, 209, 209, 209, 209, 209, 209, 679,\n-   209, 209, 209, 209, 209, 176, 669, 427, 669, 209, 209, 209, 680, 176, 209, 209,\n-   680, 209, 672, 676, 140, 140, 140, 140, 209, 209, 209, 209, 209, 323, 672, 426,\n-   675, 209, 209, 681, 682, 669, 675, 675, 209, 683, 209, 209, 288, 140, 140, 192,\n-    48,  48,  48,  48,  48,  48, 140, 140,  48,  48,  48, 207,  48,  48,  48,  48,\n-    48, 204,  48,  48,  48,  48,  48,  48,  48,  48, 478,  48,  48,  48,  48,  48,\n-    48,  48,  48,  48,  48,  48, 100,  48,  48,  48,  48,  48,  48, 204, 140, 140,\n-    48, 204, 140, 140, 140, 140, 140, 140,  48,  48,  48,  48,  71,  48,  48,  48,\n-    48,  48,  48, 140, 140, 140, 140, 140, 684, 140, 570, 570, 570, 570, 570, 570,\n+    48,  48, 475, 192, 476,   9, 477,  11, 478, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 271, 479,  48,  48, 480, 481, 482, 140, 140, 483,\n+    48, 464, 484,  48,  62, 485, 140,  48, 486, 140, 140,  48, 487, 140,  48, 313,\n+   488,  48,  48, 489, 490, 457, 491, 492, 222,  48,  48, 493, 494,  48, 196, 192,\n+   495,  48, 496, 497, 498,  48,  48, 499, 222,  48,  48, 500, 501, 502, 503, 504,\n+    48,  97, 505, 506, 507, 140, 140, 140, 508, 509, 510,  48,  48, 511, 512, 192,\n+   513,  83,  84, 514, 515, 516, 517, 518, 519,  48,  48, 520, 521, 522, 523, 140,\n+    48,  48,  48, 524, 525, 526, 481, 140,  48,  48,  48, 527, 528, 192, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140,  48,  48, 529, 530, 531, 532, 140, 140,\n+    48,  48,  48, 533, 534, 192, 535, 140,  48,  48, 536, 537, 192, 538, 539, 140,\n+    48, 540, 541, 542, 313, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48,  48, 505, 543, 140, 140, 140, 140, 140, 140,   9,   9,  11,  11, 148, 544,\n+   545, 546,  48, 547, 548, 192, 140, 140, 140, 140, 549,  48,  48, 550, 551, 140,\n+   552,  48,  48, 553, 554, 555,  48,  48, 556, 557, 558,  48,  48,  48,  48, 196,\n+   559, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48,  48, 560, 192,\n+    84,  48, 529, 561, 562, 148, 175, 563,  48, 564, 565, 566, 140, 140, 140, 140,\n+   567,  48,  48, 568, 569, 192, 570,  48, 571, 572, 192, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 573,\n+   574, 115,  48, 575, 576, 577, 140, 140, 140, 140, 140, 100, 271, 578, 579, 580,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48, 207, 140, 140, 140, 140, 140, 140,\n+   272, 272, 272, 272, 272, 272, 581, 582,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48, 388, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140,  48,  48,  48,  48,  48,  48, 583,\n+    48,  48,  48, 584, 585, 586,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  71,\n+    48,  48,  48,  48, 313, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48, 587, 588, 192, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48,  48,  48, 196,  48, 200, 370,  48,  48,  48,  48, 200, 192,  48, 204, 589,\n+    48,  48,  48, 590, 591, 592, 593, 594,  48, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 595,  48, 596, 192, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140,   9,   9,  11,  11, 271, 597, 140, 140, 140, 140, 140, 140,\n+    48,  48,  48,  48, 598, 599, 600, 600, 601, 602, 140, 140, 140, 140, 603, 604,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 440,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 199, 140, 605,\n+   196, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 606,\n+    48,  48, 607, 608, 140, 609, 610,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 206,\n+    48,  48,  48,  48,  48,  48,  71, 151, 196, 611, 612, 140, 140, 140, 140, 140,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 192,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 322, 140, 140, 140, 140,\n+    32,  32, 613,  32, 614, 209, 209, 209, 209, 209, 209, 209, 322, 140, 140, 140,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 323,\n+   209, 209, 615, 209, 209, 209, 616, 617, 618, 209, 619, 209, 209, 209, 287, 140,\n+   209, 209, 209, 209, 620, 140, 140, 140, 140, 140, 140, 140, 271, 621, 271, 621,\n+   209, 209, 209, 209, 209, 338, 271, 461, 140, 140, 140, 140, 140, 140, 140, 140,\n+     9, 622,  11, 623, 624, 625, 241,   9, 626, 627, 628, 629, 630,   9, 622,  11,\n+   631, 632,  11, 633, 634, 635, 636,   9, 637,  11,   9, 622,  11, 623, 624,  11,\n+   241,   9, 626, 636,   9, 637,  11,   9, 622,  11, 638,   9, 639, 640, 641, 642,\n+    11, 643,   9, 644, 645, 646, 647,  11, 648,   9, 649,  11, 650, 538, 538, 538,\n+    32,  32,  32, 651,  32,  32, 652, 653, 654, 655,  45, 140, 140, 140, 140, 140,\n+   656, 657, 658, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   659, 660, 661,  27,  27,  27, 662, 140, 663, 140, 140, 140, 140, 140, 140, 140,\n+    48,  48, 151, 664, 665, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 666, 140,  48,  48, 667, 668,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 669, 192,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,  48, 587, 670,\n+   140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 671, 200,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 672, 614, 140, 140,\n+     9,   9, 626,  11, 673, 370, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   140, 140, 140, 140, 140, 140, 140, 503, 271, 271, 674, 675, 140, 140, 140, 140,\n+   503, 271, 676, 677, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   678,  48, 679, 680, 681, 682, 683, 684, 685, 206, 686, 206, 140, 140, 140, 687,\n+   209, 209, 688, 209, 209, 209, 209, 209, 209, 322, 333, 689, 689, 689, 209, 323,\n+   690, 209, 209, 209, 209, 209, 209, 209, 209, 209, 691, 140, 140, 140, 692, 209,\n+   693, 209, 209, 688, 694, 695, 323, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 696,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 697, 426, 426,\n+   209, 209, 209, 209, 209, 209, 209, 698, 209, 209, 209, 209, 209, 176, 688, 427,\n+   688, 209, 209, 209, 699, 176, 209, 209, 699, 209, 691, 688, 695, 140, 140, 140,\n+   209, 209, 209, 209, 209, 322, 691, 426, 700, 209, 209, 209, 701, 702, 176, 694,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 703, 209, 209, 209, 209, 209, 192,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 140, 140,\n+    48,  48,  48, 207,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48, 204,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 481,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 100,  48,\n+    48,  48,  48,  48,  48, 204, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48, 204, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,\n+    48,  48,  48,  48,  71,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 140, 140, 140, 140, 140,\n+   704, 140, 584, 584, 584, 584, 584, 584, 140, 140, 140, 140, 140, 140, 140, 140,\n@@ -3889,309 +4160,243 @@\n-   391, 391, 391, 391, 391, 391, 391, 685, 391, 391, 391, 391, 391, 391, 391, 686,\n-     0,   0,   0,   0,   1,   2,   1,   2,   0,   0,   3,   3,   4,   5,   4,   5,\n-     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   6,   0,   0,   7,   0,\n-     8,   8,   8,   8,   8,   8,   8,   9,  10,  11,  12,  11,  11,  11,  13,  11,\n-    14,  14,  14,  14,  14,  14,  14,  14,  15,  14,  14,  14,  14,  14,  14,  14,\n-    14,  14,  14,  16,  17,  18,  17,  17,  19,  20,  21,  21,  22,  21,  23,  24,\n-    25,  26,  27,  27,  28,  29,  27,  30,  27,  27,  27,  27,  27,  31,  27,  27,\n-    32,  33,  33,  33,  34,  27,  27,  27,  35,  35,  35,  36,  37,  37,  37,  38,\n-    39,  39,  40,  41,  42,  43,  44,  27,  45,  46,  27,  27,  27,  27,  47,  27,\n-    48,  48,  48,  48,  48,  49,  50,  48,  51,  52,  53,  54,  55,  56,  57,  58,\n-    59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,\n-    75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,\n-    91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106,\n-   107, 108, 109, 109, 110, 111, 112, 109, 113, 114, 115, 116, 117, 118, 119, 120,\n-   121, 122, 122, 123, 122, 124, 125, 125, 126, 127, 128, 129, 130, 131, 125, 125,\n-   132, 132, 132, 132, 133, 132, 134, 135, 132, 133, 132, 136, 136, 137, 125, 125,\n-   138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 139, 139, 140, 139, 139, 141,\n-   142, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 143, 144, 145, 143, 143,\n-   144, 143, 143, 146, 147, 148, 143, 143, 143, 147, 143, 143, 143, 149, 143, 150,\n-   143, 151, 152, 152, 152, 152, 152, 153, 154, 154, 154, 154, 154, 154, 154, 154,\n-   155, 156, 157, 157, 157, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\n-   168, 168, 168, 168, 168, 169, 170, 170, 171, 172, 173, 173, 173, 173, 173, 174,\n-   173, 173, 175, 154, 154, 154, 154, 176, 177, 178, 179, 179, 180, 181, 182, 183,\n-   184, 184, 185, 184, 186, 187, 168, 168, 188, 189, 190, 190, 190, 191, 190, 192,\n-   193, 193, 194,   8, 195, 125, 125, 125, 196, 196, 196, 196, 197, 196, 196, 198,\n-   199, 199, 199, 199, 200, 200, 200, 201, 202, 202, 202, 203, 204, 205, 205, 205,\n-   206, 139, 139, 207, 208, 209, 210, 211,   4,   4, 212,   4,   4, 213, 214, 215,\n-     4,   4,   4, 216,   8,   8,   8,   8,  11, 217,  11,  11, 217, 218,  11, 219,\n-    11,  11,  11, 220, 220, 221,  11, 222, 223,   0,   0,   0,   0,   0, 224, 225,\n-   226, 227,   0,   0, 228,   8,   8, 229,   0,   0, 230, 231, 232,   0,   4,   4,\n-   233,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0, 234, 125, 235, 125,   0,   0, 236, 236, 236, 236, 236, 236, 236, 236,\n-     0,   0,   0,   0,   0,   0,   0, 237,   0, 238,   0,   0,   0,   0,   0,   0,\n-   239, 239, 239, 239, 239, 239,   4,   4, 240, 240, 240, 240, 240, 240, 240, 241,\n-   139, 139, 140, 242, 242, 242, 243, 244, 143, 245, 246, 246, 246, 246,  14,  14,\n-     0,   0,   0,   0,   0, 247, 125, 125, 248, 249, 248, 248, 248, 248, 248, 250,\n-   248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 251, 125,   0,\n-   252,   0, 253, 254, 255, 256, 256, 256, 256, 257, 258, 259, 259, 259, 259, 260,\n-   261, 262, 262, 263, 142, 142, 142, 142, 264,   0, 262, 262,   0,   0, 265, 259,\n-   142, 264,   0,   0,   0,   0, 142, 266,   0,   0,   0,   0,   0, 259, 259, 267,\n-   259, 259, 259, 259, 259, 268,   0,   0, 248, 248, 248, 248,   0,   0,   0,   0,\n-   269, 269, 269, 269, 269, 269, 269, 269, 270, 269, 269, 269, 271, 272, 272, 272,\n-   273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 274, 125,  14,  14,  14,  14,\n-    14,  14, 275, 275, 275, 275, 275, 276,   0,   0, 277,   4,   4,   4,   4,   4,\n-   278,   4,   4,   4, 279, 280, 125, 281, 282, 282, 283, 284, 285, 285, 285, 286,\n-   287, 287, 287, 287, 288, 289,  48,  48, 290, 290, 291, 292, 292, 293, 142, 294,\n-   295, 295, 295, 295, 296, 297, 138, 298, 299, 299, 299, 300, 301, 302, 138, 138,\n-   303, 303, 303, 303, 304, 305, 306, 307, 308, 309, 246,   4,   4, 310, 311, 152,\n-   152, 152, 152, 152, 306, 306, 312, 313, 142, 142, 314, 142, 315, 142, 142, 316,\n-   125, 125, 125, 125, 125, 125, 125, 125, 248, 248, 248, 248, 248, 248, 317, 248,\n-   248, 248, 248, 248, 248, 318, 125, 125, 319, 320,  21, 321, 322,  27,  27,  27,\n-    27,  27,  27,  27, 323, 324,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,\n-    27,  27,  27, 325,  27,  27,  27,  27,  27, 326,  27,  27, 327, 125, 125,  27,\n-     8, 284, 328,   0,   0, 329, 330, 331,  27,  27,  27,  27,  27,  27,  27, 332,\n-   333,   0,   1,   2,   1,   2, 334, 258, 259, 335, 142, 264, 336, 337, 338, 339,\n-   340, 341, 342, 343, 344, 344, 125, 125, 341, 341, 341, 341, 341, 341, 341, 345,\n-   346,   0,   0, 347,  11,  11,  11,  11, 348, 349, 350, 125, 125,   0,   0, 351,\n-   352, 353, 354, 354, 354, 355, 356, 357, 358, 358, 359, 360, 361, 362, 362, 363,\n-   364, 365, 366, 366, 367, 368, 125, 125, 369, 369, 369, 369, 369, 370, 370, 370,\n-   371, 372, 373, 374, 374, 375, 374, 376, 377, 377, 378, 379, 379, 379, 380, 381,\n-   381, 382, 383, 384, 125, 125, 125, 125, 385, 385, 385, 385, 385, 385, 385, 385,\n-   385, 385, 385, 386, 385, 387, 388, 125, 389,   4,   4, 390, 125, 125, 125, 125,\n-   391, 392, 392, 393, 394, 395, 396, 396, 397, 398, 399, 125, 125, 125, 400, 401,\n-   402, 403, 404, 405, 125, 125, 125, 125, 406, 406, 407, 408, 407, 409, 407, 407,\n-   410, 411, 412, 413, 414, 414, 415, 415, 416, 416, 125, 125, 417, 417, 418, 419,\n-   420, 420, 420, 421, 422, 423, 424, 425, 426, 427, 428, 125, 125, 125, 125, 125,\n-   429, 429, 429, 429, 430, 125, 125, 125, 431, 431, 431, 432, 431, 431, 431, 433,\n-   434, 434, 435, 436, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125,  27,  45,\n-   437, 437, 438, 439, 125, 125, 125, 440, 441, 441, 442, 443, 443, 444, 125, 445,\n-   446, 125, 125, 447, 448, 125, 449, 450, 451, 451, 451, 451, 452, 453, 451, 454,\n-   455, 455, 455, 455, 456, 457, 458, 459, 460, 460, 460, 461, 462, 463, 463, 464,\n-   465, 465, 465, 465, 465, 465, 466, 467, 468, 469, 468, 468, 470, 125, 125, 125,\n-   471, 472, 473, 474, 474, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484,\n-   485, 485, 485, 485, 485, 486, 487, 125, 488, 488, 488, 488, 489, 490, 125, 125,\n-   491, 491, 491, 492, 491, 493, 125, 125, 494, 494, 494, 494, 495, 496, 497, 125,\n-   498, 498, 498, 499, 499, 125, 125, 125, 500, 501, 502, 500, 503, 125, 125, 125,\n-   504, 504, 504, 505, 125, 125, 125, 125, 125, 125, 506, 506, 506, 506, 506, 507,\n-   508, 509, 510, 511, 512, 513, 125, 125, 125, 125, 514, 515, 515, 514, 516, 125,\n-   517, 517, 517, 517, 518, 519, 519, 519, 519, 519, 520, 154, 521, 521, 521, 522,\n-   523, 125, 125, 125, 125, 125, 125, 125, 524, 525, 525, 526, 527, 525, 528, 529,\n-   529, 530, 531, 532, 125, 125, 125, 125, 533, 534, 534, 535, 536, 537, 538, 539,\n-   540, 541, 542, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 543, 544,\n-   545, 546, 545, 547, 545, 548, 125, 125, 125, 125, 125, 549, 550, 550, 550, 551,\n-   552, 552, 552, 552, 552, 552, 552, 552, 552, 553, 125, 125, 125, 125, 125, 125,\n-   552, 552, 552, 552, 552, 552, 554, 555, 552, 552, 552, 552, 556, 125, 125, 125,\n-   125, 557, 557, 557, 557, 557, 557, 558, 559, 559, 559, 559, 559, 559, 559, 559,\n-   559, 559, 559, 559, 559, 560, 125, 125, 561, 561, 561, 561, 561, 561, 561, 561,\n-   561, 561, 561, 561, 562, 125, 125, 125, 275, 275, 275, 275, 275, 275, 275, 275,\n-   275, 275, 275, 563, 564, 565, 566, 567, 567, 567, 567, 568, 569, 570, 571, 572,\n-   573, 573, 573, 573, 574, 575, 576, 577, 573, 125, 125, 125, 125, 125, 125, 125,\n-   125, 125, 125, 125, 578, 578, 578, 578, 578, 579, 125, 125, 125, 125, 125, 125,\n-   580, 580, 580, 580, 581, 580, 580, 580, 582, 580, 125, 125, 125, 125, 583, 584,\n-   585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 586,\n-   587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 588, 125, 125,\n-   589, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 590,\n-   591, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256,\n-   256, 256, 592, 593, 125, 594, 595, 596, 596, 596, 596, 596, 596, 596, 596, 596,\n-   596, 596, 596, 596, 596, 596, 596, 597, 598, 598, 598, 598, 598, 598, 599, 600,\n-   601, 602, 603, 125, 125, 125, 125, 125,   8,   8, 604,   8, 605,   0,   0,   0,\n-     0,   0,   0,   0, 603, 125, 125, 125,   0,   0,   0,   0,   0,   0,   0, 606,\n-     0,   0, 607,   0,   0,   0, 608, 609, 610,   0, 611,   0,   0,   0, 235, 125,\n-    11,  11,  11,  11, 612, 125, 125, 125, 125, 125, 125, 125,   0, 603,   0, 603,\n-     0,   0,   0,   0,   0, 234,   0, 613,   0,   0,   0,   0,   0, 224,   0,   0,\n-     0, 614, 615, 616, 617,   0,   0,   0, 618, 619,   0, 620, 621, 622,   0,   0,\n-     0,   0, 623,   0,   0,   0,   0,   0,   0,   0,   0,   0, 624,   0,   0,   0,\n-   625, 625, 625, 625, 625, 625, 625, 625, 626, 627, 628, 125, 125, 125, 125, 125,\n-     4, 629, 630, 125, 125, 125, 125, 125, 631, 632, 633,  14,  14,  14, 634, 125,\n-   635, 125, 125, 125, 125, 125, 125, 125, 636, 636, 637, 638, 639, 125, 125, 125,\n-   125, 640, 641, 125, 642, 642, 642, 643, 125, 125, 125, 125, 125, 644, 644, 645,\n-   125, 125, 125, 125, 125, 125, 646, 647, 648, 648, 648, 648, 648, 648, 648, 648,\n-   648, 648, 648, 648, 649, 650, 125, 125, 651, 651, 651, 651, 652, 653, 125, 125,\n-   125, 125, 125, 125, 125, 125, 125, 333,   0,   0,   0, 654, 125, 125, 125, 125,\n-   333,   0,   0, 247, 125, 125, 125, 125, 655,  27, 656, 657, 658, 659, 660, 661,\n-   662, 663, 664, 663, 125, 125, 125, 665,   0,   0, 357,   0,   0,   0,   0,   0,\n-     0, 603, 226, 333, 333, 333,   0, 606,   0,   0, 247, 125, 125, 125, 666,   0,\n-   667,   0,   0, 357, 613, 668, 606, 125,   0,   0,   0,   0,   0, 669, 349, 349,\n-     0,   0,   0,   0,   0,   0,   0, 670,   0,   0,   0,   0,   0, 284, 357, 228,\n-   357,   0,   0,   0, 671, 284,   0,   0, 671,   0, 247, 668, 125, 125, 125, 125,\n-     0,   0,   0,   0,   0, 603, 247, 349, 613,   0,   0, 672, 673, 357, 613, 613,\n-     0, 329,   0,   0, 235, 125, 125, 284, 248, 248, 248, 248, 248, 248, 125, 125,\n-   248, 248, 248, 318, 248, 248, 248, 248, 248, 317, 248, 248, 248, 248, 248, 248,\n-   248, 248, 584, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 674, 248,\n-   248, 248, 248, 248, 248, 317, 125, 125, 248, 317, 125, 125, 125, 125, 125, 125,\n-   248, 248, 248, 248, 675, 248, 248, 248, 248, 248, 248, 125, 125, 125, 125, 125,\n-   676, 125,   0,   0,   0,   0,   0,   0,   8,   8,   8,   8,   8,   8,   8,   8,\n-     8,   8,   8,   8,   8,   8,   8,   0,   0,   0,   0,   0,   1,   2,   2,   2,\n-     2,   2,   3,   0,   0,   0,   4,   0,   2,   2,   2,   2,   2,   3,   2,   2,\n-     2,   2,   5,   0,   2,   5,   6,   0,   7,   7,   7,   7,   8,   9,  10,  11,\n-    12,  13,  14,  15,   8,   8,   8,   8,  16,   8,   8,   8,  17,  18,  18,  18,\n-    19,  19,  19,  19,  19,  20,  19,  19,  21,  22,  22,  22,  22,  22,  22,  22,\n-    22,  23,  21,  22,  22,  22,  23,  21,  24,  25,  25,  25,  25,  25,  25,  25,\n-    25,  25,  12,  12,  25,  25,  26,  27,  25,  28,  12,  12,  29,  30,  29,  31,\n-    29,  29,  32,  32,  29,  29,  29,  29,  31,  29,  33,   7,   7,  34,  29,  29,\n-    35,  29,  29,  29,  29,  29,  29,  30,  36,  36,  36,  37,  36,  36,  36,  36,\n-    36,  36,  38,  39,  40,  40,  40,  40,  41,  12,  12,  12,  42,  42,  42,  42,\n-    42,  42,  43,  44,  45,  45,  45,  45,  45,  45,  45,  46,  45,  45,  45,  47,\n-    48,  48,  48,  48,  48,  48,  48,  49,  36,  36,  38,  12,  29,  29,  29,  50,\n-    51,  12,  29,  29,  52,  29,  29,  29,  53,  53,  53,  53,  54,  55,  53,  53,\n-    53,  56,  53,  53,  57,  58,  57,  59,  59,  57,  57,  57,  57,  57,  60,  57,\n-    61,  62,  63,  57,  57,  59,  59,  64,  12,  65,  12,  66,  57,  62,  57,  57,\n-    57,  57,  57,  64,  67,  67,  68,  69,  70,  71,  71,  71,  71,  71,  72,  71,\n-    72,  73,  74,  72,  68,  69,  70,  74,  75,  12,  67,  76,  12,  77,  71,  71,\n-    71,  68,  12,  12,  78,  78,  79,  80,  80,  79,  79,  79,  79,  79,  81,  79,\n-    81,  78,  82,  79,  79,  80,  80,  82,  83,  12,  12,  12,  79,  84,  79,  79,\n-    82,  12,  78,  79,  85,  85,  86,  87,  87,  86,  86,  86,  86,  86,  88,  86,\n-    88,  85,  89,  86,  86,  87,  87,  89,  12,  85,  12,  90,  86,  91,  86,  86,\n-    86,  86,  12,  12,  92,  93,  94,  92,  95,  96,  97,  95,  98,  99,  94,  92,\n-   100, 100,  96,  92,  94,  92,  95,  96,  99,  98,  12,  12,  12,  92, 100, 100,\n-   100, 100,  94,  12, 101, 101, 101, 102, 102, 101, 101, 101, 101, 101, 102, 101,\n-   101, 101, 103, 101, 101, 102, 102, 103,  12, 104, 105, 106, 101, 107, 101, 101,\n-    12, 108, 101, 101, 109, 109, 109, 110, 110, 109, 109, 109, 109, 109, 110, 109,\n-   109, 111, 112, 109, 109, 110, 110, 112,  12, 113,  12, 113, 109, 114, 109, 109,\n-   111,  12,  12,  12, 115, 115, 115, 116, 116, 115, 115, 115, 115, 115, 115, 115,\n-   115, 116, 116, 115,  12, 115, 115, 115, 115, 117, 115, 115, 118, 118, 119, 119,\n-   119, 120, 121, 119, 119, 119, 119, 119, 122, 119, 119, 123, 119, 120, 124, 125,\n-   119, 126, 119, 119,  12, 121, 119, 119, 121, 127,  12,  12, 128, 129, 129, 129,\n-   129, 129, 129, 129, 129, 129, 130, 131, 129, 129, 129,  12,  12,  12,  12,  12,\n-   132, 133, 134, 135, 135, 135, 135, 135, 135, 136, 135, 135, 135, 135, 135, 137,\n-   135, 138, 135, 134, 135, 135, 137, 135, 139, 139, 139, 139, 139, 139, 140, 139,\n-   139, 139, 139, 141, 140, 139, 139, 139, 139, 139, 139, 142, 139, 143, 144,  12,\n-   145, 145, 145, 145, 146, 146, 146, 146, 146, 147,  12, 148, 146, 146, 149, 146,\n-   150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 152, 153, 151, 154, 152, 153,\n-   152, 153, 151, 154, 152, 153, 151, 151, 151, 154, 151, 151, 151, 151, 154, 155,\n-   151, 151, 151, 156, 151, 151, 153,  12, 157, 157, 157, 157, 157, 158, 157, 158,\n-   159, 159, 159, 159, 160, 160, 160, 160, 160, 160, 160, 161, 162, 162, 162, 162,\n-   162, 162, 163, 164, 162, 162, 165,  12, 166, 166, 166, 166, 166, 167,  12, 168,\n-   169, 169, 169, 169, 169, 170,  12,  12, 171, 171, 171, 171, 171,  12,  12,  12,\n-   172, 172, 172, 173, 173,  12,  12,  12, 174, 174, 174, 174, 174, 174, 174, 175,\n-   174, 174, 175,  12, 176, 177, 178, 178, 178, 178, 179,  12, 178, 178, 178, 178,\n-   178, 178, 180,  12, 178, 178, 181,  12, 159, 182,  12,  12, 183, 183, 183, 183,\n-   183, 183, 183, 184, 183, 183, 183,  12, 185, 183, 183, 183, 186, 186, 186, 186,\n-   186, 186, 186, 187, 186, 188,  12,  12, 189, 189, 189, 189, 189, 189, 189,  12,\n-   189, 189, 190,  12, 189, 189, 191, 192, 193, 193, 193, 193, 193, 193, 193, 194,\n-   195, 195, 195, 195, 195, 195, 195, 196, 195, 195, 195, 197, 195, 195, 198,  12,\n-   195, 195, 195, 198,   7,   7,   7, 199, 200, 200, 200, 200, 200, 200, 200, 201,\n-   200, 200, 200, 202, 203, 203, 203, 203, 204, 204, 204, 204, 204,  12,  12, 204,\n-   205, 205, 205, 205, 205, 205, 206, 205, 205, 205, 207, 208, 209, 209, 209, 209,\n-    19,  19, 210,  12, 146, 146, 211, 212, 203, 203,  12,  12, 213,   7,   7,   7,\n-   214,   7, 215, 216,   0, 215, 217,  12,   2, 218, 219,   2,   2,   2,   2, 220,\n-   221, 218, 222,   2,   2,   2, 223,   2,   2,   2,   2, 224,   8, 225,   8, 225,\n-     8,   8, 226, 226,   8,   8,   8, 225,   8,  15,   8,   8,   8,  10,   8, 227,\n-    10,  15,   8,  14,   0,   0,   0, 228,   0, 229,   0,   0, 230,   0,   0, 231,\n-     0,   0,   0, 232,   2,   2,   2, 233, 234,  12,  12,  12, 235,  12,  12,  12,\n-     0, 236, 237,   0,   4,   0,   0,   0,   0,   0,   0,   4,   2,   2,   5,  12,\n-     0, 232,  12,  12,   0,   0, 232,  12, 238, 238, 238, 238,   0, 239,   0,   0,\n-     0, 240,   0,   0, 241, 241, 241, 241,  18,  18,  18,  18,  18,  12, 242,  18,\n-   243, 243, 243, 243, 243, 243,  12, 244, 245,  12,  12, 244, 151, 154,  12,  12,\n-   151, 154, 151, 154,   0,   0,   0, 246, 247, 247, 247, 247, 247, 247, 248, 247,\n-   247,  12,  12,  12, 247, 249,  12,  12,   0, 250,   0,   0, 251, 247, 252, 253,\n-     0,   0, 247,   0, 254, 255, 255, 255, 255, 255, 255, 255, 255, 256, 257, 258,\n-   259, 260, 260, 260, 260, 260, 260, 260, 260, 260, 261, 259,  12, 262, 263, 263,\n-   263, 263, 263, 263, 264, 150, 150, 150, 150, 150, 150, 265,   0,  12,  12, 131,\n-   150, 150, 150, 266, 260, 260, 260, 261, 260, 260,   0,   0, 267, 267, 267, 267,\n-   267, 267, 267, 268, 267, 269,  12,  12, 270, 270, 270, 270, 271, 271, 271, 271,\n-   271, 271, 271,  12, 272, 272, 272, 272, 272, 272,  12,  12, 237,   2,   2,   2,\n-     2,   2, 231,   2,   2,   2, 273,  12, 274, 275, 276,  12, 277,   2,   2,   2,\n-   278, 278, 278, 278, 278, 278, 278, 279,   0,   0, 246,  12, 280, 280, 280, 280,\n-   280, 280,  12,  12, 281, 281, 281, 281, 281, 282,  12, 283, 281, 281, 282,  12,\n-   284, 284, 284, 284, 284, 284, 284, 285, 286, 286, 286, 286, 286,  12,  12, 287,\n-   150, 150, 150, 288, 289, 289, 289, 289, 289, 289, 289, 290, 289, 289, 291, 292,\n-   145, 145, 145, 293, 294, 294, 294, 294, 294, 295,  12,  12, 294, 294, 294, 296,\n-   294, 294, 296, 294, 297, 297, 297, 297, 298,  12,  12,  12,  12,  12, 299, 297,\n-   300, 300, 300, 300, 300, 301,  12,  12, 155, 154, 155, 154, 155, 154,  12,  12,\n-     2,   2,   3,   2,   2, 302, 303,  12, 300, 300, 300, 304, 300, 300, 304,  12,\n-   150,  12,  12,  12, 150, 265, 305, 150, 150, 150, 150,  12, 247, 247, 247, 249,\n-   247, 247, 249,  12,   2, 273,  12,  12, 306,  22,  12,  24,  25,  26,  25, 307,\n-   308, 309,  25,  25,  50,  12,  12,  12, 310,  29,  29,  29,  29,  29,  29, 311,\n-   312,  29,  29,  29,  29,  29,  12, 310,   7,   7,   7, 313, 232,   0,   0,   0,\n-     0, 232,   0,  12,  29, 314,  29,  29,  29,  29,  29, 315, 316,   0,   0,   0,\n-     0, 317, 260, 260, 260, 260, 260, 318, 319, 150, 319, 150, 319, 150, 319, 288,\n-     0, 232,   0, 232,  12,  12, 316, 246, 320, 320, 320, 321, 320, 320, 320, 320,\n-   320, 322, 320, 320, 320, 320, 322, 323, 320, 320, 320, 324, 320, 320, 322,  12,\n-   232, 131,   0,   0,   0, 131,   0,   0,   8,   8,   8,  14,   0,   0,   0, 234,\n-   325,  12,  12,  12,   0,   0,   0, 326, 327, 327, 327, 327, 327, 327, 327, 328,\n-   329, 329, 329, 329, 330,  12,  12,  12, 215,   0,   0,   0,   0,   0,   0,  12,\n-   331, 331, 331, 331, 331,  12,  12, 332, 333, 333, 333, 333, 333, 333, 334,  12,\n-   335, 335, 335, 335, 335, 335, 336,  12, 337, 337, 337, 337, 337, 337, 337, 338,\n-   339, 339, 339, 339, 339,  12, 339, 339, 339, 340,  12,  12, 341, 341, 341, 341,\n-   342, 342, 342, 342, 343, 343, 343, 343, 343, 343, 343, 344, 343, 343, 344,  12,\n-   345, 345, 345, 345, 345,  12, 345, 345, 345, 345, 345,  12, 346, 346, 346, 346,\n-   346, 346,  12,  12, 347, 347, 347, 347, 347,  12,  12, 348, 349, 349, 350, 349,\n-   350, 351, 349, 349, 351, 349, 349, 349, 351, 349, 351, 352, 353, 353, 353, 353,\n-   353, 354,  12,  12, 353, 355,  12,  12, 353, 353,  12,  12,   2, 274,   2,   2,\n-   356,   2, 273,  12, 357, 358, 359, 357, 357, 357, 357, 357, 357, 360, 361, 362,\n-   363, 363, 363, 363, 363, 364, 363, 363, 365, 365, 365, 365, 366, 366, 366, 366,\n-   366, 366, 366, 367,  12, 368, 366, 366, 369, 369, 369, 369, 370, 371, 372, 369,\n-   373, 373, 373, 373, 373, 373, 373, 374, 375, 375, 375, 375, 375, 375, 376, 377,\n-   378, 378, 378, 378, 379, 379, 379, 379, 379, 379,  12, 379, 380, 379, 379, 379,\n-   381, 382,  12, 381, 381, 383, 383, 381, 381, 381, 381, 381, 381, 384, 385, 386,\n-   381, 381, 387,  12, 388, 388, 388, 388, 389, 389, 389, 389, 390, 390, 390, 390,\n-   390, 391, 392, 390, 390, 391,  12,  12, 393, 393, 393, 393, 393, 394, 395, 393,\n-   396, 396, 396, 396, 396, 397, 396, 396, 398, 398, 398, 398, 399,  12, 398, 398,\n-   400, 400, 400, 400, 401,  12, 402, 403,  12,  12, 402, 400, 404, 404, 404, 404,\n-   404, 404, 405,  12, 406, 406, 406, 406, 407,  12,  12,  12, 407,  12, 408, 406,\n-   409, 409, 409, 409, 409, 409,  12,  12, 409, 409, 410,  12, 411, 411, 411, 411,\n-   411, 411, 412, 413, 413,  12,  12,  12,  12,  12,  12, 414, 415, 415, 415, 415,\n-   415, 415,  12,  12, 416, 416, 416, 416, 416, 416, 417,  12, 418, 418, 418, 418,\n-   418, 418, 419,  12, 420, 420, 420, 420, 420, 420, 420,  12, 421, 421, 421, 421,\n-   421, 422,  12,  12, 423, 423, 423, 423, 423, 423, 423, 424, 425, 423, 423, 423,\n-   423, 424,  12, 426, 427, 427, 427, 427, 428,  12,  12, 429, 430, 430, 430, 430,\n-   430, 430, 431,  12, 430, 430, 432,  12, 433, 433, 433, 433, 433, 434, 433, 433,\n-   433, 433,  12,  12, 435, 435, 435, 435, 435, 436,  12,  12, 437, 437, 437, 437,\n-   118, 119, 119, 119, 119, 127,  12,  12, 438, 438, 438, 438, 439, 438, 438, 438,\n-   440,  12,  12,  12, 441, 442, 443, 444, 441, 441, 441, 444, 441, 441, 445,  12,\n-   446, 446, 446, 446, 446, 446, 447,  12, 446, 446, 448,  12, 449, 450, 449, 451,\n-   451, 449, 449, 449, 449, 449, 452, 449, 452, 450, 453, 449, 449, 451, 451, 454,\n-   455, 456,  12, 450, 449, 457, 449, 455, 449, 455,  12,  12, 458, 458, 458, 458,\n-   458, 458, 458, 459, 460,  12,  12,  12, 461, 461, 461, 461, 461, 461,  12,  12,\n-   461, 461, 462,  12, 463, 463, 463, 463, 463, 464, 463, 463, 463, 463, 463, 464,\n-   465, 465, 465, 465, 465, 466,  12,  12, 465, 465, 467,  12, 178, 178, 178, 180,\n-   468, 468, 468, 468, 468, 468, 469,  12, 470, 470, 470, 470, 470, 470, 471, 472,\n-   470, 470, 470,  12, 470, 471,  12,  12, 473, 473, 473, 473, 473, 473, 473,  12,\n-   474, 474, 474, 474, 475,  12,  12, 476, 477, 478, 479, 477, 477, 480, 477, 477,\n-   477, 477, 477, 477, 477, 481, 482, 477, 477, 478,  12,  12, 477, 477, 483,  12,\n-   484, 484, 485, 484, 484, 484, 484, 484, 484, 486,  12,  12, 487, 487, 487, 487,\n-   487, 487,  12,  12, 488, 488, 488, 488, 489,  12,  12,  12, 490, 490, 490, 490,\n-   490, 490, 491,  12,  53,  53, 492,  12, 493, 493, 494, 493, 493, 493, 493, 493,\n-   493, 495, 493, 493, 493, 496,  12,  12, 493, 493, 493, 497, 498, 498, 498, 498,\n-   499, 498, 498, 498, 498, 498, 500, 498, 498, 501,  12,  12, 502, 503, 504, 502,\n-   502, 502, 502, 502, 502, 503, 505, 504, 502, 502,  12,  12, 502, 502, 506,  12,\n-   507, 508, 509, 507, 507, 507, 507, 507, 507, 507, 507, 510, 508, 507, 511,  12,\n-   507, 507, 512,  12, 513, 513, 513, 513, 513, 513, 514,  12, 515, 515, 515, 515,\n-   516, 515, 515, 515, 515, 515, 517, 518, 515, 515, 519,  12, 520,  12,  12,  12,\n-   100, 100, 100, 100,  96,  12,  12,  98, 521, 521, 521, 521, 521, 521, 522,  12,\n-   521, 521, 521, 523, 521, 524,  12,  12, 521,  12,  12,  12, 525, 525, 525, 525,\n-   526,  12,  12,  12, 527, 527, 527, 527, 527, 528,  12,  12, 529, 529, 529, 529,\n-   529, 530,  12,  12, 272, 272, 531,  12, 532, 532, 532, 532, 532, 532, 532, 533,\n-   532, 532, 534, 535, 536, 536, 536, 536, 536, 536, 536, 537, 536, 536, 538,  12,\n-   539, 539, 539, 539, 539, 539, 539, 540, 539, 540,  12,  12, 541, 541, 541, 541,\n-   541, 542,  12,  12, 541, 541, 543, 541, 543, 541, 541, 541, 541, 541,  12, 544,\n-   545, 545, 545, 545, 545, 545, 546,  12, 547, 547, 547, 547, 547, 547, 548, 549,\n-   547, 547,  12, 549, 550, 551,  12,  12, 249,  12,  12,  12, 552, 552, 552, 552,\n-   552, 552,  12,  12, 553, 553, 553, 553, 553, 554,  12,  12, 552, 552, 555,  12,\n-   260, 556, 260, 557, 558, 255, 255, 255, 559,  12,  12,  12, 560,  12,  12,  12,\n-   256, 561,  12,  12,  12, 260,  12,  12, 562, 562, 562, 562, 562, 562, 562,  12,\n-   563, 563, 563, 563, 563, 563, 564,  12, 563, 563, 563, 565, 563, 563, 565,  12,\n-   563, 563, 566, 563,   0,  12,  12,  12,   7,   7,   7, 567,   7, 199,  12,  12,\n-     0, 246,  12,  12,   0, 232, 316,   0,   0, 568, 228,   0,   0,   0, 568,   7,\n-   213, 569,   7,   0,   0,   0, 570, 228,   8, 225,  12,  12,   0,   0, 234,  12,\n-     0,   0,   0, 229, 571, 572, 316, 229,   0,   0, 240, 316,   0, 316,   0,   0,\n-     0, 240, 232, 316,   0, 229,   0, 229,   0,   0, 240, 232,   0, 573, 239,   0,\n-   229,   0,   0,   0,   0, 246,   0,   0,   0,   0,   0, 239, 574, 574, 574, 574,\n-   574, 574, 574,  12,  12,  12, 575, 574, 576, 574, 574, 574,   2,   2,   2, 273,\n-    12, 275, 273,  12, 241, 577, 241, 241, 241, 241, 578, 241, 579, 580, 577,  12,\n-    19,  19,  19, 581,  12,  12,  12, 582, 583, 583, 583, 583, 583, 583, 583, 584,\n-   583, 583, 583, 585, 583, 583, 585, 586, 587, 587, 587, 587, 587, 587, 587, 588,\n-   589, 589, 589, 589, 589, 589, 590, 591, 592, 592, 592, 592, 592, 592, 593,  12,\n-   151, 154, 151, 594, 151, 151, 151, 154, 595, 595, 595, 595, 595, 596, 595, 595,\n-   595, 597,  12,  12, 598, 598, 598, 598, 598, 598, 598,  12, 598, 598, 599, 600,\n-     0, 234,  12,  12,  29, 414,  29,  29, 601, 602, 414,  29,  50,  29, 603,  12,\n-   604, 310, 603, 414, 601, 602, 603, 603, 601, 602,  50,  29,  50,  29, 414, 605,\n-    29,  29, 606,  29,  29,  29,  29,  12, 414, 414, 606,  29,  51,  12,  12,  12,\n-    12, 239,   0,   0, 607,  12,  12,  12, 246,  12,  12,  12,   0,   0,  12,   0,\n-     0, 232, 131,   0,   0,   0,  12,  12,   0,   0,   0, 240,   0, 246,  12, 239,\n-   608,  12,  12,  12, 247, 247, 609,  12, 610,  12,  12,  12,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 939, 940, 941, 942,\n-   946, 948,   0, 962, 969, 970, 971, 976,1001,1002,1003,1008,   0,1033,1040,1041,\n-  1042,1043,1047,   0,   0,1080,1081,1082,1086,1110,   0,   0,1124,1125,1126,1127,\n-  1131,1133,   0,1147,1154,1155,1156,1161,1187,1188,1189,1193,   0,1219,1226,1227,\n-  1228,1229,1233,   0,   0,1267,1268,1269,1273,1298,   0,1303, 943,1128, 944,1129,\n-   954,1139, 958,1143, 959,1144, 960,1145, 961,1146, 964,1149,   0,   0, 973,1158,\n-   974,1159, 975,1160, 983,1168, 978,1163, 988,1173, 990,1175, 991,1176, 993,1178,\n-   994,1179,   0,   0,1004,1190,1005,1191,1006,1192,1014,1199,1007,   0,   0,   0,\n-  1016,1201,1020,1206,   0,1022,1208,1025,1211,1023,1209,   0,   0,   0,   0,1032,\n-  1218,1037,1223,1035,1221,   0,   0,   0,1044,1230,1045,1231,1049,1235,   0,   0,\n-  1058,1244,1064,1250,1060,1246,1066,1252,1067,1253,1072,1258,1069,1255,1077,1264,\n-  1074,1261,   0,   0,1083,1270,1084,1271,1085,1272,1088,1275,1089,1276,1096,1283,\n-  1103,1290,1111,1299,1115,1118,1307,1120,1309,1121,1310,   0,1053,1239,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1093,1280,   0,   0,   0,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 705,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 706,\n+     0,   0,   1,   1,   0,   2,   3,   3,   4,   4,   4,   4,   4,   4,   4,   4,\n+     4,   4,   4,   4,   4,   5,   0,   6,   7,   7,   7,   8,   9,  10,  11,  12,\n+    13,  13,  13,  13,  14,  13,  13,  13,  13,  15,  16,  17,  18,  19,  20,  21,\n+    22,  23,  24,  25,  23,  23,  26,  23,  27,  28,  29,  23,  30,  31,  32,  33,\n+    34,  35,  36,  37,  38,  23,  23,  39,  40,  40,  41,  42,  43,  44,  45,  46,\n+    47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,\n+    63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,\n+    79,  80,  81,  82,  83,  84,  85,  82,  86,  86,  87,  88,  89,  90,  91,  82,\n+    92,  92,  92,  92,  92,  93,  94,  95,  96,  96,  96,  96,  96,  96,  96,  96,\n+    97,  97,  98,  97,  99, 100, 101,  97, 102,  97, 103, 104, 105, 106, 106, 107,\n+   108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 110, 110, 111,\n+   112, 113, 114, 115, 116, 116, 117, 118, 119, 120, 120, 121, 120, 122, 108, 123,\n+   124, 125, 126, 127, 128, 129, 130, 116, 131, 132, 133, 134, 135, 136, 137,  82,\n+   138, 138, 139, 138, 140, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,\n+     4, 151, 152, 153,   4, 154,   7,   7, 155,  11, 156, 157,  11, 158, 159, 160,\n+   161,   0,   0, 162, 163,   0, 164, 165,   0, 166, 167,   4, 168,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0, 169, 170,   0,   0,   0,   0,   0,\n+   171, 171, 171, 171, 171, 171, 171, 171,   0,   0,   0, 172, 173,   0,   0,   0,\n+   174, 174, 174,   4, 175, 175, 175, 176,  93, 177, 178, 179, 180, 181, 181,  13,\n+     0,   0, 182,  82, 183, 184, 184, 185, 184, 184, 184, 184, 184, 184, 186, 187,\n+   188, 189, 190, 191, 192, 193, 194, 195, 196, 197,  96,  96, 198, 199,   0, 200,\n+   201,   0,   0, 202,   0,   0, 203, 204, 194, 194, 205,   0,   0,   0,   0,   0,\n+   184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,   0,   0,\n+   206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 207, 206, 208, 209,\n+   210, 210, 210, 210, 210, 210, 210, 210, 210, 211,  13,  13,  13, 212, 212, 213,\n+     0, 214,   4,   4, 215,   4, 216, 217, 218, 219, 220, 221, 222, 222, 223,  40,\n+   224, 225, 226, 227, 228, 228, 229, 230, 231, 232, 233,  92, 234, 234, 235, 236,\n+   237, 238, 239, 240, 106, 106, 241, 242,  96,  96,  96,  96,  96, 243, 244, 245,\n+    82,  82,  82,  82,  82,  82,  82,  82, 184, 184, 184, 246, 184, 184, 247,  82,\n+   248, 249, 250,  23,  23,  23, 251,  23,  23,  23,  23,  23,  23,  23,  23,  23,\n+    23, 252,  23,  23, 253,  23, 254, 255, 256, 257, 258, 259,  23,  23,  23, 260,\n+   261,   1,   1, 262, 263, 201, 264, 265, 266, 267, 268,  82, 269, 269, 269, 270,\n+   271, 272,  11,  11, 273, 274, 187, 275,  82,  82,  82,  82, 276, 277, 278, 279,\n+   280, 281, 282, 283, 284, 285, 286,  82, 287, 287, 288, 289, 290, 291, 292, 293,\n+   294, 295, 296, 297, 298, 299, 300, 301, 302, 302, 302, 302, 302, 302, 302, 302,\n+   302, 303, 304, 305, 306, 307,  82,  82, 308, 309, 310, 311, 312, 313,  82, 314,\n+   315, 316,  82,  82, 317, 318, 319, 320, 321, 322, 323, 324, 325,  82, 326, 327,\n+   328, 329, 330, 331, 332, 333,  82,  82, 334, 334, 335,  82, 336, 337, 336, 338,\n+   339, 340, 341, 342, 343,  82,  82,  82,  82,  82,  82, 344, 345, 346, 347, 348,\n+   349, 350, 351, 352, 353, 354, 355, 356, 357, 357, 358, 359, 360, 360, 361, 362,\n+   363, 364, 365, 366, 367, 367, 367, 368, 369, 370, 371,  82, 372, 373, 374, 375,\n+   376, 377, 378, 379, 380, 381, 382, 383, 384, 384, 385, 386, 387, 387, 388,  82,\n+    82,  82,  82,  82, 389, 390, 391,  82, 392, 392, 393, 394, 395, 396, 397, 398,\n+   399, 400, 401,  82,  82,  82,  82,  82, 402, 403,  82,  82,  82, 404, 404, 405,\n+   406, 407, 408,  82,  82, 409, 410, 411, 412, 412, 413, 414, 414, 415, 416, 417,\n+   418,  82,  82,  82,  82,  82, 419, 420, 421, 422, 423, 424, 425, 426,  82,  82,\n+   427, 428, 429, 430, 431, 432,  82,  82,  82,  82,  82,  82,  82,  82,  82, 433,\n+   434, 435, 436,  82,  82, 437, 438, 439, 440, 440, 440, 440, 440, 440, 440, 440,\n+   440, 440, 440, 440, 441,  82,  82,  82, 440, 440, 440, 442, 440, 440, 440, 440,\n+   440, 440, 443,  82,  82,  82,  82,  82,  82,  82,  82,  82, 444, 445, 445, 446,\n+   447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 448, 447, 447, 447, 447, 447,\n+   447, 447, 447, 447, 447, 447, 447, 449, 450, 450, 450, 450, 450, 450, 450, 450,\n+   450, 450, 451,  82,  82,  82,  82,  82, 452, 453,  82,  82,  82,  82,  82,  82,\n+   212, 212, 212, 212, 212, 212, 212, 212, 212, 454, 455, 456, 457, 458, 459, 460,\n+   461, 461, 462, 463, 464,  82,  82,  82,  82,  82, 465, 466,  82,  82,  82,  82,\n+    82,  82, 467, 467, 468,  82,  82,  82, 469, 469, 470, 469, 471,  82,  82, 472,\n+   473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473, 474,\n+   475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 476, 477,\n+   478,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82, 479,\n+   480, 191, 191, 191, 191, 191, 191, 191, 191, 481, 482, 483, 484, 484, 484, 484,\n+   484, 484, 484, 484, 484, 484, 484, 485, 486, 486, 486, 487, 488, 489,  82,  82,\n+     0,   0,   0,   0,   0,   0,   0, 490,   0,   0,   0,   0,   0, 491,  82,  82,\n+     7, 492, 493,   0,   0,   0, 489,  82,   0,   0,   0,   0,   0,   0,   0, 494,\n+     0, 495,   0, 496, 497, 498,   0, 170,  11,  11, 499,  82,  82,  82, 491, 491,\n+     0,   0, 500, 501,  82,  82,  82,  82,   0,   0, 502,   0, 503, 504, 505,   0,\n+   506, 507, 508,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 509,   0,   0,\n+     0,   0,   0,   0,   0,   0, 510,   0, 511, 511, 511, 511, 511, 511, 511, 511,\n+   511, 511, 511, 511, 512, 513,  82,  82, 514, 515,  82,  82,  82,  82,  82,  82,\n+   516, 517,  13, 518, 519,  82,  82,  82, 520, 521, 522,  82,  82,  82,  82,  82,\n+    82,  82,  82,  82, 523, 524, 525, 526,  82,  82,  82,  82,  82,  82, 527, 528,\n+    82,  82,  82,  82,  82,  82, 529, 530,  82,  82,  82,  82,  82,  82,  82, 531,\n+   532, 532, 532, 532, 532, 532, 533,  82, 534, 534, 535,  82,  82,  82,  82,  82,\n+    82,  82,  82, 536,   0, 537,  82,  82, 261, 182,  82,  82,  82,  82,  82,  82,\n+   538, 539, 540, 541, 542, 543,  82, 544,   0, 545,   0,   0, 491, 546, 547, 494,\n+     0,   0,   0,   0,   0, 548,  82, 549, 550, 551, 552, 553,  82,  82,  82,  82,\n+     0,   0,   0,   0,   0,   0, 554, 555,   0,   0,   0, 556,   0,   0, 490, 557,\n+   545,   0, 558,   0, 559, 560, 561,  82,   0,   0, 491, 562, 563,   0, 564, 565,\n+     0,   0,   0,   0, 258,   0,   0, 490, 184, 184, 184, 184, 184, 184, 184,  82,\n+   184, 247, 184, 184, 184, 184, 184, 184, 566, 184, 184, 184, 184, 184, 184, 184,\n+   184, 184, 184, 184, 184, 567, 184, 184, 184, 184, 184, 184, 184, 184, 184, 568,\n+   184, 184, 566,  82,  82,  82,  82,  82, 566,  82,  82,  82,  82,  82,  82,  82,\n+   184, 184, 569, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 570,  82,  82,\n+   571,   0,   0,   0,  82,  82,  82,  82,   7,   7,   7,   7,   7,   7,   7, 572,\n+     0,   0,   0,   0,   1,   2,   2,   3,   0,   4,   0,   4,   2,   2,   5,   2,\n+     2,   2,   2,   2,   2,   2,   2,   6,   7,   8,   0,   0,   9,   9,   9,   9,\n+     9,   9,  10,  11,  12,  13,  14,  14,  15,  14,  14,  14,  14,  14,  14,  14,\n+    16,  17,  14,  14,  18,  18,  18,  18,  19,  18,  18,  18,  18,  18,  20,  21,\n+    21,  21,  22,  20,  21,  21,  21,  21,  21,  23,  24,  25,  25,  25,  25,  25,\n+    25,  26,  25,  25,  25,  27,  28,  26,  29,  30,  31,  32,  31,  31,  31,  31,\n+    33,  34,  35,  31,  31,  31,  36,  31,  31,  31,  31,  29,  37,  38,  37,  37,\n+    37,  37,  37,  37,  37,  39,  31,  31,  40,  40,  40,  40,  40,  40,  41,  26,\n+    42,  42,  42,  42,  42,  42,  42,  43,  44,  44,  44,  44,  44,  45,  44,  46,\n+    47,  47,  47,  48,  37,  49,  31,  31,  31,  50,  51,  31,  52,  31,  31,  31,\n+    53,  53,  53,  53,  53,  53,  54,  53,  55,  53,  53,  53,  56,  57,  58,  59,\n+    59,  60,  61,  62,  57,  63,  64,  65,  66,  59,  59,  67,  68,  69,  70,  71,\n+    71,  72,  73,  74,  69,  75,  76,  77,  78,  71,  79,  26,  80,  81,  82,  83,\n+    83,  84,  85,  86,  81,  87,  88,  26,  89,  83,  90,  91,  92,  93,  94,  95,\n+    95,  96,  97,  98,  93,  99, 100, 101, 102,  95,  95,  26, 103, 104, 105, 106,\n+   107, 104, 108, 109, 104, 105, 110,  26, 111, 108, 108, 112, 113, 114, 115, 113,\n+   113, 115, 113, 116, 114, 117, 118, 119, 120, 113, 121, 113, 122, 123, 124, 122,\n+   122, 124, 125, 126, 123, 127, 128, 128, 129, 122, 130,  26, 131, 132, 133, 131,\n+   131, 131, 131, 131, 132, 133, 134, 131, 135, 131, 131, 131, 136, 137, 138, 139,\n+   137, 137, 140, 141, 138, 142, 143, 137, 144, 137, 145,  26, 146, 147, 147, 147,\n+   147, 147, 147, 148, 147, 147, 147, 149,  26,  26,  26,  26, 150, 151, 152, 152,\n+   153, 152, 152, 154, 155, 156, 152, 157, 158, 158, 158, 158, 158, 159, 158, 158,\n+   158, 160, 159, 158, 158, 158, 158, 159, 158, 158, 158, 161, 158, 161, 162, 163,\n+   164, 164, 164, 164, 165, 165, 165, 165, 166, 167, 165, 165, 165, 165, 165, 168,\n+   169, 169, 169, 169, 170, 170, 170, 170, 170, 171, 172, 171, 170, 171, 170, 170,\n+   170, 170, 171, 172, 171, 170, 172, 170, 170, 170, 171, 170, 170, 170, 170, 173,\n+   170, 170, 170, 174, 170, 170, 170, 175, 176, 176, 176, 176, 176, 176, 177, 177,\n+   178, 178, 178, 178, 179, 179, 179, 180, 181, 181, 181, 181, 181, 182, 181, 183,\n+   184, 184, 185, 186, 187, 187, 188,  26, 189, 189, 190,  26, 191, 192, 193,  26,\n+   194, 194, 194, 194, 194, 194, 194, 195, 194, 196, 194, 196, 197, 198, 198, 199,\n+   198, 198, 198, 198, 198, 198, 198, 200, 198, 201, 178, 178, 178, 178, 202,  26,\n+   203, 203, 203, 204, 203, 205, 203, 205, 206, 203, 207, 207, 207, 208, 209,  26,\n+   210, 210, 210, 210, 210, 211, 210, 210, 210, 212, 210, 213, 214, 214, 214, 215,\n+   216, 216, 216, 216, 216, 216, 216, 217, 216, 216, 216, 218, 216, 219, 216, 219,\n+   216, 220,   9,   9,   9, 221,  26,  26, 222, 222, 222, 222, 222, 223, 222, 222,\n+   224, 224, 224, 224, 225, 225, 225, 225, 225, 225, 226, 227, 228, 228, 228, 228,\n+   228, 228, 228, 229, 228, 230, 231, 231, 231, 231, 231, 231,  18, 232, 165, 165,\n+   165, 165, 165, 233, 224,  26, 234,   9, 235, 236, 237, 238, 239, 240,   2,   2,\n+     2,   2,   2, 241, 242, 243,   2, 244,   2,   2,   2, 245,  14,  14, 246, 246,\n+   246, 246,  14, 247,  14,  14,  14, 246,  14,  14, 248,  14, 248,  14, 249, 250,\n+    14,  14, 251, 252,   0, 253,   0,   0, 254,   0, 255, 256,   0, 257,   2, 258,\n+   259,  26,   9,   9,   9,   9, 260,  26, 261, 262,   4,   0,   0, 263,   0,   0,\n+     2, 264,   0,   0,   0, 265,  26,  26,   0, 266,  26,  26, 267, 267, 267, 267,\n+     0,   0, 268,   0,   0,   0, 269,   0, 270, 270, 270, 270,  17,  17,  17,  17,\n+    17,  17, 271, 272, 166, 167, 273, 273, 273, 273, 273, 273, 273, 274, 275, 274,\n+   170, 170, 172,  26, 172, 172, 172, 172,   0,   0,   0, 276, 277, 277, 277, 278,\n+   277, 277, 277, 277, 277, 277, 279,  26, 277, 277, 280,  26,  26,  26,   0,   0,\n+   281,   0,   0,   0, 282, 283,   0, 284, 285, 286, 286, 286, 286, 286, 286, 286,\n+   286, 286, 287, 288, 289, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291,\n+   292, 293, 293, 293, 293, 293, 294, 169, 169, 295,   0,   0, 293, 293, 293, 293,\n+   276, 296, 290, 290, 169, 169, 169, 295, 169, 169, 169, 297,   0,   0, 290, 290,\n+   290, 290, 290, 298, 290, 290, 290,   0, 299, 299, 299, 299, 299, 300, 299, 299,\n+   301,  26, 302, 302, 302, 302, 302, 302, 303, 303, 303, 303, 303, 304,  26,  26,\n+   305, 305, 305, 305, 305, 305, 305,  26, 306,   2,   2,   2,   2, 307,   2,   2,\n+     2, 308, 309, 258,  26,  26, 310,   2, 311, 311, 311, 311, 311, 312,   0, 265,\n+   313, 313, 313, 313, 313, 313, 313,  26, 314, 314, 314, 314, 315, 316, 314, 317,\n+   318, 318, 318, 318, 318, 319, 320, 320, 320, 320, 321, 322, 169, 169, 169, 323,\n+   324, 324, 324, 324, 324, 325, 324, 326, 164, 164, 164, 327, 328, 328, 328, 328,\n+   328, 328, 329,  26, 328, 330, 328, 331, 332, 332, 332, 332, 333,  26,  26, 334,\n+   335, 335, 336,  26, 337, 337, 337,  26, 172, 172,   2,   2,   2,   2,   2, 338,\n+   339, 340, 176, 176, 335, 335, 335, 335, 335, 341, 335, 342, 343,  26, 169, 169,\n+   295, 344, 169, 169, 169, 169, 169, 343, 277, 280, 277, 277, 277, 277, 277, 345,\n+   346,  26, 347, 348,  25,  25, 349, 350, 351,  25,  31,  31, 352,  26, 353,  31,\n+    31,  31,  31, 354,  31,  31, 355,  31,  31, 356,  26,  26,  26,  26,  31,  31,\n+     9,   9,   0, 265,   9, 357,   0,   0,   0,   0, 358,   0, 257, 359, 360,  31,\n+    31,  31,  31, 361, 362,   0,   0,   0, 363, 290, 289, 290, 290, 290, 290, 364,\n+   365, 365, 365, 366, 257, 257,  26, 367, 368, 369, 368, 368, 370, 368, 368, 371,\n+   368, 372, 368, 372, 368, 368, 368, 368, 368, 368, 368, 373, 374,   0,   0,   0,\n+     0,   0, 375,   0,  14, 252,   0, 376, 377,  26,  26,  26,   0,   0,   0, 378,\n+   379, 379, 379, 380, 381, 381, 381, 381, 381, 381, 382,  26, 383,   0,   0, 359,\n+   384, 384, 384, 384, 385, 386, 387, 387, 387, 388, 389, 389, 389, 389, 389, 390,\n+   391, 391, 391, 392, 393, 393, 393, 393, 394, 393, 395,  26, 396, 396, 396, 396,\n+   396, 396, 397, 397, 397, 397, 397, 397, 398, 398, 398, 399, 398, 400, 401, 401,\n+   401, 401, 402, 401, 401, 401, 401, 402, 403, 403, 403, 403, 403,  26, 404, 404,\n+   404, 404, 404, 404, 405, 406, 407, 408, 407, 408, 409, 407, 410, 407, 410, 411,\n+   412, 412, 412, 412, 412, 412, 413,  26, 414, 414, 414, 414, 414, 414, 415,  26,\n+   414, 414, 416,  26, 414,  26,  26,  26, 417,   2,   2,   2,   2,   2, 418, 419,\n+   420, 421, 422, 422, 422, 422, 423, 424, 425, 425, 426, 425, 427, 427, 427, 427,\n+   428, 428, 428, 429, 430, 428,  26,  26, 431, 431, 432, 433, 434, 434, 434, 435,\n+   436, 436, 436, 437, 438, 438, 438, 438, 439, 439, 439, 440, 439, 439, 441, 439,\n+   439, 439, 439, 439, 442, 443, 444, 445, 446, 446, 447, 448, 446, 449, 446, 449,\n+   450, 450, 450, 450, 451, 451, 451, 451, 452, 452, 452, 452, 453, 454, 453,  26,\n+   455, 455, 455, 455, 455, 455, 456, 457, 458, 458, 459, 458, 460, 460, 461, 460,\n+   462, 462, 463, 464,  26, 465,  26,  26, 466, 466, 466, 466, 466, 467,  26,  26,\n+   468, 468, 468, 468, 468, 468, 469,  26, 468, 468, 469, 470, 471, 471, 471, 471,\n+   471,  26, 471, 472, 473, 473, 473, 473, 474, 475, 473, 473, 474, 476,  26,  26,\n+    31,  31,  31,  50, 477, 477, 477, 477, 477, 478, 479,  26, 480,  26,  26,  26,\n+    26,  26,  26, 481, 482, 482, 482, 482, 482,  26, 483, 483, 483, 483, 483, 484,\n+    26,  26, 485, 485, 485, 486,  26,  26,  26,  26, 487, 487, 487, 488,  26,  26,\n+   489, 489, 490,  26, 491, 491, 491, 491, 491, 492, 493, 491, 491, 491, 492, 494,\n+   495, 495, 495, 495, 496, 497, 498, 498, 498, 499, 498, 500, 501, 501, 501, 501,\n+   501, 501, 502, 501, 501,  26, 503, 503, 503, 503, 504,  26, 505, 505, 505, 505,\n+   506, 137, 507,  26, 508, 508, 509, 508, 508, 508, 508, 508, 510,  26,  26,  26,\n+   511, 512, 513, 514, 513, 515, 516, 516, 516, 516, 516, 516, 516, 517, 516, 518,\n+   519, 520, 521, 522, 522, 523, 524, 525, 520, 526, 527, 528, 529, 530, 530,  26,\n+   531, 532, 531, 531, 531, 531, 533, 531, 534, 535, 533, 536, 537,  26,  26,  26,\n+   538, 538, 538, 538, 538, 538, 538, 539, 540,  26,  26,  26, 541, 541, 541, 541,\n+   541,  26, 541, 542, 543, 543, 543, 543, 543, 543, 544, 543, 543, 543, 543, 544,\n+   545, 545, 545, 545, 546,  26, 545, 547, 198, 548,  26,  26, 549, 549, 549, 549,\n+   549, 549, 549, 550, 549, 550, 164, 164, 551,  26,  26,  26, 552, 552, 552, 553,\n+   552, 554, 552, 552, 555,  26,  26,  26, 556, 556, 556, 556, 556, 556, 556, 557,\n+   558, 558, 558, 558, 558, 558, 559, 560, 561, 562, 563, 564, 564, 564, 565, 566,\n+   561,  26, 564, 567, 568, 569, 568, 568, 568, 568, 568, 569, 570,  26,  26,  26,\n+   571, 571, 571, 571, 571,  26, 572, 572, 572, 572, 572, 572, 573,  26, 178, 178,\n+   574, 574, 574, 574, 574, 574, 574, 575,  53, 576,  26,  26, 577, 577, 577, 577,\n+   578,  26, 577, 578, 579, 580, 579, 579, 579, 579, 581, 579, 582,  26, 579, 579,\n+   579, 583, 584, 584, 584, 584, 585, 584, 584, 586, 587,  26, 588, 589, 590, 590,\n+   590, 590, 588, 591, 590,  26, 590, 592, 593, 594, 595, 595, 595, 596, 597, 598,\n+   595, 599,  26,  26, 600, 600, 600, 601, 602, 602, 603, 602, 602, 602, 602, 604,\n+   602, 602, 602, 605,  26,  26, 606,  26, 108, 108, 108, 108, 108, 108, 607, 608,\n+   609, 609, 609, 609, 609, 609, 609, 610, 609, 611, 612,  26, 613,  26,  26,  26,\n+    26,  26, 614, 614, 614, 614, 614, 614, 614, 614, 615,  26, 616, 616, 616, 616,\n+   616, 616, 617,  26, 616, 616, 616, 618, 619, 619, 619, 619, 620,  26,  26,  26,\n+   621, 621, 621, 621, 621, 621, 621, 622, 305, 305, 305, 623, 624, 624, 624, 625,\n+   624, 626, 627, 627, 627, 627, 627, 627, 627, 627, 627, 628, 627, 629, 630, 630,\n+   630, 631, 631,  26, 632, 632, 632, 632, 633,  26, 632, 634, 634, 632, 632, 635,\n+   632, 632,  26,  26, 636, 636, 636, 636, 636, 636, 636, 637, 638, 638, 638, 638,\n+   638, 638, 638, 639, 640, 640, 640, 640, 640, 641, 640, 640, 640, 642, 640, 640,\n+   643,  26, 345,  26, 644, 644, 644, 644, 644, 644, 644,  26, 645, 645, 645, 645,\n+   645, 645, 646,  26,  26,  26,  26, 647, 644, 648,  26,  26,  26,  26, 649, 650,\n+   651, 286, 286, 286, 652,  26, 653,  26,  26,  26, 654,  26, 655,  26, 656, 656,\n+   656, 656, 656, 656, 656, 656, 656, 657, 658, 658, 658, 658, 658, 659, 658, 660,\n+   658, 661, 658, 662, 359,  26,  26,  26,   0,   0,   0, 265,   0,   0, 359,  26,\n+     9, 663,   9,   9, 221,  26,   0,   0,   0,   0, 276,  26, 257, 362,   0,   0,\n+   664, 665,   0, 666, 667, 668,   0,   0,   0, 669,   0,   0, 246,  26,  26,  26,\n+     0,   0, 257,  26,   0,   0,   0, 259,   0,   0, 254,   0,   0,   0,   0, 254,\n+   670, 671,   0, 672, 673,   0,   0,   0, 269, 674, 254, 254,   0,   0,   0, 675,\n+   676, 677, 678,   0, 276,   0,   0,   0,   0, 268,   0,   0, 679, 679, 679, 679,\n+   679, 680,  26, 681, 682, 679,  26,  26,   2,   2,   2, 346, 683, 419,  26,  26,\n+   684, 270, 270, 685, 686, 687,  18,  18,  18, 688,  26,  26,  26, 689,  26,  26,\n+   690, 690, 690, 690, 690, 691, 690, 692, 690, 693,  26,  26,  26,  26, 694, 694,\n+   694, 695,  26,  26, 696, 696, 696, 696, 696, 696, 696, 697,  26,  26, 698, 698,\n+   698, 698, 698, 699,  26,  26, 700, 700, 700, 700, 700, 701, 172, 702, 170, 172,\n+   703, 703, 703, 703, 704, 703, 705,  26, 706, 706, 706, 706, 706, 707, 706, 708,\n+    26,  26, 362,   0,   0,   0, 376,  26, 709,  31,  31,  31, 710, 711, 712, 713,\n+   714, 715, 710, 716, 710, 712, 712, 717,  31, 718,  31, 719, 720, 718,  31, 719,\n+    26,  26, 721,  26,   0, 359,   0,   0,   0, 257, 362,   0, 362,   0, 362,   0,\n+     0, 276,  26,  26, 722,   0,   0,   0, 723,  26,   0,   0,   0,   0,   0, 359,\n+     0, 259, 265,  26, 276,  26,  26,  26,   0,   0,   0, 724,   0, 376,   0, 376,\n+     0,   0, 257, 725,   0, 359, 259,  26,   0,  26,   0, 265,   0,  26,   0,   0,\n+     0, 276,   0, 359, 265,  26,  26,  26,   0, 276,   0, 376,   0, 726,   0,   0,\n+   257, 722,   0, 727,   0, 265,   0, 259, 277, 277, 277, 280, 345,  26, 277, 277,\n+   728,  26, 277, 277, 277, 729, 277, 277, 277, 277,  26,  26, 730,  26,  26,  26,\n+     9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0, 939, 940, 941, 942, 946, 948,   0, 962, 969, 970, 971, 976,\n+  1001,1002,1003,1008,   0,1033,1040,1041,1042,1043,1047,   0,   0,1080,1081,1082,\n+  1086,1110,   0,   0,1124,1125,1126,1127,1131,1133,   0,1147,1154,1155,1156,1161,\n+  1187,1188,1189,1193,   0,1219,1226,1227,1228,1229,1233,   0,   0,1267,1268,1269,\n+  1273,1298,   0,1303, 943,1128, 944,1129, 954,1139, 958,1143, 959,1144, 960,1145,\n+   961,1146, 964,1149,   0,   0, 973,1158, 974,1159, 975,1160, 983,1168, 978,1163,\n+   988,1173, 990,1175, 991,1176, 993,1178, 994,1179,   0,   0,1004,1190,1005,1191,\n+  1006,1192,1014,1199,1007,   0,   0,   0,1016,1201,1020,1206,   0,1022,1208,1025,\n+  1211,1023,1209,   0,   0,   0,   0,1032,1218,1037,1223,1035,1221,   0,   0,   0,\n+  1044,1230,1045,1231,1049,1235,   0,   0,1058,1244,1064,1250,1060,1246,1066,1252,\n+  1067,1253,1072,1258,1069,1255,1077,1264,1074,1261,   0,   0,1083,1270,1084,1271,\n+  1085,1272,1088,1275,1089,1276,1096,1283,1103,1290,1111,1299,1115,1118,1307,1120,\n+  1309,1121,1310,   0,1053,1239,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1093,1280,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n@@ -4199,11 +4404,90 @@\n-     0,   0,   0,   0,   0,   0,   0,   0,   0, 949,1134,1010,1195,1050,1236,1090,\n-  1277,1341,1368,1340,1367,1342,1369,1339,1366,   0,1320,1347,1418,1419,1323,1350,\n-     0,   0, 992,1177,1018,1204,1055,1241,1416,1417,1415,1424,1202,   0,   0,   0,\n-   987,1172,   0,   0,1031,1217,1321,1348,1322,1349,1338,1365, 950,1135, 951,1136,\n-   979,1164, 980,1165,1011,1196,1012,1197,1051,1237,1052,1238,1061,1247,1062,1248,\n-  1091,1278,1092,1279,1071,1257,1076,1263,   0,   0, 997,1182,   0,   0,   0,   0,\n-     0,   0, 945,1130, 982,1167,1337,1364,1335,1362,1046,1232,1422,1423,1113,1301,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   9,   0,  10,\n-  1425,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,\n-     0,1314,1427,   5,1434,1438,1443,   0,1450,   0,1455,1461,1514,   0,   0,   0,\n+     0, 949,1134,1010,1195,1050,1236,1090,1277,1341,1368,1340,1367,1342,1369,1339,\n+  1366,   0,1320,1347,1418,1419,1323,1350,   0,   0, 992,1177,1018,1204,1055,1241,\n+  1416,1417,1415,1424,1202,   0,   0,   0, 987,1172,   0,   0,1031,1217,1321,1348,\n+  1322,1349,1338,1365, 950,1135, 951,1136, 979,1164, 980,1165,1011,1196,1012,1197,\n+  1051,1237,1052,1238,1061,1247,1062,1248,1091,1278,1092,1279,1071,1257,1076,1263,\n+     0,   0, 997,1182,   0,   0,   0,   0,   0,   0, 945,1130, 982,1167,1337,1364,\n+  1335,1362,1046,1232,1422,1423,1113,1301,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   8,   9,   0,  10,1425,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   1,   0,   0,   0,   0,   0,   0,1314,1427,   5,1434,1438,1443,   0,\n+  1450,   0,1455,1461,1514,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1446,1458,\n+  1468,1476,1480,1486,1517,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1489,1503,\n+  1494,1500,1508,   0,   0,   0,   0,1520,1521,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1526,1528,   0,1525,   0,   0,   0,1522,   0,   0,   0,   0,\n+  1536,1532,1539,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1534,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1556,   0,   0,\n+     0,   0,   0,   0,1548,1550,   0,1547,   0,   0,   0,1567,   0,   0,   0,   0,\n+  1558,1554,1561,   0,   0,   0,   0,   0,   0,   0,1568,1569,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1529,1551,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1523,1545,1524,1546,   0,   0,1527,1549,   0,   0,1570,1571,\n+  1530,1552,1531,1553,   0,   0,1533,1555,1535,1557,1537,1559,   0,   0,1572,1573,\n+  1544,1566,1538,1560,1540,1562,1541,1563,1542,1564,   0,   0,1543,1565,   0,   0,\n+     0,   0,   0,   0,   0,   0,1606,1607,1609,1608,1610,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1613,   0,1611,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1612,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1620,   0,   0,\n+     0,   0,   0,   0,   0,1623,   0,   0,1624,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1614,1615,1616,1617,\n+  1618,1619,1621,1622,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1628,\n+  1629,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1625,1626,   0,1627,   0,   0,   0,1634,   0,   0,1635,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1630,1631,1632,\n+     0,   0,1633,   0,   0,   0,   0,   0,   0,   0,   0,   0,1639,   0,   0,1638,\n+  1640,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1636,1637,   0,   0,   0,   0,   0,   0,1641,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1642,1644,\n+  1643,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1645,   0,   0,   0,\n+     0,   0,   0,   0,1646,   0,   0,   0,   0,   0,   0,1648,1649,   0,1647,1650,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1651,1653,\n+  1652,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1654,   0,\n+  1655,1657,1656,   0,   0,   0,   0,1659,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1660,   0,   0,   0,   0,1661,   0,   0,   0,   0,1662,   0,   0,   0,   0,\n+  1663,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1658,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1664,   0,1665,1673,   0,1674,   0,   0,   0,\n+     0,   0,   0,   0,   0,1666,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1668,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1669,   0,   0,   0,   0,1670,   0,   0,   0,   0,1671,   0,   0,   0,   0,\n+  1672,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1667,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1675,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1676,   0,1677,   0,1678,   0,\n+  1679,   0,1680,   0,   0,   0,1681,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1682,\n+     0,1683,   0,   0,1684,1685,   0,1686,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0, 953,1138, 955,1140, 956,1141, 957,1142,1324,1351, 963,1148,\n+   965,1150, 968,1153, 966,1151, 967,1152,1378,1380,1379,1381, 984,1169, 985,1170,\n+  1420,1421, 986,1171, 989,1174, 995,1180, 998,1183, 996,1181, 999,1184,1000,1185,\n+  1015,1200,1329,1356,1017,1203,1019,1205,1021,1207,1024,1210,1687,1688,1027,1213,\n+  1026,1212,1028,1214,1029,1215,1030,1216,1034,1220,1036,1222,1039,1225,1038,1224,\n+  1334,1361,1336,1363,1382,1384,1383,1385,1056,1242,1057,1243,1059,1245,1063,1249,\n+  1689,1690,1065,1251,1068,1254,1070,1256,1386,1387,1388,1389,1691,1692,1073,1259,\n+  1075,1262,1079,1266,1078,1265,1095,1282,1098,1285,1097,1284,1390,1391,1392,1393,\n+  1099,1286,1100,1287,1101,1288,1102,1289,1105,1292,1104,1291,1106,1294,1107,1295,\n+  1108,1296,1114,1302,1119,1308,1122,1311,1123,1312,1186,1260,1293,1305,   0,1394,\n+     0,   0,   0,   0, 952,1137, 947,1132,1317,1344,1316,1343,1319,1346,1318,1345,\n+  1693,1695,1371,1375,1370,1374,1373,1377,1372,1376,1694,1696, 981,1166, 977,1162,\n+   972,1157,1326,1353,1325,1352,1328,1355,1327,1354,1697,1698,1009,1194,1013,1198,\n+  1054,1240,1048,1234,1331,1358,1330,1357,1333,1360,1332,1359,1699,1700,1396,1401,\n+  1395,1400,1398,1403,1397,1402,1399,1404,1094,1281,1087,1274,1406,1411,1405,1410,\n+  1408,1413,1407,1412,1409,1414,1109,1297,1117,1306,1116,1304,1112,1300,   0,   0,\n+     0,   0,   0,   0,1471,1472,1701,1705,1702,1706,1703,1707,1430,1431,1715,1719,\n+  1716,1720,1717,1721,1477,1478,1729,1731,1730,1732,   0,   0,1435,1436,1733,1735,\n+  1734,1736,   0,   0,1481,1482,1737,1741,1738,1742,1739,1743,1439,1440,1751,1755,\n+  1752,1756,1753,1757,1490,1491,1765,1768,1766,1769,1767,1770,1447,1448,1771,1774,\n+  1772,1775,1773,1776,1495,1496,1777,1779,1778,1780,   0,   0,1451,1452,1781,1783,\n+  1782,1784,   0,   0,1504,1505,1785,1788,1786,1789,1787,1790,   0,1459,   0,1791,\n+     0,1792,   0,1793,1509,1510,1794,1798,1795,1799,1796,1800,1462,1463,1808,1812,\n+  1809,1813,1810,1814,1467,  21,1475,  22,1479,  23,1485,  24,1493,  27,1499,  28,\n+  1507,  29,   0,   0,1704,1708,1709,1710,1711,1712,1713,1714,1718,1722,1723,1724,\n+  1725,1726,1727,1728,1740,1744,1745,1746,1747,1748,1749,1750,1754,1758,1759,1760,\n+  1761,1762,1763,1764,1797,1801,1802,1803,1804,1805,1806,1807,1811,1815,1816,1817,\n+  1818,1819,1820,1821,1470,1469,1822,1474,1465,   0,1473,1825,1429,1428,1426,  12,\n+  1432,   0,  26,   0,   0,1315,1823,1484,1466,   0,1483,1829,1433,  13,1437,  14,\n+  1441,1826,1827,1828,1488,1487,1513,  19,   0,   0,1492,1515,1445,1444,1442,  15,\n+     0,1831,1832,1833,1502,1501,1516,  25,1497,1498,1506,1518,1457,1456,1454,  17,\n+  1453,1313,  11,   3,   0,   0,1824,1512,1519,   0,1511,1830,1449,  16,1460,  18,\n+  1464,   4,   0,   0,  30,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   2,   6,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1834,1835,\n@@ -4211,1 +4495,7 @@\n-     0,   0,   0,   0,   0,   0,1446,1458,1468,1476,1480,1486,1517,   0,   0,   0,\n+     0,   0,1836,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1837,1839,1838,   0,   0,   0,   0,1840,   0,   0,   0,   0,1841,   0,   0,\n+  1842,   0,   0,   0,   0,   0,   0,   0,1843,   0,1844,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1845,   0,   0,1846,   0,   0,1847,   0,1848,   0,   0,\n+     0,   0,   0,   0, 937,   0,1850,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1849, 936, 938,1851,1852,   0,   0,1853,1854,   0,   0,1855,1856,   0,   0,\n+     0,   0,   0,   0,1857,1858,   0,   0,1861,1862,   0,   0,1863,1864,   0,   0,\n@@ -4213,13 +4503,2 @@\n-     0,   0,   0,   0,   0,   0,1489,1503,1494,1500,1508,   0,   0,   0,   0,1520,\n-  1521,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1526,1528,   0,1525,\n-     0,   0,   0,1522,   0,   0,   0,   0,1536,1532,1539,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1534,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1556,   0,   0,   0,   0,   0,   0,1548,1550,   0,1547,\n-     0,   0,   0,1567,   0,   0,   0,   0,1558,1554,1561,   0,   0,   0,   0,   0,\n-     0,   0,1568,1569,   0,   0,   0,   0,   0,   0,   0,   0,   0,1529,1551,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1523,1545,1524,1546,\n-     0,   0,1527,1549,   0,   0,1570,1571,1530,1552,1531,1553,   0,   0,1533,1555,\n-  1535,1557,1537,1559,   0,   0,1572,1573,1544,1566,1538,1560,1540,1562,1541,1563,\n-  1542,1564,   0,   0,1543,1565,   0,   0,   0,   0,   0,   0,   0,   0,1606,1607,\n-  1609,1608,1610,   0,   0,   0,   0,   0,   0,   0,   0,   0,1613,   0,1611,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1612,\n+  1867,1868,1869,1870,1859,1860,1865,1866,   0,   0,   0,   0,   0,   0,1871,1872,\n+  1873,1874,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  32,  33,   0,\n@@ -4227,25 +4506,40 @@\n-     0,   0,   0,   0,   0,1620,   0,   0,   0,   0,   0,   0,   0,1623,   0,   0,\n-  1624,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1614,1615,1616,1617,1618,1619,1621,1622,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,1628,1629,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1625,1626,   0,1627,   0,   0,   0,1634,\n-     0,   0,1635,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1630,1631,1632,   0,   0,1633,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1639,   0,   0,1638,1640,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1636,1637,   0,   0,   0,   0,   0,   0,\n-  1641,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1642,1644,1643,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1645,   0,   0,   0,   0,   0,   0,   0,1646,   0,   0,   0,\n-     0,   0,   0,1648,1649,   0,1647,1650,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1651,1653,1652,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1654,   0,1655,1657,1656,   0,   0,   0,   0,1659,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,1660,   0,   0,   0,   0,1661,   0,\n-     0,   0,   0,1662,   0,   0,   0,   0,1663,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1658,   0,   0,   0,   0,   0,   0,   0,   0,   0,1664,\n-     0,1665,1673,   0,1674,   0,   0,   0,   0,   0,   0,   0,   0,1666,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1668,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,1669,   0,   0,   0,   0,1670,   0,\n-     0,   0,   0,1671,   0,   0,   0,   0,1672,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,1667,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1675,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1676,   0,1677,   0,1678,   0,1679,   0,1680,   0,   0,   0,1681,   0,\n+  1875,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1877,   0,1878,   0,1879,   0,1880,   0,1881,   0,1882,   0,1883,   0,1884,   0,\n+  1885,   0,1886,   0,1887,   0,1888,   0,   0,1889,   0,1890,   0,1891,   0,   0,\n+     0,   0,   0,   0,1892,1893,   0,1894,1895,   0,1896,1897,   0,1898,1899,   0,\n+  1900,1901,   0,   0,   0,   0,   0,   0,1876,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1902,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1904,   0,1905,   0,1906,   0,1907,   0,1908,   0,1909,   0,1910,   0,1911,   0,\n+  1912,   0,1913,   0,1914,   0,1915,   0,   0,1916,   0,1917,   0,1918,   0,   0,\n+     0,   0,   0,   0,1919,1920,   0,1921,1922,   0,1923,1924,   0,1925,1926,   0,\n+  1927,1928,   0,   0,   0,   0,   0,   0,1903,   0,   0,1929,1930,1931,1932,   0,\n+     0,   0,1933,   0, 710, 385, 724, 715, 455, 103, 186, 825, 825, 242, 751, 205,\n+   241, 336, 524, 601, 663, 676, 688, 738, 411, 434, 474, 500, 649, 746, 799, 108,\n+   180, 416, 482, 662, 810, 275, 462, 658, 692, 344, 618, 679, 293, 388, 440, 492,\n+   740, 116, 146, 168, 368, 414, 481, 527, 606, 660, 665, 722, 781, 803, 809, 538,\n+   553, 588, 642, 758, 811, 701, 233, 299, 573, 612, 487, 540, 714, 779, 232, 267,\n+   412, 445, 457, 585, 594, 766, 167, 613, 149, 148, 560, 589, 648, 768, 708, 345,\n+   411, 704, 105, 259, 313, 496, 518, 174, 542, 120, 307, 101, 430, 372, 584, 183,\n+   228, 529, 650, 697, 424, 732, 428, 349, 632, 355, 517, 110, 135, 147, 403, 580,\n+   624, 700, 750, 170, 193, 245, 297, 374, 463, 543, 763, 801, 812, 815, 162, 384,\n+   420, 730, 287, 330, 337, 366, 459, 476, 509, 558, 591, 610, 726, 652, 734, 759,\n+   154, 163, 198, 473, 683, 697, 292, 311, 353, 423, 572, 494, 113, 217, 259, 280,\n+   314, 499, 506, 603, 608, 752, 778, 782, 788, 117, 557, 748, 774, 320, 109, 126,\n+   260, 265, 373, 411, 479, 523, 655, 737, 823, 380, 765, 161, 395, 398, 438, 451,\n+   502, 516, 537, 583, 791, 136, 340, 769, 122, 273, 446, 727, 305, 322, 400, 496,\n+   771, 155, 190, 269, 377, 391, 406, 432, 501, 519, 599, 684, 687, 749, 776, 175,\n+   452, 191, 480, 510, 659, 772, 805, 813, 397, 444, 619, 566, 568, 575, 491, 471,\n+   707, 111, 636, 156, 153, 288, 346, 578, 256, 435, 383, 729, 680, 767, 694, 295,\n+   128, 210,   0,   0, 227,   0, 379,   0,   0, 150, 493, 525, 544, 551, 552, 556,\n+   783, 576, 604,   0, 661,   0, 703,   0,   0, 735, 743,   0,   0,   0, 793, 794,\n+   795, 808, 741, 773, 118, 127, 130, 166, 169, 177, 207, 213, 215, 226, 229, 268,\n+   270, 317, 327, 329, 335, 369, 375, 381, 404, 441, 448, 458, 477, 484, 503, 539,\n+   545, 547, 546, 548, 549, 550, 554, 555, 561, 564, 569, 591, 593, 595, 598, 607,\n+   620, 625, 625, 651, 690, 695, 705, 706, 716, 717, 733, 735, 777, 786, 790, 315,\n+   869, 623,   0,   0, 102, 145, 134, 115, 129, 138, 165, 171, 207, 202, 206, 212,\n+   227, 231, 240, 243, 250, 254, 294, 296, 303, 308, 319, 325, 321, 329, 326, 335,\n+   341, 357, 360, 362, 370, 379, 388, 389, 393, 421, 424, 438, 456, 454, 458, 465,\n+   477, 535, 485, 490, 493, 507, 512, 514, 521, 522, 525, 526, 528, 533, 532, 541,\n+   565, 569, 574, 586, 591, 597, 607, 637, 647, 674, 691, 693, 695, 698, 703, 699,\n+   705, 704, 702, 706, 709, 717, 728, 736, 747, 754, 770, 777, 783, 784, 786, 787,\n+   790, 802, 825, 848, 847, 857,  55,  65,  66, 883, 892, 916, 822, 824,   0,   0,\n@@ -4253,34 +4547,7 @@\n-     0,   0,   0,   0,   0,   0,   0,1682,   0,1683,   0,   0,1684,1685,   0,1686,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 953,1138, 955,1140,\n-   956,1141, 957,1142,1324,1351, 963,1148, 965,1150, 968,1153, 966,1151, 967,1152,\n-  1378,1380,1379,1381, 984,1169, 985,1170,1420,1421, 986,1171, 989,1174, 995,1180,\n-   998,1183, 996,1181, 999,1184,1000,1185,1015,1200,1329,1356,1017,1203,1019,1205,\n-  1021,1207,1024,1210,1687,1688,1027,1213,1026,1212,1028,1214,1029,1215,1030,1216,\n-  1034,1220,1036,1222,1039,1225,1038,1224,1334,1361,1336,1363,1382,1384,1383,1385,\n-  1056,1242,1057,1243,1059,1245,1063,1249,1689,1690,1065,1251,1068,1254,1070,1256,\n-  1386,1387,1388,1389,1691,1692,1073,1259,1075,1262,1079,1266,1078,1265,1095,1282,\n-  1098,1285,1097,1284,1390,1391,1392,1393,1099,1286,1100,1287,1101,1288,1102,1289,\n-  1105,1292,1104,1291,1106,1294,1107,1295,1108,1296,1114,1302,1119,1308,1122,1311,\n-  1123,1312,1186,1260,1293,1305,   0,1394,   0,   0,   0,   0, 952,1137, 947,1132,\n-  1317,1344,1316,1343,1319,1346,1318,1345,1693,1695,1371,1375,1370,1374,1373,1377,\n-  1372,1376,1694,1696, 981,1166, 977,1162, 972,1157,1326,1353,1325,1352,1328,1355,\n-  1327,1354,1697,1698,1009,1194,1013,1198,1054,1240,1048,1234,1331,1358,1330,1357,\n-  1333,1360,1332,1359,1699,1700,1396,1401,1395,1400,1398,1403,1397,1402,1399,1404,\n-  1094,1281,1087,1274,1406,1411,1405,1410,1408,1413,1407,1412,1409,1414,1109,1297,\n-  1117,1306,1116,1304,1112,1300,   0,   0,   0,   0,   0,   0,1471,1472,1701,1705,\n-  1702,1706,1703,1707,1430,1431,1715,1719,1716,1720,1717,1721,1477,1478,1729,1731,\n-  1730,1732,   0,   0,1435,1436,1733,1735,1734,1736,   0,   0,1481,1482,1737,1741,\n-  1738,1742,1739,1743,1439,1440,1751,1755,1752,1756,1753,1757,1490,1491,1765,1768,\n-  1766,1769,1767,1770,1447,1448,1771,1774,1772,1775,1773,1776,1495,1496,1777,1779,\n-  1778,1780,   0,   0,1451,1452,1781,1783,1782,1784,   0,   0,1504,1505,1785,1788,\n-  1786,1789,1787,1790,   0,1459,   0,1791,   0,1792,   0,1793,1509,1510,1794,1798,\n-  1795,1799,1796,1800,1462,1463,1808,1812,1809,1813,1810,1814,1467,  21,1475,  22,\n-  1479,  23,1485,  24,1493,  27,1499,  28,1507,  29,   0,   0,1704,1708,1709,1710,\n-  1711,1712,1713,1714,1718,1722,1723,1724,1725,1726,1727,1728,1740,1744,1745,1746,\n-  1747,1748,1749,1750,1754,1758,1759,1760,1761,1762,1763,1764,1797,1801,1802,1803,\n-  1804,1805,1806,1807,1811,1815,1816,1817,1818,1819,1820,1821,1470,1469,1822,1474,\n-  1465,   0,1473,1825,1429,1428,1426,  12,1432,   0,  26,   0,   0,1315,1823,1484,\n-  1466,   0,1483,1829,1433,  13,1437,  14,1441,1826,1827,1828,1488,1487,1513,  19,\n-     0,   0,1492,1515,1445,1444,1442,  15,   0,1831,1832,1833,1502,1501,1516,  25,\n-  1497,1498,1506,1518,1457,1456,1454,  17,1453,1313,  11,   3,   0,   0,1824,1512,\n-  1519,   0,1511,1830,1449,  16,1460,  18,1464,   4,   0,   0,  30,  31,   0,   0,\n+     0,1586,   0,1605,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1602,1603,\n+  1934,1935,1574,1575,1576,1577,1579,1580,1581,1583,1584,   0,1585,1587,1588,1589,\n+  1591,   0,1592,   0,1593,1594,   0,1595,1596,   0,1598,1599,1600,1601,1604,1582,\n+  1578,1590,1597,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1936,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1937,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1938,   0,\n+  1939,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1940,\n@@ -4288,103 +4555,48 @@\n-     0,   0,  20,   0,   0,   0,   2,   6,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1834,1835,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1836,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,1837,1839,1838,   0,   0,   0,   0,\n-  1840,   0,   0,   0,   0,1841,   0,   0,1842,   0,   0,   0,   0,   0,   0,   0,\n-  1843,   0,1844,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1845,   0,   0,\n-  1846,   0,   0,1847,   0,1848,   0,   0,   0,   0,   0,   0, 937,   0,1850,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,1849, 936, 938,1851,1852,   0,   0,\n-  1853,1854,   0,   0,1855,1856,   0,   0,   0,   0,   0,   0,1857,1858,   0,   0,\n-  1861,1862,   0,   0,1863,1864,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1867,1868,1869,1870,1859,1860,1865,1866,\n-     0,   0,   0,   0,   0,   0,1871,1872,1873,1874,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,  32,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1875,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1877,   0,1878,   0,1879,   0,1880,   0,\n-  1881,   0,1882,   0,1883,   0,1884,   0,1885,   0,1886,   0,1887,   0,1888,   0,\n-     0,1889,   0,1890,   0,1891,   0,   0,   0,   0,   0,   0,1892,1893,   0,1894,\n-  1895,   0,1896,1897,   0,1898,1899,   0,1900,1901,   0,   0,   0,   0,   0,   0,\n-  1876,   0,   0,   0,   0,   0,   0,   0,   0,   0,1902,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,1904,   0,1905,   0,1906,   0,1907,   0,\n-  1908,   0,1909,   0,1910,   0,1911,   0,1912,   0,1913,   0,1914,   0,1915,   0,\n-     0,1916,   0,1917,   0,1918,   0,   0,   0,   0,   0,   0,1919,1920,   0,1921,\n-  1922,   0,1923,1924,   0,1925,1926,   0,1927,1928,   0,   0,   0,   0,   0,   0,\n-  1903,   0,   0,1929,1930,1931,1932,   0,   0,   0,1933,   0, 710, 385, 724, 715,\n-   455, 103, 186, 825, 825, 242, 751, 205, 241, 336, 524, 601, 663, 676, 688, 738,\n-   411, 434, 474, 500, 649, 746, 799, 108, 180, 416, 482, 662, 810, 275, 462, 658,\n-   692, 344, 618, 679, 293, 388, 440, 492, 740, 116, 146, 168, 368, 414, 481, 527,\n-   606, 660, 665, 722, 781, 803, 809, 538, 553, 588, 642, 758, 811, 701, 233, 299,\n-   573, 612, 487, 540, 714, 779, 232, 267, 412, 445, 457, 585, 594, 766, 167, 613,\n-   149, 148, 560, 589, 648, 768, 708, 345, 411, 704, 105, 259, 313, 496, 518, 174,\n-   542, 120, 307, 101, 430, 372, 584, 183, 228, 529, 650, 697, 424, 732, 428, 349,\n-   632, 355, 517, 110, 135, 147, 403, 580, 624, 700, 750, 170, 193, 245, 297, 374,\n-   463, 543, 763, 801, 812, 815, 162, 384, 420, 730, 287, 330, 337, 366, 459, 476,\n-   509, 558, 591, 610, 726, 652, 734, 759, 154, 163, 198, 473, 683, 697, 292, 311,\n-   353, 423, 572, 494, 113, 217, 259, 280, 314, 499, 506, 603, 608, 752, 778, 782,\n-   788, 117, 557, 748, 774, 320, 109, 126, 260, 265, 373, 411, 479, 523, 655, 737,\n-   823, 380, 765, 161, 395, 398, 438, 451, 502, 516, 537, 583, 791, 136, 340, 769,\n-   122, 273, 446, 727, 305, 322, 400, 496, 771, 155, 190, 269, 377, 391, 406, 432,\n-   501, 519, 599, 684, 687, 749, 776, 175, 452, 191, 480, 510, 659, 772, 805, 813,\n-   397, 444, 619, 566, 568, 575, 491, 471, 707, 111, 636, 156, 153, 288, 346, 578,\n-   256, 435, 383, 729, 680, 767, 694, 295, 128, 210,   0,   0, 227,   0, 379,   0,\n-     0, 150, 493, 525, 544, 551, 552, 556, 783, 576, 604,   0, 661,   0, 703,   0,\n-     0, 735, 743,   0,   0,   0, 793, 794, 795, 808, 741, 773, 118, 127, 130, 166,\n-   169, 177, 207, 213, 215, 226, 229, 268, 270, 317, 327, 329, 335, 369, 375, 381,\n-   404, 441, 448, 458, 477, 484, 503, 539, 545, 547, 546, 548, 549, 550, 554, 555,\n-   561, 564, 569, 591, 593, 595, 598, 607, 620, 625, 625, 651, 690, 695, 705, 706,\n-   716, 717, 733, 735, 777, 786, 790, 315, 869, 623,   0,   0, 102, 145, 134, 115,\n-   129, 138, 165, 171, 207, 202, 206, 212, 227, 231, 240, 243, 250, 254, 294, 296,\n-   303, 308, 319, 325, 321, 329, 326, 335, 341, 357, 360, 362, 370, 379, 388, 389,\n-   393, 421, 424, 438, 456, 454, 458, 465, 477, 535, 485, 490, 493, 507, 512, 514,\n-   521, 522, 525, 526, 528, 533, 532, 541, 565, 569, 574, 586, 591, 597, 607, 637,\n-   647, 674, 691, 693, 695, 698, 703, 699, 705, 704, 702, 706, 709, 717, 728, 736,\n-   747, 754, 770, 777, 783, 784, 786, 787, 790, 802, 825, 848, 847, 857,  55,  65,\n-    66, 883, 892, 916, 822, 824,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,1586,   0,1605,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1602,1603,1934,1935,1574,1575,1576,1577,1579,1580,\n-  1581,1583,1584,   0,1585,1587,1588,1589,1591,   0,1592,   0,1593,1594,   0,1595,\n-  1596,   0,1598,1599,1600,1601,1604,1582,1578,1590,1597,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1936,   0,1937,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,1938,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1939,1940,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,1941,1942,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,1944,1943,   0,1945,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1946,1947,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,1948,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1949,1950,1951,1952,1953,1954,\n-  1955,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,1956,1957,1958,1960,1959,1961,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 106, 104, 107, 826,\n-   114, 118, 119, 121, 123, 124, 127, 125,  34, 830, 130, 131, 132, 137, 827,  35,\n-   133, 139, 829, 142, 143, 112, 144, 145, 924, 151, 152,  37, 157, 158, 159, 160,\n-    38, 165, 166, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 182, 182,\n-   833, 468, 184, 185, 834, 187, 188, 189, 196, 192, 194, 195, 197, 199, 200, 201,\n-   203, 204, 204, 206, 208, 209, 211, 218, 213, 219, 214, 216, 153, 234, 221, 222,\n-   223, 220, 225, 224, 230, 835, 235, 236, 237, 238, 239, 244, 836, 837, 247, 248,\n-   249, 246, 251,  39,  40, 253, 255, 255, 838, 257, 258, 259, 261, 839, 262, 263,\n-   301, 264,  41, 266, 270, 272, 271, 841, 274, 842, 277, 276, 278, 281, 282,  42,\n-   283, 284, 285, 286,  43, 843,  44, 289, 290, 291, 293, 934, 298, 845, 845, 621,\n-   300, 300,  45, 852, 894, 302, 304,  46, 306, 309, 310, 312, 316,  48,  47, 317,\n-   846, 318, 323, 324, 325, 324, 328, 329, 333, 331, 332, 334, 335, 336, 338, 339,\n-   342, 343, 347, 351, 849, 350, 348, 352, 354, 359, 850, 361, 358, 356,  49, 363,\n-   365, 367, 364,  50, 369, 371, 851, 376, 386, 378,  53, 381,  52,  51, 140, 141,\n-   387, 382, 614,  78, 388, 389, 390, 394, 392, 856,  54, 399, 396, 402, 404, 858,\n-   405, 401, 407,  55, 408, 409, 410, 413, 859, 415,  56, 417, 860, 418,  57, 419,\n-   422, 424, 425, 861, 840, 862, 426, 863, 429, 431, 427, 433, 437, 441, 438, 439,\n-   442, 443, 864, 436, 449, 450,  58, 454, 453, 865, 447, 460, 866, 867, 461, 466,\n-   465, 464,  59, 467, 470, 469, 472, 828, 475, 868, 478, 870, 483, 485, 486, 871,\n-   488, 489, 872, 873, 495, 497,  60, 498,  61,  61, 504, 505, 507, 508, 511,  62,\n-   513, 874, 515, 875, 518, 844, 520, 876, 877, 878,  63,  64, 528, 880, 879, 881,\n-   882, 530, 531, 531, 533,  66, 534,  67,  68, 884, 536, 538, 541,  69, 885, 549,\n-   886, 887, 556, 559,  70, 561, 562, 563, 888, 889, 889, 567,  71, 890, 570, 571,\n-    72, 891, 577,  73, 581, 579, 582, 893, 587,  74, 590, 592, 596,  75, 895, 896,\n-    76, 897, 600, 898, 602, 605, 607, 899, 900, 609, 901, 611, 853,  77, 615, 616,\n-    79, 617, 252, 902, 903, 854, 855, 621, 622, 731,  80, 627, 626, 628, 164, 629,\n-   630, 631, 633, 904, 632, 634, 639, 640, 635, 641, 646, 651, 638, 643, 644, 645,\n-   905, 907, 906,  81, 653, 654, 656, 911, 657, 908,  82,  83, 909, 910,  84, 664,\n-   665, 666, 667, 669, 668, 671, 670, 674, 672, 673, 675,  85, 677, 678,  86, 681,\n-   682, 912, 685, 686,  87, 689,  36, 913, 914,  88,  89, 696, 702, 709, 711, 915,\n-   712, 713, 718, 719, 917, 831, 721, 720, 723, 832, 725, 728, 918, 919, 739, 742,\n-   744, 920, 745, 753, 756, 757, 755, 760, 761, 921, 762,  90, 764, 922,  91, 775,\n-   279, 780, 923, 925,  92,  93, 785, 926,  94, 927, 787, 787, 789, 928, 792,  95,\n-   796, 797, 798, 800,  96, 929, 802, 804, 806,  97,  98, 807, 930,  99, 931, 932,\n-   933, 814, 100, 816, 817, 818, 819, 820, 821, 935,   0,   0,\n+     0,   0,1941,1942,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1943,\n+  1944,   0,   0,   0,   0,   0,   0,1945,   0,1946,   0,   0,   0,   0,   0,   0,\n+     0,   0,1947,   0,   0,1948,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1950,   0,1949,1951,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1953,\n+  1952,   0,1954,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1955,1956,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1957,   0,   0,   0,\n+     0,   0,   0,   0,   0,1958,1961,1959,1965,1960,1962,1964,1963,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1967,1966,1968,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1969,1970,1971,1972,1973,1974,1975,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1976,\n+  1977,1978,1980,1979,1981,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0, 106, 104, 107, 826, 114, 118, 119, 121, 123, 124, 127, 125,\n+    34, 830, 130, 131, 132, 137, 827,  35, 133, 139, 829, 142, 143, 112, 144, 145,\n+   924, 151, 152,  37, 157, 158, 159, 160,  38, 165, 166, 169, 171, 172, 173, 174,\n+   176, 177, 178, 179, 181, 182, 182, 182, 833, 468, 184, 185, 834, 187, 188, 189,\n+   196, 192, 194, 195, 197, 199, 200, 201, 203, 204, 204, 206, 208, 209, 211, 218,\n+   213, 219, 214, 216, 153, 234, 221, 222, 223, 220, 225, 224, 230, 835, 235, 236,\n+   237, 238, 239, 244, 836, 837, 247, 248, 249, 246, 251,  39,  40, 253, 255, 255,\n+   838, 257, 258, 259, 261, 839, 262, 263, 301, 264,  41, 266, 270, 272, 271, 841,\n+   274, 842, 277, 276, 278, 281, 282,  42, 283, 284, 285, 286,  43, 843,  44, 289,\n+   290, 291, 293, 934, 298, 845, 845, 621, 300, 300,  45, 852, 894, 302, 304,  46,\n+   306, 309, 310, 312, 316,  48,  47, 317, 846, 318, 323, 324, 325, 324, 328, 329,\n+   333, 331, 332, 334, 335, 336, 338, 339, 342, 343, 347, 351, 849, 350, 348, 352,\n+   354, 359, 850, 361, 358, 356,  49, 363, 365, 367, 364,  50, 369, 371, 851, 376,\n+   386, 378,  53, 381,  52,  51, 140, 141, 387, 382, 614,  78, 388, 389, 390, 394,\n+   392, 856,  54, 399, 396, 402, 404, 858, 405, 401, 407,  55, 408, 409, 410, 413,\n+   859, 415,  56, 417, 860, 418,  57, 419, 422, 424, 425, 861, 840, 862, 426, 863,\n+   429, 431, 427, 433, 437, 441, 438, 439, 442, 443, 864, 436, 449, 450,  58, 454,\n+   453, 865, 447, 460, 866, 867, 461, 466, 465, 464,  59, 467, 470, 469, 472, 828,\n+   475, 868, 478, 870, 483, 485, 486, 871, 488, 489, 872, 873, 495, 497,  60, 498,\n+    61,  61, 504, 505, 507, 508, 511,  62, 513, 874, 515, 875, 518, 844, 520, 876,\n+   877, 878,  63,  64, 528, 880, 879, 881, 882, 530, 531, 531, 533,  66, 534,  67,\n+    68, 884, 536, 538, 541,  69, 885, 549, 886, 887, 556, 559,  70, 561, 562, 563,\n+   888, 889, 889, 567,  71, 890, 570, 571,  72, 891, 577,  73, 581, 579, 582, 893,\n+   587,  74, 590, 592, 596,  75, 895, 896,  76, 897, 600, 898, 602, 605, 607, 899,\n+   900, 609, 901, 611, 853,  77, 615, 616,  79, 617, 252, 902, 903, 854, 855, 621,\n+   622, 731,  80, 627, 626, 628, 164, 629, 630, 631, 633, 904, 632, 634, 639, 640,\n+   635, 641, 646, 651, 638, 643, 644, 645, 905, 907, 906,  81, 653, 654, 656, 911,\n+   657, 908,  82,  83, 909, 910,  84, 664, 665, 666, 667, 669, 668, 671, 670, 674,\n+   672, 673, 675,  85, 677, 678,  86, 681, 682, 912, 685, 686,  87, 689,  36, 913,\n+   914,  88,  89, 696, 702, 709, 711, 915, 712, 713, 718, 719, 917, 831, 721, 720,\n+   723, 832, 725, 728, 918, 919, 739, 742, 744, 920, 745, 753, 756, 757, 755, 760,\n+   761, 921, 762,  90, 764, 922,  91, 775, 279, 780, 923, 925,  92,  93, 785, 926,\n+    94, 927, 787, 787, 789, 928, 792,  95, 796, 797, 798, 800,  96, 929, 802, 804,\n+   806,  97,  98, 807, 930,  99, 931, 932, 933, 814, 100, 816, 817, 818, 819, 820,\n+   821, 935,   0,   0,\n@@ -4406,1 +4618,1 @@\n-  return u<1114110u?_hb_ucd_u8[6808+(((_hb_ucd_u8[1312+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n+  return u<1114110u?_hb_ucd_u8[6472+(((_hb_ucd_u8[816+(((_hb_ucd_u16[((_hb_ucd_u8[272+(((_hb_ucd_u8[u>>1>>3>>4>>4])<<4)+((u>>1>>3>>4)&15u))])<<4)+((u>>1>>3)&15u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n@@ -4411,1 +4623,1 @@\n-  return u<125259u?_hb_ucd_u8[8800+(((_hb_ucd_u8[8244+(((_hb_ucd_u8[7784+(((_hb_ucd_u8[7432+(((_hb_ucd_u8[7186+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n+  return u<125259u?_hb_ucd_u8[8504+(((_hb_ucd_u8[7936+(((_hb_ucd_u8[7460+(((_hb_ucd_u8[7100+(((_hb_ucd_u8[6854+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n@@ -4421,1 +4633,1 @@\n-  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[9692+(((_hb_ucd_u8[9460+(((_hb_ucd_u8[9364+(((_hb_ucd_b4(9300+_hb_ucd_u8,u>>1>>2>>3>>3))<<3)+((u>>1>>2>>3)&7u))])<<3)+((u>>1>>2)&7u))])<<2)+((u>>1)&3u))])<<1)+((u)&1u)]:0;\n+  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[9396+(((_hb_ucd_u8[9164+(((_hb_ucd_u8[9068+(((_hb_ucd_b4(9004+_hb_ucd_u8,u>>1>>2>>3>>3))<<3)+((u>>1>>2>>3)&7u))])<<3)+((u>>1>>2)&7u))])<<2)+((u>>1)&3u))])<<1)+((u)&1u)]:0;\n@@ -4426,1 +4638,1 @@\n-  return u<918000u?_hb_ucd_u8[11126+(((_hb_ucd_u16[4040+(((_hb_ucd_u16[2048+(((_hb_ucd_u8[10390+(((_hb_ucd_u8[9940+(u>>2>>2>>3>>4)])<<4)+((u>>2>>2>>3)&15u))])<<3)+((u>>2>>2)&7u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:2;\n+  return u<918000u?_hb_ucd_u8[10398+(((_hb_ucd_u16[3952+(((_hb_ucd_u16[2624+(((_hb_ucd_u8[9870+(((_hb_ucd_u8[9644+(u>>3>>2>>3>>4)])<<4)+((u>>3>>2>>3)&15u))])<<3)+((u>>3>>2)&7u))])<<2)+((u>>3)&3u))])<<3)+((u)&7u))]:2;\n@@ -4431,1 +4643,1 @@\n-  return u<195102u?_hb_ucd_u16[6748+(((_hb_ucd_u8[13952+(((_hb_ucd_u8[13570+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n+  return u<195102u?_hb_ucd_u16[6244+(((_hb_ucd_u8[16628+(((_hb_ucd_u8[16246+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n@@ -4438,1 +4650,1 @@\n-_hb_ucd_u8[13386] =\n+_hb_ucd_u8[13730] =\n@@ -4442,2 +4654,2 @@\n-   14, 15, 16, 17, 18, 19, 20, 21, 22, 21, 21, 21, 21, 23,  7,  7,\n-    7, 24, 21, 21, 21, 25, 26, 27, 21, 28, 29, 30, 31, 32, 33, 34,\n+   14, 15, 16, 17, 18, 19, 20,  7, 21, 22, 22, 22, 23, 24,  7,  7,\n+    7, 25, 22, 22, 22, 26, 27, 28, 22, 29, 30, 31, 32, 33, 34, 35,\n@@ -4445,25 +4657,25 @@\n-    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 35, 21, 36,\n-    7,  7,  7,  7, 37, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   38, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n-   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 21, 22, 36,\n+    7,  7,  7,  7, 37, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   38, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n@@ -4489,6 +4701,7 @@\n-  120,121,122,123,124,125,126,127, 34,128,129,111,130,131,132,133,\n-  134,135,136,137,138,139,140,111,141,142,111,143,144,145,146,111,\n-  147,148,149,150,151,152,153,111,154,155,156,157,111,158,159,160,\n-   34, 34, 34, 34, 34, 34, 34, 34,161, 34, 34,111,111,111,111,111,\n-  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,162,\n-   34, 34, 34, 34, 34, 34, 34, 34,163,111,111,111,111,111,111,111,\n+  120,121,122,123,124,125,126,127, 34,128,129,130,131,132,133,134,\n+  135,136,137,138,139,140,141,142,143,144,111,145,146,147,148,111,\n+  149,150,151,152,153,154,155,156,157,158,159,160,111,161,162,163,\n+   34, 34, 34, 34, 34, 34, 34, 34,164, 34, 34,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,165,\n+   34, 34, 34, 34, 34, 34, 34, 34,166, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,111,111,111,\n@@ -4496,2 +4709,2 @@\n-  111,111,111,111,111,111,111,111, 34, 34, 34, 34, 34,111,111,111,\n-   34, 34, 34, 34,164,165,166, 34,111,111,111,111,167,168,169,170,\n+  111,111,167,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+   34, 34, 34, 34,168,169,170, 34,111,111,171,111,172,173,174,175,\n@@ -4501,9 +4714,8 @@\n-  111,111,111,111,111,111,111,111, 34,171,111,111,111,111,111,111,\n-  111,111,111,111,111,111,111,111,111,111,111,111,111,111,172, 67,\n-   67, 67,173,174,175,130, 65,111,176,177,178,179,180,181,182,183,\n-   67, 67, 67, 67,184,185,111,111,111,111,111,111,111,111,186,111,\n-  187,188,189,111,111,190,111,111,111,191,111,111,111,111,111, 34,\n-   34,192,193,111,111,111,111,111,130,194,195,111, 34,196,111,111,\n-   67, 67,197, 67, 67,111, 67,198, 67, 67, 67, 67, 67, 67, 67, 67,\n-   67, 67, 67, 67, 67, 67, 67,199,111,111,111,111,111,111,111,111,\n-   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,111,111,111,\n+  111,111,111,111,111,111,111,111, 34,176,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111, 67,177, 67, 67, 67, 67,178, 67,\n+   67, 67,179,180,181,131, 65,111,182,183,184,185,186,187,188,189,\n+   67, 67, 67, 67,190,191,111,111,111,111,111,111,111,111,192,111,\n+  193,194,195,111,111,196,111,111,111,197,111,198,111,111,111, 34,\n+   34,199,200,111,111,111,111,111,131,201,202,111, 34,203,111,111,\n+   67, 67,204, 67, 67,111, 67,205, 67, 67, 67, 67, 67, 67, 67, 67,\n+   67, 67, 67, 67, 67, 67, 67,177,111,111,111,111,111,111,111,111,\n@@ -4512,1 +4724,1 @@\n-  200,111,188,188,111,111,111,111,111,111,111,111,111,111,111,111,\n+  206,111,194,194,111,111,111,111,111,111,111,111,111,111,111,111,\n@@ -4547,2 +4759,2 @@\n-   36, 36, 36, 36, 74, 36, 36, 36, 59, 59, 59, 59, 43, 43, 43, 43,\n-   36, 36, 36, 36, 75, 43, 43, 43, 43, 76, 43, 43, 43, 43, 43, 43,\n+   36, 36, 36, 36, 74, 36, 36, 36, 59, 59, 59, 75, 43, 43, 43, 43,\n+   36, 36, 36, 36, 76, 43, 43, 43, 43, 75, 43, 43, 43, 43, 43, 43,\n@@ -4593,2 +4805,2 @@\n-    7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2, 98,  2, 56, 43, 76,\n-   36, 75, 36, 36, 36, 36, 36, 36, 36, 36, 64, 65, 36, 36, 36, 36,\n+    7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2, 98,  2, 56, 43, 75,\n+   36, 76, 36, 36, 36, 36, 36, 36, 36, 36, 64, 65, 36, 36, 36, 36,\n@@ -4601,1 +4813,1 @@\n-   36, 36, 77, 43, 43, 77, 77, 78, 78, 77, 81, 36, 36, 36, 36, 36,\n+   36, 36, 77, 43, 43, 77, 77, 78, 78, 77, 81, 36, 36, 36, 36,  2,\n@@ -4607,110 +4819,115 @@\n-   43, 57, 43, 43, 43, 43, 43, 43, 77, 43, 43, 43, 65, 36, 64, 36,\n-   36, 36, 65, 82, 43, 36, 36, 36, 16, 16, 16, 16, 16, 16, 40, 40,\n-   40, 40, 40, 40, 40, 44, 16, 16, 16, 16, 16, 16, 44, 16, 16, 16,\n-   16, 16, 16, 16, 16,100, 40, 40, 32, 32, 32, 16, 16, 16, 16, 32,\n-   16, 16, 16, 16, 11, 11, 11, 11, 16, 16, 16, 16, 34, 11, 11, 11,\n-   16, 16, 16, 16,101,101,101,101, 16, 16, 16, 16, 11, 11,102,103,\n-   41, 16, 16, 16, 11, 11,102, 41, 16, 16, 16, 16, 11, 11,104, 41,\n-  105,105,105,105,105,106, 59, 59, 51, 51, 51,  2,107,108,107,108,\n-    2,  2,  2,  2,109, 59, 59,110,  2,  2,  2,  2,111,112,  2,113,\n-  114,  2,115,116,  2,  2,  2,  2,  2,  9,114,  2,  2,  2,  2,117,\n-   59, 59, 59, 59, 59, 59, 59, 59,118, 40, 27, 27, 27,  8,115,119,\n-   27, 27, 27, 27, 27,  8,115, 94, 20, 20, 20, 20, 20, 20, 20, 20,\n-   43, 43, 43, 43, 43, 43,120, 48, 99, 48, 99, 43, 43, 43, 43, 43,\n-   61,121, 61,122, 61, 34, 11, 16, 11, 32,122, 61, 46, 11, 11, 61,\n-   61, 61,121,121,121, 11, 11,123, 11, 11, 35, 36, 39, 61, 16, 11,\n-    8,  8, 46, 16, 16, 26, 61,124, 95, 95, 95, 95, 95, 95, 95, 95,\n-   95,125,126, 95,127, 61, 61, 61,  8,  8,128, 61, 61,  8, 61, 61,\n-  128, 26, 61,128, 61, 61, 61,128, 61, 61, 61, 61, 61, 61, 61,  8,\n-   61,128,128, 61, 61, 61, 61, 61, 61, 61,  8,  8,  8,  8,  8,  8,\n-    8,  8,  8,  8,  8,  8,  8,  8, 61, 61, 61, 61,  4,  4, 61, 61,\n-    8, 61, 61, 61,129,130, 61, 61, 61, 61, 61, 61, 61, 61,128, 61,\n-   61, 61, 61, 61, 61, 26,  8,  8,  8,  8, 61, 61, 61, 61, 61, 61,\n-   61, 61, 61, 61, 61, 61,  8,  8,  8, 61, 61, 61, 61, 61, 61, 61,\n-   27, 27, 27, 27, 27, 27, 61, 61, 61, 61, 61, 61, 61, 27, 27, 27,\n-   61, 61, 61, 26, 61, 61, 61, 61, 26, 61, 61, 61, 61, 61, 61, 61,\n-   61, 61, 61, 61,  8,  8,  8,  8, 61, 61, 61, 61, 61, 61, 61, 26,\n-   61, 61, 61, 61,  4,  4,  4,  4,  4,  4,  4, 27, 27, 27, 27, 27,\n-   27, 27, 61, 61, 61, 61, 61, 61,  8,  8,115,131,  8,  8,  8,  8,\n-    8,  8,  8,  4,  4,  4,  4,  4,  8,115,132,132,132,132,132,132,\n-  132,132,132,132,131,  8,  8,  8,  8,  8,  8,  8,  4,  4,  8,  8,\n-    8,  8,  8,  8,  8,  8,  4,  8,  8,  8,128, 26,  8,  8,128, 61,\n-   32, 11, 32, 34, 34, 34, 34, 11, 32, 32, 34, 16, 16, 16, 40, 11,\n-   32, 32,124, 61, 61,122, 34,133, 43, 32, 16, 16, 50,  2, 90,  2,\n-   36, 36, 36, 36, 36, 36, 36, 75,  2,  2,  2,  2,  2,  2,  2, 56,\n-    2,107,107,  2,111,112,107,  2,  2,  2,  2,  6,  2, 98,107,  2,\n-  107,  4,  4,  4,  4,  2,  2, 80,  2,  2,  2,  2,  2, 51,  2,  2,\n-   98,134,  2,  2,  2,  2,  2,  2, 61,  2,135,132,132,132,136, 51,\n-   51, 51, 51, 51, 51, 51, 51, 51,  1,  2,137,138,  4,  4,  4,  4,\n-    4, 61,  4,  4,  4,  4,139, 94,140, 95, 95, 95, 95, 43, 43, 78,\n-  141, 40, 40, 61, 95,142, 58, 61, 72, 36, 36, 36, 36, 36, 36, 36,\n-   36, 36, 36, 36, 64,143,144, 63, 36, 36, 36, 36, 36, 58, 40, 63,\n-   61, 27, 27, 61, 61, 61, 61, 61, 27, 27, 27, 27, 27, 61, 61, 61,\n-   61, 61, 61, 61, 27, 27, 27, 27,145, 27, 27, 27, 27, 27, 27, 27,\n-   36, 36, 75, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,146,  2,\n-   32, 32, 32, 32, 32, 32, 32, 64, 48,147, 43, 43, 43, 43, 43, 80,\n-   32, 32, 32, 32, 32, 32, 40, 43, 36, 36, 36, 95, 95, 95, 95, 95,\n-   43,  2,  2,  2,  2,  2,  2,  2, 41, 41, 41,144, 40, 40, 40, 40,\n-   41, 32, 32, 32, 32, 32, 32, 32, 16, 32, 32, 32, 32, 32, 32, 32,\n-   44, 16, 16, 16, 34, 34, 34, 32, 32, 32, 32, 32, 42,148, 34, 35,\n-   32, 32, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 11, 11, 32,\n-   11, 11, 32, 32, 32, 32, 32, 32, 32, 32, 11, 11, 34, 16, 16, 16,\n-   32, 16, 16, 32, 32, 16, 16, 16, 16, 40,149, 35, 40, 35, 36, 36,\n-   36, 65, 36, 65, 36, 64, 36, 36, 36, 82, 79, 77, 61, 61, 43, 43,\n-   27, 27, 27, 61,150, 61, 61, 61, 36, 36,  2,  2,  2,  2,  2,  2,\n-   78, 36, 36, 36, 36, 36, 36, 36, 36, 36, 78, 78, 78, 78, 78, 78,\n-   78, 78, 43, 43, 43, 43, 43,  2, 43, 36, 36, 36,  2, 66, 66, 64,\n-   36, 36, 36, 43, 43, 43, 43,  2, 36, 36, 36, 64, 43, 43, 43, 43,\n-   43, 78, 78, 78, 78, 78, 78, 97, 36, 64, 78, 43, 43, 78, 43, 78,\n-   97,  2,  2,  2,  2,  2,  2, 80,  7,  7,  7,  7,  7,  7,  7,  2,\n-   36, 36, 64, 63, 36, 36, 36, 36, 36, 36, 36, 36, 64, 43, 43, 77,\n-   79, 77, 79, 43, 43, 43, 43, 43, 36, 64, 36, 36, 36, 36, 77, 78,\n-    7,  7,  7,  7,  7,  7,  2,  2, 63, 36, 36, 71, 61, 82, 77, 36,\n-   65, 43, 65, 64, 65, 36, 36, 43, 36, 36, 36, 36, 36, 36, 75,  2,\n-   36, 36, 36, 36, 36, 82, 43, 78,  2, 75,151, 43, 43, 43, 43, 43,\n-   16, 16, 16, 16, 16,103, 40, 40, 16, 16, 16, 16,100, 41, 41, 41,\n-   36, 82, 79, 78, 77, 97, 79, 43,152,152,152,152,152,152,152,152,\n-  153,153,153,153,153,153,153,153, 16, 16, 16, 16, 16, 16, 35, 65,\n-   36, 36, 36, 36,154, 36, 36, 36, 36, 41, 41, 41, 41, 41, 41, 41,\n-   41, 74, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,132,\n-   36, 36, 36, 36, 36, 36, 36, 71, 36, 36, 36, 36, 36, 36,150, 61,\n-    2,  2,  2,135,116,  2,  2,  2,  6,155,156,132,132,132,132,132,\n-  132,132,116,135,116,  2,113,157,  2,  2,  2,  2,139,132,132,116,\n-    2,158,  8,  8, 60,  2,  2,  2, 36, 36, 36, 36, 36, 36, 36,159,\n-    2,  2,  3,  2,  4,  5,  6,  2, 16, 16, 16, 16, 16, 17, 18,115,\n-  116,  4,  2, 36, 36, 36, 36, 36, 63, 36, 36, 36, 36, 36, 36, 36,\n-   36, 36, 36, 36, 36, 36, 36, 40, 20,160, 53, 20, 26,  8,128, 61,\n-   61, 61, 61, 61,161, 59, 61, 61,  2,  2,  2, 90, 27, 27, 27, 27,\n-   27, 27, 27, 84, 61, 61, 61, 61, 95, 95,127, 27, 84, 61, 61, 61,\n-   61, 61, 61, 61, 61, 27, 61, 61, 61, 61, 61, 61, 61, 61, 47, 43,\n-  162,162,162,162,162,162,162,162,163, 27, 27, 27, 27, 27, 27, 27,\n-   27, 27, 27, 27, 27, 27, 87, 36,138, 36, 36, 36, 36, 95, 95, 95,\n-   36, 36, 36, 36, 36, 36, 36, 58,164, 95, 95, 95, 95, 95, 95, 95,\n-   11, 11, 11, 32, 16, 16, 16, 16, 36, 36, 36, 58, 27, 27, 27, 27,\n-   36, 36, 36, 71,145, 27, 27, 27, 36, 36, 36,165, 27, 27, 27, 27,\n-   36, 36, 36, 36, 36,165, 27, 27, 36, 36, 36, 27, 27, 27, 27, 30,\n-   36, 36, 36, 36, 36, 36, 27, 36, 64, 43, 43, 43, 43, 43, 43, 43,\n-   36, 36, 36, 36, 43, 43, 43, 43, 36, 36, 36, 36, 36, 36,165, 30,\n-   36, 36, 36, 36, 36, 36,165, 27, 36, 36, 36, 36, 72, 36, 36, 36,\n-   36, 36, 64, 43, 43,163, 27, 27, 36, 36, 36, 36, 58,  2,  2,  2,\n-   36, 36, 36, 36, 27, 27, 27, 27, 16, 16, 16, 16, 16, 27, 27, 27,\n-   36, 36, 43, 43, 43, 43, 43, 43, 36, 36, 36, 36, 36, 64,166, 51,\n-   27, 27, 27, 87, 36, 36, 36, 36,163, 27, 30,  2,  2,  2,  2,  2,\n-   36, 43, 43,  2,  2,  2,  2,  2, 36, 36,165, 27, 27, 27, 27, 27,\n-   79, 81, 36, 36, 36, 36, 36, 36, 43, 43, 43, 57,  2,  2,  2,  2,\n-    2, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,  7,  7,  7,  7,  7,\n-   65, 64, 65, 36, 36, 36, 36, 64, 78, 79, 43, 77, 79, 57, 73,  2,\n-    2, 43, 43, 43, 43, 43, 67, 59, 36, 36, 36, 64, 43, 43, 79, 43,\n-   43, 43, 43,  7,  7,  7,  7,  7,  2,  2, 82, 81, 36, 36, 36, 36,\n-   36, 64,  2, 36, 36, 36, 36, 36, 36, 82, 78, 43, 43, 43, 43, 77,\n-   81, 36, 58,  2, 56, 43, 57, 79,  7,  7,  7,  7,  7, 58, 58,  2,\n-   90, 27, 27, 27, 27, 27, 27, 27, 36, 36, 36, 36, 36, 36, 78, 79,\n-   43, 78, 77, 43,  2,  2,  2, 65, 36, 36, 36, 36, 36, 36, 36, 64,\n-   77, 78, 78, 78, 78, 78, 78, 78, 36, 36, 36, 82, 78, 78, 81, 36,\n-   36, 78, 78, 43, 43, 43, 43, 43, 36, 36, 82, 78, 43, 43, 43, 43,\n-   78, 43, 77, 65, 36, 58,  2,  2,  7,  7,  7,  7,  7,  2,  2, 65,\n-   78, 79, 43, 43, 77, 77, 78, 79, 77, 43, 36, 66, 36, 36, 36, 36,\n-   36, 36, 36, 36, 36, 36, 36, 82, 78, 43, 43, 43, 78, 78, 43, 79,\n-   57,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 36, 36, 43, 43,\n-   78, 79, 43, 43, 43, 77, 79, 79, 57,  2, 36, 36, 36, 36, 36, 36,\n-   36, 36, 36, 36, 36, 64, 79, 78, 43, 43, 43, 79, 58,  2,  2,  2,\n+   16, 16, 16, 16, 34, 16, 16, 16, 43, 57, 43, 43, 43, 43, 43, 43,\n+   77, 43, 43, 43, 65, 36, 64, 36, 36, 36, 65, 82, 43, 36, 36, 36,\n+   16, 16, 16, 16, 16, 16, 40, 40, 40, 40, 40, 40, 40, 44, 16, 16,\n+   16, 16, 16, 16, 44, 16, 16, 16, 16, 16, 16, 16, 16,100, 40, 40,\n+   32, 32, 32, 16, 16, 16, 16, 32, 16, 16, 16, 16, 11, 11, 11, 11,\n+   16, 16, 16, 16, 34, 11, 11, 11, 16, 16, 16, 16,101,101,101,101,\n+   16, 16, 16, 16, 11, 11,102,103, 41, 16, 16, 16, 11, 11,102, 41,\n+   16, 16, 16, 16, 11, 11,104, 41,105,105,105,105,105,106, 59, 59,\n+   51, 51, 51,  2,107,108,107,108,  2,  2,  2,  2,109, 59, 59,110,\n+    2,  2,  2,  2,111,112,  2,113,114,  2,115,116,  2,  2,  2,  2,\n+    2,  9,114,  2,  2,  2,  2,117, 59, 59, 59, 59, 59, 59, 59, 59,\n+  118, 40, 27, 27, 27,  8,115,119, 27, 27, 27, 27, 27,  8,115, 94,\n+   20, 20, 20, 20, 20, 20, 20, 20, 43, 43, 43, 43, 43, 43,120, 48,\n+   99, 48, 99, 43, 43, 43, 43, 43, 61,121, 61,122, 61, 34, 11, 16,\n+   11, 32,122, 61, 46, 11, 11, 61, 61, 61,121,121,121, 11, 11,123,\n+   11, 11, 35, 36, 39, 61, 16, 11,  8,  8, 46, 16, 16, 26, 61,124,\n+   95, 95, 95, 95, 95, 95, 95, 95, 95,125,126, 95,127, 61, 61, 61,\n+    8,  8,128, 61, 61,  8, 61, 61,128, 26, 61,128, 61, 61, 61,128,\n+   61, 61, 61, 61, 61, 61, 61,  8, 61,128,128, 61, 61, 61, 61, 61,\n+   61, 61,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+   61, 61, 61, 61,  4,  4, 61, 61,  8, 61, 61, 61,129,130, 61, 61,\n+   61, 61, 61, 61, 61, 61,128, 61, 61, 61, 61, 61, 61, 26,  8,  8,\n+    8,  8, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,  8,  8,\n+    8, 61, 61, 61, 61, 61, 61, 61, 27, 27, 27, 27, 27, 27, 61, 61,\n+   61, 61, 61, 61, 61, 27, 27, 27, 61, 61, 61, 26, 61, 61, 61, 61,\n+   26, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,  8,  8,  8,  8,\n+   61, 61, 61, 61, 61, 61, 61, 26, 61, 61, 61, 61,  4,  4,  4,  4,\n+    4,  4,  4, 27, 27, 27, 27, 27, 27, 27, 61, 61, 61, 61, 61, 61,\n+    8,  8,115,131,  8,  8,  8,  8,  8,  8,  8,  4,  4,  4,  4,  4,\n+    8,115,132,132,132,132,132,132,132,132,132,132,131,  8,  8,  8,\n+    8,  8,  8,  8,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  4,  8,\n+    8,  8,128, 26,  8,  8,128, 61, 32, 11, 32, 34, 34, 34, 34, 11,\n+   32, 32, 34, 16, 16, 16, 40, 11, 32, 32,124, 61, 61,122, 34,133,\n+   43, 32, 16, 16, 50,  2, 90,  2, 36, 36, 36, 36, 36, 36, 36, 76,\n+    2,  2,  2,  2,  2,  2,  2, 56,  2,107,107,  2,111,112,107,  2,\n+    2,  2,  2,  6,  2, 98,107,  2,107,  4,  4,  4,  4,  2,  2, 80,\n+    2,  2,  2,  2,  2, 51,  2,  2, 98,134,  2,  2,  2,  2,  2,  2,\n+   61,  2,135,132,132,132,136, 51, 51, 51, 51, 51, 51, 51, 51, 51,\n+    1,  2,137,138,  4,  4,  4,  4,  4, 61,  4,  4,  4,  4,139, 94,\n+  140, 95, 95, 95, 95, 43, 43, 78,141, 40, 40, 61, 95,142, 58, 61,\n+   72, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 64,143,144, 63,\n+   36, 36, 36, 36, 36, 58, 40, 63, 61, 27, 27, 61, 61, 61, 61, 61,\n+   27, 27, 27, 27, 27, 61, 61, 61, 61, 61, 61, 61, 27, 27, 27, 27,\n+  145, 27, 27, 27, 27, 27, 27, 27, 36, 36, 76, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36,146,  2, 32, 32, 32, 32, 32, 32, 32, 64,\n+   48,147, 43, 43, 43, 43, 43, 80, 32, 32, 32, 32, 32, 32, 40, 43,\n+   36, 36, 36, 95, 95, 95, 95, 95, 43,  2,  2,  2,  2,  2,  2,  2,\n+   41, 41, 41,144, 40, 40, 40, 40, 41, 32, 32, 32, 32, 32, 32, 32,\n+   16, 32, 32, 32, 32, 32, 32, 32, 44, 16, 16, 16, 34, 34, 34, 32,\n+   32, 32, 32, 32, 42,148, 34, 35, 32, 32, 16, 32, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32, 11, 11, 32, 11, 11, 32, 32, 32, 32, 32, 32,\n+   32, 32, 11, 11, 34, 34, 32, 16, 32, 16, 16, 32, 32, 32, 11, 11,\n+   11, 40,149, 35, 40, 35, 36, 36, 36, 65, 36, 65, 36, 64, 36, 36,\n+   36, 82, 79, 77, 61, 61, 43, 43, 27, 27, 27, 61,150, 61, 61, 61,\n+   36, 36,  2,  2,  2,  2,  2,  2, 78, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 78, 78, 78, 78, 78, 78, 78, 78, 43, 43, 43, 43, 43,  2,\n+   43, 36, 36, 36,  2, 66, 66, 64, 36, 36, 36, 43, 43, 43, 43,  2,\n+   36, 36, 36, 64, 43, 43, 43, 43, 43, 78, 78, 78, 78, 78, 78, 97,\n+   36, 64, 78, 43, 43, 78, 43, 78, 97,  2,  2,  2,  2,  2,  2, 80,\n+    7,  7,  7,  7,  7,  7,  7,  2, 36, 36, 64, 63, 36, 36, 36, 36,\n+   36, 36, 36, 36, 64, 43, 43, 77, 79, 77, 79, 43, 43, 43, 43, 43,\n+   36, 64, 36, 36, 36, 36, 77, 78,  7,  7,  7,  7,  7,  7,  2,  2,\n+   63, 36, 36, 71, 61, 82, 77, 36, 65, 43, 65, 64, 65, 36, 36, 43,\n+   36, 36, 36, 36, 36, 36, 76,  2, 36, 36, 36, 36, 36, 82, 43, 78,\n+    2, 76,151, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16,103, 40, 40,\n+   16, 16, 16, 16,100, 41, 41, 41, 36, 82, 79, 78, 77, 97, 79, 43,\n+  152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,\n+   16, 16, 16, 16, 16, 16, 35, 65, 36, 36, 36, 36,154, 36, 36, 36,\n+   36, 41, 41, 41, 41, 41, 41, 41, 41, 74, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36,132, 36, 36, 36, 36, 36, 36, 36, 71,\n+   36, 36, 36, 36, 36, 36,150, 61,  2,  2,  2,135,116,  2,  2,  2,\n+    6,155,156,132,132,132,132,132,132,132,116,135,116,  2,113,157,\n+    2,  2,  2,  2,139,132,132,116,  2,158,  8,  8, 60,  2,  2,  2,\n+   36, 36, 36, 36, 36, 36, 36,159,  2,  2,  3,  2,  4,  5,  6,  2,\n+   16, 16, 16, 16, 16, 17, 18,115,116,  4,  2, 36, 36, 36, 36, 36,\n+   63, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40,\n+   20,160, 53, 20, 26,  8,128, 61, 61, 61, 61, 61,161, 59, 61, 61,\n+    2,  2,  2, 90, 27, 27, 27, 27, 27, 27, 27, 84, 61, 61, 61, 61,\n+   95, 95,127, 27, 84, 61, 61, 61, 61, 61, 61, 61, 61, 27, 61, 61,\n+   61, 61, 61, 61, 61, 61, 47, 43,162,162,162,162,162,162,162,162,\n+  163, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 87, 36,\n+  138, 36, 36, 36, 36, 95, 95, 95, 36, 36, 36, 36, 36, 36, 36, 58,\n+  164, 95, 95, 95, 95, 95, 95, 95, 11, 11, 11, 32, 16, 16, 16, 16,\n+   36, 36, 36, 58, 27, 27, 27, 27, 36, 36, 36, 71,145, 27, 27, 27,\n+   36, 36, 36,165, 27, 27, 27, 27, 36, 36, 36, 36, 36,165, 27, 27,\n+   36, 36, 36, 27, 27, 27, 27, 30, 36, 36, 36, 36, 36, 36, 27, 36,\n+   64, 43, 43, 43, 43, 43, 43, 43, 36, 36, 36, 36, 43, 43, 43, 43,\n+   36, 36, 36, 36, 36, 36,165, 30, 36, 36, 36, 36, 36, 36,165, 27,\n+   36, 36, 36, 36, 72, 36, 36, 36, 36, 36, 64, 43, 43,163, 27, 27,\n+   36, 36, 36, 36, 58,  2,  2,  2, 36, 36, 36, 36, 27, 27, 27, 27,\n+   16, 16, 16, 16, 16, 27, 27, 27, 36, 36, 43, 43, 43, 43, 43, 43,\n+    7,  7,  7,  7,  7, 36, 36, 63, 11, 11, 11, 11,166, 43, 43,141,\n+   16, 16, 16, 16, 16, 16, 16,  8, 36, 36, 36, 36, 36, 64,167, 51,\n+   36, 36, 36, 36, 36, 36, 43, 43, 27, 27, 27, 87, 36, 36, 36, 36,\n+  163, 27, 30,  2,  2,  2,  2,  2, 36, 43, 43,  2,  2,  2,  2,  2,\n+   36, 36,165, 27, 27, 27, 27, 27, 79, 81, 36, 36, 36, 36, 36, 36,\n+   43, 43, 43, 57,  2,  2,  2,  2,  2, 27, 27, 27, 27, 27, 27, 27,\n+   27, 27, 27,  7,  7,  7,  7,  7, 65, 64, 65, 36, 36, 36, 36, 64,\n+   78, 79, 43, 77, 79, 57, 73,  2,  2, 43, 43, 43, 43, 43, 67, 59,\n+   36, 36, 36, 64, 43, 43, 79, 43, 43, 43, 43,  7,  7,  7,  7,  7,\n+    2,  2, 82, 81, 36, 36, 36, 36, 36, 64,  2, 36, 36, 36, 36, 36,\n+   36, 82, 78, 43, 43, 43, 43, 77, 81, 36, 58,  2, 56, 43, 57, 79,\n+    7,  7,  7,  7,  7, 58, 58,  2, 90, 27, 27, 27, 27, 27, 27, 27,\n+   36, 36, 36, 36, 36, 36, 78, 79, 43, 78, 77, 43,  2,  2,  2, 65,\n+   36, 36, 36, 36, 36, 36, 36, 64, 77, 78, 78, 78, 78, 78, 78, 78,\n+   36, 36, 36, 82, 78, 78, 81, 36, 36, 78, 78, 43, 43, 43, 43, 43,\n+   36, 36, 36, 36, 78, 79, 43, 43, 43, 78, 78, 78, 78, 78, 78, 77,\n+   65, 65,  2,  2,  2,  2,  2,  2, 56, 43, 43, 43, 43, 43, 43, 43,\n+   36, 36, 82, 78, 43, 43, 43, 43, 78, 43, 77, 65, 36, 58,  2,  2,\n+    7,  7,  7,  7,  7,  2,  2, 65, 78, 79, 43, 43, 77, 77, 78, 79,\n+   77, 43, 36, 66, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 82,\n+   78, 43, 43, 43, 78, 78, 43, 79, 57,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2, 36, 36, 43, 43, 78, 79, 43, 43, 43, 77, 79, 79,\n+   57,  2, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 64, 79, 78,\n+   43, 43, 43, 79, 58,  2,  2,  2, 36, 36, 36, 36, 36, 36, 64, 79,\n@@ -4724,2 +4941,2 @@\n-   43, 43, 43, 77, 43,  2, 66,  2, 43, 43, 43, 43, 43, 43, 43, 79,\n-   58,  2,  2,  2,  2,  2,  2,  2,  2, 36, 36, 36, 36, 36, 36, 36,\n+   43, 43, 43, 77, 43,  2, 66,  2, 58,  2,  2,  2,  2,  2,  2,  2,\n+   43, 43, 43, 43, 43, 43, 43, 79,  2, 36, 36, 36, 36, 36, 36, 36,\n@@ -4730,27 +4947,29 @@\n-   77, 57,  2,  2,  2,  2,  2,  2, 27, 27, 84, 61, 61, 61, 53, 20,\n-  150, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 21,\n-   65, 36, 36, 64, 43, 43, 43, 43, 43, 43, 57,  2,  2,  2,  2,  2,\n-   43, 43, 43, 57,  2,  2, 61, 61, 40, 40, 89, 61, 61, 61, 61, 61,\n-    7,  7,  7,  7,  7,167, 27, 27, 27, 87, 36, 36, 36, 36, 36, 36,\n-   27, 27, 27, 30,  2,  2,  2,  2, 82, 78, 78, 78, 78, 78, 78, 78,\n-   78, 78, 78, 78, 78, 78, 78, 79, 43, 68, 40, 40, 40, 40, 40, 40,\n-   40, 80, 43, 43, 43, 43, 43, 43, 36, 36, 36, 36, 36, 36, 47, 57,\n-   61, 61,168, 79, 43, 61,168, 78, 78,169, 59, 59, 59, 76, 43, 43,\n-   43, 70, 47, 43, 43, 43, 61, 61, 61, 61, 61, 61, 61, 43, 43, 61,\n-   61, 43, 70, 61, 61, 61, 61, 61, 11, 11, 11, 11, 11, 16, 16, 16,\n-   16, 16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 16,\n-   11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 11, 11,\n-   11, 11, 11, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16,\n-   16, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 11, 11, 11,\n-   11, 11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11,\n-   11, 11, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33,\n-   16, 16, 16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 31,\n-   16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 31, 16, 16, 16,\n-   16, 33, 16, 16, 16, 32, 16,  7, 43, 43, 43, 70, 61, 47, 43, 43,\n-   43, 43, 43, 43, 43, 43, 70, 61, 61, 61, 47, 61, 61, 61, 61, 61,\n-   61, 61, 70, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2, 56, 43, 43,\n-   16, 16, 16, 16, 16, 39, 16, 16, 43, 43, 43, 68, 40, 40, 40, 40,\n-    7,  7,  7,  7,  7,  7,  7, 71, 36, 36, 36, 36, 36, 36, 36, 43,\n-   36, 36, 36, 36, 36, 36, 43, 43,  7,  7,  7,  7,  7,  7,  7,170,\n-   36, 36, 36, 36, 36, 75, 43, 43, 16, 16, 43, 43, 43, 68, 40, 40,\n-   27, 27, 27, 27, 27, 27,145, 27,171, 27, 27, 27, 27, 27, 27, 27,\n+   77, 57,  2,  2,  2,  2,  2,  2,  7,  7,  7,  7,  7, 43, 43, 43,\n+   27, 27, 84, 61, 61, 61, 53, 20,150, 61, 61, 61, 61, 61, 61, 61,\n+   61, 61, 61, 61, 61, 61, 61, 21, 65, 36, 36, 64, 43, 43, 43, 43,\n+   36, 36, 36, 36, 36, 36, 36, 43, 43, 43, 43, 43, 43, 78, 79, 43,\n+   43, 43, 57,  2,  2,  2,  2,  2, 43, 43, 43, 57,  2,  2, 61, 61,\n+   40, 40, 89, 61, 61, 61, 61, 61,  7,  7,  7,  7,  7,168, 27, 27,\n+   27, 87, 36, 36, 36, 36, 36, 36, 40, 63, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 76,146,  2, 27, 27, 27, 30,  2,  2,  2,  2,\n+   82, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 79,\n+   43, 68, 40, 40, 40, 40, 40, 40, 40, 80, 43, 43, 43, 43, 43, 43,\n+   36, 36, 36, 36, 36, 36, 47, 57, 61, 61,169, 79, 43, 61,169, 78,\n+   78,170, 59, 59, 59, 75, 43, 43, 43, 70, 47, 43, 43, 43, 61, 61,\n+   61, 61, 61, 61, 61, 43, 43, 61, 61, 43, 70, 61, 61, 61, 61, 61,\n+   11, 11, 11, 11, 11, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11, 16, 11, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 16, 16, 16, 16, 16,\n+   31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33, 16, 16,\n+   16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 31, 16, 16,\n+   16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 31, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16,\n+   11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16, 32, 16,  7,\n+   43, 43, 43, 70, 61, 47, 43, 43, 43, 43, 43, 43, 43, 43, 70, 61,\n+   61, 61, 47, 61, 61, 61, 61, 61, 61, 61, 70, 21,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 56, 43, 43, 16, 16, 16, 16, 16, 39, 16, 16,\n+   43, 43, 43, 68, 40, 40, 40, 40,  7,  7,  7,  7,  7,  7,  7, 71,\n+    7,  7,  7,  7,  7,  7,  7,171, 36, 36, 36, 36, 36, 76, 43, 43,\n+  172,  7,  7,  7,  7,  7,  7, 85, 16, 16, 43, 43, 43, 68, 40, 40,\n+   27, 27, 27, 27, 27, 27,145, 27,173, 27, 27, 27, 27, 27, 27, 27,\n@@ -4767,2 +4986,2 @@\n-   12,  6,  6, 12, 12, 26,  7, 26, 26,  7, 21,  1, 24,  7,  7,  6,\n-    1, 12, 12, 10, 10, 10, 10, 12, 21,  6, 10,  7,  7, 10, 23,  7,\n+   12,  6,  6, 12, 12, 26,  7, 26, 26,  7, 21,  1, 24,  7,  1, 12,\n+    7,  6, 12, 10, 10, 10, 10, 12, 21,  6, 10,  7,  7, 10, 23,  7,\n@@ -4779,3 +4998,4 @@\n-   21, 14,  7, 15, 12, 17, 13, 15, 26, 10, 10,  1, 13, 23, 23, 15,\n-    0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0, 10, 11, 12, 13,  0,\n-   14,  0,  0,  0,  0,  0, 15,  0, 16,  0,  0,  0,  0,  0,  0,  0,\n+   21, 14,  7, 15,  9, 12, 12, 17, 13, 15, 26, 10, 10,  1, 13, 23,\n+    7, 13, 23, 15,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0, 10,\n+   11, 12, 13,  0, 14,  0,  0,  0,  0,  0, 15,  0, 16,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -4784,0 +5004,1 @@\n+    0,  0,  0,  0,  0,  0,  0, 17, 18, 19,  0,  0,  0,  0,  0,  0,\n@@ -4785,1 +5006,0 @@\n-    0,  0,  0, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -4787,2 +5007,2 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,  0, 21,\n-   22, 23,  0,  0,  0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n+    0, 20,  0, 21, 22, 23,  0,  0,  0, 24, 25, 26, 27, 28, 29, 30,\n+   31, 32, 33, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -4790,0 +5010,1 @@\n+    0,  0,  0,  0, 35,  0,  0,  0,  0, 36,  0, 37,  0,  0,  0,  0,\n@@ -4791,1 +5012,0 @@\n-    0,  0,  0,  0,  0, 35,  0, 36,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -4793,78 +5013,79 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 37,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0, 38, 39,  0,  0,  0,  0,  0,  0,\n-   40, 41, 42,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  1,  2,  0,  0,  0,  0,  3,  0,  0,  0,  4,  5,  6,  7,\n-    0,  8,  9, 10,  0, 11, 12, 13, 14, 15, 16, 17, 16, 18, 16, 19,\n-   16, 19, 16, 19,  0, 19, 16, 20, 16, 19, 21, 19,  0, 22, 23, 24,\n-   25, 26, 27, 28, 29, 30, 31,  0, 32,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0, 33,  0,  0,  0,  0,  0,  0, 34,  0,  0, 35,  0,  0,\n-   36,  0, 37,  0,  0,  0, 38, 39, 40, 41, 42, 43, 44, 45, 46,  0,\n-    0, 47,  0,  0,  0, 48,  0,  0,  0, 49,  0,  0,  0,  0,  0,  0,\n-    0, 50,  0, 51,  0, 52, 53,  0, 54,  0,  0,  0,  0,  0,  0, 55,\n-   56, 57,  0,  0,  0,  0, 58,  0,  0, 59, 60, 61, 62, 63,  0,  0,\n-   64, 65,  0,  0,  0, 66,  0,  0,  0,  0, 67,  0,  0,  0, 68,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 69,  0,  0,\n-    0, 70,  0, 71,  0,  0, 72,  0,  0, 73,  0,  0,  0,  0,  0,  0,\n-    0,  0, 74,  0,  0,  0,  0,  0, 75, 76,  0, 77, 78,  0,  0, 79,\n-   80,  0, 81, 62,  0, 82, 83,  0,  0, 84, 85, 86,  0,  0,  0, 87,\n-    0, 88,  0,  0, 51, 89, 51,  0, 90,  0, 91,  0,  0,  0, 80,  0,\n-    0,  0, 92, 93,  0, 94, 95, 96, 97,  0,  0,  0,  0,  0, 51,  0,\n-    0,  0,  0, 98, 99,  0,  0,  0,  0,  0,  0,100,  0,  0,  0,  0,\n-    0,101,102,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,103,  0,  0,\n-  104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,105,106,  0,  0,107,\n-    0,  0,  0,  0,  0,  0,108,  0,109,  0,102,  0,  0,  0,  0,  0,\n-  110,111,  0,  0,  0,  0,  0,  0,  0,112,  0,  0,  0,  0,  0,  0,\n-    0,113,  0,114,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,\n-    7,  0,  8,  0,  0,  0,  0,  9, 10, 11, 12,  0,  0,  0,  0, 13,\n-    0,  0, 14, 15,  0, 16,  0, 17, 18,  0,  0, 19,  0, 20, 21,  0,\n-    0,  0,  0,  0, 22, 23,  0, 24, 25,  0,  0, 26,  0,  0,  0, 27,\n-    0,  0, 28, 29, 30, 31,  0,  0,  0, 32, 33, 34,  0,  0, 33,  0,\n-    0, 35, 33,  0,  0,  0, 33, 36,  0,  0,  0,  0,  0, 37, 38,  0,\n-    0,  0,  0,  0,  0, 39, 40,  0,  0,  0,  0,  0,  0, 41, 42,  0,\n-    0,  0,  0, 43,  0, 44,  0,  0,  0, 45, 46,  0,  0,  0, 47,  0,\n-    0,  0,  0,  0,  0, 48, 49,  0,  0,  0,  0, 50,  0,  0,  0, 51,\n-    0, 52,  0, 53,  0,  0,  0,  0, 54,  0,  0,  0,  0, 55,  0, 56,\n-    0,  0,  0,  0, 57, 58,  0,  0,  0, 59, 60,  0,  0,  0,  0,  0,\n-    0, 61, 52,  0, 62, 63,  0,  0, 64,  0,  0,  0, 65, 66,  0,  0,\n-    0, 67,  0, 68, 69, 70, 71, 72,  1, 73,  0, 74, 75, 76,  0,  0,\n-   77, 78,  0,  0,  0, 79,  0,  0,  1,  1,  0,  0, 80,  0,  0, 81,\n-    0,  0,  0,  0, 77, 82,  0, 83,  0,  0,  0,  0,  0, 78, 84,  0,\n-   85,  0, 52,  0,  1, 78,  0,  0, 86,  0,  0, 87,  0,  0,  0,  0,\n-    0, 88, 57,  0,  0,  0,  0,  0,  0, 89, 90,  0,  0, 84,  0,  0,\n-   33,  0,  0, 91,  0,  0,  0,  0, 92,  0,  0,  0,  0, 49,  0,  0,\n-   93,  0,  0,  0,  0, 94, 95,  0,  0, 96,  0,  0, 97,  0,  0,  0,\n-   98,  0,  0,  0, 99,  0,  0,  0,  0,100,101, 93,  0,  0,102,  0,\n-    0,  0, 84,  0,  0,103,  0,  0,  0,104,105,  0,  0,106,107,  0,\n-    0,  0,  0,  0,  0,108,  0,  0,109,  0,  0,  0,  0,110, 33,  0,\n-  111,112,113, 35,  0,  0,114,  0,  0,  0,115,  0,  0,  0,  0,  0,\n-    0,116,  0,  0,117,  0,  0,  0,  0,118, 88,  0,  0,  0,  0,  0,\n-   57,  0,  0,  0,  0, 52,119,  0,  0,  0,  0,120,  0,  0,121,  0,\n-    0,  0,  0,119,  0,  0,122,  0,  0,  0,  0,  0,  0,123,  0,  0,\n-    0,124,  0,  0,  0,125,  0,126,  0,  0,  0,  0,127,128,129,  0,\n-  130,  0,131,  0,  0,  0,132,133,134,  0, 77,  0,  0,  0,  0,  0,\n-   35,  0,  0,  0,135,  0,  0,  0,136,  0,  0,137,  0,  0,138,  0,\n-    0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  3,  4,  5,  6,\n-    7,  4,  4,  8,  9, 10,  1, 11, 12, 13, 14, 15, 16, 17, 18,  1,\n-    1,  1, 19,  1,  0,  0, 20, 21, 22,  1, 23,  4, 21, 24, 25, 26,\n-   27, 28, 29, 30,  0,  0,  1,  1, 31,  0,  0,  0, 32, 33, 34, 35,\n-    1, 36, 37,  0,  0,  0,  0, 38,  1, 39, 14, 39, 40, 41, 42,  0,\n-    0,  0, 43, 36, 44, 45, 21, 45, 46,  0,  0,  0, 19,  1, 21,  0,\n-    0, 47,  0, 38, 48,  1,  1, 49, 49, 50,  0,  0, 51,  0,  0,  0,\n-   52,  1,  0,  0, 38, 14,  4,  1,  1,  1, 53, 21, 43, 52, 54, 21,\n-   35,  1,  0,  0,  0, 55,  0,  0,  0, 56, 57, 58,  0,  0,  0,  0,\n-    0, 59,  0, 60,  0,  0,  0,  0, 61, 62,  0,  0, 63,  0,  0,  0,\n-   64,  0,  0,  0, 65,  0,  0,  0, 66,  0,  0,  0, 67,  0,  0,  0,\n-   68,  0,  0, 69, 70,  0, 71, 72, 73, 74, 75, 76,  0,  0,  0, 77,\n-    0,  0,  0, 78, 79,  0,  0,  0,  0, 47,  0,  0,  0, 49,  0, 80,\n-    0,  0,  0, 62,  0,  0, 63,  0,  0, 81,  0,  0, 82,  0,  0,  0,\n-   83,  0,  0, 19, 84,  0, 62,  0,  0,  0,  0, 49,  1, 85,  1, 52,\n-   15, 86, 36, 10, 21, 87,  0, 55,  0,  0,  0,  0, 19, 10,  1,  0,\n-    0,  0,  0,  0, 88,  0,  0, 89,  0,  0, 88,  0,  0,  0,  0, 78,\n-    0,  0, 87,  9, 12,  4, 90,  8, 91, 47,  0, 58, 50,  0, 21,  1,\n-   21, 92, 93,  1,  1,  1,  1, 94, 95, 96, 97,  1, 98, 58, 81, 99,\n-  100,  4, 58,  0,  0,  0,  0,  0,  0, 19, 50,  0,  0,  0,  0,  0,\n-    0, 61,  0,  0,101,102,  0,  0,103,  0,  0,  1,  1, 50,  0,  0,\n-    0, 38,  0, 63,  0,  0,  0,  0,  0, 62,  0,  0,104, 68, 61,  0,\n-    0,  0, 78,  0,  0,  0,105,106, 58, 38, 81,  0,  0,  0,  0,  0,\n-    0,107,  1, 14,  4, 12, 84,  0,  0,  0,  0, 38, 87,  0,  0,  0,\n-    0,108,  0,  0,109, 61,  0,110,  0,  0,  0,  1,  0,  0,  0,  0,\n+    0,  0, 38,  0,  0,  0,  0,  0,  0,  0,  0,  0, 39, 40,  0,  0,\n+    0,  0,  0,  0, 41, 42, 43,  0, 44,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  0,  0,  3,  0,  0,  0,\n+    4,  5,  6,  7,  0,  8,  9, 10,  0, 11, 12, 13, 14, 15, 16, 17,\n+   16, 18, 16, 19, 16, 19, 16, 19,  0, 19, 16, 20, 16, 19, 21, 19,\n+    0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  0, 32,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0,  0, 34,  0,\n+    0, 35,  0,  0, 36,  0, 37,  0,  0,  0, 38, 39, 40, 41, 42, 43,\n+   44, 45, 46,  0,  0, 47,  0,  0,  0, 48,  0,  0,  0, 49,  0,  0,\n+    0,  0,  0,  0,  0, 50,  0, 51,  0, 52, 53,  0, 54,  0,  0,  0,\n+    0,  0,  0, 55, 56, 57,  0,  0,  0,  0, 58,  0,  0, 59, 60, 61,\n+   62, 63,  0,  0, 64, 65,  0,  0,  0, 66,  0,  0,  0,  0, 67,  0,\n+    0,  0, 68,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 69,  0,  0,  0, 70,  0, 71,  0,  0, 72,  0,  0, 73,  0,  0,\n+    0,  0,  0,  0,  0,  0, 74, 75,  0,  0,  0,  0, 76, 77,  0, 78,\n+   79,  0,  0, 80, 81,  0, 82, 62,  0, 83, 84,  0,  0, 85, 86, 87,\n+    0, 88,  0, 89,  0, 90,  0,  0, 51, 91, 51,  0, 92,  0, 93,  0,\n+    0,  0, 81,  0,  0,  0, 94, 95,  0, 96, 97, 98, 99,  0,  0,  0,\n+    0,  0, 51,  0,  0,  0,  0,100,101,  0,  0,  0,  0,  0,  0,102,\n+    0,  0,  0,  0,  0,  0,103,  0,  0,  0,  0,  0,  0,104,105,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,106,  0,  0,107,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,108,109,  0,  0,110,  0,  0,  0,  0,\n+    0,  0,111,  0,112,  0,105,  0,  0,  0,  0,  0,113,114,  0,  0,\n+    0,  0,  0,  0,  0,115,  0,  0,  0,116,  0,  0,  0,117,  0,118,\n+    0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  0,  8,  0,\n+    0,  0,  0,  9, 10, 11, 12,  0,  0,  0,  0, 13,  0,  0, 14, 15,\n+    0, 16,  0, 17, 18,  0,  0, 19,  0, 20, 21,  0,  0,  0,  0,  0,\n+   22, 23,  0, 24, 25,  0,  0, 26,  0,  0,  0, 27,  0,  0, 28, 29,\n+   30, 31,  0,  0,  0, 32, 33, 34,  0,  0, 33,  0,  0, 35, 33,  0,\n+    0,  0, 33, 36,  0,  0,  0,  0,  0, 37, 38,  0,  0,  0,  0,  0,\n+    0, 39, 40,  0,  0,  0,  0,  0,  0, 41, 42,  0,  0,  0,  0, 43,\n+    0, 44,  0,  0,  0, 45, 46,  0,  0,  0, 47,  0,  0,  0,  0,  0,\n+    0, 48, 49,  0,  0,  0,  0, 50,  0,  0,  0, 51,  0, 52,  0, 53,\n+    0,  0,  0,  0, 54,  0,  0,  0,  0, 55,  0, 56,  0,  0,  0,  0,\n+   57, 58,  0,  0,  0, 59, 60,  0,  0,  0,  0,  0,  0, 61, 52,  0,\n+   62, 63,  0,  0, 64,  0,  0,  0, 65, 66,  0,  0,  0, 67,  0, 68,\n+   69, 70, 71, 72,  1, 73,  0, 74, 75, 76,  0,  0, 77, 78,  0,  0,\n+    0, 79,  0,  0,  1,  1,  0,  0, 80,  0,  0, 81,  0,  0,  0,  0,\n+   77, 82,  0, 83,  0,  0,  0,  0,  0, 78, 84,  0, 85,  0, 52,  0,\n+    1, 78,  0,  0, 86,  0,  0, 87,  0,  0,  0,  0,  0, 88, 57,  0,\n+    0,  0,  0,  0,  0, 89, 90,  0,  0, 84,  0,  0, 33,  0,  0, 91,\n+    0,  0,  0,  0, 92,  0,  0,  0,  0, 49,  0,  0, 93,  0,  0,  0,\n+    0, 94, 95,  0,  0, 96,  0,  0, 97,  0,  0,  0, 98,  0,  0,  0,\n+   99,  0,  0,  0,100,  0,  0,  0,  0,101,102, 93,  0,  0,103,  0,\n+    0,  0, 84,  0,  0,104,  0,  0,  0,105,106,  0,  0,107,108,  0,\n+    0,  0,  0,  0,  0,109,  0,  0,110,  0,  0,  0,  0,111, 33,  0,\n+  112,113,114, 57,  0,  0,115, 35,  0,  0,116,  0,  0,  0,117,  0,\n+    0,  0,  0,  0,  0,118,  0,  0,119,  0,  0,  0,  0,120, 88,  0,\n+    0,  0,  0,  0, 57,  0,  0,  0,  0, 52,121,  0,  0,  0,  0,122,\n+    0,  0,123,  0,  0,  0,  0,121,  0,  0,124,  0,  0,  0,  0,  0,\n+   79,  0,  0,  0,  0,125,  0,  0,  0,126,  0,  0,  0,127,  0,128,\n+    0,  0,  0,  0,129,130,131,  0,132,  0,133,  0,  0,  0,134,135,\n+  136,  0, 77,  0,  0,  0,  0,  0, 35,  0,  0,  0,137,  0,  0,  0,\n+  138,  0,  0,  0,139,  0,  0,140,  0,  0,141,  0,  0,  0,  0,  0,\n+    0,  0,  1,  1,  1,  1,  1,  2,  3,  4,  5,  6,  7,  4,  4,  8,\n+    9, 10,  1, 11, 12, 13, 14, 15, 16, 17, 18,  1,  1,  1, 19,  1,\n+    0,  0, 20, 21, 22,  1, 23,  4, 21, 24, 25, 26, 27, 28, 29, 30,\n+    0,  0,  1,  1, 31,  0,  0,  0, 32, 33, 34, 35,  1, 36, 37,  0,\n+    0,  0,  0, 38,  1, 39, 14, 39, 40, 41, 42,  0,  0,  0, 43, 36,\n+   44, 45, 21, 45, 46,  0,  0,  0, 19,  1, 21,  0,  0, 47,  0, 38,\n+   48,  1,  1, 49, 49, 50,  0,  0, 51,  0,  0, 19, 52,  1,  0,  0,\n+   38, 14,  4,  1,  1,  1, 53, 21, 43, 52, 54, 21, 35,  1,  0,  0,\n+    0, 55,  0,  0,  0, 56, 57, 58,  0,  0,  0,  0,  0, 59,  0, 60,\n+    0,  0,  0,  0, 61, 62,  0,  0, 63,  0,  0,  0, 64,  0,  0,  0,\n+   65,  0,  0,  0, 66,  0,  0,  0, 67,  0,  0,  0, 68,  0,  0, 69,\n+   70,  0, 71, 72, 73, 74, 75, 76,  0,  0,  0, 77,  0,  0,  0, 78,\n+   79,  0,  0,  0,  0, 47,  0,  0,  0, 49,  0, 80,  0,  0,  0, 62,\n+    0,  0, 63,  0,  0, 81,  0,  0, 82,  0,  0,  0, 83,  0,  0, 19,\n+   84,  0, 62,  0,  0,  0,  0, 49,  1, 85,  1, 52, 15, 86, 36, 10,\n+   21, 87,  0, 55,  0,  0,  0,  0, 19, 10,  1,  0,  0,  0,  0,  0,\n+   88,  0,  0, 89,  0,  0, 88,  0,  0,  0,  0, 78,  0,  0, 87,  9,\n+   12,  4, 90,  8, 91, 47,  0, 58, 50,  0, 21,  1, 21, 92, 93,  1,\n+    1,  1,  1, 94, 95, 96, 97,  1, 98, 58, 81, 99,100,  4, 58,  0,\n+    0,  0,  0,  0,  0, 19, 50,  0,  0,  0,  0,  0,  0, 61,  0,  0,\n+  101,102,  0,  0,103,  0,  0,  1,  1, 50,  0,  0,  0, 38,  0, 63,\n+    0,  0,  0,  0,  0, 62,  0,  0,104, 68, 61,  0,  0,  0, 78,  0,\n+    0,  0,105,106, 58, 38, 81,  0,  0,  0,  0,  0,  0,107,  1, 14,\n+    4, 12, 84,  0,  0,  0,  0, 38, 87,  0,  0,  0,  0,108,  0,  0,\n+  109, 61,  0,110,  0,  0,  0,  1,  0,  0,  0,  0, 49, 50,  0,  0,\n@@ -4874,39 +5095,40 @@\n-    1, 58,  1, 58,  0,  0, 63, 89,  0,  0,115,  0,  0,  0, 55,  0,\n-    0,  0,  0,115,  0,  0,  0,  0, 61,  0,  0,  0,  0, 79,  0, 61,\n-    0,  0,  0,  0, 56,  0, 89, 80,  0,  0, 79,  0,  0,  0,  8, 91,\n-    0,  0,  1, 87,  0,  0,116,  0,  0,  0,  0,  0,  0,117,  0,118,\n-  119,120,121,  0,104,  4,122, 49, 23,  0,  0,  0, 38, 50, 38, 58,\n-    0,  0,  1, 87,  1,  1,  1,  1, 39,  1, 48,105, 87,  0,  0,  0,\n-    0,  1,  0,  0,  0,123,  4,122,  0,  0,  0,  1,124,  0,  0,  0,\n-    0,  0,230,230,230,230,230,232,220,220,220,220,232,216,220,220,\n-  220,220,220,202,202,220,220,220,220,202,202,220,220,220,  1,  1,\n-    1,  1,  1,220,220,220,220,230,230,230,230,240,230,220,220,220,\n-  230,230,230,220,220,  0,230,230,230,220,220,220,220,230,232,220,\n-  220,230,233,234,234,233,234,234,233,230,  0,  0,  0,230,  0,220,\n-  230,230,230,230,220,230,230,230,222,220,230,230,220,220,230,222,\n-  228,230, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22,\n-    0, 23,  0, 24, 25,  0,230,220,  0, 18, 30, 31, 32,  0,  0,  0,\n-    0, 27, 28, 29, 30, 31, 32, 33, 34,230,230,220,220,230,220,230,\n-  230,220, 35,  0,  0,  0,  0,  0,230,230,230,  0,  0,230,230,  0,\n-  220,230,230,220,  0,  0,  0, 36,  0,  0,230,220,230,230,220,220,\n-  230,220,220,230,220,230,220,230,230,  0,  0,220,  0,  0,230,230,\n-    0,230,  0,230,230,230,230,230,  0,  0,  0,220,220,220,230,220,\n-  220,220,230,230,  0,220, 27, 28, 29,230,  7,  0,  0,  0,  0,  9,\n-    0,  0,  0,230,220,230,230,  0,  0,  0,  0,  0,230,  0,  0, 84,\n-   91,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,103,103,\n-    9,  0,107,107,107,107,118,118,  9,  0,122,122,122,122,220,220,\n-    0,  0,  0,220,  0,220,  0,216,  0,  0,  0,129,130,  0,132,  0,\n-    0,  0,  0,  0,130,130,130,130,  0,  0,130,  0,230,230,  9,  0,\n-  230,230,  0,  0,220,  0,  0,  0,  0,  7,  0,  9,  9,  0,  9,  9,\n-    0,  0,  0,230,  0,  0,  0,228,  0,  0,  0,222,230,220,220,  0,\n-    0,  0,230,  0,  0,220,230,220,  0,220,230,230,230,  0,  0,  0,\n-    9,  9,  0,  0,  7,  0,230,  0,  1,  1,  1,  0,  0,  0,230,234,\n-  214,220,202,230,230,230,230,230,232,228,228,220,218,230,233,220,\n-  230,220,230,230,  1,  1,  1,  1,  1,230,  0,  1,  1,230,220,230,\n-    1,  1,  0,  0,218,228,232,222,224,224,  0,  8,  8,  0,  0,  0,\n-    0,220,230,  0,230,230,220,  0,  0,230,  0,  0, 26,  0,  0,220,\n-    0,230,230,  1,220,  0,  0,230,220,  0,  0,  0,220,220,  0,  0,\n-  230,220,  0,  9,  7,  0,  0,  7,  9,  0,  0,  0,  9,  7,  6,  6,\n-    0,  0,  0,  0,  1,  0,  0,216,216,  1,  1,  1,  0,  0,  0,226,\n-  216,216,216,216,216,  0,220,220,220,  0,232,232,220,230,230,230,\n-    7,  0, 16, 17, 17, 33, 17, 49, 17, 17, 84, 97,135,145, 26, 17,\n+    1, 58,  1, 58,  0,  0,  0,  0,  0, 88, 63, 89,  0,  0,115,  0,\n+    0,  0, 55,  0,  0,  0,  0,115,  0,  0,  0,  0, 61,  0,  0,  0,\n+    0, 79,  0, 61,  0,  0,  0,  0, 56,  0, 89, 80,  0,  0, 79,  0,\n+    0,  0,  8, 91,  0,  0,  1, 87,  0,  0,116,  0,  0,  0,  0,  0,\n+    0,117,  0,118,119,120,121,  0,104,  4,122, 49, 23,  0,  0,  0,\n+   38, 50, 38, 58,  0,  0,  1, 87,  1,  1,  1,  1, 39,  1, 48,105,\n+   87,  0,  0,  0,  0,  1,  0,  0,  0,123,  0,  0,  0,112,  4,122,\n+    0,  0,  0,  1,124,  0,  0,  0,  0,  0,230,230,230,230,230,232,\n+  220,220,220,220,232,216,220,220,220,220,220,202,202,220,220,220,\n+  220,202,202,220,220,220,  1,  1,  1,  1,  1,220,220,220,220,230,\n+  230,230,230,240,230,220,220,220,230,230,230,220,220,  0,230,230,\n+  230,220,220,220,220,230,232,220,220,230,233,234,234,233,234,234,\n+  233,230,  0,  0,  0,230,  0,220,230,230,230,230,220,230,230,230,\n+  222,220,230,230,220,220,230,222,228,230, 10, 11, 12, 13, 14, 15,\n+   16, 17, 18, 19, 19, 20, 21, 22,  0, 23,  0, 24, 25,  0,230,220,\n+    0, 18, 30, 31, 32,  0,  0,  0,  0, 27, 28, 29, 30, 31, 32, 33,\n+   34,230,230,220,220,230,220,230,230,220, 35,  0,  0,  0,  0,  0,\n+  230,230,230,  0,  0,230,230,  0,220,230,230,220,  0,  0,  0, 36,\n+    0,  0,230,220,230,230,220,220,230,220,220,230,220,230,220,230,\n+  230,  0,  0,220,  0,  0,230,230,  0,230,  0,230,230,230,230,230,\n+    0,  0,  0,220,220,220,230,220,220,220,230,230,  0,220, 27, 28,\n+   29,230,  7,  0,  0,  0,  0,  9,  0,  0,  0,230,220,230,230,  0,\n+    0,  0,  0,  0,230,  0,  0, 84, 91,  0,  0,  0,  0,  9,  9,  0,\n+    0,  0,  0,  0,  9,  0,103,103,  9,  0,107,107,107,107,118,118,\n+    9,  0,122,122,122,122,220,220,  0,  0,  0,220,  0,220,  0,216,\n+    0,  0,  0,129,130,  0,132,  0,  0,  0,  0,  0,130,130,130,130,\n+    0,  0,130,  0,230,230,  9,  0,230,230,  0,  0,220,  0,  0,  0,\n+    0,  7,  0,  9,  9,  0,  9,  9,  0,  0,  0,230,  0,  0,  0,228,\n+    0,  0,  0,222,230,220,220,  0,  0,  0,230,  0,  0,220,230,220,\n+    0,220,230,230,230,  0,  0,  0,  9,  9,  0,  0,  7,  0,230,  0,\n+    1,  1,  1,  0,  0,  0,230,234,214,220,202,230,230,230,230,230,\n+  232,228,228,220,218,230,233,220,230,220,230,230,  1,  1,  1,  1,\n+    1,230,  0,  1,  1,230,220,230,  1,  1,  0,  0,218,228,232,222,\n+  224,224,  0,  8,  8,  0,  0,  0,  0,220,230,  0,230,230,220,  0,\n+    0,230,  0,  0, 26,  0,  0,220,  0,230,230,  1,220,  0,  0,230,\n+  220,  0,  0,  0,220,220,  0,  0,230,220,  0,  9,  7,  0,  0,  7,\n+    9,  0,  0,  0,  9,  7,  6,  6,  0,  0,  0,  0,  1,  0,  0,216,\n+  216,  1,  1,  1,  0,  0,  0,226,216,216,216,216,216,  0,220,220,\n+  220,  0,232,232,220,230,230,230,  7,  0, 16, 17, 17, 33, 17, 49,\n+   17, 17, 84, 97,135,145, 26, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n@@ -4915,0 +5137,39 @@\n+   17, 17, 17, 17, 17, 17, 17, 17, 17,177,  0,  1,  2,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  3,\n+    3,  3,  3,  3,  5,  3,  3,  3,  3,  3,  6,  7,  8,  3,  3,  3,\n+    3,  3,  9, 10, 11, 12, 13,  3,  3,  3,  3,  3,  3,  3,  3, 14,\n+    3, 15,  3,  3,  3,  3,  3,  3, 16, 17, 18, 19, 20, 21,  3,  3,\n+    3, 22, 23, 24,  3,  3,  3,  3,  3,  3, 25,  3,  3,  3,  3,  3,\n+    3,  3,  3, 26,  3,  3, 27, 28,  0,  1,  0,  0,  0,  0,  0,  1,\n+    0,  2,  0,  0,  0,  3,  0,  0,  0,  3,  0,  0,  0,  0,  0,  4,\n+    0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  6,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  8,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,\n+    0,  0,  0, 10, 11, 12, 13,  0,  0, 14, 15, 16,  6,  0, 17, 18,\n+   19, 19, 19, 20, 21, 22, 23, 24, 19, 25,  0, 26, 27, 19, 19, 28,\n+   29, 30,  0, 31,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0, 19,\n+   28,  0, 32, 33,  9, 34, 35, 19,  0,  0, 36, 37, 38, 39, 40, 19,\n+    0, 41, 42, 43, 44, 31,  0,  1, 45, 42,  0,  0,  0,  0,  0, 32,\n+   14, 14,  0,  0,  0,  0, 14,  0,  0, 46, 47, 47, 47, 47, 48, 49,\n+   47, 47, 47, 47, 50, 51, 52, 53, 43, 21,  0,  0,  0,  0,  0,  0,\n+    0, 54,  6, 55,  0, 14, 19,  1,  0,  0,  0,  0, 56, 57,  0,  0,\n+    0,  0,  0, 19, 58, 31,  0,  0,  0,  0,  0,  0,  0, 59, 14,  0,\n+    0,  0,  0,  1,  0,  2,  0,  0,  0,  3,  0,  0,  0, 60, 61,  0,\n+    0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  2,  3,  0,  4,\n+    5,  0,  0,  6,  0,  0,  0,  7,  0,  0,  0,  1,  1,  0,  0,  8,\n+    9,  0,  8,  9,  0,  0,  0,  0,  8,  9, 10, 11, 12,  0,  0,  0,\n+   13,  0,  0,  0,  0, 14, 15, 16, 17,  0,  0,  0,  1,  0,  0, 18,\n+   19,  0,  0,  0, 20,  0,  0,  0,  1,  1,  1,  1,  0,  1,  1,  1,\n+    1,  1,  1,  1,  0,  8, 21,  9,  0,  0, 22,  0,  0,  0,  0,  1,\n+    0, 23, 24, 25,  0,  0, 26,  0,  0,  0,  8, 21, 27,  0,  1,  0,\n+    0,  1,  1,  1,  1,  0,  1, 28, 29, 30,  0, 31, 32, 20,  1,  1,\n+    0,  0,  0,  8, 21,  9,  1,  4,  5,  0,  0,  0, 33,  9,  0,  1,\n+    1,  1,  0,  8, 21, 21, 21, 21, 34,  1, 35, 21, 21, 21,  9, 36,\n+    0,  0, 37, 38,  1,  0, 39,  0,  0,  0,  1,  0,  1,  0,  0,  0,\n+    0,  8, 21,  9,  1,  0,  0,  0, 40,  0,  8, 21, 21, 21, 21, 21,\n+   21, 21, 21,  9,  0,  1,  1,  1,  1,  8, 21, 21, 21,  9,  0,  0,\n+    0, 41,  0, 42, 43,  0,  0,  0,  1, 44,  0,  0,  0, 45,  8,  9,\n+    1,  0,  0,  0,  8, 21, 21, 21,  9,  0,  1,  0,  1,  1,  8, 21,\n+   21,  9,  0,  4,  5,  8,  9,  1,  0,  0,  0,  1,  2,  3,  3,  4,\n+    5,  6,  7,  8,  9, 10, 11, 12, 13, 14,  3,  3,  3,  3,  3,  3,\n+    3, 15,  3, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n@@ -4916,38 +5177,0 @@\n-   17,177,  0,  1,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n-    3,  3,  3,  3,  3,  3,  4,  3,  3,  3,  3,  3,  5,  3,  3,  3,\n-    3,  3,  6,  7,  8,  3,  3,  3,  3,  3,  9, 10, 11, 12, 13,  3,\n-    3,  3,  3,  3,  3,  3,  3, 14,  3, 15,  3,  3,  3,  3,  3,  3,\n-   16, 17, 18, 19, 20, 21,  3,  3,  3, 22, 23, 24,  3,  3,  3,  3,\n-    3,  3, 25,  3,  3,  3,  3,  3,  3,  3,  3, 26,  3,  3, 27, 28,\n-    0,  1,  0,  0,  0,  0,  0,  1,  0,  2,  0,  0,  0,  3,  0,  0,\n-    0,  3,  0,  0,  0,  0,  0,  4,  0,  5,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  7,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  9,  0,  0,  0,  0,  0,\n-    0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0, 10, 11, 12, 13,  0,\n-    0, 14, 15, 16,  6,  0, 17, 18, 19, 19, 19, 20, 21, 22, 23, 24,\n-   19, 25,  0, 26, 27, 19, 19, 28, 29, 30,  0, 31,  0,  0,  0,  8,\n-    0,  0,  0,  0,  0,  0,  0, 19, 28,  0, 32, 33,  9, 34, 35, 19,\n-    0,  0, 36, 37, 38, 39, 40, 19,  0, 41, 42, 43, 44, 31,  0,  1,\n-   45, 42,  0,  0,  0,  0,  0, 32, 14, 14,  0,  0,  0,  0, 14,  0,\n-    0, 46, 47, 47, 47, 47, 48, 49, 47, 47, 47, 47, 50, 51, 52, 53,\n-   43, 21,  0,  0,  0,  0,  0,  0,  0, 54,  6, 55,  0, 14, 19,  1,\n-    0,  0,  0,  0, 56, 57,  0,  0,  0,  0,  0, 19, 58, 31,  0,  0,\n-    0,  0,  0,  0,  0, 59, 14,  0,  0,  0,  0,  1,  0,  2,  0,  0,\n-    0,  3,  0,  0,  0, 60, 61,  0,  0,  0,  0,  0,  0,  0,  1,  0,\n-    0,  0,  0,  0,  2,  3,  0,  4,  5,  0,  0,  6,  0,  0,  0,  7,\n-    0,  0,  0,  1,  1,  0,  0,  8,  9,  0,  8,  9,  0,  0,  0,  0,\n-    8,  9, 10, 11, 12,  0,  0,  0, 13,  0,  0,  0,  0, 14, 15, 16,\n-   17,  0,  0,  0,  1,  0,  0, 18, 19,  0,  0,  0, 20,  0,  0,  0,\n-    1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,  8, 21,  9,\n-    0,  0, 22,  0,  0,  0,  0,  1,  0, 23, 24, 25,  0,  0, 26,  0,\n-    0,  0,  8, 21, 27,  0,  1,  0,  0,  1,  1,  1,  1,  0,  1, 28,\n-   29, 30,  0, 31, 32, 20,  1,  1,  0,  0,  0,  8, 21,  9,  1,  4,\n-    5,  0,  0,  0, 33,  9,  0,  1,  1,  1,  0,  8, 21, 21, 21, 21,\n-   34,  1, 35, 21, 21, 21,  9, 36,  0,  0, 37, 38,  1,  0, 39,  0,\n-    0,  0,  1,  0,  1,  0,  0,  0,  0,  8, 21,  9,  1,  0,  0,  0,\n-   40,  0,  8, 21, 21, 21, 21, 21, 21, 21, 21,  9,  0,  1,  1,  1,\n-    1,  8, 21, 21, 21,  9,  0,  0,  0, 41,  0, 42, 43,  0,  0,  0,\n-    1, 44,  0,  0,  0, 45,  8,  9,  1,  0,  0,  0,  8, 21, 21, 21,\n-    9,  0,  1,  0,  1,  1,  8, 21, 21,  9,  0,  4,  5,  8,  9,  1,\n-    0,  0,  0,  1,  2,  3,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,\n-   13, 14,  3,  3,  3,  3,  3,  3,  3, 15,  3, 16, 17, 17, 17, 17,\n@@ -4957,8 +5180,17 @@\n-   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n-   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n-   17, 17, 18,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,\n-   12, 13, 14, 15, 16, 17, 17, 17, 18, 17, 19, 20, 21, 22, 23, 23,\n-   23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 23, 23, 23, 23, 23,\n-   23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n-   23, 23, 23, 23, 25, 25, 26, 27, 28, 29, 30, 30, 30, 30, 30, 30,\n-   30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18,  0,  0,  1,  2,  3,\n+    4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17,\n+   18, 17, 19, 20, 21, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n+   23, 23, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n+   23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25, 25, 26, 27,\n+   28, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n+   30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31,\n+   31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n+   40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 31,\n+   31, 31, 31, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57,\n+   31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 58, 31, 31, 31,\n+   59, 60, 61, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,\n+   63, 64, 65, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n+   31, 31, 31, 66, 67, 68, 31, 31, 31, 31, 69, 31, 31, 31, 31, 31,\n+   31, 31, 17, 70, 71, 72, 17, 17, 73, 74, 31, 75, 76, 77, 78, 79,\n+   80, 31, 81, 82, 17, 83, 17, 17, 17, 17, 31, 31, 23, 23, 23, 23,\n+   23, 23, 23, 84, 31, 31, 31, 31, 23, 84, 31, 31, 23, 23, 31, 31,\n@@ -4966,54 +5198,44 @@\n-   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n-   48, 49, 50, 51, 52, 52, 53, 31, 31, 31, 31, 54, 55, 55, 56, 31,\n-   31, 31, 31, 31, 31, 31, 57, 58, 31, 31, 31, 31, 31, 31, 31, 31,\n-   31, 31, 31, 31, 31, 31, 31, 31, 59, 60, 31, 61, 62, 62, 62, 62,\n-   62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 64, 31, 31, 31, 31, 31,\n-   31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 65, 66, 67, 31, 31,\n-   31, 31, 68, 31, 31, 31, 31, 31, 31, 31, 31, 69, 70, 71, 17, 17,\n-   72, 73, 31, 74, 75, 76, 77, 78, 79, 31, 80, 81, 17, 82, 17, 17,\n-   17, 17, 31, 31, 23, 23, 23, 23, 23, 23, 23, 83, 31, 31, 31, 31,\n-   23, 83, 31, 31, 23, 23, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n-   31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n-   31, 31, 31, 31, 84,  0,  0,  1,  0,  1,  2,  3,  0,  1,  2,  3,\n-    4,  5,  6,  7,  0,  1,  2,  3,  4,  4,  4,  4,  4,  4,  5,  6,\n-    7,  8,  9, 10, 11, 11, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20,\n-   21, 22, 23, 24, 25, 26, 19, 27, 28, 29, 30, 30, 31, 31, 32, 32,\n-   33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 40, 41, 41,\n-   42, 42, 42, 43, 44, 44, 45, 46, 47, 47, 47, 47, 48, 48, 48, 48,\n-   48, 48, 49, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 53,\n-   54, 55, 56, 56, 57, 58, 59, 51, 60, 61, 62, 63, 64, 65, 66,  7,\n-   67, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,  7,  4,  4,  4,  4,\n-   77, 77, 77, 77, 78, 79, 80, 81, 82, 83, 84,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0, 85, 85, 85, 85,  0,  0,  0,  0, 86, 87, 88, 88,\n-   89, 90, 48, 91,  0,  0, 92, 92, 92, 92, 92, 93, 94, 95, 96, 97,\n-   98, 47, 99,100,101,102,  0,103,104,105,  0,  0, 92, 92, 92, 92,\n-   92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,  0,106,106,106,106,\n-  106,106,106,106,106,106,106,107,108,108,108,108,108, 11,109,110,\n-  111,  4,112,  4,113,114,115,116,117,118,119,120,121,122,123,124,\n-  125,126, 50,127, 47, 47, 47, 47, 47, 47, 47, 47,128,128,128,128,\n-  128,128,128,128,128,128,128,128, 92, 92, 92, 92, 92, 92, 92, 92,\n-  129,130, 19, 19, 19, 19, 19, 19,131, 19, 19, 19,132,133, 19,134,\n-  135,136,137,101,138,138,138,138,  0, 77,139,140,128,128,141,142,\n-  143,144,145,146,147,148,149,150,151,152,153,153,154,154,154,154,\n-  154,154,  4,  4,155,156,157,158,159,160,161,162,163,164,165,166,\n-  167,168,169,169,170,170,171,171,172,172,128,128, 19, 19,173,174,\n-  175,176,177,178,179,179,180,181,182,183,184,185,186,186,187,188,\n-  189,190,128,128,191,191,192,192,128,128,193,193,194,195,196,196,\n-  197,197,128,128,198,198,199,199,200,200,201,201,202,203,204,205,\n-   28, 28,128,128,206,207,208,208,209,210,211,211,128,128,212,212,\n-  213,213,214, 34,215,215,215,215,215,215,215,215,215,215,215,215,\n-  215,215,128,128,128,128,128,128,128,128,216,216,217,217,217,217,\n-  217,217,217,217,217,217,128,128,128,128,128,128,218,218,218,218,\n-  218,218,218,218,218,218,128,128,128,128,128,128,110,110,110,110,\n-  110,110,110,110,110,219,220,221,222,222,222,222,223,223,223,223,\n-  224,224,224,225,226,226,226,226,226,226,226,226,226,226,226,226,\n-  227,227,227,227,227,227,227,227,226,226,128,128,128,128,128,128,\n-  128,128,104,104,228,229,229,229,230,231,232,232,232,232,232,232,\n-  128,128,128,128,233,233,234,  0,128,128,128,128,128,128,128,128,\n-    7,235,  0,  0,  0,  0,  0,  0,  0,236,237,  0, 77, 77,  0,  0,\n-    0,  0,128,128,238,238,238,238,238,238,238,238,238,238,238,238,\n-  128,128,128,128,128,128,128,128,  4,  4,128,128,239, 11, 11, 11,\n-  240,240,128,128,128,128,241,242,128,128,128,128,128,128,243,243,\n-  128,128,128,128,128,128,128,128,128,128, 48, 48,244,244,244,244,\n-  245,245,128,128,  0,  0,  0,  0,  0,  0,128,128, 19, 19, 19, 19,\n-  128,128,128,128,246,  0,128,128,  0,  0,  0,  0, 92, 92,128,128,\n+   31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 85,  0,  0,  1,\n+    0,  1,  2,  3,  0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  2,  3,\n+    4,  4,  4,  4,  4,  4,  5,  6,  7,  8,  9, 10, 11, 11, 12, 11,\n+   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 19, 27,\n+   28, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36,\n+   37, 37, 38, 38, 39, 40, 41, 41, 42, 42, 42, 43, 44, 44, 45, 46,\n+   47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 49, 50, 51, 51, 51, 51,\n+   51, 51, 51, 51, 51, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 51,\n+   60, 61, 62, 63, 64, 65, 66,  7, 67, 67, 68, 69, 70, 71, 72, 73,\n+   74, 75, 76,  7,  4,  4,  4,  4, 77, 77, 77, 77, 78, 79, 80, 81,\n+   82, 83, 84,  0,  0,  0,  0,  0,  0,  0,  0,  0, 85, 85, 85, 85,\n+    0,  0,  0,  0, 86, 87, 88, 88, 89, 90, 48, 91,  0,  0, 92, 92,\n+   92, 92, 92, 93, 94, 95, 96, 97, 98, 47, 99,100,101,102,  0,103,\n+  104,105,  0,  0, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,\n+   92, 92, 92,  0,106,106,106,106,106,106,106,106,106,106,106,107,\n+  108,108,108,108,108, 11,109,110,111,  4,112,  4,113,114,115,116,\n+  117,118,119,120,121,122,123,124,125,126, 50,127, 47, 47, 47, 47,\n+   47, 47, 47, 47,128,128,128,128,128,128,128,128,128,128,128,128,\n+   92, 92, 92, 92, 92, 92, 92, 92,129,130, 19, 19, 19, 19, 19, 19,\n+  131, 19, 19, 19,132,133, 19,134,135,136,137,101,138,138,138,138,\n+    0, 77,139,140,128,128,141,142,143,144,145,146,147,148,149,150,\n+  151,152,153,154,155,155,155,155,155,155,  4,  4,156,157,158,159,\n+  160,161,162,163,164,165,166,167,168,169,170,170,171,171,172,172,\n+  173,174,174,174, 19, 19,175,176,177,178,179,180,181,181,182,183,\n+  184,185,186,187,188,188,189,190,191,192,193,193,194,194,195,195,\n+  128,128,196,196,197,198,199,200,201,201,128,128,202,202,203,203,\n+  204,204,205,205,206,207,208,209, 28, 28,210,210,211,212,213,213,\n+  214,215,216,216,128,128,217,217,218,218,219, 34,220,220,220,220,\n+  220,220,220,220,220,220,220,220,220,220,128,128,128,128,128,128,\n+  128,128,221,221,222,222,222,222,222,222,222,222,223,223,223,223,\n+  223,223,223,223,223,223,128,128,128,128,128,128,128,128,128,128,\n+  224,224,128,128,110,110,110,110,110,110,110,110,110,225,226,227,\n+  228,228,228,228,128,128,128,128,229,229,128,128,230,230,230,230,\n+  231,231,231,232,233,233,233,233,233,233,233,233,233,233,233,233,\n+  234,234,234,234,234,234,234,234,233,233,128,128,128,128,128,128,\n+  128,128,104,104,235,236,236,236,237,238,239,239,239,239,239,239,\n+  128,128,128,128,240,240,241,  0,128,128,128,128,  0,  0,  0,  0,\n+    7,242,  0,  0,  0,  0,  0,  0,  0,243,244,  0, 77, 77,  0,  0,\n+    0,  0,128,128,245,245,245,245,245,245,245,245,245,245,245,245,\n+  128,128,128,128,128,128,128,128,  4,  4,128,128,246, 11, 11, 11,\n+  247,247,128,128,128,128,248,249,128,128,128,128,128,128,250,250,\n+  128,128,251,251,128,128,128,128,128,128, 48, 48,252,252,252,252,\n+  253,253,128,128,  0,  0,  0,  0,  0,  0,128,128, 19, 19, 19, 19,\n+  128,128,128,128,254,  0,128,128,  0,  0,  0,  0, 92, 92,128,128,\n@@ -5059,24 +5281,26 @@\n-  151,151,151,151,152,152,152,152,153,153,153,153,154,154,155,155,\n-  156,156,156,156,156,156,157,157,158,158,159,159,159,159,159,159,\n-  160,160,161,161,161,161,161,161,162,162,162,162,162,162,163,163,\n-  164,164,164,164,165,165,165,165,166,166,166,166,167,167,168,168,\n-  169,169,169,169,170,170,170,170,171,171,171,171,172,172,172,172,\n-  173,173,173,173,173,173,173,174,175,175,175,176,176,176,176,177,\n-  177,177,177,178,178,178,179,179,180,180,180,180,181,181,181,181,\n-  181,182,182,182,183,183,183,183,183,184,184,184,185,185,185,185,\n-  185,185,186, 43,187,187,187,187,188,188,188,189,189,189,189,189,\n-  190,190,190,191,190,190,190,190,192,192,192,192,193,193,193,193,\n-  194,194,194,194,195,195,195,195,195,195, 66, 66,196,196,196,196,\n-  197,197,197,197,198,198,198,198,199,199,199,199,200,200,200,200,\n-  201,201,201,201,202,202,202,202,202,203,203,203,203,203,203, 55,\n-  204,204,204,204,205,205,205,205,205,205,205,206,206,206,206,206,\n-  207,207,207,207,207,207,208,208,208,208,208,208,209,209,209,209,\n-  210,210,210,210,110,110,110,110,211,211,211,211,212,212,212,212,\n-  213,213,213,213,214,214,214,214,215,215,215,216,216,216,216,216,\n-  216,217,217,217,218,218,218,218,219,219,219,219,220,220,220,220,\n-  220,220,221, 94,222,222,222,222,223,223,223,223,224, 99, 99, 99,\n-   99, 99, 99, 99, 99, 99,102,225, 99,226,102,227,227,227,227,227,\n-  228,228,228,228,228,228,  0,  0,  8,  0,  0,  0,  0,  0,229,230,\n-  231,  0,232,  0,233,233,233,233, 91, 91, 91, 13,234,234,234,234,\n-  235,235,235,235,236,236,236,236,237,237,237,237,238,238,238,238,\n-  239,239,239,239,240,  0,  0,  0,  0,  0,  0,  0,  1,  2,  2,  2,\n+  151,151,151,151,152,152,152,152,153,153,153,153,154,154,154,154,\n+  155,155,156,156,157,157,157,157,157,157,158,158,159,159,160,160,\n+  160,160,160,160,161,161,162,162,162,162,162,162,163,163,163,163,\n+  163,163,164,164,165,165,165,165,166,166,166,166,167,167,167,167,\n+  168,168,169,169,170,170,170,170,171,171,171,171,172,172,172,172,\n+  173,173,173,173,174,174,174,174,175,175,175,175,176, 21, 21, 21,\n+  177,177,177,178,178,178,178,179,179,179,179,180,180,180,181,181,\n+  182,182,182,182,183,183,183,183,183,184,184,184,185,185,185,185,\n+  185,186,186,186,187,187,187,187,187,187,188, 43,189,189,189,189,\n+  190,190,190,191,191,191,191,191,192,192,192,193,192,192,192,192,\n+  194,194,194,194,195,195,195,195,196,196,196,196,197,197,197,197,\n+  198,198,198,198,198,198, 66, 66,199,199,199,199,199, 49, 49, 49,\n+  200,200,200,200,201,201,201,201,202,202,202,202,203,203,203,203,\n+  204,204,204,204,205,205,205,205,205,206,206,206,206,206,206, 55,\n+  207,207,207,207,208,208,208,208,209,209,209,209,209,209,209,210,\n+  210,210,210,210,211,211,211,211,211,211,212,212,212,212,212,212,\n+  213,213,213,213,214,214,214,214,110,110,110,110,215,215,215,215,\n+  216,216,216,216,217,217,217,217,218,218,218,218,219,219,219,219,\n+  220,220,220,221,221,221,221,221,221,222,222,222,223,223,223,223,\n+  224,224,224,224,225,225,225,225,226,226,226,226,226,226,227, 94,\n+  228,228,228,228,229,229,229,229,230, 99, 99, 99, 99, 99, 99, 99,\n+   99, 99,102,231, 99,232,102,233,233,233,233,233,234,234,234,234,\n+  234,234,  0,  0,  8,  0,  0,  0,  0,  0,235,236,237,  0,238,  0,\n+  239,239,239,239, 91, 91, 91, 13,240,240,240,240,241,241,241,241,\n+  242,242,242,242,243,243,243,243,244,244,244,244,245,245,245,245,\n+  246,246,246,246,247,  0,  0,  0,  0,  0,  0,  0,  1,  2,  2,  2,\n@@ -5126,1 +5350,1 @@\n-  174,174,174,175,176,176,176,176,177,177,177,177,178,178,178,178,\n+  175,175,175,175,176,176,176,176,177, 20, 20, 20,178,178,178,178,\n@@ -5129,2 +5353,2 @@\n-  187, 45, 45, 45,188,188,188,188,189,189,189,189,190,190,190,190,\n-  191,191,191,191,191,191,192,191,193,193,193,193,194,194,194,194,\n+  187,187,187,187,188,188,188,188,189, 45, 45, 45,190,190,190,190,\n+  191,191,191,191,192,192,192,192,193,193,193,193,193,193,194,193,\n@@ -5137,44 +5361,46 @@\n-  219,219,219,219,220,220,220,220,221,221,221,221,222,223,223,223,\n-  224,224,224,224,223,223,223,223,225,106,106,106,226,106,106,106,\n-  106,227,109,109,228,228,228,228,229,229,229,229,  0,230, 86,  0,\n-    0,  0,230,  7, 82,138,  7,  0,  0,  0,231, 86,232,232,232,232,\n-  233,233,233,233,234,234,234,234,235,235,235,235,236,236,236,236,\n-  237,237,237,237,238,238,238,238,239,  0,  0,  0,  0,  0,  0,  0,\n-    0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,  0, 19,  0,\n-   19,  0,  0,  0,  0,  0, 26, 26,  1,  1,  1,  1,  9,  9,  9,  9,\n-    0,  9,  9,  9,  9,  9,  0,  9,  9,  0,  9,  0,  9,  9, 55, 55,\n-   55, 55, 55, 55,  6,  6,  6,  6,  6,  1,  1,  6,  6,  4,  4,  4,\n-    4,  4,  4,  4,  4, 14, 14, 14, 14, 14, 14, 14,  3,  3,  3,  3,\n-    3,  0,  3,  3,  0,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  1,\n-    1,  1,  3,  3,  1,  3,  3,  3, 37, 37, 37, 37, 38, 38, 38, 38,\n-   64, 64, 64, 64, 90, 90, 90, 90, 95, 95, 95, 95,  3,  3,  0,  3,\n-    7,  7,  7,  7,  7,  1,  1,  1,  1,  7,  7,  7,  0,  0,  7,  7,\n-    5,  5,  5,  5, 11, 11, 11, 11, 10, 10, 10, 10, 21, 21, 21, 21,\n-   22, 22, 22, 22, 23, 23, 23, 23, 16, 16, 16, 16, 20, 20, 20, 20,\n-   36, 36, 36, 36, 24, 24, 24, 24, 24, 24, 24,  0, 18, 18, 18, 18,\n-   25, 25, 25, 25, 25,  0,  0,  0,  0, 25, 25, 25, 33, 33, 33, 33,\n-    8,  8,  8,  8,  8,  8,  8,  0, 12, 12, 12, 12, 30, 30, 30, 30,\n-   29, 29, 29, 29, 28, 28, 28, 28, 34, 34, 34, 34, 35, 35, 35, 35,\n-   35, 35, 35,  0,  0,  0, 35, 35, 45, 45, 45, 45, 44, 44, 44, 44,\n-   44,  0,  0,  0, 43, 43, 43, 43, 46, 46, 46, 46, 31, 31, 31, 31,\n-   32, 32,  0,  0, 32,  0, 32, 32, 32, 32, 32, 32, 48, 48, 48, 48,\n-   52, 52, 52, 52, 58, 58, 58, 58, 54, 54, 54, 54, 91, 91, 91, 91,\n-   62, 62, 62, 62, 76, 76, 76, 76, 93, 93, 93, 93, 70, 70, 70, 70,\n-   73, 73, 73, 73,  1,  1,  1,  0,  1,  0,  1,  1,  1,  0,  0,  0,\n-    0,  1,  0,  0,  1,  1,  0,  0, 19, 19,  9,  9,  9,  9,  9,  6,\n-   19,  9,  9,  9,  9,  9, 19, 19,  9,  9,  9, 19,  6, 19, 19, 19,\n-   19, 19, 19,  9,  0,  0,  0, 19,  0,  0,  9,  0,  0,  0, 19, 19,\n-   27, 27, 27, 27, 56, 56, 56, 56, 61, 61, 61, 61, 13, 13, 13, 13,\n-    0, 13,  0, 13,  0, 13, 13, 13, 13, 13,  1,  1,  1,  1, 12, 12,\n-    0, 15, 15, 15, 15, 15, 15, 15, 15,  1,  1,  0,  0, 17, 17, 17,\n-   17, 17, 17, 17, 17, 17, 17,  0, 26, 26, 26, 26, 26, 12, 12, 12,\n-   12, 12, 12,  0, 39, 39, 39, 39, 86, 86, 86, 86, 77, 77, 77, 77,\n-   79, 79, 79, 79, 60, 60, 60, 60, 65, 65, 65, 65, 75, 75, 75, 75,\n-   69, 69, 69, 69, 69, 69,  0, 69, 74, 74, 74, 74, 84, 84, 84, 84,\n-   84, 84, 84,  0, 68, 68, 68, 68, 92, 92, 92, 92, 87, 87, 87, 87,\n-   19,  9, 19, 19, 19, 19,  0,  0,  2,  2,  2,  2, 19, 19, 19,  4,\n-    3,  3,  0,  0,  1,  1,  6,  6,  0,  0, 17, 17, 17, 17,  0,  0,\n-   49, 49, 49, 49,  0,  1,  1,  1, 71, 71, 71, 71, 67, 67, 67, 67,\n-   42, 42, 42, 42, 41, 41, 41, 41,118,118,118,118, 53, 53, 53, 53,\n-   59, 59, 59, 59, 40, 40, 40, 40, 51, 51, 51, 51, 50, 50, 50, 50,\n-  135,135,135,135,106,106,106,106,104,104,104,104,161,161,161,161,\n+  219,219,219,219,220,220,220,220,221,221,221,221,222,222,222,222,\n+  223,223,223,223,224,224,224,224,225,225,225,225,226,226,226,226,\n+  227,227,227,227,228,229,229,229,230,230,230,230,229,229,229,229,\n+  231,106,106,106,232,106,106,106,106,233,109,109,234,234,234,234,\n+  235,235,235,235,  0,236, 86,  0,  0,  0,236,  7, 82,138,  7,  0,\n+    0,  0,237, 86,238,238,238,238,239,239,239,239,240,240,240,240,\n+  241,241,241,241,242,242,242,242,243,243,243,243,244,244,244,244,\n+  245,245,245,245,246,  0,  0,  0,  0,  0,  0,  0,  0, 19, 19, 19,\n+   19, 19, 19, 19, 19, 19, 19,  0,  0,  0, 19,  0, 19,  0,  0,  0,\n+    0,  0, 26, 26,  1,  1,  1,  1,  9,  9,  9,  9,  0,  9,  9,  9,\n+    9,  9,  0,  9,  9,  0,  9,  0,  9,  9, 55, 55, 55, 55, 55, 55,\n+    6,  6,  6,  6,  6,  1,  1,  6,  6,  4,  4,  4,  4,  4,  4,  4,\n+    4, 14, 14, 14, 14, 14, 14, 14,  3,  3,  3,  3,  3,  0,  3,  3,\n+    0,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  1,  1,  1,  3,  3,\n+    1,  3,  3,  3, 37, 37, 37, 37, 38, 38, 38, 38, 64, 64, 64, 64,\n+   90, 90, 90, 90, 95, 95, 95, 95,  3,  3,  0,  3,  7,  7,  7,  7,\n+    7,  1,  1,  1,  1,  7,  7,  7,  0,  0,  7,  7,  5,  5,  5,  5,\n+   11, 11, 11, 11, 10, 10, 10, 10, 21, 21, 21, 21, 22, 22, 22, 22,\n+   23, 23, 23, 23, 16, 16, 16, 16, 20, 20, 20, 20, 36, 36, 36, 36,\n+   24, 24, 24, 24, 24, 24, 24,  0, 18, 18, 18, 18, 25, 25, 25, 25,\n+   25,  0,  0,  0,  0, 25, 25, 25, 33, 33, 33, 33,  8,  8,  8,  8,\n+    8,  8,  8,  0, 12, 12, 12, 12, 30, 30, 30, 30, 29, 29, 29, 29,\n+   28, 28, 28, 28, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35,  0,\n+    0,  0, 35, 35, 45, 45, 45, 45, 44, 44, 44, 44, 44,  0,  0,  0,\n+   43, 43, 43, 43, 46, 46, 46, 46, 31, 31, 31, 31, 32, 32,  0,  0,\n+   32,  0, 32, 32, 32, 32, 32, 32, 48, 48, 48, 48, 52, 52, 52, 52,\n+   58, 58, 58, 58, 54, 54, 54, 54, 91, 91, 91, 91, 62, 62, 62, 62,\n+   76, 76, 76, 76, 93, 93, 93, 93, 70, 70, 70, 70, 73, 73, 73, 73,\n+    1,  1,  1,  0,  1,  0,  1,  1,  1,  0,  0,  0,  0,  1,  0,  0,\n+    1,  1,  0,  0, 19, 19,  9,  9,  9,  9,  9,  6, 19,  9,  9,  9,\n+    9,  9, 19, 19,  9,  9,  9, 19,  6, 19, 19, 19, 19, 19, 19,  9,\n+    0,  0,  0, 19,  0,  0,  9,  0,  0,  0, 19, 19, 27, 27, 27, 27,\n+   56, 56, 56, 56, 61, 61, 61, 61, 13, 13, 13, 13,  0, 13,  0, 13,\n+    0, 13, 13, 13, 13, 13,  1,  1,  1,  1, 12, 12,  0, 15, 15, 15,\n+   15, 15, 15, 15, 15,  1,  1,  0,  0, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17,  0, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12, 12,  0,\n+   39, 39, 39, 39, 86, 86, 86, 86, 77, 77, 77, 77, 79, 79, 79, 79,\n+   60, 60, 60, 60, 65, 65, 65, 65, 75, 75, 75, 75, 69, 69, 69, 69,\n+   69, 69,  0, 69, 74, 74, 74, 74, 84, 84, 84, 84, 84, 84, 84,  0,\n+   68, 68, 68, 68, 92, 92, 92, 92, 87, 87, 87, 87, 19,  9, 19, 19,\n+   19, 19,  0,  0,  2,  2,  2,  2, 19, 19, 19,  4,  3,  3,  0,  0,\n+    1,  1,  6,  6,  0,  0, 17, 17, 17, 17,  0,  0, 49, 49, 49, 49,\n+    0,  1,  1,  1, 71, 71, 71, 71, 67, 67, 67, 67, 42, 42, 42, 42,\n+   41, 41, 41, 41,118,118,118,118, 53, 53, 53, 53, 59, 59, 59, 59,\n+   40, 40, 40, 40, 51, 51, 51, 51, 50, 50, 50, 50,135,135,135,135,\n+  106,106,106,106,104,104,104,104,161,161,161,161,170,170,170,170,\n@@ -5186,19 +5412,20 @@\n-  144,144,144,144,156,156,156,156,156,  3,  3,  3,147,147,147,147,\n-  148,148,148,148,158,158,158,158,153,153,153,153,149,149,149,149,\n-   94, 94, 94, 94, 85, 85, 85, 85,101,101,101,101, 96, 96, 96, 96,\n-  111,111,111,111,100,100,100,100,100, 36, 36, 36,108,108,108,108,\n-  129,129,129,129,109,109,109,109,107,107,107,107,107,107,107,  1,\n-  137,137,137,137,124,124,124,124,123,123,123,123,114,114,114,114,\n-  102,102,102,102,126,126,126,126,142,142,142,142,125,125,125,125,\n-  154,154,154,154,150,150,150,150,141,141,141,141,140,140,140,140,\n-  121,121,121,121,133,133,133,133,134,134,134,134,138,138,138,138,\n-  143,143,143,143,145,145,145,145,163,163,163,163, 63, 63, 63, 63,\n-  157,157,157,157, 80, 80, 80, 80,127,127,127,127,115,115,115,115,\n-  159,159,159,159,103,103,103,103,119,119,119,119,146,146,146,146,\n-   99, 99, 99, 99,136,139, 13, 13,155,155,155,155,136,136,136,136,\n-   17, 15, 15, 15, 17, 17, 15, 15, 15, 17, 17, 17,139,139,139,139,\n-  105,105,105,105,  0,  0,  0,  1,  0,  0,  1,  1,131,131,131,131,\n-  151,151,151,151,160,160,160,160,152,152,152,152,164,164,164,164,\n-  113,113,113,113,132,132,132,132, 15,  0,  0,  0,  0,  1,  2,  3,\n-    4,  5,  6,  7,  8,  9,  9,  9,  9, 10,  9, 11, 12, 13,  9,  9,\n-    9, 14,  9,  9, 15,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+  144,144,144,144,165,165,165,165,156,156,156,156,156,156,  3,  3,\n+  147,147,147,147,148,148,148,148,158,158,158,158,153,153,153,153,\n+  149,149,149,149, 94, 94, 94, 94, 85, 85, 85, 85,101,101,101,101,\n+   96, 96, 96, 96,111,111,111,111,100,100,100,100,100, 36, 36, 36,\n+  108,108,108,108,129,129,129,129,109,109,109,109,107,107,107,107,\n+  107,107,107,  1,171,171,171,171,137,137,137,137,124,124,124,124,\n+  123,123,123,123,114,114,114,114,102,102,102,102,126,126,126,126,\n+  142,142,142,142,125,125,125,125,154,154,154,154,150,150,150,150,\n+  141,141,141,141,140,140,140,140,121,121,121,121,169,169,169,169,\n+  133,133,133,133,134,134,134,134,138,138,138,138,143,143,143,143,\n+  145,145,145,145,163,163,163,163, 63, 63, 63, 63,157,157,157,157,\n+   80, 80, 80, 80,127,127,127,127,166,166,166,166,115,115,115,115,\n+  159,159,159,159,103,103,103,103,119,119,119,119,167,167,167,167,\n+  146,146,146,146, 99, 99, 99, 99,136,139, 13, 13,155,155,155,155,\n+  136,136,136,136, 17, 15, 15, 15, 17, 17, 15, 15, 15, 17, 17, 17,\n+  139,139,139,139,105,105,105,105,  0,  0,  0,  1,  0,  0,  1,  1,\n+  131,131,131,131,151,151,151,151,160,160,160,160,152,152,152,152,\n+  164,164,164,164,168,168,168,168,113,113,113,113,132,132,132,132,\n+   15,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9,\n+    9, 10,  9, 11, 12, 13,  9,  9,  9, 14,  9,  9, 15,  9,  9,  9,\n@@ -5210,2 +5437,0 @@\n-    9,  9,  9,  9,  9,  9,  9,  9, 16, 17,  9,  9,  9,  9,  9,  9,\n-    9,  9,  9,  9, 18, 19, 20,  9, 21,  9,  9,  9,  9,  9,  9,  9,\n@@ -5213,0 +5438,2 @@\n+   16, 17,  9,  9,  9,  9, 18,  9,  9,  9,  9,  9, 19, 20, 21,  9,\n+   22,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n@@ -5214,0 +5441,1 @@\n+    9,  9,  9,  9, 23,  9,  9,  9,  9,  9, 24,  9,  9,  9,  9,  9,\n@@ -5216,0 +5444,1 @@\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 25,  9,  9,  9,\n@@ -5217,1 +5446,0 @@\n-    9,  9,  9,  9, 22,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n@@ -5226,8 +5454,7 @@\n-    9,  9,  9,  9,  9,  9,  9,  9, 23, 24,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,\n-   11, 12,  0,  0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23,  0,\n-    0, 24, 25, 26, 27, 28, 29, 30,  0,  0, 31, 32,  0, 33,  0, 34,\n-    0, 35,  0,  0,  0,  0, 36, 37, 38, 39,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 40,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0, 41, 42,  0,  0,  0,  0,  0,  0,  0,  0,\n+   26, 27,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,\n+    3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  0,  0, 13, 14, 15, 16,\n+   17, 18, 19, 20, 21, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 23,  0,  0, 24, 25, 26, 27, 28, 29, 30,\n+    0,  0, 31, 32,  0, 33,  0, 34,  0, 35,  0,  0,  0,  0, 36, 37,\n+   38, 39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0, 41, 42,\n@@ -5235,8 +5462,0 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 43, 44,  0, 45,\n-    0,  0,  0,  0,  0,  0, 46, 47,  0,  0,  0,  0,  0, 48,  0, 49,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 50, 51,\n-    0,  0,  0, 52,  0,  0, 53,  0,  0,  0,  0,  0,  0,  0, 54,  0,\n-    0,  0,  0,  0,  0,  0, 55,  0,  0,  0,  0,  0,  0,  0, 56,  0,\n-    0,  0,  0,  0,  0,  0,  0, 57,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 58, 59,\n-   60, 61, 62, 63, 64, 65,  0,  0,  0,  0,  0,  0, 66,  0,  0,  0,\n@@ -5244,0 +5463,5 @@\n+    0,  0,  0,  0, 43, 44,  0, 45,  0,  0,  0,  0,  0,  0, 46, 47,\n+    0,  0,  0,  0,  0, 48,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 50, 51,  0,  0,  0, 52,  0,  0, 53,  0,\n+    0,  0,  0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0, 55,  0,\n+    0,  0,  0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,  0,  0, 57,\n@@ -5245,0 +5469,2 @@\n+    0,  0,  0,  0,  0,  0, 58, 59, 60, 61, 62, 63, 64, 65,  0,  0,\n+    0,  0,  0,  0, 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -5247,7 +5473,0 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 67, 68,  0, 69, 70,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 71, 72, 73, 74, 75, 76,\n-   77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\n-   93, 94, 95, 96, 97, 98, 99,100,101,102,103,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,104,  0,  0,  0,\n-    0,  0,  0,105,106,  0,107,  0,  0,  0,108,  0,109,  0,110,  0,\n-  111,112,113,  0,114,  0,  0,  0,115,  0,  0,  0,116,  0,  0,  0,\n@@ -5255,3 +5474,0 @@\n-    0,  0,  0,  0,  0,  0,  0,117,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,118,119,\n-  120,121,  0,122,123,124,125,126,  0,127,  0,  0,  0,  0,  0,  0,\n@@ -5259,3 +5475,8 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,129,130,131,132,133,\n-  134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,\n-  150,151,152,153,154,155,156,157,  0,  0,  0,158,159,160,161,  0,\n+    0,  0, 67, 68,  0, 69, 70,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n+   85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,\n+  101,102,103,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,104,  0,  0,  0,  0,  0,  0,105,106,  0,107,  0,\n+    0,  0,108,  0,109,  0,110,  0,111,112,113,  0,114,  0,  0,  0,\n+  115,  0,  0,  0,116,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,117,\n@@ -5263,1 +5484,2 @@\n-    0,  0,  0,162,163,  0,  0,  0,  0,  0,  0,  0,164,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,118,119,120,121,  0,122,123,124,125,126,\n+    0,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -5265,1 +5487,3 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,165,  0,\n+    0,  0,128,129,130,131,132,133,134,135,136,137,138,139,140,141,\n+  142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,\n+    0,  0,  0,158,159,160,161,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -5267,3 +5491,3 @@\n-    0,  0,  0,  0,  0,166,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,167,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,168,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,162,  0,\n+  163,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,164,165,  0,  0,  0,\n+    0,  0,  0,  0,166,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n@@ -5271,4 +5495,3 @@\n-    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,169,\n-  170,  0,  0,  0,  0,171,172,  0,  0,  0,173,174,175,176,177,178,\n-  179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,\n-  195,196,197,198,199,200,201,202,203,204,205,206,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,167,  0,  0,  0,168,169,  0,  0,170,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,171,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,172,  0,  0,\n@@ -5276,1 +5499,12 @@\n-    0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n+    0,  0,  0,  0,  0,173,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,174,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,175,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,176,177,  0,  0,  0,  0,178,179,  0,\n+    0,  0,180,181,182,183,184,185,186,187,188,189,190,191,192,193,\n+  194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,\n+  210,211,212,213,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,\n+    3,  4,\n@@ -5279,1 +5513,1 @@\n-_hb_ucd_u16[4920] =\n+_hb_ucd_u16[5080] =\n@@ -5306,76 +5540,79 @@\n-    47,  47, 184, 185, 186,  61,  47, 187,  11,   9,   9,   9,  66, 188, 189, 190,\n-    11,  11, 191,  27,  27,  27, 192, 193,  11, 194,  27,  27,  32,  32,  32,  32,\n-    13,  13,  13,  13,  13,  13,  13,  13,  13, 195,  13,  13,  13,  13,  13,  13,\n-   196, 196, 196, 196, 196, 197, 196,  11, 198, 198, 198, 199, 200, 201, 201, 200,\n-   202, 203, 204, 205, 206, 207, 208, 209, 210,  27, 211, 211, 211, 212, 213,  32,\n-   214, 215, 216, 217, 218, 145, 219, 219, 220, 221, 222, 146, 223, 224, 146, 225,\n-   226, 226, 226, 226, 226, 226, 226, 226, 227, 146, 228, 146, 146, 146, 146, 229,\n-   146, 230, 226, 231, 146, 232, 233, 146, 146, 146, 146, 146, 146, 146, 145, 145,\n-   145, 234, 146, 146, 146, 146, 235, 145, 146, 146, 146, 146, 146, 146, 146, 146,\n-   146, 146, 146, 236, 237, 146, 146, 238, 146, 146, 146, 146, 146, 146, 239, 146,\n-   146, 146, 146, 146, 146, 146, 240, 241, 145, 242, 146, 146, 243, 226, 244, 226,\n-   245, 246, 226, 226, 226, 247, 226, 248, 146, 146, 146, 226, 249, 146, 146, 146,\n-     9,   9,   9,  11,  11,  11, 250, 251,  13,  13,  13,  13,  13,  13, 252, 253,\n-    11,  11,  11,  47,  47,  47, 254, 255,  47,  47,  47,  47,  47,  47,  32,  32,\n-   256, 257, 258, 259, 260, 261, 262, 262, 263, 264, 265, 266, 267,  47,  47,  47,\n-    47, 268, 148,  47,  47,  47,  47, 269,  47, 270,  47,  47, 146, 146, 146,  47,\n-   146, 146, 271, 146, 272, 273, 146, 146, 271, 146, 146, 273, 146, 146, 146, 146,\n-    47,  47,  47,  47, 146, 146, 146, 146,  47, 274,  47,  47,  47,  47,  47,  47,\n-    47, 146, 146, 146, 146,  47,  47, 187, 275,  47,  61,  47,  13,  13, 276, 277,\n-    13, 278,  47,  47,  47,  47, 279, 280,  31, 281, 282, 283,  13,  13,  13, 284,\n-   285, 286, 287, 288, 289, 290,  11, 291, 292,  47, 293, 294,  47,  47,  47, 295,\n-   296,  47,  47, 297, 298, 160,  32, 299,  61,  47, 300,  47, 301, 302,  47,  47,\n-    72,  47,  47, 303, 304, 305, 306,  61,  47,  47, 307, 308, 309, 310,  47, 311,\n-    47,  47,  47, 312,  58, 313, 314, 315,  47,  47,  47,  11,  11, 316, 317,  11,\n-    11,  11,  11,  11,  47,  47, 318, 160, 319, 319, 319, 319, 319, 319, 319, 319,\n-   320, 320, 320, 320, 320, 320, 320, 320,  11, 321, 322,  47,  47,  47,  47,  47,\n-    47,  47,  47, 323,  31, 324,  47,  47,  47,  47,  47, 325, 146,  47,  47,  47,\n-    47,  47,  47,  47, 326, 146, 146, 327,  32, 328,  32, 329, 330, 331, 332,  47,\n-    47,  47,  47,  47,  47,  47,  47, 333, 334,   2,   3,   4,   5, 335, 336, 337,\n-    47, 338,  47,  47,  47,  47, 339, 340, 341, 145, 145, 342, 219, 219, 219, 343,\n-   344, 146, 146, 146, 146, 146, 146, 345, 346, 346, 346, 346, 346, 346, 346, 346,\n-    47,  47,  47,  47,  47,  47, 347, 145,  47,  47, 348,  47, 349,  47,  47,  60,\n-    47, 350,  47,  47,  47, 351, 219, 219,   9,   9, 147,  11,  11,  47,  47,  47,\n-    47,  47, 160,   9,   9, 147,  11,  11,  47,  47,  47,  47,  47,  47, 350,   9,\n-     9, 352,  11,  11,  11,  11,  11,  11,  27,  27,  27,  27,  27,  27,  27,  27,\n-    47,  47,  47,  47,  47, 353,  47, 354,  47,  47, 355, 145, 145, 145,  47, 356,\n-    47, 357,  47, 350,  66,  66,  66,  66,  47,  47,  47, 358, 145, 145, 145, 145,\n-   359,  47,  47, 360, 145,  66,  47, 361,  47, 362, 145, 145, 363,  47, 364,  66,\n-    47,  47,  47, 365,  47, 366,  47, 366,  47, 365, 144, 145, 145, 145, 145, 145,\n-     9,   9,   9,   9,  11,  11,  11, 367,  47,  47, 368, 160, 160, 160, 160, 160,\n-   145, 145, 145, 145, 145, 145, 145, 145,  47,  47, 369,  47,  47,  47,  47, 143,\n-    47, 362, 370,  47,  60, 371,  66,  47, 372,  66,  66,  47, 373, 145,  47,  47,\n-   374,  47,  47, 360, 375, 376, 377, 378, 180,  47,  47, 379, 380,  47,  47, 160,\n-    97,  47, 381, 382, 383,  47,  47, 384, 180,  47,  47, 385, 386, 387, 388, 145,\n-    47,  47, 389, 390, 359,  32,  32,  32,  47,  47, 365,  47,  47, 391, 172, 160,\n-    92,  47,  47, 113, 392, 393, 394,  32,  47,  47,  47, 395, 396, 397,  47,  47,\n-    47,  47,  47, 398, 399, 160, 160, 160,  47,  47, 400, 401, 402, 403,  32,  32,\n-    47,  47,  47, 404, 405, 160,  66,  66,  47,  47, 406, 407, 160, 160, 160, 160,\n-    47, 143, 408, 409,  47,  47,  47,  47,  47,  47, 389, 410,  66,  66,  66,  66,\n-     9,   9,   9,   9,  11,  11, 128, 411,  47,  47,  47, 412, 413, 160, 160, 160,\n-    47,  47,  47,  47,  47, 414, 415, 416, 417,  47,  47, 418, 419, 420,  47,  47,\n-   421, 422,  66,  47,  47,  47,  47,  47,  66,  66,  66,  66,  66,  66,  66,  66,\n-    47,  47, 400, 423, 424, 128, 145, 425,  47, 156, 426, 427,  32,  32,  32,  32,\n-    47,  47,  47, 359, 428, 160,  47,  47, 429, 430, 160, 160, 160, 160, 160, 160,\n-    47,  47,  47,  47,  47,  47,  47, 431, 432,  47,  47, 433, 434, 160, 160, 160,\n-    47,  47,  47,  47, 145, 435, 436, 437, 219, 219, 219, 219, 219, 219, 219,  66,\n-    47,  47,  47,  47,  47,  47,  47, 424,  47,  47,  47, 208, 438,  32,  32,  32,\n-    47,  47,  47,  47,  47,  47, 305,  47,  47,  47,  47,  47, 160,  47,  47, 439,\n-    47,  47,  47, 440, 441, 442, 443,  47,   9,   9,   9,   9,   9,   9,  11,  11,\n-   145, 444,  66,  66,  66,  66,  66,  66,  47,  47,  47,  47, 391, 445, 416, 416,\n-   446, 447,  27,  27,  27,  27, 448, 416,  47, 449, 208, 208, 208, 208, 208, 208,\n-    32,  32,  32,  32,  32, 146, 146, 146, 146, 146, 146, 146, 146, 146, 450, 451,\n-   452, 146, 453, 146, 146, 146, 146, 146, 146, 146, 146, 146, 454, 146, 146, 146,\n-     9, 455,  11, 456, 457,  11, 196,   9, 458, 459,   9, 460,  11,   9, 455,  11,\n-   456, 457,  11, 196,   9, 458, 459,   9, 460,  11,   9, 455,  11, 456, 457,  11,\n-   196,   9, 458, 459,   9, 460,  11,   9, 455,  11, 196,   9, 461, 462, 463, 464,\n-    11, 465,   9, 466, 467, 468, 469,  11, 470,   9, 471,  11, 472, 160, 160, 160,\n-    32,  32,  32, 473,  32,  32, 474, 475, 476, 477,  32,  32,  32,  32,  32,  32,\n-   478,  11,  11,  11,  11,  11,  11,  11,  32,  32,  32,  27,  27,  27,  27,  27,\n-    32,  32,  32,  32,  32,  32,  32,  32,  47,  47,  47, 479, 480, 146, 146, 146,\n-    47,  47, 481,  32,  47,  47, 482, 483,  47,  47,  47,  47,  47,  47, 484, 160,\n-    47,  47,  47,  47, 355,  32,  32,  32,   9,   9, 458,  11, 485, 305,  66,  66,\n-   145, 145, 486, 487, 145, 145, 145, 145, 145, 145, 488, 145, 145, 145, 145, 145,\n-    47,  47,  47,  47,  47,  47,  47, 226, 489, 146, 146, 146, 146, 146, 146, 146,\n-   146, 146, 146, 146, 146, 146, 146, 490, 146, 146, 146, 146, 146, 146, 146, 160,\n-   208, 208, 208, 208, 208, 208, 208, 208,   0,   0,   0,   0,   0,   0,   0,   0,\n+    47,  47, 184, 185, 186,  61,  47, 187, 188,   9,   9,   9,  66, 189, 190, 191,\n+    11,  11, 192,  27,  27,  27, 193, 194,  11, 195,  27,  27,  32,  32,  32,  32,\n+    13,  13,  13,  13,  13,  13,  13,  13,  13, 196,  13,  13,  13,  13,  13,  13,\n+   197, 197, 197, 197, 197, 198, 197,  11, 199, 199, 199, 200, 201, 202, 202, 201,\n+   203, 204, 205, 206, 207, 208, 209, 210, 211,  27, 212, 212, 212, 213, 214,  32,\n+   215, 216, 217, 218, 219, 145, 220, 220, 221, 222, 223, 146, 224, 225, 146, 226,\n+   227, 227, 227, 227, 227, 227, 227, 227, 228, 146, 229, 146, 146, 146, 146, 230,\n+   146, 231, 227, 232, 146, 233, 234, 146, 146, 146, 146, 146, 146, 146, 145, 145,\n+   145, 235, 146, 146, 146, 146, 236, 145, 146, 146, 146, 146, 146, 146, 146, 146,\n+   146, 146, 146, 237, 238, 146, 146, 239, 146, 146, 146, 146, 146, 146, 240, 146,\n+   146, 146, 146, 146, 146, 146, 241, 242, 145, 243, 146, 146, 244, 227, 245, 227,\n+   246, 247, 227, 227, 227, 248, 227, 249, 146, 146, 146, 227, 250, 146, 146, 146,\n+     9,   9,   9,  11,  11,  11, 251, 252,  13,  13,  13,  13,  13,  13, 253, 254,\n+    11,  11,  11,  47,  47,  47, 255, 256,  47,  47,  47,  47,  47,  47,  32,  32,\n+   257, 258, 259, 260, 261, 262, 263, 263, 264, 265, 266, 267, 268,  47,  47,  47,\n+    47, 269, 148,  47,  47,  47,  47, 270,  47, 271,  47,  47, 146, 146, 146,  47,\n+   146, 146, 272, 146, 273, 274, 146, 146, 272, 146, 146, 274, 146, 146, 146, 146,\n+    47,  47,  47,  47, 146, 146, 146, 146,  47, 275,  47,  47,  47,  47,  47,  47,\n+    47, 146, 146, 146, 146,  47,  47, 187, 276,  47,  61,  47,  13,  13, 277, 278,\n+    13, 279,  47,  47,  47,  47, 280, 281,  31, 282, 283, 284,  13,  13,  13, 285,\n+   286, 287, 288, 289, 290, 291,   9, 292, 293,  47, 294, 295,  47,  47,  47, 296,\n+   297,  47,  47, 298, 299, 160,  32, 300,  61,  47, 301,  47, 302, 303,  47,  47,\n+    72,  47,  47, 304, 305, 306, 307,  61,  47,  47, 308, 309, 310, 311,  47, 312,\n+    47,  47,  47, 313,  58, 314, 315, 316,  47,  47,  47,  11,  11, 317, 318,  11,\n+    11,  11,  11,  11,  47,  47, 319, 160, 320, 320, 320, 320, 320, 320, 320, 320,\n+   321, 321, 321, 321, 321, 321, 321, 321,  11, 322, 323,  47,  47,  47,  47,  47,\n+    47,  47,  47, 324,  31, 325,  47,  47,  47,  47,  47, 326, 146,  47,  47,  47,\n+    47,  47,  47,  47, 327, 146, 146, 328,  32, 329,  32, 330, 331, 332, 333,  47,\n+    47,  47,  47,  47,  47,  47,  47, 334, 335,   2,   3,   4,   5, 336, 337, 338,\n+    47, 339,  47,  47,  47,  47, 340, 341, 342, 145, 145, 343, 220, 220, 220, 344,\n+   345, 146, 146, 146, 146, 146, 146, 346, 347, 347, 347, 347, 347, 347, 347, 347,\n+    47,  47,  47,  47,  47,  47, 348, 145,  47,  47, 349,  47, 350,  47,  47,  60,\n+    47, 351,  47,  47,  47, 352, 220, 220,   9,   9, 147,  11,  11,  47,  47,  47,\n+    47,  47, 160,   9,   9, 147,  11,  11,  47,  47,  47,  47,  47,  47, 351,   9,\n+     9, 353,  11,  11,  47,  47,  47,  47,  27,  27,  27,  27,  27,  27,  27,  27,\n+    47,  47,  47,  47,  47, 354,  47, 355,  47,  47, 356, 145, 145, 145,  47, 357,\n+    47, 358,  47, 351,  66,  66,  66,  66,  47,  47,  47, 359, 145, 145, 145, 145,\n+   360,  47,  47, 361, 145,  66,  47, 362,  47, 363, 145, 145, 364,  47, 365,  66,\n+    47,  47,  47, 366,  47, 367,  47, 367,  47, 366, 144, 145, 145, 145, 145, 145,\n+     9,   9,   9,   9,  11,  11,  11, 368,  47,  47, 369, 160, 370,   9, 371,  11,\n+   372, 227, 227, 227, 227, 227, 227, 227, 145, 145, 145, 145, 145, 145, 145, 145,\n+    47,  47, 373,  47,  47,  47,  47, 374,  47, 363, 375,  47,  60, 376,  66,  47,\n+   377,  66,  66,  47, 378, 145,  47,  47, 379,  47,  47, 361, 380, 381, 382, 383,\n+   180,  47,  47, 384, 385,  47,  47, 160,  97,  47, 386, 387, 388,  47,  47, 389,\n+   180,  47,  47, 390, 391, 392, 393, 145,  47,  47, 394, 395, 360,  32,  32,  32,\n+    47,  47, 366,  47,  47, 396, 172, 160,  92,  47,  47, 113, 397, 398, 399,  32,\n+    47,  47,  47, 400, 401, 402, 403,  32,  47,  47,  47, 404, 405, 406,  47,  47,\n+    47,  47,  47, 407, 408, 160, 160, 160,  47,  47, 409, 410, 411, 412,  32,  32,\n+    47,  47,  47, 413, 414, 160,  66,  66,  47,  47, 415, 416, 160, 160, 160, 160,\n+    47, 417, 418, 419,  47,  47,  47,  47,  47,  47, 394, 420,  66,  66,  66,  66,\n+     9,   9,   9,   9,  11,  11, 128, 421,  47,  47,  47, 422, 423, 160, 160, 160,\n+    47,  47,  47,  47,  47, 424, 425, 426, 427,  47,  47, 428, 429, 430,  47,  47,\n+   431, 432,  66,  47,  47,  47,  47,  47,  66,  66,  66,  66,  66,  66,  66,  66,\n+    47,  47,  47,  47,  47,  47, 433, 160,  47,  47, 409, 434, 433, 128, 145, 435,\n+    47, 156, 436, 437,  32,  32,  32,  32,  47,  47,  47, 360, 438, 160,  47,  47,\n+   439, 440, 160, 160, 160, 160, 160, 160,  47,  47,  47,  47,  47,  47,  47, 441,\n+   442,  47,  47, 443, 444, 445,  32,  32,  47,  47,  47,  47, 145, 446, 447, 448,\n+   220, 220, 220, 220, 220, 220, 220,  66,  47,  47,  47,  47,  47,  47,  47, 433,\n+    47,  47,  47, 209, 449,  32,  47,  47,  47, 450, 451, 160, 160, 160, 160, 160,\n+    47,  47,  47,  47,  47,  47, 306,  47,  47,  47,  47,  47, 160,  47,  47, 452,\n+    47,  47,  47, 453, 454, 455, 456,  47,  27,  27,  27,  27, 457,  47, 458, 160,\n+     9,   9,   9,   9,   9,   9,  11,  11, 145, 459,  66,  66,  66,  66,  66,  66,\n+    47,  47,  47,  47, 396, 460, 426, 426, 461, 462,  27,  27,  27,  27, 463, 426,\n+    47, 464, 209, 209, 209, 209, 209, 209, 146, 146, 146, 146, 146, 146, 146, 160,\n+    32,  32,  32,  32,  32, 146, 146, 146, 146, 146, 146, 146, 146, 146, 465, 466,\n+   467, 146, 468, 146, 146, 146, 146, 146, 146, 146, 146, 146, 469, 146, 146, 146,\n+     9, 470,  11, 471, 472,  11, 197,   9, 473, 474,   9, 475,  11,   9, 470,  11,\n+   471, 472,  11, 197,   9, 473, 474,   9, 475,  11,   9, 470,  11, 471, 472,  11,\n+   197,   9, 473, 474,   9, 475,  11,   9, 470,  11, 197,   9, 476, 477, 478, 479,\n+    11, 480,   9, 481, 482, 483, 484,  11, 485,   9, 486,  11, 487, 160, 160, 160,\n+    32,  32,  32, 488,  32,  32, 489, 490, 491, 492,  32,  32,  32,  32,  32,  32,\n+   493,  11,  11,  11,  11,  11,  11,  11,  32,  32,  32,  27,  27,  27,  27,  27,\n+    32,  32,  32,  32,  32,  32,  32,  32,  47,  47,  47, 494, 495, 146, 146, 146,\n+    47,  47, 450,  32,  47,  47, 374, 496,  47,  47,  47,  47,  47,  47, 497, 160,\n+    47,  47,  47,  47,  47,  47, 450, 498,  47,  47,  47,  47, 356,  32,  32,  32,\n+     9,   9, 473,  11, 499, 306,  66,  66, 145, 145, 500, 501, 145, 145, 145, 145,\n+   145, 145, 502, 145, 145, 145, 145, 145,  47,  47,  47,  47,  47,  47,  47, 227,\n+   503, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 504,\n+   209, 209, 209, 209, 209, 209, 209, 209,   0,   0,   0,   0,   0,   0,   0,   0,\n@@ -5544,8 +5781,15 @@\n-     0,   0,1936,   0,1937,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1938,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1939,1940,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1941,1942,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,1944,1943,   0,1945,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,1946,1947,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-  1948,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n-     0,   0,   0,   0,   0,   0,1949,1950,1951,1952,1953,1954,1955,   0,   0,   0,\n+     0,1936,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1937,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1938,   0,1939,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1940,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1941,1942,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1943,1944,   0,   0,   0,   0,   0,   0,1945,   0,1946,   0,   0,\n+     0,   0,   0,   0,   0,   0,1947,   0,   0,1948,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1950,   0,1949,\n+  1951,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1953,1952,   0,1954,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1955,1956,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1957,   0,   0,   0,   0,   0,   0,   0,   0,1958,1961,1959,1965,1960,1962,1964,\n+  1963,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1967,1966,1968,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1969,1970,1971,1972,1973,1974,1975,   0,   0,   0,\n@@ -5553,1 +5797,1 @@\n-     0,   0,   0,1956,1957,1958,1960,1959,1961,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1976,1977,1978,1980,1979,1981,   0,   0,   0,   0,   0,   0,   0,\n@@ -5604,1 +5848,1 @@\n-  return u<1114112u?_hb_ucd_u8[5096+(((_hb_ucd_u8[1168+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n+  return u<1114112u?_hb_ucd_u8[5208+(((_hb_ucd_u8[1168+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n@@ -5609,1 +5853,1 @@\n-  return u<125259u?_hb_ucd_u8[7054+(((_hb_ucd_u8[6498+(((_hb_ucd_u8[6038+(((_hb_ucd_u8[5686+(((_hb_ucd_u8[5440+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n+  return u<125259u?_hb_ucd_u8[7206+(((_hb_ucd_u8[6638+(((_hb_ucd_u8[6162+(((_hb_ucd_u8[5802+(((_hb_ucd_u8[5556+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n@@ -5619,1 +5863,1 @@\n-  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[7946+(((_hb_ucd_u8[7714+(((_hb_ucd_u8[7618+(((_hb_ucd_b4(7554+_hb_ucd_u8,u>>1>>2>>3>>3))<<3)+((u>>1>>2>>3)&7u))])<<3)+((u>>1>>2)&7u))])<<2)+((u>>1)&3u))])<<1)+((u)&1u)]:0;\n+  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[8098+(((_hb_ucd_u8[7866+(((_hb_ucd_u8[7770+(((_hb_ucd_b4(7706+_hb_ucd_u8,u>>1>>2>>3>>3))<<3)+((u>>1>>2>>3)&7u))])<<3)+((u>>1>>2)&7u))])<<2)+((u>>1)&3u))])<<1)+((u)&1u)]:0;\n@@ -5624,1 +5868,1 @@\n-  return u<918016u?_hb_ucd_u8[11244+(((_hb_ucd_u8[10280+(((_hb_ucd_u8[9292+(((_hb_ucd_u8[8612+(((_hb_ucd_u8[8308+(((_hb_ucd_u8[8194+(u>>2>>2>>2>>3>>4)])<<4)+((u>>2>>2>>2>>3)&15u))])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:2;\n+  return u<918016u?_hb_ucd_u8[11464+(((_hb_ucd_u8[10472+(((_hb_ucd_u8[9452+(((_hb_ucd_u8[8764+(((_hb_ucd_u8[8460+(((_hb_ucd_u8[8346+(u>>2>>2>>2>>3>>4)])<<4)+((u>>2>>2>>2>>3)&15u))])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:2;\n@@ -5629,1 +5873,1 @@\n-  return u<195102u?_hb_ucd_u16[1608+(((_hb_ucd_u8[12586+(((_hb_ucd_u8[12204+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n+  return u<195102u?_hb_ucd_u16[1656+(((_hb_ucd_u8[12834+(((_hb_ucd_u8[12452+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ucd-table.hh","additions":3088,"deletions":2844,"binary":false,"changes":5932,"status":"modified"},{"patch":"@@ -10,2 +10,2 @@\n- * # Date: 2023-02-01, 02:22:54 GMT\n- * # © 2023 Unicode®, Inc.\n+ * # Date: 2024-05-01, 21:25:24 GMT\n+ * # © 2024 Unicode®, Inc.\n@@ -13,1 +13,1 @@\n- * # For terms of use, see https:\/\/www.unicode.org\/terms_of_use.html\n+ * # For terms of use and license, see https:\/\/www.unicode.org\/terms_of_use.html\n@@ -16,1 +16,1 @@\n- * # Used with Emoji Version 15.1 and subsequent minor revisions (if any)\n+ * # Used with Emoji Version 16.0 and subsequent minor revisions (if any)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-unicode-emoji-table.hh","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -461,0 +461,2 @@\n+                          const typename utf_t::codepoint_t *text,\n+                          unsigned text_len,\n@@ -467,1 +469,1 @@\n-                         start + utf_t::max_len,\n+                         text + text_len,\n@@ -473,1 +475,1 @@\n-                         start - utf_t::max_len,\n+                         text,\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-utf.hh","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+  static constexpr bool realloc_move = true;\n+\n@@ -54,1 +56,1 @@\n-  hb_vector_t (const Iterable &o) : hb_vector_t ()\n+  explicit hb_vector_t (const Iterable &o) : hb_vector_t ()\n@@ -56,4 +58,1 @@\n-    auto iter = hb_iter (o);\n-    if (iter.is_random_access_iterator || iter.has_fast_len)\n-      alloc (hb_len (iter), true);\n-    hb_copy (iter, *this);\n+    extend (o);\n@@ -63,1 +62,1 @@\n-    alloc (o.length, true);\n+    alloc_exact (o.length);\n@@ -69,1 +68,1 @@\n-    alloc (o.length, true);\n+    alloc_exact (o.length);\n@@ -75,1 +74,1 @@\n-    alloc (o.length, true);\n+    alloc_exact (o.length);\n@@ -79,1 +78,1 @@\n-  hb_vector_t (hb_vector_t &&o)\n+  hb_vector_t (hb_vector_t &&o) noexcept\n@@ -88,0 +87,29 @@\n+  template <typename Iterable,\n+            hb_requires (hb_is_iterable (Iterable))>\n+  void extend (const Iterable &o)\n+  {\n+    auto iter = hb_iter (o);\n+    if (iter.is_random_access_iterator || iter.has_fast_len)\n+      alloc (hb_len (iter), true);\n+    while (iter)\n+    {\n+      if (unlikely (!alloc (length + 1)))\n+        return;\n+      unsigned room = allocated - length;\n+      for (unsigned i = 0; i < room && iter; i++)\n+        push_has_room (*iter++);\n+    }\n+  }\n+  void extend (array_t o)\n+  {\n+    alloc (length + o.length);\n+    if (unlikely (in_error ())) return;\n+    copy_array (o);\n+  }\n+  void extend (c_array_t o)\n+  {\n+    alloc (length + o.length);\n+    if (unlikely (in_error ())) return;\n+    copy_array (o);\n+  }\n+\n@@ -123,1 +151,1 @@\n-  friend void swap (hb_vector_t& a, hb_vector_t& b)\n+  friend void swap (hb_vector_t& a, hb_vector_t& b) noexcept\n@@ -133,1 +161,1 @@\n-    alloc (o.length, true);\n+    alloc_exact (o.length);\n@@ -136,0 +164,1 @@\n+    length = 0;\n@@ -140,1 +169,1 @@\n-  hb_vector_t& operator = (hb_vector_t &&o)\n+  hb_vector_t& operator = (hb_vector_t &&o) noexcept\n@@ -219,0 +248,4 @@\n+    return push_has_room (std::forward<Args> (args)...);\n+  }\n+  template <typename... Args> Type *push_has_room (Args&&... args)\n+  {\n@@ -271,1 +304,1 @@\n-  \/* Specialization for hb_vector_t<hb_{vector,array}_t<U>> to speed up. *\/\n+  \/* Specialization for types that can be moved using realloc(). *\/\n@@ -273,2 +306,1 @@\n-            hb_enable_if (hb_is_same (T, hb_vector_t<typename T::item_t>) ||\n-                          hb_is_same (T, hb_array_t <typename T::item_t>))>\n+            hb_enable_if (T::realloc_move)>\n@@ -313,0 +345,9 @@\n+  template <typename T = Type,\n+            hb_enable_if (hb_is_trivially_copyable (T))>\n+  void\n+  copy_array (hb_array_t<Type> other)\n+  {\n+    assert ((int) (length + other.length) <= allocated);\n+    hb_memcpy ((void *) (arrayZ + length), (const void *) other.arrayZ, other.length * item_size);\n+    length += other.length;\n+  }\n@@ -318,7 +359,3 @@\n-    length = other.length;\n-    if (!HB_OPTIMIZE_SIZE_VAL && sizeof (T) >= sizeof (long long))\n-      \/* This runs faster because of alignment. *\/\n-      for (unsigned i = 0; i < length; i++)\n-        arrayZ[i] = other.arrayZ[i];\n-    else\n-       hb_memcpy ((void *) arrayZ, (const void *) other.arrayZ, length * item_size);\n+    assert ((int) (length + other.length) <= allocated);\n+    hb_memcpy ((void *) (arrayZ + length), (const void *) other.arrayZ, other.length * item_size);\n+    length += other.length;\n@@ -332,6 +369,4 @@\n-    length = 0;\n-    while (length < other.length)\n-    {\n-      length++;\n-      new (std::addressof (arrayZ[length - 1])) Type (other.arrayZ[length - 1]);\n-    }\n+    assert ((int) (length + other.length) <= allocated);\n+    for (unsigned i = 0; i < other.length; i++)\n+      new (std::addressof (arrayZ[length + i])) Type (other.arrayZ[i]);\n+    length += other.length;\n@@ -347,2 +382,2 @@\n-    length = 0;\n-    while (length < other.length)\n+    assert ((int) (length + other.length) <= allocated);\n+    for (unsigned i = 0; i < other.length; i++)\n@@ -350,3 +385,2 @@\n-      length++;\n-      new (std::addressof (arrayZ[length - 1])) Type ();\n-      arrayZ[length - 1] = other.arrayZ[length - 1];\n+      new (std::addressof (arrayZ[length + i])) Type ();\n+      arrayZ[length + i] = other.arrayZ[i];\n@@ -354,0 +388,1 @@\n+    length += other.length;\n@@ -434,0 +469,9 @@\n+  bool alloc_exact (unsigned int size)\n+  {\n+    return alloc (size, true);\n+  }\n+\n+  void clear ()\n+  {\n+    resize (0);\n+  }\n@@ -499,1 +543,1 @@\n-      alloc (size, true); \/* To force shrinking memory if needed. *\/\n+      alloc_exact (size); \/* To force shrinking memory if needed. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-vector.hh","additions":78,"deletions":34,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-#define HB_VERSION_MAJOR 8\n+#define HB_VERSION_MAJOR 10\n@@ -50,1 +50,1 @@\n-#define HB_VERSION_MINOR 2\n+#define HB_VERSION_MINOR 4\n@@ -56,1 +56,1 @@\n-#define HB_VERSION_MICRO 2\n+#define HB_VERSION_MICRO 0\n@@ -63,1 +63,1 @@\n-#define HB_VERSION_STRING \"8.2.2\"\n+#define HB_VERSION_STRING \"10.4.0\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-version.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+#pragma GCC diagnostic error   \"-Wcast-function-type-strict\"\n@@ -86,0 +87,1 @@\n+#pragma GCC diagnostic error   \"-Wstrict-flex-arrays\"\n@@ -132,0 +134,1 @@\n+#pragma GCC diagnostic ignored \"-Wdangling-pointer\" \/\/ Trigerred by hb_decycler_node_t().\n@@ -180,0 +183,5 @@\n+\/\/ https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/4619\n+#ifndef __STDC_FORMAT_MACROS\n+#define __STDC_FORMAT_MACROS 1\n+#endif\n+\n@@ -215,0 +223,6 @@\n+#ifndef PRId32\n+# define PRId32 \"d\"\n+# define PRIu32 \"u\"\n+# define PRIx32 \"x\"\n+#endif\n+\n@@ -271,1 +285,3 @@\n-#if defined(__GNUC__) && (__GNUC__ >= 3)\n+#if defined(__MINGW32__) && (__GNUC__ >= 3)\n+#define HB_PRINTF_FUNC(format_idx, arg_idx) __attribute__((__format__ (gnu_printf, format_idx, arg_idx)))\n+#elif defined(__GNUC__) && (__GNUC__ >= 3)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb.hh","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}