{"files":[{"patch":"@@ -55,1 +55,1 @@\n-instruct xLoadP(iRegPNoSp dst, memory mem)\n+instruct xLoadP(iRegPNoSp dst, memory mem, iRegPNoSp tmp)\n@@ -59,1 +59,1 @@\n-  effect(TEMP dst);\n+  effect(TEMP dst, TEMP tmp);\n@@ -68,1 +68,1 @@\n-    x_load_barrier(_masm, this, ref_addr, $dst$$Register, t0 \/* tmp *\/, barrier_data());\n+    x_load_barrier(_masm, this, ref_addr, $dst$$Register, $tmp$$Register \/* tmp *\/, barrier_data());\n@@ -74,1 +74,1 @@\n-instruct xCompareAndSwapP(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, rFlagsReg cr) %{\n+instruct xCompareAndSwapP(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -78,1 +78,1 @@\n-  effect(KILL cr, TEMP_DEF res);\n+  effect(TEMP_DEF res, TEMP tmp);\n@@ -89,5 +89,3 @@\n-               Assembler::relaxed \/* acquire *\/, Assembler::rl \/* release *\/, $res$$Register,\n-               true \/* result_as_bool *\/);\n-    __ beqz($res$$Register, failed);\n-    __ mv(t0, $oldval$$Register);\n-    __ bind(failed);\n+               Assembler::relaxed \/* acquire *\/, Assembler::rl \/* release *\/, $tmp$$Register);\n+    __ sub(t0, $tmp$$Register, $oldval$$Register);\n+    __ seqz($res$$Register, t0);\n@@ -96,4 +94,4 @@\n-      __ ld(t1, Address(xthread, XThreadLocalData::address_bad_mask_offset()), t1 \/* tmp *\/);\n-      __ andr(t1, t1, t0);\n-      __ beqz(t1, good);\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n+      __ ld(t0, Address(xthread, XThreadLocalData::address_bad_mask_offset()));\n+      __ andr(t0, t0, $tmp$$Register);\n+      __ beqz(t0, good);\n+      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $tmp$$Register \/* ref *\/, $res$$Register \/* tmp *\/);\n@@ -110,1 +108,1 @@\n-instruct xCompareAndSwapPAcq(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, rFlagsReg cr) %{\n+instruct xCompareAndSwapPAcq(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -114,1 +112,1 @@\n-  effect(KILL cr, TEMP_DEF res);\n+  effect(TEMP_DEF res, TEMP tmp);\n@@ -125,5 +123,3 @@\n-               Assembler::aq \/* acquire *\/, Assembler::rl \/* release *\/, $res$$Register,\n-               true \/* result_as_bool *\/);\n-    __ beqz($res$$Register, failed);\n-    __ mv(t0, $oldval$$Register);\n-    __ bind(failed);\n+               Assembler::aq \/* acquire *\/, Assembler::rl \/* release *\/, $tmp$$Register);\n+    __ sub(t0, $tmp$$Register, $oldval$$Register);\n+    __ seqz($res$$Register, t0);\n@@ -132,4 +128,4 @@\n-      __ ld(t1, Address(xthread, XThreadLocalData::address_bad_mask_offset()), t1 \/* tmp *\/);\n-      __ andr(t1, t1, t0);\n-      __ beqz(t1, good);\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n+      __ ld(t0, Address(xthread, XThreadLocalData::address_bad_mask_offset()));\n+      __ andr(t0, t0, $tmp$$Register);\n+      __ beqz(t0, good);\n+      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $tmp$$Register \/* ref *\/, $res$$Register \/* tmp *\/);\n@@ -146,1 +142,1 @@\n-instruct xCompareAndExchangeP(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval) %{\n+instruct xCompareAndExchangeP(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -149,1 +145,1 @@\n-  effect(TEMP_DEF res);\n+  effect(TEMP_DEF res, TEMP tmp);\n@@ -164,1 +160,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n+      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, $tmp$$Register \/* tmp *\/);\n@@ -174,1 +170,1 @@\n-instruct xCompareAndExchangePAcq(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval) %{\n+instruct xCompareAndExchangePAcq(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -177,1 +173,1 @@\n-  effect(TEMP_DEF res);\n+  effect(TEMP_DEF res, TEMP tmp);\n@@ -192,1 +188,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n+      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, $tmp$$Register \/* tmp *\/);\n@@ -202,1 +198,1 @@\n-instruct xGetAndSetP(indirect mem, iRegP newv, iRegPNoSp prev, rFlagsReg cr) %{\n+instruct xGetAndSetP(indirect mem, iRegP newv, iRegPNoSp prev, iRegPNoSp tmp) %{\n@@ -205,1 +201,1 @@\n-  effect(TEMP_DEF prev, KILL cr);\n+  effect(TEMP_DEF prev, TEMP tmp);\n@@ -213,1 +209,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n+    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, $tmp$$Register \/* tmp *\/, barrier_data());\n@@ -219,1 +215,1 @@\n-instruct xGetAndSetPAcq(indirect mem, iRegP newv, iRegPNoSp prev, rFlagsReg cr) %{\n+instruct xGetAndSetPAcq(indirect mem, iRegP newv, iRegPNoSp prev, iRegPNoSp tmp) %{\n@@ -222,1 +218,1 @@\n-  effect(TEMP_DEF prev, KILL cr);\n+  effect(TEMP_DEF prev, TEMP tmp);\n@@ -230,1 +226,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n+    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, $tmp$$Register \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/x\/x_riscv.ad","additions":33,"deletions":37,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    z_color(_masm, node, rnew_zpointer, rnew_zaddress, t0);\n+    z_color(_masm, node, rnew_zpointer, rnew_zaddress, tmp);\n@@ -93,1 +93,1 @@\n-instruct zLoadP(iRegPNoSp dst, memory mem)\n+instruct zLoadP(iRegPNoSp dst, memory mem, iRegPNoSp tmp)\n@@ -97,1 +97,1 @@\n-  effect(TEMP dst);\n+  effect(TEMP dst, TEMP tmp);\n@@ -106,1 +106,1 @@\n-    z_load_barrier(_masm, this, ref_addr, $dst$$Register, t0);\n+    z_load_barrier(_masm, this, ref_addr, $dst$$Register, $tmp$$Register);\n@@ -113,1 +113,1 @@\n-instruct zStoreP(memory mem, iRegP src, iRegPNoSp tmp, rFlagsReg cr)\n+instruct zStoreP(memory mem, iRegP src, iRegPNoSp tmp1, iRegPNoSp tmp2)\n@@ -117,1 +117,1 @@\n-  effect(TEMP tmp, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2);\n@@ -123,2 +123,2 @@\n-    z_store_barrier(_masm, this, ref_addr, $src$$Register, $tmp$$Register, t1, false \/* is_atomic *\/);\n-    __ sd($tmp$$Register, ref_addr);\n+    z_store_barrier(_masm, this, ref_addr, $src$$Register, $tmp1$$Register, $tmp2$$Register, false \/* is_atomic *\/);\n+    __ sd($tmp1$$Register, ref_addr);\n@@ -129,1 +129,2 @@\n-instruct zCompareAndSwapP(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, rFlagsReg cr) %{\n+instruct zCompareAndSwapP(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval,\n+                          iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, iRegPNoSp tmp1) %{\n@@ -133,1 +134,1 @@\n-  effect(TEMP oldval_tmp, TEMP newval_tmp, KILL cr, TEMP_DEF res);\n+  effect(TEMP oldval_tmp, TEMP newval_tmp, TEMP tmp1, TEMP_DEF res);\n@@ -143,2 +144,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n+    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n+    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n@@ -151,1 +152,2 @@\n-instruct zCompareAndSwapPAcq(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, rFlagsReg cr) %{\n+instruct zCompareAndSwapPAcq(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval,\n+                             iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, iRegPNoSp tmp1) %{\n@@ -155,1 +157,1 @@\n-  effect(TEMP oldval_tmp, TEMP newval_tmp, KILL cr, TEMP_DEF res);\n+  effect(TEMP oldval_tmp, TEMP newval_tmp, TEMP tmp1, TEMP_DEF res);\n@@ -165,2 +167,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n+    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n+    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n@@ -173,1 +175,2 @@\n-instruct zCompareAndExchangeP(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, rFlagsReg cr) %{\n+instruct zCompareAndExchangeP(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval,\n+                              iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, iRegPNoSp tmp1) %{\n@@ -176,1 +179,1 @@\n-  effect(TEMP oldval_tmp, TEMP newval_tmp, KILL cr, TEMP_DEF res);\n+  effect(TEMP oldval_tmp, TEMP newval_tmp, TEMP tmp1, TEMP_DEF res);\n@@ -185,2 +188,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n+    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n+    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n@@ -194,1 +197,2 @@\n-instruct zCompareAndExchangePAcq(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, rFlagsReg cr) %{\n+instruct zCompareAndExchangePAcq(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval,\n+                                 iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, iRegPNoSp tmp1) %{\n@@ -197,1 +201,1 @@\n-  effect(TEMP oldval_tmp, TEMP newval_tmp, KILL cr, TEMP_DEF res);\n+  effect(TEMP oldval_tmp, TEMP newval_tmp, TEMP tmp1, TEMP_DEF res);\n@@ -206,2 +210,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n+    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n+    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n@@ -215,1 +219,1 @@\n-instruct zGetAndSetP(indirect mem, iRegP newv, iRegPNoSp prev, rFlagsReg cr) %{\n+instruct zGetAndSetP(indirect mem, iRegP newv, iRegPNoSp prev, iRegPNoSp tmp) %{\n@@ -218,1 +222,1 @@\n-  effect(TEMP_DEF prev, KILL cr);\n+  effect(TEMP_DEF prev, TEMP tmp);\n@@ -225,1 +229,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, t1, true \/* is_atomic *\/);\n+    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, $tmp$$Register, true \/* is_atomic *\/);\n@@ -233,1 +237,1 @@\n-instruct zGetAndSetPAcq(indirect mem, iRegP newv, iRegPNoSp prev, rFlagsReg cr) %{\n+instruct zGetAndSetPAcq(indirect mem, iRegP newv, iRegPNoSp prev, iRegPNoSp tmp) %{\n@@ -236,1 +240,1 @@\n-  effect(TEMP_DEF prev, KILL cr);\n+  effect(TEMP_DEF prev, TEMP tmp);\n@@ -243,1 +247,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, t1, true \/* is_atomic *\/);\n+    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, $tmp$$Register, true \/* is_atomic *\/);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/z_riscv.ad","additions":34,"deletions":30,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -853,1 +853,1 @@\n-      cmpxchg_obj_header(swap_reg, lock_reg, obj_reg, t0, count, \/*fallthrough*\/nullptr);\n+      cmpxchg_obj_header(swap_reg, lock_reg, obj_reg, tmp, count, \/*fallthrough*\/nullptr);\n@@ -967,1 +967,1 @@\n-      cmpxchg_obj_header(swap_reg, header_reg, obj_reg, t0, count, \/*fallthrough*\/nullptr);\n+      cmpxchg_obj_header(swap_reg, header_reg, obj_reg, tmp_reg, count, \/*fallthrough*\/nullptr);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2523,3 +2523,3 @@\n-  assert_different_registers(addr, tmp);\n-  assert_different_registers(newv, tmp);\n-  assert_different_registers(oldv, tmp);\n+  assert_different_registers(addr, tmp, t0);\n+  assert_different_registers(newv, tmp, t0);\n+  assert_different_registers(oldv, tmp, t0);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1689,1 +1689,1 @@\n-      __ cmpxchg_obj_header(x10, lock_reg, obj_reg, t0, count, \/*fallthrough*\/nullptr);\n+      __ cmpxchg_obj_header(x10, lock_reg, obj_reg, lock_tmp, count, \/*fallthrough*\/nullptr);\n@@ -1829,1 +1829,1 @@\n-      __ cmpxchg_obj_header(x10, old_hdr, obj_reg, t0, count, &slow_path_unlock);\n+      __ cmpxchg_obj_header(x10, old_hdr, obj_reg, lock_tmp, count, &slow_path_unlock);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}