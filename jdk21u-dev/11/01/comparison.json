{"files":[{"patch":"@@ -64,0 +64,1 @@\n+  { Bad,             T_ARRAY,      \"interfaces:\",   false, Node::NotAMachineReg, relocInfo::none          },  \/\/ Interfaces\n@@ -123,2 +124,2 @@\n-const TypePtr::InterfaceSet* TypeAryPtr::_array_interfaces = nullptr;\n-const TypePtr::InterfaceSet* TypeAryKlassPtr::_array_interfaces = nullptr;\n+const TypeInterfaces* TypeAryPtr::_array_interfaces = nullptr;\n+const TypeInterfaces* TypeAryKlassPtr::_array_interfaces = nullptr;\n@@ -574,1 +575,1 @@\n-  TypeAryPtr::_array_interfaces = new TypePtr::InterfaceSet(&array_interfaces);\n+  TypeAryPtr::_array_interfaces = TypeInterfaces::make(&array_interfaces);\n@@ -3255,2 +3256,2 @@\n-TypePtr::InterfaceSet::InterfaceSet()\n-        : _list(Compile::current()->type_arena(), 0, 0, nullptr),\n+TypeInterfaces::TypeInterfaces()\n+        : Type(Interfaces), _list(Compile::current()->type_arena(), 0, 0, nullptr),\n@@ -3261,2 +3262,2 @@\n-TypePtr::InterfaceSet::InterfaceSet(GrowableArray<ciInstanceKlass*>* interfaces)\n-        : _list(Compile::current()->type_arena(), interfaces->length(), 0, nullptr),\n+TypeInterfaces::TypeInterfaces(GrowableArray<ciInstanceKlass*>* interfaces)\n+        : Type(Interfaces), _list(Compile::current()->type_arena(), interfaces->length(), 0, nullptr),\n@@ -3270,1 +3271,6 @@\n-void TypePtr::InterfaceSet::initialize() {\n+const TypeInterfaces* TypeInterfaces::make(GrowableArray<ciInstanceKlass*>* interfaces) {\n+  TypeInterfaces* result = (interfaces == nullptr) ? new TypeInterfaces() : new TypeInterfaces(interfaces);\n+  return (const TypeInterfaces*)result->hashcons();\n+}\n+\n+void TypeInterfaces::initialize() {\n@@ -3276,1 +3282,1 @@\n-int TypePtr::InterfaceSet::compare(ciKlass* const& k1, ciKlass* const& k2) {\n+int TypeInterfaces::compare(ciInstanceKlass* const& k1, ciInstanceKlass* const& k2) {\n@@ -3285,1 +3291,1 @@\n-void TypePtr::InterfaceSet::add(ciKlass* interface) {\n+void TypeInterfaces::add(ciInstanceKlass* interface) {\n@@ -3291,7 +3297,3 @@\n-void TypePtr::InterfaceSet::raw_add(ciKlass* interface) {\n-  assert(interface->is_interface(), \"for interfaces only\");\n-  _list.push(interface);\n-}\n-\n-bool TypePtr::InterfaceSet::eq(const InterfaceSet& other) const {\n-  if (_list.length() != other._list.length()) {\n+bool TypeInterfaces::eq(const Type* t) const {\n+  const TypeInterfaces* other = (const TypeInterfaces*)t;\n+  if (_list.length() != other->_list.length()) {\n@@ -3302,1 +3304,1 @@\n-    ciKlass* k2 = other._list.at(i);\n+    ciKlass* k2 = other->_list.at(i);\n@@ -3310,1 +3312,1 @@\n-bool TypePtr::InterfaceSet::eq(ciInstanceKlass* k) const {\n+bool TypeInterfaces::eq(ciInstanceKlass* k) const {\n@@ -3312,1 +3314,1 @@\n-  GrowableArray<ciInstanceKlass *>* interfaces = k->as_instance_klass()->transitive_interfaces();\n+  GrowableArray<ciInstanceKlass *>* interfaces = k->transitive_interfaces();\n@@ -3318,1 +3320,1 @@\n-    _list.find_sorted<ciKlass*, compare>(interfaces->at(i), found);\n+    _list.find_sorted<ciInstanceKlass*, compare>(interfaces->at(i), found);\n@@ -3327,1 +3329,1 @@\n-uint TypePtr::InterfaceSet::hash() const {\n+uint TypeInterfaces::hash() const {\n@@ -3332,1 +3334,5 @@\n-void TypePtr::InterfaceSet::compute_hash() {\n+const Type* TypeInterfaces::xdual() const {\n+  return this;\n+}\n+\n+void TypeInterfaces::compute_hash() {\n@@ -3341,1 +3347,1 @@\n-static int compare_interfaces(ciKlass** k1, ciKlass** k2) {\n+static int compare_interfaces(ciInstanceKlass** k1, ciInstanceKlass** k2) {\n@@ -3345,1 +3351,1 @@\n-void TypePtr::InterfaceSet::dump(outputStream* st) const {\n+void TypeInterfaces::dump(outputStream* st) const {\n@@ -3351,1 +3357,1 @@\n-  GrowableArray<ciKlass*> interfaces;\n+  GrowableArray<ciInstanceKlass*> interfaces;\n@@ -3366,1 +3372,1 @@\n-void TypePtr::InterfaceSet::verify() const {\n+void TypeInterfaces::verify() const {\n@@ -3368,2 +3374,2 @@\n-    ciKlass* k1 = _list.at(i-1);\n-    ciKlass* k2 = _list.at(i);\n+    ciInstanceKlass* k1 = _list.at(i-1);\n+    ciInstanceKlass* k2 = _list.at(i);\n@@ -3376,2 +3382,2 @@\n-TypePtr::InterfaceSet TypeOopPtr::InterfaceSet::union_with(const InterfaceSet& other) const {\n-  InterfaceSet result;\n+const TypeInterfaces* TypeInterfaces::union_with(const TypeInterfaces* other) const {\n+  GrowableArray<ciInstanceKlass*> result_list;\n@@ -3380,1 +3386,1 @@\n-  while (i < _list.length() || j < other._list.length()) {\n+  while (i < _list.length() || j < other->_list.length()) {\n@@ -3382,3 +3388,3 @@\n-           (j >= other._list.length() ||\n-            compare(_list.at(i), other._list.at(j)) < 0)) {\n-      result.raw_add(_list.at(i));\n+           (j >= other->_list.length() ||\n+            compare(_list.at(i), other->_list.at(j)) < 0)) {\n+      result_list.push(_list.at(i));\n@@ -3387,1 +3393,1 @@\n-    while (j < other._list.length() &&\n+    while (j < other->_list.length() &&\n@@ -3389,2 +3395,2 @@\n-            compare(other._list.at(j), _list.at(i)) < 0)) {\n-      result.raw_add(other._list.at(j));\n+            compare(other->_list.at(j), _list.at(i)) < 0)) {\n+      result_list.push(other->_list.at(j));\n@@ -3394,3 +3400,3 @@\n-        j < other._list.length() &&\n-        _list.at(i) == other._list.at(j)) {\n-      result.raw_add(_list.at(i));\n+        j < other->_list.length() &&\n+        _list.at(i) == other->_list.at(j)) {\n+      result_list.push(_list.at(i));\n@@ -3401,1 +3407,1 @@\n-  result.initialize();\n+  const TypeInterfaces* result = TypeInterfaces::make(&result_list);\n@@ -3403,1 +3409,1 @@\n-  result.verify();\n+  result->verify();\n@@ -3405,1 +3411,1 @@\n-    assert(result._list.contains(_list.at(i)), \"missing\");\n+    assert(result->_list.contains(_list.at(i)), \"missing\");\n@@ -3407,2 +3413,2 @@\n-  for (int i = 0; i < other._list.length(); i++) {\n-    assert(result._list.contains(other._list.at(i)), \"missing\");\n+  for (int i = 0; i < other->_list.length(); i++) {\n+    assert(result->_list.contains(other->_list.at(i)), \"missing\");\n@@ -3410,2 +3416,2 @@\n-  for (int i = 0; i < result._list.length(); i++) {\n-    assert(_list.contains(result._list.at(i)) || other._list.contains(result._list.at(i)), \"missing\");\n+  for (int i = 0; i < result->_list.length(); i++) {\n+    assert(_list.contains(result->_list.at(i)) || other->_list.contains(result->_list.at(i)), \"missing\");\n@@ -3417,2 +3423,2 @@\n-TypePtr::InterfaceSet TypeOopPtr::InterfaceSet::intersection_with(const InterfaceSet& other) const {\n-  InterfaceSet result;\n+const TypeInterfaces* TypeInterfaces::intersection_with(const TypeInterfaces* other) const {\n+  GrowableArray<ciInstanceKlass*> result_list;\n@@ -3421,1 +3427,1 @@\n-  while (i < _list.length() || j < other._list.length()) {\n+  while (i < _list.length() || j < other->_list.length()) {\n@@ -3423,2 +3429,2 @@\n-           (j >= other._list.length() ||\n-            compare(_list.at(i), other._list.at(j)) < 0)) {\n+           (j >= other->_list.length() ||\n+            compare(_list.at(i), other->_list.at(j)) < 0)) {\n@@ -3427,1 +3433,1 @@\n-    while (j < other._list.length() &&\n+    while (j < other->_list.length() &&\n@@ -3429,1 +3435,1 @@\n-            compare(other._list.at(j), _list.at(i)) < 0)) {\n+            compare(other->_list.at(j), _list.at(i)) < 0)) {\n@@ -3433,3 +3439,3 @@\n-        j < other._list.length() &&\n-        _list.at(i) == other._list.at(j)) {\n-      result.raw_add(_list.at(i));\n+        j < other->_list.length() &&\n+        _list.at(i) == other->_list.at(j)) {\n+      result_list.push(_list.at(i));\n@@ -3440,1 +3446,1 @@\n-  result.initialize();\n+  const TypeInterfaces* result = TypeInterfaces::make(&result_list);\n@@ -3442,1 +3448,1 @@\n-  result.verify();\n+  result->verify();\n@@ -3444,1 +3450,1 @@\n-    assert(!other._list.contains(_list.at(i)) || result._list.contains(_list.at(i)), \"missing\");\n+    assert(!other->_list.contains(_list.at(i)) || result->_list.contains(_list.at(i)), \"missing\");\n@@ -3446,2 +3452,2 @@\n-  for (int i = 0; i < other._list.length(); i++) {\n-    assert(!_list.contains(other._list.at(i)) || result._list.contains(other._list.at(i)), \"missing\");\n+  for (int i = 0; i < other->_list.length(); i++) {\n+    assert(!_list.contains(other->_list.at(i)) || result->_list.contains(other->_list.at(i)), \"missing\");\n@@ -3449,2 +3455,2 @@\n-  for (int i = 0; i < result._list.length(); i++) {\n-    assert(_list.contains(result._list.at(i)) && other._list.contains(result._list.at(i)), \"missing\");\n+  for (int i = 0; i < result->_list.length(); i++) {\n+    assert(_list.contains(result->_list.at(i)) && other->_list.contains(result->_list.at(i)), \"missing\");\n@@ -3457,1 +3463,1 @@\n-ciKlass* TypePtr::InterfaceSet::exact_klass() const {\n+ciInstanceKlass* TypeInterfaces::exact_klass() const {\n@@ -3462,1 +3468,1 @@\n-void TypePtr::InterfaceSet::compute_exact_klass() {\n+void TypeInterfaces::compute_exact_klass() {\n@@ -3467,1 +3473,1 @@\n-  ciKlass* res = nullptr;\n+  ciInstanceKlass* res = nullptr;\n@@ -3469,1 +3475,1 @@\n-    ciInstanceKlass* interface = _list.at(i)->as_instance_klass();\n+    ciInstanceKlass* interface = _list.at(i);\n@@ -3479,1 +3485,1 @@\n-void TypePtr::InterfaceSet::verify_is_loaded() const {\n+void TypeInterfaces::verify_is_loaded() const {\n@@ -3487,0 +3493,11 @@\n+\/\/ Can't be implemented because there's no way to know if the type is above or below the center line.\n+const Type* TypeInterfaces::xmeet(const Type* t) const {\n+  ShouldNotReachHere();\n+  return Type::xmeet(t);\n+}\n+\n+bool TypeInterfaces::singleton(void) const {\n+  ShouldNotReachHere();\n+  return Type::singleton();\n+}\n+\n@@ -3488,1 +3505,1 @@\n-TypeOopPtr::TypeOopPtr(TYPES t, PTR ptr, ciKlass* k, const InterfaceSet& interfaces, bool xk, ciObject* o, int offset,\n+TypeOopPtr::TypeOopPtr(TYPES t, PTR ptr, ciKlass* k, const TypeInterfaces* interfaces, bool xk, ciObject* o, int offset,\n@@ -3500,1 +3517,1 @@\n-    interfaces.verify_is_loaded();\n+    interfaces->verify_is_loaded();\n@@ -3577,1 +3594,2 @@\n-  return (TypeOopPtr*)(new TypeOopPtr(OopPtr, ptr, k, InterfaceSet(), xk, o, offset, instance_id, speculative, inline_depth))->hashcons();\n+  const TypeInterfaces* interfaces = TypeInterfaces::make();\n+  return (TypeOopPtr*)(new TypeOopPtr(OopPtr, ptr, k, interfaces, xk, o, offset, instance_id, speculative, inline_depth))->hashcons();\n@@ -3722,1 +3740,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, true, false, interface_handling);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(klass, true, true, false, interface_handling);\n@@ -3955,1 +3973,1 @@\n-TypePtr::InterfaceSet TypeOopPtr::meet_interfaces(const TypeOopPtr* other) const {\n+const TypeInterfaces* TypeOopPtr::meet_interfaces(const TypeOopPtr* other) const {\n@@ -3957,1 +3975,1 @@\n-    return _interfaces.union_with(other->_interfaces);\n+    return _interfaces->union_with(other->_interfaces);\n@@ -3963,1 +3981,1 @@\n-  return _interfaces.intersection_with(other->_interfaces);\n+  return _interfaces->intersection_with(other->_interfaces);\n@@ -3992,1 +4010,1 @@\n-  if (_interfaces.empty()) {\n+  if (_interfaces->empty()) {\n@@ -3996,1 +4014,1 @@\n-    if (_interfaces.eq(_klass->as_instance_klass())) {\n+    if (_interfaces->eq(_klass->as_instance_klass())) {\n@@ -4001,1 +4019,1 @@\n-  return _interfaces.exact_klass();\n+  return _interfaces->exact_klass();\n@@ -4005,1 +4023,1 @@\n-TypeInstPtr::TypeInstPtr(PTR ptr, ciKlass* k, const InterfaceSet& interfaces, bool xk, ciObject* o, int off,\n+TypeInstPtr::TypeInstPtr(PTR ptr, ciKlass* k, const TypeInterfaces* interfaces, bool xk, ciObject* o, int off,\n@@ -4017,1 +4035,1 @@\n-                                     const InterfaceSet& interfaces,\n+                                     const TypeInterfaces* interfaces,\n@@ -4049,1 +4067,1 @@\n-TypePtr::InterfaceSet TypePtr::interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling) {\n+const TypeInterfaces* TypePtr::interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling) {\n@@ -4055,1 +4073,1 @@\n-        InterfaceSet interfaces;\n+        const TypeInterfaces* interfaces = TypeInterfaces::make();\n@@ -4059,1 +4077,1 @@\n-      InterfaceSet interfaces(k_interfaces);\n+      const TypeInterfaces* interfaces = TypeInterfaces::make(k_interfaces);\n@@ -4068,1 +4086,1 @@\n-    InterfaceSet interfaces;\n+    const TypeInterfaces* interfaces = TypeInterfaces::make();\n@@ -4079,1 +4097,1 @@\n-  return *TypeAryPtr::_array_interfaces;\n+  return TypeAryPtr::_array_interfaces;\n@@ -4133,1 +4151,1 @@\n-const TypeInstPtr *TypeInstPtr::xmeet_unloaded(const TypeInstPtr *tinst, const InterfaceSet& interfaces) const {\n+const TypeInstPtr *TypeInstPtr::xmeet_unloaded(const TypeInstPtr *tinst, const TypeInterfaces* interfaces) const {\n@@ -4290,1 +4308,1 @@\n-    InterfaceSet interfaces = meet_interfaces(tinst);\n+    const TypeInterfaces* interfaces = meet_interfaces(tinst);\n@@ -4350,2 +4368,2 @@\n-template<class T> TypePtr::MeetResult TypePtr::meet_instptr(PTR& ptr, InterfaceSet& interfaces, const T* this_type, const T* other_type,\n-                      ciKlass*& res_klass, bool& res_xk) {\n+template<class T> TypePtr::MeetResult TypePtr::meet_instptr(PTR& ptr, const TypeInterfaces*& interfaces, const T* this_type, const T* other_type,\n+                                                            ciKlass*& res_klass, bool& res_xk) {\n@@ -4358,2 +4376,2 @@\n-  InterfaceSet this_interfaces = this_type->interfaces();\n-  InterfaceSet other_interfaces = other_type->interfaces();\n+  const TypeInterfaces* this_interfaces = this_type->interfaces();\n+  const TypeInterfaces* other_interfaces = other_type->interfaces();\n@@ -4444,1 +4462,1 @@\n-  interfaces = this_interfaces.intersection_with(other_interfaces);\n+  interfaces = this_interfaces->intersection_with(other_interfaces);\n@@ -4480,1 +4498,1 @@\n-    _interfaces.eq(p->_interfaces) &&\n+    _interfaces->eq(p->_interfaces) &&\n@@ -4487,1 +4505,1 @@\n-  return klass()->hash() + TypeOopPtr::hash() + _interfaces.hash();\n+  return klass()->hash() + TypeOopPtr::hash() + _interfaces->hash();\n@@ -4510,1 +4528,1 @@\n-  _interfaces.dump(st);\n+  _interfaces->dump(st);\n@@ -4594,1 +4612,1 @@\n-    if (_interfaces.eq(ik)) {\n+    if (_interfaces->eq(ik)) {\n@@ -4611,1 +4629,1 @@\n-  if (other->klass() == ciEnv::current()->Object_klass() && other->_interfaces.empty()) {\n+  if (other->klass() == ciEnv::current()->Object_klass() && other->_interfaces->empty()) {\n@@ -4616,1 +4634,1 @@\n-         (!this_xk || this_one->_interfaces.contains(other->_interfaces));\n+         (!this_xk || this_one->_interfaces->contains(other->_interfaces));\n@@ -4626,1 +4644,1 @@\n-  if (other->klass() == ciEnv::current()->Object_klass() && other->_interfaces.empty()) {\n+  if (other->klass() == ciEnv::current()->Object_klass() && other->_interfaces->empty()) {\n@@ -4631,1 +4649,1 @@\n-    return other->klass() == ciEnv::current()->Object_klass() && this_one->_interfaces.contains(other->_interfaces);\n+    return other->klass() == ciEnv::current()->Object_klass() && this_one->_interfaces->contains(other->_interfaces);\n@@ -4974,3 +4992,3 @@\n-    InterfaceSet interfaces = meet_interfaces(tp);\n-    InterfaceSet tp_interfaces = tp->_interfaces;\n-    InterfaceSet this_interfaces = _interfaces;\n+    const TypeInterfaces* interfaces = meet_interfaces(tp);\n+    const TypeInterfaces* tp_interfaces = tp->_interfaces;\n+    const TypeInterfaces* this_interfaces = _interfaces;\n@@ -4984,1 +5002,1 @@\n-      if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.contains(tp_interfaces) && !tp->klass_is_exact()) {\n+      if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces->contains(tp_interfaces) && !tp->klass_is_exact()) {\n@@ -4990,1 +5008,1 @@\n-        interfaces = this_interfaces.intersection_with(tp_interfaces);\n+        interfaces = this_interfaces->intersection_with(tp_interfaces);\n@@ -5003,1 +5021,1 @@\n-        if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.contains(tp_interfaces) && !tp->klass_is_exact()) {\n+        if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces->contains(tp_interfaces) && !tp->klass_is_exact()) {\n@@ -5017,1 +5035,1 @@\n-      interfaces = this_interfaces.intersection_with(tp_interfaces);\n+      interfaces = this_interfaces->intersection_with(tp_interfaces);\n@@ -5131,1 +5149,1 @@\n-  _interfaces.dump(st);\n+  _interfaces->dump(st);\n@@ -5581,1 +5599,1 @@\n-    const InterfaceSet interfaces = TypePtr::interfaces(klass, true, true, false, interface_handling);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(klass, true, true, false, interface_handling);\n@@ -5589,1 +5607,1 @@\n-TypeKlassPtr::TypeKlassPtr(TYPES t, PTR ptr, ciKlass* klass, const InterfaceSet& interfaces, int offset)\n+TypeKlassPtr::TypeKlassPtr(TYPES t, PTR ptr, ciKlass* klass, const TypeInterfaces* interfaces, int offset)\n@@ -5598,1 +5616,1 @@\n-  if (_interfaces.empty()) {\n+  if (_interfaces->empty()) {\n@@ -5602,1 +5620,1 @@\n-    if (_interfaces.eq(_klass->as_instance_klass())) {\n+    if (_interfaces->eq(_klass->as_instance_klass())) {\n@@ -5607,1 +5625,1 @@\n-  return _interfaces.exact_klass();\n+  return _interfaces->exact_klass();\n@@ -5615,1 +5633,1 @@\n-    _interfaces.eq(p->_interfaces) &&\n+    _interfaces->eq(p->_interfaces) &&\n@@ -5622,1 +5640,1 @@\n-  return TypePtr::hash() + _interfaces.hash();\n+  return TypePtr::hash() + _interfaces->hash();\n@@ -5649,1 +5667,1 @@\n-TypePtr::InterfaceSet TypeKlassPtr::meet_interfaces(const TypeKlassPtr* other) const {\n+const TypeInterfaces* TypeKlassPtr::meet_interfaces(const TypeKlassPtr* other) const {\n@@ -5651,1 +5669,1 @@\n-    return _interfaces.union_with(other->_interfaces);\n+    return _interfaces->union_with(other->_interfaces);\n@@ -5657,1 +5675,1 @@\n-  return _interfaces.intersection_with(other->_interfaces);\n+  return _interfaces->intersection_with(other->_interfaces);\n@@ -5697,1 +5715,1 @@\n-      _interfaces.dump(st);\n+      _interfaces->dump(st);\n@@ -5738,1 +5756,1 @@\n-const TypeInstKlassPtr *TypeInstKlassPtr::make(PTR ptr, ciKlass* k, const InterfaceSet& interfaces, int offset) {\n+const TypeInstKlassPtr *TypeInstKlassPtr::make(PTR ptr, ciKlass* k, const TypeInterfaces* interfaces, int offset) {\n@@ -5790,1 +5808,1 @@\n-  TypePtr::InterfaceSet interfaces = _interfaces;\n+  const TypeInterfaces* interfaces = _interfaces;\n@@ -5799,1 +5817,1 @@\n-        if (_interfaces.eq(sub)) {\n+        if (_interfaces->eq(sub)) {\n@@ -5883,1 +5901,1 @@\n-    InterfaceSet interfaces = meet_interfaces(tkls);\n+    const TypeInterfaces* interfaces = meet_interfaces(tkls);\n@@ -5906,3 +5924,3 @@\n-    InterfaceSet interfaces = meet_interfaces(tp);\n-    InterfaceSet tp_interfaces = tp->_interfaces;\n-    InterfaceSet this_interfaces = _interfaces;\n+    const TypeInterfaces* interfaces = meet_interfaces(tp);\n+    const TypeInterfaces* tp_interfaces = tp->_interfaces;\n+    const TypeInterfaces* this_interfaces = _interfaces;\n@@ -5916,1 +5934,1 @@\n-      if (klass()->equals(ciEnv::current()->Object_klass()) && tp_interfaces.contains(this_interfaces) && !klass_is_exact()) {\n+      if (klass()->equals(ciEnv::current()->Object_klass()) && tp_interfaces->contains(this_interfaces) && !klass_is_exact()) {\n@@ -5921,1 +5939,1 @@\n-        interfaces = _interfaces.intersection_with(tp->_interfaces);\n+        interfaces = _interfaces->intersection_with(tp->_interfaces);\n@@ -5934,1 +5952,1 @@\n-        if (klass()->equals(ciEnv::current()->Object_klass()) && tp_interfaces.contains(this_interfaces) && !klass_is_exact()) {\n+        if (klass()->equals(ciEnv::current()->Object_klass()) && tp_interfaces->contains(this_interfaces) && !klass_is_exact()) {\n@@ -5944,1 +5962,1 @@\n-      interfaces = this_interfaces.intersection_with(tp_interfaces);\n+      interfaces = this_interfaces->intersection_with(tp_interfaces);\n@@ -5973,1 +5991,1 @@\n-  if (other->klass()->equals(ciEnv::current()->Object_klass()) && other->_interfaces.empty()) {\n+  if (other->klass()->equals(ciEnv::current()->Object_klass()) && other->_interfaces->empty()) {\n@@ -5977,1 +5995,1 @@\n-  return this_one->_klass->is_subtype_of(other->_klass) && this_one->_interfaces.contains(other->_interfaces);\n+  return this_one->_klass->is_subtype_of(other->_klass) && this_one->_interfaces->contains(other->_interfaces);\n@@ -5992,1 +6010,1 @@\n-  return this_one->_klass->equals(other->_klass) && this_one->_interfaces.eq(other->_interfaces);\n+  return this_one->_klass->equals(other->_klass) && this_one->_interfaces->eq(other->_interfaces);\n@@ -6006,1 +6024,1 @@\n-    return !this_exact && this_one->_klass->equals(ciEnv::current()->Object_klass())  && other->_interfaces.contains(this_one->_interfaces);\n+    return !this_exact && this_one->_klass->equals(ciEnv::current()->Object_klass())  && other->_interfaces->contains(this_one->_interfaces);\n@@ -6020,1 +6038,1 @@\n-    return this_one->_klass->is_subtype_of(other->_klass) && this_one->_interfaces.contains(other->_interfaces);\n+    return this_one->_klass->is_subtype_of(other->_klass) && this_one->_interfaces->contains(other->_interfaces);\n@@ -6038,1 +6056,1 @@\n-  TypePtr::InterfaceSet interfaces = _interfaces;\n+  const TypeInterfaces* interfaces = _interfaces;\n@@ -6046,1 +6064,1 @@\n-        if (_interfaces.eq(sub)) {\n+        if (_interfaces->eq(sub)) {\n@@ -6340,3 +6358,3 @@\n-    InterfaceSet interfaces = meet_interfaces(tp);\n-    InterfaceSet tp_interfaces = tp->_interfaces;\n-    InterfaceSet this_interfaces = _interfaces;\n+    const TypeInterfaces* interfaces = meet_interfaces(tp);\n+    const TypeInterfaces* tp_interfaces = tp->_interfaces;\n+    const TypeInterfaces* this_interfaces = _interfaces;\n@@ -6350,1 +6368,1 @@\n-      if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.intersection_with(tp_interfaces).eq(tp_interfaces) && !tp->klass_is_exact()) {\n+      if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces->intersection_with(tp_interfaces)->eq(tp_interfaces) && !tp->klass_is_exact()) {\n@@ -6355,1 +6373,1 @@\n-        interfaces = this_interfaces.intersection_with(tp->_interfaces);\n+        interfaces = this_interfaces->intersection_with(tp->_interfaces);\n@@ -6368,1 +6386,1 @@\n-        if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.intersection_with(tp_interfaces).eq(tp_interfaces) && !tp->klass_is_exact()) {\n+        if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces->intersection_with(tp_interfaces)->eq(tp_interfaces) && !tp->klass_is_exact()) {\n@@ -6377,1 +6395,1 @@\n-      interfaces = this_interfaces.intersection_with(tp_interfaces);\n+      interfaces = this_interfaces->intersection_with(tp_interfaces);\n@@ -6390,1 +6408,1 @@\n-  if (other->klass() == ciEnv::current()->Object_klass() && other->_interfaces.empty() && other_exact) {\n+  if (other->klass() == ciEnv::current()->Object_klass() && other->_interfaces->empty() && other_exact) {\n@@ -6402,1 +6420,1 @@\n-    return other->klass() == ciEnv::current()->Object_klass() && other->_interfaces.intersection_with(this_one->_interfaces).eq(other->_interfaces) && other_exact;\n+    return other->klass() == ciEnv::current()->Object_klass() && other->_interfaces->intersection_with(this_one->_interfaces)->eq(other->_interfaces) && other_exact;\n@@ -6462,1 +6480,1 @@\n-  if (other->klass() == ciEnv::current()->Object_klass() && other->_interfaces.empty() && other_exact) {\n+  if (other->klass() == ciEnv::current()->Object_klass() && other->_interfaces->empty() && other_exact) {\n@@ -6471,1 +6489,1 @@\n-    return other->_klass->equals(ciEnv::current()->Object_klass()) && other->_interfaces.intersection_with(this_one->_interfaces).eq(other->_interfaces);\n+    return other->_klass->equals(ciEnv::current()->Object_klass()) && other->_interfaces->intersection_with(this_one->_interfaces)->eq(other->_interfaces);\n@@ -6546,1 +6564,1 @@\n-      _interfaces.dump(st);\n+      _interfaces->dump(st);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":169,"deletions":151,"binary":false,"changes":320,"status":"modified"},{"patch":"@@ -97,0 +97,2 @@\n+    Interfaces,                 \/\/ Set of implemented interfaces for oop types\n+\n@@ -875,0 +877,42 @@\n+\/\/ Set of implemented interfaces. Referenced from TypeOopPtr and TypeKlassPtr.\n+class TypeInterfaces : public Type {\n+private:\n+  GrowableArray<ciInstanceKlass*> _list;\n+  uint _hash;\n+  ciInstanceKlass* _exact_klass;\n+  DEBUG_ONLY(bool _initialized;)\n+\n+  void initialize();\n+\n+  void add(ciInstanceKlass* interface);\n+  void verify() const NOT_DEBUG_RETURN;\n+  void compute_hash();\n+  void compute_exact_klass();\n+  TypeInterfaces();\n+  TypeInterfaces(GrowableArray<ciInstanceKlass*>* interfaces);\n+\n+  NONCOPYABLE(TypeInterfaces);\n+public:\n+  static const TypeInterfaces* make(GrowableArray<ciInstanceKlass*>* interfaces = nullptr);\n+  bool eq(const Type* other) const;\n+  bool eq(ciInstanceKlass* k) const;\n+  uint hash() const;\n+  const Type *xdual() const;\n+  void dump(outputStream* st) const;\n+  const TypeInterfaces* union_with(const TypeInterfaces* other) const;\n+  const TypeInterfaces* intersection_with(const TypeInterfaces* other) const;\n+  bool contains(const TypeInterfaces* other) const {\n+    return intersection_with(other)->eq(other);\n+  }\n+  bool empty() const { return _list.length() == 0; }\n+\n+  ciInstanceKlass* exact_klass() const;\n+  void verify_is_loaded() const NOT_DEBUG_RETURN;\n+\n+  static int compare(ciInstanceKlass* const& k1, ciInstanceKlass* const& k2);\n+\n+  const Type* xmeet(const Type* t) const;\n+\n+  bool singleton(void) const;\n+};\n+\n@@ -884,41 +928,1 @@\n-  class InterfaceSet {\n-  private:\n-    GrowableArray<ciKlass*> _list;\n-    uint _hash;\n-    ciKlass* _exact_klass;\n-    DEBUG_ONLY(bool _initialized;)\n-\n-    void initialize();\n-    void raw_add(ciKlass* interface);\n-    void add(ciKlass* interface);\n-    void verify() const NOT_DEBUG_RETURN;\n-    void compute_hash();\n-    void compute_exact_klass();\n-  public:\n-    InterfaceSet();\n-    InterfaceSet(GrowableArray<ciInstanceKlass*>* interfaces);\n-    bool eq(const InterfaceSet& other) const;\n-    bool eq(ciInstanceKlass* k) const;\n-    uint hash() const;\n-    void dump(outputStream* st) const;\n-    InterfaceSet union_with(const InterfaceSet& other) const;\n-    InterfaceSet intersection_with(const InterfaceSet& other) const;\n-    bool contains(const InterfaceSet& other) const {\n-      return intersection_with(other).eq(other);\n-    }\n-    bool empty() const { return _list.length() == 0; }\n-\n-    inline void* operator new(size_t x) throw() {\n-      Compile* compile = Compile::current();\n-      return compile->type_arena()->AmallocWords(x);\n-    }\n-    inline void operator delete(void* ptr) {\n-      ShouldNotReachHere();\n-    }\n-    ciKlass* exact_klass() const;\n-    void verify_is_loaded() const NOT_DEBUG_RETURN;\n-\n-    static int compare(ciKlass* const& k1, ciKlass* const& k2);\n-  };\n-\n-  static InterfaceSet interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling);\n+  static const TypeInterfaces* interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling);\n@@ -984,1 +988,1 @@\n-  template<class T> static TypePtr::MeetResult meet_instptr(PTR& ptr, InterfaceSet& interfaces, const T* this_type,\n+  template<class T> static TypePtr::MeetResult meet_instptr(PTR& ptr, const TypeInterfaces*& interfaces, const T* this_type,\n@@ -1106,2 +1110,2 @@\n- TypeOopPtr(TYPES t, PTR ptr, ciKlass* k, const InterfaceSet& interfaces, bool xk, ciObject* o, int offset, int instance_id,\n-             const TypePtr* speculative, int inline_depth);\n+ TypeOopPtr(TYPES t, PTR ptr, ciKlass* k, const TypeInterfaces* interfaces, bool xk, ciObject* o, int offset, int instance_id,\n+            const TypePtr* speculative, int inline_depth);\n@@ -1123,1 +1127,1 @@\n-  const InterfaceSet _interfaces;\n+  const TypeInterfaces* _interfaces;\n@@ -1141,1 +1145,1 @@\n-  InterfaceSet meet_interfaces(const TypeOopPtr* other) const;\n+  const TypeInterfaces* meet_interfaces(const TypeOopPtr* other) const;\n@@ -1255,1 +1259,1 @@\n-  virtual const InterfaceSet interfaces() const {\n+  virtual const TypeInterfaces* interfaces() const {\n@@ -1276,1 +1280,1 @@\n-  TypeInstPtr(PTR ptr, ciKlass* k, const InterfaceSet& interfaces, bool xk, ciObject* o, int offset, int instance_id,\n+  TypeInstPtr(PTR ptr, ciKlass* k, const TypeInterfaces* interfaces, bool xk, ciObject* o, int off, int instance_id,\n@@ -1298,1 +1302,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -1304,1 +1308,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -1310,1 +1314,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, true, false, interface_handling);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(klass, true, true, false, interface_handling);\n@@ -1316,1 +1320,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, false, false, ignore_interfaces);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(klass, true, false, false, ignore_interfaces);\n@@ -1322,1 +1326,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, false, false, ignore_interfaces);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(klass, true, false, false, ignore_interfaces);\n@@ -1326,1 +1330,1 @@\n-  static const TypeInstPtr *make(PTR ptr, ciKlass* k, const InterfaceSet& interfaces, bool xk, ciObject* o, int offset,\n+  static const TypeInstPtr *make(PTR ptr, ciKlass* k, const TypeInterfaces* interfaces, bool xk, ciObject* o, int offset,\n@@ -1332,1 +1336,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -1360,1 +1364,1 @@\n-  virtual const TypeInstPtr *xmeet_unloaded(const TypeInstPtr *t, const InterfaceSet& interfaces) const;\n+  virtual const TypeInstPtr *xmeet_unloaded(const TypeInstPtr *tinst, const TypeInterfaces* interfaces) const;\n@@ -1379,1 +1383,1 @@\n-    return _klass->equals(other->is_instptr()->_klass) && _interfaces.eq(other->is_instptr()->_interfaces);\n+    return _klass->equals(other->is_instptr()->_klass) && _interfaces->eq(other->is_instptr()->_interfaces);\n@@ -1393,1 +1397,1 @@\n-    : TypeOopPtr(AryPtr,ptr,k,*_array_interfaces,xk,o,offset, instance_id, speculative, inline_depth),\n+    : TypeOopPtr(AryPtr,ptr,k,_array_interfaces,xk,o,offset, instance_id, speculative, inline_depth),\n@@ -1416,1 +1420,1 @@\n-  static const InterfaceSet* _array_interfaces;\n+  static const TypeInterfaces* _array_interfaces;\n@@ -1554,1 +1558,1 @@\n-  TypeKlassPtr(TYPES t, PTR ptr, ciKlass* klass, const InterfaceSet& interfaces, int offset);\n+  TypeKlassPtr(TYPES t, PTR ptr, ciKlass* klass, const TypeInterfaces* interfaces, int offset);\n@@ -1566,2 +1570,2 @@\n-  const InterfaceSet _interfaces;\n-  InterfaceSet meet_interfaces(const TypeKlassPtr* other) const;\n+  const TypeInterfaces* _interfaces;\n+  const TypeInterfaces* meet_interfaces(const TypeKlassPtr* other) const;\n@@ -1626,1 +1630,1 @@\n-  virtual const InterfaceSet interfaces() const {\n+  virtual const TypeInterfaces* interfaces() const {\n@@ -1646,1 +1650,1 @@\n-  TypeInstKlassPtr(PTR ptr, ciKlass* klass, const InterfaceSet& interfaces, int offset)\n+  TypeInstKlassPtr(PTR ptr, ciKlass* klass, const TypeInterfaces* interfaces, int offset)\n@@ -1665,1 +1669,1 @@\n-    InterfaceSet interfaces = TypePtr::interfaces(k, true, true, false, interface_handling);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(k, true, true, false, interface_handling);\n@@ -1668,1 +1672,1 @@\n-  static const TypeInstKlassPtr* make(PTR ptr, ciKlass* k, const InterfaceSet& interfaces, int offset);\n+  static const TypeInstKlassPtr* make(PTR ptr, ciKlass* k, const TypeInterfaces* interfaces, int offset);\n@@ -1671,1 +1675,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n+    const TypeInterfaces* interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -1706,1 +1710,1 @@\n-  static const InterfaceSet* _array_interfaces;\n+  static const TypeInterfaces* _array_interfaces;\n@@ -1708,1 +1712,1 @@\n-    : TypeKlassPtr(AryKlassPtr, ptr, klass, *_array_interfaces, offset), _elem(elem) {\n+    : TypeKlassPtr(AryKlassPtr, ptr, klass, _array_interfaces, offset), _elem(elem) {\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":73,"deletions":69,"binary":false,"changes":142,"status":"modified"}]}