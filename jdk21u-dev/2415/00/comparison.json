{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,10 +120,1 @@\n-            Iterator threadIterator = vm.allThreads().iterator();\n-            while (threadIterator.hasNext()) {\n-                ThreadReference curThread = (ThreadReference) threadIterator.next();\n-                if (curThread.name().equals(\"main\")) {\n-                     checkedThread = curThread;\n-                }\n-            }\n-            if (checkedThread == null) {\n-                throw new Failure(\"TEST BUG: unable to find reference to main thread\");\n-            }\n+            checkedThread = debuggee.threadByFieldNameOrThrow(checkedClass, \"mainThread\", \"main\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/BreakpointEvent\/_itself_\/breakpoint001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-    public static final int breakpointLineNumber = 86;\n+    public static final int breakpointLineNumber = 90;\n@@ -48,0 +48,2 @@\n+    static Thread mainThread = null;\n+\n@@ -57,0 +59,2 @@\n+        mainThread = Thread.currentThread();\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/BreakpointEvent\/_itself_\/breakpoint001a.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import com.sun.jdi.ReferenceType;\n@@ -107,0 +108,4 @@\n+        ReferenceType debuggeeClass = debuggee.classByName(DEBUGGEE_CLASS);\n+        thR = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"debuggeeThread\", DEBUGGEE_THRD);\n+        log.display(\"\\nCreating StepRequest for the debuggee's thread \\\"\"\n+                    + thR.name() + \"\\\"\");\n@@ -108,3 +113,12 @@\n-            threads = vm.allThreads();\n-        } catch (Exception e) {\n-            log.complain(\"TEST FAILURE: allThreads: \" + e);\n+            StepRequest sReq =\n+                erManager.createStepRequest(thR, RESTRICTIONS[0][0],RESTRICTIONS[0][1]);\n+            sReq.enable();\n+            enabledStepRequests.add(sReq);\n+        } catch (DuplicateRequestException e) {\n+            log.complain(\"TEST FAILURE: createStepRequest: caught \" + e);\n+            return quitDebuggee(FAILED);\n+        } catch (ObjectCollectedException e) {\n+            log.complain(\"TEST FAILURE: createStepRequest: caught \" + e);\n+            return quitDebuggee(FAILED);\n+        } catch (VMMismatchException e) {\n+            log.complain(\"TEST FAILURE: createStepRequest: caught \" + e);\n@@ -112,24 +126,0 @@\n-        }\n-        Iterator iter = threads.iterator();\n-        while (iter.hasNext()) {\n-            thR = (ThreadReference) iter.next();\n-            if (thR.name().equals(DEBUGGEE_THRD)) {\n-                log.display(\"\\nCreating StepRequest for the debuggee's thread \\\"\"\n-                    + thR.name() + \"\\\"\");\n-                try {\n-                    StepRequest sReq = erManager.createStepRequest(thR,\n-                        RESTRICTIONS[0][0],RESTRICTIONS[0][1]);\n-                    sReq.enable();\n-                    enabledStepRequests.add(sReq);\n-                } catch (DuplicateRequestException e) {\n-                    log.complain(\"TEST FAILURE: createStepRequest: caught \" + e);\n-                    return quitDebuggee(FAILED);\n-                } catch (ObjectCollectedException e) {\n-                    log.complain(\"TEST FAILURE: createStepRequest: caught \" + e);\n-                    return quitDebuggee(FAILED);\n-                } catch (VMMismatchException e) {\n-                    log.complain(\"TEST FAILURE: createStepRequest: caught \" + e);\n-                    return quitDebuggee(FAILED);\n-                }\n-                break;\n-            }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createStepRequest\/crstepreq001.java","additions":18,"deletions":28,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+    static Thread debuggeeThread = null;\n+\n@@ -38,1 +40,1 @@\n-        Thread  thr = Thread.currentThread();\n+        debuggeeThread = Thread.currentThread();\n@@ -40,1 +42,1 @@\n-        thr.setName(crstepreq001.DEBUGGEE_THRD);\n+        debuggeeThread.setName(crstepreq001.DEBUGGEE_THRD);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/createStepRequest\/crstepreq001t.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,10 +168,1 @@\n-            Iterator threadIterator = vm.allThreads().iterator();\n-            while (threadIterator.hasNext()) {\n-                ThreadReference curThread = (ThreadReference) threadIterator.next();\n-                if (curThread.name().equals(\"main\")) {\n-                     checkedThread = curThread;\n-                }\n-            }\n-            if (checkedThread == null) {\n-                throw new Failure(\"TEST BUG: unable to find reference to main thread\");\n-            }\n+            checkedThread = debuggee.threadByFieldNameOrThrow(checkedClass, \"mainThread\", \"main\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionEvent\/catchLocation\/location001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,3 +50,3 @@\n-    public static final int userExceptionLocation = 98;\n-    public static final int userErrorLocation     = 105;\n-    public static final int userThrowableLocation = 112;\n+    public static final int userExceptionLocation = 101;\n+    public static final int userErrorLocation     = 108;\n+    public static final int userThrowableLocation = 115;\n@@ -55,5 +55,5 @@\n-    public static final int userExceptionCatchLocation = 99;\n-    public static final int userErrorCatchLocation     = 106;\n-    public static final int userThrowableCatchLocation = 113;\n-    public static final int javaExceptionCatchLocation = 120;\n-    public static final int javaErrorCatchLocation     = 127;\n+    public static final int userExceptionCatchLocation = 102;\n+    public static final int userErrorCatchLocation     = 109;\n+    public static final int userThrowableCatchLocation = 116;\n+    public static final int javaExceptionCatchLocation = 123;\n+    public static final int javaErrorCatchLocation     = 130;\n@@ -68,0 +68,2 @@\n+    static Thread mainThread = null;\n+\n@@ -71,0 +73,1 @@\n+        mainThread = Thread.currentThread();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionEvent\/catchLocation\/location001a.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,10 +168,1 @@\n-            Iterator threadIterator = vm.allThreads().iterator();\n-            while (threadIterator.hasNext()) {\n-                ThreadReference curThread = (ThreadReference) threadIterator.next();\n-                if (curThread.name().equals(\"main\")) {\n-                     checkedThread = curThread;\n-                }\n-            }\n-            if (checkedThread == null) {\n-                throw new Failure(\"TEST BUG: unable to find reference to main thread\");\n-            }\n+            checkedThread = debuggee.threadByFieldNameOrThrow(checkedClass, \"mainThread\", \"main\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionEvent\/exception\/exception001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,2 @@\n+    static Thread mainThread = null;\n+\n@@ -71,0 +73,1 @@\n+        mainThread = Thread.currentThread();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ExceptionEvent\/exception\/exception001a.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,0 +176,1 @@\n+        ReferenceType debuggeeClass = debuggee.classByName(debuggeeName);\n@@ -207,2 +208,0 @@\n-            List            allThreads   = null;\n-            ListIterator    listIterator = null;\n@@ -233,1 +232,0 @@\n-                    allThreads  = vm.allThreads();\n@@ -242,13 +240,1 @@\n-                listIterator = allThreads.listIterator();\n-                for (;;) {\n-                    try {\n-                        thread2 = (ThreadReference) listIterator.next();\n-                        if (thread2.name().equals(threadName))\n-                            break ;\n-                    } catch ( NoSuchElementException e ) {\n-                        log3(\"ERROR: NoSuchElementException for listIterator.next()\");\n-                        log3(\"ERROR: NO THREAD2 ?????????!!!!!!!\");\n-                        expresult = returnCode1;\n-                        break label0;\n-                    }\n-                }\n+                thread2 = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"thread2\", threadName);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/LocalVariable\/isVisible\/isvisible001.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,3 @@\n+\n+    static Thread thread2 = null;\n+\n@@ -96,1 +99,1 @@\n-                         Thread thread2 =\n+                         thread2 =\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/LocalVariable\/isVisible\/isvisible001a.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,0 +165,1 @@\n+        ReferenceType debuggeeClass = debuggee.classByName(debuggeeName);\n@@ -198,2 +199,0 @@\n-            List            allThreads   = null;\n-            ListIterator    listIterator = null;\n@@ -209,1 +208,0 @@\n-                    allThreads  = vm.allThreads();\n@@ -218,13 +216,1 @@\n-                listIterator = allThreads.listIterator();\n-                for (;;) {\n-                    try {\n-                        thread2 = (ThreadReference) listIterator.next();\n-                        if (thread2.name().equals(threadName))\n-                            break ;\n-                    } catch ( NoSuchElementException e ) {\n-                        log3(\"ERROR: NoSuchElementException for listIterator.next()\");\n-                        log3(\"ERROR: NO THREAD2 ?????????!!!!!!!\");\n-                        expresult = returnCode1;\n-                        break label0;\n-                    }\n-                }\n+                thread2 = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"thread2\", threadName);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Locatable\/location\/location004.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,3 @@\n+\n+    static Thread thread2 = null;\n+\n@@ -96,1 +99,1 @@\n-                         Thread thread2 =\n+                         thread2 =\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Locatable\/location\/location004a.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,0 +165,1 @@\n+        ReferenceType debuggeeClass = debuggee.classByName(debuggeeName);\n@@ -198,2 +199,0 @@\n-            List            allThreads   = null;\n-            ListIterator    listIterator = null;\n@@ -209,1 +208,0 @@\n-                    allThreads  = vm.allThreads();\n@@ -218,13 +216,1 @@\n-                listIterator = allThreads.listIterator();\n-                for (;;) {\n-                    try {\n-                        thread2 = (ThreadReference) listIterator.next();\n-                        if (thread2.name().equals(threadName))\n-                            break ;\n-                    } catch ( NoSuchElementException e ) {\n-                        log3(\"ERROR: NoSuchElementException for listIterator.next()\");\n-                        log3(\"ERROR: NO THREAD2 ?????????!!!!!!!\");\n-                        expresult = returnCode1;\n-                        break label0;\n-                    }\n-                }\n+                thread2 = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"thread2\", threadName);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Locatable\/location\/location005.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,3 @@\n+\n+    static Thread thread2 = null;\n+\n@@ -96,1 +99,1 @@\n-                         Thread thread2 =\n+                         thread2 =\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Locatable\/location\/location005a.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,10 +134,1 @@\n-            Iterator threadIterator = vm.allThreads().iterator();\n-            while (threadIterator.hasNext()) {\n-                ThreadReference curThread = (ThreadReference) threadIterator.next();\n-                if (curThread.name().equals(\"main\")) {\n-                    checkedThread = curThread;\n-                }\n-            }\n-            if (checkedThread == null) {\n-                throw new Failure(\"TEST BUG: unable to find reference to main thread\");\n-            }\n+            checkedThread = debuggee.threadByFieldNameOrThrow(checkedClass, \"mainThread\", \"main\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryEvent\/method\/method001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,2 @@\n-    public static final int STARTING_BREAKPOINT_LINE = 86;\n-    public static final int ENDING_BREAKPOINT_LINE = 91;\n+    public static final int STARTING_BREAKPOINT_LINE = 89;\n+    public static final int ENDING_BREAKPOINT_LINE = 94;\n@@ -61,0 +61,2 @@\n+    static Thread mainThread = null;\n+\n@@ -64,0 +66,1 @@\n+        mainThread = Thread.currentThread();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryEvent\/method\/method001a.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -216,3 +216,0 @@\n-\n-            List            allThreads   = null;\n-            ListIterator    listIterator = null;\n@@ -228,1 +225,0 @@\n-                    allThreads  = vm.allThreads();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ObjectReference\/invokeMethod\/invokemethod001.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,0 @@\n-    ThreadReference   thread2      = null;\n@@ -153,0 +152,1 @@\n+        ReferenceType debuggeeClass = debuggee.classByName(debuggeeName);\n@@ -177,3 +177,0 @@\n-            String threadName = \"testedThread\";\n-\n-            List            allThreads   = null;\n@@ -181,1 +178,0 @@\n-            ListIterator    listIterator = null;\n@@ -190,1 +186,0 @@\n-                    allThreads  = vm.allThreads();\n@@ -199,13 +194,1 @@\n-                listIterator = allThreads.listIterator();\n-                for (;;) {\n-                    try {\n-                        mainThread = (ThreadReference) listIterator.next();\n-                        if (mainThread.name().equals(\"main\"))\n-                            break ;\n-                    } catch ( NoSuchElementException e ) {\n-                        log3(\"ERROR: NoSuchElementException for listIterator.next()\");\n-                        log3(\"ERROR: NO 'main' thread  ?????????!!!!!!!\");\n-                        expresult = returnCode1;\n-                        break label0;\n-                    }\n-                }\n+                mainThread = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"mainThread\", \"main\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ObjectReference\/owningThread\/owningthread001.java","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+    static Thread mainThread = null;\n@@ -70,0 +71,2 @@\n+        mainThread = Thread.currentThread();\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ObjectReference\/owningThread\/owningthread001a.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,10 +124,1 @@\n-            Iterator threadIterator = vm.allThreads().iterator();\n-            while (threadIterator.hasNext()) {\n-                ThreadReference curThread = (ThreadReference) threadIterator.next();\n-                if (curThread.name().equals(\"main\")) {\n-                     checkedThread = curThread;\n-                }\n-            }\n-            if (checkedThread == null) {\n-                throw new Failure(\"TEST BUG: unable to find reference to main thread\");\n-            }\n+            checkedThread = debuggee.threadByFieldNameOrThrow(checkedClass, \"mainThread\", \"main\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepEvent\/_itself_\/stepevent001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,2 @@\n-    public static final int stepLineBegin = 90;\n-    public static final int stepLineEnd = 100;\n+    public static final int stepLineBegin = 94;\n+    public static final int stepLineEnd = 104;\n@@ -50,0 +50,2 @@\n+    static Thread mainThread = null;\n+\n@@ -62,0 +64,2 @@\n+        mainThread = Thread.currentThread();\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/StepEvent\/_itself_\/stepevent001a.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,1 @@\n+        ReferenceType debuggeeClass = debuggee.classByName(debuggeeName);\n@@ -199,3 +200,0 @@\n-\n-            List            allThreads   = null;\n-\n@@ -204,3 +202,0 @@\n-            ListIterator    listIterator = null;\n-            List            classes      = null;\n-\n@@ -215,23 +210,1 @@\n-                try {\n-                    allThreads  = vm.allThreads();\n-\/\/                    classes     = vm.classesByName(testedClassName);\n-\/\/                    testedclass = (ReferenceType) classes.get(0);\n-                } catch ( Exception e) {\n-                    log3(\"ERROR: Exception at very beginning !? : \" + e);\n-                    expresult = returnCode1;\n-                    break label0;\n-                }\n-\n-                listIterator = allThreads.listIterator();\n-                for (;;) {\n-                    try {\n-                        mainThread = (ThreadReference) listIterator.next();\n-                        if (mainThread.name().equals(\"main\"))\n-                            break ;\n-                    } catch ( NoSuchElementException e ) {\n-                        log3(\"ERROR: NoSuchElementException for listIterator.next()\");\n-                        log3(\"ERROR: NO 'main' thread  ?????????!!!!!!!\");\n-                        expresult = returnCode1;\n-                        break label0;\n-                    }\n-                }\n+                mainThread = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"mainThread\", \"main\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/currentContendedMonitor\/currentcm001.java","additions":3,"deletions":30,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,1 @@\n+    static Thread mainThread = null;\n@@ -69,0 +70,2 @@\n+        mainThread = Thread.currentThread();\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/currentContendedMonitor\/currentcm001a.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,0 +144,4 @@\n+            log1(\"Getting ThreadReference for main thread\");\n+            ThreadReference mainThread =\n+                debuggee.threadByFieldNameOrThrow(debuggeeRef, \"mainThread\", \"main\");\n+\n@@ -166,1 +170,1 @@\n-                        checkMonitors(\"main\", 0);\n+                        checkMonitors(mainThread, 0);\n@@ -170,1 +174,1 @@\n-                        checkMonitors(\"main\", monitorCount);\n+                        checkMonitors(mainThread, monitorCount);\n@@ -213,15 +217,2 @@\n-    private void checkMonitors(String threadName, int expSize) {\n-        log1(\"Getting ThreadReference for \" + threadName + \" thread\");\n-        ThreadReference checkedThread = null;\n-        Iterator itr = vm.allThreads().listIterator();\n-        while (itr.hasNext()) {\n-             ThreadReference thread = (ThreadReference) itr.next();\n-             if (thread.name().equals(threadName)) {\n-                  checkedThread = thread;\n-             }\n-        }\n-        if (checkedThread == null) {\n-            log3(\"Cannot find  \" + threadName + \"thread in the debuggee\");\n-            testExitCode = FAILED;\n-            return;\n-        }\n+    private void checkMonitors(ThreadReference checkedThread, int expSize) {\n+        String threadName = checkedThread.name();\n@@ -255,1 +246,1 @@\n-                    itr = expMonitors.iterator();\n+                    Iterator itr = expMonitors.iterator();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/ownedMonitors\/ownedmonitors001.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+    static Thread mainThread = null;\n@@ -70,0 +71,2 @@\n+        mainThread = Thread.currentThread();\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/ownedMonitors\/ownedmonitors001a.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -212,6 +212,0 @@\n-            List            threads;\n-            ListIterator    iterator;\n-            int             flag;\n-            String          threadName;\n-            ThreadReference thread;\n-\n@@ -222,2 +216,0 @@\n-            String threadNames [] = { \"Thread2\", \"Thread3\", \"Thread4\" };\n-\n@@ -247,4 +239,0 @@\n-                log2(\"      getting a List of all running threads\");\n-                threads = vm.allThreads();\n-\n-\n@@ -252,13 +240,3 @@\n-\n-                iterator = threads.listIterator();\n-                for ( int i2 = 0; iterator.hasNext(); i2++ ) {\n-                    thread = (ThreadReference) iterator.next();\n-                    threadName = thread.name();\n-                    if (threadName.equals(threadNames[0]))\n-                         thread2 = thread;\n-                    else if (threadName.equals(threadNames[1]))\n-                         thread3 = thread;\n-                    else if (threadName.equals(threadNames[2]))\n-                         thread4 = thread;\n-                }\n-\n+                thread2 = debuggee.threadByFieldNameOrThrow(mainthreadClass, \"thread2\", \"Thread2\");\n+                thread3 = debuggee.threadByFieldNameOrThrow(mainthreadClass, \"thread3\", \"Thread3\");\n+                thread4 = debuggee.threadByFieldNameOrThrow(mainthreadClass, \"thread4\", \"Thread4\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ThreadReference\/threadGroup\/threadgroup001.java","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -345,3 +345,0 @@\n-            List            allThreads   = null;\n-            ListIterator    listIterator = null;\n-\n@@ -356,1 +353,0 @@\n-                    allThreads  = vm.allThreads();\n@@ -365,13 +361,1 @@\n-                listIterator = allThreads.listIterator();\n-                for (;;) {\n-                    try {\n-                        thread2 = (ThreadReference) listIterator.next();\n-                        if (thread2.name().equals(threadName))\n-                            break ;\n-                    } catch ( NoSuchElementException e ) {\n-                        log3(\"ERROR: NoSuchElementException for listIterator.next()\");\n-                        log3(\"ERROR: NO THREAD2 ?????????!!!!!!!\");\n-                        expresult = returnCode1;\n-                        break label0;\n-                    }\n-                }\n+                thread2 = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"thread2\", threadName);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Value\/_itself_\/value001.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -212,0 +212,1 @@\n+        ReferenceType debuggeeClass = debuggee.classByName(debuggeeName);\n@@ -238,2 +239,0 @@\n-            List            allThreads   = null;\n-            ListIterator    listIterator = null;\n@@ -254,1 +253,0 @@\n-                    allThreads  = vm.allThreads();\n@@ -263,13 +261,1 @@\n-                listIterator = allThreads.listIterator();\n-                for (;;) {\n-                    try {\n-                        thread2 = (ThreadReference) listIterator.next();\n-                        if (thread2.name().equals(threadName))\n-                            break ;\n-                    } catch ( NoSuchElementException e ) {\n-                        log3(\"ERROR: NoSuchElementException for listIterator.next()\");\n-                        log3(\"ERROR: NO THREAD2 ?????????!!!!!!!\");\n-                        expresult = returnCode1;\n-                        break label0;\n-                    }\n-                }\n+                thread2 = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"thread2\", threadName);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Value\/type\/type002\/type002.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,3 @@\n+\n+    static Threadtype002a thread2 = null;\n+\n@@ -97,2 +100,1 @@\n-                         Threadtype002a thread2 =\n-                             new Threadtype002a(\"Thread2\");\n+                         thread2 = new Threadtype002a(\"Thread2\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/Value\/type\/type002\/type002a.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,0 +220,1 @@\n+        ReferenceType debuggeeClass = debuggee.classByName(debuggeeName);\n@@ -246,2 +247,0 @@\n-            List            allThreads   = null;\n-            ListIterator    listIterator = null;\n@@ -262,1 +261,0 @@\n-                    allThreads  = vm.allThreads();\n@@ -271,13 +269,1 @@\n-                listIterator = allThreads.listIterator();\n-                for (;;) {\n-                    try {\n-                        thread2 = (ThreadReference) listIterator.next();\n-                        if (thread2.name().equals(threadName))\n-                            break ;\n-                    } catch ( NoSuchElementException e ) {\n-                        log3(\"ERROR: NoSuchElementException for listIterator.next()\");\n-                        log3(\"ERROR: NO THREAD2 ?????????!!!!!!!\");\n-                        expresult = returnCode1;\n-                        break label0;\n-                    }\n-                }\n+                thread2 = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"thread2\", threadName);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VoidValue\/equals\/equals001\/equals001.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,3 @@\n+\n+    static Threadequals001a thread2 = null;\n+\n@@ -97,2 +100,1 @@\n-                         Threadequals001a thread2 =\n-                             new Threadequals001a(\"Thread2\");\n+                         thread2 = new Threadequals001a(\"Thread2\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VoidValue\/equals\/equals001\/equals001a.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,0 +220,1 @@\n+        ReferenceType debuggeeClass = debuggee.classByName(debuggeeName);\n@@ -246,2 +247,0 @@\n-            List            allThreads   = null;\n-            ListIterator    listIterator = null;\n@@ -262,1 +261,0 @@\n-                    allThreads  = vm.allThreads();\n@@ -271,13 +269,1 @@\n-                listIterator = allThreads.listIterator();\n-                for (;;) {\n-                    try {\n-                        thread2 = (ThreadReference) listIterator.next();\n-                        if (thread2.name().equals(threadName))\n-                            break ;\n-                    } catch ( NoSuchElementException e ) {\n-                        log3(\"ERROR: NoSuchElementException for listIterator.next()\");\n-                        log3(\"ERROR: NO THREAD2 ?????????!!!!!!!\");\n-                        expresult = returnCode1;\n-                        break label0;\n-                    }\n-                }\n+                thread2 = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"thread2\", threadName);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VoidValue\/hashCode\/hashcode001\/hashcode001.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,3 @@\n+\n+    static Threadhashcode001a thread2 = null;\n+\n@@ -97,2 +100,1 @@\n-                         Threadhashcode001a thread2 =\n-                             new Threadhashcode001a(\"Thread2\");\n+                         thread2 = new Threadhashcode001a(\"Thread2\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VoidValue\/hashCode\/hashcode001\/hashcode001a.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,10 +150,1 @@\n-            Iterator threadIterator = vm.allThreads().iterator();\n-            while (threadIterator.hasNext()) {\n-                ThreadReference curThread = (ThreadReference) threadIterator.next();\n-                if (curThread.name().equals(\"main\")) {\n-                     checkedThread = curThread;\n-                }\n-            }\n-            if (checkedThread == null) {\n-                throw new Failure(\"TEST BUG: unable to find reference to <main> thread\");\n-            }\n+            checkedThread = debuggee.threadByFieldNameOrThrow(debuggeeClass, \"mainThread\", \"main\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointEvent\/object\/object001.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,2 @@\n+    static Thread mainThread = null;\n+\n@@ -59,0 +61,1 @@\n+        mainThread = Thread.currentThread();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/WatchpointEvent\/object\/object001a.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}