{"files":[{"patch":"@@ -509,1 +509,1 @@\n-        MethodSymbol sym = (MethodSymbol)TreeInfo.symbolFor(invoke.meth);\n+        Symbol sym = TreeInfo.symbolFor(invoke.meth);\n@@ -533,1 +533,1 @@\n-    private void invoke(JCTree site, MethodSymbol sym, List<JCExpression> args, RefSet<?> receiverRefs) {\n+    private void invoke(JCTree site, Symbol sym, List<JCExpression> args, RefSet<?> receiverRefs) {\n@@ -813,0 +813,4 @@\n+        if (tree.type.isErroneous()) {\n+            \/\/error recovery - ignore erroneous member references\n+            return ;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ThisEscapeAnalyzer.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8301580\n+ * @bug 8301580 8322159\n@@ -89,0 +89,37 @@\n+    @Test\n+    public void testX() throws Exception {\n+        String code = \"\"\"\n+                      public class C {\n+                          public C() {\n+                              Undefined.method();\n+                              undefined1();\n+                              Runnable r = this::undefined2;\n+                              overridable(this); \/\/to verify ThisEscapeAnalyzer has been run\n+                          }\n+                          public void overridable(C c) {}\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\",\n+                         \"-XDshould-stop.at=FLOW\", \"-Xlint:this-escape\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"C.java:3:9: compiler.err.cant.resolve.location: kindname.variable, Undefined, , , (compiler.misc.location: kindname.class, C, null)\",\n+                \"C.java:4:9: compiler.err.cant.resolve.location.args: kindname.method, undefined1, , , (compiler.misc.location: kindname.class, C, null)\",\n+                \"C.java:5:22: compiler.err.invalid.mref: kindname.method, (compiler.misc.cant.resolve.location.args: kindname.method, undefined2, , , (compiler.misc.location: kindname.class, C, null))\",\n+                \"C.java:6:20: compiler.warn.possible.this.escape\",\n+                \"3 errors\",\n+                \"1 warning\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/recovery\/AttrRecovery.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"}]}