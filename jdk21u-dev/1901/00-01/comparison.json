{"files":[{"patch":"@@ -664,1 +664,1 @@\n-    if (in != nullptr && phase->has_ctrl(in) && phase->get_ctrl(in) == ctrl) {\n+    if (in != nullptr && (ShenandoahIUBarrier ? (phase->ctrl_or_self(in) == ctrl) : (phase->has_ctrl(in) && phase->get_ctrl(in) == ctrl))) {\n@@ -684,16 +684,3 @@\n-      if (m->is_Store() || m->is_LoadStore()) {\n-        \/\/ Take anti-dependencies into account\n-        Node* mem = m->in(MemNode::Memory);\n-        for (DUIterator_Fast imax, i = mem->fast_outs(imax); i < imax; i++) {\n-          Node* u = mem->fast_out(i);\n-          if (u->is_Load() && phase->C->can_alias(m->adr_type(), phase->C->get_alias_index(u->adr_type())) &&\n-              phase->ctrl_or_self(u) == c) {\n-            wq.push(u);\n-          }\n-        }\n-      }\n-      for (uint i = 0; i < m->req(); i++) {\n-        if (m->in(i) != nullptr && phase->ctrl_or_self(m->in(i)) == c) {\n-          wq.push(m->in(i));\n-        }\n-      }\n+      \/\/ Take anti-dependencies into account\n+      maybe_push_anti_dependent_loads(phase, m, c, wq);\n+      push_data_inputs_at_control(phase, m, c, wq);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"}]}