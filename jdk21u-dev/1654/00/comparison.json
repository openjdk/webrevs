{"files":[{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Image;\n+import java.awt.Label;\n+import java.awt.MediaTracker;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4779641\n+ * @summary Test to verify that Non-resizable dialogs should not show icons\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogIconTest\n+ *\/\n+\n+public class DialogIconTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. This is a Windows-only test of Dialog icons\n+                2. You can see a frame with a swing icon and two dialogs that it\n+                   owns. The resizable dialog should have the same icon as the\n+                   frame. The non-resizable dialog should have no icon at all\n+                3. Press PASS if this is true, press FAIL otherwise\n+                 \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static List<Window> initialize() {\n+        Frame f = new Frame(\"Parent frame\");\n+        f.setBounds(50, 50, 200, 200);\n+\n+        Dialog dr = new Dialog(f, \"Resizable Dialog\");\n+        dr.setLocation(100, 100);\n+        dr.add(new Label(\"Should inherit icon from parent\"));\n+        dr.pack();\n+\n+        Dialog dn = new Dialog(f, \"NON Resizable Dialog\");\n+        dn.setLocation(150, 150);\n+        dn.add(new Label(\"Should have no icon\"));\n+        dn.pack();\n+        dn.setResizable(false);\n+\n+        String fileName = System.getProperty(\"test.src\") +\n+                System.getProperty(\"file.separator\") + \"swing.small.gif\";\n+\n+        Image icon = Toolkit.getDefaultToolkit().createImage(fileName);\n+        MediaTracker tracker = new MediaTracker(f);\n+        tracker.addImage(icon, 0);\n+        try {\n+            tracker.waitForAll();\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(\"MediaTracker addImage Interrupted!\");\n+        }\n+        f.setIconImage(icon);\n+        return List.of(f, dn, dr);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogIconTest\/DialogIconTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/awt\/Dialog\/DialogIconTest\/swing.small.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/javax\/swing\/JTable\/4170447\/swing.small.gif","status":"copied"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Checkbox;\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+import java.awt.event.ComponentEvent;\n+import java.awt.event.ComponentListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.lang.Exception;\n+import java.lang.String;\n+import java.lang.System;\n+\n+\/*\n+ * @test\n+ * @bug 4115213\n+ * @summary Test to verify Checks that with resizable set to false,\n+ *          dialog can not be resized\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogResizeTest\n+ *\/\n+\n+public class DialogResizeTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. When this test is run a dialog will display (setResizable Test)\n+                   Click on the checkbox to change the dialog resizable state\n+                2. For both dialog resizable states (resizable, non-resizable) try to\n+                   change the size of the dialog. When isResizable is true the dialog\n+                   is resizable. When isResizable is false the dialog is non-resizable\n+                3. If this is the behavior that you observe, the test has passed, Press\n+                   the Pass button. Otherwise the test has failed, Press the Fail button\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(initialize())\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Dialog initialize() {\n+        Frame f = new Frame(\"Owner Frame\");\n+        MyDialog ld = new MyDialog(f);\n+        ld.setBounds(100, 100, 400, 150);\n+        ld.setResizable(false);\n+        System.out.println(\"isResizable is set to: \" + ld.isResizable());\n+        return ld;\n+    }\n+}\n+\n+class MyDialog extends Dialog implements ItemListener {\n+    String sText = \"Tests java.awt.Dialog.setResizable method\";\n+    TextArea ta = new TextArea(sText, 2, 40, TextArea.SCROLLBARS_NONE);\n+\n+    public MyDialog(Frame f) {\n+\n+        super(f, \"setResizable test\", false);\n+\n+        Panel cbPanel = new Panel();\n+        cbPanel.setLayout(new FlowLayout());\n+\n+        Panel taPanel = new Panel();\n+        taPanel.setLayout(new FlowLayout());\n+        taPanel.add(ta);\n+\n+        Checkbox cb = new Checkbox(\"Check this box to change the dialog's \" +\n+                \"resizable state\", null, isResizable());\n+        cb.setState(false);\n+        cb.addItemListener(this);\n+        cbPanel.add(cb);\n+\n+        add(\"North\", taPanel);\n+        add(\"South\", cbPanel);\n+        pack();\n+    }\n+\n+    public void itemStateChanged(ItemEvent evt) {\n+        setResizable(evt.getStateChange() == ItemEvent.SELECTED);\n+\n+        boolean bResizeState = isResizable();\n+        PassFailJFrame.log(\"isResizable is set to: \" + bResizeState);\n+\n+        if (isResizable()) {\n+            ta.setText(\"dialog is resizable (isResizable = \" + bResizeState + \")\");\n+        } else {\n+            ta.setText(\"dialog is NOT resizable (isResizable = \" + bResizeState + \")\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogResizeTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,258 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Image;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.image.BufferedImage;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\/*\n+ * @test\n+ * @bug 4035189\n+ * @summary Test to verify that PIT File Dialog icon not matching with\n+ *          the new java icon (frame Icon) - PIT build\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FileDialogIconTest\n+ *\/\n+\n+public class FileDialogIconTest {\n+    public static Frame frame;\n+    public static Image image;\n+    public static List<Image> images;\n+    static String fileBase;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Select the Image for a Dialog and Frame using either\n+                   Load\/Save\/Just Dialog.\n+                2. Set the Icon Image\/s to Frame and Dialog. Verify that the\n+                   Icon is set for the respective Frame and Dialog.\n+                   If selected Icon is set to Frame and Dialog press PASS\n+                   else FAIL.\n+                                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static void setImagesToFD(java.util.List<Image> listIcon) {\n+        FileDialogIconTest.images = listIcon;\n+    }\n+\n+    public static void setImagesToFrame(java.util.List<Image> listIcon) {\n+        frame.setIconImages(listIcon);\n+    }\n+\n+    public static void setImageToFD(Image img) {\n+        FileDialogIconTest.image = img;\n+    }\n+\n+    public static void setImageToFrame(Image img) {\n+        frame.setIconImage(img);\n+    }\n+\n+    public static Frame initialize() {\n+        frame = new Frame(\"FileDialogIconTest\");\n+        Button setImageButton1 = new Button(\"setIconImageToFrame\");\n+        Button setImageButton2 = new Button(\"setIconImageToDialog\");\n+        Button setImageButton3 = new Button(\"setIconImagesToFrame\");\n+        Button setImageButton4 = new Button(\"setIconImagesToDialog\");\n+        Button setImageButton5 = new Button(\"setIconBufferedImagesToDialog\");\n+        Button setImageButton6 = new Button(\"setIconBufferedImagesToFrame\");\n+\n+        if (System.getProperty(\"test.src\") == null) {\n+            fileBase = \"\";\n+        } else {\n+            fileBase = System.getProperty(\"test.src\") + System.getProperty(\"file.separator\");\n+        }\n+\n+        final String fileName = fileBase + \"loading-msg.gif\";\n+\n+        setImageButton1.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent event) {\n+                try {\n+                    Image image = Toolkit.getDefaultToolkit().getImage(fileName);\n+                    setImageToFrame(image);\n+                    PassFailJFrame.log(\"Loaded image . setting to frame\");\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        setImageButton2.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent event) {\n+                try {\n+                    Image image = Toolkit.getDefaultToolkit().getImage(fileName);\n+                    setImageToFD(image);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        setImageButton3.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent event) {\n+                try {\n+                    Image image;\n+                    java.util.List<Image> list = new java.util.ArrayList();\n+                    for (int i = 1; i <= 4; i++) {\n+                        String fileName = fileBase + \"T\" + i + \".gif\";\n+                        image = Toolkit.getDefaultToolkit().getImage(fileName);\n+                        PassFailJFrame.log(\"Loaded image \" + fileName + \". setting to the list for frame\");\n+                        list.add(image);\n+                    }\n+                    setImagesToFrame(list);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+\n+\n+        setImageButton4.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent event) {\n+                try {\n+                    Image image;\n+                    List<Image> list = new ArrayList<>();\n+                    for (int i = 1; i <= 4; i++) {\n+                        String fileName = fileBase + \"T\" + i + \".gif\";\n+                        image = Toolkit.getDefaultToolkit().getImage(fileName);\n+                        PassFailJFrame.log(\"Loaded image \" + fileName + \". setting to the list for dialog\");\n+                        list.add(image);\n+                    }\n+                    setImagesToFD(list);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+\n+\n+        setImageButton5.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent event) {\n+                List<BufferedImage> list = new ArrayList<>();\n+                try {\n+                    Robot robot = new Robot();\n+                    Rectangle rectangle;\n+                    for (int i = 1; i <= 4; i++) {\n+                        rectangle = new Rectangle(i * 10, i * 10, i * 10 + 40, i * 10 + 40);\n+                        java.awt.image.BufferedImage image = robot.createScreenCapture(rectangle);\n+                        robot.delay(100);\n+                        list.add(image);\n+                    }\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                }\n+                PassFailJFrame.log(\"Captured images and set to the list for dialog\");\n+            }\n+        });\n+\n+        setImageButton6.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent event) {\n+                List<BufferedImage> list = new ArrayList<>();\n+                try {\n+                    Robot robot = new Robot();\n+                    Rectangle rectangle;\n+                    for (int i = 1; i <= 4; i++) {\n+                        rectangle = new Rectangle(i * 10, i * 10, i * 10 + 40, i * 10 + 40);\n+                        java.awt.image.BufferedImage image = robot.createScreenCapture(rectangle);\n+                        robot.delay(100);\n+                        list.add(image);\n+                    }\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                }\n+                PassFailJFrame.log(\"Captured images and set to the list for frame\");\n+            }\n+        });\n+\n+        Button buttonLoad = new Button(\"Load Dialog\");\n+        Button buttonSave = new Button(\"Save Dialog\");\n+        Button buttonSimple = new Button(\"Just Dialog\");\n+        buttonLoad.addActionListener(new MyActionListener(FileDialog.LOAD, \"LOAD\"));\n+        buttonSave.addActionListener(new MyActionListener(FileDialog.SAVE, \"SAVE\"));\n+        buttonSimple.addActionListener(new MyActionListener(-1, \"\"));\n+\n+        frame.setSize(400, 400);\n+        frame.setLayout(new FlowLayout());\n+        frame.add(buttonLoad);\n+        frame.add(buttonSave);\n+        frame.add(buttonSimple);\n+        frame.add(setImageButton1);\n+        frame.add(setImageButton2);\n+        frame.add(setImageButton3);\n+        frame.add(setImageButton4);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n+\n+class MyActionListener implements ActionListener {\n+    int id;\n+    String name;\n+\n+    public MyActionListener(int id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    public void actionPerformed(ActionEvent ae) {\n+        try {\n+            FileDialog filedialog;\n+            if (id == -1 && Objects.equals(name, \"\")) {\n+                filedialog = new FileDialog(FileDialogIconTest.frame);\n+            } else {\n+                filedialog = new FileDialog(FileDialogIconTest.frame, name, id);\n+            }\n+            if (FileDialogIconTest.image != null) {\n+                filedialog.setIconImage(FileDialogIconTest.image);\n+            }\n+\n+            if (FileDialogIconTest.images != null) {\n+                filedialog.setIconImages(FileDialogIconTest.images);\n+            }\n+            filedialog.setVisible(true);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogIconTest\/FileDialogIconTest.java","additions":258,"deletions":0,"binary":false,"changes":258,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogIconTest\/T1.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/demo\/share\/jfc\/SwingSet2\/resources\/images\/buttons\/b1.gif","status":"copied"},{"patch":"","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogIconTest\/T2.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/demo\/share\/jfc\/SwingSet2\/resources\/images\/buttons\/b1p.gif","status":"copied"},{"patch":"","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogIconTest\/T3.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/demo\/share\/jfc\/SwingSet2\/resources\/images\/buttons\/b2.gif","status":"copied"},{"patch":"","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogIconTest\/T4.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/demo\/share\/jfc\/SwingSet2\/resources\/images\/buttons\/b3.gif","status":"copied"},{"filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogIconTest\/loading-msg.gif","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Frame;\n+\n+\/*\n+ * @test\n+ * @bug 4779118\n+ * @summary Tests that FileDialog with wrong initial file name\n+ *          doesn't crash when Open button is pressed.\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FileDialogWrongNameCrash\n+ *\/\n+\n+public class FileDialogWrongNameCrash {\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                (This is Windows only test)\n+                1. You should see a frame 'Frame' with button 'Load'. Press button.\",\n+                2. You should see 'Load file' dialog, select any file and press 'Open'\",\n+                   (not 'Cancel'!!!). If Java doesn't crash - press PASS, else FAIL\n+                    \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame initialize() {\n+        Frame frame = new Frame(\"File Dialog Wrong Name Crash Test\");\n+        Button fileButton = new Button(\"Load\");\n+        fileButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent e) {\n+                final java.awt.FileDialog selector =\n+                        new java.awt.FileDialog(frame);\n+                selector.setFile(\"Z:\\\\O2 XDA\\\\LogiTest\\\\\\\\Testcase.xml\");\n+                selector.setVisible(true);\n+            }\n+        });\n+        frame.add(fileButton);\n+        frame.setSize(100, 60);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/FileDialogWrongNameCrash.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Window;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4168481\n+ * @summary Test to verify Dialog getLocation() regression on Solaris\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual GetLocationTest_1\n+ *\/\n+\n+public class GetLocationTest_1 {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Click in in the blue square and the yellow window should come\n+                   up with the top left by the cursor\n+                2. If you see this correct behavior press PASS. If you see that\n+                   the yellow window location is offset by some inset, press FAIL\n+                   \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Dialog initialize() {\n+        Frame f = new Frame(\"Owner Frame\");\n+        ColorComponent blue = new ColorComponent();\n+        blue.setBackground(Color.blue);\n+        blue.setSize(50, 50);\n+\n+        final Dialog dialog = new Dialog(f, \"GetLocation test\");\n+        dialog.setLocation(300, 300);\n+        System.out.println(\"Dialog location = \" + dialog.getLocation());\n+        blue.setLocation(50, 50);\n+        dialog.setLayout(null);\n+        dialog.add(blue);\n+        dialog.setSize(200, 200);\n+\n+        final ColorWindow w = new ColorWindow(f);\n+        w.setSize(50, 50);\n+        w.setBackground(Color.yellow);\n+\n+        blue.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent e) {\n+                PassFailJFrame.log(\"Dialog location = \" + dialog.getLocation());\n+                Point p = e.getPoint();\n+                Component c = e.getComponent();\n+                PassFailJFrame.log(\"Position = \" + p);\n+                convertPointToScreen(p, c);\n+                PassFailJFrame.log(\"Converted to = \" + p);\n+                w.setLocation(p.x, p.y);\n+                w.setVisible(true);\n+            }\n+        });\n+        return dialog;\n+    }\n+\n+    static class ColorComponent extends Component {\n+        public void paint(Graphics g) {\n+            g.setColor(getBackground());\n+            Rectangle bounds = getBounds();\n+            g.fillRect(0, 0, bounds.width, bounds.height);\n+        }\n+    }\n+\n+    static class ColorWindow extends Window {\n+        ColorWindow(Frame f) {\n+            super(f);\n+        }\n+\n+        public void paint(Graphics g) {\n+            g.setColor(getBackground());\n+            Rectangle bounds = getBounds();\n+            g.fillRect(0, 0, bounds.width, bounds.height);\n+        }\n+    }\n+\n+    public static void convertPointToScreen(Point p, Component c) {\n+        do {\n+            Point b = c.getLocation();\n+            PassFailJFrame.log(\"Adding \" + b + \" for \" + c);\n+            p.x += b.x;\n+            p.y += b.y;\n+\n+            if (c instanceof java.awt.Window) {\n+                break;\n+            }\n+            c = c.getParent();\n+        } while (c != null);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/GetLocationTest_1.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}