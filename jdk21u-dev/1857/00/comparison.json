{"files":[{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4247913\n+ * @summary Tests that Label repaints after call Container.validate()\n+ * @run main ContainerValidateTest\n+ *\/\n+\n+public class ContainerValidateTest extends Frame implements MouseListener {\n+    private static Robot robot;\n+    private static Panel currentPanel;\n+    private static Button currentBtn;\n+    private static Panel updatedPanel;\n+    private static Label updatedLabel;\n+    private static TextField updatedTxtField;\n+    private static Button updatedBtn;\n+\n+    private static volatile Rectangle btnBounds;\n+\n+    Panel pnl1 = new Panel();\n+    Panel pnl2 = new Panel();\n+    Label lbl1 = new Label(\"Label 1\");\n+    Label lbl2 = new Label(\"Label 2\");\n+    TextField txt1 = new TextField(\"field1\", 20);\n+    TextField txt2 = new TextField(\"field2\", 20);\n+    Button btn1 = new Button(\"Swap 1\");\n+    Button btn2 = new Button(\"Swap 2\");\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+\n+        ContainerValidateTest containerValidate = new ContainerValidateTest();\n+        EventQueue.invokeAndWait(containerValidate::createAndShowUI);\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+\n+        containerValidate.testUI();\n+    }\n+\n+    private void createAndShowUI() {\n+        this.setTitle(\"ContainerValidateTest Test\");\n+        pnl1.add(lbl1);\n+        pnl1.add(txt1);\n+        pnl1.add(btn1);\n+\n+        pnl2.add(lbl2);\n+        pnl2.add(txt2);\n+        pnl2.add(btn2);\n+\n+        btn1.addMouseListener(this);\n+        btn2.addMouseListener(this);\n+\n+        this.add(pnl1, BorderLayout.CENTER);\n+        pack();\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+    }\n+\n+    private void testUI() throws Exception {\n+        EventQueue.invokeAndWait(() -> btnBounds\n+                = new Rectangle(btn1.getLocationOnScreen().x,\n+                                btn1.getLocationOnScreen().y,\n+                                btn1.getWidth(),\n+                                btn1.getHeight()));\n+        for (int i= 1; i < 4 ; i++) {\n+            EventQueue.invokeAndWait(() -> {\n+                currentPanel = (Panel) this.getComponent(0);\n+                currentBtn = (Button) currentPanel.getComponent(2);\n+            });\n+\n+            robot.mouseMove(btnBounds.x + (int) btnBounds.getWidth() \/ 2,\n+                            btnBounds.y + (int) btnBounds.getHeight() \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            \/\/large delay set for completion of UI validate()\n+            robot.delay(500);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                updatedPanel = (Panel) this.getComponent(0);\n+                updatedLabel = (Label) updatedPanel.getComponent(0);\n+                updatedTxtField = (TextField) updatedPanel.getComponent(1);\n+                updatedBtn = (Button) updatedPanel.getComponent(2);\n+            });\n+            testPanelComponents(currentBtn.getLabel());\n+        }\n+    }\n+\n+    private void testPanelComponents(String btnLabel) {\n+        if (btnLabel.equals(\"Swap 1\")) {\n+            if (!(updatedLabel.getText().equals(lbl2.getText())\n+                  && updatedTxtField.getText().equals(txt2.getText())\n+                  && updatedBtn.getLabel().equals(btn2.getLabel()))) {\n+                throw new RuntimeException(\"Test Failed!! Labels not repainted\"\n+                                           + \" after Container.validate()\");\n+            }\n+        } else {\n+            if (!(updatedLabel.getText().equals(lbl1.getText())\n+                  && updatedTxtField.getText().equals(txt1.getText())\n+                  && updatedBtn.getLabel().equals(btn1.getLabel()))) {\n+                throw new RuntimeException(\"Test Failed!! Labels not repainted\"\n+                                           + \" after Container.validate()\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void mousePressed(MouseEvent evt) {\n+        if (evt.getComponent() instanceof Button btn) {\n+            if (btn.equals(btn1)) {\n+                remove(pnl1);\n+                add(pnl2, BorderLayout.CENTER);\n+            } else {\n+                remove(pnl2);\n+                add(pnl1, BorderLayout.CENTER);\n+            }\n+            invalidate();\n+            validate();\n+        }\n+    }\n+\n+    @Override\n+    public void mouseReleased(MouseEvent e) {}\n+\n+    @Override\n+    public void mouseEntered(MouseEvent e) {}\n+\n+    @Override\n+    public void mouseExited(MouseEvent e) {}\n+\n+    @Override\n+    public void mouseClicked(MouseEvent e) {}\n+}\n","filename":"test\/jdk\/java\/awt\/Label\/ContainerValidateTest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import jdk.test.lib.Platform;\n+\n+\/*\n+ * @test\n+ * @bug 4124697\n+ * @key headful\n+ * @summary Make sure that after setting and then changing the echo\n+ *         character again, the TextField continues to function as expected.\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main SetEchoCharTest\n+ *\/\n+\n+public class SetEchoCharTest {\n+    private static Frame frame;\n+    private static Robot robot;\n+    private static TextField tfPassword;\n+    private static Button btn1;\n+    private static Button btn2;\n+    private static volatile Point btn1Loc;\n+    private static volatile Point btn2Loc;\n+\n+    private static final String CHANGE = \"Change echo char\";\n+    private static final String PRINT = \"Print text\";\n+    private static final String INITIAL_TEXT = \"DefaultPwd\";\n+    private static final String CHANGED_TEXT = \"NewPwd\";\n+    private static final char NEW_ECHO_CHAR = '*';\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+\n+            EventQueue.invokeAndWait(() -> createAndShowUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            testEchoChar();\n+            robot.waitForIdle();\n+            robot.delay(200);\n+\n+            testNewEchoChar();\n+            robot.waitForIdle();\n+            robot.delay(200);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new Frame(\"SetEchoCharTest\");\n+        frame.setLayout(new FlowLayout());\n+\n+        Label label = new Label(\"Pwd:\");\n+        tfPassword = new TextField(INITIAL_TEXT, 10);\n+        tfPassword.setEchoChar('X');\n+        tfPassword.addActionListener((ActionListener) e -> {\n+            if (e.getActionCommand().equals(CHANGED_TEXT)) {\n+                \/\/check the 2nd condition only if ActionEvent\n+                \/\/is triggered by changed text\n+                if (!(tfPassword.getText().equals(CHANGED_TEXT)\n+                    && tfPassword.getEchoChar() == NEW_ECHO_CHAR)) {\n+                    throw new RuntimeException(\"Test Failed!!! TextField not working\"\n+                                               + \" as expected after echo char change\");\n+                }\n+            }\n+        });\n+        frame.add(label);\n+        frame.add(tfPassword);\n+\n+        btn1 = new Button(PRINT);\n+        btn1.addActionListener(new BtnActionListener());\n+        frame.add(btn1);\n+\n+        btn2 = new Button(CHANGE);\n+        btn2.addActionListener(new BtnActionListener());\n+        frame.add(btn2);\n+        frame.setSize(200,200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void testEchoChar() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            btn1Loc = btn1.getLocationOnScreen();\n+            btn2Loc = btn2.getLocationOnScreen();\n+        });\n+\n+        robot.mouseMove(btn1Loc.x + btn1.getWidth() \/ 2,\n+                        btn1Loc.y + btn1.getHeight() \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(1000);\n+\n+        robot.mouseMove(btn2Loc.x + btn2.getWidth() \/ 2,\n+                        btn2Loc.y + btn2.getHeight() \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(1000);\n+    }\n+\n+    private static void testNewEchoChar() {\n+        StringSelection stringSelection = new StringSelection(CHANGED_TEXT);\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        clipboard.setContents(stringSelection, stringSelection);\n+\n+        int ctrlKey = Platform.isOSX() ? KeyEvent.VK_META : KeyEvent.VK_CONTROL;\n+        robot.keyPress(ctrlKey);\n+        robot.keyPress(KeyEvent.VK_V);\n+        robot.keyRelease(KeyEvent.VK_V);\n+        robot.keyRelease(ctrlKey);\n+\n+        robot.keyPress(KeyEvent.VK_ENTER);\n+        robot.keyRelease(KeyEvent.VK_ENTER);\n+    }\n+\n+    private static class BtnActionListener implements ActionListener {\n+        public void actionPerformed(ActionEvent evt) {\n+            String ac = evt.getActionCommand();\n+            if (CHANGE.equals(ac)) {\n+                tfPassword.setText(\"\");\n+                tfPassword.setEchoChar(NEW_ECHO_CHAR);\n+                tfPassword.requestFocus();\n+            }\n+            if (PRINT.equals(ac)) {\n+                if (!tfPassword.getText().equals(INITIAL_TEXT)) {\n+                    throw new RuntimeException(\"Test Failed!!!\"\n+                                               + \" Initial text not as expected\");\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/TextField\/SetEchoCharTest.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.Label;\n+import java.awt.TextField;\n+import javax.swing.JPanel;\n+\n+import jdk.test.lib.Platform;\n+\n+\/*\n+ * @test\n+ * @bug 6191897\n+ * @summary Verifies that ctrl+left\/right does not move word-by-word in a TextField\n+ *          with echo character set\n+ * @library \/java\/awt\/regtesthelpers  \/test\/lib\n+ * @build PassFailJFrame jdk.test.lib.Platform\n+ * @run main\/manual SetEchoCharWordOpsTest\n+ *\/\n+\n+public class SetEchoCharWordOpsTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        String selectAllKey;\n+        String moveKeys;\n+        String selectKeys;\n+\n+        if (Platform.isOSX()) {\n+            selectAllKey = \"Cmd + A\";\n+            moveKeys = \"Alt + Right\/Left\";\n+            selectKeys = \"Shift + Alt + Right\/Left\";\n+        } else {\n+            selectAllKey = \"Ctrl + A\";\n+            moveKeys = \"Ctrl + Right\/Left\";\n+            selectKeys = \"Shift + Ctrl + Right\/Left\";\n+        }\n+\n+        String instructions =\n+                \"The password field (in the bottom panel) in this test contains\"\n+                 + \" a few words (3 words).\\n\"\n+                 + \"Move the focus to the text field and press \" + selectAllKey + \".\\n\"\n+                 + \"Try moving the caret word-by-word with \" + moveKeys + \" or\"\n+                 + \" extending selection with \" + selectKeys + \".\"\n+                 + \" You should NOT be able to do that.\\n\\n\"\n+                 + \"If you are able to move the caret word-by-word press FAIL,\"\n+                 + \" else press PASS.\";\n+\n+        PassFailJFrame.builder()\n+                      .title(\"SetEchoCharClipboard Instructions\")\n+                      .instructions(instructions)\n+                      .rows((int) instructions.lines().count() + 3)\n+                      .columns(45)\n+                      .splitUIBottom(SetEchoCharWordOpsTest::createAndShowUI)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+\n+    private static JPanel createAndShowUI() {\n+        JPanel jPanel = new JPanel();\n+        TextField tf = new TextField(\"one two three\", 15);\n+        Label tfLabel = new Label(\"Password Field:\");\n+\n+        jPanel.setLayout(new FlowLayout());\n+        tf.setEchoChar('*');\n+        jPanel.add(tfLabel);\n+        jPanel.add(tf);\n+        return jPanel;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextField\/SetEchoCharWordOpsTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}