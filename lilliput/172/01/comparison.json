{"files":[{"patch":"@@ -654,0 +654,4 @@\n+    \/\/ Adjust size of the compressed class space.\n+\n+    const size_t res_align = reserve_alignment();\n+\n@@ -659,2 +663,9 @@\n-    size_t max_ccs_size = 8 * (MaxMetaspaceSize \/ 10);\n-    size_t adjusted_ccs_size = MIN2(CompressedClassSpaceSize, max_ccs_size);\n+    const size_t max_ccs_size = 8 * (MaxMetaspaceSize \/ 10);\n+\n+    \/\/ CCS is also limited by the max. possible Klass encoding range size\n+    const size_t max_encoding_range = CompressedKlassPointers::max_encoding_range_size();\n+    assert(max_encoding_range >= res_align,\n+           \"Encoding range (%zu) must cover at least a full root chunk (%zu)\",\n+           max_encoding_range, res_align);\n+\n+    size_t adjusted_ccs_size = MIN3(CompressedClassSpaceSize, max_ccs_size, max_encoding_range);\n@@ -663,3 +674,14 @@\n-    \/\/  root chunk.\n-    adjusted_ccs_size = align_up(adjusted_ccs_size, reserve_alignment());\n-    adjusted_ccs_size = MAX2(adjusted_ccs_size, reserve_alignment());\n+    \/\/  root chunk. But impose a miminum size of 1 root chunk (16MB).\n+    adjusted_ccs_size = MAX2(align_down(adjusted_ccs_size, res_align), res_align);\n+\n+    \/\/ Print a warning if the adjusted size differs from the users input\n+    if (CompressedClassSpaceSize != adjusted_ccs_size) {\n+      #define X \"CompressedClassSpaceSize adjusted from user input \" \\\n+                \"%zu bytes to %zu bytes\", CompressedClassSpaceSize, adjusted_ccs_size\n+      if (FLAG_IS_CMDLINE(CompressedClassSpaceSize)) {\n+        log_warning(metaspace)(X);\n+      } else {\n+        log_info(metaspace)(X);\n+      }\n+      #undef X\n+    }\n@@ -670,1 +692,0 @@\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -51,9 +51,0 @@\n-\/\/ The maximum allowed length of the Klass range (the address range engulfing\n-\/\/ CDS + class space) must not exceed 32-bit.\n-\/\/ There is a theoretical limit of: must not exceed the size of a fully-shifted\n-\/\/ narrow Klass pointer, which would be 32 + 3 = 35 bits in legacy mode;\n-\/\/ however, keeping this size below 32-bit allows us to use decoding techniques\n-\/\/ like 16-bit moves into the third quadrant on some architectures, and keeps\n-\/\/ the code less complex. 32-bit have always been enough for CDS+class space.\n-static constexpr size_t max_klass_range_size = 4 * G;\n-\n@@ -62,0 +53,12 @@\n+\/\/ Returns the maximum encoding range that can be covered with the currently\n+\/\/ chosen nKlassID geometry (nKlass bit size, max shift)\n+size_t CompressedKlassPointers::max_encoding_range_size() {\n+  \/\/ Whatever the nKlass geometry is, we don't support cases where the offset\n+  \/\/ into the Klass encoding range (the shifted nKlass) exceeds 32 bits. That\n+  \/\/ is because many CPU-specific decoding functions use e.g. 16-bit moves to\n+  \/\/ combine base and offset.\n+  constexpr int max_preshifted_nklass_bits = 32;\n+  return nth_bit(MIN2(max_preshifted_nklass_bits,\n+                      narrow_klass_pointer_bits() + max_shift()));\n+}\n+\n@@ -84,4 +87,0 @@\n-  \/\/ There is no technical reason preventing us from using other klass pointer bit lengths,\n-  \/\/ but it should be a deliberate choice\n-  ASSERT_HERE(_narrow_klass_pointer_bits == 32 || _narrow_klass_pointer_bits == 22);\n-\n@@ -98,1 +97,5 @@\n-  ASSERT_HERE(klab >= sizeof(uint64_t) && klab <= K);\n+  \/\/ must be aligned enough hold 64-bit data\n+  ASSERT_HERE(is_aligned(klab, sizeof(uint64_t)));\n+\n+  \/\/ should be smaller than the minimum metaspace chunk size (soft requirement)\n+  ASSERT_HERE(klab <= K);\n@@ -111,1 +114,1 @@\n-                \"Klass range must start at a properly aligned address\");\n+                \"Klass range must start and end at a properly aligned address\");\n@@ -156,4 +159,6 @@\n-  if (len > max_klass_range_size) {\n-    \/\/ Class space size is limited to 3G. This can theoretically happen if the CDS archive\n-    \/\/ is larger than 1G and class space size is set to the maximum possible 3G.\n-    vm_exit_during_initialization(\"Sum of CDS archive size and class space size exceed 4 GB\");\n+  if (len > max_encoding_range_size()) {\n+    stringStream ss;\n+    ss.print(\"Class space size and CDS archive size combined (%zu) \"\n+             \"exceed the maximum possible size (%zu)\",\n+             len, max_encoding_range_size());\n+    vm_exit_during_initialization(ss.base());\n@@ -205,4 +210,5 @@\n-  if (len > max_klass_range_size) {\n-    \/\/ Class space size is limited to 3G. This can theoretically happen if the CDS archive\n-    \/\/ is larger than 1G and class space size is set to the maximum possible 3G.\n-    vm_exit_during_initialization(\"Sum of CDS archive size and class space size exceed 4 GB\");\n+  if (len > max_encoding_range_size()) {\n+    stringStream ss;\n+    ss.print(\"Class space size (%zu) exceeds the maximum possible size (%zu)\",\n+              len, max_encoding_range_size());\n+    vm_exit_during_initialization(ss.base());\n@@ -220,5 +226,0 @@\n-    \/\/ This handles the case that we - experimentally - reduce the number of\n-    \/\/ class pointer bits further, such that (shift + num bits) < 32.\n-    assert(len <= (size_t)nth_bit(narrow_klass_pointer_bits() + max_shift()),\n-           \"klass range size exceeds encoding\");\n-\n@@ -233,9 +234,4 @@\n-    if (TinyClassPointerShift != 0) {\n-      _shift = TinyClassPointerShift;\n-    } else {\n-      constexpr int log_cacheline = 6;\n-      int s = max_shift();\n-      while (s > log_cacheline && ((size_t)nth_bit(narrow_klass_pointer_bits() + s - 1) > len)) {\n-        s--;\n-      }\n-      _shift = s;\n+    constexpr int log_cacheline = 6;\n+    int s = max_shift();\n+    while (s > log_cacheline && ((size_t)nth_bit(narrow_klass_pointer_bits() + s - 1) > len)) {\n+      s--;\n@@ -243,0 +239,1 @@\n+    _shift = s;\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":34,"deletions":37,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -136,0 +136,4 @@\n+  \/\/ Returns the maximum encoding range that can be covered with the currently\n+  \/\/ choosen nKlassID geometry (nKlass bit size, max shift)\n+  static size_t max_encoding_range_size();\n+\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,2 +134,0 @@\n-  develop(int, TinyClassPointerShift, 0, \"\")                                \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}