{"files":[{"patch":"@@ -592,1 +592,1 @@\n-        int offset = orig_klass->hash_offset_in_bytes(orig_mirror);\n+        int offset = orig_klass->hash_offset_in_bytes(orig_mirror, mark);\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-    return get_instanceKlass()->hash_offset_in_bytes(nullptr);\n+    return get_instanceKlass()->hash_offset_in_bytes(nullptr, markWord(0));\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-        if (fwd_mark.is_expanded() && klass->expand_for_hash(fwd)) {\n+        if (fwd_mark.is_expanded() && klass->expand_for_hash(fwd, fwd_mark)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahForwarding.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-int ArrayKlass::hash_offset_in_bytes(oop obj) const {\n+int ArrayKlass::hash_offset_in_bytes(oop obj, markWord m) const {\n@@ -308,1 +308,2 @@\n-  return ary->base_offset_in_bytes(type) + (ary->length() << log2_element_size());\n+  int length = LP64_ONLY(m.array_length()) NOT_LP64(ary->length());\n+  return ary->base_offset_in_bytes(type) + (length << log2_element_size());\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-  int hash_offset_in_bytes(oop obj) const;\n+  int hash_offset_in_bytes(oop obj, markWord m) const;\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -952,1 +952,1 @@\n-  virtual int hash_offset_in_bytes(oop obj) const {\n+  virtual int hash_offset_in_bytes(oop obj, markWord m) const {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-int InstanceMirrorKlass::hash_offset_in_bytes(oop obj) const {\n+int InstanceMirrorKlass::hash_offset_in_bytes(oop obj, markWord m) const {\n@@ -90,1 +90,1 @@\n-  return checked_cast<int>(obj->base_size_given_klass(obj->mark(), this) * BytesPerWord);\n+  return checked_cast<int>(obj->base_size_given_klass(m, this) * BytesPerWord);\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  int hash_offset_in_bytes(oop obj) const;\n+  int hash_offset_in_bytes(oop obj, markWord m) const;\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1339,1 +1339,1 @@\n-bool Klass::expand_for_hash(oop obj) const {\n+bool Klass::expand_for_hash(oop obj, markWord m) const {\n@@ -1341,2 +1341,5 @@\n-  assert((size_t)hash_offset_in_bytes(obj) <= (obj->base_size_given_klass(obj->mark(), this) * HeapWordSize), \"hash offset must be eq or lt base size: hash offset: %d, base size: %zu\", hash_offset_in_bytes(obj), obj->base_size_given_klass(obj->mark(), this) * HeapWordSize);\n-  return obj->base_size_given_klass(obj->mark(), this) * HeapWordSize - hash_offset_in_bytes(obj) < (int)sizeof(uint32_t);\n+  {\n+    ResourceMark rm;\n+    assert((size_t)hash_offset_in_bytes(obj,m ) <= (obj->base_size_given_klass(m, this) * HeapWordSize), \"hash offset must be eq or lt base size: hash offset: %d, base size: %zu, class-name: %s\", hash_offset_in_bytes(obj, m), obj->base_size_given_klass(m, this) * HeapWordSize, external_name());\n+  }\n+  return obj->base_size_given_klass(m, this) * HeapWordSize - hash_offset_in_bytes(obj, m) < (int)sizeof(uint32_t);\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -794,1 +794,1 @@\n-  virtual int hash_offset_in_bytes(oop obj) const = 0;\n+  virtual int hash_offset_in_bytes(oop obj, markWord m) const = 0;\n@@ -797,1 +797,1 @@\n-  bool expand_for_hash(oop obj) const;\n+  bool expand_for_hash(oop obj, markWord m) const;\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-  int offset = k->hash_offset_in_bytes(cast_to_oop(this));\n+  int offset = k->hash_offset_in_bytes(cast_to_oop(this), m);\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-    if (mrk.is_expanded() && kls->expand_for_hash(cast_to_oop(this))) {\n+    if (mrk.is_expanded() && kls->expand_for_hash(cast_to_oop(this), mrk)) {\n@@ -216,1 +216,1 @@\n-    if (mark.is_hashed_not_expanded() && klass->expand_for_hash(cast_to_oop(this))) {\n+    if (mark.is_hashed_not_expanded() && klass->expand_for_hash(cast_to_oop(this), mark)) {\n@@ -228,1 +228,1 @@\n-    if (mark.is_hashed_not_expanded() && klass->expand_for_hash(cast_to_oop(this))) {\n+    if (mark.is_hashed_not_expanded() && klass->expand_for_hash(cast_to_oop(this), mark)) {\n@@ -231,1 +231,1 @@\n-    if (mark.is_not_hashed_expanded() && klass->expand_for_hash(cast_to_oop(this))) {\n+    if (mark.is_not_hashed_expanded() && klass->expand_for_hash(cast_to_oop(this), mark)) {\n@@ -518,1 +518,1 @@\n-      return int_field(klass->hash_offset_in_bytes(cast_to_oop(this)));\n+      return int_field(klass->hash_offset_in_bytes(cast_to_oop(this), mrk));\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1235,1 +1235,1 @@\n-    return obj->int_field(klass->hash_offset_in_bytes(obj));\n+    return obj->int_field(klass->hash_offset_in_bytes(obj, mark));\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -999,1 +999,1 @@\n-        int offset = mark.klass()->hash_offset_in_bytes(obj);\n+        int offset = mark.klass()->hash_offset_in_bytes(obj, mark);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}