{"files":[{"patch":"@@ -578,1 +578,1 @@\n-inline bool LightweightSynchronizer::check_unlocked(oop obj, LockStack& lock_stack, JavaThread* current) {\n+inline bool LightweightSynchronizer::fast_lock_try_enter(oop obj, LockStack& lock_stack, JavaThread* current) {\n@@ -635,1 +635,1 @@\n-    if (check_unlocked(obj, lock_stack, current)) return true;\n+    if (fast_lock_try_enter(obj, lock_stack, current)) return true;\n@@ -708,1 +708,1 @@\n-    if (check_unlocked(obj(), lock_stack, current)) {\n+    if (fast_lock_try_enter(obj(), lock_stack, current)) {\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  static inline bool check_unlocked(oop obj, LockStack& lock_stack, JavaThread* current);\n+  static inline bool fast_lock_try_enter(oop obj, LockStack& lock_stack, JavaThread* current);\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -385,20 +385,6 @@\n-  if (LockingMode == LM_LIGHTWEIGHT) {\n-    \/\/ TryLock avoids the CAS\n-    TryLockResult r = TryLock(current);\n-    if (r == TryLockResult::Success) {\n-      assert(_recursions == 0, \"invariant\");\n-      return true;\n-    }\n-\n-    if (r == TryLockResult::HasOwner && owner() == current) {\n-      _recursions++;\n-      return true;\n-    }\n-    return false;\n-\n-  } else {\n-    void* cur = try_set_owner_from(nullptr, current);\n-    if (cur == nullptr) {\n-      assert(_recursions == 0, \"invariant\");\n-      return true;\n-    }\n+  \/\/ TryLock avoids the CAS\n+  TryLockResult r = TryLock(current);\n+  if (r == TryLockResult::Success) {\n+    assert(_recursions == 0, \"invariant\");\n+    return true;\n+  }\n@@ -406,4 +392,4 @@\n-    if (cur == current) {\n-      _recursions++;\n-      return true;\n-    }\n+  if (r == TryLockResult::HasOwner && owner() == current) {\n+    _recursions++;\n+    return true;\n+  }\n@@ -411,6 +397,6 @@\n-    if (LockingMode == LM_LEGACY && current->is_lock_owned((address)cur)) {\n-      assert(_recursions == 0, \"internal state error\");\n-      _recursions = 1;\n-      set_owner_from_BasicLock(cur, current);  \/\/ Convert from BasicLock* to Thread*.\n-      return true;\n-    }\n+  void* cur = owner_raw();\n+  if (LockingMode == LM_LEGACY && current->is_lock_owned((address)cur)) {\n+    assert(_recursions == 0, \"internal state error\");\n+    _recursions = 1;\n+    set_owner_from_BasicLock(cur, current);  \/\/ Convert from BasicLock* to Thread*.\n+    return true;\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":16,"deletions":30,"binary":false,"changes":46,"status":"modified"}]}