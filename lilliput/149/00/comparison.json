{"files":[{"patch":"@@ -283,3 +283,3 @@\n-  oop old = task.to_source_array();\n-  assert(old->forward_safe_klass()->is_objArray_klass(), \"invariant\");\n-  assert(old->is_forwarded(), \"invariant\");\n+  oop const from_obj = task.to_source_array();\n+  assert(from_obj->is_forwarded(), \"invariant\");\n+  assert(from_obj->forwardee()->is_objArray(), \"invariant\");\n@@ -287,1 +287,1 @@\n-  TASKQUEUE_STATS_ONLY(++_array_chunks_processed);\n+  objArrayOop to_obj = objArrayOop(from_obj->forwardee());\n@@ -289,1 +289,1 @@\n-  oop const obj = old->forwardee();\n+  TASKQUEUE_STATS_ONLY(++_array_chunks_processed);\n@@ -292,1 +292,1 @@\n-  int const end = arrayOop(old)->length();\n+  int const end = to_obj->length();\n@@ -297,2 +297,2 @@\n-    arrayOop(old)->set_length(start);\n-    push_depth(ScannerTask(PartialArrayScanTask(old)));\n+    to_obj->set_length(start);\n+    push_depth(ScannerTask(PartialArrayScanTask(from_obj)));\n@@ -303,2 +303,2 @@\n-    int const actual_length = arrayOop(obj)->length();\n-    arrayOop(old)->set_length(actual_length);\n+    int const actual_length = arrayOop(from_obj)->length();\n+    arrayOop(to_obj)->set_length(actual_length);\n@@ -308,1 +308,1 @@\n-    process_array_chunk_work<narrowOop>(obj, start, end);\n+    process_array_chunk_work<narrowOop>(to_obj, start, end);\n@@ -310,1 +310,1 @@\n-    process_array_chunk_work<oop>(obj, start, end);\n+    process_array_chunk_work<oop>(to_obj, start, end);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -222,11 +222,0 @@\n-\n-#ifdef ASSERT\n-bool oopDesc::size_might_change() {\n-  \/\/ UseParallelGC and UseG1GC can change the length field\n-  \/\/ of an \"old copy\" of an object array in the young gen so it indicates\n-  \/\/ the grey portion of an already copied array. This will cause the first\n-  \/\/ disjunct below to fail if the two comparands are computed across such\n-  \/\/ a concurrent change.\n-  return Universe::heap()->is_gc_active() && is_objArray() && is_forwarded() && (UseParallelGC || UseG1GC);\n-}\n-#endif\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -381,2 +381,0 @@\n-\n-  DEBUG_ONLY(bool size_might_change();)\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-      assert(s == klass->oop_size(this) || size_might_change(), \"wrong array object size\");\n+      assert(s == klass->oop_size(this), \"wrong array object size\");\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}