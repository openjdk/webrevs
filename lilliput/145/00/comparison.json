{"files":[{"patch":"@@ -133,1 +133,1 @@\n-# Param2 - _nocoops, or empty\n+# Param2 - _nocoops, _coh, _nocoops_coh, or empty\n@@ -135,2 +135,8 @@\n-  $1_$2_DUMP_EXTRA_ARG := $(if $(filter _nocoops, $2),-XX:-UseCompressedOops,)\n-  $1_$2_DUMP_TYPE      := $(if $(filter _nocoops, $2),-NOCOOPS,)\n+  $1_$2_COOPS_OPTION := $(if $(findstring _nocoops, $2),-XX:-UseCompressedOops)\n+  # enable and also explicitly disable coh as needed.\n+  ifeq ($(call isTargetCpuBits, 64), true)\n+    $1_$2_COH_OPTION := -XX:+UnlockExperimentalVMOptions \\\n+                        $(if $(findstring _coh, $2),-XX:+UseCompactObjectHeaders,-XX:-UseCompactObjectHeaders)\n+  endif\n+  $1_$2_DUMP_EXTRA_ARG := $$($1_$2_COOPS_OPTION) $$($1_$2_COH_OPTION)\n+  $1_$2_DUMP_TYPE      := $(if $(findstring _nocoops, $2),-NOCOOPS,)$(if $(findstring _coh, $2),-COH,)\n@@ -183,0 +189,8 @@\n+    ifeq ($(BUILD_CDS_ARCHIVE_COH), true)\n+      $(foreach v, $(JVM_VARIANTS), \\\n+        $(eval $(call CreateCDSArchive,$v,_coh)) \\\n+      )\n+      $(foreach v, $(JVM_VARIANTS), \\\n+        $(eval $(call CreateCDSArchive,$v,_nocoops_coh)) \\\n+      )\n+    endif\n","filename":"make\/Images.gmk","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -263,0 +263,1 @@\n+JDKOPT_ENABLE_DISABLE_CDS_ARCHIVE_COH\n","filename":"make\/autoconf\/configure.ac","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -670,0 +670,25 @@\n+################################################################################\n+#\n+# Enable or disable the default CDS archive generation for Compact Object Headers (Lilliput)\n+#\n+AC_DEFUN([JDKOPT_ENABLE_DISABLE_CDS_ARCHIVE_COH],\n+[\n+  UTIL_ARG_ENABLE(NAME: cds-archive-coh, DEFAULT: auto, RESULT: BUILD_CDS_ARCHIVE_COH,\n+      DESC: [enable generation of default CDS archives for compact object headers (requires --enable-cds-archive)],\n+      DEFAULT_DESC: [auto],\n+      CHECKING_MSG: [if default CDS archives for compact object headers should be generated],\n+      CHECK_AVAILABLE: [\n+        AC_MSG_CHECKING([if CDS archive with compact object headers is available])\n+        if test \"x$BUILD_CDS_ARCHIVE\" = \"xfalse\"; then\n+          AC_MSG_RESULT([no (CDS default archive generation is disabled)])\n+          AVAILABLE=false\n+        elif test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+          AC_MSG_RESULT([no (not possible with 32-bit build)])\n+          AVAILABLE=false\n+        else\n+          AC_MSG_RESULT([yes])\n+        fi\n+      ])\n+  AC_SUBST(BUILD_CDS_ARCHIVE_COH)\n+])\n+\n","filename":"make\/autoconf\/jdk-options.m4","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -371,0 +371,1 @@\n+BUILD_CDS_ARCHIVE_COH := @BUILD_CDS_ARCHIVE_COH@\n","filename":"make\/autoconf\/spec.gmk.template","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -73,7 +73,14 @@\n-    size_t jvm_path_len = strlen(jvm_path);\n-    size_t file_sep_len = strlen(os::file_separator());\n-    const size_t len = jvm_path_len + file_sep_len + 20;\n-    _default_archive_path = NEW_C_HEAP_ARRAY(char, len, mtArguments);\n-    jio_snprintf(_default_archive_path, len,\n-                LP64_ONLY(!UseCompressedOops ? \"%s%sclasses_nocoops.jsa\":) \"%s%sclasses.jsa\",\n-                jvm_path, os::file_separator());\n+    stringStream tmp;\n+    tmp.print(\"%s%sclasses\", jvm_path, os::file_separator());\n+#ifdef _LP64\n+    if (!UseCompressedOops) {\n+      tmp.print_raw(\"_nocoops\");\n+    }\n+    if (UseCompactObjectHeaders) {\n+      \/\/ Note that generation of xxx_coh.jsa variants require\n+      \/\/ --enable-cds-archive-coh at build time\n+      tmp.print_raw(\"_coh\");\n+    }\n+#endif\n+    tmp.print_raw(\".jsa\");\n+    _default_archive_path = os::strdup(tmp.base());\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test id=nocoops_nocoh\n+ * @summary Test Loading of default archives in all configurations\n+ * @requires vm.cds\n+ * @requires vm.bits == 64\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestDefaultArchiveLoading nocoops_nocoh\n+ *\/\n+\n+\/**\n+ * @test id=nocoops_coh\n+ * @summary Test Loading of default archives in all configurations (requires --enable-cds-archive-coh)\n+ * @requires vm.cds\n+ * @requires vm.bits == 64\n+ * @requires !vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestDefaultArchiveLoading nocoops_coh\n+ *\/\n+\n+\/**\n+ * @test id=coops_nocoh\n+ * @summary Test Loading of default archives in all configurations\n+ * @requires vm.cds\n+ * @requires vm.bits == 64\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestDefaultArchiveLoading coops_nocoh\n+ *\/\n+\n+\/**\n+ * @test id=coops_coh\n+ * @summary Test Loading of default archives in all configurations (requires --enable-cds-archive-coh)\n+ * @requires vm.cds\n+ * @requires vm.bits == 64\n+ * @requires !vm.gc.ZGenerational\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestDefaultArchiveLoading coops_coh\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jtreg.SkippedException;\n+\n+public class TestDefaultArchiveLoading {\n+    public static void main(String[] args) throws Exception {\n+\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"Expected argument\");\n+        }\n+\n+        String archiveSuffix;\n+        char coh, coops;\n+\n+        switch (args[0]) {\n+            case \"nocoops_nocoh\":\n+                coh = coops = '-';\n+                archiveSuffix = \"_nocoops\";\n+                break;\n+            case \"nocoops_coh\":\n+                coops = '-';\n+                coh = '+';\n+                archiveSuffix = \"_nocoops_coh\";\n+                break;\n+            case \"coops_nocoh\":\n+                coops = '+';\n+                coh = '-';\n+                archiveSuffix = \"\";\n+                break;\n+            case \"coops_coh\":\n+                coh = coops = '+';\n+                archiveSuffix = \"_coh\";\n+                break;\n+            default: throw new RuntimeException(\"Invalid argument \" + args[0]);\n+        }\n+\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                \"-XX:+UnlockExperimentalVMOptions\",\n+                \"-XX:\" + coh + \"UseCompactObjectHeaders\",\n+                \"-XX:\" + coops + \"UseCompressedOops\",\n+                \"-Xlog:cds\",\n+                \"-Xshare:on\", \/\/ fail if we cannot load archive\n+                \"-version\");\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+\n+        output.shouldContain(\"classes\" + archiveSuffix + \".jsa\");\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/TestDefaultArchiveLoading.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}