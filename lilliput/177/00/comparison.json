{"files":[{"patch":"@@ -2001,3 +2001,2 @@\n-  product(int, OMSpins, 20, \"\")                                             \\\n-                                                                            \\\n-  product(int, OMYields, 5, \"\")                                             \\\n+  product(int, OMSpins, 13, \"\")                                             \\\n+          range(1, 30)                                                      \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -42,0 +43,1 @@\n+#include \"runtime\/safepointMechanism.inline.hpp\"\n@@ -608,0 +610,3 @@\n+  \/\/ Used when deflation is observed. Progress here requires progress\n+  \/\/ from the deflator. After observing the that the deflator is not\n+  \/\/ making progress (after two yields), switch to sleeping.\n@@ -631,2 +636,3 @@\n-  const int spins = OMSpins;\n-  const int yields = OMYields;\n+  \/\/ Will spin with exponential backoff with an accumulative O(2^spin_limit) spins.\n+  const int log_spin_limit = os::is_MP() ? OMSpins : 1;\n+  const int log_min_safepoint_check_interval = 10;\n@@ -635,2 +641,0 @@\n-\n-    SpinYield fast_lock_spin_yield(spins, yields);\n@@ -638,1 +642,1 @@\n-    markWord mark = obj()->mark_acquire();\n+    markWord mark = obj()->mark();\n@@ -640,1 +644,19 @@\n-    for (int attempts = spins + yields; try_spin && attempts > 0; attempts--) {\n+    \/\/ Always attempt to lock once even when safepoint synchronizing.\n+    bool should_process = false;\n+    for (int i = 0; try_spin && !should_process && i < log_spin_limit; i++) {\n+      \/\/ Spin with exponential backoff.\n+      const int total_spin_count = 1 << i;\n+      const int inner_spin_count = MIN2(1 << log_min_safepoint_check_interval, total_spin_count);\n+      const int outer_spin_count = total_spin_count \/ inner_spin_count;\n+      for (int outer = 0; outer < outer_spin_count; outer++) {\n+        should_process = SafepointMechanism::should_process(current);\n+        if (should_process) {\n+          \/\/ Stop spinning for safepoint.\n+          break;\n+        }\n+        for (int inner = 1; inner < inner_spin_count; inner++) {\n+          SpinPause();\n+        }\n+      }\n+\n+      mark = obj()->mark();\n@@ -655,3 +677,0 @@\n-\n-      fast_lock_spin_yield.wait();\n-      mark = obj()->mark_acquire();\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":28,"deletions":9,"binary":false,"changes":37,"status":"modified"}]}