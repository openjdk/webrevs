{"files":[{"patch":"@@ -511,0 +511,33 @@\n+class LightweightSynchronizer::CacheSetter : StackObj {\n+  JavaThread* const _thread;\n+  BasicLock* const _lock;\n+  ObjectMonitor* _monitor;\n+\n+  NONCOPYABLE(CacheSetter);\n+\n+public:\n+  CacheSetter(JavaThread* thread, BasicLock* lock) :\n+    _thread(thread),\n+    _lock(lock),\n+    _monitor(nullptr) {}\n+\n+  ~CacheSetter() {\n+    if (_monitor != nullptr) {\n+      _thread->om_set_monitor_cache(_monitor);\n+      if (_lock != nullptr) {\n+        _lock->set_displaced_header(_monitor);\n+      }\n+    } else {\n+      if (_lock != nullptr) {\n+        _lock->clear_displaced_header();\n+      }\n+    }\n+  }\n+\n+  void set_monitor(ObjectMonitor* monitor) {\n+    assert(_monitor == nullptr, \"only set once\");\n+    _monitor = monitor;\n+  }\n+\n+};\n+\n@@ -545,1 +578,1 @@\n-  lock->clear_displaced_header();\n+  CacheSetter cache_setter(locking_thread, lock);\n@@ -549,1 +582,1 @@\n-  bool entered = false;\n+  ObjectMonitor* monitor = nullptr;\n@@ -551,4 +584,3 @@\n-    ObjectMonitor* mon = inflate_fast_locked_object(obj(), locking_thread, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n-    entered = mon->enter_for(locking_thread);\n-    locking_thread->om_set_monitor_cache(mon);\n-    lock->set_displaced_header(mon);\n+    monitor = inflate_fast_locked_object(obj(), locking_thread, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n+    bool entered = monitor->enter_for(locking_thread);\n+    assert(entered, \"recursive ObjectMonitor::enter_for must succeed\");\n@@ -560,1 +592,1 @@\n-    entered = inflate_and_enter(obj(), lock, locking_thread, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n+    monitor = inflate_and_enter(obj(), locking_thread, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n@@ -563,1 +595,2 @@\n-  assert(entered, \"LightweightSynchronizer::enter_for must succeed\");\n+  assert(monitor != nullptr, \"LightweightSynchronizer::enter_for must succeed\");\n+  cache_setter.set_monitor(monitor);\n@@ -576,10 +609,1 @@\n-  if (lock != nullptr) {\n-    \/\/ This is cleared in the interpreter\n-    \/\/ TODO[OMWorld]: All paths should have cleared this, assert it is 0\n-    \/\/                instead of clearing it here. Should maybe only be for\n-    \/\/                c++ ObjectLocks and compiler re-lock (check this)\n-    \/\/                Also double check JNI interactions, JNI does not have\n-    \/\/                a slot, so no cache, but is there a problem if JNI first\n-    \/\/                followed by recursive monitor enter exit\n-    lock->clear_displaced_header();\n-  }\n+  CacheSetter cache_setter(current, lock);\n@@ -603,7 +627,2 @@\n-    ObjectMonitor* mon = inflate_fast_locked_object(obj(), current, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n-    bool entered = false;\n-    entered = mon->enter(current);\n-    current->om_set_monitor_cache(mon);\n-    if (lock != nullptr) {\n-      lock->set_displaced_header(mon);\n-    }\n+    ObjectMonitor* monitor = inflate_fast_locked_object(obj(), current, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n+    bool entered = monitor->enter(current);\n@@ -611,0 +630,1 @@\n+    cache_setter.set_monitor(monitor);\n@@ -647,1 +667,3 @@\n-    if (inflate_and_enter(obj(), lock, current, current, ObjectSynchronizer::inflate_cause_monitor_enter)) {\n+    ObjectMonitor* monitor = inflate_and_enter(obj(), current, current, ObjectSynchronizer::inflate_cause_monitor_enter);\n+    if (monitor != nullptr) {\n+      cache_setter.set_monitor(monitor);\n@@ -816,1 +838,1 @@\n-bool LightweightSynchronizer::inflate_and_enter(oop object, BasicLock* lock, JavaThread* locking_thread, JavaThread* current, const ObjectSynchronizer::InflateCause cause) {\n+ObjectMonitor* LightweightSynchronizer::inflate_and_enter(oop object, JavaThread* locking_thread, JavaThread* current, const ObjectSynchronizer::InflateCause cause) {\n@@ -842,5 +864,1 @@\n-    locking_thread->om_set_monitor_cache(monitor);\n-    if (lock != nullptr) {\n-      lock->set_displaced_header(monitor);\n-    }\n-    return true;\n+    return monitor;\n@@ -876,1 +894,1 @@\n-    return false;\n+    return nullptr;\n@@ -941,5 +959,0 @@\n-    \/\/ Update the thread-local cache\n-    locking_thread->om_set_monitor_cache(monitor);\n-    if (lock != nullptr) {\n-      lock->set_displaced_header(monitor);\n-    }\n@@ -948,1 +961,1 @@\n-    return true;\n+    return monitor;\n@@ -954,7 +967,1 @@\n-      \/\/ Update the thread-local cache\n-      locking_thread->om_set_monitor_cache(monitor);\n-      if (lock != nullptr) {\n-        lock->set_displaced_header(monitor);\n-      }\n-\n-      return true;\n+      return monitor;\n@@ -977,7 +984,1 @@\n-  \/\/ Update the thread-local cache\n-  locking_thread->om_set_monitor_cache(monitor);\n-  if (lock != nullptr) {\n-    lock->set_displaced_header(monitor);\n-  }\n-\n-  return true;\n+  return monitor;\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":54,"deletions":53,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+  class CacheSetter;\n+\n@@ -62,1 +64,1 @@\n-  static bool inflate_and_enter(oop object, BasicLock* lock, JavaThread* locking_thread, JavaThread* current, const ObjectSynchronizer::InflateCause cause);\n+  static ObjectMonitor* inflate_and_enter(oop object, JavaThread* locking_thread, JavaThread* current, const ObjectSynchronizer::InflateCause cause);\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-      entered = LightweightSynchronizer::inflate_and_enter(obj(), nullptr, current, current, inflate_cause_jni_enter);\n+      entered = LightweightSynchronizer::inflate_and_enter(obj(), current, current, inflate_cause_jni_enter) != nullptr;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}