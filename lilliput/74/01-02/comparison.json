{"files":[{"patch":"@@ -3931,2 +3931,3 @@\n-      \/\/ If the owner is anonymous, we need to fix it -- in the slow-path.\n-      __ ldr(disp_hdr, Address(tmp, ObjectMonitor::owner_offset_in_bytes()));\n+      \/\/ If the owner is anonymous, we need to fix it -- in an outline stub.\n+      Register tmp2 = disp_hdr;\n+      __ ldr(tmp2, Address(tmp, ObjectMonitor::owner_offset_in_bytes()));\n@@ -3935,2 +3936,2 @@\n-      __ tst(disp_hdr, (uint64_t)(intptr_t) ANONYMOUS_OWNER);\n-      C2FixAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2FixAnonOMOwnerStub(tmp, disp_hdr);\n+      __ tst(tmp2, (uint64_t)(intptr_t) ANONYMOUS_OWNER);\n+      C2HandleAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2HandleAnonOMOwnerStub(tmp, rthread, tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-int C2FixAnonOMOwnerStub::max_size() const {\n+int C2HandleAnonOMOwnerStub::max_size() const {\n@@ -82,1 +82,1 @@\n-void C2FixAnonOMOwnerStub::emit(C2_MacroAssembler& masm) {\n+void C2HandleAnonOMOwnerStub::emit(C2_MacroAssembler& masm) {\n@@ -85,0 +85,1 @@\n+  Register thr = thread();\n@@ -86,0 +87,1 @@\n+  assert(t != noreg, \"need tmp register\");\n@@ -88,1 +90,1 @@\n-  __ str(rthread, Address(mon, ObjectMonitor::owner_offset_in_bytes()));\n+  __ str(thr, Address(mon, ObjectMonitor::owner_offset_in_bytes()));\n@@ -91,1 +93,1 @@\n-  __ ldr(t, Address(rthread, JavaThread::lock_stack_current_offset()));\n+  __ ldr(t, Address(thr, JavaThread::lock_stack_current_offset()));\n@@ -93,1 +95,1 @@\n-  __ str(t, Address(rthread, JavaThread::lock_stack_current_offset()));\n+  __ str(t, Address(thr, JavaThread::lock_stack_current_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_CodeStubs_aarch64.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-int C2FixAnonOMOwnerStub::max_size() const {\n+int C2HandleAnonOMOwnerStub::max_size() const {\n@@ -92,1 +92,1 @@\n-void C2FixAnonOMOwnerStub::emit(C2_MacroAssembler& masm) {\n+void C2HandleAnonOMOwnerStub::emit(C2_MacroAssembler& masm) {\n@@ -95,2 +95,3 @@\n-  __ movptr(Address(mon, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), r15_thread);\n-  __ subptr(Address(r15_thread, JavaThread::lock_stack_current_offset()), oopSize);\n+  Register thr = thread();\n+  __ movptr(Address(mon, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), thr);\n+  __ subptr(Address(thr, JavaThread::lock_stack_current_offset()), oopSize);\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -816,2 +816,1 @@\n-#ifdef _LP64\n-      C2FixAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2FixAnonOMOwnerStub(tmpReg);\n+      C2HandleAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2HandleAnonOMOwnerStub(tmpReg, thread);\n@@ -821,3 +820,0 @@\n-#else\n-      jcc(Assembler::notEqual, NO_COUNT);\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-class C2FixAnonOMOwnerStub : public C2CodeStub {\n+class C2HandleAnonOMOwnerStub : public C2CodeStub {\n@@ -101,0 +101,1 @@\n+  Register _thread;\n@@ -103,2 +104,2 @@\n-  C2FixAnonOMOwnerStub(Register monitor, Register tmp = noreg) : C2CodeStub(),\n-    _monitor(monitor), _tmp(tmp) {}\n+  C2HandleAnonOMOwnerStub(Register monitor, Register thread, Register tmp = noreg) : C2CodeStub(),\n+    _monitor(monitor), _thread(thread), _tmp(tmp) {}\n@@ -106,1 +107,2 @@\n-  Register tmp() { return _tmp; }\n+  Register thread()  { return _thread; }\n+  Register tmp()     { return _tmp; }\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}