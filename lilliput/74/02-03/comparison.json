{"files":[{"patch":"@@ -3937,1 +3937,1 @@\n-      C2HandleAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2HandleAnonOMOwnerStub(tmp, rthread, tmp2);\n+      C2HandleAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2HandleAnonOMOwnerStub(tmp, tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-  Register thr = thread();\n@@ -90,1 +89,1 @@\n-  __ str(thr, Address(mon, ObjectMonitor::owner_offset_in_bytes()));\n+  __ str(rthread, Address(mon, ObjectMonitor::owner_offset_in_bytes()));\n@@ -93,1 +92,1 @@\n-  __ ldr(t, Address(thr, JavaThread::lock_stack_current_offset()));\n+  __ ldr(t, Address(rthread, JavaThread::lock_stack_current_offset()));\n@@ -95,1 +94,1 @@\n-  __ str(t, Address(thr, JavaThread::lock_stack_current_offset()));\n+  __ str(t, Address(rthread, JavaThread::lock_stack_current_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_CodeStubs_aarch64.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -95,3 +95,2 @@\n-  Register thr = thread();\n-  __ movptr(Address(mon, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), thr);\n-  __ subptr(Address(thr, JavaThread::lock_stack_current_offset()), oopSize);\n+  __ movptr(Address(mon, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), r15_thread);\n+  __ subptr(Address(r15_thread, JavaThread::lock_stack_current_offset()), oopSize);\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -816,1 +816,2 @@\n-      C2HandleAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2HandleAnonOMOwnerStub(tmpReg, thread);\n+#ifdef _LP64\n+      C2HandleAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2HandleAnonOMOwnerStub(tmpReg);\n@@ -820,0 +821,5 @@\n+#else\n+      \/\/ We can't easily implement this optimization on 32 bit because we don't have a thread register.\n+      \/\/ Call the slow-path instead.\n+      jcc(Assembler::notEqual, NO_COUNT);\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -101,1 +101,0 @@\n-  Register _thread;\n@@ -104,2 +103,2 @@\n-  C2HandleAnonOMOwnerStub(Register monitor, Register thread, Register tmp = noreg) : C2CodeStub(),\n-    _monitor(monitor), _thread(thread), _tmp(tmp) {}\n+  C2HandleAnonOMOwnerStub(Register monitor, Register tmp = noreg) : C2CodeStub(),\n+    _monitor(monitor), _tmp(tmp) {}\n@@ -107,1 +106,0 @@\n-  Register thread()  { return _thread; }\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}