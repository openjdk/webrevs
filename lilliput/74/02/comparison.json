{"files":[{"patch":"@@ -3931,7 +3931,10 @@\n-      \/\/ If the owner is anonymous, we need to fix it -- in the slow-path.\n-      __ ldr(disp_hdr, Address(tmp, ObjectMonitor::owner_offset_in_bytes()));\n-      \/\/ We cannot use tbnz here: tbnz would leave the condition flags untouched,\n-      \/\/ but we want to carry-over the NE condition to the exit at the cont label,\n-      \/\/ in order to take the slow-path.\n-      __ tst(disp_hdr, (uint64_t)(intptr_t) ANONYMOUS_OWNER);\n-      __ br(Assembler::NE, no_count);\n+      \/\/ If the owner is anonymous, we need to fix it -- in an outline stub.\n+      Register tmp2 = disp_hdr;\n+      __ ldr(tmp2, Address(tmp, ObjectMonitor::owner_offset_in_bytes()));\n+      \/\/ We cannot use tbnz here, the target might be too far away and cannot\n+      \/\/ be encoded.\n+      __ tst(tmp2, (uint64_t)(intptr_t) ANONYMOUS_OWNER);\n+      C2HandleAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2HandleAnonOMOwnerStub(tmp, rthread, tmp2);\n+      Compile::current()->output()->add_stub(stub);\n+      __ br(Assembler::NE, stub->entry());\n+      __ bind(stub->continuation());\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -78,0 +78,22 @@\n+int C2HandleAnonOMOwnerStub::max_size() const {\n+  return 20;\n+}\n+\n+void C2HandleAnonOMOwnerStub::emit(C2_MacroAssembler& masm) {\n+  __ bind(entry());\n+  Register mon = monitor();\n+  Register thr = thread();\n+  Register t = tmp();\n+  assert(t != noreg, \"need tmp register\");\n+\n+  \/\/ Fix owner to be the current thread.\n+  __ str(thr, Address(mon, ObjectMonitor::owner_offset_in_bytes()));\n+\n+  \/\/ Pop owner object from lock-stack.\n+  __ ldr(t, Address(thr, JavaThread::lock_stack_current_offset()));\n+  __ sub(t, t, oopSize);\n+  __ str(t, Address(thr, JavaThread::lock_stack_current_offset()));\n+\n+  __ b(continuation());\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_CodeStubs_aarch64.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -88,0 +88,13 @@\n+int C2HandleAnonOMOwnerStub::max_size() const {\n+  return 17;\n+}\n+\n+void C2HandleAnonOMOwnerStub::emit(C2_MacroAssembler& masm) {\n+  __ bind(entry());\n+  Register mon = monitor();\n+  Register thr = thread();\n+  __ movptr(Address(mon, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), thr);\n+  __ subptr(Address(thr, JavaThread::lock_stack_current_offset()), oopSize);\n+  __ jmp(continuation());\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -814,1 +814,1 @@\n-      \/\/ If the owner is ANONYMOUS, we need to fix it - in the slow-path.\n+      \/\/ If the owner is ANONYMOUS, we need to fix it.\n@@ -816,1 +816,4 @@\n-      jcc(Assembler::notEqual, NO_COUNT);\n+      C2HandleAnonOMOwnerStub* stub = new (Compile::current()->comp_arena()) C2HandleAnonOMOwnerStub(tmpReg, thread);\n+      Compile::current()->output()->add_stub(stub);\n+      jcc(Assembler::notEqual, stub->entry());\n+      bind(stub->continuation());\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -98,0 +98,15 @@\n+class C2HandleAnonOMOwnerStub : public C2CodeStub {\n+private:\n+  Register _monitor;\n+  Register _thread;\n+  Register _tmp;\n+public:\n+  C2HandleAnonOMOwnerStub(Register monitor, Register thread, Register tmp = noreg) : C2CodeStub(),\n+    _monitor(monitor), _thread(thread), _tmp(tmp) {}\n+  Register monitor() { return _monitor; }\n+  Register thread()  { return _thread; }\n+  Register tmp()     { return _tmp; }\n+  int max_size() const;\n+  void emit(C2_MacroAssembler& masm);\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}