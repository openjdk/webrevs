{"files":[{"patch":"@@ -302,2 +302,0 @@\n-      if (OMCacheHitRate) increment(Address(rthread, JavaThread::lock_lookup_offset()));\n-\n@@ -309,1 +307,1 @@\n-      const int num_unrolled = MIN2(OMC2UnrollCacheEntries, OMCacheSize);\n+      const int num_unrolled = 2;\n@@ -319,5 +317,2 @@\n-      if (num_unrolled == 0 || (OMC2UnrollCacheLookupLoopTail && num_unrolled != OMCacheSize)) {\n-        if (num_unrolled != 0) {\n-          \/\/ Loop after unrolling, advance iterator.\n-          increment(t3_t, in_bytes(OMCache::oop_to_oop_difference()));\n-        }\n+      \/\/ Loop after unrolling, advance iterator.\n+      increment(t3_t, in_bytes(OMCache::oop_to_oop_difference()));\n@@ -325,1 +320,1 @@\n-        Label loop;\n+      Label loop;\n@@ -327,2 +322,2 @@\n-        \/\/ Search for obj in cache.\n-        bind(loop);\n+      \/\/ Search for obj in cache.\n+      bind(loop);\n@@ -330,4 +325,4 @@\n-        \/\/ Check for match.\n-        ldr(t1, Address(t3_t));\n-        cmp(obj, t1);\n-        br(Assembler::EQ, monitor_found);\n+      \/\/ Check for match.\n+      ldr(t1, Address(t3_t));\n+      cmp(obj, t1);\n+      br(Assembler::EQ, monitor_found);\n@@ -335,8 +330,5 @@\n-        \/\/ Search until null encountered, guaranteed _null_sentinel at end.\n-        increment(t3_t, in_bytes(OMCache::oop_to_oop_difference()));\n-        cbnz(t1, loop);\n-        \/\/ Cache Miss, NE set from cmp above, cbnz does not set flags\n-        b(slow_path);\n-      } else {\n-        b(slow_path);\n-      }\n+      \/\/ Search until null encountered, guaranteed _null_sentinel at end.\n+      increment(t3_t, in_bytes(OMCache::oop_to_oop_difference()));\n+      cbnz(t1, loop);\n+      \/\/ Cache Miss, NE set from cmp above, cbnz does not set flags\n+      b(slow_path);\n@@ -346,1 +338,0 @@\n-      if (OMCacheHitRate) increment(Address(rthread, JavaThread::lock_hit_offset()));\n@@ -404,1 +395,1 @@\n-  Label inflated, inflated_load_monitor;\n+  Label inflated, inflated_load_mark;\n@@ -424,1 +415,1 @@\n-    br(Assembler::NE, inflated_load_monitor);\n+    br(Assembler::NE, inflated_load_mark);\n@@ -444,1 +435,1 @@\n-    tbnz(t1_mark, exact_log2(markWord::monitor_value), push_and_slow_path);\n+    tbnz(t1_mark, exact_log2(markWord::monitor_value), UseObjectMonitorTable ? push_and_slow_path : inflated);\n@@ -464,1 +455,1 @@\n-    bind(inflated_load_monitor);\n+    bind(inflated_load_mark);\n@@ -493,1 +484,0 @@\n-      if (OMCacheHitRate) increment(Address(rthread, JavaThread::unlock_lookup_offset()));\n@@ -498,1 +488,0 @@\n-      if (OMCacheHitRate) increment(Address(rthread, JavaThread::unlock_hit_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":19,"deletions":30,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-#include \"utilities\/macros.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1017,2 +1017,0 @@\n-      if (OMCacheHitRate) increment(Address(thread, JavaThread::lock_lookup_offset()));\n-\n@@ -1025,1 +1023,1 @@\n-      const int num_unrolled = MIN2(OMC2UnrollCacheEntries, OMCacheSize);\n+      const int num_unrolled = 2;\n@@ -1034,5 +1032,2 @@\n-      if (num_unrolled == 0 || (OMC2UnrollCacheLookupLoopTail && num_unrolled != OMCacheSize)) {\n-        if (num_unrolled != 0) {\n-          \/\/ Loop after unrolling, advance iterator.\n-          increment(t, in_bytes(OMCache::oop_to_oop_difference()));\n-        }\n+      \/\/ Loop after unrolling, advance iterator.\n+      increment(t, in_bytes(OMCache::oop_to_oop_difference()));\n@@ -1040,1 +1035,1 @@\n-        Label loop;\n+      Label loop;\n@@ -1042,2 +1037,2 @@\n-        \/\/ Search for obj in cache.\n-        bind(loop);\n+      \/\/ Search for obj in cache.\n+      bind(loop);\n@@ -1045,3 +1040,3 @@\n-        \/\/ Check for match.\n-        cmpptr(obj, Address(t));\n-        jccb(Assembler::equal, monitor_found);\n+      \/\/ Check for match.\n+      cmpptr(obj, Address(t));\n+      jccb(Assembler::equal, monitor_found);\n@@ -1049,8 +1044,5 @@\n-        \/\/ Search until null encountered, guaranteed _null_sentinel at end.\n-        cmpptr(Address(t), 1);\n-        jcc(Assembler::below, slow_path); \/\/ 0 check, but with ZF=0 when *t == 0\n-        increment(t, in_bytes(OMCache::oop_to_oop_difference()));\n-        jmpb(loop);\n-      } else {\n-        jmp(slow_path);\n-      }\n+      \/\/ Search until null encountered, guaranteed _null_sentinel at end.\n+      cmpptr(Address(t), 1);\n+      jcc(Assembler::below, slow_path); \/\/ 0 check, but with ZF=0 when *t == 0\n+      increment(t, in_bytes(OMCache::oop_to_oop_difference()));\n+      jmpb(loop);\n@@ -1061,1 +1053,0 @@\n-      if (OMCacheHitRate) increment(Address(thread, JavaThread::lock_hit_offset()));\n@@ -1209,1 +1200,0 @@\n-      if (OMCacheHitRate) increment(Address(thread, JavaThread::unlock_lookup_offset()));\n@@ -1214,2 +1204,0 @@\n-\n-      if (OMCacheHitRate) increment(Address(thread, JavaThread::unlock_hit_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":14,"deletions":26,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -10394,3 +10394,0 @@\n-\/\/\n-\/\/ x86_32 Note: reg_rax and thread may alias each other due to limited register\n-\/\/              availiability.\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,3 +65,5 @@\n-    \/\/ check if monitor\n-    __ testptr(result, markWord::monitor_value);\n-    __ jcc(Assembler::notZero, slowCase);\n+    if (!UseObjectMonitorTable) {\n+      \/\/ check if monitor\n+      __ testptr(result, markWord::monitor_value);\n+      __ jcc(Assembler::notZero, slowCase);\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-#include \"utilities\/macros.hpp\"\n@@ -761,1 +760,1 @@\n-  assert(obj == lock->obj(), \"must match: \" PTR_FORMAT, p2i(lock));\n+  assert(obj == lock->obj(), \"must match\");\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -132,0 +132,1 @@\n+  LOG_TAG(monitortable) \\\n@@ -141,1 +142,0 @@\n-  LOG_TAG(omworld) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-  f(mtOMWorld,        \"OM World\")                                                    \\\n","filename":"src\/hotspot\/share\/nmt\/memflags.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -34,1 +33,1 @@\n-  if (LockingMode == LM_LIGHTWEIGHT) {\n+  if (UseObjectMonitorTable) {\n@@ -39,1 +38,1 @@\n-  } else {\n+  } else if (LockingMode == LM_LEGACY) {\n@@ -94,1 +93,1 @@\n-  } else if (LockingMode == LM_LIGHTWEIGHT) {\n+  } else if (UseObjectMonitorTable) {\n","filename":"src\/hotspot\/share\/runtime\/basicLock.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n+  assert(UseObjectMonitorTable, \"must be\");\n@@ -46,1 +46,1 @@\n-  assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n+  assert(UseObjectMonitorTable, \"must be\");\n@@ -51,1 +51,1 @@\n-  assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n+  assert(UseObjectMonitorTable, \"must be\");\n","filename":"src\/hotspot\/share\/runtime\/basicLock.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -1649,1 +1648,1 @@\n-              } else if (LockingMode == LM_LIGHTWEIGHT) {\n+              } else if (UseObjectMonitorTable) {\n@@ -1654,1 +1653,1 @@\n-                assert(LockingMode == LM_MONITOR, \"must be\");\n+                assert(LockingMode == LM_MONITOR || !UseObjectMonitorTable, \"must be\");\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1980,9 +1980,1 @@\n-  product(bool, OMC2UnrollCacheLookupLoopTail, true, \"\")                    \\\n-                                                                            \\\n-  product(int, OMC2UnrollCacheEntries, 0, \"\")                               \\\n-          range(0, OMCache::CAPACITY)                                       \\\n-                                                                            \\\n-  product(int, OMCacheSize, 8, \"\")                                          \\\n-          range(0, OMCache::CAPACITY)                                       \\\n-                                                                            \\\n-  product(int, OMSpins, 13,                                                 \\\n+  product(int, LightweightFastLockingSpins, 13, DIAGNOSTIC,                 \\\n@@ -1992,1 +1984,1 @@\n-          \"a total number of spins on the order of O(2^OMSpins)\")           \\\n+          \"a total number of spins on the order of O(2^value)\")             \\\n@@ -1995,2 +1987,0 @@\n-  product(bool, OMCacheHitRate, false, \"\")                                  \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -101,1 +101,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1171,16 +1171,0 @@\n-  size_t _unlocked_inflation = 0;\n-  size_t _recursive_inflation = 0;\n-  size_t _contended_recursive_inflation = 0;\n-  size_t _contended_inflation = 0;\n-  size_t _wait_inflation = 0;\n-  size_t _lock_stack_inflation = 0;\n-\n-  size_t _lock_lookup = 0;\n-  size_t _lock_hit = 0;\n-  size_t _unlock_lookup = 0;\n-  size_t _unlock_hit = 0;\n-\n-  static ByteSize lock_lookup_offset() { return byte_offset_of(JavaThread, _lock_lookup); }\n-  static ByteSize lock_hit_offset() { return byte_offset_of(JavaThread, _lock_hit); }\n-  static ByteSize unlock_lookup_offset() { return byte_offset_of(JavaThread, _unlock_lookup); }\n-  static ByteSize unlock_hit_offset() { return byte_offset_of(JavaThread, _unlock_hit); }\n@@ -1197,1 +1181,1 @@\n-  static ByteSize om_cache_oops_offset()   { return om_cache_offset() + OMCache::entries(); }\n+  static ByteSize om_cache_oops_offset()   { return om_cache_offset() + OMCache::entries_offset(); }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-#include \"logging\/log.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n@@ -41,0 +39,1 @@\n+#include \"runtime\/lockStack.inline.hpp\"\n@@ -45,3 +44,0 @@\n-#include \"runtime\/synchronizer.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"utilities\/sizes.hpp\"\n@@ -249,1 +245,1 @@\n-  assert(LockingMode == LM_LIGHTWEIGHT, \"must be\");\n+  assert(UseObjectMonitorTable, \"must be\");\n@@ -258,1 +254,1 @@\n-  if (LockingMode != LM_LIGHTWEIGHT) {\n+  if (!UseObjectMonitorTable) {\n@@ -263,43 +259,0 @@\n-\n-  LogTarget(Info, monitorinflation, thread) lt;\n-  if (!lt.is_enabled()) {\n-    return;\n-  }\n-\n-  ResourceMark rm;\n-\n-  if (_unlocked_inflation != 0 ||\n-      _recursive_inflation != 0 ||\n-      _contended_recursive_inflation != 0 ||\n-      _contended_inflation != 0 ||\n-      _wait_inflation != 0 ||\n-      _lock_stack_inflation != 0) {\n-    lt.print(\"Mon: %8zu Rec: %8zu CRec: %8zu Cont: %8zu Wait: %8zu Stack: %8zu Thread: %s\",\n-             _unlocked_inflation,\n-             _recursive_inflation,\n-             _contended_recursive_inflation,\n-             _contended_inflation,\n-             _wait_inflation,\n-             _lock_stack_inflation,\n-             name());\n-  }\n-  _unlocked_inflation            = 0;\n-  _recursive_inflation           = 0;\n-  _contended_recursive_inflation = 0;\n-  _contended_inflation           = 0;\n-  _wait_inflation                = 0;\n-  _lock_stack_inflation          = 0;\n-\n-  if (_lock_lookup != 0 ||\n-      _unlock_lookup != 0) {\n-    const double lock_hit_rate = (double)_lock_hit \/ (double)_lock_lookup * 100;\n-    const double unlock_hit_rate = (double)_unlock_hit \/ (double)_unlock_lookup * 100;\n-    lt.print(\"Lock: %3.2lf %% [%6zu \/ %6zu] Unlock: %3.2lf %% [%6zu \/ %6zu] Thread: %s\",\n-             lock_hit_rate, _lock_hit, _lock_lookup,\n-             unlock_hit_rate, _unlock_hit, _unlock_lookup,\n-             name());\n-  }\n-  _lock_hit = 0;\n-  _lock_lookup = 0;\n-  _unlock_hit = 0;\n-  _unlock_lookup = 0;\n","filename":"src\/hotspot\/share\/runtime\/javaThread.inline.hpp","additions":3,"deletions":50,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"nmt\/memflags.hpp\"\n@@ -66,1 +67,1 @@\n-class ObjectMonitorWorld : public CHeapObj<mtOMWorld> {\n+class ObjectMonitorWorld : public CHeapObj<MEMFLAGS::mtObjectMonitor> {\n@@ -74,1 +75,1 @@\n-      return AllocateHeap(size, mtOMWorld);\n+      return AllocateHeap(size, MEMFLAGS::mtObjectMonitor);\n@@ -81,1 +82,1 @@\n-  using ConcurrentTable = ConcurrentHashTable<Config, mtOMWorld>;\n+  using ConcurrentTable = ConcurrentHashTable<Config, MEMFLAGS::mtObjectMonitor>;\n@@ -243,2 +244,2 @@\n-      log_trace(omworld)(\"Started to %s\", task_name);\n-      TraceTime timer(task_name, TRACETIME_LOG(Debug, omworld, perf));\n+      log_trace(monitortable)(\"Started to %s\", task_name);\n+      TraceTime timer(task_name, TRACETIME_LOG(Debug, monitortable, perf));\n@@ -262,1 +263,1 @@\n-      log_info(omworld)(\"Grown to size: %zu\", _table_size);\n+      log_info(monitortable)(\"Grown to size: %zu\", _table_size);\n@@ -279,1 +280,1 @@\n-    LogTarget(Info, omworld) lt;\n+    LogTarget(Info, monitortable) lt;\n@@ -579,1 +580,1 @@\n-  const int log_spin_limit = os::is_MP() || !UseObjectMonitorTable ? OMSpins : 1;\n+  const int log_spin_limit = os::is_MP() || !UseObjectMonitorTable ? LightweightFastLockingSpins : 1;\n@@ -765,1 +766,0 @@\n-    current->_contended_inflation++;\n@@ -804,1 +804,0 @@\n-          current->_contended_inflation++;\n@@ -945,9 +944,0 @@\n-  \/\/ Do stats first\n-  if (cause == ObjectSynchronizer::inflate_cause_wait) {\n-    locking_thread->_wait_inflation++;\n-  } else if (cause == ObjectSynchronizer::inflate_cause_monitor_enter) {\n-    locking_thread->_recursive_inflation++;\n-  } else if (cause == ObjectSynchronizer::inflate_cause_vm_internal) {\n-    locking_thread->_lock_stack_inflation++;\n-  }\n-\n@@ -1092,1 +1082,0 @@\n-        locking_thread->_contended_recursive_inflation++;\n@@ -1115,1 +1104,0 @@\n-        locking_thread->_recursive_inflation++;\n@@ -1135,2 +1123,0 @@\n-    locking_thread->_unlocked_inflation++;\n-\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -88,3 +88,0 @@\n-  \/\/ Return true if we have room to push n oops onto this lock-stack, false otherwise.\n-  inline bool can_push(int n = 1) const;\n-\n@@ -104,3 +101,0 @@\n-  \/\/ Get the oldest oop in the stack\n-  inline oop top();\n-\n@@ -147,1 +141,1 @@\n-  static ByteSize entries() { return byte_offset_of(OMCache, _entries); }\n+  static ByteSize entries_offset() { return byte_offset_of(OMCache, _entries); }\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-#include \"oops\/oop.inline.hpp\"\n-#include \"runtime\/globals.hpp\"\n@@ -41,1 +39,0 @@\n-#include \"runtime\/synchronizer.hpp\"\n@@ -61,4 +58,0 @@\n-inline bool LockStack::can_push(int n) const {\n-  return (CAPACITY - to_index(_top)) >= n;\n-}\n-\n@@ -92,5 +85,0 @@\n-inline oop LockStack::top() {\n-  assert(to_index(_top) > 0, \"may only call with at least one element in the stack\");\n-  return _base[to_index(_top) - 1];\n-}\n-\n@@ -240,4 +228,1 @@\n-  const int end = OMCacheSize - 1;\n-  if (end < 0) {\n-    return;\n-  }\n+  const int end = OMCache::CAPACITY - 1;\n@@ -266,1 +251,1 @@\n-  for (int i = 0; i < OMCacheSize; ++i) {\n+  for (int i = 0; i < CAPACITY; ++i) {\n@@ -272,1 +257,1 @@\n-        for (; i < OMCacheSize - 1; ++i) {\n+        for (; i < CAPACITY - 1; ++i) {\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-#define assert_mark_word_concistency()                                                 \\\n+#define assert_mark_word_consistency()                                         \\\n@@ -301,2 +301,2 @@\n-         \"object mark must match encoded this: mark=\" INTPTR_FORMAT                    \\\n-         \", encoded this=\" INTPTR_FORMAT, object()->mark().value(),                    \\\n+         \"object mark must match encoded this: mark=\" INTPTR_FORMAT            \\\n+         \", encoded this=\" INTPTR_FORMAT, object()->mark().value(),            \\\n@@ -427,1 +427,1 @@\n-    assert_mark_word_concistency();\n+    assert_mark_word_consistency();\n@@ -527,1 +527,1 @@\n-  assert_mark_word_concistency();\n+  assert_mark_word_consistency();\n@@ -1022,1 +1022,1 @@\n-  assert_mark_word_concistency();\n+  assert_mark_word_consistency();\n@@ -1087,1 +1087,1 @@\n-  assert_mark_word_concistency();\n+  assert_mark_word_consistency();\n@@ -1713,1 +1713,1 @@\n-  assert_mark_word_concistency();\n+  assert_mark_word_consistency();\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-  \/\/ * LM_LEGACY, LM_MONITOR:\n+  \/\/ * LM_LEGACY, LM_MONITOR, LM_LIGHTWEIGHT without UseObjectMonitorTable:\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -735,1 +735,1 @@\n-  \/\/ The oops in the monitor cache is cleared to prevent stale cache entries\n+  \/\/ The oops in the monitor cache are cleared to prevent stale cache entries\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-#include \"runtime\/globals.hpp\"\n@@ -2953,1 +2952,1 @@\n-      } else if (LockingMode == LM_LIGHTWEIGHT) {\n+      } else if (UseObjectMonitorTable) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -997,1 +997,1 @@\n-  if (UseObjectMonitorTable && LockingMode == LM_LIGHTWEIGHT) {\n+  if (UseObjectMonitorTable) {\n@@ -1408,3 +1408,1 @@\n-  if (LockingMode == LM_LIGHTWEIGHT) {\n-    return;\n-  }\n+  assert(LockingMode != LM_LIGHTWEIGHT, \"only inflate through enter\");\n@@ -1423,5 +1421,2 @@\n-  if (LockingMode == LM_LIGHTWEIGHT) {\n-    return LightweightSynchronizer::inflate_into_object_header(current, nullptr, obj, cause);\n-  } else {\n-    return inflate_impl(obj, cause);\n-  }\n+  assert(LockingMode != LM_LIGHTWEIGHT, \"only inflate through enter\");\n+  return inflate_impl(obj, cause);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+#include \"runtime\/lightweightSynchronizer.hpp\"\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1026,1 +1026,1 @@\n-  LM_LIGHTWEIGHT = 2,\n+  LM_LIGHTWEIGHT = 2\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -578,1 +578,1 @@\n-   st->print_cr(\"# Java VM: %s%s%s (%s%s, %s%s%s%s%s%s%s, %s, %s)\",\n+   st->print_cr(\"# Java VM: %s%s%s (%s%s, %s%s%s%s%s%s, %s, %s)\",\n@@ -593,3 +593,0 @@\n-                 LockingMode == LM_MONITOR ? \", lm_monitors\" :\n-                 LockingMode == LM_LEGACY ? \", lm_legacy\" :\n-                 LockingMode == LM_LIGHTWEIGHT ? \", lm_lightweight\" : \"\",\n@@ -1122,1 +1119,1 @@\n-  STEP_IF(\"printing lock stack\", _verbose && _thread != nullptr && _thread->is_Java_thread() && (LockingMode == LM_LIGHTWEIGHT));\n+  STEP_IF(\"printing lock stack\", _verbose && _thread != nullptr && _thread->is_Java_thread() && LockingMode == LM_LIGHTWEIGHT);\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}