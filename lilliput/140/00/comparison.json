{"files":[{"patch":"@@ -1189,1 +1189,1 @@\n-  static ByteSize om_cache_oops_offset()   { return om_cache_offset() + OMCache::oops_offset(); }\n+  static ByteSize om_cache_oops_offset()   { return om_cache_offset() + OMCache::entries(); }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"utilities\/sizes.hpp\"\n@@ -113,0 +114,8 @@\n+\n+OMCache::OMCache(JavaThread* jt) : _entries() {\n+  STATIC_ASSERT(std::is_standard_layout<OMCache>::value);\n+  STATIC_ASSERT(std::is_standard_layout<OMCache::OMCacheEntry>::value);\n+  STATIC_ASSERT(offsetof(OMCache, _null_sentinel) == offsetof(OMCache, _entries) +\n+                offsetof(OMCache::OMCacheEntry, _oop) +\n+                OMCache::CAPACITY * in_bytes(oop_to_oop_difference()));\n+}\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -143,3 +143,5 @@\n-  oop _oops[CAPACITY];\n-  const oop _null_sentinel;\n-  ObjectMonitor* _monitors[CAPACITY];\n+  struct OMCacheEntry {\n+    oop _oop = nullptr;\n+    ObjectMonitor* _monitor = nullptr;\n+  } _entries[CAPACITY];\n+  const oop _null_sentinel = nullptr;\n@@ -148,4 +150,3 @@\n-  static ByteSize oops_offset() { return byte_offset_of(OMCache, _oops); }\n-  static ByteSize monitors_offset() { return byte_offset_of(OMCache, _monitors); }\n-  static ByteSize oop_to_oop_difference() { return in_ByteSize(sizeof(oop)); }\n-  static ByteSize oop_to_monitor_difference() { return monitors_offset() - oops_offset(); }\n+  static ByteSize entries() { return byte_offset_of(OMCache, _entries); }\n+  static constexpr ByteSize oop_to_oop_difference() { return in_ByteSize(sizeof(OMCacheEntry)); }\n+  static constexpr ByteSize oop_to_monitor_difference() { return in_ByteSize(sizeof(oop)); }\n@@ -153,1 +154,1 @@\n-  explicit OMCache(JavaThread* jt) : _oops(), _null_sentinel(nullptr), _monitors() {};\n+  explicit OMCache(JavaThread* jt);\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -250,1 +250,2 @@\n-  oop cmp_obj = obj;\n+  OMCacheEntry to_insert = {obj, monitor};\n+\n@@ -252,5 +253,5 @@\n-    if (_oops[i] == cmp_obj ||\n-        _monitors[i] == nullptr ||\n-        _monitors[i]->is_being_async_deflated()) {\n-      _oops[i] = obj;\n-      _monitors[i] = monitor;\n+    if (_entries[i]._oop == obj ||\n+        _entries[i]._monitor == nullptr ||\n+        _entries[i]._monitor->is_being_async_deflated()) {\n+      \/\/ Use stale slot.\n+      _entries[i] = to_insert;\n@@ -259,9 +260,2 @@\n-    \/\/ Remember Most Recent Values\n-    oop tmp_oop = obj;\n-    ObjectMonitor* tmp_mon = monitor;\n-    \/\/ Set next pair to the next most recent\n-    obj = _oops[i];\n-    monitor = _monitors[i];\n-    \/\/ Store most recent values\n-    _oops[i] = tmp_oop;\n-    _monitors[i] = tmp_mon;\n+    \/\/ Swap with the most recent value.\n+    ::swap(to_insert, _entries[i]);\n@@ -269,2 +263,1 @@\n-  _oops[end] = obj;\n-  _monitors[end] = monitor;\n+  _entries[end] = to_insert;\n@@ -275,3 +268,3 @@\n-    if (_oops[i] == o) {\n-      assert(_monitors[i] != nullptr, \"monitor must exist\");\n-      if (_monitors[i]->is_being_async_deflated()) {\n+    if (_entries[i]._oop == o) {\n+      assert(_entries[i]._monitor != nullptr, \"monitor must exist\");\n+      if (_entries[i]._monitor->is_being_async_deflated()) {\n@@ -281,2 +274,1 @@\n-          _oops[i] = _oops[i + 1];\n-          _monitors[i] =  _monitors[i + 1];\n+          _entries[i] = _entries[i + 1];\n@@ -284,3 +276,2 @@\n-        \/\/ i == CAPACITY - 1\n-        _oops[i] = nullptr;\n-        _monitors[i] = nullptr;\n+        \/\/ Clear end\n+        _entries[i] = {};\n@@ -289,1 +280,1 @@\n-      return _monitors[i];\n+      return _entries[i]._monitor;\n@@ -297,2 +288,2 @@\n-    _oops[i] = nullptr;\n-    _monitors[i] = nullptr;\n+    \/\/ Clear\n+    _entries[i] = {};\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":19,"deletions":28,"binary":false,"changes":47,"status":"modified"}]}