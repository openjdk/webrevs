{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,37 @@\n+ * <p>\n+ * Platforms and desktop environments may impose restrictions or limitations\n+ * on the access required to implement all functionality in the Robot class.\n+ * For example:\n+ * <ul>\n+ * <li> preventing access to the contents of any part of a desktop\n+ * or Window on the desktop that is not owned by the running application.<\/li>\n+ * <li> treating window decorations as non-owned content.<\/li>\n+ * <li> ignoring or limiting specific requests to manipulate windows.<\/li>\n+ * <li> ignoring or limiting specific requests for Robot generated (synthesized)\n+ * events related to keyboard and mouse etc.<\/li>\n+ * <li> requiring specific or global permissions to any access to window\n+ * contents, even application owned content,or to perform even limited\n+ * synthesizing of events.<\/li>\n+ * <\/ul>\n+ *\n+ * The Robot API specification requires that approvals for these be granted\n+ * for full operation.\n+ * If they are not granted, the API will be degraded as discussed here.\n+ * Relevant specific API methods may document more specific limitations\n+ * and requirements.\n+ * Depending on the policies of the desktop environment,\n+ * the approvals mentioned above may:\n+ * <ul>\n+ * <li>be required every time<\/li>\n+ * <li>or persistent for the lifetime of an application,<\/li>\n+ * <li>or persistent across multiple user desktop sessions<\/li>\n+ * <li>be fine-grained permissions<\/li>\n+ * <li>be associated with a specific binary application,\n+ * or a class of binary applications.<\/li>\n+ * <\/ul>\n+ *\n+ * When such approvals need to given interactively, it may impede the normal\n+ * operation of the application until approved, and if approval is denied\n+ * or not possible, or cannot be made persistent then it will degrade\n+ * the functionality of this class and in turn any part of the operation\n+ * of the application which is dependent on it.\n@@ -192,0 +229,5 @@\n+     * <p>\n+     * The mouse pointer may not visually move on some platforms,\n+     * while the subsequent mousePress and mouseRelease can be\n+     * delivered to the correct location\n+     *\n@@ -386,0 +428,11 @@\n+     * <p>\n+     * If the desktop environment requires that permissions be granted\n+     * to capture screen content, and the required permissions are not granted,\n+     * then a {@code SecurityException} may be thrown,\n+     * or the content of the returned {@code Color} is undefined.\n+     * <p>\n+     * @apiNote It is recommended to avoid calling this method on\n+     * the AWT Event Dispatch Thread since screen capture may be a lengthy\n+     * operation, particularly if acquiring permissions is needed and involves\n+     * user interaction.\n+     *\n@@ -388,0 +441,3 @@\n+     * @throws  SecurityException if {@code readDisplayPixels} permission\n+     *          is not granted, or access to the screen is denied\n+     *          by the desktop environment\n@@ -398,2 +454,12 @@\n-     * Creates an image containing pixels read from the screen.  This image does\n-     * not include the mouse cursor.\n+     * Creates an image containing pixels read from the screen.\n+     * <p>\n+     * If the desktop environment requires that permissions be granted\n+     * to capture screen content, and the required permissions are not granted,\n+     * then a {@code SecurityException} may be thrown,\n+     * or the contents of the returned {@code BufferedImage} are undefined.\n+     * <p>\n+     * @apiNote It is recommended to avoid calling this method on\n+     * the AWT Event Dispatch Thread since screen capture may be a lengthy\n+     * operation, particularly if acquiring permissions is needed and involves\n+     * user interaction.\n+     *\n@@ -402,2 +468,5 @@\n-     * @throws  IllegalArgumentException if {@code screenRect} width and height are not greater than zero\n-     * @throws  SecurityException if {@code readDisplayPixels} permission is not granted\n+     * @throws  IllegalArgumentException if {@code screenRect} width and height\n+     *          are not greater than zero\n+     * @throws  SecurityException if {@code readDisplayPixels} permission\n+     *          is not granted, or access to the screen is denied\n+     *          by the desktop environment\n@@ -413,1 +482,0 @@\n-     * This image does not include the mouse cursor.\n@@ -446,2 +514,5 @@\n-     * @throws  IllegalArgumentException if {@code screenRect} width and height are not greater than zero\n-     * @throws  SecurityException if {@code readDisplayPixels} permission is not granted\n+     * @throws  IllegalArgumentException if {@code screenRect} width and height\n+     *          are not greater than zero\n+     * @throws  SecurityException if {@code readDisplayPixels} permission\n+     *          is not granted, or access to the screen is denied\n+     *          by the desktop environment\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Robot.java","additions":79,"deletions":8,"binary":false,"changes":87,"status":"modified"}]}