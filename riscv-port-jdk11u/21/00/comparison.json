{"files":[{"patch":"@@ -1946,1 +1946,1 @@\n-\/\/ Currently only support Zba and Zbb.\n+\/\/ Currently only support Zba, Zbb and Zbs bitmanip extensions.\n@@ -2021,0 +2021,1 @@\n+  INSN(bexti,   0b0010011, 0b101, 0b010010);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -108,0 +108,1 @@\n+  experimental(bool, UseZbs, false, \"Use Zbs instructions\")                      \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2680,0 +2680,8 @@\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immIpowerOf2() %{\n+  predicate(is_power_of_2((juint)(n->get_int())));\n+  match(ConI);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -450,0 +450,15 @@\n+  ins_pipe(ialu_reg_reg);\n+\n+%}\n+\n+\/\/ AndI 0b0..010..0 + ConvI2B\n+instruct convI2Bool_andI_reg_immIpowerOf2(iRegINoSp dst, iRegIorL2I src, immIpowerOf2 mask) %{\n+  predicate(UseZbs);\n+  match(Set dst (Conv2B (AndI src mask)));\n+  ins_cost(ALU_COST);\n+\n+  format %{ \"bexti  $dst, $src, $mask\\t#@convI2Bool_andI_reg_immIpowerOf2\" %}\n+  ins_encode %{\n+    __ bexti($dst$$Register, $src$$Register, exact_log2((juint)($mask$$constant)));\n+  %}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}