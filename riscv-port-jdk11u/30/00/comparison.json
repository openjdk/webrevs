{"files":[{"patch":"@@ -53,1 +53,1 @@\n-void Assembler::addw(Register Rd, Register Rn, int64_t increment, Register temp) {\n+void Assembler::addw(Register Rd, Register Rn, int32_t increment, Register temp) {\n@@ -73,1 +73,1 @@\n-void Assembler::subw(Register Rd, Register Rn, int64_t decrement, Register temp) {\n+void Assembler::subw(Register Rd, Register Rn, int32_t decrement, Register temp) {\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3017,1 +3017,1 @@\n-  \/\/ calculate pseudoinstruction\n+  \/\/ Computational pseudo instructions\n@@ -3019,1 +3019,2 @@\n-  void addw(Register Rd, Register Rn, int64_t increment, Register temp = t0);\n+  void addw(Register Rd, Register Rn, int32_t increment, Register temp = t0);\n+\n@@ -3021,1 +3022,1 @@\n-  void subw(Register Rd, Register Rn, int64_t decrement, Register temp = t0);\n+  void subw(Register Rd, Register Rn, int32_t decrement, Register temp = t0);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-    __ add_memory_int32(Address(t1), 1);\n+    __ incrementw(Address(t1));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    __ add_memory_int32(ExternalAddress((address)&Runtime1::_generic_arraycopystub_cnt), 1);\n+    __ incrementw(ExternalAddress((address)&Runtime1::_generic_arraycopystub_cnt));\n@@ -167,1 +167,1 @@\n-    __ add_memory_int32(ExternalAddress((address)&Runtime1::_arraycopy_checkcast_cnt), 1);\n+    __ incrementw(ExternalAddress((address)&Runtime1::_arraycopy_checkcast_cnt));\n@@ -176,1 +176,1 @@\n-    __ add_memory_int32(ExternalAddress((address)&Runtime1::_arraycopy_checkcast_attempt_cnt), 1);\n+    __ incrementw(ExternalAddress((address)&Runtime1::_arraycopy_checkcast_attempt_cnt));\n@@ -327,1 +327,1 @@\n-    __ add_memory_int32(ExternalAddress(Runtime1::arraycopy_count_address(basic_type)), 1);\n+    __ incrementw(ExternalAddress(Runtime1::arraycopy_count_address(basic_type)));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arraycopy_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1068,1 +1068,1 @@\n-    __ add_memory_int64(data_addr, DataLayout::counter_increment);\n+    __ increment(data_addr, DataLayout::counter_increment);\n@@ -1566,1 +1566,1 @@\n-          __ add_memory_int64(data_addr, DataLayout::counter_increment);\n+          __ increment(data_addr, DataLayout::counter_increment);\n@@ -1582,1 +1582,1 @@\n-          __ add_memory_int64(data_addr, DataLayout::counter_increment);\n+          __ increment(data_addr, DataLayout::counter_increment);\n@@ -1592,1 +1592,1 @@\n-      __ add_memory_int64(counter_addr, DataLayout::counter_increment);\n+      __ increment(counter_addr, DataLayout::counter_increment);\n@@ -1598,1 +1598,1 @@\n-    __ add_memory_int64(counter_addr, DataLayout::counter_increment);\n+    __ increment(counter_addr, DataLayout::counter_increment);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-    add_memory_int32(Address(t1, 0), 1);\n+    incrementw(Address(t1, 0));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3094,1 +3094,4 @@\n-void MacroAssembler::add_memory_int64(const Address dst, int64_t imm) {\n+void MacroAssembler::increment(const Address dst, int64_t value) {\n+  assert(((dst.getMode() == Address::base_plus_offset &&\n+           is_offset_in_range(dst.offset(), 12)) || is_imm_in_range(value, 12, 0)),\n+          \"invalid value and address mode combination\");\n@@ -3096,1 +3099,1 @@\n-  assert_different_registers(adr.base(), t0);\n+  assert(!adr.uses(t0), \"invalid dst for address increment\");\n@@ -3098,1 +3101,1 @@\n-  addi(t0, t0, imm);\n+  add(t0, t0, value, t1);\n@@ -3102,1 +3105,4 @@\n-void MacroAssembler::add_memory_int32(const Address dst, int32_t imm) {\n+void MacroAssembler::incrementw(const Address dst, int32_t value) {\n+  assert(((dst.getMode() == Address::base_plus_offset &&\n+           is_offset_in_range(dst.offset(), 12)) || is_imm_in_range(value, 12, 0)),\n+          \"invalid value and address mode combination\");\n@@ -3104,1 +3110,1 @@\n-  assert_different_registers(adr.base(), t0);\n+  assert(!adr.uses(t0), \"invalid dst for address increment\");\n@@ -3106,1 +3112,23 @@\n-  addiw(t0, t0, imm);\n+  addw(t0, t0, value, t1);\n+  sw(t0, adr);\n+}\n+\n+void MacroAssembler::decrement(const Address dst, int64_t value) {\n+  assert(((dst.getMode() == Address::base_plus_offset &&\n+           is_offset_in_range(dst.offset(), 12)) || is_imm_in_range(value, 12, 0)),\n+          \"invalid value and address mode combination\");\n+  Address adr = add_memory_helper(dst);\n+  assert(!adr.uses(t0), \"invalid dst for address decrement\");\n+  ld(t0, adr);\n+  sub(t0, t0, value, t1);\n+  sd(t0, adr);\n+}\n+\n+void MacroAssembler::decrementw(const Address dst, int32_t value) {\n+  assert(((dst.getMode() == Address::base_plus_offset &&\n+           is_offset_in_range(dst.offset(), 12)) || is_imm_in_range(value, 12, 0)),\n+          \"invalid value and address mode combination\");\n+  Address adr = add_memory_helper(dst);\n+  assert(!adr.uses(t0), \"invalid dst for address decrement\");\n+  lwu(t0, adr);\n+  subw(t0, t0, value, t1);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":34,"deletions":6,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -657,2 +657,13 @@\n-  void add_memory_int64(const Address dst, int64_t imm);\n-  void add_memory_int32(const Address dst, int32_t imm);\n+  \/\/ Support for memory inc\/dec\n+  \/\/ n.b. increment\/decrement calls with an Address destination will\n+  \/\/ need to use a scratch register to load the value to be\n+  \/\/ incremented. increment\/decrement calls which add or subtract a\n+  \/\/ constant value other than sign-extended 12-bit immediate will need\n+  \/\/ to use a 2nd scratch register to hold the constant. so, an address\n+  \/\/ increment\/decrement may trash both t0 and t1.\n+\n+  void increment(const Address dst, int64_t value = 1);\n+  void incrementw(const Address dst, int32_t value = 1);\n+\n+  void decrement(const Address dst, int64_t value = 1);\n+  void decrementw(const Address dst, int32_t value = 1);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    __ add_memory_int64(Address(t2), 1);\n+    __ increment(Address(t2));\n@@ -166,1 +166,1 @@\n-    __ add_memory_int64(Address(x18), 1);\n+    __ increment(Address(x18));\n","filename":"src\/hotspot\/cpu\/riscv\/vtableStubs_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}