{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -1596,3 +1596,1 @@\n-void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type,\n-                          LIR_Opr cmp_opr1, LIR_Opr cmp_opr2) {\n-  assert(cmp_opr1 == LIR_OprFact::illegalOpr && cmp_opr2 == LIR_OprFact::illegalOpr, \"unnecessary cmp oprs on aarch64\");\n+void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type) {\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -1827,4 +1827,1 @@\n-void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type,\n-                          LIR_Opr cmp_opr1, LIR_Opr cmp_opr2) {\n-  assert(cmp_opr1 == LIR_OprFact::illegalOpr && cmp_opr2 == LIR_OprFact::illegalOpr, \"unnecessary cmp oprs on arm\");\n-\n+void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type) {\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2019, SAP SE. All rights reserved.\n@@ -1556,4 +1556,1 @@\n-void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type,\n-                          LIR_Opr cmp_opr1, LIR_Opr cmp_opr2) {\n-  assert(cmp_opr1 == LIR_OprFact::illegalOpr && cmp_opr2 == LIR_OprFact::illegalOpr, \"unnecessary cmp oprs on ppc\");\n-\n+void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type) {\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2016, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2019, SAP SE. All rights reserved.\n@@ -1450,4 +1450,1 @@\n-void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type,\n-                          LIR_Opr cmp_opr1, LIR_Opr cmp_opr2) {\n-  assert(cmp_opr1 == LIR_OprFact::illegalOpr && cmp_opr2 == LIR_OprFact::illegalOpr, \"unnecessary cmp oprs on s390\");\n-\n+void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type) {\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -1973,4 +1973,1 @@\n-void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type,\n-                          LIR_Opr cmp_opr1, LIR_Opr cmp_opr2) {\n-  assert(cmp_opr1 == LIR_OprFact::illegalOpr && cmp_opr2 == LIR_OprFact::illegalOpr, \"unnecessary cmp oprs on x86\");\n-\n+void LIR_Assembler::cmove(LIR_Condition condition, LIR_Opr opr1, LIR_Opr opr2, LIR_Opr result, BasicType type) {\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -202,0 +202,4 @@\n+    case lir_cmove:\n+#ifdef RISCV\n+      assert(false, \"lir_cmove is LIR_Op4 on RISCV\");\n+#endif\n@@ -254,0 +258,1 @@\n+#ifdef RISCV\n@@ -255,0 +260,5 @@\n+#else\n+  : LIR_Op(lir_branch, LIR_OprFact::illegalOpr, (CodeEmitInfo*)NULL)\n+  , _cond(cond)\n+  , _type(type)\n+#endif\n@@ -262,0 +272,1 @@\n+#ifdef RISCV\n@@ -263,0 +274,5 @@\n+#else\n+  LIR_Op(lir_branch, LIR_OprFact::illegalOpr, (CodeEmitInfo*)NULL)\n+  , _cond(cond)\n+  , _type(type)\n+#endif\n@@ -270,0 +286,1 @@\n+#ifdef RISCV\n@@ -271,0 +288,5 @@\n+#else\n+  : LIR_Op(lir_cond_float_branch, LIR_OprFact::illegalOpr, (CodeEmitInfo*)NULL)\n+  , _cond(cond)\n+  , _type(type)\n+#endif\n@@ -521,0 +543,1 @@\n+#ifdef RISCV\n@@ -527,0 +550,1 @@\n+#endif\n@@ -618,0 +642,1 @@\n+#ifdef RISCV\n@@ -631,0 +656,13 @@\n+#else\n+      assert(op->as_Op2() != NULL, \"must be\");\n+      LIR_Op2* op2 = (LIR_Op2*)op;\n+\n+      assert(op2->_info == NULL && op2->_tmp1->is_illegal() && op2->_tmp2->is_illegal() &&\n+             op2->_tmp3->is_illegal() && op2->_tmp4->is_illegal() && op2->_tmp5->is_illegal(), \"not used\");\n+      assert(op2->_opr1->is_valid() && op2->_opr2->is_valid() && op2->_result->is_valid(), \"used\");\n+\n+      do_input(op2->_opr1);\n+      do_input(op2->_opr2);\n+      do_temp(op2->_opr2);\n+      do_output(op2->_result);\n+#endif\n@@ -1053,0 +1091,1 @@\n+#ifdef RISCV\n@@ -1056,0 +1095,1 @@\n+#endif\n@@ -1725,0 +1765,1 @@\n+     case lir_cmove:                 s = \"cmove\";         break;\n@@ -1749,2 +1790,0 @@\n-     \/\/ LIR_Op4\n-     case lir_cmove:                 s = \"cmove\";         break;\n@@ -1887,0 +1926,1 @@\n+#ifdef RISCV\n@@ -1889,0 +1929,1 @@\n+#endif\n@@ -1975,0 +2016,1 @@\n+#ifdef RISCV\n@@ -1976,0 +2018,3 @@\n+#else\n+  if (code() == lir_cmove || code() == lir_cmp) {\n+#endif\n@@ -2026,0 +2071,1 @@\n+#ifdef RISCV\n@@ -2035,0 +2081,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":49,"deletions":2,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -870,0 +870,1 @@\n+#ifdef RISCV\n@@ -871,0 +872,1 @@\n+#endif\n@@ -920,0 +922,4 @@\n+#ifndef RISCV\n+      , lir_branch\n+      , lir_cond_float_branch\n+#endif\n@@ -931,0 +937,1 @@\n+#ifdef RISCV\n@@ -933,0 +940,1 @@\n+#endif\n@@ -937,0 +945,3 @@\n+#ifndef RISCV\n+      , lir_cmove\n+#endif\n@@ -967,0 +978,1 @@\n+#ifdef RISCV\n@@ -970,0 +982,1 @@\n+#endif\n@@ -1007,1 +1020,1 @@\n-#ifdef INCLUDE_ZGC\n+#if defined(RISCV) && defined(INCLUDE_ZGC)\n@@ -1145,0 +1158,1 @@\n+#ifdef RISCV\n@@ -1146,0 +1160,1 @@\n+#endif\n@@ -1593,1 +1608,1 @@\n-    assert(code == lir_cmp || code == lir_branch || code == lir_cond_float_branch || code == lir_assert, \"code check\");\n+    assert(code == lir_cmp || code == lir_assert RISCV_ONLY(|| code == lir_branch || code == lir_cond_float_branch), \"code check\");\n@@ -1625,1 +1640,1 @@\n-    assert(code != lir_cmp && code != lir_branch && code != lir_cond_float_branch && is_in_range(code, begin_op2, end_op2), \"code check\");\n+    assert(code != lir_cmp && RISCV_ONLY(code != lir_branch && code != lir_cond_float_branch &&) is_in_range(code, begin_op2, end_op2), \"code check\");\n@@ -1641,1 +1656,1 @@\n-    assert(code != lir_cmp && code != lir_branch && code != lir_cond_float_branch && is_in_range(code, begin_op2, end_op2), \"code check\");\n+    assert(code != lir_cmp && RISCV_ONLY(code != lir_branch && code != lir_cond_float_branch &&) is_in_range(code, begin_op2, end_op2), \"code check\");\n@@ -1653,0 +1668,1 @@\n+#ifdef RISCV\n@@ -1654,0 +1670,3 @@\n+#else\n+    assert(code() == lir_cmp || code() == lir_cmove || code() == lir_assert, \"only valid for cmp and cmove and assert\"); return _condition;\n+#endif\n@@ -1656,0 +1675,1 @@\n+#ifdef RISCV\n@@ -1657,0 +1677,3 @@\n+#else\n+    assert(code() == lir_cmp || code() == lir_cmove, \"only valid for cmp and cmove\");  _condition = condition;\n+#endif\n@@ -1670,0 +1693,1 @@\n+#ifdef RISCV\n@@ -1671,0 +1695,3 @@\n+#else\n+class LIR_OpBranch: public LIR_Op {\n+#endif\n@@ -1674,0 +1701,4 @@\n+#ifndef RISCV\n+  LIR_Condition _cond;\n+  BasicType     _type;\n+#endif\n@@ -1681,0 +1712,1 @@\n+#ifdef RISCV\n@@ -1682,0 +1714,5 @@\n+#else\n+    : LIR_Op(lir_branch, LIR_OprFact::illegalOpr, (CodeEmitInfo*) NULL)\n+    , _cond(cond)\n+    , _type(type)\n+#endif\n@@ -1693,8 +1730,8 @@\n-  LIR_Condition cond() const {\n-    return condition();\n-  }\n-\n-  void set_cond(LIR_Condition cond) {\n-    set_condition(cond);\n-  }\n-\n+#ifdef RISCV\n+  LIR_Condition cond()        const              { return condition();  }\n+  void set_cond(LIR_Condition cond)              { set_condition(cond); }\n+#else\n+  LIR_Condition cond()        const              { return _cond;        }\n+  void set_cond(LIR_Condition cond)              { _cond = cond;        }\n+#endif\n+  BasicType     type()        const              { return _type;        }\n@@ -1778,0 +1815,1 @@\n+#ifdef RISCV\n@@ -1835,0 +1873,1 @@\n+#endif\n@@ -2232,0 +2271,1 @@\n+#ifdef RISCV\n@@ -2236,0 +2276,5 @@\n+#else\n+  void cmove(LIR_Condition condition, LIR_Opr src1, LIR_Opr src2, LIR_Opr dst, BasicType type) {\n+    append(new LIR_Op2(lir_cmove, condition, src1, src2, dst, type));\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":57,"deletions":12,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -712,0 +712,6 @@\n+#ifndef RISCV\n+    case lir_cmove:\n+      cmove(op->condition(), op->in_opr1(), op->in_opr2(), op->result_opr(), op->type());\n+      break;\n+#endif\n+\n@@ -775,0 +781,1 @@\n+#ifdef RISCV\n@@ -786,0 +793,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -193,0 +193,1 @@\n+#ifdef RISCV\n@@ -194,0 +195,1 @@\n+#endif\n@@ -226,0 +228,1 @@\n+#ifdef RISCV\n@@ -228,0 +231,3 @@\n+#else\n+  void cmove(LIR_Condition code, LIR_Opr left, LIR_Opr right, LIR_Opr result, BasicType type);\n+#endif\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1245,0 +1245,1 @@\n+#ifdef RISCV\n@@ -1247,0 +1248,4 @@\n+#else\n+      assert(op->as_Op2() != NULL, \"lir_cmove must be LIR_Op2\");\n+      LIR_Op2* cmove = (LIR_Op2*)op;\n+#endif\n@@ -1249,1 +1254,1 @@\n-      LIR_Opr move_to   = cmove->result_opr();\n+      LIR_Opr move_to = cmove->result_opr();\n@@ -6299,0 +6304,1 @@\n+#ifdef RISCV\n@@ -6300,0 +6306,3 @@\n+#else\n+              LIR_Op2* prev_cmove = NULL;\n+#endif\n@@ -6305,0 +6314,1 @@\n+#ifdef RISCV\n@@ -6307,0 +6317,4 @@\n+#else\n+                  assert(prev_op->as_Op2() != NULL, \"cmove must be of type LIR_Op2\");\n+                  prev_cmove = (LIR_Op2*)prev_op;\n+#endif\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -103,0 +103,1 @@\n+#ifdef RISCV\n@@ -104,0 +105,3 @@\n+#else\n+      LIR_Op(),\n+#endif\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}