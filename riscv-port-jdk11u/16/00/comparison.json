{"files":[{"patch":"@@ -314,7 +314,0 @@\n-void Assembler::ifence() {\n-  fence_i();\n-  if (UseConservativeFence) {\n-    fence(ir, ir);\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -321,1 +321,0 @@\n-  void ifence();\n@@ -900,1 +899,0 @@\n-  INSN(fence_i, 0b0001111, 0b001, 0b000000000000);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-  \/\/ fence_i + fence* + (lui, addi, slli, addi, slli, addi) + (lui, addi, slli, addi, slli) + jalr\n-  return NativeFenceI::instruction_size() + 12 * NativeInstruction::instruction_size;\n+  \/\/ (lui, addi, slli, addi, slli, addi) + (lui, addi, slli, addi, slli) + jalr\n+  return 12 * NativeInstruction::instruction_size;\n@@ -100,2 +100,1 @@\n-  NativeMovConstReg* method_holder\n-    = nativeMovConstReg_at(stub + NativeFenceI::instruction_size());\n+  NativeMovConstReg* method_holder = nativeMovConstReg_at(stub);\n@@ -126,2 +125,1 @@\n-  NativeMovConstReg* method_holder\n-    = nativeMovConstReg_at(stub + NativeFenceI::instruction_size());\n+  NativeMovConstReg* method_holder = nativeMovConstReg_at(stub);\n@@ -144,2 +142,1 @@\n-  NativeMovConstReg* method_holder\n-    = nativeMovConstReg_at(stub + NativeFenceI::instruction_size());\n+  NativeMovConstReg* method_holder = nativeMovConstReg_at(stub);\n","filename":"src\/hotspot\/cpu\/riscv\/compiledIC_riscv.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -102,2 +102,1 @@\n-          \"Extend i for r and o for w in the pred\/succ flags of fence;\"          \\\n-          \"Extend fence.i to fence.i + fence.\")                                  \\\n+          \"Extend i for r and o for w in the pred\/succ flags of fence\")          \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -4,0 +4,1 @@\n+ * Copyright (c) 2023, Rivos Inc. All rights reserved.\n@@ -28,0 +29,2 @@\n+#include \"riscv_flush_icache.hpp\"\n+#include \"runtime\/java.hpp\"\n@@ -33,1 +36,9 @@\n-  os::icache_flush((long int) addr, (long int) (addr + (lines << ICache::log2_line_size)));\n+  \/\/ To make a store to instruction memory visible to all RISC-V harts,\n+  \/\/ the writing hart has to execute a data FENCE before requesting that\n+  \/\/ all remote RISC-V harts execute a FENCE.I.\n+\n+  \/\/ We need to make sure stores happens before the I\/D cache synchronization.\n+  __asm__ volatile(\"fence rw, rw\" : : : \"memory\");\n+\n+  RiscvFlushIcache::flush((uintptr_t)addr, ((uintptr_t)lines) << ICache::log2_line_size);\n+\n@@ -38,0 +49,6 @@\n+  \/\/ Only riscv_flush_icache is supported as I-cache synchronization.\n+  \/\/ We must make sure the VM can execute such without error.\n+  if (!RiscvFlushIcache::test()) {\n+    vm_exit_during_initialization(\"Unable to synchronize I-cache\");\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/icache_riscv.cpp","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -577,1 +577,0 @@\n-  ifence();\n@@ -4140,4 +4139,0 @@\n-void MacroAssembler::safepoint_ifence() {\n-  ifence();\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -74,3 +74,0 @@\n-  \/\/ Place a fence.i after code may have been modified due to a safepoint.\n-  void safepoint_ifence();\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-\/\/ - - NativeFenceI\n@@ -556,8 +555,0 @@\n-class NativeFenceI : public NativeInstruction {\n-public:\n-  static inline int instruction_size() {\n-    \/\/ 2 for fence.i + fence\n-    return (UseConservativeFence ? 2 : 1) * NativeInstruction::instruction_size;\n-  }\n-};\n-\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -334,4 +334,0 @@\n-  \/\/ Explicit fence.i required because fixup_callers_callsite may change the code\n-  \/\/ stream.\n-  __ safepoint_ifence();\n-\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,19 +40,0 @@\n-  \/\/ SYSCALL_RISCV_FLUSH_ICACHE is used to flush instruction cache. The \"fence.i\" instruction\n-  \/\/ only work on the current hart, so kernel provides the icache flush syscall to flush icache\n-  \/\/ on each hart. You can pass a flag to determine a global or local icache flush.\n-  static void icache_flush(long int start, long int end)\n-  {\n-    const int SYSCALL_RISCV_FLUSH_ICACHE = 259;\n-    register long int __a7 asm (\"a7\") = SYSCALL_RISCV_FLUSH_ICACHE;\n-    register long int __a0 asm (\"a0\") = start;\n-    register long int __a1 asm (\"a1\") = end;\n-    \/\/ the flush can be applied to either all threads or only the current.\n-    \/\/ 0 means a global icache flush, and the icache flush will be applied\n-    \/\/ to other harts concurrently executing.\n-    register long int __a2 asm (\"a2\") = 0;\n-    __asm__ volatile (\"ecall\\n\\t\"\n-                      : \"+r\" (__a0)\n-                      : \"r\" (__a0), \"r\" (__a1), \"r\" (__a2), \"r\" (__a7)\n-                      : \"memory\");\n-  }\n-\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.hpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Rivos Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"logging\/log.hpp\"\n+#include \"riscv_flush_icache.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/vm_version.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+#include <sys\/syscall.h>\n+#include <unistd.h>\n+\n+#define check_with_errno(check_type, cond, msg)                             \\\n+  do {                                                                      \\\n+    int err = errno;                                                        \\\n+    check_type(cond, \"%s; error='%s' (errno=%s)\", msg, os::strerror(err),   \\\n+               os::errno_name(err));                                        \\\n+} while (false)\n+\n+#define assert_with_errno(cond, msg)    check_with_errno(assert, cond, msg)\n+#define guarantee_with_errno(cond, msg) check_with_errno(guarantee, cond, msg)\n+\n+#ifndef NR_riscv_flush_icache\n+#ifndef NR_arch_specific_syscall\n+#define NR_arch_specific_syscall 244\n+#endif\n+#define NR_riscv_flush_icache (NR_arch_specific_syscall + 15)\n+#endif\n+\n+#define SYS_RISCV_FLUSH_ICACHE_LOCAL 1UL\n+#define SYS_RISCV_FLUSH_ICACHE_ALL   0UL\n+\n+static long sys_flush_icache(uintptr_t start, uintptr_t end , uintptr_t flags) {\n+  return syscall(NR_riscv_flush_icache, start, end, flags);\n+}\n+\n+bool RiscvFlushIcache::test() {\n+  alignas(64) char memory[64];\n+  long ret = sys_flush_icache((uintptr_t)&memory[0],\n+                              (uintptr_t)&memory[sizeof(memory) - 1],\n+                              SYS_RISCV_FLUSH_ICACHE_ALL);\n+  if (ret == 0) {\n+    return true;\n+  }\n+  int err = errno;                                                        \\\n+  log_error(os)(\"Syscall: RISCV_FLUSH_ICACHE not available; error='%s' (errno=%s)\",\n+                os::strerror(err), os::errno_name(err));\n+  return false;\n+}\n+\n+void RiscvFlushIcache::flush(uintptr_t start, uintptr_t end) {\n+  long ret = sys_flush_icache(start, end, SYS_RISCV_FLUSH_ICACHE_ALL);\n+  guarantee_with_errno(ret == 0, \"riscv_flush_icache failed\");\n+}\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_flush_icache.cpp","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Rivos Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_LINUX_RISCV_FLUSH_ICACHE_LINUX_HPP\n+#define OS_LINUX_RISCV_FLUSH_ICACHE_LINUX_HPP\n+\n+#include \"memory\/allStatic.hpp\"\n+#include \"runtime\/vm_version.hpp\"\n+#include \"utilities\/growableArray.hpp\"\n+\n+class RiscvFlushIcache: public AllStatic {\n+ public:\n+  static bool test();\n+  static void flush(uintptr_t start, uintptr_t end);\n+};\n+\n+#endif \/\/ OS_LINUX_RISCV_FLUSH_ICACHE_LINUX_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_flush_icache.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}