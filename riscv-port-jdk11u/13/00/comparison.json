{"files":[{"patch":"@@ -1948,0 +1948,1 @@\n+\/\/ Currently only support Zba and Zbb.\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -107,1 +107,2 @@\n-  experimental(bool, UseRVB, false, \"Use RVB instructions\")                      \\\n+  experimental(bool, UseZba, false, \"Use Zba instructions\")                      \\\n+  experimental(bool, UseZbb, false, \"Use Zbb instructions\")                      \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1429,1 +1429,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1446,1 +1446,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1463,1 +1463,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1480,1 +1480,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1484,1 +1484,1 @@\n-    zext_w(Rd, Rd);\n+    zero_extend(Rd, Rd, 32);\n@@ -1513,1 +1513,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1517,1 +1517,1 @@\n-    zext_w(tmp1, Rd);\n+    zero_extend(tmp1, Rd, 32);\n@@ -1522,1 +1522,1 @@\n-    zext_w(Rd, Rd);\n+    zero_extend(Rd, Rd, 32);\n@@ -1537,1 +1537,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1551,1 +1551,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1573,1 +1573,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -3711,1 +3711,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -4053,1 +4053,1 @@\n-  if (UseRVB) {\n+  if (UseZba) {\n@@ -4075,8 +4075,8 @@\n-  if (UseRVB) {\n-    if (bits == 16) {\n-      zext_h(dst, src);\n-      return;\n-    } else if (bits == 32) {\n-      zext_w(dst, src);\n-      return;\n-    }\n+  if (UseZba && bits == 32) {\n+    zext_w(dst, src);\n+    return;\n+  }\n+\n+  if (UseZbb && bits == 16) {\n+    zext_h(dst, src);\n+    return;\n@@ -4094,1 +4094,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1486,1 +1486,1 @@\n-      return UseRVB;\n+      return UseZbb;\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-instruct convP2I_rvb(iRegINoSp dst, iRegP src) %{\n-  predicate(UseRVB);\n+instruct convP2I_b(iRegINoSp dst, iRegP src) %{\n+  predicate(UseZba);\n@@ -33,1 +33,1 @@\n-  format %{ \"zext.w  $dst, $src\\t# ptr -> int @convP2I_rvb\" %}\n+  format %{ \"zext.w  $dst, $src\\t# ptr -> int @convP2I_b\" %}\n@@ -44,2 +44,2 @@\n-instruct convB2I_reg_reg_rvb(iRegINoSp dst, iRegIorL2I src, immI_24 lshift, immI_24 rshift) %{\n-  predicate(UseRVB);\n+instruct convB2I_reg_reg_b(iRegINoSp dst, iRegIorL2I src, immI_24 lshift, immI_24 rshift) %{\n+  predicate(UseZbb);\n@@ -48,1 +48,1 @@\n-  format %{ \"sext.b  $dst, $src\\t# b2i, #@convB2I_reg_reg_rvb\" %}\n+  format %{ \"sext.b  $dst, $src\\t# b2i, #@convB2I_reg_reg_b\" %}\n@@ -59,2 +59,2 @@\n-instruct convI2S_reg_reg_rvb(iRegINoSp dst, iRegIorL2I src, immI_16 lshift, immI_16 rshift) %{\n-  predicate(UseRVB);\n+instruct convI2S_reg_reg_b(iRegINoSp dst, iRegIorL2I src, immI_16 lshift, immI_16 rshift) %{\n+  predicate(UseZbb);\n@@ -63,1 +63,1 @@\n-  format %{ \"sext.h  $dst, $src\\t# i2s, #@convI2S_reg_reg_rvb\" %}\n+  format %{ \"sext.h  $dst, $src\\t# i2s, #@convI2S_reg_reg_b\" %}\n@@ -74,2 +74,2 @@\n-instruct convS2UI_reg_reg_rvb(iRegINoSp dst, iRegIorL2I src, immI_16bits mask) %{\n-  predicate(UseRVB);\n+instruct convS2UI_reg_reg_b(iRegINoSp dst, iRegIorL2I src, immI_16bits mask) %{\n+  predicate(UseZbb);\n@@ -78,1 +78,1 @@\n-  format %{ \"zext.h  $dst, $src\\t# s2ui, #@convS2UI_reg_reg_rvb\" %}\n+  format %{ \"zext.h  $dst, $src\\t# s2ui, #@convS2UI_reg_reg_b\" %}\n@@ -89,2 +89,2 @@\n-instruct convI2UL_reg_reg_rvb(iRegLNoSp dst, iRegIorL2I src, immL_32bits mask) %{\n-  predicate(UseRVB);\n+instruct convI2UL_reg_reg_b(iRegLNoSp dst, iRegIorL2I src, immL_32bits mask) %{\n+  predicate(UseZba);\n@@ -93,1 +93,1 @@\n-  format %{ \"zext.w  $dst, $src\\t# i2ul, #@convI2UL_reg_reg_rvb\" %}\n+  format %{ \"zext.w  $dst, $src\\t# i2ul, #@convI2UL_reg_reg_b\" %}\n@@ -104,2 +104,2 @@\n-instruct bytes_reverse_int_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct bytes_reverse_int_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -109,1 +109,1 @@\n-  format %{ \"revb_w_w  $dst, $src\\t#@bytes_reverse_int_rvb\" %}\n+  format %{ \"revb_w_w  $dst, $src\\t#@bytes_reverse_int_b\" %}\n@@ -118,2 +118,2 @@\n-instruct bytes_reverse_long_rvb(iRegLNoSp dst, iRegL src) %{\n-  predicate(UseRVB);\n+instruct bytes_reverse_long_b(iRegLNoSp dst, iRegL src) %{\n+  predicate(UseZbb);\n@@ -123,1 +123,1 @@\n-  format %{ \"rev8  $dst, $src\\t#@bytes_reverse_long_rvb\" %}\n+  format %{ \"rev8  $dst, $src\\t#@bytes_reverse_long_b\" %}\n@@ -132,2 +132,2 @@\n-instruct bytes_reverse_unsigned_short_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct bytes_reverse_unsigned_short_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -137,1 +137,1 @@\n-  format %{ \"revb_h_h_u  $dst, $src\\t#@bytes_reverse_unsigned_short_rvb\" %}\n+  format %{ \"revb_h_h_u  $dst, $src\\t#@bytes_reverse_unsigned_short_b\" %}\n@@ -146,2 +146,2 @@\n-instruct bytes_reverse_short_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct bytes_reverse_short_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -151,1 +151,1 @@\n-  format %{ \"revb_h_h  $dst, $src\\t#@bytes_reverse_short_rvb\" %}\n+  format %{ \"revb_h_h  $dst, $src\\t#@bytes_reverse_short_b\" %}\n@@ -161,2 +161,2 @@\n-instruct shaddP_reg_reg_rvb(iRegPNoSp dst, iRegP src1, iRegL src2, immIScale imm) %{\n-  predicate(UseRVB);\n+instruct shaddP_reg_reg_b(iRegPNoSp dst, iRegP src1, iRegL src2, immIScale imm) %{\n+  predicate(UseZba);\n@@ -166,1 +166,1 @@\n-  format %{ \"shadd  $dst, $src2, $src1, $imm\\t# ptr, #@shaddP_reg_reg_rvb\" %}\n+  format %{ \"shadd  $dst, $src2, $src1, $imm\\t# ptr, #@shaddP_reg_reg_b\" %}\n@@ -179,2 +179,2 @@\n-instruct shaddP_reg_reg_ext_rvb(iRegPNoSp dst, iRegP src1, iRegI src2, immIScale imm) %{\n-  predicate(UseRVB);\n+instruct shaddP_reg_reg_ext_b(iRegPNoSp dst, iRegP src1, iRegI src2, immIScale imm) %{\n+  predicate(UseZba);\n@@ -184,1 +184,1 @@\n-  format %{ \"shadd  $dst, $src2, $src1, $imm\\t# ptr, #@shaddP_reg_reg_ext_rvb\" %}\n+  format %{ \"shadd  $dst, $src2, $src1, $imm\\t# ptr, #@shaddP_reg_reg_ext_b\" %}\n@@ -198,2 +198,2 @@\n-instruct shaddL_reg_reg_rvb(iRegLNoSp dst, iRegL src1, iRegL src2, immIScale imm) %{\n-  predicate(UseRVB);\n+instruct shaddL_reg_reg_b(iRegLNoSp dst, iRegL src1, iRegL src2, immIScale imm) %{\n+  predicate(UseZba);\n@@ -203,1 +203,1 @@\n-  format %{ \"shadd  $dst, $src2, $src1, $imm\\t#@shaddL_reg_reg_rvb\" %}\n+  format %{ \"shadd  $dst, $src2, $src1, $imm\\t#@shaddL_reg_reg_b\" %}\n@@ -216,2 +216,2 @@\n-instruct shaddL_reg_reg_ext_rvb(iRegLNoSp dst, iRegL src1, iRegI src2, immIScale imm) %{\n-  predicate(UseRVB);\n+instruct shaddL_reg_reg_ext_b(iRegLNoSp dst, iRegL src1, iRegI src2, immIScale imm) %{\n+  predicate(UseZba);\n@@ -221,1 +221,1 @@\n-  format %{ \"shadd  $dst, $src2, $src1, $imm\\t#@shaddL_reg_reg_ext_rvb\" %}\n+  format %{ \"shadd  $dst, $src2, $src1, $imm\\t#@shaddL_reg_reg_ext_b\" %}\n@@ -235,2 +235,2 @@\n-instruct countLeadingZerosI_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct countLeadingZerosI_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -240,1 +240,1 @@\n-  format %{ \"clzw  $dst, $src\\t#@countLeadingZerosI_rvb\" %}\n+  format %{ \"clzw  $dst, $src\\t#@countLeadingZerosI_b\" %}\n@@ -249,2 +249,2 @@\n-instruct countLeadingZerosL_rvb(iRegINoSp dst, iRegL src) %{\n-  predicate(UseRVB);\n+instruct countLeadingZerosL_b(iRegINoSp dst, iRegL src) %{\n+  predicate(UseZbb);\n@@ -254,1 +254,1 @@\n-  format %{ \"clz  $dst, $src\\t#@countLeadingZerosL_rvb\" %}\n+  format %{ \"clz  $dst, $src\\t#@countLeadingZerosL_b\" %}\n@@ -263,2 +263,2 @@\n-instruct countTrailingZerosI_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct countTrailingZerosI_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -268,1 +268,1 @@\n-  format %{ \"ctzw  $dst, $src\\t#@countTrailingZerosI_rvb\" %}\n+  format %{ \"ctzw  $dst, $src\\t#@countTrailingZerosI_b\" %}\n@@ -277,2 +277,2 @@\n-instruct countTrailingZerosL_rvb(iRegINoSp dst, iRegL src) %{\n-  predicate(UseRVB);\n+instruct countTrailingZerosL_b(iRegINoSp dst, iRegL src) %{\n+  predicate(UseZbb);\n@@ -282,1 +282,1 @@\n-  format %{ \"ctz  $dst, $src\\t#@countTrailingZerosL_rvb\" %}\n+  format %{ \"ctz  $dst, $src\\t#@countTrailingZerosL_b\" %}\n@@ -292,1 +292,1 @@\n-instruct popCountI_rvb(iRegINoSp dst, iRegIorL2I src) %{\n+instruct popCountI_b(iRegINoSp dst, iRegIorL2I src) %{\n@@ -297,1 +297,1 @@\n-  format %{ \"cpopw  $dst, $src\\t#@popCountI_rvb\" %}\n+  format %{ \"cpopw  $dst, $src\\t#@popCountI_b\" %}\n@@ -307,1 +307,1 @@\n-instruct popCountL_rvb(iRegINoSp dst, iRegL src) %{\n+instruct popCountL_b(iRegINoSp dst, iRegL src) %{\n@@ -312,1 +312,1 @@\n-  format %{ \"cpop  $dst, $src\\t#@popCountL_rvb\" %}\n+  format %{ \"cpop  $dst, $src\\t#@popCountL_b\" %}\n@@ -322,2 +322,2 @@\n-instruct minI_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2) %{\n-  predicate(UseRVB);\n+instruct minI_reg_b(iRegINoSp dst, iRegI src1, iRegI src2) %{\n+  predicate(UseZbb);\n@@ -327,1 +327,1 @@\n-  format %{ \"min  $dst, $src1, $src2\\t#@minI_reg_rvb\" %}\n+  format %{ \"min  $dst, $src1, $src2\\t#@minI_reg_b\" %}\n@@ -336,2 +336,2 @@\n-instruct maxI_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2) %{\n-  predicate(UseRVB);\n+instruct maxI_reg_b(iRegINoSp dst, iRegI src1, iRegI src2) %{\n+  predicate(UseZbb);\n@@ -341,1 +341,1 @@\n-  format %{ \"max  $dst, $src1, $src2\\t#@maxI_reg_rvb\" %}\n+  format %{ \"max  $dst, $src1, $src2\\t#@maxI_reg_b\" %}\n@@ -351,2 +351,2 @@\n-instruct absI_reg_rvb(iRegINoSp dst, iRegI src) %{\n-  predicate(UseRVB);\n+instruct absI_reg_b(iRegINoSp dst, iRegI src) %{\n+  predicate(UseZbb);\n@@ -358,1 +358,1 @@\n-    \"max  $dst, $src, t0\\t#@absI_reg_rvb\"\n+    \"max  $dst, $src, t0\\t#@absI_reg_b\"\n@@ -369,2 +369,2 @@\n-instruct absL_reg_rvb(iRegLNoSp dst, iRegL src) %{\n-  predicate(UseRVB);\n+instruct absL_reg_b(iRegLNoSp dst, iRegL src) %{\n+  predicate(UseZbb);\n@@ -376,1 +376,1 @@\n-    \"max $dst, $src, t0\\t#@absL_reg_rvb\"\n+    \"max  $dst, $src, t0\\t#@absL_reg_b\"\n@@ -388,2 +388,2 @@\n-instruct andnI_reg_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n-  predicate(UseRVB);\n+instruct andnI_reg_reg_b(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n+  predicate(UseZbb);\n@@ -393,1 +393,1 @@\n-  format %{ \"andn  $dst, $src1, $src2\\t#@andnI_reg_reg_rvb\" %}\n+  format %{ \"andn  $dst, $src1, $src2\\t#@andnI_reg_reg_b\" %}\n@@ -404,2 +404,2 @@\n-instruct andnL_reg_reg_rvb(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n-  predicate(UseRVB);\n+instruct andnL_reg_reg_b(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n+  predicate(UseZbb);\n@@ -409,1 +409,1 @@\n-  format %{ \"andn  $dst, $src1, $src2\\t#@andnL_reg_reg_rvb\" %}\n+  format %{ \"andn  $dst, $src1, $src2\\t#@andnL_reg_reg_b\" %}\n@@ -421,2 +421,2 @@\n-instruct ornI_reg_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n-  predicate(UseRVB);\n+instruct ornI_reg_reg_b(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n+  predicate(UseZbb);\n@@ -426,1 +426,1 @@\n-  format %{ \"orn  $dst, $src1, $src2\\t#@ornI_reg_reg_rvb\" %}\n+  format %{ \"orn  $dst, $src1, $src2\\t#@ornI_reg_reg_b\" %}\n@@ -437,2 +437,2 @@\n-instruct ornL_reg_reg_rvb(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n-  predicate(UseRVB);\n+instruct ornL_reg_reg_b(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n+  predicate(UseZbb);\n@@ -442,1 +442,1 @@\n-  format %{ \"orn  $dst, $src1, $src2\\t#@ornL_reg_reg_rvb\" %}\n+  format %{ \"orn  $dst, $src1, $src2\\t#@ornL_reg_reg_b\" %}\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":79,"deletions":79,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -105,5 +105,0 @@\n-  if (UseRVB && !(_features & CPU_B)) {\n-    warning(\"RVB is not supported on this CPU\");\n-    FLAG_SET_DEFAULT(UseRVB, false);\n-  }\n-\n@@ -119,1 +114,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -59,2 +59,1 @@\n-    decl(V,            \"v\",           21)     \\\n-    decl(B,            \"b\",            1)\n+    decl(V,            \"v\",           21)\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,4 +63,0 @@\n-#ifndef HWCAP_ISA_B\n-#define HWCAP_ISA_B  (1 << ('B' - 'A'))\n-#endif\n-\n@@ -93,1 +89,4 @@\n-  STATIC_ASSERT(CPU_B == HWCAP_ISA_B);\n+\n+  \/\/ RISC-V has four bit-manipulation ISA-extensions: Zba\/Zbb\/Zbc\/Zbs.\n+  \/\/ Availability for those extensions could not be queried from HWCAP.\n+  \/\/ TODO: Add proper detection for those extensions.\n@@ -101,2 +100,1 @@\n-      HWCAP_ISA_V |\n-      HWCAP_ISA_B);\n+      HWCAP_ISA_V);\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vm_version_linux_riscv.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}