{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,1 +124,0 @@\n-  _discoveredCleanerRefs = &_discoveredPhantomRefs[_max_num_q];\n@@ -251,8 +250,1 @@\n-      process_discovered_reflist(_discoveredPhantomRefs, NULL, false,\n-                                 is_alive, keep_alive, complete_gc, task_executor);\n-\n-    \/\/ Process cleaners, but include them in phantom statistics.  We expect\n-    \/\/ Cleaner references to be temporary, and don't want to deal with\n-    \/\/ possible incompatibilities arising from making it more visible.\n-    phantom_count +=\n-      process_discovered_reflist(_discoveredCleanerRefs, NULL, true,\n+      process_discovered_reflist(_discoveredPhantomRefs, NULL, true,\n@@ -892,1 +884,0 @@\n-  balance_queues(_discoveredCleanerRefs);\n@@ -1052,3 +1043,0 @@\n-    case REF_CLEANER:\n-      list = &_discoveredCleanerRefs[id];\n-      break;\n@@ -1320,11 +1308,0 @@\n-\n-    \/\/ Cleaner references.  Included in timing for phantom references.  We\n-    \/\/ expect Cleaner references to be temporary, and don't want to deal with\n-    \/\/ possible incompatibilities arising from making it more visible.\n-    for (uint i = 0; i < _max_num_q; i++) {\n-      if (yield->should_return()) {\n-        return;\n-      }\n-      preclean_discovered_reflist(_discoveredCleanerRefs[i], is_alive,\n-                                  keep_alive, complete_gc, yield);\n-    }\n@@ -1399,1 +1376,0 @@\n-     case 4: return \"CleanerRef\";\n","filename":"hotspot\/src\/share\/vm\/memory\/referenceProcessor.cpp","additions":2,"deletions":26,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n@@ -267,1 +267,0 @@\n-  DiscoveredList* _discoveredCleanerRefs;\n@@ -270,1 +269,1 @@\n-  static int number_of_subclasses_of_ref() { return (REF_CLEANER - REF_OTHER); }\n+  static int number_of_subclasses_of_ref() { return (REF_PHANTOM - REF_OTHER); }\n","filename":"hotspot\/src\/share\/vm\/memory\/referenceProcessor.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -677,1 +677,0 @@\n-      static_field(SystemDictionary,            WK_KLASS(Cleaner_klass),                       Klass*)                               \\\n","filename":"hotspot\/src\/share\/vm\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}