{"files":[{"patch":"@@ -41,0 +41,1 @@\n+#include \"gc_implementation\/shenandoah\/shenandoahStringDedup.hpp\"\n@@ -2631,1 +2632,1 @@\n-  if (UseG1GC) {\n+  if (UseG1GC || (UseShenandoahGC && ShenandoahSATBBarrier)) {\n@@ -4252,0 +4253,18 @@\n+static oop lock_gc_or_pin_object(JavaThread* thread, jobject obj) {\n+  if (Universe::heap()->supports_object_pinning()) {\n+    const oop o = JNIHandles::resolve_non_null(obj);\n+    return Universe::heap()->pin_object(thread, o);\n+  } else {\n+    GC_locker::lock_critical(thread);\n+    return JNIHandles::resolve_non_null(obj);\n+  }\n+}\n+\n+static void unlock_gc_or_unpin_object(JavaThread* thread, jobject obj) {\n+  if (Universe::heap()->supports_object_pinning()) {\n+    const oop o = JNIHandles::resolve_non_null(obj);\n+    return Universe::heap()->unpin_object(thread, o);\n+  } else {\n+    GC_locker::unlock_critical(thread);\n+  }\n+}\n@@ -4261,1 +4280,0 @@\n-  GC_locker::lock_critical(thread);\n@@ -4265,1 +4283,1 @@\n-  oop a = JNIHandles::resolve_non_null(array);\n+  oop a = lock_gc_or_pin_object(thread, array);\n@@ -4293,1 +4311,1 @@\n-  GC_locker::unlock_critical(thread);\n+  unlock_gc_or_unpin_object(thread, array);\n@@ -4311,3 +4329,15 @@\n-  GC_locker::lock_critical(thread);\n-  if (isCopy != NULL) {\n-    *isCopy = JNI_FALSE;\n+  jchar* ret;\n+  if (!UseShenandoahGC) {\n+    GC_locker::lock_critical(thread);\n+    if (isCopy != NULL) {\n+      *isCopy = JNI_FALSE;\n+    }\n+    oop s = JNIHandles::resolve_non_null(string);\n+    int s_len = java_lang_String::length(s);\n+    typeArrayOop s_value = java_lang_String::value(s);\n+    int s_offset = java_lang_String::offset(s);\n+    if (s_len > 0) {\n+      ret = s_value->char_at_addr(s_offset);\n+    } else {\n+      ret = (jchar*) s_value->base(T_CHAR);\n+    }\n@@ -4315,9 +4345,24 @@\n-  oop s = JNIHandles::resolve_non_null(string);\n-  int s_len = java_lang_String::length(s);\n-  typeArrayOop s_value = java_lang_String::value(s);\n-  int s_offset = java_lang_String::offset(s);\n-  const jchar* ret;\n-  if (s_len > 0) {\n-    ret = s_value->char_at_addr(s_offset);\n-  } else {\n-    ret = (jchar*) s_value->base(T_CHAR);\n+#if INCLUDE_ALL_GCS\n+  else {\n+    assert(UseShenandoahGC, \"This path should only be taken with Shenandoah\");\n+    oop s = JNIHandles::resolve_non_null(string);\n+    if (ShenandoahStringDedup::is_enabled()) {\n+      typeArrayOop s_value = java_lang_String::value(s);\n+      int s_len = java_lang_String::length(s);\n+      ret = NEW_C_HEAP_ARRAY_RETURN_NULL(jchar, s_len + 1, mtInternal);  \/\/ add one for zero termination\n+      \/* JNI Specification states return NULL on OOM *\/\n+      if (ret != NULL) {\n+        memcpy(ret, s_value->char_at_addr(0), s_len * sizeof(jchar));\n+        ret[s_len] = 0;\n+      }\n+      if (isCopy != NULL) *isCopy = JNI_TRUE;\n+    } else {\n+      typeArrayOop s_value = java_lang_String::value(s);\n+      s_value = (typeArrayOop) Universe::heap()->pin_object(thread, s_value);\n+      ret = (jchar *) s_value->base(T_CHAR);\n+      if (isCopy != NULL) *isCopy = JNI_FALSE;\n+    }\n+  }\n+#else\n+  else {\n+    ShouldNotReachHere();\n@@ -4325,0 +4370,1 @@\n+#endif\n@@ -4343,2 +4389,22 @@\n-  \/\/ The str and chars arguments are ignored\n-  GC_locker::unlock_critical(thread);\n+  if (!UseShenandoahGC) {\n+    \/\/ The str and chars arguments are ignored\n+    GC_locker::unlock_critical(thread);\n+  }\n+#if INCLUDE_ALL_GCS\n+  else if (ShenandoahStringDedup::is_enabled()) {\n+    assert(UseShenandoahGC, \"This path should only be taken with Shenandoah\");\n+    \/\/ For copied string value, free jchar array allocated by earlier call to GetStringCritical.\n+    \/\/ This assumes that ReleaseStringCritical bookends GetStringCritical.\n+    FREE_C_HEAP_ARRAY(jchar, chars, mtInternal);\n+  } else {\n+    assert(UseShenandoahGC, \"This path should only be taken with Shenandoah\");\n+    oop s = JNIHandles::resolve_non_null(str);\n+    \/\/ For not copied string value, drop the associated gc-locker\/pin.\n+    typeArrayOop s_value = java_lang_String::value(s);\n+    Universe::heap()->unpin_object(thread, s_value);\n+  }\n+#else\n+  else {\n+    ShouldNotReachHere();\n+  }\n+#endif\n","filename":"hotspot\/src\/share\/vm\/prims\/jni.cpp","additions":84,"deletions":18,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -182,0 +182,1 @@\n+#define NOT_COMPILER1(code)\n@@ -184,0 +185,1 @@\n+#define NOT_COMPILER1(code) code\n","filename":"hotspot\/src\/share\/vm\/utilities\/macros.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}