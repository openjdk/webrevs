{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc_implementation\/shenandoah\/shenandoahHeap.hpp\"\n@@ -612,0 +613,23 @@\n+bool IfNode::is_shenandoah_marking_if(PhaseTransform *phase) const {\n+  if (!UseShenandoahGC) {\n+    return false;\n+  }\n+\n+  if (Opcode() != Op_If) {\n+    return false;\n+  }\n+\n+  Node* bol = in(1);\n+  assert(bol->is_Bool(), \"\");\n+  Node* cmpx = bol->in(1);\n+  if (bol->as_Bool()->_test._test == BoolTest::ne &&\n+      cmpx->is_Cmp() && cmpx->in(2) == phase->intcon(0) &&\n+      cmpx->in(1)->in(1)->is_shenandoah_state_load() &&\n+      cmpx->in(1)->in(2)->is_Con() &&\n+      cmpx->in(1)->in(2) == phase->intcon(ShenandoahHeap::MARKING)) {\n+    return true;\n+  }\n+\n+  return false;\n+}\n+\n","filename":"hotspot\/src\/share\/vm\/opto\/ifnode.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+#if INCLUDE_ALL_GCS\n+#include \"gc_implementation\/shenandoah\/c2\/shenandoahSupport.hpp\"\n+#endif\n+\n@@ -2627,0 +2631,6 @@\n+#if INCLUDE_ALL_GCS\n+    if (UseShenandoahGC && !C->major_progress()) {\n+      ShenandoahBarrierC2Support::pin_and_expand(this);\n+    }\n+#endif\n+\n@@ -3618,1 +3628,4 @@\n-      if (s->is_Load()) {\n+      if (s->is_Load() ||\n+          (UseShenandoahGC &&\n+           (s->is_ShenandoahBarrier() || s->Opcode() == Op_SafePoint ||\n+            (s->is_CallStaticJava() && s->as_CallStaticJava()->uncommon_trap_request() != 0)))) {\n@@ -3850,0 +3863,3 @@\n+    if (UseShenandoahGC && n->is_CMove()) {\n+      pinned = false;\n+    }\n@@ -3904,1 +3920,1 @@\n-    if (ctrl_out && ctrl_out->is_CountedLoop() &&\n+    if (UseShenandoahGC && ctrl_out && ctrl_out->is_Loop() &&\n@@ -3906,0 +3922,27 @@\n+      \/\/ Move the node above predicates as far up as possible so a\n+      \/\/ following pass of loop predication doesn't hoist a predicate\n+      \/\/ that depends on it above that node.\n+      Node* new_ctrl = least;\n+      for (;;) {\n+        if (!new_ctrl->is_Proj()) {\n+          break;\n+        }\n+        CallStaticJavaNode* call = new_ctrl->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+        if (call == NULL) {\n+          break;\n+        }\n+        int req = call->uncommon_trap_request();\n+        Deoptimization::DeoptReason trap_reason = Deoptimization::trap_request_reason(req);\n+        if (trap_reason != Deoptimization::Reason_loop_limit_check &&\n+            trap_reason != Deoptimization::Reason_predicate) {\n+          break;\n+        }\n+        Node* c = new_ctrl->in(0)->in(0);\n+        if (is_dominator(c, early) && c != early) {\n+          break;\n+        }\n+        new_ctrl = c;\n+      }\n+      least = new_ctrl;\n+    } else if (ctrl_out && ctrl_out->is_CountedLoop() &&\n+               least == ctrl_out->in(LoopNode::EntryControl)) {\n@@ -4091,0 +4134,1 @@\n+#endif\n@@ -4113,1 +4157,0 @@\n-#endif\n","filename":"hotspot\/src\/share\/vm\/opto\/loopnode.cpp","additions":46,"deletions":3,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -574,0 +574,1 @@\n+public:\n@@ -578,0 +579,1 @@\n+private:\n@@ -753,0 +755,1 @@\n+public:\n@@ -765,0 +768,2 @@\n+\n+private:\n@@ -1052,0 +1057,1 @@\n+\n@@ -1086,0 +1092,1 @@\n+  void rpo( Node *start, Node_Stack &stk, VectorSet &visited, Node_List &rpo_list ) const;\n@@ -1090,1 +1097,0 @@\n-  void rpo( Node *start, Node_Stack &stk, VectorSet &visited, Node_List &rpo_list ) const;\n@@ -1102,0 +1108,3 @@\n+\n+  PhaseIterGVN& igvn() { return _igvn; }\n+  IdealLoopTree* ltree_root() const { return _ltree_root; }\n","filename":"hotspot\/src\/share\/vm\/opto\/loopnode.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}