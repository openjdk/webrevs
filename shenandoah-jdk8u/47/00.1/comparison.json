{"files":[{"patch":"@@ -2,1 +2,1 @@\n-project=jdk8u\n+project=shenandoah\n@@ -4,1 +4,1 @@\n-version=openjdk8u382\n+version=shenandoah8u382\n@@ -10,1 +10,1 @@\n-tags=(?:jdk-(?:[1-9]([0-9]*)(?:\\.(?:0|[1-9][0-9]*)){0,4})(?:\\+(?:(?:[0-9]+))|(?:-ga)))|(?:jdk[4-9](?:u\\d{1,3})?-(?:(?:b\\d{2,3})|(?:ga)))|(?:hs\\d\\d(?:\\.\\d{1,2})?-b\\d\\d)\n+tags=(?:jdk-(?:[1-9]([0-9]*)(?:\\.(?:0|[1-9][0-9]*)){0,4})(?:\\+(?:(?:[0-9]+))|(?:-ga)))|(?:jdk[4-9](?:u\\d{1,3})?-(?:(?:b\\d{2,3})|(?:ga)))|(?:hs\\d\\d(?:\\.\\d{1,2})?-b\\d\\d)|(?:aarch64-shenandoah-jdk[4-9](?:u\\d{1,3})?-(?:b\\d{2,3}))|(?:shenandoah-jdk[4-9](?:u\\d{1,3})?-(?:b\\d{2,3}))|(?:shenandoah[4-9](?:u\\d{1,3})?-(?:(?:b\\d{2,3})|(?:ga)))\n@@ -21,1 +21,1 @@\n-message=Merge\n+message=Merge.*\n@@ -24,1 +24,1 @@\n-reviewers=1\n+committers=1\n","filename":".jcheck\/conf","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-Copyright (c) 2000-2011 France T??l??com\n+Copyright (c) 2000-2011 France Télécom\n@@ -1038,1 +1038,1 @@\n-Copyright ?? 2011 Ecma International\n+Copyright © 2011 Ecma International\n@@ -2530,1 +2530,1 @@\n-Privacy Policy. For trademark usage, see the Unicode?? Consortium Name and\n+Privacy Policy. For trademark usage, see the Unicode® Consortium Name and\n@@ -2534,1 +2534,1 @@\n-   1. Copyright ?? 1991-2013 Unicode, Inc. All rights reserved.\n+   1. Copyright © 1991-2013 Unicode, Inc. All rights reserved.\n@@ -2539,1 +2539,1 @@\n-      works conforming to the Unicode?? Standard, subject to Terms and\n+      works conforming to the Unicode® Standard, subject to Terms and\n@@ -2605,1 +2605,1 @@\n-      Inc.  ???The Unicode Consortium??? and ???Unicode, Inc.??? are trade names of\n+      Inc.  “The Unicode Consortium” and “Unicode, Inc.” are trade names of\n@@ -2607,1 +2607,1 @@\n-      website indicates your acknowledgement of Unicode, Inc.???s exclusive\n+      website indicates your acknowledgement of Unicode, Inc.’s exclusive\n@@ -2611,2 +2611,2 @@\n-   2. The Unicode Consortium Name and Trademark Usage Policy (???Trademark\n-      Policy???) are incorporated herein by reference and you agree to abide by\n+   2. The Unicode Consortium Name and Trademark Usage Policy (“Trademark\n+      Policy”) are incorporated herein by reference and you agree to abide by\n@@ -2635,1 +2635,1 @@\n-      assign any part of this Agreement without Unicode???s prior written\n+      assign any part of this Agreement without Unicode’s prior written\n@@ -2640,1 +2640,1 @@\n-      Unicode???s net income.\n+      Unicode’s net income.\n@@ -2669,1 +2669,1 @@\n-Copyright ?? 1991-2012 Unicode, Inc. All rights reserved. Distributed under the\n+Copyright © 1991-2012 Unicode, Inc. All rights reserved. Distributed under the\n","filename":"THIRD_PARTY_README","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -105,0 +105,10 @@\n+\n+#if INCLUDE_ALL_GCS\n+protected:\n+  \/\/ Support for Shenandoah barriers. This is only accessible from JavaThread,\n+  \/\/ but we really want to keep this field at lower Thread offset (below first\n+  \/\/ 128 bytes), because that makes barrier fastpaths optimally encoded.\n+  char _gc_state;\n+  static char _gc_state_global;\n+#endif\n+\n@@ -260,0 +270,5 @@\n+  ThreadLocalAllocBuffer _gclab;                \/\/ Thread-local allocation buffer for GC (e.g. evacuation)\n+  uint _worker_id;                              \/\/ Worker ID\n+  bool _force_satb_flush;                       \/\/ Force SATB flush\n+  double _paced_time;                           \/\/ Accumulated paced time\n+\n@@ -262,0 +277,2 @@\n+  jlong _allocated_bytes_gclab;                 \/\/ Cumulative number of bytes allocated on\n+                                                \/\/ the Java heap, in GCLABs\n@@ -273,0 +290,2 @@\n+  char _oom_during_evac;\n+\n@@ -391,0 +410,8 @@\n+  bool is_oom_during_evac() const;\n+  void set_oom_during_evac(bool oom);\n+\n+#ifdef ASSERT\n+  bool is_evac_allowed() const;\n+  void set_evac_allowed(bool evac_allowed);\n+#endif\n+\n@@ -440,1 +467,4 @@\n-      tlab().initialize();\n+      tlab().initialize(false);\n+      if (UseShenandoahGC && (is_Java_thread() || is_Worker_thread())) {\n+        gclab().initialize(true);\n+      }\n@@ -444,0 +474,18 @@\n+  \/\/ Thread-Local GC Allocation Buffer (GCLAB) support\n+  ThreadLocalAllocBuffer& gclab()                {\n+    assert (UseShenandoahGC, \"Only for Shenandoah\");\n+    assert (!_gclab.is_initialized() || (is_Java_thread() || is_Worker_thread()),\n+            \"Only Java and GC worker threads are allowed to get GCLABs\");\n+    return _gclab;\n+  }\n+\n+  void set_worker_id(uint id)           { _worker_id = id; }\n+  uint worker_id()                      { return _worker_id; }\n+\n+  void set_force_satb_flush(bool value) { _force_satb_flush = value; }\n+  bool is_force_satb_flush()            { return _force_satb_flush; }\n+\n+  void add_paced_time(double v)         { _paced_time += v; }\n+  double paced_time()                   { return _paced_time; }\n+  void reset_paced_time()               { _paced_time = 0; }\n+\n@@ -449,0 +497,4 @@\n+  jlong allocated_bytes_gclab()                { return _allocated_bytes_gclab; }\n+  void set_allocated_bytes_gclab(jlong value)  { _allocated_bytes_gclab = value; }\n+  void incr_allocated_bytes_gclab(jlong size)  { _allocated_bytes_gclab += size; }\n+\n@@ -633,0 +685,4 @@\n+  static ByteSize gclab_start_offset()         { return byte_offset_of(Thread, _gclab) + ThreadLocalAllocBuffer::start_offset(); }\n+  static ByteSize gclab_top_offset()           { return byte_offset_of(Thread, _gclab) + ThreadLocalAllocBuffer::top_offset(); }\n+  static ByteSize gclab_end_offset()           { return byte_offset_of(Thread, _gclab) + ThreadLocalAllocBuffer::end_offset(); }\n+\n@@ -1388,0 +1444,3 @@\n+\n+  static ByteSize gc_state_offset()              { return byte_offset_of(JavaThread, _gc_state); }\n+\n@@ -1685,0 +1744,9 @@\n+\n+  inline char gc_state() const;\n+\n+private:\n+  void set_gc_state(char in_prog);\n+\n+public:\n+  static void set_gc_state_all_threads(char in_prog);\n+  static void set_force_satb_flush_all_threads(bool value);\n@@ -1930,0 +1998,1 @@\n+  static void java_threads_do(ThreadClosure* tc);\n","filename":"hotspot\/src\/share\/vm\/runtime\/thread.hpp","additions":70,"deletions":1,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC TestMetaspacePerfCounters\n@@ -44,0 +45,1 @@\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UsePerfData -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC TestMetaspacePerfCounters\n","filename":"hotspot\/test\/gc\/metaspace\/TestMetaspacePerfCounters.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}