{"files":[{"patch":"@@ -40,0 +40,4 @@\n+#if INCLUDE_ALL_GCS\n+#include \"gc_implementation\/shenandoah\/c2\/shenandoahSupport.hpp\"\n+#endif\n+\n@@ -2627,0 +2631,6 @@\n+#if INCLUDE_ALL_GCS\n+    if (UseShenandoahGC && !C->major_progress()) {\n+      ShenandoahBarrierC2Support::pin_and_expand(this);\n+    }\n+#endif\n+\n@@ -3618,1 +3628,4 @@\n-      if (s->is_Load()) {\n+      if (s->is_Load() ||\n+          (UseShenandoahGC &&\n+           (s->is_ShenandoahBarrier() || s->Opcode() == Op_SafePoint ||\n+            (s->is_CallStaticJava() && s->as_CallStaticJava()->uncommon_trap_request() != 0)))) {\n@@ -3850,0 +3863,3 @@\n+    if (UseShenandoahGC && n->is_CMove()) {\n+      pinned = false;\n+    }\n@@ -3904,1 +3920,1 @@\n-    if (ctrl_out && ctrl_out->is_CountedLoop() &&\n+    if (UseShenandoahGC && ctrl_out && ctrl_out->is_Loop() &&\n@@ -3906,0 +3922,27 @@\n+      \/\/ Move the node above predicates as far up as possible so a\n+      \/\/ following pass of loop predication doesn't hoist a predicate\n+      \/\/ that depends on it above that node.\n+      Node* new_ctrl = least;\n+      for (;;) {\n+        if (!new_ctrl->is_Proj()) {\n+          break;\n+        }\n+        CallStaticJavaNode* call = new_ctrl->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+        if (call == NULL) {\n+          break;\n+        }\n+        int req = call->uncommon_trap_request();\n+        Deoptimization::DeoptReason trap_reason = Deoptimization::trap_request_reason(req);\n+        if (trap_reason != Deoptimization::Reason_loop_limit_check &&\n+            trap_reason != Deoptimization::Reason_predicate) {\n+          break;\n+        }\n+        Node* c = new_ctrl->in(0)->in(0);\n+        if (is_dominator(c, early) && c != early) {\n+          break;\n+        }\n+        new_ctrl = c;\n+      }\n+      least = new_ctrl;\n+    } else if (ctrl_out && ctrl_out->is_CountedLoop() &&\n+               least == ctrl_out->in(LoopNode::EntryControl)) {\n@@ -4091,0 +4134,1 @@\n+#endif\n@@ -4113,1 +4157,0 @@\n-#endif\n","filename":"hotspot\/src\/share\/vm\/opto\/loopnode.cpp","additions":46,"deletions":3,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1691,1 +1691,1 @@\n-          assert(n_tail->is_Mem(), err_msg_res(\"unexpected node for memory slice: %s\", n_tail->Name()));\n+          assert(n_tail->is_Mem() || n_tail == n, err_msg_res(\"unexpected node for memory slice: %s\", n_tail->Name()));\n@@ -2343,0 +2343,21 @@\n+  if (UseShenandoahGC) {\n+    \/\/ Detect a Shenandoah write barrier between the pre and main loop\n+    \/\/ (which could break loop alignment code)\n+    CountedLoopNode *main_head = slp->lp()->as_CountedLoop();\n+    if (main_head->is_main_loop()) {\n+      Node* c = main_head->in(LoopNode::EntryControl)->in(0)->in(0)->in(0);\n+      if (!c->is_CountedLoopEnd()) {\n+        \/\/ in case of a reserve copy\n+        c = c->in(0)->in(0);\n+        assert(c->is_CountedLoopEnd(), \"where's the pre loop?\");\n+      }\n+      CountedLoopEndNode* pre_end = c->as_CountedLoopEnd();\n+      CountedLoopNode* pre_loop = pre_end->loopnode();\n+      assert(pre_loop->is_pre_loop(), \"where's the pre loop?\");\n+\n+      Node* base_c = phase()->get_ctrl(base);\n+      if (!phase()->is_dominator(base_c, pre_loop)) {\n+        return;\n+      }\n+    }\n+  }\n","filename":"hotspot\/src\/share\/vm\/opto\/superword.cpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -232,0 +232,1 @@\n+ friend class SWPointer;\n","filename":"hotspot\/src\/share\/vm\/opto\/superword.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -153,0 +153,5 @@\n+#if INCLUDE_JFR && INCLUDE_ALL_GCS\n+\/\/ JavaThread already has quite a few Shenandoah fields. Adding many JFR fields\n+\/\/ trips sizeof(JavaThread) > 1024. Need to adjust it here.\n+const int SerializePageShiftCount = 4;\n+#else\n@@ -155,0 +160,1 @@\n+#endif\n@@ -1471,0 +1477,1 @@\n+#define UINT64_FORMAT_X_W(width) \"%\" #width PRIx64\n","filename":"hotspot\/src\/share\/vm\/utilities\/globalDefinitions.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}