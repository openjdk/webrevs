{"files":[{"patch":"@@ -56,0 +56,3 @@\n+#if INCLUDE_ALL_GCS\n+#include \"gc_implementation\/shenandoah\/c2\/shenandoahSupport.hpp\"\n+#endif\n@@ -1027,0 +1030,3 @@\n+            if (n->is_MemBar() && UseShenandoahGC) {\n+              m->as_MachMemBar()->set_adr_type(n->adr_type());\n+            }\n@@ -1071,0 +1077,9 @@\n+      \/\/ Handle precedence edges for interior nodes\n+      for (i = n->len()-1; (uint)i >= n->req(); i--) {\n+        Node *m = n->in(i);\n+        if (m == NULL || C->node_arena()->contains(m)) continue;\n+        n->rm_prec(i);\n+        \/\/ set -1 to call add_prec() instead of set_req() during Step1\n+        mstack.push(m, Visit, n, -1);\n+      }\n+\n@@ -1761,0 +1776,8 @@\n+void Matcher::handle_precedence_edges(Node* n, MachNode *mach) {\n+  for (uint i = n->req(); i < n->len(); i++) {\n+    if (n->in(i) != NULL) {\n+      mach->add_prec(n->in(i));\n+    }\n+  }\n+}\n+\n@@ -1795,0 +1818,2 @@\n+  handle_precedence_edges(s->_leaf, mach);\n+\n@@ -1877,0 +1902,3 @@\n+\n+  handle_precedence_edges(s->_leaf, mach);\n+\n","filename":"hotspot\/src\/share\/vm\/opto\/matcher.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}