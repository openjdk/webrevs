{"files":[{"patch":"@@ -1359,0 +1359,17 @@\n+        boolean isIndexed = false;\n+\n+        @Override\n+        public void visitIndexed(JCArrayAccess tree) {\n+            boolean previousIsIndexed = isIndexed;\n+            try {\n+                isIndexed = true;\n+                scan(tree.indexed);\n+            } finally {\n+                isIndexed = previousIsIndexed;\n+            }\n+            scan(tree.index);\n+            if (mode == PrologueVisitorMode.SUPER_CONSTRUCTOR && isInstanceField(tree.indexed)) {\n+                localProxyVarsGen.addFieldReadInPrologue(localEnv.enclMethod, TreeInfo.symbolFor(tree.indexed));\n+            }\n+        }\n+\n@@ -1374,0 +1391,19 @@\n+            if (mode == PrologueVisitorMode.SUPER_CONSTRUCTOR) {\n+                for (JCTree subtree : ss.selectorTrees) {\n+                    if (isInstanceField(subtree)) {\n+                        \/\/ we need to add a proxy for this one\n+                        localProxyVarsGen.addFieldReadInPrologue(localEnv.enclMethod, TreeInfo.symbolFor(subtree));\n+                    }\n+                }\n+            }\n+        }\n+\n+        boolean isInstanceField(JCTree tree) {\n+            Symbol sym = TreeInfo.symbolFor(tree);\n+            return (sym != null &&\n+                    !sym.isStatic() &&\n+                    sym.kind == VAR &&\n+                    sym.owner.kind == TYP &&\n+                    sym.name != names._this &&\n+                    sym.name != names._super &&\n+                    isEarlyReference(localEnv, tree, sym));\n@@ -1437,1 +1473,3 @@\n-                        reportPrologueError(tree, sym, true);\n+                        if (!localEnv.enclClass.sym.isValueClass() || !sym.type.hasTag(ARRAY) || !isIndexed) {\n+                            reportPrologueError(tree, sym, true);\n+                        }\n@@ -1540,0 +1578,1 @@\n+            java.util.List<JCTree> selectorTrees = new ArrayList<>();\n@@ -1545,0 +1584,6 @@\n+            @Override\n+            public void visitSelect(JCFieldAccess tree) {\n+                super.visitSelect(tree);\n+                selectorTrees.add(tree.selected);\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":46,"deletions":1,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+        Assert.checkNonNull(sym, \"parameter 'sym' is null\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LocalProxyVarsGen.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @ignore fails at execution time because of Optional\n@@ -32,0 +31,3 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+\n@@ -81,1 +83,0 @@\n-            super();\n@@ -85,0 +86,1 @@\n+            super();\n@@ -104,1 +106,1 @@\n-        final int x;\n+        List<String> l = new ArrayList<>();\n@@ -106,1 +108,1 @@\n-            this.x = 12;\n+            l.add(\"\");\n@@ -119,1 +121,0 @@\n-            super();\n@@ -121,0 +122,1 @@\n+            super();\n@@ -237,20 +239,0 @@\n-    \/\/ Initializer in initializer block\n-    public static value class Test14 {\n-        final int x;                \/\/ initialized in constructor\n-        final int y;                \/\/ initialized in initialization block\n-        final int z = 13;           \/\/ initialized with intializer value\n-        public Test14() {\n-            this(0);\n-        }\n-        public Test14(boolean z) {\n-            this.x = z ? 1 : 0;\n-        }\n-        public Test14(int x) {\n-            super();\n-            this.x = x;\n-        }\n-        {\n-            this.y = -1;\n-        }\n-    }\n-\n@@ -385,26 +367,0 @@\n-    \/\/ Exceptions thrown by initializer block\n-    public static value class Test18 extends AR<Object> {\n-\n-        {\n-            if ((this.get().hashCode() % 3) == 0)\n-                throw new MyException();\n-        }\n-\n-        public Test18(Object obj) throws MyException {\n-            super(obj);\n-        }\n-\n-        public Test18(boolean fail) throws MyException {\n-            Object obj;\n-            for (obj = new Object(); true; obj = new Object()) {\n-                if (((obj.hashCode() % 3) == 0) != fail)\n-                    continue;\n-                break;\n-            }\n-            this(obj);\n-        }\n-\n-        public static class MyException extends Exception {\n-        }\n-    }\n-\n@@ -427,1 +383,0 @@\n-    \/\/ local class declared before super(), but not used until after super()\n@@ -429,5 +384,8 @@\n-        public Test20() {\n-            class Foo {\n-                Foo() {\n-                    Test20.this.hashCode();\n-                }\n+        private final int[] data1 = new int[10];\n+        private final int[] data2 = new int[10];\n+        private final int[] data3 = new int[10];\n+        Test20() {\n+            for (int i = 0; i < data1.length; i++) {\n+                data1[i] = i; \/\/ OK we are assigning to an array component\n+                this.data2[i] = i; \/\/ OK we are assigning to an array component\n+                Test20.this.data3[i] = i; \/\/ OK we are assigning to an array component\n@@ -435,15 +393,0 @@\n-            super();\n-            new Foo();\n-        }\n-    }\n-\n-    \/\/ local class inside super() parameter list\n-    public static value class Test21 extends AR<Object> {\n-        private int x = 1;\n-        public Test21() {\n-            super(switch (\"foo\".hashCode()) {\n-                default -> {\n-                    class Nested {{ System.out.println(x); }}       \/\/ class is NOT instantiated - OK\n-                    yield \"bar\";\n-                }\n-            });\n@@ -469,4 +412,0 @@\n-        Test14 t14 = new Test14();\n-        assert t14.x == 0 && t14.y == -1 && t14.z == 13;\n-        t14 = new Test14(7);\n-        assert t14.x == 7 && t14.y == -1 && t14.z == 13;\n@@ -482,11 +421,0 @@\n-        try {\n-            new Test18(true);\n-            assert false : \"expected exception\";\n-        } catch (Test18.MyException e) {\n-            \/\/ expected\n-        }\n-        try {\n-            new Test18(false);\n-        } catch (Test18.MyException e) {\n-            assert false : \"unexpected exception: \" + e;\n-        }\n@@ -495,1 +423,0 @@\n-        new Test21();\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/ValueClassSuperInitGood.java","additions":15,"deletions":88,"binary":false,"changes":103,"status":"modified"}]}