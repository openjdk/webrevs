{"files":[{"patch":"@@ -309,0 +309,15 @@\n+#define CHECK_THROW_NOSYNC_IE(obj) \\\n+  if (obj->klass()->is_inline_klass()) { \\\n+    ResourceMark rm(THREAD); \\\n+    const char* desc = \"Cannot synchronize on an instance of value class \"; \\\n+    const char* className = obj->klass()->external_name(); \\\n+    size_t msglen = strlen(desc) + strlen(className) + 1; \\\n+    char* message = NEW_RESOURCE_ARRAY(char, msglen); \\\n+    if (nullptr == message) { \\\n+      THROW_MSG(vmSymbols::java_lang_IdentityException(), className); \\\n+    } else { \\\n+      jio_snprintf(message, msglen, \"%s%s\", desc, className); \\\n+      THROW_MSG(vmSymbols::java_lang_IdentityException(), message); \\\n+    } \\\n+  }\n+\n@@ -543,2 +558,4 @@\n-  JavaThread* current = locking_thread;\n-  CHECK_THROW_NOSYNC_IMSE(obj);\n+  if (obj->klass()->is_inline_klass()) {\n+    \/\/ JITed code should never have locked an instance of a value class\n+    ShouldNotReachHere();\n+  }\n@@ -563,1 +580,2 @@\n-  CHECK_THROW_NOSYNC_IMSE(obj);\n+  JavaThread* THREAD = current;\n+  CHECK_THROW_NOSYNC_IE(obj);\n@@ -767,0 +785,1 @@\n+  JavaThread* THREAD = current;\n@@ -770,1 +789,2 @@\n-  CHECK_THROW_NOSYNC_IMSE(obj);\n+\n+  CHECK_THROW_NOSYNC_IE(obj);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @summary test JNI functions with inline types\n+ * @summary test JNI functions with instances of value classes\n+ * @library \/test\/lib\n@@ -31,0 +32,3 @@\n+\n+ import jdk.test.lib.Asserts;\n+\n@@ -51,0 +55,1 @@\n+        boolean sawIe = false;\n@@ -54,2 +59,2 @@\n-        } catch (Throwable t) {\n-            sawImse = checkImse(t);\n+        } catch (IdentityException ie) {\n+            sawIe = true;\n@@ -57,4 +62,1 @@\n-        if (!sawImse) {\n-            throw new RuntimeException(\"JNI MonitorEnter did not fail\");\n-        }\n-        sawImse = false;\n+        Asserts.assertTrue(sawIe, \"Missing IdentityException\");\n@@ -63,11 +65,2 @@\n-        } catch (Throwable t) {\n-            sawImse = checkImse(t);\n-        }\n-        if (!sawImse) {\n-            throw new RuntimeException(\"JNI MonitorExit did not fail\");\n-        }\n-    }\n-\n-    static boolean checkImse(Throwable t) {\n-        if (t instanceof IllegalMonitorStateException) {\n-            return true;\n+        } catch (IllegalMonitorStateException imse) {\n+            sawImse = true;\n@@ -75,1 +68,1 @@\n-        throw new RuntimeException(t);\n+        Asserts.assertTrue(sawImse, \"Missing IllegalMonitorStateException\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineWithJni.java","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"}]}