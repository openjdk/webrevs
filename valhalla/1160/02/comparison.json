{"files":[{"patch":"@@ -309,0 +309,2 @@\n+\/\/ These checks are required for wait, notify and exit to avoid inflating the monitor to\n+\/\/ find out this inline type object cannot be locked.\n@@ -543,2 +545,1 @@\n-  JavaThread* current = locking_thread;\n-  CHECK_THROW_NOSYNC_IMSE(obj);\n+  assert(!EnableValhalla || !obj->klass()->is_inline_klass(), \"JITed code should never have locked an instance of a value class\");\n@@ -563,1 +564,1 @@\n-  CHECK_THROW_NOSYNC_IMSE(obj);\n+  assert(!EnableValhalla || !obj->klass()->is_inline_klass(), \"This method should never be called on an instance of an inline class\");\n@@ -767,0 +768,1 @@\n+  JavaThread* THREAD = current;\n@@ -770,1 +772,10 @@\n-  CHECK_THROW_NOSYNC_IMSE(obj);\n+\n+  if (EnableValhalla && obj->klass()->is_inline_klass()) {\n+    ResourceMark rm(THREAD);\n+    const char* desc = \"Cannot synchronize on an instance of value class \";\n+    const char* className = obj->klass()->external_name();\n+    size_t msglen = strlen(desc) + strlen(className) + 1;\n+    char* message = NEW_RESOURCE_ARRAY(char, msglen);\n+    assert(message != nullptr, \"NEW_RESOURCE_ARRAY should have called vm_exit_out_of_memory and not return nullptr\");\n+    THROW_MSG(vmSymbols::java_lang_IdentityException(), className);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @summary test JNI functions with inline types\n+ * @summary test JNI functions with instances of value classes\n+ * @library \/test\/lib\n@@ -31,0 +32,3 @@\n+\n+ import jdk.test.lib.Asserts;\n+\n@@ -51,0 +55,1 @@\n+        boolean sawIe = false;\n@@ -54,2 +59,2 @@\n-        } catch (Throwable t) {\n-            sawImse = checkImse(t);\n+        } catch (IdentityException ie) {\n+            sawIe = true;\n@@ -57,4 +62,1 @@\n-        if (!sawImse) {\n-            throw new RuntimeException(\"JNI MonitorEnter did not fail\");\n-        }\n-        sawImse = false;\n+        Asserts.assertTrue(sawIe, \"Missing IdentityException\");\n@@ -63,11 +65,2 @@\n-        } catch (Throwable t) {\n-            sawImse = checkImse(t);\n-        }\n-        if (!sawImse) {\n-            throw new RuntimeException(\"JNI MonitorExit did not fail\");\n-        }\n-    }\n-\n-    static boolean checkImse(Throwable t) {\n-        if (t instanceof IllegalMonitorStateException) {\n-            return true;\n+        } catch (IllegalMonitorStateException imse) {\n+            sawImse = true;\n@@ -75,1 +68,1 @@\n-        throw new RuntimeException(t);\n+        Asserts.assertTrue(sawImse, \"Missing IllegalMonitorStateException\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineWithJni.java","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"}]}