{"files":[{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222634\n- * @summary Check array creation with value classes\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @modules jdk.compiler\n- * @compile --enable-preview -source ${jdk.version} ArrayCreationWithQuestion.java\n- * @run main\/othervm --enable-preview ArrayCreationWithQuestion\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class ArrayCreationWithQuestion {\n-\n-    static value class VT {\n-        VT[] a1;\n-        VT[] a2;\n-\n-        VT() {\n-            a1 = new VT[42];\n-            a2 = new VT[42];\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new ArrayCreationWithQuestion().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                Paths.get(System.getProperty(\"test.classes\"),\n-                        \"ArrayCreationWithQuestion$VT.class\").toString() };\n-        runCheck(params, new String [] {\n-                \"         3: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n-                \"        12: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n-        });\n-\n-    }\n-\n-    void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-        if (errors > 0) {\n-            throw new AssertionError(\"Unexpected javap output: \" + out);\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ArrayCreationWithQuestion.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8244712\n- * @summary Javac should switch to reference projection before walking type hierarchy.\n- * @enablePreview\n- * @compile AsSuperTests.java\n- *\/\n-\n-\/* The following test \"covers\"\/verifies that the asSuper calls in\n-   com.sun.tools.javac.comp.Resolve#resolveSelf &&\n-   com.sun.tools.javac.comp.Lower#visitSelect\n-   com.sun.tools.javac.comp.Resolve#mostSpecific\n-   com.sun.tools.javac.comp.Attr#visitSelect\n-   com.sun.tools.javac.comp.Resolve.UnboundMethodReferenceLookupHelper#UnboundMethodReferenceLookupHelper\n-   work correctly with value classes.\n-*\/\n-\n-interface I {\n-    default void foo() {\n-        System.out.println(\"I.foo\");\n-    }\n-}\n-\n-abstract value class Base<T> {\n-    static void goo() {}\n-    void zoo() {}\n-    interface SAM {\n-       String m(Foo f);\n-    }\n-\n-    static void test() {\n-        SAM s = Base::getX;\n-    }\n-\n-    String getX() { return null; }\n-\n-    static value class Foo<X> extends Base {}\n-}\n-\n-value class X extends Base implements I {\n-\n-    static void goo() {}\n-\n-    public void foo() {\n-        I.super.foo();\n-        X.this.goo(); \/\/ covers the asSuper call in com.sun.tools.javac.comp.Resolve#mostSpecific\n-        super.zoo();  \/\/ covers the asSuper call in com.sun.tools.javac.comp.Attr#visitSelect\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/AsSuperTests.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8281166\n- * @summary javac should generate BSM to invoke constructor for value class\n- * @enablePreview\n- * @compile ConstructorRefTest.java\n- * @run main\/othervm ConstructorRefTest\n- *\/\n-\n-import java.util.function.Supplier;\n-\n-public class ConstructorRefTest {\n-\n-    public static value class V {\n-\n-        final int x;\n-        final int y;\n-\n-        V() {\n-            x = 1234;\n-            y = 5678;\n-        }\n-    }\n-\n-    public static class P {\n-\n-        final int x;\n-        final int y;\n-\n-        P() {\n-            x = 1234;\n-            y = 5678;\n-        }\n-    }\n-\n-    public static void main(String [] args) {\n-\n-        Supplier<P> sxp = P::new;\n-        P p = (P) sxp.get();\n-        if (p.x != 1234 || p.y != 5678)\n-            throw new AssertionError(p);\n-\n-        Supplier<V> sxv = V::new;\n-        V v = (V) sxv.get();\n-        if (v.x != 1234 || v.y != 5678)\n-            throw new AssertionError(v);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConstructorRefTest.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -77,12 +77,0 @@\n-    @Test\n-    void testAbstractValueClassConstraints() {\n-        assertFail(\"compiler.err.mod.not.allowed.here\",\n-                \"\"\"\n-                abstract value class V {\n-                    synchronized void foo() {\n-                     \/\/ Error, abstract value class may not declare a synchronized instance method.\n-                    }\n-                }\n-                \"\"\");\n-    }\n-\n@@ -136,0 +124,9 @@\n+        assertOK(\n+                \"\"\"\n+                value class V extends Object {}\n+                \"\"\");\n+        assertFail(\"compiler.err.value.type.has.identity.super.type\",\n+                \"\"\"\n+                abstract class A {}\n+                value class V extends A {}\n+                \"\"\");\n@@ -204,0 +201,11 @@\n+        assertFail(\"compiler.err.cant.assign.val.to.var\",\n+                \"\"\"\n+                abstract value class Point {\n+                    int x = 10;\n+                    int y;\n+                    Point (int x, int y) {\n+                        this.x = x; \/\/ Error, final field 'x' is already assigned to.\n+                        this.y = y; \/\/ OK.\n+                    }\n+                }\n+                \"\"\");\n@@ -219,0 +227,15 @@\n+        assertFail(\"compiler.err.cant.assign.val.to.var\",\n+                \"\"\"\n+                abstract value class Point {\n+                    int x;\n+                    int y;\n+                    Point (int x, int y) {\n+                        this.x = x;\n+                        this.y = y;\n+                    }\n+\n+                    void foo(Point p) {\n+                        this.y = p.y; \/\/ Error, y is final and can't be written outside of ctor.\n+                    }\n+                }\n+                \"\"\");\n@@ -230,0 +253,14 @@\n+        assertFail(\"compiler.err.mod.not.allowed.here\",\n+                \"\"\"\n+                abstract value class V {\n+                    synchronized void foo() {\n+                     \/\/ Error, abstract value class may not declare a synchronized instance method.\n+                    }\n+                }\n+                \"\"\");\n+        assertOK(\n+                \"\"\"\n+                abstract value class V {\n+                    static synchronized void foo() {} \/\/ OK static\n+                }\n+                \"\"\");\n@@ -239,1 +276,1 @@\n-                    synchronized static void soo() {}\n+                    synchronized static void soo() {} \/\/ OK static\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":50,"deletions":13,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary add binary compatibility tests for value objects\n+ * @summary binary compatibility tests for value objects\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectsBinaryCompatibilityTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,17 +0,0 @@\n-\/* @test \/nodynamiccopyright\/\n- * @bug 8292883\n- * @summary [lworld] javac fails to detect class files with invalid access flags\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @library \/tools\/lib\n- * @build toolbox.ToolBox toolbox.JavacTask toolbox.TestRunner\n- * @compile ValueWithInvalidFlags.jcod\n- * @compile\/fail\/ref=CheckClassfileFlagsTest.out -XDrawDiagnostics CheckClassfileFlagsTest.java\n- *\/\n-\n-public class CheckClassfileFlagsTest {\n-    void m() {\n-        ValueWithInvalidFlags v = new ValueWithInvalidFlags();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/class_flags\/CheckClassfileFlagsTest.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-CheckClassfileFlagsTest.java:15:9: compiler.err.cant.access: ValueWithInvalidFlags, (compiler.misc.bad.class.file.header: ValueWithInvalidFlags.class, (compiler.misc.bad.signature: \"QValueWithInvalidFlags;\"))\n-1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/class_flags\/CheckClassfileFlagsTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-class ValueWithInvalidFlags {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  63; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1\n-    Utf8 \"ValueWithInvalidFlags\"; \/\/ #2\n-    Field #1 #4; \/\/ #3\n-    NameAndType #5 #6; \/\/ #4\n-    Utf8 \"i\"; \/\/ #5\n-    Utf8 \"I\"; \/\/ #6\n-    class #8; \/\/ #7\n-    Utf8 \"java\/lang\/Object\"; \/\/ #8\n-    Utf8 \"<init>\"; \/\/ #9\n-    Utf8 \"()QValueWithInvalidFlags;\"; \/\/ #10\n-    Utf8 \"Code\"; \/\/ #11\n-    Utf8 \"LineNumberTable\"; \/\/ #12\n-    Utf8 \"SourceFile\"; \/\/ #13\n-    Utf8 \"ValueWithInvalidFlags.java\"; \/\/ #14\n-  } \/\/ Constant Pool\n-\n-  0x0831; \/\/ access\n-  #1;\/\/ this_cpx\n-  #7;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-    {  \/\/ field\n-      0x0010; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0009; \/\/ access\n-      #9; \/\/ name_index\n-      #10; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#11) { \/\/ Code\n-          2; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0xCB00014B032A5FCC;\n-            0x00034B2AB0;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#12) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  1;\n-                4  2;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#13) { \/\/ SourceFile\n-      #14;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class ValueWithInvalidFlags\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/class_flags\/ValueWithInvalidFlags.jcod","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public abstract value class AbstractValueSuper {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/separate_compilation\/AbstractValueSuper.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8288644\n- * @summary [lw4] Unable to extend a separately compiled abstract value class\n- * @enablePreview\n- * @compile AbstractValueSuper.java ConcreteValue.java\n- * @compile ConcreteValue.java\n- * @run main ConcreteValue\n- *\/\n-\n-public value class ConcreteValue extends AbstractValueSuper {\n-    public static void main(String [] args) {\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/separate_compilation\/ConcreteValue.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"}]}