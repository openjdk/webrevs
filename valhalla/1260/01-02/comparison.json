{"files":[{"patch":"@@ -203,10 +203,125 @@\n-     * argument.\n-     *\n-     * @implSpec\n-     * The current implementation acts as this {@code Float16} were\n-     * {@linkplain #floatValue() converted} to {@code float} and then\n-     * the string for that {@code float} returned. This behavior is\n-     * expected to change to accommodate the precision of {@code\n-     * Float16}.\n-     *\n-     * @param   f16   the {@code Float16} to be converted.\n+     * argument. All characters mentioned below are ASCII characters.\n+     * <ul>\n+     * <li>If the argument is NaN, the result is the string\n+     * \"{@code NaN}\".\n+     * <li>Otherwise, the result is a string that represents the sign and\n+     *     magnitude (absolute value) of the argument. If the sign is\n+     *     negative, the first character of the result is\n+     *     '{@code -}' ({@code '\\u005Cu002D'}); if the sign is\n+     *     positive, no sign character appears in the result. As for\n+     *     the magnitude <i>m<\/i>:\n+     * <ul>\n+     * <li>If <i>m<\/i> is infinity, it is represented by the characters\n+     *     {@code \"Infinity\"}; thus, positive infinity produces\n+     *     the result {@code \"Infinity\"} and negative infinity\n+     *     produces the result {@code \"-Infinity\"}.\n+     * <li>If <i>m<\/i> is zero, it is represented by the characters\n+     *     {@code \"0.0\"}; thus, negative zero produces the result\n+     *     {@code \"-0.0\"} and positive zero produces the result\n+     *     {@code \"0.0\"}.\n+     *\n+     * <li> Otherwise <i>m<\/i> is positive and finite.\n+     * It is converted to a string in two stages:\n+     * <ul>\n+     * <li> <em>Selection of a decimal<\/em>:\n+     * A well-defined decimal <i>d<\/i><sub><i>m<\/i><\/sub>\n+     * is selected to represent <i>m<\/i>.\n+     * This decimal is (almost always) the <em>shortest<\/em> one that\n+     * rounds to <i>m<\/i> according to the round to nearest\n+     * rounding policy of IEEE 754 floating-point arithmetic.\n+     * <li> <em>Formatting as a string<\/em>:\n+     * The decimal <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as a string,\n+     * either in plain or in computerized scientific notation,\n+     * depending on its value.\n+     * <\/ul>\n+     * <\/ul>\n+     * <\/ul>\n+     *\n+     * <p>A <em>decimal<\/em> is a number of the form\n+     * <i>s<\/i>&times;10<sup><i>i<\/i><\/sup>\n+     * for some (unique) integers <i>s<\/i> &gt; 0 and <i>i<\/i> such that\n+     * <i>s<\/i> is not a multiple of 10.\n+     * These integers are the <em>significand<\/em> and\n+     * the <em>exponent<\/em>, respectively, of the decimal.\n+     * The <em>length<\/em> of the decimal is the (unique)\n+     * positive integer <i>n<\/i> meeting\n+     * 10<sup><i>n<\/i>-1<\/sup> &le; <i>s<\/i> &lt; 10<sup><i>n<\/i><\/sup>.\n+     *\n+     * <p>The decimal <i>d<\/i><sub><i>m<\/i><\/sub> for a finite positive <i>m<\/i>\n+     * is defined as follows:\n+     * <ul>\n+     * <li>Let <i>R<\/i> be the set of all decimals that round to <i>m<\/i>\n+     * according to the usual <em>round to nearest<\/em> rounding policy of\n+     * IEEE 754 floating-point arithmetic.\n+     * <li>Let <i>p<\/i> be the minimal length over all decimals in <i>R<\/i>.\n+     * <li>When <i>p<\/i> &ge; 2, let <i>T<\/i> be the set of all decimals\n+     * in <i>R<\/i> with length <i>p<\/i>.\n+     * Otherwise, let <i>T<\/i> be the set of all decimals\n+     * in <i>R<\/i> with length 1 or 2.\n+     * <li>Define <i>d<\/i><sub><i>m<\/i><\/sub> as the decimal in <i>T<\/i>\n+     * that is closest to <i>m<\/i>.\n+     * Or if there are two such decimals in <i>T<\/i>,\n+     * select the one with the even significand.\n+     * <\/ul>\n+     *\n+     * <p>The (uniquely) selected decimal <i>d<\/i><sub><i>m<\/i><\/sub>\n+     * is then formatted.\n+     * Let <i>s<\/i>, <i>i<\/i> and <i>n<\/i> be the significand, exponent and\n+     * length of <i>d<\/i><sub><i>m<\/i><\/sub>, respectively.\n+     * Further, let <i>e<\/i> = <i>n<\/i> + <i>i<\/i> - 1 and let\n+     * <i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub>\n+     * be the usual decimal expansion of <i>s<\/i>.\n+     * Note that <i>s<\/i><sub>1<\/sub> &ne; 0\n+     * and <i>s<\/i><sub><i>n<\/i><\/sub> &ne; 0.\n+     * Below, the decimal point {@code '.'} is {@code '\\u005Cu002E'}\n+     * and the exponent indicator {@code 'E'} is {@code '\\u005Cu0045'}.\n+     * <ul>\n+     * <li>Case -3 &le; <i>e<\/i> &lt; 0:\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <code>0.0<\/code>&hellip;<code>0<\/code><!--\n+     * --><i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub>,\n+     * where there are exactly -(<i>n<\/i> + <i>i<\/i>) zeroes between\n+     * the decimal point and <i>s<\/i><sub>1<\/sub>.\n+     * For example, 123 &times; 10<sup>-4<\/sup> is formatted as\n+     * {@code 0.0123}.\n+     * <li>Case 0 &le; <i>e<\/i> &lt; 7:\n+     * <ul>\n+     * <li>Subcase <i>i<\/i> &ge; 0:\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub><!--\n+     * --><code>0<\/code>&hellip;<code>0.0<\/code>,\n+     * where there are exactly <i>i<\/i> zeroes\n+     * between <i>s<\/i><sub><i>n<\/i><\/sub> and the decimal point.\n+     * For example, 123 &times; 10<sup>2<\/sup> is formatted as\n+     * {@code 12300.0}.\n+     * <li>Subcase <i>i<\/i> &lt; 0:\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub>&hellip;<!--\n+     * --><i>s<\/i><sub><i>n<\/i>+<i>i<\/i><\/sub><code>.<\/code><!--\n+     * --><i>s<\/i><sub><i>n<\/i>+<i>i<\/i>+1<\/sub>&hellip;<!--\n+     * --><i>s<\/i><sub><i>n<\/i><\/sub>,\n+     * where there are exactly -<i>i<\/i> digits to the right of\n+     * the decimal point.\n+     * For example, 123 &times; 10<sup>-1<\/sup> is formatted as\n+     * {@code 12.3}.\n+     * <\/ul>\n+     * <li>Case <i>e<\/i> &lt; -3 (case <i>e<\/i> &ge; 7 cannot happen):\n+     * computerized scientific notation is used to format\n+     * <i>d<\/i><sub><i>m<\/i><\/sub>.\n+     * Here <i>e<\/i> is formatted as by {@link Integer#toString(int)}.\n+     * <ul>\n+     * <li>Subcase <i>n<\/i> = 1:\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub><code>.0E<\/code><i>e<\/i>.\n+     * For example, 1 &times; 10<sup>-5<\/sup> is formatted as\n+     * {@code 1.0E-5}.\n+     * <li>Subcase <i>n<\/i> &gt; 1:\n+     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n+     * <i>s<\/i><sub>1<\/sub><code>.<\/code><i>s<\/i><sub>2<\/sub><!--\n+     * -->&hellip;<i>s<\/i><sub><i>n<\/i><\/sub><code>E<\/code><i>e<\/i>.\n+     * For example, 123 &times; 10<sup>-7<\/sup> is formatted as\n+     * {@code 1.23E-5}.\n+     * <\/ul>\n+     * <\/ul>\n+     *\n+     * @param   f16   the {@code float} to be converted.\n@@ -214,1 +329,0 @@\n-     * @see java.lang.Float#toString(float)\n@@ -502,1 +616,4 @@\n-     * {@return a string representation of this {@code Float16}}\n+     * Returns a string representation of this {@link Float16} object.\n+     * This object\n+     * is converted to a {@code String} exactly as if by the method\n+     * {@link #toString(Float16)}.\n@@ -504,2 +621,2 @@\n-     * @implSpec\n-     * This method returns the result of {@code Float16.toString(this)}.\n+     * @return  a {@code String} representation of this object.\n+     * @see #toString(Float16)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float16.java","additions":131,"deletions":14,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * This class exposes a method to render a {@code float} as a string.\n+ * This class exposes a method to render a {@code Float16} as a string.\n@@ -124,1 +124,1 @@\n-     * Returns a string representation of the {@code float}\n+     * Returns a string representation of the {@code Float16}\n@@ -127,1 +127,1 @@\n-     * @param   v   the {@code float} to be converted.\n+     * @param   v   the {@code Float16} to be converted.\n@@ -129,1 +129,1 @@\n-     * @see Float#toString(float)\n+     * @see Float16#toString(Float16)\n@@ -142,1 +142,1 @@\n-     * @param v the {@code float} whose rendering is appended.\n+     * @param v the {@code Float16} whose rendering is appended.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/Float16ToDecimal.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        Float16ToDecimalChecker.test();\n+        Float16ToDecimalChecker.testAll();\n","filename":"test\/jdk\/jdk\/internal\/math\/ToDecimal\/Float16ToDecimalTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,3 +126,2 @@\n-    public static void test() {\n-        int bits = Short.MIN_VALUE;\n-        for (; bits <= Short.MAX_VALUE; ++bits) {\n+    public static void testAll() {\n+        for (int bits = Short.MIN_VALUE; bits <= Short.MAX_VALUE; ++bits) {\n","filename":"test\/jdk\/jdk\/internal\/math\/ToDecimal\/java.base\/jdk\/internal\/math\/Float16ToDecimalChecker.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -157,1 +157,9 @@\n-            if (!(f - fz == 1 && x - f == 0 && l == h() + 1) && l > h()) {\n+            \/*\n+             * For float16, strings of the form ddddd.0 are allowed,\n+             * despite the fact l == 6 > h().\n+             * In such cases, f = fz + 1, x = f, l = h() + 1.\n+             *\n+             * Similar cases for float and double are not an issue,\n+             * since l <= h() holds.\n+             *\/\n+            if (!(f - fz == 1 && x == f && l - h() == 1) && l > h()) {\n","filename":"test\/jdk\/jdk\/internal\/math\/ToDecimal\/java.base\/jdk\/internal\/math\/ToDecimalChecker.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}