{"files":[{"patch":"@@ -2,1 +2,1 @@\n-project=jdk\n+project=valhalla\n@@ -7,1 +7,1 @@\n-error=author,committer,reviewers,merge,issues,executable,symlink,message,hg-tag,whitespace,problemlists\n+error=author,committer,executable,symlink,whitespace\n@@ -10,4 +10,0 @@\n-[repository]\n-tags=(?:jdk-(?:[1-9]([0-9]*)(?:\\.(?:0|[1-9][0-9]*)){0,4})(?:\\+(?:(?:[0-9]+))|(?:-ga)))|(?:jdk[4-9](?:u\\d{1,3})?-(?:(?:b\\d{2,3})|(?:ga)))|(?:hs\\d\\d(?:\\.\\d{1,2})?-b\\d\\d)\n-branches=.*\n-\n@@ -22,7 +18,0 @@\n-[checks \"merge\"]\n-message=Merge\n-\n-[checks \"reviewers\"]\n-reviewers=1\n-ignore=duke\n-\n@@ -31,6 +20,0 @@\n-\n-[checks \"issues\"]\n-pattern=^([124-8][0-9]{6}): (\\S.*)$\n-\n-[checks \"problemlists\"]\n-dirs=test\/jdk|test\/langtools|test\/lib-test|test\/hotspot\/jtreg|test\/jaxp\n","filename":".jcheck\/conf","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-DEFAULT_PROMOTED_VERSION_PRE=ea\n+DEFAULT_PROMOTED_VERSION_PRE=lworld5ea\n","filename":"make\/conf\/version-numbers.conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+\n+#include \"oops\/inlineKlass.hpp\"\n@@ -54,0 +56,1 @@\n+#include \"oops\/inlineKlass.inline.hpp\"\n@@ -88,0 +91,1 @@\n+#include \"utilities\/stringUtils.hpp\"\n@@ -154,0 +158,2 @@\n+#define CONSTANT_CLASS_DESCRIPTORS        68\n+\n@@ -194,1 +200,1 @@\n-      case JVM_CONSTANT_Class : {\n+      case JVM_CONSTANT_Class: {\n@@ -515,0 +521,3 @@\n+\n+        Symbol* const name = cp->symbol_at(class_index);\n+        const unsigned int name_len = name->utf8_length();\n@@ -724,1 +733,1 @@\n-            } else if (!Signature::is_void_method(signature)) { \/\/ must have void signature.\n+            } else if (!Signature::is_void_method(signature)) {  \/\/ must have void signature.\n@@ -744,2 +753,3 @@\n-            if (ref_kind == JVM_REF_newInvokeSpecial) {\n-              if (name != vmSymbols::object_initializer_name()) {\n+\n+            if (name != vmSymbols::object_initializer_name()) { \/\/ !<init>\n+              if (ref_kind == JVM_REF_newInvokeSpecial) {\n@@ -751,2 +761,10 @@\n-            } else {\n-              if (name == vmSymbols::object_initializer_name()) {\n+            } else { \/\/ <init>\n+              \/\/ The allowed invocation mode of <init> depends on its signature.\n+              \/\/ This test corresponds to verify_invoke_instructions in the verifier.\n+              const int signature_ref_index =\n+                cp->signature_ref_index_at(name_and_type_ref_index);\n+              const Symbol* const signature = cp->symbol_at(signature_ref_index);\n+              if (signature->is_void_method_signature()\n+                  && ref_kind == JVM_REF_newInvokeSpecial) {\n+                \/\/ OK, could be a constructor call\n+              } else {\n@@ -804,4 +822,13 @@\n-\/\/ Side-effects: populates the _local_interfaces field\n-void ClassFileParser::parse_interfaces(const ClassFileStream* const stream,\n-                                       const int itfs_len,\n-                                       ConstantPool* const cp,\n+static void check_identity_and_value_modifiers(ClassFileParser* current, const InstanceKlass* super_type, TRAPS) {\n+  assert(super_type != nullptr,\"Method doesn't support null super type\");\n+  if (super_type->access_flags().is_identity_class() && !current->access_flags().is_identity_class()\n+      && super_type->name() != vmSymbols::java_lang_Object()) {\n+      THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                err_msg(\"Value type %s has an identity type as supertype\",\n+                current->class_name()->as_klass_external_name()));\n+  }\n+}\n+\n+void ClassFileParser::parse_interfaces(const ClassFileStream* stream,\n+                                       int itfs_len,\n+                                       ConstantPool* cp,\n@@ -809,0 +836,6 @@\n+                                       \/\/ FIXME: lots of these functions\n+                                       \/\/ declare their parameters as const,\n+                                       \/\/ which adds only noise to the code.\n+                                       \/\/ Remove the spurious const modifiers.\n+                                       \/\/ Many are of the form \"const int x\"\n+                                       \/\/ or \"T* const x\".\n@@ -816,0 +849,1 @@\n+\n@@ -818,3 +852,2 @@\n-    _local_interfaces = MetadataFactory::new_array<InstanceKlass*>(_loader_data, itfs_len, nullptr, CHECK);\n-\n-    int index;\n+    _local_interface_indexes = new GrowableArray<u2>(itfs_len);\n+    int index = 0;\n@@ -823,1 +856,0 @@\n-      Klass* interf;\n@@ -828,32 +860,1 @@\n-      if (cp->tag_at(interface_index).is_klass()) {\n-        interf = cp->resolved_klass_at(interface_index);\n-      } else {\n-        Symbol* const unresolved_klass  = cp->klass_name_at(interface_index);\n-\n-        \/\/ Don't need to check legal name because it's checked when parsing constant pool.\n-        \/\/ But need to make sure it's not an array type.\n-        guarantee_property(unresolved_klass->char_at(0) != JVM_SIGNATURE_ARRAY,\n-                           \"Bad interface name in class file %s\", CHECK);\n-\n-        \/\/ Call resolve_super so class circularity is checked\n-        interf = SystemDictionary::resolve_super_or_fail(\n-                                                  _class_name,\n-                                                  unresolved_klass,\n-                                                  Handle(THREAD, _loader_data->class_loader()),\n-                                                  _protection_domain,\n-                                                  false,\n-                                                  CHECK);\n-      }\n-\n-      if (!interf->is_interface()) {\n-        THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n-                  err_msg(\"class %s can not implement %s, because it is not an interface (%s)\",\n-                          _class_name->as_klass_external_name(),\n-                          interf->external_name(),\n-                          interf->class_in_module_of_loader()));\n-      }\n-\n-      if (InstanceKlass::cast(interf)->has_nonstatic_concrete_methods()) {\n-        *has_nonstatic_concrete_methods = true;\n-      }\n-      _local_interfaces->at_put(index, InstanceKlass::cast(interf));\n+      _local_interface_indexes->at_put_grow(index, interface_index);\n@@ -871,2 +872,1 @@\n-      const InstanceKlass* const k = _local_interfaces->at(index);\n-      Symbol* interface_name = k->name();\n+      Symbol* interface_name = cp->klass_name_at(_local_interface_indexes->at(index));\n@@ -958,0 +958,3 @@\n+    _jdk_internal_ImplicitlyConstructible,\n+    _jdk_internal_LooselyConsistentValue,\n+    _jdk_internal_NullRestricted,\n@@ -1383,0 +1386,1 @@\n+  STATIC_INLINE,        \/\/ inline type field\n@@ -1388,0 +1392,1 @@\n+  NONSTATIC_INLINE,\n@@ -1407,6 +1412,7 @@\n-  BAD_ALLOCATION_TYPE, \/\/ T_VOID        = 14,\n-  BAD_ALLOCATION_TYPE, \/\/ T_ADDRESS     = 15,\n-  BAD_ALLOCATION_TYPE, \/\/ T_NARROWOOP   = 16,\n-  BAD_ALLOCATION_TYPE, \/\/ T_METADATA    = 17,\n-  BAD_ALLOCATION_TYPE, \/\/ T_NARROWKLASS = 18,\n-  BAD_ALLOCATION_TYPE, \/\/ T_CONFLICT    = 19,\n+  NONSTATIC_OOP,       \/\/ T_PRIMITIVE_OBJECT = 14,\n+  BAD_ALLOCATION_TYPE, \/\/ T_VOID        = 15,\n+  BAD_ALLOCATION_TYPE, \/\/ T_ADDRESS     = 16,\n+  BAD_ALLOCATION_TYPE, \/\/ T_NARROWOOP   = 17,\n+  BAD_ALLOCATION_TYPE, \/\/ T_METADATA    = 18,\n+  BAD_ALLOCATION_TYPE, \/\/ T_NARROWKLASS = 19,\n+  BAD_ALLOCATION_TYPE, \/\/ T_CONFLICT    = 20,\n@@ -1427,6 +1433,7 @@\n-  BAD_ALLOCATION_TYPE, \/\/ T_VOID        = 14,\n-  BAD_ALLOCATION_TYPE, \/\/ T_ADDRESS     = 15,\n-  BAD_ALLOCATION_TYPE, \/\/ T_NARROWOOP   = 16,\n-  BAD_ALLOCATION_TYPE, \/\/ T_METADATA    = 17,\n-  BAD_ALLOCATION_TYPE, \/\/ T_NARROWKLASS = 18,\n-  BAD_ALLOCATION_TYPE, \/\/ T_CONFLICT    = 19,\n+  STATIC_OOP,          \/\/ T_PRIMITIVE_OBJECT = 14,\n+  BAD_ALLOCATION_TYPE, \/\/ T_VOID        = 15,\n+  BAD_ALLOCATION_TYPE, \/\/ T_ADDRESS     = 16,\n+  BAD_ALLOCATION_TYPE, \/\/ T_NARROWOOP   = 17,\n+  BAD_ALLOCATION_TYPE, \/\/ T_METADATA    = 18,\n+  BAD_ALLOCATION_TYPE, \/\/ T_NARROWKLASS = 19,\n+  BAD_ALLOCATION_TYPE, \/\/ T_CONFLICT    = 20\n@@ -1435,1 +1442,1 @@\n-static FieldAllocationType basic_type_to_atype(bool is_static, BasicType type) {\n+static FieldAllocationType basic_type_to_atype(bool is_static, BasicType type, bool is_inline_type) {\n@@ -1439,0 +1446,3 @@\n+  if (is_inline_type) {\n+    result = is_static ? STATIC_INLINE : NONSTATIC_INLINE;\n+  }\n@@ -1452,2 +1462,2 @@\n-  void update(bool is_static, BasicType type) {\n-    FieldAllocationType atype = basic_type_to_atype(is_static, type);\n+  void update(bool is_static, BasicType type, bool is_inline_type) {\n+    FieldAllocationType atype = basic_type_to_atype(is_static, type, is_inline_type);\n@@ -1465,1 +1475,1 @@\n-                                   bool is_interface,\n+                                   AccessFlags class_access_flags,\n@@ -1480,0 +1490,1 @@\n+  bool is_inline_type = !class_access_flags.is_identity_class() && !class_access_flags.is_abstract();\n@@ -1487,1 +1498,5 @@\n-  const int total_fields = length + num_injected;\n+\n+  \/\/ two more slots are required for inline classes:\n+  \/\/ one for the static field with a reference to the pre-allocated default value\n+  \/\/ one for the field the JVM injects when detecting an empty inline class\n+  const int total_fields = length + num_injected + (is_inline_type ? 2 : 0);\n@@ -1493,0 +1508,1 @@\n+  int instance_fields_count = 0;\n@@ -1498,0 +1514,7 @@\n+    jint recognized_modifiers = JVM_RECOGNIZED_FIELD_MODIFIERS;\n+    if (!supports_inline_types()) {\n+      recognized_modifiers &= ~JVM_ACC_STRICT;\n+    }\n+\n+    const jint flags = cfs->get_u2_fast() & recognized_modifiers;\n+    verify_legal_field_modifiers(flags, class_access_flags, CHECK);\n@@ -1499,2 +1522,0 @@\n-    const jint flags = cfs->get_u2_fast() & JVM_RECOGNIZED_FIELD_MODIFIERS;\n-    verify_legal_field_modifiers(flags, is_interface, CHECK);\n@@ -1517,0 +1538,1 @@\n+    if (!access_flags.is_static()) instance_fields_count++;\n@@ -1524,0 +1546,2 @@\n+    bool is_null_restricted = false;\n+\n@@ -1543,0 +1567,10 @@\n+        if (parsed_annotations.has_annotation(AnnotationCollector::_jdk_internal_NullRestricted)) {\n+          if (!Signature::has_envelope(sig)) {\n+            Exceptions::fthrow(\n+              THREAD_AND_LOCATION,\n+              vmSymbols::java_lang_ClassFormatError(),\n+              \"Illegal use of @jdk.internal.vm.annotation.NullRestricted annotation on field %s with signature %s (primitive types can never be null)\",\n+              name->as_C_string(), sig->as_C_string());\n+          }\n+          is_null_restricted = true;\n+        }\n@@ -1568,1 +1602,4 @@\n-    fac->update(is_static, type);\n+    \/\/ This use of T_PRIMITIVE_OBJECT is not valid anymore => FIXME (relate to cleanup (removal?) of FiedAllocationCount\n+    fac->update(is_static, type, type == T_PRIMITIVE_OBJECT);\n+\n+    if (is_null_restricted) fieldFlags.update_null_free_inline_type(true);\n@@ -1616,1 +1653,1 @@\n-      fac->update(false, type);\n+      fac->update(false, type, false);\n@@ -1621,0 +1658,42 @@\n+  if (is_inline_type) {\n+    \/\/ Inject static \".default\" field\n+    FieldInfo::FieldFlags fflags(0);\n+    fflags.update_injected(true);\n+    AccessFlags aflags(JVM_ACC_STATIC);\n+    FieldInfo fi(aflags,\n+                 (u2)vmSymbols::as_int(VM_SYMBOL_ENUM_NAME(default_value_name)),\n+                 (u2)vmSymbols::as_int(VM_SYMBOL_ENUM_NAME(object_signature)),\n+                 0,\n+                 fflags);\n+      fi.set_index(index);\n+      _temp_field_info->append(fi);\n+\n+    const BasicType type = Signature::basic_type(vmSymbols::object_signature());\n+    fac->update(true, type, false);\n+    index++;\n+  }\n+\n+  if (is_inline_type && instance_fields_count == 0) {\n+    \/\/ Inject \".empty\" dummy field\n+    _is_empty_inline_type = true;\n+\n+    FieldInfo::FieldFlags fflags(0);\n+    fflags.update_injected(true);\n+    AccessFlags aflags;\n+    FieldInfo fi(aflags,\n+                 (u2)vmSymbols::as_int(VM_SYMBOL_ENUM_NAME(empty_marker_name)),\n+                 (u2)vmSymbols::as_int(VM_SYMBOL_ENUM_NAME(byte_signature)),\n+                 0,\n+                 fflags);\n+    fi.set_index(index);\n+    _temp_field_info->append(fi);\n+\n+    const BasicType type = Signature::basic_type(vmSymbols::byte_signature());\n+    fac->update(false, type, false);\n+    index++;\n+  }\n+\n+  if (instance_fields_count > 0) {\n+    _has_nonstatic_fields = true;\n+  }\n+\n@@ -1995,0 +2074,12 @@\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_ImplicitlyConstructible_signature): {\n+      if (_location != _in_class)   break; \/\/ only allow for classes\n+      return _jdk_internal_ImplicitlyConstructible;\n+    }\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_LooselyConsistentValue_signature): {\n+      if (_location != _in_class)   break; \/\/ only allow for classes\n+      return _jdk_internal_LooselyConsistentValue;\n+    }\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_NullRestricted_signature): {\n+      if (_location != _in_field)   break; \/\/ only allow for fields\n+      return _jdk_internal_NullRestricted;\n+    }\n@@ -2233,0 +2324,2 @@\n+                                      bool is_value_class,\n+                                      bool is_abstract_class,\n@@ -2274,1 +2367,1 @@\n-    verify_legal_method_modifiers(flags, is_interface, name, CHECK_NULL);\n+    verify_legal_method_modifiers(flags, access_flags() , name, CHECK_NULL);\n@@ -2282,0 +2375,9 @@\n+  if (EnableValhalla) {\n+    if (((flags & JVM_ACC_SYNCHRONIZED) == JVM_ACC_SYNCHRONIZED)\n+        && ((flags & JVM_ACC_STATIC) == 0 )\n+        && !_access_flags.is_identity_class()) {\n+      classfile_parse_error(\"Invalid synchronized method in non-identity class %s\", THREAD);\n+        return nullptr;\n+    }\n+  }\n+\n@@ -2841,0 +2943,2 @@\n+                                    bool is_value_class,\n+                                    bool is_abstract_type,\n@@ -2865,0 +2969,2 @@\n+                                    is_value_class,\n+                                    is_abstract_type,\n@@ -3130,2 +3236,2 @@\n-    \/\/ Access flags\n-    jint flags;\n+\n+    jint recognized_modifiers = RECOGNIZED_INNER_CLASS_MODIFIERS;\n@@ -3134,3 +3240,1 @@\n-      flags = cfs->get_u2_fast() & (RECOGNIZED_INNER_CLASS_MODIFIERS | JVM_ACC_MODULE);\n-    } else {\n-      flags = cfs->get_u2_fast() & RECOGNIZED_INNER_CLASS_MODIFIERS;\n+      recognized_modifiers |= JVM_ACC_MODULE;\n@@ -3138,0 +3242,4 @@\n+\n+    \/\/ Access flags\n+    jint flags = cfs->get_u2_fast() & recognized_modifiers;\n+\n@@ -3142,1 +3250,11 @@\n-    verify_legal_class_modifiers(flags, CHECK_0);\n+\n+    if (!supports_inline_types()) {\n+      const bool is_module = (flags & JVM_ACC_MODULE) != 0;\n+      const bool is_interface = (flags & JVM_ACC_INTERFACE) != 0;\n+      if (!is_module && !is_interface) {\n+        flags |= JVM_ACC_IDENTITY;\n+      }\n+    }\n+\n+    const char* name = inner_name_index == 0 ? \"unnamed\" : cp->symbol_at(inner_name_index)->as_utf8();\n+    verify_legal_class_modifiers(flags, name, false, CHECK_0);\n@@ -3246,0 +3364,43 @@\n+u2 ClassFileParser::parse_classfile_loadable_descriptors_attribute(const ClassFileStream* const cfs,\n+                                                                   const u1* const loadable_descriptors_attribute_start,\n+                                                                   TRAPS) {\n+  const u1* const current_mark = cfs->current();\n+  u2 length = 0;\n+  if (loadable_descriptors_attribute_start != nullptr) {\n+    cfs->set_current(loadable_descriptors_attribute_start);\n+    cfs->guarantee_more(2, CHECK_0);  \/\/ length\n+    length = cfs->get_u2_fast();\n+  }\n+  const int size = length;\n+  Array<u2>* const loadable_descriptors = MetadataFactory::new_array<u2>(_loader_data, size, CHECK_0);\n+  _loadable_descriptors = loadable_descriptors;\n+  if (length > 0) {\n+    int index = 0;\n+    cfs->guarantee_more(2 * length, CHECK_0);\n+    for (int n = 0; n < length; n++) {\n+      const u2 descriptor_index = cfs->get_u2_fast();\n+      check_property(\n+        valid_symbol_at(descriptor_index),\n+        \"LoadableDescriptors descriptor_index %u has bad constant type in class file %s\",\n+        descriptor_index, CHECK_0);\n+      Symbol* descriptor = _cp->symbol_at(descriptor_index);\n+      bool valid = legal_field_signature(descriptor, CHECK_0);\n+      if(!valid) {\n+        ResourceMark rm(THREAD);\n+        Exceptions::fthrow(THREAD_AND_LOCATION,\n+          vmSymbols::java_lang_ClassFormatError(),\n+          \"Descriptor from LoadableDescriptors attribute at index \\\"%d\\\" in class %s has illegal signature \\\"%s\\\"\",\n+          descriptor_index, _class_name->as_C_string(), descriptor->as_C_string());\n+        return 0;\n+      }\n+      loadable_descriptors->at_put(index++, descriptor_index);\n+    }\n+    assert(index == size, \"wrong size\");\n+  }\n+\n+  \/\/ Restore buffer's current position.\n+  cfs->set_current(current_mark);\n+\n+  return length;\n+}\n+\n@@ -3529,0 +3690,2 @@\n+  \/\/ Set _loadable_descriptors attribute to default sentinel\n+  _loadable_descriptors = Universe::the_empty_short_array();\n@@ -3535,0 +3698,1 @@\n+  bool parsed_loadable_descriptors_attribute = false;\n@@ -3560,0 +3724,2 @@\n+  const u1* loadable_descriptors_attribute_start = nullptr;\n+  u4  loadable_descriptors_attribute_length = 0;\n@@ -3786,0 +3952,9 @@\n+            if (EnableValhalla && tag == vmSymbols::tag_loadable_descriptors()) {\n+              if (parsed_loadable_descriptors_attribute) {\n+                classfile_parse_error(\"Multiple LoadableDescriptors attributes in class file %s\", CHECK);\n+                return;\n+              }\n+              parsed_loadable_descriptors_attribute = true;\n+              loadable_descriptors_attribute_start = cfs->current();\n+              loadable_descriptors_attribute_length = attribute_length;\n+            }\n@@ -3866,0 +4041,12 @@\n+  if (parsed_loadable_descriptors_attribute) {\n+    const u2 num_classes = parse_classfile_loadable_descriptors_attribute(\n+                            cfs,\n+                            loadable_descriptors_attribute_start,\n+                            CHECK);\n+    if (_need_verify) {\n+      guarantee_property(\n+        loadable_descriptors_attribute_length == sizeof(num_classes) + sizeof(u2) * num_classes,\n+        \"Wrong LoadableDescriptors attribute length in class file %s\", CHECK);\n+    }\n+  }\n+\n@@ -3931,0 +4118,1 @@\n+  this_klass->set_loadable_descriptors(_loadable_descriptors);\n@@ -3934,0 +4122,2 @@\n+  this_klass->set_inline_type_field_klasses_array(_inline_type_field_klasses);\n+  this_klass->set_null_marker_offsets_array(_null_marker_offsets);\n@@ -3982,2 +4172,1 @@\n-                   \"Invalid superclass index %u in class file %s\",\n-                   super_class_index,\n+                   \"Invalid superclass index 0 in class file %s\",\n@@ -3992,1 +4181,0 @@\n-    bool is_array = false;\n@@ -3995,4 +4183,0 @@\n-      if (need_verify)\n-        is_array = super_klass->is_array_klass();\n-    } else if (need_verify) {\n-      is_array = (cp->klass_name_at(super_class_index)->char_at(0) == JVM_SIGNATURE_ARRAY);\n@@ -4001,0 +4185,1 @@\n+      bool is_array = (cp->klass_name_at(super_class_index)->char_at(0) == JVM_SIGNATURE_ARRAY);\n@@ -4174,0 +4359,6 @@\n+bool ClassFileParser::supports_inline_types() const {\n+  \/\/ Inline types are only supported by class file version 68.65535 and later\n+  return _major_version > JAVA_24_VERSION ||\n+         (_major_version == JAVA_24_VERSION && _minor_version == JAVA_PREVIEW_MINOR_VERSION);\n+}\n+\n@@ -4217,3 +4408,4 @@\n-  } else if (max_transitive_size == local_size) {\n-    \/\/ only local interfaces added, share local interface array\n-    return local_ifs;\n+    \/\/ The three lines below are commented to work around bug JDK-8245487\n+\/\/  } else if (max_transitive_size == local_size) {\n+\/\/    \/\/ only local interfaces added, share local interface array\n+\/\/    return local_ifs;\n@@ -4240,0 +4432,1 @@\n+\n@@ -4268,0 +4461,10 @@\n+    \/\/ The JVMS says that super classes for value types must not have the ACC_IDENTITY\n+    \/\/ flag set. But, java.lang.Object must still be allowed to be a direct super class\n+    \/\/ for a value classes.  So, it is treated as a special case for now.\n+    if (!this_klass->access_flags().is_identity_class() &&\n+        super_ik->name() != vmSymbols::java_lang_Object() &&\n+        super_ik->is_identity_class()) {\n+      classfile_icce_error(\"value class %s cannot inherit from class %s\", super_ik, THREAD);\n+      return;\n+    }\n+\n@@ -4453,1 +4656,1 @@\n-void ClassFileParser::verify_legal_class_modifiers(jint flags, TRAPS) const {\n+void ClassFileParser::verify_legal_class_modifiers(jint flags, const char* name, bool is_Object, TRAPS) const {\n@@ -4455,0 +4658,1 @@\n+  const bool is_inner_class = name != nullptr;\n@@ -4471,1 +4675,1 @@\n-  const bool is_super      = (flags & JVM_ACC_SUPER)      != 0;\n+  const bool is_identity   = (flags & JVM_ACC_IDENTITY)   != 0;\n@@ -4475,0 +4679,2 @@\n+  const bool valid_value_class = is_identity || is_interface ||\n+                                 (supports_inline_types() && (!is_identity && (is_abstract || is_final)));\n@@ -4478,2 +4684,3 @@\n-      (is_interface && major_gte_1_5 && (is_super || is_enum)) ||\n-      (!is_interface && major_gte_1_5 && is_annotation)) {\n+      (is_interface && major_gte_1_5 && (is_identity || is_enum)) ||   \/\/  ACC_SUPER (now ACC_IDENTITY) was illegal for interfaces\n+      (!is_interface && major_gte_1_5 && is_annotation) ||\n+      (!valid_value_class)) {\n@@ -4481,7 +4688,21 @@\n-    Exceptions::fthrow(\n-      THREAD_AND_LOCATION,\n-      vmSymbols::java_lang_ClassFormatError(),\n-      \"Illegal class modifiers in class %s: 0x%X\",\n-      _class_name->as_C_string(), flags\n-    );\n-    return;\n+    const char* class_note = \"\";\n+    if (!valid_value_class) {\n+      class_note = \" (a value class must be final or else abstract)\";\n+    }\n+    if (name == nullptr) { \/\/ Not an inner class\n+      Exceptions::fthrow(\n+        THREAD_AND_LOCATION,\n+        vmSymbols::java_lang_ClassFormatError(),\n+        \"Illegal class modifiers in class %s%s: 0x%X\",\n+        _class_name->as_C_string(), class_note, flags\n+      );\n+      return;\n+    } else {\n+      Exceptions::fthrow(\n+        THREAD_AND_LOCATION,\n+        vmSymbols::java_lang_ClassFormatError(),\n+        \"Illegal class modifiers in declaration of inner class %s%s of class %s: 0x%X\",\n+        name, class_note, _class_name->as_C_string(), flags\n+      );\n+      return;\n+    }\n@@ -4553,2 +4774,2 @@\n-void ClassFileParser::verify_legal_field_modifiers(jint flags,\n-                                                   bool is_interface,\n+void ClassFileParser:: verify_legal_field_modifiers(jint flags,\n+                                                   AccessFlags class_access_flags,\n@@ -4566,0 +4787,1 @@\n+  const bool is_strict    = (flags & JVM_ACC_STRICT)    != 0;\n@@ -4568,0 +4790,3 @@\n+  const bool is_interface = class_access_flags.is_interface();\n+  const bool is_identity_class = class_access_flags.is_identity_class();\n+\n@@ -4569,0 +4794,1 @@\n+  const char* error_msg = \"\";\n@@ -4570,4 +4796,8 @@\n-  if (is_interface) {\n-    if (!is_public || !is_static || !is_final || is_private ||\n-        is_protected || is_volatile || is_transient ||\n-        (major_gte_1_5 && is_enum)) {\n+  \/\/ There is some overlap in the checks that apply, for example interface fields\n+  \/\/ must be static, static fields can't be strict, and therefore interfaces can't\n+  \/\/ have strict fields. So we don't have to check every possible invalid combination\n+  \/\/ individually as long as all are covered. Once we have found an illegal combination\n+  \/\/ we can stop checking.\n+\n+  if (supports_inline_types()) {\n+    if (is_strict && is_static) {\n@@ -4575,0 +4805,1 @@\n+      error_msg = \"field cannot be strict and static\";\n@@ -4576,2 +4807,1 @@\n-  } else { \/\/ not interface\n-    if (has_illegal_visibility(flags) || (is_final && is_volatile)) {\n+    else if (is_strict && !is_final) {\n@@ -4579,0 +4809,25 @@\n+      error_msg = \"strict field must be final\";\n+    }\n+  }\n+\n+  if (!is_illegal) {\n+    if (is_interface) {\n+      if (!is_public || !is_static || !is_final || is_private ||\n+          is_protected || is_volatile || is_transient ||\n+          (major_gte_1_5 && is_enum)) {\n+        is_illegal = true;\n+        error_msg = \"interface fields must be public, static and final, and may be synthetic\";\n+      }\n+    } else { \/\/ not interface\n+      if (has_illegal_visibility(flags)) {\n+        is_illegal = true;\n+        error_msg = \"invalid visibility flags for class field\";\n+      } else if (is_final && is_volatile) {\n+        is_illegal = true;\n+        error_msg = \"fields cannot be final and volatile\";\n+      } else if (supports_inline_types()) {\n+        if (!is_identity_class && !is_static && !is_strict) {\n+          is_illegal = true;\n+          error_msg = \"value class fields must be either strict or static\";\n+        }\n+      }\n@@ -4587,2 +4842,2 @@\n-      \"Illegal field modifiers in class %s: 0x%X\",\n-      _class_name->as_C_string(), flags);\n+      \"Illegal field modifiers (%s) in class %s: 0x%X\",\n+      error_msg, _class_name->as_C_string(), flags);\n@@ -4594,1 +4849,1 @@\n-                                                    bool is_interface,\n+                                                    AccessFlags class_access_flags,\n@@ -4613,0 +4868,4 @@\n+  \/\/ LW401 CR required: removal of value factories support\n+  const bool is_interface    = class_access_flags.is_interface();\n+  const bool is_identity_class = class_access_flags.is_identity_class();\n+  const bool is_abstract_class = class_access_flags.is_abstract();\n@@ -4616,0 +4875,1 @@\n+  const char* class_note = \"\";\n@@ -4655,4 +4915,9 @@\n-        if (is_abstract) {\n-          if ((is_final || is_native || is_private || is_static ||\n-              (major_gte_1_5 && (is_synchronized || (!major_gte_17 && is_strict))))) {\n-            is_illegal = true;\n+        if (!is_identity_class && is_synchronized && !is_static) {\n+          is_illegal = true;\n+          class_note = \" (not an identity class)\";\n+        } else {\n+          if (is_abstract) {\n+            if ((is_final || is_native || is_private || is_static ||\n+                (major_gte_1_5 && (is_synchronized || (!major_gte_17 && is_strict))))) {\n+              is_illegal = true;\n+            }\n@@ -4670,2 +4935,3 @@\n-      \"Method %s in class %s has illegal modifiers: 0x%X\",\n-      name->as_C_string(), _class_name->as_C_string(), flags);\n+      \"Method %s in class %s%s has illegal modifiers: 0x%X\",\n+      name->as_C_string(), _class_name->as_C_string(),\n+      class_note, flags);\n@@ -4728,0 +4994,9 @@\n+bool ClassFileParser::is_class_in_loadable_descriptors_attribute(Symbol *klass) {\n+  if (_loadable_descriptors == nullptr) return false;\n+  for (int i = 0; i < _loadable_descriptors->length(); i++) {\n+        Symbol* class_name = _cp->symbol_at(_loadable_descriptors->at(i));\n+        if (class_name == klass) return true;\n+  }\n+  return false;\n+}\n+\n@@ -4829,1 +5104,2 @@\n-    case JVM_SIGNATURE_CLASS: {\n+    case JVM_SIGNATURE_CLASS:\n+    {\n@@ -4840,1 +5116,1 @@\n-        \/\/ Skip leading 'L' and ignore first appearance of ';'\n+        \/\/ Skip leading 'L' or 'Q' and ignore first appearance of ';'\n@@ -4896,0 +5172,4 @@\n+    } else if ((_major_version >= CONSTANT_CLASS_DESCRIPTORS || _class_name->starts_with(\"jdk\/internal\/reflect\/\"))\n+                   && bytes[length - 1] == ';' ) {\n+      \/\/ Support for L...; descriptors\n+      legal = verify_unqualified_name(bytes + 1, length - 2, LegalClass);\n@@ -4961,1 +5241,2 @@\n-      if (name == vmSymbols::object_initializer_name() || name == vmSymbols::class_initializer_name()) {\n+      if (name == vmSymbols::object_initializer_name() ||\n+          name == vmSymbols::class_initializer_name()) {\n@@ -4987,0 +5268,10 @@\n+bool ClassFileParser::legal_field_signature(const Symbol* signature, TRAPS) const {\n+  const char* const bytes = (const char*)signature->bytes();\n+  const unsigned int length = signature->utf8_length();\n+  const char* const p = skip_over_field_signature(bytes, false, length, CHECK_false);\n+\n+  if (p == nullptr || (p - bytes) != (int)length) {\n+    return false;\n+  }\n+  return true;\n+}\n@@ -5022,3 +5313,3 @@\n-      name->char_at(0) == JVM_SIGNATURE_SPECIAL &&\n-      sig_length > 0 &&\n-      signature->char_at(sig_length - 1) != JVM_SIGNATURE_VOID) {\n+    name->char_at(0) == JVM_SIGNATURE_SPECIAL &&\n+    sig_length > 0 &&\n+    signature->char_at(sig_length - 1) != JVM_SIGNATURE_VOID) {\n@@ -5201,1 +5492,0 @@\n-\n@@ -5237,0 +5527,4 @@\n+  if (_field_info->_is_naturally_atomic && ik->is_inline_klass()) {\n+    ik->set_is_naturally_atomic();\n+  }\n+\n@@ -5238,1 +5532,1 @@\n-  ik->set_static_oop_field_count(_fac->count[STATIC_OOP]);\n+  ik->set_static_oop_field_count(_fac->count[STATIC_OOP] + _fac->count[STATIC_INLINE]);\n@@ -5243,0 +5537,3 @@\n+  if (ik->is_inline_klass()) {\n+    InlineKlass::cast(ik)->init_fixed_block();\n+  }\n@@ -5256,0 +5553,1 @@\n+  assert(nullptr == _loadable_descriptors, \"invariant\");\n@@ -5259,0 +5557,1 @@\n+  assert(nullptr == _inline_type_field_klasses, \"invariant\");\n@@ -5294,0 +5593,6 @@\n+  if (_must_be_atomic) {\n+    ik->set_must_be_atomic();\n+  }\n+  if (_is_implicitly_constructible) {\n+    ik->set_is_implicitly_constructible();\n+  }\n@@ -5400,0 +5705,28 @@\n+  bool all_fields_empty = true;\n+  for (AllFieldStream fs(ik); !fs.done(); fs.next()) {\n+    if (!fs.access_flags().is_static()) {\n+      if (fs.field_descriptor().is_null_free_inline_type()) {\n+        Klass* k = ik->inline_type_field_klasses_array()->at(fs.index());\n+        assert(k->is_inline_klass(), \"must be\");\n+        if (!InlineKlass::cast(k)->is_empty_inline_type()) { all_fields_empty = false; }\n+      } else {\n+        all_fields_empty = false;\n+      }\n+    } else if (is_inline_type() && (fs.name() == vmSymbols::default_value_name())) {\n+      InlineKlass::cast(ik)->set_default_value_offset(ik->field_offset(fs.index()));\n+    }\n+  }\n+\n+  if (_is_empty_inline_type || (is_inline_type() && all_fields_empty)) {\n+    ik->set_is_empty_inline_type();\n+  }\n+\n+  if (is_inline_type()) {\n+    InlineKlass* vk = InlineKlass::cast(ik);\n+    vk->set_alignment(_alignment);\n+    vk->set_first_field_offset(_first_field_offset);\n+    vk->set_payload_size_in_bytes(_payload_size_in_bytes);\n+    vk->set_internal_null_marker_offset(_internal_null_marker_offset);\n+    InlineKlass::cast(ik)->initialize_calling_convention(CHECK);\n+  }\n+\n@@ -5491,0 +5824,1 @@\n+  _loadable_descriptors(nullptr),\n@@ -5493,0 +5827,1 @@\n+  _local_interface_indexes(nullptr),\n@@ -5504,0 +5839,2 @@\n+  _inline_type_field_klasses(nullptr),\n+  _null_marker_offsets(nullptr),\n@@ -5532,0 +5869,8 @@\n+  _has_inline_type_fields(false),\n+  _has_nonstatic_fields(false),\n+  _is_empty_inline_type(false),\n+  _is_naturally_atomic(false),\n+  _must_be_atomic(true),\n+  _is_implicitly_constructible(false),\n+  _has_loosely_consistent_annotation(false),\n+  _has_implicitly_constructible_annotation(false),\n@@ -5581,0 +5926,1 @@\n+  _loadable_descriptors = nullptr;\n@@ -5585,0 +5931,2 @@\n+  _inline_type_field_klasses = nullptr;\n+  _null_marker_offsets = nullptr;\n@@ -5603,0 +5951,8 @@\n+  if (_inline_type_field_klasses != nullptr) {\n+     MetadataFactory::free_array<InlineKlass*>(_loader_data, _inline_type_field_klasses);\n+  }\n+\n+  if (_null_marker_offsets != nullptr) {\n+     MetadataFactory::free_array<int>(_loader_data, _null_marker_offsets);\n+  }\n+\n@@ -5625,0 +5981,4 @@\n+  if (_loadable_descriptors != nullptr && _loadable_descriptors != Universe::the_empty_short_array()) {\n+    MetadataFactory::free_array<u2>(_loader_data, _loadable_descriptors);\n+  }\n+\n@@ -5709,2 +6069,1 @@\n-  \/\/ Access flags\n-  jint flags;\n+  jint recognized_modifiers = JVM_RECOGNIZED_CLASS_MODIFIERS;\n@@ -5713,3 +6072,1 @@\n-    flags = stream->get_u2_fast() & (JVM_RECOGNIZED_CLASS_MODIFIERS | JVM_ACC_MODULE);\n-  } else {\n-    flags = stream->get_u2_fast() & JVM_RECOGNIZED_CLASS_MODIFIERS;\n+    recognized_modifiers |= JVM_ACC_MODULE;\n@@ -5718,0 +6075,3 @@\n+  \/\/ Access flags\n+  jint flags = stream->get_u2_fast() & recognized_modifiers;\n+\n@@ -5723,8 +6083,7 @@\n-  verify_legal_class_modifiers(flags, CHECK);\n-\n-  short bad_constant = class_bad_constant_seen();\n-  if (bad_constant != 0) {\n-    \/\/ Do not throw CFE until after the access_flags are checked because if\n-    \/\/ ACC_MODULE is set in the access flags, then NCDFE must be thrown, not CFE.\n-    classfile_parse_error(\"Unknown constant tag %u in class file %s\", bad_constant, THREAD);\n-    return;\n+  \/\/ Fixing ACC_SUPER\/ACC_IDENTITY for old class files\n+  if (!supports_inline_types()) {\n+    const bool is_module = (flags & JVM_ACC_MODULE) != 0;\n+    const bool is_interface = (flags & JVM_ACC_INTERFACE) != 0;\n+    if (!is_module && !is_interface) {\n+      flags |= JVM_ACC_IDENTITY;\n+    }\n@@ -5733,1 +6092,0 @@\n-  _access_flags.set_flags(flags);\n@@ -5746,0 +6104,14 @@\n+  bool is_java_lang_Object = class_name_in_cp == vmSymbols::java_lang_Object();\n+\n+  verify_legal_class_modifiers(flags, nullptr, is_java_lang_Object, CHECK);\n+\n+  _access_flags.set_flags(flags);\n+\n+  short bad_constant = class_bad_constant_seen();\n+  if (bad_constant != 0) {\n+    \/\/ Do not throw CFE until after the access_flags are checked because if\n+    \/\/ ACC_MODULE is set in the access flags, then NCDFE must be thrown, not CFE.\n+    classfile_parse_error(\"Unknown constant tag %u in class file %s\", bad_constant, THREAD);\n+    return;\n+  }\n+\n@@ -5825,2 +6197,0 @@\n-  assert(_local_interfaces != nullptr, \"invariant\");\n-\n@@ -5830,1 +6200,1 @@\n-               _access_flags.is_interface(),\n+               _access_flags,\n@@ -5841,1 +6211,3 @@\n-                _access_flags.is_interface(),\n+                is_interface(),\n+                !is_identity_class(),\n+                is_abstract_class(),\n@@ -5921,2 +6293,2 @@\n-                   \"java.lang.Object cannot implement an interface in class file %s\",\n-                   CHECK);\n+        \"java.lang.Object cannot implement an interface in class file %s\",\n+        CHECK);\n@@ -5927,1 +6299,1 @@\n-    if (_access_flags.is_interface()) {\n+    if (is_interface()) {\n@@ -5939,1 +6311,1 @@\n-                       SystemDictionary::resolve_super_or_fail(_class_name,\n+                       SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name,\n@@ -5949,0 +6321,14 @@\n+    if (_super_klass->is_interface()) {\n+      classfile_icce_error(\"class %s has interface %s as super class\", _super_klass, THREAD);\n+      return;\n+    }\n+\n+    if (_super_klass->is_final()) {\n+      classfile_icce_error(\"class %s cannot inherit from final class %s\", _super_klass, THREAD);\n+      return;\n+    }\n+\n+    if (EnableValhalla) {\n+      check_identity_and_value_modifiers(this, _super_klass, CHECK);\n+    }\n+\n@@ -5952,0 +6338,1 @@\n+  }\n@@ -5953,3 +6340,29 @@\n-    if (_super_klass->is_interface()) {\n-      classfile_icce_error(\"class %s has interface %s as super class\", _super_klass, THREAD);\n-      return;\n+  if (_parsed_annotations->has_annotation(AnnotationCollector::_jdk_internal_LooselyConsistentValue) && _access_flags.is_identity_class()) {\n+    THROW_MSG(vmSymbols::java_lang_ClassFormatError(),\n+          err_msg(\"class %s cannot have annotation jdk.internal.vm.annotation.LooselyConsistentValue, because it is not a value class\",\n+                  _class_name->as_klass_external_name()));\n+  }\n+  if (_parsed_annotations->has_annotation(AnnotationCollector::_jdk_internal_ImplicitlyConstructible) && _access_flags.is_identity_class()) {\n+    THROW_MSG(vmSymbols::java_lang_ClassFormatError(),\n+          err_msg(\"class %s cannot have annotation jdk.internal.vm.annotation.ImplicitlyConstructible, because it is not a value class\",\n+                  _class_name->as_klass_external_name()));\n+  }\n+\n+  \/\/ Determining is the class allows tearing or not (default is not)\n+  \/\/ Test might need extensions when field inheritance is added for value classes\n+  if (EnableValhalla && !_access_flags.is_identity_class()) {\n+    if (_parsed_annotations->has_annotation(ClassAnnotationCollector::_jdk_internal_LooselyConsistentValue)\n+        && (_super_klass == vmClasses::Object_klass() || !_super_klass->must_be_atomic())) {\n+      _must_be_atomic = false;\n+    }\n+    if (_parsed_annotations->has_annotation(ClassAnnotationCollector::_jdk_internal_ImplicitlyConstructible)\n+        && (_super_klass == vmClasses::Object_klass() || _super_klass->is_implicitly_constructible())) {\n+      _is_implicitly_constructible = true;\n+    }\n+    \/\/ Apply VM options override\n+    if (*ForceNonTearable != '\\0') {\n+      \/\/ Allow a command line switch to force the same atomicity property:\n+      const char* class_name_str = _class_name->as_C_string();\n+      if (StringUtils::class_list_match(ForceNonTearable, class_name_str)) {\n+        _must_be_atomic = true;\n+      }\n@@ -5959,0 +6372,47 @@\n+  int itfs_len = _local_interface_indexes == nullptr ? 0 : _local_interface_indexes->length();\n+  _local_interfaces = MetadataFactory::new_array<InstanceKlass*>(_loader_data, itfs_len, nullptr, CHECK);\n+  if (_local_interface_indexes != nullptr) {\n+    for (int i = 0; i < _local_interface_indexes->length(); i++) {\n+      u2 interface_index = _local_interface_indexes->at(i);\n+      Klass* interf;\n+      if (cp->tag_at(interface_index).is_klass()) {\n+        interf = cp->resolved_klass_at(interface_index);\n+      } else {\n+        Symbol* const unresolved_klass  = cp->klass_name_at(interface_index);\n+\n+        \/\/ Don't need to check legal name because it's checked when parsing constant pool.\n+        \/\/ But need to make sure it's not an array type.\n+        guarantee_property(unresolved_klass->char_at(0) != JVM_SIGNATURE_ARRAY,\n+                            \"Bad interface name in class file %s\", CHECK);\n+\n+        \/\/ Call resolve_super so class circularity is checked\n+        interf = SystemDictionary::resolve_with_circularity_detection_or_fail(\n+                                                  _class_name,\n+                                                  unresolved_klass,\n+                                                  Handle(THREAD, _loader_data->class_loader()),\n+                                                  _protection_domain,\n+                                                  false,\n+                                                  CHECK);\n+      }\n+\n+      if (!interf->is_interface()) {\n+        THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                  err_msg(\"class %s can not implement %s, because it is not an interface (%s)\",\n+                          _class_name->as_klass_external_name(),\n+                          interf->external_name(),\n+                          interf->class_in_module_of_loader()));\n+      }\n+\n+      if (EnableValhalla) {\n+        \/\/ Check modifiers and set carries_identity_modifier\/carries_value_modifier flags\n+        check_identity_and_value_modifiers(this, InstanceKlass::cast(interf), CHECK);\n+      }\n+\n+      if (InstanceKlass::cast(interf)->has_nonstatic_concrete_methods()) {\n+        _has_nonstatic_concrete_methods = true;\n+      }\n+      _local_interfaces->at_put(i, InstanceKlass::cast(interf));\n+    }\n+  }\n+  assert(_local_interfaces != nullptr, \"invariant\");\n+\n@@ -5986,1 +6446,1 @@\n-  _itable_size = _access_flags.is_interface() ? 0 :\n+  _itable_size = is_interface() ? 0 :\n@@ -5992,0 +6452,76 @@\n+  if (EnableValhalla) {\n+    _inline_type_field_klasses = MetadataFactory::new_array<InlineKlass*>(_loader_data,\n+                                                   java_fields_count(),\n+                                                   nullptr,\n+                                                   CHECK);\n+    for (GrowableArrayIterator<FieldInfo> it = _temp_field_info->begin(); it != _temp_field_info->end(); ++it) {\n+      FieldInfo fieldinfo = *it;\n+      if (fieldinfo.access_flags().is_static()) continue;  \/\/ Only non-static fields are processed at load time\n+      Symbol* sig = fieldinfo.signature(cp);\n+      if (fieldinfo.field_flags().is_null_free_inline_type()) {\n+        \/\/ Pre-load classes of null-free fields that are candidate for flattening\n+        TempNewSymbol s = Signature::strip_envelope(sig);\n+        if (s == _class_name) {\n+          THROW_MSG(vmSymbols::java_lang_ClassCircularityError(), err_msg(\"Class %s cannot have a null-free non-static field of its own type\", _class_name->as_C_string()));\n+        }\n+        log_info(class, preload)(\"Preloading class %s during loading of class %s. Cause: a null-free non-static field is declared with this type\", s->as_C_string(), _class_name->as_C_string());\n+        Klass* klass = SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name, s, Handle(THREAD, _loader_data->class_loader()), _protection_domain, false, THREAD);\n+        if (HAS_PENDING_EXCEPTION) {\n+          log_warning(class, preload)(\"Preloading of class %s during loading of class %s (cause: null-free non-static field) failed: %s\",\n+                                      s->as_C_string(), _class_name->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+          return; \/\/ Exception is still pending\n+        }\n+        assert(klass != nullptr, \"Sanity check\");\n+        if (klass->access_flags().is_identity_class()) {\n+          assert(klass->is_instance_klass(), \"Sanity check\");\n+          ResourceMark rm(THREAD);\n+          THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                    err_msg(\"Class %s expects class %s to be a value class, but it is an identity class\",\n+                    _class_name->as_C_string(),\n+                    InstanceKlass::cast(klass)->external_name()));\n+        }\n+        if (klass->is_abstract()) {\n+          assert(klass->is_instance_klass(), \"Sanity check\");\n+          ResourceMark rm(THREAD);\n+          THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                    err_msg(\"Class %s expects class %s to be concrete value type, but it is an abstract class\",\n+                    _class_name->as_C_string(),\n+                    InstanceKlass::cast(klass)->external_name()));\n+        }\n+        InlineKlass* vk = InlineKlass::cast(klass);\n+        if (!vk->is_implicitly_constructible()) {\n+          THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                    err_msg(\"class %s is not implicitly constructible and it is used in a null restricted non-static field (not supported)\",\n+                    klass->name()->as_C_string()));\n+        }\n+        _inline_type_field_klasses->at_put(fieldinfo.index(), vk);\n+        log_info(class, preload)(\"Preloading of class %s during loading of class %s (cause: null-free non-static field) succeeded\", s->as_C_string(), _class_name->as_C_string());\n+      } else if (Signature::has_envelope(sig)) {\n+        \/\/ Preloading classes for nullable fields that are listed in the LoadableDescriptors attribute\n+        \/\/ Those classes would be required later for the flattening of nullable inline type fields\n+        TempNewSymbol name = Signature::strip_envelope(sig);\n+        if (name != _class_name && is_class_in_loadable_descriptors_attribute(sig)) {\n+          log_info(class, preload)(\"Preloading class %s during loading of class %s. Cause: field type in LoadableDescriptors attribute\", name->as_C_string(), _class_name->as_C_string());\n+          oop loader = loader_data()->class_loader();\n+          Klass* klass = SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name, name, Handle(THREAD, loader), _protection_domain, false, THREAD);\n+          if (klass != nullptr) {\n+            if (klass->is_inline_klass()) {\n+              _inline_type_field_klasses->at_put(fieldinfo.index(), InlineKlass::cast(klass));\n+              log_info(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in LoadableDescriptors attribute) succeeded\", name->as_C_string(), _class_name->as_C_string());\n+            } else {\n+              \/\/ Non value class are allowed by the current spec, but it could be an indication of an issue so let's log a warning\n+              log_warning(class, preload)(\"Preloading class %s during loading of class %s (cause: field type in LoadableDescriptors attribute) but loaded class is not a value class\", name->as_C_string(), _class_name->as_C_string());\n+            }\n+            } else {\n+            log_warning(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in LoadableDescriptors attribute) failed : %s\",\n+                                          name->as_C_string(), _class_name->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+          }\n+          \/\/ Loads triggered by the LoadableDescriptors attribute are speculative, failures must not impact loading of current class\n+          if (HAS_PENDING_EXCEPTION) {\n+            CLEAR_PENDING_EXCEPTION;\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n@@ -5993,2 +6529,4 @@\n-  FieldLayoutBuilder lb(class_name(), super_klass(), _cp, \/*_fields*\/ _temp_field_info,\n-                        _parsed_annotations->is_contended(), _field_info);\n+  FieldLayoutBuilder lb(class_name(), loader_data(), super_klass(), _cp, \/*_fields*\/ _temp_field_info,\n+      _parsed_annotations->is_contended(), is_inline_type(),\n+      access_flags().is_abstract() && !access_flags().is_identity_class() && !access_flags().is_interface(),\n+      _field_info, _inline_type_field_klasses);\n@@ -5996,0 +6534,7 @@\n+  if (is_inline_type()) {\n+    _alignment = lb.get_alignment();\n+    _first_field_offset = lb.get_first_field_offset();\n+    _payload_size_in_bytes = lb.get_payload_size_in_byte();\n+    _internal_null_marker_offset = lb.get_internal_null_marker_offset();\n+  }\n+  _has_inline_type_fields = _field_info->_has_inline_fields;\n@@ -6001,0 +6546,1 @@\n+\n@@ -6004,0 +6550,11 @@\n+  if (_field_info->_has_null_marker_offsets) {\n+    int idx = 0;\n+    _null_marker_offsets = MetadataFactory::new_array<int>(_loader_data, _temp_field_info->length(), 0, CHECK);\n+    for (GrowableArrayIterator<FieldInfo> it = _temp_field_info->begin(); it != _temp_field_info->end(); ++it, ++idx) {\n+      FieldInfo fieldinfo = *it;\n+      if (fieldinfo.field_flags().has_null_marker()) {\n+        assert(fieldinfo.null_marker_offset() != 0, \"Invalid value\");\n+        _null_marker_offsets->at_put(idx, fieldinfo.null_marker_offset());\n+      }\n+    }\n+  }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":707,"deletions":150,"binary":false,"changes":857,"status":"modified"},{"patch":"@@ -1142,0 +1142,3 @@\n+    \/** The value of IDENTITY access and property modifier. *\/\n+    int ACC_IDENTITY = 0x0020;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -338,0 +338,1 @@\n+    int ACC_IDENTITY = 0x0020; \/\/ class\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Opcodes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -201,0 +201,13 @@\n+    public static boolean isSupported(Feature feature, int majorVersion) {\n+        Source source = null;\n+        for (Target target : Target.values()) {\n+            if (majorVersion == target.majorVersion) {\n+                source = lookup(target.name);\n+            }\n+        }\n+        if (source != null) {\n+            return feature.allowedInSource(source);\n+        }\n+        return false;\n+    }\n+\n@@ -263,0 +276,1 @@\n+        VALUE_CLASSES(JDK22, Fragments.FeatureValueClasses, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -220,0 +220,6 @@\n+    \/** Does the target VM support value classes\n+     *\/\n+    public boolean hasValueClasses() {\n+        return compareTo(JDK1_23) >= 0;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,702 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ Generated from the following class files with PointN.x removed and RectangleP.p1 made private\n+\/\/ java org.openjdk.asmtools.Main jdec NamedRectangleN.class NamedRectangleP.class PointN.class RectangleN.class RectangleP.class\n+\n+\/*\n+package compiler.valhalla.inlinetypes;\n+\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n+@ImplicitlyConstructible\n+@LooselyConsistentValue\n+value class PointN {\n+    int x; \/\/ Removed\n+    int y;\n+\n+    PointN(int i, int j) {\n+        x = i;\n+        y = j;\n+    }\n+}\n+\n+@ImplicitlyConstructible\n+@LooselyConsistentValue\n+value class RectangleN {\n+    @NullRestricted\n+    PointN p1 = new PointN(4, 7);\n+}\n+\n+class NamedRectangleN {\n+    @NullRestricted\n+    RectangleN rect = new RectangleN();\n+    String name = \"\";\n+\n+    static int getP1X(NamedRectangleN nr) {\n+        return nr.rect.p1.x;\n+    }\n+}\n+\n+@ImplicitlyConstructible\n+@LooselyConsistentValue\n+value class RectangleP {\n+    @NullRestricted\n+    PointN p1 = new PointN(4, 7); \/\/ Made private\n+}\n+\n+class NamedRectangleP {\n+    @NullRestricted\n+    RectangleP rect = new RectangleP();\n+    String name = \"\";\n+\n+    static int getP1Y(NamedRectangleP nr) {\n+        return nr.rect.p1.y;\n+    }\n+}\n+*\/\n+\n+class compiler\/valhalla\/inlinetypes\/NamedRectangleN {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleN\"; \/\/ #8\n+    Method #7 #3; \/\/ #9\n+    Field #11 #12; \/\/ #10\n+    class #13; \/\/ #11\n+    NameAndType #14 #15; \/\/ #12\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/NamedRectangleN\"; \/\/ #13\n+    Utf8 \"rect\"; \/\/ #14\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/RectangleN;\"; \/\/ #15\n+    String #17; \/\/ #16\n+    Utf8 \"\"; \/\/ #17\n+    Field #11 #19; \/\/ #18\n+    NameAndType #20 #21; \/\/ #19\n+    Utf8 \"name\"; \/\/ #20\n+    Utf8 \"Ljava\/lang\/String;\"; \/\/ #21\n+    Field #7 #23; \/\/ #22\n+    NameAndType #24 #25; \/\/ #23\n+    Utf8 \"p1\"; \/\/ #24\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #25\n+    Field #27 #28; \/\/ #26\n+    class #29; \/\/ #27\n+    NameAndType #30 #31; \/\/ #28\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #29\n+    Utf8 \"x\"; \/\/ #30\n+    Utf8 \"I\"; \/\/ #31\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #32\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #33\n+    Utf8 \"Code\"; \/\/ #34\n+    Utf8 \"LineNumberTable\"; \/\/ #35\n+    Utf8 \"getP1X\"; \/\/ #36\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/NamedRectangleN;)I\"; \/\/ #37\n+    Utf8 \"SourceFile\"; \/\/ #38\n+    Utf8 \"Point.java\"; \/\/ #39\n+    Utf8 \"Preload\"; \/\/ #40\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #11;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #14; \/\/ name_index\n+      #15; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#32) { \/\/ RuntimeVisibleAnnotations\n+          [] { \/\/ annotations\n+            {  \/\/  annotation\n+              #33;\n+              [] { \/\/ element_value_pairs\n+              }  \/\/  element_value_pairs\n+            }  \/\/  annotation\n+          }\n+        } \/\/ end RuntimeVisibleAnnotations\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #20; \/\/ name_index\n+      #21; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#34) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012ABB0007;\n+            0x59B70009B5000A2A;\n+            0x1210B50012B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#35) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  26;\n+                4  27;\n+                15  29;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #36; \/\/ name_index\n+      #37; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#34) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB4000AB40016B4;\n+            0x001AAC;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#35) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  32;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#38) { \/\/ SourceFile\n+      #39;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#40) { \/\/ Preload\n+      0x00010007;\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/NamedRectangleN\n+class compiler\/valhalla\/inlinetypes\/NamedRectangleP {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleP\"; \/\/ #8\n+    Method #7 #3; \/\/ #9\n+    Field #11 #12; \/\/ #10\n+    class #13; \/\/ #11\n+    NameAndType #14 #15; \/\/ #12\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/NamedRectangleP\"; \/\/ #13\n+    Utf8 \"rect\"; \/\/ #14\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/RectangleP;\"; \/\/ #15\n+    String #17; \/\/ #16\n+    Utf8 \"\"; \/\/ #17\n+    Field #11 #19; \/\/ #18\n+    NameAndType #20 #21; \/\/ #19\n+    Utf8 \"name\"; \/\/ #20\n+    Utf8 \"Ljava\/lang\/String;\"; \/\/ #21\n+    Field #7 #23; \/\/ #22\n+    NameAndType #24 #25; \/\/ #23\n+    Utf8 \"p1\"; \/\/ #24\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #25\n+    Field #27 #28; \/\/ #26\n+    class #29; \/\/ #27\n+    NameAndType #30 #31; \/\/ #28\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #29\n+    Utf8 \"y\"; \/\/ #30\n+    Utf8 \"I\"; \/\/ #31\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #32\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #33\n+    Utf8 \"Code\"; \/\/ #34\n+    Utf8 \"LineNumberTable\"; \/\/ #35\n+    Utf8 \"getP1Y\"; \/\/ #36\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/NamedRectangleP;)I\"; \/\/ #37\n+    Utf8 \"SourceFile\"; \/\/ #38\n+    Utf8 \"Point.java\"; \/\/ #39\n+    Utf8 \"Preload\"; \/\/ #40\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #11;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #14; \/\/ name_index\n+      #15; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#32) { \/\/ RuntimeVisibleAnnotations\n+          [] { \/\/ annotations\n+            {  \/\/  annotation\n+              #33;\n+              [] { \/\/ element_value_pairs\n+              }  \/\/  element_value_pairs\n+            }  \/\/  annotation\n+          }\n+        } \/\/ end RuntimeVisibleAnnotations\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #20; \/\/ name_index\n+      #21; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#34) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012ABB0007;\n+            0x59B70009B5000A2A;\n+            0x1210B50012B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#35) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  43;\n+                4  44;\n+                15  46;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #36; \/\/ name_index\n+      #37; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#34) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB4000AB40016B4;\n+            0x001AAC;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#35) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  49;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#38) { \/\/ SourceFile\n+      #39;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#40) { \/\/ Preload\n+      0x00010007;\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/NamedRectangleP\n+class compiler\/valhalla\/inlinetypes\/PointN {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Field #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #4\n+    Utf8 \"y\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Utf8 \"(II)V\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"SourceFile\"; \/\/ #16\n+    Utf8 \"PointN.java\"; \/\/ #17\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #18\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/ImplicitlyConstructible;\"; \/\/ #19\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/LooselyConsistentValue;\"; \/\/ #20\n+  } \/\/ Constant Pool\n+\n+  0x0010; \/\/ access\n+  #2;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0810; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #13; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          2; \/\/ max_stack\n+          3; \/\/ max_locals\n+          Bytes[]{\n+            0x2A1CB500012AB700;\n+            0x07B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  13;\n+                5  12;\n+                9  14;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#16) { \/\/ SourceFile\n+      #17;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#18) { \/\/ RuntimeVisibleAnnotations\n+      [] { \/\/ annotations\n+        {  \/\/  annotation\n+          #19;\n+          [] { \/\/ element_value_pairs\n+          }  \/\/  element_value_pairs\n+        }  \/\/  annotation\n+        ;\n+        {  \/\/  annotation\n+          #20;\n+          [] { \/\/ element_value_pairs\n+          }  \/\/  element_value_pairs\n+        }  \/\/  annotation\n+      }\n+    } \/\/ end RuntimeVisibleAnnotations\n+  } \/\/ Attributes\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/PointN\n+class compiler\/valhalla\/inlinetypes\/RectangleN {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #2\n+    Method #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"(II)V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleN\"; \/\/ #10\n+    Utf8 \"p1\"; \/\/ #11\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #12\n+    Method #14 #15; \/\/ #13\n+    class #16; \/\/ #14\n+    NameAndType #5 #17; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #16\n+    Utf8 \"()V\"; \/\/ #17\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #18\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #19\n+    Utf8 \"Code\"; \/\/ #20\n+    Utf8 \"LineNumberTable\"; \/\/ #21\n+    Utf8 \"SourceFile\"; \/\/ #22\n+    Utf8 \"Point.java\"; \/\/ #23\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/ImplicitlyConstructible;\"; \/\/ #24\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/LooselyConsistentValue;\"; \/\/ #25\n+    Utf8 \"Preload\"; \/\/ #26\n+  } \/\/ Constant Pool\n+\n+  0x0010; \/\/ access\n+  #8;\/\/ this_cpx\n+  #14;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0810; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ RuntimeVisibleAnnotations\n+          [] { \/\/ annotations\n+            {  \/\/  annotation\n+              #19;\n+              [] { \/\/ element_value_pairs\n+              }  \/\/  element_value_pairs\n+            }  \/\/  annotation\n+          }\n+        } \/\/ end RuntimeVisibleAnnotations\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          5; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2ABB000159071007;\n+            0xB70003B500072AB7;\n+            0x000DB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  22;\n+                14  21;\n+                18  22;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#22) { \/\/ SourceFile\n+      #23;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#18) { \/\/ RuntimeVisibleAnnotations\n+      [] { \/\/ annotations\n+        {  \/\/  annotation\n+          #24;\n+          [] { \/\/ element_value_pairs\n+          }  \/\/  element_value_pairs\n+        }  \/\/  annotation\n+        ;\n+        {  \/\/  annotation\n+          #25;\n+          [] { \/\/ element_value_pairs\n+          }  \/\/  element_value_pairs\n+        }  \/\/  annotation\n+      }\n+    } \/\/ end RuntimeVisibleAnnotations\n+    ;\n+    Attr(#26) { \/\/ Preload\n+      0x00010001;\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/RectangleN\n+class compiler\/valhalla\/inlinetypes\/RectangleP {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #2\n+    Method #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"(II)V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleP\"; \/\/ #10\n+    Utf8 \"p1\"; \/\/ #11\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #12\n+    Method #14 #15; \/\/ #13\n+    class #16; \/\/ #14\n+    NameAndType #5 #17; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #16\n+    Utf8 \"()V\"; \/\/ #17\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #18\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #19\n+    Utf8 \"Code\"; \/\/ #20\n+    Utf8 \"LineNumberTable\"; \/\/ #21\n+    Utf8 \"SourceFile\"; \/\/ #22\n+    Utf8 \"Point.java\"; \/\/ #23\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/ImplicitlyConstructible;\"; \/\/ #24\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/LooselyConsistentValue;\"; \/\/ #25\n+    Utf8 \"Preload\"; \/\/ #26\n+  } \/\/ Constant Pool\n+\n+  0x0010; \/\/ access\n+  #8;\/\/ this_cpx\n+  #14;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0812; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ RuntimeVisibleAnnotations\n+          [] { \/\/ annotations\n+            {  \/\/  annotation\n+              #19;\n+              [] { \/\/ element_value_pairs\n+              }  \/\/  element_value_pairs\n+            }  \/\/  annotation\n+          }\n+        } \/\/ end RuntimeVisibleAnnotations\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          5; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2ABB000159071007;\n+            0xB70003B500072AB7;\n+            0x000DB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  39;\n+                14  38;\n+                18  39;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#22) { \/\/ SourceFile\n+      #23;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#18) { \/\/ RuntimeVisibleAnnotations\n+      [] { \/\/ annotations\n+        {  \/\/  annotation\n+          #24;\n+          [] { \/\/ element_value_pairs\n+          }  \/\/  element_value_pairs\n+        }  \/\/  annotation\n+        ;\n+        {  \/\/  annotation\n+          #25;\n+          [] { \/\/ element_value_pairs\n+          }  \/\/  element_value_pairs\n+        }  \/\/  annotation\n+      }\n+    } \/\/ end RuntimeVisibleAnnotations\n+    ;\n+    Attr(#26) { \/\/ Preload\n+      0x00010001;\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/RectangleP\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/GetfieldChains.jcod","additions":702,"deletions":0,"binary":false,"changes":702,"status":"added"},{"patch":"@@ -0,0 +1,3743 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ ##################################### WARNING ########################################\n+\/\/ Generated file, don't modify manually. See TestMismatchHandling.java for instructions.\n+\/\/ ##################################### WARNING ########################################\n+\n+class MyValue1 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"x\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n+    String #16; \/\/ #15\n+    Utf8 \"Verification failed\"; \/\/ #16\n+    Method #13 #18; \/\/ #17\n+    NameAndType #5 #19; \/\/ #18\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n+    Utf8 \"Code\"; \/\/ #20\n+    Utf8 \"LineNumberTable\"; \/\/ #21\n+    Utf8 \"verify\"; \/\/ #22\n+    Utf8 \"StackMapTable\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012A102AB5;\n+            0x0007B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  24;\n+                4  25;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #22; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40007102A9F00;\n+            0x0DBB000D59120FB7;\n+            0x0011BFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  28;\n+                9  29;\n+                19  31;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#23) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue1\n+class MyValue2 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"x\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n+    String #16; \/\/ #15\n+    Utf8 \"Verification failed\"; \/\/ #16\n+    Method #13 #18; \/\/ #17\n+    NameAndType #5 #19; \/\/ #18\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n+    Utf8 \"Code\"; \/\/ #20\n+    Utf8 \"LineNumberTable\"; \/\/ #21\n+    Utf8 \"verify\"; \/\/ #22\n+    Utf8 \"StackMapTable\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012A102AB5;\n+            0x0007B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  34;\n+                4  35;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #22; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40007102A9F00;\n+            0x0DBB000D59120FB7;\n+            0x0011BFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  38;\n+                9  39;\n+                19  41;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#23) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue2\n+class MyValue3 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"x\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n+    String #16; \/\/ #15\n+    Utf8 \"Verification failed\"; \/\/ #16\n+    Method #13 #18; \/\/ #17\n+    NameAndType #5 #19; \/\/ #18\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n+    Utf8 \"Code\"; \/\/ #20\n+    Utf8 \"LineNumberTable\"; \/\/ #21\n+    Utf8 \"verify\"; \/\/ #22\n+    Utf8 \"StackMapTable\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012A102AB5;\n+            0x0007B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  44;\n+                4  45;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #22; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40007102A9F00;\n+            0x0DBB000D59120FB7;\n+            0x0011BFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  48;\n+                9  49;\n+                19  51;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#23) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue3\n+class MyValue4 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue4\"; \/\/ #10\n+    Utf8 \"x\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n+    String #16; \/\/ #15\n+    Utf8 \"Verification failed\"; \/\/ #16\n+    Method #13 #18; \/\/ #17\n+    NameAndType #5 #19; \/\/ #18\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n+    Method #8 #3; \/\/ #20\n+    Utf8 \"Code\"; \/\/ #21\n+    Utf8 \"LineNumberTable\"; \/\/ #22\n+    Utf8 \"verify\"; \/\/ #23\n+    Utf8 \"StackMapTable\"; \/\/ #24\n+    Utf8 \"make\"; \/\/ #25\n+    Utf8 \"()LMyValue4;\"; \/\/ #26\n+    Utf8 \"SourceFile\"; \/\/ #27\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #28\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#21) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012A102AB5;\n+            0x0007B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#22) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  54;\n+                4  55;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #23; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#21) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40007102A9F00;\n+            0x0DBB000D59120FB7;\n+            0x0011BFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#22) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  58;\n+                9  59;\n+                19  61;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#24) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #25; \/\/ name_index\n+      #26; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#21) { \/\/ Code\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0xBB000859B70014B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#22) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  64;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#27) { \/\/ SourceFile\n+      #28;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue4\n+class MyValue5 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue5\"; \/\/ #10\n+    Utf8 \"x\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n+    String #16; \/\/ #15\n+    Utf8 \"Verification failed\"; \/\/ #16\n+    Method #13 #18; \/\/ #17\n+    NameAndType #5 #19; \/\/ #18\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n+    Method #8 #3; \/\/ #20\n+    class #22; \/\/ #21\n+    Utf8 \"Verifiable\"; \/\/ #22\n+    Utf8 \"Code\"; \/\/ #23\n+    Utf8 \"LineNumberTable\"; \/\/ #24\n+    Utf8 \"verify\"; \/\/ #25\n+    Utf8 \"StackMapTable\"; \/\/ #26\n+    Utf8 \"make\"; \/\/ #27\n+    Utf8 \"()LMyValue5;\"; \/\/ #28\n+    Utf8 \"SourceFile\"; \/\/ #29\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #30\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #21;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012A102AB5;\n+            0x0007B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  72;\n+                4  73;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #25; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40007102A9F00;\n+            0x0DBB000D59120FB7;\n+            0x0011BFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  77;\n+                9  78;\n+                19  80;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#26) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #27; \/\/ name_index\n+      #28; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0xBB000859B70014B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  83;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#29) { \/\/ SourceFile\n+      #30;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue5\n+class MyValue6 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue6\"; \/\/ #10\n+    Utf8 \"x\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n+    String #16; \/\/ #15\n+    Utf8 \"Verification failed\"; \/\/ #16\n+    Method #13 #18; \/\/ #17\n+    NameAndType #5 #19; \/\/ #18\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n+    Method #8 #3; \/\/ #20\n+    class #22; \/\/ #21\n+    Utf8 \"Verifiable\"; \/\/ #22\n+    Utf8 \"Code\"; \/\/ #23\n+    Utf8 \"LineNumberTable\"; \/\/ #24\n+    Utf8 \"verify\"; \/\/ #25\n+    Utf8 \"StackMapTable\"; \/\/ #26\n+    Utf8 \"make\"; \/\/ #27\n+    Utf8 \"()LMyValue6;\"; \/\/ #28\n+    Utf8 \"SourceFile\"; \/\/ #29\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #30\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #21;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012A102AB5;\n+            0x0007B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  87;\n+                4  88;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #25; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40007102A9F00;\n+            0x0DBB000D59120FB7;\n+            0x0011BFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  92;\n+                9  93;\n+                19  95;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#26) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #27; \/\/ name_index\n+      #28; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0xBB000859B70014B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  98;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#29) { \/\/ SourceFile\n+      #30;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue6\n+class MyValue7 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"x\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #14\n+    String #16; \/\/ #15\n+    Utf8 \"Verification failed\"; \/\/ #16\n+    Method #13 #18; \/\/ #17\n+    NameAndType #5 #19; \/\/ #18\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #19\n+    Utf8 \"Code\"; \/\/ #20\n+    Utf8 \"LineNumberTable\"; \/\/ #21\n+    Utf8 \"verify\"; \/\/ #22\n+    Utf8 \"StackMapTable\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012A102AB5;\n+            0x0007B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  102;\n+                4  103;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #22; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#20) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40007102A9F00;\n+            0x0DBB000D59120FB7;\n+            0x0011BFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#21) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  106;\n+                9  107;\n+                19  109;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#23) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue7\n+class Verifiable {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"Verifiable\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"verify\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Utf8 \"SourceFile\"; \/\/ #7\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #8\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#7) { \/\/ SourceFile\n+      #8;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class Verifiable\n+file \"B.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"A\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"B\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  119;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  122;\n+                4  123;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class B\n+class I3 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I3\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"method\"; \/\/ #5\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #6\n+    Utf8 \"SourceFile\"; \/\/ #7\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #8\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#7) { \/\/ SourceFile\n+      #8;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I3\n+class I4 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I4\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    class #6; \/\/ #5\n+    Utf8 \"I3\"; \/\/ #6\n+    Utf8 \"method\"; \/\/ #7\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #10\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #5;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #7; \/\/ name_index\n+      #8; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I4\n+class E {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"E\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I4\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  160;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  163;\n+                4  164;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class E\n+class G {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"G\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I2\"; \/\/ #15\n+    class #17; \/\/ #16\n+    Utf8 \"I4\"; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"method\"; \/\/ #20\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #21\n+    Utf8 \"SourceFile\"; \/\/ #22\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #23\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+    #16;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  177;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #20; \/\/ name_index\n+      #21; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  180;\n+                4  181;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#22) { \/\/ SourceFile\n+      #23;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class G\n+class J {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"J\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  197;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  199;\n+                4  200;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class J\n+class K {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"J\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"K\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  204;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  207;\n+                4  208;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class K\n+file \"L.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"K\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"L\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I5\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  212;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  215;\n+                4  216;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class L\n+class P {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"P\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I6\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  263;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  266;\n+                4  267;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class P\n+class Q {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"Q\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  271;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  273;\n+                4  274;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class Q\n+class R {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"Q\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"R\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  278;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  281;\n+                4  282;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class R\n+class S {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"R\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"S\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I6\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  286;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  289;\n+                4  290;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class S\n+class TestMismatchHandlingHelper {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"MyValue1\"; \/\/ #8\n+    Method #7 #3; \/\/ #9\n+    Method #11 #12; \/\/ #10\n+    class #13; \/\/ #11\n+    NameAndType #14 #15; \/\/ #12\n+    Utf8 \"A\"; \/\/ #13\n+    Utf8 \"method\"; \/\/ #14\n+    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #15\n+    Method #7 #17; \/\/ #16\n+    NameAndType #18 #6; \/\/ #17\n+    Utf8 \"verify\"; \/\/ #18\n+    Method #20 #12; \/\/ #19\n+    class #21; \/\/ #20\n+    Utf8 \"B\"; \/\/ #21\n+    Method #23 #12; \/\/ #22\n+    class #24; \/\/ #23\n+    Utf8 \"C\"; \/\/ #24\n+    class #26; \/\/ #25\n+    Utf8 \"MyValue2\"; \/\/ #26\n+    Method #25 #3; \/\/ #27\n+    InterfaceMethod #29 #30; \/\/ #28\n+    class #31; \/\/ #29\n+    NameAndType #14 #32; \/\/ #30\n+    Utf8 \"I1\"; \/\/ #31\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #32\n+    Method #25 #17; \/\/ #33\n+    InterfaceMethod #35 #30; \/\/ #34\n+    class #36; \/\/ #35\n+    Utf8 \"I2\"; \/\/ #36\n+    Method #38 #30; \/\/ #37\n+    class #39; \/\/ #38\n+    Utf8 \"D\"; \/\/ #39\n+    InterfaceMethod #41 #30; \/\/ #40\n+    class #42; \/\/ #41\n+    Utf8 \"I3\"; \/\/ #42\n+    InterfaceMethod #44 #30; \/\/ #43\n+    class #45; \/\/ #44\n+    Utf8 \"I4\"; \/\/ #45\n+    Method #47 #30; \/\/ #46\n+    class #48; \/\/ #47\n+    Utf8 \"E\"; \/\/ #48\n+    class #50; \/\/ #49\n+    Utf8 \"MyValue3\"; \/\/ #50\n+    Method #49 #3; \/\/ #51\n+    InterfaceMethod #53 #54; \/\/ #52\n+    class #55; \/\/ #53\n+    NameAndType #14 #56; \/\/ #54\n+    Utf8 \"I5\"; \/\/ #55\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #56\n+    Method #49 #17; \/\/ #57\n+    Method #59 #54; \/\/ #58\n+    class #60; \/\/ #59\n+    Utf8 \"H\"; \/\/ #60\n+    Method #62 #54; \/\/ #61\n+    class #63; \/\/ #62\n+    Utf8 \"J\"; \/\/ #63\n+    Method #65 #54; \/\/ #64\n+    class #66; \/\/ #65\n+    Utf8 \"K\"; \/\/ #66\n+    Method #68 #69; \/\/ #67\n+    class #70; \/\/ #68\n+    NameAndType #14 #71; \/\/ #69\n+    Utf8 \"M\"; \/\/ #70\n+    Utf8 \"(Z)LMyValue4;\"; \/\/ #71\n+    Field #73 #74; \/\/ #72\n+    class #75; \/\/ #73\n+    NameAndType #76 #77; \/\/ #74\n+    Utf8 \"MyValue4\"; \/\/ #75\n+    Utf8 \"x\"; \/\/ #76\n+    Utf8 \"I\"; \/\/ #77\n+    class #79; \/\/ #78\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #79\n+    String #81; \/\/ #80\n+    Utf8 \"Verification failed\"; \/\/ #81\n+    Method #78 #83; \/\/ #82\n+    NameAndType #5 #84; \/\/ #83\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #84\n+    Method #86 #87; \/\/ #85\n+    class #88; \/\/ #86\n+    NameAndType #14 #89; \/\/ #87\n+    Utf8 \"N\"; \/\/ #88\n+    Utf8 \"(Z)LMyValue5;\"; \/\/ #89\n+    InterfaceMethod #91 #17; \/\/ #90\n+    class #92; \/\/ #91\n+    Utf8 \"Verifiable\"; \/\/ #92\n+    Method #94 #30; \/\/ #93\n+    class #95; \/\/ #94\n+    Utf8 \"F\"; \/\/ #95\n+    Method #97 #30; \/\/ #96\n+    class #98; \/\/ #97\n+    Utf8 \"G\"; \/\/ #98\n+    Method #100 #54; \/\/ #99\n+    class #101; \/\/ #100\n+    Utf8 \"L\"; \/\/ #101\n+    Method #103 #104; \/\/ #102\n+    class #105; \/\/ #103\n+    NameAndType #14 #106; \/\/ #104\n+    Utf8 \"O\"; \/\/ #105\n+    Utf8 \"(Z)LMyValue6;\"; \/\/ #106\n+    Method #108 #17; \/\/ #107\n+    class #109; \/\/ #108\n+    Utf8 \"MyValue6\"; \/\/ #109\n+    class #111; \/\/ #110\n+    Utf8 \"MyValue7\"; \/\/ #111\n+    Method #110 #3; \/\/ #112\n+    InterfaceMethod #114 #115; \/\/ #113\n+    class #116; \/\/ #114\n+    NameAndType #14 #117; \/\/ #115\n+    Utf8 \"I6\"; \/\/ #116\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #117\n+    Method #110 #17; \/\/ #118\n+    Method #120 #115; \/\/ #119\n+    class #121; \/\/ #120\n+    Utf8 \"P\"; \/\/ #121\n+    Method #123 #115; \/\/ #122\n+    class #124; \/\/ #123\n+    Utf8 \"Q\"; \/\/ #124\n+    Method #126 #115; \/\/ #125\n+    class #127; \/\/ #126\n+    Utf8 \"R\"; \/\/ #127\n+    class #129; \/\/ #128\n+    Utf8 \"TestMismatchHandlingHelper\"; \/\/ #129\n+    Utf8 \"Code\"; \/\/ #130\n+    Utf8 \"LineNumberTable\"; \/\/ #131\n+    Utf8 \"test1\"; \/\/ #132\n+    Utf8 \"(LA;LA;LA;LA;LA;LB;LB;LC;)V\"; \/\/ #133\n+    Utf8 \"test2\"; \/\/ #134\n+    Utf8 \"(LI1;LI1;LI1;LI1;LI1;LI1;LI2;LI2;LI2;LI2;LI2;LI2;LI3;LI3;LI3;LI3;LI3;LI3;LI4;LI4;LI4;LI4;LI4;LI4;LD;LE;)V\"; \/\/ #135\n+    Utf8 \"test3\"; \/\/ #136\n+    Utf8 \"(LI5;LI5;LI5;LJ;LJ;LJ;LJ;LJ;LH;LK;)V\"; \/\/ #137\n+    Utf8 \"test4\"; \/\/ #138\n+    Utf8 \"(LM;Z)V\"; \/\/ #139\n+    Utf8 \"StackMapTable\"; \/\/ #140\n+    Utf8 \"test5\"; \/\/ #141\n+    Utf8 \"(LN;Z)V\"; \/\/ #142\n+    Utf8 \"test6\"; \/\/ #143\n+    Utf8 \"(LF;LG;LL;)V\"; \/\/ #144\n+    Utf8 \"test7\"; \/\/ #145\n+    Utf8 \"(LO;Z)LVerifiable;\"; \/\/ #146\n+    Utf8 \"test7TriggerCalleeCompilation\"; \/\/ #147\n+    Utf8 \"(LO;)V\"; \/\/ #148\n+    Utf8 \"test8\"; \/\/ #149\n+    Utf8 \"(LI6;LI6;LI6;LQ;LQ;LQ;LQ;LQ;LP;LR;)V\"; \/\/ #150\n+    Utf8 \"SourceFile\"; \/\/ #151\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #152\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #128;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  294;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #132; \/\/ name_index\n+      #133; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          3; \/\/ max_stack\n+          8; \/\/ max_locals\n+          Bytes[]{\n+            0x2ABB000759B70009;\n+            0xB6000AB600102BBB;\n+            0x000759B70009B600;\n+            0x0AB600102CBB0007;\n+            0x59B70009B6000AB6;\n+            0x00102DBB000759B7;\n+            0x0009B6000AB60010;\n+            0x1904BB000759B700;\n+            0x09B6000AB6001019;\n+            0x05BB000759B70009;\n+            0xB60013B600101906;\n+            0xBB000759B70009B6;\n+            0x0013B600101907BB;\n+            0x000759B70009B600;\n+            0x16B60010B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  300;\n+                14  301;\n+                28  302;\n+                42  303;\n+                56  304;\n+                71  306;\n+                86  307;\n+                101  308;\n+                116  309;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #134; \/\/ name_index\n+      #135; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          3; \/\/ max_stack\n+          26; \/\/ max_locals\n+          Bytes[]{\n+            0x2ABB001959B7001B;\n+            0xB9001C0200B60021;\n+            0x2BBB001959B7001B;\n+            0xB9001C0200B60021;\n+            0x2CBB001959B7001B;\n+            0xB9001C0200B60021;\n+            0x2DBB001959B7001B;\n+            0xB9001C0200B60021;\n+            0x1904BB001959B700;\n+            0x1BB9001C0200B600;\n+            0x211905BB001959B7;\n+            0x001BB9001C0200B6;\n+            0x00211906BB001959;\n+            0xB7001BB900220200;\n+            0xB600211907BB0019;\n+            0x59B7001BB9002202;\n+            0x00B600211908BB00;\n+            0x1959B7001BB90022;\n+            0x0200B600211909BB;\n+            0x001959B7001BB900;\n+            0x220200B60021190A;\n+            0xBB001959B7001BB9;\n+            0x00220200B6002119;\n+            0x0BBB001959B7001B;\n+            0xB900220200B60021;\n+            0x1918BB001959B700;\n+            0x1BB60025B6002119;\n+            0x0CBB001959B7001B;\n+            0xB900280200B60021;\n+            0x190DBB001959B700;\n+            0x1BB900280200B600;\n+            0x21190EBB001959B7;\n+            0x001BB900280200B6;\n+            0x0021190FBB001959;\n+            0xB7001BB900280200;\n+            0xB600211910BB0019;\n+            0x59B7001BB9002802;\n+            0x00B600211911BB00;\n+            0x1959B7001BB90028;\n+            0x0200B600211912BB;\n+            0x001959B7001BB900;\n+            0x2B0200B600211913;\n+            0xBB001959B7001BB9;\n+            0x002B0200B6002119;\n+            0x14BB001959B7001B;\n+            0xB9002B0200B60021;\n+            0x1915BB001959B700;\n+            0x1BB9002B0200B600;\n+            0x211916BB001959B7;\n+            0x001BB9002B0200B6;\n+            0x00211917BB001959;\n+            0xB7001BB9002B0200;\n+            0xB600211919BB0019;\n+            0x59B7001BB6002EB6;\n+            0x0021B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  318;\n+                16  319;\n+                32  320;\n+                48  321;\n+                64  322;\n+                81  323;\n+                98  324;\n+                115  325;\n+                132  326;\n+                149  327;\n+                166  328;\n+                183  329;\n+                200  330;\n+                215  332;\n+                232  333;\n+                249  334;\n+                266  335;\n+                283  336;\n+                300  337;\n+                317  338;\n+                334  339;\n+                351  340;\n+                368  341;\n+                385  342;\n+                402  343;\n+                419  344;\n+                434  345;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #136; \/\/ name_index\n+      #137; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          3; \/\/ max_stack\n+          10; \/\/ max_locals\n+          Bytes[]{\n+            0x2ABB003159B70033;\n+            0xB900340200B60039;\n+            0x2BBB003159B70033;\n+            0xB900340200B60039;\n+            0x2CBB003159B70033;\n+            0xB900340200B60039;\n+            0x1908BB003159B700;\n+            0x33B6003AB600392D;\n+            0xBB003159B70033B6;\n+            0x003DB600391904BB;\n+            0x003159B70033B600;\n+            0x3DB600391905BB00;\n+            0x3159B70033B6003D;\n+            0xB600391906BB0031;\n+            0x59B70033B6003DB6;\n+            0x00391907BB003159;\n+            0xB70033B6003DB600;\n+            0x391909BB003159B7;\n+            0x0033B60040B60039;\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  353;\n+                16  354;\n+                32  355;\n+                48  356;\n+                63  358;\n+                77  359;\n+                92  360;\n+                107  361;\n+                122  362;\n+                137  363;\n+                152  364;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #138; \/\/ name_index\n+      #139; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          3; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x1B99000C2A1BB600;\n+            0x4357A7001A2A1BB6;\n+            0x0043B40048102A9F;\n+            0x000DBB004E591250;\n+            0xB70052BFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  369;\n+                4  370;\n+                13  372;\n+                26  373;\n+                36  376;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#140) { \/\/ StackMapTable\n+              [] { \/\/ \n+                13b; \/\/ same_frame\n+                22b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #141; \/\/ name_index\n+      #142; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          2; \/\/ max_stack\n+          3; \/\/ max_locals\n+          Bytes[]{\n+            0x2A1BB600554D1B9A;\n+            0x00092CB9005A0100;\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  381;\n+                6  382;\n+                10  383;\n+                16  385;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#140) { \/\/ StackMapTable\n+              [] { \/\/ \n+                252b, 16, []z{O,91}; \/\/ append_frame 1\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #143; \/\/ name_index\n+      #144; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          3; \/\/ max_stack\n+          3; \/\/ max_locals\n+          Bytes[]{\n+            0x2ABB001959B7001B;\n+            0xB6005D572BBB0019;\n+            0x59B7001BB6006057;\n+            0x2CBB003159B70033;\n+            0xB6006357B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  389;\n+                12  390;\n+                24  391;\n+                36  392;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #145; \/\/ name_index\n+      #146; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2A1BB60066B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  397;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #147; \/\/ name_index\n+      #148; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2A04B60066572A03;\n+            0xB60066B6006BB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  401;\n+                6  402;\n+                14  403;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #149; \/\/ name_index\n+      #150; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#130) { \/\/ Code\n+          3; \/\/ max_stack\n+          10; \/\/ max_locals\n+          Bytes[]{\n+            0x2ABB006E59B70070;\n+            0xB900710200B60076;\n+            0x2BBB006E59B70070;\n+            0xB900710200B60076;\n+            0x2CBB006E59B70070;\n+            0xB900710200B60076;\n+            0x1908BB006E59B700;\n+            0x70B60077B600762D;\n+            0xBB006E59B70070B6;\n+            0x007AB600761904BB;\n+            0x006E59B70070B600;\n+            0x7AB600761905BB00;\n+            0x6E59B70070B6007A;\n+            0xB600761906BB006E;\n+            0x59B70070B6007AB6;\n+            0x00761907BB006E59;\n+            0xB70070B6007AB600;\n+            0x761909BB006E59B7;\n+            0x0070B6007DB60076;\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#131) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  412;\n+                16  413;\n+                32  414;\n+                48  415;\n+                63  417;\n+                77  418;\n+                92  419;\n+                107  420;\n+                122  421;\n+                137  422;\n+                152  423;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#151) { \/\/ SourceFile\n+      #152;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class TestMismatchHandlingHelper\n+class A {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"A\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  112;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  114;\n+                4  115;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class A\n+class C {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"B\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"C\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  127;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  130;\n+                4  131;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class C\n+class I1 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I1\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"method\"; \/\/ #5\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #6\n+    Utf8 \"SourceFile\"; \/\/ #7\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #8\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#7) { \/\/ SourceFile\n+      #8;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I1\n+class I2 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I2\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    class #6; \/\/ #5\n+    Utf8 \"I1\"; \/\/ #6\n+    Utf8 \"method\"; \/\/ #7\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #10\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #5;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #7; \/\/ name_index\n+      #8; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I2\n+file \"D.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"D\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I2\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  152;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  155;\n+                4  156;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class D\n+file \"F.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"F\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I2\"; \/\/ #15\n+    class #17; \/\/ #16\n+    Utf8 \"I4\"; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"method\"; \/\/ #20\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #21\n+    Utf8 \"SourceFile\"; \/\/ #22\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #23\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+    #16;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  169;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #20; \/\/ name_index\n+      #21; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  172;\n+                4  173;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#22) { \/\/ SourceFile\n+      #23;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class F\n+class H {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"H\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I5\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  189;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  192;\n+                4  193;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class H\n+class I5 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I5\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"method\"; \/\/ #5\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #6\n+    Utf8 \"SourceFile\"; \/\/ #7\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #8\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#7) { \/\/ SourceFile\n+      #8;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I5\n+class M {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"M\"; \/\/ #10\n+    Utf8 \"val\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    Method #14 #15; \/\/ #13\n+    class #16; \/\/ #14\n+    NameAndType #17 #18; \/\/ #15\n+    Utf8 \"MyValue4\"; \/\/ #16\n+    Utf8 \"make\"; \/\/ #17\n+    Utf8 \"()LMyValue4;\"; \/\/ #18\n+    Utf8 \"Code\"; \/\/ #19\n+    Utf8 \"LineNumberTable\"; \/\/ #20\n+    Utf8 \"method\"; \/\/ #21\n+    Utf8 \"(Z)LMyValue4;\"; \/\/ #22\n+    Utf8 \"StackMapTable\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012A03B500;\n+            0x07B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  220;\n+                4  221;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #21; \/\/ name_index\n+      #22; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          3; \/\/ max_stack\n+          4; \/\/ max_locals\n+          Bytes[]{\n+            0x1B99000501B0B800;\n+            0x0D4D033E1D100AA2;\n+            0x00132A59B4000704;\n+            0x60B50007840301A7;\n+            0xFFED2CB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  224;\n+                4  225;\n+                6  227;\n+                10  229;\n+                18  230;\n+                28  229;\n+                34  232;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#23) { \/\/ StackMapTable\n+              [] { \/\/ \n+                6b; \/\/ same_frame\n+                253b, 5, []z{O,14; I}; \/\/ append_frame 2\n+                250b, 21; \/\/ chop_frame 1\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class M\n+file \"N.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue5\"; \/\/ #10\n+    Utf8 \"make\"; \/\/ #11\n+    Utf8 \"()LMyValue5;\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"N\"; \/\/ #14\n+    Utf8 \"Code\"; \/\/ #15\n+    Utf8 \"LineNumberTable\"; \/\/ #16\n+    Utf8 \"method\"; \/\/ #17\n+    Utf8 \"(Z)LMyValue5;\"; \/\/ #18\n+    Utf8 \"StackMapTable\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #13;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#15) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#16) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  237;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#15) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x1B99000501B0B800;\n+            0x07B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#16) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  239;\n+                4  240;\n+                6  242;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#19) { \/\/ StackMapTable\n+              [] { \/\/ \n+                6b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class N\n+file \"O.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue6\"; \/\/ #10\n+    Utf8 \"make\"; \/\/ #11\n+    Utf8 \"()LMyValue6;\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"O\"; \/\/ #14\n+    Utf8 \"Code\"; \/\/ #15\n+    Utf8 \"LineNumberTable\"; \/\/ #16\n+    Utf8 \"method\"; \/\/ #17\n+    Utf8 \"(Z)LMyValue6;\"; \/\/ #18\n+    Utf8 \"StackMapTable\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #13;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#15) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#16) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  247;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#15) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x1B99000501B0B800;\n+            0x07B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#16) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  249;\n+                4  250;\n+                6  252;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#19) { \/\/ StackMapTable\n+              [] { \/\/ \n+                6b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class O\n+class I6 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I6\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"method\"; \/\/ #5\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #6\n+    Utf8 \"Code\"; \/\/ #7\n+    Utf8 \"LineNumberTable\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #10\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x01B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#8) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  259;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I6\n+class P {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"P\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I6\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  263;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  266;\n+                4  267;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class P\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.jcod","additions":3743,"deletions":0,"binary":false,"changes":3743,"status":"added"},{"patch":"@@ -0,0 +1,218 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package runtime.valhalla.inlinetypes;\n+\n+import java.lang.ref.*;\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+\n+\n+\/*\n+ * @test Ifacmp\n+ * @requires vm.gc == null\n+ * @summary if_acmpeq\/ne bytecode test\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile --source 24 Ifacmp.java\n+ * @run main\/othervm -Xms16m -Xmx16m -XX:+UseSerialGC runtime.valhalla.inlinetypes.Ifacmp\n+ *\/\n+public class Ifacmp {\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    static value class MyValue {\n+        int value;\n+        public MyValue(int v) { this.value = v; }\n+    };\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    static value class MyValue2 {\n+        int value;\n+        public MyValue2(int v) { this.value = v; }\n+    };\n+\n+    boolean acmpModeInlineAlwaysFalse = false;\n+\n+    Object aNull = null;\n+    Object bNull = null;\n+\n+    Object aObject = new String(\"Hi\");\n+    Object bObject = new String(\"Hi\");\n+\n+    Object aValue = new MyValue(1);\n+    Object bValue = new MyValue(1);\n+    Object cValue = new MyValue(0);\n+    Object aValue2 = new MyValue2(4711);\n+\n+    Object[][] equalUseCases = {\n+        { aNull, bNull },\n+        { aObject, aObject },\n+        { aValue, bValue },\n+        { cValue, cValue },\n+        { aValue2, aValue2 }\n+    };\n+\n+    int objectEqualsUseCases = 2; \/\/ Nof object equals use cases\n+\n+    \/\/ Would just generate these fail case from the \"equal set\" above,\n+    \/\/ but to do so needs ==, so write out by hand it is...\n+    Object[][] notEqualUseCases = {\n+        { aNull, aObject },\n+        { aNull, bObject },\n+        { aNull, aValue },\n+        { aNull, bValue },\n+        { aNull, cValue },\n+        { aNull, aValue2 },\n+        { aObject, bObject },\n+        { aObject, aValue },\n+        { aObject, bValue },\n+        { aObject, cValue },\n+        { aObject, aValue2 },\n+        { bObject, cValue },\n+        { bObject, aValue2 },\n+        { aValue, cValue },\n+        { aValue, aValue2 },\n+    };\n+\n+    public Ifacmp() { this(false); }\n+    public Ifacmp(boolean acmpModeInlineAlwaysFalse) {\n+        this.acmpModeInlineAlwaysFalse = acmpModeInlineAlwaysFalse;\n+        if (acmpModeInlineAlwaysFalse) {\n+            System.out.println(\"ifacmp always false for inline types\");\n+        } else {\n+            System.out.println(\"ifacmp substitutability inline types\");\n+        }\n+    }\n+\n+    public void test() {\n+        testAllUseCases();\n+    }\n+\n+    public void testUntilGc(int nofGc) {\n+        for (int i = 0; i < nofGc; i++) {\n+            System.out.println(\"GC num \" + (i + 1));\n+            testUntilGc();\n+        }\n+    }\n+\n+    public void testUntilGc() {\n+        Reference ref = new WeakReference<Object>(new Object(), new ReferenceQueue<>());\n+        do {\n+            test();\n+        } while (ref.get() != null);\n+    }\n+\n+    public void testAllUseCases() {\n+        int useCase = 0;\n+        for (Object[] pair : equalUseCases) {\n+            useCase++;\n+            boolean equal = acmpModeInlineAlwaysFalse ? (useCase <= objectEqualsUseCases) : true;\n+            checkEqual(pair[0], pair[1], equal);\n+        }\n+        for (Object[] pair : notEqualUseCases) {\n+            checkEqual(pair[0], pair[1], false);\n+        }\n+        testLocalValues();\n+        testAlot();\n+    }\n+\n+    public void testValues() {\n+        checkEqual(aValue, bValue, true);\n+\n+        checkEqual(aValue, cValue, false);\n+        checkEqual(aValue, aValue2, false);\n+        checkEqual(aValue2, bValue, false);\n+        checkEqual(aValue2, cValue, false);\n+        testLocalValues();\n+    }\n+\n+    public void testLocalValues() {\n+        \/\/ \"aload + ifacmp\" should be same as \"aaload + ifamcp\"\n+        \/\/ but let's be paranoid...\n+        MyValue a = new MyValue(11);\n+        MyValue b = new MyValue(11);\n+        MyValue c = a;\n+        MyValue a1 = new MyValue(7);\n+        MyValue2 a2 = new MyValue2(13);\n+\n+        if (acmpModeInlineAlwaysFalse) {\n+            if (a == b) throw new RuntimeException(\"Always false fail \" + a + \" == \" + b);\n+            if (a == c) throw new RuntimeException(\"Always false fail \" + a + \" == \" + c);\n+        } else {\n+            if (a != b) throw new RuntimeException(\"Substitutability test failed\" + a + \" != \" + b);\n+            if (a != c) throw new RuntimeException(\"Substitutability test failed\");\n+        }\n+        if (a == a1) throw new RuntimeException();\n+        checkEqual(a, a2, false);\n+    }\n+\n+    public void testAlot() {\n+        MyValue a = new MyValue(4711);\n+        Reference ref = new WeakReference<Object>(new Object(), new ReferenceQueue<>());\n+        do {\n+            for (int i = 0; i < 1000; i++) {\n+                MyValue b = new MyValue(4711);\n+                if (acmpModeInlineAlwaysFalse) {\n+                    if (a == b) throw new RuntimeException(\"Always false fail \" + a + \" == \" + b);\n+                } else {\n+                    if (a != b) throw new RuntimeException(\"Substitutability test failed\" + a + \" != \" + b);\n+                }\n+            }\n+            System.gc();\n+        } while (ref.get() != null);\n+    }\n+\n+    boolean shouldEqualSelf(Object a) {\n+        return acmpModeInlineAlwaysFalse ? (!(a != null && a.getClass().isValue())) : true;\n+    }\n+\n+    void checkEqual(Object a, Object b, boolean isEqual) {\n+        testEquals(a, a, shouldEqualSelf(a));\n+        testEquals(b, b, shouldEqualSelf(b));\n+        testEquals(a, b, isEqual);\n+        testNotEquals(a, b, !isEqual);\n+    }\n+\n+    public static void testEquals(Object a, Object b, boolean expected) {\n+        boolean isEqual = (a == b);\n+        if (isEqual != expected) {\n+            throw new RuntimeException(\"Expected \" + expected + \" : \"\n+                                       + a + \" == \" + b);\n+        }\n+    }\n+\n+    public static void testNotEquals(Object a, Object b, boolean expected) {\n+        boolean isNotEqual = (a != b);\n+        if (isNotEqual != expected) {\n+            throw new RuntimeException(\"Expected \" + expected + \" : \"\n+                                       + a + \" != \" + b);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        boolean inlineTypesAlwaysFalse = (args.length > 0) && args[0].equals(\"alwaysFalse\");\n+        new Ifacmp(inlineTypesAlwaysFalse).test();\n+        new Ifacmp(inlineTypesAlwaysFalse).testUntilGc(3);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Ifacmp.java","additions":218,"deletions":0,"binary":false,"changes":218,"status":"added"},{"patch":"@@ -0,0 +1,601 @@\n+\/*\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package runtime.valhalla.inlinetypes;\n+\n+import jdk.internal.value.ValueClass;\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/*\n+ * @test InlineTypeArray\n+ * @summary Plain array test for Inline Types\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @compile --source 24 InlineTypeArray.java Point.java Long8Inline.java Person.java\n+ * @run main\/othervm -XX:FlatArrayElementMaxSize=-1 runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @run main\/othervm -XX:FlatArrayElementMaxSize=0 runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.inlinetypes.InlineTypeArray\n+ *\/\n+public class InlineTypeArray {\n+    public static void main(String[] args) {\n+        InlineTypeArray inlineTypeArray = new InlineTypeArray();\n+        inlineTypeArray.run();\n+    }\n+\n+    public void run() {\n+        testClassForName();\n+        testSimplePointArray();\n+        testLong8Array();\n+        testMixedPersonArray();\n+        testMultiDimPointArray();\n+        testComposition();\n+\n+        testSanityCheckcasts();\n+        testObjectArrayOfInlines();\n+\n+        testReflectArray();\n+        testUtilArrays();\n+\n+        testInlineArrayOom();\n+    }\n+\n+    void testClassForName() {\n+        String arrayClsName = \"[Lruntime.valhalla.inlinetypes.Point;\";\n+        try {\n+            Class<?> arrayCls = Class.forName(arrayClsName);\n+            assertTrue(arrayCls.isArray(), \"Expected an array class\");\n+\n+            arrayClsName = \"[\" + arrayClsName;\n+            Class<?> mulArrayCls = Class.forName(arrayClsName);\n+            assertTrue(mulArrayCls.isArray());\n+            assertTrue(mulArrayCls.getComponentType() == arrayCls);\n+        }\n+        catch (ClassNotFoundException cnfe) {\n+            fail(\"Class.forName(\" + arrayClsName + \") failed\", cnfe);\n+        }\n+    }\n+\n+    void testSimplePointArray() {\n+        Point[] defaultPoint = (Point[])ValueClass.newNullRestrictedArray(Point.class, 1);\n+        Point p = defaultPoint[0];\n+        assertEquals(p.x, 0, \"invalid default loaded from array\");\n+        assertEquals(p.y, 0, \"invalid default loaded from array\");\n+        boolean gotNpe = false;\n+        try {\n+            defaultPoint[0] = (Point) getNull();\n+        } catch (NullPointerException npe) {\n+            gotNpe = true;\n+        }\n+        assertTrue(gotNpe, \"Expected NullPointerException\");\n+\n+        Point[] points = createSimplePointArray();\n+        System.gc(); \/\/ check that VTs survive GC\n+        checkSimplePointArray(points);\n+        assertTrue(points instanceof Point[], \"Instance of\");\n+\n+        testSimplePointArrayCopy();\n+\n+        \/\/ Locked\/unlocked flat array type checks\n+        points = createSimplePointArray();\n+        Point[] pointsCopy = (Point[])ValueClass.newNullRestrictedArray(Point.class, points.length);\n+        synchronized (points) {\n+            assertTrue(points instanceof Point[], \"Instance of\");\n+            checkSimplePointArray(points);\n+            System.arraycopy(points, 0, pointsCopy, 0, points.length);\n+            synchronized (pointsCopy) {\n+                assertTrue(pointsCopy instanceof Point[], \"Instance of\");\n+                checkSimplePointArray(pointsCopy);\n+                System.gc();\n+            }\n+            System.gc();\n+        }\n+        assertTrue(pointsCopy instanceof Point[], \"Instance of\");\n+        checkSimplePointArray(pointsCopy);\n+    }\n+\n+    void testSimplePointArrayCopy() {\n+        Point[] points = createSimplePointArray();\n+        Point[] pointsCopy = (Point[])ValueClass.newNullRestrictedArray(Point.class, points.length);\n+        System.arraycopy(points, 0, pointsCopy, 0, points.length);\n+        checkSimplePointArray(pointsCopy);\n+\n+        \/\/ Conjoint, overlap...left\n+        System.arraycopy(points, 0, points, 1, 2);\n+        checkArrayElementsEqual(points, new Point[] { pointsCopy[0], pointsCopy[0], pointsCopy[1], pointsCopy[3] });\n+\n+        \/\/ Conjoint, overlap...right\n+        points = createSimplePointArray();\n+        System.arraycopy(points, 2, points, 1, 2);\n+        checkArrayElementsEqual(points, new Point[] { pointsCopy[0], pointsCopy[2], pointsCopy[3], pointsCopy[3] });\n+    }\n+\n+    static Point[] createSimplePointArray() {\n+        Point[] ps = (Point[])ValueClass.newNullRestrictedArray(Point.class, 4);\n+        assertEquals(ps.length, 4, \"Length\");\n+        ps.toString();\n+        ps[0] = new Point(1, 2);\n+        ps[1] = new Point(3, 4);\n+        ps[2] = new Point(5, 6);\n+        ps[3] = new Point(7, 8);\n+        boolean sawOob = false;\n+        try {\n+            ps[ps.length] = new Point(0, 0);\n+        } catch (ArrayIndexOutOfBoundsException aioobe) { sawOob = true; }\n+        assertTrue(sawOob, \"Didn't see AIOOBE\");\n+        return ps;\n+    }\n+\n+    static void checkSimplePointArray(Point[] points) {\n+        assertEquals(points[0].x, 1, \"invalid 0 point x value\");\n+        assertEquals(points[0].y, 2, \"invalid 0 point y value\");\n+        assertEquals(points[1].x, 3, \"invalid 1 point x value\");\n+        assertEquals(points[1].y, 4, \"invalid 1 point y value\");\n+        assertEquals(points[2].x, 5, \"invalid 2 point x value\");\n+        assertEquals(points[2].y, 6, \"invalid 2 point y value\");\n+        assertEquals(points[3].x, 7, \"invalid 3 point x value\");\n+        assertEquals(points[3].y, 8, \"invalid 3 point y value\");\n+    }\n+\n+    void testLong8Array() {\n+        Long8Inline[] values = (Long8Inline[])ValueClass.newNullRestrictedArray(Long8Inline.class, 3);\n+        assertEquals(values.length, 3, \"length\");\n+        values.toString();\n+        Long8Inline value = values[1];\n+        long zl = 0;\n+        Long8Inline.check(value, zl, zl, zl, zl, zl, zl, zl, zl);\n+        values[1] = new Long8Inline(1, 2, 3, 4, 5, 6, 7, 8);\n+        value = values[1];\n+        Long8Inline.check(value, 1, 2, 3, 4, 5, 6, 7, 8);\n+\n+        Long8Inline[] copy = (Long8Inline[])ValueClass.newNullRestrictedArray(Long8Inline.class, values.length);\n+        System.arraycopy(values, 0, copy, 0, values.length);\n+        value = copy[1];\n+        Long8Inline.check(value, 1, 2, 3, 4, 5, 6, 7, 8);\n+    }\n+\n+    void testMixedPersonArray() {\n+        Person[] people = (Person[])ValueClass.newNullRestrictedArray(Person.class, 3);\n+\n+        people[0] = new Person(1, \"First\", \"Last\");\n+        assertEquals(people[0].getId(), 1, \"Invalid Id person\");\n+        assertEquals(people[0].getFirstName(), \"First\", \"Invalid First Name\");\n+        assertEquals(people[0].getLastName(), \"Last\", \"Invalid Last Name\");\n+\n+        people[1] = new Person(2, \"Jane\", \"Wayne\");\n+        people[2] = new Person(3, \"Bob\", \"Dobalina\");\n+\n+        Person[] peopleCopy = (Person[])ValueClass.newNullRestrictedArray(Person.class, people.length);\n+        System.arraycopy(people, 0, peopleCopy, 0, people.length);\n+        assertEquals(peopleCopy[2].getId(), 3, \"Invalid Id\");\n+        assertEquals(peopleCopy[2].getFirstName(), \"Bob\", \"Invalid First Name\");\n+        assertEquals(peopleCopy[2].getLastName(), \"Dobalina\", \"Invalid Last Name\");\n+    }\n+\n+    void testMultiDimPointArray() {\n+        \/*\n+        Point[][][] multiPoints = new Point[2][3][4];\n+        assertEquals(multiPoints.length, 2, \"1st dim length\");\n+        assertEquals(multiPoints[0].length, 3, \"2st dim length\");\n+        assertEquals(multiPoints[0][0].length, 4, \"3rd dim length\");\n+\n+        Point defaultPoint = multiPoints[1][2][3];\n+        assertEquals(defaultPoint.x, 0, \"invalid point x value\");\n+        assertEquals(defaultPoint.y, 0, \"invalid point x value\");\n+        *\/\n+    }\n+\n+    void testReflectArray() {\n+        \/\/ Check the java.lang.reflect.Array.newInstance methods...\n+        Class<?> cls = (Class<?>) Point[].class;\n+        Point[][] array = (Point[][]) Array.newInstance(cls, 1);\n+        assertEquals(array.length, 1, \"Incorrect length\");\n+        assertTrue(array[0] == null, \"Expected NULL\");\n+\n+        Point[][][] array3 = (Point[][][]) Array.newInstance(cls, 1, 2);\n+        assertEquals(array3.length, 1, \"Incorrect length\");\n+        assertEquals(array3[0].length, 2, \"Incorrect length\");\n+        assertTrue(array3[0][0] == null, \"Expected NULL\");\n+\n+        \/\/ Now create ObjArrays of InlineArray...\n+        Point[][] barray = (Point[][]) Array.newInstance(Point.class, 1, 2);\n+        assertEquals(barray.length, 1, \"Incorrect length\");\n+        assertEquals(barray[0].length, 2, \"Incorrect length\");\n+        barray[0][1] = new Point(1, 2);\n+        Point pb = barray[0][1];\n+        int x = pb.getX();\n+        assertEquals(x, 1, \"Bad Point Value\");\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    static value class MyInt implements Comparable<MyInt> {\n+        int value;\n+\n+        private MyInt() { this(0); }\n+        private MyInt(int v) { value = v; }\n+        public int getValue() { return value; }\n+        public String toString() { return \"MyInt: \" + getValue(); }\n+        public int compareTo(MyInt that) { return Integer.compare(this.getValue(), that.getValue()); }\n+        public boolean equals(Object o) {\n+            if (o instanceof MyInt) {\n+                return this.getValue() == ((MyInt) o).getValue();\n+            }\n+            return false;\n+        }\n+\n+        public static MyInt create(int v) {\n+            return new MyInt(v);\n+        }\n+\n+        \/\/ Null-able fields here are a temp hack to avoid ClassCircularityError\n+        public static final MyInt MIN = MyInt.create(Integer.MIN_VALUE);\n+        public static final MyInt ZERO = MyInt.create(0);\n+        public static final MyInt MAX = MyInt.create(Integer.MAX_VALUE);\n+    }\n+\n+    static MyInt staticMyInt;\n+    static MyInt[] staticMyIntArray;\n+    static MyInt[][] staticMyIntArrayArray;\n+\n+    static {\n+        staticMyInt = MyInt.create(-1);\n+        staticMyIntArray = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 1);\n+        staticMyIntArray[0] = staticMyInt;\n+        staticMyIntArrayArray = new MyInt[][] { staticMyIntArray, staticMyIntArray };\n+    }\n+\n+    static interface SomeSecondaryType {\n+        default String hi() { return \"Hi\"; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    static value class MyOtherInt implements SomeSecondaryType {\n+        final int value;\n+        private MyOtherInt() { value = 0; }\n+    }\n+\n+    void testSanityCheckcasts() {\n+        MyInt[] myInts = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 1);\n+        assertTrue(myInts instanceof Object[]);\n+        assertTrue(myInts instanceof Comparable[]);\n+        assertTrue(myInts instanceof MyInt[]);\n+\n+        Class<?> cls = MyInt.class;\n+        assertTrue(cls.isValue());\n+        Object arrObj = Array.newInstance(cls, 1);\n+        assertTrue(arrObj instanceof Object[], \"Not Object array\");\n+        assertTrue(arrObj instanceof Comparable[], \"Not Comparable array\");\n+        assertTrue(arrObj instanceof MyInt[], \"Not MyInt array\");\n+\n+        Object[] arr = (Object[]) arrObj;\n+        assertTrue(arr instanceof Comparable[], \"Not Comparable array\");\n+        assertTrue(arr instanceof MyInt[], \"Not MyInt array\");\n+        Comparable[] comparables = (Comparable[])arr;\n+        MyInt[] myIntArr = (MyInt[]) arr;\n+\n+        \/\/ multi-dim, check secondary array types are setup...\n+        MyOtherInt[][] matrix = new MyOtherInt[1][1];\n+        assertTrue(matrix[0] instanceof MyOtherInt[]);\n+        assertTrue(matrix[0] instanceof SomeSecondaryType[]);\n+        assertTrue(matrix[0] instanceof MyOtherInt[]);\n+\n+        \/\/ Box types vs Inline...\n+        MyInt[] myValueRefs = new MyInt[1];\n+        assertTrue(myValueRefs instanceof MyInt[]);\n+        assertTrue(myValueRefs instanceof Object[]);\n+        assertTrue(myValueRefs instanceof Comparable[]);\n+\n+        MyInt[][] myMdValueRefs = new MyInt[1][1];\n+        assertTrue(myMdValueRefs[0] instanceof MyInt[]);\n+        assertTrue(myMdValueRefs[0] instanceof Object[]);\n+        assertTrue(myMdValueRefs[0] instanceof Comparable[]);\n+\n+        \/\/ Did we break checkcast...\n+        MyInt[]     va1 = (MyInt[])null;\n+        MyInt[]     va2 = null;\n+        MyInt[][]   va3 = (MyInt[][])null;\n+        MyInt[][][] va4 = (MyInt[][][])null;\n+    }\n+\n+\n+    void testUtilArrays() {\n+        \/\/ Sanity check j.u.Arrays\n+\n+        \/\/ cast to q-type temp effect of avoiding circularity error (decl static MyInt.ref)\n+        MyInt[] myInts = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 2);\n+        myInts[0] = (MyInt) MyInt.MAX;\n+        myInts[1] = (MyInt) MyInt.MIN;\n+\n+        \/\/ Sanity sort another copy\n+        MyInt[] copyMyInts = (MyInt[]) Arrays.copyOf(myInts, myInts.length + 1);\n+        MyInt[] expected = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 3);\n+        expected[0] = myInts[0];\n+        expected[1] = myInts[1];\n+        expected[2] = (MyInt) MyInt.ZERO;\n+        checkArrayElementsEqual(copyMyInts, expected);\n+\n+        Arrays.sort(copyMyInts);\n+        expected = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 3);\n+        expected[0] = (MyInt) MyInt.MIN;\n+        expected[1] = (MyInt) MyInt.ZERO;\n+        expected[2] = (MyInt) MyInt.MAX;\n+        checkArrayElementsEqual(copyMyInts, expected);\n+\n+        List myIntList = Arrays.asList(copyMyInts);\n+\n+        MyInt[] dest = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, copyMyInts.length);\n+        checkArrayElementsEqual(copyMyInts, myIntList.toArray(dest));\n+        \/\/ This next line needs testMixedLayoutArrays to work\n+        checkArrayElementsEqual(copyMyInts, myIntList.toArray());\n+\n+        \/\/ Sanity check j.u.ArrayList\n+        ArrayList<MyInt> aList = new ArrayList<MyInt>(Arrays.asList(copyMyInts));\n+        assertTrue(aList.indexOf(MyInt.MIN) == 0, \"Bad Index\");\n+        assertTrue(aList.indexOf(MyInt.ZERO) == 1, \"Bad Index\");\n+        assertTrue(aList.indexOf(MyInt.MAX) == 2, \"Bad Index\");\n+\n+        aList.remove(2);\n+        aList.add(MyInt.create(5));\n+    }\n+\n+\n+    void testObjectArrayOfInlines() {\n+        testSanityObjectArrays();\n+        testMixedLayoutArrays();\n+    }\n+\n+    void testSanityObjectArrays() {\n+        Object[] objects = new Object[2];\n+        assertTrue(objects[0] == null && objects[1] == null, \"Not null ?\");\n+\n+        objects[0] = MyInt.create(1);\n+        objects[1] = Integer.valueOf(2);\n+        assertTrue(objects[0].equals(MyInt.create(1)), \"Bad Value\");\n+        assertTrue(objects[1].equals(Integer.valueOf(2)), \"Bad Object\");\n+\n+        Comparable[] copyComparables = new Comparable[objects.length];\n+        System.arraycopy(objects, 0, copyComparables, 0, objects.length);\n+        checkArrayElementsEqual(objects, copyComparables);\n+\n+        objects[0] = null;\n+        objects[1] = null;\n+        assertTrue(objects[0] == null && objects[1] == null, \"Not null ?\");\n+\n+        Comparable[] comparables = new Comparable[2];\n+        assertTrue(comparables[0] == null && comparables[1] == null, \"Not null ?\");\n+        comparables[0] = MyInt.create(3);\n+        comparables[1] = Integer.valueOf(4);\n+        assertTrue(comparables[0].equals(MyInt.create(3)), \"Bad Value\");\n+        assertTrue(comparables[1].equals(Integer.valueOf(4)), \"Bad Object\");\n+\n+        Object[] copyObjects = new Object[2];\n+        System.arraycopy(comparables, 0, copyObjects, 0, comparables.length);\n+        checkArrayElementsEqual(comparables, copyObjects);\n+\n+        comparables[0] = null;\n+        comparables[1] = null;\n+        assertTrue(comparables[0] == null && comparables[1] == null, \"Not null ?\");\n+\n+        MyInt[] myIntRefArray = new MyInt[1];\n+        assertTrue(myIntRefArray[0] == null, \"Got: \" + myIntRefArray[0]);\n+        myIntRefArray[0] = null;\n+\n+        MyInt[] srcNulls = new MyInt[2];\n+        MyInt[] dstNulls = new MyInt[2];\n+        System.arraycopy(srcNulls, 0, dstNulls, 0, 2);\n+        checkArrayElementsEqual(srcNulls, dstNulls);\n+        srcNulls[1] = MyInt.create(1);\n+        System.arraycopy(srcNulls, 0, dstNulls, 0, 2);\n+        checkArrayElementsEqual(srcNulls, dstNulls);\n+\n+\n+        \/\/ Locked\/unlocked flat array type checks\n+        synchronized (srcNulls) {\n+            System.arraycopy(srcNulls, 0, dstNulls, 0, 2);\n+            checkArrayElementsEqual(srcNulls, dstNulls);\n+            System.gc();\n+        }\n+        System.gc();\n+        checkArrayElementsEqual(srcNulls, dstNulls);\n+    }\n+\n+    void testMixedLayoutArrays() {\n+        Object[] objArray = new Object[3];\n+        Comparable[] compArray = new Comparable[3];\n+        MyInt[] valArray = new MyInt[] { (MyInt) MyInt.MIN, (MyInt) MyInt.ZERO, (MyInt) MyInt.MAX };\n+\n+        arrayCopy(valArray, 0, objArray, 0, 3);\n+        checkArrayElementsEqual(valArray, objArray);\n+        arrayCopy(valArray, 0, objArray, 0, 3);\n+\n+        objArray = new Object[3];\n+        System.arraycopy(valArray, 0, objArray, 0, 3);\n+        checkArrayElementsEqual(valArray, objArray);\n+\n+        System.arraycopy(valArray, 0, compArray, 0, 3);\n+        checkArrayElementsEqual(valArray, compArray);\n+\n+        valArray = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 3);\n+        valArray[0] = (MyInt) MyInt.ZERO;\n+        valArray[1] = (MyInt) MyInt.ZERO;\n+        valArray[2] = (MyInt) MyInt.ZERO;\n+        System.arraycopy(compArray, 0, valArray, 0, 3);\n+        checkArrayElementsEqual(valArray, compArray);\n+\n+        valArray = (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, 3);\n+        valArray[0] = (MyInt) MyInt.ZERO;\n+        valArray[1] = (MyInt) MyInt.ZERO;\n+        valArray[2] = (MyInt) MyInt.ZERO;\n+        System.arraycopy(objArray, 0, valArray, 0, 3);\n+        checkArrayElementsEqual(valArray, objArray);\n+\n+        \/\/ Sanity check dst == src\n+        System.arraycopy(valArray, 0, valArray, 0, 3);\n+        checkArrayElementsEqual(valArray, objArray);\n+\n+        objArray[0] = \"Not an inline object\";\n+        try {\n+            System.arraycopy(objArray, 0, valArray, 0, 3);\n+            throw new RuntimeException(\"Expected ArrayStoreException\");\n+        } catch (ArrayStoreException ase) {}\n+\n+        MyInt[] myIntRefArray = new MyInt[3];\n+        System.arraycopy(valArray, 0, myIntRefArray, 0, 3);\n+        checkArrayElementsEqual(valArray, myIntRefArray);\n+\n+        myIntRefArray[0] = null;\n+        try {\n+            System.arraycopy(myIntRefArray, 0, valArray, 0, 3);\n+            throw new RuntimeException(\"Expected NullPointerException\");\n+        } catch (NullPointerException npe) {}\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    static value class MyPoint {\n+        @NullRestricted\n+        MyInt x;\n+        @NullRestricted\n+        MyInt y;\n+\n+        private MyPoint() { this(0, 0); }\n+        private MyPoint(int x, int y) {\n+            this.x = new MyInt(x);\n+            this.y = new MyInt(y);\n+        }\n+        public boolean equals(Object that) {\n+            if (that instanceof MyPoint) {\n+                MyPoint thatPoint = (MyPoint) that;\n+                return x.equals(thatPoint.x) && java.util.Objects.equals(y, thatPoint.y);\n+            }\n+            return false;\n+        }\n+        static MyPoint create(int x) {\n+            return new MyPoint(x, x);\n+        }\n+        static MyPoint create(int x, int y) {\n+            return new MyPoint(x, y);\n+        }\n+        @NullRestricted\n+        static final MyPoint ORIGIN = create(0);\n+    }\n+\n+    void testComposition() {\n+        \/\/ Test array operations with compostion of inline types, check element payload is correct...\n+        MyPoint a = MyPoint.create(1, 2);\n+        MyPoint b = MyPoint.create(7, 21);\n+        MyPoint c = MyPoint.create(Integer.MAX_VALUE, Integer.MIN_VALUE);\n+\n+        MyPoint[] pts = (MyPoint[])ValueClass.newNullRestrictedArray(MyPoint.class, 3);\n+        if (!pts[0].equals(MyPoint.ORIGIN)) {\n+            throw new RuntimeException(\"Equals failed: \" + pts[0] + \" vs \" + MyPoint.ORIGIN);\n+        }\n+        pts = (MyPoint[])ValueClass.newNullRestrictedArray(MyPoint.class, 3);\n+        pts[0] = a;\n+        pts[1] = b;\n+        pts[2] = c;\n+        checkArrayElementsEqual(pts, new Object[] { a, b, c});\n+        Object[] oarr = new Object[3];\n+\n+        arrayCopy(pts, 0, oarr, 0, 3);\n+        checkArrayElementsEqual(pts, oarr);\n+\n+        oarr = new Object[3];\n+        System.arraycopy(pts, 0, oarr, 0, 3);\n+        checkArrayElementsEqual(pts, oarr);\n+\n+        System.arraycopy(oarr, 0, pts, 0, 3);\n+        checkArrayElementsEqual(pts, oarr);\n+\n+        oarr = new Object[3];\n+        try {\n+            System.arraycopy(oarr, 0, pts, 0, 3);\n+            throw new RuntimeException(\"Expected NPE\");\n+        }\n+        catch (NullPointerException npe) {}\n+\n+        oarr = new Object[3];\n+        oarr[0] = new Object();\n+        try {\n+            System.arraycopy(oarr, 0, pts, 0, 3);\n+            throw new RuntimeException(\"Expected ASE\");\n+        }\n+        catch (ArrayStoreException ase) {}\n+    }\n+\n+    void checkArrayElementsEqual(MyInt[] arr1, Object[] arr2) {\n+        assertTrue(arr1.length == arr2.length, \"Bad length\");\n+        for (int i = 0; i < arr1.length; i++) {\n+            assertTrue(java.util.Objects.equals(arr1[i], arr2[i]), \"Element \" + i + \" not equal\");\n+        }\n+    }\n+\n+    void checkArrayElementsEqual(MyPoint[] arr1, Object[] arr2) {\n+        assertTrue(arr1.length == arr2.length, \"Bad length\");\n+        for (int i = 0; i < arr1.length; i++) {\n+            assertTrue(java.util.Objects.equals(arr1[i], arr2[i]), \"Element \" + i + \" not equal\");\n+        }\n+    }\n+\n+    void checkArrayElementsEqual(Object[] arr1, Object[] arr2) {\n+        assertTrue(arr1.length == arr2.length, \"Bad length\");\n+        for (int i = 0; i < arr1.length; i++) {\n+            assertTrue(java.util.Objects.equals(arr1[i], arr2[i]), \"Element \" + i + \" not equal\");\n+        }\n+    }\n+\n+    void arrayCopy(MyInt[] src, int srcPos, Object[] dst, int dstPos, int length) {\n+        for (int i = 0; i < length ; i++) {\n+            dst[dstPos++] = src[srcPos++];\n+        }\n+    }\n+    void arrayCopy(MyPoint[] src, int srcPos, Object[] dst, int dstPos, int length) {\n+        for (int i = 0; i < length ; i++) {\n+            dst[dstPos++] = src[srcPos++];\n+        }\n+    }\n+\n+    Object getNull() { return null; }\n+\n+\n+    void testInlineArrayOom() {\n+        int size = Integer.MAX_VALUE;\n+        try {\n+            MyPoint[] pts = new MyPoint[size];\n+            throw new RuntimeException(\"Excepted OOM\");\n+        } catch (OutOfMemoryError oom) {}\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":601,"deletions":0,"binary":false,"changes":601,"status":"added"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ The test class is based in the Java source code below, but the constant\n+\/\/ pool entry #33 (used by the Preload attribute) has been modified to\n+\/\/ contain the name of a non-existing class.\n+\/\/\n+\/\/ public class ValuePreloadClient1 {\n+\/\/     PreloadValue0 value;\n+\/\/\n+\/\/     public static void main(String[] args) {\n+\/\/         System.out.print(\"Success\");\n+\/\/     }\n+\/\/ }\n+\n+ class ValuePreloadClient1 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"java\/lang\/System\"; \/\/ #10\n+    Utf8 \"out\"; \/\/ #11\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12\n+    String #14; \/\/ #13\n+    Utf8 \"Success\"; \/\/ #14\n+    Method #16 #17; \/\/ #15\n+    class #18; \/\/ #16\n+    NameAndType #19 #20; \/\/ #17\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #18\n+    Utf8 \"print\"; \/\/ #19\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20\n+    class #22; \/\/ #21\n+    Utf8 \"ValuePreloadClient1\"; \/\/ #22\n+    Utf8 \"value\"; \/\/ #23\n+    Utf8 \"LPreloadValue0;\"; \/\/ #24\n+    Utf8 \"Code\"; \/\/ #25\n+    Utf8 \"LineNumberTable\"; \/\/ #26\n+    Utf8 \"main\"; \/\/ #27\n+    Utf8 \"([Ljava\/lang\/String;)V\"; \/\/ #28\n+    Utf8 \"SourceFile\"; \/\/ #29\n+    Utf8 \"ValuePreloadClient1.java\"; \/\/ #30\n+    Utf8 \"LoadableDescriptors\"; \/\/ #31\n+    Utf8 \"LPreloadValue1;\"; \/\/ #32\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #21;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #23; \/\/ name_index\n+      #24; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#25) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#26) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #27; \/\/ name_index\n+      #28; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#25) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xB20007120DB6000F;\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#26) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  5;\n+                8  6;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#29) { \/\/ SourceFile\n+      #30;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#31) { \/\/ LoadableDescriptors\n+      0x00010020;\n+    } \/\/ end LoadableDescriptors\n+  } \/\/ Attributes\n+} \/\/ end class ValuePreloadClient1\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadClient1.jcod","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"},{"patch":"@@ -0,0 +1,1258 @@\n+\/*\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ Simple class generated from the following source:\n+\/\/ public class SimpleClass { }\n+\/\/ The jcod version has been altered to create a class without any of ACC_IDENTITY, ACC_ABSTRACT or ACC_FINAL flags,\n+\/\/ which is illegal according to JVMS 4.1.\n+\n+class InvalidClassFlags {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"InvalidClassFlags\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"InvalidClassFlags.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0001; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class InvalidClassFlags\n+\n+\/\/ Valid class with access flags ACC_PUBLIC, ACC_ABSTRACT and no ACC_IDENTITY\n+class AbstractValue {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractValue\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"AbstractValue.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0401; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractValue\n+\n+\/\/ Valid class with access flags ACC_PUBLIC, ACC_FINAL and no ACC_IDENTITY\n+class FinalValue {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"FinalValue\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"FinalValue.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class FinalValue\n+\n+\/\/ Abstract class with ACC_IDENTITY flag added to its access flags\n+class AbstractClass {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractClass\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"AbstractClass.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0421; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractClass\n+\n+\/\/ Value class extending the abstract (with identity) class define above\n+class ValueClass {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"AbstractClass\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"ValueClass\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"ValueClass.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ValueClass\n+\n+\/\/ Concrete identity class from old class file without ACC_IDENTITY extending the abstract (with identity) class define above\n+class IdentityClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"AbstractClass\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"IdentityClass\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"IdentityClass.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ValueClass\n+\n+\/\/ Concrete value class extending a final value class\n+class ValueClass2 {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"FinalValue\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"ValueClass2\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"ValueClass2.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ValueClass2\n+\n+\/\/ Abstract value class extending an abstract (with identity) class\n+class AbstractValueClass2 {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"AbstractClass\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractValueClass2\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"AbstractValueClass2.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0401; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractValueClass2\n+\n+\/\/ Abstract identity class from older class file without ACC_IDENTITY, extending an abstract (with identity) class\n+class AbstractIdentityClass2 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"AbstractClass\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractIdentityClass2\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"AbstractIdentityClass2.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0401; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractValueClass2\n+\n+\/\/ Abstract value class extending a final value class\n+class AbstractValueClass3 {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"FinalValue\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractValueClass3\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"AbstractValueClass3.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0401; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractValueClass3\n+\n+\/\/ A concrete class without ACC_IDENTITY but with an older class file version, declaring a field without ACC_STATIC nor ACC_STRICT\n+\/\/\n+class NotStaticNotStrictInOldClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Field #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"NotStaticNotStrictInOldClass\"; \/\/ #4\n+    Utf8 \"i\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Field #2 #14; \/\/ #13\n+    NameAndType #15 #6; \/\/ #14\n+    Utf8 \"si\"; \/\/ #15\n+    Utf8 \"ConstantValue\"; \/\/ #16\n+    int 0x00000000; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"<clinit>\"; \/\/ #20\n+    Utf8 \"SourceFile\"; \/\/ #21\n+    Utf8 \"NotStaticNotStrictInOldClass.java\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #2;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0008; \/\/ access\n+      #15; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ ConstantValue\n+          #17;\n+        } \/\/ end ConstantValue\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2A03B500012AB700;\n+            0x07B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+                5  1;\n+                9  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #20; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0x03B3000DB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#21) { \/\/ SourceFile\n+      #22;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class NotStaticNotStrictInOldClass\n+\n+\/\/ Valid concrete value class with a synchronized static method\n+class StaticSynchMethod {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"StaticSynchMethod\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"m\"; \/\/ #11\n+    Utf8 \"()I\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"StaticSynchMethod.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0029; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0x102AAC;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class StaticSynchMethod\n+\n+\/\/ Invalid concrete value class with synchronized non-static method\n+class SynchMethod {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"SynchMethod\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"m\"; \/\/ #11\n+    Utf8 \"()I\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"SynchMethod.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0021; \/\/ access               \/\/ Modified to make it synchronized\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x102AAC;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class SynchMethod\n+\n+\/\/ Valid abstract value class with synchronized static method\n+class StaticSynchMethodInAbstractValue {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"StaticSynchMethodInAbstractValue\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"m\"; \/\/ #11\n+    Utf8 \"()I\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"StaticSynchMethodInAbstractValue.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0401; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0029; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0x102AAC;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class StaticSynchMethodInAbstractValue\n+\n+\/\/ Invalid abstract value class with a synchronized non-static method\n+class SynchMethodInAbstractValue {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"SynchMethodInAbstractValue\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"m\"; \/\/ #11\n+    Utf8 \"()I\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"SynchMethodInAbstractValue.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0401; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0021; \/\/ access                \/\/ modified to make it synchronized\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x102AAC;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class SynchMethodInAbstractValue\n+\n+\/\/ Class to test invalid entries in LoadableDescriptors Attributes\n+\/\/ Class generated from this source:\n+\/\/ public class PrimitiveInLoadableDescriptors {\n+\/\/ int i;\n+\/\/ void foo(Integer i) { }\n+\/\/ }\n+\n+class PrimitiveInLoadableDescriptors {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"PrimitiveInLoadableDescriptors\"; \/\/ #8\n+    Utf8 \"i\"; \/\/ #9\n+    Utf8 \"I\"; \/\/ #10\n+    Utf8 \"Code\"; \/\/ #11\n+    Utf8 \"LineNumberTable\"; \/\/ #12\n+    Utf8 \"foo\"; \/\/ #13\n+    Utf8 \"(Ljava\/lang\/Integer;)V\"; \/\/ #14\n+    Utf8 \"SourceFile\"; \/\/ #15\n+    Utf8 \"PrimitiveInLoadableDescriptors.java\"; \/\/ #16\n+    Utf8 \"LoadableDescriptors\"; \/\/ #17\n+    Utf8 \"I\"; \/\/ #18                            \/\/ Modified from \"Ljava\/lang\/Integer;\" to \"I\"\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #9; \/\/ name_index\n+      #10; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #13; \/\/ name_index\n+      #14; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          0; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#15) { \/\/ SourceFile\n+      #16;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#17) { \/\/ LoadableDescriptors\n+      0x00010012;\n+    } \/\/ end LoadableDescriptors\n+  } \/\/ Attributes\n+} \/\/ end class PrimitiveInLoadableDescriptors\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/cfpValueClassValidation.jcod","additions":1258,"deletions":0,"binary":false,"changes":1258,"status":"added"},{"patch":"@@ -0,0 +1,637 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+ \/\/ This file contains multiple illegal inline type classes that should cause\n+\/\/ ClassFormatError exceptions when attempted to be loaded.\n+\/\/\n+\/\/ Many of these test were originally generated from this Java file and then\n+\/\/ field modifiers are changed to cause a ClassFormatError exceptions.\n+\/\/\n+\/\/ public value class Value {\n+\/\/    static int si = 0;\n+\/\/    int i = 0;\n+\/\/}\n+\n+\n+\/\/ A field has both ACC_FINAL and ACC_VOLATILE set\n+\/\/\n+class FinalAndVolatile {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Field #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"FinalAndVolatile\"; \/\/ #4\n+    Utf8 \"i\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Field #2 #14; \/\/ #13\n+    NameAndType #15 #6; \/\/ #14\n+    Utf8 \"si\"; \/\/ #15\n+    Utf8 \"ConstantValue\"; \/\/ #16\n+    int 0x00000000; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"<clinit>\"; \/\/ #20\n+    Utf8 \"SourceFile\"; \/\/ #21\n+    Utf8 \"FinalAndVolatile.java\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #2;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0008; \/\/ access\n+      #15; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ field\n+      0x0850; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ ConstantValue\n+          #17;\n+        } \/\/ end ConstantValue\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2A03B500012AB700;\n+            0x07B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+                5  1;\n+                9  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #20; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0x03B3000DB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#21) { \/\/ SourceFile\n+      #22;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class FinalAndVolatile\n+\n+\n+\/\/ A field has both ACC_STRICT and ACC_STATIC set\n+\/\/\n+class StrictAndStatic {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Field #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"StrictAndStatic\"; \/\/ #4\n+    Utf8 \"i\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Field #2 #14; \/\/ #13\n+    NameAndType #15 #6; \/\/ #14\n+    Utf8 \"si\"; \/\/ #15\n+    Utf8 \"ConstantValue\"; \/\/ #16\n+    int 0x00000000; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"<clinit>\"; \/\/ #20\n+    Utf8 \"SourceFile\"; \/\/ #21\n+    Utf8 \"StrictAndStatic.java\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #2;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0808; \/\/ access\n+      #15; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ field\n+      0x0810; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ ConstantValue\n+          #17;\n+        } \/\/ end ConstantValue\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2A03B500012AB700;\n+            0x07B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+                5  1;\n+                9  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #20; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0x03B3000DB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#21) { \/\/ SourceFile\n+      #22;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class StrictAndStatic\n+\n+\n+\/\/ A field has ACC_STRICT set without ACC_FINAL being set\n+\/\/\n+class StrictNotFinal {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Field #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"StrictNotFinal\"; \/\/ #4\n+    Utf8 \"i\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Field #2 #14; \/\/ #13\n+    NameAndType #15 #6; \/\/ #14\n+    Utf8 \"si\"; \/\/ #15\n+    Utf8 \"ConstantValue\"; \/\/ #16\n+    int 0x00000000; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"<clinit>\"; \/\/ #20\n+    Utf8 \"SourceFile\"; \/\/ #21\n+    Utf8 \"StrictNotFinal.java\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #2;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0008; \/\/ access\n+      #15; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ field\n+      0x0800; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ ConstantValue\n+          #17;\n+        } \/\/ end ConstantValue\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2A03B500012AB700;\n+            0x07B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+                5  1;\n+                9  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #20; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0x03B3000DB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#21) { \/\/ SourceFile\n+      #22;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class StrictNotFinal\n+\n+\/\/ A concrete value class declaring a field without ACC_STATIC nor ACC_STRICT\n+\/\/\n+class NotStaticNotStrict {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Field #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"NotStaticNotStrict\"; \/\/ #4\n+    Utf8 \"i\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Field #2 #14; \/\/ #13\n+    NameAndType #15 #6; \/\/ #14\n+    Utf8 \"si\"; \/\/ #15\n+    Utf8 \"ConstantValue\"; \/\/ #16\n+    int 0x00000000; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"<clinit>\"; \/\/ #20\n+    Utf8 \"SourceFile\"; \/\/ #21\n+    Utf8 \"NotStaticNotStrict.java\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0011; \/\/ access\n+  #2;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0008; \/\/ access\n+      #15; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ ConstantValue\n+          #17;\n+        } \/\/ end ConstantValue\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2A03B500012AB700;\n+            0x07B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+                5  1;\n+                9  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #20; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0x03B3000DB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#21) { \/\/ SourceFile\n+      #22;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class NotStaticNotStrict\n+\n+\/\/ An abstract value class declaring a field without ACC_STATIC nor ACC_STRICT\n+\/\/\n+class NotStaticNotStrictInAbstract {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  68; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Field #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"NotStaticNotStrictInAbstract\"; \/\/ #4\n+    Utf8 \"i\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Field #2 #14; \/\/ #13\n+    NameAndType #15 #6; \/\/ #14\n+    Utf8 \"si\"; \/\/ #15\n+    Utf8 \"ConstantValue\"; \/\/ #16\n+    int 0x00000000; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"<clinit>\"; \/\/ #20\n+    Utf8 \"SourceFile\"; \/\/ #21\n+    Utf8 \"NotStaticNotStrictInAbstract.java\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0401; \/\/ access\n+  #2;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0008; \/\/ access\n+      #15; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ ConstantValue\n+          #17;\n+        } \/\/ end ConstantValue\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2A03B500012AB700;\n+            0x07B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+                5  1;\n+                9  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #20; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0x03B3000DB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#21) { \/\/ SourceFile\n+      #22;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class NotStaticNotStrictInAbstract\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/fieldModifiersTest.jcod","additions":637,"deletions":0,"binary":false,"changes":637,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ Defines the classes used by StrictFields.java to check verification\n+\/\/ of strict fields.\n+\n+\/\/ StrictIgnore is an earlier classfile version for which strict must be ignored\n+\/\/ so we can write to it multiple times in the constructor.\n+public class StrictIgnore version 66:0 {\n+  final strict Field x:I;\n+\n+  public Method \"<init>\":\"()V\" stack 2 {\n+      aload_0;\n+      iconst_1;\n+      putfield x:I;\n+      aload_0;\n+      invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n+      aload_0;\n+      iconst_1;\n+      putfield x:I;\n+      return;\n+   }\n+}\n+\n+\/\/ StrictBase is a well formed value class with a strict field, that can\n+\/\/ be used for subclassing.\n+public abstract class StrictBase version 68:65535 {\n+  protected final strict Field x:I;\n+\n+  public Method \"<init>\":\"()V\" stack 2 {\n+      aload_0;\n+      iconst_1;\n+      putfield x:I;\n+      aload_0;\n+      invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n+      return;\n+   }\n+}\n+\n+\/\/ PostInitStrict is a bad value class that writes to a strict field after the\n+\/\/ super constructor call.\n+public final class PostInitStrict version 68:65535 {\n+  final strict Field y:I;\n+\n+  public Method \"<init>\":\"()V\" stack 2 {\n+      aload_0;\n+      invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n+      aload_0;\n+      iconst_1;\n+      putfield y:I;\n+      return;\n+   }\n+}\n+\n+\/\/ BadStrictSubPreInit is a bad value class that tries to write to an inherited\n+\/\/ strict field while acting on UninitializedThis.\n+public final class BadStrictSubPreInit extends StrictBase version 68:65535 {\n+\n+  public Method \"<init>\":\"()V\" stack 2 {\n+      aload_0;\n+      iconst_1;\n+      putfield x:I;\n+      aload_0;\n+      invokespecial Method StrictBase.\"<init>\":\"()V\";\n+      return;\n+   }\n+}\n+\n+\/\/ BadStrictSubPostInit is a bad value class that tries to write to an inherited\n+\/\/ strict field in \"regular\" code.\n+public final class BadStrictSubPostInit extends StrictBase version 68:65535 {\n+\n+  public Method \"<init>\":\"()V\" stack 2 {\n+      aload_0;\n+      invokespecial Method StrictBase.\"<init>\":\"()V\";\n+      aload_0;\n+      iconst_1;\n+      putfield x:I;\n+      return;\n+   }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/strictFields.jasm","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,1608 @@\n+\/*\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ Many of the jcod classes in this file were derived from this Java inline type:\n+\/\/\n+\/\/ final inline class Value {\n+\/\/     static final Value VT = makeValue(0x01234567);\n+\/\/     final int int_v;\n+\/\/     Value() {\n+\/\/         int_v = 1;\n+\/\/     }\n+\/\/     static Value makeValue(int x) {\n+\/\/         Value v = Value.default;\n+\/\/         v = __WithField(v.int_v, x);\n+\/\/         return v;\n+\/\/     }\n+\/\/ }\n+\/\/\n+\/\/ The changes for each test were made to the bytecodes for method makeValue(int x).\n+\/\/ Its bytecodes are:\n+\/\/\n+\/\/  static Value makeValue(int); descriptor: (I)LValue; flags: (0x0008) ACC_STATIC\n+\/\/    Code:\n+\/\/      stack=2, locals=2, args_size=1\n+\/\/         0: aconst_init   #3                  \/\/ class Value\n+\/\/         3: astore_1\n+\/\/         4: aload_1\n+\/\/         5: iload_0\n+\/\/         6: withfield     #2                  \/\/ Field int_v:I\n+\/\/         9: astore_1\n+\/\/        10: aload_1\n+\/\/        11: areturn\n+\n+\n+\/\/ The constant pool index of the aconst_init opcode (0xCB) in the Code\n+\/\/ attribute was changed to 0x93.  Since this index is outside the range of\n+\/\/ the constant pool, a VerifyError exception should get thrown.\n+\/\/\n+class defValBadCP {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [27] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #7 #21; \/\/ #1     at 0x0A\n+    Field #3 #22; \/\/ #2     at 0x0F\n+    class #23; \/\/ #3     at 0x14\n+    int 0x01234567; \/\/ #4     at 0x17\n+    Method #3 #24; \/\/ #5     at 0x1C\n+    Field #3 #25; \/\/ #6     at 0x21\n+    class #26; \/\/ #7     at 0x26\n+    Utf8 \"VT\"; \/\/ #8     at 0x29\n+    Utf8 \"LdefValBadCP;\"; \/\/ #9     at 0x2E\n+    Utf8 \"int_v\"; \/\/ #10     at 0x38\n+    Utf8 \"I\"; \/\/ #11     at 0x40\n+    Utf8 \"<vnew>\"; \/\/ #12     at 0x44\n+    Utf8 \"()V\"; \/\/ #13     at 0x4D\n+    Utf8 \"Code\"; \/\/ #14     at 0x53\n+    Utf8 \"LineNumberTable\"; \/\/ #15     at 0x5A\n+    Utf8 \"makeValue\"; \/\/ #16     at 0x6C\n+    Utf8 \"(I)LdefValBadCP;\"; \/\/ #17     at 0x78\n+    Utf8 \"<clinit>\"; \/\/ #18     at 0x85\n+    Utf8 \"SourceFile\"; \/\/ #19     at 0x90\n+    Utf8 \"defValBadCP.java\"; \/\/ #20     at 0x9D\n+    NameAndType #12 #13; \/\/ #21     at 0xAA\n+    NameAndType #10 #11; \/\/ #22     at 0xAF\n+    Utf8 \"defValBadCP\"; \/\/ #23     at 0xB4\n+    NameAndType #16 #17; \/\/ #24     at 0xBC\n+    NameAndType #8 #9; \/\/ #25     at 0xC1\n+    Utf8 \"java\/lang\/Object\"; \/\/ #26     at 0xC6\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #3;\/\/ this_cpx\n+  #7;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [2] { \/\/ fields\n+    { \/\/ Member at 0xE3\n+      0x0018; \/\/ access\n+      #8; \/\/ name_cpx\n+      #9; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0xEB\n+      0x0010; \/\/ access\n+      #10; \/\/ name_cpx\n+      #11; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [1] { \/\/ methods\n+    { \/\/ Member at 0x012D\n+      0x0008; \/\/ access\n+      #16; \/\/ name_cpx\n+      #17; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#14, 44) { \/\/ Code at 0x0135\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[12]{\n+            0xCB00934C2B1ACC00; \/\/ Changed CP index from 3 to 0x93 for opcode 0xCB (aconst_init)\n+            0x024C2BB0;         \/\/ so that the index is outside of the range of the constant pool.\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#15, 14) { \/\/ LineNumberTable at 0x0153\n+              [3] { \/\/ LineNumberTable\n+                0  8; \/\/  at 0x015F\n+                4  9; \/\/  at 0x0163\n+                10  10; \/\/  at 0x0167\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#19, 2) { \/\/ SourceFile at 0x0198\n+      #20;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class defValBadCP\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ The class's major version was changed to 54.  Since this class has a\n+\/\/ aconst_init opcode (0xCB), this should cause a ClassFormatError\n+\/\/ exception to get thrown.\n+\/\/\n+class defValBadMajorVersion {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  54; \/\/ version\n+  [27] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #7 #21; \/\/ #1     at 0x0A\n+    Field #3 #22; \/\/ #2     at 0x0F\n+    class #23; \/\/ #3     at 0x14\n+    int 0x01234567; \/\/ #4     at 0x17\n+    Method #3 #24; \/\/ #5     at 0x1C\n+    Field #3 #25; \/\/ #6     at 0x21\n+    class #26; \/\/ #7     at 0x26\n+    Utf8 \"VT\"; \/\/ #8     at 0x29\n+    Utf8 \"LdefValBadMajorVersion;\"; \/\/ #9     at 0x2E\n+    Utf8 \"int_v\"; \/\/ #10     at 0x38\n+    Utf8 \"I\"; \/\/ #11     at 0x40\n+    Utf8 \"<init>\"; \/\/ #12     at 0x44\n+    Utf8 \"()V\"; \/\/ #13     at 0x4D\n+    Utf8 \"Code\"; \/\/ #14     at 0x53\n+    Utf8 \"LineNumberTable\"; \/\/ #15     at 0x5A\n+    Utf8 \"makeValue\"; \/\/ #16     at 0x6C\n+    Utf8 \"(I)LdefValBadMajorVersion;\"; \/\/ #17     at 0x78\n+    Utf8 \"<clinit>\"; \/\/ #18     at 0x85\n+    Utf8 \"SourceFile\"; \/\/ #19     at 0x90\n+    Utf8 \"defValBadMajorVersion.java\"; \/\/ #20     at 0x9D\n+    NameAndType #12 #13; \/\/ #21     at 0xAA\n+    NameAndType #10 #11; \/\/ #22     at 0xAF\n+    Utf8 \"defValBadMajorVersion\"; \/\/ #23     at 0xB4\n+    NameAndType #16 #17; \/\/ #24     at 0xBC\n+    NameAndType #8 #9; \/\/ #25     at 0xC1\n+    Utf8 \"java\/lang\/Object\"; \/\/ #26     at 0xC6\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #3;\/\/ this_cpx\n+  #7;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [2] { \/\/ fields\n+    { \/\/ Member at 0xE3\n+      0x0018; \/\/ access\n+      #8; \/\/ name_cpx\n+      #9; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0xEB\n+      0x0010; \/\/ access\n+      #10; \/\/ name_cpx\n+      #11; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [1] { \/\/ methods\n+    { \/\/ Member at 0x012D\n+      0x0008; \/\/ access\n+      #16; \/\/ name_cpx\n+      #17; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#14, 44) { \/\/ Code at 0x0135\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[12]{\n+            0xCB00034C2B1ACC00;\n+            0x024C2BB0;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#15, 14) { \/\/ LineNumberTable at 0x0153\n+              [3] { \/\/ LineNumberTable\n+                0  8; \/\/  at 0x015F\n+                4  9; \/\/  at 0x0163\n+                10  10; \/\/  at 0x0167\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#19, 2) { \/\/ SourceFile at 0x0198\n+      #20;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class defValBadMajorVersion\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ The constant pool index of a aconst_init opcode (0xCB) in the Code\n+\/\/ attribute was changed to 2.  Since this index now points to a Field\n+\/\/ entry instead of a Class entry, a VerifyError exception should get thrown.\n+\/\/\n+class defValWrongCPType {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [27] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #7 #21; \/\/ #1     at 0x0A\n+    Field #3 #22; \/\/ #2     at 0x0F\n+    class #23; \/\/ #3     at 0x14\n+    int 0x01234567; \/\/ #4     at 0x17\n+    Method #3 #24; \/\/ #5     at 0x1C\n+    Field #3 #25; \/\/ #6     at 0x21\n+    class #26; \/\/ #7     at 0x26\n+    Utf8 \"VT\"; \/\/ #8     at 0x29\n+    Utf8 \"LdefValWrongCPType;\"; \/\/ #9     at 0x2E\n+    Utf8 \"int_v\"; \/\/ #10     at 0x38\n+    Utf8 \"I\"; \/\/ #11     at 0x40\n+    Utf8 \"<vnew>\"; \/\/ #12     at 0x44\n+    Utf8 \"()V\"; \/\/ #13     at 0x4D\n+    Utf8 \"Code\"; \/\/ #14     at 0x53\n+    Utf8 \"LineNumberTable\"; \/\/ #15     at 0x5A\n+    Utf8 \"makeValue\"; \/\/ #16     at 0x6C\n+    Utf8 \"(I)LdefValWrongCPType;\"; \/\/ #17     at 0x78\n+    Utf8 \"<clinit>\"; \/\/ #18     at 0x85\n+    Utf8 \"SourceFile\"; \/\/ #19     at 0x90\n+    Utf8 \"defValWrongCPType.java\"; \/\/ #20     at 0x9D\n+    NameAndType #12 #13; \/\/ #21     at 0xAA\n+    NameAndType #10 #11; \/\/ #22     at 0xAF\n+    Utf8 \"defValWrongCPType\"; \/\/ #23     at 0xB4\n+    NameAndType #16 #17; \/\/ #24     at 0xBC\n+    NameAndType #8 #9; \/\/ #25     at 0xC1\n+    Utf8 \"java\/lang\/Object\"; \/\/ #26     at 0xC6\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #3;\/\/ this_cpx\n+  #7;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [2] { \/\/ fields\n+    { \/\/ Member at 0xE3\n+      0x0018; \/\/ access\n+      #8; \/\/ name_cpx\n+      #9; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0xEB\n+      0x0010; \/\/ access\n+      #10; \/\/ name_cpx\n+      #11; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [1] { \/\/ methods\n+    { \/\/ Member at 0x012D\n+      0x0008; \/\/ access\n+      #16; \/\/ name_cpx\n+      #17; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#14, 44) { \/\/ Code at 0x0135\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[12]{\n+            0xCB00024C2B1ACC00; \/\/ Changed CP index from 3 to 2 for opcode 0xCB (aconst_init)\n+            0x024C2BB0;         \/\/ so that the cp index no longer points to a cp Class entry.\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#15, 14) { \/\/ LineNumberTable at 0x0153\n+              [3] { \/\/ LineNumberTable\n+                0  8; \/\/  at 0x015F\n+                4  9; \/\/  at 0x0163\n+                10  10; \/\/  at 0x0167\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#19, 2) { \/\/ SourceFile at 0x0198\n+      #20;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class defValWrongCPType\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ The constant pool index of the withfield opcode (0xCC) in the Code\n+\/\/ attribute was changed to 0x82.  Since this index is outside the range of\n+\/\/ the constant pool, a VerifyError exception should get thrown.\n+\/\/\n+class wthFldBadCP {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [20] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #4 #17; \/\/ #1     at 0x0A\n+    Field #3 #18; \/\/ #2     at 0x0F\n+    class #12; \/\/ #3     at 0x14\n+    class #19; \/\/ #4     at 0x17\n+    Utf8 \"int_v\"; \/\/ #5     at 0x1A\n+    Utf8 \"I\"; \/\/ #6     at 0x22\n+    Utf8 \"<vnew>\"; \/\/ #7     at 0x26\n+    Utf8 \"()V\"; \/\/ #8     at 0x2F\n+    Utf8 \"Code\"; \/\/ #9     at 0x35\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x3C\n+    Utf8 \"makewthFldBadCP\"; \/\/ #11     at 0x4E\n+    Utf8 \"wthFldBadCP\"; \/\/ #12     at 0x60\n+    Utf8 \"ValueTypes\"; \/\/ #13     at 0x6E\n+    Utf8 \"(I)LwthFldBadCP;\"; \/\/ #14     at 0x7B\n+    Utf8 \"SourceFile\"; \/\/ #15     at 0x8E\n+    Utf8 \"wthFldBadCP.java\"; \/\/ #16     at 0x9B\n+    NameAndType #7 #8; \/\/ #17     at 0xAE\n+    NameAndType #5 #6; \/\/ #18     at 0xB3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #19     at 0xB8\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #3;\/\/ this_cpx\n+  #4;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ fields\n+    { \/\/ Member at 0xD5\n+      0x0010; \/\/ access\n+      #5; \/\/ name_cpx\n+      #6; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [1] { \/\/ methods\n+    { \/\/ Member at 0x0117\n+      0x0008; \/\/ access\n+      #11; \/\/ name_cpx\n+      #14; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#9, 44) { \/\/ Code at 0x011F\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[12]{\n+            0xCB00034C2B1ACC00; \/\/ Changed CP index from 2 to 0x82 for opcode 0xCC (withfield)\n+            0x824C2BB0;         \/\/ so that the index is outside of the range of the constant pool.\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 14) { \/\/ LineNumberTable at 0x013D\n+              [3] { \/\/ LineNumberTable\n+                0  8; \/\/  at 0x0149\n+                4  9; \/\/  at 0x014D\n+                10  10; \/\/  at 0x0151\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [2] { \/\/ Attributes\n+    Attr(#15, 2) { \/\/ SourceFile at 0x0153\n+      #16;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#13, 4) { \/\/ ValueTypes at 0x015B\n+      0x00010003;\n+    } \/\/ end ValueTypes\n+  } \/\/ Attributes\n+} \/\/ end class wthFldBadCP\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ The opcode at bytecode position 5 in the Code array was changed to aload_1\n+\/\/ (0x2B).  This should cause a VerifyError because now the first operand on the\n+\/\/ stack for the withfield opcode (0xCC at bytecode position 6) does not match\n+\/\/ the type (int) of the field being assigned to.\n+\/\/\n+class wthFldBadFldVal {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [20] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #4 #17; \/\/ #1     at 0x0A\n+    Field #3 #18; \/\/ #2     at 0x0F\n+    class #12; \/\/ #3     at 0x14\n+    class #19; \/\/ #4     at 0x17\n+    Utf8 \"int_v\"; \/\/ #5     at 0x1A\n+    Utf8 \"I\"; \/\/ #6     at 0x22\n+    Utf8 \"<vnew>\"; \/\/ #7     at 0x26\n+    Utf8 \"()V\"; \/\/ #8     at 0x2F\n+    Utf8 \"Code\"; \/\/ #9     at 0x35\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x3C\n+    Utf8 \"makewthFldBadFldVal\"; \/\/ #11     at 0x4E\n+    Utf8 \"wthFldBadFldVal\"; \/\/ #12     at 0x60\n+    Utf8 \"ValueTypes\"; \/\/ #13     at 0x6E\n+    Utf8 \"(I)LwthFldBadFldVal;\"; \/\/ #14     at 0x7B\n+    Utf8 \"SourceFile\"; \/\/ #15     at 0x8E\n+    Utf8 \"wthFldBadFldVal.java\"; \/\/ #16     at 0x9B\n+    NameAndType #7 #8; \/\/ #17     at 0xAE\n+    NameAndType #5 #6; \/\/ #18     at 0xB3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #19     at 0xB8\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #3;\/\/ this_cpx\n+  #4;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ fields\n+    { \/\/ Member at 0xD5\n+      0x0010; \/\/ access\n+      #5; \/\/ name_cpx\n+      #6; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [1] { \/\/ methods\n+    { \/\/ Member at 0x0117\n+      0x0008; \/\/ access\n+      #11; \/\/ name_cpx\n+      #14; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#9, 44) { \/\/ Code at 0x011F\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[12]{\n+            0xCB00034C2B2BCC00; \/\/ Changed opcode at bytecode 5 from iload_0 to aload_1\n+            0x024C2BB0;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 14) { \/\/ LineNumberTable at 0x013D\n+              [3] { \/\/ LineNumberTable\n+                0  8; \/\/  at 0x0149\n+                4  9; \/\/  at 0x014D\n+                10  10; \/\/  at 0x0151\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [2] { \/\/ Attributes\n+    Attr(#15, 2) { \/\/ SourceFile at 0x0153\n+      #16;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#13, 4) { \/\/ ValueTypes at 0x015B\n+      0x00010003;\n+    } \/\/ end ValueTypes\n+  } \/\/ Attributes\n+} \/\/ end class wthFldBadFldVal\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ The opcode at bytecode position 4 in the Code array was changed to iload_1\n+\/\/ (0x1A).  This should cause a VerifyError because the second operand on the stack\n+\/\/ for the withfield opcode (0xCC at bytecode position 6) must be a reference.\n+\/\/\n+class wthFldBadFldRef {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [20] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #4 #17; \/\/ #1     at 0x0A\n+    Field #3 #18; \/\/ #2     at 0x0F\n+    class #12; \/\/ #3     at 0x14\n+    class #19; \/\/ #4     at 0x17\n+    Utf8 \"int_v\"; \/\/ #5     at 0x1A\n+    Utf8 \"I\"; \/\/ #6     at 0x22\n+    Utf8 \"<vnew>\"; \/\/ #7     at 0x26\n+    Utf8 \"()V\"; \/\/ #8     at 0x2F\n+    Utf8 \"Code\"; \/\/ #9     at 0x35\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x3C\n+    Utf8 \"makewthFldBadFldRef\"; \/\/ #11     at 0x4E\n+    Utf8 \"wthFldBadFldRef\"; \/\/ #12     at 0x60\n+    Utf8 \"ValueTypes\"; \/\/ #13     at 0x6E\n+    Utf8 \"(I)LwthFldBadFldRef;\"; \/\/ #14     at 0x7B\n+    Utf8 \"SourceFile\"; \/\/ #15     at 0x8E\n+    Utf8 \"wthFldBadFldRef.java\"; \/\/ #16     at 0x9B\n+    NameAndType #7 #8; \/\/ #17     at 0xAE\n+    NameAndType #5 #6; \/\/ #18     at 0xB3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #19     at 0xB8\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #3;\/\/ this_cpx\n+  #4;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ fields\n+    { \/\/ Member at 0xD5\n+      0x0010; \/\/ access\n+      #5; \/\/ name_cpx\n+      #6; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [1] { \/\/ methods\n+    { \/\/ Member at 0x0117\n+      0x0008; \/\/ access\n+      #11; \/\/ name_cpx\n+      #14; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#9, 44) { \/\/ Code at 0x011F\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[12]{\n+            0xCB00034C1A1ACC00; \/\/ Changed opcode at bytecode 4 from aload_1 to iload_0\n+            0x024C2BB0;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 14) { \/\/ LineNumberTable at 0x013D\n+              [3] { \/\/ LineNumberTable\n+                0  8; \/\/  at 0x0149\n+                4  9; \/\/  at 0x014D\n+                10  10; \/\/  at 0x0151\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [2] { \/\/ Attributes\n+    Attr(#15, 2) { \/\/ SourceFile at 0x0153\n+      #16;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#13, 4) { \/\/ ValueTypes at 0x015B\n+      0x00010003;\n+    } \/\/ end ValueTypes\n+  } \/\/ Attributes\n+} \/\/ end class wthFldBadFldRef\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ The class's major version was changed to 54 and the first opcode in the Code\n+\/\/ attribute was changed to a withfield (0xCC)..  Since withfield opcodes are not\n+\/\/ allowed in classes with major version 54, this should cause a ClassFormatError\n+\/\/ exception to get thrown.\n+\/\/\n+class wthFldBadMajorVersion {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  54; \/\/ version\n+  [27] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #7 #21; \/\/ #1     at 0x0A\n+    Field #3 #22; \/\/ #2     at 0x0F\n+    class #23; \/\/ #3     at 0x14\n+    int 0x01234567; \/\/ #4     at 0x17\n+    Method #3 #24; \/\/ #5     at 0x1C\n+    Field #3 #25; \/\/ #6     at 0x21\n+    class #26; \/\/ #7     at 0x26\n+    Utf8 \"VT\"; \/\/ #8     at 0x29\n+    Utf8 \"LwthFldBadMajorVersion;\"; \/\/ #9     at 0x2E\n+    Utf8 \"int_v\"; \/\/ #10     at 0x38\n+    Utf8 \"I\"; \/\/ #11     at 0x40\n+    Utf8 \"<init>\"; \/\/ #12     at 0x44\n+    Utf8 \"()V\"; \/\/ #13     at 0x4D\n+    Utf8 \"Code\"; \/\/ #14     at 0x53\n+    Utf8 \"LineNumberTable\"; \/\/ #15     at 0x5A\n+    Utf8 \"makeValue\"; \/\/ #16     at 0x6C\n+    Utf8 \"(I)LwthFldBadMajorVersion;\"; \/\/ #17     at 0x78\n+    Utf8 \"<clinit>\"; \/\/ #18     at 0x85\n+    Utf8 \"SourceFile\"; \/\/ #19     at 0x90\n+    Utf8 \"wthFldBadMajorVersion.java\"; \/\/ #20     at 0x9D\n+    NameAndType #12 #13; \/\/ #21     at 0xAA\n+    NameAndType #10 #11; \/\/ #22     at 0xAF\n+    Utf8 \"wthFldBadMajorVersion\"; \/\/ #23     at 0xB4\n+    NameAndType #16 #17; \/\/ #24     at 0xBC\n+    NameAndType #8 #9; \/\/ #25     at 0xC1\n+    Utf8 \"java\/lang\/Object\"; \/\/ #26     at 0xC6\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #3;\/\/ this_cpx\n+  #7;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [2] { \/\/ fields\n+    { \/\/ Member at 0xE3\n+      0x0018; \/\/ access\n+      #8; \/\/ name_cpx\n+      #9; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0xEB\n+      0x0010; \/\/ access\n+      #10; \/\/ name_cpx\n+      #11; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [1] { \/\/ methods\n+    { \/\/ Member at 0x012D\n+      0x0008; \/\/ access\n+      #16; \/\/ name_cpx\n+      #17; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#14, 44) { \/\/ Code at 0x0135\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[12]{\n+            0xCC00034C2B1ACC00; \/\/ Changed the first opcode to 0xCC (withfield) in order to\n+            0x024C2BB0;         \/\/ test withfield opcode with an illegal major version.\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#15, 14) { \/\/ LineNumberTable at 0x0153\n+              [3] { \/\/ LineNumberTable\n+                0  8; \/\/  at 0x015F\n+                4  9; \/\/  at 0x0163\n+                10  10; \/\/  at 0x0167\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#19, 2) { \/\/ SourceFile at 0x0198\n+      #20;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class wthFldBadMajorVersion\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ The constant pool index of a withfield opcode (0xCC) in the Code\n+\/\/ attribute was changed to 1.  Since this index now points to a Method\n+\/\/ entry instead of a Field entry, a VerifyError exception should get thrown.\n+\/\/\n+class wthFldWrongCPType {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [20] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #4 #17; \/\/ #1     at 0x0A\n+    Field #3 #18; \/\/ #2     at 0x0F\n+    class #12; \/\/ #3     at 0x14\n+    class #19; \/\/ #4     at 0x17\n+    Utf8 \"int_v\"; \/\/ #5     at 0x1A\n+    Utf8 \"I\"; \/\/ #6     at 0x22\n+    Utf8 \"<vnew>\"; \/\/ #7     at 0x26\n+    Utf8 \"()V\"; \/\/ #8     at 0x2F\n+    Utf8 \"Code\"; \/\/ #9     at 0x35\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x3C\n+    Utf8 \"makewthFldWrongCPType\"; \/\/ #11     at 0x4E\n+    Utf8 \"wthFldWrongCPType\"; \/\/ #12     at 0x60\n+    Utf8 \"ValueTypes\"; \/\/ #13     at 0x6E\n+    Utf8 \"(I)LwthFldWrongCPType;\"; \/\/ #14     at 0x7B\n+    Utf8 \"SourceFile\"; \/\/ #15     at 0x8E\n+    Utf8 \"wthFldWrongCPType.java\"; \/\/ #16     at 0x9B\n+    NameAndType #7 #8; \/\/ #17     at 0xAE\n+    NameAndType #5 #6; \/\/ #18     at 0xB3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #19     at 0xB8\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #3;\/\/ this_cpx\n+  #4;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ fields\n+    { \/\/ Member at 0xD5\n+      0x0010; \/\/ access\n+      #5; \/\/ name_cpx\n+      #6; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [1] { \/\/ methods\n+    { \/\/ Member at 0x0117\n+      0x0008; \/\/ access\n+      #11; \/\/ name_cpx\n+      #14; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#9, 44) { \/\/ Code at 0x011F\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[12]{\n+            0xCB00034C2B1ACC00; \/\/ Changed CP index from 2 to 1 for opcode 0xCC (withfield)\n+            0x014C2BB0;         \/\/ so that the cp index no longer points to a cp Field entry.\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 14) { \/\/ LineNumberTable at 0x013D\n+              [3] { \/\/ LineNumberTable\n+                0  8; \/\/  at 0x0149\n+                4  9; \/\/  at 0x014D\n+                10  10; \/\/  at 0x0151\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [2] { \/\/ Attributes\n+    Attr(#15, 2) { \/\/ SourceFile at 0x0153\n+      #16;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#13, 4) { \/\/ ValueTypes at 0x015B\n+      0x00010003;\n+    } \/\/ end ValueTypes\n+  } \/\/ Attributes\n+} \/\/ end class wthFldWrongCPType\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ The cp entry for the aconst_init opcode was changed to a reference that\n+\/\/ is not an inline type.\n+\/\/ This should cause a VerifyError because the cp entry for opcode aconst_init\n+\/\/ must be an inline type.\n+\/\/\n+class defValueObj {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [46] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #23; \/\/ #1     at 0x0A\n+    Field #1 #24; \/\/ #2     at 0x0D\n+    InvokeDynamic 0s #27; \/\/ #3     at 0x12\n+    InvokeDynamic 0s #28; \/\/ #4     at 0x17\n+    InvokeDynamic 0s #29; \/\/ #5     at 0x1C\n+    class #30; \/\/ #6     at 0x21\n+    Utf8 \"int_v\"; \/\/ #7     at 0x24\n+    Utf8 \"I\"; \/\/ #8     at 0x2C\n+    Utf8 \"makedefValueObj\"; \/\/ #9     at 0x30\n+    Utf8 \"(I)QdefValueObj;\"; \/\/ #10     at 0x41\n+    Utf8 \"Code\"; \/\/ #11     at 0x53\n+    Utf8 \"LineNumberTable\"; \/\/ #12     at 0x5A\n+    Utf8 \"hashCode\"; \/\/ #13     at 0x6C\n+    Utf8 \"()I\"; \/\/ #14     at 0x77\n+    Utf8 \"equals\"; \/\/ #15     at 0x7D\n+    Utf8 \"(Ljava\/lang\/Object;)Z\"; \/\/ #16     at 0x86\n+    Utf8 \"toString\"; \/\/ #17     at 0x9E\n+    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #18     at 0xA9\n+    Utf8 \"<vnew>\"; \/\/ #19     at 0xC0\n+    Utf8 \"()QdefValueObj;\"; \/\/ #20     at 0xC9\n+    Utf8 \"SourceFile\"; \/\/ #21     at 0xDA\n+    Utf8 \"defValueObj.java\"; \/\/ #22     at 0xE7\n+    Utf8 \"defValueObj\"; \/\/ #23     at 0xF9\n+    NameAndType #7 #8; \/\/ #24     at 0x0106\n+    Utf8 \"BootstrapMethods\"; \/\/ #25     at 0x010B\n+    MethodHandle 6b #31; \/\/ #26     at 0x011E\n+    NameAndType #13 #32; \/\/ #27     at 0x0122\n+    NameAndType #15 #33; \/\/ #28     at 0x0127\n+    NameAndType #17 #34; \/\/ #29     at 0x012C\n+    Utf8 \"java\/lang\/Object\"; \/\/ #30     at 0x0131\n+    Method #35 #36; \/\/ #31     at 0x0144\n+    Utf8 \"(QdefValueObj;)I\"; \/\/ #32     at 0x0149\n+    Utf8 \"(QdefValueObj;Ljava\/lang\/Object;)Z\"; \/\/ #33     at 0x015B\n+    Utf8 \"(QdefValueObj;)Ljava\/lang\/String;\"; \/\/ #34     at 0x017F\n+    class #37; \/\/ #35     at 0x01A2\n+    NameAndType #38 #42; \/\/ #36     at 0x01A5\n+    Utf8 \"java\/lang\/invoke\/ValueBootstrapMethods\"; \/\/ #37     at 0x01AA\n+    Utf8 \"makeBootstrapMethod\"; \/\/ #38     at 0x01D3\n+    class #44; \/\/ #39     at 0x01E9\n+    Utf8 \"Lookup\"; \/\/ #40     at 0x01EC\n+    Utf8 \"InnerClasses\"; \/\/ #41     at 0x01F5\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/CallSite;\"; \/\/ #42     at 0x0204\n+    class #45; \/\/ #43     at 0x027A\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #44     at 0x027D\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #45     at 0x02A5\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #1;\/\/ this_cpx\n+  #6;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ fields\n+    { \/\/ Member at 0x02D0\n+      0x0010; \/\/ access\n+      #7; \/\/ name_cpx\n+      #8; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [5] { \/\/ methods\n+    { \/\/ Member at 0x02DA\n+      0x0008; \/\/ access\n+      #9; \/\/ name_cpx\n+      #10; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#11, 45) { \/\/ Code at 0x02E2\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[13]{\n+            0xCB00044C1A2B5FCC; \/\/ Changed aconst_init's cp index at byte 3 from 3 to 4.\n+            0x00024C2BB0;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#12, 14) { \/\/ LineNumberTable at 0x0301\n+              [3] { \/\/ LineNumberTable\n+                0  8; \/\/  at 0x030D\n+                4  9; \/\/  at 0x0311\n+                11  10; \/\/  at 0x0315\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0315\n+      0x0011; \/\/ access\n+      #13; \/\/ name_cpx\n+      #14; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#11, 31) { \/\/ Code at 0x031D\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA00030000AC;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#12, 6) { \/\/ LineNumberTable at 0x0336\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x0342\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0342\n+      0x0011; \/\/ access\n+      #15; \/\/ name_cpx\n+      #16; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#11, 32) { \/\/ Code at 0x034A\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[8]{\n+            0x2A2BBA00040000AC;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#12, 6) { \/\/ LineNumberTable at 0x0364\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x0370\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0370\n+      0x0011; \/\/ access\n+      #17; \/\/ name_cpx\n+      #18; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#11, 31) { \/\/ Code at 0x0378\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA00050000B0;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#12, 6) { \/\/ LineNumberTable at 0x0391\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x039D\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x039D\n+      0x0008; \/\/ access\n+      #19; \/\/ name_cpx\n+      #20; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#11, 45) { \/\/ Code at 0x03A5\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[13]{\n+            0xCB00014B042A5FCC;\n+            0x00024B2AB0;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#12, 14) { \/\/ LineNumberTable at 0x03C4\n+              [3] { \/\/ LineNumberTable\n+                0  4; \/\/  at 0x03D0\n+                4  5; \/\/  at 0x03D4\n+                11  6; \/\/  at 0x03D8\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [3] { \/\/ Attributes\n+    Attr(#21, 2) { \/\/ SourceFile at 0x03DA\n+      #22;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#41, 10) { \/\/ InnerClasses at 0x03E2\n+      [1] { \/\/ InnerClasses\n+        #39 #43 #40 25; \/\/  at 0x03F2\n+      }\n+    } \/\/ end InnerClasses\n+    ;\n+    Attr(#25, 6) { \/\/ BootstrapMethods at 0x03F2\n+      [1] { \/\/ bootstrap_methods\n+        {  \/\/  bootstrap_method\n+          #26; \/\/ bootstrap_method_ref\n+          [0] { \/\/ bootstrap_arguments\n+          }  \/\/  bootstrap_arguments\n+        }  \/\/  bootstrap_method\n+      }\n+    } \/\/ end BootstrapMethods\n+  } \/\/ Attributes\n+} \/\/ end class defValueObj\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ This class has a withfield opcode with a non-Q type operand.\n+class withfieldL {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [28] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1     at 0x0A\n+    Utf8 \"withfieldL\"; \/\/ #2     at 0x0D\n+    class #2; \/\/ #3     at 0x17\n+    Field #1 #5; \/\/ #4     at 0x1A\n+    NameAndType #6 #7; \/\/ #5     at 0x1F\n+    Utf8 \"x\"; \/\/ #6     at 0x24\n+    Utf8 \"I\"; \/\/ #7     at 0x28\n+    Field #1 #9; \/\/ #8     at 0x2C\n+    NameAndType #10 #7; \/\/ #9     at 0x31\n+    Utf8 \"y\"; \/\/ #10     at 0x36\n+    class #12; \/\/ #11     at 0x3A\n+    Utf8 \"QwithfieldL;\"; \/\/ #12     at 0x3D\n+    class #14; \/\/ #13     at 0x49\n+    Utf8 \"java\/lang\/Object\"; \/\/ #14     at 0x4C\n+    Utf8 \"makePoint\"; \/\/ #15     at 0x5F\n+    Utf8 \"(II)QwithfieldL;\"; \/\/ #16     at 0x6B\n+    Utf8 \"Code\"; \/\/ #17     at 0x7B\n+    Utf8 \"LineNumberTable\"; \/\/ #18     at 0x82\n+    Utf8 \"<vnew>\"; \/\/ #19     at 0x94\n+    Utf8 \"()QwithfieldL;\"; \/\/ #20     at 0x9D\n+    Utf8 \"SourceFile\"; \/\/ #21     at 0xAB\n+    Utf8 \"X.java\"; \/\/ #22     at 0xB8\n+    Utf8 \"NestHost\"; \/\/ #23     at 0xC1\n+    class #25; \/\/ #24     at 0xCC\n+    Utf8 \"X\"; \/\/ #25     at 0xCF\n+    Utf8 \"InnerClasses\"; \/\/ #26     at 0xD3\n+    Utf8 \"Point\"; \/\/ #27     at 0xE2\n+  } \/\/ Constant Pool\n+\n+  0x0850; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_FINAL ]\n+  #1;\/\/ this_cpx\n+  #13;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [2] { \/\/ Fields\n+    {  \/\/ field at 0xF4\n+      0x0010; \/\/ access\n+      #6; \/\/ name_index       : x\n+      #7; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ field at 0xFC\n+      0x0010; \/\/ access\n+      #10; \/\/ name_index       : y\n+      #7; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x0106\n+      0x0008; \/\/ access\n+      #15; \/\/ name_index       : makePoint\n+      #16; \/\/ descriptor_index : (II)QwithfieldL;\n+      [1] { \/\/ Attributes\n+        Attr(#17, 62) { \/\/ Code at 0x010E\n+          2; \/\/ max_stack\n+          3; \/\/ max_locals\n+          Bytes[26]{\n+            0xCB0001C000034D1A;\n+            0x2C5FCC00044D1B2C;\n+            0x5FCC00084D2CC000;\n+            0x0BB0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#18, 18) { \/\/ LineNumberTable at 0x013A\n+              [4] { \/\/ line_number_table\n+                0  4; \/\/  at 0x0146\n+                7  5; \/\/  at 0x014A\n+                14  6; \/\/  at 0x014E\n+                21  7; \/\/  at 0x0152\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x0152\n+      0x000A; \/\/ access\n+      #19; \/\/ name_index       : <vnew>\n+      #20; \/\/ descriptor_index : ()QwithfieldL;\n+      [1] { \/\/ Attributes\n+        Attr(#17, 55) { \/\/ Code at 0x015A\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[23]{\n+            0xCB00014B032A5FCC;\n+            0x0008594BB400082A;\n+            0x5FCC00044B2AB0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#18, 14) { \/\/ LineNumberTable at 0x0183\n+              [3] { \/\/ line_number_table\n+                0  9; \/\/  at 0x018F\n+                4  10; \/\/  at 0x0193\n+                21  11; \/\/  at 0x0197\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [3] { \/\/ Attributes\n+    Attr(#21, 2) { \/\/ SourceFile at 0x0199\n+      #22;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#23, 2) { \/\/ NestHost at 0x01A1\n+      #24; \/\/ X at 0x01A9\n+    } \/\/ end NestHost\n+    ;\n+    Attr(#26, 10) { \/\/ InnerClasses at 0x01A9\n+      [1] { \/\/ classes\n+        #1 #24 #27 280; \/\/  at 0x01B9\n+      }\n+    } \/\/ end InnerClasses\n+  } \/\/ Attributes\n+} \/\/ end class withfieldL\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+\/\/ Test that a VerifyError exception is thrown when trying to pass a null\n+\/\/ when the formal parameter is an inline type.\n+\/\/\n+\/\/ \/\/ Java program emulating the jcod contents.\n+\/\/ public inline final class NoNullVT {\n+\/\/     final int x;\n+\/\/     final int y;\n+\/\/\n+\/\/     private NoNullVT() {\n+\/\/         x = 0;\n+\/\/         y = 0;\n+\/\/     }\n+\/\/\n+\/\/     public int getX() { return x; }\n+\/\/     public int getY() { return y; }\n+\/\/\n+\/\/     public boolean isSameNoNullVT(NoNullVT that) {\n+\/\/         return this.getX() == that.getX() && this.getY() == that.getY();\n+\/\/     }\n+\/\/\n+\/\/     public boolean equals(Object o) {\n+\/\/         if(o instanceof NoNullVT) {\n+\/\/             return ((NoNullVT)o).x == x &&  ((NoNullVT)o).y == y;\n+\/\/         } else {\n+\/\/             return false;\n+\/\/         }\n+\/\/     }\n+\/\/\n+\/\/     public static NoNullVT createNoNullVT(int x, int y) {\n+\/\/         NoNullVT p = NoNullVT.default;\n+\/\/         p = __WithField(p.x, x);\n+\/\/         p = __WithField(p.y, y);\n+\/\/         return p;\n+\/\/     }\n+\/\/\n+\/\/     public static void main(String[] args) {\n+\/\/         String str = null;\n+\/\/         NoNullVT a = createNoNullVT(3, 4);\n+\/\/         NoNullVT b = createNoNullVT(2, 4);\n+\/\/         boolean res = a.isSameNoNullVT(null); \/\/ Should throw VerifyError\n+\/\/     }\n+\/\/ }\n+\n+class NoNullVT {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  68; \/\/ version\n+  [63] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #36; \/\/ #1     at 0x0A\n+    Field #1 #37; \/\/ #2     at 0x0D\n+    Field #1 #38; \/\/ #3     at 0x12\n+    Method #1 #39; \/\/ #4     at 0x17\n+    Method #1 #40; \/\/ #5     at 0x1C\n+    class #41; \/\/ #6     at 0x21\n+    Method #1 #42; \/\/ #7     at 0x24\n+    Method #1 #43; \/\/ #8     at 0x29\n+    InvokeDynamic 0s #46; \/\/ #9     at 0x2E\n+    InvokeDynamic 0s #47; \/\/ #10     at 0x33\n+    class #48; \/\/ #11     at 0x38\n+    Utf8 \"x\"; \/\/ #12     at 0x3B\n+    Utf8 \"I\"; \/\/ #13     at 0x3F\n+    Utf8 \"y\"; \/\/ #14     at 0x43\n+    Utf8 \"getX\"; \/\/ #15     at 0x47\n+    Utf8 \"()I\"; \/\/ #16     at 0x4E\n+    Utf8 \"Code\"; \/\/ #17     at 0x54\n+    Utf8 \"LineNumberTable\"; \/\/ #18     at 0x5B\n+    Utf8 \"getY\"; \/\/ #19     at 0x6D\n+    Utf8 \"isSameNoNullVT\"; \/\/ #20     at 0x74\n+    Utf8 \"(QNoNullVT;)Z\"; \/\/ #21     at 0x85\n+    Utf8 \"StackMapTable\"; \/\/ #22     at 0x95\n+    Utf8 \"equals\"; \/\/ #23     at 0xA5\n+    Utf8 \"(Ljava\/lang\/Object;)Z\"; \/\/ #24     at 0xAE\n+    Utf8 \"createNoNullVT\"; \/\/ #25     at 0xC6\n+    Utf8 \"(II)QNoNullVT;\"; \/\/ #26     at 0xD7\n+    Utf8 \"main\"; \/\/ #27     at 0xE8\n+    Utf8 \"([Ljava\/lang\/String;)V\"; \/\/ #28     at 0xEF\n+    Utf8 \"hashCode\"; \/\/ #29     at 0x0108\n+    Utf8 \"toString\"; \/\/ #30     at 0x0113\n+    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #31     at 0x011E\n+    Utf8 \"<vnew>\"; \/\/ #32     at 0x0135\n+    Utf8 \"()QNoNullVT;\"; \/\/ #33     at 0x013E\n+    Utf8 \"SourceFile\"; \/\/ #34     at 0x014D\n+    Utf8 \"NoNullVT.java\"; \/\/ #35     at 0x015A\n+    Utf8 \"NoNullVT\"; \/\/ #36     at 0x016A\n+    NameAndType #12 #13; \/\/ #37     at 0x0175\n+    NameAndType #14 #13; \/\/ #38     at 0x017A\n+    NameAndType #15 #16; \/\/ #39     at 0x017F\n+    NameAndType #19 #16; \/\/ #40     at 0x0184\n+    Utf8 \"QNoNullVT;\"; \/\/ #41     at 0x0189\n+    NameAndType #25 #26; \/\/ #42     at 0x0196\n+    NameAndType #20 #21; \/\/ #43     at 0x019B\n+    Utf8 \"BootstrapMethods\"; \/\/ #44     at 0x01A0\n+    MethodHandle 6b #49; \/\/ #45     at 0x01B3\n+    NameAndType #29 #50; \/\/ #46     at 0x01B7\n+    NameAndType #30 #51; \/\/ #47     at 0x01BC\n+    Utf8 \"java\/lang\/Object\"; \/\/ #48     at 0x01C1\n+    Method #52 #53; \/\/ #49     at 0x01D4\n+    Utf8 \"(QNoNullVT;)I\"; \/\/ #50     at 0x01D9\n+    Utf8 \"(QNoNullVT;)Ljava\/lang\/String;\"; \/\/ #51     at 0x01E9\n+    class #54; \/\/ #52     at 0x020A\n+    NameAndType #55 #59; \/\/ #53     at 0x020D\n+    Utf8 \"java\/lang\/invoke\/ValueBootstrapMethods\"; \/\/ #54     at 0x0212\n+    Utf8 \"makeBootstrapMethod\"; \/\/ #55     at 0x023B\n+    class #61; \/\/ #56     at 0x0251\n+    Utf8 \"Lookup\"; \/\/ #57     at 0x0254\n+    Utf8 \"InnerClasses\"; \/\/ #58     at 0x025D\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/CallSite;\"; \/\/ #59     at 0x026C\n+    class #62; \/\/ #60     at 0x02E2\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #61     at 0x02E5\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #62     at 0x030D\n+  } \/\/ Constant Pool\n+\n+  0x0851; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_FINAL ]\n+  #1;\/\/ this_cpx\n+  #11;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [2] { \/\/ fields\n+    { \/\/ Member at 0x0338\n+      0x0010; \/\/ access\n+      #12; \/\/ name_cpx\n+      #13; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0340\n+      0x0010; \/\/ access\n+      #14; \/\/ name_cpx\n+      #13; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [9] { \/\/ methods\n+    { \/\/ Member at 0x034A\n+      0x0001; \/\/ access\n+      #15; \/\/ name_cpx\n+      #16; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#17, 29) { \/\/ Code at 0x0352\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB40002AC;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#18, 6) { \/\/ LineNumberTable at 0x0369\n+              [1] { \/\/ LineNumberTable\n+                0  10; \/\/  at 0x0375\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0375\n+      0x0001; \/\/ access\n+      #19; \/\/ name_cpx\n+      #16; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#17, 29) { \/\/ Code at 0x037D\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB40003AC;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#18, 6) { \/\/ LineNumberTable at 0x0394\n+              [1] { \/\/ LineNumberTable\n+                0  11; \/\/  at 0x03A0\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x03A0\n+      0x0001; \/\/ access\n+      #20; \/\/ name_cpx\n+      #21; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#17, 63) { \/\/ Code at 0x03A8\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[28]{\n+            0x2AB600042BB60004;\n+            0xA000122AB600052B;\n+            0xB60005A0000704A7;\n+            0x000403AC;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [2] { \/\/ Attributes\n+            Attr(#18, 6) { \/\/ LineNumberTable at 0x03D6\n+              [1] { \/\/ LineNumberTable\n+                0  14; \/\/  at 0x03E2\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#22, 5) { \/\/ StackMapTable at 0x03E2\n+              [2] { \/\/\n+                26b; \/\/ same_frame\n+                64b, [1]z{1b}; \/\/ same_locals_1_stack_item_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x03ED\n+      0x0001; \/\/ access\n+      #23; \/\/ name_cpx\n+      #24; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#17, 87) { \/\/ Code at 0x03F5\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[43]{\n+            0x2BC100019900252B;\n+            0xC00006B400022AB4;\n+            0x0002A000152BC000;\n+            0x06B400032AB40003;\n+            0xA0000704A7000403;\n+            0xAC03AC;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [2] { \/\/ Attributes\n+            Attr(#18, 14) { \/\/ LineNumberTable at 0x0432\n+              [3] { \/\/ LineNumberTable\n+                0  18; \/\/  at 0x043E\n+                7  19; \/\/  at 0x0442\n+                41  21; \/\/  at 0x0446\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#22, 6) { \/\/ StackMapTable at 0x0446\n+              [3] { \/\/\n+                39b; \/\/ same_frame\n+                64b, [1]z{1b}; \/\/ same_locals_1_stack_item_frame\n+                0b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0452\n+      0x0009; \/\/ access\n+      #25; \/\/ name_cpx\n+      #26; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#17, 56) { \/\/ Code at 0x045A\n+          2; \/\/ max_stack\n+          3; \/\/ max_locals\n+          Bytes[20]{\n+            0xCB00014D1A2C5FCC;\n+            0x00024D1B2C5FCC00;\n+            0x034D2CB0;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#18, 18) { \/\/ LineNumberTable at 0x0480\n+              [4] { \/\/ LineNumberTable\n+                0  26; \/\/  at 0x048C\n+                4  27; \/\/  at 0x0490\n+                11  28; \/\/  at 0x0494\n+                18  29; \/\/  at 0x0498\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0498\n+      0x0009; \/\/ access\n+      #27; \/\/ name_cpx\n+      #28; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#17, 62) { \/\/ Code at 0x04A0\n+          2; \/\/ max_stack\n+          5; \/\/ max_locals\n+          Bytes[22]{\n+            0x014C0607B800074D;\n+            0x0507B800074E2C2B; \/\/ Change last nibble from C to B to load null\n+            0xB600083604B1;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#18, 22) { \/\/ LineNumberTable at 0x04C8\n+              [5] { \/\/ LineNumberTable\n+                0  33; \/\/  at 0x04D4\n+                2  34; \/\/  at 0x04D8\n+                8  35; \/\/  at 0x04DC\n+                14  36; \/\/  at 0x04E0\n+                21  37; \/\/  at 0x04E4\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x04E4\n+      0x0011; \/\/ access\n+      #29; \/\/ name_cpx\n+      #16; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#17, 31) { \/\/ Code at 0x04EC\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA00090000AC;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#18, 6) { \/\/ LineNumberTable at 0x0505\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x0511\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0511\n+      0x0011; \/\/ access\n+      #30; \/\/ name_cpx\n+      #31; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#17, 31) { \/\/ Code at 0x0519\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA000A0000B0;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#18, 6) { \/\/ LineNumberTable at 0x0532\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x053E\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x053E\n+      0x000A; \/\/ access\n+      #32; \/\/ name_cpx\n+      #33; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#17, 56) { \/\/ Code at 0x0546\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[20]{\n+            0xCB00014B032A5FCC;\n+            0x00024B032A5FCC00;\n+            0x034B2AB0;\n+          };\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#18, 18) { \/\/ LineNumberTable at 0x056C\n+              [4] { \/\/ LineNumberTable\n+                0  5; \/\/  at 0x0578\n+                4  6; \/\/  at 0x057C\n+                11  7; \/\/  at 0x0580\n+                18  8; \/\/  at 0x0584\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [3] { \/\/ Attributes\n+    Attr(#34, 2) { \/\/ SourceFile at 0x0586\n+      #35;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#58, 10) { \/\/ InnerClasses at 0x058E\n+      [1] { \/\/ InnerClasses\n+        #56 #60 #57 25; \/\/  at 0x059E\n+      }\n+    } \/\/ end InnerClasses\n+    ;\n+    Attr(#44, 6) { \/\/ BootstrapMethods at 0x059E\n+      [1] { \/\/ bootstrap_methods\n+        {  \/\/  bootstrap_method\n+          #45; \/\/ bootstrap_method_ref\n+          [0] { \/\/ bootstrap_arguments\n+          }  \/\/  bootstrap_arguments\n+        }  \/\/  bootstrap_method\n+      }\n+    } \/\/ end BootstrapMethods\n+  } \/\/ Attributes\n+} \/\/ end class NoNullVT\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/verifierTests.jcod","additions":1608,"deletions":0,"binary":false,"changes":1608,"status":"added"},{"patch":"@@ -101,2 +101,3 @@\n-                Optional<Module> m = layer.findModule(moduleName);\n-                if (!m.isPresent())\n+                \/\/ removing dependency on java.util.Optional, valhalla only, to avoid VM warnings\n+                Module m = layer.findModule(moduleName).get();\n+                if (m == null)\n@@ -104,1 +105,1 @@\n-                m.get().addExports(packageName, getClass().getModule());\n+                m.addExports(packageName, getClass().getModule());\n","filename":"test\/langtools\/tools\/javac\/lib\/JavacTestingAbstractProcessor.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}