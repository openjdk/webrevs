{"files":[{"patch":"@@ -323,1 +323,1 @@\n-        if (rs.isEarlyReference(env, base, v)) {\n+        if (isEarlyReference(env, base, v)) {\n@@ -1332,1 +1332,1 @@\n-                if (rs.isEarlyReference(\n+                if (isEarlyReference(\n@@ -1438,1 +1438,1 @@\n-                        } else if (rs.isEarlyReference( \/\/ now this is a `proper` instance field of the current class\n+                        } else if (isEarlyReference( \/\/ now this is a `proper` instance field of the current class\n@@ -1473,0 +1473,29 @@\n+    \/**\n+     * Determine if the symbol appearance constitutes an early reference to the current class.\n+     *\n+     * <p>\n+     * This means the symbol is an instance field, or method, of the current class and it appears\n+     * in an early initialization context of it (i.e., one of its constructor prologues).\n+     *\n+     * @param env    The current environment\n+     * @param base   Variable qualifier, if any, otherwise null\n+     * @param sym    The symbol\n+     *\/\n+    public boolean isEarlyReference(Env<AttrContext> env, JCTree base, Symbol sym) {\n+        return isEarlyReference(env.info.ctorPrologue, env, base, sym);\n+    }\n+\n+    public boolean isEarlyReference(boolean inPrologue, Env<AttrContext> env, JCTree base, Symbol sym) {\n+        if (inPrologue &&\n+                (sym.flags() & STATIC) == 0 &&\n+                (sym.kind == VAR || sym.kind == MTH) &&\n+                sym.isMemberOf(env.enclClass.sym, types)) {\n+            \/\/ Allow \"Foo.this.x\" when \"Foo\" is (also) an outer class, as this refers to the outer instance\n+            if (base != null) {\n+                return TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base);\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":32,"deletions":3,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -3925,36 +3925,0 @@\n-    private boolean isReceiverParameter(Env<AttrContext> env, JCFieldAccess tree) {\n-        if (env.tree.getTag() != METHODDEF)\n-            return false;\n-        JCMethodDecl method = (JCMethodDecl)env.tree;\n-        return method.recvparam != null && tree == method.recvparam.nameexpr;\n-    }\n-\n-    \/**\n-     * Determine if the symbol appearance constitutes an early reference to the current class.\n-     *\n-     * <p>\n-     * This means the symbol is an instance field, or method, of the current class and it appears\n-     * in an early initialization context of it (i.e., one of its constructor prologues).\n-     *\n-     * @param env    The current environment\n-     * @param base   Variable qualifier, if any, otherwise null\n-     * @param sym    The symbol\n-     *\/\n-    public boolean isEarlyReference(Env<AttrContext> env, JCTree base, Symbol sym) {\n-        return isEarlyReference(env.info.ctorPrologue, env, base, sym);\n-    }\n-\n-    public boolean isEarlyReference(boolean inPrologue, Env<AttrContext> env, JCTree base, Symbol sym) {\n-        if (inPrologue &&\n-                (sym.flags() & STATIC) == 0 &&\n-                (sym.kind == VAR || sym.kind == MTH) &&\n-                sym.isMemberOf(env.enclClass.sym, types)) {\n-            \/\/ Allow \"Foo.this.x\" when \"Foo\" is (also) an outer class, as this refers to the outer instance\n-            if (base != null) {\n-                return TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base);\n-            }\n-            return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"}]}