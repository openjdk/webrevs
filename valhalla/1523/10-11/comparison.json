{"files":[{"patch":"@@ -1348,0 +1348,1 @@\n+            \/\/ skip if this identifier is part of a select, context is important here\n@@ -1357,0 +1358,1 @@\n+            \/\/ skip if part of a larger select, context is important here\n@@ -1391,0 +1393,3 @@\n+        \/* if a symbol is in the LHS of an assignment expression we won't consider it as a candidate\n+         * for a proxy local variable later on\n+         *\/\n@@ -1417,1 +1422,1 @@\n-                        \/\/ are we seeing something like CurrentClass.this?\n+                        \/\/ are we seeing something like `this` or `CurrentClass.this` or `SuperClass.super::foo`?\n@@ -1424,9 +1429,3 @@\n-                    } else {\n-                        if (!sym.owner.isAnonymous() &&\n-                                sym.owner != localEnv.enclClass.sym &&\n-                                sym.kind == VAR &&\n-                                sym.owner.kind == TYP) {\n-                            Symbol owner = tree.hasTag(IDENT) ?\n-                                    sym.owner :\n-                                    ((JCFieldAccess)tree).selected.type.tsym;\n-                            if (localEnv.enclClass.sym.isSubClass(owner, types) &&\n+                    } else if (sym.kind == VAR && sym.owner.kind == TYP) { \/\/ now fields only\n+                        if (sym.owner != localEnv.enclClass.sym) {\n+                            if (localEnv.enclClass.sym.isSubClass(sym.owner, types) &&\n@@ -1434,2 +1433,6 @@\n-                                if (tree.hasTag(SELECT)) {\n-                                    if (TreeInfo.isExplicitThisReference(\n+                                \/* if we are dealing with a field that doesn't belong to the current class, but the\n+                                 * field is inherited, this is an error. Unless, the super class is also an outer\n+                                 * class and the field's qualifier refers to the outer class\n+                                 *\/\n+                                if (tree.hasTag(IDENT) ||\n+                                    TreeInfo.isExplicitThisReference(\n@@ -1439,3 +1442,0 @@\n-                                        reportPrologueError(tree, sym);\n-                                    }\n-                                } else {\n@@ -1445,29 +1445,14 @@\n-                        } else {\n-                            if (!localEnv.enclClass.sym.isValueClass() &&\n-                                    sym.kind == VAR &&\n-                                    sym.owner.kind == TYP &&\n-                                    ((sym.flags_field & HASINIT) != 0)) {\n-                                if (tree.hasTag(IDENT) ||\n-                                        TreeInfo.isExplicitThisReference(\n-                                                types,\n-                                                (ClassType)localEnv.enclClass.sym.type,\n-                                                tree)) {\n-                                    reportPrologueError(tree, sym);\n-                                }\n-                            }\n-                            if (!isInLHS &&\n-                                    sym.kind == VAR &&\n-                                    sym.owner.kind == TYP &&\n-                                    sym.owner == localEnv.enclClass.sym) {\n-                                \/* ok it is a field of current class but it could belong to another instance of\n-                                 * this class, for example, an argument of this class passed to the constructor\n-                                 *\/\n-                                if (tree.hasTag(IDENT) ||\n-                                    tree instanceof JCFieldAccess fa &&\n-                                     TreeInfo.isExplicitThisReference(\n-                                         types,\n-                                         (ClassType)localEnv.enclClass.sym.type,\n-                                         fa.selected)) {\n-                                    localProxyVarsGen.addFieldReadInPrologue(localEnv.enclMethod, sym);\n-                                }\n-                            }\n+                        } else if (rs.isEarlyReference( \/\/ now this is a `proper` instance field of the current class\n+                                        true,\n+                                        localEnv,\n+                                        tree.hasTag(SELECT) ? ((JCFieldAccess)tree).selected : null,\n+                                        sym\n+                                )) {\n+                            \/* references to fields of identity classes which happen to have initializers are\n+                             * not allowed in the prologue\n+                             *\/\n+                            if (!localEnv.enclClass.sym.isValueClass() && (sym.flags_field & HASINIT) != 0)\n+                                reportPrologueError(tree, sym);\n+                            \/\/ we will need to generate a proxy for this field later on\n+                            if (!isInLHS)\n+                                localProxyVarsGen.addFieldReadInPrologue(localEnv.enclMethod, sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":29,"deletions":44,"binary":false,"changes":73,"status":"modified"}]}