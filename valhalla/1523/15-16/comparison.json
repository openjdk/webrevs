{"files":[{"patch":"@@ -1298,1 +1298,0 @@\n-            boolean previousAnalyzingSelect = analyzingSelect;\n@@ -1300,1 +1299,0 @@\n-                analyzingSelect = false;\n@@ -1305,1 +1303,0 @@\n-                analyzingSelect = previousAnalyzingSelect;\n@@ -1312,1 +1309,0 @@\n-            boolean previousAnalyzingSelect = analyzingSelect;\n@@ -1314,1 +1310,0 @@\n-                analyzingSelect = false;\n@@ -1319,1 +1314,0 @@\n-                analyzingSelect = previousAnalyzingSelect;\n@@ -1349,4 +1343,1 @@\n-            \/\/ skip if this identifier is part of a select, context is important here\n-            if (!analyzingSelect) {\n-                analyzeSymbol(tree);\n-            }\n+            analyzeSymbol(tree);\n@@ -1355,2 +1346,0 @@\n-        boolean analyzingSelect = false;\n-\n@@ -1359,3 +1348,6 @@\n-            \/\/ skip if part of a larger select, context is important here\n-            if (!analyzingSelect) {\n-                boolean previousAnalyzingSelect = analyzingSelect;\n+            SelectScanner ss = new SelectScanner();\n+            ss.scan(tree);\n+            if (ss.complexTree == null) {\n+                analyzeSymbol(tree);\n+            } else {\n+                boolean prevLhs = isInLHS;\n@@ -1363,3 +1355,2 @@\n-                    analyzingSelect = true;\n-                    super.visitSelect(tree);\n-                    analyzeSymbol(tree);\n+                    isInLHS = false;\n+                    scan(ss.complexTree);\n@@ -1367,1 +1358,1 @@\n-                    analyzingSelect = previousAnalyzingSelect;\n+                    isInLHS = prevLhs;\n@@ -1418,0 +1409,1 @@\n+            if (isInLHS && !insideLambdaOrClassDef) return;\n@@ -1421,1 +1413,1 @@\n-                if (!sym.isStatic() && !isMethodArgument(tree)) {\n+                if (!sym.isStatic() && sym.kind == VAR && sym.owner.kind == TYP) {\n@@ -1467,10 +1459,5 @@\n-        boolean isMethodArgument(JCTree tree) {\n-            JCTree treeToCheck = null;\n-            if (tree.hasTag(IDENT)) {\n-                treeToCheck = tree;\n-            } else if (tree instanceof JCFieldAccess) {\n-                JCFieldAccess fa = (JCFieldAccess) tree;\n-                while (fa.selected.hasTag(SELECT)) {\n-                    fa = (JCFieldAccess)fa.selected;\n-                }\n-                treeToCheck = fa;\n+        class SelectScanner extends DeferredAttr.FilterScanner {\n+            JCTree complexTree;\n+\n+            SelectScanner() {\n+                super(Set.of(IDENT, SELECT, PARENS));\n@@ -1478,9 +1465,4 @@\n-            if (treeToCheck != null) {\n-                Symbol sym = TreeInfo.symbolFor(\n-                        treeToCheck instanceof JCFieldAccess fa ?\n-                                fa.selected :\n-                                treeToCheck\n-                );\n-                if (sym != null){\n-                    return sym.owner.kind == MTH;\n-                }\n+\n+            @Override\n+            void skip(JCTree tree) {\n+                complexTree = tree;\n@@ -1488,1 +1470,0 @@\n-            return false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":21,"deletions":40,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -1010,2 +1010,0 @@\n-        \/*case TYPECAST:\n-            return symbolFor(((JCTypeCast)node).expr);*\/\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -20,0 +20,1 @@\n+EarlyAssignments.java:167:13: compiler.err.cant.ref.before.ctor.called: this\n@@ -22,1 +23,1 @@\n-21 errors\n+22 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -222,0 +222,23 @@\n+\n+    static class Inner5 {\n+        int x = 4;\n+        static String m1(Runnable r) { return null; }\n+        static String m2(Object r) { return null; }\n+        Inner5() {\n+            m1(() -> System.out.println(x)).toString();\n+            m2(x).toString();\n+            super();\n+        }\n+    }\n+\n+    static class Inner6 {\n+        Inner6() {\n+            class Bar {\n+                Bar() {\n+                    Object o = Bar.this;\n+                    super();\n+                }\n+            }\n+            super();\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+SuperInitFails.java:228:41: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:229:16: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:238:35: compiler.err.cant.ref.before.ctor.called: this\n@@ -34,1 +37,1 @@\n-33 errors\n+36 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.out","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}