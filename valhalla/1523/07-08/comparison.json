{"files":[{"patch":"@@ -1307,1 +1307,1 @@\n-                JCTree tree = filter(symAndTree.tree());\n+                JCTree tree = TreeInfo.skipParens(symAndTree.tree());\n@@ -1355,1 +1355,1 @@\n-                analyzeTree(tree);\n+                analyzeSymbol(tree);\n@@ -1368,1 +1368,1 @@\n-                    analyzeTree(tree);\n+                    analyzeSymbol(tree);\n@@ -1417,14 +1417,1 @@\n-        @Override\n-        public void visitVarDef(JCVariableDecl tree) {\n-            scan(tree.mods);\n-            scan(tree.vartype);\n-            boolean previousIsLHS = isInLHS;\n-            try {\n-                scan(tree.nameexpr);\n-            } finally {\n-                isInLHS = previousIsLHS;\n-            }\n-            scan(tree.init);\n-        }\n-\n-        JCTree filter(JCTree tree) {\n+        void analyzeSymbol(JCTree tree) {\n@@ -1432,8 +1419,0 @@\n-            if (tree.hasTag(TYPECAST)) {\n-                tree = filter(((JCTypeCast)tree).expr);\n-            }\n-            return tree;\n-        }\n-\n-        void analyzeTree(JCTree tree) {\n-            tree = filter(tree);\n@@ -1442,1 +1421,1 @@\n-                if (!sym.isStatic() && !isMethodParam(tree)) {\n+                if (!sym.isStatic() && !isMethodArgument(tree)) {\n@@ -1444,1 +1423,4 @@\n-                        if (TreeInfo.isExplicitThisReference(types, (ClassType)localEnv.enclClass.sym.type, tree)) {\n+                        if (TreeInfo.isExplicitThisReference(\n+                                types,\n+                                (ClassType)localEnv.enclClass.sym.type,\n+                                tree)) {\n@@ -1482,1 +1464,0 @@\n-                                    (sym.isFinal() || sym.isStrict()) &&\n@@ -1484,2 +1465,15 @@\n-                                    sym.owner.kind == TYP)\n-                                localProxyVarsGen.addFinalOrStrictFieldReadInPrologue(localEnv.enclMethod, sym);\n+                                    sym.owner.kind == TYP &&\n+                                    sym.owner == localEnv.enclClass.sym) {\n+                                \/* ok it is a field of current class but it could belong to another instance of\n+                                 * this class\n+                                 *\/\n+                                if (tree.hasTag(IDENT) ||\n+                                    tree instanceof JCFieldAccess fa &&\n+                                     TreeInfo.isExplicitThisReference(\n+                                         types,\n+                                         (ClassType)localEnv.enclClass.sym.type,\n+                                         fa.selected)) {\n+                                    localProxyVarsGen.addFieldReadInPrologue(localEnv.enclMethod, sym);\n+                                }\n+                            }\n+\n@@ -1492,1 +1486,1 @@\n-        boolean isMethodParam(JCTree tree) {\n+        boolean isMethodArgument(JCTree tree) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":25,"deletions":31,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import com.sun.tools.javac.code.Symtab;\n@@ -45,0 +46,1 @@\n+import com.sun.tools.javac.util.Assert;\n@@ -52,0 +54,1 @@\n+import static com.sun.tools.javac.code.TypeTag.BOT;\n@@ -62,1 +65,1 @@\n-\/** This phase adds local variable proxies for strict fields that are read during the\n+\/** This phase adds local variable proxies for fields that are read during the\n@@ -87,0 +90,1 @@\n+    private final Symtab syms;\n@@ -91,2 +95,2 @@\n-    private java.util.List<JCVariableDecl> finalOrStrictInstanceFields;\n-    private Map<JCMethodDecl, Set<Symbol>> finalOrStrictFieldsReadInPrologue = new HashMap<>();\n+    private java.util.List<JCVariableDecl> instanceFields;\n+    private Map<JCMethodDecl, Set<Symbol>> fieldsReadInPrologue = new HashMap<>();\n@@ -102,0 +106,1 @@\n+        syms = Symtab.instance(context);\n@@ -108,2 +113,2 @@\n-    public void addFinalOrStrictFieldReadInPrologue(JCMethodDecl constructor, Symbol sym) {\n-        Set<Symbol> fieldSet = finalOrStrictFieldsReadInPrologue.getOrDefault(constructor, new HashSet<>());\n+    public void addFieldReadInPrologue(JCMethodDecl constructor, Symbol sym) {\n+        Set<Symbol> fieldSet = fieldsReadInPrologue.getOrDefault(constructor, new HashSet<>());\n@@ -111,1 +116,1 @@\n-        finalOrStrictFieldsReadInPrologue.put(constructor, fieldSet);\n+        fieldsReadInPrologue.put(constructor, fieldSet);\n@@ -131,1 +136,1 @@\n-        java.util.List<JCVariableDecl> prevFinalOrStrictInstanceFields = finalOrStrictInstanceFields;\n+        java.util.List<JCVariableDecl> prevInstanceFields = instanceFields;\n@@ -134,1 +139,1 @@\n-            finalOrStrictInstanceFields = tree.defs.stream()\n+            instanceFields = tree.defs.stream()\n@@ -137,1 +142,1 @@\n-                    .filter(vd -> (vd.sym.isStrict() || vd.sym.isFinal()) && !vd.sym.isStatic())\n+                    .filter(vd -> !vd.sym.isStatic())\n@@ -142,1 +147,1 @@\n-            finalOrStrictInstanceFields = prevFinalOrStrictInstanceFields;\n+            instanceFields = prevInstanceFields;\n@@ -147,4 +152,4 @@\n-        if (finalOrStrictFieldsReadInPrologue.get(tree) != null) {\n-            Set<Symbol> fieldSet = finalOrStrictFieldsReadInPrologue.get(tree);\n-            java.util.List<JCVariableDecl> finalOrStrictFieldsRead = new ArrayList<>();\n-            for (JCVariableDecl field : finalOrStrictInstanceFields) {\n+        if (fieldsReadInPrologue.get(tree) != null) {\n+            Set<Symbol> fieldSet = fieldsReadInPrologue.get(tree);\n+            java.util.List<JCVariableDecl> fieldsRead = new ArrayList<>();\n+            for (JCVariableDecl field : instanceFields) {\n@@ -152,1 +157,1 @@\n-                    finalOrStrictFieldsRead.add(field);\n+                    fieldsRead.add(field);\n@@ -155,2 +160,2 @@\n-            addLocalProxiesFor(tree, finalOrStrictFieldsRead);\n-            finalOrStrictFieldsReadInPrologue.remove(tree);\n+            addLocalProxiesFor(tree, fieldsRead);\n+            fieldsReadInPrologue.remove(tree);\n@@ -161,1 +166,1 @@\n-    void addLocalProxiesFor(JCMethodDecl constructor, java.util.List<JCVariableDecl> finalOrStrictFields) {\n+    void addLocalProxiesFor(JCMethodDecl constructor, java.util.List<JCVariableDecl> fields) {\n@@ -165,1 +170,1 @@\n-        for (JCVariableDecl fieldDecl : finalOrStrictFields) {\n+        for (JCVariableDecl fieldDecl : fields) {\n@@ -169,1 +174,8 @@\n-            JCVariableDecl localDecl = make.at(constructor.pos).VarDef(proxy, fieldDecl.init);\n+            JCVariableDecl localDecl;\n+            JCExpression initializer =\n+                    fieldDecl.init != null ?\n+                        fieldDecl.init :\n+                        fieldDecl.vartype.type.isPrimitive() ?\n+                                make.at(constructor.pos).Literal(0) :\n+                                make.at(constructor.pos).Literal(BOT, null).setType(syms.botType);\n+            localDecl = make.at(constructor.pos).VarDef(proxy, initializer);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LocalProxyVarsGen.java","additions":32,"deletions":20,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1549,2 +1549,0 @@\n-            protected boolean hasValueClasses;\n-            protected boolean hasStrictFields;\n@@ -1562,1 +1560,0 @@\n-                            boolean prevHasStrictFields = hasStrictFields;\n@@ -1575,1 +1572,0 @@\n-                                hasStrictFields = prevHasStrictFields;\n@@ -1582,1 +1578,0 @@\n-                hasValueClasses = node.sym.isValueClass();\n@@ -1622,6 +1617,0 @@\n-\n-            @Override\n-            public void visitVarDef(JCVariableDecl tree) {\n-                hasStrictFields |= tree.sym.isStrict();\n-                super.visitVarDef(tree);\n-            }\n@@ -1713,7 +1702,4 @@\n-            if (scanner.hasValueClasses || scanner.hasStrictFields) {\n-                if (shouldStop(CompileState.STRICT_FIELDS_PROXIES))\n-                    return;\n-                for (JCTree def : cdefs) {\n-                    LocalProxyVarsGen.instance(context).translateTopLevelClass(def, localMake);\n-                }\n-                compileStates.put(env, CompileState.STRICT_FIELDS_PROXIES);\n+            if (shouldStop(CompileState.STRICT_FIELDS_PROXIES))\n+                return;\n+            for (JCTree def : cdefs) {\n+                LocalProxyVarsGen.instance(context).translateTopLevelClass(def, localMake);\n@@ -1721,0 +1707,1 @@\n+            compileStates.put(env, CompileState.STRICT_FIELDS_PROXIES);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1621,2 +1621,2 @@\n-                String expectedCodeSequence = \"iconst_1,istore_1,aload_0,iload_1,putfield,aload_0,iload_1,putfield,\" +\n-                        \"aload_0,invokespecial,getstatic,aload_0,getfield,invokevirtual,return\";\n+                String expectedCodeSequence = \"iconst_0,istore_1,iconst_1,istore_1,aload_0,iload_1,putfield,\" +\n+                        \"aload_0,iload_1,putfield,aload_0,invokespecial,getstatic,aload_0,getfield,invokevirtual,return\";\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}