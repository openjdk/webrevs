{"files":[{"patch":"@@ -1295,1 +1295,0 @@\n-            \/\/ lambda in prologue\n@@ -1302,1 +1301,0 @@\n-            \/\/ local class in prologue\n@@ -1352,5 +1350,0 @@\n-            \/\/ we still need to check the args\n-            for (JCExpression arg : tree.args) {\n-                \/\/analyzeTree(arg);\n-                arg.accept(this);\n-            }\n@@ -1374,1 +1367,0 @@\n-                    \/\/ esta invocacion es lo que provoca el error\n@@ -1405,1 +1397,1 @@\n-        boolean isLHS = false;\n+        boolean isInLHS = false;\n@@ -1409,1 +1401,1 @@\n-            boolean previousIsLHS = isLHS;\n+            boolean previousIsInLHS = isInLHS;\n@@ -1411,1 +1403,1 @@\n-                isLHS = true;\n+                isInLHS = true;\n@@ -1414,1 +1406,1 @@\n-                isLHS = previousIsLHS;\n+                isInLHS = previousIsInLHS;\n@@ -1417,3 +1409,0 @@\n-            if (tree.rhs.type.constValue() == null) {\n-                analyzeTree(tree.rhs);\n-            }\n@@ -1424,1 +1413,1 @@\n-            \/\/ ignore any declarative part\n+            \/\/ ignore any declarative part, mainly to avoid scanning receiver parameters\n@@ -1432,1 +1421,1 @@\n-            boolean previousIsLHS = isLHS;\n+            boolean previousIsLHS = isInLHS;\n@@ -1436,1 +1425,1 @@\n-                isLHS = previousIsLHS;\n+                isInLHS = previousIsLHS;\n@@ -1439,3 +1428,0 @@\n-            if (tree.init != null && tree.init.type.constValue() == null) {\n-                analyzeTree(tree.init);\n-            }\n@@ -1452,6 +1438,4 @@\n-        void analyzeTree(JCTree jcTree) {\n-            jcTree = filter(jcTree);\n-            java.util.List<TreeInfo.SymAndTree> symbols = TreeInfo.symbolsFor(jcTree);\n-            for (TreeInfo.SymAndTree symAndTree : symbols) {\n-                Symbol sym = symAndTree.symbol();\n-                JCTree tree = filter(symAndTree.tree());\n+        void analyzeTree(JCTree tree) {\n+            tree = filter(tree);\n+            Symbol sym = TreeInfo.symbolFor(tree);\n+            if (sym != null) {\n@@ -1464,2 +1448,1 @@\n-                        if (sym != null &&\n-                                !sym.owner.isAnonymous() &&\n+                        if (!sym.owner.isAnonymous() &&\n@@ -1469,3 +1452,0 @@\n-                            if (!tree.hasTag(IDENT) && !tree.hasTag(SELECT)) {\n-                                throw new AssertionError(\"unexpected tree \" + tree + \" with tag \" + tree.getTag());\n-                            }\n@@ -1473,2 +1453,2 @@\n-                                                sym.owner :\n-                                                ((JCFieldAccess)tree).selected.type.tsym;\n+                                    sym.owner :\n+                                    ((JCFieldAccess)tree).selected.type.tsym;\n@@ -1478,1 +1458,4 @@\n-                                    if (TreeInfo.isExplicitThisReference(types, (ClassType)localEnv.enclClass.sym.type, ((JCFieldAccess)tree).selected)) {\n+                                    if (TreeInfo.isExplicitThisReference(\n+                                            types,\n+                                            (ClassType)localEnv.enclClass.sym.type,\n+                                            ((JCFieldAccess)tree).selected)) {\n@@ -1487,3 +1470,3 @@\n-                                sym.kind == VAR &&\n-                                sym.owner.kind == TYP &&\n-                                ((sym.flags_field & HASINIT) != 0)) {\n+                                    sym.kind == VAR &&\n+                                    sym.owner.kind == TYP &&\n+                                    ((sym.flags_field & HASINIT) != 0)) {\n@@ -1491,4 +1474,4 @@\n-                                    TreeInfo.isExplicitThisReference(\n-                                            types,\n-                                            (ClassType)localEnv.enclClass.sym.type,\n-                                            tree)) {\n+                                        TreeInfo.isExplicitThisReference(\n+                                                types,\n+                                                (ClassType)localEnv.enclClass.sym.type,\n+                                                tree)) {\n@@ -1498,5 +1481,5 @@\n-                            if (!isLHS &&\n-                                (sym.isFinal() || sym.isStrict()) &&\n-                                sym.kind == VAR &&\n-                                sym.owner.kind == TYP)\n-                            localProxyVarsGen.addFinalOrStrictFieldReadInPrologue(localEnv.enclMethod, sym);\n+                            if (!isInLHS &&\n+                                    (sym.isFinal() || sym.isStrict()) &&\n+                                    sym.kind == VAR &&\n+                                    sym.owner.kind == TYP)\n+                                localProxyVarsGen.addFinalOrStrictFieldReadInPrologue(localEnv.enclMethod, sym);\n@@ -1521,1 +1504,5 @@\n-                Symbol sym = TreeInfo.symbolFor(treeToCheck instanceof JCFieldAccess fa ? fa.selected : treeToCheck);\n+                Symbol sym = TreeInfo.symbolFor(\n+                        treeToCheck instanceof JCFieldAccess fa ?\n+                                fa.selected :\n+                                treeToCheck\n+                );\n@@ -1603,0 +1590,1 @@\n+                            \/\/ strict field initializers are inlined in constructor's prologues\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":36,"deletions":48,"binary":false,"changes":84,"status":"modified"}]}