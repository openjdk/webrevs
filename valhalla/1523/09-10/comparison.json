{"files":[{"patch":"@@ -1311,0 +1311,1 @@\n+                                true, \/\/ localEnv could potentially have the `ctorPrologue` field set to false\n@@ -1315,1 +1316,1 @@\n-                                (VarSymbol) sym)) {\n+                                sym)) {\n@@ -1332,20 +1333,10 @@\n-            \/\/ is this an instance method invocation?\n-            if (!isConstructorCall && !msym.isStatic()) {\n-                if (msym.owner == env.enclClass.sym ||\n-                    msym.isMemberOf(env.enclClass.sym, types)) {\n-                    if (tree.meth instanceof JCFieldAccess fa) {\n-                        if (TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.sym.type, fa.selected)) {\n-                            reportPrologueError(tree.meth, msym);\n-                        }\n-                    } else {\n-                        reportPrologueError(tree.meth, msym);\n-                    }\n-                }\n-            }\n-            if (isConstructorCall) {\n-                \/\/ calls like `this.super()` are not allowed\n-                if (tree.meth instanceof JCFieldAccess fa) {\n-                    if (TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.sym.type, fa.selected)) {\n-                        reportPrologueError(tree.meth, msym);\n-                    }\n-                }\n+            \/\/ is this an instance method call or an illegal constructor invocation like: `this.super()`?\n+            if (msym != null && \/\/ for erroneous invocations msym can be null, ignore those\n+                (!isConstructorCall ||\n+                isConstructorCall && tree.meth.hasTag(SELECT))) {\n+                if (rs.isEarlyReference(\n+                        true,\n+                        localEnv,\n+                        tree.meth instanceof JCFieldAccess fa ? fa.selected : null,\n+                        msym))\n+                    reportPrologueError(tree.meth, msym);\n@@ -1483,1 +1474,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -175,6 +175,6 @@\n-            JCExpression initializer =\n-                    fieldDecl.init != null ?\n-                        fieldDecl.init :\n-                        fieldDecl.vartype.type.isPrimitive() ?\n-                                make.at(constructor.pos).Literal(0) :\n-                                make.at(constructor.pos).Literal(BOT, null).setType(syms.botType);\n+            JCExpression initializer = fieldDecl.init;\n+            if (initializer == null && !fieldDecl.sym.isFinal() && !fieldDecl.sym.isStrict()) {\n+                initializer = fieldDecl.vartype.type.isPrimitive() ?\n+                                    make.at(constructor.pos).Literal(0) :\n+                                    make.at(constructor.pos).Literal(BOT, null).setType(syms.botType);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LocalProxyVarsGen.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3933,1 +3933,1 @@\n-     * Determine if the variable appearance constitutes an early reference to the current class.\n+     * Determine if the symbol appearance constitutes an early reference to the current class.\n@@ -3936,1 +3936,1 @@\n-     * This means the variable is an instance field of the current class and it appears\n+     * This means the symbol is an instance field, or method, of the current class and it appears\n@@ -3939,4 +3939,0 @@\n-     * <p>\n-     * Such a reference is only allowed for assignments to non-initialized fields that are\n-     * not inherited from a superclass, though that is not enforced by this method.\n-     *\n@@ -3945,1 +3941,1 @@\n-     * @param v      The variable\n+     * @param sym    The symbol\n@@ -3947,4 +3943,3 @@\n-    public boolean isEarlyReference(Env<AttrContext> env, JCTree base, VarSymbol v) {\n-        if (env.info.ctorPrologue &&\n-                (v.flags() & STATIC) == 0 &&\n-                v.isMemberOf(env.enclClass.sym, types)) {\n+    public boolean isEarlyReference(Env<AttrContext> env, JCTree base, Symbol sym) {\n+        return isEarlyReference(env.info.ctorPrologue, env, base, sym);\n+    }\n@@ -3952,0 +3947,5 @@\n+    public boolean isEarlyReference(boolean inPrologue, Env<AttrContext> env, JCTree base, Symbol sym) {\n+        if (inPrologue &&\n+                (sym.flags() & STATIC) == 0 &&\n+                (sym.kind == VAR || sym.kind == MTH) &&\n+                sym.isMemberOf(env.enclClass.sym, types)) {\n@@ -3956,2 +3956,0 @@\n-\n-            \/\/ It's an early reference to an instance field member of the current instance\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1621,2 +1621,2 @@\n-                String expectedCodeSequence = \"iconst_0,istore_1,iconst_1,istore_1,aload_0,iload_1,putfield,\" +\n-                        \"aload_0,iload_1,putfield,aload_0,invokespecial,getstatic,aload_0,getfield,invokevirtual,return\";\n+                String expectedCodeSequence = \"iconst_1,istore_1,aload_0,iload_1,putfield,aload_0,iload_1,putfield,\" +\n+                        \"aload_0,invokespecial,getstatic,aload_0,getfield,invokevirtual,return\";\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}