{"files":[{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8285932 8310913 8336390\n+ * @bug 8285932 8310913 8336390 8338060 8338252\n@@ -39,0 +39,1 @@\n+import java.util.List;\n@@ -43,0 +44,1 @@\n+import java.util.function.Function;\n@@ -44,0 +46,1 @@\n+import java.util.stream.IntStream;\n@@ -46,1 +49,1 @@\n-    static String BASE_KEY = \"BASEKEY-\";\n+    private static String BASE_KEY = \"BASEKEY-\";\n@@ -48,1 +51,2 @@\n-    static String genKey(int i) {\n+    \/\/ Return a String (identity object) that can be a key in WeakHashMap.\n+    private static String genKey(int i) {\n@@ -52,0 +56,5 @@\n+    \/\/ Return a String of the letter 'a' plus the integer (0..0xffff)\n+    private static String genValue(int i) {\n+        return String.valueOf((char) ('a' + i));\n+    }\n+\n@@ -72,1 +81,5 @@\n-        populate(map);\n+        var strongKeys = populate(map);      \/\/ Retain references to the keys\n+        methods(map);\n+        Reference.reachabilityFence(strongKeys);\n+\n+        strongKeys = null;      \/\/ drop strong key references\n@@ -78,2 +91,0 @@\n-        populate(map);\n-        methods(map);\n@@ -84,1 +95,5 @@\n-        populate(set);\n+        var strongKeys = populate(set);      \/\/ Retain references to the keys\n+        methods(set);\n+        Reference.reachabilityFence(strongKeys);\n+\n+        strongKeys = null;          \/\/ drop strong key references\n@@ -90,2 +105,0 @@\n-        populate(set);\n-        methods(set);\n@@ -135,2 +148,2 @@\n-        Long value1 = Long.valueOf(BASE_KEY + 999);\n-        Long value2 = Long.valueOf(BASE_KEY + 999);\n+        String value1 = genKey(999);\n+        String value2 = genKey(999);\n@@ -171,5 +184,5 @@\n-    static void populate(Map<String, String> map) {\n-        for (int i = 0; i < 26; i++) {\n-            String key = genKey(i);\n-            String value = String.valueOf((char) ('a' + i));\n-            map.put(key, value);\n+    static List<String> populate(Map<String, String> map) {\n+        var keyRefs = genStrings(0, 26, ReferencedKeyTest::genKey);\n+        var valueRefs = genStrings(0, 26, ReferencedKeyTest::genValue);\n+        for (int i = 0; i < keyRefs.size(); i++) {\n+            map.put(keyRefs.get(i), valueRefs.get(i));\n@@ -177,0 +190,1 @@\n+        return keyRefs;\n@@ -179,5 +193,9 @@\n-    static void populate(Set<String> set) {\n-        for (int i = 0; i < 26; i++) {\n-            String value = genKey(i);\n-            set.add(value);\n-        }\n+    static List<String> populate(Set<String> set) {\n+        var keyRefs = genStrings(0, 26, ReferencedKeyTest::genKey);\n+        set.addAll(keyRefs);\n+        return keyRefs;\n+    }\n+\n+    \/\/ Generate a List of consecutive strings using a function int -> String\n+    static List<String> genStrings(int min, int maxExclusive, Function<Integer, String> genString) {\n+        return IntStream.range(min, maxExclusive).mapToObj(i -> genString.apply(i)).toList();\n","filename":"test\/jdk\/jdk\/internal\/util\/ReferencedKeyTest.java","additions":39,"deletions":21,"binary":false,"changes":60,"status":"modified"}]}