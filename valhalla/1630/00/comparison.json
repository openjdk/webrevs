{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.ClassFileFormatVersion;\n@@ -42,0 +43,4 @@\n+ * The interpretation of access flags is version dependent.  Flags defined in\n+ * some versions of the {@code class} file format may be undefined in another\n+ * version, and all flags are considered undefined if the version is erroneous.\n+ * <p>\n@@ -75,1 +80,3 @@\n-     * @throws IllegalArgumentException if the flags mask has any undefined bit set\n+     * @throws IllegalArgumentException if the class file version of this flag\n+     *         is unsupported, or if in the class file version, the flags mask\n+     *         has any undefined bit set\n@@ -81,3 +88,4 @@\n-     * {@return whether the specified flag is set}  If the specified flag\n-     * is not available to this {@linkplain #location() location}, returns\n-     * {@code false}.\n+     * {@return whether the specified flag is set}  If the class file version\n+     * of this flag is unsupported, or if in the class file version, the\n+     * specified flag is not {@linkplain AccessFlag#locations(ClassFileFormatVersion)\n+     * available} to this {@linkplain #location() location}, returns {@code false}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AccessFlags.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import jdk.internal.classfile.impl.ClassFileVersionAware;\n@@ -84,1 +85,1 @@\n-        return with(new AccessFlagsImpl(AccessFlag.Location.CLASS, flags));\n+        return with(new AccessFlagsImpl((ClassFileVersionAware) this, AccessFlag.Location.CLASS, flags));\n@@ -98,1 +99,1 @@\n-        return with(new AccessFlagsImpl(AccessFlag.Location.CLASS, flags));\n+        return with(new AccessFlagsImpl((ClassFileVersionAware) this, AccessFlag.Location.CLASS, flags));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.classfile.impl.ClassFileVersionAware;\n@@ -64,1 +65,1 @@\n-        return with(new AccessFlagsImpl(AccessFlag.Location.FIELD, flags));\n+        return with(new AccessFlagsImpl((ClassFileVersionAware) this, AccessFlag.Location.FIELD, flags));\n@@ -77,1 +78,1 @@\n-        return with(new AccessFlagsImpl(AccessFlag.Location.FIELD, flags));\n+        return with(new AccessFlagsImpl((ClassFileVersionAware) this, AccessFlag.Location.FIELD, flags));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.classfile.impl.ClassFileVersionAware;\n@@ -67,1 +68,1 @@\n-        return with(new AccessFlagsImpl(AccessFlag.Location.METHOD, flags));\n+        return with(new AccessFlagsImpl((ClassFileVersionAware) this, AccessFlag.Location.METHOD, flags));\n@@ -82,1 +83,1 @@\n-        return with(new AccessFlagsImpl(AccessFlag.Location.METHOD, flags));\n+        return with(new AccessFlagsImpl((ClassFileVersionAware) this, AccessFlag.Location.METHOD, flags));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-        return Util.has(AccessFlag.Location.INNER_CLASS, flagsMask(), flag);\n+        return Util.hasFlagVersionAgnostic(AccessFlag.Location.INNER_CLASS, flagsMask(), flag);\n@@ -140,1 +140,1 @@\n-        return of(innerClass, outerClass, innerName, Util.flagsToBits(AccessFlag.Location.INNER_CLASS, flags));\n+        return of(innerClass, outerClass, innerName, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.INNER_CLASS, flags));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/InnerClassInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        return Util.has(AccessFlag.Location.METHOD_PARAMETER, flagsMask(), flag);\n+        return Util.hasFlagVersionAgnostic(AccessFlag.Location.METHOD_PARAMETER, flagsMask(), flag);\n@@ -101,1 +101,1 @@\n-        return of(name.map(TemporaryConstantPool.INSTANCE::utf8Entry), Util.flagsToBits(AccessFlag.Location.METHOD_PARAMETER, flags));\n+        return of(name.map(TemporaryConstantPool.INSTANCE::utf8Entry), Util.flagsToBitsVersionAgnostic(AccessFlag.Location.METHOD_PARAMETER, flags));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/MethodParameterInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-        return Util.has(AccessFlag.Location.MODULE, moduleFlagsMask(), flag);\n+        return Util.hasFlagVersionAgnostic(AccessFlag.Location.MODULE, moduleFlagsMask(), flag);\n@@ -245,1 +245,1 @@\n-            return moduleFlags(Util.flagsToBits(AccessFlag.Location.MODULE, moduleFlags));\n+            return moduleFlags(Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE, moduleFlags));\n@@ -277,1 +277,1 @@\n-            return requires(module, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), version);\n+            return requires(module, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), version);\n@@ -309,1 +309,1 @@\n-            return exports(pkge, Util.flagsToBits(AccessFlag.Location.MODULE_EXPORTS, exportsFlags), exportsToModules);\n+            return exports(pkge, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_EXPORTS, exportsFlags), exportsToModules);\n@@ -351,1 +351,1 @@\n-            return opens(pkge, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensToModules);\n+            return opens(pkge, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_OPENS, opensFlags), opensToModules);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleAttribute.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        return Util.has(AccessFlag.Location.MODULE_EXPORTS, exportsFlagsMask(), flag);\n+        return Util.hasFlagVersionAgnostic(AccessFlag.Location.MODULE_EXPORTS, exportsFlagsMask(), flag);\n@@ -124,1 +124,1 @@\n-        return of(exports, Util.flagsToBits(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n+        return of(exports, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n@@ -154,1 +154,1 @@\n-        return of(exports, Util.flagsToBits(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n+        return of(exports, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n@@ -184,1 +184,1 @@\n-        return of(exports, Util.flagsToBits(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n+        return of(exports, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n@@ -214,1 +214,1 @@\n-        return of(exports, Util.flagsToBits(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n+        return of(exports, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_EXPORTS, exportFlags), exportsTo);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleExportInfo.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        return Util.has(AccessFlag.Location.MODULE_OPENS, opensFlagsMask(), flag);\n+        return Util.hasFlagVersionAgnostic(AccessFlag.Location.MODULE_OPENS, opensFlagsMask(), flag);\n@@ -130,1 +130,1 @@\n-        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n+        return of(opens, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n@@ -160,1 +160,1 @@\n-        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n+        return of(opens, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n@@ -188,1 +188,1 @@\n-        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n+        return of(opens, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n@@ -216,1 +216,1 @@\n-        return of(opens, Util.flagsToBits(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n+        return of(opens, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_OPENS, opensFlags), opensTo);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleOpenInfo.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-        return Util.has(AccessFlag.Location.MODULE_REQUIRES, requiresFlagsMask(), flag);\n+        return Util.hasFlagVersionAgnostic(AccessFlag.Location.MODULE_REQUIRES, requiresFlagsMask(), flag);\n@@ -115,1 +115,1 @@\n-        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n+        return of(requires, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n@@ -139,1 +139,1 @@\n-        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n+        return of(requires, Util.flagsToBitsVersionAgnostic(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleRequireInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+    private final ClassFileVersionAware versionContext;\n@@ -39,1 +40,2 @@\n-    public  AccessFlagsImpl(AccessFlag.Location location, AccessFlag... flags) {\n+    public AccessFlagsImpl(ClassFileVersionAware versionContext, AccessFlag.Location location, AccessFlag... flags) {\n+        this.versionContext = versionContext;\n@@ -41,1 +43,1 @@\n-        this.flagsMask = Util.flagsToBits(location, flags);\n+        this.flagsMask = Util.flagsToBits(location, flags, Util.requireFormatVersion(versionContext.classFileVersion()));\n@@ -45,1 +47,2 @@\n-    public AccessFlagsImpl(AccessFlag.Location location, int mask) {\n+    public AccessFlagsImpl(ClassFileVersionAware versionContext, AccessFlag.Location location, int mask) {\n+        this.versionContext = versionContext;\n@@ -58,1 +61,1 @@\n-            flags = AccessFlag.maskToAccessFlags(flagsMask, location, ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES);\n+            flags = AccessFlag.maskToAccessFlags(flagsMask, location, Util.requireFormatVersion(versionContext.classFileVersion()));\n@@ -84,1 +87,2 @@\n-        return Util.has(location, flagsMask, flag);\n+        var cffv = Util.findFormatVersion(versionContext.classFileVersion());\n+        return cffv != null && Util.hasFlag(location, flagsMask, flag, cffv);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AccessFlagsImpl.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-public final class BufWriterImpl implements BufWriter {\n+public final class BufWriterImpl implements BufWriter, ClassFileVersionAware {\n@@ -57,1 +57,1 @@\n-    private final int majorVersion;\n+    private final int classFileVersion;\n@@ -69,1 +69,1 @@\n-    public BufWriterImpl(ConstantPoolBuilder constantPool, ClassFileImpl context, int initialSize, ClassEntry thisClass, int majorVersion) {\n+    public BufWriterImpl(ConstantPoolBuilder constantPool, ClassFileImpl context, int initialSize, ClassEntry thisClass, int classFileVersion) {\n@@ -74,1 +74,1 @@\n-        this.majorVersion = majorVersion;\n+        this.classFileVersion = classFileVersion;\n@@ -143,2 +143,3 @@\n-    public int getMajorVersion() {\n-        return majorVersion;\n+    @Override\n+    public int classFileVersion() {\n+        return classFileVersion;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+    private final ClassFileVersionAware versionSource;\n@@ -53,0 +54,1 @@\n+                                ClassFileVersionAware versionSource,\n@@ -57,0 +59,1 @@\n+        this.versionSource = versionSource;\n@@ -59,1 +62,1 @@\n-        this.flags = new AccessFlagsImpl(AccessFlag.Location.FIELD);\n+        this.flags = new AccessFlagsImpl(this, AccessFlag.Location.FIELD);\n@@ -120,0 +123,5 @@\n+\n+    @Override\n+    public int classFileVersion() {\n+        return versionSource.classFileVersion();\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+    private final ClassFileVersionAware versionSource;\n@@ -52,0 +53,1 @@\n+                                 ClassFileVersionAware versionSource,\n@@ -59,0 +61,1 @@\n+        this.versionSource = versionSource;\n@@ -61,1 +64,1 @@\n-        this.flags = new AccessFlagsImpl(AccessFlag.Location.METHOD, flags);\n+        this.flags = new AccessFlagsImpl(this, AccessFlag.Location.METHOD, flags);\n@@ -202,0 +205,5 @@\n+\n+    @Override\n+    public int classFileVersion() {\n+        return versionSource.classFileVersion();\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-        implements ClassBuilder, Consumer<ClassElement> {\n+        implements ClassBuilder, Consumer<ClassElement>, ClassFileVersionAware {\n@@ -54,1 +54,1 @@\n-        consumer.accept(new BufferedFieldBuilder(terminal.constantPool, terminal.context,\n+        consumer.accept(new BufferedFieldBuilder(terminal.constantPool, terminal.context, terminal,\n@@ -63,1 +63,1 @@\n-        BufferedFieldBuilder builder = new BufferedFieldBuilder(terminal.constantPool, terminal.context,\n+        BufferedFieldBuilder builder = new BufferedFieldBuilder(terminal.constantPool, terminal.context, terminal,\n@@ -73,1 +73,1 @@\n-        consumer.accept(new BufferedMethodBuilder(terminal.constantPool, terminal.context,\n+        consumer.accept(new BufferedMethodBuilder(terminal.constantPool, terminal.context, terminal,\n@@ -82,1 +82,1 @@\n-        BufferedMethodBuilder builder = new BufferedMethodBuilder(terminal.constantPool, terminal.context,\n+        BufferedMethodBuilder builder = new BufferedMethodBuilder(terminal.constantPool, terminal.context, terminal,\n@@ -94,0 +94,4 @@\n+    @Override\n+    public int classFileVersion() {\n+        return terminal.classFileVersion();\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedClassBuilder.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-public final class ChainedFieldBuilder implements FieldBuilder {\n+public final class ChainedFieldBuilder implements FieldBuilder, ClassFileVersionAware {\n@@ -56,0 +56,4 @@\n+    @Override\n+    public int classFileVersion() {\n+        return terminal.classFileVersion();\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedFieldBuilder.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-public final class ChainedMethodBuilder implements MethodBuilder {\n+public final class ChainedMethodBuilder implements MethodBuilder, ClassFileVersionAware {\n@@ -75,0 +75,4 @@\n+    @Override\n+    public int classFileVersion() {\n+        return terminal.classFileVersion();\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedMethodBuilder.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.impl;\n+\n+\/\/\/ A model that knows its class file version for version-specific handling.\n+\/\/\/ Implemented by raw class, field, method models, and builders for access flags.\n+\/\/\/ Only [ClassReaderImpl], [DirectClassBuilder], and [BufWriterImpl] store the versions.\n+\/\/\/ Other implementations ultimately delegate to them.\n+public interface ClassFileVersionAware {\n+    int classFileVersion();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassFileVersionAware.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        implements ClassModel {\n+        implements ClassModel, ClassFileVersionAware {\n@@ -83,1 +83,1 @@\n-        return new AccessFlagsImpl(AccessFlag.Location.CLASS, reader.flags());\n+        return new AccessFlagsImpl(this, AccessFlag.Location.CLASS, reader.flags());\n@@ -96,0 +96,5 @@\n+    @Override\n+    public int classFileVersion() {\n+        return reader.classFileVersion();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-        implements ClassReader {\n+        implements ClassReader, ClassFileVersionAware {\n@@ -472,0 +472,5 @@\n+\n+    @Override\n+    public int classFileVersion() {\n+        return readInt(4);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -38,2 +38,1 @@\n-import static java.lang.classfile.ClassFile.PREVIEW_MINOR_VERSION;\n-import static java.lang.classfile.ClassFile.latestMajorVersion;\n+import static java.lang.classfile.ClassFile.*;\n@@ -44,1 +43,1 @@\n-        implements ClassBuilder {\n+        implements ClassBuilder, ClassFileVersionAware {\n@@ -58,2 +57,1 @@\n-    private int majorVersion;\n-    private int minorVersion;\n+    private int classFileVersion;\n@@ -71,2 +69,1 @@\n-        this.majorVersion = ClassFile.latestMajorVersion();\n-        this.minorVersion = ClassFile.latestMinorVersion();\n+        this.classFileVersion = Util.toClassFileVersion(latestMajorVersion(), latestMinorVersion());\n@@ -95,1 +92,1 @@\n-        return withField(new DirectFieldBuilder(constantPool, context, name, descriptor, flags, null));\n+        return withField(new DirectFieldBuilder(constantPool, context, this, name, descriptor, flags, null));\n@@ -102,1 +99,1 @@\n-        return withField(new DirectFieldBuilder(constantPool, context, name, descriptor, 0, null)\n+        return withField(new DirectFieldBuilder(constantPool, context, this, name, descriptor, 0, null)\n@@ -108,2 +105,2 @@\n-        DirectFieldBuilder builder = new DirectFieldBuilder(constantPool, context, field.fieldName(),\n-                                                            field.fieldType(), 0, field);\n+        DirectFieldBuilder builder = new DirectFieldBuilder(constantPool, context, this,\n+                                                            field.fieldName(), field.fieldType(), 0, field);\n@@ -119,1 +116,1 @@\n-        return withMethod(new DirectMethodBuilder(constantPool, context, name, descriptor, flags, null)\n+        return withMethod(new DirectMethodBuilder(constantPool, context, this, name, descriptor, flags, null)\n@@ -125,1 +122,2 @@\n-        DirectMethodBuilder builder = new DirectMethodBuilder(constantPool, context, method.methodName(),\n+        DirectMethodBuilder builder = new DirectMethodBuilder(constantPool, context, this,\n+                                                              method.methodName(),\n@@ -162,2 +160,6 @@\n-        this.majorVersion = major;\n-        this.minorVersion = minor;\n+        this.classFileVersion = Util.toClassFileVersion(major, minor);\n+    }\n+\n+    @Override\n+    public int classFileVersion() {\n+        return this.classFileVersion;\n@@ -195,1 +197,1 @@\n-        BufWriterImpl tail = new BufWriterImpl(constantPool, context, size, thisClassEntry, majorVersion);\n+        BufWriterImpl tail = new BufWriterImpl(constantPool, context, size, thisClassEntry, classFileVersion);\n@@ -201,1 +203,1 @@\n-        if (minorVersion == PREVIEW_MINOR_VERSION && majorVersion >= Util.VALUE_OBJECTS_MAJOR) {\n+        if (Util.extractMinorVersion(classFileVersion) == PREVIEW_MINOR_VERSION && Util.extractMajorVersion(classFileVersion) >= Util.VALUE_OBJECTS_MAJOR) {\n@@ -219,1 +221,1 @@\n-        head.writeU2U2(minorVersion, majorVersion);\n+        head.writeInt(classFileVersion);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -347,1 +347,2 @@\n-                if (buf.getMajorVersion() >= ClassFile.JAVA_6_VERSION) {\n+                int majorVersion = Util.extractMajorVersion(buf.classFileVersion());\n+                if (majorVersion >= ClassFile.JAVA_6_VERSION) {\n@@ -352,1 +353,1 @@\n-                        if (buf.getMajorVersion() == ClassFile.JAVA_6_VERSION) {\n+                        if (majorVersion == ClassFile.JAVA_6_VERSION) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    private final ClassFileVersionAware versionSource;\n@@ -46,0 +47,1 @@\n+                              ClassFileVersionAware versionSource,\n@@ -51,0 +53,1 @@\n+        this.versionSource = versionSource;\n@@ -103,0 +106,5 @@\n+\n+    @Override\n+    public int classFileVersion() {\n+        return versionSource.classFileVersion();\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+    final ClassFileVersionAware versionSource;\n@@ -46,0 +47,1 @@\n+                               ClassFileVersionAware versionSource,\n@@ -51,0 +53,1 @@\n+        this.versionSource = versionSource;\n@@ -148,0 +151,5 @@\n+\n+    @Override\n+    public int classFileVersion() {\n+        return versionSource.classFileVersion();\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private final ClassReader reader;\n+    private final ClassReaderImpl reader;\n@@ -47,1 +47,1 @@\n-    public FieldImpl(ClassReader reader, int startPos, int endPos, int attributesPos) {\n+    public FieldImpl(ClassReaderImpl reader, int startPos, int endPos, int attributesPos) {\n@@ -56,1 +56,1 @@\n-        return new AccessFlagsImpl(AccessFlag.Location.FIELD, fieldFlags());\n+        return new AccessFlagsImpl(this, AccessFlag.Location.FIELD, fieldFlags());\n@@ -124,0 +124,5 @@\n+    @Override\n+    public int classFileVersion() {\n+        return reader.classFileVersion();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-        implements MethodModel, MethodInfo, Util.Writable {\n+        implements MethodModel, MethodInfo, Util.Writable, ClassFileVersionAware {\n@@ -39,1 +39,1 @@\n-    private final ClassReader reader;\n+    private final ClassReaderImpl reader;\n@@ -44,1 +44,1 @@\n-    public MethodImpl(ClassReader reader, int startPos, int endPos, int attrStart) {\n+    public MethodImpl(ClassReaderImpl reader, int startPos, int endPos, int attrStart) {\n@@ -53,1 +53,1 @@\n-        return new AccessFlagsImpl(AccessFlag.Location.METHOD, reader.readU2(startPos));\n+        return new AccessFlagsImpl(this, AccessFlag.Location.METHOD, reader.readU2(startPos));\n@@ -138,0 +138,5 @@\n+    @Override\n+    public int classFileVersion() {\n+        return reader.classFileVersion();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-        extends FieldBuilder\n+        extends FieldBuilder, ClassFileVersionAware\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalFieldBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-        extends MethodBuilder, MethodInfo\n+        extends MethodBuilder, MethodInfo, ClassFileVersionAware\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalMethodBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Arrays;\n@@ -70,0 +71,39 @@\n+    public static ClassFileFormatVersion findFormatVersion(int classfileVersion) {\n+        int major = extractMajorVersion(classfileVersion);\n+        int minor = extractMinorVersion(classfileVersion);\n+        if (major < ClassFile.JAVA_1_VERSION || major > ClassFile.latestMajorVersion())\n+            return null;\n+        if (major == ClassFile.JAVA_1_VERSION) {\n+            return minor <= 3 ? ClassFileFormatVersion.RELEASE_0 : ClassFileFormatVersion.RELEASE_1;\n+        }\n+        \/\/ for major version is between 45 and 55 inclusive, the minor version may be any value\n+        if (major < ClassFile.JAVA_12_VERSION || minor == 0)\n+            return ClassFileFormatVersion.fromMajor(major);\n+\n+        return (major == ClassFile.latestMajorVersion() && minor == ClassFile.PREVIEW_MINOR_VERSION) ?\n+                ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES : null;\n+    }\n+\n+    public static ClassFileFormatVersion requireFormatVersion(int classFileVersion) {\n+        var ret = findFormatVersion(classFileVersion);\n+        if (ret == null)\n+            throw new IllegalArgumentException(\"Unsupported class file version: \" + classFileVersionString(classFileVersion));\n+        return ret;\n+    }\n+\n+    public static String classFileVersionString(int classFileVersion) {\n+        return extractMajorVersion(classFileVersion) + \".\" + extractMinorVersion(classFileVersion);\n+    }\n+\n+    public static int toClassFileVersion(int majorVersion, int minorVersion) {\n+        return majorVersion | minorVersion << Character.SIZE;\n+    }\n+\n+    public static int extractMajorVersion(int classfileVersion) {\n+        return (char) classfileVersion;\n+    }\n+\n+    public static int extractMinorVersion(int classfileVersion) {\n+        return classfileVersion >>> Character.SIZE;\n+    }\n+\n@@ -195,1 +235,1 @@\n-    public static int flagsToBits(AccessFlag.Location location, Collection<AccessFlag> flags) {\n+    public static int flagsToBitsVersionAgnostic(AccessFlag.Location location, Collection<AccessFlag> flags) {\n@@ -198,1 +238,1 @@\n-            if (!f.locations().contains(location)) {\n+            if (!f.locations().contains(location) && !f.locations(ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES).contains(location)) {\n@@ -206,1 +246,5 @@\n-    public static int flagsToBits(AccessFlag.Location location, AccessFlag... flags) {\n+    public static int flagsToBitsVersionAgnostic(AccessFlag.Location location, AccessFlag... flags) {\n+        return flagsToBitsVersionAgnostic(location, Arrays.asList(flags));\n+    }\n+\n+    public static int flagsToBits(AccessFlag.Location location, AccessFlag[] flags, ClassFileFormatVersion cffv) {\n@@ -209,2 +253,2 @@\n-            if (!f.locations().contains(location) && !f.locations(ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES).contains(location)) {\n-                throw new IllegalArgumentException(\"unexpected flag: \" + f + \" use in target location: \" + location);\n+            if (!f.locations(cffv).contains(location)) {\n+                throw new IllegalArgumentException(\"unexpected flag: %s use in target location: %s in class file format %s\".formatted(f, location, cffv));\n@@ -217,1 +261,1 @@\n-    public static boolean has(AccessFlag.Location location, int flagsMask, AccessFlag flag) {\n+    public static boolean hasFlagVersionAgnostic(AccessFlag.Location location, int flagsMask, AccessFlag flag) {\n@@ -222,0 +266,4 @@\n+    public static boolean hasFlag(AccessFlag.Location location, int flagsMask, AccessFlag flag, ClassFileFormatVersion cffv) {\n+        return (flag.mask() & flagsMask) == flag.mask() && flag.locations(cffv).contains(location);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":54,"deletions":6,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-public sealed interface WritableField extends Util.Writable\n+public sealed interface WritableField extends Util.Writable, ClassFileVersionAware\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/WritableField.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -861,1 +861,0 @@\n-jdk\/classfile\/AccessFlagsTest.java 8366270 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,1 @@\n-            assertEquals(intFactory.apply(flagsFactory.apply(randomFlags).flagsMask()).flags(), Set.of(randomFlags));\n+            assertEquals(Set.of(randomFlags), intFactory.apply(flagsFactory.apply(randomFlags).flagsMask()).flags());\n@@ -98,1 +98,1 @@\n-            var randomMask = r.nextInt(Short.MAX_VALUE);\n+            var randomMask = r.nextInt(0x10000);\n","filename":"test\/jdk\/jdk\/classfile\/AccessFlagsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}