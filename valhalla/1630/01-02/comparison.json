{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,3 @@\n+import static java.lang.classfile.ClassFile.ACC_PROTECTED;\n+import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n+\n@@ -319,1 +322,1 @@\n-            return access.has(AccessFlag.PUBLIC) || access.has(AccessFlag.PROTECTED);\n+            return (access.flagsMask() & (ACC_PUBLIC | ACC_PROTECTED)) != 0;\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/FingerPrint.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventClassBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,1 @@\n-import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n-import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.classfile.ClassFile.*;\n@@ -170,1 +169,1 @@\n-                clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+                clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n@@ -183,1 +182,1 @@\n-                clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+                clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n@@ -197,1 +196,1 @@\n-                clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+                clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n@@ -212,1 +211,1 @@\n-                clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+                clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n","filename":"test\/jdk\/java\/lang\/Class\/getSimpleName\/GetSimpleNameTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,1 @@\n-import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n-import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.classfile.ClassFile.*;\n@@ -262,1 +261,1 @@\n-            clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+            clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n@@ -304,1 +303,1 @@\n-            clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+            clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n@@ -323,1 +322,1 @@\n-            clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+            clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n","filename":"test\/jdk\/java\/lang\/invoke\/DefineClassTest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,1 @@\n-import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n-import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.classfile.ClassFile.*;\n@@ -120,1 +119,1 @@\n-            clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+            clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/StaticInvocableTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,1 @@\n-import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n-import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.classfile.ClassFile.*;\n@@ -123,1 +122,1 @@\n-            clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+            clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n@@ -139,1 +138,1 @@\n-            clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+            clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n@@ -155,1 +154,1 @@\n-            clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+            clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n","filename":"test\/jdk\/java\/lang\/invoke\/lookup\/SpecialStatic.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,2 +57,1 @@\n-import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n-import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.classfile.ClassFile.*;\n@@ -219,1 +218,1 @@\n-            clb.withFlags(AccessFlag.PUBLIC, AccessFlag.IDENTITY);\n+            clb.withFlags(ACC_PUBLIC | ACC_IDENTITY);\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/BadProvidersTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+import static java.lang.classfile.ClassFile.*;\n+\n@@ -647,1 +649,2 @@\n-                    Assert.check(classFile.flags().has(AccessFlag.IDENTITY));\n+                    \/\/ Check bit, these classes may be non-preview\n+                    Assert.check((classFile.flags().flagsMask() & ACC_IDENTITY) != 0);\n@@ -692,1 +695,2 @@\n-                Assert.check(classFile.flags().has(AccessFlag.IDENTITY));\n+                \/\/ Check bit, these classes may be non-preview\n+                Assert.check((classFile.flags().flagsMask() & ACC_IDENTITY) != 0);\n@@ -769,1 +773,2 @@\n-                    Assert.check(classFile.flags().has(AccessFlag.IDENTITY));\n+                    \/\/ Check bit, these classes may be non-preview\n+                    Assert.check((classFile.flags().flagsMask() & ACC_IDENTITY) != 0);\n@@ -771,4 +776,3 @@\n-                        if (!field.flags().has(AccessFlag.STATIC)) {\n-                            Set<AccessFlag> fieldFlags = field.flags().flags();\n-                            Assert.check(fieldFlags.contains(AccessFlag.STRICT_INIT));\n-                        }\n+                        \/\/ TODO migrate to AccessFlag when javac correctly sets preview version\n+                        int mask = field.flags().flagsMask();\n+                        Assert.check((mask & ACC_STATIC) != 0 || (mask & ACC_STRICT_INIT) != 0);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}