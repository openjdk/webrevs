{"files":[{"patch":"@@ -1506,1 +1506,1 @@\n-  for (int i = 0; i < _constants.length(); i++) {\n+  for (int i = 0; i < _constants.length() && !in_conditional_code(); i++) {\n@@ -1973,2 +1973,1 @@\n-    access_store_at(decorators, x->elt_type(), array, index.result(), value.result(),\n-                    nullptr, null_check_info);\n+    access_store_at(decorators, x->elt_type(), array, index.result(), value.result(), nullptr, null_check_info);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -674,1 +674,1 @@\n-    payload = set_payload_value(gvn, payload, bt, value, T_BYTE, null_marker_offset);\n+    payload = set_payload_value(gvn, payload, bt, value, T_BOOLEAN, null_marker_offset);\n@@ -717,1 +717,1 @@\n-    bool is_naturally_atomic = vk->is_empty() || (null_free && vk->nof_declared_nonstatic_fields() == 1);\n+    bool is_naturally_atomic = null_free && vk->nof_declared_nonstatic_fields() <= 1;\n@@ -1296,1 +1296,1 @@\n-    bool is_naturally_atomic = vk->is_empty() || (null_free && vk->nof_declared_nonstatic_fields() == 1);\n+    bool is_naturally_atomic = null_free && vk->nof_declared_nonstatic_fields() <= 1;\n@@ -1364,1 +1364,1 @@\n-            load = set_payload_value(&kit->gvn(), load, bt, kit->intcon(1), T_BYTE, null_marker_offset);\n+            load = set_payload_value(&kit->gvn(), load, bt, kit->intcon(1), T_BOOLEAN, null_marker_offset);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-          bool is_naturally_atomic = vk->is_empty() || (is_null_free && vk->nof_declared_nonstatic_fields() == 1);\n+          bool is_naturally_atomic = is_null_free && vk->nof_declared_nonstatic_fields() <= 1;\n@@ -282,1 +282,1 @@\n-            bool is_naturally_atomic = vk->is_empty() || (is_null_free && vk->nof_declared_nonstatic_fields() == 1);\n+            bool is_naturally_atomic = is_null_free && vk->nof_declared_nonstatic_fields() <= 1;\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-    bool is_naturally_atomic = vk->is_empty() || (field->is_null_free() && vk->nof_declared_nonstatic_fields() == 1);\n+    bool is_naturally_atomic = field->is_null_free() && vk->nof_declared_nonstatic_fields() <= 1;\n@@ -273,1 +273,1 @@\n-    bool is_naturally_atomic = vk->is_empty() || (field->is_null_free() && vk->nof_declared_nonstatic_fields() == 1);\n+    bool is_naturally_atomic = field->is_null_free() && vk->nof_declared_nonstatic_fields() <= 1;\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -386,0 +386,5 @@\n+    @LooselyConsistentValue\n+    static value class MyValueEmpty {\n+        static final MyValueEmpty DEFAULT = new MyValueEmpty();\n+    }\n+\n@@ -782,0 +787,1 @@\n+        IntAndArrayOop[] nullFreeArray6 = (IntAndArrayOop[])ValueClass.newNullRestrictedNonAtomicArray(IntAndArrayOop.class, 3, IntAndArrayOop.DEFAULT);\n@@ -786,0 +792,5 @@\n+        MyValueEmpty[] nullFreeArrayEmpty = (MyValueEmpty[])ValueClass.newNullRestrictedNonAtomicArray(MyValueEmpty.class, 3, MyValueEmpty.DEFAULT);\n+        MyValueEmpty[] nullFreeAtomicArrayEmpty = (MyValueEmpty[])ValueClass.newNullRestrictedAtomicArray(MyValueEmpty.class, 3, MyValueEmpty.DEFAULT);\n+        MyValueEmpty[] nullableArrayEmpty = new MyValueEmpty[3];\n+        MyValueEmpty[] nullableAtomicArrayEmpty = (MyValueEmpty[])ValueClass.newNullableAtomicArray(MyValueEmpty.class, 3);\n+\n@@ -966,0 +977,2 @@\n+            nullFreeArray6[1] = val6;\n+            nullFreeArray6[2] = nullFreeArray6[1];\n@@ -972,0 +985,1 @@\n+            Asserts.assertEQ(nullFreeArray6[0], new IntAndArrayOop(0, null));\n@@ -975,0 +989,1 @@\n+            Asserts.assertEQ(nullFreeArray6[1], val6);\n@@ -978,0 +993,1 @@\n+            Asserts.assertEQ(nullFreeArray6[2], val6);\n@@ -982,0 +998,23 @@\n+            \/\/ Test empty arrays\n+            MyValueEmpty valEmpty = new MyValueEmpty();\n+            nullFreeArrayEmpty[1] = valEmpty;\n+            nullFreeArrayEmpty[2] = nullFreeArrayEmpty[1];\n+            nullFreeAtomicArrayEmpty[1] = valEmpty;\n+            nullFreeAtomicArrayEmpty[2] = nullFreeAtomicArrayEmpty[1];\n+            nullableArrayEmpty[1] = valEmpty;\n+            nullableArrayEmpty[2] = nullableArrayEmpty[1];\n+            nullableAtomicArrayEmpty[1] = valEmpty;\n+            nullableAtomicArrayEmpty[2] = nullableAtomicArrayEmpty[1];\n+            Asserts.assertEQ(nullFreeArrayEmpty[0], new MyValueEmpty());\n+            Asserts.assertEQ(nullFreeAtomicArrayEmpty[0], new MyValueEmpty());\n+            Asserts.assertEQ(nullableArrayEmpty[0], null);\n+            Asserts.assertEQ(nullableAtomicArrayEmpty[0], null);\n+            Asserts.assertEQ(nullFreeArrayEmpty[1], valEmpty);\n+            Asserts.assertEQ(nullFreeAtomicArrayEmpty[1], valEmpty);\n+            Asserts.assertEQ(nullableArrayEmpty[1], valEmpty);\n+            Asserts.assertEQ(nullableAtomicArrayEmpty[1], valEmpty);\n+            Asserts.assertEQ(nullFreeArrayEmpty[2], valEmpty);\n+            Asserts.assertEQ(nullFreeAtomicArrayEmpty[2], valEmpty);\n+            Asserts.assertEQ(nullableArrayEmpty[2], valEmpty);\n+            Asserts.assertEQ(nullableAtomicArrayEmpty[2], valEmpty);\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayNullMarkers.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -372,0 +372,9 @@\n+    @Strict\n+    @NullRestricted\n+    MyValueEmpty emptyField1 = new MyValueEmpty();\n+    @Strict\n+    @NullRestricted\n+    volatile MyValueEmpty emptyField2 = new MyValueEmpty();\n+    MyValueEmpty emptyField3;\n+    volatile MyValueEmpty emptyField4;\n+\n@@ -1098,0 +1107,13 @@\n+            Asserts.assertEQ(t.emptyField1, new MyValueEmpty());\n+            Asserts.assertEQ(t.emptyField2, new MyValueEmpty());\n+\n+            \/\/ Test empty fields\n+            t.emptyField3 = new MyValueEmpty();\n+            t.emptyField4 = new MyValueEmpty();\n+            Asserts.assertEQ(t.emptyField3, new MyValueEmpty());\n+            Asserts.assertEQ(t.emptyField4, new MyValueEmpty());\n+            t.emptyField3 = null;\n+            t.emptyField4 = null;\n+            Asserts.assertEQ(t.emptyField3, null);\n+            Asserts.assertEQ(t.emptyField4, null);\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFieldNullMarkers.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}