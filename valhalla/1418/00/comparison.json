{"files":[{"patch":"@@ -668,1 +668,1 @@\n-    payload = set_payload_value(gvn, payload, bt, value, T_BYTE, null_marker_offset);\n+    payload = set_payload_value(gvn, payload, bt, value, T_BOOLEAN, null_marker_offset);\n@@ -711,1 +711,1 @@\n-    bool is_naturally_atomic = vk->is_empty() || (null_free && vk->nof_declared_nonstatic_fields() == 1);\n+    bool is_naturally_atomic = null_free && vk->nof_declared_nonstatic_fields() <= 1;\n@@ -1329,1 +1329,1 @@\n-    bool is_naturally_atomic = vk->is_empty() || (null_free && vk->nof_declared_nonstatic_fields() == 1);\n+    bool is_naturally_atomic = null_free && vk->nof_declared_nonstatic_fields() <= 1;\n@@ -1397,1 +1397,1 @@\n-            load = set_payload_value(&kit->gvn(), load, bt, kit->intcon(1), T_BYTE, null_marker_offset);\n+            load = set_payload_value(&kit->gvn(), load, bt, kit->intcon(1), T_BOOLEAN, null_marker_offset);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-          bool is_naturally_atomic = vk->is_empty() || (is_null_free && vk->nof_declared_nonstatic_fields() == 1);\n+          bool is_naturally_atomic = is_null_free && vk->nof_declared_nonstatic_fields() <= 1;\n@@ -282,1 +282,1 @@\n-            bool is_naturally_atomic = vk->is_empty() || (is_null_free && vk->nof_declared_nonstatic_fields() == 1);\n+            bool is_naturally_atomic = is_null_free && vk->nof_declared_nonstatic_fields() <= 1;\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-    bool is_naturally_atomic = vk->is_empty() || (field->is_null_free() && vk->nof_declared_nonstatic_fields() == 1);\n+    bool is_naturally_atomic = field->is_null_free() && vk->nof_declared_nonstatic_fields() <= 1;\n@@ -278,1 +278,1 @@\n-    bool is_naturally_atomic = vk->is_empty() || (field->is_null_free() && vk->nof_declared_nonstatic_fields() == 1);\n+    bool is_naturally_atomic = field->is_null_free() && vk->nof_declared_nonstatic_fields() <= 1;\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -315,0 +315,6 @@\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    static value class MyValueEmpty {\n+\n+    }\n+\n@@ -711,0 +717,5 @@\n+        MyValueEmpty[] nullFreeArrayEmpty = (MyValueEmpty[])ValueClass.newNullRestrictedArray(MyValueEmpty.class, 3);\n+        MyValueEmpty[] nullFreeAtomicArrayEmpty = (MyValueEmpty[])ValueClass.newNullRestrictedAtomicArray(MyValueEmpty.class, 3);\n+        MyValueEmpty[] nullableArrayEmpty = new MyValueEmpty[3];\n+        MyValueEmpty[] nullableAtomicArrayEmpty = (MyValueEmpty[])ValueClass.newNullableAtomicArray(MyValueEmpty.class, 3);\n+\n@@ -912,0 +923,23 @@\n+            \/\/ Test empty arrays\n+            MyValueEmpty valEmpty = new MyValueEmpty();\n+            nullFreeArrayEmpty[1] = valEmpty;\n+            nullFreeArrayEmpty[2] = nullFreeArrayEmpty[1];\n+            nullFreeAtomicArrayEmpty[1] = valEmpty;\n+            nullFreeAtomicArrayEmpty[2] = nullFreeAtomicArrayEmpty[1];\n+            nullableArrayEmpty[1] = valEmpty;\n+            nullableArrayEmpty[2] = nullableArrayEmpty[1];\n+            nullableAtomicArrayEmpty[1] = valEmpty;\n+            nullableAtomicArrayEmpty[2] = nullableAtomicArrayEmpty[1];\n+            Asserts.assertEQ(nullFreeArrayEmpty[0], new MyValueEmpty());\n+            Asserts.assertEQ(nullFreeAtomicArrayEmpty[0], new MyValueEmpty());\n+            Asserts.assertEQ(nullableArrayEmpty[0], null);\n+            Asserts.assertEQ(nullableAtomicArrayEmpty[0], null);\n+            Asserts.assertEQ(nullFreeArrayEmpty[1], valEmpty);\n+            Asserts.assertEQ(nullFreeAtomicArrayEmpty[1], valEmpty);\n+            Asserts.assertEQ(nullableArrayEmpty[1], valEmpty);\n+            Asserts.assertEQ(nullableAtomicArrayEmpty[1], valEmpty);\n+            Asserts.assertEQ(nullFreeArrayEmpty[2], valEmpty);\n+            Asserts.assertEQ(nullFreeAtomicArrayEmpty[2], valEmpty);\n+            Asserts.assertEQ(nullableArrayEmpty[2], valEmpty);\n+            Asserts.assertEQ(nullableAtomicArrayEmpty[2], valEmpty);\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayNullMarkers.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -385,0 +385,7 @@\n+    @NullRestricted\n+    MyValueEmpty emptyField1 = new MyValueEmpty();\n+    @NullRestricted\n+    volatile MyValueEmpty emptyField2 = new MyValueEmpty();\n+    MyValueEmpty emptyField3;\n+    volatile MyValueEmpty emptyField4;\n+\n@@ -1102,0 +1109,13 @@\n+            Asserts.assertEQ(t.emptyField1, new MyValueEmpty());\n+            Asserts.assertEQ(t.emptyField2, new MyValueEmpty());\n+\n+            \/\/ Test empty fields\n+            t.emptyField3 = new MyValueEmpty();\n+            t.emptyField4 = new MyValueEmpty();\n+            Asserts.assertEQ(t.emptyField3, new MyValueEmpty());\n+            Asserts.assertEQ(t.emptyField4, new MyValueEmpty());\n+            t.emptyField3 = null;\n+            t.emptyField4 = null;\n+            Asserts.assertEQ(t.emptyField3, null);\n+            Asserts.assertEQ(t.emptyField4, null);\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFieldNullMarkers.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}