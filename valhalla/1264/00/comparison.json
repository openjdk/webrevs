{"files":[{"patch":"@@ -2567,2 +2567,2 @@\n-        final JCModifiers mods = modifiersOpt();\n-        List<JCAnnotation> newAnnotations = mods.annotations;\n+        List<JCAnnotation> newAnnotations = typeAnnotationsOpt();\n+\n@@ -2572,3 +2572,0 @@\n-            if (mods.flags != 0) {\n-                log.error(token.pos, Errors.ModNotAllowedHere(asFlagSet(mods.flags)));\n-            }\n@@ -2647,5 +2644,1 @@\n-            JCNewClass newClass = classCreatorRest(newpos, null, typeArgs, t, mods.flags);\n-            if ((newClass.def == null) && (mods.flags != 0)) {\n-                log.error(newClass.pos, Errors.ModNotAllowedHere(asFlagSet(mods.flags)));\n-            }\n-            return newClass;\n+            return classCreatorRest(newpos, null, typeArgs, t);\n@@ -2676,1 +2669,1 @@\n-        return classCreatorRest(newpos, encl, typeArgs, t, 0);\n+        return classCreatorRest(newpos, encl, typeArgs, t);\n@@ -2754,2 +2747,1 @@\n-                                  JCExpression t,\n-                                  long flags)\n+                                  JCExpression t)\n@@ -2763,1 +2755,1 @@\n-            JCModifiers mods = F.at(Position.NOPOS).Modifiers(flags);\n+            JCModifiers mods = F.at(Position.NOPOS).Modifiers(0);\n@@ -3508,4 +3500,1 @@\n-                pos = token.pos;\n-                JCModifiers mods = F.at(Position.NOPOS).Modifiers(0);\n-                F.at(pos);\n-                return variableDeclarators(mods, t, stats, true).toList();\n+                return variableDeclarators(modifiersOpt(), t, stats, true).toList();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+DeclarationAnnotation.java:13:21: compiler.err.annotation.type.not.applicable.to.type: DA\n@@ -4,1 +5,0 @@\n-DeclarationAnnotation.java:13:21: compiler.err.annotation.type.not.applicable.to.type: DA\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/common\/arrays\/DeclarationAnnotation.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1005,32 +1005,0 @@\n-    @Test\n-    void testAnonymousValue() throws Exception {\n-        assertOK(\n-                \"\"\"\n-                class Test {\n-                    void m() {\n-                        Object o = new value Comparable<String>() {\n-                            @Override\n-                            public int compareTo(String o) {\n-                                return 0;\n-                            }\n-                        };\n-                    }\n-                }\n-                \"\"\"\n-        );\n-        assertOK(\n-                \"\"\"\n-                class Test {\n-                    void m() {\n-                        Object o = new value Comparable<>() {\n-                            @Override\n-                            public int compareTo(Object o) {\n-                                return 0;\n-                            }\n-                        };\n-                    }\n-                }\n-                \"\"\"\n-        );\n-    }\n-\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"}]}