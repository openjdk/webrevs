{"files":[{"patch":"@@ -1325,1 +1325,1 @@\n-               \/* allow_inline *\/ false,\n+               !x->is_unresolved() && x->klass()->is_inlinetype(),\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1121,1 +1121,1 @@\n-        NewInstance* new_instance = new NewInstance(elem_klass, state_before, true, true);\n+        NewInstance* new_instance = new NewInstance(elem_klass, state_before, false, true);\n@@ -2003,1 +2003,1 @@\n-        } else {\n+        } else {  \/\/ field is flat\n@@ -2041,1 +2041,1 @@\n-              NewInstance* vt = new NewInstance(inline_klass, pending_load_indexed()->state_before(), true, true);\n+              NewInstance* vt = new NewInstance(inline_klass, pending_load_indexed()->state_before(), false, true);\n@@ -2049,1 +2049,1 @@\n-              NewInstance* new_instance = new NewInstance(inline_klass, state_before, true, true);\n+              NewInstance* new_instance = new NewInstance(inline_klass, state_before, false, true);\n@@ -2481,3 +2481,9 @@\n-  NewInstance* new_instance = new NewInstance(klass->as_instance_klass(), state_before, stream()->is_unresolved_klass(), false);\n-  _memory->new_instance(new_instance);\n-  apush(append_split(new_instance));\n+  if (!stream()->is_unresolved_klass() && klass->is_inlinetype() &&\n+      klass->as_inline_klass()->is_initialized() && klass->as_inline_klass()->is_empty()) {\n+    ciInlineKlass* vk = klass->as_inline_klass();\n+    apush(append(new Constant(new InstanceConstant(vk->default_instance()))));\n+  } else {\n+    NewInstance* new_instance = new NewInstance(klass->as_instance_klass(), state_before, stream()->is_unresolved_klass(), false);\n+    _memory->new_instance(new_instance);\n+    apush(append_split(new_instance));\n+  }\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -662,1 +662,0 @@\n-    assert(!klass->is_inlinetype() || !klass->as_inline_klass()->is_empty(), \"Sanity check\");\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/BlackholeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,2 +37,7 @@\n-    int x = 4; \/\/ Removed\n-    int y = 7;\n+    int x; \/\/ Removed\n+    int y;\n+\n+    PointN(int i, int j) {\n+        x = i;\n+        y = j;\n+    }\n@@ -45,1 +50,1 @@\n-    PointN p1 = new PointN();\n+    PointN p1 = new PointN(4, 7);\n@@ -62,1 +67,1 @@\n-    PointN p1 = new PointN(); \/\/ Made private\n+    PointN p1 = new PointN(4, 7); \/\/ Made private\n@@ -78,1 +83,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -88,37 +93,34 @@\n-    Method #8 #9; \/\/ #7\n-    class #10; \/\/ #8\n-    NameAndType #11 #12; \/\/ #9\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleN\"; \/\/ #10\n-    Utf8 \"<vnew>\"; \/\/ #11\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/RectangleN;\"; \/\/ #12\n-    Field #14 #15; \/\/ #13\n-    class #16; \/\/ #14\n-    NameAndType #17 #18; \/\/ #15\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/NamedRectangleN\"; \/\/ #16\n-    Utf8 \"rect\"; \/\/ #17\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/RectangleN;\"; \/\/ #18\n-    String #20; \/\/ #19\n-    Utf8 \"\"; \/\/ #20\n-    Field #14 #22; \/\/ #21\n-    NameAndType #23 #24; \/\/ #22\n-    Utf8 \"name\"; \/\/ #23\n-    Utf8 \"Ljava\/lang\/String;\"; \/\/ #24\n-    Field #8 #26; \/\/ #25\n-    NameAndType #27 #28; \/\/ #26\n-    Utf8 \"p1\"; \/\/ #27\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #28\n-    Field #30 #31; \/\/ #29\n-    class #32; \/\/ #30\n-    NameAndType #33 #34; \/\/ #31\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #32\n-    Utf8 \"x\"; \/\/ #33\n-    Utf8 \"I\"; \/\/ #34\n-    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #35\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #36\n-    Utf8 \"Code\"; \/\/ #37\n-    Utf8 \"LineNumberTable\"; \/\/ #38\n-    Utf8 \"getP1X\"; \/\/ #39\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/NamedRectangleN;)I\"; \/\/ #40\n-    Utf8 \"SourceFile\"; \/\/ #41\n-    Utf8 \"Test.java\"; \/\/ #42\n-    Utf8 \"Preload\"; \/\/ #43\n+    class #8; \/\/ #7\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleN\"; \/\/ #8\n+    Method #7 #3; \/\/ #9\n+    Field #11 #12; \/\/ #10\n+    class #13; \/\/ #11\n+    NameAndType #14 #15; \/\/ #12\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/NamedRectangleN\"; \/\/ #13\n+    Utf8 \"rect\"; \/\/ #14\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/RectangleN;\"; \/\/ #15\n+    String #17; \/\/ #16\n+    Utf8 \"\"; \/\/ #17\n+    Field #11 #19; \/\/ #18\n+    NameAndType #20 #21; \/\/ #19\n+    Utf8 \"name\"; \/\/ #20\n+    Utf8 \"Ljava\/lang\/String;\"; \/\/ #21\n+    Field #7 #23; \/\/ #22\n+    NameAndType #24 #25; \/\/ #23\n+    Utf8 \"p1\"; \/\/ #24\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #25\n+    Field #27 #28; \/\/ #26\n+    class #29; \/\/ #27\n+    NameAndType #30 #31; \/\/ #28\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #29\n+    Utf8 \"x\"; \/\/ #30\n+    Utf8 \"I\"; \/\/ #31\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #32\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #33\n+    Utf8 \"Code\"; \/\/ #34\n+    Utf8 \"LineNumberTable\"; \/\/ #35\n+    Utf8 \"getP1X\"; \/\/ #36\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/NamedRectangleN;)I\"; \/\/ #37\n+    Utf8 \"SourceFile\"; \/\/ #38\n+    Utf8 \"Point.java\"; \/\/ #39\n+    Utf8 \"Preload\"; \/\/ #40\n@@ -128,1 +130,1 @@\n-  #14;\/\/ this_cpx\n+  #11;\/\/ this_cpx\n@@ -137,2 +139,2 @@\n-      #17; \/\/ name_index\n-      #18; \/\/ descriptor_index\n+      #14; \/\/ name_index\n+      #15; \/\/ descriptor_index\n@@ -140,1 +142,1 @@\n-        Attr(#35) { \/\/ RuntimeVisibleAnnotations\n+        Attr(#32) { \/\/ RuntimeVisibleAnnotations\n@@ -143,1 +145,1 @@\n-              #36;\n+              #33;\n@@ -154,2 +156,2 @@\n-      #23; \/\/ name_index\n-      #24; \/\/ descriptor_index\n+      #20; \/\/ name_index\n+      #21; \/\/ descriptor_index\n@@ -167,2 +169,2 @@\n-        Attr(#37) { \/\/ Code\n-          2; \/\/ max_stack\n+        Attr(#34) { \/\/ Code\n+          3; \/\/ max_stack\n@@ -171,3 +173,3 @@\n-            0x2AB700012AB80007;\n-            0xB5000D2A1213B500;\n-            0x15B1;\n+            0x2AB700012ABB0007;\n+            0x59B70009B5000A2A;\n+            0x1210B50012B1;\n@@ -178,1 +180,1 @@\n-            Attr(#38) { \/\/ LineNumberTable\n+            Attr(#35) { \/\/ LineNumberTable\n@@ -180,4 +182,3 @@\n-                0  21;\n-                4  22;\n-                5  23;\n-                11  24;\n+                0  26;\n+                4  27;\n+                15  29;\n@@ -193,2 +194,2 @@\n-      #39; \/\/ name_index\n-      #40; \/\/ descriptor_index\n+      #36; \/\/ name_index\n+      #37; \/\/ descriptor_index\n@@ -196,1 +197,1 @@\n-        Attr(#37) { \/\/ Code\n+        Attr(#34) { \/\/ Code\n@@ -200,2 +201,2 @@\n-            0x2AB4000DB40019B4;\n-            0x001DAC;\n+            0x2AB4000AB40016B4;\n+            0x001AAC;\n@@ -206,1 +207,1 @@\n-            Attr(#38) { \/\/ LineNumberTable\n+            Attr(#35) { \/\/ LineNumberTable\n@@ -208,1 +209,1 @@\n-                0  27;\n+                0  32;\n@@ -218,2 +219,2 @@\n-    Attr(#41) { \/\/ SourceFile\n-      #42;\n+    Attr(#38) { \/\/ SourceFile\n+      #39;\n@@ -222,4 +223,2 @@\n-    Attr(#43) { \/\/ Preload\n-      [] { \/\/ classes\n-        #8;\n-      }\n+    Attr(#40) { \/\/ Preload\n+      0x00010007;\n@@ -231,1 +230,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -241,37 +240,34 @@\n-    Method #8 #9; \/\/ #7\n-    class #10; \/\/ #8\n-    NameAndType #11 #12; \/\/ #9\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleP\"; \/\/ #10\n-    Utf8 \"<vnew>\"; \/\/ #11\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/RectangleP;\"; \/\/ #12\n-    Field #14 #15; \/\/ #13\n-    class #16; \/\/ #14\n-    NameAndType #17 #18; \/\/ #15\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/NamedRectangleP\"; \/\/ #16\n-    Utf8 \"rect\"; \/\/ #17\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/RectangleP;\"; \/\/ #18\n-    String #20; \/\/ #19\n-    Utf8 \"\"; \/\/ #20\n-    Field #14 #22; \/\/ #21\n-    NameAndType #23 #24; \/\/ #22\n-    Utf8 \"name\"; \/\/ #23\n-    Utf8 \"Ljava\/lang\/String;\"; \/\/ #24\n-    Field #8 #26; \/\/ #25\n-    NameAndType #27 #28; \/\/ #26\n-    Utf8 \"p1\"; \/\/ #27\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #28\n-    Field #30 #31; \/\/ #29\n-    class #32; \/\/ #30\n-    NameAndType #33 #34; \/\/ #31\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #32\n-    Utf8 \"y\"; \/\/ #33\n-    Utf8 \"I\"; \/\/ #34\n-    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #35\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #36\n-    Utf8 \"Code\"; \/\/ #37\n-    Utf8 \"LineNumberTable\"; \/\/ #38\n-    Utf8 \"getP1Y\"; \/\/ #39\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/NamedRectangleP;)I\"; \/\/ #40\n-    Utf8 \"SourceFile\"; \/\/ #41\n-    Utf8 \"Test.java\"; \/\/ #42\n-    Utf8 \"Preload\"; \/\/ #43\n+    class #8; \/\/ #7\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleP\"; \/\/ #8\n+    Method #7 #3; \/\/ #9\n+    Field #11 #12; \/\/ #10\n+    class #13; \/\/ #11\n+    NameAndType #14 #15; \/\/ #12\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/NamedRectangleP\"; \/\/ #13\n+    Utf8 \"rect\"; \/\/ #14\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/RectangleP;\"; \/\/ #15\n+    String #17; \/\/ #16\n+    Utf8 \"\"; \/\/ #17\n+    Field #11 #19; \/\/ #18\n+    NameAndType #20 #21; \/\/ #19\n+    Utf8 \"name\"; \/\/ #20\n+    Utf8 \"Ljava\/lang\/String;\"; \/\/ #21\n+    Field #7 #23; \/\/ #22\n+    NameAndType #24 #25; \/\/ #23\n+    Utf8 \"p1\"; \/\/ #24\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #25\n+    Field #27 #28; \/\/ #26\n+    class #29; \/\/ #27\n+    NameAndType #30 #31; \/\/ #28\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #29\n+    Utf8 \"y\"; \/\/ #30\n+    Utf8 \"I\"; \/\/ #31\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #32\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #33\n+    Utf8 \"Code\"; \/\/ #34\n+    Utf8 \"LineNumberTable\"; \/\/ #35\n+    Utf8 \"getP1Y\"; \/\/ #36\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/NamedRectangleP;)I\"; \/\/ #37\n+    Utf8 \"SourceFile\"; \/\/ #38\n+    Utf8 \"Point.java\"; \/\/ #39\n+    Utf8 \"Preload\"; \/\/ #40\n@@ -281,1 +277,1 @@\n-  #14;\/\/ this_cpx\n+  #11;\/\/ this_cpx\n@@ -290,2 +286,2 @@\n-      #17; \/\/ name_index\n-      #18; \/\/ descriptor_index\n+      #14; \/\/ name_index\n+      #15; \/\/ descriptor_index\n@@ -293,1 +289,1 @@\n-        Attr(#35) { \/\/ RuntimeVisibleAnnotations\n+        Attr(#32) { \/\/ RuntimeVisibleAnnotations\n@@ -296,1 +292,1 @@\n-              #36;\n+              #33;\n@@ -307,2 +303,2 @@\n-      #23; \/\/ name_index\n-      #24; \/\/ descriptor_index\n+      #20; \/\/ name_index\n+      #21; \/\/ descriptor_index\n@@ -320,2 +316,2 @@\n-        Attr(#37) { \/\/ Code\n-          2; \/\/ max_stack\n+        Attr(#34) { \/\/ Code\n+          3; \/\/ max_stack\n@@ -324,3 +320,3 @@\n-            0x2AB700012AB80007;\n-            0xB5000D2A1213B500;\n-            0x15B1;\n+            0x2AB700012ABB0007;\n+            0x59B70009B5000A2A;\n+            0x1210B50012B1;\n@@ -331,1 +327,1 @@\n-            Attr(#38) { \/\/ LineNumberTable\n+            Attr(#35) { \/\/ LineNumberTable\n@@ -333,4 +329,3 @@\n-                0  38;\n-                4  39;\n-                5  40;\n-                11  41;\n+                0  43;\n+                4  44;\n+                15  46;\n@@ -346,2 +341,2 @@\n-      #39; \/\/ name_index\n-      #40; \/\/ descriptor_index\n+      #36; \/\/ name_index\n+      #37; \/\/ descriptor_index\n@@ -349,1 +344,1 @@\n-        Attr(#37) { \/\/ Code\n+        Attr(#34) { \/\/ Code\n@@ -353,2 +348,2 @@\n-            0x2AB4000DB40019B4;\n-            0x001DAC;\n+            0x2AB4000AB40016B4;\n+            0x001AAC;\n@@ -359,1 +354,1 @@\n-            Attr(#38) { \/\/ LineNumberTable\n+            Attr(#35) { \/\/ LineNumberTable\n@@ -361,1 +356,1 @@\n-                0  44;\n+                0  49;\n@@ -371,2 +366,2 @@\n-    Attr(#41) { \/\/ SourceFile\n-      #42;\n+    Attr(#38) { \/\/ SourceFile\n+      #39;\n@@ -375,4 +370,2 @@\n-    Attr(#43) { \/\/ Preload\n-      [] { \/\/ classes\n-        #8;\n-      }\n+    Attr(#40) { \/\/ Preload\n+      0x00010007;\n@@ -384,1 +377,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -388,4 +381,4 @@\n-    class #2; \/\/ #1\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #2\n-    Field #1 #4; \/\/ #3\n-    NameAndType #5 #6; \/\/ #4\n+    Field #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #4\n@@ -394,11 +387,14 @@\n-    class #8; \/\/ #7\n-    Utf8 \"java\/lang\/Object\"; \/\/ #8\n-    Utf8 \"<vnew>\"; \/\/ #9\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #10\n-    Utf8 \"Code\"; \/\/ #11\n-    Utf8 \"LineNumberTable\"; \/\/ #12\n-    Utf8 \"SourceFile\"; \/\/ #13\n-    Utf8 \"Test.java\"; \/\/ #14\n-    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #15\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/ImplicitlyConstructible;\"; \/\/ #16\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/LooselyConsistentValue;\"; \/\/ #17\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"java\/lang\/Object\"; \/\/ #10\n+    Utf8 \"<init>\"; \/\/ #11\n+    Utf8 \"()V\"; \/\/ #12\n+    Utf8 \"(II)V\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"SourceFile\"; \/\/ #16\n+    Utf8 \"PointN.java\"; \/\/ #17\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #18\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/ImplicitlyConstructible;\"; \/\/ #19\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/LooselyConsistentValue;\"; \/\/ #20\n@@ -407,3 +403,3 @@\n-  0x0050; \/\/ access\n-  #1;\/\/ this_cpx\n-  #7;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #2;\/\/ this_cpx\n+  #8;\/\/ super_cpx\n@@ -416,1 +412,1 @@\n-      0x0010; \/\/ access\n+      0x0810; \/\/ access\n@@ -426,3 +422,3 @@\n-      0x0008; \/\/ access\n-      #9; \/\/ name_index\n-      #10; \/\/ descriptor_index\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #13; \/\/ descriptor_index\n@@ -430,1 +426,1 @@\n-        Attr(#11) { \/\/ Code\n+        Attr(#14) { \/\/ Code\n@@ -432,1 +428,1 @@\n-          1; \/\/ max_locals\n+          3; \/\/ max_locals\n@@ -434,2 +430,2 @@\n-            0xCB00014B10072A5F;\n-            0xCC00034B2AB0;\n+            0x2A1CB500012AB700;\n+            0x07B1;\n@@ -440,1 +436,1 @@\n-            Attr(#12) { \/\/ LineNumberTable\n+            Attr(#15) { \/\/ LineNumberTable\n@@ -442,2 +438,3 @@\n-                0  9;\n-                4  11;\n+                0  13;\n+                5  12;\n+                9  14;\n@@ -453,2 +450,2 @@\n-    Attr(#13) { \/\/ SourceFile\n-      #14;\n+    Attr(#16) { \/\/ SourceFile\n+      #17;\n@@ -457,1 +454,1 @@\n-    Attr(#15) { \/\/ RuntimeVisibleAnnotations\n+    Attr(#18) { \/\/ RuntimeVisibleAnnotations\n@@ -460,1 +457,1 @@\n-          #16;\n+          #19;\n@@ -466,1 +463,1 @@\n-          #17;\n+          #20;\n@@ -476,1 +473,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -481,9 +478,9 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleN\"; \/\/ #2\n-    Method #4 #5; \/\/ #3\n-    class #6; \/\/ #4\n-    NameAndType #7 #8; \/\/ #5\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #6\n-    Utf8 \"<vnew>\"; \/\/ #7\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #8\n-    Field #1 #10; \/\/ #9\n-    NameAndType #11 #12; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #2\n+    Method #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"(II)V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleN\"; \/\/ #10\n@@ -492,12 +489,14 @@\n-    class #14; \/\/ #13\n-    Utf8 \"java\/lang\/Object\"; \/\/ #14\n-    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #15\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #16\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/RectangleN;\"; \/\/ #17\n-    Utf8 \"Code\"; \/\/ #18\n-    Utf8 \"LineNumberTable\"; \/\/ #19\n-    Utf8 \"SourceFile\"; \/\/ #20\n-    Utf8 \"Test.java\"; \/\/ #21\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/ImplicitlyConstructible;\"; \/\/ #22\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/LooselyConsistentValue;\"; \/\/ #23\n-    Utf8 \"Preload\"; \/\/ #24\n+    Method #14 #15; \/\/ #13\n+    class #16; \/\/ #14\n+    NameAndType #5 #17; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #16\n+    Utf8 \"()V\"; \/\/ #17\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #18\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #19\n+    Utf8 \"Code\"; \/\/ #20\n+    Utf8 \"LineNumberTable\"; \/\/ #21\n+    Utf8 \"SourceFile\"; \/\/ #22\n+    Utf8 \"Point.java\"; \/\/ #23\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/ImplicitlyConstructible;\"; \/\/ #24\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/LooselyConsistentValue;\"; \/\/ #25\n+    Utf8 \"Preload\"; \/\/ #26\n@@ -506,3 +505,3 @@\n-  0x0050; \/\/ access\n-  #1;\/\/ this_cpx\n-  #13;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #8;\/\/ this_cpx\n+  #14;\/\/ super_cpx\n@@ -515,1 +514,1 @@\n-      0x0010; \/\/ access\n+      0x0810; \/\/ access\n@@ -519,1 +518,1 @@\n-        Attr(#15) { \/\/ RuntimeVisibleAnnotations\n+        Attr(#18) { \/\/ RuntimeVisibleAnnotations\n@@ -522,1 +521,1 @@\n-              #16;\n+              #19;\n@@ -534,2 +533,2 @@\n-      0x0008; \/\/ access\n-      #7; \/\/ name_index\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n@@ -538,2 +537,2 @@\n-        Attr(#18) { \/\/ Code\n-          2; \/\/ max_stack\n+        Attr(#20) { \/\/ Code\n+          5; \/\/ max_stack\n@@ -542,2 +541,3 @@\n-            0xCB00014BB800032A;\n-            0x5FCC00094B2AB0;\n+            0x2ABB000159071007;\n+            0xB70003B500072AB7;\n+            0x000DB1;\n@@ -548,1 +548,1 @@\n-            Attr(#19) { \/\/ LineNumberTable\n+            Attr(#21) { \/\/ LineNumberTable\n@@ -550,3 +550,3 @@\n-                0  16;\n-                4  18;\n-                13  17;\n+                0  22;\n+                14  21;\n+                18  22;\n@@ -562,2 +562,2 @@\n-    Attr(#20) { \/\/ SourceFile\n-      #21;\n+    Attr(#22) { \/\/ SourceFile\n+      #23;\n@@ -566,1 +566,1 @@\n-    Attr(#15) { \/\/ RuntimeVisibleAnnotations\n+    Attr(#18) { \/\/ RuntimeVisibleAnnotations\n@@ -569,1 +569,1 @@\n-          #22;\n+          #24;\n@@ -575,1 +575,1 @@\n-          #23;\n+          #25;\n@@ -582,4 +582,2 @@\n-    Attr(#24) { \/\/ Preload\n-      [] { \/\/ classes\n-        #4;\n-      }\n+    Attr(#26) { \/\/ Preload\n+      0x00010001;\n@@ -591,1 +589,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n@@ -596,9 +594,9 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleP\"; \/\/ #2\n-    Method #4 #5; \/\/ #3\n-    class #6; \/\/ #4\n-    NameAndType #7 #8; \/\/ #5\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #6\n-    Utf8 \"<vnew>\"; \/\/ #7\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/PointN;\"; \/\/ #8\n-    Field #1 #10; \/\/ #9\n-    NameAndType #11 #12; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #2\n+    Method #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"(II)V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleP\"; \/\/ #10\n@@ -607,12 +605,14 @@\n-    class #14; \/\/ #13\n-    Utf8 \"java\/lang\/Object\"; \/\/ #14\n-    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #15\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #16\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/RectangleP;\"; \/\/ #17\n-    Utf8 \"Code\"; \/\/ #18\n-    Utf8 \"LineNumberTable\"; \/\/ #19\n-    Utf8 \"SourceFile\"; \/\/ #20\n-    Utf8 \"Test.java\"; \/\/ #21\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/ImplicitlyConstructible;\"; \/\/ #22\n-    Utf8 \"Ljdk\/internal\/vm\/annotation\/LooselyConsistentValue;\"; \/\/ #23\n-    Utf8 \"Preload\"; \/\/ #24\n+    Method #14 #15; \/\/ #13\n+    class #16; \/\/ #14\n+    NameAndType #5 #17; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #16\n+    Utf8 \"()V\"; \/\/ #17\n+    Utf8 \"RuntimeVisibleAnnotations\"; \/\/ #18\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/NullRestricted;\"; \/\/ #19\n+    Utf8 \"Code\"; \/\/ #20\n+    Utf8 \"LineNumberTable\"; \/\/ #21\n+    Utf8 \"SourceFile\"; \/\/ #22\n+    Utf8 \"Point.java\"; \/\/ #23\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/ImplicitlyConstructible;\"; \/\/ #24\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/LooselyConsistentValue;\"; \/\/ #25\n+    Utf8 \"Preload\"; \/\/ #26\n@@ -621,3 +621,3 @@\n-  0x0050; \/\/ access\n-  #1;\/\/ this_cpx\n-  #13;\/\/ super_cpx\n+  0x0010; \/\/ access\n+  #8;\/\/ this_cpx\n+  #14;\/\/ super_cpx\n@@ -630,1 +630,1 @@\n-      0x0012; \/\/ access\n+      0x0812; \/\/ access\n@@ -634,1 +634,1 @@\n-        Attr(#15) { \/\/ RuntimeVisibleAnnotations\n+        Attr(#18) { \/\/ RuntimeVisibleAnnotations\n@@ -637,1 +637,1 @@\n-              #16;\n+              #19;\n@@ -649,2 +649,2 @@\n-      0x0008; \/\/ access\n-      #7; \/\/ name_index\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n@@ -653,2 +653,2 @@\n-        Attr(#18) { \/\/ Code\n-          2; \/\/ max_stack\n+        Attr(#20) { \/\/ Code\n+          5; \/\/ max_stack\n@@ -657,2 +657,3 @@\n-            0xCB00014BB800032A;\n-            0x5FCC00094B2AB0;\n+            0x2ABB000159071007;\n+            0xB70003B500072AB7;\n+            0x000DB1;\n@@ -663,1 +664,1 @@\n-            Attr(#19) { \/\/ LineNumberTable\n+            Attr(#21) { \/\/ LineNumberTable\n@@ -665,3 +666,3 @@\n-                0  33;\n-                4  35;\n-                13  34;\n+                0  39;\n+                14  38;\n+                18  39;\n@@ -677,2 +678,2 @@\n-    Attr(#20) { \/\/ SourceFile\n-      #21;\n+    Attr(#22) { \/\/ SourceFile\n+      #23;\n@@ -681,1 +682,1 @@\n-    Attr(#15) { \/\/ RuntimeVisibleAnnotations\n+    Attr(#18) { \/\/ RuntimeVisibleAnnotations\n@@ -684,1 +685,1 @@\n-          #22;\n+          #24;\n@@ -690,1 +691,1 @@\n-          #23;\n+          #25;\n@@ -697,4 +698,2 @@\n-    Attr(#24) { \/\/ Preload\n-      [] { \/\/ classes\n-        #4;\n-      }\n+    Attr(#26) { \/\/ Preload\n+      0x00010001;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/GetfieldChains.jcod","additions":268,"deletions":269,"binary":false,"changes":537,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -52,1 +52,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -67,1 +67,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -83,1 +83,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -97,1 +97,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n@@ -111,1 +111,1 @@\n-                         \"-XX:+EnableValhalla\",\n+                         \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypes.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestAcmpWithUnstableIf.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayAccessDeopt.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayCopyWithOops.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBimorphicInlining.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearing.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearingC1.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+ * @enablePreview\n@@ -68,1 +69,1 @@\n-                   .addFlags(\"-XX:+EnableValhalla\",\n+                   .addFlags(\"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1ValueNumbering.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC2CCalls.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+ * @enablePreview\n@@ -56,1 +57,1 @@\n-                             \"-XX:+EnableValhalla\",\n+                             \"--enable-preview\",\n@@ -62,1 +63,1 @@\n-                             \"-XX:+EnableValhalla\",\n+                             \"--enable-preview\",\n@@ -71,1 +72,1 @@\n-                             \"-XX:+EnableValhalla\",\n+                             \"--enable-preview\",\n@@ -78,1 +79,1 @@\n-                             \"-XX:+EnableValhalla\",\n+                             \"--enable-preview\",\n@@ -85,1 +86,1 @@\n-                             \"-XX:+EnableValhalla\",\n+                             \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -58,1 +59,1 @@\n-    static abstract class MultiValues {\n+    static value abstract class MultiValues {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCastMismatch.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeadAllocationRemoval.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayAliasesCardMark.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayThreshold.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+ * @enablePreview\n@@ -47,2 +48,1 @@\n- * @run main\/othervm\/timeout=300 -XX:+EnableValhalla\n- *                               --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n+ * @run main\/othervm\/timeout=300 --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n@@ -118,1 +118,1 @@\n-                   .addFlags(\"-XX:+EnableValhalla\",\n+                   .addFlags(\"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGetfieldChains.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @enablePreview\n@@ -99,1 +100,1 @@\n-                     .addFlags(\"-XX:+EnableValhalla\",\n+                     .addFlags(\"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestInlineFieldNonFlattened.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIsSubstitutableReresolution.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestJNICalls.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+ * @enablePreview\n@@ -57,1 +58,1 @@\n- * @run main\/othervm\/timeout=450 -XX:+EnableValhalla --enable-preview compiler.valhalla.inlinetypes.TestLWorld\n+ * @run main\/othervm\/timeout=450  --enable-preview compiler.valhalla.inlinetypes.TestLWorld\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+ * @enablePreview\n@@ -104,1 +105,1 @@\n-                   .addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:+EnableValhalla\",\n+                   .addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\", \"--enable-preview\",\n@@ -1093,1 +1094,1 @@\n-    static abstract class Test40Abstract { }\n+    static value abstract class Test40Abstract { }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLarvalState.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLoopUnswitchingWithFlatArrayCheck.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNativeClone.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNestmateAccess.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -57,1 +58,1 @@\n-abstract class MyAbstract implements MyInterface {\n+value abstract class MyAbstract implements MyInterface {\n@@ -1871,1 +1872,1 @@\n-            \"-XX:+EnableValhalla\",\n+            \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOptimizeKlassCmp.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestSafepointAtPollReturn.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestStressReturnBuffering.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTrivialMethods.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnexpectedMemBar.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUninitializedValueClass.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+ * @enablePreview\n@@ -67,1 +68,1 @@\n-                   .addFlags(\"-XX:+EnableValhalla\",\n+                   .addFlags(\"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedReturnTypes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedInlineClass.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import jdk.internal.value.PrimitiveClass;\n@@ -49,0 +48,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueRematDuringTypeSharpening.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithSpeculativeTypes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWrongFlatArrayCopyStubWithZGC.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/TestBootClassloader.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}