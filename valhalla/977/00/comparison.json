{"files":[{"patch":"@@ -94,6 +94,0 @@\n-    \/**\n-     * The modifier {@code identity}\n-     * @since 18\n-     *\/\n-    IDENTITY,\n-\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/Modifier.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,1 +109,0 @@\n-    public static final int ACC_VALUE    = 0x0040;\n@@ -141,4 +140,3 @@\n-     * i.e. class\/interface declarations that are expressly declared with\n-     * the modifier `identity' or (b) any concrete class not declared with the\n-     * modifier `value' (c) abstract class not declared `value' but meets various\n-     * stipulations (d) older class files with ACC_SUPER bit set\n+     * i.e. any concrete class not declared with the modifier `value'\n+     * (a) abstract class not declared `value'\n+     * (b) older class files with ACC_SUPER bit set\n@@ -454,2 +452,1 @@\n-                                            SYNCHRONIZED | FINAL | STRICTFP,\n-        AdjustedClassFlags                = ClassFlags | ACC_VALUE;\n+                                            SYNCHRONIZED | FINAL | STRICTFP;\n@@ -490,1 +487,0 @@\n-            if (0 != (flags & IDENTITY_TYPE))   modifiers.add(Modifier.IDENTITY);\n@@ -539,0 +535,1 @@\n+        VALUE(Flags.VALUE_CLASS),\n@@ -544,1 +541,0 @@\n-        VALUE(Flags.VALUE_CLASS),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -418,5 +418,1 @@\n-        return !isInterface() && (flags_field & VALUE_CLASS) != 0;\n-    }\n-\n-    public boolean isConcreteValueClass() {\n-        return isValueClass() && !isAbstract();\n+        return (flags_field & VALUE_CLASS) != 0;\n@@ -429,8 +425,0 @@\n-    public boolean isValueInterface() {\n-        return isInterface() && (flags_field & VALUE_CLASS) != 0;\n-    }\n-\n-    public boolean isIdentityInterface() {\n-        return isInterface() && (flags_field & IDENTITY_TYPE) != 0;\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -238,4 +238,0 @@\n-    public boolean isValueInterface() {\n-        return false;\n-    }\n-\n@@ -246,4 +242,0 @@\n-    public boolean isIdentityInterface() {\n-        return false;\n-    }\n-\n@@ -1039,4 +1031,0 @@\n-        \/*\n-         * Use of this constructor is kinda sorta deprecated, use the other constructor\n-         * that forces the call site to consider and include the class type flavor.\n-         *\/\n@@ -1204,5 +1192,0 @@\n-        @Override\n-        public boolean isValueInterface() {\n-            return tsym != null && tsym.isValueInterface();\n-        }\n-\n@@ -1214,5 +1197,0 @@\n-        @Override\n-        public boolean isIdentityInterface() {\n-            return isInterface() && tsym.isIdentityInterface();\n-        }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -794,10 +794,0 @@\n-            \/\/ an interface must be neither an identity interface nor a value interface to be functional.\n-            List<Type> allInterfaces = closure(origin.type);\n-            for (Type iface : allInterfaces) {\n-                if (iface.isValueInterface()) {\n-                    throw failure(\"not.a.functional.intf.1\", origin, diags.fragment(Fragments.ValueInterfaceNonfunctional));\n-                }\n-                if (iface.isIdentityInterface()) {\n-                    throw failure(\"not.a.functional.intf.1\", origin, diags.fragment(Fragments.IdentityInterfaceNonfunctional));\n-                }\n-            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-    \/** Switch: allow primitive classes ?\n+    \/** Switch: allow value classes ?\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -904,1 +904,1 @@\n-        if (t.isPrimitive() || t.isValueClass() || t.isValueInterface())\n+        if (t.isPrimitive() || t.isValueClass())\n@@ -1374,0 +1374,4 @@\n+            if ((flags & (INTERFACE | ENUM | VALUE_CLASS)) == 0) {\n+                implicit |= IDENTITY_TYPE;\n+            }\n+\n@@ -1436,0 +1440,4 @@\n+                 checkDisjoint(pos, flags,\n+                        INTERFACE,\n+                        VALUE_CLASS)\n+                 &&\n@@ -2752,1 +2760,0 @@\n-        boolean cHasIdentity = (c.tsym.flags() & IDENTITY_TYPE) != 0;\n@@ -2760,1 +2767,1 @@\n-                if (cIsValue &&  identitySuper != null) {\n+                if (cIsValue && identitySuper != null && identitySuper.tsym != syms.objectType.tsym) { \/\/ Object is special\n@@ -2763,6 +2770,0 @@\n-                } else if (cHasIdentity &&  valueSuper != null) {\n-                    log.error(pos, Errors.IdentityTypeHasValueSuperType(c, valueSuper));\n-                    break;\n-                } else if (identitySuper != null && valueSuper != null) {\n-                    log.error(pos, Errors.MutuallyIncompatibleSupers(c, identitySuper, valueSuper));\n-                    break;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2331,1 +2331,1 @@\n-        tree.mods.flags &= AdjustedClassFlags;\n+        tree.mods.flags &= ClassFlags;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1143,9 +1143,2 @@\n-            if (tree.sym != syms.objectType.tsym && tree.sym != syms.recordType.tsym) {\n-                if ((tree.sym.flags() & (ABSTRACT | INTERFACE | VALUE_CLASS)) == 0) {\n-                    tree.sym.flags_field |= IDENTITY_TYPE;\n-                }\n-                if ((tree.sym.flags() & (ABSTRACT | IDENTITY_TYPE | INTERFACE)) == ABSTRACT) {\n-                    if (abstractClassHasImplicitIdentity(tree)) {\n-                        tree.sym.flags_field |= IDENTITY_TYPE;\n-                    }\n-                }\n+            if ((tree.sym.flags() & (INTERFACE | VALUE_CLASS)) == 0) {\n+                tree.sym.flags_field |= IDENTITY_TYPE;\n@@ -1155,44 +1148,0 @@\n-            \/\/ where\n-            private boolean abstractClassHasImplicitIdentity(JCClassDecl tree) {\n-\n-                Type t = tree.sym.type;\n-\n-                if (t == null || t.tsym == null || t.tsym.kind == ERR)\n-                    return false;\n-\n-                if ((t.tsym.flags() & HASINITBLOCK) != 0) {\n-                    return true;\n-                }\n-\n-                \/\/ No instance fields and no arged constructors both mean inner classes cannot be value class supers.\n-                Type encl = t.getEnclosingType();\n-                if (encl != null && encl.hasTag(CLASS)) {\n-                    return true;\n-                }\n-                for (Symbol s : t.tsym.members().getSymbols(NON_RECURSIVE)) {\n-                    switch (s.kind) {\n-                        case VAR:\n-                            if ((s.flags() & STATIC) == 0) {\n-                                return true;\n-                            }\n-                            break;\n-                        case MTH:\n-                            if ((s.flags() & (SYNCHRONIZED | STATIC)) == SYNCHRONIZED) {\n-                                return true;\n-                            } else if (s.isConstructor()) {\n-                                MethodSymbol m = (MethodSymbol)s;\n-                                if (m.getParameters().size() > 0\n-                                        || m.getTypeParameters().size() > 0\n-                                        || m.type.getThrownTypes().nonEmpty()\n-                                        || (m.flags() & EMPTYNOARGCONSTR) == 0\n-                                        || (Check.protection(m.flags()) > Check.protection(m.owner.flags()))) {\n-                                    return true;\n-                                }\n-                            }\n-                            break;\n-                    }\n-                }\n-                return false;\n-            }\n-\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":2,"deletions":53,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2609,3 +2609,0 @@\n-        if (c == syms.objectType.tsym) {\n-            flags &= ~IDENTITY_TYPE; \/\/ jlO lacks identity even while being a concrete class.\n-        }\n@@ -2871,3 +2868,0 @@\n-        if ((flags & (ABSTRACT | INTERFACE | ACC_VALUE | ACC_MODULE)) == 0) {\n-            flags |= ACC_IDENTITY;\n-        }\n@@ -2878,6 +2872,0 @@\n-        if ((flags & ACC_VALUE) != 0) {\n-            flags &= ~ACC_VALUE;\n-            if (allowValueClasses) {\n-                flags |= VALUE_CLASS;\n-            }\n-        }\n@@ -2887,0 +2875,2 @@\n+        } else if ((flags & INTERFACE) == 0 && allowValueClasses) {\n+            flags |= VALUE_CLASS;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1612,1 +1612,1 @@\n-            flags = flags & AdjustedClassFlags;\n+            flags = flags & ClassFlags;\n@@ -1786,3 +1786,1 @@\n-        if ((flags & VALUE_CLASS) != 0)\n-            result |= ACC_VALUE;\n-        if ((flags & IDENTITY_TYPE) != 0)\n+        if ((flags & IDENTITY_TYPE) != 0) {\n@@ -1790,0 +1788,1 @@\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2949,1 +2949,1 @@\n-        if ((isValueModifier() || isIdentityModifier()) && allowValueClasses) {\n+        if ((isValueModifier()) && allowValueClasses) {\n@@ -3550,4 +3550,0 @@\n-                if (isIdentityModifier()) {\n-                    flag = Flags.IDENTITY_TYPE;\n-                    break;\n-                }\n@@ -3827,5 +3823,0 @@\n-        if (name == names.identity) {\n-            if (shouldWarn) {\n-                log.warning(pos, Warnings.RestrictedTypeNotAllowedPreview(name, Source.JDK18));\n-            }\n-        }\n@@ -4911,2 +4902,2 @@\n-                case IDENTIFIER: \/\/ value record R || value value || value identity || new value Comparable() {} ??\n-                    if (next.name() == names.record || next.name() == names.value || next.name() == names.identity\n+                case IDENTIFIER: \/\/ value record R || value value || new value Comparable() {} ??\n+                    if (next.name() == names.record || next.name() == names.value\n@@ -4925,26 +4916,0 @@\n-    protected boolean isIdentityModifier() {\n-        if (token.kind == IDENTIFIER && token.name() == names.identity) {\n-            boolean isIdentityModifier = false;\n-            Token next = S.token(1);\n-            switch (next.kind) {\n-                case PRIVATE: case PROTECTED: case PUBLIC: case STATIC: case TRANSIENT:\n-                case FINAL: case ABSTRACT: case NATIVE: case VOLATILE: case SYNCHRONIZED:\n-                case STRICTFP: case MONKEYS_AT: case DEFAULT: case BYTE: case SHORT:\n-                case CHAR: case INT: case LONG: case FLOAT: case DOUBLE: case BOOLEAN: case VOID:\n-                case CLASS: case INTERFACE: case ENUM:\n-                    isIdentityModifier = true;\n-                    break;\n-                case IDENTIFIER: \/\/ identity record R || identity primitive || || identity identity || identity value || new identity Comparable() {}\n-                    if (next.name() == names.record || next.name() == names.identity\n-                            || next.name() == names.value || (mode & EXPR) != 0)\n-                        isIdentityModifier = true;\n-                    break;\n-            }\n-            if (isIdentityModifier) {\n-                checkSourceLevel(Feature.VALUE_CLASSES);\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n@@ -4980,2 +4945,1 @@\n-                        next.name() == names.value ||\n-                        next.name() == names.identity;\n+                        next.name() == names.value;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":4,"deletions":40,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -493,4 +493,0 @@\n-            case CLASS:\n-                modifiers.remove(Modifier.IDENTITY);\n-                break;\n-\n@@ -500,1 +496,0 @@\n-                modifiers.remove(Modifier.IDENTITY);\n@@ -507,1 +502,0 @@\n-                modifiers.remove(Modifier.IDENTITY);\n@@ -512,1 +506,0 @@\n-                modifiers.remove(Modifier.IDENTITY);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -282,6 +282,0 @@\n-compiler.misc.value.interface.nonfunctional=\\\n-    since it is a value interface\n-\n-compiler.misc.identity.interface.nonfunctional=\\\n-    since it is an identity interface\n-\n@@ -4066,8 +4060,0 @@\n-# 0: type, 1: type\n-compiler.err.identity.type.has.value.super.type=\\\n-    The value type {1} cannot be a supertype of the identity type {0}\n-\n-# 0: type, 1: type, 2: type\n-compiler.err.mutually.incompatible.supers=\\\n-    The type {0} has mutually incompatible supertypes: the identity type {1} and the value type {2}\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n-    public final Name identity;\n@@ -309,1 +308,0 @@\n-        identity = fromString(\"identity\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">DeprecatedClassByAnnotation<\/span>\n+                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">DeprecatedClassByAnnotation<\/span>\n@@ -140,1 +140,1 @@\n-                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">TestClass<\/span>\n+                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">TestClass<\/span>\n@@ -238,1 +238,1 @@\n-                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">TestError<\/span>\n+                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">TestError<\/span>\n@@ -249,1 +249,1 @@\n-                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">TestException<\/span>\n+                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">TestException<\/span>\n@@ -260,1 +260,1 @@\n-                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">TestInterface<\/span>\n+                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">TestInterface<\/span>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDeprecatedDocs\/TestDeprecatedDocs.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public static identity class <\/span><\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public static class <\/span><\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHiddenTag\/TestHiddenTag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">C1<\/span>\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">C1<\/span>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHtmlDefinitionListTag\/TestHtmlDefinitionListTag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n@@ -185,1 +185,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHtmlTag\/TestHtmlTag.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public static identity class <\/span><\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public static class <\/span><\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testInterface\/TestInterface.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n@@ -191,1 +191,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLinkOption\/TestLinkOption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1363,1 +1363,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testModules\/TestModules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n@@ -543,1 +543,1 @@\n-                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-l\\\n+                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-l\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testNewLanguageFeatures\/TestNewLanguageFeatures.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n@@ -269,1 +269,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testOptions\/TestOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n@@ -239,1 +239,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">identity class <\/span><span class=\"el\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">class <\/span><span class=\"el\\\n@@ -244,1 +244,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">class <\/span><span class=\"el\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\"> class <\/span><span class=\"el\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPrivateClasses\/TestPrivateClasses.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n+                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n@@ -97,1 +97,1 @@\n-                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n+                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n@@ -118,1 +118,1 @@\n-                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n+                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n@@ -143,1 +143,1 @@\n-                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n+                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n@@ -174,1 +174,1 @@\n-                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R&lt;T&gt;<\/span>\"\"\",\n+                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R&lt;T&gt;<\/span>\"\"\",\n@@ -472,1 +472,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public identity record <\/span><span c\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public record <\/span><span c\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRecordTypes\/TestRecordTypes.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -97,1 +97,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -102,1 +102,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public non-sealed identity class <\/span><span class=\"element-name type-name-label\">B<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public non-sealed class <\/span><span class=\"element-name type-name-label\">B<\/span>\n@@ -144,1 +144,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -192,1 +192,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -215,1 +215,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -238,1 +238,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -263,1 +263,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -288,1 +288,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -312,1 +312,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -336,1 +336,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSealedTypes\/TestSealedTypes.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">identity class <\/span><span class=\"el\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">class <\/span><span class=\"el\\\n@@ -95,1 +95,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">identity class <\/span><span class=\"el\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">class <\/span><span class=\"el\\\n@@ -469,1 +469,1 @@\n-                    <\/span><span class=\"modifiers\">identity class <\/span><span class=\"element-name type-name-\\\n+                    <\/span><span class=\"modifiers\">class <\/span><span class=\"element-name type-name-\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTypeAnnotations\/TestTypeAnnotations.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-                    public identity class <\/span><span class=\"element-name\"><a href=\"..\/src-html\/pkg\/ClassUse\\\n+                    public class <\/span><span class=\"element-name\"><a href=\"..\/src-html\/pkg\/ClassUse\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTypeParams\/TestTypeParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,51 +65,0 @@\n-\n-    @Test\n-    public void testIdentityClassModifiers(Path base) throws IOException {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"package p; public identity class IdentityClass {}\");\n-\n-        javadoc(\"-d\", base.resolve(\"out\").toString(),\n-                \"-sourcepath\", src.toString(),\n-                \"p\");\n-        checkExit(Exit.OK);\n-\n-        checkOutput(\"p\/IdentityClass.html\", true,\n-                \"\"\"\n-                <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">IdentityClass<\/span>\n-                \"\"\");\n-    }\n-\n-    @Test\n-    public void testValueInterfaceModifiers(Path base) throws IOException {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"package p; public value interface ValueInterface {}\");\n-\n-        javadoc(\"-d\", base.resolve(\"out\").toString(),\n-                \"-sourcepath\", src.toString(),\n-                \"p\");\n-        checkExit(Exit.OK);\n-\n-        checkOutput(\"p\/ValueInterface.html\", true,\n-                \"\"\"\n-                <div class=\"type-signature\"><span class=\"modifiers\">public value interface <\/span><span class=\"element-name type-name-label\">ValueInterface<\/span><\/div>\n-                \"\"\");\n-    }\n-\n-    @Test\n-    public void testIdentityInterfaceModifiers(Path base) throws IOException {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"package p; public identity interface IdentityInterface {}\");\n-\n-        javadoc(\"-d\", base.resolve(\"out\").toString(),\n-                \"-sourcepath\", src.toString(),\n-                \"p\");\n-        checkExit(Exit.OK);\n-\n-        checkOutput(\"p\/IdentityInterface.html\", true,\n-                \"\"\"\n-                <div class=\"type-signature\"><span class=\"modifiers\">public interface <\/span><span class=\"element-name type-name-label\">IdentityInterface<\/span><\/div>\n-                \"\"\");\n-    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testValueClasses\/TestValueClasses.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n---- ABSTRACT\n+--- IDENTITY ABSTRACT\n@@ -50,1 +50,1 @@\n---- STATIC ABSTRACT\n+--- STATIC IDENTITY ABSTRACT\n@@ -58,1 +58,1 @@\n---- ABSTRACT\n+--- IDENTITY ABSTRACT\n@@ -60,1 +60,1 @@\n---- PRIVATE STATIC ABSTRACT\n+--- PRIVATE STATIC IDENTITY ABSTRACT\n@@ -108,1 +108,1 @@\n---- PUBLIC ABSTRACT\n+--- PUBLIC IDENTITY ABSTRACT\n@@ -110,1 +110,1 @@\n---- PROTECTED STATIC ABSTRACT\n+--- PROTECTED STATIC IDENTITY ABSTRACT\n@@ -118,1 +118,1 @@\n---- PUBLIC ABSTRACT\n+--- PUBLIC IDENTITY ABSTRACT\n@@ -120,1 +120,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n@@ -237,1 +237,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n@@ -241,1 +241,1 @@\n---- PROTECTED STATIC ABSTRACT\n+--- PROTECTED STATIC IDENTITY ABSTRACT\n@@ -261,1 +261,1 @@\n---- PRIVATE STATIC ABSTRACT\n+--- PRIVATE STATIC IDENTITY ABSTRACT\n@@ -265,1 +265,1 @@\n---- STATIC ABSTRACT\n+--- STATIC IDENTITY ABSTRACT\n@@ -326,1 +326,1 @@\n---- PUBLIC ABSTRACT\n+--- PUBLIC IDENTITY ABSTRACT\n@@ -328,1 +328,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n@@ -331,1 +331,1 @@\n---- PUBLIC ABSTRACT\n+--- PUBLIC IDENTITY ABSTRACT\n@@ -333,1 +333,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n@@ -336,1 +336,1 @@\n---- PUBLIC ABSTRACT\n+--- PUBLIC IDENTITY ABSTRACT\n@@ -338,1 +338,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n@@ -341,1 +341,1 @@\n---- PUBLIC ABSTRACT\n+--- PUBLIC IDENTITY ABSTRACT\n@@ -343,1 +343,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n@@ -404,1 +404,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n@@ -406,1 +406,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n@@ -408,1 +408,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n@@ -410,1 +410,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC IDENTITY ABSTRACT\n","filename":"test\/langtools\/tools\/javac\/ClassFileModifiers\/ClassModifiers.out","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.illegal.combination.of.modifiers\n-\/\/ key: compiler.err.identity.type.has.value.super.type\n-\/\/ key: compiler.err.value.type.has.identity.super.type\n-\/\/ key: compiler.err.mutually.incompatible.supers\n-\n-value identity class IdentityValueClass {}\n-\n-value interface VI {}\n-class C implements VI {}\n-\n-identity interface II {}\n-value class V implements II {}\n-abstract class B implements VI, II {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IdentityValueClash.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.bad.functional.intf.anno.1\n-\/\/ key: compiler.misc.not.a.functional.intf.1\n-\/\/ key: compiler.misc.value.interface.nonfunctional\n-\/\/ key: compiler.misc.identity.interface.nonfunctional\n-\n-@FunctionalInterface\n-value interface I {\n-    void m();\n-}\n-\n-identity interface J {\n-    void m();\n-}\n-\n-@FunctionalInterface\n-interface K extends J {\n-}\n-\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueOrIdentityInterfacesAreNotFunctional.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -24,1 +24,1 @@\n-package p;\n+\/\/ key: compiler.err.value.type.has.identity.super.type\n@@ -26,3 +26,2 @@\n-public class C extends p.q.Q implements I {\n-    public static String cString =  \"CClass\";\n-}\n+abstract class AC {}\n+value class V extends AC {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueWithIdentitySuper.java","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/describeConstable\/p\/C.java","status":"copied"},{"patch":"@@ -119,1 +119,1 @@\n-                \"- compiler.note.proc.messager: visiting: NonSealedClass1 Modifiers: [non-sealed, identity]\",\n+                \"- compiler.note.proc.messager: visiting: NonSealedClass1 Modifiers: [non-sealed]\",\n@@ -121,1 +121,1 @@\n-                \"- compiler.note.proc.messager: visiting: SealedClass Modifiers: [sealed, identity]\",\n+                \"- compiler.note.proc.messager: visiting: SealedClass Modifiers: [sealed]\",\n@@ -125,1 +125,1 @@\n-                \"- compiler.note.proc.messager: visiting: FinalClass Modifiers: [identity, final]\",\n+                \"- compiler.note.proc.messager: visiting: FinalClass Modifiers: [final]\",\n@@ -127,1 +127,1 @@\n-                \"- compiler.note.proc.messager: visiting: NonSealedClass2 Modifiers: [non-sealed, identity]\",\n+                \"- compiler.note.proc.messager: visiting: NonSealedClass2 Modifiers: [non-sealed]\",\n@@ -129,1 +129,1 @@\n-                \"- compiler.note.proc.messager: visiting: ClassOutOfSealedHierarchy Modifiers: [identity]\",\n+                \"- compiler.note.proc.messager: visiting: ClassOutOfSealedHierarchy Modifiers: []\",\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestSealed.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -102,3 +102,1 @@\n-                value interface ValueInterface {}\n-\n-                identity interface IdentityInterface {}\n+                interface Interface {}\n@@ -108,1 +106,1 @@\n-                identity class IdentityClass {}\n+                class IdentityClass {}\n@@ -113,2 +111,1 @@\n-                \"- compiler.note.proc.messager: visiting: ValueInterface Modifiers: [abstract, value]\",\n-                \"- compiler.note.proc.messager: visiting: IdentityInterface Modifiers: [abstract, identity]\",\n+                \"- compiler.note.proc.messager: visiting: Interface Modifiers: [abstract]\",\n@@ -117,1 +114,1 @@\n-                \"- compiler.note.proc.messager: visiting: IdentityClass Modifiers: [identity]\",\n+                \"- compiler.note.proc.messager: visiting: IdentityClass Modifiers: []\",\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestValueClasses.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-   work correctly with primitive types.\n+   work correctly with value classes.\n@@ -48,1 +48,1 @@\n-abstract class Base<T> {\n+abstract value class Base<T> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/AsSuperTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AsSuperTests.java","status":"renamed"},{"patch":"@@ -36,1 +36,1 @@\n-public class NoAutoInheritanceOfIdentityFlagBit { \/\/ ACC_IDENTITY - concrete class\n+public class NoAutoInheritanceOfIdentityFlagBit { \/\/ ACC_IDENTITY not a value class\n@@ -38,1 +38,1 @@\n-    abstract class A {}  \/\/ ACC_IDENTITY: Inner class\n+    abstract class A {}  \/\/ ACC_IDENTITY not a value class\n@@ -40,1 +40,1 @@\n-    static abstract class B {}  \/\/ NO ACC_IDENTITY: No an inner class with an enclosing instance\n+    static abstract class B {}  \/\/ ACC_IDENTITY not a value class\n@@ -42,3 +42,1 @@\n-    static abstract class C {\n-        int f; \/\/ ACC_IDENTITY since an instance field is declared.\n-    }\n+    static abstract class C {} \/\/ ACC_IDENTITY not a value class\n@@ -50,1 +48,1 @@\n-    static abstract class F extends C {} \/\/ No ACC_IDENTITY - since no auto propagation.\n+    static abstract class F extends C {} \/\/ ACC_IDENTITY no value class\n@@ -62,2 +60,2 @@\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should NOT be set!\");\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n@@ -78,2 +76,2 @@\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should NOT be set!\");\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NoAutoInheritanceOfIdentityFlagBit.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    public static abstract class A0 { \/\/ Trivial constructor - no induced identity.\n+    public static abstract class A0 { \/\/ ACC_IDENTITY\n@@ -44,2 +44,2 @@\n-    public static abstract class A1 {\n-        private A1() {} \/\/ restricted constructor\n+    public static abstract class A1 { \/\/ ACC_IDENTITY\n+        private A1() {}\n@@ -48,2 +48,2 @@\n-    public static abstract class A2 {\n-        public <T> A2() {} \/\/ generic constructor\n+    public static abstract class A2 { \/\/ ACC_IDENTITY\n+        public <T> A2() {}\n@@ -52,2 +52,2 @@\n-    public static abstract class A3 {\n-        public A3() throws RuntimeException {} \/\/ throws\n+    public static abstract class A3 { \/\/ ACC_IDENTITY\n+        public A3() throws RuntimeException {}\n@@ -56,2 +56,2 @@\n-    public static abstract class A4 {\n-        public A4(int x) {} \/\/ not no-arg\n+    public static abstract class A4 { \/\/ ACC_IDENTITY\n+        public A4(int x) {}\n@@ -60,1 +60,1 @@\n-    public static abstract class A5 {\n+    public static abstract class A5 { \/\/ ACC_IDENTITY\n@@ -68,2 +68,2 @@\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should NOT be set!\");\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NontrivialCtorInducedIdentity.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-       \/\/ NOT ACC_IDENTITY  - flags bits are not auto inherited from extended identity class.\n+       \/\/ ACC_IDENTITY\n@@ -43,1 +43,1 @@\n-    static abstract identity class A1 {\n+    static abstract class A1 {\n@@ -52,1 +52,1 @@\n-        \/\/ NOT ACC_IDENTITY - flags bits are not auto inherited from extended identity class.\n+        \/\/ ACC_IDENTITY\n@@ -56,1 +56,1 @@\n-        \/\/ ACC_IDENTITY as it declares a non-empty initializer block.\n+        \/\/ ACC_IDENTITY\n@@ -63,1 +63,1 @@\n-        \/\/ NOT ACC_IDENTITY as flag bits are not auto inherited from the extended implicit identity class.\n+        \/\/ ACC_IDENTITY\n@@ -67,1 +67,1 @@\n-        \/\/ ACC_IDENTITY as declares a synchronized method.\n+        \/\/ ACC_IDENTITY\n@@ -73,1 +73,1 @@\n-        \/\/ NOT ACC_IDENTITY as flag bits are not auto inherited from the extended implicit identity class.\n+        \/\/ ACC_IDENTITY\n@@ -77,1 +77,1 @@\n-        \/\/ ACC_IDENTITY as it is an inner class\n+        \/\/ ACC_IDENTITY\n@@ -81,1 +81,1 @@\n-        \/\/ ACC_IDENTITY as it defines a arg'ed constructor.\n+        \/\/ ACC_IDENTITY\n@@ -86,1 +86,1 @@\n-        \/\/ !ACC_IDENTITY as its constructor is deemed empty due to mere vacuous chaining.\n+        \/\/ ACC_IDENTITY\n@@ -92,1 +92,1 @@\n-        \/\/ ACC_IDENTITY as it defines a non empty constructor.\n+        \/\/ ACC_IDENTITY\n@@ -98,1 +98,1 @@\n-    static abstract class A11 { \/\/ !ACC_IDENTITY.\n+    static abstract value class A11 { \/\/ ACC_IDENTITY.\n@@ -119,1 +119,1 @@\n-        \/\/ !ACC_IDENTITY\n+        \/\/ ACC_IDENTITY\n@@ -125,2 +125,2 @@\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should NOT be set!\");\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n@@ -137,2 +137,2 @@\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should NOT be set!\");\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n@@ -145,2 +145,2 @@\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should NOT be set!\");\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n@@ -153,2 +153,2 @@\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should NOT be set!\");\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n@@ -165,2 +165,2 @@\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should not be set!\");\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n@@ -172,1 +172,1 @@\n-        \/\/ The following are all proper non-identity classes\n+        \/\/ The following two classes are proper non-identity classes\n@@ -182,2 +182,2 @@\n-        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n-            throw new Exception(\"ACC_IDENTITY flag should not be set!\");\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PermitsValueTest.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @run testng ValueObjectCompilationTests\n+ * @run junit ValueObjectCompilationTests\n@@ -61,2 +61,1 @@\n-import static org.testng.Assert.assertTrue;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -68,2 +67,1 @@\n-@Test\n-public class ValueObjectCompilationTests extends CompilationTestCase {\n+class ValueObjectCompilationTests extends CompilationTestCase {\n@@ -75,1 +73,2 @@\n-    public void testAbstractValueClassConstraints() {\n+    @Test\n+    void testAbstractValueClassConstraints() {\n@@ -112,5 +111,2 @@\n-    public void testAnnotationsConstraints() {\n-        assertFail(\"compiler.err.illegal.combination.of.modifiers\",\n-                \"\"\"\n-                identity @interface IA {}\n-                \"\"\");\n+    @Test\n+    void testAnnotationsConstraints() {\n@@ -123,1 +119,2 @@\n-    public void testCheckFeatureSourceLevel() {\n+    @Test\n+    void testCheckFeatureSourceLevel() {\n@@ -134,1 +131,2 @@\n-    public void testSuperClassConstraints() {\n+    @Test\n+    void testSuperClassConstraints() {\n@@ -137,1 +135,1 @@\n-                abstract class I { \/\/ identity class since it declares an instance field.\n+                abstract class I {\n@@ -146,1 +144,1 @@\n-                    abstract class I {} \/\/ has identity since is an inner class\n+                    abstract class I {}\n@@ -153,1 +151,1 @@\n-                abstract class I { \/\/ has identity since it declared a synchronized instance method.\n+                abstract class I {\n@@ -161,1 +159,1 @@\n-                abstract class I { \/\/ has identity since it declares an instance initializer\n+                abstract class I {\n@@ -169,1 +167,1 @@\n-                abstract class I { \/\/ has identity since it declares a non-trivial constructor\n+                abstract class I {\n@@ -182,12 +180,2 @@\n-    public void testSynchronizeOnValueInterfaceInstance() {\n-        assertFail(\"compiler.err.type.found.req\",\n-                \"\"\"\n-                value interface VI {\n-                    default void foo(VI vi) {\n-                        synchronized (vi) {} \/\/ Error\n-                    }\n-                }\n-                \"\"\");\n-    }\n-\n-    public void testRepeatedModifiers() {\n+    @Test\n+    void testRepeatedModifiers() {\n@@ -204,1 +192,2 @@\n-    public void testParserTest() {\n+    @Test\n+    void testParserTest() {\n@@ -246,1 +235,2 @@\n-    public void testSemanticsViolations() {\n+    @Test\n+    void testSemanticsViolations() {\n@@ -295,8 +285,0 @@\n-        assertFail(\"compiler.err.illegal.combination.of.modifiers\",\n-                \"\"\"\n-                value identity class ValueIdentity {}\n-                \"\"\");\n-        assertFail(\"compiler.err.illegal.combination.of.modifiers\",\n-                \"\"\"\n-                identity value class IdentityValue {}\n-                \"\"\");\n@@ -393,1 +375,2 @@\n-    public void testNontrivialConstructor() {\n+    @Test\n+    void testNontrivialConstructor() {\n@@ -435,122 +418,2 @@\n-    public void testFunctionalInterface() {\n-        assertFail(\"compiler.err.bad.functional.intf.anno.1\",\n-                \"\"\"\n-                @FunctionalInterface\n-                identity interface I { \/\/ Error\n-                    void m();\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.bad.functional.intf.anno.1\",\n-                \"\"\"\n-                @FunctionalInterface\n-                value interface K { \/\/ Error\n-                    void m();\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.prob.found.req\",\n-                \"\"\"\n-                identity interface L {\n-                    void m();\n-                }\n-                class Test {\n-                    void foo() {\n-                        var t = (L) () -> {}; \/\/ Error\n-                    }\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.prob.found.req\",\n-                \"\"\"\n-                value interface M {\n-                    void m();\n-                }\n-                class Test {\n-                    void foo() {\n-                        var u = (M) () -> {}; \/\/ Error\n-                    }\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.bad.functional.intf.anno.1\",\n-                \"\"\"\n-                identity interface I {\n-                    void m();\n-                }\n-\n-                @FunctionalInterface\n-                interface J extends I  {}\n-                \"\"\");\n-        assertFail(\"compiler.err.bad.functional.intf.anno.1\",\n-                \"\"\"\n-                value interface I {\n-                    void m();\n-                }\n-\n-                @FunctionalInterface\n-                interface J extends I  {}\n-                \"\"\");\n-        assertFail(\"compiler.err.prob.found.req\",\n-                \"\"\"\n-                identity interface I {}\n-                interface K extends I {}\n-                interface J {\n-                    void m();\n-                }\n-                class Test {\n-                    void foo() {\n-                        J j = (J&K)() -> {};\n-                    }\n-                }\n-                \"\"\");\n-        assertFail(\"compiler.err.prob.found.req\",\n-                \"\"\"\n-                value interface I {}\n-                interface K extends I {}\n-                interface J {\n-                    void m();\n-                }\n-                class Test {\n-                    void foo() {\n-                        J j = (J&K)() -> {};\n-                    }\n-                }\n-                \"\"\");\n-    }\n-\n-    public void testSupers() {\n-        assertFail(\"compiler.err.mutually.incompatible.supers\",\n-                \"\"\"\n-                identity interface II {}\n-                value interface VI {}\n-                abstract class X implements II, VI {}\n-                \"\"\");\n-        assertFail(\"compiler.err.value.type.has.identity.super.type\",\n-                \"\"\"\n-                identity interface II {}\n-                interface GII extends II {} \/\/ OK.\n-                value interface BVI extends GII {} \/\/ Error\n-                \"\"\");\n-        assertFail(\"compiler.err.identity.type.has.value.super.type\",\n-                \"\"\"\n-                value interface VI {}\n-                interface GVI extends VI {} \/\/ OK.\n-                identity interface BII extends GVI {} \/\/ Error\n-                \"\"\");\n-        assertFail(\"compiler.err.value.type.has.identity.super.type\",\n-                \"\"\"\n-                identity interface II {}\n-                value class BVC implements II {} \/\/ Error\n-                \"\"\");\n-        assertFail(\"compiler.err.identity.type.has.value.super.type\",\n-                \"\"\"\n-                value interface VI {}\n-                class BIC implements VI {} \/\/ Error\n-                \"\"\");\n-        assertFail(\"compiler.err.identity.type.has.value.super.type\",\n-                \"\"\"\n-                value interface I {}\n-                class Test {\n-                    I i = new I() {};\n-                }\n-                \"\"\");\n-    }\n-\n-    public void testInteractionWithSealedClasses() {\n+    @Test\n+    void testInteractionWithSealedClasses() {\n@@ -562,1 +425,2 @@\n-        );assertOK(\n+        );\n+        assertOK(\n@@ -564,1 +428,1 @@\n-                abstract sealed value interface SI {}\n+                abstract sealed interface SI {}\n@@ -570,4 +434,4 @@\n-                abstract sealed identity class SC {}\n-                final identity class IC extends SC {}\n-                non-sealed identity class IC2 extends SC {}\n-                final identity class IC3 extends IC2 {}\n+                abstract sealed class SC {}\n+                final class IC extends SC {}\n+                non-sealed class IC2 extends SC {}\n+                final class IC3 extends IC2 {}\n@@ -578,4 +442,4 @@\n-                abstract sealed identity interface SI {}\n-                final identity class IC implements SI {}\n-                non-sealed identity class IC2 implements SI {}\n-                final identity class IC3 extends IC2 {}\n+                abstract sealed interface SI {}\n+                final class IC implements SI {}\n+                non-sealed class IC2 implements SI {}\n+                final class IC3 extends IC2 {}\n@@ -598,1 +462,2 @@\n-    public void testCheckClassFileFlags() throws Exception {\n+    @Test\n+    void testCheckClassFileFlags() throws Exception {\n@@ -619,1 +484,0 @@\n-                    \/\/ abstract inner class is implicitly an `identity` class\n@@ -628,1 +492,1 @@\n-                    assertTrue((classFile.access_flags.flags & Flags.ACC_IDENTITY) != 0);\n+                    Assert.check((classFile.access_flags.flags & Flags.ACC_IDENTITY) != 0);\n@@ -635,2 +499,1 @@\n-                identity interface I {}\n-                class Sub implements I {}\n+                class C {}\n@@ -640,1 +503,0 @@\n-                    \/\/ declares a non-static field so it is implicitly an identity class\n@@ -646,1 +508,0 @@\n-                    \/\/ declares a synchronized method so it is implicitly an identity class\n@@ -652,1 +513,0 @@\n-                    \/\/ declares a synchronized method so it is implicitly an identity class\n@@ -659,1 +519,0 @@\n-                    \/\/ declares an instance initializer so it is implicitly an identity class\n@@ -665,1 +524,0 @@\n-                    \/\/ declares a non-trivial constructor\n@@ -672,3 +530,0 @@\n-                \"\"\"\n-                    identity enum E {}\n-                \"\"\",\n@@ -677,3 +532,0 @@\n-                \"\"\",\n-                \"\"\"\n-                   identity record R() {}\n@@ -685,2 +537,1 @@\n-                assertTrue(classFile.access_flags.is(Flags.ACC_IDENTITY));\n-                assertTrue(!classFile.access_flags.is(Flags.VALUE_CLASS));\n+                Assert.check(classFile.access_flags.is(Flags.ACC_IDENTITY));\n@@ -693,4 +544,3 @@\n-                            value interface I {}\n-                            abstract class A implements I {} \/\/ not a value class as it doens't have the value modifier\n-                            value class Sub extends A {} \/\/implicitly final\n-                            \"\"\";\n+                    abstract value class A {}\n+                    value class Sub extends A {} \/\/implicitly final\n+                    \"\"\";\n@@ -702,1 +552,1 @@\n-                        assertTrue((classFile.access_flags.flags & (Flags.VALUE_CLASS | Flags.FINAL)) != 0);\n+                        Assert.check((classFile.access_flags.flags & (Flags.VALUE_CLASS | Flags.FINAL)) != 0);\n@@ -705,4 +555,1 @@\n-                        assertTrue((classFile.access_flags.flags & (Flags.ABSTRACT)) != 0);\n-                        break;\n-                    case \"I\":\n-                        assertTrue((classFile.access_flags.flags & (Flags.INTERFACE | Flags.VALUE_CLASS)) != 0);\n+                        Assert.check((classFile.access_flags.flags & (Flags.ABSTRACT)) != 0);\n@@ -738,1 +585,1 @@\n-                        assertTrue(field.access_flags.is(Flags.FINAL));\n+                        Assert.check(field.access_flags.is(Flags.FINAL));\n@@ -745,1 +592,2 @@\n-    public void testSelectors() throws Exception {\n+    @Test\n+    void testSelectors() throws Exception {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":51,"deletions":203,"binary":false,"changes":254,"status":"modified"}]}