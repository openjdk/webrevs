{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n@@ -50,1 +51,0 @@\n-import java.lang.classfile.attribute.PreloadAttribute;\n@@ -89,1 +89,1 @@\n-                LocalVariableTableAttribute, LocalVariableTypeTableAttribute,\n+                LoadableDescriptorsAttribute, LocalVariableTableAttribute, LocalVariableTypeTableAttribute,\n@@ -93,1 +93,1 @@\n-                PermittedSubclassesAttribute, PreloadAttribute,\n+                PermittedSubclassesAttribute,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attribute.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n@@ -67,1 +68,0 @@\n-import java.lang.classfile.attribute.PreloadAttribute;\n@@ -133,0 +133,3 @@\n+    \/** LoadableDescriptors *\/\n+    public static final String NAME_LOADABLE_DESCRIPTORS = \"LoadableDescriptors\";\n+\n@@ -169,3 +172,0 @@\n-    \/** Preload *\/\n-    public static final String NAME_PRELOAD = \"Preload\";\n-\n@@ -727,3 +727,3 @@\n-    \/** Attribute mapper for the {@code Preload} attribute *\/\n-    public static final AttributeMapper<PreloadAttribute>\n-            PRELOAD = new AbstractAttributeMapper<>(NAME_PRELOAD) {\n+    \/** Attribute mapper for the {@code LoadableDescriptors} attribute *\/\n+    public static final AttributeMapper<LoadableDescriptorsAttribute>\n+            LOADABLE_DESCRIPTORS = new AbstractAttributeMapper<>(NAME_LOADABLE_DESCRIPTORS) {\n@@ -731,2 +731,2 @@\n-                public PreloadAttribute readAttribute(AttributedElement e, ClassReader cf, int p) {\n-                    return new BoundAttribute.BoundPreloadAttribute(cf, this, p);\n+                public LoadableDescriptorsAttribute readAttribute(AttributedElement e, ClassReader cf, int p) {\n+                    return new BoundAttribute.BoundLoadableDescriptorsAttribute(cf, this, p);\n@@ -736,2 +736,2 @@\n-                protected void writeBody(BufWriter buf, PreloadAttribute attr) {\n-                    buf.writeListIndices(attr.preloads());\n+                protected void writeBody(BufWriter buf, LoadableDescriptorsAttribute attr) {\n+                    buf.writeListIndices(attr.loadableDescriptors());\n@@ -1030,0 +1030,1 @@\n+            LOADABLE_DESCRIPTORS,\n@@ -1042,1 +1043,0 @@\n-            PRELOAD,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attributes.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n@@ -40,1 +41,0 @@\n-import java.lang.classfile.attribute.PreloadAttribute;\n@@ -67,0 +67,1 @@\n+                LoadableDescriptorsAttribute,\n@@ -69,1 +70,1 @@\n-                NestHostAttribute, NestMembersAttribute, PermittedSubclassesAttribute, PreloadAttribute,\n+                NestHostAttribute, NestMembersAttribute, PermittedSubclassesAttribute,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassElement.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.constant.ClassDesc;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LoadableDescriptorsAttribute\n+        extends Attribute<LoadableDescriptorsAttribute>, ClassElement\n+        permits BoundAttribute.BoundLoadableDescriptorsAttribute, UnboundAttribute.UnboundLoadableDescriptorsAttribute {\n+\n+    \/**\n+     * {@return the list of loadable descriptors}\n+     *\/\n+    List<Utf8Entry> loadableDescriptors();\n+\n+    \/**\n+     * {@return a {@code LoadableDescriptors} attribute}\n+     * @param loadableDescriptors the loadable descriptors\n+     *\/\n+    static LoadableDescriptorsAttribute of(List<Utf8Entry> loadableDescriptors) {\n+        return new UnboundAttribute.UnboundLoadableDescriptorsAttribute(loadableDescriptors);\n+    }\n+\n+    \/**\n+     * {@return a {@code LoadableDescriptors} attribute}\n+     * @param loadableDescriptors the loadable descriptors\n+     *\/\n+    static LoadableDescriptorsAttribute of(Utf8Entry... loadableDescriptors) {\n+        return of(List.of(loadableDescriptors));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LoadableDescriptorsAttribute.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.lang.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.ClassElement;\n-import java.lang.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-import jdk.internal.classfile.impl.Util;\n-import jdk.internal.javac.PreviewFeature;\n-\n-\/**\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n-public sealed interface PreloadAttribute\n-        extends Attribute<PreloadAttribute>, ClassElement\n-        permits BoundAttribute.BoundPreloadAttribute, UnboundAttribute.UnboundPreloadAttribute {\n-\n-    \/**\n-     * {@return the list of preload classes}\n-     *\/\n-    List<ClassEntry> preloads();\n-\n-    \/**\n-     * {@return a {@code Preload} attribute}\n-     * @param preloads the preload classes\n-     *\/\n-    static PreloadAttribute of(List<ClassEntry> preloads) {\n-        return new UnboundAttribute.UnboundPreloadAttribute(preloads);\n-    }\n-\n-    \/**\n-     * {@return a {@code Preload} attribute}\n-     * @param preloads the preload classes\n-     *\/\n-    static PreloadAttribute of(ClassEntry... preloads) {\n-        return of(List.of(preloads));\n-    }\n-\n-    \/**\n-     * {@return a {@code Preload} attribute}\n-     * @param preloads the preload classes\n-     *\/\n-    static PreloadAttribute ofSymbols(List<ClassDesc> preloads) {\n-        return of(Util.entryList(preloads));\n-    }\n-\n-    \/**\n-     * {@return a {@code Preload} attribute}\n-     * @param preloads the preload classes\n-     *\/\n-    static PreloadAttribute ofSymbols(ClassDesc... preloads) {\n-        return ofSymbols(Arrays.asList(preloads));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/PreloadAttribute.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -457,1 +457,1 @@\n- *     | PreloadAttribute?(List<ClassEntry> preloads)\n+ *     | LoadableDescriptorsAttribute?(List<Utf8Entry> loadableDescriptors)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -358,2 +358,2 @@\n-        \/\/ generate Preload attribute if it references any value class\n-        PreloadAttributeBuilder builder = new PreloadAttributeBuilder(targetClass);\n+        \/\/ generate LoadableDescriptors attribute if it references any value class\n+        LoadableDescriptorsAttributeBuilder builder = new LoadableDescriptorsAttributeBuilder(targetClass);\n@@ -583,1 +583,1 @@\n-     * Preload attribute builder\n+     * LoadableDescriptors attribute builder\n@@ -585,5 +585,5 @@\n-    static class PreloadAttributeBuilder {\n-        private final Set<Class<?>> preloadClasses = new HashSet<>();\n-        PreloadAttributeBuilder(Class<?> targetClass) {\n-            if (requiresPreload(targetClass)) {\n-                preloadClasses.add(targetClass);\n+    static class LoadableDescriptorsAttributeBuilder {\n+        private final Set<String> loadableDescriptors = new HashSet<>();\n+        LoadableDescriptorsAttributeBuilder(Class<?> targetClass) {\n+            if (requiresLoadableDescriptors(targetClass)) {\n+                loadableDescriptors.add(Type.getDescriptor(targetClass));\n@@ -596,1 +596,1 @@\n-        PreloadAttributeBuilder add(MethodType mt) {\n+        LoadableDescriptorsAttributeBuilder add(MethodType mt) {\n@@ -599,2 +599,2 @@\n-                if (requiresPreload(paramType)) {\n-                    preloadClasses.add(paramType);\n+                if (requiresLoadableDescriptors(paramType)) {\n+                    loadableDescriptors.add(Type.getDescriptor(paramType));\n@@ -604,2 +604,2 @@\n-            if (requiresPreload(mt.returnType())) {\n-                preloadClasses.add(mt.returnType());\n+            if (requiresLoadableDescriptors(mt.returnType())) {\n+                loadableDescriptors.add(Type.getDescriptor(mt.returnType()));\n@@ -610,1 +610,1 @@\n-        PreloadAttributeBuilder add(MethodType... mtypes) {\n+        LoadableDescriptorsAttributeBuilder add(MethodType... mtypes) {\n@@ -617,6 +617,2 @@\n-        boolean requiresPreload(Class<?> cls) {\n-            Class<?> c = cls;\n-            while (c.isArray()) {\n-                c = c.getComponentType();\n-            }\n-            return c.isValue();\n+        boolean requiresLoadableDescriptors(Class<?> cls) {\n+            return cls.isValue();\n@@ -626,1 +622,1 @@\n-            return preloadClasses.isEmpty();\n+            return loadableDescriptors.isEmpty();\n@@ -630,1 +626,1 @@\n-            return new Attribute(\"Preload\") {\n+            return new Attribute(\"LoadableDescriptors\") {\n@@ -638,3 +634,3 @@\n-                    attr.putShort(preloadClasses.size());\n-                    for (Class<?> c : preloadClasses) {\n-                        attr.putShort(cw.newClass(Type.getInternalName(c)));\n+                    attr.putShort(loadableDescriptors.size());\n+                    for (String s : loadableDescriptors) {\n+                        attr.putShort(cw.newUTF8(s));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -458,1 +458,1 @@\n-     * are listed in the preload attribute of the interface class.  The\n+     * are listed in the loadable descriptors attribute of the interface class.  The\n@@ -461,1 +461,1 @@\n-     * generated with no preload attributes as it essentially has no effect.\n+     * generated with no loadable descriptors attributes as it essentially has no effect.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -938,3 +938,3 @@\n-    public static final class BoundPreloadAttribute extends BoundAttribute<PreloadAttribute>\n-            implements PreloadAttribute {\n-        private List<ClassEntry> preloads = null;\n+    public static final class BoundLoadableDescriptorsAttribute extends BoundAttribute<LoadableDescriptorsAttribute>\n+            implements LoadableDescriptorsAttribute {\n+        private List<Utf8Entry> loadableDescriptors = null;\n@@ -942,1 +942,1 @@\n-        public BoundPreloadAttribute(ClassReader cf, AttributeMapper<PreloadAttribute> mapper, int pos) {\n+        public BoundLoadableDescriptorsAttribute(ClassReader cf, AttributeMapper<LoadableDescriptorsAttribute> mapper, int pos) {\n@@ -947,3 +947,3 @@\n-        public List<ClassEntry> preloads() {\n-            if (preloads == null) {\n-                preloads = readEntryList(payloadStart);\n+        public List<Utf8Entry> loadableDescriptors() {\n+            if (loadableDescriptors == null) {\n+                loadableDescriptors = readEntryList(payloadStart);\n@@ -951,1 +951,1 @@\n-            return preloads;\n+            return loadableDescriptors;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -904,3 +904,3 @@\n-                case PreloadAttribute pa ->\n-                    nodes.add(list(\"preload classes\", \"class\", pa.preloads().stream()\n-                            .map(e -> e.name().stringValue())));\n+                case LoadableDescriptorsAttribute pa ->\n+                    nodes.add(list(\"loadable descriptors\", \"descriptor\", pa.loadableDescriptors().stream()\n+                            .map(e -> e.stringValue())));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n@@ -59,1 +60,0 @@\n-import java.lang.classfile.attribute.PreloadAttribute;\n@@ -146,4 +146,2 @@\n-            case PreloadAttribute pa ->\n-                clb.with(PreloadAttribute.ofSymbols(\n-                        pa.preloads().stream().map(pc ->\n-                                map(pc.asSymbol())).toList()));\n+            case LoadableDescriptorsAttribute pa ->\n+                clb.with(LoadableDescriptorsAttribute.of(pa.loadableDescriptors()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import java.lang.classfile.attribute.LoadableDescriptorsAttribute;\n@@ -75,1 +76,0 @@\n-import java.lang.classfile.attribute.PreloadAttribute;\n@@ -433,4 +433,4 @@\n-    public static final class UnboundPreloadAttribute\n-            extends UnboundAttribute<PreloadAttribute>\n-            implements PreloadAttribute {\n-        private final List<ClassEntry> preloads;\n+    public static final class UnboundLoadableDescriptorsAttribute\n+            extends UnboundAttribute<LoadableDescriptorsAttribute>\n+            implements LoadableDescriptorsAttribute {\n+        private final List<Utf8Entry> loadableDescriptors;\n@@ -438,3 +438,3 @@\n-        public UnboundPreloadAttribute(List<ClassEntry> preloads) {\n-            super(Attributes.PRELOAD);\n-            this.preloads = List.copyOf(preloads);\n+        public UnboundLoadableDescriptorsAttribute(List<Utf8Entry> loadableDescriptors) {\n+            super(Attributes.LOADABLE_DESCRIPTORS);\n+            this.loadableDescriptors = List.copyOf(loadableDescriptors);\n@@ -444,2 +444,2 @@\n-        public List<ClassEntry> preloads() {\n-            return preloads;\n+        public List<Utf8Entry> loadableDescriptors() {\n+            return loadableDescriptors;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-    public boolean requiresPreload(Symbol referringClass) {\n+    public boolean requiresLoadableDescriptors(Symbol referringClass) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -855,1 +855,1 @@\n-     \/** Write out \"Preload\" attribute by enumerating the value classes encountered in field\/method descriptors during this compilation.\n+     \/** Write out \"LoadableDescriptors\" attribute by enumerating the value classes encountered in field\/method descriptors during this compilation.\n@@ -857,5 +857,5 @@\n-     void writePreloadAttribute() {\n-        int alenIdx = writeAttr(names.Preload);\n-        databuf.appendChar(poolWriter.preloadClasses.size());\n-        for (ClassSymbol c : poolWriter.preloadClasses) {\n-            databuf.appendChar(poolWriter.putClass(c));\n+     void writeLoadableDescriptorsAttribute() {\n+        int alenIdx = writeAttr(names.LoadableDescriptors);\n+        databuf.appendChar(poolWriter.loadableDescriptors.size());\n+        for (Symbol c : poolWriter.loadableDescriptors) {\n+            databuf.appendChar(poolWriter.putDescriptor(c));\n@@ -989,2 +989,2 @@\n-        if (fldType.requiresPreload(v.owner)) {\n-            poolWriter.enterPreloadClass((ClassSymbol) fldType.tsym);\n+        if (fldType.requiresLoadableDescriptors(v.owner)) {\n+            poolWriter.enterLoadableDescriptorsClass(fldType.tsym);\n@@ -1022,2 +1022,2 @@\n-            if (t.requiresPreload(m.owner)) {\n-                poolWriter.enterPreloadClass((ClassSymbol) t.tsym);\n+            if (t.requiresLoadableDescriptors(m.owner)) {\n+                poolWriter.enterLoadableDescriptorsClass(t.tsym);\n@@ -1027,2 +1027,2 @@\n-        if (returnType.requiresPreload(m.owner)) {\n-            poolWriter.enterPreloadClass((ClassSymbol) returnType.tsym);\n+        if (returnType.requiresLoadableDescriptors(m.owner)) {\n+            poolWriter.enterLoadableDescriptorsClass(returnType.tsym);\n@@ -1737,2 +1737,2 @@\n-        if (!poolWriter.preloadClasses.isEmpty()) {\n-            writePreloadAttribute();\n+        if (!poolWriter.loadableDescriptors.isEmpty()) {\n+            writeLoadableDescriptorsAttribute();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1117,2 +1117,2 @@\n-        if (localType.requiresPreload(env.enclClass.sym)) {\n-            poolWriter.enterPreloadClass((ClassSymbol) localType.tsym);\n+        if (localType.requiresLoadableDescriptors(env.enclClass.sym)) {\n+            poolWriter.enterLoadableDescriptorsClass((ClassSymbol) localType.tsym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-    Set<ClassSymbol> preloadClasses = new HashSet<>();\n+    Set<Symbol> loadableDescriptors = new HashSet<>();\n@@ -239,1 +239,1 @@\n-    \/** Enter a value class into the `preloadClasses' set.\n+    \/** Enter a value class into the `loadableDescriptorsClasses' set.\n@@ -241,1 +241,1 @@\n-    void enterPreloadClass(ClassSymbol c) {\n+    void enterLoadableDescriptorsClass(Symbol c) {\n@@ -246,1 +246,1 @@\n-        preloadClasses.add(c);\n+        loadableDescriptors.add(c);\n@@ -529,1 +529,1 @@\n-        preloadClasses.clear();\n+        loadableDescriptors.clear();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-    public final Name Preload;\n+    public final Name LoadableDescriptors;\n@@ -359,1 +359,1 @@\n-        Preload = fromString(\"Preload\");\n+        LoadableDescriptors = fromString(\"LoadableDescriptors\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    public static final String Preload                  = \"Preload\";\n+    public static final String LoadableDescriptors      = \"LoadableDescriptors\";\n@@ -140,1 +140,1 @@\n-            standardAttributes.put(Preload, Preload_attribute.class);\n+            standardAttributes.put(LoadableDescriptors, LoadableDescriptors_attribute.class);\n@@ -197,0 +197,1 @@\n+        R visitLoadableDescriptors(LoadableDescriptors_attribute attr, P p);\n@@ -208,1 +209,0 @@\n-        R visitPreload(Preload_attribute attr, P p);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/Attribute.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -758,3 +758,3 @@\n-        public Void visitPreload(Preload_attribute attr, ClassOutputStream out) {\n-            out.writeShort(attr.value_class_info_index.length);\n-            for (int index: attr.value_class_info_index)\n+        public Void visitLoadableDescriptors(LoadableDescriptors_attribute attr, ClassOutputStream out) {\n+            out.writeShort(attr.descriptor_info_index.length);\n+            for (int index: attr.descriptor_info_index)\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/ClassWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.tools.classfile;\n+\n+import java.io.IOException;\n+\n+\/**\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class LoadableDescriptors_attribute extends Attribute {\n+    LoadableDescriptors_attribute(ClassReader cr, int name_index, int length) throws IOException {\n+        super(name_index, length);\n+        number_of_descriptors = cr.readUnsignedShort();\n+        descriptor_info_index = new int[number_of_descriptors];\n+        for (int i = 0; i < number_of_descriptors; i++)\n+            descriptor_info_index[i] = cr.readUnsignedShort();\n+    }\n+\n+    public <R, D> R accept(Visitor<R, D> visitor, D data) {\n+        return visitor.visitLoadableDescriptors(this, data);\n+    }\n+\n+    public final int number_of_descriptors;\n+    public final int descriptor_info_index[];\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/LoadableDescriptors_attribute.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tools.classfile;\n-\n-import java.io.IOException;\n-\n-\/**\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class Preload_attribute extends Attribute {\n-    Preload_attribute(ClassReader cr, int name_index, int length) throws IOException {\n-        super(name_index, length);\n-        number_of_classes = cr.readUnsignedShort();\n-        value_class_info_index = new int[number_of_classes];\n-        for (int i = 0; i < number_of_classes; i++)\n-            value_class_info_index[i] = cr.readUnsignedShort();\n-    }\n-\n-    public <R, D> R accept(Visitor<R, D> visitor, D data) {\n-        return visitor.visitPreload(this, data);\n-    }\n-\n-    public final int number_of_classes;\n-    public final int value_class_info_index[];\n-}\n\\ No newline at end of file\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/Preload_attribute.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -530,2 +530,2 @@\n-            case PreloadAttribute attr -> {\n-                println(\"Preload:\");\n+            case LoadableDescriptorsAttribute attr -> {\n+                println(\"LoadableDescriptors:\");\n@@ -533,1 +533,1 @@\n-                for (var sc : attr.preloads()) {\n+                for (var sc : attr.loadableDescriptors()) {\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/ClassFieldDeduplication.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331461\n+ * @summary [lworld] javac is generating a class file with the LoadableDescriptors attribute but with minor version '0'\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.code\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main LoadableDescriptorsAttrTest2\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import com.sun.tools.javac.code.Flags;\n+import com.sun.tools.javac.util.Assert;\n+import com.sun.tools.classfile.ClassFile;\n+\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class LoadableDescriptorsAttrTest2 extends TestRunner {\n+    ToolBox tb = new ToolBox();\n+\n+    public LoadableDescriptorsAttrTest2() {\n+        super(System.err);\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws Exception {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new LoadableDescriptorsAttrTest2().runTests();\n+    }\n+\n+    @Test\n+    public void testValueBased(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                value class Val {}\n+                \"\"\",\n+                \"\"\"\n+                class Ident {\n+                    Val val;\n+                }\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+        Path classFilePath = classes.resolve(\"Ident.class\");\n+        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+\n+        \/\/ now with the value class in the classpath\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()), \"-cp\", classes.toString())\n+                .outdir(classes)\n+                .files(src.resolve(\"Ident.java\"))\n+                .run()\n+                .writeAll();\n+\n+        classFilePath = classes.resolve(\"Ident.class\");\n+        classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttrTest2.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8280164\n+ * @summary Check emission of LoadableDescriptors attribute\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @enablePreview\n+ * @run main LoadableDescriptorsAttributeTest\n+ *\/\n+\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n+\n+public class LoadableDescriptorsAttributeTest {\n+\n+    final value class V1 {}\n+    final value class V2 {}\n+    final value class V3 {}\n+    final value class V4 {}\n+    final value class V5 {}\n+    final value class V6 {}\n+    final value class V7 {}\n+    final value class V8 {}\n+    final value class V9 {}\n+\n+    static final value class X {\n+        final V1 [] v1 = null; \/\/ field descriptor, encoding array type - no LoadableDescriptors.\n+        V2 foo() {  \/\/ method descriptor encoding value type, to be preloaded\n+            return null;\n+        }\n+        void foo(V3 v3) { \/\/ method descriptor encoding value type, to be preloaded\n+        }\n+        void foo(int x) {\n+            V4 [] v4 = null; \/\/ local variable encoding array type - no preload.\n+        }\n+        void goo(V6[] v6) { \/\/ parameter uses value type but as array component - no preload.\n+            V5 v5 = null;  \/\/ preload value type used for local type.\n+            if (v5 == null) {\n+                \/\/ ...\n+            } else {\n+               V5 [] v52 = null;\n+            }\n+        }\n+        final V7 v7 = null; \/\/ field descriptor uses value type - to be preloaded.\n+        V8 [] goo(V9 [] v9) { \/\/ neither V8 nor V9 call for preload being array component types\n+            return null;\n+        }\n+    }\n+    \/\/ So we expect ONLY V2, V3 V5, V7 to be in LoadableDescriptors list\n+\n+    public static void main(String[] args) throws Exception {\n+        ClassFile cls = ClassFile.read(LoadableDescriptorsAttributeTest.class.getResourceAsStream(\"LoadableDescriptorsAttributeTest$X.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors_attribute descriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (descriptors == null) {\n+            throw new AssertionError(\"Missing LoadableDescriptors attribute!\");\n+        }\n+        if (descriptors.number_of_descriptors != 4) {\n+            throw new AssertionError(\"Incorrect number of loadable descriptors\");\n+        }\n+\n+        int mask = 0x56;\n+        for (int i = 0; i < descriptors.number_of_descriptors; i++) {\n+            CONSTANT_Utf8_info clsInfo = cls.constant_pool.getUTF8Info(\n+                                  descriptors.descriptor_info_index[i]);\n+            switch (clsInfo.value) {\n+                case \"LLoadableDescriptorsAttributeTest$V2;\":\n+                    mask &= ~2; break;\n+                case \"LLoadableDescriptorsAttributeTest$V3;\":\n+                    mask &= ~4; break;\n+                case \"LLoadableDescriptorsAttributeTest$V5;\":\n+                    mask &= ~16; break;\n+                case \"LLoadableDescriptorsAttributeTest$V7;\" :\n+                    mask &= ~64; break;\n+                default:\n+                    throw new AssertionError(\"Unexpected LoadableDescriptors entry!\");\n+            }\n+        }\n+        if (mask != 0) {\n+          throw new AssertionError(\"Some LoadableDescriptors entries are missing!\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttributeTest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281323\n+ * @summary Check emission of LoadableDescriptors attribute to make sure javac does not emit unneeded entries.\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @enablePreview\n+ * @run main NoUnnecessaryLoadableDescriptorsTest\n+ *\/\n+\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n+\n+public class NoUnnecessaryLoadableDescriptorsTest {\n+\n+    public value class LoadableDescriptorsTest1 {\n+        byte b;\n+        public LoadableDescriptorsTest1(byte b) {\n+            this.b = b;\n+        }\n+    }\n+\n+    public class LoadableDescriptorsTest2 {\n+        static class Inner1 {\n+            static value class Inner2 {}\n+            Inner2 inner;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest.class\n+        ClassFile cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors_attribute LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors != null) {\n+            throw new AssertionError(\"Unexpected LoadableDescriptors attribute!\");\n+        }\n+\n+        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest1.class\n+        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest1.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors != null) {\n+            throw new AssertionError(\"Unexpected LoadableDescriptors attribute!\");\n+        }\n+\n+        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest$PreloadTest2.class\n+        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors != null) {\n+            throw new AssertionError(\"Unexpected LoadableDescriptors attribute!\");\n+        }\n+\n+        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner2.class\n+        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1$Inner2.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors != null) {\n+            throw new AssertionError(\"Unexpected LoadableDescriptors attribute!\");\n+        }\n+\n+        \/\/ There should be ONE LoadableDescriptors attribute entry in NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1.class\n+        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors == null) {\n+            throw new AssertionError(\"Missing LoadableDescriptors attribute!\");\n+        }\n+\n+        if (LoadableDescriptors.number_of_descriptors != 1) {\n+            throw new AssertionError(\"Incorrect number of LoadableDescriptors classes\");\n+        }\n+\n+        CONSTANT_Utf8_info utf8Info = cls.constant_pool.getUTF8Info(LoadableDescriptors.descriptor_info_index[0]);\n+        System.err.println(\"utf8 \" + utf8Info.value);\n+        if (!utf8Info.value.equals(\"LNoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1$Inner2;\")) {\n+            throw new AssertionError(\"Expected LoadableDescriptors class entry is missing, but found \" + utf8Info.value);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NoUnnecessaryLoadableDescriptorsTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8281323\n- * @summary Check emission of Preload attribute to make sure javac does not emit unneeded entries.\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @enablePreview\n- * @run main NoUnnecessaryPreloadsTest\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-\n-public class NoUnnecessaryPreloadsTest {\n-\n-    public value class PreLoadTest1 {\n-        byte b;\n-        public PreLoadTest1(byte b) {\n-            this.b = b;\n-        }\n-    }\n-\n-    public class PreLoadTest2 {\n-        static class Inner1 {\n-            static value class Inner2 {}\n-            Inner2 inner;\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ There should be no Preload attribute in NoUnnecessaryPreloadsTest.class\n-        ClassFile cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        Preload_attribute preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads != null) {\n-            throw new AssertionError(\"Unexpected Preload attribute!\");\n-        }\n-\n-        \/\/ There should be no Preload attribute in NoUnnecessaryPreloadsTest$PreloadTest1.class\n-        cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest$PreLoadTest1.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads != null) {\n-            throw new AssertionError(\"Unexpected Preload attribute!\");\n-        }\n-\n-        \/\/ There should be no Preload attribute in NoUnnecessaryPreloadsTest$PreloadTest2.class\n-        cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest$PreLoadTest2.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads != null) {\n-            throw new AssertionError(\"Unexpected Preload attribute!\");\n-        }\n-\n-        \/\/ There should be no Preload attribute in NoUnnecessaryPreloadsTest$PreloadTest2$Inner2.class\n-        cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest$PreLoadTest2$Inner1$Inner2.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads != null) {\n-            throw new AssertionError(\"Unexpected Preload attribute!\");\n-        }\n-\n-        \/\/ There should be ONE Preload attribute entry in NoUnnecessaryPreloadsTest$PreloadTest2$Inner1.class\n-        cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest$PreLoadTest2$Inner1.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads == null) {\n-            throw new AssertionError(\"Missing Preload attribute!\");\n-        }\n-\n-        if (preloads.number_of_classes != 1) {\n-            throw new AssertionError(\"Incorrect number of Preload classes\");\n-        }\n-\n-        CONSTANT_Class_info clsInfo = cls.constant_pool.getClassInfo(preloads.value_class_info_index[0]);\n-        if (!clsInfo.getName().equals(\"NoUnnecessaryPreloadsTest$PreLoadTest2$Inner1$Inner2\")) {\n-            throw new AssertionError(\"Expected Preload class entry is missing, but found \" + clsInfo.getName());\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NoUnnecessaryPreloadsTest.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8331461\n- * @summary [lworld] javac is generating a class file with the Preload attribute but with minor version '0'\n- * @library \/tools\/lib\n- * @modules\n- *      jdk.compiler\/com.sun.tools.javac.code\n- *      jdk.compiler\/com.sun.tools.javac.util\n- *      jdk.compiler\/com.sun.tools.javac.api\n- *      jdk.compiler\/com.sun.tools.javac.file\n- *      jdk.compiler\/com.sun.tools.javac.main\n- *      jdk.jdeps\/com.sun.tools.classfile\n- * @build toolbox.ToolBox toolbox.JavacTask\n- * @run main PreloadAttrTest2\n- *\/\n-\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import com.sun.tools.javac.code.Flags;\n-import com.sun.tools.javac.util.Assert;\n-import com.sun.tools.classfile.ClassFile;\n-\n-import toolbox.TestRunner;\n-import toolbox.ToolBox;\n-import toolbox.JavacTask;\n-import toolbox.Task;\n-\n-public class PreloadAttrTest2 extends TestRunner {\n-    ToolBox tb = new ToolBox();\n-\n-    public PreloadAttrTest2() {\n-        super(System.err);\n-    }\n-\n-    protected void runTests() throws Exception {\n-        runTests(m -> new Object[] { Paths.get(m.getName()) });\n-    }\n-\n-    Path[] findJavaFiles(Path... paths) throws Exception {\n-        return tb.findJavaFiles(paths);\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        new PreloadAttrTest2().runTests();\n-    }\n-\n-    @Test\n-    public void testValueBased(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                value class Val {}\n-                \"\"\",\n-                \"\"\"\n-                class Ident {\n-                    Val val;\n-                }\n-                \"\"\");\n-        Path classes = base.resolve(\"classes\");\n-        tb.createDirectories(classes);\n-\n-        new toolbox.JavacTask(tb)\n-                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n-                .outdir(classes)\n-                .files(findJavaFiles(src))\n-                .run()\n-                .writeAll();\n-        Path classFilePath = classes.resolve(\"Ident.class\");\n-        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"Preload\") != null);\n-\n-        \/\/ now with the value class in the classpath\n-        new toolbox.JavacTask(tb)\n-                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()), \"-cp\", classes.toString())\n-                .outdir(classes)\n-                .files(src.resolve(\"Ident.java\"))\n-                .run()\n-                .writeAll();\n-\n-        classFilePath = classes.resolve(\"Ident.class\");\n-        classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"Preload\") != null);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PreloadAttrTest2.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8280164\n- * @summary Check emission of Preload attribute\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @enablePreview\n- * @run main PreloadAttributeTest\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-\n-public class PreloadAttributeTest {\n-\n-    final value class V1 {}\n-    final value class V2 {}\n-    final value class V3 {}\n-    final value class V4 {}\n-    final value class V5 {}\n-    final value class V6 {}\n-    final value class V7 {}\n-    final value class V8 {}\n-    final value class V9 {}\n-\n-    static final value class X {\n-        final V1 [] v1 = null; \/\/ field descriptor, encoding array type - no preload.\n-        V2 foo() {  \/\/ method descriptor encoding value type, to be preloaded\n-            return null;\n-        }\n-        void foo(V3 v3) { \/\/ method descriptor encoding value type, to be preloaded\n-        }\n-        void foo(int x) {\n-            V4 [] v4 = null; \/\/ local variable encoding array type - no preload.\n-        }\n-        void goo(V6[] v6) { \/\/ parameter uses value type but as array component - no preload.\n-            V5 v5 = null;  \/\/ preload value type used for local type.\n-            if (v5 == null) {\n-                \/\/ ...\n-            } else {\n-               V5 [] v52 = null;\n-            }\n-        }\n-        final V7 v7 = null; \/\/ field descriptor uses value type - to be preloaded.\n-        V8 [] goo(V9 [] v9) { \/\/ neither V8 nor V9 call for preload being array component types\n-            return null;\n-        }\n-    }\n-    \/\/ So we expect ONLY V2, V3 V5, V7 to be in Preload list\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(PreloadAttributeTest.class.getResourceAsStream(\"PreloadAttributeTest$X.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        Preload_attribute preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads == null) {\n-            throw new AssertionError(\"Missing Preload attribute!\");\n-        }\n-        if (preloads.number_of_classes != 4) {\n-            throw new AssertionError(\"Incorrect number of Preload classes\");\n-        }\n-\n-        int mask = 0x56;\n-        for (int i = 0; i < preloads.number_of_classes; i++) {\n-            CONSTANT_Class_info clsInfo = cls.constant_pool.getClassInfo(\n-                                  preloads.value_class_info_index[i]);\n-            switch (clsInfo.getName()) {\n-                case \"PreloadAttributeTest$V2\":\n-                    mask &= ~2; break;\n-                case \"PreloadAttributeTest$V3\":\n-                    mask &= ~4; break;\n-                case \"PreloadAttributeTest$V5\":\n-                    mask &= ~16; break;\n-                case \"PreloadAttributeTest$V7\" :\n-                    mask &= ~64; break;\n-                default:\n-                    throw new AssertionError(\"Unexpected Preload class entry!\");\n-            }\n-        }\n-        if (mask != 0) {\n-          throw new AssertionError(\"Some Preload class entries are missing!\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PreloadAttributeTest.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"}]}