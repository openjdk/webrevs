{"files":[{"patch":"@@ -759,2 +759,2 @@\n-            out.writeShort(attr.value_class_info_index.length);\n-            for (int index: attr.value_class_info_index)\n+            out.writeShort(attr.descriptor_info_index.length);\n+            for (int index: attr.descriptor_info_index)\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/ClassWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,4 +39,4 @@\n-        number_of_classes = cr.readUnsignedShort();\n-        value_class_info_index = new int[number_of_classes];\n-        for (int i = 0; i < number_of_classes; i++)\n-            value_class_info_index[i] = cr.readUnsignedShort();\n+        number_of_descriptors = cr.readUnsignedShort();\n+        descriptor_info_index = new int[number_of_descriptors];\n+        for (int i = 0; i < number_of_descriptors; i++)\n+            descriptor_info_index[i] = cr.readUnsignedShort();\n@@ -49,2 +49,2 @@\n-    public final int number_of_classes;\n-    public final int value_class_info_index[];\n+    public final int number_of_descriptors;\n+    public final int descriptor_info_index[];\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/LoadableDescriptors_attribute.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/ClassFieldDeduplication.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331461\n+ * @summary [lworld] javac is generating a class file with the LoadableDescriptors attribute but with minor version '0'\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.code\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main LoadableDescriptorsAttrTest2\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import com.sun.tools.javac.code.Flags;\n+import com.sun.tools.javac.util.Assert;\n+import com.sun.tools.classfile.ClassFile;\n+\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class LoadableDescriptorsAttrTest2 extends TestRunner {\n+    ToolBox tb = new ToolBox();\n+\n+    public LoadableDescriptorsAttrTest2() {\n+        super(System.err);\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws Exception {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new LoadableDescriptorsAttrTest2().runTests();\n+    }\n+\n+    @Test\n+    public void testValueBased(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                value class Val {}\n+                \"\"\",\n+                \"\"\"\n+                class Ident {\n+                    Val val;\n+                }\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+        Path classFilePath = classes.resolve(\"Ident.class\");\n+        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+\n+        \/\/ now with the value class in the classpath\n+        new toolbox.JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()), \"-cp\", classes.toString())\n+                .outdir(classes)\n+                .files(src.resolve(\"Ident.java\"))\n+                .run()\n+                .writeAll();\n+\n+        classFilePath = classes.resolve(\"Ident.class\");\n+        classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check(classFile.minor_version == 65535);\n+        Assert.check(classFile.attributes.get(\"LoadableDescriptors\") != null);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttrTest2.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8280164\n+ * @summary Check emission of LoadableDescriptors attribute\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @enablePreview\n+ * @run main LoadableDescriptorsAttributeTest\n+ *\/\n+\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n+\n+public class LoadableDescriptorsAttributeTest {\n+\n+    final value class V1 {}\n+    final value class V2 {}\n+    final value class V3 {}\n+    final value class V4 {}\n+    final value class V5 {}\n+    final value class V6 {}\n+    final value class V7 {}\n+    final value class V8 {}\n+    final value class V9 {}\n+\n+    static final value class X {\n+        final V1 [] v1 = null; \/\/ field descriptor, encoding array type - no LoadableDescriptors.\n+        V2 foo() {  \/\/ method descriptor encoding value type, to be preloaded\n+            return null;\n+        }\n+        void foo(V3 v3) { \/\/ method descriptor encoding value type, to be preloaded\n+        }\n+        void foo(int x) {\n+            V4 [] v4 = null; \/\/ local variable encoding array type - no preload.\n+        }\n+        void goo(V6[] v6) { \/\/ parameter uses value type but as array component - no preload.\n+            V5 v5 = null;  \/\/ preload value type used for local type.\n+            if (v5 == null) {\n+                \/\/ ...\n+            } else {\n+               V5 [] v52 = null;\n+            }\n+        }\n+        final V7 v7 = null; \/\/ field descriptor uses value type - to be preloaded.\n+        V8 [] goo(V9 [] v9) { \/\/ neither V8 nor V9 call for preload being array component types\n+            return null;\n+        }\n+    }\n+    \/\/ So we expect ONLY V2, V3 V5, V7 to be in LoadableDescriptors list\n+\n+    public static void main(String[] args) throws Exception {\n+        ClassFile cls = ClassFile.read(LoadableDescriptorsAttributeTest.class.getResourceAsStream(\"LoadableDescriptorsAttributeTest$X.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors_attribute descriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (descriptors == null) {\n+            throw new AssertionError(\"Missing LoadableDescriptors attribute!\");\n+        }\n+        if (descriptors.number_of_descriptors != 4) {\n+            throw new AssertionError(\"Incorrect number of loadable descriptors\");\n+        }\n+\n+        int mask = 0x56;\n+        for (int i = 0; i < descriptors.number_of_descriptors; i++) {\n+            CONSTANT_Utf8_info clsInfo = cls.constant_pool.getUTF8Info(\n+                                  descriptors.descriptor_info_index[i]);\n+            switch (clsInfo.value) {\n+                case \"LLoadableDescriptorsAttributeTest$V2;\":\n+                    mask &= ~2; break;\n+                case \"LLoadableDescriptorsAttributeTest$V3;\":\n+                    mask &= ~4; break;\n+                case \"LLoadableDescriptorsAttributeTest$V5;\":\n+                    mask &= ~16; break;\n+                case \"LLoadableDescriptorsAttributeTest$V7;\" :\n+                    mask &= ~64; break;\n+                default:\n+                    throw new AssertionError(\"Unexpected LoadableDescriptors entry!\");\n+            }\n+        }\n+        if (mask != 0) {\n+          throw new AssertionError(\"Some LoadableDescriptors entries are missing!\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/LoadableDescriptorsAttributeTest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281323\n+ * @summary Check emission of LoadableDescriptors attribute to make sure javac does not emit unneeded entries.\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @enablePreview\n+ * @run main NoUnnecessaryLoadableDescriptorsTest\n+ *\/\n+\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n+\n+public class NoUnnecessaryLoadableDescriptorsTest {\n+\n+    public value class LoadableDescriptorsTest1 {\n+        byte b;\n+        public LoadableDescriptorsTest1(byte b) {\n+            this.b = b;\n+        }\n+    }\n+\n+    public class LoadableDescriptorsTest2 {\n+        static class Inner1 {\n+            static value class Inner2 {}\n+            Inner2 inner;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest.class\n+        ClassFile cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors_attribute LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors != null) {\n+            throw new AssertionError(\"Unexpected LoadableDescriptors attribute!\");\n+        }\n+\n+        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest1.class\n+        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest1.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors != null) {\n+            throw new AssertionError(\"Unexpected LoadableDescriptors attribute!\");\n+        }\n+\n+        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest$PreloadTest2.class\n+        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors != null) {\n+            throw new AssertionError(\"Unexpected LoadableDescriptors attribute!\");\n+        }\n+\n+        \/\/ There should be no LoadableDescriptors attribute in NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner2.class\n+        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1$Inner2.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors != null) {\n+            throw new AssertionError(\"Unexpected LoadableDescriptors attribute!\");\n+        }\n+\n+        \/\/ There should be ONE LoadableDescriptors attribute entry in NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1.class\n+        cls = ClassFile.read(NoUnnecessaryLoadableDescriptorsTest.class.getResourceAsStream(\"NoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of LoadableDescriptors attribute *\/\n+        LoadableDescriptors = (LoadableDescriptors_attribute) cls.attributes.get(Attribute.LoadableDescriptors);\n+        if (LoadableDescriptors == null) {\n+            throw new AssertionError(\"Missing LoadableDescriptors attribute!\");\n+        }\n+\n+        if (LoadableDescriptors.number_of_descriptors != 1) {\n+            throw new AssertionError(\"Incorrect number of LoadableDescriptors classes\");\n+        }\n+\n+        CONSTANT_Utf8_info utf8Info = cls.constant_pool.getUTF8Info(LoadableDescriptors.descriptor_info_index[0]);\n+        System.err.println(\"utf8 \" + utf8Info.value);\n+        if (!utf8Info.value.equals(\"LNoUnnecessaryLoadableDescriptorsTest$LoadableDescriptorsTest2$Inner1$Inner2;\")) {\n+            throw new AssertionError(\"Expected LoadableDescriptors class entry is missing, but found \" + utf8Info.value);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NoUnnecessaryLoadableDescriptorsTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8281323\n- * @summary Check emission of Preload attribute to make sure javac does not emit unneeded entries.\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @enablePreview\n- * @run main NoUnnecessaryPreloadsTest\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-\n-public class NoUnnecessaryPreloadsTest {\n-\n-    public value class PreLoadTest1 {\n-        byte b;\n-        public PreLoadTest1(byte b) {\n-            this.b = b;\n-        }\n-    }\n-\n-    public class PreLoadTest2 {\n-        static class Inner1 {\n-            static value class Inner2 {}\n-            Inner2 inner;\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ There should be no Preload attribute in NoUnnecessaryPreloadsTest.class\n-        ClassFile cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        Preload_attribute preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads != null) {\n-            throw new AssertionError(\"Unexpected Preload attribute!\");\n-        }\n-\n-        \/\/ There should be no Preload attribute in NoUnnecessaryPreloadsTest$PreloadTest1.class\n-        cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest$PreLoadTest1.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads != null) {\n-            throw new AssertionError(\"Unexpected Preload attribute!\");\n-        }\n-\n-        \/\/ There should be no Preload attribute in NoUnnecessaryPreloadsTest$PreloadTest2.class\n-        cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest$PreLoadTest2.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads != null) {\n-            throw new AssertionError(\"Unexpected Preload attribute!\");\n-        }\n-\n-        \/\/ There should be no Preload attribute in NoUnnecessaryPreloadsTest$PreloadTest2$Inner2.class\n-        cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest$PreLoadTest2$Inner1$Inner2.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads != null) {\n-            throw new AssertionError(\"Unexpected Preload attribute!\");\n-        }\n-\n-        \/\/ There should be ONE Preload attribute entry in NoUnnecessaryPreloadsTest$PreloadTest2$Inner1.class\n-        cls = ClassFile.read(NoUnnecessaryPreloadsTest.class.getResourceAsStream(\"NoUnnecessaryPreloadsTest$PreLoadTest2$Inner1.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads == null) {\n-            throw new AssertionError(\"Missing Preload attribute!\");\n-        }\n-\n-        if (preloads.number_of_classes != 1) {\n-            throw new AssertionError(\"Incorrect number of Preload classes\");\n-        }\n-\n-        CONSTANT_Class_info clsInfo = cls.constant_pool.getClassInfo(preloads.value_class_info_index[0]);\n-        if (!clsInfo.getName().equals(\"NoUnnecessaryPreloadsTest$PreLoadTest2$Inner1$Inner2\")) {\n-            throw new AssertionError(\"Expected Preload class entry is missing, but found \" + clsInfo.getName());\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NoUnnecessaryPreloadsTest.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8331461\n- * @summary [lworld] javac is generating a class file with the Preload attribute but with minor version '0'\n- * @library \/tools\/lib\n- * @modules\n- *      jdk.compiler\/com.sun.tools.javac.code\n- *      jdk.compiler\/com.sun.tools.javac.util\n- *      jdk.compiler\/com.sun.tools.javac.api\n- *      jdk.compiler\/com.sun.tools.javac.file\n- *      jdk.compiler\/com.sun.tools.javac.main\n- *      jdk.jdeps\/com.sun.tools.classfile\n- * @build toolbox.ToolBox toolbox.JavacTask\n- * @run main PreloadAttrTest2\n- *\/\n-\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import com.sun.tools.javac.code.Flags;\n-import com.sun.tools.javac.util.Assert;\n-import com.sun.tools.classfile.ClassFile;\n-\n-import toolbox.TestRunner;\n-import toolbox.ToolBox;\n-import toolbox.JavacTask;\n-import toolbox.Task;\n-\n-public class PreloadAttrTest2 extends TestRunner {\n-    ToolBox tb = new ToolBox();\n-\n-    public PreloadAttrTest2() {\n-        super(System.err);\n-    }\n-\n-    protected void runTests() throws Exception {\n-        runTests(m -> new Object[] { Paths.get(m.getName()) });\n-    }\n-\n-    Path[] findJavaFiles(Path... paths) throws Exception {\n-        return tb.findJavaFiles(paths);\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        new PreloadAttrTest2().runTests();\n-    }\n-\n-    @Test\n-    public void testValueBased(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                value class Val {}\n-                \"\"\",\n-                \"\"\"\n-                class Ident {\n-                    Val val;\n-                }\n-                \"\"\");\n-        Path classes = base.resolve(\"classes\");\n-        tb.createDirectories(classes);\n-\n-        new toolbox.JavacTask(tb)\n-                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n-                .outdir(classes)\n-                .files(findJavaFiles(src))\n-                .run()\n-                .writeAll();\n-        Path classFilePath = classes.resolve(\"Ident.class\");\n-        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"Preload\") != null);\n-\n-        \/\/ now with the value class in the classpath\n-        new toolbox.JavacTask(tb)\n-                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()), \"-cp\", classes.toString())\n-                .outdir(classes)\n-                .files(src.resolve(\"Ident.java\"))\n-                .run()\n-                .writeAll();\n-\n-        classFilePath = classes.resolve(\"Ident.class\");\n-        classFile = ClassFile.read(classFilePath.toFile());\n-        Assert.check(classFile.minor_version == 65535);\n-        Assert.check(classFile.attributes.get(\"Preload\") != null);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PreloadAttrTest2.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8280164\n- * @summary Check emission of Preload attribute\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @enablePreview\n- * @run main PreloadAttributeTest\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-\n-public class PreloadAttributeTest {\n-\n-    final value class V1 {}\n-    final value class V2 {}\n-    final value class V3 {}\n-    final value class V4 {}\n-    final value class V5 {}\n-    final value class V6 {}\n-    final value class V7 {}\n-    final value class V8 {}\n-    final value class V9 {}\n-\n-    static final value class X {\n-        final V1 [] v1 = null; \/\/ field descriptor, encoding array type - no preload.\n-        V2 foo() {  \/\/ method descriptor encoding value type, to be preloaded\n-            return null;\n-        }\n-        void foo(V3 v3) { \/\/ method descriptor encoding value type, to be preloaded\n-        }\n-        void foo(int x) {\n-            V4 [] v4 = null; \/\/ local variable encoding array type - no preload.\n-        }\n-        void goo(V6[] v6) { \/\/ parameter uses value type but as array component - no preload.\n-            V5 v5 = null;  \/\/ preload value type used for local type.\n-            if (v5 == null) {\n-                \/\/ ...\n-            } else {\n-               V5 [] v52 = null;\n-            }\n-        }\n-        final V7 v7 = null; \/\/ field descriptor uses value type - to be preloaded.\n-        V8 [] goo(V9 [] v9) { \/\/ neither V8 nor V9 call for preload being array component types\n-            return null;\n-        }\n-    }\n-    \/\/ So we expect ONLY V2, V3 V5, V7 to be in Preload list\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(PreloadAttributeTest.class.getResourceAsStream(\"PreloadAttributeTest$X.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of Preload attribute *\/\n-        Preload_attribute preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n-        if (preloads == null) {\n-            throw new AssertionError(\"Missing Preload attribute!\");\n-        }\n-        if (preloads.number_of_classes != 4) {\n-            throw new AssertionError(\"Incorrect number of Preload classes\");\n-        }\n-\n-        int mask = 0x56;\n-        for (int i = 0; i < preloads.number_of_classes; i++) {\n-            CONSTANT_Class_info clsInfo = cls.constant_pool.getClassInfo(\n-                                  preloads.value_class_info_index[i]);\n-            switch (clsInfo.getName()) {\n-                case \"PreloadAttributeTest$V2\":\n-                    mask &= ~2; break;\n-                case \"PreloadAttributeTest$V3\":\n-                    mask &= ~4; break;\n-                case \"PreloadAttributeTest$V5\":\n-                    mask &= ~16; break;\n-                case \"PreloadAttributeTest$V7\" :\n-                    mask &= ~64; break;\n-                default:\n-                    throw new AssertionError(\"Unexpected Preload class entry!\");\n-            }\n-        }\n-        if (mask != 0) {\n-          throw new AssertionError(\"Some Preload class entries are missing!\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PreloadAttributeTest.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"}]}