{"files":[{"patch":"@@ -143,1 +143,1 @@\n-        if (element_klass->can_be_inline_klass() && (!element_klass->is_inlinetype() || element_klass->as_inline_klass()->flat_in_array())) {\n+        if (element_klass->can_be_inline_klass() && (!element_klass->is_inlinetype() || element_klass->as_inline_klass()->maybe_flat_in_array())) {\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1830,1 +1830,1 @@\n-      if (!klass->can_be_inline_klass() || (klass->is_inlinetype() && !klass->as_inline_klass()->flat_in_array())) {\n+      if (!klass->can_be_inline_klass() || (klass->is_inlinetype() && !klass->as_inline_klass()->maybe_flat_in_array())) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-      if (flat && vk->flat_array()) {\n+      if (flat && vk->maybe_flat_in_array()) {\n","filename":"src\/hotspot\/share\/ci\/ciArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-bool ciInlineKlass::flat_in_array() const {\n-  GUARDED_VM_ENTRY(return to_InlineKlass()->flat_array();)\n+bool ciInlineKlass::maybe_flat_in_array() const {\n+  GUARDED_VM_ENTRY(return to_InlineKlass()->maybe_flat_in_array();)\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  bool flat_in_array() const;\n+  bool maybe_flat_in_array() const;\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  virtual bool flat_in_array() const        { return false; }\n+  virtual bool maybe_flat_in_array() const  { return false; }\n","filename":"src\/hotspot\/share\/ci\/ciMetadata.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -287,1 +287,1 @@\n-bool InlineKlass::flat_array() {\n+bool InlineKlass::maybe_flat_in_array() {\n@@ -295,8 +295,0 @@\n-  \/\/ Declared atomic but not naturally atomic.\n-  if (must_be_atomic() && !is_naturally_atomic()) {\n-    return false;\n-  }\n-  \/\/ VM enforcing AlwaysAtomicAccess only...\n-  if (AlwaysAtomicAccesses && (!is_naturally_atomic())) {\n-    return false;\n-  }\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-  bool flat_array();\n+  bool maybe_flat_in_array();\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3666,1 +3666,1 @@\n-  bool not_flat_in_array = !UseArrayFlattening || not_inline || (toop->is_inlinetypeptr() && !toop->inline_klass()->flat_in_array());\n+  bool not_flat_in_array = !UseArrayFlattening || not_inline || (toop->is_inlinetypeptr() && !toop->inline_klass()->maybe_flat_in_array());\n@@ -4011,1 +4011,1 @@\n-      can_be_flat = ary_type->can_be_inline_array() && (!elem->is_inlinetypeptr() || elem->inline_klass()->flat_in_array());\n+      can_be_flat = ary_type->can_be_inline_array() && (!elem->is_inlinetypeptr() || elem->inline_klass()->maybe_flat_in_array());\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4585,1 +4585,1 @@\n-        bool flat = vk->flat_in_array();\n+        bool flat = vk->maybe_flat_in_array();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -957,1 +957,1 @@\n-      assert(inline_klass->flat_in_array(), \"must be flat in array\");\n+      assert(inline_klass->maybe_flat_in_array(), \"must be flat in array\");\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-           (!element_ptr->is_inlinetypeptr() || element_ptr->inline_klass()->flat_in_array()), \"array can't be flat\");\n+           (!element_ptr->is_inlinetypeptr() || element_ptr->inline_klass()->maybe_flat_in_array()), \"array can't be flat\");\n@@ -231,1 +231,1 @@\n-                                   !stored_value_casted_type->inline_klass()->flat_in_array());\n+                                   !stored_value_casted_type->inline_klass()->maybe_flat_in_array());\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4080,1 +4080,1 @@\n-    bool not_flat = !UseArrayFlattening || not_inline || (exact_etype->is_inlinetypeptr() && !exact_etype->inline_klass()->flat_in_array());\n+    bool not_flat = !UseArrayFlattening || not_inline || (exact_etype->is_inlinetypeptr() && !exact_etype->inline_klass()->maybe_flat_in_array());\n@@ -4390,1 +4390,1 @@\n-  assert(!klass()->flat_in_array() || flat_in_array, \"Should be flat in array\");\n+  assert(!klass()->maybe_flat_in_array() || flat_in_array, \"Should be flat in array\");\n@@ -4424,1 +4424,1 @@\n-  flat_in_array = flat_in_array || k->flat_in_array();\n+  flat_in_array = flat_in_array || k->maybe_flat_in_array();\n@@ -6450,1 +6450,1 @@\n-  flat_in_array = flat_in_array || k->flat_in_array();\n+  flat_in_array = flat_in_array || k->maybe_flat_in_array();\n@@ -6823,1 +6823,1 @@\n-                   !k->as_array_klass()->element_klass()->flat_in_array()));\n+                   !k->as_array_klass()->element_klass()->maybe_flat_in_array()));\n@@ -7001,1 +7001,1 @@\n-      not_flat = !UseArrayFlattening || not_inline || (exact_etype->is_inlinetypeptr() && !exact_etype->inline_klass()->flat_in_array());\n+      not_flat = !UseArrayFlattening || not_inline || (exact_etype->is_inlinetypeptr() && !exact_etype->inline_klass()->maybe_flat_in_array());\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -489,1 +489,1 @@\n-  if (vk->flat_array() && vk->has_non_atomic_layout()) {\n+  if (vk->maybe_flat_in_array() && vk->has_non_atomic_layout()) {\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1664,1 +1664,1 @@\n-  assert(vk->flat_array(), \"should only be used for flat inline type arrays\");\n+  assert(vk->maybe_flat_in_array(), \"should only be used for flat inline type arrays\");\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3628,0 +3628,26 @@\n+\n+    static value class Test151Value {\n+        byte b;\n+        String s;\n+\n+        Test151Value(byte b, String s) {\n+            this.b = b;\n+            this.s = s;\n+        }\n+\n+        static final Test151Value DEFAULT = new Test151Value((byte) 1, \"hello\");\n+\n+        static final Test151Value[] ARRAY = (Test151Value[]) ValueClass.newNullRestrictedAtomicArray(Test151Value.class, 100, DEFAULT);\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"InlineTypeReturnedAsFields\", \"true\"},\n+        failOn = {ALLOC})\n+    static Test151Value test151(int i) {\n+        return Test151Value.ARRAY[i];\n+    }\n+\n+    @Run(test = \"test151\")\n+    public void test151_verifier() {\n+        Asserts.assertEquals(Test151Value.DEFAULT, test151(rI & 15));\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}