{"files":[{"patch":"@@ -68,1 +68,0 @@\n-  assert(is_null_free_array_klass(), \"sanity\");\n@@ -72,1 +71,0 @@\n-  assert(prototype_header().is_flat_array(), \"sanity\");\n@@ -79,0 +77,4 @@\n+  assert(layout_helper_is_array(layout_helper()), \"Must be\");\n+  assert(layout_helper_is_flatArray(layout_helper()), \"Must be\");\n+  assert(layout_helper_element_type(layout_helper()) == T_FLAT_ELEMENT, \"Must be\");\n+  assert(prototype_header().is_flat_array(), \"Must be\");\n@@ -81,0 +83,1 @@\n+    case ATOMIC_FLAT:\n@@ -82,3 +85,0 @@\n-      assert(layout_helper_is_array(layout_helper()), \"Must be\");\n-      assert(layout_helper_is_flatArray(layout_helper()), \"Must be\");\n-      assert(layout_helper_element_type(layout_helper()) == T_FLAT_ELEMENT, \"Must be\");\n@@ -86,1 +86,4 @@\n-      assert(prototype_header().is_flat_array(), \"Must be\");\n+    break;\n+    case NULLABLE_ATOMIC_FLAT:\n+      assert(!layout_helper_is_null_free(layout_helper()), \"Must be\");\n+      assert(!prototype_header().is_null_free_array(), \"Must be\");\n@@ -89,0 +92,1 @@\n+      ShouldNotReachHere();\n@@ -164,2 +168,2 @@\n-\n-  int lh = Klass::array_layout_helper(_lh_array_tag_vt_value, true, hsize, etype, esize);\n+  bool null_free = lk != NULLABLE_ATOMIC_FLAT;\n+  int lh = Klass::array_layout_helper(_lh_array_tag_vt_value, null_free, hsize, etype, esize);\n@@ -172,1 +176,1 @@\n-  assert(layout_helper_is_null_free(lh), \"correct kind\");\n+  assert(layout_helper_is_null_free(lh) == null_free, \"correct kind\");\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.cpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"}]}