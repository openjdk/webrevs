{"files":[{"patch":"@@ -59,2 +59,2 @@\n-  ifeq ($$($1_Type), Value)\n-    $1_ARGS += -KValue\n+  ifeq ($$($1_Type), FlatValue)\n+    $1_ARGS += -KFlatValue\n@@ -66,1 +66,1 @@\n-        else ifeq ($$($1_Type), Value)\n+        else ifeq ($$($1_Type), FlatValue)\n@@ -275,1 +275,1 @@\n-VARHANDLES_TYPES := Boolean Byte Short Char Int Long Float Double Reference Value\n+VARHANDLES_TYPES := Boolean Byte Short Char Int Long Float Double Reference FlatValue\n","filename":"make\/modules\/java.base\/gensrc\/GensrcVarHandles.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4497,1 +4497,0 @@\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1356,4 +1356,5 @@\n-    MN_FLAT_FIELD            = 0x00800000, \/\/ flat field\n-    MN_NULL_RESTRICTED_FIELD = 0x01000000, \/\/ null-restricted field\n-    MN_REFERENCE_KIND_SHIFT  = 26, \/\/ refKind\n-    MN_REFERENCE_KIND_MASK   = 0x3C000000 >> MN_REFERENCE_KIND_SHIFT,\n+    MN_NULL_RESTRICTED_FIELD = 0x00800000, \/\/ null-restricted field\n+    MN_REFERENCE_KIND_SHIFT  = 24, \/\/ refKind\n+    MN_REFERENCE_KIND_MASK   = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, \/\/ 4 bits\n+    MN_LAYOUT_SHIFT          = 28, \/\/ field layout\n+    MN_LAYOUT_MASK           = 0x70000000 >> MN_LAYOUT_SHIFT, \/\/ 3 bits\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -139,2 +139,1 @@\n-  HIDDEN_MEMBER        = java_lang_invoke_MemberName::MN_HIDDEN_MEMBER,\n-  FLAT_FIELD            = java_lang_invoke_MemberName::MN_FLAT_FIELD,\n+  HIDDEN_MEMBER         = java_lang_invoke_MemberName::MN_HIDDEN_MEMBER,\n@@ -144,0 +143,2 @@\n+  LAYOUT_SHIFT          = java_lang_invoke_MemberName::MN_LAYOUT_SHIFT,\n+  LAYOUT_MASK           = java_lang_invoke_MemberName::MN_LAYOUT_MASK,\n@@ -360,1 +361,5 @@\n-  if (fd.is_flat()) flags |= FLAT_FIELD;\n+  if (fd.is_flat()) {\n+    int layout_kind = fd.layout_kind();\n+    assert((layout_kind & LAYOUT_MASK) == layout_kind, \"Layout information loss\");\n+    flags |= layout_kind << LAYOUT_SHIFT;\n+  }\n@@ -1009,1 +1014,0 @@\n-    template(java_lang_invoke_MemberName,MN_FLAT_FIELD) \\\n@@ -1012,0 +1016,2 @@\n+    template(java_lang_invoke_MemberName,MN_LAYOUT_SHIFT) \\\n+    template(java_lang_invoke_MemberName,MN_LAYOUT_MASK) \\\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+  LayoutKind layout_kind()        const    { return _fieldinfo.layout_kind(); }\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2108,1 +2108,1 @@\n-                                    ? UNSAFE.getValue(obj, readKeys[i], f.getType())\n+                                    ? UNSAFE.getFlatValue(obj, readKeys[i], UNSAFE.fieldLayout(f), f.getType())\n@@ -2161,1 +2161,1 @@\n-                                UNSAFE.putValue(obj, key, f.getType(), val);\n+                                UNSAFE.putFlatValue(obj, key, UNSAFE.fieldLayout(f), f.getType(), val);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -513,0 +513,1 @@\n+        final int      layout;\n@@ -518,0 +519,1 @@\n+            this.layout = member.getLayout();\n@@ -612,0 +614,5 @@\n+    @ForceInline\n+    static int fieldLayout(Object accessorObj) {\n+        return ((Accessor) accessorObj).layout;\n+    }\n+\n@@ -718,1 +725,1 @@\n-                    case OBJECT:  return isFlat ? GET_VALUE_VOLATILE : GET_REFERENCE_VOLATILE;\n+                    case OBJECT:  return isFlat ? GET_FLAT_VALUE_VOLATILE : GET_REFERENCE_VOLATILE;\n@@ -730,1 +737,1 @@\n-                    case OBJECT:  return isFlat ? GET_VALUE : GET_REFERENCE;\n+                    case OBJECT:  return isFlat ? GET_FLAT_VALUE : GET_REFERENCE;\n@@ -744,1 +751,1 @@\n-                    case OBJECT:  return isFlat ? PUT_VALUE_VOLATILE : PUT_REFERENCE_VOLATILE;\n+                    case OBJECT:  return isFlat ? PUT_FLAT_VALUE_VOLATILE : PUT_REFERENCE_VOLATILE;\n@@ -756,1 +763,1 @@\n-                    case OBJECT:  return isFlat ? PUT_VALUE : PUT_REFERENCE;\n+                    case OBJECT:  return isFlat ? PUT_FLAT_VALUE : PUT_REFERENCE;\n@@ -784,1 +791,1 @@\n-                            ? MethodType.methodType(ft, Object.class, long.class, Class.class)\n+                            ? MethodType.methodType(ft, Object.class, long.class, int.class, Class.class)\n@@ -788,1 +795,1 @@\n-                            ? MethodType.methodType(void.class, Object.class, long.class, Class.class, ft)\n+                            ? MethodType.methodType(void.class, Object.class, long.class, int.class, Class.class, ft)\n@@ -821,0 +828,1 @@\n+        final int LAYOUT = (isFlat ? nameCursor++ : -1); \/\/ field must be instance\n@@ -839,1 +847,1 @@\n-        assert (outArgs.length == (isGetter ? 3 : 4) + (isFlat ? 1 : 0));\n+        assert (outArgs.length == (isGetter ? 3 : 4) + (isFlat ? 2 : 0));\n@@ -850,0 +858,2 @@\n+            assert !isStatic : \"static field is flat form requested\";\n+            outArgs[x++] = names[LAYOUT] = new Name(getFunction(NF_fieldLayout), names[DMH_THIS]);\n@@ -918,1 +928,2 @@\n-            NF_LIMIT = 16;\n+            NF_fieldLayout = 16,\n+            NF_LIMIT = 17;\n@@ -934,0 +945,1 @@\n+    private static final MethodType INT_OBJ_TYPE = MethodType.methodType(int.class, Object.class);\n@@ -982,0 +994,2 @@\n+                case NF_fieldLayout:\n+                    return getNamedFunction(\"fieldLayout\", INT_OBJ_TYPE);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -270,4 +270,4 @@\n-        GET_VALUE(\"getValue\"),\n-        PUT_VALUE(\"putValue\"),\n-        GET_VALUE_VOLATILE(\"getValueVolatile\"),\n-        PUT_VALUE_VOLATILE(\"putValueVolatile\"),\n+        GET_FLAT_VALUE(\"getFlatValue\"),\n+        PUT_FLAT_VALUE(\"putFlatValue\"),\n+        GET_FLAT_VALUE_VOLATILE(\"getFlatValueVolatile\"),\n+        PUT_FLAT_VALUE_VOLATILE(\"putFlatValueVolatile\"),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -442,1 +442,1 @@\n-    public boolean isFlat() { return (flags & MN_FLAT_FIELD) == MN_FLAT_FIELD; }\n+    public boolean isFlat() { return getLayout() != 0; }\n@@ -447,0 +447,5 @@\n+    \/**\n+     * VM-internal layout code for this field, 0 if this field is not flat.\n+     *\/\n+    public int getLayout() { return (flags >>> MN_LAYOUT_SHIFT) & MN_LAYOUT_MASK; }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -122,4 +122,5 @@\n-            MN_FLAT_FIELD            = 0x00800000, \/\/ flat field\n-            MN_NULL_RESTRICTED       = 0x01000000, \/\/ null-restricted field\n-            MN_REFERENCE_KIND_SHIFT  = 26, \/\/ refKind\n-            MN_REFERENCE_KIND_MASK   = 0x3C000000 >> MN_REFERENCE_KIND_SHIFT;\n+            MN_NULL_RESTRICTED       = 0x00800000, \/\/ null-restricted field\n+            MN_REFERENCE_KIND_SHIFT  = 24, \/\/ refKind\n+            MN_REFERENCE_KIND_MASK   = 0x0F000000 >>> MN_REFERENCE_KIND_SHIFT, \/\/ 4 bits\n+            MN_LAYOUT_SHIFT          = 28, \/\/ field layout\n+            MN_LAYOUT_MASK           = 0x70000000 >>> MN_LAYOUT_SHIFT;  \/\/ 3 bits\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleNatives.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -510,3 +510,3 @@\n-             VarHandleValues.Array,\n-             VarHandleValues.FieldInstanceReadOnly,\n-             VarHandleValues.FieldStaticReadOnly {\n+             VarHandleFlatValues.Array,\n+             VarHandleFlatValues.FieldInstanceReadOnly,\n+             VarHandleFlatValues.FieldStaticReadOnly {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+                    int layout = f.getLayout();\n@@ -54,2 +55,2 @@\n-                        ? new VarHandleValues.FieldInstanceReadOnly(refc, foffset, type, f.getCheckedFieldType())\n-                        : new VarHandleValues.FieldInstanceReadWrite(refc, foffset, type, f.getCheckedFieldType()));\n+                        ? new VarHandleFlatValues.FieldInstanceReadOnly(refc, foffset, type, f.getCheckedFieldType(), layout)\n+                        : new VarHandleFlatValues.FieldInstanceReadWrite(refc, foffset, type, f.getCheckedFieldType(), layout));\n@@ -121,3 +122,5 @@\n-                return maybeAdapt(f.isFinal() && !isWriteAllowedOnFinalFields\n-                        ? new VarHandleValues.FieldStaticReadOnly(decl, base, foffset, type, f.getCheckedFieldType())\n-                        : new VarHandleValues.FieldStaticReadWrite(decl, base, foffset, type, f.getCheckedFieldType()));\n+                assert false : (\"static field is flat in \" + decl + \".\" + f.getName());\n+                int layout = f.getLayout();\n+                return f.isFinal() && !isWriteAllowedOnFinalFields\n+                        ? new VarHandleFlatValues.FieldStaticReadOnly(decl, base, foffset, type, f.getCheckedFieldType(), layout)\n+                        : new VarHandleFlatValues.FieldStaticReadWrite(decl, base, foffset, type, f.getCheckedFieldType(), layout);\n@@ -216,3 +219,8 @@\n-            return maybeAdapt(UNSAFE.isFlatArray(arrayClass)\n-                ? new VarHandleValues.Array(aoffset, ashift, arrayClass)\n-                : new VarHandleReferences.Array(aoffset, ashift, arrayClass));\n+            VarHandle vh;\n+            if (UNSAFE.isFlatArray(arrayClass)) {\n+                int layout = UNSAFE.arrayLayout(arrayClass);\n+                vh = new VarHandleFlatValues.Array(aoffset, ashift, arrayClass, layout);\n+            } else {\n+                vh = new VarHandleReferences.Array(aoffset, ashift, arrayClass);\n+            }\n+            return maybeAdapt(vh);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -52,0 +52,3 @@\n+#if[FlatValue]\n+        final int layout; \/\/ Unsafe.fieldLayout\n+#end[FlatValue]\n@@ -53,2 +56,2 @@\n-        FieldInstanceReadOnly(Class<?> receiverType, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}) {\n-            this(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, FieldInstanceReadOnly.FORM, false);\n+        FieldInstanceReadOnly(Class<?> receiverType, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}{#if[FlatValue]?, int layout}) {\n+            this(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, FieldInstanceReadOnly.FORM, false);\n@@ -57,1 +60,1 @@\n-        protected FieldInstanceReadOnly(Class<?> receiverType, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType},\n+        protected FieldInstanceReadOnly(Class<?> receiverType, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}{#if[FlatValue]?, int layout},\n@@ -66,0 +69,3 @@\n+#if[FlatValue]\n+            this.layout = layout;\n+#end[FlatValue]\n@@ -72,1 +78,1 @@\n-                : new FieldInstanceReadOnly(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, vform, true);\n+                : new FieldInstanceReadOnly(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, vform, true);\n@@ -79,1 +85,1 @@\n-                : new FieldInstanceReadOnly(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, vform, false);\n+                : new FieldInstanceReadOnly(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, vform, false);\n@@ -104,6 +110,1 @@\n-                                 handle.fieldOffset{#if[Value]?, handle.fieldType});\n-#if[Object]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Object]\n+                                 handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType});\n@@ -117,6 +118,1 @@\n-                                 handle.fieldOffset{#if[Value]?, handle.fieldType});\n-#if[Object]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Object]\n+                                 handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType});\n@@ -130,6 +126,1 @@\n-                                 handle.fieldOffset{#if[Value]?, handle.fieldType});\n-#if[Object]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Object]\n+                                 handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType});\n@@ -143,6 +134,1 @@\n-                                 handle.fieldOffset{#if[Value]?, handle.fieldType});\n-#if[Object]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Object]\n+                                 handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType});\n@@ -156,2 +142,2 @@\n-        FieldInstanceReadWrite(Class<?> receiverType, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}) {\n-            this(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, false);\n+        FieldInstanceReadWrite(Class<?> receiverType, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}{#if[FlatValue]?, int layout}) {\n+            this(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, false);\n@@ -160,1 +146,1 @@\n-        private FieldInstanceReadWrite(Class<?> receiverType, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType},\n+        private FieldInstanceReadWrite(Class<?> receiverType, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}{#if[FlatValue]?, int layout},\n@@ -162,1 +148,1 @@\n-            super(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, FieldInstanceReadWrite.FORM, exact);\n+            super(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, FieldInstanceReadWrite.FORM, exact);\n@@ -169,1 +155,1 @@\n-                : new FieldInstanceReadWrite(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, true);\n+                : new FieldInstanceReadWrite(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, true);\n@@ -176,1 +162,1 @@\n-                : new FieldInstanceReadWrite(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, false);\n+                : new FieldInstanceReadWrite(receiverType, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, false);\n@@ -190,1 +176,1 @@\n-                             handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                             handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -198,1 +184,1 @@\n-                                     handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                     handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -206,1 +192,1 @@\n-                                   handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                   handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -214,1 +200,1 @@\n-                                    handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                    handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -223,1 +209,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -232,1 +218,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -241,1 +227,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -250,1 +236,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -259,1 +245,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -268,1 +254,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -277,1 +263,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -286,1 +272,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -295,1 +281,1 @@\n-                                          handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                          handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -303,1 +289,1 @@\n-                                          handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                          handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -311,1 +297,1 @@\n-                                          handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                          handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -429,0 +415,3 @@\n+#if[FlatValue]\n+        final int layout;\n+#end[FlatValue]\n@@ -430,2 +419,2 @@\n-        FieldStaticReadOnly(Class<?> declaringClass, Object base, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}) {\n-            this(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, FieldStaticReadOnly.FORM, false);\n+        FieldStaticReadOnly(Class<?> declaringClass, Object base, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}{#if[FlatValue]?, int layout}) {\n+            this(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, FieldStaticReadOnly.FORM, false);\n@@ -434,1 +423,1 @@\n-        protected FieldStaticReadOnly(Class<?> declaringClass, Object base, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType},\n+        protected FieldStaticReadOnly(Class<?> declaringClass, Object base, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}{#if[FlatValue]?, int layout},\n@@ -444,0 +433,3 @@\n+#if[FlatValue]\n+            this.layout = layout;\n+#end[FlatValue]\n@@ -450,1 +442,1 @@\n-                : new FieldStaticReadOnly(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, vform, true);\n+                : new FieldStaticReadOnly(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, vform, true);\n@@ -457,1 +449,1 @@\n-                : new FieldStaticReadOnly(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, vform, false);\n+                : new FieldStaticReadOnly(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, vform, false);\n@@ -484,6 +476,1 @@\n-                                 handle.fieldOffset{#if[Value]?, handle.fieldType});\n-#if[Object]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Object]\n+                                 handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType});\n@@ -497,6 +484,1 @@\n-                                 handle.fieldOffset{#if[Value]?, handle.fieldType});\n-#if[Object]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Object]\n+                                 handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType});\n@@ -510,6 +492,1 @@\n-                                 handle.fieldOffset{#if[Value]?, handle.fieldType});\n-#if[Object]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Object]\n+                                 handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType});\n@@ -523,6 +500,1 @@\n-                                 handle.fieldOffset{#if[Value]?, handle.fieldType});\n-#if[Object]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Object]\n+                                 handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType});\n@@ -537,2 +509,2 @@\n-        FieldStaticReadWrite(Class<?> declaringClass, Object base, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}) {\n-            this(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, false);\n+        FieldStaticReadWrite(Class<?> declaringClass, Object base, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}{#if[FlatValue]?, int layout}) {\n+            this(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, false);\n@@ -541,1 +513,1 @@\n-        private FieldStaticReadWrite(Class<?> declaringClass, Object base, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType},\n+        private FieldStaticReadWrite(Class<?> declaringClass, Object base, long fieldOffset{#if[Object]?, Class<?> fieldType, CheckedType checkedFieldType}{#if[FlatValue]?, int layout},\n@@ -543,1 +515,1 @@\n-            super(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, FieldStaticReadWrite.FORM, exact);\n+            super(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, FieldStaticReadWrite.FORM, exact);\n@@ -550,1 +522,1 @@\n-                : new FieldStaticReadWrite(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, true);\n+                : new FieldStaticReadWrite(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, true);\n@@ -557,1 +529,1 @@\n-                : new FieldStaticReadWrite(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}, false);\n+                : new FieldStaticReadWrite(declaringClass, base, fieldOffset{#if[Object]?, fieldType, checkedFieldType}{#if[FlatValue]?, layout}, false);\n@@ -571,1 +543,1 @@\n-                             handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                             handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -579,1 +551,1 @@\n-                                     handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                     handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -587,1 +559,1 @@\n-                                   handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                   handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -595,1 +567,1 @@\n-                                    handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                    handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -604,1 +576,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -614,1 +586,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -623,1 +595,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -632,1 +604,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -641,1 +613,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -650,1 +622,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -659,1 +631,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -668,1 +640,1 @@\n-                                               handle.fieldOffset{#if[Object]?, handle.fieldType},\n+                                               handle.fieldOffset{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.fieldType},\n@@ -677,1 +649,1 @@\n-                                          handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                          handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -685,1 +657,1 @@\n-                                          handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                          handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -693,1 +665,1 @@\n-                                          handle.fieldOffset{#if[Value]?, handle.fieldType},\n+                                          handle.fieldOffset{#if[FlatValue]?, handle.layout, handle.fieldType},\n@@ -808,0 +780,3 @@\n+#if[FlatValue]\n+        final int layout;\n+#end[FlatValue]\n@@ -809,2 +784,2 @@\n-        Array(int abase, int ashift{#if[Object]?, Class<?> arrayType}) {\n-            this(abase, ashift{#if[Object]?, arrayType}, false);\n+        Array(int abase, int ashift{#if[Object]?, Class<?> arrayType}{#if[FlatValue]?, int layout}) {\n+            this(abase, ashift{#if[Object]?, arrayType}{#if[FlatValue]?, layout}, false);\n@@ -813,1 +788,1 @@\n-        private Array(int abase, int ashift{#if[Object]?, Class<?> arrayType}, boolean exact) {\n+        private Array(int abase, int ashift{#if[Object]?, Class<?> arrayType}{#if[FlatValue]?, int layout}, boolean exact) {\n@@ -821,0 +796,3 @@\n+#if[FlatValue]\n+            this.layout = layout;\n+#end[FlatValue]\n@@ -827,1 +805,1 @@\n-                : new Array(abase, ashift{#if[Object]?, arrayType}, true);\n+                : new Array(abase, ashift{#if[Object]?, arrayType}{#if[FlatValue]?, layout}, true);\n@@ -834,1 +812,1 @@\n-                : new Array(abase, ashift{#if[Object]?, arrayType}, false);\n+                : new Array(abase, ashift{#if[Object]?, arrayType}{#if[FlatValue]?, layout}, false);\n@@ -856,1 +834,1 @@\n-                return {#if[Value]?ValueClass.componentCheckedType(oarray):handle.componentType}.cast(value);\n+                return {#if[FlatValue]?ValueClass.componentCheckedType(oarray):handle.componentType}.cast(value);\n@@ -896,1 +874,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -916,1 +894,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -921,1 +899,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Value]?, handle.componentType});\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType});\n@@ -936,1 +914,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -942,1 +920,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Value]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType},\n@@ -958,1 +936,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -963,1 +941,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Value]?, handle.componentType});\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType});\n@@ -978,1 +956,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -984,1 +962,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Value]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType},\n@@ -1000,1 +978,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1005,1 +983,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Value]?, handle.componentType});\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType});\n@@ -1020,1 +998,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1026,1 +1004,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Value]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType},\n@@ -1043,1 +1021,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1048,1 +1026,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n@@ -1065,1 +1043,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1070,1 +1048,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n@@ -1087,1 +1065,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1092,1 +1070,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n@@ -1109,1 +1087,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1114,1 +1092,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n@@ -1131,1 +1109,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1136,1 +1114,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n@@ -1153,1 +1131,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1158,1 +1136,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n@@ -1175,1 +1153,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1180,1 +1158,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n@@ -1197,1 +1175,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1202,1 +1180,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n@@ -1219,1 +1197,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1224,1 +1202,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Value]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType},\n@@ -1240,1 +1218,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1245,1 +1223,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Value]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType},\n@@ -1261,1 +1239,1 @@\n-                VarHandle vh = VarHandleValues.flatArrayVarHandle(arrayType);\n+                VarHandle vh = VarHandleFlatValues.flatArrayVarHandle(arrayType);\n@@ -1266,1 +1244,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Value]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType},\n@@ -1384,1 +1362,1 @@\n-#if[Value]\n+#if[FlatValue]\n@@ -1391,1 +1369,2 @@\n-            return new Array(aoffset, ashift, arrayClass);\n+            int layout = UNSAFE.arrayLayout(arrayClass);\n+            return new Array(aoffset, ashift, arrayClass, layout);\n@@ -1397,1 +1376,1 @@\n-#end[Value]\n+#end[FlatValue]\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":123,"deletions":144,"binary":false,"changes":267,"status":"modified"},{"patch":"@@ -227,0 +227,2 @@\n+    public static final int NON_FLAT_LAYOUT = 0;\n+\n@@ -231,0 +233,2 @@\n+     *\n+     * A layout of 0 indicates this array is not flat.\n@@ -246,0 +250,2 @@\n+     *\n+     * A layout of 0 indicates this field is not flat.\n@@ -251,1 +257,1 @@\n-            return fieldLayout0(f);\n+        return fieldLayout0(f);\n@@ -1664,1 +1670,2 @@\n-    public final <V> boolean compareAndSetValue(Object o, long offset,\n+    public final <V> boolean compareAndSetFlatValue(Object o, long offset,\n+                                                int layout,\n@@ -1669,1 +1676,1 @@\n-            Object witness = getValue(o, offset, valueType);\n+            Object witness = getFlatValue(o, offset, layout, valueType);\n@@ -1671,1 +1678,1 @@\n-                putValue(o, offset, valueType, x);\n+                putFlatValue(o, offset, layout, valueType, x);\n@@ -1703,1 +1710,2 @@\n-    public final <V> Object compareAndExchangeValue(Object o, long offset,\n+    public final <V> Object compareAndExchangeFlatValue(Object o, long offset,\n+                                                    int layout,\n@@ -1708,1 +1716,1 @@\n-            Object witness = getValue(o, offset, valueType);\n+            Object witness = getFlatValue(o, offset, layout, valueType);\n@@ -1710,1 +1718,1 @@\n-                putValue(o, offset, valueType, x);\n+                putFlatValue(o, offset, layout, valueType, x);\n@@ -1731,1 +1739,2 @@\n-    public final <V> Object compareAndExchangeValueAcquire(Object o, long offset,\n+    public final <V> Object compareAndExchangeFlatValueAcquire(Object o, long offset,\n+                                                           int layout,\n@@ -1735,1 +1744,1 @@\n-        return compareAndExchangeValue(o, offset, valueType, expected, x);\n+        return compareAndExchangeFlatValue(o, offset, layout, valueType, expected, x);\n@@ -1753,1 +1762,2 @@\n-    public final <V> Object compareAndExchangeValueRelease(Object o, long offset,\n+    public final <V> Object compareAndExchangeFlatValueRelease(Object o, long offset,\n+                                                           int layout,\n@@ -1757,1 +1767,1 @@\n-        return compareAndExchangeValue(o, offset, valueType, expected, x);\n+        return compareAndExchangeFlatValue(o, offset, layout, valueType, expected, x);\n@@ -1779,1 +1789,2 @@\n-    public final <V> boolean weakCompareAndSetValuePlain(Object o, long offset,\n+    public final <V> boolean weakCompareAndSetFlatValuePlain(Object o, long offset,\n+                                                         int layout,\n@@ -1783,1 +1794,1 @@\n-        return compareAndSetValue(o, offset, valueType, expected, x);\n+        return compareAndSetFlatValue(o, offset, layout, valueType, expected, x);\n@@ -1805,1 +1816,2 @@\n-    public final <V> boolean weakCompareAndSetValueAcquire(Object o, long offset,\n+    public final <V> boolean weakCompareAndSetFlatValueAcquire(Object o, long offset,\n+                                                           int layout,\n@@ -1809,1 +1821,1 @@\n-        return compareAndSetValue(o, offset, valueType, expected, x);\n+        return compareAndSetFlatValue(o, offset, layout, valueType, expected, x);\n@@ -1831,1 +1843,2 @@\n-    public final <V> boolean weakCompareAndSetValueRelease(Object o, long offset,\n+    public final <V> boolean weakCompareAndSetFlatValueRelease(Object o, long offset,\n+                                                           int layout,\n@@ -1835,1 +1848,1 @@\n-        return compareAndSetValue(o, offset, valueType, expected, x);\n+        return compareAndSetFlatValue(o, offset, layout, valueType, expected, x);\n@@ -1857,1 +1870,2 @@\n-    public final <V> boolean weakCompareAndSetValue(Object o, long offset,\n+    public final <V> boolean weakCompareAndSetFlatValue(Object o, long offset,\n+                                                    int layout,\n@@ -1861,1 +1875,1 @@\n-        return compareAndSetValue(o, offset, valueType, expected, x);\n+        return compareAndSetFlatValue(o, offset, layout, valueType, expected, x);\n@@ -2486,1 +2500,1 @@\n-    public final <V> Object getValueVolatile(Object base, long offset, Class<?> valueType) {\n+    public final <V> Object getFlatValueVolatile(Object base, long offset, int layout, Class<?> valueType) {\n@@ -2488,1 +2502,1 @@\n-            return getValue(base, offset, valueType);\n+            return getFlatValue(base, offset, layout, valueType);\n@@ -2499,1 +2513,1 @@\n-    public final <V> void putValueVolatile(Object o, long offset, Class<?> valueType, V x) {\n+    public final <V> void putFlatValueVolatile(Object o, long offset, int layout, Class<?> valueType, V x) {\n@@ -2501,1 +2515,1 @@\n-            putValue(o, offset, valueType, x);\n+            putFlatValue(o, offset, layout, valueType, x);\n@@ -2577,2 +2591,2 @@\n-    public final <V> Object getValueAcquire(Object base, long offset, Class<?> valueType) {\n-        return getValueVolatile(base, offset, valueType);\n+    public final <V> Object getFlatValueAcquire(Object base, long offset, int layout, Class<?> valueType) {\n+        return getFlatValueVolatile(base, offset, layout, valueType);\n@@ -2645,2 +2659,2 @@\n-    public final <V> void putValueRelease(Object o, long offset, Class<?> valueType, V x) {\n-        putValueVolatile(o, offset, valueType, x);\n+    public final <V> void putFlatValueRelease(Object o, long offset, int layout, Class<?> valueType, V x) {\n+        putFlatValueVolatile(o, offset, layout, valueType, x);\n@@ -2705,2 +2719,2 @@\n-    public final <V> Object getValueOpaque(Object base, long offset, Class<?> valueType) {\n-        return getValueVolatile(base, offset, valueType);\n+    public final <V> Object getFlatValueOpaque(Object base, long offset, int layout, Class<?> valueType) {\n+        return getFlatValueVolatile(base, offset, layout, valueType);\n@@ -2763,2 +2777,2 @@\n-    public final <V> void putValueOpaque(Object o, long offset, Class<?> valueType, V x) {\n-        putValueVolatile(o, offset, valueType, x);\n+    public final <V> void putFlatValueOpaque(Object o, long offset, int layout, Class<?> valueType, V x) {\n+        putFlatValueVolatile(o, offset, layout, valueType, x);\n@@ -3202,1 +3216,1 @@\n-    public final <V> Object getAndSetValue(Object o, long offset, Class<?> valueType, V newValue) {\n+    public final <V> Object getAndSetFlatValue(Object o, long offset, int layout, Class<?> valueType, V newValue) {\n@@ -3204,2 +3218,2 @@\n-            Object oldValue = getValue(o, offset, valueType);\n-            putValue(o, offset, valueType, newValue);\n+            Object oldValue = getFlatValue(o, offset, layout, valueType);\n+            putFlatValue(o, offset, layout, valueType, newValue);\n@@ -3220,2 +3234,2 @@\n-    public final <V> Object getAndSetValueRelease(Object o, long offset, Class<?> valueType, V newValue) {\n-        return getAndSetValue(o, offset, valueType, newValue);\n+    public final <V> Object getAndSetFlatValueRelease(Object o, long offset, int layout, Class<?> valueType, V newValue) {\n+        return getAndSetFlatValue(o, offset, layout, valueType, newValue);\n@@ -3234,2 +3248,2 @@\n-    public final <V> Object getAndSetValueAcquire(Object o, long offset, Class<?> valueType, V newValue) {\n-        return getAndSetValue(o, offset, valueType, newValue);\n+    public final <V> Object getAndSetFlatValueAcquire(Object o, long offset, int layout, Class<?> valueType, V newValue) {\n+        return getAndSetFlatValue(o, offset, layout, valueType, newValue);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":52,"deletions":38,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+compiler\/valhalla\/inlinetypes\/TestIntrinsics.java 8349110 generic-all\n+\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -371,0 +371,1 @@\n+    private static final int V1_LAYOUT;\n@@ -381,0 +382,1 @@\n+            V1_LAYOUT = U.fieldLayout(v1Field);\n@@ -571,1 +573,1 @@\n-            return U.getValue(v, V1_OFFSET, MyValue2.class);\n+            return U.getFlatValue(v, V1_OFFSET, V1_LAYOUT, MyValue2.class);\n@@ -587,0 +589,1 @@\n+    private static final int TEST31_VT_LAYOUT;\n@@ -592,0 +595,1 @@\n+            TEST31_VT_LAYOUT = U.fieldLayout(test31_vt_Field);\n@@ -602,1 +606,1 @@\n-            return U.getValue(this, TEST31_VT_OFFSET, MyValue1.class);\n+            return U.getFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class);\n@@ -619,1 +623,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class, vt);\n+            U.putFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, vt);\n@@ -637,0 +641,1 @@\n+    private static final int TEST33_LAYOUT;\n@@ -643,0 +648,1 @@\n+            TEST33_LAYOUT = U.arrayLayout(TEST33_ARRAY.getClass());\n@@ -652,1 +658,1 @@\n-            return U.getValue(TEST33_ARRAY, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class);\n+            return U.getFlatValue(TEST33_ARRAY, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class);\n@@ -670,1 +676,1 @@\n-            U.putValue(TEST33_ARRAY, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class, vt);\n+            U.putFlatValue(TEST33_ARRAY, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class, vt);\n@@ -689,1 +695,1 @@\n-            return U.getValue(o, TEST31_VT_OFFSET, MyValue1.class);\n+            return U.getFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class);\n@@ -707,1 +713,1 @@\n-            return U.getValue(this, offset, MyValue1.class);\n+            return U.getFlatValue(this, offset, TEST31_VT_LAYOUT, MyValue1.class);\n@@ -725,1 +731,1 @@\n-            U.putValue(o, TEST31_VT_OFFSET, MyValue1.class, vt);\n+            U.putFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, vt);\n@@ -745,1 +751,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class, o);\n+            U.putFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, o);\n@@ -1092,1 +1098,1 @@\n-            return U.getValue(test55_vt, V1_OFFSET, MyValue2.class);\n+            return U.getFlatValue(test55_vt, V1_OFFSET, V1_LAYOUT, MyValue2.class);\n@@ -1190,1 +1196,1 @@\n-            return U.compareAndSetValue(this, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndSetFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1220,1 +1226,1 @@\n-            return U.compareAndSetValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class, oldVal, newVal);\n+            return U.compareAndSetFlatValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1250,1 +1256,1 @@\n-            return U.compareAndSetValue(o, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndSetFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1274,1 +1280,1 @@\n-            return U.compareAndSetValue(this, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndSetFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1298,1 +1304,1 @@\n-            return U.compareAndExchangeValue(this, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndExchangeFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1329,1 +1335,1 @@\n-            return U.compareAndExchangeValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class, oldVal, newVal);\n+            return U.compareAndExchangeFlatValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1359,1 +1365,1 @@\n-            return U.compareAndExchangeValue(o, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndExchangeFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1384,1 +1390,1 @@\n-            return U.compareAndExchangeValue(this, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndExchangeFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1411,1 +1417,1 @@\n-                return U.getValue(v1, V1_OFFSET, MyValue2.class);\n+                return U.getFlatValue(v1, V1_OFFSET, V1_LAYOUT, MyValue2.class);\n@@ -1416,1 +1422,1 @@\n-                return U.getValue(v2, V1_OFFSET, MyValue2.class);\n+                return U.getFlatValue(v2, V1_OFFSET, V1_LAYOUT, MyValue2.class);\n@@ -1435,1 +1441,1 @@\n-                return U.getValue(v1, offset, MyValue2.class);\n+                return U.getFlatValue(v1, offset, V1_LAYOUT, MyValue2.class);\n@@ -1440,1 +1446,1 @@\n-                return U.getValue(v2, offset, MyValue2.class);\n+                return U.getFlatValue(v2, offset, V1_LAYOUT, MyValue2.class);\n@@ -1463,1 +1469,1 @@\n-                return U.getValue(test73_value1, offset, MyValue2.class);\n+                return U.getFlatValue(test73_value1, offset, V1_LAYOUT, MyValue2.class);\n@@ -1468,1 +1474,1 @@\n-                return U.getValue(test73_value2, offset, MyValue2.class);\n+                return U.getFlatValue(test73_value2, offset, V1_LAYOUT, MyValue2.class);\n@@ -1603,1 +1609,1 @@\n-    public Test80Value2 test80(Test80Value1 v, boolean flat, long offset) {\n+    public Test80Value2 test80(Test80Value1 v, boolean flat, int layout, long offset) {\n@@ -1605,1 +1611,1 @@\n-            return U.getValue(v, offset, Test80Value2.class);\n+            return U.getFlatValue(v, offset, layout, Test80Value2.class);\n@@ -1615,1 +1621,1 @@\n-        Asserts.assertEQ(test80(v, U.isFlatField(field), U.objectFieldOffset(field)), v.v);\n+        Asserts.assertEQ(test80(v, U.isFlatField(field), U.fieldLayout(field), U.objectFieldOffset(field)), v.v);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"}]}