{"files":[{"patch":"@@ -118,0 +118,1 @@\n+                int layout = member.isFlat() ? member.getLayout() : 0;\n@@ -119,1 +120,1 @@\n-                return new Accessor(mtype, lform, member, true, (int)offset);\n+                return new Accessor(mtype, lform, member, true, (int)offset, layout);\n@@ -513,0 +514,1 @@\n+        final int      layout;\n@@ -514,1 +516,1 @@\n-                         boolean crackable, int fieldOffset) {\n+                         boolean crackable, int fieldOffset, int layout) {\n@@ -518,0 +520,1 @@\n+            this.layout = layout;\n@@ -525,1 +528,1 @@\n-            return new Accessor(mt, lf, member, crackable, fieldOffset);\n+            return new Accessor(mt, lf, member, crackable, fieldOffset, layout);\n@@ -530,1 +533,1 @@\n-            return new Accessor(newType, form, member, false, fieldOffset);\n+            return new Accessor(newType, form, member, false, fieldOffset, layout);\n@@ -612,0 +615,5 @@\n+    @ForceInline\n+    static int fieldLayout(Object accessorObj) {\n+        return ((Accessor) accessorObj).layout;\n+    }\n+\n@@ -718,1 +726,1 @@\n-                    case OBJECT:  return isFlat ? GET_VALUE_VOLATILE : GET_REFERENCE_VOLATILE;\n+                    case OBJECT:  return isFlat ? GET_FLAT_VALUE_VOLATILE : GET_REFERENCE_VOLATILE;\n@@ -730,1 +738,1 @@\n-                    case OBJECT:  return isFlat ? GET_VALUE : GET_REFERENCE;\n+                    case OBJECT:  return isFlat ? GET_FLAT_VALUE : GET_REFERENCE;\n@@ -744,1 +752,1 @@\n-                    case OBJECT:  return isFlat ? PUT_VALUE_VOLATILE : PUT_REFERENCE_VOLATILE;\n+                    case OBJECT:  return isFlat ? PUT_FLAT_VALUE_VOLATILE : PUT_REFERENCE_VOLATILE;\n@@ -756,1 +764,1 @@\n-                    case OBJECT:  return isFlat ? PUT_VALUE : PUT_REFERENCE;\n+                    case OBJECT:  return isFlat ? PUT_FLAT_VALUE : PUT_REFERENCE;\n@@ -784,1 +792,1 @@\n-                            ? MethodType.methodType(ft, Object.class, long.class, Class.class)\n+                            ? MethodType.methodType(ft, Object.class, long.class, int.class, Class.class)\n@@ -788,1 +796,1 @@\n-                            ? MethodType.methodType(void.class, Object.class, long.class, Class.class, ft)\n+                            ? MethodType.methodType(void.class, Object.class, long.class, int.class, Class.class, ft)\n@@ -821,0 +829,1 @@\n+        final int LAYOUT = (isFlat ? nameCursor++ : -1); \/\/ field must be instance\n@@ -839,1 +848,1 @@\n-        assert (outArgs.length == (isGetter ? 3 : 4) + (isFlat ? 1 : 0));\n+        assert (outArgs.length == (isGetter ? 3 : 4) + (isFlat ? 2 : 0));\n@@ -850,0 +859,2 @@\n+            assert !isStatic : \"static field is flat form requested\";\n+            outArgs[x++] = names[LAYOUT] = new Name(getFunction(NF_fieldLayout), names[DMH_THIS]);\n@@ -918,1 +929,2 @@\n-            NF_LIMIT = 16;\n+            NF_fieldLayout = 16,\n+            NF_LIMIT = 17;\n@@ -934,0 +946,1 @@\n+    private static final MethodType INT_OBJ_TYPE = MethodType.methodType(int.class, Object.class);\n@@ -982,0 +995,2 @@\n+                case NF_fieldLayout:\n+                    return getNamedFunction(\"fieldLayout\", INT_OBJ_TYPE);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":27,"deletions":12,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -270,4 +270,4 @@\n-        GET_VALUE(\"getValue\"),\n-        PUT_VALUE(\"putValue\"),\n-        GET_VALUE_VOLATILE(\"getValueVolatile\"),\n-        PUT_VALUE_VOLATILE(\"putValueVolatile\"),\n+        GET_FLAT_VALUE(\"getFlatValue\"),\n+        PUT_FLAT_VALUE(\"putFlatValue\"),\n+        GET_FLAT_VALUE_VOLATILE(\"getFlatValueVolatile\"),\n+        PUT_FLAT_VALUE_VOLATILE(\"putFlatValueVolatile\"),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -448,1 +448,4 @@\n-    \/** VM-internal layout code for this field {@link jdk.internal.misc.Unsafe#fieldLayout(Field)} *\/\n+    \/**\n+     * VM-internal layout code for this field {@link jdk.internal.misc.Unsafe#fieldLayout(Field)}.\n+     * Only meaningful if the field {@link #isFlat()}, otherwise this may be garbage.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -111,5 +111,0 @@\n-#if[Reference]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Reference]\n@@ -124,5 +119,0 @@\n-#if[Reference]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Reference]\n@@ -137,5 +127,0 @@\n-#if[Reference]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Reference]\n@@ -150,5 +135,0 @@\n-#if[Reference]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Reference]\n@@ -497,5 +477,0 @@\n-#if[Reference]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Reference]\n@@ -510,5 +485,0 @@\n-#if[Reference]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Reference]\n@@ -523,5 +493,0 @@\n-#if[Reference]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Reference]\n@@ -536,5 +501,0 @@\n-#if[Reference]\n-            if (value == null && handle.checkedFieldType instanceof NullRestrictedCheckedType) {\n-                return ValueClass.zeroInstance(handle.fieldType);\n-            }\n-#end[Reference]\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-    \/* Reports the kind of layout used for a given field in the storage\n+    \/** Reports the kind of layout used for a given field in the storage\n@@ -245,1 +245,2 @@\n-     * used for performance reasons.\n+     * used for performance reasons.  This value may be garbage if this field\n+     * is not {@link #isFlatField}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -371,0 +371,1 @@\n+    private static final int V1_LAYOUT;\n@@ -380,1 +381,3 @@\n-            V1_FLATTENED = U.isFlatField(v1Field);\n+            var flattened = U.isFlatField(v1Field);\n+            V1_FLATTENED = flattened;\n+            V1_LAYOUT = flattened ? U.fieldLayout(v1Field) : -1;\n@@ -571,1 +574,1 @@\n-            return U.getValue(v, V1_OFFSET, MyValue2.class);\n+            return U.getFlatValue(v, V1_OFFSET, V1_LAYOUT, MyValue2.class);\n@@ -587,0 +590,1 @@\n+    private static final int TEST31_VT_LAYOUT;\n@@ -591,1 +595,3 @@\n-            TEST31_VT_FLATTENED = U.isFlatField(test31_vt_Field);\n+            var flattened = U.isFlatField(test31_vt_Field);\n+            TEST31_VT_FLATTENED = flattened;\n+            TEST31_VT_LAYOUT = flattened ? U.fieldLayout(test31_vt_Field) : 0;\n@@ -602,1 +608,1 @@\n-            return U.getValue(this, TEST31_VT_OFFSET, MyValue1.class);\n+            return U.getFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class);\n@@ -619,1 +625,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class, vt);\n+            U.putFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, vt);\n@@ -637,0 +643,1 @@\n+    private static final int TEST33_LAYOUT;\n@@ -642,1 +649,3 @@\n-            TEST33_FLATTENED_ARRAY = U.isFlatArray(TEST33_ARRAY.getClass());\n+            var flattened = U.isFlatArray(TEST33_ARRAY.getClass());\n+            TEST33_FLATTENED_ARRAY = flattened;\n+            TEST33_LAYOUT = flattened ? U.arrayLayout(TEST33_ARRAY.getClass()) : 0;\n@@ -652,1 +661,1 @@\n-            return U.getValue(TEST33_ARRAY, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class);\n+            return U.getFlatValue(TEST33_ARRAY, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class);\n@@ -670,1 +679,1 @@\n-            U.putValue(TEST33_ARRAY, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class, vt);\n+            U.putFlatValue(TEST33_ARRAY, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class, vt);\n@@ -689,1 +698,1 @@\n-            return U.getValue(o, TEST31_VT_OFFSET, MyValue1.class);\n+            return U.getFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class);\n@@ -707,1 +716,1 @@\n-            return U.getValue(this, offset, MyValue1.class);\n+            return U.getFlatValue(this, offset, TEST31_VT_LAYOUT, MyValue1.class);\n@@ -725,1 +734,1 @@\n-            U.putValue(o, TEST31_VT_OFFSET, MyValue1.class, vt);\n+            U.putFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, vt);\n@@ -745,1 +754,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class, o);\n+            U.putFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, o);\n@@ -1092,1 +1101,1 @@\n-            return U.getValue(test55_vt, V1_OFFSET, MyValue2.class);\n+            return U.getFlatValue(test55_vt, V1_OFFSET, V1_LAYOUT, MyValue2.class);\n@@ -1190,1 +1199,1 @@\n-            return U.compareAndSetValue(this, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndSetFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1220,1 +1229,1 @@\n-            return U.compareAndSetValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class, oldVal, newVal);\n+            return U.compareAndSetFlatValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1250,1 +1259,1 @@\n-            return U.compareAndSetValue(o, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndSetFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1274,1 +1283,1 @@\n-            return U.compareAndSetValue(this, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndSetFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1298,1 +1307,1 @@\n-            return U.compareAndExchangeValue(this, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndExchangeFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1329,1 +1338,1 @@\n-            return U.compareAndExchangeValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class, oldVal, newVal);\n+            return U.compareAndExchangeFlatValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, TEST33_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1359,1 +1368,1 @@\n-            return U.compareAndExchangeValue(o, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndExchangeFlatValue(o, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1384,1 +1393,1 @@\n-            return U.compareAndExchangeValue(this, TEST31_VT_OFFSET, MyValue1.class, oldVal, newVal);\n+            return U.compareAndExchangeFlatValue(this, TEST31_VT_OFFSET, TEST31_VT_LAYOUT, MyValue1.class, oldVal, newVal);\n@@ -1411,1 +1420,1 @@\n-                return U.getValue(v1, V1_OFFSET, MyValue2.class);\n+                return U.getFlatValue(v1, V1_OFFSET, V1_LAYOUT, MyValue2.class);\n@@ -1416,1 +1425,1 @@\n-                return U.getValue(v2, V1_OFFSET, MyValue2.class);\n+                return U.getFlatValue(v2, V1_OFFSET, V1_LAYOUT, MyValue2.class);\n@@ -1435,1 +1444,1 @@\n-                return U.getValue(v1, offset, MyValue2.class);\n+                return U.getFlatValue(v1, offset, V1_LAYOUT, MyValue2.class);\n@@ -1440,1 +1449,1 @@\n-                return U.getValue(v2, offset, MyValue2.class);\n+                return U.getFlatValue(v2, offset, V1_LAYOUT, MyValue2.class);\n@@ -1463,1 +1472,1 @@\n-                return U.getValue(test73_value1, offset, MyValue2.class);\n+                return U.getFlatValue(test73_value1, offset, V1_LAYOUT, MyValue2.class);\n@@ -1468,1 +1477,1 @@\n-                return U.getValue(test73_value2, offset, MyValue2.class);\n+                return U.getFlatValue(test73_value2, offset, V1_LAYOUT, MyValue2.class);\n@@ -1603,1 +1612,1 @@\n-    public Test80Value2 test80(Test80Value1 v, boolean flat, long offset) {\n+    public Test80Value2 test80(Test80Value1 v, boolean flat, int layout, long offset) {\n@@ -1605,1 +1614,1 @@\n-            return U.getValue(v, offset, Test80Value2.class);\n+            return U.getFlatValue(v, offset, layout, Test80Value2.class);\n@@ -1615,1 +1624,2 @@\n-        Asserts.assertEQ(test80(v, U.isFlatField(field), U.objectFieldOffset(field)), v.v);\n+        var flat = U.isFlatField(field);\n+        Asserts.assertEQ(test80(v, flat, flat ? U.fieldLayout(field) : 0, U.objectFieldOffset(field)), v.v);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":40,"deletions":30,"binary":false,"changes":70,"status":"modified"}]}