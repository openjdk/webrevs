{"files":[{"patch":"@@ -1125,0 +1125,2 @@\n+  static bool first_layout_print = true;\n+\n@@ -1129,0 +1131,5 @@\n+    if (first_layout_print) {\n+      tty->print_cr(\"Field layout log format: @offset size\/alignment [name] [signature] [comment]\");\n+      tty->print_cr(\"Heap oop size = %d\", heapOopSize);\n+      first_layout_print = false;\n+    }\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -160,1 +160,0 @@\n-    boolean useCompressedOops;\n@@ -164,2 +163,1 @@\n-      case \"0\": useCompressedOops = false;\n-                compressedOopsArg = null;\n+      case \"0\": compressedOopsArg = null;\n@@ -167,2 +165,1 @@\n-      case \"1\": useCompressedOops = true;\n-                compressedOopsArg = \"-XX:+UseCompressedOops\";\n+      case \"1\": compressedOopsArg = \"-XX:+UseCompressedOops\";\n@@ -170,2 +167,1 @@\n-      case \"2\": useCompressedOops = false;\n-                compressedOopsArg = \"-XX:-UseCompressedOops\";\n+      case \"2\": compressedOopsArg = \"-XX:-UseCompressedOops\";\n@@ -189,1 +185,1 @@\n-    FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo, useCompressedOops);\n+    FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/FieldAlignmentTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-  boolean compressOops;\n+  int oopSize;\n@@ -287,2 +287,1 @@\n-  private FieldLayoutAnalyzer(boolean coop) {\n-    compressOops = coop;\n+  private FieldLayoutAnalyzer() {\n@@ -292,2 +291,2 @@\n-  public static FieldLayoutAnalyzer createFieldLayoutAnalyzer(LogOutput lo, boolean compressOops) {\n-    FieldLayoutAnalyzer fla = new FieldLayoutAnalyzer(compressOops);\n+  public static FieldLayoutAnalyzer createFieldLayoutAnalyzer(LogOutput lo) {\n+    FieldLayoutAnalyzer fla = new FieldLayoutAnalyzer();\n@@ -368,1 +367,1 @@\n-          Asserts.assertEquals(compressOops ? 4 : 8, block.size());\n+          Asserts.assertEquals(oopSize, block.size());\n@@ -373,1 +372,1 @@\n-            Asserts.assertEquals(compressOops ? 4 : 8, block.size());\n+            Asserts.assertEquals(oopSize, block.size());\n@@ -546,0 +545,5 @@\n+      if (lo.getCurrentLine().startsWith(\"Heap oop size = \")) {\n+        String[] oopSizeLine = lo.getCurrentLine().split(\"\\\\s+\");\n+        oopSize = Integer.parseInt(oopSizeLine[4]);\n+        Asserts.assertTrue(oopSize == 4 || oopSize == 8);\n+      }\n@@ -553,0 +557,1 @@\n+    Asserts.assertTrue(oopSize != 0);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/FieldLayoutAnalyzer.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -295,1 +295,0 @@\n-    boolean useCompressedOops;\n@@ -299,2 +298,1 @@\n-      case \"0\": useCompressedOops = false;\n-                compressedOopsArg = null;\n+      case \"0\": compressedOopsArg = null;\n@@ -302,2 +300,1 @@\n-      case \"1\": useCompressedOops = true;\n-                compressedOopsArg = \"-XX:+UseCompressedOops\";\n+      case \"1\": compressedOopsArg = \"-XX:+UseCompressedOops\";\n@@ -305,2 +302,1 @@\n-      case \"2\": useCompressedOops = false;\n-                compressedOopsArg = \"-XX:-UseCompressedOops\";\n+      case \"2\": compressedOopsArg = \"-XX:-UseCompressedOops\";\n@@ -323,1 +319,1 @@\n-    FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo, useCompressedOops);\n+    FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/NullMarkersTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"}]}