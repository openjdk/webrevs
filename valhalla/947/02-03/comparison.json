{"files":[{"patch":"@@ -1199,1 +1199,1 @@\n-  if (EnablePrimitiveClasses) {\n+  if (EnableValhalla) {\n@@ -3104,1 +3104,1 @@\n-  if (!EnablePrimitiveClasses) {\n+  if (!EnableValhalla) {\n@@ -3465,1 +3465,1 @@\n-    if (!EnablePrimitiveClasses) {\n+    if (!EnableValhalla) {\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -6581,1 +6581,1 @@\n-  if (EnablePrimitiveClasses) {\n+  if (EnableValhalla) {\n@@ -6590,1 +6590,1 @@\n-        \/\/ Pre-load inline class\n+        \/\/ Pre-load classes of fields that are candidate for flattening\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1328,1 +1328,1 @@\n-  if (EnablePrimitiveClasses) {\n+  if (EnableValhalla) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1344,1 +1344,1 @@\n-#define UseFlatArray (EnablePrimitiveClasses && (FlatArrayElementMaxSize != 0))\n+#define UseFlatArray (EnableValhalla && (FlatArrayElementMaxSize != 0))\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED AnnotationsTests.java\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED -XX:+EnableValhalla -XX:+EnablePrimitiveClasses AnnotationsTests\n+ * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED AnnotationsTests.java\n+ * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED -XX:+EnableValhalla AnnotationsTests\n@@ -52,7 +52,8 @@\n-          if (m.getName().startsWith(\"test_\")) {\n-            try {\n-              System.out.println(\"Running \" + m.getName());\n-              m.invoke(tests);\n-            } catch (Throwable t) {\n-              t.printStackTrace();\n-              throw new RuntimeException(t);\n+            if (m.getName().startsWith(\"test_\")) {\n+                try {\n+                    System.out.println(\"Running \" + m.getName());\n+                  m.invoke(tests);\n+                } catch (Throwable t) {\n+                  t.printStackTrace();\n+                  throw new RuntimeException(t);\n+                }\n@@ -60,1 +61,0 @@\n-          }\n@@ -65,2 +65,2 @@\n-      @NullRestricted\n-      String s;\n+        @NullRestricted\n+        String s;\n@@ -71,8 +71,8 @@\n-      Throwable exception = null;\n-      try {\n-          BadClass0 bc = new BadClass0();\n-      } catch (IncompatibleClassChangeError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Failed to detect illegal use of @NullRestricted\");\n+        Throwable exception = null;\n+        try {\n+            BadClass0 bc = new BadClass0();\n+        } catch (IncompatibleClassChangeError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Failed to detect illegal use of @NullRestricted\");\n@@ -83,2 +83,2 @@\n-      int i = 0;\n-      int j = 0;\n+        int i = 0;\n+        int j = 0;\n@@ -88,2 +88,2 @@\n-      @NullRestricted\n-      ValueClass1 vc;\n+        @NullRestricted\n+        ValueClass1 vc;\n@@ -93,8 +93,8 @@\n-      Throwable exception = null;\n-      try {\n-          BadClass1 tc = new BadClass1();\n-      } catch (IncompatibleClassChangeError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Failed to detect illegal use of @NullRestricted\");\n+        Throwable exception = null;\n+        try {\n+            BadClass1 tc = new BadClass1();\n+        } catch (IncompatibleClassChangeError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Failed to detect illegal use of @NullRestricted\");\n@@ -106,2 +106,2 @@\n-      int i = 0;\n-      int j = 0;\n+        int i = 0;\n+        int j = 0;\n@@ -111,2 +111,2 @@\n-      @NullRestricted\n-      ValueClass2 vc;\n+        @NullRestricted\n+        ValueClass2 vc;\n@@ -116,8 +116,8 @@\n-      Throwable exception = null;\n-      try {\n-          GoodClass2 tc = new GoodClass2();\n-      } catch (IncompatibleClassChangeError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNull(exception, \"Unexpected exception: \" + exception);\n+        Throwable exception = null;\n+        try {\n+            GoodClass2 tc = new GoodClass2();\n+        } catch (IncompatibleClassChangeError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNull(exception, \"Unexpected exception: \" + exception);\n@@ -133,8 +133,8 @@\n-      Throwable exception = null;\n-      try {\n-          BadClass3 tc = new BadClass3();\n-      } catch (ClassFormatError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Failed to detect illegal use of @ImplicitlyConstructible\");\n+        Throwable exception = null;\n+        try {\n+            BadClass3 tc = new BadClass3();\n+        } catch (ClassFormatError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Failed to detect illegal use of @ImplicitlyConstructible\");\n@@ -150,8 +150,8 @@\n-      Throwable exception = null;\n-      try {\n-          BadClass4 tc = new BadClass4();\n-      } catch (ClassFormatError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Failed to detect illegal use of @LooselyConsistentValue\");\n+        Throwable exception = null;\n+        try {\n+            BadClass4 tc = new BadClass4();\n+        } catch (ClassFormatError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Failed to detect illegal use of @LooselyConsistentValue\");\n@@ -175,14 +175,14 @@\n-      Throwable exception = null;\n-      try {\n-          GoodClass5 vc = new GoodClass5();\n-          Field f0 = vc.getClass().getDeclaredField(\"f0\");\n-          Asserts.assertFalse(UNSAFE.isFlattened(f0), \"Unexpected flat field\");\n-          Field f1 = vc.getClass().getDeclaredField(\"f1\");\n-          Asserts.assertTrue(UNSAFE.isFlattened(f1), \"Flat field expected, but field is not flat\");\n-      } catch (IncompatibleClassChangeError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      } catch(NoSuchFieldException e) {\n-        Asserts.fail(\"Test error\");\n-      }\n-      Asserts.assertNull(exception, \"Unexpected exception: \" + exception);\n+        Throwable exception = null;\n+        try {\n+            GoodClass5 vc = new GoodClass5();\n+            Field f0 = vc.getClass().getDeclaredField(\"f0\");\n+            Asserts.assertFalse(UNSAFE.isFlattened(f0), \"Unexpected flat field\");\n+            Field f1 = vc.getClass().getDeclaredField(\"f1\");\n+            Asserts.assertTrue(UNSAFE.isFlattened(f1), \"Flat field expected, but field is not flat\");\n+        } catch (IncompatibleClassChangeError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        } catch(NoSuchFieldException e) {\n+            Asserts.fail(\"Test error\");\n+        }\n+        Asserts.assertNull(exception, \"Unexpected exception: \" + exception);\n@@ -196,2 +196,2 @@\n-      @NullRestricted\n-      ValueClass6b val = new ValueClass6b();\n+        @NullRestricted\n+        ValueClass6b val = new ValueClass6b();\n@@ -202,2 +202,2 @@\n-      @NullRestricted\n-      ValueClass6a val = new ValueClass6a();\n+        @NullRestricted\n+        ValueClass6a val = new ValueClass6a();\n@@ -207,2 +207,2 @@\n-      @NullRestricted\n-      ValueClass6a val = new ValueClass6a();\n+        @NullRestricted\n+        ValueClass6a val = new ValueClass6a();\n@@ -212,8 +212,8 @@\n-      Throwable exception = null;\n-      try {\n-          BadClass6 bc = new BadClass6();\n-      } catch (ClassCircularityError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Failed to detect circularity\");\n+        Throwable exception = null;\n+        try {\n+            BadClass6 bc = new BadClass6();\n+        } catch (ClassCircularityError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Failed to detect circularity\");\n@@ -225,1 +225,1 @@\n-      int i = 0;\n+        int i = 0;\n@@ -229,2 +229,2 @@\n-      @NullRestricted\n-      static ValueClass7 sval;\n+        @NullRestricted\n+        static ValueClass7 sval;\n@@ -234,9 +234,9 @@\n-      Throwable exception = null;\n-      try {\n-          ValueClass7 val = GoodClass7.sval;\n-          Asserts.assertNotNull(val, \"Unexpected null value\");\n-      } catch (Throwable e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNull(exception, \"Unexpected exception: \" + exception);\n+        Throwable exception = null;\n+        try {\n+            ValueClass7 val = GoodClass7.sval;\n+            Asserts.assertNotNull(val, \"Unexpected null value\");\n+        } catch (Throwable e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNull(exception, \"Unexpected exception: \" + exception);\n@@ -248,2 +248,2 @@\n-      @NullRestricted\n-      static ValueClass8 sval;\n+        @NullRestricted\n+        static ValueClass8 sval;\n@@ -253,9 +253,9 @@\n-      Throwable exception = null;\n-      try {\n-          ValueClass8 val = ValueClass8.sval;\n-          Asserts.assertNotNull(val, \"Unexpected null value\");\n-      } catch (Throwable e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNull(exception, \"Unexpected exception: \" + exception);\n+        Throwable exception = null;\n+        try {\n+            ValueClass8 val = ValueClass8.sval;\n+            Asserts.assertNotNull(val, \"Unexpected null value\");\n+        } catch (Throwable e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNull(exception, \"Unexpected exception: \" + exception);\n@@ -267,1 +267,1 @@\n-      int i = 0;\n+        int i = 0;\n@@ -271,2 +271,2 @@\n-      @NullRestricted\n-      ValueClass9 val = new ValueClass9();\n+        @NullRestricted\n+        ValueClass9 val = new ValueClass9();\n@@ -276,9 +276,9 @@\n-      Throwable exception = null;\n-      try {\n-        GoodClass9 gc = new GoodClass9();\n-        gc.val = null;\n-      } catch(NullPointerException e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Expected NullPointerException not received\");\n+        Throwable exception = null;\n+        try {\n+            GoodClass9 gc = new GoodClass9();\n+            gc.val = null;\n+        } catch(NullPointerException e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Expected NullPointerException not received\");\n@@ -290,2 +290,2 @@\n-      @NullRestricted\n-      static ValueClass10 sval;\n+        @NullRestricted\n+        static ValueClass10 sval;\n@@ -295,8 +295,8 @@\n-      Throwable exception = null;\n-      try {\n-        ValueClass10.sval = null;\n-      } catch(NullPointerException e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Expected NullPointerException not received\");\n+        Throwable exception = null;\n+        try {\n+            ValueClass10.sval = null;\n+        } catch(NullPointerException e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Expected NullPointerException not received\");\n@@ -307,2 +307,2 @@\n-      int i = 0;\n-      int j = 0;\n+        int i = 0;\n+        int j = 0;\n@@ -312,2 +312,2 @@\n-      @NullRestricted\n-      static ValueClass11 val;\n+        @NullRestricted\n+        static ValueClass11 val;\n@@ -317,9 +317,9 @@\n-      Throwable exception = null;\n-      try {\n-        ValueClass11 val = BadClass11.val;\n-        System.out.println(val);\n-      } catch(IncompatibleClassChangeError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Expected IncompatibleClassChangerError not received\");\n+        Throwable exception = null;\n+        try {\n+            ValueClass11 val = BadClass11.val;\n+            System.out.println(val);\n+        } catch(IncompatibleClassChangeError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Expected IncompatibleClassChangerError not received\");\n@@ -330,2 +330,2 @@\n-      @NullRestricted\n-      int i;\n+        @NullRestricted\n+        int i;\n@@ -334,9 +334,9 @@\n-      Throwable exception = null;\n-      try {\n-        BadClass12 val = new BadClass12();\n-        System.out.println(val);\n-      } catch(ClassFormatError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Expected ClassFormatError not received\");\n+        Throwable exception = null;\n+        try {\n+            BadClass12 val = new BadClass12();\n+            System.out.println(val);\n+        } catch(ClassFormatError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Expected ClassFormatError not received\");\n@@ -347,2 +347,2 @@\n-      @NullRestricted\n-      int Integer[];\n+        @NullRestricted\n+        int Integer[];\n@@ -351,9 +351,9 @@\n-      Throwable exception = null;\n-      try {\n-        BadClass13 val = new BadClass13();\n-        System.out.println(val);\n-      } catch(ClassFormatError e) {\n-        exception = e;\n-        System.out.println(\"Received \" + e);\n-      }\n-      Asserts.assertNotNull(exception, \"Expected ClassFormatError not received\");\n+        Throwable exception = null;\n+        try {\n+            BadClass13 val = new BadClass13();\n+            System.out.println(val);\n+        } catch(ClassFormatError e) {\n+            exception = e;\n+            System.out.println(\"Received \" + e);\n+        }\n+        Asserts.assertNotNull(exception, \"Expected ClassFormatError not received\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/AnnotationsTests.java","additions":168,"deletions":168,"binary":false,"changes":336,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-* @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED ClassInitializationFailuresTest.java\n-* @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.ClassInitializationFailuresTest\n+* @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED ClassInitializationFailuresTest.java\n+* @run main\/othervm -XX:+EnableValhalla --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED runtime.valhalla.inlinetypes.ClassInitializationFailuresTest\n@@ -134,19 +134,21 @@\n-        \/\/ Transition model (annotations and array factory) doesn't permit multi-dimentional arrays tests\n-        \/\/ Disabling those tests for now\n-        \/\/ Testing multianewarray when the primitive element class fails to initialize properly\n-        \/\/ try {\n-        \/\/     BadThree[][] array = new BadThree[10][20];\n-        \/\/ } catch(Throwable t) {\n-        \/\/     e = t;\n-        \/\/ }\n-        \/\/ Asserts.assertNotNull(e, \"Error should have been thrown\");\n-        \/\/ Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \" Must be an ExceptionInInitializerError\");\n-        \/\/ \/\/ Second attempt because it doesn't fail the same way\n-        \/\/ try {\n-        \/\/     BadThree[][][] array = new BadThree[10][30][10];\n-        \/\/ } catch(Throwable t) {\n-        \/\/     e = t;\n-        \/\/ }\n-        \/\/ Asserts.assertNotNull(e, \"Error should have been thrown\");\n-        \/\/ Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n-        \/\/ Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n+        \/*\n+        Transition model (annotations and array factory) doesn't permit multi-dimentional arrays tests\n+        Disabling those tests for now\n+        Testing multianewarray when the primitive element class fails to initialize properly\n+        try {\n+            BadThree[][] array = new BadThree[10][20];\n+        } catch(Throwable t) {\n+            e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error should have been thrown\");\n+        Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \" Must be an ExceptionInInitializerError\");\n+        \/\/ Second attempt because it doesn't fail the same way\n+        try {\n+            BadThree[][][] array = new BadThree[10][30][10];\n+        } catch(Throwable t) {\n+            e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error should have been thrown\");\n+        Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n+        Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n+        *\/\n@@ -192,1 +194,3 @@\n-    static primitive class BadFive {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    static value class BadFive {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassInitializationFailuresTest.java","additions":26,"deletions":22,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED NullRestrictedArrayTest.java\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED -XX:+EnableValhalla -XX:+EnablePrimitiveClasses NullRestrictedArrayTest\n+ * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED NullRestrictedArrayTest.java\n+ * @run main\/othervm --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED -XX:+EnableValhalla NullRestrictedArrayTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/NullRestrictedArrayTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * @compile -XDenablePrimitiveClasses --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED VolatileTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=128 --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.VolatileTest\n+ * @compile --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED VolatileTest.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:InlineFieldMaxFlatSize=128 --add-exports java.base\/jdk.internal.vm.annotation=ALL-UNNAMED runtime.valhalla.inlinetypes.VolatileTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VolatileTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}