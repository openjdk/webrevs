{"files":[{"patch":"@@ -52,1 +52,1 @@\n-  auto printfields = [&] (const NameAndSig& key, const NameAndSig& value) {\n+  auto printfields = [&] (const NameAndSig& key, const bool& value) {\n@@ -54,3 +54,3 @@\n-                           value._name->as_C_string(),\n-                           value._signature->as_C_string(),\n-                           value._satisfied ? \"true\" : \"false\");\n+                           key._name->as_C_string(),\n+                           key._signature->as_C_string(),\n+                           value ? \"true\" : \"false\");\n@@ -205,1 +205,1 @@\n-  bool compatible = is_unset_fields_compatible(target->assert_unset_fields());\n+  bool compatible = verify_unset_fields_compatibility(target->assert_unset_fields());\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,1 +55,2 @@\n-  typedef ResourceHashtable<NameAndSig, NameAndSig, 17,\n+  \/\/ Maps a strict field's name and signature to whether or not it was initialized\n+  typedef ResourceHashtable<NameAndSig, bool, 17,\n@@ -166,0 +167,1 @@\n+  \/\/ Called when verifying putfields to mark strict instance fields as satisfied\n@@ -170,2 +172,1 @@\n-      NameAndSig* field = _assert_unset_fields->get(dummy_field);\n-      field->_satisfied = true;\n+      _assert_unset_fields->put(dummy_field, true);\n@@ -177,1 +178,3 @@\n-  bool is_unset_fields_satisfied() {\n+  \/\/ Verify that all strict fields have been initialized\n+  \/\/ Strict fields must be initialized before the super constructor is called\n+  bool verify_unset_fields_satisfied() {\n@@ -179,2 +182,2 @@\n-    auto check_satisfied = [&] (const NameAndSig& key, const NameAndSig& value) {\n-      all_satisfied &= value._satisfied;\n+    auto check_satisfied = [&] (const NameAndSig& key, const bool& value) {\n+      all_satisfied &= value;\n@@ -189,1 +192,1 @@\n-    auto merge_satisfied = [&] (const NameAndSig& key, const NameAndSig& value) {\n+    auto merge_satisfied = [&] (const NameAndSig& key, const bool& value) {\n@@ -191,3 +194,1 @@\n-        NameAndSig dummy = value;\n-        dummy._satisfied = true;\n-        new_fields->put(key, dummy);\n+        new_fields->put(key, true);\n@@ -200,1 +201,3 @@\n-  bool is_unset_fields_compatible(AssertUnsetFieldTable* target_table) const {\n+  \/\/ Verify that strict fields are compatible between the current frame and the successor\n+  \/\/ Called during merging of frames\n+  bool verify_unset_fields_compatibility(AssertUnsetFieldTable* target_table) const {\n@@ -202,1 +205,1 @@\n-    auto is_unset = [&] (const NameAndSig& key, const NameAndSig& value) {\n+    auto is_unset = [&] (const NameAndSig& key, const bool& value) {\n@@ -204,2 +207,2 @@\n-      if (!value._satisfied) {\n-        if (target_table->get(key)->_satisfied == true) {\n+      if (!value) {\n+        if (*target_table->get(key) == true) {\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.hpp","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -259,0 +259,1 @@\n+        ResourceMark rm(THREAD);\n@@ -265,1 +266,1 @@\n-        new_fields->put(tmp, tmp);\n+        new_fields->put(tmp, false);\n","filename":"src\/hotspot\/share\/classfile\/stackMapTable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -731,1 +731,5 @@\n-        strict_fields->put(new_field, new_field);\n+        if (IgnoreAssertUnsetFields) {\n+          strict_fields->put(new_field, true);\n+        } else {\n+          strict_fields->put(new_field, false);\n+        }\n@@ -734,9 +738,0 @@\n-\n-    \/\/ Ignore processing of strict fields\n-    if (VerifyNoDebts) {\n-      auto satisfy_all = [&] (const NameAndSig& key, const NameAndSig& value) {\n-        NameAndSig* field = strict_fields->get(key);\n-        field->_satisfied = true;\n-      };\n-      strict_fields->iterate_all(satisfy_all);\n-    }\n@@ -2718,1 +2713,1 @@\n-      if (!current_frame->is_unset_fields_satisfied()) {\n+      if (!current_frame->verify_unset_fields_satisfied()) {\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-  bool _satisfied;\n@@ -41,1 +40,1 @@\n-  NameAndSig(Symbol* n, Symbol* s) : _name(n), _signature(s), _satisfied(false) {}\n+  NameAndSig(Symbol* n, Symbol* s) : _name(n), _signature(s) {}\n","filename":"src\/hotspot\/share\/classfile\/verifier.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1789,1 +1789,1 @@\n-  product(bool, VerifyNoDebts, false, DIAGNOSTIC,                           \\\n+  product(bool, IgnoreAssertUnsetFields, false, DIAGNOSTIC,                           \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}