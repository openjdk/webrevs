{"files":[{"patch":"@@ -4302,0 +4302,28 @@\n+  \/\/ Check if we need a membar at the beginning of the java.lang.Object\n+  \/\/ constructor to satisfy the memory model for strict fields.\n+  if (EnableValhalla && method()->intrinsic_id() == vmIntrinsics::_Object_init) {\n+    Value receiver = state()->local_at(0);\n+    ciType* klass = receiver->exact_type();\n+    if (klass == nullptr) {\n+      \/\/ No exact type, check if the declared type has no implementors and add a dependency\n+      klass = receiver->declared_type();\n+      klass = compilation()->cha_exact_type(klass);\n+    }\n+    if (klass != nullptr && klass->is_instance_klass()) {\n+      \/\/ Exact receiver type, check if there is a strict field\n+      ciInstanceKlass* holder = klass->as_instance_klass();\n+      for (int i = 0; i < holder->nof_nonstatic_fields(); i++) {\n+        ciField* field = holder->nonstatic_field_at(i);\n+        if (field->is_strict()) {\n+          \/\/ Found a strict field, a membar is needed\n+          append(new MemBar(lir_membar_storestore));\n+          break;\n+        }\n+      }\n+    } else if (klass == nullptr) {\n+      \/\/ We can't statically determine the type of the receiver and therefore need\n+      \/\/ to put a membar here because it could have a strict field.\n+      append(new MemBar(lir_membar_storestore));\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -3017,0 +3017,6 @@\n+  \/\/ Check if we need a membar at the beginning of the java.lang.Object\n+  \/\/ constructor to satisfy the memory model for strict fields.\n+  if (EnableValhalla && method()->intrinsic_id() == vmIntrinsics::_Object_init) {\n+    __ membar_storestore();\n+  }\n+\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1279,0 +1279,30 @@\n+  \/\/ Check if we need a membar at the beginning of the java.lang.Object\n+  \/\/ constructor to satisfy the memory model for strict fields.\n+  if (EnableValhalla && method()->intrinsic_id() == vmIntrinsics::_Object_init) {\n+    Node* receiver_obj = local(0);\n+    const TypeInstPtr* receiver_type = _gvn.type(receiver_obj)->isa_instptr();\n+    \/\/ If there's no exact type, check if the declared type has no implementors and add a dependency\n+    const TypeKlassPtr* klass_ptr = receiver_type->as_klass_type(\/* try_for_exact= *\/ true);\n+    ciType* klass = klass_ptr->klass_is_exact() ? klass_ptr->exact_klass() : nullptr;\n+    if (klass != nullptr && klass->is_instance_klass()) {\n+      \/\/ Exact receiver type, check if there is a strict field\n+      ciInstanceKlass* holder = klass->as_instance_klass();\n+      for (int i = 0; i < holder->nof_nonstatic_fields(); i++) {\n+        ciField* field = holder->nonstatic_field_at(i);\n+        if (field->is_strict()) {\n+          \/\/ Found a strict field, a membar is needed\n+          AllocateNode* alloc = AllocateNode::Ideal_allocation(receiver_obj);\n+          insert_mem_bar(UseStoreStoreForCtor ? Op_MemBarStoreStore : Op_MemBarRelease, receiver_obj);\n+          if (DoEscapeAnalysis && (alloc != nullptr)) {\n+            alloc->compute_MemBar_redundancy(method());\n+          }\n+          break;\n+        }\n+      }\n+    } else if (klass == nullptr) {\n+      \/\/ We can't statically determine the type of the receiver and therefore need\n+      \/\/ to put a membar here because it could have a strict field.\n+      insert_mem_bar(UseStoreStoreForCtor ? Op_MemBarStoreStore : Op_MemBarRelease);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,227 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8367785\n+ * @summary Verify that compilers adhere to the new memory model rules for strict fields.\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @run main\/othervm compiler.valhalla.inlinetypes.TestStrictFieldBarriers\n+ * @run main\/othervm -Xbatch\n+ *                   compiler.valhalla.inlinetypes.TestStrictFieldBarriers\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=compileonly,java.lang.Object::*init*\n+ *                   compiler.valhalla.inlinetypes.TestStrictFieldBarriers\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=compileonly,StrictInitTest$A::*init*\n+ *                   compiler.valhalla.inlinetypes.TestStrictFieldBarriers\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=compileonly,StrictInitTest$B::*init*\n+ *                   compiler.valhalla.inlinetypes.TestStrictFieldBarriers\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=compileonly,StrictInitTest$C::*init*\n+ *                   compiler.valhalla.inlinetypes.TestStrictFieldBarriers\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=dontinline,*::*init*\n+ *                   compiler.valhalla.inlinetypes.TestStrictFieldBarriers\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import jdk.internal.vm.annotation.Strict;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestStrictFieldBarriers {\n+\n+    static A1 sharedA1 = new A1();\n+    static B1 sharedB1 = new B1();\n+    static C1 sharedC1_1 = new C1();\n+    static B1 sharedC1_2 = new C1();\n+    static D1 sharedD1_1 = new D1();\n+    static E1 sharedD1_2 = new D1();\n+\n+    static A2 sharedA2 = new A2();\n+    static B2 sharedB2 = new B2();\n+    static C2 sharedC2_1 = new C2();\n+    static B2 sharedC2_2 = new C2();\n+    static D2 sharedD2_1 = new D2();\n+    static E2 sharedD2_2 = new D2();\n+\n+    static class A1 {\n+        @Strict\n+        final int x;\n+\n+        A1() {\n+            x = 1;\n+            super();\n+            sharedA1 = this;\n+        }\n+    }\n+\n+    static class B1 {\n+        @Strict\n+        final int x;\n+\n+        B1() {\n+            x = 1;\n+            super();\n+            sharedB1 = this;\n+        }\n+\n+        B1(boolean unused) {\n+            x = 1;\n+            super();\n+            sharedC1_2 = this;\n+        }\n+    }\n+\n+    static class C1 extends B1 {\n+        @Strict\n+        final int y;\n+\n+        C1() {\n+            y = 1;\n+            super(true);\n+            sharedC1_1 = this;\n+        }\n+    }\n+\n+    static abstract value class E1 {\n+        final int x;\n+\n+        E1() {\n+            x = 1;\n+            super();\n+            sharedD1_2 = this;\n+        }\n+    }\n+\n+    static class D1 extends E1 {\n+        final int y;\n+        final int z;\n+\n+        D1() {\n+            y = 2;\n+            super();\n+            z = 3;\n+            sharedD1_1 = this;\n+        }\n+    }\n+\n+    \/\/ Non final versions\n+\n+    static class A2 {\n+        @Strict\n+        int x;\n+\n+        A2() {\n+            x = 1;\n+            super();\n+            sharedA2 = this;\n+        }\n+    }\n+\n+    static class B2 {\n+        @Strict\n+        int x;\n+\n+        B2() {\n+            x = 1;\n+            super();\n+            sharedB2 = this;\n+        }\n+\n+        B2(boolean unused) {\n+            x = 1;\n+            super();\n+            sharedC2_2 = this;\n+        }\n+    }\n+\n+    static class C2 extends B2 {\n+        @Strict\n+        int y;\n+\n+        C2() {\n+            y = 1;\n+            super(true);\n+            sharedC2_1 = this;\n+        }\n+    }\n+\n+    static abstract value class E2 {\n+        final int x;\n+\n+        E2() {\n+            x = 1;\n+            super();\n+            sharedD2_2 = this;\n+        }\n+    }\n+\n+    static class D2 extends E2 {\n+        final int y;\n+        final int z;\n+\n+        D2() {\n+            y = 2;\n+            super();\n+            z = 3;\n+            sharedD2_1 = this;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Spawn two threads, a reader and a writer and check that the\n+        \/\/ reader thread never observes an unitialized strict field.\n+        Thread reader = new Thread(() -> {\n+            for (int i = 0; i < 100_000; ++i) {\n+                \/\/ We don't check individual fields here because the checks need to be\n+                \/\/ as fast a possible to increase the likelyhood of a race condition.\n+                int res = sharedA1.x & sharedB1.x & sharedC1_1.x & sharedC1_1.y & sharedC1_2.x & ((C1)sharedC1_2).y &\n+                          sharedA2.x & sharedB2.x & sharedC2_1.x & sharedC2_1.y & sharedC2_2.x & ((C2)sharedC2_2).y &\n+                          sharedD1_1.x & ((D1)sharedD1_2).x & sharedD2_1.x & ((D2)sharedD2_2).x;\n+                if (res != 1) {\n+                    System.err.println(\"Incorrect field value observed!\");\n+                    System.exit(1);\n+                }\n+            }\n+        });\n+\n+        Thread writer = new Thread(() -> {\n+            for (int i = 0; i < 100_000; ++i) {\n+                new A1();\n+                new B1();\n+                new C1();\n+                new D1();\n+                new A2();\n+                new B2();\n+                new C2();\n+                new D2();\n+            }\n+        });\n+\n+        reader.start();\n+        writer.start();\n+        reader.join();\n+        writer.join();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestStrictFieldBarriers.java","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"}]}