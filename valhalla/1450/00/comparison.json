{"files":[{"patch":"@@ -72,4 +72,0 @@\n-  \/\/ Are loads and stores to this concrete array type atomic?\n-  \/\/ Note that Object[] is naturally atomic, but its subtypes may not be.\n-  virtual bool element_access_must_be_atomic() { return true; }\n-\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,5 +85,0 @@\n-  \/\/ Override.\n-  bool element_access_must_be_atomic() {\n-    return element_klass()->must_be_atomic();\n-  }\n-\n@@ -115,5 +110,0 @@\n-  \/\/\n-  \/\/ Mark Sweep\n-  int oop_ms_adjust_pointers(oop obj);\n-\n-\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2477,37 +2477,0 @@\n-\/\/ Arrays support \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\n-JVM_ENTRY(jboolean, JVM_ArrayIsAccessAtomic(JNIEnv *env, jclass unused, jobject array))\n-  oop o = JNIHandles::resolve(array);\n-  Klass* k = o->klass();\n-  if ((o == nullptr) || (!k->is_array_klass())) {\n-    THROW_0(vmSymbols::java_lang_IllegalArgumentException());\n-  }\n-  return ArrayKlass::cast(k)->element_access_must_be_atomic();\n-JVM_END\n-\n-JVM_ENTRY(jobject, JVM_ArrayEnsureAccessAtomic(JNIEnv *env, jclass unused, jobject array))\n-  oop o = JNIHandles::resolve(array);\n-  Klass* k = o->klass();\n-  if ((o == nullptr) || (!k->is_array_klass())) {\n-    THROW_0(vmSymbols::java_lang_IllegalArgumentException());\n-  }\n-  if (k->is_flatArray_klass()) {\n-    FlatArrayKlass* vk = FlatArrayKlass::cast(k);\n-    if (!vk->element_access_must_be_atomic()) {\n-      \/**\n-       * Need to decide how to implement:\n-       *\n-       * 1) Change to objArrayOop layout, therefore oop->klass() differs so\n-       * then \"<atomic>[Qfoo;\" klass needs to subclass \"[Qfoo;\" to pass through\n-       * \"checkcast\" & \"instanceof\"\n-       *\n-       * 2) Use extra header in the flatArrayOop to flag atomicity required and\n-       * possibly per instance lock structure. Said info, could be placed in\n-       * \"trailer\" rather than disturb the current arrayOop\n-       *\/\n-      Unimplemented();\n-    }\n-  }\n-  return array;\n-JVM_END\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":37,"binary":false,"changes":37,"status":"modified"}]}