{"files":[{"patch":"@@ -2283,1 +2283,1 @@\n-                throw new NotSerializableException(\"Externalizable not valid for value class \"\n+                throw new InvalidClassException(\"Externalizable not valid for value class \"\n@@ -2290,0 +2290,4 @@\n+            if (obj == null) {\n+                throw new InvalidClassException(\"Serializable not valid for value class \"\n+                        + cl.getName());\n+            }\n@@ -2291,1 +2295,0 @@\n-            assert obj != null : \"obj == null: \" + desc;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1201,0 +1201,3 @@\n+                if (cl.isValue() && !desc.isInstantiable()) {\n+                    throw new NotSerializableException(cl.getName());\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutputStream.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import jdk.internal.MigratedValueClass;\n@@ -417,1 +418,1 @@\n-                        \/\/ Value objects are created using Unsafe.\n+                        \/\/ Value object instance creation is specialized in newInstance()\n@@ -968,1 +969,1 @@\n-     * accessible no-arg constructor, or if the class is a value class.\n+     * accessible no-arg constructor, or if the class is a migrated value class.\n@@ -973,1 +974,2 @@\n-        return (cons != null | isValue);\n+        return (cons != null |\n+                (isValue && cl != null && cl.isAnnotationPresent(jdk.internal.MigratedValueClass.class)));\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @modules java.base\/jdk.internal\n@@ -32,1 +33,0 @@\n-import java.lang.StackOverflowError;\n@@ -43,1 +43,0 @@\n-import java.io.InvalidObjectException;\n@@ -52,0 +51,2 @@\n+import jdk.internal.MigratedValueClass;\n+\n@@ -311,0 +312,1 @@\n+    @jdk.internal.MigratedValueClass\n@@ -362,1 +364,1 @@\n-        Assert.assertTrue(ex.getMessage().contains(\"Externalizable not valid for value class\"));\n+        Assert.assertEquals(ex.getMessage(), ValueExt.class.getName());\n@@ -370,1 +372,1 @@\n-        var ex = Assert.expectThrows(NotSerializableException.class, () -> deserialize(newBytes));\n+        var ex = Assert.expectThrows(InvalidClassException.class, () -> deserialize(newBytes));\n","filename":"test\/jdk\/java\/io\/Serializable\/valueObjects\/SimpleValueGraphs.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @modules java.base\/jdk.internal\n@@ -93,0 +94,1 @@\n+    @jdk.internal.MigratedValueClass\n@@ -102,0 +104,1 @@\n+    @jdk.internal.MigratedValueClass\n","filename":"test\/jdk\/java\/io\/Serializable\/valueObjects\/ValueSerialization.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}