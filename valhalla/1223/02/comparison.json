{"files":[{"patch":"@@ -147,0 +147,4 @@\n+            case '?', '!', '=' -> {\n+                sigp++;\n+                yield referenceTypeSig();\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SignaturesImpl.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2509,1 +2509,1 @@\n-                            return s.dropMetadata(Annotations.class);\n+                            return s.dropMetadata(Annotations.class).dropMetadata(TypeMetadata.NullMarker.class);\n@@ -2554,1 +2554,7 @@\n-        };\n+\n+        @Override\n+        public Type visitArrayType(ArrayType t, Boolean aBoolean) {\n+            Type erased = super.visitArrayType(t, aBoolean);\n+            return combineMetadata(erased, t);\n+        }\n+    };\n@@ -5286,0 +5292,4 @@\n+                    NullMarker nullMarker = type.getNullMarker();\n+                    if (nullMarker != NullMarker.UNSPECIFIED) {\n+                        append(nullMarker.typeSuffix().charAt(0));\n+                    }\n@@ -5292,0 +5302,4 @@\n+                    NullMarker nmArray = at.getNullMarker();\n+                    if (nmArray != NullMarker.UNSPECIFIED) {\n+                        append(nmArray.typeSuffix().charAt(0));\n+                    }\n@@ -5331,0 +5345,8 @@\n+                    if (types.isDeclaredParametric(type)) {\n+                        append('=');\/\/ '*' is already used for wildcards\n+                    } else {\n+                        NullMarker nmTV = type.getNullMarker();\n+                        if (nmTV != NullMarker.UNSPECIFIED) {\n+                            append(nmTV.typeSuffix().charAt(0));\n+                        }\n+                    }\n@@ -5447,0 +5469,4 @@\n+    public boolean isDeclaredParametric(Type type) {\n+        return type.getNullMarker() == NullMarker.PARAMETRIC;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-import com.sun.tools.javac.resources.CompilerProperties;\n@@ -68,1 +67,1 @@\n-import com.sun.tools.javac.tree.JCTree;\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -564,0 +563,5 @@\n+        case '?': case '!' : case '=':\n+            char nmChar = (char)signature[sigp];\n+            sigp++;\n+            Type t = sigToType();\n+            return t == Type.noType ? t : t.asNullMarked(nmChar == '=' ? NullMarker.PARAMETRIC : NullMarker.of(String.valueOf(nmChar)));\n@@ -583,1 +587,0 @@\n-\n@@ -603,1 +606,1 @@\n-                                                         sbp - startSbp));\n+                                                         sbp - startSbp ));\n@@ -1038,1 +1041,0 @@\n-\n@@ -1343,4 +1345,1 @@\n-                    if (types.isNonNullable(sym.type)) {\n-                        throw badClassFile(\"attribute.must.be.unique\", names.NullRestricted);\n-                    }\n-                    sym.type = sym.type.asNullMarked(JCTree.JCNullableTypeExpression.NullMarker.NOT_NULL);\n+                    \/\/ there is no point on setting the nullness or not has it will be set while parsing the signature\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -376,0 +377,1 @@\n+             nullMarkersScanner.visit(sym.type, null) ||\n@@ -392,0 +394,47 @@\n+    NullMarkersScanner nullMarkersScanner = new NullMarkersScanner();\n+    \/* we don't need to scan generic \/ parameterized types as we will be generating a signature for them anyways\n+     *\/\n+    class NullMarkersScanner extends Types.SimpleVisitor<Boolean, Void> {\n+\n+        @Override\n+        public Boolean visitType(Type t, Void ignore) {\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visitClassType(ClassType t, Void ignore) {\n+            if (!t.isParameterized()) {\n+                if (t.getNullMarker() != NullMarker.UNSPECIFIED) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visitArrayType(ArrayType t, Void ignore) {\n+            if (t.getNullMarker() != NullMarker.UNSPECIFIED) {\n+                return true;\n+            }\n+            return visit(t.elemtype, ignore);\n+        }\n+\n+        @Override\n+        public Boolean visitMethodType(MethodType t, Void ignore) {\n+            for (Type arg : t.argtypes) {\n+                if (visit(arg, ignore)) {\n+                    return true;\n+                }\n+            }\n+            for (Type param : t.allparams()) {\n+                if (visit(param, ignore)) {\n+                    return true;\n+                }\n+            }\n+            if (visit(t.restype, ignore)) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2933,0 +2933,10 @@\n+\n+            public static NullMarker of(String typeSuffix) {\n+                return switch (typeSuffix) {\n+                    case \"!\" -> NOT_NULL;\n+                    case \"?\" -> NULLABLE;\n+                    case \"*\" -> PARAMETRIC;\n+                    case \"\" -> UNSPECIFIED;\n+                    default -> throw new AssertionError(\"invalid type suffix\");\n+                };\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,517 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8338910\n+ * @summary [lw5] enhance the Signature attribute to represent nullability\n+ * @library \/lib\/combo \/tools\/lib\n+ * @modules\n+ *     jdk.compiler\/com.sun.tools.javac.util\n+ *     jdk.compiler\/com.sun.tools.javac.api\n+ *     jdk.compiler\/com.sun.tools.javac.main\n+ *     jdk.compiler\/com.sun.tools.javac.code\n+ *     jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run junit NullabilitySignatureAttrTests\n+ *\/\n+\n+import java.io.File;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.sun.tools.javac.util.Assert;\n+\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.Attributes;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.ConstantPool;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Fieldref_info;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Methodref_info;\n+import com.sun.tools.classfile.ImplicitCreation_attribute;\n+import com.sun.tools.classfile.NullRestricted_attribute;\n+import com.sun.tools.classfile.Field;\n+import com.sun.tools.classfile.Instruction;\n+import com.sun.tools.classfile.Method;\n+import com.sun.tools.classfile.Signature_attribute;\n+\n+import org.junit.jupiter.api.Test;\n+import tools.javac.combo.CompilationTestCase;\n+\n+import toolbox.*;\n+import toolbox.Task.*;\n+\n+public class NullabilitySignatureAttrTests extends CompilationTestCase {\n+    ToolBox tb = new ToolBox();\n+\n+    private static String[] PREVIEW_OPTIONS = {\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())};\n+\n+    public NullabilitySignatureAttrTests() {\n+        setDefaultFilename(\"Nullable.java\");\n+        setCompileOptions(PREVIEW_OPTIONS);\n+    }\n+\n+    record SignatureData(String source, String expectedSignature) {}\n+\n+    final List<SignatureData> signatureDataList = List.of(\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test {\n+                        Test! t;\n+                    }\n+                    \"\"\",\n+                    \"!LTest;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test {\n+                        Test? t;\n+                    }\n+                    \"\"\",\n+                    \"?LTest;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Test {\n+                        List<Test!> t;\n+                    }\n+                    \"\"\",\n+                    \"Ljava\/util\/List<!LTest;>;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Test {\n+                        List<Test?> t;\n+                    }\n+                    \"\"\",\n+                    \"Ljava\/util\/List<?LTest;>;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Test {\n+                        List!<Test!> t;\n+                    }\n+                    \"\"\",\n+                    \"!Ljava\/util\/List<!LTest;>;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Test {\n+                        List?<Test?> t;\n+                    }\n+                    \"\"\",\n+                    \"?Ljava\/util\/List<?LTest;>;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test<T> {\n+                        T! t;\n+                    }\n+                    \"\"\",\n+                    \"!TT;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test<T> {\n+                        T? t;\n+                    }\n+                    \"\"\",\n+                    \"?TT;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test {\n+                        String[]? t;\n+                    }\n+                    \"\"\",\n+                    \"?[Ljava\/lang\/String;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test {\n+                        String[]! t;\n+                    }\n+                    \"\"\",\n+                    \"![Ljava\/lang\/String;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test {\n+                        String![]? t;\n+                    }\n+                    \"\"\",\n+                    \"?[!Ljava\/lang\/String;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test {\n+                        String?[]![]? t;\n+                    }\n+                    \"\"\",\n+                    \"![?[?Ljava\/lang\/String;\"\n+            )\n+    );\n+\n+    @Test\n+    void testCheckFieldSignature() throws Exception {\n+        for (SignatureData sd : signatureDataList) {\n+            File dir = assertOK(true, sd.source);\n+            for (final File fileEntry : dir.listFiles()) {\n+                ClassFile classFile = ClassFile.read(fileEntry);\n+                Field field = classFile.fields[0];\n+                Signature_attribute sa = (Signature_attribute)field.attributes.get(\"Signature\");\n+                System.err.println(sa.getSignature(classFile.constant_pool).toString());\n+                Assert.check(sa.getSignature(classFile.constant_pool).toString().equals(sd.expectedSignature));\n+            }\n+        }\n+    }\n+\n+    record SepCompilationData(String clientSrc, String serverSrc, List<String> sourceExpectedWarnings, List<String> sepCompExpectedWarnings) {}\n+    final List<SepCompilationData> sepCompilationDataList = List.of(\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static Integer! a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static Integer? b;\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:2:31: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:2:31: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static Integer! a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static Integer b;\n+                    }\n+                    \"\"\",\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\"),\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static Integer! a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static Integer! b = 4;\n+                    }\n+                    \"\"\",\n+                    List.of(\"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\"),\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Client {\n+                        static List!<String> a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Server {\n+                        public static List!<String> b = new ArrayList<>();\n+                    }\n+                    \"\"\",\n+                    List.of(\"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\"),\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Client {\n+                        static List!<String> a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Server {\n+                        public static List?<String> b = new ArrayList<>();\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:3:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:3:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Client {\n+                        static List!<String> a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Server {\n+                        public static List<String> b = new ArrayList<>();\n+                    }\n+                    \"\"\",\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\"),\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static Server!.Inner! a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        static class Inner {}\n+                        public static Server?.Inner? b = new Server.Inner();\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:2:37: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:2:37: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static String?[]![]? a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static String?[]?[]? b;\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:2:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:2:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static String![]?[]? a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static String?[]?[]? b;\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:2:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:2:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static String?[]?[]! a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static String?[]?[]? b;\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:2:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:2:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static String?[]?[]? a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static String?[]?[]? b;\n+                    }\n+                    \"\"\",\n+                    List.of(\"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\"),\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    import java.util.List;\n+                    class Client {\n+                        static List<? extends String!> a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    import java.util.List;\n+                    class Server {\n+                        public static List<? extends String?> b;\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:3:46: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:3:46: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    import java.util.function.*;\n+                    class Client extends Vector<Byte>{\n+                        void foo(Server s, Unary op) {\n+                            int opc = 1;\n+                            s.unaryOp(getClass(), null, byte.class, this, null, UN_IMPL.find(op, opc, Client::unaryOperations));\n+                        }\n+                        interface Operator {}\n+                        interface Unary extends Operator {}\n+                        static class ImplCache<OP extends Operator,T> {\n+                            public ImplCache(Class<OP> whatKind, Class<? extends Vector<?>> whatVec) {}\n+                            public T find(OP op, int opc, IntFunction<T> supplier) {\n+                                return null;\n+                            }\n+                        }\n+                        static ImplCache<Unary, Server.UnaryOperation<Client, VectorMask<Byte>>>\n+                            UN_IMPL = new ImplCache<>(Unary.class, Client.class);\n+                        static Server.UnaryOperation<Client, VectorMask<Byte>> unaryOperations(int opc_) { return null; }\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        <V extends Vector<E>,\n+                         M extends VectorMask<E>,\n+                         E>\n+                        V unaryOp(Class<? extends V> vClass, Class<? extends M> mClass, Class<E> eClass,\n+                                  V v, M m,\n+                                  UnaryOperation<V, M> defaultImpl) {\n+                            return null;\n+                        }\n+                        public interface UnaryOperation<V extends Vector<?>,\n+                                                        M extends VectorMask<?>> {\n+                            V apply(V v, M m);\n+                        }\n+                    }\n+                    class Vector<V> {}\n+                    class VectorMask<VM> {}\n+                    \"\"\",\n+                    List.of(\"\"),\n+                    List.of(\"\")\n+            )\n+    );\n+\n+    @Test\n+    void testCheckSeparateComp() throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        tb.createDirectories(src);\n+        Path out = base.resolve(\"out\");\n+        tb.createDirectories(out);\n+        int testNo = 0;\n+        for (SepCompilationData scd : sepCompilationDataList) {\n+            System.err.println(\"executing test at index \" + testNo++);\n+            tb.writeJavaFiles(src, scd.serverSrc, scd.clientSrc);\n+            List<String> log = new JavacTask(tb)\n+                    .outdir(out)\n+                    .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()),\n+                            \"-Xlint:null\", \"-XDrawDiagnostics\")\n+                    .files(tb.findJavaFiles(src))\n+                    .run()\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+            if (!scd.sourceExpectedWarnings.equals(log))\n+                throw new Exception(\"expected output not found: \" + log);\n+\n+            \/\/ now lets remove serverSrc's source and compile client's source using the class file version of serverSrc\n+            tb.deleteFiles(src.resolve(\"Server.java\"));\n+            log = new JavacTask(tb)\n+                    .outdir(out)\n+                    .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()),\n+                            \"-Xlint:null\", \"-XDrawDiagnostics\", \"-cp\", \"out\")\n+                    .files(tb.findJavaFiles(src))\n+                    .run()\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+            if (!scd.sepCompExpectedWarnings.equals(log))\n+                throw new Exception(\"expected output not found: \" + log);\n+\n+            \/\/ let's remove all the files in preparation for the next test\n+            tb.deleteFiles(src.resolve(\"Client.java\"));\n+            tb.deleteFiles(out.resolve(\"Client.class\"));\n+            tb.deleteFiles(out.resolve(\"Server.class\"));\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilitySignatureAttrTests.java","additions":517,"deletions":0,"binary":false,"changes":517,"status":"added"},{"patch":"@@ -9,0 +9,1 @@\n+ * @ignore\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/attr_is_unique\/CheckNullRestrictedAttrIsUnique.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}