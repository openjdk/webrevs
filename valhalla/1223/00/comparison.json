{"files":[{"patch":"@@ -53,0 +53,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -5290,0 +5291,4 @@\n+                    NullMarker nullMarker = type.getNullMarker();\n+                    if (nullMarker != NullMarker.UNSPECIFIED) {\n+                        append(nullMarker.typeSuffix().charAt(0));\n+                    }\n@@ -5324,0 +5329,4 @@\n+                NullMarker nullMarker = outer.getNullMarker();\n+                if (nullMarker != NullMarker.UNSPECIFIED) {\n+                    append(nullMarker.typeSuffix().charAt(0));\n+                }\n@@ -5332,0 +5341,4 @@\n+            NullMarker nullMarker = type.getNullMarker();\n+            if (nullMarker != NullMarker.UNSPECIFIED) {\n+                append(nullMarker.typeSuffix().charAt(0));\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -583,1 +584,0 @@\n-\n@@ -585,0 +585,5 @@\n+                byte previousChar = signature[sigp - 2];\n+                NullMarker nm = NullMarker.UNSPECIFIED;\n+                if (previousChar == '!' || previousChar == '?') {\n+                    nm = NullMarker.of(String.valueOf((char)previousChar));\n+                }\n@@ -587,1 +592,1 @@\n-                                                         sbp - startSbp));\n+                                                         sbp - (startSbp + (nm != NullMarker.UNSPECIFIED ? 1 : 0)) ));\n@@ -592,1 +597,9 @@\n-                        return new ClassType(et.getEnclosingType(), List.nil(), et.tsym, et.getMetadata());\n+                        ClassType res = new ClassType(et.getEnclosingType(), List.nil(), et.tsym, et.getMetadata());\n+                        if (nm != NullMarker.UNSPECIFIED) {\n+                            res = (ClassType) res.addMetadata(new TypeMetadata.NullMarker(nm));\n+                        }\n+                        return res;\n+                    }\n+                    ClassType res = new ClassType(outer, List.nil(), t, List.nil());\n+                    if (nm != NullMarker.UNSPECIFIED) {\n+                        res = (ClassType) res.addMetadata(new TypeMetadata.NullMarker(nm));\n@@ -594,1 +607,1 @@\n-                    return new ClassType(outer, List.nil(), t, List.nil());\n+                    return res;\n@@ -601,0 +614,5 @@\n+                byte previousChar = signature[sigp - 2];\n+                NullMarker nm = NullMarker.UNSPECIFIED;\n+                if (previousChar == '!' || previousChar == '?') {\n+                    nm = NullMarker.of(String.valueOf((char)previousChar));\n+                }\n@@ -603,1 +621,1 @@\n-                                                         sbp - startSbp));\n+                                                         sbp - (startSbp + (nm != NullMarker.UNSPECIFIED ? 1 : 0)) ));\n@@ -636,0 +654,3 @@\n+                if (nm != NullMarker.UNSPECIFIED) {\n+                    outer = outer.addMetadata(new TypeMetadata.NullMarker(nm));\n+                }\n@@ -1343,4 +1364,4 @@\n-                    if (sym.type.isNonNullable()) {\n-                        throw badClassFile(\"attribute.must.be.unique\", names.NullRestricted);\n-                    }\n-                    sym.type = sym.type.asNullMarked(JCTree.JCNullableTypeExpression.NullMarker.NOT_NULL);\n+                    \/*if (!sym.type.isNonNullable()) {\n+                        \/\/throw badClassFile(\"attribute.must.be.unique\", names.NullRestricted);\n+                        sym.type = sym.type.asNullMarked(NullMarker.NOT_NULL);\n+                    }*\/\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":30,"deletions":9,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.HashSet;\n@@ -52,0 +53,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -376,0 +378,1 @@\n+             nullMarkersScanner.visit(sym.type, new HashSet<>()) ||\n@@ -392,0 +395,77 @@\n+    NullMarkersScanner nullMarkersScanner = new NullMarkersScanner();\n+    class NullMarkersScanner extends Types.SimpleVisitor<Boolean, Set<Type>> {\n+\n+        @Override\n+        public Boolean visitType(Type t, Set<Type> types) {\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visitClassType(ClassType t, Set<Type> seen) {\n+            if (t.getNullMarker() != NullMarker.UNSPECIFIED) {\n+                return true;\n+            } else {\n+                for (Type param : t.allparams()) {\n+                    if (param.getNullMarker() != NullMarker.UNSPECIFIED) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visitArrayType(ArrayType t, Set<Type> seen) {\n+            if (t.getNullMarker() != NullMarker.UNSPECIFIED) {\n+                return true;\n+            }\n+            return visit(t.elemtype, seen);\n+        }\n+\n+        @Override\n+        public Boolean visitWildcardType(WildcardType t, Set<Type> seen) {\n+            return visit(t.type, seen);\n+        }\n+\n+        @Override\n+        public Boolean visitTypeVar(TypeVar t, Set<Type> seen) {\n+            if ((t.tsym.flags() & Flags.SYNTHETIC) != 0 && seen.add(t)) {\n+                return visit(t.getUpperBound(), seen);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visitCapturedType(CapturedType t, Set<Type> seen) {\n+            if (seen.add(t)) {\n+                return visit(t.getUpperBound(), seen) || visit(t.getLowerBound(), seen);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visitMethodType(MethodType t, Set<Type> seen) {\n+            for (Type arg : t.argtypes) {\n+                if (visit(arg, seen)) {\n+                    return true;\n+                }\n+            }\n+            for (Type param : t.allparams()) {\n+                if (visit(param, seen)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visitForAll(ForAll t, Set<Type> seen) {\n+            for (Type tvar : t.tvars) {\n+                if (visit(tvar, seen)) {\n+                    return true;\n+                }\n+            }\n+            return visit(t.qtype, seen);\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2929,0 +2929,10 @@\n+\n+            public static NullMarker of(String typeSuffix) {\n+                return switch (typeSuffix) {\n+                    case \"!\" -> NOT_NULL;\n+                    case \"?\" -> NULLABLE;\n+                    case \"*\" -> PARAMETRIC;\n+                    case \"\" -> UNSPECIFIED;\n+                    default -> throw new AssertionError(\"invalid type suffix\");\n+                };\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,345 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8338910\n+ * @summary [lw5] enhance the Signature attribute to represent nullability\n+ * @library \/lib\/combo \/tools\/lib\n+ * @modules\n+ *     jdk.compiler\/com.sun.tools.javac.util\n+ *     jdk.compiler\/com.sun.tools.javac.api\n+ *     jdk.compiler\/com.sun.tools.javac.main\n+ *     jdk.compiler\/com.sun.tools.javac.code\n+ *     jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run junit NullabilitySignatureAttrTests\n+ *\/\n+\n+import java.io.File;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.sun.tools.javac.util.Assert;\n+\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.Attributes;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.ConstantPool;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Fieldref_info;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Methodref_info;\n+import com.sun.tools.classfile.ImplicitCreation_attribute;\n+import com.sun.tools.classfile.NullRestricted_attribute;\n+import com.sun.tools.classfile.Field;\n+import com.sun.tools.classfile.Instruction;\n+import com.sun.tools.classfile.Method;\n+import com.sun.tools.classfile.Signature_attribute;\n+\n+import org.junit.jupiter.api.Test;\n+import tools.javac.combo.CompilationTestCase;\n+\n+import toolbox.*;\n+import toolbox.Task.*;\n+\n+public class NullabilitySignatureAttrTests extends CompilationTestCase {\n+    ToolBox tb = new ToolBox();\n+\n+    private static String[] PREVIEW_OPTIONS = {\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())};\n+\n+    public NullabilitySignatureAttrTests() {\n+        setDefaultFilename(\"Nullable.java\");\n+        setCompileOptions(PREVIEW_OPTIONS);\n+    }\n+\n+    record SignatureData(String source, String expectedSignature) {}\n+\n+    final List<SignatureData> signatureDataList = List.of(\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test {\n+                        Test! t;\n+                    }\n+                    \"\"\",\n+                    \"LTest!;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test {\n+                        Test? t;\n+                    }\n+                    \"\"\",\n+                    \"LTest?;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Test {\n+                        List<Test!> t;\n+                    }\n+                    \"\"\",\n+                    \"Ljava\/util\/List<LTest!;>;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Test {\n+                        List<Test?> t;\n+                    }\n+                    \"\"\",\n+                    \"Ljava\/util\/List<LTest?;>;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Test {\n+                        List!<Test!> t;\n+                    }\n+                    \"\"\",\n+                    \"Ljava\/util\/List!<LTest!;>;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Test {\n+                        List?<Test?> t;\n+                    }\n+                    \"\"\",\n+                    \"Ljava\/util\/List?<LTest?;>;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test<T> {\n+                        T! t;\n+                    }\n+                    \"\"\",\n+                    \"TT!;\"\n+            ),\n+            new SignatureData(\n+                    \"\"\"\n+                    class Test<T> {\n+                        T? t;\n+                    }\n+                    \"\"\",\n+                    \"TT?;\"\n+            )\n+    );\n+\n+    \/*@Test\n+    void testCheckFieldSignature() throws Exception {\n+        for (SignatureData sd : signatureDataList) {\n+            File dir = assertOK(true, sd.source);\n+            for (final File fileEntry : dir.listFiles()) {\n+                ClassFile classFile = ClassFile.read(fileEntry);\n+                Field field = classFile.fields[0];\n+                Signature_attribute sa = (Signature_attribute)field.attributes.get(\"Signature\");\n+                System.err.println(sa.getSignature(classFile.constant_pool).toString());\n+                Assert.check(sa.getSignature(classFile.constant_pool).toString().equals(sd.expectedSignature));\n+            }\n+        }\n+    }*\/\n+\n+    record SepCompilationData(String clientSrc, String serverSrc, List<String> sourceExpectedWarnings, List<String> sepCompExpectedWarnings) {}\n+    final List<SepCompilationData> sepCompilationDataList = List.of(\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static Integer! a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static Integer? b;\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:2:31: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:2:31: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static Integer! a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static Integer b;\n+                    }\n+                    \"\"\",\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\"),\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static Integer! a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        public static Integer! b = 4;\n+                    }\n+                    \"\"\",\n+                    List.of(\"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\"),\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Client {\n+                        static List!<String> a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Server {\n+                        public static List!<String> b = new ArrayList<>();\n+                    }\n+                    \"\"\",\n+                    List.of(\"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\"),\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Client {\n+                        static List!<String> a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Server {\n+                        public static List?<String> b = new ArrayList<>();\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:3:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:3:36: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Client {\n+                        static List!<String> a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    import java.util.*;\n+                    class Server {\n+                        public static List<String> b = new ArrayList<>();\n+                    }\n+                    \"\"\",\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\"),\n+                    List.of(\"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\")\n+            ),\n+            new SepCompilationData(\n+                    \"\"\"\n+                    class Client {\n+                        static Server!.Inner! a = Server.b;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    class Server {\n+                        static class Inner {}\n+                        public static Server?.Inner? b = new Server.Inner();\n+                    }\n+                    \"\"\",\n+                    List.of(\"Client.java:2:37: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.plural: DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\"),\n+                    List.of(\"Client.java:2:37: compiler.warn.unchecked.nullness.conversion\",\n+                            \"- compiler.note.preview.filename: Client.java, DEFAULT\",\n+                            \"- compiler.note.preview.recompile\",\n+                            \"1 warning\")\n+            )\n+    );\n+\n+    @Test\n+    void testCheckSeparateComp() throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        tb.createDirectories(src);\n+        Path out = base.resolve(\"out\");\n+        tb.createDirectories(out);\n+        int testNo = 0;\n+        for (SepCompilationData scd : sepCompilationDataList) {\n+            System.err.println(\"executing test at index \" + testNo++);\n+            tb.writeJavaFiles(src, scd.serverSrc, scd.clientSrc);\n+            List<String> log = new JavacTask(tb)\n+                    .outdir(out)\n+                    .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()),\n+                            \"-Xlint:null\", \"-XDrawDiagnostics\")\n+                    .files(tb.findJavaFiles(src))\n+                    .run()\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+            if (!scd.sourceExpectedWarnings.equals(log))\n+                throw new Exception(\"expected output not found: \" + log);\n+            \/* now lets remove serverSrc's source and compile client's source using the class file version of serverSrc\n+             *\/\n+            tb.deleteFiles(src.resolve(\"Server.java\"));\n+            log = new JavacTask(tb)\n+                    .outdir(out)\n+                    .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()),\n+                            \"-Xlint:null\", \"-XDrawDiagnostics\", \"-cp\", \"out\")\n+                    .files(tb.findJavaFiles(src))\n+                    .run()\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+            if (!scd.sepCompExpectedWarnings.equals(log))\n+                throw new Exception(\"expected output not found: \" + log);\n+\n+            \/\/ let's remove all the files in preparation for the next test\n+            tb.deleteFiles(src.resolve(\"Client.java\"));\n+            tb.deleteFiles(out.resolve(\"Client.class\"));\n+            tb.deleteFiles(out.resolve(\"Server.class\"));\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilitySignatureAttrTests.java","additions":345,"deletions":0,"binary":false,"changes":345,"status":"added"}]}