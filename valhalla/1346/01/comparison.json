{"files":[{"patch":"@@ -414,7 +414,0 @@\n-UNSAFE_ENTRY(jobject, Unsafe_UninitializedDefaultValue(JNIEnv *env, jobject unsafe, jclass vc)) {\n-  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(vc));\n-  InlineKlass* vk = InlineKlass::cast(k);\n-  oop v = vk->default_value();\n-  return JNIHandles::make_local(THREAD, v);\n-} UNSAFE_END\n-\n@@ -1122,1 +1115,0 @@\n-    {CC \"uninitializedDefaultValue\", CC \"(\" CLS \")\" OBJ,  FN_PTR(Unsafe_UninitializedDefaultValue)},\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -624,5 +624,0 @@\n-    @ForceInline\n-    \/*non-public*\/ static Object zeroInstanceIfNull(Class<?> fieldType, Object obj) {\n-        return obj != null ? obj : UNSAFE.uninitializedDefaultValue(fieldType);\n-    }\n-\n@@ -833,2 +828,0 @@\n-        final int FIELD_TYPE = (isNullRestricted && isGetter ? nameCursor++ : -1);\n-        final int ZERO_INSTANCE = (isNullRestricted && isGetter ? nameCursor++ : -1);\n@@ -836,1 +829,1 @@\n-        final int RESULT    = nameCursor-1;  \/\/ either the call, zero instance, or the cast\n+        final int RESULT    = nameCursor-1;  \/\/ either the call, or the cast\n@@ -868,11 +861,2 @@\n-        if (isGetter) {\n-            int argIndex = LINKER_CALL;\n-            if (isNullRestricted) {\n-                names[FIELD_TYPE] = isStatic ? new Name(getFunction(NF_staticFieldType), names[DMH_THIS])\n-                                             : new Name(getFunction(NF_fieldType), names[DMH_THIS]);\n-                names[ZERO_INSTANCE] = new Name(getFunction(NF_zeroInstance), names[FIELD_TYPE], names[LINKER_CALL]);\n-                argIndex = ZERO_INSTANCE;\n-            }\n-            if (needsCast)\n-                names[POST_CAST] = new Name(getFunction(NF_checkCast), names[DMH_THIS], names[argIndex]);\n-        }\n+        if (needsCast && isGetter)\n+            names[POST_CAST] = new Name(getFunction(NF_checkCast), names[DMH_THIS], names[LINKER_CALL]);\n@@ -926,1 +910,1 @@\n-            NF_zeroInstance = 14,\n+            NF_fieldLayout = 14,\n@@ -928,2 +912,1 @@\n-            NF_fieldLayout = 16,\n-            NF_LIMIT = 17;\n+            NF_LIMIT = 16;\n@@ -990,2 +973,0 @@\n-                case NF_zeroInstance:\n-                    return getNamedFunction(\"zeroInstanceIfNull\", MethodType.methodType(Object.class, Class.class, Object.class));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":6,"deletions":25,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -378,6 +378,0 @@\n-\n-    \/**\n-     * Returns an uninitialized default instance of the given value class.\n-     *\/\n-    public native <V> V uninitializedDefaultValue(Class<?> type);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,18 +48,0 @@\n-    \/**\n-     * {@return the default value of the given value class type}\n-     *\n-     * @throws IllegalArgumentException if {@code cls} is not a\n-     *         value class type or is not annotated with\n-     *         {@link jdk.internal.vm.annotation.ImplicitlyConstructible}\n-     *\/\n-    public static <T> T zeroInstance(Class<T> cls) {\n-        if (!cls.isValue()) {\n-            throw new IllegalArgumentException(cls.getName() + \" not a value class\");\n-        }\n-        if (!isImplicitlyConstructible(cls)) {\n-            throw new IllegalArgumentException(cls.getName() + \" not implicitly constructible\");\n-        }\n-        UNSAFE.ensureClassInitialized(cls);\n-        return UNSAFE.uninitializedDefaultValue(cls);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/ValueClass.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1434,1 +1434,1 @@\n-        Asserts.assertEQ(result[len], ValueClass.zeroInstance(MyValue1.class));\n+        Asserts.assertEQ(result[len], MyValue1.createDefaultInline());\n@@ -1455,1 +1455,1 @@\n-        Asserts.assertEQ(result[len], ValueClass.zeroInstance(MyValue1.class));\n+        Asserts.assertEQ(result[len], MyValue1.createDefaultInline());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,1 +192,1 @@\n-                assertTrue(v == ValueClass.zeroInstance(componentType));\n+                assertTrue(v != null);\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,1 +162,1 @@\n-                assertTrue(newArray2[i] == ValueClass.zeroInstance(componentType));\n+                assertTrue(newArray2[i] == null);\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedArraysTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,4 @@\n+        Value(EmptyValue empty) {\n+            this.o = null;\n+            this.empty = empty;\n+        }\n@@ -83,4 +87,3 @@\n-    public void lazyInitializedDefaultValue() {\n-        \/\/ VM lazily sets the null-restricted non-flat field to zero default\n-        assertTrue(new Value() == ValueClass.zeroInstance(Value.class));\n-        assertTrue(new Value().empty == ValueClass.zeroInstance(EmptyValue.class));\n+    public void testNonNullFieldAssignment() {\n+        var npe = assertThrows(NullPointerException.class, () -> new Value(null));\n+        System.err.println(npe);    \/\/ log the exception message\n@@ -91,1 +94,1 @@\n-        EmptyValue emptyValue = ValueClass.zeroInstance(EmptyValue.class);\n+        EmptyValue emptyValue = new EmptyValue();\n@@ -121,1 +124,1 @@\n-        EmptyValue emptyValue = ValueClass.zeroInstance(EmptyValue.class);\n+        EmptyValue emptyValue = new EmptyValue();\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,2 +173,0 @@\n-                Arguments.of(ValueClass.zeroInstance(Line.class), new Line(0, 0, 0, 0), true),\n-                Arguments.of(ValueClass.zeroInstance(Value.class), ValueClass.zeroInstance(Value.class), true),\n@@ -193,1 +191,0 @@\n-                Arguments.of(ValueClass.zeroInstance(Value.class)),\n@@ -196,1 +193,0 @@\n-                Arguments.of(ValueClass.zeroInstance(ValueOptional.class)),\n@@ -214,1 +210,0 @@\n-\n@@ -216,3 +211,2 @@\n-        Point p = ValueClass.zeroInstance(Point.class);\n-        Line l = ValueClass.zeroInstance(Line.class);\n-        Value v = ValueClass.zeroInstance(Value.class);\n+        Point p = new Point(0, 0);\n+        Line l = new Line(0, 0, 0, 0);\n@@ -226,1 +220,0 @@\n-                Arguments.of(v, hash(Value.class, p, l, null, null)),\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import jdk.internal.vm.annotation.NullRestricted;\n@@ -136,1 +135,1 @@\n-        var n1 = ValueClass.zeroInstance(Node.class);\n+        var n1 = new Node(null, null);\n@@ -140,1 +139,1 @@\n-        var v1 = ValueClass.zeroInstance(V.class);\n+        var v1 = new V(null);\n@@ -147,1 +146,1 @@\n-        var e1 = new E(ValueClass.zeroInstance(F.class));\n+        var e1 = new E(new F(null));\n@@ -152,1 +151,1 @@\n-        var a = new A(ValueClass.zeroInstance(B.class), ValueClass.zeroInstance(E.class));\n+        var a = new A(new B(null, null), new E(null));\n@@ -205,1 +204,1 @@\n-        var n1 = ValueClass.zeroInstance(Node.class);\n+        var n1 = new Node(null, null);\n@@ -212,1 +211,1 @@\n-        var e1 = new E(ValueClass.zeroInstance(F.class));\n+        var e1 = new E(new F(null));\n@@ -217,1 +216,1 @@\n-        var a = new A(ValueClass.zeroInstance(B.class), ValueClass.zeroInstance(E.class));\n+        var a = new A(new B(null, null), new E(null));\n","filename":"test\/jdk\/valhalla\/valuetypes\/RecursiveValueClass.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,1 +136,1 @@\n-                assertTrue(o == ValueClass.zeroInstance(componentType));\n+                assertTrue(o != null);\n","filename":"test\/jdk\/valhalla\/valuetypes\/Reflection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,1 @@\n-        MyValue v1 = new MyValue(null, ValueClass.zeroInstance(MyValue2.class));\n+        MyValue v1 = new MyValue(null, new MyValue2(0));\n@@ -138,1 +138,0 @@\n-                Arguments.of(v1, ValueClass.zeroInstance(MyValue.class)),\n@@ -151,3 +150,0 @@\n-        \/\/ MyValue![] va = new MyValue![1];\n-        MyValue[] va = new MyValue[] { ValueClass.zeroInstance(MyValue.class) };\n-        Object[] oa = new Object[] { va };\n@@ -165,5 +161,0 @@\n-                Arguments.of(va[0], null),\n-                Arguments.of(null, va[0]),\n-                Arguments.of(va[0], oa),\n-                Arguments.of(va[0], oa[0]),\n-                Arguments.of(va, oa),\n","filename":"test\/jdk\/valhalla\/valuetypes\/SubstitutabilityTest.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"}]}