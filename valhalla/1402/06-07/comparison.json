{"files":[{"patch":"@@ -441,1 +441,1 @@\n-        final int layout;        \n+        final int layout;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2854,12 +2854,7 @@\n-        \/\/ try nullable atomic array first\n-        Object expectedArray = ValueClass.newNullableAtomicArray(valueType, 1);\n-        Object xArray = ValueClass.newNullableAtomicArray(valueType, 1);\n-        if (arrayLayout(expectedArray.getClass()) != layout) {\n-            \/\/ then try null-restricted atomic\n-            expectedArray = ValueClass.newNullRestrictedAtomicArray(valueType, 1);\n-            xArray = ValueClass.newNullRestrictedAtomicArray(valueType, 1);\n-        }\n-        if (arrayLayout(expectedArray.getClass()) != layout) {\n-            \/\/ if layout still doesn't match, give up\n-            throw new IllegalStateException(\"Unsupported layout: \" + layout);\n-        }\n+        \/\/ We turn the payload of an atomic value into a numeric value (of suitable type)\n+        \/\/ by storing the value into an array element (of matching layout) and by reading\n+        \/\/ back the array element as an integral value. After which we can implement the CAS\n+        \/\/ as a plain numeric CAS. Note: this only works if the payload contains no oops\n+        \/\/ (see VarHandles::isAtomicFlat).\n+        Object expectedArray = newSpecialArray(valueType, 1, layout);\n+        Object xArray = newSpecialArray(valueType, 1, layout);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @run junit\/othervm -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening NullRestrictedArraysTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedArraysTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}