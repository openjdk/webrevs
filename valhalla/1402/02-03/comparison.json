{"files":[{"patch":"@@ -52,0 +52,1 @@\n+    $1_ARGS += -KArray\n@@ -62,0 +63,1 @@\n+    $1_ARGS += -KArray\n@@ -72,0 +74,1 @@\n+    $1_ARGS += -KArray\n@@ -78,0 +81,1 @@\n+      $1_ARGS += -KArray\n","filename":"make\/modules\/java.base\/gensrc\/GensrcVarHandles.gmk","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -509,1 +509,0 @@\n-             VarHandleFlatValues.Array,\n@@ -514,1 +513,0 @@\n-             VarHandleNonAtomicFlatValues.Array,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.lang.reflect.AccessFlag;\n@@ -269,17 +268,3 @@\n-    public static VarHandle flatArrayElementHandleFor(Object array) {\n-        assert ValueClass.isFlatArray(array);\n-        boolean isAtomic = isAtomicFlat(array);\n-        return isAtomic ?\n-                ATOMIC_FLAT_ARRAY_VAR_HANDLE.get(array.getClass()) :\n-                NON_ATOMIC_FLAT_ARRAY_VAR_HANDLE.get(array.getClass());\n-    }\n-\n-    private static final ClassValue<VarHandle> ATOMIC_FLAT_ARRAY_VAR_HANDLE = new ClassValue<>() {\n-        @Override\n-        protected VarHandle computeValue(Class<?> arrayClass) {\n-            \/\/ Todo: eventually, this code should not be class-based\n-            int aoffset = (int) UNSAFE.arrayBaseOffset(arrayClass);\n-            int ascale = UNSAFE.arrayIndexScale(arrayClass);\n-            int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n-            int layout = UNSAFE.arrayLayout(arrayClass);\n-            return new VarHandleFlatValues.Array(aoffset, ashift, arrayClass, layout);\n+    public static void checkAtomicFlatArray(Object array) {\n+        if (!isAtomicFlat(array)) {\n+            throw new IllegalArgumentException(\"Attempt to perform a non-plain access on a non-atomic array\");\n@@ -287,13 +272,1 @@\n-    };\n-\n-    private static final ClassValue<VarHandle> NON_ATOMIC_FLAT_ARRAY_VAR_HANDLE = new ClassValue<>() {\n-        @Override\n-        protected VarHandle computeValue(Class<?> arrayClass) {\n-            \/\/ Todo: eventually, this code should not be class-based\n-            int aoffset = (int) UNSAFE.arrayBaseOffset(arrayClass);\n-            int ascale = UNSAFE.arrayIndexScale(arrayClass);\n-            int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n-            int layout = UNSAFE.arrayLayout(arrayClass);\n-            return new VarHandleNonAtomicFlatValues.Array(aoffset, ashift, arrayClass, layout);\n-        }\n-    };\n+    }\n@@ -312,2 +285,4 @@\n-            \/\/ do not check for atomicity now -- atomicity will be checked on the accessed array object\n-            \/\/ a sharper var handle will be obtained (dynamically) from flatArrayElementHandleFor(Object)\n+            \/\/ Here we always return a reference array element var handle. This is because\n+            \/\/ the access semantics is determined at runtime, when an actual array object is passed\n+            \/\/ to the var handle. The var handle implementation will switch to use flat access\n+            \/\/ primitives if it sees a flat array.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":8,"deletions":33,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -823,0 +823,1 @@\n+#if[Array]\n@@ -935,3 +936,8 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.getVolatile(oarray, index);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.getFlatValueVolatile(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType());\n@@ -941,1 +947,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout, handle.componentType});\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n@@ -955,3 +961,9 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                vh.setVolatile(oarray, index, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                UNSAFE.putFlatValueVolatile(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -977,3 +989,8 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.getOpaque(oarray, index);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.getFlatValueOpaque(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType());\n@@ -997,3 +1014,9 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                vh.setOpaque(oarray, index, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                UNSAFE.putFlatValueOpaque(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1019,3 +1042,8 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.getAcquire(oarray, index);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.getFlatValueAcquire(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType());\n@@ -1039,3 +1067,9 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                vh.setRelease(oarray, index, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                UNSAFE.putFlatValueRelease(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1062,3 +1096,10 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.compareAndSet(oarray, index, expected, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.compareAndSetFlatValue(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         arrayType.componentType().cast(expected),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1084,3 +1125,10 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.compareAndExchange(oarray, index, expected, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.compareAndExchangeFlatValue(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         arrayType.componentType().cast(expected),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1106,3 +1154,10 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.compareAndExchangeAcquire(oarray, index, expected, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.compareAndExchangeFlatValueAcquire(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         arrayType.componentType().cast(expected),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1128,3 +1183,10 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.compareAndExchangeRelease(oarray, index, expected, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.compareAndExchangeFlatValueRelease(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         arrayType.componentType().cast(expected),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1134,1 +1196,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n@@ -1150,3 +1212,10 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.weakCompareAndSetPlain(oarray, index, expected, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.weakCompareAndSetFlatValuePlain(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         arrayType.componentType().cast(expected),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1156,1 +1225,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n@@ -1172,3 +1241,10 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.weakCompareAndSet(oarray, index, expected, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.weakCompareAndSetFlatValue(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         arrayType.componentType().cast(expected),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1178,1 +1254,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n@@ -1194,3 +1270,10 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.weakCompareAndSetAcquire(oarray, index, expected, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.weakCompareAndSetFlatValueAcquire(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         arrayType.componentType().cast(expected),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1200,1 +1283,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n@@ -1216,3 +1299,10 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.weakCompareAndSetRelease(oarray, index, expected, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.weakCompareAndSetFlatValueRelease(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         arrayType.componentType().cast(expected),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1222,1 +1312,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[FlatValue]?, handle.layout}{#if[Object]?, handle.componentType},\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase{#if[Object]?, handle.componentType},\n@@ -1238,3 +1328,9 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.getAndSet(oarray, index, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.getAndSetFlatValue(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1245,1 +1341,1 @@\n-                    {#if[FlatValue]?handle.layout, }{#if[Object]?handle.componentType, runtimeTypeCheck(handle, array, value):value});\n+                    {#if[Object]?handle.componentType, runtimeTypeCheck(handle, array, value):value});\n@@ -1259,3 +1355,9 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.getAndSetAcquire(oarray, index, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.getAndSetFlatValueAcquire(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1266,1 +1368,1 @@\n-                    {#if[FlatValue]?handle.layout, }{#if[Object]?handle.componentType, runtimeTypeCheck(handle, array, value):value});\n+                    {#if[Object]?handle.componentType, runtimeTypeCheck(handle, array, value):value});\n@@ -1280,3 +1382,9 @@\n-                \/\/ delegate to VarHandle of flat array\n-                VarHandle vh = VarHandles.flatArrayElementHandleFor(oarray);\n-                return vh.getAndSetRelease(oarray, index, value);\n+                \/\/ delegate to flat access primitives\n+                VarHandles.checkAtomicFlatArray(oarray);\n+                int aoffset = (int) UNSAFE.arrayBaseOffset(arrayType);\n+                int ascale = UNSAFE.arrayIndexScale(arrayType);\n+                int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n+                int layout = UNSAFE.arrayLayout(arrayType);\n+                return UNSAFE.getAndSetFlatValueRelease(array,\n+                        (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << ashift) + aoffset, layout, arrayType.componentType(),\n+                         runtimeTypeCheck(handle, array, value));\n@@ -1287,1 +1395,1 @@\n-                    {#if[FlatValue]?handle.layout, }{#if[Object]?handle.componentType, runtimeTypeCheck(handle, array, value):value});\n+                    {#if[Object]?handle.componentType, runtimeTypeCheck(handle, array, value):value});\n@@ -1406,0 +1514,1 @@\n+#end[Array]\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":169,"deletions":60,"binary":false,"changes":229,"status":"modified"},{"patch":"@@ -172,0 +172,1 @@\n+            if (accessMode.ordinal() != 2) continue;\n@@ -209,1 +210,1 @@\n-            } catch (UnsupportedOperationException ex) {\n+            } catch (IllegalArgumentException ex) {\n","filename":"test\/jdk\/valhalla\/valuetypes\/FlatVarHandleTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @run junit\/othervm -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening NullRestrictedArraysTest\n@@ -211,1 +210,1 @@\n-            vh.compareAndSet(array, 1, value1, null);\n+            assertTrue(vh.compareAndSet(array, 1, value1, null));\n@@ -215,1 +214,1 @@\n-            vh.compareAndExchange(array, 1, value1, null);\n+            assertEquals(vh.compareAndExchange(array, 1, value1, null), value1);\n@@ -219,1 +218,1 @@\n-            vh.compareAndExchangeAcquire(array, 1, value1, null);\n+            assertEquals(vh.compareAndExchangeAcquire(array, 1, value1, null), value1);\n@@ -223,1 +222,1 @@\n-            vh.compareAndExchangeRelease(array, 1, value1, null);\n+            assertEquals(vh.compareAndExchangeRelease(array, 1, value1, null), value1);\n@@ -227,1 +226,1 @@\n-            vh.weakCompareAndSet(array, 1, value1, null);\n+            assertTrue(vh.weakCompareAndSet(array, 1, value1, null));\n@@ -231,1 +230,1 @@\n-            vh.weakCompareAndSetAcquire(array, 1, value1, null);\n+            assertTrue(vh.weakCompareAndSetAcquire(array, 1, value1, null));\n@@ -235,1 +234,1 @@\n-            vh.weakCompareAndSetPlain(array, 1, value1, null);\n+            assertTrue(vh.weakCompareAndSetPlain(array, 1, value1, null));\n@@ -239,1 +238,1 @@\n-            vh.weakCompareAndSetRelease(array, 1, value1, null);\n+            assertTrue(vh.weakCompareAndSetRelease(array, 1, value1, null));\n@@ -302,0 +301,26 @@\n+\n+        \/\/ test atomic set with null witness\n+\n+        assertFalse(vh.compareAndSet(array, 2, null, value1));\n+        assertEquals(vh.get(array, 2), value2);\n+\n+        assertNotNull(vh.compareAndExchange(array, 2, null, value1));\n+        assertEquals(vh.get(array, 2), value2);\n+\n+        assertNotNull(vh.compareAndExchangeAcquire(array, 2, null, value1));\n+        assertEquals(vh.get(array, 2), value2);\n+\n+        assertNotNull(vh.compareAndExchangeRelease(array, 2, null, value1));\n+        assertEquals(vh.get(array, 2), value2);\n+\n+        assertFalse(vh.weakCompareAndSet(array, 2, null, value1));\n+        assertEquals(vh.get(array, 2), value2);\n+\n+        assertFalse(vh.weakCompareAndSetAcquire(array, 2, null, value1));\n+        assertEquals(vh.get(array, 2), value2);\n+\n+        assertFalse(vh.weakCompareAndSetPlain(array, 2, null, value1));\n+        assertEquals(vh.get(array, 2), value2);\n+\n+        assertFalse(vh.weakCompareAndSetRelease(array, 2, null, value1));\n+        assertEquals(vh.get(array, 2), value2);\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedArraysTest.java","additions":34,"deletions":9,"binary":false,"changes":43,"status":"modified"}]}