{"files":[{"patch":"@@ -212,1 +212,1 @@\n-        return hasAtomicAccess && !hasOops(field.getFieldType());\n+        return hasAtomicAccess && !HAS_OOPS.get(field.getFieldType());\n@@ -220,1 +220,1 @@\n-        return hasAtomicAccess && !hasOops(componentType);\n+        return hasAtomicAccess && !HAS_OOPS.get(componentType);\n@@ -223,7 +223,10 @@\n-    static boolean hasOops(Class<?> c) {\n-        for (Field f : c.getDeclaredFields()) {\n-            Class<?> ftype = f.getType();\n-            if (UNSAFE.isFlatField(f) && hasOops(ftype)) {\n-                return true;\n-            } else if (!ftype.isPrimitive()) {\n-                return true;\n+    static final ClassValue<Boolean> HAS_OOPS = new ClassValue<>() {\n+        @Override\n+        protected Boolean computeValue(Class<?> c) {\n+            for (Field f : c.getDeclaredFields()) {\n+                Class<?> ftype = f.getType();\n+                if (UNSAFE.isFlatField(f) && HAS_OOPS.get(ftype)) {\n+                    return true;\n+                } else if (!ftype.isPrimitive()) {\n+                    return true;\n+                }\n@@ -231,0 +234,1 @@\n+            return false;\n@@ -232,2 +236,1 @@\n-        return false;\n-    }\n+    };\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2848,1 +2848,1 @@\n-        \/\/ we only support nullable flat layouts\n+        \/\/ try nullable atomic array first\n@@ -2851,0 +2851,9 @@\n+        if (arrayLayout(expectedArray.getClass()) != layout) {\n+            \/\/ then try null-restricted atomic\n+            expectedArray = ValueClass.newNullRestrictedAtomicArray(valueType, 1);\n+            xArray = ValueClass.newNullRestrictedAtomicArray(valueType, 1);\n+        }\n+        if (arrayLayout(expectedArray.getClass()) != layout) {\n+            \/\/ if layout still doesn't match, give up\n+            throw new IllegalStateException(\"Unsupported layout: \" + layout);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n- * @run junit\/othervm -XX:-UseNullableValueFlattening FlatVarHandleTest\n- * @run junit\/othervm -XX:+UseNullableValueFlattening FlatVarHandleTest\n+ * @run junit\/othervm -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening FlatVarHandleTest\n+ * @run junit\/othervm -XX:+UseArrayFlattening -XX:+UseNullableValueFlattening FlatVarHandleTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/FlatVarHandleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @run junit\/othervm NullRestrictedArraysTest\n- * @run junit\/othervm -XX:-UseArrayFlattening NullRestrictedArraysTest\n+ * @run junit\/othervm -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening FlatVarHandleTest\n+ * @run junit\/othervm -XX:+UseArrayFlattening -XX:+UseNullableValueFlattening FlatVarHandleTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedArraysTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}