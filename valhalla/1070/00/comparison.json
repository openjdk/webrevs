{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.value.ValueClass;\n@@ -3510,0 +3511,1 @@\n+        Class<?> componentType = newType.getComponentType();\n@@ -3513,1 +3515,3 @@\n-            : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n+            : (original.getClass() == newType && componentType.isValue() && ValueClass.isNullRestrictedArray(original)\n+                    ? (T[]) ValueClass.newNullRestrictedArray(newType.getComponentType(), newLength)\n+                    : (T[]) Array.newInstance(componentType, newLength));\n@@ -3809,0 +3813,1 @@\n+        Class<?> componentType = newType.getComponentType();\n@@ -3812,1 +3817,3 @@\n-            : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n+            : (original.getClass() == newType && componentType.isValue() && ValueClass.isNullRestrictedArray(original)\n+                    ? (T[]) ValueClass.newNullRestrictedArray(componentType, newLength)\n+                    : (T[]) Array.newInstance(componentType, newLength));\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    NormalCheckedType(Class<?> cls) {\n+    private NormalCheckedType(Class<?> cls) {\n@@ -49,1 +49,11 @@\n-    public static NormalCheckedType of(Class<?> cls) {\n+    \/**\n+     * {@returns a {@linkplain CheckedType checked type} for the given class if it is a checked type}\n+     *\n+     * A primitive type and {@code void} is not a checked type.\n+     *\n+     * @param cls {@code Class} object\n+     * @throws IllegalArgumentException if the given class is a primitive type\n+     *\/\n+    public static CheckedType of(Class<?> cls) {\n+        if (cls.isPrimitive())\n+            throw new IllegalArgumentException(cls.getName() + \" not a checked type\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/NormalCheckedType.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    NullRestrictedCheckedType(Class<?> cls) {\n+    private NullRestrictedCheckedType(Class<?> cls) {\n@@ -53,0 +53,10 @@\n+    \/**\n+     * {@returns a {@linkplain NullRestrictedCheckedType null-restricted checked type}\n+     * for the given class if it is a checked type}\n+     *\n+     * A primitive type and {@code void} is not a checked type.\n+     *\n+     * @param cls {@code Class} object\n+     * @throws IllegalArgumentException if the given class is a primitive type\n+     * @throws IllegalArgumentException if the given class is not a value class\n+     *\/\n@@ -54,0 +64,2 @@\n+        if (cls.isPrimitive())\n+            throw new IllegalArgumentException(cls.getName() + \" not a checked type\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/NullRestrictedCheckedType.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1418,1 +1418,2 @@\n-    @Test\n+    \/\/ Ignore: JDK-8329224\n+    \/\/ @Test\n@@ -1423,1 +1424,1 @@\n-    @Run(test = \"test59\")\n+    \/\/ @Run(test = \"test59\")\n@@ -1433,2 +1434,2 @@\n-        \/\/ Result is not a null-restricted array\n-        Asserts.assertEQ(result[len], null);\n+        \/\/ Result is a null-restricted array\n+        Asserts.assertEQ(result[len], ValueClass.zeroInstance(MyValue1.class));\n@@ -1439,1 +1440,2 @@\n-    @Test\n+    \/\/ Ignore: JDK-8329224\n+    \/\/ @Test\n@@ -1444,1 +1446,1 @@\n-    @Run(test = \"test60\")\n+    \/\/ @Run(test = \"test60\")\n@@ -1454,2 +1456,2 @@\n-        \/\/ Result is not a null-restricted array\n-        Asserts.assertEQ(result[len], null);\n+        \/\/ Result is a null-restricted array\n+        Asserts.assertEQ(result[len], ValueClass.zeroInstance(MyValue1.class));\n@@ -1525,1 +1527,2 @@\n-    @Test\n+    \/\/ Ignore: JDK-8329224\n+    \/\/ @Test\n@@ -1535,1 +1538,1 @@\n-    @Run(test = \"test63\")\n+    \/\/ @Run(test = \"test63\")\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -342,12 +342,1 @@\n-\n-        \/\/ Arrays.copyOf() API needs discussion, avoid just now...\n-        boolean useArraysCopyOf = false;\n-        MyInt[] copyMyInts;\n-        if (useArraysCopyOf) {\n-            copyMyInts = (MyInt[]) Arrays.copyOf(myInts, myInts.length + 1);\n-        } else {\n-            copyMyInts = (MyInt[]) (MyInt[])ValueClass.newNullRestrictedArray(MyInt.class, myInts.length + 1);\n-            for (int i = 0; i < myInts.length; i++) {\n-                copyMyInts[i] = myInts[i];\n-            }\n-        }\n+        MyInt[] copyMyInts = (MyInt[]) Arrays.copyOf(myInts, myInts.length + 1);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -108,0 +108,59 @@\n+    \/*\n+     * Test Arrays::copyOf and Arrays::copyOfRange to create null-restricted arrays.\n+     *\/\n+    @Test\n+    public void testArraysCopyOf() {\n+        int len = 4;\n+        Object[] array = (Object[]) Array.newInstance(Value.class, len);\n+        Object[] nullRestrictedArray = ValueClass.newNullRestrictedArray(Value.class, len);\n+        for (int i=0; i < len; i++) {\n+            array[i] = new Value(i);\n+            nullRestrictedArray[i] = new Value(i);\n+        }\n+        testCopyOf(array, nullRestrictedArray);\n+        testCopyOfRange(array, nullRestrictedArray, 1, len+2);\n+    };\n+\n+    private void testCopyOf(Object[] array, Object[] nullRestrictedArray) {\n+        Object[] newArray1 = Arrays.copyOf(array, array.length);\n+        Object[] newArray2 = Arrays.copyOf(nullRestrictedArray, nullRestrictedArray.length);\n+\n+        assertFalse(ValueClass.isNullRestrictedArray(newArray1));\n+        assertTrue(ValueClass.isNullRestrictedArray(newArray2));\n+\n+        \/\/ elements in a normal array can be null\n+        for (int i=0; i < array.length; i++) {\n+            newArray1[i] = null;\n+        }\n+        \/\/ NPE thrown if elements in a null-restricted array set to null\n+        assertThrows(NullPointerException.class, () -> newArray2[0] = null);\n+    }\n+\n+    private void testCopyOfRange(Object[] array, Object[] nullRestrictedArray, int from, int to) {\n+        Object[] newArray1 = Arrays.copyOfRange(array, from, to);\n+        Object[] newArray2 = Arrays.copyOfRange(nullRestrictedArray, from, to);\n+        System.out.println(\"newArray2 \" + newArray2.length + \" \" + Arrays.toString(newArray2));\n+        \/\/ elements in a normal array can be null\n+        for (int i=0; i < newArray1.length; i++) {\n+            newArray1[i] = null;\n+        }\n+        \/\/ NPE thrown if elements in a null-restricted array set to null\n+        assertThrows(NullPointerException.class, () -> newArray2[0] = null);\n+\n+        \/\/ check the new array padded with null if normal array and\n+        \/\/ zero instance if null-restricted array\n+        for (int i=0; i < newArray1.length; i++) {\n+            if (from+1 >= array.length) {\n+                \/\/ padded with null\n+                assertTrue(newArray1[i] == null);\n+            }\n+        }\n+        Class<?> componentType = nullRestrictedArray.getClass().getComponentType();\n+        for (int i=0; i < newArray2.length; i++) {\n+            if (from+1 >= nullRestrictedArray.length) {\n+                \/\/ padded with zero instance\n+                assertTrue(newArray2[i] == ValueClass.zeroInstance(componentType));\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedArraysTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"}]}