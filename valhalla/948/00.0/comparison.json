{"files":[{"patch":"@@ -70,1 +70,0 @@\n-    -tag revised:X \\\n","filename":"make\/Docs.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1191,1 +1191,1 @@\n-            version: \"7.3\",\n+            version: \"7.3.1\",\n@@ -1193,1 +1193,1 @@\n-            file: \"bundles\/jtreg-7.3+1.zip\",\n+            file: \"bundles\/jtreg-7.3.1+1.zip\",\n@@ -1202,1 +1202,1 @@\n-            revision: \"1.35+1.0\"\n+            revision: \"1.37+1.0\"\n","filename":"make\/conf\/jib-profiles.js","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -361,1 +361,3 @@\n-    *((intptr_t**)addr_at(interpreter_frame_last_sp_offset)) = sp;\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized last_sp\n+  ptr_at_put(interpreter_frame_last_sp_offset, sp != nullptr ? (sp - fp()) : 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -268,1 +268,3 @@\n-  return (intptr_t*)at(interpreter_frame_last_sp_offset);\n+  intptr_t n = *addr_at(interpreter_frame_last_sp_offset);\n+  assert(n <= 0, \"n: \" INTPTR_FORMAT, n);\n+  return n != 0 ? &fp()[n] : nullptr;\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -503,1 +503,3 @@\n-  str(esp, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  sub(rscratch1, esp, rfp);\n+  asr(rscratch1, rscratch1, Interpreter::logStackElementSize);\n+  str(rscratch1, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -469,1 +469,2 @@\n-  __ ldr(esp, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ ldr(rscratch1, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(esp, Address(rfp, rscratch1, Address::lsl(Interpreter::logStackElementSize)));\n@@ -530,1 +531,2 @@\n-  __ ldr(esp, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ ldr(rscratch1, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(esp, Address(rfp, rscratch1, Address::lsl(Interpreter::logStackElementSize)));\n@@ -1877,1 +1879,2 @@\n-  __ ldr(esp, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ ldr(rscratch1, Address(rfp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(esp, Address(rfp, rscratch1, Address::lsl(Interpreter::logStackElementSize)));\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2335,0 +2335,12 @@\n+  if (_desc->bytecode() != Bytecodes::_return_register_finalizer) {\n+    Label no_safepoint;\n+    __ ldr(rscratch1, Address(rthread, JavaThread::polling_word_offset()));\n+    __ tbz(rscratch1, log2i_exact(SafepointMechanism::poll_bit()), no_safepoint);\n+    __ push(state);\n+    __ push_cont_fastpath(rthread);\n+    __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint));\n+    __ pop_cont_fastpath(rthread);\n+    __ pop(state);\n+    __ bind(no_safepoint);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1244,0 +1244,3 @@\n+  sldi(Rscratch1, Rscratch1, Interpreter::logStackElementSize);\n+  add(Rscratch1, Rscratch1, Rscratch2); \/\/ Rscratch2 contains fp\n+  \/\/ Compare sender_sp with the derelativized top_frame_sp\n@@ -2018,1 +2021,4 @@\n-  std(R1_SP, _ijava_state_neg(top_frame_sp), esp); \/\/ esp contains fp\n+  subf(Rtemp2, esp, R1_SP); \/\/ esp contains fp\n+  sradi(Rtemp2, Rtemp2, Interpreter::logStackElementSize);\n+  \/\/ Store relativized top_frame_sp\n+  std(Rtemp2, _ijava_state_neg(top_frame_sp), esp); \/\/ esp contains fp\n@@ -2254,0 +2260,3 @@\n+    \/\/ Derelativize top_frame_sp\n+    sldi(tfsp, tfsp, Interpreter::logStackElementSize);\n+    add(tfsp, tfsp, scratch);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -358,1 +358,3 @@\n-    *((intptr_t**)addr_at(interpreter_frame_last_sp_offset)) = sp;\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized last_sp\n+  ptr_at_put(interpreter_frame_last_sp_offset, sp != nullptr ? (sp - fp()) : 0);\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -256,1 +256,3 @@\n-  return (intptr_t*)at(interpreter_frame_last_sp_offset);\n+  intptr_t n = *addr_at(interpreter_frame_last_sp_offset);\n+  assert(n <= 0, \"n: \" INTPTR_FORMAT, n);\n+  return n != 0 ? &fp()[n] : nullptr;\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -805,1 +805,4 @@\n-  movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), _bcp_register);\n+  mov(rcx, _bcp_register);\n+  subptr(rcx, rbp);\n+  sarptr(rcx, LogBytesPerWord);\n+  movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), rcx);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -210,1 +210,2 @@\n-  __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ movptr(rscratch1, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(rsp, Address(rbp, rscratch1, Address::times_ptr));\n@@ -1625,0 +1626,1 @@\n+  __ lea(rbx, Address(rbp, rbx, Address::times_ptr));\n@@ -1633,0 +1635,1 @@\n+  __ lea(c_rarg2, Address(rbp, c_rarg2, Address::times_ptr));\n@@ -1640,1 +1643,2 @@\n-  __ movptr(rsp, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ movptr(rcx, Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize));\n+  __ lea(rsp, Address(rbp, rcx, Address::times_ptr));\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-    int src_hash = src_obj->identity_hash();\n+    intptr_t src_hash = src_obj->identity_hash();\n@@ -463,2 +463,2 @@\n-    DEBUG_ONLY(int archived_hash = fake_oop->identity_hash());\n-    assert(src_hash == archived_hash, \"Different hash codes: original %x, archived %x\", src_hash, archived_hash);\n+    DEBUG_ONLY(intptr_t archived_hash = fake_oop->identity_hash());\n+    assert(src_hash == archived_hash, \"Different hash codes: original \" INTPTR_FORMAT \", archived \" INTPTR_FORMAT, src_hash, archived_hash);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+  _token = _line;\n@@ -416,1 +417,1 @@\n-  int error_index = _token - _line;\n+  int error_index = pointer_delta_as_int(_token, _line);\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-  _num_module_paths = ClassLoader::num_module_path_entries();\n+  _num_module_paths = ClassLoader::num_module_path_entries();\n@@ -424,1 +424,1 @@\n-  if (ent->is_jar() && !ent->is_signed() && ent->manifest() != nullptr) {\n+  if (ent->is_jar() && ent->manifest() != nullptr) {\n@@ -678,23 +678,0 @@\n-\n-  \/\/ The return value indicates if the JAR is signed or not\n-  bool check_is_signed() {\n-    u1* attr = _current;\n-    bool isSigned = false;\n-    while (_current < _buffer_end) {\n-      if (*_current == '\\n') {\n-        *_current = '\\0';\n-        u1* value = (u1*)strchr((char*)attr, ':');\n-        if (value != nullptr) {\n-          assert(*(value+1) == ' ', \"Unrecognized format\" );\n-          if (strstr((char*)attr, \"-Digest\") != nullptr) {\n-            isSigned = true;\n-            break;\n-          }\n-        }\n-        *_current = '\\n'; \/\/ restore\n-        attr = _current + 1;\n-      }\n-      _current ++;\n-    }\n-    return isSigned;\n-  }\n@@ -713,12 +690,8 @@\n-    if (stream->check_is_signed()) {\n-      ent->set_is_signed();\n-    } else {\n-      \/\/ Copy the manifest into the shared archive\n-      manifest = ClassLoaderExt::read_raw_manifest(THREAD, cpe, &manifest_size);\n-      Array<u1>* buf = MetadataFactory::new_array<u1>(loader_data,\n-                                                      manifest_size,\n-                                                      CHECK);\n-      char* p = (char*)(buf->data());\n-      memcpy(p, manifest, manifest_size);\n-      ent->set_manifest(buf);\n-    }\n+    \/\/ Copy the manifest into the shared archive\n+    manifest = ClassLoaderExt::read_raw_manifest(THREAD, cpe, &manifest_size);\n+    Array<u1>* buf = MetadataFactory::new_array<u1>(loader_data,\n+                                                    manifest_size,\n+                                                    CHECK);\n+    char* p = (char*)(buf->data());\n+    memcpy(p, manifest, manifest_size);\n+    ent->set_manifest(buf);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":10,"deletions":37,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-    signed_jar_entry,\n@@ -94,4 +93,0 @@\n-  bool is_signed()        const { return _type == signed_jar_entry; }\n-  void set_is_signed() {\n-    _type = signed_jar_entry;\n-  }\n@@ -249,1 +244,1 @@\n-  jshort _num_module_paths;             \/\/ number of module path entries\n+  int    _num_module_paths;             \/\/ number of module path entries\n@@ -309,1 +304,1 @@\n-  jshort num_module_paths()                const { return _num_module_paths; }\n+  int    num_module_paths()                const { return _num_module_paths; }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -4793,1 +4794,1 @@\n-    _page_size = (int)os::vm_page_size();\n+    _page_size = AIX_ONLY(sysconf(_SC_PAGESIZE)) NOT_AIX((int)os::vm_page_size());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1614,1 +1614,1 @@\n-                          SignatureHandlerLibrary::buffer_size - align_offset);\n+                          checked_cast<int>(SignatureHandlerLibrary::buffer_size - align_offset));\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -909,1 +909,1 @@\n-C2V_VMENTRY_NULL(jobject, lookupAppendixInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint index))\n+C2V_VMENTRY_NULL(jobject, lookupAppendixInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint which))\n@@ -911,1 +911,1 @@\n-  oop appendix_oop = ConstantPool::appendix_at_if_loaded(cp, index);\n+  oop appendix_oop = ConstantPool::appendix_at_if_loaded(cp, which);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-  int print_len = MIN2((intx) va->length(), MaxElementPrintSize);\n+  int print_len = MIN2(va->length(), MaxElementPrintSize);\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1979,1 +1979,0 @@\n-    \/\/ _sort_Fn is defined in growableArray.hpp.\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -498,1 +498,1 @@\n-  int print_len = MIN2((intx) oa->length(), MaxElementPrintSize);\n+  int print_len = MIN2(oa->length(), MaxElementPrintSize);\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -345,1 +345,1 @@\n-  int print_len = MIN2((intx) ta->length(), MaxElementPrintSize);\n+  int print_len = MIN2(ta->length(), MaxElementPrintSize);\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1009,0 +1009,2 @@\n+      \/\/ If this is a backwards branch in the bytecodes, add safepoint\n+      maybe_add_safepoint(handler_bci);\n@@ -1040,0 +1042,2 @@\n+      \/\/ If this is a backwards branch in the bytecodes, add safepoint\n+      maybe_add_safepoint(handler_bci);\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1818,1 +1818,1 @@\n-            if (u->is_ConstraintCast() && u->bottom_type()->higher_equal(_igvn.type(n)) && u->in(0) == x_ctrl) {\n+            if (u->is_ConstraintCast() && _igvn.type(n)->higher_equal(u->bottom_type()) && u->in(0) == x_ctrl) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1656,1 +1656,1 @@\n-  print_on(st, min_index, max_index, v0, v1, true \/* on_heap *\/);\n+  print_on(st, min_index, max_index, v0, v1);\n@@ -1659,1 +1659,1 @@\n-void FrameValues::print_on(outputStream* st, int min_index, int max_index, intptr_t* v0, intptr_t* v1, bool on_heap) {\n+void FrameValues::print_on(outputStream* st, int min_index, int max_index, intptr_t* v0, intptr_t* v1) {\n@@ -1674,2 +1674,1 @@\n-      if (on_heap\n-          && *fv.location != 0 && *fv.location > -100 && *fv.location < 100\n+      if (*fv.location != 0 && *fv.location > -100 && *fv.location < 100\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -252,0 +252,6 @@\n+  intptr_t  at_relative_or_null(int index) const {\n+    return (fp()[index] != 0)\n+      ? (intptr_t)(fp() + fp()[index])\n+      : 0;\n+  }\n+\n@@ -523,2 +529,1 @@\n-  void print_on(outputStream* out, int min_index, int max_index, intptr_t* v0, intptr_t* v1,\n-                bool on_heap = false);\n+  void print_on(outputStream* out, int min_index, int max_index, intptr_t* v0, intptr_t* v1);\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -556,1 +556,1 @@\n-  product(intx, HeapDumpGzipLevel, 0, MANAGEABLE,                           \\\n+  product(int, HeapDumpGzipLevel, 0, MANAGEABLE,                            \\\n@@ -1336,1 +1336,1 @@\n-  notproduct(intx, MaxElementPrintSize, 256,                                \\\n+  notproduct(int, MaxElementPrintSize, 256,                                 \\\n@@ -1478,1 +1478,1 @@\n-  product(uintx, MaxMetaspaceFreeRatio,    70,                              \\\n+  product(uint, MaxMetaspaceFreeRatio,    70,                               \\\n@@ -1484,1 +1484,1 @@\n-  product(uintx, MinMetaspaceFreeRatio,    40,                              \\\n+  product(uint, MinMetaspaceFreeRatio,    40,                               \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+#include \"utilities\/parseInteger.hpp\"\n@@ -881,1 +882,1 @@\n-  long max = -1;\n+  int max = -1;\n@@ -884,2 +885,2 @@\n-    max = ::strtol(max_value, &endptr, 10);\n-    if (max == 0 && max_value == endptr) {\n+    int max;\n+    if (!parse_integer(max_value, &max)) {\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1097,1 +1097,1 @@\n-  return size + field_count * (sizeof(address) + 1);\n+  return checked_cast<u4>(size + field_count * (sizeof(address) + 1));\n@@ -1260,1 +1260,1 @@\n-  u4 size = 1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + static_size + 2 + instance_fields_size;\n+  u4 size = checked_cast<u4>(1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + static_size + 2 + instance_fields_size);\n@@ -1374,1 +1374,1 @@\n-  u4 size = header_size + length * sizeof(address);\n+  u4 size = checked_cast<u4>(header_size + length * sizeof(address));\n@@ -2662,1 +2662,1 @@\n-      DumperSupport::write_header(writer(), HPROF_TRACE, 3*sizeof(u4) + depth*oopSize);\n+      DumperSupport::write_header(writer(), HPROF_TRACE, checked_cast<u4>(3*sizeof(u4) + depth*oopSize));\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-#define ATTRIBUTE_ALIGNED(x)\n+#define ATTRIBUTE_ALIGNED(x) alignas(x)\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1330,1 +1330,0 @@\n-     * @revised 9\n@@ -3205,1 +3204,0 @@\n-     * @revised 9\n@@ -3301,1 +3299,0 @@\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -179,2 +179,0 @@\n-     *\n-     * @revised 9\n@@ -1441,2 +1439,0 @@\n-     *\n-     * @revised 9\n@@ -1625,2 +1621,0 @@\n-         *\n-         *  @revised 9\n@@ -1708,1 +1702,0 @@\n-         * @revised 9\n@@ -2604,2 +2597,0 @@\n-         *\n-         * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n- * @revised 9\n@@ -122,1 +121,0 @@\n-     * @revised 9\n@@ -211,1 +209,0 @@\n-     * @revised 9\n@@ -428,2 +425,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessibleObject.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -296,1 +296,0 @@\n- * @revised 9\n@@ -386,1 +385,0 @@\n-     * @revised 9\n@@ -1019,1 +1017,0 @@\n-     * @revised 9\n@@ -1104,2 +1101,0 @@\n-     *\n-     * @revised 9\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4866,0 +4866,13 @@\n+\n+                boolean allPatternCaseLabels = c.labels.stream().allMatch(p -> p instanceof JCPatternCaseLabel);\n+\n+                if (allPatternCaseLabels) {\n+                    preview.checkSourceLevel(c.labels.tail.head.pos(), Feature.UNNAMED_VARIABLES);\n+                }\n+\n+                for (JCCaseLabel label : c.labels.tail) {\n+                    if (label instanceof JCConstantCaseLabel) {\n+                        log.error(label.pos(), Errors.InvalidCaseLabelCombination);\n+                        break;\n+                    }\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -3379,0 +3379,2 @@\n+                    } else if (typeDepth == 0 && parenDepth == 0 && (peekToken(lookahead, tk -> tk == ARROW || tk == COMMA))) {\n+                        return PatternResult.EXPRESSION;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,2 @@\n+    vTableTypeMap = null; \/\/ force vTableTypeMap to get re-initialized later\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/FileMapInfo.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,3 +43,0 @@\n-static bool test_pattern(stringStream* st, const char* pattern) {\n-  return (strstr(st->as_string(), pattern) != NULL);\n-}\n@@ -50,1 +47,1 @@\n-  ASSERT_TRUE(test_pattern(&st, pattern)) << pattern << \" not in \" << st.as_string();\n+  ASSERT_THAT(st.base(), testing::HasSubstr(pattern));\n","filename":"test\/hotspot\/gtest\/oops\/test_markWord.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+runtime\/cds\/appcds\/customLoader\/HelloCustom_JFR.java 8241075 linux-all,windows-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -403,2 +403,0 @@\n- -runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT1.java \\\n- -runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT2.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -610,1 +610,0 @@\n-sun\/security\/pkcs\/pkcs7\/SignerOrder.java                        8314240 generic-all\n@@ -776,2 +775,0 @@\n-java\/foreign\/TestByteBuffer.java 8309475 aix-ppc64\n-\n@@ -781,3 +778,0 @@\n-javax\/swing\/JFileChooser\/FileSystemView\/SystemIconTest.java 8313902 windows-all\n-sanity\/client\/SwingSet\/src\/FileChooserDemoTest.java 8313903 windows-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}