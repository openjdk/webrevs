{"files":[{"patch":"@@ -773,0 +773,1 @@\n+    case T_PRIMITIVE_OBJECT: \/\/ fall-through\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1094,0 +1094,1 @@\n+      case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -114,0 +114,3 @@\n+    if (!_type->maybe_null()) {\n+      vt->as_InlineType()->set_is_init(*phase);\n+    }\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2871,0 +2871,17 @@\n+\n+    \/\/ Might be incrementally inlined\n+    public static Object hide(Object obj) {\n+        return (MyValue1.ref)obj;\n+    }\n+\n+    \/\/ Test that the ConstraintCastNode::Ideal transformation propagates null-free information\n+    @Test\n+    public MyValue1.ref test103() {\n+        Object obj = hide(null);\n+        return (MyValue1.ref)obj;\n+    }\n+\n+    @Run(test = \"test103\")\n+    public void test103_verifier() {\n+        Asserts.assertEQ(test103(), null);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}