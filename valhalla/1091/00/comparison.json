{"files":[{"patch":"@@ -838,1 +838,1 @@\n-            int flags = adjustFlags(inner.flags_field);\n+            int flags = adjustFlags(inner, inner.flags_field);\n@@ -979,1 +979,1 @@\n-        int flags = adjustFlags(v.flags());\n+        int flags = adjustFlags(v, v.flags());\n@@ -1008,1 +1008,1 @@\n-        int flags = adjustFlags(m.flags());\n+        int flags = adjustFlags(m, m.flags());\n@@ -1605,1 +1605,1 @@\n-            flags = adjustFlags(c.flags() & ~(DEFAULT | STRICTFP));\n+            flags = adjustFlags(c, c.flags() & ~(DEFAULT | STRICTFP));\n@@ -1769,1 +1769,1 @@\n-    int adjustFlags(final long flags) {\n+    int adjustFlags(Symbol sym, final long flags) {\n@@ -1785,2 +1785,4 @@\n-        if ((flags & STRICT) != 0) {\n-            result |= ACC_STRICT;\n+        if (sym.kind == VAR) {\n+            if ((flags & STRICT) != 0) {\n+                result |= ACC_STRICT;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331462\n+ * @summary [lworld] javac is setting the ACC_STRICT flag for value-based classes\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.code\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main ValueBasedFlagsTest\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import com.sun.tools.javac.code.Flags;\n+import com.sun.tools.javac.util.Assert;\n+import com.sun.tools.classfile.ClassFile;\n+\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class ValueBasedFlagsTest extends TestRunner {\n+    ToolBox tb = new ToolBox();\n+\n+    public ValueBasedFlagsTest() {\n+        super(System.err);\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws Exception {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new ValueBasedFlagsTest().runTests();\n+    }\n+\n+    @Test\n+    public void testValueBased(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                package java.lang;\n+                @jdk.internal.ValueBased\n+                final class ValueBasedTest {}\n+                \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        new toolbox.JavacTask(tb)\n+                .options(\"--patch-module\", \"java.base=\" + src.toString(),\n+                        \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+        Path classFilePath = classes.resolve(\"java\", \"lang\", \"ValueBasedTest.class\");\n+        ClassFile classFile = ClassFile.read(classFilePath.toFile());\n+        Assert.check((classFile.access_flags.flags & Flags.ACC_STRICT) == 0);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueBasedFlagsTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}