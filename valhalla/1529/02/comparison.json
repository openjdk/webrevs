{"files":[{"patch":"@@ -3789,2 +3789,12 @@\n-  address low = MIN4(entry_point(), verified_entry_point(), verified_inline_entry_point(), verified_inline_ro_entry_point());\n-  low = MIN2(low, inline_entry_point());\n+  address low = MIN3(entry_point(),\n+                     verified_entry_point(),\n+                     inline_entry_point());\n+  \/\/ The verified inline entry point and verified inline RO entry point are not always\n+  \/\/ used. When they are unused. CodeOffsets::Verified_Inline_Entry(_RO) is -1. Hence,\n+  \/\/ the calculated entry point is smaller than the block they are offsetting into.\n+  if (verified_inline_entry_point() >= block_begin) {\n+    low = MIN2(low, verified_inline_entry_point());\n+  }\n+  if (verified_inline_ro_entry_point() >= block_begin) {\n+    low = MIN2(low, verified_inline_ro_entry_point());\n+  }\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/MethodTagTest.java                   8343233 generic-aarch64\n","filename":"test\/hotspot\/jtreg\/ProblemList-zgc.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8360851\n+ * @summary Test that the PrintAssembly [Entry Point] gets annotated with \"# {method}\".\n+ * @requires vm.jvmci\n+ * @requires vm.simpleArch == \"x64\" | vm.simpleArch == \"aarch64\" | vm.simpleArch == \"riscv64\"\n+ * @library \/test\/lib \/\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.meta\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.code\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.code.site\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.runtime\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.aarch64\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.amd64\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.riscv64\n+ * @compile TestAssembler.java TestHotSpotVMConfig.java amd64\/AMD64TestAssembler.java aarch64\/AArch64TestAssembler.java riscv64\/RISCV64TestAssembler.java\n+ * @run junit\/othervm -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:-UseJVMCICompiler jdk.vm.ci.code.test.MethodTagTest\n+ *\/\n+\n+package jdk.vm.ci.code.test;\n+\n+import java.lang.reflect.Method;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.vm.ci.aarch64.AArch64;\n+import jdk.vm.ci.amd64.AMD64;\n+import jdk.vm.ci.code.Architecture;\n+import jdk.vm.ci.code.CodeCacheProvider;\n+import jdk.vm.ci.code.InstalledCode;\n+import jdk.vm.ci.code.Register;\n+import jdk.vm.ci.code.TargetDescription;\n+import jdk.vm.ci.code.test.aarch64.AArch64TestAssembler;\n+import jdk.vm.ci.code.test.amd64.AMD64TestAssembler;\n+import jdk.vm.ci.code.test.riscv64.RISCV64TestAssembler;\n+import jdk.vm.ci.hotspot.HotSpotCodeCacheProvider;\n+import jdk.vm.ci.hotspot.HotSpotCompiledCode;\n+import jdk.vm.ci.hotspot.HotSpotJVMCIRuntime;\n+import jdk.vm.ci.hotspot.HotSpotNmethod;\n+import jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod;\n+import jdk.vm.ci.meta.ConstantReflectionProvider;\n+import jdk.vm.ci.meta.MetaAccessProvider;\n+import jdk.vm.ci.riscv64.RISCV64;\n+import jdk.vm.ci.runtime.JVMCI;\n+import jdk.vm.ci.runtime.JVMCIBackend;\n+\n+\n+public final class MethodTagTest {\n+    private static final boolean DEBUG = false;\n+\n+    protected final MetaAccessProvider metaAccess;\n+    protected final CodeCacheProvider codeCache;\n+    protected final TargetDescription target;\n+    protected final ConstantReflectionProvider constantReflection;\n+    protected final TestHotSpotVMConfig config;\n+    protected final Architecture arch;\n+\n+    public MethodTagTest() {\n+        JVMCIBackend backend = JVMCI.getRuntime().getHostJVMCIBackend();\n+        metaAccess = backend.getMetaAccess();\n+        codeCache = backend.getCodeCache();\n+        target = backend.getTarget();\n+        constantReflection = backend.getConstantReflection();\n+        arch = codeCache.getTarget().arch;\n+        config = new TestHotSpotVMConfig(HotSpotJVMCIRuntime.runtime().getConfigStore(), arch);\n+    }\n+\n+    protected interface TestCompiler {\n+\n+        void compile(TestAssembler asm);\n+    }\n+\n+    private TestAssembler createAssembler() {\n+        if (arch instanceof AMD64) {\n+            return new AMD64TestAssembler(codeCache, config);\n+        } else if (arch instanceof AArch64) {\n+            return new AArch64TestAssembler(codeCache, config);\n+        } else if (arch instanceof RISCV64) {\n+            return new RISCV64TestAssembler(codeCache, config);\n+        } else {\n+            Assert.fail(\"unsupported architecture\");\n+            return null;\n+        }\n+    }\n+\n+    protected Method getMethod(String name, Class<?>... args) {\n+        try {\n+            return getClass().getMethod(name, args);\n+        } catch (NoSuchMethodException e) {\n+            Assert.fail(\"method not found\");\n+            return null;\n+        }\n+    }\n+\n+    public static int add(int a, int b) {\n+        return a + b;\n+    }\n+\n+    private static void compileAdd(TestAssembler asm) {\n+        Register arg0 = asm.emitIntArg0();\n+        Register arg1 = asm.emitIntArg1();\n+        Register ret = asm.emitIntAdd(arg0, arg1);\n+        asm.emitIntRet(ret);\n+    }\n+\n+    protected HotSpotNmethod test(TestCompiler compiler, Method method, Object... args) {\n+        try {\n+            HotSpotResolvedJavaMethod resolvedMethod = (HotSpotResolvedJavaMethod) metaAccess.lookupJavaMethod(method);\n+            TestAssembler asm = createAssembler();\n+\n+            asm.emitPrologue();\n+            compiler.compile(asm);\n+            asm.emitEpilogue();\n+\n+            HotSpotCompiledCode code = asm.finish(resolvedMethod);\n+            InstalledCode installed = codeCache.addCode(resolvedMethod, code, null, null);\n+\n+            String str = ((HotSpotCodeCacheProvider) codeCache).disassemble(installed);\n+            Asserts.assertTrue(str.contains(\"# {method}\"), \"\\\"# {method}\\\" tag not found\");\n+            if (DEBUG) {\n+                System.out.println(str);\n+            }\n+\n+            Object expected = method.invoke(null, args);\n+            Object actual = installed.executeVarargs(args);\n+            Assert.assertEquals(expected, actual);\n+            return (HotSpotNmethod) installed;\n+        } catch (Exception e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+        HotSpotNmethod nmethod = test(MethodTagTest::compileAdd, getMethod(\"add\", int.class, int.class), 5, 7);\n+\n+        \/\/ Test code invalidation\n+        Asserts.assertTrue(nmethod.isValid(), \"code is not valid, i = \" + nmethod);\n+        Asserts.assertTrue(nmethod.isAlive(), \"code is not alive, i = \" + nmethod);\n+        Asserts.assertNotEquals(nmethod.getStart(), 0L);\n+\n+        \/\/ Make nmethod non-entrant but still alive\n+        nmethod.invalidate(false);\n+        Asserts.assertFalse(nmethod.isValid(), \"code is valid, i = \" + nmethod);\n+        Asserts.assertTrue(nmethod.isAlive(), \"code is not alive, i = \" + nmethod);\n+        Asserts.assertEquals(nmethod.getStart(), 0L);\n+\n+        \/\/ Deoptimize the nmethod and cut the link to it from the HotSpotNmethod\n+        nmethod.invalidate(true);\n+        Asserts.assertFalse(nmethod.isValid(), \"code is valid, i = \" + nmethod);\n+        Asserts.assertFalse(nmethod.isAlive(), \"code is alive, i = \" + nmethod);\n+        Asserts.assertEquals(nmethod.getStart(), 0L);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/MethodTagTest.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"}]}