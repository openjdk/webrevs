{"files":[{"patch":"@@ -6540,2 +6540,2 @@\n-   }\n-   return false;\n+  }\n+  return false;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1957,9 +1957,0 @@\n-      Node* receiver = !call->method()->is_static() ? call->in(TypeFunc::Parms) : nullptr;\n-      if (ret->is_InlineType() &&\n-          receiver && receiver->bottom_type()->isa_instptr() &&\n-          receiver->bottom_type()->is_instptr()->instance_klass()->name()->get_symbol() == vmSymbols::jdk_internal_misc_Unsafe() &&\n-          call->method()->name()->get_symbol() == vmSymbols::makePrivateBuffer_name()) {\n-        \/\/ Re-buffer scalarized InlineTypeNodes returned from makePrivateBuffer\n-        \/\/ and transition the allocation into larval state.\n-        ret = ret->as_InlineType()->make_larval(this);\n-      }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -304,8 +304,0 @@\n-static bool is_vector_payload(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayload_klass());\n-}\n-\n-static bool is_vector_payload_mf(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayloadMF_klass());\n-}\n-\n@@ -315,5 +307,0 @@\n-  if (is_vector_payload_mf(vk)) {\n-     assert(field_count() == nfields, \"\");\n-  } else if (is_vector_payload(vk)) {\n-     assert(field_value(0)->as_InlineType()->field_count() == nfields, \"\");\n-  }\n@@ -330,1 +317,1 @@\n-  if (!igvn->type(get_is_init())->is_int()->is_con(1)) {\n+  if (!vk->is_null_free()) {\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  bool is_default(PhaseGVN* gvn) const;\n+  virtual bool is_default(PhaseGVN* gvn) const;\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2658,2 +2658,2 @@\n-  \/\/ is not reachable,  oop returned by Unsafe_finishPrivateBuffer native method\n-  \/\/ will automatically rematerialize InlineTypeNode.\n+  \/\/ is not reachable, this can happen if makePrivateBuffer was not intrinsified and\n+  \/\/ was falling over to unsafe implementation which return a larval transitioned oop.\n@@ -2661,0 +2661,2 @@\n+    \/\/ Oop returned by Unsafe_finishPrivateBuffer native method\n+    \/\/ will automatically re-materialize InlineTypeNode.\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -856,0 +856,6 @@\n+  if (iklass && iklass->is_inlinetype()) {\n+    \/\/ Value object has two additional inputs before the non-static fields\n+    sfpt->add_req(_igvn.intcon(1));\n+    sfpt->add_req(_igvn.intcon(alloc->_larval ? 1 : 0));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-  Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, true);\n+  Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, false);\n@@ -334,1 +334,1 @@\n-  Node* alloc_oop  = kit.new_instance(klass_node, NULL, NULL, \/* deoptimize_on_exception *\/ true);\n+  Node* alloc_oop  = kit.new_instance(klass_node, nullptr, nullptr, \/* deoptimize_on_exception *\/ true);\n@@ -354,1 +354,1 @@\n-    assert(node->bottom_type()->isa_vect() != NULL, \"not a vector\");\n+    assert(node->bottom_type()->isa_vect() != nullptr, \"not a vector\");\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1712,1 +1712,1 @@\n-    Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, true);\n+    Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, false);\n@@ -1718,1 +1718,1 @@\n-    box_node->set_is_init(gvn);\n+    box_node->set_is_init(gvn, true);\n@@ -1723,0 +1723,1 @@\n+  virtual bool is_default(PhaseGVN* gvn) const { return false; }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n@@ -165,1 +167,2 @@\n-    public abstract static class VectorPayloadMF {\n+    @LooselyConsistentValue\n+    public abstract value static class VectorPayloadMF {\n@@ -385,1 +388,3 @@\n-    public primitive static class VectorPayloadMFMaxB extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxB extends VectorPayloadMF {\n@@ -394,1 +399,3 @@\n-    public primitive static class VectorPayloadMFMaxS extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxS extends VectorPayloadMF {\n@@ -403,1 +410,3 @@\n-    public primitive static class VectorPayloadMFMaxI extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxI extends VectorPayloadMF {\n@@ -412,1 +421,3 @@\n-    public primitive static class VectorPayloadMFMaxL extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxL extends VectorPayloadMF {\n@@ -421,1 +432,3 @@\n-    public primitive static class VectorPayloadMFMaxF extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxF extends VectorPayloadMF {\n@@ -430,1 +443,3 @@\n-    public primitive static class VectorPayloadMFMaxD extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxD extends VectorPayloadMF {\n@@ -439,1 +454,3 @@\n-    public primitive static class VectorPayloadMF8Z extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF8Z extends VectorPayloadMF {\n@@ -448,1 +465,3 @@\n-    public primitive static class VectorPayloadMF16Z extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF16Z extends VectorPayloadMF {\n@@ -457,1 +476,3 @@\n-    public primitive static class VectorPayloadMF32Z extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF32Z extends VectorPayloadMF {\n@@ -466,1 +487,3 @@\n-    public primitive static class VectorPayloadMF64Z extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64Z extends VectorPayloadMF {\n@@ -475,1 +498,3 @@\n-    public primitive static class VectorPayloadMF128Z extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128Z extends VectorPayloadMF {\n@@ -484,1 +509,3 @@\n-    public primitive static class VectorPayloadMF256Z extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256Z extends VectorPayloadMF {\n@@ -493,1 +520,3 @@\n-    public primitive static class VectorPayloadMF512Z extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512Z extends VectorPayloadMF {\n@@ -502,1 +531,3 @@\n-    public primitive static class VectorPayloadMFMaxBZ extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxBZ extends VectorPayloadMF {\n@@ -511,1 +542,3 @@\n-    public primitive static class VectorPayloadMFMaxSZ extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxSZ extends VectorPayloadMF {\n@@ -520,1 +553,3 @@\n-    public primitive static class VectorPayloadMFMaxIZ extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxIZ extends VectorPayloadMF {\n@@ -529,1 +564,3 @@\n-    public primitive static class VectorPayloadMFMaxLZ extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxLZ extends VectorPayloadMF {\n@@ -538,1 +575,3 @@\n-    public primitive static class VectorPayloadMF8B extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF8B extends VectorPayloadMF {\n@@ -547,1 +586,3 @@\n-    public primitive static class VectorPayloadMF16B extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF16B extends VectorPayloadMF {\n@@ -556,1 +597,3 @@\n-    public primitive static class VectorPayloadMF32B extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF32B extends VectorPayloadMF {\n@@ -565,1 +608,3 @@\n-    public primitive static class VectorPayloadMF64B extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64B extends VectorPayloadMF {\n@@ -574,1 +619,3 @@\n-    public primitive static class VectorPayloadMF128B extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128B extends VectorPayloadMF {\n@@ -583,1 +630,3 @@\n-    public primitive static class VectorPayloadMF256B extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256B extends VectorPayloadMF {\n@@ -592,1 +641,3 @@\n-    public primitive static class VectorPayloadMF512B extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512B extends VectorPayloadMF {\n@@ -601,1 +652,3 @@\n-    public primitive static class VectorPayloadMFMaxBB extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxBB extends VectorPayloadMF {\n@@ -610,1 +663,3 @@\n-    public primitive static class VectorPayloadMFMaxSB extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxSB extends VectorPayloadMF {\n@@ -619,1 +674,3 @@\n-    public primitive static class VectorPayloadMFMaxIB extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxIB extends VectorPayloadMF {\n@@ -628,1 +685,3 @@\n-    public primitive static class VectorPayloadMFMaxLB extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxLB extends VectorPayloadMF {\n@@ -637,1 +696,3 @@\n-    public primitive static class VectorPayloadMF64S extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64S extends VectorPayloadMF {\n@@ -646,1 +707,3 @@\n-    public primitive static class VectorPayloadMF128S extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128S extends VectorPayloadMF {\n@@ -655,1 +718,3 @@\n-    public primitive static class VectorPayloadMF256S extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256S extends VectorPayloadMF {\n@@ -664,1 +729,3 @@\n-    public primitive static class VectorPayloadMF512S extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512S extends VectorPayloadMF {\n@@ -673,1 +740,3 @@\n-    public primitive static class VectorPayloadMF64I extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64I extends VectorPayloadMF {\n@@ -682,1 +751,3 @@\n-    public primitive static class VectorPayloadMF128I extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128I extends VectorPayloadMF {\n@@ -691,1 +762,3 @@\n-    public primitive static class VectorPayloadMF256I extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256I extends VectorPayloadMF {\n@@ -700,1 +773,3 @@\n-    public primitive static class VectorPayloadMF512I extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512I extends VectorPayloadMF {\n@@ -709,1 +784,3 @@\n-    public primitive static class VectorPayloadMF64L extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64L extends VectorPayloadMF {\n@@ -718,1 +795,3 @@\n-    public primitive static class VectorPayloadMF128L extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128L extends VectorPayloadMF {\n@@ -727,1 +806,3 @@\n-    public primitive static class VectorPayloadMF256L extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256L extends VectorPayloadMF {\n@@ -736,1 +817,3 @@\n-    public primitive static class VectorPayloadMF512L extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512L extends VectorPayloadMF {\n@@ -745,1 +828,3 @@\n-    public primitive static class VectorPayloadMF64F extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64F extends VectorPayloadMF {\n@@ -754,1 +839,3 @@\n-    public primitive static class VectorPayloadMF128F extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128F extends VectorPayloadMF {\n@@ -763,1 +850,3 @@\n-    public primitive static class VectorPayloadMF256F extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256F extends VectorPayloadMF {\n@@ -772,1 +861,3 @@\n-    public primitive static class VectorPayloadMF512F extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512F extends VectorPayloadMF {\n@@ -781,1 +872,3 @@\n-    public primitive static class VectorPayloadMF64D extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64D extends VectorPayloadMF {\n@@ -790,1 +883,3 @@\n-    public primitive static class VectorPayloadMF128D extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128D extends VectorPayloadMF {\n@@ -799,1 +894,3 @@\n-    public primitive static class VectorPayloadMF256D extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256D extends VectorPayloadMF {\n@@ -808,1 +905,3 @@\n-    public primitive static class VectorPayloadMF512D extends VectorPayloadMF {\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512D extends VectorPayloadMF {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":148,"deletions":49,"binary":false,"changes":197,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -593,0 +595,1 @@\n+        @NullRestricted\n@@ -763,0 +766,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -625,0 +627,1 @@\n+        @NullRestricted\n@@ -795,0 +798,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -689,0 +691,1 @@\n+        @NullRestricted\n@@ -859,0 +862,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -577,0 +579,1 @@\n+        @NullRestricted\n@@ -747,0 +750,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -563,0 +565,1 @@\n+        @NullRestricted\n@@ -733,0 +736,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -554,0 +556,1 @@\n+        @NullRestricted\n@@ -724,0 +727,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -558,0 +560,1 @@\n+        @NullRestricted\n@@ -728,0 +731,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -566,0 +568,1 @@\n+        @NullRestricted\n@@ -736,0 +739,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -552,0 +554,1 @@\n+        @NullRestricted\n@@ -722,0 +725,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -551,0 +553,1 @@\n+        @NullRestricted\n@@ -721,0 +724,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -558,0 +560,1 @@\n+        @NullRestricted\n@@ -728,0 +731,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -566,0 +568,1 @@\n+        @NullRestricted\n@@ -736,0 +739,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -582,0 +584,1 @@\n+        @NullRestricted\n@@ -752,0 +755,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -554,0 +556,1 @@\n+        @NullRestricted\n@@ -724,0 +727,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -551,0 +553,1 @@\n+        @NullRestricted\n@@ -721,0 +724,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -569,0 +571,1 @@\n+        @NullRestricted\n@@ -739,0 +742,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -577,0 +579,1 @@\n+        @NullRestricted\n@@ -747,0 +750,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -593,0 +595,1 @@\n+        @NullRestricted\n@@ -763,0 +766,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -565,0 +567,1 @@\n+        @NullRestricted\n@@ -735,0 +738,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -563,0 +565,1 @@\n+        @NullRestricted\n@@ -747,0 +750,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -555,0 +557,1 @@\n+        @NullRestricted\n@@ -725,0 +728,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -559,0 +561,1 @@\n+        @NullRestricted\n@@ -729,0 +732,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -567,0 +569,1 @@\n+        @NullRestricted\n@@ -737,0 +740,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -553,0 +555,1 @@\n+        @NullRestricted\n@@ -723,0 +726,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -553,0 +555,1 @@\n+        @NullRestricted\n@@ -723,0 +726,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -577,0 +579,1 @@\n+        @NullRestricted\n@@ -747,0 +750,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -593,0 +595,1 @@\n+        @NullRestricted\n@@ -763,0 +766,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -625,0 +627,1 @@\n+        @NullRestricted\n@@ -795,0 +798,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -569,0 +571,1 @@\n+        @NullRestricted\n@@ -739,0 +742,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -563,0 +565,1 @@\n+        @NullRestricted\n@@ -733,0 +736,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -60,0 +61,1 @@\n+    @NullRestricted\n@@ -846,0 +848,1 @@\n+        @NullRestricted\n@@ -860,0 +863,1 @@\n+        @NullRestricted\n@@ -1054,0 +1058,1 @@\n+        @NullRestricted\n@@ -1070,0 +1075,1 @@\n+        @NullRestricted\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}