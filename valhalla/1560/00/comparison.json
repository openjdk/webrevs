{"files":[{"patch":"@@ -306,0 +306,18 @@\n+\n+static Klass* get_refined_array_klass(Klass* k, frame* fr, RegisterMap* map, ObjectValue* sv, TRAPS) {\n+  \/\/ If it's an array, get the properties\n+  if (k->is_array_klass() && !k->is_typeArray_klass()) {\n+    assert(!k->is_refArray_klass() && !k->is_flatArray_klass(), \"Unexpected refined klass\");\n+    nmethod* nm = fr->cb()->as_nmethod_or_null();\n+    if (nm->is_compiled_by_c2()) {\n+      assert(sv->has_properties(), \"Property information is missing\");\n+      ArrayKlass::ArrayProperties props = static_cast<ArrayKlass::ArrayProperties>(StackValue::create_stack_value(fr, map, sv->properties())->get_jint());\n+      k = ObjArrayKlass::cast(k)->klass_with_properties(props, THREAD);\n+    } else {\n+      \/\/ TODO Graal needs to be fixed. Just go with the default properties for now\n+      k = ObjArrayKlass::cast(k)->klass_with_properties(ArrayKlass::ArrayProperties::DEFAULT, THREAD);\n+    }\n+  }\n+  return k;\n+}\n+\n@@ -307,2 +325,2 @@\n-static void print_objects(JavaThread* deoptee_thread,\n-                          GrowableArray<ScopeValue*>* objects, bool realloc_failures) {\n+static void print_objects(JavaThread* deoptee_thread, frame* deoptee, RegisterMap* map,\n+                          GrowableArray<ScopeValue*>* objects, bool realloc_failures, TRAPS) {\n@@ -324,0 +342,1 @@\n+    k = get_refined_array_klass(k, deoptee, map, sv, THREAD);\n@@ -412,1 +431,1 @@\n-      print_objects(deoptee_thread, objects, realloc_failures);\n+      print_objects(deoptee_thread, &deoptee, &map, objects, realloc_failures, thread);\n@@ -1270,13 +1289,1 @@\n-    \/\/ If it's an array, get the properties\n-    if (k->is_array_klass() && !k->is_typeArray_klass()) {\n-      assert(!k->is_refArray_klass() && !k->is_flatArray_klass(), \"Unexpected refined klass\");\n-      nmethod* nm = fr->cb()->as_nmethod_or_null();\n-      if (nm->is_compiled_by_c2()) {\n-        assert(sv->has_properties(), \"Property information is missing\");\n-        ArrayKlass::ArrayProperties props = static_cast<ArrayKlass::ArrayProperties>(StackValue::create_stack_value(fr, reg_map, sv->properties())->get_jint());\n-        k = ObjArrayKlass::cast(k)->klass_with_properties(props, THREAD);\n-      } else {\n-        \/\/ TODO Graal needs to be fixed. Just go with the default properties for now\n-        k = ObjArrayKlass::cast(k)->klass_with_properties(ArrayKlass::ArrayProperties::DEFAULT, THREAD);\n-      }\n-    }\n+    k = get_refined_array_klass(k, fr, reg_map, sv, THREAD);\n@@ -1689,13 +1696,1 @@\n-    \/\/ If it's an array, get the properties\n-    if (k->is_array_klass() && !k->is_typeArray_klass()) {\n-      assert(!k->is_refArray_klass() && !k->is_flatArray_klass(), \"Unexpected refined klass\");\n-      nmethod* nm = fr->cb()->as_nmethod_or_null();\n-      if (nm->is_compiled_by_c2()) {\n-        assert(sv->has_properties(), \"Property information is missing\");\n-        ArrayKlass::ArrayProperties props = static_cast<ArrayKlass::ArrayProperties>(StackValue::create_stack_value(fr, reg_map, sv->properties())->get_jint());\n-        k = ObjArrayKlass::cast(k)->klass_with_properties(props, THREAD);\n-      } else {\n-        \/\/ TODO Graal needs to be fixed. Just go with the default properties for now\n-        k = ObjArrayKlass::cast(k)->klass_with_properties(ArrayKlass::ArrayProperties::DEFAULT, THREAD);\n-      }\n-    }\n+    k = get_refined_array_klass(k, fr, reg_map, sv, THREAD);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":24,"deletions":29,"binary":false,"changes":53,"status":"modified"}]}