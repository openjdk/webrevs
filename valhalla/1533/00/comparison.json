{"files":[{"patch":"@@ -64,0 +64,1 @@\n+import java.util.HashSet;\n@@ -1450,0 +1451,1 @@\n+        \/\/ Arrays need to use PRIVATE\/PROTECTED from its component modifiers.\n@@ -1454,4 +1456,8 @@\n-        int accessFlags = (location == AccessFlag.Location.CLASS) ?\n-                getClassAccessFlagsRaw() : getModifiers();\n-        if (isArray() && PreviewFeatures.isEnabled()) {\n-            accessFlags |= Modifier.IDENTITY;\n+        int accessFlags = location == AccessFlag.Location.CLASS ? getClassAccessFlagsRaw() : getModifiers();\n+        var reflectionFactory = getReflectionFactory();\n+        var ans = reflectionFactory.parseAccessFlags(accessFlags, location, this);\n+        if (PreviewFeatures.isEnabled() && reflectionFactory.classFileFormatVersion(this) != ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES\n+                && isIdentity()) {\n+            var set = new HashSet<>(ans);\n+            set.add(AccessFlag.IDENTITY);\n+            return Set.copyOf(set);\n@@ -1459,6 +1465,1 @@\n-        var cffv = ClassFileFormatVersion.fromMajor(getClassFileVersion() & 0xffff);\n-        if (cffv.compareTo(ClassFileFormatVersion.latest()) >= 0) {\n-            \/\/ Ignore unspecified (0x0800) access flag for current version\n-            accessFlags &= ~0x0800;\n-        }\n-        return getReflectionFactory().parseAccessFlags(accessFlags, location, this);\n+        return ans;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.reflect.ClassFileFormatVersion;\n@@ -88,1 +89,1 @@\n-        return AccessFlag.maskToAccessFlags(flagsMask(), AccessFlag.Location.INNER_CLASS);\n+        return AccessFlag.maskToAccessFlags(flagsMask(), AccessFlag.Location.INNER_CLASS, ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/InnerClassInfo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -348,1 +348,1 @@\n-               .withFlags((PreviewFeatures.isEnabled() ? ACC_IDENTITY  : 0) | ACC_FINAL | ACC_SYNTHETIC)\n+               .withFlags(ACC_SUPER | ACC_FINAL | ACC_SYNTHETIC)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,2 +172,2 @@\n-          PreviewFeatures.isEnabled() ? Location.EMPTY_SET : Location.SET_CLASS,\n-          List.of()),\n+          Location.EMPTY_SET,\n+          List.of(Map.entry(latest(), Location.SET_CLASS))),\n@@ -185,2 +185,2 @@\n-            PreviewFeatures.isEnabled() ? Location.SET_CLASS_INNER_CLASS : Location.EMPTY_SET,\n-            List.of()),\n+             Location.SET_CLASS_INNER_CLASS,\n+             List.of(Map.entry(latest(), Location.EMPTY_SET))),\n@@ -296,2 +296,2 @@\n-            PreviewFeatures.isEnabled() ? Location.SET_FIELD : Location.EMPTY_SET,\n-                List.of()),\n+                Location.SET_FIELD,\n+                List.of(Map.entry(latest(), Location.EMPTY_SET))),\n@@ -388,1 +388,1 @@\n-        return locations;\n+        return locations(latest());\n@@ -416,8 +416,1 @@\n-        var definition = findDefinition(location);  \/\/ null checks location\n-        int unmatchedMask = mask & (~location.flagsMask());\n-        if (unmatchedMask != 0) {\n-            throw new IllegalArgumentException(\"Unmatched bit position 0x\" +\n-                    Integer.toHexString(unmatchedMask) +\n-                    \" for location \" + location);\n-        }\n-        return new AccessFlagSet(definition, mask);\n+        return maskToAccessFlags(mask, location, latest());\n@@ -439,1 +432,1 @@\n-        var definition = findDefinition(location);  \/\/ null checks location\n+        var definition = findDefinition(location, cffv);  \/\/ null checks location\n@@ -468,1 +461,1 @@\n-        CLASS(ACC_PUBLIC | ACC_FINAL | (PreviewFeatures.isEnabled() ? ACC_IDENTITY : ACC_SUPER) |\n+        CLASS(ACC_PUBLIC | ACC_FINAL | ACC_IDENTITY |\n@@ -490,2 +483,6 @@\n-              ACC_TRANSIENT | ACC_SYNTHETIC | ACC_ENUM | (PreviewFeatures.isEnabled() ? ACC_STRICT : 0),\n-              List.of(Map.entry(RELEASE_4, \/\/ no synthetic, enum\n+              ACC_TRANSIENT | ACC_SYNTHETIC | ACC_ENUM | ACC_STRICT,\n+              List.of(Map.entry(latest(), \/\/ no strict_init\n+                                ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED |\n+                                ACC_STATIC | ACC_FINAL | ACC_VOLATILE |\n+                                ACC_TRANSIENT | ACC_SYNTHETIC | ACC_ENUM),\n+                      Map.entry(RELEASE_4, \/\/ no synthetic, enum\n@@ -532,1 +529,1 @@\n-        INNER_CLASS(ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED | (PreviewFeatures.isEnabled() ? ACC_IDENTITY : ACC_SUPER) |\n+        INNER_CLASS(ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED | ACC_IDENTITY |\n@@ -535,4 +532,8 @@\n-                    List.of(Map.entry(RELEASE_4, \/\/ no synthetic, annotation, enum\n-                            ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED |\n-                            ACC_STATIC | ACC_FINAL | ACC_INTERFACE |\n-                            ACC_ABSTRACT),\n+                    List.of(Map.entry(latest(), \/\/ no identity\n+                                      ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED |\n+                                      ACC_STATIC | ACC_FINAL | ACC_INTERFACE | ACC_ABSTRACT |\n+                                      ACC_SYNTHETIC | ACC_ANNOTATION | ACC_ENUM),\n+                            Map.entry(RELEASE_4, \/\/ no synthetic, annotation, enum\n+                                      ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED |\n+                                      ACC_STATIC | ACC_FINAL | ACC_INTERFACE |\n+                                      ACC_ABSTRACT),\n@@ -655,1 +656,1 @@\n-            ClassFileFormatVersion lastVersion = ClassFileFormatVersion.latest();\n+            ClassFileFormatVersion lastVersion = CURRENT_PREVIEW_FEATURES;\n@@ -689,1 +690,1 @@\n-            return flagsMask;\n+            return flagsMask(latest());\n@@ -717,1 +718,1 @@\n-            return new AccessFlagSet(findDefinition(this), flagsMask());\n+            return flags(latest());\n@@ -733,1 +734,1 @@\n-            return new AccessFlagSet(findDefinition(this), flagsMask(cffv));\n+            return new AccessFlagSet(findDefinition(this, cffv), flagsMask(cffv));\n@@ -748,1 +749,1 @@\n-    private static AccessFlag[] findDefinition(Location location) {\n+    private static AccessFlag[] findDefinition(Location location, ClassFileFormatVersion cffv) {\n@@ -750,2 +751,2 @@\n-            case CLASS -> CLASS_FLAGS;\n-            case FIELD -> FIELD_FLAGS;\n+            case CLASS -> cffv == CURRENT_PREVIEW_FEATURES ? CLASS_PREVIEW_FLAGS : CLASS_FLAGS;\n+            case FIELD -> cffv == CURRENT_PREVIEW_FEATURES ? FIELD_PREVIEW_FLAGS : FIELD_FLAGS;\n@@ -753,1 +754,1 @@\n-            case INNER_CLASS -> INNER_CLASS_FLAGS;\n+            case INNER_CLASS -> cffv == CURRENT_PREVIEW_FEATURES ? INNER_CLASS_PREVIEW_FLAGS : INNER_CLASS_FLAGS;\n@@ -763,4 +764,4 @@\n-            CLASS_FLAGS = createDefinition(PUBLIC, FINAL, (PreviewFeatures.isEnabled() ? IDENTITY : SUPER), INTERFACE, ABSTRACT, SYNTHETIC, ANNOTATION, ENUM, MODULE),\n-              FIELD_FLAGS = PreviewFeatures.isEnabled() ? \/\/ Using Valhalla\n-              createDefinition(PUBLIC, PRIVATE, PROTECTED, STATIC, FINAL, VOLATILE, TRANSIENT, SYNTHETIC, ENUM, STRICT_INIT) :\n-              createDefinition(PUBLIC, PRIVATE, PROTECTED, STATIC, FINAL, VOLATILE, TRANSIENT, SYNTHETIC, ENUM),\n+            CLASS_FLAGS         = createDefinition(PUBLIC, FINAL, SUPER, INTERFACE, ABSTRACT, SYNTHETIC, ANNOTATION, ENUM, MODULE),\n+            CLASS_PREVIEW_FLAGS = createDefinition(PUBLIC, FINAL, IDENTITY, INTERFACE, ABSTRACT, SYNTHETIC, ANNOTATION, ENUM, MODULE), \/\/ identity\n+            FIELD_FLAGS         = createDefinition(PUBLIC, PRIVATE, PROTECTED, STATIC, FINAL, VOLATILE, TRANSIENT, SYNTHETIC, ENUM),\n+            FIELD_PREVIEW_FLAGS = createDefinition(PUBLIC, PRIVATE, PROTECTED, STATIC, FINAL, VOLATILE, TRANSIENT, SYNTHETIC, ENUM, STRICT_INIT), \/\/ strict\n@@ -768,1 +769,2 @@\n-            INNER_CLASS_FLAGS = createDefinition(PUBLIC, PRIVATE, PROTECTED, (PreviewFeatures.isEnabled() ? IDENTITY : SUPER), STATIC, FINAL, INTERFACE, ABSTRACT, SYNTHETIC, ANNOTATION, ENUM),\n+            INNER_CLASS_FLAGS         = createDefinition(PUBLIC, PRIVATE, PROTECTED, STATIC, FINAL, INTERFACE, ABSTRACT, SYNTHETIC, ANNOTATION, ENUM),\n+            INNER_CLASS_PREVIEW_FLAGS = createDefinition(PUBLIC, PRIVATE, PROTECTED, IDENTITY, STATIC, FINAL, INTERFACE, ABSTRACT, SYNTHETIC, ANNOTATION, ENUM),  \/\/ identity\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":39,"deletions":37,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.lang.classfile.ClassFile;\n+\n@@ -374,1 +376,0 @@\n-    ; \/\/ Reduce code churn when appending new constants\n@@ -379,0 +380,4 @@\n+    \/\/\/ The preview features of Valhalla.\n+    \/\/\/ @since 25\n+    CURRENT_PREVIEW_FEATURES(ClassFile.latestMajorVersion());\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ClassFileFormatVersion.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.reflect.ClassFileFormatVersion;\n@@ -57,1 +58,1 @@\n-            flags = AccessFlag.maskToAccessFlags(flagsMask, location);\n+            flags = AccessFlag.maskToAccessFlags(flagsMask, location, ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AccessFlagsImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.lang.reflect.ClassFileFormatVersion;\n@@ -206,1 +207,1 @@\n-            if (!f.locations().contains(location)) {\n+            if (!f.locations().contains(location) && !f.locations(ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES).contains(location)) {\n@@ -215,1 +216,2 @@\n-        return (flag.mask() & flagsMask) == flag.mask() && flag.locations().contains(location);\n+        return (flag.mask() & flagsMask) == flag.mask() && (flag.locations().contains(location)\n+                || flag.locations(ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES).contains(location));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -527,4 +527,1 @@\n-        var cffv = classFileFormatVersion(classFile);\n-        return cffv == null ?\n-                AccessFlag.maskToAccessFlags(mask, location) :\n-                AccessFlag.maskToAccessFlags(mask, location, cffv);\n+        return AccessFlag.maskToAccessFlags(mask, location, classFileFormatVersion(classFile));\n@@ -533,1 +530,3 @@\n-    private final ClassFileFormatVersion classFileFormatVersion(Class<?> cl) {\n+    public final ClassFileFormatVersion classFileFormatVersion(Class<?> cl) {\n+        if (cl.isArray() || cl.isPrimitive())\n+            return ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES;\n@@ -544,1 +543,1 @@\n-            return null; \/\/ preview or old preview, fallback to default handling\n+            return ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3348,1 +3348,2 @@\n-        if (((flags & ACC_IDENTITY) != 0 && !isMigratedValueClass(flags)) || (majorVersion < V67.major && (flags & INTERFACE) == 0)) {\n+        if (((flags & ACC_IDENTITY) != 0 && !isMigratedValueClass(flags))\n+                || (majorVersion <= Version.MAX().major && minorVersion != PREVIEW_MINOR_VERSION && (flags & INTERFACE) == 0)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -842,1 +842,1 @@\n-    void writeInnerClasses() {\n+    void writeInnerClasses(boolean markedPreview) {\n@@ -849,0 +849,5 @@\n+            if ((flags & ACC_IDENTITY) != 0) {\n+                if (!markedPreview) {\n+                    flags &= ~ACC_IDENTITY; \/\/ No SUPER for InnerClasses\n+                }\n+            }\n@@ -1761,0 +1766,1 @@\n+        boolean markedPreview;\n@@ -1763,0 +1769,1 @@\n+            markedPreview = true;\n@@ -1765,0 +1772,1 @@\n+            markedPreview = target.minorVersion == ClassFile.PREVIEW_MINOR_VERSION;\n@@ -1789,1 +1797,1 @@\n-            writeInnerClasses();\n+            writeInnerClasses(markedPreview);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+        classWriter = ClassWriter.instance(context);\n@@ -225,1 +226,2 @@\n-                        for (var flag : maskToAccessFlagsReportUnknown(access_flags, AccessFlag.Location.INNER_CLASS, cffv)) {\n+                        var flagSet = maskToAccessFlagsReportUnknown(access_flags, AccessFlag.Location.INNER_CLASS, cffv);\n+                        for (var flag : flagSet) {\n@@ -250,0 +252,6 @@\n+                        if (options.verbose) {\n+                            indent(1);\n+                            classWriter.writeList(String.format(\"flags: (0x%04x) \", access_flags),\n+                                    flagSet, \"\\n\");\n+                            indent(-1);\n+                        }\n@@ -786,0 +794,1 @@\n+    private final ClassWriter classWriter;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+        if (cffv == null)\n+            cffv = ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES; \/\/ Aggressive fallback\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/BasicWriter.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,2 +126,1 @@\n-            \/\/ preview versions aren't explicitly supported, but latest is good enough for now\n-            return ClassFileFormatVersion.latest();\n+            return ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -857,0 +857,1 @@\n+jdk\/classfile\/AccessFlagsTest.java 8366270 generic-all\n@@ -858,3 +859,1 @@\n-java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java#BasicPreview 8364095 generic-all\n-java\/lang\/reflect\/AccessFlag\/VersionedLocationsTest.java 8364095 generic-all\n-\n+java\/lang\/instrument\/VerifyLocalVariableTableOnRetransformTest.java 8366267 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,4 @@\n- * @enablePreview\n+ * @enablePreview false\n+ * @run main ClassAccessFlagPreviewTest\n+ * @enablePreview true\n+ * @compile -XDforcePreview ClassAccessFlagPreviewTest.java\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagPreviewTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -123,1 +123,9 @@\n-                               ClassFileFormatVersion.RELEASE_22),\n+                               ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES),\n+\n+            new StepFunctionTC(IDENTITY,\n+                               Set.of(),\n+                               ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES),\n+\n+            new StepFunctionTC(STRICT_INIT,\n+                               Set.of(),\n+                               ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES),\n@@ -198,1 +206,1 @@\n-            return accessFlag.locations();\n+            return accessFlag.locations(ClassFileFormatVersion.CURRENT_PREVIEW_FEATURES);\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/VersionedLocationsTest.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=NoPreview\n@@ -28,0 +28,11 @@\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main AnonymousClassFlags\n+ *\/\n+\n+\/*\n+ * @test id=Preview\n+ * @bug 8161013\n+ * @summary Verify that anonymous class binaries have the correct flags set\n+ * @modules java.base\/jdk.internal.misc\n+ * @enablePreview\n+ * @compile -XDforcePreview AnonymousClassFlags.java\n@@ -39,0 +50,2 @@\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -44,0 +57,8 @@\n+    AnonymousClassFlags() {\n+        System.currentTimeMillis();\n+        super(); \/\/ Triggers force preview\n+    }\n+\n+    \/\/ ACC_SUPER does not exist in InnerClasses before Value Objects\n+    private static final int EXPECTED_ACCESS_FLAGS = PreviewFeatures.isEnabled() ? ClassFile.ACC_IDENTITY : 0;\n+\n@@ -50,1 +71,1 @@\n-        { anonClasses.put(getClass().getName(), ClassFile.ACC_IDENTITY); }\n+        { anonClasses.put(getClass().getName(), EXPECTED_ACCESS_FLAGS); }\n@@ -55,1 +76,1 @@\n-            { anonClasses.put(getClass().getName(), ClassFile.ACC_IDENTITY); }\n+            { anonClasses.put(getClass().getName(), EXPECTED_ACCESS_FLAGS); }\n@@ -63,1 +84,1 @@\n-            { anonClasses.put(getClass().getName(), ClassFile.ACC_IDENTITY); }\n+            { anonClasses.put(getClass().getName(), EXPECTED_ACCESS_FLAGS); }\n@@ -68,1 +89,1 @@\n-        { anonClasses.put(getClass().getName(), ClassFile.ACC_IDENTITY); }\n+        { anonClasses.put(getClass().getName(), EXPECTED_ACCESS_FLAGS); }\n@@ -73,1 +94,1 @@\n-            { anonClasses.put(getClass().getName(), ClassFile.ACC_IDENTITY); }\n+            { anonClasses.put(getClass().getName(), EXPECTED_ACCESS_FLAGS); }\n@@ -81,1 +102,1 @@\n-            { anonClasses.put(getClass().getName(), ClassFile.ACC_IDENTITY); }\n+            { anonClasses.put(getClass().getName(), EXPECTED_ACCESS_FLAGS); }\n@@ -107,1 +128,1 @@\n-        int classExpected = (expected & mask);\n+        int classExpected = (expected & mask) | ClassFile.ACC_SUPER;\n","filename":"test\/langtools\/tools\/javac\/AnonymousClass\/AnonymousClassFlags.java","additions":29,"deletions":8,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerAnnotationTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerClassTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerEnumTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerInterfaceTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesHierarchyTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n@@ -82,1 +80,1 @@\n-        class2Flags.put(\"1\", new HashSet<>(Arrays.asList(\"ACC_IDENTITY\")));\n+        class2Flags.put(\"1\", Set.of());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInAnonymousClassTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerAnnotationTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerClassTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerEnumTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerInterfaceTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n@@ -155,1 +153,0 @@\n-        set.add(\"ACC_IDENTITY\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInLocalClassTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesIndexTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -35,1 +34,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -302,1 +302,1 @@\n-                class2Flags.put(\"1\", new HashSet<>(Arrays.asList(\"ACC_STATIC\", \"ACC_IDENTITY\", \"ACC_SYNTHETIC\")));\n+                class2Flags.put(\"1\", new HashSet<>(Arrays.asList(\"ACC_STATIC\", \"ACC_SYNTHETIC\")));\n@@ -329,1 +329,2 @@\n-        return Collections.emptyList();\n+        \/\/ Use a release before value classes for now.\n+        return List.of(\"--release\", \"25\");\n@@ -381,1 +382,0 @@\n-                flags.add(\"ACC_IDENTITY\");\n@@ -419,1 +419,0 @@\n-                flags.add(\"ACC_IDENTITY\");\n@@ -425,1 +424,0 @@\n-                flags.add(\"ACC_IDENTITY\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTestBase.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerAnnotationTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerEnumTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerInterfaceTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumsInInnerClassTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerAnnotationTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerClassTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n@@ -33,1 +32,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerEnumTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerInterfaceTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/NoInnerClassesTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm CreateSymbolsTest\n+ * @run junit\/othervm CreateSymbolsTest\n@@ -70,0 +70,2 @@\n+\n+import org.junit.jupiter.api.Test;\n@@ -89,17 +91,0 @@\n-    public static void main(String... args) throws Exception {\n-        new CreateSymbolsTestImpl().doTest();\n-    }\n-\n-    void doTest() throws Exception {\n-        boolean testRun = false;\n-        for (Method m : CreateSymbolsTestImpl.class.getDeclaredMethods()) {\n-            if (m.isAnnotationPresent(Test.class)) {\n-                m.invoke(this);\n-                testRun = true;\n-            }\n-        }\n-        if (!testRun) {\n-            throw new IllegalStateException(\"No tests found.\");\n-        }\n-    }\n-\n@@ -1355,4 +1340,0 @@\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @interface Test {\n-    }\n","filename":"test\/langtools\/tools\/javac\/platform\/createsymbols\/CreateSymbolsTestImpl.java","additions":3,"deletions":22,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8364095\n+ * @summary InnerClasses generation against an old class with and without preview;\n+ *          no SUPER pollution and no missing IDENTITY\n+ * @library \/tools\/lib \/test\/lib\n+ * @run junit InnerClassesIdentityFlagTest\n+ *\/\n+\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.nio.file.Path;\n+\n+import jdk.test.lib.compiler.CompilerUtils;\n+import org.junit.jupiter.api.Test;\n+import toolbox.ToolBox;\n+\n+import static java.lang.classfile.ClassFile.ACC_IDENTITY;\n+import static java.lang.classfile.ClassFile.ACC_SUPER;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+final class InnerClassesIdentityFlagTest {\n+    \/\/\/ Last release feature number with no value classes (preview exempt)\n+    private static final String LAST_NON_VALUE_FEATURE = \"25\";\n+\n+    @Test\n+    void test() throws Exception {\n+        ToolBox toolBox = new ToolBox();\n+        var libSourceDir = Path.of(\"libsrc\");\n+        var libDestinationDir = Path.of(\"libdest\");\n+        toolBox.writeJavaFiles(libSourceDir, \"\"\"\n+                public class One {\n+                    public class Inner {}\n+                }\n+                \"\"\");\n+        CompilerUtils.compile(libSourceDir, libDestinationDir, \"--release\", LAST_NON_VALUE_FEATURE);\n+\n+        var userSourceDir = Path.of(\"usersrc\");\n+        var userRegularDestinationDir = Path.of(\"userdest\");\n+        var userPreviewDestinationDir = Path.of(\"userdestPreview\");\n+        toolBox.writeJavaFiles(userSourceDir, \"\"\"\n+                class Observer {\n+                    Observer() {\n+                        new One().new Inner();\n+                        super(); \/\/ triggers -XDforcePreview\n+                    }\n+                }\n+                \"\"\");\n+        CompilerUtils.compile(userSourceDir, userRegularDestinationDir, \"--release\", LAST_NON_VALUE_FEATURE,\n+                \"-cp\", libDestinationDir.toString());\n+        CompilerUtils.compile(userSourceDir, userPreviewDestinationDir, \"--release\",\n+                Integer.toString(Runtime.version().feature()), \"--enable-preview\", \"-XDforcePreview\",\n+                \"-cp\", libDestinationDir.toString());\n+\n+        var regularClass = ClassFile.of().parse(userRegularDestinationDir.resolve(\"Observer.class\"));\n+        var previewClass = ClassFile.of().parse(userPreviewDestinationDir.resolve(\"Observer.class\"));\n+        assertEquals(0, regularClass.minorVersion());\n+        assertEquals(ClassFile.PREVIEW_MINOR_VERSION, previewClass.minorVersion());\n+        var regularRelation = regularClass.findAttribute(Attributes.innerClasses()).orElseThrow().classes().getFirst();\n+        var previewRelation = previewClass.findAttribute(Attributes.innerClasses()).orElseThrow().classes().getFirst();\n+        assertEquals(\"One$Inner\", regularRelation.innerClass().asInternalName());\n+        assertEquals(\"One$Inner\", previewRelation.innerClass().asInternalName());\n+        int regularFlags = regularRelation.flagsMask();\n+        int previewFlags = previewRelation.flagsMask();\n+        assertEquals(0, regularFlags & ACC_SUPER, () -> \"ACC_SUPER pollution: \" + Integer.toHexString(regularFlags));\n+        assertEquals(ACC_IDENTITY, previewFlags & ACC_IDENTITY, () -> \"Missing ACC_IDENTITY: \" + Integer.toHexString(previewFlags));\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/classfile\/InnerClassesIdentityFlagTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=NoPreview\n@@ -30,1 +30,11 @@\n- * @run main\/othervm --enable-preview T4975569\n+ * @run main T4975569\n+ *\/\n+\n+\/*\n+ * @test id=Preview\n+ * @bug 4975569 6622215 8034861\n+ * @summary javap doesn't print new flag bits - Preview\n+ * @modules jdk.jdeps\/com.sun.tools.javap\n+ * @modules java.base\/jdk.internal.misc\n+ * @enablePreview\n+ * @compile -XDforcePreview T4975569.java\n@@ -49,0 +59,5 @@\n+    T4975569() {\n+        System.currentTimeMillis();\n+        super(); \/\/ Trigger forced preview\n+    }\n+\n","filename":"test\/langtools\/tools\/javap\/T4975569.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"}]}