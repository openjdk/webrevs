{"files":[{"patch":"@@ -164,1 +164,1 @@\n-  _is_init = read_from(stream);\n+  _null_marker = read_from(stream);\n@@ -183,1 +183,1 @@\n-    if (_is_init == nullptr) {\n+    if (_null_marker == nullptr) {\n@@ -185,1 +185,1 @@\n-      _is_init = new MarkerValue();\n+      _null_marker = new MarkerValue();\n@@ -187,1 +187,1 @@\n-    _is_init->write_on(stream);\n+    _null_marker->write_on(stream);\n","filename":"src\/hotspot\/share\/code\/debugInfo.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-  ScopeValue*                _is_init;\n+  ScopeValue*                _null_marker;\n@@ -144,1 +144,1 @@\n-  ObjectValue(int id, ScopeValue* klass = nullptr, bool is_scalar_replaced = true, ScopeValue* is_init = nullptr)\n+  ObjectValue(int id, ScopeValue* klass = nullptr, bool is_scalar_replaced = true, ScopeValue* null_marker = nullptr)\n@@ -147,1 +147,1 @@\n-     , _is_init((is_init == nullptr) ? new MarkerValue() : is_init)\n+     , _null_marker((null_marker == nullptr) ? new MarkerValue() : null_marker)\n@@ -160,1 +160,1 @@\n-  virtual ScopeValue*         is_init() const             { return _is_init; }\n+  virtual ScopeValue*         null_marker() const         { return _null_marker; }\n@@ -168,1 +168,1 @@\n-  bool                        maybe_null() const          { return !_is_init->is_marker(); }\n+  bool                        maybe_null() const          { return !_null_marker->is_marker(); }\n","filename":"src\/hotspot\/share\/code\/debugInfo.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -801,1 +801,1 @@\n-          kit.null_check_common(vt->get_is_init(), T_INT, false, &null_ctl);\n+          kit.null_check_common(vt->get_null_marker(), T_INT, false, &null_ctl);\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-      vt->as_InlineType()->set_is_init(*phase);\n+      vt->as_InlineType()->set_null_marker(*phase);\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    set_req_X(1, in(1)->as_InlineType()->get_is_init(), phase);\n+    set_req_X(1, in(1)->as_InlineType()->get_null_marker(), phase);\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1299,1 +1299,1 @@\n-    null_check_common(vtptr->get_is_init(), T_INT, assert_null, null_control, speculative, true);\n+    null_check_common(vtptr->get_null_marker(), T_INT, assert_null, null_control, speculative, true);\n@@ -1497,1 +1497,1 @@\n-    vt->as_InlineType()->set_is_init(_gvn);\n+    vt->as_InlineType()->set_null_marker(_gvn);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-InlineTypeNode* InlineTypeNode::clone_with_phis(PhaseGVN* gvn, Node* region, SafePointNode* map, bool is_init) {\n+InlineTypeNode* InlineTypeNode::clone_with_phis(PhaseGVN* gvn, Node* region, SafePointNode* map, bool is_non_null) {\n@@ -64,4 +64,4 @@\n-  \/\/ Create a PhiNode for merging the is_init values\n-  Node* is_init_node;\n-  if (is_init) {\n-    is_init_node = gvn->intcon(1);\n+  \/\/ Create a PhiNode for merging the null_marker values\n+  Node* null_marker_node;\n+  if (is_non_null) {\n+    null_marker_node = gvn->intcon(1);\n@@ -70,3 +70,3 @@\n-    is_init_node = PhiNode::make(region, vt->get_is_init(), t);\n-    gvn->set_type(is_init_node, t);\n-    gvn->record_for_igvn(is_init_node);\n+    null_marker_node = PhiNode::make(region, vt->get_null_marker(), t);\n+    gvn->set_type(null_marker_node, t);\n+    gvn->record_for_igvn(null_marker_node);\n@@ -74,1 +74,1 @@\n-  vt->set_req(NullMarker, is_init_node);\n+  vt->set_req(NullMarker, null_marker_node);\n@@ -138,5 +138,5 @@\n-  \/\/ Merge is_init inputs\n-  Node* is_init = get_is_init();\n-  if (is_init->is_Phi()) {\n-    phi = is_init->as_Phi();\n-    phi->set_req(pnum, other->get_is_init());\n+  \/\/ Merge null_marker inputs\n+  Node* null_marker = get_null_marker();\n+  if (null_marker->is_Phi()) {\n+    phi = null_marker->as_Phi();\n+    phi->set_req(pnum, other->get_null_marker());\n@@ -147,1 +147,1 @@\n-    assert(is_init->find_int_con(0) == 1, \"only with a non null inline type\");\n+    assert(null_marker->find_int_con(0) == 1, \"only with a non null inline type\");\n@@ -182,1 +182,1 @@\n-  phi = get_is_init()->as_Phi();\n+  phi = get_null_marker()->as_Phi();\n@@ -218,1 +218,1 @@\n-    return vt->get_is_init();\n+    return vt->get_null_marker();\n@@ -289,1 +289,1 @@\n-        sfpt->add_req(vt->get_is_init());\n+        sfpt->add_req(vt->get_null_marker());\n@@ -312,1 +312,1 @@\n-  sfpt->add_req(get_is_init());\n+  sfpt->add_req(get_null_marker());\n@@ -594,1 +594,1 @@\n-    value = get_is_init();\n+    value = get_null_marker();\n@@ -652,1 +652,1 @@\n-      kit->access_store_at(base, nm_ptr, nm_ptr_type, get_is_init(), TypeInt::BOOL, T_BOOLEAN, decorators);\n+      kit->access_store_at(base, nm_ptr, nm_ptr_type, get_null_marker(), TypeInt::BOOL, T_BOOLEAN, decorators);\n@@ -824,1 +824,1 @@\n-  kit->null_check_common(get_is_init(), T_INT, false, &null_ctl);\n+  kit->null_check_common(get_null_marker(), T_INT, false, &null_ctl);\n@@ -918,2 +918,2 @@\n-  \/\/ Replace is_init projection\n-  replace_proj(C, call, proj_idx, get_is_init(), T_BOOLEAN);\n+  \/\/ Replace null_marker projection\n+  replace_proj(C, call, proj_idx, get_null_marker(), T_BOOLEAN);\n@@ -931,2 +931,2 @@\n-        \/\/ Replace is_init projection for nullable field\n-        replace_proj(C, call, proj_idx, vt->get_is_init(), T_BOOLEAN);\n+        \/\/ Replace null_marker projection for nullable field\n+        replace_proj(C, call, proj_idx, vt->get_null_marker(), T_BOOLEAN);\n@@ -994,1 +994,1 @@\n-    set_is_init(*phase);\n+    set_null_marker(*phase);\n@@ -1051,1 +1051,1 @@\n-  vt->set_is_init(gvn);\n+  vt->set_null_marker(gvn);\n@@ -1065,1 +1065,1 @@\n-  vt->set_is_init(gvn);\n+  vt->set_null_marker(gvn);\n@@ -1090,1 +1090,1 @@\n-  const TypeInt* tinit = gvn->type(get_is_init())->isa_int();\n+  const TypeInt* tinit = gvn->type(get_null_marker())->isa_int();\n@@ -1105,1 +1105,1 @@\n-      tinit = gvn->type(value->as_InlineType()->get_is_init())->isa_int();\n+      tinit = gvn->type(value->as_InlineType()->get_null_marker())->isa_int();\n@@ -1147,1 +1147,1 @@\n-    vt->set_is_init(gvn);\n+    vt->set_null_marker(gvn);\n@@ -1166,1 +1166,1 @@\n-    vt->set_is_init(gvn);\n+    vt->set_null_marker(gvn);\n@@ -1413,1 +1413,1 @@\n-    n->init_req(base_input++, get_is_init());\n+    n->init_req(base_input++, get_null_marker());\n@@ -1422,1 +1422,1 @@\n-        n->init_req(base_input++, arg->as_InlineType()->get_is_init());\n+        n->init_req(base_input++, arg->as_InlineType()->get_null_marker());\n@@ -1446,1 +1446,1 @@\n-  Node* is_init = nullptr;\n+  Node* null_marker = nullptr;\n@@ -1452,1 +1452,1 @@\n-        is_init = gvn.transform(new ParmNode(multi->as_Start(), base_input));\n+        null_marker = gvn.transform(new ParmNode(multi->as_Start(), base_input));\n@@ -1454,1 +1454,1 @@\n-        is_init = multi->as_Call()->in(base_input);\n+        null_marker = multi->as_Call()->in(base_input);\n@@ -1456,1 +1456,1 @@\n-      set_req(NullMarker, is_init);\n+      set_req(NullMarker, null_marker);\n@@ -1461,1 +1461,1 @@\n-    if (is_init == nullptr) {\n+    if (null_marker == nullptr) {\n@@ -1463,3 +1463,3 @@\n-      is_init = new Node(1);\n-      is_init->init_req(0, kit->control()); \/\/ Add an input to prevent dummy from being dead\n-      gvn.set_type_bottom(is_init);\n+      null_marker = new Node(1);\n+      null_marker->init_req(0, kit->control()); \/\/ Add an input to prevent dummy from being dead\n+      gvn.set_type_bottom(null_marker);\n@@ -1468,1 +1468,1 @@\n-    kit->null_check_common(is_init, T_INT, false, &null_ctrl);\n+    kit->null_check_common(null_marker, T_INT, false, &null_ctrl);\n@@ -1486,1 +1486,1 @@\n-        Node* is_init = nullptr;\n+        Node* null_marker = nullptr;\n@@ -1488,1 +1488,1 @@\n-          is_init = gvn.transform(new ParmNode(multi->as_Start(), base_input));\n+          null_marker = gvn.transform(new ParmNode(multi->as_Start(), base_input));\n@@ -1490,1 +1490,1 @@\n-          is_init = multi->as_Call()->in(base_input);\n+          null_marker = multi->as_Call()->in(base_input);\n@@ -1492,1 +1492,1 @@\n-          is_init = gvn.transform(new ProjNode(multi->as_Call(), base_input));\n+          null_marker = gvn.transform(new ProjNode(multi->as_Call(), base_input));\n@@ -1494,1 +1494,1 @@\n-        vt->set_req(NullMarker, is_init);\n+        vt->set_req(NullMarker, null_marker);\n@@ -1544,3 +1544,3 @@\n-    Node* cmp = is_init->raw_out(0);\n-    is_init = gvn.transform(new ProjNode(multi->as_Call(), base_input));\n-    set_req(NullMarker, is_init);\n+    Node* cmp = null_marker->raw_out(0);\n+    null_marker = gvn.transform(new ProjNode(multi->as_Call(), base_input));\n+    set_req(NullMarker, null_marker);\n@@ -1548,1 +1548,1 @@\n-    cmp->set_req(1, is_init);\n+    cmp->set_req(1, null_marker);\n@@ -1600,1 +1600,1 @@\n-  vt->set_is_init(gvn, gvn.intcon(0));\n+  vt->set_null_marker(gvn, gvn.intcon(0));\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":54,"deletions":54,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-  InlineTypeNode* clone_with_phis(PhaseGVN* gvn, Node* region, SafePointNode* map = nullptr, bool is_init = false);\n+  InlineTypeNode* clone_with_phis(PhaseGVN* gvn, Node* region, SafePointNode* map = nullptr, bool is_non_null = false);\n@@ -111,3 +111,3 @@\n-  Node* get_is_init() const { return in(NullMarker); }\n-  void  set_is_init(PhaseGVN& gvn, Node* init) { set_req_X(NullMarker, init, &gvn); }\n-  void  set_is_init(PhaseGVN& gvn) { set_is_init(gvn, gvn.intcon(1)); }\n+  Node* get_null_marker() const { return in(NullMarker); }\n+  void  set_null_marker(PhaseGVN& gvn, Node* init) { set_req_X(NullMarker, init, &gvn); }\n+  void  set_null_marker(PhaseGVN& gvn) { set_null_marker(gvn, gvn.intcon(1)); }\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -612,1 +612,1 @@\n-    vt->set_is_init(_igvn);\n+    vt->set_null_marker(_igvn);\n@@ -618,1 +618,1 @@\n-      vt->set_is_init(_igvn, nm_value);\n+      vt->set_null_marker(_igvn, nm_value);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -804,1 +804,1 @@\n-      \/\/ Nullable, scalarized inline types have an is_init input\n+      \/\/ Nullable, scalarized inline types have a null_marker input\n@@ -806,1 +806,1 @@\n-      ScopeValue* is_init = nullptr;\n+      ScopeValue* null_marker = nullptr;\n@@ -808,6 +808,6 @@\n-        Node* init_node = sfpt->in(first_ind++);\n-        assert(init_node != nullptr, \"is_init node not found\");\n-        if (!init_node->is_top()) {\n-          const TypeInt* init_type = init_node->bottom_type()->is_int();\n-          if (init_node->is_Con()) {\n-            is_init = new ConstantIntValue(init_type->get_con());\n+        Node* null_marker_node = sfpt->in(first_ind++);\n+        assert(null_marker_node != nullptr, \"null_marker node not found\");\n+        if (!null_marker_node->is_top()) {\n+          const TypeInt* null_marker_type = null_marker_node->bottom_type()->is_int();\n+          if (null_marker_node->is_Con()) {\n+            null_marker = new ConstantIntValue(null_marker_type->get_con());\n@@ -815,2 +815,2 @@\n-            OptoReg::Name init_reg = C->regalloc()->get_reg_first(init_node);\n-            is_init = new_loc_value(C->regalloc(), init_reg, Location::normal);\n+            OptoReg::Name null_marker_reg = C->regalloc()->get_reg_first(null_marker_node);\n+            null_marker = new_loc_value(C->regalloc(), null_marker_reg, Location::normal);\n@@ -821,1 +821,1 @@\n-                           new ConstantOopWriteValue(cik->java_mirror()->constant_encoding()), true, is_init);\n+                           new ConstantOopWriteValue(cik->java_mirror()->constant_encoding()), true, null_marker);\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -962,1 +962,1 @@\n-        Node* conv   = kit.gvn().transform(new ConvI2LNode(vt->get_is_init()));\n+        Node* conv   = kit.gvn().transform(new ConvI2LNode(vt->get_null_marker()));\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2119,1 +2119,1 @@\n-        (right->is_InlineType() && _gvn.type(right->as_InlineType()->get_is_init())->is_zero_type())) {\n+        (right->is_InlineType() && _gvn.type(right->as_InlineType()->get_null_marker())->is_zero_type())) {\n@@ -2122,1 +2122,1 @@\n-      Node* cmp = CmpI(left->as_InlineType()->get_is_init(), intcon(0));\n+      Node* cmp = CmpI(left->as_InlineType()->get_null_marker(), intcon(0));\n@@ -3445,1 +3445,1 @@\n-      c = _gvn.transform(new CmpINode(b->as_InlineType()->get_is_init(), zerocon(T_INT)));\n+      c = _gvn.transform(new CmpINode(b->as_InlineType()->get_null_marker(), zerocon(T_INT)));\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1191,1 +1191,1 @@\n-    return new CmpINode(in(1)->as_InlineType()->get_is_init(), phase->intcon(0));\n+    return new CmpINode(in(1)->as_InlineType()->get_null_marker(), phase->intcon(0));\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1258,1 +1258,1 @@\n-    \/\/ Check if the object may be null and has an additional is_init input that needs\n+    \/\/ Check if the object may be null and has an additional null_marker input that needs\n@@ -1262,2 +1262,2 @@\n-      jint is_init = StackValue::create_stack_value(fr, reg_map, sv->is_init())->get_jint();\n-      if (is_init == 0) {\n+      jint null_marker = StackValue::create_stack_value(fr, reg_map, sv->null_marker())->get_jint();\n+      if (null_marker == 0) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -253,2 +253,2 @@\n-      jint is_init = StackValue::create_stack_value(fr, reg_map, ov->is_init())->get_jint();\n-      scalar_replaced &= (is_init != 0);\n+      jint null_marker = StackValue::create_stack_value(fr, reg_map, ov->null_marker())->get_jint();\n+      scalar_replaced &= (null_marker != 0);\n","filename":"src\/hotspot\/share\/runtime\/stackValue.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}