{"files":[{"patch":"@@ -973,0 +973,38 @@\n+static void load_classes_from_loadable_descriptors_attribute(InstanceKlass *ik, TRAPS) {\n+  ResourceMark rm(THREAD);\n+  if (ik->loadable_descriptors() != nullptr && PreloadClasses) {\n+    HandleMark hm(THREAD);\n+    for (int i = 0; i < ik->loadable_descriptors()->length(); i++) {\n+      Symbol* sig = ik->constants()->symbol_at(ik->loadable_descriptors()->at(i));\n+      if (!Signature::has_envelope(sig)) continue;\n+      TempNewSymbol class_name = Signature::strip_envelope(sig);\n+      if (class_name == ik->name()) continue;\n+      log_info(class, preload)(\"Preloading of class %s during linking of class %s \"\n+                               \"because of the class is listed in the LoadableDescriptors attribute\",\n+                               sig->as_C_string(), ik->name()->as_C_string());\n+      oop loader = ik->class_loader();\n+      Klass* klass = SystemDictionary::resolve_or_null(class_name,\n+                                                        Handle(THREAD, loader), THREAD);\n+      if (HAS_PENDING_EXCEPTION) {\n+        CLEAR_PENDING_EXCEPTION;\n+      }\n+      if (klass != nullptr) {\n+        log_info(class, preload)(\"Preloading of class %s during linking of class %s \"\n+                                 \"(cause: LoadableDescriptors attribute) succeeded\",\n+                                 class_name->as_C_string(), ik->name()->as_C_string());\n+        if (!klass->is_inline_klass()) {\n+          \/\/ Non value class are allowed by the current spec, but it could be an indication\n+          \/\/ of an issue so let's log a warning\n+          log_warning(class, preload)(\"Preloading of class %s during linking of class %s \"\n+                                      \"(cause: LoadableDescriptors attribute) but loaded class is not a value class\",\n+                                      class_name->as_C_string(), ik->name()->as_C_string());\n+        }\n+      } else {\n+        log_warning(class, preload)(\"Preloading of class %s during linking of class %s \"\n+                                    \"(cause: LoadableDescriptors attribute) failed\",\n+                                    class_name->as_C_string(), ik->name()->as_C_string());\n+      }\n+    }\n+  }\n+}\n+\n@@ -1044,23 +1082,0 @@\n-\n-  \/\/ If a class declares a method that uses an inline class as an argument\n-  \/\/ type or return inline type, this inline class must be loaded during the\n-  \/\/ linking of this class because size and properties of the inline class\n-  \/\/ must be known in order to be able to perform inline type optimizations.\n-  \/\/ The implementation below is an approximation of this rule, the code\n-  \/\/ iterates over all methods of the current class (including overridden\n-  \/\/ methods), not only the methods declared by this class. This\n-  \/\/ approximation makes the code simpler, and doesn't change the semantic\n-  \/\/ because classes declaring methods overridden by the current class are\n-  \/\/ linked (and have performed their own pre-loading) before the linking\n-  \/\/ of the current class.\n-\n-\n-  \/\/ Note:\n-  \/\/ Inline class types are loaded during\n-  \/\/ the loading phase (see ClassFileParser::post_process_parsed_stream()).\n-  \/\/ Inline class types used as element types for array creation\n-  \/\/ are not pre-loaded. Their loading is triggered by either anewarray\n-  \/\/ or multianewarray bytecodes.\n-\n-  \/\/ Could it be possible to do the following processing only if the\n-  \/\/ class uses inline types?\n@@ -1068,49 +1083,0 @@\n-    ResourceMark rm(THREAD);\n-    for (AllFieldStream fs(this); !fs.done(); fs.next()) {\n-      if (fs.is_null_free_inline_type() && fs.access_flags().is_static()) {\n-        assert(fs.access_flags().is_strict(), \"null-free fields must be strict\");\n-        Symbol* sig = fs.signature();\n-        TempNewSymbol s = Signature::strip_envelope(sig);\n-        if (s != name()) {\n-          log_info(class, preload)(\"Preloading of class %s during linking of class %s. Cause: a null-free static field is declared with this type\", s->as_C_string(), name()->as_C_string());\n-          Klass* klass = SystemDictionary::resolve_or_fail(s,\n-                                                          Handle(THREAD, class_loader()), true,\n-                                                          CHECK_false);\n-          if (HAS_PENDING_EXCEPTION) {\n-            log_warning(class, preload)(\"Preloading of class %s during linking of class %s (cause: null-free static field) failed: %s\",\n-                                      s->as_C_string(), name()->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n-            return false; \/\/ Exception is still pending\n-          }\n-          log_info(class, preload)(\"Preloading of class %s during linking of class %s (cause: null-free static field) succeeded\",\n-                                   s->as_C_string(), name()->as_C_string());\n-          assert(klass != nullptr, \"Sanity check\");\n-          if (klass->is_abstract()) {\n-            THROW_MSG_(vmSymbols::java_lang_IncompatibleClassChangeError(),\n-                      err_msg(\"Class %s expects class %s to be concrete value class, but it is an abstract class\",\n-                      name()->as_C_string(),\n-                      InstanceKlass::cast(klass)->external_name()), false);\n-          }\n-          if (!klass->is_inline_klass()) {\n-            THROW_MSG_(vmSymbols::java_lang_IncompatibleClassChangeError(),\n-                       err_msg(\"class %s expects class %s to be a value class but it is an identity class\",\n-                       name()->as_C_string(), klass->external_name()), false);\n-          }\n-          InlineKlass* vk = InlineKlass::cast(klass);\n-          \/\/ the inline_type_field_klasses_array might have been loaded with CDS, so update only if not already set and check consistency\n-          InlineLayoutInfo* li = inline_layout_info_adr(fs.index());\n-          if (li->klass() == nullptr) {\n-            li->set_klass(InlineKlass::cast(vk));\n-            li->set_kind(LayoutKind::REFERENCE);\n-          }\n-          assert(get_inline_type_field_klass(fs.index()) == vk, \"Must match\");\n-        } else {\n-          InlineLayoutInfo* li = inline_layout_info_adr(fs.index());\n-          if (li->klass() == nullptr) {\n-            li->set_klass(InlineKlass::cast(this));\n-            li->set_kind(LayoutKind::REFERENCE);\n-          }\n-          assert(get_inline_type_field_klass(fs.index()) == this, \"Must match\");\n-        }\n-      }\n-    }\n-\n@@ -1118,25 +1084,3 @@\n-    if (loadable_descriptors() != nullptr && PreloadClasses) {\n-      HandleMark hm(THREAD);\n-      for (int i = 0; i < loadable_descriptors()->length(); i++) {\n-        Symbol* sig = constants()->symbol_at(loadable_descriptors()->at(i));\n-        if (!Signature::has_envelope(sig)) continue;\n-        TempNewSymbol class_name = Signature::strip_envelope(sig);\n-        if (class_name == name()) continue;\n-        log_info(class, preload)(\"Preloading of class %s during linking of class %s because of the class is listed in the LoadableDescriptors attribute\", sig->as_C_string(), name()->as_C_string());\n-        oop loader = class_loader();\n-        Klass* klass = SystemDictionary::resolve_or_null(class_name,\n-                                                         Handle(THREAD, loader), THREAD);\n-        if (HAS_PENDING_EXCEPTION) {\n-          CLEAR_PENDING_EXCEPTION;\n-        }\n-        if (klass != nullptr) {\n-          log_info(class, preload)(\"Preloading of class %s during linking of class %s (cause: LoadableDescriptors attribute) succeeded\", class_name->as_C_string(), name()->as_C_string());\n-          if (!klass->is_inline_klass()) {\n-            \/\/ Non value class are allowed by the current spec, but it could be an indication of an issue so let's log a warning\n-            log_warning(class, preload)(\"Preloading of class %s during linking of class %s (cause: LoadableDescriptors attribute) but loaded class is not a value class\", class_name->as_C_string(), name()->as_C_string());\n-          }\n-        } else {\n-          log_warning(class, preload)(\"Preloading of class %s during linking of class %s (cause: LoadableDescriptors attribute) failed\", class_name->as_C_string(), name()->as_C_string());\n-        }\n-      }\n-    }\n+    \/\/ so inline classes can be scalarized in the calling conventions computed below\n+    load_classes_from_loadable_descriptors_attribute(this, THREAD);\n+    assert(!HAS_PENDING_EXCEPTION, \"Shouldn't have pending exceptions from call above\");\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":41,"deletions":97,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -299,153 +299,0 @@\n-    static value class Class10a {\n-        @Strict\n-        @NullRestricted\n-        Class10b vb = new Class10b();\n-    }\n-\n-    static value class Class10b { }\n-\n-    \/\/ void test_10() throws Exception {\n-    \/\/     OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class10a\");\n-    \/\/     out.shouldHaveExitValue(1);\n-    \/\/     out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class10b during loading of class PreloadCircularityTest$Class10a. Cause: a null-free non-static field is declared with this type\");\n-    \/\/     out.shouldContain(\"java.lang.IncompatibleClassChangeError: class PreloadCircularityTest$Class10b is not implicitly constructible and it is used in a null restricted non-static field (not supported)\");\n-    \/\/ }\n-\n-    \/\/ Testing preloading due to static fields\n-\n-    static value class Class50a {\n-        @Strict\n-        @NullRestricted\n-        static Class50a sa = new Class50a();\n-    }\n-\n-    void test_50() throws Exception {\n-        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class50a\");\n-        out.shouldHaveExitValue(0);\n-        out.shouldNotContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class50a\");\n-    }\n-\n-    static value class Class51a {\n-        @Strict\n-        @NullRestricted\n-        static Class51b sb = new Class51b();\n-\n-        @Strict\n-        @NullRestricted\n-        static Class51c sc = new Class51c();\n-    }\n-\n-    static value class Class51b {\n-        @Strict\n-        @NullRestricted\n-        static Class51a sa = new Class51a();\n-    }\n-\n-    static value class Class51c {\n-        @Strict\n-        @NullRestricted\n-        Class51a sa = new Class51a();\n-    }\n-\n-    void test_51() throws Exception {\n-        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class51a\");\n-        out.shouldHaveExitValue(0);\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51b during linking of class PreloadCircularityTest$Class51a. Cause: a null-free static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51b during linking of class PreloadCircularityTest$Class51a (cause: null-free static field) succeeded\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51c during linking of class PreloadCircularityTest$Class51a. Cause: a null-free static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51a during loading of class PreloadCircularityTest$Class51c. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51a during loading of class PreloadCircularityTest$Class51c (cause: null-free non-static field) succeeded\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51c during linking of class PreloadCircularityTest$Class51a (cause: null-free static field) succeeded\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51a during linking of class PreloadCircularityTest$Class51b. Cause: a null-free static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class51a during linking of class PreloadCircularityTest$Class51b (cause: null-free static field) succeeded\");\n-    }\n-\n-    static value class Class52a {\n-        @Strict\n-        @NullRestricted\n-        static Class52b vb = new Class52b();\n-    }\n-\n-    static value class Class52b {\n-        @Strict\n-        @NullRestricted\n-        Class52c vc = new Class52c();\n-    }\n-\n-    static value class Class52c {\n-        @Strict\n-        @NullRestricted\n-        Class52b vb = new Class52b();\n-    }\n-\n-    void test_52() throws Exception {\n-        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class52a\");\n-        out.shouldHaveExitValue(1);\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class52b during linking of class PreloadCircularityTest$Class52a. Cause: a null-free static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class52c during loading of class PreloadCircularityTest$Class52b. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class52b during loading of class PreloadCircularityTest$Class52c. Cause: a null-free non-static field is declared with this type\");\n-        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class52b during loading of class PreloadCircularityTest$Class52c (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n-        out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class52c during loading of class PreloadCircularityTest$Class52b (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n-    }\n-\n-    static value class Class53a {\n-        Class53b vb = new Class53b();\n-\n-        @Strict\n-        @NullRestricted\n-        static Class53b sb = new Class53b();\n-    }\n-\n-    static value class Class53b {\n-        @Strict\n-        @NullRestricted\n-        Class53a va = new Class53a();\n-    }\n-\n-    \/\/ In the following test, Class53a fails to optimistically load Class53b at load time, but successfully loads it at link time\n-\n-    \/\/ void test_53() throws Exception {\n-    \/\/     OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class53a\");\n-    \/\/     out.shouldHaveExitValue(0);\n-    \/\/     out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a. Cause: field type in LoadableDescriptors attribute\");\n-    \/\/     out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b. Cause: a null-free non-static field is declared with this type\");\n-    \/\/     out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b (cause: null-free non-static field) failed: java\/lang\/ClassCircularityError\");\n-    \/\/     out.shouldContain(\"[warning][class,preload] Preloading of class PreloadCircularityTest$Class53b during loading of class PreloadCircularityTest$Class53a (cause: field type in LoadableDescriptors attribute) failed : java\/lang\/ClassCircularityError\");\n-    \/\/     out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class53b during linking of class PreloadCircularityTest$Class53a. Cause: a null-free static field is declared with this type\");\n-    \/\/     out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b. Cause: a null-free non-static field is declared with this type\");\n-    \/\/     out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class53a during loading of class PreloadCircularityTest$Class53b (cause: null-free non-static field) succeeded\");\n-    \/\/     out.shouldContain(\"[info   ][class,preload] Preloading of class PreloadCircularityTest$Class53b during linking of class PreloadCircularityTest$Class53a (cause: null-free static field) succeeded\");\n-    \/\/ }\n-\n-    static value class Class54a {\n-        @Strict\n-        @NullRestricted\n-        static Class54b sb = new Class54b();\n-    }\n-\n-    static class Class54b { }\n-\n-    void test_54() throws Exception {\n-        OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class54a\");\n-        out.shouldHaveExitValue(1);\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class54b during linking of class PreloadCircularityTest$Class54a. Cause: a null-free static field is declared with this type\");\n-        out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class54b during linking of class PreloadCircularityTest$Class54a (cause: null-free static field) succeeded\");\n-        out.shouldContain(\"java.lang.IncompatibleClassChangeError: class PreloadCircularityTest$Class54a expects class PreloadCircularityTest$Class54b to be a value class but it is an identity class\");\n-    }\n-\n-    static class Class55a {\n-        @Strict\n-        @NullRestricted\n-        static Class55b sb = new Class55b();\n-    }\n-\n-    static value class Class55b { }\n-\n-    \/\/ void test_55() throws Exception {\n-    \/\/     OutputAnalyzer out = tryLoadingClass(\"PreloadCircularityTest$Class55a\");\n-    \/\/     out.shouldHaveExitValue(1);\n-    \/\/     out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class55b during linking of class PreloadCircularityTest$Class55a. Cause: a null-free static field is declared with this type\");\n-    \/\/     out.shouldContain(\"[info][class,preload] Preloading of class PreloadCircularityTest$Class55b during linking of class PreloadCircularityTest$Class55a (cause: null-free static field) succeeded\");\n-    \/\/     out.shouldContain(\"java.lang.IncompatibleClassChangeError: class PreloadCircularityTest$Class55b is not implicitly constructible and it is used in a null restricted static field (not supported)\");\n-    \/\/ }\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/PreloadCircularityTest.java","additions":1,"deletions":154,"binary":false,"changes":155,"status":"modified"}]}