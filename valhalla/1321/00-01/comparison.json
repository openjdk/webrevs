{"files":[{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/z\/zAddress.hpp\"\n@@ -499,1 +500,4 @@\n-    assert(lk == NON_ATOMIC_FLAT || lk == PAYLOAD, \"Cannot support layout other than NON_ATOMIC_FLAT\"); \/\/ Note: PAYLOAD is incorrect, resolve when transistioned to new flattening\n+\n+    assert(lk == NON_ATOMIC_FLAT || (!md->must_be_atomic()) ||\n+           (md->layout_size_in_bytes(lk) == sizeof(zpointer) && md->nonstatic_oop_count() == 1), \/\/ If atomic with oops, only a single oop suppported\n+           \"Cannot support layout other than NON_ATOMIC_FLAT or single oop\");\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSet.inline.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,0 +109,17 @@\n+\/**\n+ * @test id=ZXint\n+ * @requires vm.gc.Z\n+ * @summary Test embedding oops into Inline types (sanity check with interpreter only the most complex GC)\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/invoke\/common\n+ * @enablePreview\n+ * @compile Person.java InlineOops.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ *                   jdk.test.whitebox.WhiteBox$WhiteBoxPermission\n+ * @run main\/othervm -Xint -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx128m\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyViews -XX:InlineFieldMaxFlatSize=160\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   runtime.valhalla.inlinetypes.InlineOops\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}