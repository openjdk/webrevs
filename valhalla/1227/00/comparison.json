{"files":[{"patch":"@@ -1447,1 +1447,0 @@\n-                sb.append(t.getNullMarker().typeSuffix());\n@@ -1449,0 +1448,1 @@\n+                sb.append(t.getNullMarker().typeSuffix());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1037,0 +1037,1 @@\n+                boolean result;\n@@ -1038,1 +1039,1 @@\n-                    return isSameType(elemtype(t), elemtype(s));\n+                    result = isSameType(elemtype(t), elemtype(s));\n@@ -1040,1 +1041,1 @@\n-                    return isSubtypeUncheckedInternal(elemtype(t), elemtype(s), false, warn);\n+                    result = isSubtypeUncheckedInternal(elemtype(t), elemtype(s), false, warn);\n@@ -1042,0 +1043,4 @@\n+                if (result && allowNullRestrictedTypes && hasNarrowerNullability(s, t)) {\n+                    warn.warn(LintCategory.NULL);\n+                }\n+                return result;\n@@ -1232,0 +1237,1 @@\n+                boolean result = false;\n@@ -1234,1 +1240,1 @@\n-                        return isSameType(t.elemtype, elemtype(s));\n+                        result = isSameType(t.elemtype, elemtype(s));\n@@ -1236,1 +1242,1 @@\n-                        return isSubtypeNoCapture(t.elemtype, elemtype(s));\n+                        result = isSubtypeNoCapture(t.elemtype, elemtype(s));\n@@ -1239,1 +1245,1 @@\n-                if (s.hasTag(CLASS)) {\n+                if (!result && s.hasTag(CLASS)) {\n@@ -1241,1 +1247,1 @@\n-                    return sname == names.java_lang_Object\n+                    result = sname == names.java_lang_Object\n@@ -1246,1 +1252,5 @@\n-                return false;\n+                if (result && allowNullRestrictedTypes && warnStack.nonEmpty() && hasNarrowerNullability(s, t)) {\n+                    warnStack.head.warn(LintCategory.NULL);\n+                }\n+\n+                return result;\n@@ -1387,1 +1397,4 @@\n-                if (t.equalsIgnoreMetadata(s))\n+                if (t.equalsIgnoreMetadata(s)) {\n+                    if (allowNullRestrictedTypes && warnStack.nonEmpty() && !hasSameNullability(s, t)) {\n+                        warnStack.head.warn(LintCategory.NULL);\n+                    }\n@@ -1389,0 +1402,1 @@\n+                }\n@@ -1466,8 +1480,13 @@\n-                if (t == s)\n-                    return true;\n-\n-                if (s.isPartial())\n-                    return visit(s, t);\n-\n-                return s.hasTag(ARRAY)\n-                    && containsTypeEquivalent(t.elemtype, elemtype(s));\n+                boolean result;\n+                if (t == s) {\n+                    result = true;\n+                } else if (s.isPartial()) {\n+                    result = visit(s, t);\n+                } else {\n+                    result = s.hasTag(ARRAY) &&\n+                            containsTypeEquivalent(t.elemtype, elemtype(s));\n+                }\n+                if (result && allowNullRestrictedTypes && warnStack.nonEmpty() && !hasSameNullability(s, t)) {\n+                    warnStack.head.warn(LintCategory.NULL);\n+                }\n+                return result;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":35,"deletions":16,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -3155,0 +3155,1 @@\n+            List<NullMarker> nullMarkers = tree.nullMarkers.reverse();\n@@ -3157,1 +3158,3 @@\n-                owntype = new ArrayType(owntype, syms.arrayClass);\n+                owntype = new ArrayType(owntype, syms.arrayClass)\n+                        .asNullMarked(nullMarkers.head);\n+                nullMarkers = nullMarkers.tail;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1537,0 +1537,5 @@\n+                            Token nullMarker = null;\n+                            if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                                nullMarker = token;\n+                                nextToken();\n+                            }\n@@ -1539,0 +1544,3 @@\n+                            if (nullMarker != null) {\n+                                setNullMarker(t, nullMarker);\n+                            }\n@@ -1542,4 +1550,0 @@\n-                            if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n-                                setNullMarker(t);\n-                                nextToken();\n-                            }\n@@ -1897,6 +1901,9 @@\n-        ((JCNullableTypeExpression)exp).setNullMarker(\n-                tk.kind == QUES ?\n-                        NullMarker.NULLABLE :\n-                        token.kind == BANG ?\n-                                NullMarker.NOT_NULL :\n-                                NullMarker.PARAMETRIC);\n+        ((JCNullableTypeExpression)exp).setNullMarker(nullMarker(tk));\n+    }\n+\n+    NullMarker nullMarker(Token tk) {\n+        return tk.kind == QUES ?\n+                NullMarker.NULLABLE :\n+                tk.kind == BANG ?\n+                        NullMarker.NOT_NULL :\n+                        NullMarker.PARAMETRIC;\n@@ -2507,6 +2514,0 @@\n-        } else if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && peekToken(LBRACKET)) {\n-            Token nullMarker = token;\n-            nextToken();\n-            int pos = token.pos;\n-            nextToken();\n-            t = bracketsOptCont(t, pos, nextLevelAnnotations, nullMarker);\n@@ -2535,5 +2536,0 @@\n-        return bracketsOptCont(t, pos, annotations, null);\n-    }\n-\n-    private JCExpression bracketsOptCont(JCExpression t, int pos,\n-                                         List<JCAnnotation> annotations, Token nullMarker) {\n@@ -2541,0 +2537,5 @@\n+        Token nullMarker = null;\n+        if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+            nullMarker = token;\n+            nextToken();\n+        }\n@@ -2646,0 +2647,4 @@\n+        if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+            setNullMarker(t);\n+            nextToken();\n+        }\n@@ -2665,0 +2670,5 @@\n+            if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                setNullMarker(t);\n+                nextToken();\n+            }\n+\n@@ -2765,0 +2775,1 @@\n+            ListBuffer<NullMarker> nullMarkers = new ListBuffer<>();\n@@ -2772,0 +2783,6 @@\n+            if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                nullMarkers.add(nullMarker(token));\n+                nextToken();\n+            } else {\n+                nullMarkers.add(NullMarker.UNSPECIFIED);\n+            }\n@@ -2773,1 +2790,2 @@\n-                    || token.kind == MONKEYS_AT) {\n+                    || token.kind == MONKEYS_AT ||\n+                    (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind))) {\n@@ -2777,1 +2795,6 @@\n-                if (token.kind == RBRACKET) { \/\/ no dimension\n+                if (token.kind == RBRACKET) {\n+                    Token nullMarker = null;\n+                    if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                        nullMarker = token;\n+                        nextToken();\n+                    }\n@@ -2779,0 +2802,3 @@\n+                    if (nullMarker != null) {\n+                        setNullMarker(elemtype, nullMarker);\n+                    }\n@@ -2783,0 +2809,6 @@\n+                    if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                        nullMarkers.add(nullMarker(token));\n+                        nextToken();\n+                    } else {\n+                        nullMarkers.add(NullMarker.UNSPECIFIED);\n+                    }\n@@ -2793,1 +2825,1 @@\n-            JCNewArray na = toP(F.at(newpos).NewArray(elemtype, dims.toList(), elems));\n+            JCNewArray na = toP(F.at(newpos).NewArray(elemtype, dims.toList(), elems, nullMarkers.toList()));\n@@ -2796,0 +2828,2 @@\n+            Assert.check(dims.length() == nullMarkers.length(), na);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":58,"deletions":24,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -1915,0 +1916,1 @@\n+        public List<NullMarker> nullMarkers;\n@@ -1917,2 +1919,3 @@\n-                           List<JCExpression> dims,\n-                           List<JCExpression> elems)\n+                             List<JCExpression> dims,\n+                             List<JCExpression> elems,\n+                             List<NullMarker> nullMarkers)\n@@ -1924,0 +1927,1 @@\n+            this.nullMarkers = nullMarkers;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -194,1 +194,2 @@\n-                if (tree instanceof JCNullableTypeExpression nullableType) {\n+                if (!(tree instanceof JCArrayTypeTree) &&\n+                        tree instanceof JCNullableTypeExpression nullableType) {\n@@ -1565,0 +1566,1 @@\n+                print(((JCArrayTypeTree)elem).getNullMarker().typeSuffix());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -330,1 +330,2 @@\n-        return M.at(t.pos).NewArray(elemtype, dims, elems);\n+        return M.at(t.pos).NewArray(elemtype, dims, elems,\n+                ((JCNewArray)node).nullMarkers);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeCopier.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -429,0 +430,9 @@\n+    public JCNewArray NewArray(JCExpression elemtype,\n+                               List<JCExpression> dims,\n+                               List<JCExpression> elems)\n+    {\n+        JCNewArray tree = new JCNewArray(elemtype, dims, elems, List.nil());\n+        tree.pos = pos;\n+        return tree;\n+    }\n+\n@@ -431,1 +441,2 @@\n-                             List<JCExpression> elems)\n+                             List<JCExpression> elems,\n+                             List<NullMarker> nullMarkers)\n@@ -433,1 +444,1 @@\n-        JCNewArray tree = new JCNewArray(elemtype, dims, elems);\n+        JCNewArray tree = new JCNewArray(elemtype, dims, elems, nullMarkers);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @enablePreview\n+ * @summary Smoke test for nullable types in array types and array creation expressions\n+ * @compile\/fail\/ref=TestArrays.out -Xlint:null -Werror -XDrawDiagnostics TestArrays.java\n+ *\/\n+\n+public class TestArrays {\n+    void test1() {\n+        String! []?[]? arr_local = null;\n+        arr_local = new String! [3]? [4]?;\n+        arr_local = new String! [3]! [4]?;\n+        arr_local = new String! [3]? [4]!;\n+        arr_local = new String! [3]! [4]!;\n+    }\n+\n+    void test2() {\n+        String! []?[]! arr_local = null;\n+        arr_local = new String! [3]? [4]?; \/\/ warn\n+        arr_local = new String! [3]! [4]?; \/\/ warn\n+        arr_local = new String! [3]? [4]!;\n+        arr_local = new String! [3]! [4]!;\n+    }\n+\n+    void test3() {\n+        String! []![]? arr_local = new String! [0]![]?;\n+        arr_local = new String! [3]? [4]?; \/\/ warn\n+        arr_local = new String! [3]! [4]?;\n+        arr_local = new String! [3]? [4]!; \/\/ warn\n+        arr_local = new String! [3]! [4]!;\n+    }\n+\n+    void test4() {\n+        String! []![]! arr_local = new String! [0]![]!;\n+        arr_local = new String! [3]? [4]?; \/\/ warn\n+        arr_local = new String! [3]! [4]?; \/\/ warn\n+        arr_local = new String! [3]? [4]!; \/\/ warn\n+        arr_local = new String! [3]! [4]!;\n+    }\n+\n+    void test5() {\n+        String! []?[]? arr_local = null;\n+        arr_local = new String! [3]? []?;\n+        arr_local = new String! [3]! []?;\n+        arr_local = new String! [3]? []!;\n+        arr_local = new String! [3]! []!;\n+    }\n+\n+    void test6() {\n+        String! []?[]! arr_local = null;\n+        arr_local = new String! [3]? []?; \/\/ warn\n+        arr_local = new String! [3]! []?; \/\/ warn\n+        arr_local = new String! [3]? []!;\n+        arr_local = new String! [3]! []!;\n+    }\n+\n+    void test7() {\n+        String! []![]? arr_local = new String! [0]![]?;\n+        arr_local = new String! [3]? []?; \/\/ warn\n+        arr_local = new String! [3]! []?;\n+        arr_local = new String! [3]? []!; \/\/ warn\n+        arr_local = new String! [3]! []!;\n+    }\n+\n+    void test8() {\n+        String! []![]! arr_local = new String! [0]![]!;\n+        arr_local = new String! [3]? []?; \/\/ warn\n+        arr_local = new String! [3]! []?; \/\/ warn\n+        arr_local = new String! [3]? []!; \/\/ warn\n+        arr_local = new String! [3]! []!;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/nullability\/TestArrays.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,19 @@\n+TestArrays.java:19:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:20:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:27:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:29:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:35:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:36:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:37:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:51:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:52:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:59:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:61:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:67:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:68:21: compiler.warn.unchecked.nullness.conversion\n+TestArrays.java:69:21: compiler.warn.unchecked.nullness.conversion\n+- compiler.err.warnings.and.werror\n+- compiler.note.preview.filename: TestArrays.java, DEFAULT\n+- compiler.note.preview.recompile\n+1 error\n+14 warnings\n","filename":"test\/langtools\/tools\/javac\/nullability\/TestArrays.out","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -55,0 +55,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -168,1 +169,3 @@\n-            } else\n+            } else if (o instanceof NullMarker) {\n+                return;\n+            } else {\n@@ -170,0 +173,1 @@\n+            }\n","filename":"test\/langtools\/tools\/javac\/tree\/JavacTreeScannerTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCNullableTypeExpression.NullMarker;\n@@ -176,0 +177,2 @@\n+            } else if (o instanceof NullMarker) {\n+                return;\n","filename":"test\/langtools\/tools\/javac\/tree\/SourceTreeScannerTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}