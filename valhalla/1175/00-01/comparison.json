{"files":[{"patch":"@@ -70,1 +70,2 @@\n-                  (op == Op_MulF) || (op == Op_MulD);\n+                  (op == Op_MulF) || (op == Op_MulD) ||\n+                  (op == Op_MulHF);\n@@ -124,2 +125,3 @@\n-      op != Op_MulF &&          \/\/ Float & double cannot reassociate\n-      op != Op_MulD ) {\n+      op != Op_MulF &&          \/\/ Float, half-precision float and double cannot reassociate\n+      op != Op_MulD &&\n+      op != Op_MulHF) {\n@@ -551,0 +553,8 @@\n+  return MulNode::Ideal(phase, can_reshape);\n+}\n+\n+\/\/=============================================================================\n+\/\/------------------------------Ideal------------------------------------------\n+\/\/ Check to see if we are multiplying by a constant 2 and convert to add, then try the regular MulNode::Ideal\n+Node* MulHFNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  const TypeF* t2 = phase->type(in(2))->isa_float_constant();\n@@ -552,0 +562,5 @@\n+  \/\/ x * 2 -> x + x\n+  if (t2 != nullptr && t2->getf() == 2) {\n+    Node* base = in(1);\n+    return new AddHFNode(base, base);\n+  }\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -156,0 +156,1 @@\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import static java.lang.Float16.*;\n+import java.util.Random;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8336406\n+ * @summary Test that Ideal transformations of MulHFNode are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.irTests.MulHFNodeIdealizationTests\n+ *\/\n+public class MulHFNodeIdealizationTests {\n+\n+    private Float16 src;\n+    private Float16 dst;\n+    private Random rng;\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--enable-preview\");\n+    }\n+\n+    public MulHFNodeIdealizationTests() {\n+        rng = new Random(25);\n+        src = Float16.valueOf(rng.nextFloat());\n+        dst = Float16.valueOf(rng.nextFloat());\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_HF, \"1\"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"},\n+        failOn = {IRNode.MUL_HF})\n+    public void test1() {\n+        dst = Float16.multiply(src, Float16.valueOf(2));\n+    }\n+\n+    @Check(test=\"test1\")\n+    public void checkTest1() {\n+        Float16 expected = Float16.valueOf(src.floatValue() * (float) 2);\n+        if (float16ToRawShortBits(expected) != float16ToRawShortBits(dst)) {\n+            throw new RuntimeException(\"Invalid result: dst = \" + float16ToRawShortBits(dst) + \" != \" + float16ToRawShortBits(expected));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/MulHFNodeIdealizationTests.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}