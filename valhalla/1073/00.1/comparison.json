{"files":[{"patch":"@@ -30,1 +30,1 @@\n-JAVAC_FLAGS += -XDstringConcat=inline\n+JAVAC_FLAGS += -XDstringConcat=inline --enable-preview\n","filename":"make\/modules\/java.base\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+JAVAC_FLAGS += --enable-preview\n+JAVA_FLAGS += --enable-preview\n","filename":"make\/modules\/jdk.incubator.vector\/Java.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2352,7 +2352,1 @@\n-  \/\/ The MaxVectorSize should have been set by detecting SVE max vector register size.\n-  int size = MIN2((UseSVE > 0) ? 256 : 16, (int)MaxVectorSize);\n-  \/\/ Minimum 2 values in vector\n-  if (size < 2*type2aelembytes(bt)) size = 0;\n-  \/\/ But never < 4\n-  if (size < 4) size = 0;\n-  return size;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -2363,1 +2357,1 @@\n-  return vector_width_in_bytes(bt)\/type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1048,1 +1048,1 @@\n-  return MaxVectorSize;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -1068,2 +1068,1 @@\n-  assert(is_java_primitive(bt), \"only primitive type vectors\");\n-  return vector_width_in_bytes(bt)\/type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2215,7 +2215,1 @@\n-  if (SuperwordUseVSX) {\n-    assert(MaxVectorSize == 16, \"\");\n-    return 16;\n-  } else {\n-    assert(MaxVectorSize == 8, \"\");\n-    return 8;\n-  }\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -2238,1 +2232,1 @@\n-  return vector_width_in_bytes(bt)\/type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1984,11 +1984,1 @@\n-  if (UseRVV) {\n-    \/\/ The MaxVectorSize should have been set by detecting RVV max vector register size when check UseRVV.\n-    \/\/ MaxVectorSize == VM_Version::_initial_vector_length\n-    int size = MaxVectorSize;\n-    \/\/ Minimum 2 values in vector\n-    if (size < 2 * type2aelembytes(bt)) size = 0;\n-    \/\/ But never < 4\n-    if (size < 4) size = 0;\n-    return size;\n-  }\n-  return 0;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -1999,1 +1989,1 @@\n-  return vector_width_in_bytes(bt) \/ type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -393,0 +393,18 @@\n+\n+int VM_Version::max_vector_size(BasicType bt) {\n+#ifdef COMPILER2\n+  if (UseRVV) {\n+    \/\/ The MaxVectorSize should have been set by detecting RVV max vector register size when check UseRVV.\n+    \/\/ MaxVectorSize == VM_Version::_initial_vector_length\n+    int size = MaxVectorSize;\n+    \/\/ Minimum 2 values in vector\n+    if (size < 2 * type2aelembytes(bt)) size = 0;\n+    \/\/ But never < 4\n+    if (size < 4) size = 0;\n+    return size \/ type2aelembytes(bt);\n+  }\n+  return 0;\n+#else\n+  return -1;\n+#endif\n+}\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1557,2 +1557,1 @@\n-  assert(MaxVectorSize == 8, \"\");\n-  return 8;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -1570,1 +1569,1 @@\n-  return vector_width_in_bytes(bt)\/type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1123,0 +1123,8 @@\n+    \/\/ Skip scalarization for vector value objects (concrete vectors and payloads).\n+    load_klass(rdi, rax, rscratch1);\n+    movptr(rscratch1, rax);\n+    super_call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::skip_value_scalarization), rdi);\n+    testptr(rax, rax);\n+    movptr(rax, rscratch1);\n+    jcc(Assembler::notZero, skip);\n+\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3225,0 +3225,48 @@\n+\/\/ Max vector size in bytes. 0 if not supported.\n+int VM_Version::max_vector_size(BasicType bt) {\n+#ifdef COMPILER2_OR_JVMCI\n+  assert(is_java_primitive(bt), \"only primitive type vectors\");\n+  if (UseSSE < 2) return 0;\n+  \/\/ SSE2 supports 128bit vectors for all types.\n+  \/\/ AVX2 supports 256bit vectors for all types.\n+  \/\/ AVX2\/EVEX supports 512bit vectors for all types.\n+  int size = (UseAVX > 1) ? (1 << UseAVX) * 8 : 16;\n+  \/\/ AVX1 supports 256bit vectors only for FLOAT and DOUBLE.\n+  if (UseAVX > 0 && (bt == T_FLOAT || bt == T_DOUBLE))\n+    size = (UseAVX > 2) ? 64 : 32;\n+  if (UseAVX > 2 && (bt == T_BYTE || bt == T_SHORT || bt == T_CHAR))\n+    size = (VM_Version::supports_avx512bw()) ? 64 : 32;\n+  \/\/ Use flag to limit vector size.\n+  size = MIN2(size,(int)MaxVectorSize);\n+  \/\/ Minimum 2 values in vector (or 4 for bytes).\n+  switch (bt) {\n+  case T_DOUBLE:\n+  case T_LONG:\n+    if (size < 16) return 0;\n+    break;\n+  case T_FLOAT:\n+  case T_INT:\n+    if (size < 8) return 0;\n+    break;\n+  case T_BOOLEAN:\n+    if (size < 4) return 0;\n+    break;\n+  case T_CHAR:\n+    if (size < 4) return 0;\n+    break;\n+  case T_BYTE:\n+    if (size < 4) return 0;\n+    break;\n+  case T_SHORT:\n+    if (size < 4) return 0;\n+    break;\n+  default:\n+    assert(false, \"Unexpected basic type\");\n+  }\n+  return size \/ type2aelembytes(bt);\n+#else\n+  return -1;\n+#endif\n+}\n+\n+\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2235,39 +2235,1 @@\n-  assert(is_java_primitive(bt), \"only primitive type vectors\");\n-  if (UseSSE < 2) return 0;\n-  \/\/ SSE2 supports 128bit vectors for all types.\n-  \/\/ AVX2 supports 256bit vectors for all types.\n-  \/\/ AVX2\/EVEX supports 512bit vectors for all types.\n-  int size = (UseAVX > 1) ? (1 << UseAVX) * 8 : 16;\n-  \/\/ AVX1 supports 256bit vectors only for FLOAT and DOUBLE.\n-  if (UseAVX > 0 && (bt == T_FLOAT || bt == T_DOUBLE))\n-    size = (UseAVX > 2) ? 64 : 32;\n-  if (UseAVX > 2 && (bt == T_BYTE || bt == T_SHORT || bt == T_CHAR))\n-    size = (VM_Version::supports_avx512bw()) ? 64 : 32;\n-  \/\/ Use flag to limit vector size.\n-  size = MIN2(size,(int)MaxVectorSize);\n-  \/\/ Minimum 2 values in vector (or 4 for bytes).\n-  switch (bt) {\n-  case T_DOUBLE:\n-  case T_LONG:\n-    if (size < 16) return 0;\n-    break;\n-  case T_FLOAT:\n-  case T_INT:\n-    if (size < 8) return 0;\n-    break;\n-  case T_BOOLEAN:\n-    if (size < 4) return 0;\n-    break;\n-  case T_CHAR:\n-    if (size < 4) return 0;\n-    break;\n-  case T_BYTE:\n-    if (size < 4) return 0;\n-    break;\n-  case T_SHORT:\n-    if (size < 4) return 0;\n-    break;\n-  default:\n-    ShouldNotReachHere();\n-  }\n-  return size;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -2278,1 +2240,1 @@\n-  return vector_width_in_bytes(bt)\/type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n@@ -2280,0 +2242,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":3,"deletions":40,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1821,7 +1821,10 @@\n-    assert(!inner_field->is_flat(), \"the iteration over nested fields is handled by the loop itself\");\n-    int off = inner_field->offset_in_bytes() - vk->first_field_offset();\n-    LoadField* load = new LoadField(src, src_off + off, inner_field, false, state_before, false);\n-    Value replacement = append(load);\n-    StoreField* store = new StoreField(dest, dest_off + off, inner_field, replacement, false, state_before, false);\n-    store->set_enclosing_field(enclosing_field);\n-    append(store);\n+    for (int j = 0, sec_offset = 0; j < inner_field->secondary_fields_count(); j++) {\n+      assert(!inner_field->is_flat(), \"the iteration over nested fields is handled by the loop itself\");\n+      int off = inner_field->offset_in_bytes() + sec_offset - vk->first_field_offset();\n+      LoadField* load = new LoadField(src, src_off + off, inner_field, false, state_before, false);\n+      Value replacement = append(load);\n+      StoreField* store = new StoreField(dest, dest_off + off, inner_field, replacement, false, state_before, false);\n+      store->set_enclosing_field(enclosing_field);\n+      append(store);\n+      sec_offset += type2aelembytes(inner_field->type()->basic_type());\n+    }\n@@ -1871,0 +1874,5 @@\n+  if ((field->is_multifield_base() || field->is_multifield()) &&\n+      (code == Bytecodes::_getfield || code == Bytecodes::_getstatic)) {\n+    assert(false, \"Illegal direct read access to mutifield through getfield bytecode\");\n+  }\n+\n@@ -2092,4 +2100,11 @@\n-        StoreField* store = new StoreField(obj, offset, field, val, false, state_before, needs_patching);\n-        if (!needs_patching) store = _memory->store(store);\n-        if (store != nullptr) {\n-          append(store);\n+        \/\/ Only possible non-unsafe access to multifield base is within vector payload constructors\n+        \/\/ for initializing entire bundle with a default value.\n+        int sec_field_size = type2aelembytes(field_type);\n+        assert(field->secondary_fields_count() == 1 || field->is_multifield_base(), \"\");\n+        for (int i = 0; i < field->secondary_fields_count(); i++) {\n+          ciField* temp = i > 0 ? static_cast<ciMultiField*>(field)->secondary_field_at(i-1) : field;\n+          StoreField* store = new StoreField(obj, offset + i * sec_field_size, temp, val, false, state_before, needs_patching);\n+          if (!needs_patching) store = _memory->store(store);\n+          if (store != nullptr) {\n+            append(store);\n+          }\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":26,"deletions":11,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+#include \"opto\/inlinetypenode.hpp\"\n@@ -1750,0 +1751,8 @@\n+bool ciEnv::is_multifield_scalarized(BasicType bt, int vec_length) {\n+#ifdef COMPILER2\n+  return InlineTypeNode::is_multifield_scalarized(bt, vec_length);\n+#else\n+  return true;\n+#endif\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -521,0 +521,1 @@\n+  static bool is_multifield_scalarized(BasicType type, int vec_len);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -92,0 +92,2 @@\n+  _is_multifield = false;\n+  _is_multifield_base = false;\n@@ -195,1 +197,1 @@\n-ciField::ciField(fieldDescriptor *fd) :\n+ciField::ciField(fieldDescriptor *fd, bool bundled) :\n@@ -206,0 +208,2 @@\n+  initialize_from(fd);\n+\n@@ -211,1 +215,2 @@\n-    _type = ciType::make(field_type);\n+    int bundle_size = bundled ? fd->secondary_fields_count(fd->index()) : 1;\n+    _type = ciType::make(field_type, bundle_size);\n@@ -214,2 +219,0 @@\n-  initialize_from(fd);\n-\n@@ -244,0 +247,2 @@\n+  _is_multifield_base = field->_is_multifield_base;\n+  _is_multifield = field->_is_multifield;\n@@ -297,0 +302,4 @@\n+  _is_multifield_base = fd->is_multifield_base() &&\n+     !ciEnv::is_multifield_scalarized(fd->field_type(), fd->secondary_fields_count(fd->index()));\n+  _is_multifield = fd->is_multifield();\n+\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"ci\/ciEnv.hpp\"\n@@ -55,0 +56,2 @@\n+  \/\/ TODO: Add special handling for the secondary_fields of multifields. This is\n+  \/\/ needed once this method is used by other compilers besides C2.\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"ci\/ciField.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -429,0 +429,11 @@\n+\n+      if (field->secondary_fields_count() > 1) {\n+        for (int j = 0; j < field->secondary_fields_count() - 1; j++) {\n+          ciField* sec_field = static_cast<ciMultiField*>(field)->secondary_fields()->at(j);\n+          int sec_field_offset = sec_field->offset_in_bytes();\n+          if (sec_field_offset == field_offset)\n+            return sec_field;\n+          if (sec_field_offset > field_offset)\n+            return nullptr;\n+        }\n+      }\n@@ -527,1 +538,4 @@\n-GrowableArray<ciField*>* ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray<ciField*>* super_fields, bool is_flat) {\n+\n+\/\/ Generic routine to handle synthetic field population for both static\n+\/\/ and non-static base multifields.\n+ciField* ciInstanceKlass::populate_synthetic_multifields(ciField* field) {\n@@ -529,0 +543,5 @@\n+  if (!field->is_multifield_base()) {\n+    return field;\n+  }\n+  int sec_fields_count = 0;\n+  ciMultiField* mfield = static_cast<ciMultiField*>(field);\n@@ -530,0 +549,29 @@\n+  InstanceKlass* k = get_instanceKlass();\n+\n+  for (JavaFieldStream fs(k); !fs.done(); fs.next()) {\n+    if (fs.offset() == field->offset_in_bytes()) {\n+      assert(mfield == field, \"Duplicate multifield for a given offset\");\n+      fieldDescriptor& fd = fs.field_descriptor();\n+      assert(fd.is_multifield_base(), \"\");\n+      mfield = new (arena) ciMultiField(&fd, true);\n+\n+      sec_fields_count = fd.secondary_fields_count(fd.index()) - 1;\n+      mfield->add_secondary_fields(new (arena) GrowableArray<ciField*>(arena, sec_fields_count, 0, nullptr));\n+      if (sec_fields_count == 0) {\n+        break;\n+      }\n+    } else if (sec_fields_count && fs.is_multifield()) {\n+      fieldDescriptor& fd = fs.field_descriptor();\n+      mfield->secondary_fields()->append(new (arena) ciField(&fd));\n+      sec_fields_count--;\n+      if (sec_fields_count == 0) {\n+        break;\n+      }\n+    }\n+  }\n+\n+  return mfield;\n+}\n+\n+GrowableArray<ciField*>* ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray<ciField*>* super_fields, bool is_flat) {\n+  ASSERT_IN_VM;\n@@ -531,0 +579,1 @@\n+  Arena* arena = CURRENT_ENV->arena();\n@@ -550,0 +599,1 @@\n+  int sec_fields_count = 0;\n@@ -552,0 +602,10 @@\n+    if (fs.is_multifield() && sec_fields_count) {\n+      assert(fields->last()->is_multifield_base(), \"\");\n+      sec_fields_count--;\n+      flen--;\n+      ciMultiField* multifield_base = static_cast<ciMultiField*>(fields->last());\n+      fieldDescriptor& fd = fs.field_descriptor();\n+      multifield_base->secondary_fields()->append(new (arena) ciField(&fd));\n+      continue;\n+    }\n+    assert(!sec_fields_count, \"\");\n@@ -568,1 +628,12 @@\n-        ciField* field = new (arena) ciField(flat_field, this, offset, is_final);\n+        ciField* field = nullptr;\n+        ciType* ftype = flat_field->type();\n+        assert(ftype, \"\");\n+        BasicType bt = ftype->basic_type();\n+        int sec_fields_count = ftype->bundle_size();\n+        bool scalarize_multifield = ciEnv::is_multifield_scalarized(bt, sec_fields_count);\n+        if (flat_field->is_multifield_base() && !scalarize_multifield) {\n+          field = new (arena) ciMultiField(flat_field, this, offset, is_final);\n+          static_cast<ciMultiField*>(field)->set_secondary_fields(static_cast<ciMultiField*>(flat_field)->secondary_fields());\n+        } else {\n+          field = new (arena) ciField(flat_field, this, offset, is_final);\n+        }\n@@ -572,1 +643,13 @@\n-      ciField* field = new (arena) ciField(&fd);\n+      ciField* field = nullptr;\n+      BasicType bt = fd.field_type();\n+      sec_fields_count = fd.secondary_fields_count(fd.index());\n+      bool scalarize_multifield = ciEnv::is_multifield_scalarized(bt, sec_fields_count);\n+      if (fs.is_multifield_base() && !scalarize_multifield) {\n+        field = new (arena) ciMultiField(&fd, true);\n+        GrowableArray<ciField*>* sec_fields = new (arena) GrowableArray<ciField*>(arena, sec_fields_count, 0, nullptr);\n+        static_cast<ciMultiField*>(field)->add_secondary_fields(sec_fields);\n+        sec_fields_count--;\n+      } else {\n+        field = new (arena) ciField(&fd);\n+        sec_fields_count = 0;\n+      }\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":86,"deletions":3,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -312,0 +312,3 @@\n+  if (f && f->is_multifield_base()) {\n+    GUARDED_VM_ENTRY(f = _holder->populate_synthetic_multifields(f);)\n+  }\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -953,0 +953,1 @@\n+    _jdk_internal_vm_annotation_MultiField,\n@@ -962,0 +963,1 @@\n+  jbyte _multifield_arg;\n@@ -988,0 +990,3 @@\n+  void set_multifield_arg(jbyte arg) { _multifield_arg = arg; }\n+  jbyte multifield_arg() const { return _multifield_arg; }\n+\n@@ -989,0 +994,1 @@\n+  bool is_multifield_base() const { return has_annotation(_jdk_internal_vm_annotation_MultiField); }\n@@ -1128,0 +1134,3 @@\n+    b_tag_val = 'B',\n+    b_con_off = 7,\n+    b_size = 9,\n@@ -1174,0 +1183,9 @@\n+    } else if (AnnotationCollector::_jdk_internal_vm_annotation_MultiField == id) {\n+      \/\/ TODO: change those assertion into a conditional statement to process the value\n+      assert(count == 1, \"MultiField annotation must have at least one argument\");  \/\/ Is it true?\n+      assert(member == vmSymbols::value_name(), \"Must be\");\n+      assert(b_tag_val == *(abase + tag_off), \"Must be a byte value\");\n+      int arg_index = Bytes::get_Java_u2((address)abase + b_con_off);\n+      int multifield_arg = const_cast<ConstantPool*>(cp)->int_at(arg_index);\n+      assert(((jbyte)multifield_arg) == multifield_arg, \"Must be\");\n+      coll->set_multifield_arg(multifield_arg);\n@@ -1476,1 +1494,7 @@\n-  ResourceMark rm(THREAD);\n+  \/\/ ResourceMark rm(THREAD);\n+  GrowableArray<MultiFieldInfo>* temp_multifield_info = new GrowableArray<MultiFieldInfo>(0); \/\/ could be allocated lazily\n+  GrowableArray<AnnotationArray*>* fields_annotations = nullptr;\n+  GrowableArray<AnnotationArray*>* fields_type_annotations = nullptr;\n+\n+  int field_index = -1;\n+  int inj_multifields = 0;\n@@ -1478,0 +1502,1 @@\n+    field_index++;\n@@ -1525,4 +1550,2 @@\n-        if (_fields_annotations == nullptr) {\n-          _fields_annotations = MetadataFactory::new_array<AnnotationArray*>(\n-                                             _loader_data, length, nullptr,\n-                                             CHECK);\n+        if (fields_annotations == nullptr) {\n+          fields_annotations = new GrowableArray<AnnotationArray*>(length);\n@@ -1530,1 +1553,1 @@\n-        _fields_annotations->at_put(n, parsed_annotations.field_annotations());\n+        fields_annotations->at_put_grow(n, parsed_annotations.field_annotations(), nullptr);\n@@ -1543,0 +1566,1 @@\n+\n@@ -1544,6 +1568,2 @@\n-        if (_fields_type_annotations == nullptr) {\n-          _fields_type_annotations =\n-            MetadataFactory::new_array<AnnotationArray*>(_loader_data,\n-                                                         length,\n-                                                         nullptr,\n-                                                         CHECK);\n+        if (fields_type_annotations == nullptr) {\n+          fields_type_annotations = new GrowableArray<AnnotationArray*>(length);\n@@ -1551,1 +1571,1 @@\n-        _fields_type_annotations->at_put(n, parsed_annotations.field_type_annotations());\n+        fields_type_annotations->at_put_grow(field_index, parsed_annotations.field_type_annotations(), nullptr);\n@@ -1572,1 +1592,1 @@\n-    fi.set_index(n);\n+    fi.set_index(field_index);\n@@ -1580,1 +1600,47 @@\n-    _temp_field_info->append(fi);\n+\n+    int base_idx = _temp_field_info->append(fi);\n+    assert(base_idx == field_index, \"Must be\");\n+    FieldInfo* const field = _temp_field_info->adr_at(field_index);\n+\n+    if (parsed_annotations.is_multifield_base() && is_java_primitive(cp->basic_type_for_signature_at(signature_index))) {\n+      field->field_flags_addr()->update_multifield_base(true);\n+      char* base_name = cp->symbol_at(name_index)->as_C_string();\n+      int bundle_size = parsed_annotations.multifield_arg();\n+      if (bundle_size < 0) {\n+        bundle_size = VectorSupport::get_max_multifield_count(_class_name);\n+      }\n+      for (int i = 1; i < bundle_size; i++) {\n+        field_index++;\n+        stringStream st;\n+        st.print(\"%s\", base_name);\n+        st.print(\"#\");\n+        st.print(\"%d\", i);\n+        Symbol* inj_name = SymbolTable::new_symbol(st.as_string());\n+        MultiFieldInfo mfi(inj_name, base_idx, i);\n+        int mfi_idx = temp_multifield_info->append(mfi);\n+\n+        const BasicType type = cp->basic_type_for_signature_at(signature_index);\n+        \/\/ Update FieldAllocationCount for this kind of field\n+        fac->update(is_static, type, type == T_PRIMITIVE_OBJECT);\n+\n+        FieldInfo::FieldFlags fflags(0);\n+        \/\/ fflags.update_injected(true);\n+        AccessFlags aflags;\n+        aflags.set_flags(flags);\n+        FieldInfo fi(aflags, (u2)(mfi_idx), (u2)signature_index, 0, fflags);\n+        fi.set_index(field_index);\n+\n+        int inj_idx = _temp_field_info->append(fi);\n+        assert(inj_idx == field_index, \"Must be\");\n+        FieldInfo* const field = _temp_field_info->adr_at(inj_idx);\n+\n+        field->field_flags_addr()->update_multifield(true);\n+        if (fields_annotations != nullptr && fields_annotations->at(base_idx) != nullptr) {\n+          fields_annotations->at_put_grow(field_index, fields_annotations->at(base_idx));\n+        }\n+        if (fields_type_annotations != nullptr && fields_type_annotations->at(base_idx) != nullptr) {\n+          fields_type_annotations->at_put_grow(field_index, fields_type_annotations->at(base_idx));\n+        }\n+        inj_multifields++;\n+      }\n+    }\n@@ -1582,1 +1648,1 @@\n-  assert(_temp_field_info->length() == length, \"Must be\");\n+  assert(_temp_field_info->length() == (length + inj_multifields), \"Must be\");\n@@ -1584,1 +1650,2 @@\n-  int index = length;\n+  *java_fields_count_ptr = *java_fields_count_ptr + inj_multifields;\n+  int index = length + inj_multifields;\n@@ -1612,2 +1679,5 @@\n-      fi.set_index(index);\n-      _temp_field_info->append(fi);\n+      fi.set_index(field_index);\n+\n+      field_index++;\n+      int inj_idx = _temp_field_info->append(fi);\n+      assert(inj_idx == field_index, \"Must be\");\n@@ -1632,2 +1702,5 @@\n-      fi.set_index(index);\n-      _temp_field_info->append(fi);\n+    fi.set_index(index);\n+\n+    field_index++;\n+    int inj_idx = _temp_field_info->append(fi);\n+    assert(inj_idx == field_index, \"Must be\");\n@@ -1653,1 +1726,4 @@\n-    _temp_field_info->append(fi);\n+\n+    field_index++;\n+    int inj_idx = _temp_field_info->append(fi);\n+    assert(inj_idx == field_index, \"Must be\");\n@@ -1666,0 +1742,29 @@\n+  if (temp_multifield_info->length() > 0) {\n+    _multifield_info = MetadataFactory::new_array<MultiFieldInfo>(_loader_data,\n+                                                                  temp_multifield_info->length(),\n+                                                                  CHECK);\n+    for (int i = 0; i < temp_multifield_info->length(); i++) {\n+      _multifield_info->at_put(i, temp_multifield_info->at(i));\n+    }\n+  }\n+\n+  if (fields_annotations != nullptr) {\n+    _fields_annotations = MetadataFactory::new_array<AnnotationArray*>(_loader_data,\n+                                                                       _temp_field_info->length(),\n+                                                                       nullptr,\n+                                                                       CHECK);\n+    for (int i = 0; i < fields_annotations->length(); i++) {\n+      _fields_annotations->at_put(i, fields_annotations->at(i));\n+    }\n+  }\n+\n+  if (fields_type_annotations != nullptr) {\n+     _fields_type_annotations = MetadataFactory::new_array<AnnotationArray*>(_loader_data,\n+                                                                             _temp_field_info->length(),\n+                                                                             nullptr,\n+                                                                             CHECK);\n+    for (int i = 0; i < fields_type_annotations->length(); i++) {\n+      _fields_type_annotations->at_put(i, fields_type_annotations->at(i));\n+    }\n+  }\n+\n@@ -1672,1 +1777,1 @@\n-      NameSigHash name_and_sig(_temp_field_info->adr_at(i)->name(_cp),\n+      NameSigHash name_and_sig(_temp_field_info->adr_at(i)->name(_multifield_info, _cp),\n@@ -2033,0 +2138,5 @@\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_MultiField_signature): {\n+      if (_location != _in_field) break;  \/\/ only allow for fields\n+      if (!privileged)            break;  \/\/ honor privileges\n+      return _jdk_internal_vm_annotation_MultiField;\n+    }\n@@ -4049,0 +4159,1 @@\n+  this_klass->set_multifield_info(_multifield_info);\n@@ -4638,0 +4749,15 @@\n+\/\/ utility function to skip over internal jdk primitive classes while performing some\n+\/\/ verification checks.\n+bool ClassFileParser::is_jdk_internal_class(const Symbol* class_name) {\n+  if (class_name &&\n+       (vmSymbols::jdk_internal_vm_vector_VectorSupport() == class_name ||\n+         vmSymbols::jdk_internal_vm_vector_VectorPayload() == class_name ||\n+         vmSymbols::jdk_internal_vm_vector_Vector() == class_name ||\n+         vmSymbols::jdk_internal_vm_vector_VectorMask() == class_name ||\n+         vmSymbols::jdk_internal_vm_vector_VectorShuffle() == class_name ||\n+         vmSymbols::jdk_internal_vm_vector_VectorPayloadMF() == class_name)) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n@@ -4741,1 +4867,1 @@\n-    if (!Arguments::enable_preview()) {\n+    if (!Arguments::enable_preview() && !is_jdk_internal_class(class_name)) {\n@@ -5511,0 +5637,1 @@\n+  assert(nullptr == _multifield_info, \"invariant\");\n@@ -5796,0 +5923,1 @@\n+  _multifield_info(nullptr),\n@@ -5884,0 +6012,1 @@\n+  _multifield_info = nullptr;\n@@ -5903,0 +6032,4 @@\n+  if (_multifield_info != nullptr) {\n+    MetadataFactory::free_array<MultiFieldInfo>(_loader_data, _multifield_info);\n+  }\n+\n@@ -6460,0 +6593,1 @@\n+          if (ClassFileParser::is_jdk_internal_class(name)) continue;\n@@ -6464,0 +6598,1 @@\n+            if (VectorSupport::is_vector(klass)) continue;\n@@ -6487,1 +6622,1 @@\n-      _field_info, _inline_type_field_klasses);\n+      _field_info, _inline_type_field_klasses, _multifield_info);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":160,"deletions":25,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -154,0 +154,1 @@\n+  Array<MultiFieldInfo>* _multifield_info;\n@@ -524,0 +525,1 @@\n+\n@@ -611,0 +613,1 @@\n+  static bool is_jdk_internal_class(const Symbol*);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-  _is_reference(false) {\n+  _is_reference(false),\n+  _multifield_index(-1) {\n@@ -56,1 +57,1 @@\n-LayoutRawBlock::LayoutRawBlock(int index, Kind kind, int size, int alignment, bool is_reference) :\n+LayoutRawBlock::LayoutRawBlock(int index, Kind kind, int size, int alignment, bool is_reference, jbyte multifield_index) :\n@@ -65,2 +66,3 @@\n- _is_reference(is_reference) {\n-  assert(kind == REGULAR || kind == FLAT || kind == INHERITED,\n+ _is_reference(is_reference),\n+ _multifield_index(multifield_index) {\n+  assert(kind == REGULAR || kind == FLAT || kind == INHERITED || kind == MULTIFIELD,\n@@ -85,0 +87,1 @@\n+  _multifields(nullptr),\n@@ -90,1 +93,1 @@\n-  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::REGULAR, size, size \/* alignment == size for primitive types *\/, false);\n+  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::REGULAR, size, size \/* alignment == size for primitive types *\/, false, -1);\n@@ -100,1 +103,1 @@\n-  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::REGULAR, size, size \/* alignment == size for oops *\/, true);\n+  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::REGULAR, size, size \/* alignment == size for oops *\/, true, -1);\n@@ -109,1 +112,1 @@\n-  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::FLAT, vk->get_exact_size_in_bytes(), vk->get_alignment(), false);\n+  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::FLAT, vk->get_exact_size_in_bytes(), vk->get_alignment(), false, -1);\n@@ -118,0 +121,24 @@\n+void FieldGroup::add_multifield(ConstantPool* cp, FieldInfo* field, Array<MultiFieldInfo>* multifield_info, InlineKlass* vk) {\n+  assert(field->is_multifield() || field->is_multifield_base(), \"Must be\");\n+  u2 base = field->multifield_base(multifield_info);\n+  BasicType type = Signature::basic_type(field->signature(cp));\n+  MultiFieldGroup* mfg = NULL;\n+  if (_multifields != NULL) {\n+    for (int i = 0; i < _multifields->length(); i++) {\n+      if (base == _multifields->at(i)->multifield_base()) {\n+        mfg = _multifields->at(i);\n+        break;\n+      }\n+    }\n+  } else {\n+    _multifields = new GrowableArray<MultiFieldGroup*>(INITIAL_LIST_SIZE);\n+  }\n+  if (mfg == NULL) {\n+    mfg = new MultiFieldGroup(base, field->signature(cp));\n+    mfg->add_field(cp, field, vk, multifield_info);\n+    _multifields->append(mfg);\n+  } else {\n+    mfg->add_field(cp, field, vk, multifield_info);\n+  }\n+}\n+\n@@ -125,0 +152,16 @@\n+  if (_multifields != NULL) {\n+    for (int i = 0; i < _multifields->length(); i++) {\n+      int size = _multifields->at(i)->fields()->at(0)->size();\n+      int alignment =  _multifields->at(i)->fields()->at(0)->alignment();\n+      int multialignment = size\/alignment;\n+      if (size % multialignment != 0) multialignment+= alignment;\n+      \/\/ Problem: at this point, multialignment can be a weird number, for instance not a power of two\n+      int multisize = multialignment * alignment * _multifields->at(i)->fields()->length();  \/\/ should be stored\n+      \/\/ True alignment should be adjusted to increase chances to be on a single cache line\n+      int multifield_group_alignment = MIN2(round_up_power_of_2(multisize), HeapWordSize);\n+      _multifields->at(i)->set_group_size(multisize);\n+      _multifields->at(i)->set_group_alignment(multifield_group_alignment);\n+      _multifields->at(i)->fields()->sort(MultiFieldGroup::compare_multifield_index);\n+    }\n+    _multifields->sort(MultiFieldGroup::compare_multifield_groups_inverted);\n+  }\n@@ -141,1 +184,28 @@\n-FieldLayout::FieldLayout(GrowableArray<FieldInfo>* field_info, ConstantPool* cp) :\n+MultiFieldGroup::MultiFieldGroup(u2 base, Symbol* signature) :  _multifield_base(base), _signature(signature), _fields(NULL) { }\n+\n+void MultiFieldGroup::add_field(ConstantPool* cp, FieldInfo* field, InlineKlass* vk, Array<MultiFieldInfo>* multifield_info) {\n+  assert(field->is_multifield() || field->is_multifield_base(), \"Must be\");\n+  assert(field->multifield_base(multifield_info) == multifield_base(), \"multifield base mismatch\");\n+  if (_fields == NULL) {\n+    _fields = new GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n+  } else {\n+    guarantee(field->signature(cp) == signature(), \"multifield signature mismatch\");\n+  }\n+  BasicType type = Signature::basic_type(field->signature(cp));\n+  LayoutRawBlock* block = NULL;\n+  if (type == T_PRIMITIVE_OBJECT) {\n+    block = new LayoutRawBlock(field->index(), LayoutRawBlock::MULTIFIELD, vk->get_exact_size_in_bytes(),\n+                               vk->get_alignment(), false, field->multifield_index(multifield_info));\n+  } else {\n+    int size = type2aelembytes(type);\n+    block = new LayoutRawBlock(field->index(), LayoutRawBlock::MULTIFIELD, size, size, false, field->multifield_index(multifield_info));\n+  }\n+  int cursor = 0;\n+  for (; cursor < _fields->length(); cursor++) {\n+    assert(_fields->at(cursor)->multifield_index() != field->multifield_index(multifield_info), \"multifield index duplicate found\");\n+    if (_fields->at(cursor)->multifield_index() > field->multifield_index(multifield_info)) break;\n+  }\n+  _fields->insert_before(cursor, block);\n+}\n+\n+FieldLayout::FieldLayout(GrowableArray<FieldInfo>* field_info, ConstantPool* cp, Array<MultiFieldInfo>* multifields) :\n@@ -144,0 +214,1 @@\n+  _multifield_info(multifields),\n@@ -187,0 +258,1 @@\n+         && block->kind() != LayoutRawBlock::MULTIFIELD\n@@ -316,0 +388,31 @@\n+void FieldLayout::add_multifield(MultiFieldGroup* multifield_group, LayoutRawBlock* start) {\n+  if (start == NULL) {\n+    start = _start;\n+  }\n+  LayoutRawBlock* candidate = NULL;\n+  if (start == last_block()) {\n+    candidate = last_block();\n+  } else {\n+    candidate = last_block()->prev_block();\n+    while (candidate->kind() != LayoutRawBlock::EMPTY || !candidate->fit(multifield_group->group_size(), multifield_group->group_alignment())) {\n+      if (candidate == start) {\n+        candidate = last_block();\n+        break;\n+      }\n+      candidate = candidate->prev_block();\n+    }\n+    assert(candidate != NULL, \"Candidate must not be null\");\n+    assert(candidate->kind() == LayoutRawBlock::EMPTY, \"Candidate must be an empty block\");\n+  }\n+  if ((candidate->offset() % multifield_group->group_alignment()) != 0) {\n+    int adjustment = multifield_group->group_alignment() - (candidate->offset() % multifield_group->group_alignment());\n+    LayoutRawBlock* adj = new LayoutRawBlock(LayoutRawBlock::EMPTY, adjustment);\n+    insert(candidate, adj);\n+  }\n+  assert(candidate->fit(multifield_group->group_size(), multifield_group->group_alignment()), \"Candidate must be able to store the whole contiguous block\");\n+  for (int i = 0; i < multifield_group->fields()->length(); i++) {\n+    LayoutRawBlock* b = multifield_group->fields()->at(i);\n+    insert_field_block(candidate, b);\n+  }\n+}\n+\n@@ -335,1 +438,1 @@\n-    for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+    for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants(), ik->multifield_info()); !fs.done(); fs.next()) {\n@@ -344,1 +447,1 @@\n-                                   vk->get_alignment(), false);\n+                                   vk->get_alignment(), false, -1);\n@@ -349,1 +452,1 @@\n-        block = new LayoutRawBlock(fs.index(), LayoutRawBlock::INHERITED, size, size, false);\n+        block = new LayoutRawBlock(fs.index(), LayoutRawBlock::INHERITED, size, size, false, -1);\n@@ -473,1 +576,1 @@\n-                         fi->name(_cp)->as_C_string(),\n+                         fi->name(_multifield_info, _cp)->as_C_string(),\n@@ -484,1 +587,1 @@\n-                         fi->name(_cp)->as_C_string(),\n+                         fi->name(_multifield_info, _cp)->as_C_string(),\n@@ -504,1 +607,1 @@\n-          for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+          for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants(), ik->multifield_info()); !fs.done(); fs.next()) {\n@@ -516,0 +619,1 @@\n+          }\n@@ -518,0 +622,1 @@\n+        break;\n@@ -519,14 +624,22 @@\n-      break;\n-    }\n-    case LayoutRawBlock::EMPTY:\n-      output->print_cr(\" @%d %d\/1 %s\",\n-                       b->offset(),\n-                       b->size(),\n-                       \"EMPTY\");\n-      break;\n-    case LayoutRawBlock::PADDING:\n-      output->print_cr(\" @%d %d\/1 %s\",\n-                       b->offset(),\n-                       b->size(),\n-                       \"PADDING\");\n-      break;\n+      case LayoutRawBlock::EMPTY:\n+        output->print_cr(\" @%d %d\/1 %s\",\n+                         b->offset(),\n+                         b->size(),\n+                         \"EMPTY\");\n+        break;\n+      case LayoutRawBlock::PADDING:\n+        output->print_cr(\" @%d %d\/1 %s\",\n+                         b->offset(),\n+                         b->size(),\n+                         \"PADDING\");\n+        break;\n+      case LayoutRawBlock::MULTIFIELD:\n+        FieldInfo* fi = _field_info->adr_at(b->field_index());\n+        output->print_cr(\" @%d \\\"%s\\\" %s %d\/%d %s\",\n+                         b->offset(),\n+                         fi->name(_multifield_info, _cp)->as_C_string(),\n+                         fi->signature(_cp)->as_C_string(),\n+                         b->size(),\n+                         b->alignment(),\n+                         \"MULTIFIELD\");\n+        break;\n@@ -540,1 +653,2 @@\n-                                       FieldLayoutInfo* info, Array<InlineKlass*>* inline_type_field_klasses) :\n+                                       FieldLayoutInfo* info, Array<InlineKlass*>* inline_type_field_klasses,\n+                                       Array<MultiFieldInfo>* multifields) :\n@@ -547,0 +661,1 @@\n+  _multifield_info(multifields),\n@@ -580,1 +695,1 @@\n-  _layout = new FieldLayout(_field_info, _constant_pool);\n+  _layout = new FieldLayout(_field_info, _constant_pool, _multifield_info);\n@@ -586,1 +701,1 @@\n-  _static_layout = new FieldLayout(_field_info, _constant_pool);\n+  _static_layout = new FieldLayout(_field_info, _constant_pool, _multifield_info);\n@@ -622,22 +737,20 @@\n-    BasicType type = Signature::basic_type(fieldinfo.signature(_constant_pool));\n-    switch(type) {\n-    case T_BYTE:\n-    case T_CHAR:\n-    case T_DOUBLE:\n-    case T_FLOAT:\n-    case T_INT:\n-    case T_LONG:\n-    case T_SHORT:\n-    case T_BOOLEAN:\n-      group->add_primitive_field(idx, type);\n-      break;\n-    case T_OBJECT:\n-    case T_ARRAY:\n-      if (!fieldinfo.field_flags().is_null_free_inline_type()) {\n-        if (group != _static_fields) _nonstatic_oopmap_count++;\n-        group->add_oop_field(idx);\n-      } else {\n-        assert(type != T_ARRAY, \"null free ptr to array not supported\");\n-        _has_inline_type_fields = true;\n-        if (group == _static_fields) {\n-          \/\/ static fields are never flat\n+    bool has_multifield_annotation = false;\n+    if (fieldinfo.is_multifield() || fieldinfo.is_multifield_base()) {\n+      group->add_multifield(_constant_pool, &fieldinfo, _multifield_info);\n+    } else {\n+      BasicType type = Signature::basic_type(fieldinfo.signature(_constant_pool));\n+      switch(type) {\n+      case T_BYTE:\n+      case T_CHAR:\n+      case T_DOUBLE:\n+      case T_FLOAT:\n+      case T_INT:\n+      case T_LONG:\n+      case T_SHORT:\n+      case T_BOOLEAN:\n+        group->add_primitive_field(idx, type);\n+        break;\n+      case T_OBJECT:\n+      case T_ARRAY:\n+        if (!fieldinfo.field_flags().is_null_free_inline_type()) {\n+          if (group != _static_fields) _nonstatic_oopmap_count++;\n@@ -646,30 +759,4 @@\n-          \/\/ Check below is performed for non-static fields, it should be performed for static fields too but at this stage,\n-          \/\/ it is not guaranteed that the klass of the static field has been loaded, so the test for static fields is delayed\n-          \/\/ until the linking phase\n-          Klass* klass =  _inline_type_field_klasses->at(idx);\n-          assert(klass != nullptr, \"Sanity check\");\n-          InlineKlass* vk = InlineKlass::cast(klass);\n-          assert(vk->is_implicitly_constructible(), \"must be, should have been checked in post_process_parsed_stream()\");\n-          _has_flattening_information = true;\n-          \/\/ Flattening decision to be taken here\n-          \/\/ This code assumes all verification already have been performed\n-          \/\/ (field's type has been loaded and it is an inline klass)\n-          bool too_big_to_flatten = (InlineFieldMaxFlatSize >= 0 &&\n-                                    (vk->size_helper() * HeapWordSize) > InlineFieldMaxFlatSize);\n-          bool too_atomic_to_flatten = vk->must_be_atomic() || AlwaysAtomicAccesses;\n-          bool too_volatile_to_flatten = fieldinfo.access_flags().is_volatile();\n-          if (vk->is_naturally_atomic()) {\n-            too_atomic_to_flatten = false;\n-            \/\/too_volatile_to_flatten = false; \/\/FIXME\n-            \/\/ Currently, volatile fields are never flat, this could change in the future\n-          }\n-          if (!(too_big_to_flatten | too_atomic_to_flatten | too_volatile_to_flatten)) {\n-            group->add_flat_field(idx, vk);\n-            _nonstatic_oopmap_count += vk->nonstatic_oop_map_count();\n-            _field_info->adr_at(idx)->field_flags_addr()->update_flat(true);\n-            if (!vk->is_atomic()) {  \/\/ flat and non-atomic: take note\n-              _has_nonatomic_values = true;\n-              _atomic_field_count--;  \/\/ every other field is atomic but this one\n-            }\n-          } else {\n-            _nonstatic_oopmap_count++;\n+          assert(type != T_ARRAY, \"null free ptr to array not supported\");\n+          _has_inline_type_fields = true;\n+          if (group == _static_fields) {\n+            \/\/ static fields are never flat\n@@ -677,0 +764,33 @@\n+          } else {\n+            \/\/ Check below is performed for non-static fields, it should be performed for static fields too but at this stage,\n+            \/\/ it is not guaranteed that the klass of the static field has been loaded, so the test for static fields is delayed\n+            \/\/ until the linking phase\n+            Klass* klass =  _inline_type_field_klasses->at(idx);\n+            assert(klass != nullptr, \"Sanity check\");\n+            InlineKlass* vk = InlineKlass::cast(klass);\n+            assert(vk->is_implicitly_constructible(), \"must be, should have been checked in post_process_parsed_stream()\");\n+            _has_flattening_information = true;\n+            \/\/ Flattening decision to be taken here\n+            \/\/ This code assumes all verification already have been performed\n+            \/\/ (field's type has been loaded and it is an inline klass)\n+            bool too_big_to_flatten = (InlineFieldMaxFlatSize >= 0 &&\n+                                      (vk->size_helper() * HeapWordSize) > InlineFieldMaxFlatSize);\n+            bool too_atomic_to_flatten = vk->must_be_atomic() || AlwaysAtomicAccesses;\n+            bool too_volatile_to_flatten = fieldinfo.access_flags().is_volatile();\n+            if (vk->is_naturally_atomic()) {\n+              too_atomic_to_flatten = false;\n+              \/\/too_volatile_to_flatten = false; \/\/FIXME\n+              \/\/ Currently, volatile fields are never flat, this could change in the future\n+            }\n+            if (!(too_big_to_flatten | too_atomic_to_flatten | too_volatile_to_flatten)) {\n+              group->add_flat_field(idx, vk);\n+              _nonstatic_oopmap_count += vk->nonstatic_oop_map_count();\n+              _field_info->adr_at(idx)->field_flags_addr()->update_flat(true);\n+              if (!vk->is_atomic()) {  \/\/ flat and non-atomic: take note\n+                _has_nonatomic_values = true;\n+                _atomic_field_count--;  \/\/ every other field is atomic but this one\n+              }\n+            } else {\n+              _nonstatic_oopmap_count++;\n+              group->add_oop_field(idx);\n+            }\n@@ -679,0 +799,3 @@\n+        break;\n+      default:\n+        fatal(\"Something wrong?\");\n@@ -680,3 +803,0 @@\n-      break;\n-    default:\n-      fatal(\"Something wrong?\");\n@@ -720,18 +840,14 @@\n-    BasicType type = Signature::basic_type(fieldinfo.signature(_constant_pool));\n-    switch(type) {\n-    case T_BYTE:\n-    case T_CHAR:\n-    case T_DOUBLE:\n-    case T_FLOAT:\n-    case T_INT:\n-    case T_LONG:\n-    case T_SHORT:\n-    case T_BOOLEAN:\n-      if (group != _static_fields) {\n-        field_alignment = type2aelembytes(type); \/\/ alignment == size for primitive types\n-      }\n-      group->add_primitive_field(fieldinfo.index(), type);\n-      break;\n-    case T_OBJECT:\n-    case T_ARRAY:\n-      if (!fieldinfo.field_flags().is_null_free_inline_type()) {\n+    bool has_multifield_annotation = false;\n+    if (fieldinfo.is_multifield() || fieldinfo.is_multifield_base()) {\n+      group->add_multifield(_constant_pool, &fieldinfo, _multifield_info);\n+    } else {\n+      BasicType type = Signature::basic_type(fieldinfo.signature(_constant_pool));\n+      switch(type) {\n+      case T_BYTE:\n+      case T_CHAR:\n+      case T_DOUBLE:\n+      case T_FLOAT:\n+      case T_INT:\n+      case T_LONG:\n+      case T_SHORT:\n+      case T_BOOLEAN:\n@@ -739,2 +855,1 @@\n-          _nonstatic_oopmap_count++;\n-          field_alignment = type2aelembytes(type); \/\/ alignment == size for oops\n+          field_alignment = type2aelembytes(type); \/\/ alignment == size for primitive types\n@@ -742,6 +857,9 @@\n-        group->add_oop_field(fieldinfo.index());\n-      } else {\n-        assert(type != T_ARRAY, \"null free ptr to array not supported\");\n-        _has_inline_type_fields = true;\n-        if (group == _static_fields) {\n-          \/\/ static fields are never flat\n+        group->add_primitive_field(fieldinfo.index(), type);\n+        break;\n+      case T_OBJECT:\n+      case T_ARRAY:\n+        if (!fieldinfo.field_flags().is_null_free_inline_type()) {\n+          if (group != _static_fields) {\n+            _nonstatic_oopmap_count++;\n+            field_alignment = type2aelembytes(type); \/\/ alignment == size for primitive types\n+          }\n@@ -750,31 +868,4 @@\n-          \/\/ Check below is performed for non-static fields, it should be performed for static fields too but at this stage,\n-          \/\/ it is not guaranteed that the klass of the static field has been loaded, so the test for static fields is delayed\n-          \/\/ until the linking phase\n-          Klass* klass =  _inline_type_field_klasses->at(fieldinfo.index());\n-          assert(klass != nullptr, \"Sanity check\");\n-          InlineKlass* vk = InlineKlass::cast(klass);\n-          assert(vk->is_implicitly_constructible(), \"must be, should have been checked in post_process_parsed_stream()\");\n-          \/\/ Flattening decision to be taken here\n-          \/\/ This code assumes all verifications have already been performed\n-          \/\/ (field's type has been loaded and it is an inline klass)\n-          bool too_big_to_flatten = (InlineFieldMaxFlatSize >= 0 &&\n-                                    (vk->size_helper() * HeapWordSize) > InlineFieldMaxFlatSize);\n-          bool too_atomic_to_flatten = vk->must_be_atomic() || AlwaysAtomicAccesses;\n-          bool too_volatile_to_flatten = fieldinfo.access_flags().is_volatile();\n-          if (vk->is_naturally_atomic()) {\n-            too_atomic_to_flatten = false;\n-            \/\/too_volatile_to_flatten = false; \/\/FIXME\n-            \/\/ Currently, volatile fields are never flat, this could change in the future\n-          }\n-          if (!(too_big_to_flatten | too_atomic_to_flatten | too_volatile_to_flatten)) {\n-            group->add_flat_field(fieldinfo.index(), vk);\n-            _nonstatic_oopmap_count += vk->nonstatic_oop_map_count();\n-            field_alignment = vk->get_alignment();\n-            _field_info->adr_at(fieldinfo.index())->field_flags_addr()->update_flat(true);\n-            if (!vk->is_atomic()) {  \/\/ flat and non-atomic: take note\n-              _has_nonatomic_values = true;\n-              _atomic_field_count--;  \/\/ every other field is atomic but this one\n-            }\n-          } else {\n-            _nonstatic_oopmap_count++;\n-            field_alignment = type2aelembytes(T_OBJECT);\n+          assert(type != T_ARRAY, \"null free ptr to array not supported\");\n+          _has_inline_type_fields = true;\n+          if (group == _static_fields) {\n+            \/\/ static fields are never flat\n@@ -782,0 +873,34 @@\n+          } else {\n+            \/\/ Check below is performed for non-static fields, it should be performed for static fields too but at this stage,\n+            \/\/ it is not guaranteed that the klass of the static field has been loaded, so the test for static fields is delayed\n+            \/\/ until the linking phase\n+            Klass* klass =  _inline_type_field_klasses->at(fieldinfo.index());\n+            assert(klass != nullptr, \"Sanity check\");\n+            InlineKlass* vk = InlineKlass::cast(klass);\n+            assert(vk->is_implicitly_constructible(), \"must be, should have been checked in post_process_parsed_stream()\");\n+            \/\/ Flattening decision to be taken here\n+            \/\/ This code assumes all verifications have already been performed\n+            \/\/ (field's type has been loaded and it is an inline klass)\n+            bool too_big_to_flatten = (InlineFieldMaxFlatSize >= 0 &&\n+                                      (vk->size_helper() * HeapWordSize) > InlineFieldMaxFlatSize);\n+            bool too_atomic_to_flatten = vk->must_be_atomic() || AlwaysAtomicAccesses;\n+            bool too_volatile_to_flatten = fieldinfo.access_flags().is_volatile();\n+            if (vk->is_naturally_atomic()) {\n+              too_atomic_to_flatten = false;\n+              \/\/too_volatile_to_flatten = false; \/\/FIXME\n+              \/\/ Currently, volatile fields are never flat, this could change in the future\n+            }\n+            if (!(too_big_to_flatten | too_atomic_to_flatten | too_volatile_to_flatten)) {\n+              group->add_flat_field(fieldinfo.index(), vk);\n+              _nonstatic_oopmap_count += vk->nonstatic_oop_map_count();\n+              field_alignment = vk->get_alignment();\n+              _field_info->adr_at(fieldinfo.index())->field_flags_addr()->update_flat(true);\n+              if (!vk->is_atomic()) {  \/\/ flat and non-atomic: take note\n+                _has_nonatomic_values = true;\n+                _atomic_field_count--;  \/\/ every other field is atomic but this one\n+              }\n+            } else {\n+              _nonstatic_oopmap_count++;\n+              field_alignment = type2aelembytes(T_OBJECT);\n+              group->add_oop_field(fieldinfo.index());\n+            }\n@@ -784,0 +909,12 @@\n+        break;\n+      default:\n+        fatal(\"Unexpected BasicType\");\n+      }\n+      if (!fieldinfo.access_flags().is_static() && field_alignment > alignment) alignment = field_alignment;\n+    }\n+  }\n+  _root_group->sort_by_size();\n+  if (_root_group->multifields() != NULL) {\n+    for (int i = 0; i < _root_group->multifields()->length(); i++) {\n+      if (_root_group->multifields()->at(i)->group_alignment() > alignment) {\n+        alignment = _root_group->multifields()->at(i)->group_alignment();\n@@ -785,4 +922,0 @@\n-      break;\n-    default:\n-      fatal(\"Unexpected BasicType\");\n-    if (!fieldinfo.access_flags().is_static() && field_alignment > alignment) alignment = field_alignment;\n@@ -826,0 +959,5 @@\n+  if (_root_group->multifields() != NULL) {\n+    for (int i = 0; i < _root_group->multifields()->length(); i++) {\n+      _layout->add_multifield(_root_group->multifields()->at(i));\n+    }\n+  }\n@@ -835,1 +973,6 @@\n-      _layout->add(cg->big_primitive_fields());\n+      if (cg->multifields() != NULL) {\n+        for (int i = 0; i < cg->multifields()->length(); i++) {\n+          _layout->add_multifield(cg->multifields()->at(i), start);\n+        }\n+      }\n+      _layout->add(cg->big_primitive_fields(), start);\n@@ -847,0 +990,5 @@\n+  if (_static_fields->multifields() != NULL) {\n+    for (int i = 0; i < _static_fields->multifields()->length(); i++) {\n+      _layout->add_multifield(_static_fields->multifields()->at(i));\n+    }\n+  }\n@@ -880,0 +1028,5 @@\n+  if (_root_group->multifields() != NULL) {\n+    for (int i = 0; i < _root_group->multifields()->length(); i++) {\n+      _layout->add_multifield(_root_group->multifields()->at(i));\n+    }\n+  }\n@@ -893,1 +1046,0 @@\n-  _exact_size_in_bytes = _layout->last_block()->offset() - _layout->first_field_block()->offset();\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":301,"deletions":149,"binary":false,"changes":450,"status":"modified"},{"patch":"@@ -4993,20 +4993,0 @@\n-int vector_VectorPayload::_payload_offset;\n-\n-#define VECTORPAYLOAD_FIELDS_DO(macro) \\\n-  macro(_payload_offset, k, \"payload\", object_signature, false)\n-\n-void vector_VectorPayload::compute_offsets() {\n-  InstanceKlass* k = vmClasses::vector_VectorPayload_klass();\n-  VECTORPAYLOAD_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n-}\n-\n-#if INCLUDE_CDS\n-void vector_VectorPayload::serialize_offsets(SerializeClosure* f) {\n-  VECTORPAYLOAD_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n-}\n-#endif\n-\n-void vector_VectorPayload::set_payload(oop o, oop val) {\n-  o->obj_field_put(_payload_offset, val);\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1761,7 +1761,2 @@\n- private:\n-  static int _payload_offset;\n-  static void set_payload(oop o, oop val);\n-\n-  static void compute_offsets();\n-  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n-\n+  static void compute_offsets() { }\n+  static void serialize_offsets(SerializeClosure* f) { }\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -171,0 +171,10 @@\n+  \/* support for vectors*\/                                                                                      \\\n+  do_klass(vector_VectorSupport_klass,                  jdk_internal_vm_vector_VectorSupport                  ) \\\n+  do_klass(vector_VectorPayload_klass,                  jdk_internal_vm_vector_VectorPayload                  ) \\\n+  do_klass(vector_Vector_klass,                         jdk_internal_vm_vector_Vector                         ) \\\n+  do_klass(vector_VectorMask_klass,                     jdk_internal_vm_vector_VectorMask                     ) \\\n+  do_klass(vector_VectorShuffle_klass,                  jdk_internal_vm_vector_VectorShuffle                  ) \\\n+                                                                                                                \\\n+  \/* support multi-field based vectors *\/                                                                       \\\n+  do_klass(vector_VectorPayloadMF_klass,                jdk_internal_vm_vector_VectorPayloadMF                ) \\\n+                                                                                                                \\\n@@ -187,7 +197,0 @@\n-  \/* support for vectors*\/                                                                                      \\\n-  do_klass(vector_VectorSupport_klass,                  jdk_internal_vm_vector_VectorSupport                  ) \\\n-  do_klass(vector_VectorPayload_klass,                  jdk_internal_vm_vector_VectorPayload                  ) \\\n-  do_klass(vector_Vector_klass,                         jdk_internal_vm_vector_Vector                         ) \\\n-  do_klass(vector_VectorMask_klass,                     jdk_internal_vm_vector_VectorMask                     ) \\\n-  do_klass(vector_VectorShuffle_klass,                  jdk_internal_vm_vector_VectorShuffle                  ) \\\n-                                                                                                                \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-\/\/ Mapping function names to values. New entries should be added below.\n+\/\/ Mapping function names to values. New entries should be added below.\n@@ -94,8 +94,58 @@\n-  template(jdk_internal_vm_vector_VectorSupport,      \"jdk\/internal\/vm\/vector\/VectorSupport\")               \\\n-  template(jdk_internal_vm_vector_VectorPayload,      \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload\") \\\n-  template(jdk_internal_vm_vector_Vector,             \"jdk\/internal\/vm\/vector\/VectorSupport$Vector\")        \\\n-  template(jdk_internal_vm_vector_VectorMask,         \"jdk\/internal\/vm\/vector\/VectorSupport$VectorMask\")    \\\n-  template(jdk_internal_vm_vector_VectorShuffle,      \"jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle\") \\\n-  template(payload_name,                              \"payload\")                                            \\\n-  template(ETYPE_name,                                \"ETYPE\")                                              \\\n-  template(VLENGTH_name,                              \"VLENGTH\")                                            \\\n+  template(jdk_internal_vm_vector_VectorSupport,       \"jdk\/internal\/vm\/vector\/VectorSupport\")                     \\\n+  template(jdk_internal_vm_vector_Vector,              \"jdk\/internal\/vm\/vector\/VectorSupport$Vector\")              \\\n+  template(jdk_internal_vm_vector_VectorMask,          \"jdk\/internal\/vm\/vector\/VectorSupport$VectorMask\")          \\\n+  template(jdk_internal_vm_vector_VectorShuffle,       \"jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle\")       \\\n+  template(jdk_internal_vm_vector_VectorPayload,       \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload\")       \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF,     \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF\")     \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF8Z,   \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF8Z\")   \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF16Z,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF16Z\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF32Z,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF32Z\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF64Z,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64Z\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF128Z, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128Z\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF256Z, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256Z\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF512Z, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512Z\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF8B,   \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF8B\")   \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF16B,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF16B\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF32B,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF32B\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF64B,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64B\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF128B, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128B\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF256B, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256B\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF512B, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512B\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF64S,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64S\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF128S, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128S\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF256S, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256S\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF512S, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512S\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF64I,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64I\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF128I, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128I\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF256I, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256I\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF512I, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512I\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF64L,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64L\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF128L, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128L\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF256L, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256L\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF512L, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512L\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF64F,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64F\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF128F, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128F\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF256F, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256F\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF512F, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512F\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF64D,  \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64D\")  \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF128D, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128D\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF256D, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256D\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMF512D, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512D\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxB, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxB\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxS, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxS\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxI, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxI\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxL, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxL\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxF, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxF\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxD, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxD\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxBZ, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxBZ\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxSZ, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxSZ\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxIZ, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxIZ\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxLZ, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxLZ\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxBB, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxBB\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxSB, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxSB\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxIB, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxIB\") \\\n+  template(jdk_internal_vm_vector_VectorPayloadMFMaxLB, \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMFMaxLB\") \\\n+  template(payload_name,                               \"payload\")                                                  \\\n+  template(mfield_name,                                \"mfield\")                                                   \\\n+  template(ETYPE_name,                                 \"ETYPE\")                                                    \\\n+  template(VLENGTH_name,                               \"VLENGTH\")                                                  \\\n@@ -270,0 +320,1 @@\n+  template(jdk_internal_vm_annotation_MultiField_signature,                  \"Ljdk\/internal\/vm\/annotation\/MultiField;\") \\\n@@ -275,0 +326,36 @@\n+  \/* VectorAPI support *\/                                                                         \\\n+  template(vector_VectorPayloadMF8Z_signature,        \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF8Z;\")   \\\n+  template(vector_VectorPayloadMF16Z_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF16Z;\")  \\\n+  template(vector_VectorPayloadMF32Z_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF32Z;\")  \\\n+  template(vector_VectorPayloadMF64Z_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64Z;\")  \\\n+  template(vector_VectorPayloadMF128Z_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128Z;\") \\\n+  template(vector_VectorPayloadMF256Z_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256Z;\") \\\n+  template(vector_VectorPayloadMF512Z_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512Z;\") \\\n+  template(vector_VectorPayloadMF8B_signature,        \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF8B;\")   \\\n+  template(vector_VectorPayloadMF16B_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF16B;\")  \\\n+  template(vector_VectorPayloadMF32B_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF32B;\")  \\\n+  template(vector_VectorPayloadMF64B_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64B;\")  \\\n+  template(vector_VectorPayloadMF128B_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128B;\") \\\n+  template(vector_VectorPayloadMF256B_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256B;\") \\\n+  template(vector_VectorPayloadMF512B_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512B;\") \\\n+  template(vector_VectorPayloadMF64S_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64S;\")  \\\n+  template(vector_VectorPayloadMF128S_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128S;\") \\\n+  template(vector_VectorPayloadMF256S_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256S;\") \\\n+  template(vector_VectorPayloadMF512S_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512S;\") \\\n+  template(vector_VectorPayloadMF64I_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64I;\")  \\\n+  template(vector_VectorPayloadMF128I_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128I;\") \\\n+  template(vector_VectorPayloadMF256I_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256I;\") \\\n+  template(vector_VectorPayloadMF512I_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512I;\") \\\n+  template(vector_VectorPayloadMF64L_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64L;\")  \\\n+  template(vector_VectorPayloadMF128L_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128L;\") \\\n+  template(vector_VectorPayloadMF256L_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256L;\") \\\n+  template(vector_VectorPayloadMF512L_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512L;\") \\\n+  template(vector_VectorPayloadMF64F_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64F;\")  \\\n+  template(vector_VectorPayloadMF128F_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128F;\") \\\n+  template(vector_VectorPayloadMF256F_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256F;\") \\\n+  template(vector_VectorPayloadMF512F_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512F;\") \\\n+  template(vector_VectorPayloadMF64D_signature,       \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF64D;\")  \\\n+  template(vector_VectorPayloadMF128D_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF128D;\") \\\n+  template(vector_VectorPayloadMF256D_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF256D;\") \\\n+  template(vector_VectorPayloadMF512D_signature,      \"Qjdk\/internal\/vm\/vector\/VectorSupport$VectorPayloadMF512D;\") \\\n+                                                                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":96,"deletions":9,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -172,0 +172,1 @@\n+  _is_larval = read_from(stream);\n@@ -195,0 +196,4 @@\n+    if (_is_larval == nullptr) {\n+      _is_larval = new MarkerValue();\n+    }\n+    _is_larval->write_on(stream);\n","filename":"src\/hotspot\/share\/code\/debugInfo.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -132,0 +132,1 @@\n+  ScopeValue*                _is_larval;\n@@ -142,1 +143,1 @@\n-  ObjectValue(int id, ScopeValue* klass, ScopeValue* is_init = nullptr)\n+  ObjectValue(int id, ScopeValue* klass, ScopeValue* is_init = nullptr, ScopeValue* is_larval = nullptr)\n@@ -144,0 +145,1 @@\n+     , _is_larval(is_larval)\n@@ -155,0 +157,1 @@\n+     , _is_larval(nullptr)\n@@ -167,0 +170,1 @@\n+  virtual ScopeValue*         is_larval() const           { return _is_larval; }\n","filename":"src\/hotspot\/share\/code\/debugInfo.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+  Array<MultiFieldInfo>* _multifield_info;\n@@ -58,1 +59,1 @@\n-  inline FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants, int start, int limit);\n+  inline FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants, Array<MultiFieldInfo>* multifield_info, int start, int limit);\n@@ -60,1 +61,1 @@\n-  inline FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants);\n+  inline FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants, Array<MultiFieldInfo>* multifield_info);\n@@ -95,1 +96,5 @@\n-    return field()->name(_constants());\n+    return field()->name(_multifield_info, _constants());\n+  }\n+\n+  int name_index() const {\n+    return field()->name_index();\n@@ -136,0 +141,18 @@\n+  bool is_multifield() const {\n+    return field()->is_multifield();\n+  }\n+\n+  bool is_multifield_base() const {\n+    return field()->is_multifield_base();\n+  }\n+\n+  u2 multifield_base() const {\n+    assert(field()->is_multifield() || field()->is_multifield_base(), \"Must be\");\n+    return field()->is_multifield() ? _multifield_info->at(field()->secondary_index()).base_index() : index();\n+  }\n+\n+  jbyte multifield_index() const {\n+    assert(field()->is_multifield() || field()->is_multifield_base(), \"Must be\");\n+    return field()->is_multifield() ? _multifield_info->at(field()->secondary_index()).multifield_index() : (jbyte)0;\n+  }\n+\n@@ -151,1 +174,1 @@\n-  JavaFieldStream(const InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), 0, k->java_fields_count()) {}\n+  JavaFieldStream(const InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), k->multifield_info(), 0, k->java_fields_count()) {}\n@@ -178,1 +201,0 @@\n-\n@@ -182,1 +204,1 @@\n-  InternalFieldStream(InstanceKlass* k):      FieldStreamBase(k->fieldinfo_stream(), k->constants(), k->java_fields_count(), 0) {}\n+  InternalFieldStream(InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), k->multifield_info(), k->java_fields_count(), 0) {}\n@@ -188,2 +210,2 @@\n-  AllFieldStream(Array<u1>* fieldinfo, ConstantPool* constants): FieldStreamBase(fieldinfo, constants) {}\n-  AllFieldStream(const InstanceKlass* k):      FieldStreamBase(k->fieldinfo_stream(), k->constants()) {}\n+  AllFieldStream(Array<u1>* fieldinfo, ConstantPool* constants, Array<MultiFieldInfo>* multifield_info): FieldStreamBase(fieldinfo, constants, multifield_info) {}\n+  AllFieldStream(const InstanceKlass* k):      FieldStreamBase(k->fieldinfo_stream(), k->constants(), k->multifield_info()) {}\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,0 +2,3 @@\n+<<<<<<< HEAD\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+=======\n@@ -3,0 +6,1 @@\n+>>>>>>> e01ec832189453cc302c7ca8915e69bb63a3d4b1\n@@ -45,0 +49,1 @@\n+#include \"prims\/vectorSupport.hpp\"\n@@ -160,0 +165,3 @@\n+  if (VectorSupport::is_vector_payload_mf(this) || VectorSupport::is_vector(this)) {\n+    return false;\n+  }\n@@ -341,1 +349,2 @@\n-  return InlineTypePassFieldsAsArgs;\n+  return !VectorSupport::skip_value_scalarization(const_cast<InlineKlass*>(this)) &&\n+         InlineTypePassFieldsAsArgs;\n@@ -346,1 +355,3 @@\n-  return InlineTypeReturnedAsFields && (init || return_regs() != nullptr);\n+  return !VectorSupport::skip_value_scalarization(const_cast<InlineKlass*>(this)) &&\n+         InlineTypeReturnedAsFields &&\n+         (init || return_regs() != nullptr);\n@@ -511,0 +522,1 @@\n+#if INCLUDE_CDS\n@@ -549,0 +561,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -136,0 +136,3 @@\n+\/\/ CDS support\n+\n+#if INCLUDE_CDS\n@@ -140,0 +143,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+#include \"prims\/vectorSupport.hpp\"\n@@ -171,0 +172,8 @@\n+FieldInfo MultiFieldInfo::base_field_info(InstanceKlass* ik) {\n+  return ik->field(_base_index);\n+}\n+\n+void MultiFieldInfo::metaspace_pointers_do(MetaspaceClosure* it) {\n+  it->push(&_name);\n+}\n+\n@@ -561,0 +570,1 @@\n+  _multifield_info(nullptr),\n@@ -771,0 +781,4 @@\n+  if (_multifield_info != NULL && !_multifield_info->is_shared()) {\n+    MetadataFactory::free_array<MultiFieldInfo>(loader_data, _multifield_info);\n+  }\n+\n@@ -1014,0 +1028,1 @@\n+        if (ClassFileParser::is_jdk_internal_class(class_name)) continue;\n@@ -1019,0 +1034,1 @@\n+        if (klass && VectorSupport::is_vector(klass)) continue;\n@@ -2836,0 +2852,3 @@\n+  if(_multifield_info != NULL) {\n+    it->push(&_multifield_info);\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -140,13 +140,12 @@\n-class InlineKlassFixedBlock {\n-  Array<SigEntry>** _extended_sig;\n-  Array<VMRegPair>** _return_regs;\n-  address* _pack_handler;\n-  address* _pack_handler_jobject;\n-  address* _unpack_handler;\n-  int* _default_value_offset;\n-  ArrayKlass** _null_free_inline_array_klasses;\n-  int _alignment;\n-  int _first_field_offset;\n-  int _exact_size_in_bytes;\n-\n-  friend class InlineKlass;\n+class InlineKlassFixedBlock : public MetaspaceObj {\n+   Array<SigEntry>** _extended_sig;\n+   Array<VMRegPair>** _return_regs;\n+   address* _pack_handler;\n+   address* _pack_handler_jobject;\n+   address* _unpack_handler;\n+   int* _default_value_offset;\n+   ArrayKlass** _null_free_inline_array_klasses;\n+   int _alignment;\n+   int _first_field_offset;\n+   int _exact_size_in_bytes;\n+   friend class InlineKlass;\n@@ -230,0 +229,3 @@\n+  \/\/ Array containing meta-data generated for multifields\n+  Array<MultiFieldInfo>* _multifield_info;\n+\n@@ -302,1 +304,1 @@\n-  const InlineKlassFixedBlock* _adr_inlineklass_fixed_block;\n+  InlineKlassFixedBlock* _adr_inlineklass_fixed_block;\n@@ -437,0 +439,1 @@\n+  friend class MultiFieldInfo;\n@@ -460,0 +463,11 @@\n+  Array<MultiFieldInfo>* multifield_info() const { return _multifield_info; }\n+\n+  MultiFieldInfo multifield_info(int i) const {\n+    guarantee(_multifield_info != NULL, \"Just checking\");\n+    return _multifield_info->at(i);\n+  }\n+  void set_multifield_info(Array<MultiFieldInfo>* array) {\n+    assert(_multifield_info == NULL, \"Must be initialized only once\");\n+    _multifield_info = array;\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":28,"deletions":14,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-inline Symbol* InstanceKlass::field_name(int index) const { return field(index).name(constants()); }\n+inline Symbol* InstanceKlass::field_name(int index) const { return field(index).name(multifield_info(), constants()); }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -799,1 +799,3 @@\n-    if (vt != nullptr) {\n+    \/\/ Upfront buffering for VectorBox may cause problems in sweeping allocation\n+    \/\/ graph pallets if boxes are removed during unbox-box optimization.\n+    if (vt != nullptr && !result->is_VectorBox()) {\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -510,1 +510,1 @@\n-            format_helper(regalloc, st, init_node, \":\", -1, nullptr);\n+            format_helper(regalloc, st, init_node, \":\", -2, nullptr);\n@@ -512,0 +512,5 @@\n+\n+          Node* larval_node = mcall->in(first_ind++);\n+          assert(larval_node != NULL && larval_node->is_Con(), \"is_larval node not found\");\n+          st->print(\" [is_larval\");\n+          format_helper(regalloc, st, larval_node, \":\", -1, NULL);\n@@ -513,0 +518,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -110,2 +110,1 @@\n-  if (vt != nullptr && phase->type(vt)->filter_speculative(_type) != Type::TOP) {\n-    \/\/ TODO 8325106 Can we avoid cloning?\n+  if (vt != nullptr && !vt->is_VectorBox() && phase->type(vt)->filter_speculative(_type) != Type::TOP) {\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2680,1 +2680,1 @@\n-    progress = merge_through_phi(this, phase->is_IterGVN());\n+    progress = merge_through_phi(this, phase);\n@@ -2744,0 +2744,13 @@\n+      \/\/ FIXME: Skipping pushing VectorBox across Phi\n+      \/\/ since they are special type of InlineTypeNode\n+      \/\/ carrying VBA as oop fields.\n+      \/\/ We have a seperate handling for pushing VectorBoxes\n+      \/\/ across PhiNodes in merge_through_phi.\n+      \/\/ In long run we should eliminate VectorBox which is\n+      \/\/ just a light weight wrapper of InlineTypeNode.\n+      \/\/ Only reason to keep VectorBox was to defer buffering\n+      \/\/ to a later stage and associate VBA which carry\n+      \/\/ JVM state to reinitialize GraphKit before buffering.\n+      if (n->is_VectorBox()) {\n+        return false;\n+      }\n@@ -2844,1 +2857,1 @@\n-      } else if (def->Opcode() == Op_VectorBox) { \/\/ leaf\n+      } else if (def->is_InlineType()) { \/\/ leaf\n@@ -2861,1 +2874,2 @@\n-Node* PhiNode::merge_through_phi(Node* root_phi, PhaseIterGVN* igvn) {\n+Node* PhiNode::merge_through_phi(Node* root_phi, PhaseGVN *phase) {\n+  PhaseIterGVN *igvn = phase->is_IterGVN();\n@@ -2907,3 +2921,7 @@\n-  Node* new_vbox_phi = clone_through_phi(root_phi, btype, VectorBoxNode::Box,   igvn);\n-  Node* new_vect_phi = clone_through_phi(root_phi, vtype, VectorBoxNode::Value, igvn);\n-  return new VectorBoxNode(igvn->C, new_vbox_phi, new_vect_phi, btype, vtype);\n+  const Type*        ptype = cached_vbox->field_value(0)->bottom_type();\n+\n+  Node* new_payload_phi = clone_through_phi(root_phi, ptype, InlineTypeNode::get_Values_idx(), igvn);\n+  Node* new_vector_phi = clone_through_phi(new_payload_phi, vtype, InlineTypeNode::get_Values_idx(), igvn);\n+  Node* new_vbox_phi = clone_through_phi(root_phi, btype, InlineTypeNode::get_Oop_idx(), igvn);\n+\n+  return VectorBoxNode::make_box_node(*igvn, phase->C, new_vbox_phi, new_vector_phi, btype, vtype);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-  static Node* merge_through_phi(Node* root_phi, PhaseIterGVN* igvn);\n+  static Node* merge_through_phi(Node* root_phi, PhaseGVN* phase);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2774,9 +2774,0 @@\n-  assert(EnableVectorSupport || !has_vbox_nodes(), \"sanity\");\n-  if (EnableVectorSupport && has_vbox_nodes()) {\n-    TracePhase tp(\"\", &timers[_t_vector]);\n-    PhaseVector pv(igvn);\n-    pv.optimize_vector_boxes();\n-    if (failing())  return;\n-    print_method(PHASE_ITER_GVN_AFTER_VECTOR, 2);\n-  }\n-  assert(!has_vbox_nodes(), \"sanity\");\n@@ -2796,0 +2787,13 @@\n+  \/\/ Process inline type nodes now that all inlining is over\n+  process_inline_types(igvn);\n+\n+  assert(EnableVectorSupport || !has_vbox_nodes(), \"sanity\");\n+  if (EnableVectorSupport && has_vbox_nodes()) {\n+    TracePhase tp(\"\", &timers[_t_vector]);\n+    PhaseVector pv(igvn);\n+    pv.optimize_vector_boxes();\n+    if (failing())  return;\n+    print_method(PHASE_ITER_GVN_AFTER_VECTOR, 2);\n+  }\n+  assert(!has_vbox_nodes(), \"sanity\");\n+\n@@ -2800,3 +2804,0 @@\n-  \/\/ Process inline type nodes now that all inlining is over\n-  process_inline_types(igvn);\n-\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n@@ -1116,1 +1117,1 @@\n-      int      size  = field->type()->size();\n+      int size = InlineTypeNode::stack_size_for_field(field);\n@@ -1879,1 +1880,0 @@\n-        assert(_gvn.type(arg)->is_zero_type() && !t->inline_klass()->is_null_free(), \"Unexpected argument type\");\n@@ -3480,1 +3480,1 @@\n-        assert(stopped() || !toop->is_inlinetypeptr() || obj->is_InlineType(), \"should have been scalarized\");\n+        assert(stopped() || !toop->is_inlinetypeptr() || obj->is_InlineType() || obj->bottom_type()->is_inlinetypeptr(), \"should have been scalarized\");\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -930,1 +930,1 @@\n-  Node* unbox_vector(Node* in, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem, bool shuffle_to_vector = false);\n+  Node* unbox_vector(Node* in, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,26 @@\n+#include \"opto\/vectornode.hpp\"\n+\n+int  InlineTypeNode::stack_size_for_field(ciField* field) {\n+  return field->is_multifield_base()\n+             ? field->type()->elem_word_count()\n+             : field->type()->size();\n+}\n+\n+bool InlineTypeNode::is_multifield_scalarized(BasicType bt, int vec_len) {\n+  if (!is_java_primitive(bt) ||\n+      !Matcher::match_rule_supported_vector(Op_LoadVector, vec_len, bt)  ||\n+      !Matcher::match_rule_supported_vector(Op_StoreVector, vec_len, bt) ||\n+      !Matcher::match_rule_supported_vector(Op_Replicate, vec_len, bt)) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n+bool InlineTypeNode::is_multifield_scalarized(ciField* field) {\n+  if (!field->is_multifield_base()) {\n+    return true;\n+  }\n+  int field_count = field->secondary_fields_count();\n+  BasicType bt = field->type()->basic_type();\n+  return is_multifield_scalarized(bt, field_count);\n+}\n@@ -82,0 +108,4 @@\n+      if (vt->is_multifield_base(i) &&\n+          Matcher::vector_size_supported(type->basic_type(), vt->secondary_fields_count(i))) {\n+        t = TypeVect::make(t, vt->secondary_fields_count(i));\n+      }\n@@ -115,0 +145,1 @@\n+  assert(this->Opcode() == other->Opcode(), \"\");\n@@ -244,0 +275,15 @@\n+int InlineTypeNode::secondary_fields_count(uint index) const {\n+  assert(is_multifield_base(index), \"non-multifield field at index\");\n+  return inline_klass()->declared_nonstatic_field_at(index)->secondary_fields_count();\n+}\n+\n+bool InlineTypeNode::is_multifield(uint index) const {\n+  assert(index < field_count(), \"index out of bounds\");\n+  return inline_klass()->declared_nonstatic_field_at(index)->is_multifield();\n+}\n+\n+bool InlineTypeNode::is_multifield_base(uint index) const {\n+  assert(index < field_count(), \"index out of bounds\");\n+  return inline_klass()->declared_nonstatic_field_at(index)->is_multifield_base();\n+}\n+\n@@ -271,1 +317,1 @@\n-  if (!igvn->type(get_is_init())->is_int()->is_con(1)) {\n+  if (!vk->is_null_free()) {\n@@ -276,0 +322,4 @@\n+\n+  AllocateNode* alloc = AllocateNode::Ideal_allocation(get_oop());\n+  sfpt->add_req(igvn->intcon(alloc && alloc->_larval ? 1 : 0));\n+\n@@ -449,1 +499,1 @@\n-      if (base->is_Con() && !is_array && !mismatched) {\n+      if (base->is_Con() && !is_array && !mismatched && !is_multifield_base(i)) {\n@@ -466,0 +516,1 @@\n+        BasicType bt = type2field[ft->basic_type()];\n@@ -468,1 +519,0 @@\n-        BasicType bt = type2field[ft->basic_type()];\n@@ -471,1 +521,7 @@\n-        value = kit->access_load_at(base, adr, adr_type, val_type, bt, is_array ? (decorators | IS_ARRAY) : decorators);\n+        ciField* field = inline_klass()->get_field_by_offset(field_offset(i), false);\n+        bool load_bundle = !InlineTypeNode::is_multifield_scalarized(field);\n+        if (load_bundle) {\n+          value = kit->gvn().transform(LoadVectorNode::make(0, kit->control(), kit->memory(adr), adr, adr_type, ft->bundle_size(), bt));\n+        } else {\n+          value = kit->access_load_at(base, adr, adr_type, val_type, bt, is_array ? (decorators | IS_ARRAY) : decorators);\n+        }\n@@ -502,0 +558,1 @@\n+  int field_idx = 0;\n@@ -511,1 +568,3 @@\n-      \/\/ Store field value to memory\n+      int vec_len = ft->bundle_size();\n+      BasicType bt = type2field[ft->basic_type()];\n+      const Type* val_type = Type::get_const_type(ft);\n@@ -514,4 +573,8 @@\n-      BasicType bt = type2field[ft->basic_type()];\n-      const Type* val_type = Type::get_const_type(ft);\n-      bool is_array = (kit->gvn().type(base)->isa_aryptr() != nullptr);\n-      kit->access_store_at(base, adr, adr_type, value, val_type, bt, is_array ? (decorators | IS_ARRAY) : decorators);\n+      if (value->bottom_type()->isa_vect()) {\n+        assert(value->bottom_type()->is_vect()->length() == (uint)vec_len, \"\");\n+        Node* store = kit->gvn().transform(StoreVectorNode::make(0, kit->control(), kit->memory(adr), adr, adr_type, value, vec_len));\n+        kit->set_memory(store, adr_type);\n+      } else {\n+        bool is_array = (kit->gvn().type(base)->isa_aryptr() != nullptr);\n+        kit->access_store_at(base, adr, adr_type, value, val_type, bt, is_array ? (decorators | IS_ARRAY) : decorators);\n+      }\n@@ -726,1 +789,1 @@\n-  if (oop->isa_InlineType() && !phase->type(oop)->maybe_null()) {\n+  if (oop->isa_InlineType() && !oop->isa_VectorBox() && !phase->type(oop)->maybe_null()) {\n@@ -757,1 +820,1 @@\n-        if (alloc != nullptr && alloc->in(AllocateNode::InlineType) == this && !alloc->_is_scalar_replaceable) {\n+        if (alloc != nullptr && alloc->in(AllocateNode::InlineType) == this && !alloc->_is_scalar_replaceable && !alloc->_larval) {\n@@ -789,0 +852,13 @@\n+Node* InlineTypeNode::default_value(PhaseGVN& gvn, ciType* field_type, ciInlineKlass* klass, int index) {\n+  BasicType bt = field_type->basic_type();\n+  int vec_len = field_type->bundle_size();\n+  Node* value = gvn.zerocon(field_type->basic_type());\n+  bool is_multifield_base = klass->declared_nonstatic_field_at(index)->is_multifield_base();\n+  if (is_multifield_base &&\n+      is_java_primitive(bt) &&\n+      Matcher::match_rule_supported_vector(Op_Replicate, vec_len, bt)) {\n+      value = gvn.transform(VectorNode::scalar2vector(value, vec_len, Type::get_const_type(field_type), false));\n+  }\n+  return value;\n+}\n+\n@@ -806,1 +882,1 @@\n-    Node* value = gvn.zerocon(ft->basic_type());\n+    Node* value = default_value(gvn, ft, vk, i);\n@@ -851,1 +927,2 @@\n-    if (!gvn->type(value)->is_zero_type()) {\n+    if (!gvn->type(value)->is_zero_type() &&\n+        !VectorNode::is_all_zeros_vector(value)) {\n@@ -969,1 +1046,1 @@\n-InlineTypeNode* InlineTypeNode::make_larval(GraphKit* kit, bool allocate) const {\n+Node* InlineTypeNode::make_larval(GraphKit* kit) const {\n@@ -971,12 +1048,7 @@\n-  InlineTypeNode* res = make_uninitialized(kit->gvn(), vk);\n-  for (uint i = 1; i < req(); ++i) {\n-    res->set_req(i, in(i));\n-  }\n-  if (allocate) {\n-    \/\/ Re-execute if buffering triggers deoptimization\n-    PreserveReexecuteState preexecs(kit);\n-    kit->jvms()->set_should_reexecute(true);\n-    Node* klass_node = kit->makecon(TypeKlassPtr::make(vk));\n-    Node* alloc_oop  = kit->new_instance(klass_node, nullptr, nullptr, true);\n-    AllocateNode* alloc = AllocateNode::Ideal_allocation(alloc_oop);\n-    alloc->_larval = true;\n+  \/\/ Re-execute if buffering triggers deoptimization\n+  PreserveReexecuteState preexecs(kit);\n+  kit->jvms()->set_should_reexecute(true);\n+  Node* klass_node = kit->makecon(TypeKlassPtr::make(vk));\n+  Node* alloc_oop  = kit->new_instance(klass_node, nullptr, nullptr, true);\n+  AllocateNode* alloc = AllocateNode::Ideal_allocation(alloc_oop);\n+  alloc->_larval = true;\n@@ -985,8 +1057,2 @@\n-    store(kit, alloc_oop, alloc_oop, vk);\n-    res->set_oop(kit->gvn(), alloc_oop);\n-  }\n-  \/\/ TODO 8239003\n-  \/\/res->set_type(TypeInlineType::make(vk, true));\n-  res = kit->gvn().transform(res)->as_InlineType();\n-  assert(!allocate || res->is_allocated(&kit->gvn()), \"must be allocated\");\n-  return res;\n+  store(kit, alloc_oop, alloc_oop, vk);\n+  return alloc_oop;\n@@ -995,2 +1061,1 @@\n-InlineTypeNode* InlineTypeNode::finish_larval(GraphKit* kit) const {\n-  Node* obj = get_oop();\n+InlineTypeNode* InlineTypeNode::finish_larval(GraphKit* kit, Node* obj, const TypeInstPtr* vk) {\n@@ -1008,9 +1073,1 @@\n-  ciInlineKlass* vk = inline_klass();\n-  InlineTypeNode* res = make_uninitialized(kit->gvn(), vk);\n-  for (uint i = 1; i < req(); ++i) {\n-    res->set_req(i, in(i));\n-  }\n-  \/\/ TODO 8239003\n-  \/\/res->set_type(TypeInlineType::make(vk, false));\n-  res = kit->gvn().transform(res)->as_InlineType();\n-  return res;\n+  return InlineTypeNode::make_from_oop(kit, obj, vk->inline_klass(), !vk->maybe_null());\n@@ -1168,1 +1225,20 @@\n-      if (multi->is_Start()) {\n+      ciInlineKlass* ik = inline_klass();\n+      ciField* field = ik->declared_nonstatic_field_at(i);\n+      if (!InlineTypeNode::is_multifield_scalarized(field)) {\n+        Node* not_null_oop =  NULL;\n+        if (multi->is_Call()) {\n+          if (in) {\n+            not_null_oop = multi->as_Call()->in(base_input);\n+          } else {\n+            not_null_oop =  multi->as_Call()->proj_out(TypeFunc::Parms);\n+          }\n+          assert(not_null_oop->bottom_type()->isa_instptr(), \"\");\n+          load(kit, not_null_oop, not_null_oop, ik, visited, \/* holder_offset *\/ 0);\n+          parm = field_value(i);\n+        } else if (multi->is_Start()) {\n+          assert(in, \"return from start?\");\n+          parm = default_value(gvn, type, ik, i);\n+        } else {\n+          assert(false, \"unhandled case\");\n+        }\n+      } else if (multi->is_Start()) {\n@@ -1199,1 +1275,1 @@\n-      base_input += type->size();\n+      base_input += (type->size() \/ type->bundle_size());\n@@ -1229,1 +1305,1 @@\n-    if (alloc != nullptr && alloc->in(AllocateNode::InlineType) == this && !alloc->_is_scalar_replaceable) {\n+    if (alloc != nullptr && alloc->in(AllocateNode::InlineType) == this && !alloc->_is_scalar_replaceable && !alloc->_larval) {\n@@ -1271,1 +1347,1 @@\n-    Node* value = gvn.zerocon(ft->basic_type());\n+    Node* value = default_value(gvn, ft, vk, i);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":125,"deletions":49,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"opto\/matcher.hpp\"\n@@ -61,3 +62,0 @@\n-  \/\/ Get the klass defining the field layout of the inline type\n-  ciInlineKlass* inline_klass() const { return type()->inline_klass(); }\n-\n@@ -69,1 +67,1 @@\n-  bool is_default(PhaseGVN* gvn) const;\n+  virtual bool is_default(PhaseGVN* gvn) const;\n@@ -80,0 +78,3 @@\n+public:\n+  \/\/ Get the klass defining the field layout of the inline type\n+  ciInlineKlass* inline_klass() const { return type()->inline_klass(); }\n@@ -101,0 +102,5 @@\n+  static bool is_multifield_scalarized(ciField* field);\n+  static bool is_multifield_scalarized(BasicType bt, int vec_len);\n+\n+  static int stack_size_for_field(ciField* field);\n+\n@@ -104,0 +110,2 @@\n+  static Node* default_value(PhaseGVN& gvn, ciType* field_type, ciInlineKlass* klass, int index);\n+\n@@ -121,0 +129,4 @@\n+  \/\/ Get indices for inputs.\n+  static int   get_Oop_idx()    { return InlineTypeNode::Oop; }\n+  static int   get_Values_idx() { return InlineTypeNode::Values; }\n+\n@@ -122,2 +134,4 @@\n-  uint          field_count() const { return req() - Values; }\n-  Node*         field_value(uint index) const;\n+  virtual uint  field_count() const { return req() - Values; }\n+  virtual Node* field_value(uint index) const;\n+  uint          field_index(int offset) const;\n+\n@@ -125,2 +139,3 @@\n-  void      set_field_value(uint index, Node* value);\n-  void      set_field_value_by_offset(int offset, Node* value);\n+  void          set_field_value(uint index, Node* value);\n+\n+  void          set_field_value_by_offset(int offset, Node* value);\n@@ -128,1 +143,3 @@\n-  uint          field_index(int offset) const;\n+  bool          is_multifield(uint index) const;\n+  bool          is_multifield_base(uint index) const;\n+  int           secondary_fields_count(uint index) const;\n@@ -161,2 +178,2 @@\n-  InlineTypeNode* make_larval(GraphKit* kit, bool allocate) const;\n-  InlineTypeNode* finish_larval(GraphKit* kit) const;\n+  Node* make_larval(GraphKit* kit) const;\n+  static InlineTypeNode* finish_larval(GraphKit* kit, Node* obj, const TypeInstPtr* vk);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":28,"deletions":11,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2315,1 +2315,1 @@\n- }\n+  }\n@@ -2335,0 +2335,11 @@\n+  if (_gvn.type(base)->is_inlinetypeptr() && is_store) {\n+    \/\/ FIXME: Larval bit check is needed to preserve the semantics of value\n+    \/\/ objects which can be mutated only if its _larval bit is set. Since\n+    \/\/ the oop is not always an AllocateNode, we have to find an utility way\n+    \/\/ to check the larval state for all kind of oops.\n+    AllocateNode* alloc = AllocateNode::Ideal_allocation(base);\n+    if (alloc != nullptr) {\n+      assert(alloc->_larval, \"InlineType instance must be in _larval state for unsafe put operation.\\n\");\n+    }\n+  }\n+\n@@ -2363,0 +2374,5 @@\n+        \/\/ Skip over direct field access for VectorPayloadMF* class instances since\n+        \/\/ multifield is loaded into vector, alternatively we can create a lane\n+        \/\/ extraction logic. Given that unsafe put operations over vector payloads are part\n+        \/\/ of fallback implementation, for the time being suboptimality should not be major\n+        \/\/ concern.\n@@ -2364,1 +2380,1 @@\n-        if (field != nullptr) {\n+        if (field != nullptr && !VectorSupport::is_vector_payload_mf(vk->get_InlineKlass())) {\n@@ -2612,5 +2628,0 @@\n-  if (argument(1)->is_InlineType() && is_store) {\n-    InlineTypeNode* value = InlineTypeNode::make_from_oop(this, base, _gvn.type(argument(1))->inline_klass());\n-    value = value->make_larval(this, false);\n-    replace_in_map(argument(1), value);\n-  }\n@@ -2633,1 +2644,1 @@\n-  set_result(value->as_InlineType()->make_larval(this, true));\n+  set_result(value->as_InlineType()->make_larval(this));\n@@ -2640,6 +2651,4 @@\n-  if (!buffer->is_InlineType()) {\n-    return false;\n-  }\n-  InlineTypeNode* vt = buffer->as_InlineType();\n-  if (!vt->is_allocated(&_gvn)) {\n-    return false;\n+\n+  \/\/ Incoming value should be a buffer with inline type and not InlineTypeNode.\n+  if (buffer->is_InlineType() || !buffer->bottom_type()->is_inlinetypeptr()) {\n+     return false;\n@@ -2647,2 +2656,8 @@\n-  \/\/ TODO 8239003 Why is this needed?\n-  if (AllocateNode::Ideal_allocation(vt->get_oop()) == nullptr) {\n+\n+  \/\/ Allocation node must exist to generate IR for transitioning allocation out\n+  \/\/ of larval state. Disable the intrinsic and take unsafe slow path if allocation\n+  \/\/ is not reachable, this can happen if makePrivateBuffer was not intrinsified and\n+  \/\/ was falling over to unsafe implementation which return a larval transitioned oop.\n+  if (AllocateNode::Ideal_allocation(buffer) == nullptr) {\n+    \/\/ Oop returned by Unsafe_finishPrivateBuffer native method\n+    \/\/ will automatically re-materialize InlineTypeNode.\n@@ -2651,1 +2666,0 @@\n-\n@@ -2656,2 +2670,2 @@\n-\n-  set_result(vt->finish_larval(this));\n+  const TypeInstPtr* ptr = buffer->bottom_type()->isa_instptr();\n+  set_result(InlineTypeNode::finish_larval(this, buffer, ptr));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":33,"deletions":19,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -112,1 +112,3 @@\n-      if (C->inlining_incrementally() && res->is_InlineType()) {\n+      \/\/ VectorBoxes should be treated as special InlineTypeNodes, we will defer its buffering\n+      \/\/ to a later stage to give opportunity for consumption by subsequent expanders.\n+      if (C->inlining_incrementally() && res->is_InlineType() && !res->is_VectorBox()) {\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -869,0 +869,6 @@\n+  if (iklass && iklass->is_inlinetype()) {\n+    \/\/ Value object has two additional inputs before the non-static fields\n+    sfpt->add_req(_igvn.intcon(1));\n+    sfpt->add_req(_igvn.intcon(alloc->_larval ? 1 : 0));\n+  }\n+\n@@ -983,1 +989,4 @@\n-\n+  \/\/ Bufferes in larval state should not be scalarized.\n+  if (alloc->_larval) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1250,1 +1250,6 @@\n-  if (base != nullptr && base->is_InlineType() && offset > oopDesc::klass_offset_in_bytes()) {\n+  if (base != nullptr && base->is_InlineType() &&\n+      \/\/ Multifields are loaded into vectors and lane level loads needs\n+      \/\/ an explicit extraction operation.\n+      (bottom_type()->isa_vect() ||\n+       !VectorSupport::is_vector_payload_mf(base->as_InlineType()->inline_klass()->get_InlineKlass())) &&\n+      offset > oopDesc::klass_offset_in_bytes()) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -177,0 +177,1 @@\n+class VectorBoxNode;\n@@ -740,0 +741,1 @@\n+        DEFINE_CLASS_ID(VectorBox, InlineType, 0)\n@@ -987,0 +989,1 @@\n+  DEFINE_CLASS_QUERY(VectorBox)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -928,1 +928,8 @@\n-    if (tf()->returns_inline_type_as_fields()) {\n+    if (res->isa_InlineType() && VectorSupport::skip_value_scalarization(res->as_InlineType()->inline_klass()->get_InlineKlass())) {\n+      InlineTypeNode* vt = res->as_InlineType();\n+      \/\/ Prevent returning uninitialized VBA, this will make associated box useless and\n+      \/\/ will be swept by dead code eliminator. Once VBA is expanded and initialized during\n+      \/\/ PhaseVector box users will be tied to newly allocated and initialized objects.\n+      assert(vt->get_is_buffered(), \"\");\n+      ret->add_req(vt->get_is_buffered()->get_int() ? vt->get_oop() : res);\n+    } else if (tf()->returns_inline_type_as_fields()) {\n@@ -1149,1 +1156,1 @@\n-  \/\/ record exit from a method if compiled while Dtrace is turned on.\n+  \/\/ record exit from a method if compiled while Dtrace is returned on.\n@@ -1779,3 +1786,6 @@\n-          \/\/ Scalarize null in src block to be able to merge it with inline type in target block\n-          assert(gvn().type(n)->is_zero_type(), \"Should have been scalarized\");\n-          map()->set_req(j, InlineTypeNode::make_null(gvn(), t->inline_klass()));\n+          AllocateNode* alloc = AllocateNode::Ideal_allocation(n);\n+          if (alloc == nullptr || !alloc->_larval) {\n+            \/\/ Scalarize null in src block to be able to merge it with inline type in target block\n+            assert(gvn().type(n)->is_zero_type(), \"Should have been scalarized\");\n+            map()->set_req(j, InlineTypeNode::make_null(gvn(), t->inline_klass()));\n+          }\n@@ -1886,1 +1896,1 @@\n-      } else if (m->is_InlineType() && m->as_InlineType()->has_phi_inputs(r)) {\n+      } else if (m->is_InlineType() && n->is_InlineType() && m->as_InlineType()->has_phi_inputs(r)) {\n@@ -1925,1 +1935,1 @@\n-      if (phi != nullptr && phi->bottom_type()->is_inlinetypeptr()) {\n+      if (phi != nullptr && phi->bottom_type()->is_inlinetypeptr() && m->is_InlineType() && n->is_InlineType()) {\n@@ -2377,0 +2387,8 @@\n+    \/\/ Buffer vector return values, for regular inline object caller\n+    \/\/ expects scalarized fields to be passed back.\n+    bool is_vector_value = value->is_InlineType() &&\n+                           VectorSupport::skip_value_scalarization(value->as_InlineType()->inline_klass()->get_InlineKlass());\n+    \/\/ Defer returning VectorBoxAllocation node, they are currently uninitialized buffer placeholders.\n+    \/\/ During box expansion VBAs are expanded into Allocation IR and initialized with wrapped vectors\n+    \/\/ and replaces all the uses of box.\n+    bool skip_scalarization = is_vector_value && Compile::current()->inlining_incrementally();\n@@ -2378,2 +2396,2 @@\n-    if ((tf()->returns_inline_type_as_fields() || (_caller->has_method() && !Compile::current()->inlining_incrementally())) &&\n-        return_type->is_inlinetypeptr()) {\n+    if (!is_vector_value && ((tf()->returns_inline_type_as_fields() || (_caller->has_method() && !Compile::current()->inlining_incrementally())) &&\n+        return_type->is_inlinetypeptr())) {\n@@ -2393,1 +2411,2 @@\n-    } else if (value->is_InlineType()) {\n+    } else if (skip_scalarization ||\n+               (value->Opcode() != Op_VectorBox && value->is_InlineType())) {\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"opto\/vectornode.hpp\"\n@@ -54,0 +55,1 @@\n+    assert(!field->is_multifield_base() && !field->is_multifield(), \"Illegal direct read access to multifield through getfield bytecode.\");\n@@ -94,1 +96,6 @@\n-    int obj_depth = is_get ? 0 : field->type()->size();\n+    int obj_depth = 0;\n+    if (!is_get) {\n+      const ciType* ftype = field->type();\n+      \/\/ A non-scalarized multifield is represented as a single field.\n+      obj_depth = field->is_multifield_base() ? ftype->elem_word_count() : ftype->size();\n+    }\n@@ -147,0 +154,5 @@\n+  if (field->is_multifield_base() || field->is_multifield()) {\n+    \/\/ A read access to multifield should be preformed using Unsafe.get* APIs.\n+    assert(false, \"Illegal direct read access to mutifield through getfield bytecode\");\n+  }\n+\n@@ -237,1 +249,1 @@\n-    \/\/if (_method->is_object_constructor() && _method->holder()->is_inlinetype()) {\n+    \/\/if (_method->is_object_constructor() && _method->holder()->is_inlinetype())\n@@ -270,0 +282,7 @@\n+    } else if (field->is_multifield_base()) {\n+      assert(!InlineTypeNode::is_multifield_scalarized(field), \"Sanity check\");\n+      \/\/ Only possible non-unsafe access to multifield base is within vector payload constructors\n+      \/\/ for initializing entire bundle with a default value.\n+      val = _gvn.transform(VectorNode::scalar2vector(val, field->secondary_fields_count(), Type::get_const_type(field->type()), false));\n+    } else if (field->is_multifield()) {\n+      assert(false, \"Illegal direct write access to mutifield through putfield bytecode\");\n@@ -273,1 +292,1 @@\n-    InlineTypeNode* new_vt = obj->as_InlineType()->clone_if_required(&_gvn, _map);\n+    InlineTypeNode* new_vt = obj->clone()->as_InlineType();\n@@ -275,0 +294,1 @@\n+\n@@ -283,3 +303,2 @@\n-    \/\/ TODO 8325106 Double check and explain these checks\n-    if ((!_caller->has_method() || C->inlining_incrementally() || _caller->method()->is_object_constructor()) && new_vt->is_allocated(&gvn())) {\n-      assert(new_vt->as_InlineType()->is_allocated(&gvn()), \"must be buffered\");\n+    \/\/ TODO 8325106 needed? I think so, because although we are incrementally inlining, we might not incrementally inline this very method\n+    if ((!_caller->has_method() || C->inlining_incrementally()) && new_vt->is_allocated(&gvn())) {\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"opto\/vectornode.hpp\"\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,8 @@\n+static bool is_vector_mask(ciKlass* klass) {\n+  return klass->is_subclass_of(ciEnv::current()->vector_VectorMask_klass());\n+}\n+\n+static bool is_vector_shuffle(ciKlass* klass) {\n+  return klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n+}\n+\n@@ -62,8 +70,0 @@\n-static bool is_vector_mask(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorMask_klass());\n-}\n-\n-static bool is_vector_shuffle(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n-}\n-\n@@ -157,2 +157,15 @@\n-  const TypeVect* vt = TypeVect::make(elem_bt, num_elem, is_vector_mask(vbox_type->instance_klass()));\n-  VectorBoxNode* vbox = new VectorBoxNode(C, ret, vector, vbox_type, vt);\n+\n+  if (is_vector_shuffle(vbox_type->instance_klass())) {\n+    assert(elem_bt == T_BYTE, \"must be consistent with shuffle representation\");\n+  }\n+\n+  \/\/ VectorMask format conversion\n+  if (is_vector_mask(vbox_type->instance_klass()) &&\n+      (vector->bottom_type()->isa_vectmask() || elem_bt != T_BOOLEAN)) {\n+    vector = gvn().transform(VectorStoreMaskNode::make(gvn(), vector, elem_bt, num_elem));\n+    elem_bt = T_BOOLEAN;\n+    assert(vector->bottom_type()->is_vect()->element_basic_type() == elem_bt,\n+           \"must be consistent with mask representation\");\n+  }\n+  const TypeVect* vt = TypeVect::make(elem_bt, num_elem);\n+  Node* vbox = VectorBoxNode::make_box_node(gvn(), C, ret, vector, vbox_type, vt);\n@@ -162,1 +175,1 @@\n-Node* GraphKit::unbox_vector(Node* v, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem, bool shuffle_to_vector) {\n+Node* GraphKit::unbox_vector(Node* v, const TypeInstPtr* vbox_type, BasicType elem_bt, int num_elem) {\n@@ -171,0 +184,1 @@\n+\n@@ -172,2 +186,9 @@\n-  const TypeVect* vt = TypeVect::make(elem_bt, num_elem, is_vector_mask(vbox_type->instance_klass()));\n-  Node* unbox = gvn().transform(new VectorUnboxNode(C, vt, v, merged_memory(), shuffle_to_vector));\n+  BasicType unbox_bt = elem_bt;\n+  if (is_vector_mask(vbox_type->instance_klass())) {\n+    unbox_bt = T_BOOLEAN;\n+  }\n+  const TypeVect* vt = TypeVect::make(unbox_bt, num_elem);\n+  Node* unbox = gvn().transform(new VectorUnboxNode(C, vt, v, merged_memory()));\n+  if (is_vector_mask(vbox_type->instance_klass())) {\n+    unbox = gvn().transform(new VectorLoadMaskNode(unbox, TypeVect::makemask(elem_bt, num_elem)));\n+  }\n@@ -732,1 +753,1 @@\n-  Node* mask_vec = unbox_vector(mask, mask_box_type, elem_bt, num_elem, true);\n+  Node* mask_vec = unbox_vector(mask, mask_box_type, elem_bt, num_elem);\n@@ -805,1 +826,4 @@\n-  Node* shuffle_vec = unbox_vector(shuffle, shuffle_box_type, T_BYTE, num_elem, true);\n+  Node* shuffle_vec = unbox_vector(shuffle, shuffle_box_type, T_BYTE, num_elem);\n+  if (shuffle_vec == nullptr) {\n+    return false;\n+  }\n@@ -2075,1 +2099,0 @@\n-  BasicType shuffle_bt = elem_bt;\n@@ -2117,1 +2140,1 @@\n-  Node* shuffle = unbox_vector(argument(6), shbox_type, shuffle_bt, num_elem);\n+  Node* shuffle = unbox_vector(argument(6), shbox_type, T_BYTE, num_elem);\n@@ -2137,0 +2160,1 @@\n+  shuffle = gvn().transform(new VectorLoadShuffleNode(shuffle, TypeVect::make(elem_bt, num_elem)));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":41,"deletions":17,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"opto\/inlinetypenode.hpp\"\n@@ -927,2 +928,1 @@\n-    return is_integral_type(n->bottom_type()->is_vect()->element_basic_type()) &&\n-           is_con(n->in(1), 0);\n+    return n->in(1)->bottom_type()->is_zero_type();\n@@ -1355,0 +1355,17 @@\n+Node* VectorLoadMaskNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  if (in(1)->Opcode() == Op_VectorStoreMask) {\n+    if (Type::cmp(bottom_type(), in(1)->in(1)->bottom_type()) == 0) {\n+      \/\/ \/\/ Handled by VectorLoadMaskNode::Identity()\n+    } else {\n+      const TypeVect* out_vt = vect_type();\n+      const TypeVect* in_vt = in(1)->in(1)->bottom_type()->is_vect();\n+      if (out_vt->length() == in_vt->length() &&\n+          out_vt->length_in_bytes() == in_vt->length_in_bytes()) {\n+        const TypeVect* vmask_type = TypeVect::makemask(out_vt->element_basic_type(), out_vt->length());\n+        return new VectorMaskCastNode(in(1)->in(1), vmask_type);\n+      }\n+    }\n+  }\n+  return VectorNode::Ideal(phase, can_reshape);\n+}\n+\n@@ -1356,1 +1373,1 @@\n-  BasicType out_bt = type()->is_vect()->element_basic_type();\n+  BasicType out_bt = vect_type()->element_basic_type();\n@@ -1361,0 +1378,5 @@\n+  \/\/ VectorLoadMask (VectorStoreMask mask) ==> mask\n+  if (in(1)->Opcode() == Op_VectorStoreMask &&\n+      Type::cmp(bottom_type(), in(1)->in(1)->bottom_type()) == 0) {\n+    return in(1)->in(1);\n+  }\n@@ -1685,38 +1707,18 @@\n-Node* VectorUnboxNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n-  Node* n = obj()->uncast();\n-  if (EnableVectorReboxing && n->Opcode() == Op_VectorBox) {\n-    if (Type::cmp(bottom_type(), n->in(VectorBoxNode::Value)->bottom_type()) == 0) {\n-      \/\/ Handled by VectorUnboxNode::Identity()\n-    } else {\n-      VectorBoxNode* vbox = static_cast<VectorBoxNode*>(n);\n-      ciKlass* vbox_klass = vbox->box_type()->instance_klass();\n-      const TypeVect* in_vt = vbox->vec_type();\n-      const TypeVect* out_vt = type()->is_vect();\n-\n-      if (in_vt->length() == out_vt->length()) {\n-        Node* value = vbox->in(VectorBoxNode::Value);\n-\n-        bool is_vector_mask    = vbox_klass->is_subclass_of(ciEnv::current()->vector_VectorMask_klass());\n-        bool is_vector_shuffle = vbox_klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n-        if (is_vector_mask) {\n-          \/\/ VectorUnbox (VectorBox vmask) ==> VectorMaskCast vmask\n-          const TypeVect* vmask_type = TypeVect::makemask(out_vt->element_basic_type(), out_vt->length());\n-          return new VectorMaskCastNode(value, vmask_type);\n-        } else if (is_vector_shuffle) {\n-          if (!is_shuffle_to_vector()) {\n-            \/\/ VectorUnbox (VectorBox vshuffle) ==> VectorLoadShuffle vshuffle\n-            return new VectorLoadShuffleNode(value, out_vt);\n-          }\n-        } else {\n-          \/\/ Vector type mismatch is only supported for masks and shuffles, but sometimes it happens in pathological cases.\n-        }\n-      } else {\n-        \/\/ Vector length mismatch.\n-        \/\/ Sometimes happen in pathological cases (e.g., when unboxing happens in effectively dead code).\n-      }\n-    }\n-  }\n-  return nullptr;\n-}\n-\n-  Node* n = obj()->uncast();\n+  Node* n = obj();\n+  assert(n->is_InlineType(), \"\");\n+  if (!n->is_VectorBox()) {\n+    \/\/ FIXME: Directly return Vector loaded from multi-field for concrete\n+    \/\/ vector InlineType nodes. This can save deferring unbox expansion.\n+    \/\/ For masks\/shuffle emit additional pruning IR to match the vector size.\n+  }\n+  \/\/ Vector APIs are lazily intrinsified, during parsing compiler emits a\n+  \/\/ call to intrinsic function, since most of the APIs return an abstract vector\n+  \/\/ hence a subsequent checkcast results into a graph shape comprising of CheckPP\n+  \/\/ and CheckCastPP chain. During lazy inline expansion, call gets replaced by\n+  \/\/ a VectorBox but we still need to traverse back through chain of cast nodes\n+  \/\/ to get to the VectorBox.\n+  if (!n->is_VectorBox() &&\n+      VectorSupport::is_vector(n->as_InlineType()->inline_klass()->get_InlineKlass())) {\n+    n = n->as_InlineType()->get_oop();\n+  }\n+  n = n->uncast();\n@@ -1725,4 +1727,2 @@\n-    if (Type::cmp(bottom_type(), n->in(VectorBoxNode::Value)->bottom_type()) == 0) {\n-      return n->in(VectorBoxNode::Value); \/\/ VectorUnbox (VectorBox v) ==> v\n-    } else {\n-      \/\/ Handled by VectorUnboxNode::Ideal().\n+    if (Type::cmp(bottom_type(), n->as_VectorBox()->get_vec()->bottom_type()) == 0) {\n+      return n->as_VectorBox()->get_vec(); \/\/ VectorUnbox (VectorBox v) ==> v\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":45,"deletions":45,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"opto\/inlinetypenode.hpp\"\n@@ -1139,1 +1140,0 @@\n-    assert(vt->element_basic_type() != T_BOOLEAN, \"not support\");\n@@ -1468,0 +1468,1 @@\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n@@ -1645,1 +1646,1 @@\n-class VectorBoxNode : public Node {\n+class VectorBoxNode : public InlineTypeNode {\n@@ -1647,12 +1648,14 @@\n-  const TypeInstPtr* const _box_type;\n-  const TypeVect*    const _vec_type;\n- public:\n-  enum {\n-     Box   = 1,\n-     Value = 2\n-  };\n-  VectorBoxNode(Compile* C, Node* box, Node* val,\n-                const TypeInstPtr* box_type, const TypeVect* vt)\n-    : Node(nullptr, box, val), _box_type(box_type), _vec_type(vt) {\n-    init_flags(Flag_is_macro);\n-    C->add_macro_node(this);\n+  const TypeInstPtr* _box_type;\n+  const TypeVect*    _vec_type;\n+\n+ public:\n+  void set_box_type(const TypeInstPtr* box_type) { _box_type = box_type; }\n+  void set_vec_type(const TypeVect* vec_type) { _vec_type = vec_type; }\n+\n+  VectorBoxNode(Compile* C, ciInlineKlass* vk, Node* oop, const TypeInstPtr* box_type, const TypeVect* vt, bool null_free) :\n+    InlineTypeNode(vk, oop, null_free) {\n+      init_flags(Flag_is_macro);\n+      init_class_id(Class_VectorBox);\n+      set_vec_type(vt);\n+      set_box_type(box_type);\n+      C->add_macro_node(this);\n@@ -1661,0 +1664,18 @@\n+  static VectorBoxNode* make_box_node(PhaseGVN& gvn, Compile* C, Node* box, Node* val,\n+                                      const TypeInstPtr* box_type, const TypeVect* vt) {\n+    ciInlineKlass* vk = static_cast<ciInlineKlass*>(box_type->inline_klass());\n+    VectorBoxNode* box_node = new VectorBoxNode(C, vk, box, box_type, vt, false);\n+\n+    ciInlineKlass* payload = vk->declared_nonstatic_field_at(0)->type()->as_inline_klass();\n+    Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, false);\n+    payload_value->as_InlineType()->set_field_value(0, val);\n+    payload_value = gvn.transform(payload_value);\n+\n+    box_node->set_field_value(0, payload_value);\n+    box_node->set_is_buffered(gvn, false);\n+    box_node->set_is_init(gvn, true);\n+\n+    return box_node;\n+  }\n+\n+  virtual bool is_default(PhaseGVN* gvn) const { return false; }\n@@ -1664,0 +1685,5 @@\n+  Node*  get_vec() {\n+    assert(field_value(0)->is_InlineType(), \"\");\n+    return field_value(0)->as_InlineType()->field_value(0);\n+  }\n+\n@@ -1687,2 +1713,0 @@\n- private:\n-  bool _shuffle_to_vector;\n@@ -1692,1 +1716,1 @@\n-  VectorUnboxNode(Compile* C, const TypeVect* vec_type, Node* obj, Node* mem, bool shuffle_to_vector)\n+  VectorUnboxNode(Compile* C, const TypeVect* vec_type, Node* obj, Node* mem)\n@@ -1694,1 +1718,0 @@\n-    _shuffle_to_vector = shuffle_to_vector;\n@@ -1704,2 +1727,0 @@\n-  Node* Ideal(PhaseGVN* phase, bool can_reshape);\n-  bool is_shuffle_to_vector() { return _shuffle_to_vector; }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":41,"deletions":20,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2320,0 +2320,4 @@\n+bool Arguments::is_jdk_incubator_vector(const char* prop_value) {\n+  return strstr(prop_value, \"jdk.incubator.vector\");\n+}\n+\n@@ -2429,0 +2433,3 @@\n+      if (is_jdk_incubator_vector(tail)) {\n+        set_enable_preview();\n+      }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -325,0 +325,2 @@\n+  static bool is_jdk_incubator_vector(const char* prop_value);\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ci\/ciEnv.hpp\"\n@@ -1279,8 +1280,0 @@\n-#if COMPILER2_OR_JVMCI\n-        if (EnableVectorSupport && VectorSupport::is_vector(ik)) {\n-          obj = VectorSupport::allocate_vector(ik, fr, reg_map, sv, THREAD);\n-        } else {\n-          obj = ik->allocate_instance(THREAD);\n-        }\n-#else\n-#endif \/\/ COMPILER2_OR_JVMCI\n@@ -1307,0 +1300,8 @@\n+    if (k->is_inline_klass()) {\n+      intptr_t is_larval = StackValue::create_stack_value(fr, reg_map, sv->is_larval())->get_jint();\n+      jint larval = (jint)*((jint*)&is_larval);\n+      if (larval == 1) {\n+        obj->set_mark(obj->mark().enter_larval_state());\n+      }\n+    }\n+\n@@ -1504,0 +1505,1 @@\n+  int _secondary_fields_count;\n@@ -1505,1 +1507,1 @@\n-  ReassignedField() : _offset(0), _type(T_ILLEGAL), _klass(nullptr), _is_flat(false) { }\n+  ReassignedField() : _offset(0), _type(T_ILLEGAL), _klass(nullptr), _is_flat(false), _secondary_fields_count(0) { }\n@@ -1512,0 +1514,36 @@\n+static void init_multi_field(oop obj, int offset, BasicType elem_bt, address addr) {\n+  switch (elem_bt) {\n+    case T_BOOLEAN: obj->bool_field_put(offset, *(jboolean*)addr); break;\n+    case T_BYTE:    obj->byte_field_put(offset, *(jbyte*)addr); break;\n+    case T_SHORT:   obj->short_field_put(offset, *(jshort*)addr); break;\n+    case T_INT:     obj->int_field_put(offset, *(jint*)addr); break;\n+    case T_FLOAT:   obj->float_field_put(offset, *(jfloat*)addr); break;\n+    case T_LONG:    obj->long_field_put(offset, *(jlong*)addr); break;\n+    case T_DOUBLE:  obj->double_field_put(offset, *(jdouble*)addr); break;\n+    default: fatal(\"unsupported: %s\", type2name(elem_bt));\n+  }\n+}\n+\n+static void reassign_vectorized_multi_fields(frame* fr, RegisterMap* reg_map, Location location, oop obj, int offset, BasicType elem_bt, int fields_count) {\n+  int elem_size = type2aelembytes(elem_bt);\n+  if (location.is_register()) {\n+    \/\/ Value was in a callee-saved register.\n+    VMReg vreg = VMRegImpl::as_VMReg(location.register_number());\n+\n+    for (int i = 0; i < fields_count; i++) {\n+      int vslot = (i * elem_size) \/ VMRegImpl::stack_slot_size;\n+      int off   = (i * elem_size) % VMRegImpl::stack_slot_size;\n+      address elem_addr = reg_map->location(vreg, vslot) + off; \/\/ assumes little endian element order\n+      int second_offset = offset + i * elem_size;\n+      init_multi_field(obj, second_offset, elem_bt, elem_addr);\n+    }\n+  } else {\n+    \/\/ Value was directly saved on the stack.\n+    address base_addr = ((address)fr->unextended_sp()) + location.stack_offset();\n+    for (int i = 0; i < fields_count; i++) {\n+      int second_offset = offset + i * elem_size;\n+      init_multi_field(obj, second_offset, elem_bt, base_addr + i * elem_size);\n+    }\n+  }\n+}\n+\n@@ -1517,0 +1555,1 @@\n+  int skip_next_fields_cnt = 0;\n@@ -1519,0 +1558,12 @@\n+      if (skip_next_fields_cnt > 0) {\n+         skip_next_fields_cnt--;\n+         continue;\n+      }\n+      int bundle_size = 1;\n+      bool is_multifield_scalarized = false;\n+      if (fs.is_multifield_base()) {\n+         BasicType ft = Signature::basic_type(fs.signature());\n+         bundle_size = fs.field_descriptor().secondary_fields_count(fs.index());\n+         is_multifield_scalarized = ciEnv::is_multifield_scalarized(ft, bundle_size);\n+         skip_next_fields_cnt = !is_multifield_scalarized ? bundle_size - 1: 0;\n+      }\n@@ -1523,0 +1574,1 @@\n+        field._secondary_fields_count = !is_multifield_scalarized && fs.is_multifield_base() ? bundle_size : 1;\n@@ -1550,17 +1602,34 @@\n-    ScopeValue* scope_field = sv->field_at(svIndex);\n-    StackValue* value = StackValue::create_stack_value(fr, reg_map, scope_field);\n-    switch (type) {\n-      case T_OBJECT:\n-      case T_ARRAY:\n-        assert(value->type() == T_OBJECT, \"Agreement.\");\n-        obj->obj_field_put(offset, value->get_obj()());\n-        break;\n-\n-      case T_INT: case T_FLOAT: { \/\/ 4 bytes.\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        bool big_value = false;\n-        if (i+1 < fields->length() && fields->at(i+1)._type == T_INT) {\n-          if (scope_field->is_location()) {\n-            Location::Type type = ((LocationValue*) scope_field)->location().type();\n-            if (type == Location::dbl || type == Location::lng) {\n-              big_value = true;\n+\n+    int secondary_fields_count = fields->at(i)._secondary_fields_count;\n+    if (sv->field_at(svIndex)->is_location()) {\n+      Location location = sv->field_at(svIndex)->as_LocationValue()->location();\n+      if (location.type() == Location::vector) {\n+        \/\/ Re-assign vectorized multi-fields\n+        reassign_vectorized_multi_fields(fr, reg_map, location, obj, offset, type, secondary_fields_count);\n+        svIndex++;\n+        continue;\n+      }\n+    }\n+\n+    assert(secondary_fields_count <= sv->field_size(), \"\");\n+    for (int j = 0; j < secondary_fields_count; j++) {\n+      ScopeValue* scope_field = sv->field_at(svIndex);\n+      StackValue* value = StackValue::create_stack_value(fr, reg_map, scope_field);\n+      int sec_offset = offset + j * type2aelembytes(type);\n+      switch (type) {\n+        case T_OBJECT:\n+        case T_ARRAY:\n+          assert(value->type() == T_OBJECT, \"Agreement.\");\n+          obj->obj_field_put(sec_offset, value->get_obj()());\n+          break;\n+\n+        \/\/ Have to cast to INT (32 bits) pointer to avoid little\/big-endian problem.\n+        case T_INT: case T_FLOAT: { \/\/ 4 bytes.\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          bool big_value = false;\n+          if (i+1 < fields->length() && fields->at(i+1)._type == T_INT) {\n+            if (scope_field->is_location()) {\n+              Location::Type type = ((LocationValue*) scope_field)->location().type();\n+              if (type == Location::dbl || type == Location::lng) {\n+                big_value = true;\n+              }\n@@ -1568,5 +1637,5 @@\n-          }\n-          if (scope_field->is_constant_int()) {\n-            ScopeValue* next_scope_field = sv->field_at(svIndex + 1);\n-            if (next_scope_field->is_constant_long() || next_scope_field->is_constant_double()) {\n-              big_value = true;\n+            if (scope_field->is_constant_int()) {\n+              ScopeValue* next_scope_field = sv->field_at(svIndex + 1);\n+              if (next_scope_field->is_constant_long() || next_scope_field->is_constant_double()) {\n+                big_value = true;\n+              }\n@@ -1575,8 +1644,8 @@\n-        }\n-        if (big_value) {\n-          i++;\n-          assert(i < fields->length(), \"second T_INT field needed\");\n-          assert(fields->at(i)._type == T_INT, \"T_INT field needed\");\n-        } else {\n-          obj->int_field_put(offset, value->get_jint());\n-          break;\n+          if (big_value) {\n+            i++;\n+            assert(i < fields->length(), \"second T_INT field needed\");\n+            assert(fields->at(i)._type == T_INT, \"T_INT field needed\");\n+          } else {\n+            obj->int_field_put(sec_offset, value->get_jint());\n+            break;\n+          }\n@@ -1585,1 +1654,0 @@\n-      }\n@@ -1588,11 +1656,11 @@\n-      case T_LONG: case T_DOUBLE: {\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        StackValue* low = StackValue::create_stack_value(fr, reg_map, sv->field_at(++svIndex));\n-#ifdef _LP64\n-        jlong res = (jlong)low->get_intptr();\n-#else\n-        jlong res = jlong_from(value->get_jint(), low->get_jint());\n-#endif\n-        obj->long_field_put(offset, res);\n-        break;\n-      }\n+        case T_LONG: case T_DOUBLE: {\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          StackValue* low = StackValue::create_stack_value(fr, reg_map, sv->field_at(++svIndex));\n+  #ifdef _LP64\n+          jlong res = (jlong)low->get_intptr();\n+  #else\n+          jlong res = jlong_from((jint)value->get_int(), (jint)low->get_jint());\n+  #endif\n+          obj->long_field_put(sec_offset, res);\n+          break;\n+        }\n@@ -1600,4 +1668,4 @@\n-      case T_SHORT:\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        obj->short_field_put(offset, (jshort)value->get_jint());\n-        break;\n+        case T_SHORT:\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          obj->short_field_put(sec_offset, (jshort)value->get_jint());\n+          break;\n@@ -1605,4 +1673,4 @@\n-      case T_CHAR:\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        obj->char_field_put(offset, (jchar)value->get_jint());\n-        break;\n+        case T_CHAR:\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          obj->char_field_put(sec_offset, (jchar)value->get_jint());\n+          break;\n@@ -1610,4 +1678,4 @@\n-      case T_BYTE:\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        obj->byte_field_put(offset, (jbyte)value->get_jint());\n-        break;\n+        case T_BYTE:\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          obj->byte_field_put(sec_offset, (jbyte)value->get_jint());\n+          break;\n@@ -1615,4 +1683,4 @@\n-      case T_BOOLEAN:\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        obj->bool_field_put(offset, (jboolean)value->get_jint());\n-        break;\n+        case T_BOOLEAN:\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          obj->bool_field_put(sec_offset, (jboolean)value->get_jint());\n+          break;\n@@ -1620,2 +1688,4 @@\n-      default:\n-        ShouldNotReachHere();\n+        default:\n+          ShouldNotReachHere();\n+      }\n+      svIndex++;\n@@ -1623,1 +1693,0 @@\n-    svIndex++;\n@@ -1666,21 +1735,0 @@\n-#if COMPILER2_OR_JVMCI\n-    if (EnableVectorSupport && VectorSupport::is_vector(k)) {\n-      assert(sv->field_size() == 1, \"%s not a vector\", k->name()->as_C_string());\n-      ScopeValue* payload = sv->field_at(0);\n-      if (payload->is_location() &&\n-          payload->as_LocationValue()->location().type() == Location::vector) {\n-#ifndef PRODUCT\n-        if (PrintDeoptimizationDetails) {\n-          tty->print_cr(\"skip field reassignment for this vector - it should be assigned already\");\n-          if (Verbose) {\n-            Handle obj = sv->value();\n-            k->oop_print_on(obj(), tty);\n-          }\n-        }\n-#endif \/\/ !PRODUCT\n-        continue; \/\/ Such vector's value was already restored in VectorSupport::allocate_vector().\n-      }\n-      \/\/ Else fall-through to do assignment for scalar-replaced boxed vector representation\n-      \/\/ which could be restored after vector object allocation.\n-    }\n-#endif \/* !COMPILER2_OR_JVMCI *\/\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":139,"deletions":91,"binary":false,"changes":230,"status":"modified"},{"patch":"@@ -101,1 +101,2 @@\n-  guarantee(_fieldinfo.name_index() != 0 && _fieldinfo.signature_index() != 0, \"bad constant pool index for fieldDescriptor\");\n+  \/\/ assert to be extended to allow multifield names\n+  guarantee(\/*_fieldinfo.name_index() != 0 &&*\/ _fieldinfo.signature_index() != 0, \"bad constant pool index for fieldDescriptor\");\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+#include \"prims\/vectorSupport.hpp\"\n@@ -556,0 +557,3 @@\n+JRT_LEAF(int, SharedRuntime::skip_value_scalarization(InlineKlass* klass))\n+  return (int) VectorSupport::skip_value_scalarization(klass);\n+JRT_END\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -186,0 +186,1 @@\n+  static int skip_value_scalarization(InlineKlass* klass);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Objects;\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -29,0 +31,3 @@\n+import jdk.internal.vm.annotation.MultiField;\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n@@ -32,0 +37,1 @@\n+import java.lang.reflect.*;\n@@ -151,1 +157,42 @@\n-    public static class VectorSpecies<E> {}\n+    public static class VectorSpecies<E> { }\n+\n+    public abstract value static class VectorPayload { }\n+\n+    public static abstract value class Vector<E> extends VectorPayload { }\n+\n+    public static abstract value class VectorMask<E> extends VectorPayload { }\n+\n+    public static abstract value class VectorShuffle<E> extends VectorPayload { }\n+\n+    @LooselyConsistentValue\n+    public abstract value static class VectorPayloadMF {\n+        public abstract long multiFieldOffset();\n+\n+        @ForceInline\n+        public static VectorPayloadMF newMaskInstanceFactory(Class<?> elemType, int length, boolean max_payload) {\n+            if (!max_payload) {\n+                switch(length) {\n+                    case  1: return new VectorPayloadMF8Z();\n+                    case  2: return new VectorPayloadMF16Z();\n+                    case  4: return new VectorPayloadMF32Z();\n+                    case  8: return new VectorPayloadMF64Z();\n+                    case 16: return new VectorPayloadMF128Z();\n+                    case 32: return new VectorPayloadMF256Z();\n+                    case 64: return new VectorPayloadMF512Z();\n+                    default: assert false : \"Unhandled vector mask size\";\n+                }\n+            } else {\n+                if (elemType == byte.class) {\n+                   return new VectorPayloadMFMaxBZ();\n+                } else if (elemType == short.class) {\n+                   return new VectorPayloadMFMaxSZ();\n+                } else if (elemType == int.class || elemType == float.class) {\n+                   return new VectorPayloadMFMaxIZ();\n+                } else if (elemType == long.class || elemType == double.class) {\n+                   return new VectorPayloadMFMaxLZ();\n+                } else {\n+                   assert false : \"Unexpected lane type\";\n+                }\n+            }\n+            return null;\n+        }\n@@ -153,5 +200,28 @@\n-    \/**\n-     * @hidden\n-     *\/\n-    public static class VectorPayload {\n-        private final Object payload; \/\/ array of primitives\n+        @ForceInline\n+        public static VectorPayloadMF newShuffleInstanceFactory(Class<?> elemType, int length, boolean max_payload) {\n+            if (!max_payload) {\n+                switch(length) {\n+                    case  1: return new VectorPayloadMF8B();\n+                    case  2: return new VectorPayloadMF16B();\n+                    case  4: return new VectorPayloadMF32B();\n+                    case  8: return new VectorPayloadMF64B();\n+                    case 16: return new VectorPayloadMF128B();\n+                    case 32: return new VectorPayloadMF256B();\n+                    case 64: return new VectorPayloadMF512B();\n+                    default: assert false : \"Unhandled vector shuffle size\";\n+                }\n+            } else {\n+                if (elemType == byte.class) {\n+                   return new VectorPayloadMFMaxBB();\n+                } else if (elemType == short.class) {\n+                   return new VectorPayloadMFMaxSB();\n+                } else if (elemType == int.class || elemType == float.class) {\n+                   return new VectorPayloadMFMaxIB();\n+                } else if (elemType == long.class || elemType == double.class) {\n+                   return new VectorPayloadMFMaxLB();\n+                } else {\n+                   assert false : \"Unexpected lane type\";\n+                }\n+            }\n+            return null;\n+        }\n@@ -159,2 +229,70 @@\n-        public VectorPayload(Object payload) {\n-            this.payload = payload;\n+        @ForceInline\n+        public static VectorPayloadMF newVectorInstanceFactory(Class<?> elemType, int length, boolean max_payload) {\n+            if (false == max_payload) {\n+                if (elemType == byte.class) {\n+                    switch(length) {\n+                        case  8: return new VectorPayloadMF64B();\n+                        case 16: return new VectorPayloadMF128B();\n+                        case 32: return new VectorPayloadMF256B();\n+                        case 64: return new VectorPayloadMF512B();\n+                        default: assert false : \"Unhandled vector size\";\n+                    }\n+                } else if (elemType == short.class) {\n+                    switch(length) {\n+                        case  4: return new VectorPayloadMF64S();\n+                        case  8: return new VectorPayloadMF128S();\n+                        case 16: return new VectorPayloadMF256S();\n+                        case 32: return new VectorPayloadMF512S();\n+                        default: assert false : \"Unhandled vector size\";\n+                    }\n+                } else if (elemType == int.class) {\n+                    switch(length) {\n+                        case  2: return new VectorPayloadMF64I();\n+                        case  4: return new VectorPayloadMF128I();\n+                        case  8: return new VectorPayloadMF256I();\n+                        case 16: return new VectorPayloadMF512I();\n+                        default: assert false : \"Unhandled vector size\";\n+                    }\n+                } else if (elemType == long.class) {\n+                    switch(length) {\n+                        case  1: return new VectorPayloadMF64L();\n+                        case  2: return new VectorPayloadMF128L();\n+                        case  4: return new VectorPayloadMF256L();\n+                        case  8: return new VectorPayloadMF512L();\n+                        default: assert false : \"Unhandled vector size\";\n+                    }\n+                } else if (elemType == float.class) {\n+                    switch(length) {\n+                        case  2: return new VectorPayloadMF64F();\n+                        case  4: return new VectorPayloadMF128F();\n+                        case  8: return new VectorPayloadMF256F();\n+                        case 16: return new VectorPayloadMF512F();\n+                        default: assert false : \"Unhandled vector size\";\n+                    }\n+                } else {\n+                    assert elemType == double.class;\n+                    switch(length) {\n+                        case  1: return new VectorPayloadMF64D();\n+                        case  2: return new VectorPayloadMF128D();\n+                        case  4: return new VectorPayloadMF256D();\n+                        case  8: return new VectorPayloadMF512D();\n+                        default: assert false : \"Unhandled vector size\";\n+                    }\n+                }\n+            } else {\n+                if (elemType == byte.class) {\n+                    return new VectorPayloadMFMaxB();\n+                } else if (elemType == short.class) {\n+                    return new VectorPayloadMFMaxS();\n+                } else if (elemType == int.class) {\n+                    return new VectorPayloadMFMaxI();\n+                } else if (elemType == long.class) {\n+                    return new VectorPayloadMFMaxL();\n+                } else if (elemType == float.class) {\n+                    return new VectorPayloadMFMaxF();\n+                } else {\n+                    assert elemType == double.class;\n+                    return new VectorPayloadMFMaxD();\n+                }\n+            }\n+            return null;\n@@ -163,2 +301,10 @@\n-        protected final Object getPayload() {\n-            return VectorSupport.maybeRebox(this).payload;\n+        @ForceInline\n+        public static VectorPayloadMF createVectPayloadInstanceB(int length, byte[] init, boolean max_payload) {\n+            VectorPayloadMF obj = newVectorInstanceFactory(byte.class, length, max_payload);\n+            obj = U.makePrivateBuffer(obj);\n+            long start_offset = obj.multiFieldOffset();\n+            for (int i = 0; i < length; i++) {\n+                U.putByte(obj, start_offset + i * Byte.BYTES, init[i]);\n+            }\n+            obj = U.finishPrivateBuffer(obj);\n+            return obj;\n@@ -166,7 +312,10 @@\n-    }\n-    \/**\n-     * @hidden\n-     *\/\n-    public static class Vector<E> extends VectorPayload {\n-        public Vector(Object payload) {\n-            super(payload);\n+        @ForceInline\n+        public static VectorPayloadMF createVectPayloadInstanceS(int length, short[] init, boolean max_payload) {\n+            VectorPayloadMF obj = newVectorInstanceFactory(short.class, length, max_payload);\n+            obj = U.makePrivateBuffer(obj);\n+            long start_offset = obj.multiFieldOffset();\n+            for (int i = 0; i < length; i++) {\n+                U.putShort(obj, start_offset + i * Short.BYTES, init[i]);\n+            }\n+            obj = U.finishPrivateBuffer(obj);\n+            return obj;\n@@ -175,7 +324,10 @@\n-    }\n-    \/**\n-     * @hidden\n-     *\/\n-    public static class VectorShuffle<E> extends VectorPayload {\n-        public VectorShuffle(Object payload) {\n-            super(payload);\n+        @ForceInline\n+        public static VectorPayloadMF createVectPayloadInstanceI(int length, int[] init, boolean max_payload) {\n+            VectorPayloadMF obj = newVectorInstanceFactory(int.class, length, max_payload);\n+            obj = U.makePrivateBuffer(obj);\n+            long start_offset = obj.multiFieldOffset();\n+            for (int i = 0; i < length; i++) {\n+                U.putInt(obj, start_offset + i * Integer.BYTES, init[i]);\n+            }\n+            obj = U.finishPrivateBuffer(obj);\n+            return obj;\n@@ -184,7 +336,79 @@\n-    }\n-    \/**\n-     * @hidden\n-     *\/\n-    public static class VectorMask<E> extends VectorPayload {\n-        public VectorMask(Object payload) {\n-            super(payload);\n+\n+        @ForceInline\n+        public static VectorPayloadMF createVectPayloadInstanceL(int length, long[] init, boolean max_payload) {\n+            VectorPayloadMF obj = newVectorInstanceFactory(long.class, length, max_payload);\n+            obj = U.makePrivateBuffer(obj);\n+            long start_offset = obj.multiFieldOffset();\n+            for (int i = 0; i < length; i++) {\n+                U.putLong(obj, start_offset + i * Long.BYTES, init[i]);\n+            }\n+            obj = U.finishPrivateBuffer(obj);\n+            return obj;\n+        }\n+\n+        @ForceInline\n+        public static VectorPayloadMF createVectPayloadInstanceF(int length, float[] init, boolean max_payload) {\n+            VectorPayloadMF obj = newVectorInstanceFactory(float.class, length, max_payload);\n+            obj = U.makePrivateBuffer(obj);\n+            long start_offset = obj.multiFieldOffset();\n+            for (int i = 0; i < length; i++) {\n+                U.putFloat(obj, start_offset + i * Float.BYTES, init[i]);\n+            }\n+            obj = U.finishPrivateBuffer(obj);\n+            return obj;\n+        }\n+\n+        @ForceInline\n+        public static VectorPayloadMF createVectPayloadInstanceD(int length, double[] init, boolean max_payload) {\n+            VectorPayloadMF obj = newVectorInstanceFactory(double.class, length, max_payload);\n+            obj = U.makePrivateBuffer(obj);\n+            long start_offset = obj.multiFieldOffset();\n+            for (int i = 0; i < length; i++) {\n+                U.putDouble(obj, start_offset + i * Double.BYTES, init[i]);\n+            }\n+            obj = U.finishPrivateBuffer(obj);\n+            return obj;\n+        }\n+\n+        public int length() {\n+            return getClass().getDeclaredFields().length - 1;\n+        }\n+\n+        public static long multiFieldOffset(Class<? extends VectorPayloadMF> cls) {\n+            try {\n+                var field = cls.getDeclaredField(\"mfield\");\n+                return U.objectFieldOffset(field);\n+            } catch (Exception e) {\n+                System.out.println(e);\n+            }\n+            return -1L;\n+        }\n+\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder(\"multifield payload : [ \");\n+            try {\n+                long start_offset = multiFieldOffset();\n+                Class<?> elemType = getClass().getDeclaredField(\"mfield\").getType();\n+                for (int i = 0; i < length(); i++) {\n+                    if (elemType == byte.class)\n+                        sb.append(U.getByte(this, start_offset + i));\n+                    else if (elemType == short.class)\n+                        sb.append(U.getShort(this, start_offset + i * Short.BYTES));\n+                    else if (elemType == int.class)\n+                        sb.append(U.getInt(this, start_offset + i * Integer.BYTES));\n+                    else if (elemType == long.class)\n+                        sb.append(U.getLong(this, start_offset + i * Long.BYTES));\n+                    else if (elemType == float.class)\n+                        sb.append(U.getFloat(this, start_offset + i * Float.BYTES));\n+                    else if (elemType == double.class)\n+                        sb.append(U.getDouble(this, start_offset + i * Double.BYTES));\n+                    else\n+                        assert false;\n+                    if (i < (length() - 1))\n+                        sb.append(\" , \");\n+                }\n+            } catch (Exception e) {\n+                System.out.println(e);\n+            }\n+            sb.append(\" ] \");\n+            return sb.toString();\n@@ -194,0 +418,528 @@\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxB extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxB.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxS extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        short mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxS.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxI extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        int mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxI.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxL extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        long mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxL.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxF extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        float mfield = 0.0f;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxF.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxD extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        double mfield = 0.0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxD.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF8Z extends VectorPayloadMF {\n+        @MultiField(value = 1)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF8Z.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF16Z extends VectorPayloadMF {\n+        @MultiField(value = 2)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF16Z.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF32Z extends VectorPayloadMF {\n+        @MultiField(value = 4)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF32Z.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64Z extends VectorPayloadMF {\n+        @MultiField(value = 8)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64Z.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128Z extends VectorPayloadMF {\n+        @MultiField(value = 16)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128Z.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256Z extends VectorPayloadMF {\n+        @MultiField(value = 32)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256Z.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512Z extends VectorPayloadMF {\n+        @MultiField(value = 64)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512Z.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxBZ extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxBZ.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxSZ extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxSZ.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxIZ extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxIZ.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxLZ extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        boolean mfield = false;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxLZ.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF8B extends VectorPayloadMF {\n+        @MultiField(value = 1)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF8B.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF16B extends VectorPayloadMF {\n+        @MultiField(value = 2)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF16B.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF32B extends VectorPayloadMF {\n+        @MultiField(value = 4)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF32B.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64B extends VectorPayloadMF {\n+        @MultiField(value = 8)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64B.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128B extends VectorPayloadMF {\n+        @MultiField(value = 16)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128B.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256B extends VectorPayloadMF {\n+        @MultiField(value = 32)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256B.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512B extends VectorPayloadMF {\n+        @MultiField(value = 64)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512B.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxBB extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxBB.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxSB extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxSB.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxIB extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxIB.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMFMaxLB extends VectorPayloadMF {\n+        @MultiField(value = -1)\n+        byte mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMFMaxLB.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64S extends VectorPayloadMF {\n+        @MultiField(value = 4)\n+        short mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64S.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128S extends VectorPayloadMF {\n+        @MultiField(value = 8)\n+        short mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128S.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256S extends VectorPayloadMF {\n+        @MultiField(value = 16)\n+        short mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256S.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512S extends VectorPayloadMF {\n+        @MultiField(value = 32)\n+        short mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512S.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64I extends VectorPayloadMF {\n+        @MultiField(value = 2)\n+        int mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64I.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128I extends VectorPayloadMF {\n+        @MultiField(value = 4)\n+        int mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128I.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256I extends VectorPayloadMF {\n+        @MultiField(value = 8)\n+        int mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256I.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512I extends VectorPayloadMF {\n+        @MultiField(value = 16)\n+        int mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512I.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64L extends VectorPayloadMF {\n+        @MultiField(value = 1)\n+        final long mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64L.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128L extends VectorPayloadMF {\n+        @MultiField(value = 2)\n+        final long mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128L.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256L extends VectorPayloadMF {\n+        @MultiField(value = 4)\n+        final long mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256L.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512L extends VectorPayloadMF {\n+        @MultiField(value = 8)\n+        final long mfield = 0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512L.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64F extends VectorPayloadMF {\n+        @MultiField(value = 2)\n+        float mfield = 0.0f;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64F.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128F extends VectorPayloadMF {\n+        @MultiField(value = 4)\n+        float mfield = 0.0f;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128F.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256F extends VectorPayloadMF {\n+        @MultiField(value = 8)\n+        float mfield = 0.0f;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256F.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512F extends VectorPayloadMF {\n+        @MultiField(value = 16)\n+        float mfield = 0.0f;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512F.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF64D extends VectorPayloadMF {\n+        @MultiField(value = 1)\n+        double mfield = 0.0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF64D.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF128D extends VectorPayloadMF {\n+        @MultiField(value = 2)\n+        double mfield = 0.0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF128D.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF256D extends VectorPayloadMF {\n+        @MultiField(value = 4)\n+        double mfield = 0.0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF256D.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    public value static class VectorPayloadMF512D extends VectorPayloadMF {\n+        @MultiField(value = 8)\n+        double mfield = 0.0;\n+        static final long MFOFFSET = multiFieldOffset(VectorPayloadMF512D.class);\n+\n+        @Override\n+        public long multiFieldOffset() { return MFOFFSET; }\n+    }\n+\n@@ -739,0 +1491,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":784,"deletions":31,"binary":false,"changes":815,"status":"modified"},{"patch":"@@ -37,4 +37,5 @@\n-abstract class AbstractMask<E> extends VectorMask<E> {\n-    AbstractMask(boolean[] bits) {\n-        super(bits);\n-    }\n+import static jdk.internal.vm.vector.VectorSupport.*;\n+\n+abstract value class AbstractMask<E> extends VectorMask<E> {\n+\n+    public static final Unsafe U =  Unsafe.getUnsafe();\n@@ -43,1 +44,28 @@\n-    abstract boolean[] getBits();\n+    abstract VectorPayloadMF getBits();\n+\n+    @ForceInline\n+    static <F> VectorPayloadMF prepare(VectorPayloadMF payload, int offset, VectorSpecies<F> species) {\n+        boolean isMaxShape  = species.vectorShape() == VectorShape.S_Max_BIT;\n+        VectorPayloadMF res = VectorPayloadMF.newMaskInstanceFactory(species.elementType(), species.length(), isMaxShape);\n+        res = U.makePrivateBuffer(res);\n+        long mOffset = res.multiFieldOffset();\n+        for (int i = 0; i < species.length(); i++) {\n+            boolean b = U.getBoolean(payload, mOffset + i + offset);\n+            U.putBoolean(res, mOffset + i, b);\n+        }\n+        res = U.finishPrivateBuffer(res);\n+        return res;\n+    }\n+\n+    @ForceInline\n+    static <F> VectorPayloadMF prepare(boolean val, VectorSpecies<F> species) {\n+        boolean isMaxShape  = species.vectorShape() == VectorShape.S_Max_BIT;\n+        VectorPayloadMF res = VectorPayloadMF.newMaskInstanceFactory(species.elementType(), species.length(), isMaxShape);\n+        res = U.makePrivateBuffer(res);\n+        long mOffset = res.multiFieldOffset();\n+        for (int i = 0; i < species.length(); i++) {\n+            U.putBoolean(res, mOffset + i, val);\n+        }\n+        res = U.finishPrivateBuffer(res);\n+        return res;\n+    }\n@@ -51,1 +79,14 @@\n-    abstract AbstractMask<E> uOp(MUnOp f);\n+    AbstractMask<E> uOpMF(MUnOp f) {\n+        int length = vspecies().laneCount();\n+        VectorPayloadMF bits = getBits();\n+        boolean is_max_species = ((AbstractSpecies)(vspecies())).is_max_species();\n+        VectorPayloadMF res = VectorPayloadMF.newMaskInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        res = U.makePrivateBuffer(res);\n+        long mOffset = res.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            boolean b = U.getBoolean(bits, mOffset + i);\n+            U.putBoolean(res, mOffset + i, f.apply(i, b));\n+        }\n+        res = U.finishPrivateBuffer(res);\n+        return vspecies().maskFactory(res);\n+    }\n@@ -59,1 +100,26 @@\n-    abstract AbstractMask<E> bOp(VectorMask<E> o, MBinOp f);\n+    AbstractMask<E> bOpMF(AbstractMask<E> m, MBinOp f) {\n+        int length = vspecies().laneCount();\n+        VectorPayloadMF bits = getBits();\n+        VectorPayloadMF mbits = m.getBits();\n+        boolean is_max_species = ((AbstractSpecies)(vspecies())).is_max_species();\n+        VectorPayloadMF res = VectorPayloadMF.newMaskInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        res = U.makePrivateBuffer(res);\n+        long mOffset = res.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            boolean b = U.getBoolean(bits, mOffset + i);\n+            boolean mb = U.getBoolean(mbits, mOffset + i);\n+            U.putBoolean(res, mOffset + i, f.apply(i, b, mb));\n+        }\n+        res = U.finishPrivateBuffer(res);\n+        return vspecies().maskFactory(res);\n+    }\n+\n+    \/\/ Store operator\n+\n+    void stOpMF(boolean[] arr, int idx) {\n+        VectorPayloadMF bits = getBits();\n+        long mOffset = bits.multiFieldOffset();\n+        for (int i = 0; i < vspecies().laneCount(); i++) {\n+            arr[idx++] = U.getBoolean(bits, mOffset + i);\n+        }\n+    }\n@@ -70,0 +136,14 @@\n+    @Override\n+    @ForceInline\n+    public <F> VectorMask<F> cast(VectorSpecies<F> dsp) {\n+        AbstractSpecies<F> species = (AbstractSpecies<F>) dsp;\n+        if (length() != species.laneCount())\n+            throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+\n+        return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), vspecies().elementType(), vspecies().laneCount,\n+                species.maskType(), species.elementType(), vspecies().laneCount,\n+                this, species,\n+                (m, s) -> VectorMask.fromLong(s, m.toLong()).check(s));\n+    }\n+\n@@ -79,2 +159,1 @@\n-            (c, idx, s) -> System.arraycopy(s.getBits(), 0, c, (int) idx, s.length()));\n-\n+            (c, idx, s) -> s.stOpMF(c, (int) idx));\n@@ -85,1 +164,3 @@\n-        return getBits().clone();\n+        boolean[] arr = new boolean[length()];\n+        intoArray(arr, 0);\n+        return arr;\n@@ -140,1 +221,7 @@\n-    static boolean anyTrueHelper(boolean[] bits) {\n+    boolean laneIsSetHelper(int idx) {\n+        VectorPayloadMF bits = getBits();\n+        return U.getBoolean(bits, bits.multiFieldOffset() + idx);\n+    }\n+\n+    \/*package-private*\/\n+    boolean anyTrueHelper() {\n@@ -142,2 +229,4 @@\n-        for (boolean i : bits) {\n-            if (i) return true;\n+        VectorPayloadMF bits = getBits();\n+        long mOffset = bits.multiFieldOffset();\n+        for (int i = 0; i < length(); i++) {\n+            if (U.getBoolean(bits, mOffset + i)) return true;\n@@ -149,1 +238,1 @@\n-    static boolean allTrueHelper(boolean[] bits) {\n+    boolean allTrueHelper() {\n@@ -151,2 +240,4 @@\n-        for (boolean i : bits) {\n-            if (!i) return false;\n+        VectorPayloadMF bits = getBits();\n+        long mOffset = bits.multiFieldOffset();\n+        for (int i = 0; i < length(); i++) {\n+            if (!U.getBoolean(bits, mOffset + i)) return false;\n@@ -158,1 +249,1 @@\n-    static int trueCountHelper(boolean[] bits) {\n+    int trueCountHelper() {\n@@ -160,2 +251,4 @@\n-        for (boolean i : bits) {\n-            if (i) c++;\n+        VectorPayloadMF bits = getBits();\n+        long mOffset = bits.multiFieldOffset();\n+        for (int i = 0; i < length(); i++) {\n+            if (U.getBoolean(bits, mOffset + i)) c++;\n@@ -167,3 +260,5 @@\n-    static int firstTrueHelper(boolean[] bits) {\n-        for (int i = 0; i < bits.length; i++) {\n-            if (bits[i])  return i;\n+    int firstTrueHelper() {\n+        VectorPayloadMF bits = getBits();\n+        long mOffset = bits.multiFieldOffset();\n+        for (int i = 0; i < length(); i++) {\n+            if (U.getBoolean(bits, mOffset + i)) return i;\n@@ -171,1 +266,1 @@\n-        return bits.length;\n+        return length();\n@@ -175,3 +270,5 @@\n-    static int lastTrueHelper(boolean[] bits) {\n-        for (int i = bits.length-1; i >= 0; i--) {\n-            if (bits[i])  return i;\n+    int lastTrueHelper() {\n+        VectorPayloadMF bits = getBits();\n+        long mOffset = bits.multiFieldOffset();\n+        for (int i = length() - 1; i >= 0; i--) {\n+            if (U.getBoolean(bits, mOffset + i)) return i;\n@@ -183,1 +280,1 @@\n-    static long toLongHelper(boolean[] bits) {\n+    long toLongHelper() {\n@@ -186,2 +283,4 @@\n-        for (int i = 0; i < bits.length; i++) {\n-            res = bits[i] ? res | set : res;\n+        VectorPayloadMF bits = getBits();\n+        long mOffset = bits.multiFieldOffset();\n+        for (int i = 0; i < length(); i++) {\n+            res = U.getBoolean(bits, mOffset + i) ? res | set : res;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":128,"deletions":29,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -30,1 +31,3 @@\n-abstract class AbstractShuffle<E> extends VectorShuffle<E> {\n+import static jdk.internal.vm.vector.VectorSupport.*;\n+\n+abstract value class AbstractShuffle<E> extends VectorShuffle<E> {\n@@ -33,0 +36,2 @@\n+    public static final Unsafe U = Unsafe.getUnsafe();\n+\n@@ -36,17 +41,2 @@\n-    AbstractShuffle(int length, byte[] reorder) {\n-        super(reorder);\n-        assert(length == reorder.length);\n-        assert(indexesInRange(reorder));\n-    }\n-\n-    AbstractShuffle(int length, int[] reorder) {\n-        this(length, reorder, 0);\n-    }\n-\n-    AbstractShuffle(int length, int[] reorder, int offset) {\n-        super(prepare(length, reorder, offset));\n-    }\n-\n-    AbstractShuffle(int length, IntUnaryOperator f) {\n-        super(prepare(length, f));\n-    }\n+    \/*package-private*\/\n+    abstract VectorPayloadMF indices();\n@@ -54,2 +44,7 @@\n-    private static byte[] prepare(int length, int[] reorder, int offset) {\n-        byte[] a = new byte[length];\n+    @ForceInline\n+    static <F> VectorPayloadMF prepare(int[] indices, int offset, VectorSpecies<F> species) {\n+        int length = species.length();\n+        boolean isMaxShape  = species.vectorShape() == VectorShape.S_Max_BIT;\n+        VectorPayloadMF payload = VectorPayloadMF.newShuffleInstanceFactory(species.elementType(), length, isMaxShape);\n+        payload = U.makePrivateBuffer(payload);\n+        long mf_offset = payload.multiFieldOffset();\n@@ -57,1 +52,1 @@\n-            int si = reorder[offset + i];\n+            int si = indices[offset + i];\n@@ -59,1 +54,1 @@\n-            a[i] = (byte) si;\n+            U.putByte(payload, mf_offset + i * Byte.BYTES, (byte) si);\n@@ -61,1 +56,2 @@\n-        return a;\n+        payload = U.finishPrivateBuffer(payload);\n+        return payload;\n@@ -64,3 +60,8 @@\n-    private static byte[] prepare(int length, IntUnaryOperator f) {\n-        byte[] a = new byte[length];\n-        for (int i = 0; i < a.length; i++) {\n+    @ForceInline\n+    static <F> VectorPayloadMF prepare(IntUnaryOperator f, VectorSpecies<F> species) {\n+        int length = species.length();\n+        boolean isMaxShape  = species.vectorShape() == VectorShape.S_Max_BIT;\n+        VectorPayloadMF payload = VectorPayloadMF.newShuffleInstanceFactory(species.elementType(), length, isMaxShape);\n+        payload = U.makePrivateBuffer(payload);\n+        long offset = payload.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n@@ -69,1 +70,1 @@\n-            a[i] = (byte) si;\n+            U.putByte(payload, offset + i * Byte.BYTES, (byte) si);\n@@ -71,5 +72,2 @@\n-        return a;\n-    }\n-\n-    byte[] reorder() {\n-        return (byte[])getPayload();\n+        payload = U.finishPrivateBuffer(payload);\n+        return payload;\n@@ -90,2 +88,3 @@\n-        byte[] reorder = reorder();\n-        int vlen = reorder.length;\n+        VectorPayloadMF indices = indices();\n+        int vlen = indices.length();\n+        long mf_offset = indices.multiFieldOffset();\n@@ -93,1 +92,1 @@\n-            int sourceIndex = reorder[i];\n+            int sourceIndex = U.getByte(indices, mf_offset + i * Byte.BYTES);\n@@ -102,2 +101,2 @@\n-        byte[] reorder = reorder();\n-        int[] a = new int[reorder.length];\n+        VectorPayloadMF indices = indices();\n+        int[] a = new int[indices.length()];\n@@ -129,2 +128,3 @@\n-            byte[] reorder = reorder();\n-            throw checkIndexFailed(reorder[vecmask.firstTrue()], length());\n+            VectorPayloadMF indices = indices();\n+            long offset = indices.multiFieldOffset();\n+            throw checkIndexFailed(U.getByte(indices, offset + vecmask.firstTrue() * Byte.BYTES), length());\n@@ -141,2 +141,2 @@\n-            byte[] reorder = reorder();\n-            return wrapAndRebuild(reorder);\n+            VectorPayloadMF indices = indices();\n+            return wrapAndRebuild(indices);\n@@ -148,3 +148,6 @@\n-    public final VectorShuffle<E> wrapAndRebuild(byte[] oldReorder) {\n-        int length = oldReorder.length;\n-        byte[] reorder = new byte[length];\n+    public final VectorShuffle<E> wrapAndRebuild(VectorPayloadMF oldIndices) {\n+        int length = oldIndices.length();\n+        boolean is_max_species = ((AbstractSpecies)(vspecies())).is_max_species();\n+        VectorPayloadMF indices = VectorPayloadMF.newShuffleInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        long offset = oldIndices.multiFieldOffset();\n+        indices = U.makePrivateBuffer(indices);\n@@ -152,1 +155,1 @@\n-            int si = oldReorder[i];\n+            int si = U.getByte(oldIndices, offset + i * Byte.BYTES);\n@@ -161,1 +164,1 @@\n-            reorder[i] = (byte) si;\n+            U.putByte(indices, offset + i * Byte.BYTES, (byte) si);\n@@ -163,1 +166,2 @@\n-        return vspecies().dummyVector().shuffleFromBytes(reorder);\n+        indices = U.finishPrivateBuffer(indices);\n+        return vspecies().dummyVectorMF().shuffleFromBytes(indices);\n@@ -224,3 +228,5 @@\n-    static boolean indexesInRange(byte[] reorder) {\n-        int length = reorder.length;\n-        for (byte si : reorder) {\n+    static boolean indexesInRange(VectorPayloadMF indices) {\n+        int length = indices.length();\n+        long offset = indices.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            byte si = U.getByte(indices, offset + i * Byte.BYTES);\n@@ -232,1 +238,1 @@\n-                                  java.util.Arrays.toString(reorder));\n+                            indices.toString());\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractShuffle.java","additions":58,"deletions":52,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -41,0 +42,1 @@\n+import static jdk.internal.vm.vector.VectorSupport.*;\n@@ -42,2 +44,2 @@\n-@SuppressWarnings(\"cast\")\n-abstract class AbstractVector<E> extends Vector<E> {\n+@SuppressWarnings({\"cast\", \"missing-explicit-ctor\"})\n+abstract value class AbstractVector<E> extends Vector<E> {\n@@ -77,5 +79,0 @@\n-    \/*package-private*\/\n-    AbstractVector(Object bits) {\n-        super(bits);\n-    }\n-\n@@ -84,0 +81,3 @@\n+    \/*package-private*\/\n+    abstract VectorPayloadMF vec();\n+\n@@ -87,0 +87,5 @@\n+    \/*package-private*\/\n+    abstract long multiFieldOffset();\n+\n+    static final Unsafe U = Unsafe.getUnsafe();\n+\n@@ -155,1 +160,1 @@\n-        AbstractVector<?> other = ((AbstractSpecies<?>)species).dummyVector();\n+        AbstractVector<?> other = ((AbstractSpecies<?>)species).dummyVectorMF();\n@@ -194,2 +199,1 @@\n-\n-    abstract AbstractMask<E> maskFromArray(boolean[] bits);\n+    abstract AbstractMask<E> maskFromPayload(VectorPayloadMF payload);\n@@ -202,1 +206,1 @@\n-    abstract AbstractShuffle<E> shuffleFromBytes(byte[] reorder);\n+    abstract AbstractShuffle<E> shuffleFromBytes(VectorPayloadMF indexes);\n@@ -387,0 +391,1 @@\n+\n@@ -708,2 +713,2 @@\n-            rvtype = rspi.dummyVector().getClass();\n-            vtype = vspi.dummyVector().getClass();\n+            rvtype = rspi.dummyVectorMF().getClass();\n+            vtype = vspi.dummyVectorMF().getClass();\n@@ -722,1 +727,1 @@\n-            rvtype = rsp.dummyVector().getClass();  \/\/ (profile)\n+            rvtype = rsp.dummyVectorMF().getClass();  \/\/ (profile)\n@@ -734,1 +739,1 @@\n-            rvtype = rsp.dummyVector().getClass();  \/\/ (profile)\n+            rvtype = rsp.dummyVectorMF().getClass();  \/\/ (profile)\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractVector.java","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Byte128Vector extends ByteVector {\n+value class Byte128Vector extends ByteVector {\n@@ -57,2 +59,7 @@\n-    Byte128Vector(byte[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128B.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF128B payload;\n+\n+    Byte128Vector(Object value) {\n+        this.payload = (VectorPayloadMF128B) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Byte128Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Byte128Vector(Object v) {\n-        this((byte[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Byte128Vector ZERO = new Byte128Vector(new byte[VLENGTH]);\n-    static final Byte128Vector IOTA = new Byte128Vector(VSPECIES.iotaArray());\n+    static final Byte128Vector ZERO = new Byte128Vector(VectorPayloadMF.newVectorInstanceFactory(byte.class, 16, false));\n+    static final Byte128Vector IOTA = new Byte128Vector(VectorPayloadMF.createVectPayloadInstanceB(VLENGTH, (byte[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    byte[] vec() {\n-        return (byte[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Byte128Mask maskFromArray(boolean[] bits) {\n-        return new Byte128Mask(bits);\n+    Byte128Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Byte128Mask(payload);\n@@ -157,1 +159,1 @@\n-    Byte128Shuffle shuffleFromBytes(byte[] reorder) { return new Byte128Shuffle(reorder); }\n+    Byte128Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Byte128Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Byte128Vector vectorFactory(byte[] vec) {\n+    Byte128Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Byte128Vector uOp(FUnOp f) {\n-        return (Byte128Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Byte128Vector uOpMF(FUnOp f) {\n+        return (Byte128Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Byte128Vector uOp(VectorMask<Byte> m, FUnOp f) {\n+    Byte128Vector uOpMF(VectorMask<Byte> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Byte128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Byte128Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Byte128Vector bOp(Vector<Byte> v, FBinOp f) {\n-        return (Byte128Vector) super.bOpTemplate((Byte128Vector)v, f);  \/\/ specialize\n+    Byte128Vector bOpMF(Vector<Byte> v, FBinOp f) {\n+        return (Byte128Vector) super.bOpTemplateMF((Byte128Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Byte128Vector bOp(Vector<Byte> v,\n+    Byte128Vector bOpMF(Vector<Byte> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Byte128Vector)v, (Byte128Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Byte128Vector)v, (Byte128Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Byte128Vector tOp(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n+    Byte128Vector tOpMF(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Byte128Vector)v1, (Byte128Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Byte128Vector)v1, (Byte128Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Byte128Vector tOp(Vector<Byte> v1, Vector<Byte> v2,\n+    Byte128Vector tOpMF(Vector<Byte> v1, Vector<Byte> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Byte128Vector)v1, (Byte128Vector)v2,\n-                              (Byte128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Byte128Vector)v1, (Byte128Vector)v2,\n+                                (Byte128Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    byte rOp(byte v, VectorMask<Byte> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    byte rOpMF(byte v, VectorMask<Byte> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -536,6 +538,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    byte[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getByte(vecpayload, start_offset + ix * Byte.BYTES);\n+                             });\n@@ -569,1 +572,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -573,3 +576,6 @@\n-                                    byte[] res = v.vec().clone();\n-                                    res[ix] = (byte)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putByte(tpayload, start_offset + ix * Byte.BYTES, (byte)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -581,1 +587,1 @@\n-    static final class Byte128Mask extends AbstractMask<Byte> {\n+    static final value class Byte128Mask extends AbstractMask<Byte> {\n@@ -585,2 +591,2 @@\n-        Byte128Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Byte128Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF128Z) payload;\n@@ -589,3 +595,2 @@\n-        Byte128Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF128Z payload;\n@@ -593,2 +598,2 @@\n-        Byte128Mask(boolean val) {\n-            super(prepare(val));\n+        Byte128Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF128Z)(prepare(payload, offset, VSPECIES));\n@@ -597,6 +602,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Byte128Mask(boolean val) {\n+            this.payload = (VectorPayloadMF128Z)(prepare(val, VSPECIES));\n@@ -605,5 +606,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -621,22 +617,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Byte128Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Byte128Mask(res);\n-        }\n-\n-        Byte128Mask bOp(VectorMask<Byte> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Byte128Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Byte128Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -653,27 +629,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -700,1 +649,1 @@\n-            return (Byte128Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Byte128Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -713,3 +662,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte128Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte128Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte128Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -723,3 +672,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte128Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte128Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte128Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -733,3 +682,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte128Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte128Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte128Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -744,1 +693,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Byte128Mask) m).trueCountHelper());\n@@ -751,1 +700,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Byte128Mask) m).firstTrueHelper());\n@@ -758,1 +707,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Byte128Mask) m).lastTrueHelper());\n@@ -768,1 +717,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Byte128Mask) m).toLongHelper());\n@@ -778,1 +727,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Byte128Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -788,1 +737,1 @@\n-                                         (m, __) -> anyTrueHelper(((Byte128Mask)m).getBits()));\n+                                         (m, __) -> ((Byte128Mask) m).anyTrueHelper());\n@@ -796,1 +745,1 @@\n-                                         (m, __) -> allTrueHelper(((Byte128Mask)m).getBits()));\n+                                         (m, __) -> ((Byte128Mask) m).allTrueHelper());\n@@ -813,1 +762,1 @@\n-    static final class Byte128Shuffle extends AbstractShuffle<Byte> {\n+    static final value class Byte128Shuffle extends AbstractShuffle<Byte> {\n@@ -817,3 +766,2 @@\n-        Byte128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF128B payload;\n@@ -821,2 +769,4 @@\n-        public Byte128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte128Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF128B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -825,2 +775,2 @@\n-        public Byte128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Byte128Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF128B)(prepare(indexes, i, VSPECIES));\n@@ -830,1 +780,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF128B)(prepare(fn, VSPECIES));\n+        }\n+        public Byte128Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF128B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -867,6 +828,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -874,0 +838,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Byte256Vector extends ByteVector {\n+value class Byte256Vector extends ByteVector {\n@@ -57,2 +59,7 @@\n-    Byte256Vector(byte[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256B.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF256B payload;\n+\n+    Byte256Vector(Object value) {\n+        this.payload = (VectorPayloadMF256B) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Byte256Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Byte256Vector(Object v) {\n-        this((byte[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Byte256Vector ZERO = new Byte256Vector(new byte[VLENGTH]);\n-    static final Byte256Vector IOTA = new Byte256Vector(VSPECIES.iotaArray());\n+    static final Byte256Vector ZERO = new Byte256Vector(VectorPayloadMF.newVectorInstanceFactory(byte.class, 32, false));\n+    static final Byte256Vector IOTA = new Byte256Vector(VectorPayloadMF.createVectPayloadInstanceB(VLENGTH, (byte[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    byte[] vec() {\n-        return (byte[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Byte256Mask maskFromArray(boolean[] bits) {\n-        return new Byte256Mask(bits);\n+    Byte256Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Byte256Mask(payload);\n@@ -157,1 +159,1 @@\n-    Byte256Shuffle shuffleFromBytes(byte[] reorder) { return new Byte256Shuffle(reorder); }\n+    Byte256Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Byte256Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Byte256Vector vectorFactory(byte[] vec) {\n+    Byte256Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Byte256Vector uOp(FUnOp f) {\n-        return (Byte256Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Byte256Vector uOpMF(FUnOp f) {\n+        return (Byte256Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Byte256Vector uOp(VectorMask<Byte> m, FUnOp f) {\n+    Byte256Vector uOpMF(VectorMask<Byte> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Byte256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Byte256Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Byte256Vector bOp(Vector<Byte> v, FBinOp f) {\n-        return (Byte256Vector) super.bOpTemplate((Byte256Vector)v, f);  \/\/ specialize\n+    Byte256Vector bOpMF(Vector<Byte> v, FBinOp f) {\n+        return (Byte256Vector) super.bOpTemplateMF((Byte256Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Byte256Vector bOp(Vector<Byte> v,\n+    Byte256Vector bOpMF(Vector<Byte> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Byte256Vector)v, (Byte256Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Byte256Vector)v, (Byte256Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Byte256Vector tOp(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n+    Byte256Vector tOpMF(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Byte256Vector)v1, (Byte256Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Byte256Vector)v1, (Byte256Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Byte256Vector tOp(Vector<Byte> v1, Vector<Byte> v2,\n+    Byte256Vector tOpMF(Vector<Byte> v1, Vector<Byte> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Byte256Vector)v1, (Byte256Vector)v2,\n-                              (Byte256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Byte256Vector)v1, (Byte256Vector)v2,\n+                                (Byte256Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    byte rOp(byte v, VectorMask<Byte> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    byte rOpMF(byte v, VectorMask<Byte> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -552,6 +554,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    byte[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getByte(vecpayload, start_offset + ix * Byte.BYTES);\n+                             });\n@@ -601,1 +604,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -605,3 +608,6 @@\n-                                    byte[] res = v.vec().clone();\n-                                    res[ix] = (byte)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putByte(tpayload, start_offset + ix * Byte.BYTES, (byte)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -613,1 +619,1 @@\n-    static final class Byte256Mask extends AbstractMask<Byte> {\n+    static final value class Byte256Mask extends AbstractMask<Byte> {\n@@ -617,2 +623,2 @@\n-        Byte256Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Byte256Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF256Z) payload;\n@@ -621,3 +627,2 @@\n-        Byte256Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF256Z payload;\n@@ -625,2 +630,2 @@\n-        Byte256Mask(boolean val) {\n-            super(prepare(val));\n+        Byte256Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF256Z)(prepare(payload, offset, VSPECIES));\n@@ -629,6 +634,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Byte256Mask(boolean val) {\n+            this.payload = (VectorPayloadMF256Z)(prepare(val, VSPECIES));\n@@ -637,5 +638,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -653,22 +649,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Byte256Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Byte256Mask(res);\n-        }\n-\n-        Byte256Mask bOp(VectorMask<Byte> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Byte256Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Byte256Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -685,27 +661,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -732,1 +681,1 @@\n-            return (Byte256Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Byte256Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -745,3 +694,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte256Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte256Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte256Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -755,3 +704,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte256Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte256Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte256Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -765,3 +714,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte256Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte256Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte256Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -776,1 +725,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Byte256Mask) m).trueCountHelper());\n@@ -783,1 +732,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Byte256Mask) m).firstTrueHelper());\n@@ -790,1 +739,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Byte256Mask) m).lastTrueHelper());\n@@ -800,1 +749,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Byte256Mask) m).toLongHelper());\n@@ -810,1 +759,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Byte256Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -820,1 +769,1 @@\n-                                         (m, __) -> anyTrueHelper(((Byte256Mask)m).getBits()));\n+                                         (m, __) -> ((Byte256Mask) m).anyTrueHelper());\n@@ -828,1 +777,1 @@\n-                                         (m, __) -> allTrueHelper(((Byte256Mask)m).getBits()));\n+                                         (m, __) -> ((Byte256Mask) m).allTrueHelper());\n@@ -845,1 +794,1 @@\n-    static final class Byte256Shuffle extends AbstractShuffle<Byte> {\n+    static final value class Byte256Shuffle extends AbstractShuffle<Byte> {\n@@ -849,3 +798,2 @@\n-        Byte256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF256B payload;\n@@ -853,2 +801,4 @@\n-        public Byte256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte256Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF256B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -857,2 +807,2 @@\n-        public Byte256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Byte256Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF256B)(prepare(indexes, i, VSPECIES));\n@@ -862,1 +812,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF256B)(prepare(fn, VSPECIES));\n+        }\n+        public Byte256Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF256B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -899,6 +860,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -906,0 +870,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Byte512Vector extends ByteVector {\n+value class Byte512Vector extends ByteVector {\n@@ -57,2 +59,7 @@\n-    Byte512Vector(byte[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512B.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF512B payload;\n+\n+    Byte512Vector(Object value) {\n+        this.payload = (VectorPayloadMF512B) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Byte512Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Byte512Vector(Object v) {\n-        this((byte[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Byte512Vector ZERO = new Byte512Vector(new byte[VLENGTH]);\n-    static final Byte512Vector IOTA = new Byte512Vector(VSPECIES.iotaArray());\n+    static final Byte512Vector ZERO = new Byte512Vector(VectorPayloadMF.newVectorInstanceFactory(byte.class, 64, false));\n+    static final Byte512Vector IOTA = new Byte512Vector(VectorPayloadMF.createVectPayloadInstanceB(VLENGTH, (byte[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    byte[] vec() {\n-        return (byte[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Byte512Mask maskFromArray(boolean[] bits) {\n-        return new Byte512Mask(bits);\n+    Byte512Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Byte512Mask(payload);\n@@ -157,1 +159,1 @@\n-    Byte512Shuffle shuffleFromBytes(byte[] reorder) { return new Byte512Shuffle(reorder); }\n+    Byte512Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Byte512Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Byte512Vector vectorFactory(byte[] vec) {\n+    Byte512Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Byte512Vector uOp(FUnOp f) {\n-        return (Byte512Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Byte512Vector uOpMF(FUnOp f) {\n+        return (Byte512Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Byte512Vector uOp(VectorMask<Byte> m, FUnOp f) {\n+    Byte512Vector uOpMF(VectorMask<Byte> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Byte512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Byte512Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Byte512Vector bOp(Vector<Byte> v, FBinOp f) {\n-        return (Byte512Vector) super.bOpTemplate((Byte512Vector)v, f);  \/\/ specialize\n+    Byte512Vector bOpMF(Vector<Byte> v, FBinOp f) {\n+        return (Byte512Vector) super.bOpTemplateMF((Byte512Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Byte512Vector bOp(Vector<Byte> v,\n+    Byte512Vector bOpMF(Vector<Byte> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Byte512Vector)v, (Byte512Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Byte512Vector)v, (Byte512Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Byte512Vector tOp(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n+    Byte512Vector tOpMF(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Byte512Vector)v1, (Byte512Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Byte512Vector)v1, (Byte512Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Byte512Vector tOp(Vector<Byte> v1, Vector<Byte> v2,\n+    Byte512Vector tOpMF(Vector<Byte> v1, Vector<Byte> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Byte512Vector)v1, (Byte512Vector)v2,\n-                              (Byte512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Byte512Vector)v1, (Byte512Vector)v2,\n+                                (Byte512Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    byte rOp(byte v, VectorMask<Byte> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    byte rOpMF(byte v, VectorMask<Byte> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -584,6 +586,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    byte[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getByte(vecpayload, start_offset + ix * Byte.BYTES);\n+                             });\n@@ -665,1 +668,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -669,3 +672,6 @@\n-                                    byte[] res = v.vec().clone();\n-                                    res[ix] = (byte)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putByte(tpayload, start_offset + ix * Byte.BYTES, (byte)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -677,1 +683,1 @@\n-    static final class Byte512Mask extends AbstractMask<Byte> {\n+    static final value class Byte512Mask extends AbstractMask<Byte> {\n@@ -681,2 +687,2 @@\n-        Byte512Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Byte512Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF512Z) payload;\n@@ -685,3 +691,2 @@\n-        Byte512Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF512Z payload;\n@@ -689,2 +694,2 @@\n-        Byte512Mask(boolean val) {\n-            super(prepare(val));\n+        Byte512Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF512Z)(prepare(payload, offset, VSPECIES));\n@@ -693,6 +698,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Byte512Mask(boolean val) {\n+            this.payload = (VectorPayloadMF512Z)(prepare(val, VSPECIES));\n@@ -701,5 +702,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -717,22 +713,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Byte512Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Byte512Mask(res);\n-        }\n-\n-        Byte512Mask bOp(VectorMask<Byte> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Byte512Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Byte512Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -749,27 +725,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -796,1 +745,1 @@\n-            return (Byte512Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Byte512Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -809,3 +758,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte512Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte512Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte512Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -819,3 +768,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte512Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte512Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte512Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -829,3 +778,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte512Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte512Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte512Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -840,1 +789,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Byte512Mask) m).trueCountHelper());\n@@ -847,1 +796,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Byte512Mask) m).firstTrueHelper());\n@@ -854,1 +803,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Byte512Mask) m).lastTrueHelper());\n@@ -864,1 +813,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Byte512Mask) m).toLongHelper());\n@@ -874,1 +823,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Byte512Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -884,1 +833,1 @@\n-                                         (m, __) -> anyTrueHelper(((Byte512Mask)m).getBits()));\n+                                         (m, __) -> ((Byte512Mask) m).anyTrueHelper());\n@@ -892,1 +841,1 @@\n-                                         (m, __) -> allTrueHelper(((Byte512Mask)m).getBits()));\n+                                         (m, __) -> ((Byte512Mask) m).allTrueHelper());\n@@ -909,1 +858,1 @@\n-    static final class Byte512Shuffle extends AbstractShuffle<Byte> {\n+    static final value class Byte512Shuffle extends AbstractShuffle<Byte> {\n@@ -913,3 +862,2 @@\n-        Byte512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF512B payload;\n@@ -917,2 +865,4 @@\n-        public Byte512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte512Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF512B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -921,2 +871,2 @@\n-        public Byte512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Byte512Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF512B)(prepare(indexes, i, VSPECIES));\n@@ -926,1 +876,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF512B)(prepare(fn, VSPECIES));\n+        }\n+        public Byte512Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF512B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -963,6 +924,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -970,0 +934,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Byte64Vector extends ByteVector {\n+value class Byte64Vector extends ByteVector {\n@@ -57,2 +59,7 @@\n-    Byte64Vector(byte[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64B.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF64B payload;\n+\n+    Byte64Vector(Object value) {\n+        this.payload = (VectorPayloadMF64B) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Byte64Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Byte64Vector(Object v) {\n-        this((byte[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Byte64Vector ZERO = new Byte64Vector(new byte[VLENGTH]);\n-    static final Byte64Vector IOTA = new Byte64Vector(VSPECIES.iotaArray());\n+    static final Byte64Vector ZERO = new Byte64Vector(VectorPayloadMF.newVectorInstanceFactory(byte.class, 8, false));\n+    static final Byte64Vector IOTA = new Byte64Vector(VectorPayloadMF.createVectPayloadInstanceB(VLENGTH, (byte[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    byte[] vec() {\n-        return (byte[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Byte64Mask maskFromArray(boolean[] bits) {\n-        return new Byte64Mask(bits);\n+    Byte64Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Byte64Mask(payload);\n@@ -157,1 +159,1 @@\n-    Byte64Shuffle shuffleFromBytes(byte[] reorder) { return new Byte64Shuffle(reorder); }\n+    Byte64Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Byte64Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Byte64Vector vectorFactory(byte[] vec) {\n+    Byte64Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Byte64Vector uOp(FUnOp f) {\n-        return (Byte64Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Byte64Vector uOpMF(FUnOp f) {\n+        return (Byte64Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Byte64Vector uOp(VectorMask<Byte> m, FUnOp f) {\n+    Byte64Vector uOpMF(VectorMask<Byte> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Byte64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Byte64Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Byte64Vector bOp(Vector<Byte> v, FBinOp f) {\n-        return (Byte64Vector) super.bOpTemplate((Byte64Vector)v, f);  \/\/ specialize\n+    Byte64Vector bOpMF(Vector<Byte> v, FBinOp f) {\n+        return (Byte64Vector) super.bOpTemplateMF((Byte64Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Byte64Vector bOp(Vector<Byte> v,\n+    Byte64Vector bOpMF(Vector<Byte> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Byte64Vector)v, (Byte64Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Byte64Vector)v, (Byte64Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Byte64Vector tOp(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n+    Byte64Vector tOpMF(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Byte64Vector)v1, (Byte64Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Byte64Vector)v1, (Byte64Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Byte64Vector tOp(Vector<Byte> v1, Vector<Byte> v2,\n+    Byte64Vector tOpMF(Vector<Byte> v1, Vector<Byte> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Byte64Vector)v1, (Byte64Vector)v2,\n-                              (Byte64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Byte64Vector)v1, (Byte64Vector)v2,\n+                                (Byte64Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    byte rOp(byte v, VectorMask<Byte> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    byte rOpMF(byte v, VectorMask<Byte> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -528,6 +530,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    byte[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getByte(vecpayload, start_offset + ix * Byte.BYTES);\n+                             });\n@@ -553,1 +556,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -557,3 +560,6 @@\n-                                    byte[] res = v.vec().clone();\n-                                    res[ix] = (byte)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putByte(tpayload, start_offset + ix * Byte.BYTES, (byte)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -565,1 +571,1 @@\n-    static final class Byte64Mask extends AbstractMask<Byte> {\n+    static final value class Byte64Mask extends AbstractMask<Byte> {\n@@ -569,2 +575,2 @@\n-        Byte64Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Byte64Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64Z) payload;\n@@ -573,3 +579,2 @@\n-        Byte64Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64Z payload;\n@@ -577,2 +582,2 @@\n-        Byte64Mask(boolean val) {\n-            super(prepare(val));\n+        Byte64Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(payload, offset, VSPECIES));\n@@ -581,6 +586,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Byte64Mask(boolean val) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(val, VSPECIES));\n@@ -589,5 +590,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -605,22 +601,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Byte64Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Byte64Mask(res);\n-        }\n-\n-        Byte64Mask bOp(VectorMask<Byte> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Byte64Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Byte64Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -637,27 +613,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -684,1 +633,1 @@\n-            return (Byte64Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Byte64Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -697,3 +646,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte64Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte64Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte64Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -707,3 +656,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte64Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte64Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte64Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -717,3 +666,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte64Mask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte64Mask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Byte64Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -728,1 +677,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Byte64Mask) m).trueCountHelper());\n@@ -735,1 +684,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Byte64Mask) m).firstTrueHelper());\n@@ -742,1 +691,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Byte64Mask) m).lastTrueHelper());\n@@ -752,1 +701,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Byte64Mask) m).toLongHelper());\n@@ -762,1 +711,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Byte64Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -772,1 +721,1 @@\n-                                         (m, __) -> anyTrueHelper(((Byte64Mask)m).getBits()));\n+                                         (m, __) -> ((Byte64Mask) m).anyTrueHelper());\n@@ -780,1 +729,1 @@\n-                                         (m, __) -> allTrueHelper(((Byte64Mask)m).getBits()));\n+                                         (m, __) -> ((Byte64Mask) m).allTrueHelper());\n@@ -797,1 +746,1 @@\n-    static final class Byte64Shuffle extends AbstractShuffle<Byte> {\n+    static final value class Byte64Shuffle extends AbstractShuffle<Byte> {\n@@ -801,3 +750,2 @@\n-        Byte64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64B payload;\n@@ -805,2 +753,4 @@\n-        public Byte64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Byte64Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -809,2 +759,2 @@\n-        public Byte64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Byte64Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, i, VSPECIES));\n@@ -814,1 +764,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF64B)(prepare(fn, VSPECIES));\n+        }\n+        public Byte64Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -851,6 +812,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -858,0 +822,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class ByteMaxVector extends ByteVector {\n+value class ByteMaxVector extends ByteVector {\n@@ -57,2 +59,7 @@\n-    ByteMaxVector(byte[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMFMaxB.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMFMaxB payload;\n+\n+    ByteMaxVector(Object value) {\n+        this.payload = (VectorPayloadMFMaxB) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as ByteMaxVector::new,\n-    \/\/ stored into species.vectorFactory.\n-    ByteMaxVector(Object v) {\n-        this((byte[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final ByteMaxVector ZERO = new ByteMaxVector(new byte[VLENGTH]);\n-    static final ByteMaxVector IOTA = new ByteMaxVector(VSPECIES.iotaArray());\n+    static final ByteMaxVector ZERO = new ByteMaxVector(VectorPayloadMF.newVectorInstanceFactory(byte.class, 0, true));\n+    static final ByteMaxVector IOTA = new ByteMaxVector(VectorPayloadMF.createVectPayloadInstanceB(VLENGTH, (byte[])(VSPECIES.iotaArray()), true));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    byte[] vec() {\n-        return (byte[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    ByteMaxMask maskFromArray(boolean[] bits) {\n-        return new ByteMaxMask(bits);\n+    ByteMaxMask maskFromPayload(VectorPayloadMF payload) {\n+        return new ByteMaxMask(payload);\n@@ -157,1 +159,1 @@\n-    ByteMaxShuffle shuffleFromBytes(byte[] reorder) { return new ByteMaxShuffle(reorder); }\n+    ByteMaxShuffle shuffleFromBytes(VectorPayloadMF indexes) { return new ByteMaxShuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    ByteMaxVector vectorFactory(byte[] vec) {\n+    ByteMaxVector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    ByteMaxVector uOp(FUnOp f) {\n-        return (ByteMaxVector) super.uOpTemplate(f);  \/\/ specialize\n+    ByteMaxVector uOpMF(FUnOp f) {\n+        return (ByteMaxVector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    ByteMaxVector uOp(VectorMask<Byte> m, FUnOp f) {\n+    ByteMaxVector uOpMF(VectorMask<Byte> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((ByteMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((ByteMaxMask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    ByteMaxVector bOp(Vector<Byte> v, FBinOp f) {\n-        return (ByteMaxVector) super.bOpTemplate((ByteMaxVector)v, f);  \/\/ specialize\n+    ByteMaxVector bOpMF(Vector<Byte> v, FBinOp f) {\n+        return (ByteMaxVector) super.bOpTemplateMF((ByteMaxVector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    ByteMaxVector bOp(Vector<Byte> v,\n+    ByteMaxVector bOpMF(Vector<Byte> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((ByteMaxVector)v, (ByteMaxMask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((ByteMaxVector)v, (ByteMaxMask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    ByteMaxVector tOp(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n+    ByteMaxVector tOpMF(Vector<Byte> v1, Vector<Byte> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((ByteMaxVector)v1, (ByteMaxVector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((ByteMaxVector)v1, (ByteMaxVector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    ByteMaxVector tOp(Vector<Byte> v1, Vector<Byte> v2,\n+    ByteMaxVector tOpMF(Vector<Byte> v1, Vector<Byte> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((ByteMaxVector)v1, (ByteMaxVector)v2,\n-                              (ByteMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((ByteMaxVector)v1, (ByteMaxVector)v2,\n+                                (ByteMaxMask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    byte rOp(byte v, VectorMask<Byte> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    byte rOpMF(byte v, VectorMask<Byte> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -521,6 +523,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    byte[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getByte(vecpayload, start_offset + ix * Byte.BYTES);\n+                             });\n@@ -539,1 +542,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -543,3 +546,6 @@\n-                                    byte[] res = v.vec().clone();\n-                                    res[ix] = (byte)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putByte(tpayload, start_offset + ix * Byte.BYTES, (byte)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -551,1 +557,1 @@\n-    static final class ByteMaxMask extends AbstractMask<Byte> {\n+    static final value class ByteMaxMask extends AbstractMask<Byte> {\n@@ -555,2 +561,2 @@\n-        ByteMaxMask(boolean[] bits) {\n-            this(bits, 0);\n+        ByteMaxMask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxBZ) payload;\n@@ -559,3 +565,2 @@\n-        ByteMaxMask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxBZ payload;\n@@ -563,2 +568,2 @@\n-        ByteMaxMask(boolean val) {\n-            super(prepare(val));\n+        ByteMaxMask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMFMaxBZ)(prepare(payload, offset, VSPECIES));\n@@ -567,6 +572,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        ByteMaxMask(boolean val) {\n+            this.payload = (VectorPayloadMFMaxBZ)(prepare(val, VSPECIES));\n@@ -575,5 +576,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -591,22 +587,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        ByteMaxMask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new ByteMaxMask(res);\n-        }\n-\n-        ByteMaxMask bOp(VectorMask<Byte> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((ByteMaxMask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new ByteMaxMask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -623,27 +599,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -670,1 +619,1 @@\n-            return (ByteMaxMask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (ByteMaxMask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -683,3 +632,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, ByteMaxMask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, ByteMaxMask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (ByteMaxMask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -693,3 +642,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, ByteMaxMask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, ByteMaxMask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (ByteMaxMask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -703,3 +652,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, ByteMaxMask.class, null, byte.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, ByteMaxMask.class, null,\n+                                          byte.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (ByteMaxMask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -714,1 +663,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((ByteMaxMask) m).trueCountHelper());\n@@ -721,1 +670,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((ByteMaxMask) m).firstTrueHelper());\n@@ -728,1 +677,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((ByteMaxMask) m).lastTrueHelper());\n@@ -738,1 +687,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((ByteMaxMask) m).toLongHelper());\n@@ -748,1 +697,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((ByteMaxMask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -758,1 +707,1 @@\n-                                         (m, __) -> anyTrueHelper(((ByteMaxMask)m).getBits()));\n+                                         (m, __) -> ((ByteMaxMask) m).anyTrueHelper());\n@@ -766,1 +715,1 @@\n-                                         (m, __) -> allTrueHelper(((ByteMaxMask)m).getBits()));\n+                                         (m, __) -> ((ByteMaxMask) m).allTrueHelper());\n@@ -783,1 +732,1 @@\n-    static final class ByteMaxShuffle extends AbstractShuffle<Byte> {\n+    static final value class ByteMaxShuffle extends AbstractShuffle<Byte> {\n@@ -787,3 +736,2 @@\n-        ByteMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxBB payload;\n@@ -791,2 +739,4 @@\n-        public ByteMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        ByteMaxShuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxBB) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -795,2 +745,2 @@\n-        public ByteMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public ByteMaxShuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMFMaxBB)(prepare(indexes, i, VSPECIES));\n@@ -800,1 +750,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMFMaxBB)(prepare(fn, VSPECIES));\n+        }\n+        public ByteMaxShuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMFMaxBB)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -837,6 +798,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, true);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -844,0 +808,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -51,6 +51,2 @@\n-@SuppressWarnings(\"cast\")  \/\/ warning: redundant cast\n-public abstract class ByteVector extends AbstractVector<Byte> {\n-\n-    ByteVector(byte[] vec) {\n-        super(vec);\n-    }\n+@SuppressWarnings({\"cast\"})  \/\/ warning: redundant cast\n+public abstract value class ByteVector extends AbstractVector<Byte> {\n@@ -59,0 +55,4 @@\n+    \/**\n+     * Default Constructor for abstract vector.\n+     *\/\n+    public ByteVector() {}\n@@ -96,3 +96,0 @@\n-    \/*package-private*\/\n-    abstract byte[] vec();\n-\n@@ -103,1 +100,1 @@\n-     * It is an error if the array is aliased elsewhere.\n+     * It is an error if the vec is aliased elsewhere.\n@@ -106,1 +103,1 @@\n-    abstract ByteVector vectorFactory(byte[] vec);\n+    abstract ByteVector vectorFactory(VectorPayloadMF vec);\n@@ -115,2 +112,2 @@\n-    AbstractMask<Byte> maskFactory(boolean[] bits) {\n-        return vspecies().maskFactory(bits);\n+    AbstractMask<Byte> maskFactory(VectorPayloadMF payload) {\n+        return vspecies().maskFactory(payload);\n@@ -127,1 +124,1 @@\n-    ByteVector vOp(FVOp f) {\n+    ByteVector vOpMF(FVOp f) {\n@@ -132,1 +129,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -137,1 +135,1 @@\n-    ByteVector vOp(VectorMask<Byte> m, FVOp f) {\n+    ByteVector vOpMF(VectorMask<Byte> m, FVOp f) {\n@@ -139,1 +137,2 @@\n-        boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n+        VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+        long mOffset = mbits.multiFieldOffset();\n@@ -141,1 +140,1 @@\n-            if (mbits[i]) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n@@ -145,1 +144,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -157,1 +157,1 @@\n-    ByteVector uOp(FUnOp f);\n+    ByteVector uOpMF(FUnOp f);\n@@ -160,5 +160,8 @@\n-    ByteVector uOpTemplate(FUnOp f) {\n-        byte[] vec = vec();\n-        byte[] res = new byte[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec[i]);\n+    ByteVector uOpTemplateMF(FUnOp f) {\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            byte v = U.getByte(vec, vOffset + i * Byte.BYTES);\n+            U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(i, v));\n@@ -166,1 +169,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -171,1 +175,1 @@\n-    ByteVector uOp(VectorMask<Byte> m,\n+    ByteVector uOpMF(VectorMask<Byte> m,\n@@ -175,1 +179,1 @@\n-    ByteVector uOpTemplate(VectorMask<Byte> m,\n+    ByteVector uOpTemplateMF(VectorMask<Byte> m,\n@@ -178,1 +182,1 @@\n-            return uOpTemplate(f);\n+            return uOpTemplateMF(f);\n@@ -180,5 +184,11 @@\n-        byte[] vec = vec();\n-        byte[] res = new byte[length()];\n-        boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec[i]) : vec[i];\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                byte v = U.getByte(vec, vOffset + i * Byte.BYTES);\n+                U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(i, v));\n+            }\n@@ -186,1 +196,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -198,1 +209,1 @@\n-    ByteVector bOp(Vector<Byte> o,\n+    ByteVector bOpMF(Vector<Byte> o,\n@@ -202,1 +213,1 @@\n-    ByteVector bOpTemplate(Vector<Byte> o,\n+    ByteVector bOpTemplateMF(Vector<Byte> o,\n@@ -204,5 +215,9 @@\n-        byte[] res = new byte[length()];\n-        byte[] vec1 = this.vec();\n-        byte[] vec2 = ((ByteVector)o).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i]);\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((ByteVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            byte v1 = U.getByte(vec1, vOffset + i * Byte.BYTES);\n+            byte v2 = U.getByte(vec2, vOffset + i * Byte.BYTES);\n+            U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(i, v1, v2));\n@@ -210,1 +225,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -215,1 +231,1 @@\n-    ByteVector bOp(Vector<Byte> o,\n+    ByteVector bOpMF(Vector<Byte> o,\n@@ -220,1 +236,1 @@\n-    ByteVector bOpTemplate(Vector<Byte> o,\n+    ByteVector bOpTemplateMF(Vector<Byte> o,\n@@ -224,1 +240,1 @@\n-            return bOpTemplate(o, f);\n+            return bOpTemplateMF(o, f);\n@@ -226,6 +242,13 @@\n-        byte[] res = new byte[length()];\n-        byte[] vec1 = this.vec();\n-        byte[] vec2 = ((ByteVector)o).vec();\n-        boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((ByteVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                byte v1 = U.getByte(vec1, vOffset + i * Byte.BYTES);\n+                byte v2 = U.getByte(vec2, vOffset + i * Byte.BYTES);\n+                U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(i, v1, v2));\n+            }\n@@ -233,1 +256,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -245,1 +269,1 @@\n-    ByteVector tOp(Vector<Byte> o1,\n+    ByteVector tOpMF(Vector<Byte> o1,\n@@ -250,1 +274,1 @@\n-    ByteVector tOpTemplate(Vector<Byte> o1,\n+    ByteVector tOpTemplateMF(Vector<Byte> o1,\n@@ -253,6 +277,11 @@\n-        byte[] res = new byte[length()];\n-        byte[] vec1 = this.vec();\n-        byte[] vec2 = ((ByteVector)o1).vec();\n-        byte[] vec3 = ((ByteVector)o2).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i], vec3[i]);\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((ByteVector)o1).vec();\n+        VectorPayloadMF vec3 = ((ByteVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            byte v1 = U.getByte(vec1, vOffset + i * Byte.BYTES);\n+            byte v2 = U.getByte(vec2, vOffset + i * Byte.BYTES);\n+            byte v3 = U.getByte(vec3, vOffset + i * Byte.BYTES);\n+            U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(i, v1, v2, v3));\n@@ -260,1 +289,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -265,1 +295,1 @@\n-    ByteVector tOp(Vector<Byte> o1,\n+    ByteVector tOpMF(Vector<Byte> o1,\n@@ -271,1 +301,1 @@\n-    ByteVector tOpTemplate(Vector<Byte> o1,\n+    ByteVector tOpTemplateMF(Vector<Byte> o1,\n@@ -276,1 +306,1 @@\n-            return tOpTemplate(o1, o2, f);\n+            return tOpTemplateMF(o1, o2, f);\n@@ -278,7 +308,15 @@\n-        byte[] res = new byte[length()];\n-        byte[] vec1 = this.vec();\n-        byte[] vec2 = ((ByteVector)o1).vec();\n-        byte[] vec3 = ((ByteVector)o2).vec();\n-        boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i], vec3[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((ByteVector)o1).vec();\n+        VectorPayloadMF vec3 = ((ByteVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                byte v1 = U.getByte(vec1, vOffset + i * Byte.BYTES);\n+                byte v2 = U.getByte(vec2, vOffset + i * Byte.BYTES);\n+                byte v3 = U.getByte(vec3, vOffset + i * Byte.BYTES);\n+                U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(i, v1, v2, v3));\n+            }\n@@ -286,1 +324,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -293,1 +332,1 @@\n-    byte rOp(byte v, VectorMask<Byte> m, FBinOp f);\n+    byte rOpMF(byte v, VectorMask<Byte> m, FBinOp f);\n@@ -297,1 +336,1 @@\n-    byte rOpTemplate(byte v, VectorMask<Byte> m, FBinOp f) {\n+    byte rOpTemplateMF(byte v, VectorMask<Byte> m, FBinOp f) {\n@@ -299,1 +338,1 @@\n-            return rOpTemplate(v, f);\n+            return rOpTemplateMF(v, f);\n@@ -301,4 +340,8 @@\n-        byte[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = mbits[i] ? f.apply(i, v, vec[i]) : v;\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            byte v1 = U.getByte(vec, vOffset + i * Byte.BYTES);\n+            v = U.getBoolean(mbits, mOffset + i) ? f.apply(i, v, v1) : v;\n@@ -311,4 +354,7 @@\n-    byte rOpTemplate(byte v, FBinOp f) {\n-        byte[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = f.apply(i, v, vec[i]);\n+    byte rOpTemplateMF(byte v, FBinOp f) {\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            byte v1 = U.getByte(vec, vOffset + i * Byte.BYTES);\n+            v = f.apply(i, v, v1);\n@@ -329,1 +375,1 @@\n-    <M> ByteVector ldOp(M memory, int offset,\n+    <M> ByteVector ldOpMF(M memory, int offset,\n@@ -331,4 +377,8 @@\n-        \/\/dummy; no vec = vec();\n-        byte[] res = new byte[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                byte.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(memory, offset, i));\n@@ -336,1 +386,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -342,1 +393,1 @@\n-    <M> ByteVector ldOp(M memory, int offset,\n+    <M> ByteVector ldOpMF(M memory, int offset,\n@@ -345,6 +396,10 @@\n-        \/\/byte[] vec = vec();\n-        byte[] res = new byte[length()];\n-        boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(byte.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(memory, offset, i));\n@@ -353,1 +408,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -364,1 +420,1 @@\n-    ByteVector ldLongOp(MemorySegment memory, long offset,\n+    ByteVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -366,4 +422,8 @@\n-        \/\/dummy; no vec = vec();\n-        byte[] res = new byte[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                byte.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(memory, offset, i));\n@@ -371,1 +431,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -377,1 +438,1 @@\n-    ByteVector ldLongOp(MemorySegment memory, long offset,\n+    ByteVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -380,6 +441,10 @@\n-        \/\/byte[] vec = vec();\n-        byte[] res = new byte[length()];\n-        boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(byte.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putByte(tpayload, vOffset + i * Byte.BYTES, f.apply(memory, offset, i));\n@@ -388,1 +453,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -402,1 +468,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -404,3 +470,5 @@\n-        byte[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getByte(vec, vOffset + i * Byte.BYTES));\n@@ -411,1 +479,1 @@\n-    @ForceInline\n+   @ForceInline\n@@ -413,1 +481,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -416,5 +484,8 @@\n-        byte[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getByte(vec, vOffset + i * Byte.BYTES));\n@@ -425,0 +496,1 @@\n+\n@@ -432,1 +504,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -434,3 +506,5 @@\n-        byte[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getByte(vec, vOffset + i * Byte.BYTES));\n@@ -443,1 +517,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -446,5 +520,8 @@\n-        byte[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getByte(vec, vOffset + i * Byte.BYTES));\n@@ -469,1 +546,1 @@\n-    AbstractMask<Byte> bTest(int cond,\n+    AbstractMask<Byte> bTestMF(int cond,\n@@ -472,5 +549,12 @@\n-        byte[] vec1 = vec();\n-        byte[] vec2 = ((ByteVector)o).vec();\n-        boolean[] bits = new boolean[length()];\n-        for (int i = 0; i < length(); i++){\n-            bits[i] = f.apply(cond, i, vec1[i], vec2[i]);\n+        int length = vspecies().length();\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((ByteVector)o).vec();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF mbits = VectorPayloadMF.newMaskInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        mbits = U.makePrivateBuffer(mbits);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            byte v1 = U.getByte(vec1, vOffset + i * Byte.BYTES);\n+            byte v2 = U.getByte(vec2, vOffset + i * Byte.BYTES);\n+            U.putBoolean(mbits, mOffset + i, f.apply(cond, i, v1, v2));\n@@ -478,1 +562,2 @@\n-        return maskFactory(bits);\n+        mbits = U.finishPrivateBuffer(mbits);\n+        return maskFactory(mbits);\n@@ -565,1 +650,1 @@\n-                                ((bits_, s_) -> s_.rvOp(i -> bits_)));\n+                                ((bits_, s_) -> s_.rvOpMF(i -> bits_)));\n@@ -725,1 +810,1 @@\n-                    v0.uOp(m, (i, a) -> (byte) -a);\n+                    v0.uOpMF(m, (i, a) -> (byte) -a);\n@@ -727,1 +812,1 @@\n-                    v0.uOp(m, (i, a) -> (byte) Math.abs(a));\n+                    v0.uOpMF(m, (i, a) -> (byte) Math.abs(a));\n@@ -729,1 +814,1 @@\n-                    v0.uOp(m, (i, a) -> (byte) bitCount(a));\n+                    v0.uOpMF(m, (i, a) -> (byte) bitCount(a));\n@@ -731,1 +816,1 @@\n-                    v0.uOp(m, (i, a) -> (byte) numberOfTrailingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> (byte) numberOfTrailingZeros(a));\n@@ -733,1 +818,1 @@\n-                    v0.uOp(m, (i, a) -> (byte) numberOfLeadingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> (byte) numberOfLeadingZeros(a));\n@@ -735,1 +820,1 @@\n-                    v0.uOp(m, (i, a) -> reverse(a));\n+                    v0.uOpMF(m, (i, a) -> reverse(a));\n@@ -737,1 +822,1 @@\n-                    v0.uOp(m, (i, a) -> a);\n+                    v0.uOpMF(m, (i, a) -> a);\n@@ -787,1 +872,1 @@\n-            BIN_IMPL.find(op, opc, ByteVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, ByteVector::binaryOperationsMF));\n@@ -847,1 +932,35 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(a + b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a + b));\n+            case VECTOR_OP_SUB: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a - b));\n+            case VECTOR_OP_MUL: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a * b));\n+            case VECTOR_OP_DIV: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a \/ b));\n+            case VECTOR_OP_MAX: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)Math.max(a, b));\n+            case VECTOR_OP_MIN: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)Math.min(a, b));\n+            case VECTOR_OP_AND: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a & b));\n+            case VECTOR_OP_OR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a | b));\n+            case VECTOR_OP_XOR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a ^ b));\n+            case VECTOR_OP_LSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (byte)(a << n));\n+            case VECTOR_OP_RSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (byte)(a >> n));\n+            case VECTOR_OP_URSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (byte)((a & LSHR_SETUP_MASK) >>> n));\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+            default: return null;\n+        }\n+    }\n+\n+    private static BinaryOperation<ByteVector, VectorMask<Byte>> binaryOperationsMF(int opc_) {\n+        switch (opc_) {\n+            case VECTOR_OP_ADD: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a + b));\n@@ -849,1 +968,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(a - b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a - b));\n@@ -851,1 +970,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(a * b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a * b));\n@@ -853,1 +972,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(a \/ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a \/ b));\n@@ -855,1 +974,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)Math.max(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)Math.max(a, b));\n@@ -857,1 +976,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)Math.min(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)Math.min(a, b));\n@@ -859,1 +978,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(a & b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a & b));\n@@ -861,1 +980,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(a | b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a | b));\n@@ -863,1 +982,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (byte)(a ^ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (byte)(a ^ b));\n@@ -865,1 +984,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (byte)(a << n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (byte)(a << n));\n@@ -867,1 +986,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (byte)(a >> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (byte)(a >> n));\n@@ -869,1 +988,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (byte)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (byte)((a & LSHR_SETUP_MASK) >>> n));\n@@ -871,1 +990,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -873,1 +992,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -878,0 +997,1 @@\n+\n@@ -1042,1 +1162,1 @@\n-                    v.uOp(m, (i, a) -> (byte)(a << n));\n+                    v.uOpMF(m, (i, a) -> (byte)(a << n));\n@@ -1044,1 +1164,1 @@\n-                    v.uOp(m, (i, a) -> (byte)(a >> n));\n+                    v.uOpMF(m, (i, a) -> (byte)(a >> n));\n@@ -1046,1 +1166,1 @@\n-                    v.uOp(m, (i, a) -> (byte)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOpMF(m, (i, a) -> (byte)((a & LSHR_SETUP_MASK) >>> n));\n@@ -1048,1 +1168,1 @@\n-                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateLeft(a, (int)n));\n@@ -1050,1 +1170,1 @@\n-                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateRight(a, (int)n));\n@@ -2049,1 +2169,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2071,1 +2191,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2200,1 +2320,1 @@\n-            (v0, v1, m_) -> v0.bOp(v1, m_, (i, a, b) -> b));\n+            (v0, v1, m_) -> v0.bOpMF(v1, m_, (i, a, b) -> b));\n@@ -2407,1 +2527,1 @@\n-            (v1, s_, m_) -> v1.uOp((i, a) -> {\n+            (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2439,1 +2559,1 @@\n-                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                   (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2467,1 +2587,1 @@\n-                (v0, s_, m_) -> v0.uOp((i, a) -> {\n+                (v0, s_, m_) -> v0.uOpMF((i, a) -> {\n@@ -2475,1 +2595,1 @@\n-                (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2817,1 +2937,1 @@\n-                    toBits(v.rOp((byte)0, m, (i, a, b) -> (byte)(a + b)));\n+                    toBits(v.rOpMF((byte)0, m, (i, a, b) -> (byte)(a + b)));\n@@ -2819,1 +2939,1 @@\n-                    toBits(v.rOp((byte)1, m, (i, a, b) -> (byte)(a * b)));\n+                    toBits(v.rOpMF((byte)1, m, (i, a, b) -> (byte)(a * b)));\n@@ -2821,1 +2941,1 @@\n-                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (byte) Math.min(a, b)));\n+                    toBits(v.rOpMF(MAX_OR_INF, m, (i, a, b) -> (byte) Math.min(a, b)));\n@@ -2823,1 +2943,1 @@\n-                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (byte) Math.max(a, b)));\n+                    toBits(v.rOpMF(MIN_OR_INF, m, (i, a, b) -> (byte) Math.max(a, b)));\n@@ -2825,1 +2945,1 @@\n-                    toBits(v.rOp((byte)-1, m, (i, a, b) -> (byte)(a & b)));\n+                    toBits(v.rOpMF((byte)-1, m, (i, a, b) -> (byte)(a & b)));\n@@ -2827,1 +2947,1 @@\n-                    toBits(v.rOp((byte)0, m, (i, a, b) -> (byte)(a | b)));\n+                    toBits(v.rOpMF((byte)0, m, (i, a, b) -> (byte)(a | b)));\n@@ -2829,1 +2949,1 @@\n-                    toBits(v.rOp((byte)0, m, (i, a, b) -> (byte)(a ^ b)));\n+                    toBits(v.rOpMF((byte)0, m, (i, a, b) -> (byte)(a ^ b)));\n@@ -2977,1 +3097,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset);\n+        return vsp.dummyVectorMF().fromArray0(a, offset);\n@@ -3008,1 +3128,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3012,1 +3132,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3052,1 +3172,1 @@\n-        return vsp.vOp(n -> a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(n -> a[offset + indexMap[mapOffset + n]]);\n@@ -3098,1 +3218,1 @@\n-        return vsp.vOp(m, n -> a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(m, n -> a[offset + indexMap[mapOffset + n]]);\n@@ -3127,1 +3247,1 @@\n-        return vsp.dummyVector().fromBooleanArray0(a, offset);\n+        return vsp.dummyVectorMF().fromBooleanArray0(a, offset);\n@@ -3164,1 +3284,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromBooleanArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3168,1 +3288,1 @@\n-        return vsp.dummyVector().fromBooleanArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromBooleanArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3209,1 +3329,1 @@\n-        return vsp.vOp(n -> (byte) (a[offset + indexMap[mapOffset + n]] ? 1 : 0));\n+        return vsp.vOpMF(n -> (byte) (a[offset + indexMap[mapOffset + n]] ? 1 : 0));\n@@ -3256,1 +3376,1 @@\n-        return vsp.vOp(m, n -> (byte) (a[offset + indexMap[mapOffset + n]] ? 1 : 0));\n+        return vsp.vOpMF(m, n -> (byte) (a[offset + indexMap[mapOffset + n]] ? 1 : 0));\n@@ -3295,1 +3415,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset).maybeSwap(bo);\n@@ -3346,1 +3466,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n+            return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3350,1 +3470,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3380,1 +3500,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3382,0 +3502,1 @@\n+\n@@ -3453,1 +3574,1 @@\n-        stOp(a, offset,\n+        stOpMF(a, offset,\n@@ -3495,1 +3616,1 @@\n-        stOp(a, offset, m,\n+        stOpMF(a, offset, m,\n@@ -3533,1 +3654,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3616,1 +3737,1 @@\n-        stOp(a, offset,\n+        stOpMF(a, offset,\n@@ -3664,1 +3785,1 @@\n-        stOp(a, offset, m,\n+        stOpMF(a, offset, m,\n@@ -3742,1 +3863,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -3759,1 +3880,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+            (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -3776,1 +3897,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -3793,1 +3914,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+            (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -3807,1 +3928,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, ByteVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, ByteVector::memorySegmentGet);\n@@ -3823,1 +3944,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, vm, ByteVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, vm, ByteVector::memorySegmentGet);\n@@ -3842,1 +3963,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3859,1 +3980,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -3878,1 +3999,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -3891,1 +4012,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, ByteVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, ByteVector::memorySegmentSet);\n@@ -3908,1 +4029,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, vm, ByteVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, vm, ByteVector::memorySegmentSet);\n@@ -4138,1 +4259,1 @@\n-                    (bits_, s_) -> s_.rvOp(i -> bits_));\n+                    (bits_, s_) -> s_.rvOpMF(i -> bits_));\n@@ -4189,1 +4310,1 @@\n-            return dummyVector().fromArray0(va, 0);\n+            return dummyVectorMF().fromArray0(va, 0);\n@@ -4204,2 +4325,2 @@\n-        ByteVector dummyVector() {\n-            return (ByteVector) super.dummyVector();\n+        ByteVector dummyVectorMF() {\n+            return (ByteVector) super.dummyVectorMF();\n@@ -4211,1 +4332,1 @@\n-        ByteVector rvOp(RVOp f) {\n+        ByteVector rvOpMF(RVOp f) {\n@@ -4217,1 +4338,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -4220,1 +4342,1 @@\n-        ByteVector vOp(FVOp f) {\n+        ByteVector vOpMF(FVOp f) {\n@@ -4225,1 +4347,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -4228,1 +4351,1 @@\n-        ByteVector vOp(VectorMask<Byte> m, FVOp f) {\n+        ByteVector vOpMF(VectorMask<Byte> m, FVOp f) {\n@@ -4230,1 +4353,2 @@\n-            boolean[] mbits = ((AbstractMask<Byte>)m).getBits();\n+            VectorPayloadMF mbits = ((AbstractMask<Byte>)m).getBits();\n+            long mOffset = mbits.multiFieldOffset();\n@@ -4232,1 +4356,1 @@\n-                if (mbits[i]) {\n+                if (U.getBoolean(mbits, mOffset + i)) {\n@@ -4236,1 +4360,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -4241,1 +4366,1 @@\n-        <M> ByteVector ldOp(M memory, int offset,\n+        <M> ByteVector ldOpMF(M memory, int offset,\n@@ -4243,1 +4368,1 @@\n-            return dummyVector().ldOp(memory, offset, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, f);\n@@ -4248,1 +4373,1 @@\n-        <M> ByteVector ldOp(M memory, int offset,\n+        <M> ByteVector ldOpMF(M memory, int offset,\n@@ -4251,1 +4376,1 @@\n-            return dummyVector().ldOp(memory, offset, m, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, m, f);\n@@ -4254,0 +4379,1 @@\n+\n@@ -4256,1 +4382,1 @@\n-        ByteVector ldLongOp(MemorySegment memory, long offset,\n+        ByteVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -4258,1 +4384,1 @@\n-            return dummyVector().ldLongOp(memory, offset, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, f);\n@@ -4263,1 +4389,1 @@\n-        ByteVector ldLongOp(MemorySegment memory, long offset,\n+        ByteVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -4266,1 +4392,1 @@\n-            return dummyVector().ldLongOp(memory, offset, m, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, m, f);\n@@ -4271,2 +4397,2 @@\n-        <M> void stOp(M memory, int offset, FStOp<M> f) {\n-            dummyVector().stOp(memory, offset, f);\n+        <M> void stOpMF(M memory, int offset, FStOp<M> f) {\n+            dummyVectorMF().stOpMF(memory, offset, f);\n@@ -4277,2 +4403,2 @@\n-        <M> void stOp(M memory, int offset,\n-                      AbstractMask<Byte> m,\n+        <M> void stOpMF(M memory, int offset,\n+                     AbstractMask<Byte> m,\n@@ -4280,1 +4406,1 @@\n-            dummyVector().stOp(memory, offset, m, f);\n+            dummyVectorMF().stOpMF(memory, offset, m, f);\n@@ -4283,0 +4409,1 @@\n+\n@@ -4285,2 +4412,2 @@\n-        void stLongOp(MemorySegment memory, long offset, FStLongOp f) {\n-            dummyVector().stLongOp(memory, offset, f);\n+        void stLongOpMF(MemorySegment memory, long offset, FStLongOp f) {\n+            dummyVectorMF().stLongOpMF(memory, offset, f);\n@@ -4291,1 +4418,1 @@\n-        void stLongOp(MemorySegment memory, long offset,\n+        void stLongOpMF(MemorySegment memory, long offset,\n@@ -4294,1 +4421,1 @@\n-            dummyVector().stLongOp(memory, offset, m, f);\n+            dummyVectorMF().stLongOpMF(memory, offset, m, f);\n@@ -4309,1 +4436,1 @@\n-                return ByteMaxVector.ZERO;\n+               return ByteMaxVector.ZERO;\n@@ -4347,0 +4474,10 @@\n+\n+        @Override\n+        Object iotaArray() {\n+            int laneCount = laneCount();\n+            byte [] init = new byte[laneCount];\n+            for (int i = 0; i < laneCount; i++) {\n+                init[i] = (byte)i;\n+            }\n+           return init;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":379,"deletions":242,"binary":false,"changes":621,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Double128Vector extends DoubleVector {\n+value class Double128Vector extends DoubleVector {\n@@ -57,2 +59,7 @@\n-    Double128Vector(double[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128D.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF128D payload;\n+\n+    Double128Vector(Object value) {\n+        this.payload = (VectorPayloadMF128D) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Double128Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Double128Vector(Object v) {\n-        this((double[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Double128Vector ZERO = new Double128Vector(new double[VLENGTH]);\n-    static final Double128Vector IOTA = new Double128Vector(VSPECIES.iotaArray());\n+    static final Double128Vector ZERO = new Double128Vector(VectorPayloadMF.newVectorInstanceFactory(double.class, 2, false));\n+    static final Double128Vector IOTA = new Double128Vector(VectorPayloadMF.createVectPayloadInstanceD(VLENGTH, (double[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    double[] vec() {\n-        return (double[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Double128Mask maskFromArray(boolean[] bits) {\n-        return new Double128Mask(bits);\n+    Double128Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Double128Mask(payload);\n@@ -157,1 +159,1 @@\n-    Double128Shuffle shuffleFromBytes(byte[] reorder) { return new Double128Shuffle(reorder); }\n+    Double128Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Double128Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Double128Vector vectorFactory(double[] vec) {\n+    Double128Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Double128Vector uOp(FUnOp f) {\n-        return (Double128Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Double128Vector uOpMF(FUnOp f) {\n+        return (Double128Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Double128Vector uOp(VectorMask<Double> m, FUnOp f) {\n+    Double128Vector uOpMF(VectorMask<Double> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Double128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Double128Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Double128Vector bOp(Vector<Double> v, FBinOp f) {\n-        return (Double128Vector) super.bOpTemplate((Double128Vector)v, f);  \/\/ specialize\n+    Double128Vector bOpMF(Vector<Double> v, FBinOp f) {\n+        return (Double128Vector) super.bOpTemplateMF((Double128Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Double128Vector bOp(Vector<Double> v,\n+    Double128Vector bOpMF(Vector<Double> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Double128Vector)v, (Double128Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Double128Vector)v, (Double128Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Double128Vector tOp(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n+    Double128Vector tOpMF(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Double128Vector)v1, (Double128Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Double128Vector)v1, (Double128Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Double128Vector tOp(Vector<Double> v1, Vector<Double> v2,\n+    Double128Vector tOpMF(Vector<Double> v1, Vector<Double> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Double128Vector)v1, (Double128Vector)v2,\n-                              (Double128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Double128Vector)v1, (Double128Vector)v2,\n+                                (Double128Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    double rOp(double v, VectorMask<Double> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    double rOpMF(double v, VectorMask<Double> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -514,2 +516,3 @@\n-                     double[] vecarr = vec.vec();\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Double.doubleToLongBits(U.getDouble(vecpayload, start_offset + ix * Double.BYTES));\n@@ -534,3 +537,6 @@\n-                                    double[] res = v.vec().clone();\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putDouble(tpayload, start_offset + ix * Double.BYTES, Double.longBitsToDouble((long)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -542,1 +548,1 @@\n-    static final class Double128Mask extends AbstractMask<Double> {\n+    static final value class Double128Mask extends AbstractMask<Double> {\n@@ -546,2 +552,2 @@\n-        Double128Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Double128Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF16Z) payload;\n@@ -550,3 +556,2 @@\n-        Double128Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF16Z payload;\n@@ -554,2 +559,2 @@\n-        Double128Mask(boolean val) {\n-            super(prepare(val));\n+        Double128Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF16Z)(prepare(payload, offset, VSPECIES));\n@@ -558,6 +563,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Double128Mask(boolean val) {\n+            this.payload = (VectorPayloadMF16Z)(prepare(val, VSPECIES));\n@@ -566,5 +567,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -582,22 +578,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Double128Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Double128Mask(res);\n-        }\n-\n-        Double128Mask bOp(VectorMask<Double> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Double128Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Double128Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -614,27 +590,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -661,1 +610,1 @@\n-            return (Double128Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Double128Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -674,3 +623,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Double128Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double128Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double128Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -684,3 +633,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Double128Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double128Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double128Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -694,3 +643,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double128Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double128Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double128Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -705,1 +654,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Double128Mask) m).trueCountHelper());\n@@ -712,1 +661,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Double128Mask) m).firstTrueHelper());\n@@ -719,1 +668,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Double128Mask) m).lastTrueHelper());\n@@ -729,1 +678,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Double128Mask) m).toLongHelper());\n@@ -739,1 +688,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Double128Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -749,1 +698,1 @@\n-                                         (m, __) -> anyTrueHelper(((Double128Mask)m).getBits()));\n+                                         (m, __) -> ((Double128Mask) m).anyTrueHelper());\n@@ -757,1 +706,1 @@\n-                                         (m, __) -> allTrueHelper(((Double128Mask)m).getBits()));\n+                                         (m, __) -> ((Double128Mask) m).allTrueHelper());\n@@ -774,1 +723,1 @@\n-    static final class Double128Shuffle extends AbstractShuffle<Double> {\n+    static final value class Double128Shuffle extends AbstractShuffle<Double> {\n@@ -778,3 +727,2 @@\n-        Double128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF16B payload;\n@@ -782,2 +730,4 @@\n-        public Double128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double128Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF16B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -786,2 +736,2 @@\n-        public Double128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Double128Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF16B)(prepare(indexes, i, VSPECIES));\n@@ -791,1 +741,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF16B)(prepare(fn, VSPECIES));\n+        }\n+        public Double128Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF16B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -828,6 +789,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -835,0 +799,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Double256Vector extends DoubleVector {\n+value class Double256Vector extends DoubleVector {\n@@ -57,2 +59,7 @@\n-    Double256Vector(double[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256D.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF256D payload;\n+\n+    Double256Vector(Object value) {\n+        this.payload = (VectorPayloadMF256D) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Double256Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Double256Vector(Object v) {\n-        this((double[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Double256Vector ZERO = new Double256Vector(new double[VLENGTH]);\n-    static final Double256Vector IOTA = new Double256Vector(VSPECIES.iotaArray());\n+    static final Double256Vector ZERO = new Double256Vector(VectorPayloadMF.newVectorInstanceFactory(double.class, 4, false));\n+    static final Double256Vector IOTA = new Double256Vector(VectorPayloadMF.createVectPayloadInstanceD(VLENGTH, (double[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    double[] vec() {\n-        return (double[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Double256Mask maskFromArray(boolean[] bits) {\n-        return new Double256Mask(bits);\n+    Double256Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Double256Mask(payload);\n@@ -157,1 +159,1 @@\n-    Double256Shuffle shuffleFromBytes(byte[] reorder) { return new Double256Shuffle(reorder); }\n+    Double256Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Double256Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Double256Vector vectorFactory(double[] vec) {\n+    Double256Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Double256Vector uOp(FUnOp f) {\n-        return (Double256Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Double256Vector uOpMF(FUnOp f) {\n+        return (Double256Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Double256Vector uOp(VectorMask<Double> m, FUnOp f) {\n+    Double256Vector uOpMF(VectorMask<Double> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Double256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Double256Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Double256Vector bOp(Vector<Double> v, FBinOp f) {\n-        return (Double256Vector) super.bOpTemplate((Double256Vector)v, f);  \/\/ specialize\n+    Double256Vector bOpMF(Vector<Double> v, FBinOp f) {\n+        return (Double256Vector) super.bOpTemplateMF((Double256Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Double256Vector bOp(Vector<Double> v,\n+    Double256Vector bOpMF(Vector<Double> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Double256Vector)v, (Double256Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Double256Vector)v, (Double256Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Double256Vector tOp(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n+    Double256Vector tOpMF(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Double256Vector)v1, (Double256Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Double256Vector)v1, (Double256Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Double256Vector tOp(Vector<Double> v1, Vector<Double> v2,\n+    Double256Vector tOpMF(Vector<Double> v1, Vector<Double> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Double256Vector)v1, (Double256Vector)v2,\n-                              (Double256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Double256Vector)v1, (Double256Vector)v2,\n+                                (Double256Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    double rOp(double v, VectorMask<Double> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    double rOpMF(double v, VectorMask<Double> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -516,2 +518,3 @@\n-                     double[] vecarr = vec.vec();\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Double.doubleToLongBits(U.getDouble(vecpayload, start_offset + ix * Double.BYTES));\n@@ -538,3 +541,6 @@\n-                                    double[] res = v.vec().clone();\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putDouble(tpayload, start_offset + ix * Double.BYTES, Double.longBitsToDouble((long)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -546,1 +552,1 @@\n-    static final class Double256Mask extends AbstractMask<Double> {\n+    static final value class Double256Mask extends AbstractMask<Double> {\n@@ -550,2 +556,2 @@\n-        Double256Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Double256Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32Z) payload;\n@@ -554,3 +560,2 @@\n-        Double256Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32Z payload;\n@@ -558,2 +563,2 @@\n-        Double256Mask(boolean val) {\n-            super(prepare(val));\n+        Double256Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(payload, offset, VSPECIES));\n@@ -562,6 +567,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Double256Mask(boolean val) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(val, VSPECIES));\n@@ -570,5 +571,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -586,22 +582,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Double256Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Double256Mask(res);\n-        }\n-\n-        Double256Mask bOp(VectorMask<Double> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Double256Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Double256Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -618,27 +594,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -665,1 +614,1 @@\n-            return (Double256Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Double256Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -678,3 +627,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Double256Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double256Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double256Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -688,3 +637,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Double256Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double256Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double256Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -698,3 +647,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double256Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double256Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double256Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -709,1 +658,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Double256Mask) m).trueCountHelper());\n@@ -716,1 +665,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Double256Mask) m).firstTrueHelper());\n@@ -723,1 +672,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Double256Mask) m).lastTrueHelper());\n@@ -733,1 +682,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Double256Mask) m).toLongHelper());\n@@ -743,1 +692,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Double256Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -753,1 +702,1 @@\n-                                         (m, __) -> anyTrueHelper(((Double256Mask)m).getBits()));\n+                                         (m, __) -> ((Double256Mask) m).anyTrueHelper());\n@@ -761,1 +710,1 @@\n-                                         (m, __) -> allTrueHelper(((Double256Mask)m).getBits()));\n+                                         (m, __) -> ((Double256Mask) m).allTrueHelper());\n@@ -778,1 +727,1 @@\n-    static final class Double256Shuffle extends AbstractShuffle<Double> {\n+    static final value class Double256Shuffle extends AbstractShuffle<Double> {\n@@ -782,3 +731,2 @@\n-        Double256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32B payload;\n@@ -786,2 +734,4 @@\n-        public Double256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double256Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -790,2 +740,2 @@\n-        public Double256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Double256Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, i, VSPECIES));\n@@ -795,1 +745,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF32B)(prepare(fn, VSPECIES));\n+        }\n+        public Double256Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -832,6 +793,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -839,0 +803,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Double512Vector extends DoubleVector {\n+value class Double512Vector extends DoubleVector {\n@@ -57,2 +59,7 @@\n-    Double512Vector(double[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512D.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF512D payload;\n+\n+    Double512Vector(Object value) {\n+        this.payload = (VectorPayloadMF512D) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Double512Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Double512Vector(Object v) {\n-        this((double[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Double512Vector ZERO = new Double512Vector(new double[VLENGTH]);\n-    static final Double512Vector IOTA = new Double512Vector(VSPECIES.iotaArray());\n+    static final Double512Vector ZERO = new Double512Vector(VectorPayloadMF.newVectorInstanceFactory(double.class, 8, false));\n+    static final Double512Vector IOTA = new Double512Vector(VectorPayloadMF.createVectPayloadInstanceD(VLENGTH, (double[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    double[] vec() {\n-        return (double[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Double512Mask maskFromArray(boolean[] bits) {\n-        return new Double512Mask(bits);\n+    Double512Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Double512Mask(payload);\n@@ -157,1 +159,1 @@\n-    Double512Shuffle shuffleFromBytes(byte[] reorder) { return new Double512Shuffle(reorder); }\n+    Double512Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Double512Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Double512Vector vectorFactory(double[] vec) {\n+    Double512Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Double512Vector uOp(FUnOp f) {\n-        return (Double512Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Double512Vector uOpMF(FUnOp f) {\n+        return (Double512Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Double512Vector uOp(VectorMask<Double> m, FUnOp f) {\n+    Double512Vector uOpMF(VectorMask<Double> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Double512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Double512Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Double512Vector bOp(Vector<Double> v, FBinOp f) {\n-        return (Double512Vector) super.bOpTemplate((Double512Vector)v, f);  \/\/ specialize\n+    Double512Vector bOpMF(Vector<Double> v, FBinOp f) {\n+        return (Double512Vector) super.bOpTemplateMF((Double512Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Double512Vector bOp(Vector<Double> v,\n+    Double512Vector bOpMF(Vector<Double> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Double512Vector)v, (Double512Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Double512Vector)v, (Double512Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Double512Vector tOp(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n+    Double512Vector tOpMF(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Double512Vector)v1, (Double512Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Double512Vector)v1, (Double512Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Double512Vector tOp(Vector<Double> v1, Vector<Double> v2,\n+    Double512Vector tOpMF(Vector<Double> v1, Vector<Double> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Double512Vector)v1, (Double512Vector)v2,\n-                              (Double512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Double512Vector)v1, (Double512Vector)v2,\n+                                (Double512Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    double rOp(double v, VectorMask<Double> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    double rOpMF(double v, VectorMask<Double> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -520,2 +522,3 @@\n-                     double[] vecarr = vec.vec();\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Double.doubleToLongBits(U.getDouble(vecpayload, start_offset + ix * Double.BYTES));\n@@ -546,3 +549,6 @@\n-                                    double[] res = v.vec().clone();\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putDouble(tpayload, start_offset + ix * Double.BYTES, Double.longBitsToDouble((long)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -554,1 +560,1 @@\n-    static final class Double512Mask extends AbstractMask<Double> {\n+    static final value class Double512Mask extends AbstractMask<Double> {\n@@ -558,2 +564,2 @@\n-        Double512Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Double512Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64Z) payload;\n@@ -562,3 +568,2 @@\n-        Double512Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64Z payload;\n@@ -566,2 +571,2 @@\n-        Double512Mask(boolean val) {\n-            super(prepare(val));\n+        Double512Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(payload, offset, VSPECIES));\n@@ -570,6 +575,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Double512Mask(boolean val) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(val, VSPECIES));\n@@ -578,5 +579,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -594,22 +590,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Double512Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Double512Mask(res);\n-        }\n-\n-        Double512Mask bOp(VectorMask<Double> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Double512Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Double512Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -626,27 +602,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -673,1 +622,1 @@\n-            return (Double512Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Double512Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -686,3 +635,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Double512Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double512Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double512Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -696,3 +645,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Double512Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double512Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double512Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -706,3 +655,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double512Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double512Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double512Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -717,1 +666,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Double512Mask) m).trueCountHelper());\n@@ -724,1 +673,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Double512Mask) m).firstTrueHelper());\n@@ -731,1 +680,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Double512Mask) m).lastTrueHelper());\n@@ -741,1 +690,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Double512Mask) m).toLongHelper());\n@@ -751,1 +700,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Double512Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -761,1 +710,1 @@\n-                                         (m, __) -> anyTrueHelper(((Double512Mask)m).getBits()));\n+                                         (m, __) -> ((Double512Mask) m).anyTrueHelper());\n@@ -769,1 +718,1 @@\n-                                         (m, __) -> allTrueHelper(((Double512Mask)m).getBits()));\n+                                         (m, __) -> ((Double512Mask) m).allTrueHelper());\n@@ -786,1 +735,1 @@\n-    static final class Double512Shuffle extends AbstractShuffle<Double> {\n+    static final value class Double512Shuffle extends AbstractShuffle<Double> {\n@@ -790,3 +739,2 @@\n-        Double512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64B payload;\n@@ -794,2 +742,4 @@\n-        public Double512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double512Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -798,2 +748,2 @@\n-        public Double512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Double512Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, i, VSPECIES));\n@@ -803,1 +753,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF64B)(prepare(fn, VSPECIES));\n+        }\n+        public Double512Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -840,6 +801,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -847,0 +811,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Double64Vector extends DoubleVector {\n+value class Double64Vector extends DoubleVector {\n@@ -57,2 +59,7 @@\n-    Double64Vector(double[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64D.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF64D payload;\n+\n+    Double64Vector(Object value) {\n+        this.payload = (VectorPayloadMF64D) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Double64Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Double64Vector(Object v) {\n-        this((double[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Double64Vector ZERO = new Double64Vector(new double[VLENGTH]);\n-    static final Double64Vector IOTA = new Double64Vector(VSPECIES.iotaArray());\n+    static final Double64Vector ZERO = new Double64Vector(VectorPayloadMF.newVectorInstanceFactory(double.class, 1, false));\n+    static final Double64Vector IOTA = new Double64Vector(VectorPayloadMF.createVectPayloadInstanceD(VLENGTH, (double[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    double[] vec() {\n-        return (double[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Double64Mask maskFromArray(boolean[] bits) {\n-        return new Double64Mask(bits);\n+    Double64Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Double64Mask(payload);\n@@ -157,1 +159,1 @@\n-    Double64Shuffle shuffleFromBytes(byte[] reorder) { return new Double64Shuffle(reorder); }\n+    Double64Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Double64Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Double64Vector vectorFactory(double[] vec) {\n+    Double64Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Double64Vector uOp(FUnOp f) {\n-        return (Double64Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Double64Vector uOpMF(FUnOp f) {\n+        return (Double64Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Double64Vector uOp(VectorMask<Double> m, FUnOp f) {\n+    Double64Vector uOpMF(VectorMask<Double> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Double64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Double64Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Double64Vector bOp(Vector<Double> v, FBinOp f) {\n-        return (Double64Vector) super.bOpTemplate((Double64Vector)v, f);  \/\/ specialize\n+    Double64Vector bOpMF(Vector<Double> v, FBinOp f) {\n+        return (Double64Vector) super.bOpTemplateMF((Double64Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Double64Vector bOp(Vector<Double> v,\n+    Double64Vector bOpMF(Vector<Double> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Double64Vector)v, (Double64Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Double64Vector)v, (Double64Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Double64Vector tOp(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n+    Double64Vector tOpMF(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Double64Vector)v1, (Double64Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Double64Vector)v1, (Double64Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Double64Vector tOp(Vector<Double> v1, Vector<Double> v2,\n+    Double64Vector tOpMF(Vector<Double> v1, Vector<Double> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Double64Vector)v1, (Double64Vector)v2,\n-                              (Double64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Double64Vector)v1, (Double64Vector)v2,\n+                                (Double64Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    double rOp(double v, VectorMask<Double> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    double rOpMF(double v, VectorMask<Double> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -513,2 +515,3 @@\n-                     double[] vecarr = vec.vec();\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Double.doubleToLongBits(U.getDouble(vecpayload, start_offset + ix * Double.BYTES));\n@@ -532,3 +535,6 @@\n-                                    double[] res = v.vec().clone();\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putDouble(tpayload, start_offset + ix * Double.BYTES, Double.longBitsToDouble((long)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -540,1 +546,1 @@\n-    static final class Double64Mask extends AbstractMask<Double> {\n+    static final value class Double64Mask extends AbstractMask<Double> {\n@@ -544,2 +550,2 @@\n-        Double64Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Double64Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF8Z) payload;\n@@ -548,3 +554,2 @@\n-        Double64Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF8Z payload;\n@@ -552,2 +557,2 @@\n-        Double64Mask(boolean val) {\n-            super(prepare(val));\n+        Double64Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF8Z)(prepare(payload, offset, VSPECIES));\n@@ -556,6 +561,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Double64Mask(boolean val) {\n+            this.payload = (VectorPayloadMF8Z)(prepare(val, VSPECIES));\n@@ -564,5 +565,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -580,22 +576,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Double64Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Double64Mask(res);\n-        }\n-\n-        Double64Mask bOp(VectorMask<Double> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Double64Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Double64Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -612,27 +588,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -659,1 +608,1 @@\n-            return (Double64Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Double64Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -672,3 +621,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Double64Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double64Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double64Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -682,3 +631,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Double64Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double64Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double64Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -692,3 +641,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double64Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double64Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Double64Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -703,1 +652,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Double64Mask) m).trueCountHelper());\n@@ -710,1 +659,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Double64Mask) m).firstTrueHelper());\n@@ -717,1 +666,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Double64Mask) m).lastTrueHelper());\n@@ -727,1 +676,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Double64Mask) m).toLongHelper());\n@@ -737,1 +686,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Double64Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -747,1 +696,1 @@\n-                                         (m, __) -> anyTrueHelper(((Double64Mask)m).getBits()));\n+                                         (m, __) -> ((Double64Mask) m).anyTrueHelper());\n@@ -755,1 +704,1 @@\n-                                         (m, __) -> allTrueHelper(((Double64Mask)m).getBits()));\n+                                         (m, __) -> ((Double64Mask) m).allTrueHelper());\n@@ -772,1 +721,1 @@\n-    static final class Double64Shuffle extends AbstractShuffle<Double> {\n+    static final value class Double64Shuffle extends AbstractShuffle<Double> {\n@@ -776,3 +725,2 @@\n-        Double64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF8B payload;\n@@ -780,2 +728,4 @@\n-        public Double64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Double64Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF8B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -784,2 +734,2 @@\n-        public Double64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Double64Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF8B)(prepare(indexes, i, VSPECIES));\n@@ -789,1 +739,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF8B)(prepare(fn, VSPECIES));\n+        }\n+        public Double64Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF8B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -826,6 +787,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -833,0 +797,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class DoubleMaxVector extends DoubleVector {\n+value class DoubleMaxVector extends DoubleVector {\n@@ -57,2 +59,7 @@\n-    DoubleMaxVector(double[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMFMaxD.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMFMaxD payload;\n+\n+    DoubleMaxVector(Object value) {\n+        this.payload = (VectorPayloadMFMaxD) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as DoubleMaxVector::new,\n-    \/\/ stored into species.vectorFactory.\n-    DoubleMaxVector(Object v) {\n-        this((double[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final DoubleMaxVector ZERO = new DoubleMaxVector(new double[VLENGTH]);\n-    static final DoubleMaxVector IOTA = new DoubleMaxVector(VSPECIES.iotaArray());\n+    static final DoubleMaxVector ZERO = new DoubleMaxVector(VectorPayloadMF.newVectorInstanceFactory(double.class, 0, true));\n+    static final DoubleMaxVector IOTA = new DoubleMaxVector(VectorPayloadMF.createVectPayloadInstanceD(VLENGTH, (double[])(VSPECIES.iotaArray()), true));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    double[] vec() {\n-        return (double[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    DoubleMaxMask maskFromArray(boolean[] bits) {\n-        return new DoubleMaxMask(bits);\n+    DoubleMaxMask maskFromPayload(VectorPayloadMF payload) {\n+        return new DoubleMaxMask(payload);\n@@ -157,1 +159,1 @@\n-    DoubleMaxShuffle shuffleFromBytes(byte[] reorder) { return new DoubleMaxShuffle(reorder); }\n+    DoubleMaxShuffle shuffleFromBytes(VectorPayloadMF indexes) { return new DoubleMaxShuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    DoubleMaxVector vectorFactory(double[] vec) {\n+    DoubleMaxVector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    DoubleMaxVector uOp(FUnOp f) {\n-        return (DoubleMaxVector) super.uOpTemplate(f);  \/\/ specialize\n+    DoubleMaxVector uOpMF(FUnOp f) {\n+        return (DoubleMaxVector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    DoubleMaxVector uOp(VectorMask<Double> m, FUnOp f) {\n+    DoubleMaxVector uOpMF(VectorMask<Double> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((DoubleMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((DoubleMaxMask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    DoubleMaxVector bOp(Vector<Double> v, FBinOp f) {\n-        return (DoubleMaxVector) super.bOpTemplate((DoubleMaxVector)v, f);  \/\/ specialize\n+    DoubleMaxVector bOpMF(Vector<Double> v, FBinOp f) {\n+        return (DoubleMaxVector) super.bOpTemplateMF((DoubleMaxVector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    DoubleMaxVector bOp(Vector<Double> v,\n+    DoubleMaxVector bOpMF(Vector<Double> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((DoubleMaxVector)v, (DoubleMaxMask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((DoubleMaxVector)v, (DoubleMaxMask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    DoubleMaxVector tOp(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n+    DoubleMaxVector tOpMF(Vector<Double> v1, Vector<Double> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((DoubleMaxVector)v1, (DoubleMaxVector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((DoubleMaxVector)v1, (DoubleMaxVector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    DoubleMaxVector tOp(Vector<Double> v1, Vector<Double> v2,\n+    DoubleMaxVector tOpMF(Vector<Double> v1, Vector<Double> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((DoubleMaxVector)v1, (DoubleMaxVector)v2,\n-                              (DoubleMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((DoubleMaxVector)v1, (DoubleMaxVector)v2,\n+                                (DoubleMaxMask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    double rOp(double v, VectorMask<Double> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    double rOpMF(double v, VectorMask<Double> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -512,2 +514,3 @@\n-                     double[] vecarr = vec.vec();\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Double.doubleToLongBits(U.getDouble(vecpayload, start_offset + ix * Double.BYTES));\n@@ -531,3 +534,6 @@\n-                                    double[] res = v.vec().clone();\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putDouble(tpayload, start_offset + ix * Double.BYTES, Double.longBitsToDouble((long)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -539,1 +545,1 @@\n-    static final class DoubleMaxMask extends AbstractMask<Double> {\n+    static final value class DoubleMaxMask extends AbstractMask<Double> {\n@@ -543,2 +549,2 @@\n-        DoubleMaxMask(boolean[] bits) {\n-            this(bits, 0);\n+        DoubleMaxMask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxLZ) payload;\n@@ -547,3 +553,2 @@\n-        DoubleMaxMask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxLZ payload;\n@@ -551,2 +556,2 @@\n-        DoubleMaxMask(boolean val) {\n-            super(prepare(val));\n+        DoubleMaxMask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMFMaxLZ)(prepare(payload, offset, VSPECIES));\n@@ -555,6 +560,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        DoubleMaxMask(boolean val) {\n+            this.payload = (VectorPayloadMFMaxLZ)(prepare(val, VSPECIES));\n@@ -563,5 +564,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -579,22 +575,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        DoubleMaxMask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new DoubleMaxMask(res);\n-        }\n-\n-        DoubleMaxMask bOp(VectorMask<Double> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((DoubleMaxMask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new DoubleMaxMask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -611,27 +587,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -658,1 +607,1 @@\n-            return (DoubleMaxMask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (DoubleMaxMask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -671,3 +620,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, DoubleMaxMask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, DoubleMaxMask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (DoubleMaxMask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -681,3 +630,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, DoubleMaxMask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, DoubleMaxMask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (DoubleMaxMask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -691,3 +640,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, DoubleMaxMask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, DoubleMaxMask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (DoubleMaxMask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -702,1 +651,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((DoubleMaxMask) m).trueCountHelper());\n@@ -709,1 +658,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((DoubleMaxMask) m).firstTrueHelper());\n@@ -716,1 +665,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((DoubleMaxMask) m).lastTrueHelper());\n@@ -726,1 +675,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((DoubleMaxMask) m).toLongHelper());\n@@ -736,1 +685,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((DoubleMaxMask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -746,1 +695,1 @@\n-                                         (m, __) -> anyTrueHelper(((DoubleMaxMask)m).getBits()));\n+                                         (m, __) -> ((DoubleMaxMask) m).anyTrueHelper());\n@@ -754,1 +703,1 @@\n-                                         (m, __) -> allTrueHelper(((DoubleMaxMask)m).getBits()));\n+                                         (m, __) -> ((DoubleMaxMask) m).allTrueHelper());\n@@ -771,1 +720,1 @@\n-    static final class DoubleMaxShuffle extends AbstractShuffle<Double> {\n+    static final value class DoubleMaxShuffle extends AbstractShuffle<Double> {\n@@ -775,3 +724,2 @@\n-        DoubleMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxLB payload;\n@@ -779,2 +727,4 @@\n-        public DoubleMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        DoubleMaxShuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxLB) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -783,2 +733,2 @@\n-        public DoubleMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public DoubleMaxShuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMFMaxLB)(prepare(indexes, i, VSPECIES));\n@@ -788,1 +738,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMFMaxLB)(prepare(fn, VSPECIES));\n+        }\n+        public DoubleMaxShuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMFMaxLB)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -825,6 +786,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, true);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -832,0 +796,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -51,6 +51,2 @@\n-@SuppressWarnings(\"cast\")  \/\/ warning: redundant cast\n-public abstract class DoubleVector extends AbstractVector<Double> {\n-\n-    DoubleVector(double[] vec) {\n-        super(vec);\n-    }\n+@SuppressWarnings({\"cast\"})  \/\/ warning: redundant cast\n+public abstract value class DoubleVector extends AbstractVector<Double> {\n@@ -59,0 +55,4 @@\n+    \/**\n+     * Default Constructor for abstract vector.\n+     *\/\n+    public DoubleVector() {}\n@@ -96,3 +96,0 @@\n-    \/*package-private*\/\n-    abstract double[] vec();\n-\n@@ -103,1 +100,1 @@\n-     * It is an error if the array is aliased elsewhere.\n+     * It is an error if the vec is aliased elsewhere.\n@@ -106,1 +103,1 @@\n-    abstract DoubleVector vectorFactory(double[] vec);\n+    abstract DoubleVector vectorFactory(VectorPayloadMF vec);\n@@ -115,2 +112,2 @@\n-    AbstractMask<Double> maskFactory(boolean[] bits) {\n-        return vspecies().maskFactory(bits);\n+    AbstractMask<Double> maskFactory(VectorPayloadMF payload) {\n+        return vspecies().maskFactory(payload);\n@@ -127,1 +124,1 @@\n-    DoubleVector vOp(FVOp f) {\n+    DoubleVector vOpMF(FVOp f) {\n@@ -132,1 +129,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -137,1 +135,1 @@\n-    DoubleVector vOp(VectorMask<Double> m, FVOp f) {\n+    DoubleVector vOpMF(VectorMask<Double> m, FVOp f) {\n@@ -139,1 +137,2 @@\n-        boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n+        VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+        long mOffset = mbits.multiFieldOffset();\n@@ -141,1 +140,1 @@\n-            if (mbits[i]) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n@@ -145,1 +144,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -157,1 +157,1 @@\n-    DoubleVector uOp(FUnOp f);\n+    DoubleVector uOpMF(FUnOp f);\n@@ -160,5 +160,8 @@\n-    DoubleVector uOpTemplate(FUnOp f) {\n-        double[] vec = vec();\n-        double[] res = new double[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec[i]);\n+    DoubleVector uOpTemplateMF(FUnOp f) {\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            double v = U.getDouble(vec, vOffset + i * Double.BYTES);\n+            U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(i, v));\n@@ -166,1 +169,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -171,1 +175,1 @@\n-    DoubleVector uOp(VectorMask<Double> m,\n+    DoubleVector uOpMF(VectorMask<Double> m,\n@@ -175,1 +179,1 @@\n-    DoubleVector uOpTemplate(VectorMask<Double> m,\n+    DoubleVector uOpTemplateMF(VectorMask<Double> m,\n@@ -178,7 +182,13 @@\n-            return uOpTemplate(f);\n-        }\n-        double[] vec = vec();\n-        double[] res = new double[length()];\n-        boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec[i]) : vec[i];\n+            return uOpTemplateMF(f);\n+        }\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                double v = U.getDouble(vec, vOffset + i * Double.BYTES);\n+                U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(i, v));\n+            }\n@@ -186,1 +196,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -198,1 +209,1 @@\n-    DoubleVector bOp(Vector<Double> o,\n+    DoubleVector bOpMF(Vector<Double> o,\n@@ -202,1 +213,1 @@\n-    DoubleVector bOpTemplate(Vector<Double> o,\n+    DoubleVector bOpTemplateMF(Vector<Double> o,\n@@ -204,5 +215,9 @@\n-        double[] res = new double[length()];\n-        double[] vec1 = this.vec();\n-        double[] vec2 = ((DoubleVector)o).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i]);\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((DoubleVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            double v1 = U.getDouble(vec1, vOffset + i * Double.BYTES);\n+            double v2 = U.getDouble(vec2, vOffset + i * Double.BYTES);\n+            U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(i, v1, v2));\n@@ -210,1 +225,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -215,1 +231,1 @@\n-    DoubleVector bOp(Vector<Double> o,\n+    DoubleVector bOpMF(Vector<Double> o,\n@@ -220,1 +236,1 @@\n-    DoubleVector bOpTemplate(Vector<Double> o,\n+    DoubleVector bOpTemplateMF(Vector<Double> o,\n@@ -224,8 +240,15 @@\n-            return bOpTemplate(o, f);\n-        }\n-        double[] res = new double[length()];\n-        double[] vec1 = this.vec();\n-        double[] vec2 = ((DoubleVector)o).vec();\n-        boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i]) : vec1[i];\n+            return bOpTemplateMF(o, f);\n+        }\n+        VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((DoubleVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                double v1 = U.getDouble(vec1, vOffset + i * Double.BYTES);\n+                double v2 = U.getDouble(vec2, vOffset + i * Double.BYTES);\n+                U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(i, v1, v2));\n+            }\n@@ -233,1 +256,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -245,1 +269,1 @@\n-    DoubleVector tOp(Vector<Double> o1,\n+    DoubleVector tOpMF(Vector<Double> o1,\n@@ -250,1 +274,1 @@\n-    DoubleVector tOpTemplate(Vector<Double> o1,\n+    DoubleVector tOpTemplateMF(Vector<Double> o1,\n@@ -253,8 +277,14 @@\n-        double[] res = new double[length()];\n-        double[] vec1 = this.vec();\n-        double[] vec2 = ((DoubleVector)o1).vec();\n-        double[] vec3 = ((DoubleVector)o2).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i], vec3[i]);\n-        }\n-        return vectorFactory(res);\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((DoubleVector)o1).vec();\n+        VectorPayloadMF vec3 = ((DoubleVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            double v1 = U.getDouble(vec1, vOffset + i * Double.BYTES);\n+            double v2 = U.getDouble(vec2, vOffset + i * Double.BYTES);\n+            double v3 = U.getDouble(vec3, vOffset + i * Double.BYTES);\n+            U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(i, v1, v2, v3));\n+        }\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -265,1 +295,1 @@\n-    DoubleVector tOp(Vector<Double> o1,\n+    DoubleVector tOpMF(Vector<Double> o1,\n@@ -271,1 +301,1 @@\n-    DoubleVector tOpTemplate(Vector<Double> o1,\n+    DoubleVector tOpTemplateMF(Vector<Double> o1,\n@@ -276,9 +306,17 @@\n-            return tOpTemplate(o1, o2, f);\n-        }\n-        double[] res = new double[length()];\n-        double[] vec1 = this.vec();\n-        double[] vec2 = ((DoubleVector)o1).vec();\n-        double[] vec3 = ((DoubleVector)o2).vec();\n-        boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i], vec3[i]) : vec1[i];\n+            return tOpTemplateMF(o1, o2, f);\n+        }\n+        VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((DoubleVector)o1).vec();\n+        VectorPayloadMF vec3 = ((DoubleVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                double v1 = U.getDouble(vec1, vOffset + i * Double.BYTES);\n+                double v2 = U.getDouble(vec2, vOffset + i * Double.BYTES);\n+                double v3 = U.getDouble(vec3, vOffset + i * Double.BYTES);\n+                U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(i, v1, v2, v3));\n+            }\n@@ -286,1 +324,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -293,1 +332,1 @@\n-    double rOp(double v, VectorMask<Double> m, FBinOp f);\n+    double rOpMF(double v, VectorMask<Double> m, FBinOp f);\n@@ -297,1 +336,1 @@\n-    double rOpTemplate(double v, VectorMask<Double> m, FBinOp f) {\n+    double rOpTemplateMF(double v, VectorMask<Double> m, FBinOp f) {\n@@ -299,1 +338,1 @@\n-            return rOpTemplate(v, f);\n+            return rOpTemplateMF(v, f);\n@@ -301,4 +340,8 @@\n-        double[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = mbits[i] ? f.apply(i, v, vec[i]) : v;\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            double v1 = U.getDouble(vec, vOffset + i * Double.BYTES);\n+            v = U.getBoolean(mbits, mOffset + i) ? f.apply(i, v, v1) : v;\n@@ -311,4 +354,7 @@\n-    double rOpTemplate(double v, FBinOp f) {\n-        double[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = f.apply(i, v, vec[i]);\n+    double rOpTemplateMF(double v, FBinOp f) {\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            double v1 = U.getDouble(vec, vOffset + i * Double.BYTES);\n+            v = f.apply(i, v, v1);\n@@ -329,1 +375,1 @@\n-    <M> DoubleVector ldOp(M memory, int offset,\n+    <M> DoubleVector ldOpMF(M memory, int offset,\n@@ -331,4 +377,8 @@\n-        \/\/dummy; no vec = vec();\n-        double[] res = new double[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                double.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(memory, offset, i));\n@@ -336,1 +386,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -342,1 +393,1 @@\n-    <M> DoubleVector ldOp(M memory, int offset,\n+    <M> DoubleVector ldOpMF(M memory, int offset,\n@@ -345,6 +396,10 @@\n-        \/\/double[] vec = vec();\n-        double[] res = new double[length()];\n-        boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(double.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(memory, offset, i));\n@@ -353,1 +408,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -364,1 +420,1 @@\n-    DoubleVector ldLongOp(MemorySegment memory, long offset,\n+    DoubleVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -366,4 +422,8 @@\n-        \/\/dummy; no vec = vec();\n-        double[] res = new double[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                double.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(memory, offset, i));\n@@ -371,1 +431,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -377,1 +438,1 @@\n-    DoubleVector ldLongOp(MemorySegment memory, long offset,\n+    DoubleVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -380,6 +441,10 @@\n-        \/\/double[] vec = vec();\n-        double[] res = new double[length()];\n-        boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(double.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putDouble(tpayload, vOffset + i * Double.BYTES, f.apply(memory, offset, i));\n@@ -388,1 +453,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -402,1 +468,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -404,3 +470,5 @@\n-        double[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getDouble(vec, vOffset + i * Double.BYTES));\n@@ -411,1 +479,1 @@\n-    @ForceInline\n+   @ForceInline\n@@ -413,1 +481,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -416,5 +484,8 @@\n-        double[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getDouble(vec, vOffset + i * Double.BYTES));\n@@ -425,0 +496,1 @@\n+\n@@ -432,1 +504,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -434,3 +506,5 @@\n-        double[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getDouble(vec, vOffset + i * Double.BYTES));\n@@ -443,1 +517,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -446,5 +520,8 @@\n-        double[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getDouble(vec, vOffset + i * Double.BYTES));\n@@ -469,1 +546,1 @@\n-    AbstractMask<Double> bTest(int cond,\n+    AbstractMask<Double> bTestMF(int cond,\n@@ -472,5 +549,12 @@\n-        double[] vec1 = vec();\n-        double[] vec2 = ((DoubleVector)o).vec();\n-        boolean[] bits = new boolean[length()];\n-        for (int i = 0; i < length(); i++){\n-            bits[i] = f.apply(cond, i, vec1[i], vec2[i]);\n+        int length = vspecies().length();\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((DoubleVector)o).vec();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF mbits = VectorPayloadMF.newMaskInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        mbits = U.makePrivateBuffer(mbits);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            double v1 = U.getDouble(vec1, vOffset + i * Double.BYTES);\n+            double v2 = U.getDouble(vec2, vOffset + i * Double.BYTES);\n+            U.putBoolean(mbits, mOffset + i, f.apply(cond, i, v1, v2));\n@@ -478,1 +562,2 @@\n-        return maskFactory(bits);\n+        mbits = U.finishPrivateBuffer(mbits);\n+        return maskFactory(mbits);\n@@ -554,1 +639,1 @@\n-                        ((bits_, s_) -> s_.rvOp(i -> bits_)));\n+                        ((bits_, s_) -> s_.rvOpMF(i -> bits_)));\n@@ -708,1 +793,1 @@\n-                    v0.uOp(m, (i, a) -> (double) -a);\n+                    v0.uOpMF(m, (i, a) -> (double) -a);\n@@ -710,1 +795,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.abs(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.abs(a));\n@@ -712,1 +797,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.sin(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.sin(a));\n@@ -714,1 +799,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.cos(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.cos(a));\n@@ -716,1 +801,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.tan(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.tan(a));\n@@ -718,1 +803,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.asin(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.asin(a));\n@@ -720,1 +805,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.acos(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.acos(a));\n@@ -722,1 +807,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.atan(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.atan(a));\n@@ -724,1 +809,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.exp(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.exp(a));\n@@ -726,1 +811,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.log(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.log(a));\n@@ -728,1 +813,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.log10(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.log10(a));\n@@ -730,1 +815,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.sqrt(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.sqrt(a));\n@@ -732,1 +817,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.cbrt(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.cbrt(a));\n@@ -734,1 +819,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.sinh(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.sinh(a));\n@@ -736,1 +821,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.cosh(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.cosh(a));\n@@ -738,1 +823,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.tanh(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.tanh(a));\n@@ -740,1 +825,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.expm1(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.expm1(a));\n@@ -742,1 +827,1 @@\n-                    v0.uOp(m, (i, a) -> (double) Math.log1p(a));\n+                    v0.uOpMF(m, (i, a) -> (double) Math.log1p(a));\n@@ -777,1 +862,1 @@\n-            BIN_IMPL.find(op, opc, DoubleVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, DoubleVector::binaryOperationsMF));\n@@ -821,1 +906,27 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (double)(a + b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)(a + b));\n+            case VECTOR_OP_SUB: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)(a - b));\n+            case VECTOR_OP_MUL: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)(a * b));\n+            case VECTOR_OP_DIV: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)(a \/ b));\n+            case VECTOR_OP_MAX: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)Math.max(a, b));\n+            case VECTOR_OP_MIN: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)Math.min(a, b));\n+            case VECTOR_OP_OR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n+            case VECTOR_OP_ATAN2: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double) Math.atan2(a, b));\n+            case VECTOR_OP_POW: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double) Math.pow(a, b));\n+            case VECTOR_OP_HYPOT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double) Math.hypot(a, b));\n+            default: return null;\n+        }\n+    }\n+\n+    private static BinaryOperation<DoubleVector, VectorMask<Double>> binaryOperationsMF(int opc_) {\n+        switch (opc_) {\n+            case VECTOR_OP_ADD: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)(a + b));\n@@ -823,1 +934,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (double)(a - b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)(a - b));\n@@ -825,1 +936,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (double)(a * b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)(a * b));\n@@ -827,1 +938,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (double)(a \/ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)(a \/ b));\n@@ -829,1 +940,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (double)Math.max(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)Math.max(a, b));\n@@ -831,1 +942,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (double)Math.min(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double)Math.min(a, b));\n@@ -833,1 +944,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n@@ -835,1 +946,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (double) Math.atan2(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double) Math.atan2(a, b));\n@@ -837,1 +948,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (double) Math.pow(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double) Math.pow(a, b));\n@@ -839,1 +950,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (double) Math.hypot(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (double) Math.hypot(a, b));\n@@ -844,0 +955,1 @@\n+\n@@ -1031,1 +1143,1 @@\n-                    v0.tOp(v1_, v2_, m, (i, a, b, c) -> Math.fma(a, b, c));\n+                    v0.tOpMF(v1_, v2_, m, (i, a, b, c) -> Math.fma(a, b, c));\n@@ -1895,1 +2007,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -1917,1 +2029,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2042,1 +2154,1 @@\n-            (v0, v1, m_) -> v0.bOp(v1, m_, (i, a, b) -> b));\n+            (v0, v1, m_) -> v0.bOpMF(v1, m_, (i, a, b) -> b));\n@@ -2249,1 +2361,1 @@\n-            (v1, s_, m_) -> v1.uOp((i, a) -> {\n+            (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2281,1 +2393,1 @@\n-                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                   (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2309,1 +2421,1 @@\n-                (v0, s_, m_) -> v0.uOp((i, a) -> {\n+                (v0, s_, m_) -> v0.uOpMF((i, a) -> {\n@@ -2317,1 +2429,1 @@\n-                (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2637,1 +2749,1 @@\n-                    toBits(v.rOp((double)0, m, (i, a, b) -> (double)(a + b)));\n+                    toBits(v.rOpMF((double)0, m, (i, a, b) -> (double)(a + b)));\n@@ -2639,1 +2751,1 @@\n-                    toBits(v.rOp((double)1, m, (i, a, b) -> (double)(a * b)));\n+                    toBits(v.rOpMF((double)1, m, (i, a, b) -> (double)(a * b)));\n@@ -2641,1 +2753,1 @@\n-                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (double) Math.min(a, b)));\n+                    toBits(v.rOpMF(MAX_OR_INF, m, (i, a, b) -> (double) Math.min(a, b)));\n@@ -2643,1 +2755,1 @@\n-                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (double) Math.max(a, b)));\n+                    toBits(v.rOpMF(MIN_OR_INF, m, (i, a, b) -> (double) Math.max(a, b)));\n@@ -2775,1 +2887,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset);\n+        return vsp.dummyVectorMF().fromArray0(a, offset);\n@@ -2806,1 +2918,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -2810,1 +2922,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -2860,1 +2972,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -2886,1 +2998,1 @@\n-            s.vOp(n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(n -> c[idx + iMap[idy+n]]));\n@@ -2936,1 +3048,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, indexMap, mapOffset, m);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, indexMap, mapOffset, m);\n@@ -2978,1 +3090,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset).maybeSwap(bo);\n@@ -3034,1 +3146,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n+            return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3038,1 +3150,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3068,1 +3180,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3070,0 +3182,1 @@\n+\n@@ -3149,1 +3262,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -3176,1 +3289,1 @@\n-            -> v.stOp(arr, off,\n+            -> v.stOpMF(arr, off,\n@@ -3299,1 +3412,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -3316,1 +3429,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+            (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -3342,1 +3455,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -3369,1 +3482,1 @@\n-            s.vOp(vm, n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(vm, n -> c[idx + iMap[idy+n]]));\n@@ -3384,1 +3497,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, DoubleVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, DoubleVector::memorySegmentGet);\n@@ -3400,1 +3513,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, vm, DoubleVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, vm, DoubleVector::memorySegmentGet);\n@@ -3419,1 +3532,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3436,1 +3549,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -3458,1 +3571,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -3486,1 +3599,1 @@\n-            -> v.stOp(arr, off, vm,\n+            -> v.stOpMF(arr, off, vm,\n@@ -3503,1 +3616,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, DoubleVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, DoubleVector::memorySegmentSet);\n@@ -3520,1 +3633,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, vm, DoubleVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, vm, DoubleVector::memorySegmentSet);\n@@ -3741,1 +3854,1 @@\n-                    (bits_, s_) -> s_.rvOp(i -> bits_));\n+                    (bits_, s_) -> s_.rvOpMF(i -> bits_));\n@@ -3792,1 +3905,1 @@\n-            return dummyVector().fromArray0(va, 0);\n+            return dummyVectorMF().fromArray0(va, 0);\n@@ -3807,2 +3920,2 @@\n-        DoubleVector dummyVector() {\n-            return (DoubleVector) super.dummyVector();\n+        DoubleVector dummyVectorMF() {\n+            return (DoubleVector) super.dummyVectorMF();\n@@ -3814,1 +3927,1 @@\n-        DoubleVector rvOp(RVOp f) {\n+        DoubleVector rvOpMF(RVOp f) {\n@@ -3820,1 +3933,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3823,1 +3937,1 @@\n-        DoubleVector vOp(FVOp f) {\n+        DoubleVector vOpMF(FVOp f) {\n@@ -3828,1 +3942,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3831,1 +3946,1 @@\n-        DoubleVector vOp(VectorMask<Double> m, FVOp f) {\n+        DoubleVector vOpMF(VectorMask<Double> m, FVOp f) {\n@@ -3833,1 +3948,2 @@\n-            boolean[] mbits = ((AbstractMask<Double>)m).getBits();\n+            VectorPayloadMF mbits = ((AbstractMask<Double>)m).getBits();\n+            long mOffset = mbits.multiFieldOffset();\n@@ -3835,1 +3951,1 @@\n-                if (mbits[i]) {\n+                if (U.getBoolean(mbits, mOffset + i)) {\n@@ -3839,1 +3955,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3844,1 +3961,1 @@\n-        <M> DoubleVector ldOp(M memory, int offset,\n+        <M> DoubleVector ldOpMF(M memory, int offset,\n@@ -3846,1 +3963,1 @@\n-            return dummyVector().ldOp(memory, offset, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, f);\n@@ -3851,1 +3968,1 @@\n-        <M> DoubleVector ldOp(M memory, int offset,\n+        <M> DoubleVector ldOpMF(M memory, int offset,\n@@ -3854,1 +3971,1 @@\n-            return dummyVector().ldOp(memory, offset, m, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, m, f);\n@@ -3857,0 +3974,1 @@\n+\n@@ -3859,1 +3977,1 @@\n-        DoubleVector ldLongOp(MemorySegment memory, long offset,\n+        DoubleVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -3861,1 +3979,1 @@\n-            return dummyVector().ldLongOp(memory, offset, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, f);\n@@ -3866,1 +3984,1 @@\n-        DoubleVector ldLongOp(MemorySegment memory, long offset,\n+        DoubleVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -3869,1 +3987,1 @@\n-            return dummyVector().ldLongOp(memory, offset, m, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, m, f);\n@@ -3874,2 +3992,2 @@\n-        <M> void stOp(M memory, int offset, FStOp<M> f) {\n-            dummyVector().stOp(memory, offset, f);\n+        <M> void stOpMF(M memory, int offset, FStOp<M> f) {\n+            dummyVectorMF().stOpMF(memory, offset, f);\n@@ -3880,2 +3998,2 @@\n-        <M> void stOp(M memory, int offset,\n-                      AbstractMask<Double> m,\n+        <M> void stOpMF(M memory, int offset,\n+                     AbstractMask<Double> m,\n@@ -3883,1 +4001,1 @@\n-            dummyVector().stOp(memory, offset, m, f);\n+            dummyVectorMF().stOpMF(memory, offset, m, f);\n@@ -3886,0 +4004,1 @@\n+\n@@ -3888,2 +4007,2 @@\n-        void stLongOp(MemorySegment memory, long offset, FStLongOp f) {\n-            dummyVector().stLongOp(memory, offset, f);\n+        void stLongOpMF(MemorySegment memory, long offset, FStLongOp f) {\n+            dummyVectorMF().stLongOpMF(memory, offset, f);\n@@ -3894,1 +4013,1 @@\n-        void stLongOp(MemorySegment memory, long offset,\n+        void stLongOpMF(MemorySegment memory, long offset,\n@@ -3897,1 +4016,1 @@\n-            dummyVector().stLongOp(memory, offset, m, f);\n+            dummyVectorMF().stLongOpMF(memory, offset, m, f);\n@@ -3912,1 +4031,1 @@\n-                return DoubleMaxVector.ZERO;\n+               return DoubleMaxVector.ZERO;\n@@ -3950,0 +4069,10 @@\n+\n+        @Override\n+        Object iotaArray() {\n+            int laneCount = laneCount();\n+            double [] init = new double[laneCount];\n+            for (int i = 0; i < laneCount; i++) {\n+                init[i] = (double)i;\n+            }\n+           return init;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":369,"deletions":240,"binary":false,"changes":609,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Float128Vector extends FloatVector {\n+value class Float128Vector extends FloatVector {\n@@ -57,2 +59,7 @@\n-    Float128Vector(float[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128F.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF128F payload;\n+\n+    Float128Vector(Object value) {\n+        this.payload = (VectorPayloadMF128F) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Float128Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Float128Vector(Object v) {\n-        this((float[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Float128Vector ZERO = new Float128Vector(new float[VLENGTH]);\n-    static final Float128Vector IOTA = new Float128Vector(VSPECIES.iotaArray());\n+    static final Float128Vector ZERO = new Float128Vector(VectorPayloadMF.newVectorInstanceFactory(float.class, 4, false));\n+    static final Float128Vector IOTA = new Float128Vector(VectorPayloadMF.createVectPayloadInstanceF(VLENGTH, (float[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    float[] vec() {\n-        return (float[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Float128Mask maskFromArray(boolean[] bits) {\n-        return new Float128Mask(bits);\n+    Float128Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Float128Mask(payload);\n@@ -157,1 +159,1 @@\n-    Float128Shuffle shuffleFromBytes(byte[] reorder) { return new Float128Shuffle(reorder); }\n+    Float128Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Float128Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Float128Vector vectorFactory(float[] vec) {\n+    Float128Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Float128Vector uOp(FUnOp f) {\n-        return (Float128Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Float128Vector uOpMF(FUnOp f) {\n+        return (Float128Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Float128Vector uOp(VectorMask<Float> m, FUnOp f) {\n+    Float128Vector uOpMF(VectorMask<Float> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Float128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Float128Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Float128Vector bOp(Vector<Float> v, FBinOp f) {\n-        return (Float128Vector) super.bOpTemplate((Float128Vector)v, f);  \/\/ specialize\n+    Float128Vector bOpMF(Vector<Float> v, FBinOp f) {\n+        return (Float128Vector) super.bOpTemplateMF((Float128Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Float128Vector bOp(Vector<Float> v,\n+    Float128Vector bOpMF(Vector<Float> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Float128Vector)v, (Float128Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Float128Vector)v, (Float128Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Float128Vector tOp(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n+    Float128Vector tOpMF(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Float128Vector)v1, (Float128Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Float128Vector)v1, (Float128Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Float128Vector tOp(Vector<Float> v1, Vector<Float> v2,\n+    Float128Vector tOpMF(Vector<Float> v1, Vector<Float> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Float128Vector)v1, (Float128Vector)v2,\n-                              (Float128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Float128Vector)v1, (Float128Vector)v2,\n+                                (Float128Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    float rOp(float v, VectorMask<Float> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    float rOpMF(float v, VectorMask<Float> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -516,2 +518,3 @@\n-                     float[] vecarr = vec.vec();\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Float.floatToIntBits(U.getFloat(vecpayload, start_offset + ix * Float.BYTES));\n@@ -538,3 +541,6 @@\n-                                    float[] res = v.vec().clone();\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putFloat(tpayload, start_offset + ix * Float.BYTES, Float.intBitsToFloat((int)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -546,1 +552,1 @@\n-    static final class Float128Mask extends AbstractMask<Float> {\n+    static final value class Float128Mask extends AbstractMask<Float> {\n@@ -550,2 +556,2 @@\n-        Float128Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Float128Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32Z) payload;\n@@ -554,3 +560,2 @@\n-        Float128Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32Z payload;\n@@ -558,2 +563,2 @@\n-        Float128Mask(boolean val) {\n-            super(prepare(val));\n+        Float128Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(payload, offset, VSPECIES));\n@@ -562,6 +567,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Float128Mask(boolean val) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(val, VSPECIES));\n@@ -570,5 +571,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -586,22 +582,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Float128Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Float128Mask(res);\n-        }\n-\n-        Float128Mask bOp(VectorMask<Float> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Float128Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Float128Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -618,27 +594,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -665,1 +614,1 @@\n-            return (Float128Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Float128Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -678,3 +627,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Float128Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float128Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float128Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -688,3 +637,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Float128Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float128Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float128Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -698,3 +647,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float128Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float128Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float128Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -709,1 +658,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Float128Mask) m).trueCountHelper());\n@@ -716,1 +665,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Float128Mask) m).firstTrueHelper());\n@@ -723,1 +672,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Float128Mask) m).lastTrueHelper());\n@@ -733,1 +682,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Float128Mask) m).toLongHelper());\n@@ -743,1 +692,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Float128Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -753,1 +702,1 @@\n-                                         (m, __) -> anyTrueHelper(((Float128Mask)m).getBits()));\n+                                         (m, __) -> ((Float128Mask) m).anyTrueHelper());\n@@ -761,1 +710,1 @@\n-                                         (m, __) -> allTrueHelper(((Float128Mask)m).getBits()));\n+                                         (m, __) -> ((Float128Mask) m).allTrueHelper());\n@@ -778,1 +727,1 @@\n-    static final class Float128Shuffle extends AbstractShuffle<Float> {\n+    static final value class Float128Shuffle extends AbstractShuffle<Float> {\n@@ -782,3 +731,2 @@\n-        Float128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32B payload;\n@@ -786,2 +734,4 @@\n-        public Float128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float128Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -790,2 +740,2 @@\n-        public Float128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Float128Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, i, VSPECIES));\n@@ -795,1 +745,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF32B)(prepare(fn, VSPECIES));\n+        }\n+        public Float128Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -832,6 +793,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -839,0 +803,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Float256Vector extends FloatVector {\n+value class Float256Vector extends FloatVector {\n@@ -57,2 +59,7 @@\n-    Float256Vector(float[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256F.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF256F payload;\n+\n+    Float256Vector(Object value) {\n+        this.payload = (VectorPayloadMF256F) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Float256Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Float256Vector(Object v) {\n-        this((float[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Float256Vector ZERO = new Float256Vector(new float[VLENGTH]);\n-    static final Float256Vector IOTA = new Float256Vector(VSPECIES.iotaArray());\n+    static final Float256Vector ZERO = new Float256Vector(VectorPayloadMF.newVectorInstanceFactory(float.class, 8, false));\n+    static final Float256Vector IOTA = new Float256Vector(VectorPayloadMF.createVectPayloadInstanceF(VLENGTH, (float[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    float[] vec() {\n-        return (float[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Float256Mask maskFromArray(boolean[] bits) {\n-        return new Float256Mask(bits);\n+    Float256Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Float256Mask(payload);\n@@ -157,1 +159,1 @@\n-    Float256Shuffle shuffleFromBytes(byte[] reorder) { return new Float256Shuffle(reorder); }\n+    Float256Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Float256Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Float256Vector vectorFactory(float[] vec) {\n+    Float256Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Float256Vector uOp(FUnOp f) {\n-        return (Float256Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Float256Vector uOpMF(FUnOp f) {\n+        return (Float256Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Float256Vector uOp(VectorMask<Float> m, FUnOp f) {\n+    Float256Vector uOpMF(VectorMask<Float> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Float256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Float256Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Float256Vector bOp(Vector<Float> v, FBinOp f) {\n-        return (Float256Vector) super.bOpTemplate((Float256Vector)v, f);  \/\/ specialize\n+    Float256Vector bOpMF(Vector<Float> v, FBinOp f) {\n+        return (Float256Vector) super.bOpTemplateMF((Float256Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Float256Vector bOp(Vector<Float> v,\n+    Float256Vector bOpMF(Vector<Float> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Float256Vector)v, (Float256Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Float256Vector)v, (Float256Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Float256Vector tOp(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n+    Float256Vector tOpMF(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Float256Vector)v1, (Float256Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Float256Vector)v1, (Float256Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Float256Vector tOp(Vector<Float> v1, Vector<Float> v2,\n+    Float256Vector tOpMF(Vector<Float> v1, Vector<Float> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Float256Vector)v1, (Float256Vector)v2,\n-                              (Float256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Float256Vector)v1, (Float256Vector)v2,\n+                                (Float256Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    float rOp(float v, VectorMask<Float> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    float rOpMF(float v, VectorMask<Float> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -520,2 +522,3 @@\n-                     float[] vecarr = vec.vec();\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Float.floatToIntBits(U.getFloat(vecpayload, start_offset + ix * Float.BYTES));\n@@ -546,3 +549,6 @@\n-                                    float[] res = v.vec().clone();\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putFloat(tpayload, start_offset + ix * Float.BYTES, Float.intBitsToFloat((int)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -554,1 +560,1 @@\n-    static final class Float256Mask extends AbstractMask<Float> {\n+    static final value class Float256Mask extends AbstractMask<Float> {\n@@ -558,2 +564,2 @@\n-        Float256Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Float256Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64Z) payload;\n@@ -562,3 +568,2 @@\n-        Float256Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64Z payload;\n@@ -566,2 +571,2 @@\n-        Float256Mask(boolean val) {\n-            super(prepare(val));\n+        Float256Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(payload, offset, VSPECIES));\n@@ -570,6 +575,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Float256Mask(boolean val) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(val, VSPECIES));\n@@ -578,5 +579,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -594,22 +590,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Float256Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Float256Mask(res);\n-        }\n-\n-        Float256Mask bOp(VectorMask<Float> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Float256Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Float256Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -626,27 +602,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -673,1 +622,1 @@\n-            return (Float256Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Float256Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -686,3 +635,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Float256Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float256Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float256Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -696,3 +645,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Float256Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float256Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float256Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -706,3 +655,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float256Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float256Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float256Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -717,1 +666,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Float256Mask) m).trueCountHelper());\n@@ -724,1 +673,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Float256Mask) m).firstTrueHelper());\n@@ -731,1 +680,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Float256Mask) m).lastTrueHelper());\n@@ -741,1 +690,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Float256Mask) m).toLongHelper());\n@@ -751,1 +700,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Float256Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -761,1 +710,1 @@\n-                                         (m, __) -> anyTrueHelper(((Float256Mask)m).getBits()));\n+                                         (m, __) -> ((Float256Mask) m).anyTrueHelper());\n@@ -769,1 +718,1 @@\n-                                         (m, __) -> allTrueHelper(((Float256Mask)m).getBits()));\n+                                         (m, __) -> ((Float256Mask) m).allTrueHelper());\n@@ -786,1 +735,1 @@\n-    static final class Float256Shuffle extends AbstractShuffle<Float> {\n+    static final value class Float256Shuffle extends AbstractShuffle<Float> {\n@@ -790,3 +739,2 @@\n-        Float256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64B payload;\n@@ -794,2 +742,4 @@\n-        public Float256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float256Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -798,2 +748,2 @@\n-        public Float256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Float256Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, i, VSPECIES));\n@@ -803,1 +753,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF64B)(prepare(fn, VSPECIES));\n+        }\n+        public Float256Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -840,6 +801,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -847,0 +811,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Float512Vector extends FloatVector {\n+value class Float512Vector extends FloatVector {\n@@ -57,2 +59,7 @@\n-    Float512Vector(float[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512F.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF512F payload;\n+\n+    Float512Vector(Object value) {\n+        this.payload = (VectorPayloadMF512F) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Float512Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Float512Vector(Object v) {\n-        this((float[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Float512Vector ZERO = new Float512Vector(new float[VLENGTH]);\n-    static final Float512Vector IOTA = new Float512Vector(VSPECIES.iotaArray());\n+    static final Float512Vector ZERO = new Float512Vector(VectorPayloadMF.newVectorInstanceFactory(float.class, 16, false));\n+    static final Float512Vector IOTA = new Float512Vector(VectorPayloadMF.createVectPayloadInstanceF(VLENGTH, (float[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    float[] vec() {\n-        return (float[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Float512Mask maskFromArray(boolean[] bits) {\n-        return new Float512Mask(bits);\n+    Float512Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Float512Mask(payload);\n@@ -157,1 +159,1 @@\n-    Float512Shuffle shuffleFromBytes(byte[] reorder) { return new Float512Shuffle(reorder); }\n+    Float512Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Float512Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Float512Vector vectorFactory(float[] vec) {\n+    Float512Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Float512Vector uOp(FUnOp f) {\n-        return (Float512Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Float512Vector uOpMF(FUnOp f) {\n+        return (Float512Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Float512Vector uOp(VectorMask<Float> m, FUnOp f) {\n+    Float512Vector uOpMF(VectorMask<Float> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Float512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Float512Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Float512Vector bOp(Vector<Float> v, FBinOp f) {\n-        return (Float512Vector) super.bOpTemplate((Float512Vector)v, f);  \/\/ specialize\n+    Float512Vector bOpMF(Vector<Float> v, FBinOp f) {\n+        return (Float512Vector) super.bOpTemplateMF((Float512Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Float512Vector bOp(Vector<Float> v,\n+    Float512Vector bOpMF(Vector<Float> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Float512Vector)v, (Float512Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Float512Vector)v, (Float512Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Float512Vector tOp(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n+    Float512Vector tOpMF(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Float512Vector)v1, (Float512Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Float512Vector)v1, (Float512Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Float512Vector tOp(Vector<Float> v1, Vector<Float> v2,\n+    Float512Vector tOpMF(Vector<Float> v1, Vector<Float> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Float512Vector)v1, (Float512Vector)v2,\n-                              (Float512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Float512Vector)v1, (Float512Vector)v2,\n+                                (Float512Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    float rOp(float v, VectorMask<Float> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    float rOpMF(float v, VectorMask<Float> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -528,2 +530,3 @@\n-                     float[] vecarr = vec.vec();\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Float.floatToIntBits(U.getFloat(vecpayload, start_offset + ix * Float.BYTES));\n@@ -562,3 +565,6 @@\n-                                    float[] res = v.vec().clone();\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putFloat(tpayload, start_offset + ix * Float.BYTES, Float.intBitsToFloat((int)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -570,1 +576,1 @@\n-    static final class Float512Mask extends AbstractMask<Float> {\n+    static final value class Float512Mask extends AbstractMask<Float> {\n@@ -574,2 +580,2 @@\n-        Float512Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Float512Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF128Z) payload;\n@@ -578,3 +584,2 @@\n-        Float512Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF128Z payload;\n@@ -582,2 +587,2 @@\n-        Float512Mask(boolean val) {\n-            super(prepare(val));\n+        Float512Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF128Z)(prepare(payload, offset, VSPECIES));\n@@ -586,6 +591,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Float512Mask(boolean val) {\n+            this.payload = (VectorPayloadMF128Z)(prepare(val, VSPECIES));\n@@ -594,5 +595,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -610,22 +606,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Float512Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Float512Mask(res);\n-        }\n-\n-        Float512Mask bOp(VectorMask<Float> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Float512Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Float512Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -642,27 +618,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -689,1 +638,1 @@\n-            return (Float512Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Float512Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -702,3 +651,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Float512Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float512Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float512Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -712,3 +661,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Float512Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float512Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float512Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -722,3 +671,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float512Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float512Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float512Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -733,1 +682,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Float512Mask) m).trueCountHelper());\n@@ -740,1 +689,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Float512Mask) m).firstTrueHelper());\n@@ -747,1 +696,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Float512Mask) m).lastTrueHelper());\n@@ -757,1 +706,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Float512Mask) m).toLongHelper());\n@@ -767,1 +716,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Float512Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -777,1 +726,1 @@\n-                                         (m, __) -> anyTrueHelper(((Float512Mask)m).getBits()));\n+                                         (m, __) -> ((Float512Mask) m).anyTrueHelper());\n@@ -785,1 +734,1 @@\n-                                         (m, __) -> allTrueHelper(((Float512Mask)m).getBits()));\n+                                         (m, __) -> ((Float512Mask) m).allTrueHelper());\n@@ -802,1 +751,1 @@\n-    static final class Float512Shuffle extends AbstractShuffle<Float> {\n+    static final value class Float512Shuffle extends AbstractShuffle<Float> {\n@@ -806,3 +755,2 @@\n-        Float512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF128B payload;\n@@ -810,2 +758,4 @@\n-        public Float512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float512Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF128B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -814,2 +764,2 @@\n-        public Float512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Float512Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF128B)(prepare(indexes, i, VSPECIES));\n@@ -819,1 +769,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF128B)(prepare(fn, VSPECIES));\n+        }\n+        public Float512Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF128B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -856,6 +817,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -863,0 +827,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Float64Vector extends FloatVector {\n+value class Float64Vector extends FloatVector {\n@@ -57,2 +59,7 @@\n-    Float64Vector(float[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64F.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF64F payload;\n+\n+    Float64Vector(Object value) {\n+        this.payload = (VectorPayloadMF64F) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Float64Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Float64Vector(Object v) {\n-        this((float[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Float64Vector ZERO = new Float64Vector(new float[VLENGTH]);\n-    static final Float64Vector IOTA = new Float64Vector(VSPECIES.iotaArray());\n+    static final Float64Vector ZERO = new Float64Vector(VectorPayloadMF.newVectorInstanceFactory(float.class, 2, false));\n+    static final Float64Vector IOTA = new Float64Vector(VectorPayloadMF.createVectPayloadInstanceF(VLENGTH, (float[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    float[] vec() {\n-        return (float[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Float64Mask maskFromArray(boolean[] bits) {\n-        return new Float64Mask(bits);\n+    Float64Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Float64Mask(payload);\n@@ -157,1 +159,1 @@\n-    Float64Shuffle shuffleFromBytes(byte[] reorder) { return new Float64Shuffle(reorder); }\n+    Float64Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Float64Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Float64Vector vectorFactory(float[] vec) {\n+    Float64Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Float64Vector uOp(FUnOp f) {\n-        return (Float64Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Float64Vector uOpMF(FUnOp f) {\n+        return (Float64Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Float64Vector uOp(VectorMask<Float> m, FUnOp f) {\n+    Float64Vector uOpMF(VectorMask<Float> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Float64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Float64Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Float64Vector bOp(Vector<Float> v, FBinOp f) {\n-        return (Float64Vector) super.bOpTemplate((Float64Vector)v, f);  \/\/ specialize\n+    Float64Vector bOpMF(Vector<Float> v, FBinOp f) {\n+        return (Float64Vector) super.bOpTemplateMF((Float64Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Float64Vector bOp(Vector<Float> v,\n+    Float64Vector bOpMF(Vector<Float> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Float64Vector)v, (Float64Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Float64Vector)v, (Float64Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Float64Vector tOp(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n+    Float64Vector tOpMF(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Float64Vector)v1, (Float64Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Float64Vector)v1, (Float64Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Float64Vector tOp(Vector<Float> v1, Vector<Float> v2,\n+    Float64Vector tOpMF(Vector<Float> v1, Vector<Float> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Float64Vector)v1, (Float64Vector)v2,\n-                              (Float64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Float64Vector)v1, (Float64Vector)v2,\n+                                (Float64Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    float rOp(float v, VectorMask<Float> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    float rOpMF(float v, VectorMask<Float> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -514,2 +516,3 @@\n-                     float[] vecarr = vec.vec();\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Float.floatToIntBits(U.getFloat(vecpayload, start_offset + ix * Float.BYTES));\n@@ -534,3 +537,6 @@\n-                                    float[] res = v.vec().clone();\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putFloat(tpayload, start_offset + ix * Float.BYTES, Float.intBitsToFloat((int)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -542,1 +548,1 @@\n-    static final class Float64Mask extends AbstractMask<Float> {\n+    static final value class Float64Mask extends AbstractMask<Float> {\n@@ -546,2 +552,2 @@\n-        Float64Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Float64Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF16Z) payload;\n@@ -550,3 +556,2 @@\n-        Float64Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF16Z payload;\n@@ -554,2 +559,2 @@\n-        Float64Mask(boolean val) {\n-            super(prepare(val));\n+        Float64Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF16Z)(prepare(payload, offset, VSPECIES));\n@@ -558,6 +563,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Float64Mask(boolean val) {\n+            this.payload = (VectorPayloadMF16Z)(prepare(val, VSPECIES));\n@@ -566,5 +567,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -582,22 +578,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Float64Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Float64Mask(res);\n-        }\n-\n-        Float64Mask bOp(VectorMask<Float> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Float64Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Float64Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -614,27 +590,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -661,1 +610,1 @@\n-            return (Float64Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Float64Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -674,3 +623,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Float64Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float64Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float64Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -684,3 +633,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Float64Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float64Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float64Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -694,3 +643,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float64Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float64Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Float64Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -705,1 +654,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Float64Mask) m).trueCountHelper());\n@@ -712,1 +661,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Float64Mask) m).firstTrueHelper());\n@@ -719,1 +668,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Float64Mask) m).lastTrueHelper());\n@@ -729,1 +678,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Float64Mask) m).toLongHelper());\n@@ -739,1 +688,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Float64Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -749,1 +698,1 @@\n-                                         (m, __) -> anyTrueHelper(((Float64Mask)m).getBits()));\n+                                         (m, __) -> ((Float64Mask) m).anyTrueHelper());\n@@ -757,1 +706,1 @@\n-                                         (m, __) -> allTrueHelper(((Float64Mask)m).getBits()));\n+                                         (m, __) -> ((Float64Mask) m).allTrueHelper());\n@@ -774,1 +723,1 @@\n-    static final class Float64Shuffle extends AbstractShuffle<Float> {\n+    static final value class Float64Shuffle extends AbstractShuffle<Float> {\n@@ -778,3 +727,2 @@\n-        Float64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF16B payload;\n@@ -782,2 +730,4 @@\n-        public Float64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Float64Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF16B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -786,2 +736,2 @@\n-        public Float64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Float64Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF16B)(prepare(indexes, i, VSPECIES));\n@@ -791,1 +741,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF16B)(prepare(fn, VSPECIES));\n+        }\n+        public Float64Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF16B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -828,6 +789,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -835,0 +799,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class FloatMaxVector extends FloatVector {\n+value class FloatMaxVector extends FloatVector {\n@@ -57,2 +59,7 @@\n-    FloatMaxVector(float[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMFMaxF.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMFMaxF payload;\n+\n+    FloatMaxVector(Object value) {\n+        this.payload = (VectorPayloadMFMaxF) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as FloatMaxVector::new,\n-    \/\/ stored into species.vectorFactory.\n-    FloatMaxVector(Object v) {\n-        this((float[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final FloatMaxVector ZERO = new FloatMaxVector(new float[VLENGTH]);\n-    static final FloatMaxVector IOTA = new FloatMaxVector(VSPECIES.iotaArray());\n+    static final FloatMaxVector ZERO = new FloatMaxVector(VectorPayloadMF.newVectorInstanceFactory(float.class, 0, true));\n+    static final FloatMaxVector IOTA = new FloatMaxVector(VectorPayloadMF.createVectPayloadInstanceF(VLENGTH, (float[])(VSPECIES.iotaArray()), true));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    float[] vec() {\n-        return (float[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    FloatMaxMask maskFromArray(boolean[] bits) {\n-        return new FloatMaxMask(bits);\n+    FloatMaxMask maskFromPayload(VectorPayloadMF payload) {\n+        return new FloatMaxMask(payload);\n@@ -157,1 +159,1 @@\n-    FloatMaxShuffle shuffleFromBytes(byte[] reorder) { return new FloatMaxShuffle(reorder); }\n+    FloatMaxShuffle shuffleFromBytes(VectorPayloadMF indexes) { return new FloatMaxShuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    FloatMaxVector vectorFactory(float[] vec) {\n+    FloatMaxVector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    FloatMaxVector uOp(FUnOp f) {\n-        return (FloatMaxVector) super.uOpTemplate(f);  \/\/ specialize\n+    FloatMaxVector uOpMF(FUnOp f) {\n+        return (FloatMaxVector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    FloatMaxVector uOp(VectorMask<Float> m, FUnOp f) {\n+    FloatMaxVector uOpMF(VectorMask<Float> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((FloatMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((FloatMaxMask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    FloatMaxVector bOp(Vector<Float> v, FBinOp f) {\n-        return (FloatMaxVector) super.bOpTemplate((FloatMaxVector)v, f);  \/\/ specialize\n+    FloatMaxVector bOpMF(Vector<Float> v, FBinOp f) {\n+        return (FloatMaxVector) super.bOpTemplateMF((FloatMaxVector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    FloatMaxVector bOp(Vector<Float> v,\n+    FloatMaxVector bOpMF(Vector<Float> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((FloatMaxVector)v, (FloatMaxMask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((FloatMaxVector)v, (FloatMaxMask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    FloatMaxVector tOp(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n+    FloatMaxVector tOpMF(Vector<Float> v1, Vector<Float> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((FloatMaxVector)v1, (FloatMaxVector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((FloatMaxVector)v1, (FloatMaxVector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    FloatMaxVector tOp(Vector<Float> v1, Vector<Float> v2,\n+    FloatMaxVector tOpMF(Vector<Float> v1, Vector<Float> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((FloatMaxVector)v1, (FloatMaxVector)v2,\n-                              (FloatMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((FloatMaxVector)v1, (FloatMaxVector)v2,\n+                                (FloatMaxMask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    float rOp(float v, VectorMask<Float> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    float rOpMF(float v, VectorMask<Float> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -512,2 +514,3 @@\n-                     float[] vecarr = vec.vec();\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)Float.floatToIntBits(U.getFloat(vecpayload, start_offset + ix * Float.BYTES));\n@@ -531,3 +534,6 @@\n-                                    float[] res = v.vec().clone();\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putFloat(tpayload, start_offset + ix * Float.BYTES, Float.intBitsToFloat((int)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -539,1 +545,1 @@\n-    static final class FloatMaxMask extends AbstractMask<Float> {\n+    static final value class FloatMaxMask extends AbstractMask<Float> {\n@@ -543,2 +549,2 @@\n-        FloatMaxMask(boolean[] bits) {\n-            this(bits, 0);\n+        FloatMaxMask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxIZ) payload;\n@@ -547,3 +553,2 @@\n-        FloatMaxMask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxIZ payload;\n@@ -551,2 +556,2 @@\n-        FloatMaxMask(boolean val) {\n-            super(prepare(val));\n+        FloatMaxMask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMFMaxIZ)(prepare(payload, offset, VSPECIES));\n@@ -555,6 +560,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        FloatMaxMask(boolean val) {\n+            this.payload = (VectorPayloadMFMaxIZ)(prepare(val, VSPECIES));\n@@ -563,5 +564,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -579,22 +575,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        FloatMaxMask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new FloatMaxMask(res);\n-        }\n-\n-        FloatMaxMask bOp(VectorMask<Float> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((FloatMaxMask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new FloatMaxMask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -611,27 +587,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -658,1 +607,1 @@\n-            return (FloatMaxMask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (FloatMaxMask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -671,3 +620,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, FloatMaxMask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, FloatMaxMask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (FloatMaxMask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -681,3 +630,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, FloatMaxMask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, FloatMaxMask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (FloatMaxMask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -691,3 +640,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, FloatMaxMask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, FloatMaxMask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (FloatMaxMask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -702,1 +651,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((FloatMaxMask) m).trueCountHelper());\n@@ -709,1 +658,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((FloatMaxMask) m).firstTrueHelper());\n@@ -716,1 +665,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((FloatMaxMask) m).lastTrueHelper());\n@@ -726,1 +675,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((FloatMaxMask) m).toLongHelper());\n@@ -736,1 +685,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((FloatMaxMask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -746,1 +695,1 @@\n-                                         (m, __) -> anyTrueHelper(((FloatMaxMask)m).getBits()));\n+                                         (m, __) -> ((FloatMaxMask) m).anyTrueHelper());\n@@ -754,1 +703,1 @@\n-                                         (m, __) -> allTrueHelper(((FloatMaxMask)m).getBits()));\n+                                         (m, __) -> ((FloatMaxMask) m).allTrueHelper());\n@@ -771,1 +720,1 @@\n-    static final class FloatMaxShuffle extends AbstractShuffle<Float> {\n+    static final value class FloatMaxShuffle extends AbstractShuffle<Float> {\n@@ -775,3 +724,2 @@\n-        FloatMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxIB payload;\n@@ -779,2 +727,4 @@\n-        public FloatMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        FloatMaxShuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxIB) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -783,2 +733,2 @@\n-        public FloatMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public FloatMaxShuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMFMaxIB)(prepare(indexes, i, VSPECIES));\n@@ -788,1 +738,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMFMaxIB)(prepare(fn, VSPECIES));\n+        }\n+        public FloatMaxShuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMFMaxIB)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -825,6 +786,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, true);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -832,0 +796,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":108,"deletions":143,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -51,6 +51,2 @@\n-@SuppressWarnings(\"cast\")  \/\/ warning: redundant cast\n-public abstract class FloatVector extends AbstractVector<Float> {\n-\n-    FloatVector(float[] vec) {\n-        super(vec);\n-    }\n+@SuppressWarnings({\"cast\"})  \/\/ warning: redundant cast\n+public abstract value class FloatVector extends AbstractVector<Float> {\n@@ -59,0 +55,4 @@\n+    \/**\n+     * Default Constructor for abstract vector.\n+     *\/\n+    public FloatVector() {}\n@@ -96,3 +96,0 @@\n-    \/*package-private*\/\n-    abstract float[] vec();\n-\n@@ -103,1 +100,1 @@\n-     * It is an error if the array is aliased elsewhere.\n+     * It is an error if the vec is aliased elsewhere.\n@@ -106,1 +103,1 @@\n-    abstract FloatVector vectorFactory(float[] vec);\n+    abstract FloatVector vectorFactory(VectorPayloadMF vec);\n@@ -115,2 +112,2 @@\n-    AbstractMask<Float> maskFactory(boolean[] bits) {\n-        return vspecies().maskFactory(bits);\n+    AbstractMask<Float> maskFactory(VectorPayloadMF payload) {\n+        return vspecies().maskFactory(payload);\n@@ -127,1 +124,1 @@\n-    FloatVector vOp(FVOp f) {\n+    FloatVector vOpMF(FVOp f) {\n@@ -132,1 +129,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -137,1 +135,1 @@\n-    FloatVector vOp(VectorMask<Float> m, FVOp f) {\n+    FloatVector vOpMF(VectorMask<Float> m, FVOp f) {\n@@ -139,1 +137,2 @@\n-        boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n+        VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+        long mOffset = mbits.multiFieldOffset();\n@@ -141,1 +140,1 @@\n-            if (mbits[i]) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n@@ -145,1 +144,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -157,1 +157,1 @@\n-    FloatVector uOp(FUnOp f);\n+    FloatVector uOpMF(FUnOp f);\n@@ -160,5 +160,8 @@\n-    FloatVector uOpTemplate(FUnOp f) {\n-        float[] vec = vec();\n-        float[] res = new float[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec[i]);\n+    FloatVector uOpTemplateMF(FUnOp f) {\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            float v = U.getFloat(vec, vOffset + i * Float.BYTES);\n+            U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(i, v));\n@@ -166,1 +169,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -171,1 +175,1 @@\n-    FloatVector uOp(VectorMask<Float> m,\n+    FloatVector uOpMF(VectorMask<Float> m,\n@@ -175,1 +179,1 @@\n-    FloatVector uOpTemplate(VectorMask<Float> m,\n+    FloatVector uOpTemplateMF(VectorMask<Float> m,\n@@ -178,7 +182,13 @@\n-            return uOpTemplate(f);\n-        }\n-        float[] vec = vec();\n-        float[] res = new float[length()];\n-        boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec[i]) : vec[i];\n+            return uOpTemplateMF(f);\n+        }\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                float v = U.getFloat(vec, vOffset + i * Float.BYTES);\n+                U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(i, v));\n+            }\n@@ -186,1 +196,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -198,1 +209,1 @@\n-    FloatVector bOp(Vector<Float> o,\n+    FloatVector bOpMF(Vector<Float> o,\n@@ -202,1 +213,1 @@\n-    FloatVector bOpTemplate(Vector<Float> o,\n+    FloatVector bOpTemplateMF(Vector<Float> o,\n@@ -204,5 +215,9 @@\n-        float[] res = new float[length()];\n-        float[] vec1 = this.vec();\n-        float[] vec2 = ((FloatVector)o).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i]);\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((FloatVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            float v1 = U.getFloat(vec1, vOffset + i * Float.BYTES);\n+            float v2 = U.getFloat(vec2, vOffset + i * Float.BYTES);\n+            U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(i, v1, v2));\n@@ -210,1 +225,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -215,1 +231,1 @@\n-    FloatVector bOp(Vector<Float> o,\n+    FloatVector bOpMF(Vector<Float> o,\n@@ -220,1 +236,1 @@\n-    FloatVector bOpTemplate(Vector<Float> o,\n+    FloatVector bOpTemplateMF(Vector<Float> o,\n@@ -224,8 +240,15 @@\n-            return bOpTemplate(o, f);\n-        }\n-        float[] res = new float[length()];\n-        float[] vec1 = this.vec();\n-        float[] vec2 = ((FloatVector)o).vec();\n-        boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i]) : vec1[i];\n+            return bOpTemplateMF(o, f);\n+        }\n+        VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((FloatVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                float v1 = U.getFloat(vec1, vOffset + i * Float.BYTES);\n+                float v2 = U.getFloat(vec2, vOffset + i * Float.BYTES);\n+                U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(i, v1, v2));\n+            }\n@@ -233,1 +256,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -245,1 +269,1 @@\n-    FloatVector tOp(Vector<Float> o1,\n+    FloatVector tOpMF(Vector<Float> o1,\n@@ -250,1 +274,1 @@\n-    FloatVector tOpTemplate(Vector<Float> o1,\n+    FloatVector tOpTemplateMF(Vector<Float> o1,\n@@ -253,8 +277,14 @@\n-        float[] res = new float[length()];\n-        float[] vec1 = this.vec();\n-        float[] vec2 = ((FloatVector)o1).vec();\n-        float[] vec3 = ((FloatVector)o2).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i], vec3[i]);\n-        }\n-        return vectorFactory(res);\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((FloatVector)o1).vec();\n+        VectorPayloadMF vec3 = ((FloatVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            float v1 = U.getFloat(vec1, vOffset + i * Float.BYTES);\n+            float v2 = U.getFloat(vec2, vOffset + i * Float.BYTES);\n+            float v3 = U.getFloat(vec3, vOffset + i * Float.BYTES);\n+            U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(i, v1, v2, v3));\n+        }\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -265,1 +295,1 @@\n-    FloatVector tOp(Vector<Float> o1,\n+    FloatVector tOpMF(Vector<Float> o1,\n@@ -271,1 +301,1 @@\n-    FloatVector tOpTemplate(Vector<Float> o1,\n+    FloatVector tOpTemplateMF(Vector<Float> o1,\n@@ -276,9 +306,17 @@\n-            return tOpTemplate(o1, o2, f);\n-        }\n-        float[] res = new float[length()];\n-        float[] vec1 = this.vec();\n-        float[] vec2 = ((FloatVector)o1).vec();\n-        float[] vec3 = ((FloatVector)o2).vec();\n-        boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i], vec3[i]) : vec1[i];\n+            return tOpTemplateMF(o1, o2, f);\n+        }\n+        VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((FloatVector)o1).vec();\n+        VectorPayloadMF vec3 = ((FloatVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                float v1 = U.getFloat(vec1, vOffset + i * Float.BYTES);\n+                float v2 = U.getFloat(vec2, vOffset + i * Float.BYTES);\n+                float v3 = U.getFloat(vec3, vOffset + i * Float.BYTES);\n+                U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(i, v1, v2, v3));\n+            }\n@@ -286,1 +324,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -293,1 +332,1 @@\n-    float rOp(float v, VectorMask<Float> m, FBinOp f);\n+    float rOpMF(float v, VectorMask<Float> m, FBinOp f);\n@@ -297,1 +336,1 @@\n-    float rOpTemplate(float v, VectorMask<Float> m, FBinOp f) {\n+    float rOpTemplateMF(float v, VectorMask<Float> m, FBinOp f) {\n@@ -299,1 +338,1 @@\n-            return rOpTemplate(v, f);\n+            return rOpTemplateMF(v, f);\n@@ -301,4 +340,8 @@\n-        float[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = mbits[i] ? f.apply(i, v, vec[i]) : v;\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            float v1 = U.getFloat(vec, vOffset + i * Float.BYTES);\n+            v = U.getBoolean(mbits, mOffset + i) ? f.apply(i, v, v1) : v;\n@@ -311,4 +354,7 @@\n-    float rOpTemplate(float v, FBinOp f) {\n-        float[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = f.apply(i, v, vec[i]);\n+    float rOpTemplateMF(float v, FBinOp f) {\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            float v1 = U.getFloat(vec, vOffset + i * Float.BYTES);\n+            v = f.apply(i, v, v1);\n@@ -329,1 +375,1 @@\n-    <M> FloatVector ldOp(M memory, int offset,\n+    <M> FloatVector ldOpMF(M memory, int offset,\n@@ -331,4 +377,8 @@\n-        \/\/dummy; no vec = vec();\n-        float[] res = new float[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                float.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(memory, offset, i));\n@@ -336,1 +386,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -342,1 +393,1 @@\n-    <M> FloatVector ldOp(M memory, int offset,\n+    <M> FloatVector ldOpMF(M memory, int offset,\n@@ -345,6 +396,10 @@\n-        \/\/float[] vec = vec();\n-        float[] res = new float[length()];\n-        boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(float.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(memory, offset, i));\n@@ -353,1 +408,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -364,1 +420,1 @@\n-    FloatVector ldLongOp(MemorySegment memory, long offset,\n+    FloatVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -366,4 +422,8 @@\n-        \/\/dummy; no vec = vec();\n-        float[] res = new float[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                float.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(memory, offset, i));\n@@ -371,1 +431,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -377,1 +438,1 @@\n-    FloatVector ldLongOp(MemorySegment memory, long offset,\n+    FloatVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -380,6 +441,10 @@\n-        \/\/float[] vec = vec();\n-        float[] res = new float[length()];\n-        boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(float.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putFloat(tpayload, vOffset + i * Float.BYTES, f.apply(memory, offset, i));\n@@ -388,1 +453,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -402,1 +468,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -404,3 +470,5 @@\n-        float[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getFloat(vec, vOffset + i * Float.BYTES));\n@@ -411,1 +479,1 @@\n-    @ForceInline\n+   @ForceInline\n@@ -413,1 +481,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -416,5 +484,8 @@\n-        float[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getFloat(vec, vOffset + i * Float.BYTES));\n@@ -425,0 +496,1 @@\n+\n@@ -432,1 +504,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -434,3 +506,5 @@\n-        float[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getFloat(vec, vOffset + i * Float.BYTES));\n@@ -443,1 +517,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -446,5 +520,8 @@\n-        float[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getFloat(vec, vOffset + i * Float.BYTES));\n@@ -469,1 +546,1 @@\n-    AbstractMask<Float> bTest(int cond,\n+    AbstractMask<Float> bTestMF(int cond,\n@@ -472,5 +549,12 @@\n-        float[] vec1 = vec();\n-        float[] vec2 = ((FloatVector)o).vec();\n-        boolean[] bits = new boolean[length()];\n-        for (int i = 0; i < length(); i++){\n-            bits[i] = f.apply(cond, i, vec1[i], vec2[i]);\n+        int length = vspecies().length();\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((FloatVector)o).vec();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF mbits = VectorPayloadMF.newMaskInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        mbits = U.makePrivateBuffer(mbits);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            float v1 = U.getFloat(vec1, vOffset + i * Float.BYTES);\n+            float v2 = U.getFloat(vec2, vOffset + i * Float.BYTES);\n+            U.putBoolean(mbits, mOffset + i, f.apply(cond, i, v1, v2));\n@@ -478,1 +562,2 @@\n-        return maskFactory(bits);\n+        mbits = U.finishPrivateBuffer(mbits);\n+        return maskFactory(mbits);\n@@ -554,1 +639,1 @@\n-                        ((bits_, s_) -> s_.rvOp(i -> bits_)));\n+                        ((bits_, s_) -> s_.rvOpMF(i -> bits_)));\n@@ -708,1 +793,1 @@\n-                    v0.uOp(m, (i, a) -> (float) -a);\n+                    v0.uOpMF(m, (i, a) -> (float) -a);\n@@ -710,1 +795,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.abs(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.abs(a));\n@@ -712,1 +797,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.sin(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.sin(a));\n@@ -714,1 +799,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.cos(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.cos(a));\n@@ -716,1 +801,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.tan(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.tan(a));\n@@ -718,1 +803,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.asin(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.asin(a));\n@@ -720,1 +805,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.acos(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.acos(a));\n@@ -722,1 +807,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.atan(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.atan(a));\n@@ -724,1 +809,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.exp(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.exp(a));\n@@ -726,1 +811,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.log(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.log(a));\n@@ -728,1 +813,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.log10(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.log10(a));\n@@ -730,1 +815,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.sqrt(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.sqrt(a));\n@@ -732,1 +817,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.cbrt(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.cbrt(a));\n@@ -734,1 +819,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.sinh(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.sinh(a));\n@@ -736,1 +821,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.cosh(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.cosh(a));\n@@ -738,1 +823,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.tanh(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.tanh(a));\n@@ -740,1 +825,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.expm1(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.expm1(a));\n@@ -742,1 +827,1 @@\n-                    v0.uOp(m, (i, a) -> (float) Math.log1p(a));\n+                    v0.uOpMF(m, (i, a) -> (float) Math.log1p(a));\n@@ -777,1 +862,1 @@\n-            BIN_IMPL.find(op, opc, FloatVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, FloatVector::binaryOperationsMF));\n@@ -821,1 +906,27 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (float)(a + b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)(a + b));\n+            case VECTOR_OP_SUB: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)(a - b));\n+            case VECTOR_OP_MUL: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)(a * b));\n+            case VECTOR_OP_DIV: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)(a \/ b));\n+            case VECTOR_OP_MAX: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)Math.max(a, b));\n+            case VECTOR_OP_MIN: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)Math.min(a, b));\n+            case VECTOR_OP_OR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n+            case VECTOR_OP_ATAN2: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float) Math.atan2(a, b));\n+            case VECTOR_OP_POW: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float) Math.pow(a, b));\n+            case VECTOR_OP_HYPOT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float) Math.hypot(a, b));\n+            default: return null;\n+        }\n+    }\n+\n+    private static BinaryOperation<FloatVector, VectorMask<Float>> binaryOperationsMF(int opc_) {\n+        switch (opc_) {\n+            case VECTOR_OP_ADD: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)(a + b));\n@@ -823,1 +934,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (float)(a - b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)(a - b));\n@@ -825,1 +936,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (float)(a * b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)(a * b));\n@@ -827,1 +938,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (float)(a \/ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)(a \/ b));\n@@ -829,1 +940,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (float)Math.max(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)Math.max(a, b));\n@@ -831,1 +942,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (float)Math.min(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float)Math.min(a, b));\n@@ -833,1 +944,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n@@ -835,1 +946,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (float) Math.atan2(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float) Math.atan2(a, b));\n@@ -837,1 +948,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (float) Math.pow(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float) Math.pow(a, b));\n@@ -839,1 +950,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (float) Math.hypot(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (float) Math.hypot(a, b));\n@@ -844,0 +955,1 @@\n+\n@@ -1031,1 +1143,1 @@\n-                    v0.tOp(v1_, v2_, m, (i, a, b, c) -> Math.fma(a, b, c));\n+                    v0.tOpMF(v1_, v2_, m, (i, a, b, c) -> Math.fma(a, b, c));\n@@ -1907,1 +2019,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -1929,1 +2041,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2054,1 +2166,1 @@\n-            (v0, v1, m_) -> v0.bOp(v1, m_, (i, a, b) -> b));\n+            (v0, v1, m_) -> v0.bOpMF(v1, m_, (i, a, b) -> b));\n@@ -2261,1 +2373,1 @@\n-            (v1, s_, m_) -> v1.uOp((i, a) -> {\n+            (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2293,1 +2405,1 @@\n-                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                   (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2321,1 +2433,1 @@\n-                (v0, s_, m_) -> v0.uOp((i, a) -> {\n+                (v0, s_, m_) -> v0.uOpMF((i, a) -> {\n@@ -2329,1 +2441,1 @@\n-                (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2657,1 +2769,1 @@\n-                    toBits(v.rOp((float)0, m, (i, a, b) -> (float)(a + b)));\n+                    toBits(v.rOpMF((float)0, m, (i, a, b) -> (float)(a + b)));\n@@ -2659,1 +2771,1 @@\n-                    toBits(v.rOp((float)1, m, (i, a, b) -> (float)(a * b)));\n+                    toBits(v.rOpMF((float)1, m, (i, a, b) -> (float)(a * b)));\n@@ -2661,1 +2773,1 @@\n-                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (float) Math.min(a, b)));\n+                    toBits(v.rOpMF(MAX_OR_INF, m, (i, a, b) -> (float) Math.min(a, b)));\n@@ -2663,1 +2775,1 @@\n-                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (float) Math.max(a, b)));\n+                    toBits(v.rOpMF(MIN_OR_INF, m, (i, a, b) -> (float) Math.max(a, b)));\n@@ -2799,1 +2911,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset);\n+        return vsp.dummyVectorMF().fromArray0(a, offset);\n@@ -2830,1 +2942,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -2834,1 +2946,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -2892,1 +3004,1 @@\n-            s.vOp(n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(n -> c[idx + iMap[idy+n]]));\n@@ -2942,1 +3054,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, indexMap, mapOffset, m);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, indexMap, mapOffset, m);\n@@ -2984,1 +3096,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset).maybeSwap(bo);\n@@ -3040,1 +3152,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n+            return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3044,1 +3156,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3074,1 +3186,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3076,0 +3188,1 @@\n+\n@@ -3163,1 +3276,1 @@\n-            -> v.stOp(arr, off,\n+            -> v.stOpMF(arr, off,\n@@ -3286,1 +3399,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -3303,1 +3416,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+            (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -3338,1 +3451,1 @@\n-            s.vOp(vm, n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(vm, n -> c[idx + iMap[idy+n]]));\n@@ -3353,1 +3466,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, FloatVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, FloatVector::memorySegmentGet);\n@@ -3369,1 +3482,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, vm, FloatVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, vm, FloatVector::memorySegmentGet);\n@@ -3388,1 +3501,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3405,1 +3518,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -3436,1 +3549,1 @@\n-            -> v.stOp(arr, off, vm,\n+            -> v.stOpMF(arr, off, vm,\n@@ -3453,1 +3566,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, FloatVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, FloatVector::memorySegmentSet);\n@@ -3470,1 +3583,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, vm, FloatVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, vm, FloatVector::memorySegmentSet);\n@@ -3691,1 +3804,1 @@\n-                    (bits_, s_) -> s_.rvOp(i -> bits_));\n+                    (bits_, s_) -> s_.rvOpMF(i -> bits_));\n@@ -3742,1 +3855,1 @@\n-            return dummyVector().fromArray0(va, 0);\n+            return dummyVectorMF().fromArray0(va, 0);\n@@ -3757,2 +3870,2 @@\n-        FloatVector dummyVector() {\n-            return (FloatVector) super.dummyVector();\n+        FloatVector dummyVectorMF() {\n+            return (FloatVector) super.dummyVectorMF();\n@@ -3764,1 +3877,1 @@\n-        FloatVector rvOp(RVOp f) {\n+        FloatVector rvOpMF(RVOp f) {\n@@ -3770,1 +3883,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3773,1 +3887,1 @@\n-        FloatVector vOp(FVOp f) {\n+        FloatVector vOpMF(FVOp f) {\n@@ -3778,1 +3892,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3781,1 +3896,1 @@\n-        FloatVector vOp(VectorMask<Float> m, FVOp f) {\n+        FloatVector vOpMF(VectorMask<Float> m, FVOp f) {\n@@ -3783,1 +3898,2 @@\n-            boolean[] mbits = ((AbstractMask<Float>)m).getBits();\n+            VectorPayloadMF mbits = ((AbstractMask<Float>)m).getBits();\n+            long mOffset = mbits.multiFieldOffset();\n@@ -3785,1 +3901,1 @@\n-                if (mbits[i]) {\n+                if (U.getBoolean(mbits, mOffset + i)) {\n@@ -3789,1 +3905,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3794,1 +3911,1 @@\n-        <M> FloatVector ldOp(M memory, int offset,\n+        <M> FloatVector ldOpMF(M memory, int offset,\n@@ -3796,1 +3913,1 @@\n-            return dummyVector().ldOp(memory, offset, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, f);\n@@ -3801,1 +3918,1 @@\n-        <M> FloatVector ldOp(M memory, int offset,\n+        <M> FloatVector ldOpMF(M memory, int offset,\n@@ -3804,1 +3921,1 @@\n-            return dummyVector().ldOp(memory, offset, m, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, m, f);\n@@ -3807,0 +3924,1 @@\n+\n@@ -3809,1 +3927,1 @@\n-        FloatVector ldLongOp(MemorySegment memory, long offset,\n+        FloatVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -3811,1 +3929,1 @@\n-            return dummyVector().ldLongOp(memory, offset, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, f);\n@@ -3816,1 +3934,1 @@\n-        FloatVector ldLongOp(MemorySegment memory, long offset,\n+        FloatVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -3819,1 +3937,1 @@\n-            return dummyVector().ldLongOp(memory, offset, m, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, m, f);\n@@ -3824,2 +3942,2 @@\n-        <M> void stOp(M memory, int offset, FStOp<M> f) {\n-            dummyVector().stOp(memory, offset, f);\n+        <M> void stOpMF(M memory, int offset, FStOp<M> f) {\n+            dummyVectorMF().stOpMF(memory, offset, f);\n@@ -3830,2 +3948,2 @@\n-        <M> void stOp(M memory, int offset,\n-                      AbstractMask<Float> m,\n+        <M> void stOpMF(M memory, int offset,\n+                     AbstractMask<Float> m,\n@@ -3833,1 +3951,1 @@\n-            dummyVector().stOp(memory, offset, m, f);\n+            dummyVectorMF().stOpMF(memory, offset, m, f);\n@@ -3836,0 +3954,1 @@\n+\n@@ -3838,2 +3957,2 @@\n-        void stLongOp(MemorySegment memory, long offset, FStLongOp f) {\n-            dummyVector().stLongOp(memory, offset, f);\n+        void stLongOpMF(MemorySegment memory, long offset, FStLongOp f) {\n+            dummyVectorMF().stLongOpMF(memory, offset, f);\n@@ -3844,1 +3963,1 @@\n-        void stLongOp(MemorySegment memory, long offset,\n+        void stLongOpMF(MemorySegment memory, long offset,\n@@ -3847,1 +3966,1 @@\n-            dummyVector().stLongOp(memory, offset, m, f);\n+            dummyVectorMF().stLongOpMF(memory, offset, m, f);\n@@ -3862,1 +3981,1 @@\n-                return FloatMaxVector.ZERO;\n+               return FloatMaxVector.ZERO;\n@@ -3900,0 +4019,10 @@\n+\n+        @Override\n+        Object iotaArray() {\n+            int laneCount = laneCount();\n+            float [] init = new float[laneCount];\n+            for (int i = 0; i < laneCount; i++) {\n+                init[i] = (float)i;\n+            }\n+           return init;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":365,"deletions":236,"binary":false,"changes":601,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Int128Vector extends IntVector {\n+value class Int128Vector extends IntVector {\n@@ -57,2 +59,7 @@\n-    Int128Vector(int[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128I.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF128I payload;\n+\n+    Int128Vector(Object value) {\n+        this.payload = (VectorPayloadMF128I) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Int128Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Int128Vector(Object v) {\n-        this((int[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Int128Vector ZERO = new Int128Vector(new int[VLENGTH]);\n-    static final Int128Vector IOTA = new Int128Vector(VSPECIES.iotaArray());\n+    static final Int128Vector ZERO = new Int128Vector(VectorPayloadMF.newVectorInstanceFactory(int.class, 4, false));\n+    static final Int128Vector IOTA = new Int128Vector(VectorPayloadMF.createVectPayloadInstanceI(VLENGTH, (int[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    int[] vec() {\n-        return (int[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Int128Mask maskFromArray(boolean[] bits) {\n-        return new Int128Mask(bits);\n+    Int128Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Int128Mask(payload);\n@@ -157,1 +159,1 @@\n-    Int128Shuffle shuffleFromBytes(byte[] reorder) { return new Int128Shuffle(reorder); }\n+    Int128Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Int128Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Int128Vector vectorFactory(int[] vec) {\n+    Int128Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Int128Vector uOp(FUnOp f) {\n-        return (Int128Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Int128Vector uOpMF(FUnOp f) {\n+        return (Int128Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Int128Vector uOp(VectorMask<Integer> m, FUnOp f) {\n+    Int128Vector uOpMF(VectorMask<Integer> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Int128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Int128Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Int128Vector bOp(Vector<Integer> v, FBinOp f) {\n-        return (Int128Vector) super.bOpTemplate((Int128Vector)v, f);  \/\/ specialize\n+    Int128Vector bOpMF(Vector<Integer> v, FBinOp f) {\n+        return (Int128Vector) super.bOpTemplateMF((Int128Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Int128Vector bOp(Vector<Integer> v,\n+    Int128Vector bOpMF(Vector<Integer> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Int128Vector)v, (Int128Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Int128Vector)v, (Int128Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Int128Vector tOp(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n+    Int128Vector tOpMF(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Int128Vector)v1, (Int128Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Int128Vector)v1, (Int128Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Int128Vector tOp(Vector<Integer> v1, Vector<Integer> v2,\n+    Int128Vector tOpMF(Vector<Integer> v1, Vector<Integer> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Int128Vector)v1, (Int128Vector)v2,\n-                              (Int128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Int128Vector)v1, (Int128Vector)v2,\n+                                (Int128Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    int rOp(int v, VectorMask<Integer> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    int rOpMF(int v, VectorMask<Integer> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -524,6 +526,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    int[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getInt(vecpayload, start_offset + ix * Integer.BYTES);\n+                             });\n@@ -545,1 +548,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -549,3 +552,6 @@\n-                                    int[] res = v.vec().clone();\n-                                    res[ix] = (int)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putInt(tpayload, start_offset + ix * Integer.BYTES, (int)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -557,1 +563,1 @@\n-    static final class Int128Mask extends AbstractMask<Integer> {\n+    static final value class Int128Mask extends AbstractMask<Integer> {\n@@ -561,2 +567,2 @@\n-        Int128Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Int128Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32Z) payload;\n@@ -565,3 +571,2 @@\n-        Int128Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32Z payload;\n@@ -569,2 +574,2 @@\n-        Int128Mask(boolean val) {\n-            super(prepare(val));\n+        Int128Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(payload, offset, VSPECIES));\n@@ -573,6 +578,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Int128Mask(boolean val) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(val, VSPECIES));\n@@ -581,5 +582,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -597,22 +593,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Int128Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Int128Mask(res);\n-        }\n-\n-        Int128Mask bOp(VectorMask<Integer> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Int128Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Int128Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -629,27 +605,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -676,1 +625,1 @@\n-            return (Int128Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Int128Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -689,3 +638,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Int128Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int128Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int128Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -699,3 +648,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Int128Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int128Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int128Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -709,3 +658,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int128Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int128Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int128Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -720,1 +669,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Int128Mask) m).trueCountHelper());\n@@ -727,1 +676,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Int128Mask) m).firstTrueHelper());\n@@ -734,1 +683,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Int128Mask) m).lastTrueHelper());\n@@ -744,1 +693,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Int128Mask) m).toLongHelper());\n@@ -754,1 +703,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Int128Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -764,1 +713,1 @@\n-                                         (m, __) -> anyTrueHelper(((Int128Mask)m).getBits()));\n+                                         (m, __) -> ((Int128Mask) m).anyTrueHelper());\n@@ -772,1 +721,1 @@\n-                                         (m, __) -> allTrueHelper(((Int128Mask)m).getBits()));\n+                                         (m, __) -> ((Int128Mask) m).allTrueHelper());\n@@ -789,1 +738,1 @@\n-    static final class Int128Shuffle extends AbstractShuffle<Integer> {\n+    static final value class Int128Shuffle extends AbstractShuffle<Integer> {\n@@ -793,3 +742,2 @@\n-        Int128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32B payload;\n@@ -797,2 +745,4 @@\n-        public Int128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int128Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -801,2 +751,2 @@\n-        public Int128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Int128Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, i, VSPECIES));\n@@ -806,1 +756,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF32B)(prepare(fn, VSPECIES));\n+        }\n+        public Int128Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -843,6 +804,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -850,0 +814,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Int256Vector extends IntVector {\n+value class Int256Vector extends IntVector {\n@@ -57,2 +59,7 @@\n-    Int256Vector(int[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256I.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF256I payload;\n+\n+    Int256Vector(Object value) {\n+        this.payload = (VectorPayloadMF256I) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Int256Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Int256Vector(Object v) {\n-        this((int[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Int256Vector ZERO = new Int256Vector(new int[VLENGTH]);\n-    static final Int256Vector IOTA = new Int256Vector(VSPECIES.iotaArray());\n+    static final Int256Vector ZERO = new Int256Vector(VectorPayloadMF.newVectorInstanceFactory(int.class, 8, false));\n+    static final Int256Vector IOTA = new Int256Vector(VectorPayloadMF.createVectPayloadInstanceI(VLENGTH, (int[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    int[] vec() {\n-        return (int[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Int256Mask maskFromArray(boolean[] bits) {\n-        return new Int256Mask(bits);\n+    Int256Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Int256Mask(payload);\n@@ -157,1 +159,1 @@\n-    Int256Shuffle shuffleFromBytes(byte[] reorder) { return new Int256Shuffle(reorder); }\n+    Int256Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Int256Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Int256Vector vectorFactory(int[] vec) {\n+    Int256Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Int256Vector uOp(FUnOp f) {\n-        return (Int256Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Int256Vector uOpMF(FUnOp f) {\n+        return (Int256Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Int256Vector uOp(VectorMask<Integer> m, FUnOp f) {\n+    Int256Vector uOpMF(VectorMask<Integer> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Int256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Int256Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Int256Vector bOp(Vector<Integer> v, FBinOp f) {\n-        return (Int256Vector) super.bOpTemplate((Int256Vector)v, f);  \/\/ specialize\n+    Int256Vector bOpMF(Vector<Integer> v, FBinOp f) {\n+        return (Int256Vector) super.bOpTemplateMF((Int256Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Int256Vector bOp(Vector<Integer> v,\n+    Int256Vector bOpMF(Vector<Integer> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Int256Vector)v, (Int256Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Int256Vector)v, (Int256Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Int256Vector tOp(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n+    Int256Vector tOpMF(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Int256Vector)v1, (Int256Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Int256Vector)v1, (Int256Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Int256Vector tOp(Vector<Integer> v1, Vector<Integer> v2,\n+    Int256Vector tOpMF(Vector<Integer> v1, Vector<Integer> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Int256Vector)v1, (Int256Vector)v2,\n-                              (Int256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Int256Vector)v1, (Int256Vector)v2,\n+                                (Int256Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    int rOp(int v, VectorMask<Integer> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    int rOpMF(int v, VectorMask<Integer> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -528,6 +530,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    int[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getInt(vecpayload, start_offset + ix * Integer.BYTES);\n+                             });\n@@ -553,1 +556,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -557,3 +560,6 @@\n-                                    int[] res = v.vec().clone();\n-                                    res[ix] = (int)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putInt(tpayload, start_offset + ix * Integer.BYTES, (int)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -565,1 +571,1 @@\n-    static final class Int256Mask extends AbstractMask<Integer> {\n+    static final value class Int256Mask extends AbstractMask<Integer> {\n@@ -569,2 +575,2 @@\n-        Int256Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Int256Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64Z) payload;\n@@ -573,3 +579,2 @@\n-        Int256Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64Z payload;\n@@ -577,2 +582,2 @@\n-        Int256Mask(boolean val) {\n-            super(prepare(val));\n+        Int256Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(payload, offset, VSPECIES));\n@@ -581,6 +586,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Int256Mask(boolean val) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(val, VSPECIES));\n@@ -589,5 +590,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -605,22 +601,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Int256Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Int256Mask(res);\n-        }\n-\n-        Int256Mask bOp(VectorMask<Integer> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Int256Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Int256Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -637,27 +613,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -684,1 +633,1 @@\n-            return (Int256Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Int256Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -697,3 +646,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Int256Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int256Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int256Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -707,3 +656,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Int256Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int256Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int256Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -717,3 +666,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int256Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int256Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int256Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -728,1 +677,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Int256Mask) m).trueCountHelper());\n@@ -735,1 +684,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Int256Mask) m).firstTrueHelper());\n@@ -742,1 +691,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Int256Mask) m).lastTrueHelper());\n@@ -752,1 +701,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Int256Mask) m).toLongHelper());\n@@ -762,1 +711,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Int256Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -772,1 +721,1 @@\n-                                         (m, __) -> anyTrueHelper(((Int256Mask)m).getBits()));\n+                                         (m, __) -> ((Int256Mask) m).anyTrueHelper());\n@@ -780,1 +729,1 @@\n-                                         (m, __) -> allTrueHelper(((Int256Mask)m).getBits()));\n+                                         (m, __) -> ((Int256Mask) m).allTrueHelper());\n@@ -797,1 +746,1 @@\n-    static final class Int256Shuffle extends AbstractShuffle<Integer> {\n+    static final value class Int256Shuffle extends AbstractShuffle<Integer> {\n@@ -801,3 +750,2 @@\n-        Int256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64B payload;\n@@ -805,2 +753,4 @@\n-        public Int256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int256Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -809,2 +759,2 @@\n-        public Int256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Int256Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, i, VSPECIES));\n@@ -814,1 +764,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF64B)(prepare(fn, VSPECIES));\n+        }\n+        public Int256Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -851,6 +812,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -858,0 +822,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Int512Vector extends IntVector {\n+value class Int512Vector extends IntVector {\n@@ -57,2 +59,7 @@\n-    Int512Vector(int[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512I.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF512I payload;\n+\n+    Int512Vector(Object value) {\n+        this.payload = (VectorPayloadMF512I) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Int512Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Int512Vector(Object v) {\n-        this((int[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Int512Vector ZERO = new Int512Vector(new int[VLENGTH]);\n-    static final Int512Vector IOTA = new Int512Vector(VSPECIES.iotaArray());\n+    static final Int512Vector ZERO = new Int512Vector(VectorPayloadMF.newVectorInstanceFactory(int.class, 16, false));\n+    static final Int512Vector IOTA = new Int512Vector(VectorPayloadMF.createVectPayloadInstanceI(VLENGTH, (int[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    int[] vec() {\n-        return (int[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Int512Mask maskFromArray(boolean[] bits) {\n-        return new Int512Mask(bits);\n+    Int512Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Int512Mask(payload);\n@@ -157,1 +159,1 @@\n-    Int512Shuffle shuffleFromBytes(byte[] reorder) { return new Int512Shuffle(reorder); }\n+    Int512Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Int512Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Int512Vector vectorFactory(int[] vec) {\n+    Int512Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Int512Vector uOp(FUnOp f) {\n-        return (Int512Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Int512Vector uOpMF(FUnOp f) {\n+        return (Int512Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Int512Vector uOp(VectorMask<Integer> m, FUnOp f) {\n+    Int512Vector uOpMF(VectorMask<Integer> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Int512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Int512Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Int512Vector bOp(Vector<Integer> v, FBinOp f) {\n-        return (Int512Vector) super.bOpTemplate((Int512Vector)v, f);  \/\/ specialize\n+    Int512Vector bOpMF(Vector<Integer> v, FBinOp f) {\n+        return (Int512Vector) super.bOpTemplateMF((Int512Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Int512Vector bOp(Vector<Integer> v,\n+    Int512Vector bOpMF(Vector<Integer> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Int512Vector)v, (Int512Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Int512Vector)v, (Int512Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Int512Vector tOp(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n+    Int512Vector tOpMF(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Int512Vector)v1, (Int512Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Int512Vector)v1, (Int512Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Int512Vector tOp(Vector<Integer> v1, Vector<Integer> v2,\n+    Int512Vector tOpMF(Vector<Integer> v1, Vector<Integer> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Int512Vector)v1, (Int512Vector)v2,\n-                              (Int512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Int512Vector)v1, (Int512Vector)v2,\n+                                (Int512Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    int rOp(int v, VectorMask<Integer> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    int rOpMF(int v, VectorMask<Integer> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -536,6 +538,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    int[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getInt(vecpayload, start_offset + ix * Integer.BYTES);\n+                             });\n@@ -569,1 +572,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -573,3 +576,6 @@\n-                                    int[] res = v.vec().clone();\n-                                    res[ix] = (int)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putInt(tpayload, start_offset + ix * Integer.BYTES, (int)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -581,1 +587,1 @@\n-    static final class Int512Mask extends AbstractMask<Integer> {\n+    static final value class Int512Mask extends AbstractMask<Integer> {\n@@ -585,2 +591,2 @@\n-        Int512Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Int512Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF128Z) payload;\n@@ -589,3 +595,2 @@\n-        Int512Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF128Z payload;\n@@ -593,2 +598,2 @@\n-        Int512Mask(boolean val) {\n-            super(prepare(val));\n+        Int512Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF128Z)(prepare(payload, offset, VSPECIES));\n@@ -597,6 +602,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Int512Mask(boolean val) {\n+            this.payload = (VectorPayloadMF128Z)(prepare(val, VSPECIES));\n@@ -605,5 +606,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -621,22 +617,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Int512Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Int512Mask(res);\n-        }\n-\n-        Int512Mask bOp(VectorMask<Integer> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Int512Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Int512Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -653,27 +629,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -700,1 +649,1 @@\n-            return (Int512Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Int512Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -713,3 +662,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Int512Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int512Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int512Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -723,3 +672,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Int512Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int512Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int512Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -733,3 +682,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int512Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int512Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int512Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -744,1 +693,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Int512Mask) m).trueCountHelper());\n@@ -751,1 +700,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Int512Mask) m).firstTrueHelper());\n@@ -758,1 +707,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Int512Mask) m).lastTrueHelper());\n@@ -768,1 +717,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Int512Mask) m).toLongHelper());\n@@ -778,1 +727,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Int512Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -788,1 +737,1 @@\n-                                         (m, __) -> anyTrueHelper(((Int512Mask)m).getBits()));\n+                                         (m, __) -> ((Int512Mask) m).anyTrueHelper());\n@@ -796,1 +745,1 @@\n-                                         (m, __) -> allTrueHelper(((Int512Mask)m).getBits()));\n+                                         (m, __) -> ((Int512Mask) m).allTrueHelper());\n@@ -813,1 +762,1 @@\n-    static final class Int512Shuffle extends AbstractShuffle<Integer> {\n+    static final value class Int512Shuffle extends AbstractShuffle<Integer> {\n@@ -817,3 +766,2 @@\n-        Int512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF128B payload;\n@@ -821,2 +769,4 @@\n-        public Int512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int512Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF128B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -825,2 +775,2 @@\n-        public Int512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Int512Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF128B)(prepare(indexes, i, VSPECIES));\n@@ -830,1 +780,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF128B)(prepare(fn, VSPECIES));\n+        }\n+        public Int512Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF128B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -867,6 +828,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -874,0 +838,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Int64Vector extends IntVector {\n+value class Int64Vector extends IntVector {\n@@ -57,2 +59,7 @@\n-    Int64Vector(int[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64I.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF64I payload;\n+\n+    Int64Vector(Object value) {\n+        this.payload = (VectorPayloadMF64I) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Int64Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Int64Vector(Object v) {\n-        this((int[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Int64Vector ZERO = new Int64Vector(new int[VLENGTH]);\n-    static final Int64Vector IOTA = new Int64Vector(VSPECIES.iotaArray());\n+    static final Int64Vector ZERO = new Int64Vector(VectorPayloadMF.newVectorInstanceFactory(int.class, 2, false));\n+    static final Int64Vector IOTA = new Int64Vector(VectorPayloadMF.createVectPayloadInstanceI(VLENGTH, (int[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    int[] vec() {\n-        return (int[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Int64Mask maskFromArray(boolean[] bits) {\n-        return new Int64Mask(bits);\n+    Int64Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Int64Mask(payload);\n@@ -157,1 +159,1 @@\n-    Int64Shuffle shuffleFromBytes(byte[] reorder) { return new Int64Shuffle(reorder); }\n+    Int64Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Int64Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Int64Vector vectorFactory(int[] vec) {\n+    Int64Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Int64Vector uOp(FUnOp f) {\n-        return (Int64Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Int64Vector uOpMF(FUnOp f) {\n+        return (Int64Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Int64Vector uOp(VectorMask<Integer> m, FUnOp f) {\n+    Int64Vector uOpMF(VectorMask<Integer> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Int64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Int64Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Int64Vector bOp(Vector<Integer> v, FBinOp f) {\n-        return (Int64Vector) super.bOpTemplate((Int64Vector)v, f);  \/\/ specialize\n+    Int64Vector bOpMF(Vector<Integer> v, FBinOp f) {\n+        return (Int64Vector) super.bOpTemplateMF((Int64Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Int64Vector bOp(Vector<Integer> v,\n+    Int64Vector bOpMF(Vector<Integer> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Int64Vector)v, (Int64Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Int64Vector)v, (Int64Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Int64Vector tOp(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n+    Int64Vector tOpMF(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Int64Vector)v1, (Int64Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Int64Vector)v1, (Int64Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Int64Vector tOp(Vector<Integer> v1, Vector<Integer> v2,\n+    Int64Vector tOpMF(Vector<Integer> v1, Vector<Integer> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Int64Vector)v1, (Int64Vector)v2,\n-                              (Int64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Int64Vector)v1, (Int64Vector)v2,\n+                                (Int64Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    int rOp(int v, VectorMask<Integer> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    int rOpMF(int v, VectorMask<Integer> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -522,6 +524,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    int[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getInt(vecpayload, start_offset + ix * Integer.BYTES);\n+                             });\n@@ -541,1 +544,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -545,3 +548,6 @@\n-                                    int[] res = v.vec().clone();\n-                                    res[ix] = (int)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putInt(tpayload, start_offset + ix * Integer.BYTES, (int)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -553,1 +559,1 @@\n-    static final class Int64Mask extends AbstractMask<Integer> {\n+    static final value class Int64Mask extends AbstractMask<Integer> {\n@@ -557,2 +563,2 @@\n-        Int64Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Int64Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF16Z) payload;\n@@ -561,3 +567,2 @@\n-        Int64Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF16Z payload;\n@@ -565,2 +570,2 @@\n-        Int64Mask(boolean val) {\n-            super(prepare(val));\n+        Int64Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF16Z)(prepare(payload, offset, VSPECIES));\n@@ -569,6 +574,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Int64Mask(boolean val) {\n+            this.payload = (VectorPayloadMF16Z)(prepare(val, VSPECIES));\n@@ -577,5 +578,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -593,22 +589,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Int64Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Int64Mask(res);\n-        }\n-\n-        Int64Mask bOp(VectorMask<Integer> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Int64Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Int64Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -625,27 +601,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -672,1 +621,1 @@\n-            return (Int64Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Int64Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -685,3 +634,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Int64Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int64Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int64Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -695,3 +644,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Int64Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int64Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int64Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -705,3 +654,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int64Mask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int64Mask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Int64Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -716,1 +665,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Int64Mask) m).trueCountHelper());\n@@ -723,1 +672,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Int64Mask) m).firstTrueHelper());\n@@ -730,1 +679,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Int64Mask) m).lastTrueHelper());\n@@ -740,1 +689,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Int64Mask) m).toLongHelper());\n@@ -750,1 +699,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Int64Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -760,1 +709,1 @@\n-                                         (m, __) -> anyTrueHelper(((Int64Mask)m).getBits()));\n+                                         (m, __) -> ((Int64Mask) m).anyTrueHelper());\n@@ -768,1 +717,1 @@\n-                                         (m, __) -> allTrueHelper(((Int64Mask)m).getBits()));\n+                                         (m, __) -> ((Int64Mask) m).allTrueHelper());\n@@ -785,1 +734,1 @@\n-    static final class Int64Shuffle extends AbstractShuffle<Integer> {\n+    static final value class Int64Shuffle extends AbstractShuffle<Integer> {\n@@ -789,3 +738,2 @@\n-        Int64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF16B payload;\n@@ -793,2 +741,4 @@\n-        public Int64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Int64Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF16B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -797,2 +747,2 @@\n-        public Int64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Int64Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF16B)(prepare(indexes, i, VSPECIES));\n@@ -802,1 +752,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF16B)(prepare(fn, VSPECIES));\n+        }\n+        public Int64Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF16B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -839,6 +800,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -846,0 +810,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class IntMaxVector extends IntVector {\n+value class IntMaxVector extends IntVector {\n@@ -57,2 +59,7 @@\n-    IntMaxVector(int[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMFMaxI.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMFMaxI payload;\n+\n+    IntMaxVector(Object value) {\n+        this.payload = (VectorPayloadMFMaxI) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as IntMaxVector::new,\n-    \/\/ stored into species.vectorFactory.\n-    IntMaxVector(Object v) {\n-        this((int[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final IntMaxVector ZERO = new IntMaxVector(new int[VLENGTH]);\n-    static final IntMaxVector IOTA = new IntMaxVector(VSPECIES.iotaArray());\n+    static final IntMaxVector ZERO = new IntMaxVector(VectorPayloadMF.newVectorInstanceFactory(int.class, 0, true));\n+    static final IntMaxVector IOTA = new IntMaxVector(VectorPayloadMF.createVectPayloadInstanceI(VLENGTH, (int[])(VSPECIES.iotaArray()), true));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    int[] vec() {\n-        return (int[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    IntMaxMask maskFromArray(boolean[] bits) {\n-        return new IntMaxMask(bits);\n+    IntMaxMask maskFromPayload(VectorPayloadMF payload) {\n+        return new IntMaxMask(payload);\n@@ -157,1 +159,1 @@\n-    IntMaxShuffle shuffleFromBytes(byte[] reorder) { return new IntMaxShuffle(reorder); }\n+    IntMaxShuffle shuffleFromBytes(VectorPayloadMF indexes) { return new IntMaxShuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    IntMaxVector vectorFactory(int[] vec) {\n+    IntMaxVector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    IntMaxVector uOp(FUnOp f) {\n-        return (IntMaxVector) super.uOpTemplate(f);  \/\/ specialize\n+    IntMaxVector uOpMF(FUnOp f) {\n+        return (IntMaxVector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    IntMaxVector uOp(VectorMask<Integer> m, FUnOp f) {\n+    IntMaxVector uOpMF(VectorMask<Integer> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((IntMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((IntMaxMask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    IntMaxVector bOp(Vector<Integer> v, FBinOp f) {\n-        return (IntMaxVector) super.bOpTemplate((IntMaxVector)v, f);  \/\/ specialize\n+    IntMaxVector bOpMF(Vector<Integer> v, FBinOp f) {\n+        return (IntMaxVector) super.bOpTemplateMF((IntMaxVector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    IntMaxVector bOp(Vector<Integer> v,\n+    IntMaxVector bOpMF(Vector<Integer> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((IntMaxVector)v, (IntMaxMask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((IntMaxVector)v, (IntMaxMask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    IntMaxVector tOp(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n+    IntMaxVector tOpMF(Vector<Integer> v1, Vector<Integer> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((IntMaxVector)v1, (IntMaxVector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((IntMaxVector)v1, (IntMaxVector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    IntMaxVector tOp(Vector<Integer> v1, Vector<Integer> v2,\n+    IntMaxVector tOpMF(Vector<Integer> v1, Vector<Integer> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((IntMaxVector)v1, (IntMaxVector)v2,\n-                              (IntMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((IntMaxVector)v1, (IntMaxVector)v2,\n+                                (IntMaxMask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    int rOp(int v, VectorMask<Integer> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    int rOpMF(int v, VectorMask<Integer> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -521,6 +523,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    int[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getInt(vecpayload, start_offset + ix * Integer.BYTES);\n+                             });\n@@ -539,1 +542,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -543,3 +546,6 @@\n-                                    int[] res = v.vec().clone();\n-                                    res[ix] = (int)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putInt(tpayload, start_offset + ix * Integer.BYTES, (int)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -551,1 +557,1 @@\n-    static final class IntMaxMask extends AbstractMask<Integer> {\n+    static final value class IntMaxMask extends AbstractMask<Integer> {\n@@ -555,2 +561,2 @@\n-        IntMaxMask(boolean[] bits) {\n-            this(bits, 0);\n+        IntMaxMask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxIZ) payload;\n@@ -559,3 +565,2 @@\n-        IntMaxMask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxIZ payload;\n@@ -563,2 +568,2 @@\n-        IntMaxMask(boolean val) {\n-            super(prepare(val));\n+        IntMaxMask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMFMaxIZ)(prepare(payload, offset, VSPECIES));\n@@ -567,6 +572,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        IntMaxMask(boolean val) {\n+            this.payload = (VectorPayloadMFMaxIZ)(prepare(val, VSPECIES));\n@@ -575,5 +576,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -591,22 +587,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        IntMaxMask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new IntMaxMask(res);\n-        }\n-\n-        IntMaxMask bOp(VectorMask<Integer> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((IntMaxMask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new IntMaxMask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -623,27 +599,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -670,1 +619,1 @@\n-            return (IntMaxMask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (IntMaxMask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -683,3 +632,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, IntMaxMask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, IntMaxMask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (IntMaxMask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -693,3 +642,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, IntMaxMask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, IntMaxMask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (IntMaxMask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -703,3 +652,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, IntMaxMask.class, null, int.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, IntMaxMask.class, null,\n+                                          int.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (IntMaxMask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -714,1 +663,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((IntMaxMask) m).trueCountHelper());\n@@ -721,1 +670,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((IntMaxMask) m).firstTrueHelper());\n@@ -728,1 +677,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((IntMaxMask) m).lastTrueHelper());\n@@ -738,1 +687,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((IntMaxMask) m).toLongHelper());\n@@ -748,1 +697,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((IntMaxMask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -758,1 +707,1 @@\n-                                         (m, __) -> anyTrueHelper(((IntMaxMask)m).getBits()));\n+                                         (m, __) -> ((IntMaxMask) m).anyTrueHelper());\n@@ -766,1 +715,1 @@\n-                                         (m, __) -> allTrueHelper(((IntMaxMask)m).getBits()));\n+                                         (m, __) -> ((IntMaxMask) m).allTrueHelper());\n@@ -780,3 +729,5 @@\n-        static boolean[] maskLowerHalf() {\n-            boolean[] a = new boolean[VLENGTH];\n-            int len = a.length >> 1;\n+        static VectorPayloadMF maskLowerHalf() {\n+            VectorPayloadMF newObj = VectorPayloadMF.newMaskInstanceFactory(ETYPE, VLENGTH, true);\n+            newObj = U.makePrivateBuffer(newObj);\n+            long mf_offset = newObj.multiFieldOffset();\n+            int len = VLENGTH >> 1;\n@@ -784,1 +735,1 @@\n-                a[i] = true;\n+                U.putBoolean(newObj, mf_offset + i, true);\n@@ -786,1 +737,2 @@\n-            return a;\n+            newObj = U.finishPrivateBuffer(newObj);\n+            return newObj;\n@@ -794,1 +746,1 @@\n-    static final class IntMaxShuffle extends AbstractShuffle<Integer> {\n+    static final value class IntMaxShuffle extends AbstractShuffle<Integer> {\n@@ -798,3 +750,2 @@\n-        IntMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxIB payload;\n@@ -802,2 +753,4 @@\n-        public IntMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        IntMaxShuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxIB) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -806,2 +759,2 @@\n-        public IntMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public IntMaxShuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMFMaxIB)(prepare(indexes, i, VSPECIES));\n@@ -811,1 +764,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMFMaxIB)(prepare(fn, VSPECIES));\n+        }\n+        public IntMaxShuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMFMaxIB)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -848,6 +812,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, true);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -855,0 +822,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":121,"deletions":153,"binary":false,"changes":274,"status":"modified"},{"patch":"@@ -51,6 +51,2 @@\n-@SuppressWarnings(\"cast\")  \/\/ warning: redundant cast\n-public abstract class IntVector extends AbstractVector<Integer> {\n-\n-    IntVector(int[] vec) {\n-        super(vec);\n-    }\n+@SuppressWarnings({\"cast\"})  \/\/ warning: redundant cast\n+public abstract value class IntVector extends AbstractVector<Integer> {\n@@ -59,0 +55,4 @@\n+    \/**\n+     * Default Constructor for abstract vector.\n+     *\/\n+    public IntVector() {}\n@@ -96,3 +96,0 @@\n-    \/*package-private*\/\n-    abstract int[] vec();\n-\n@@ -103,1 +100,1 @@\n-     * It is an error if the array is aliased elsewhere.\n+     * It is an error if the vec is aliased elsewhere.\n@@ -106,1 +103,1 @@\n-    abstract IntVector vectorFactory(int[] vec);\n+    abstract IntVector vectorFactory(VectorPayloadMF vec);\n@@ -115,2 +112,2 @@\n-    AbstractMask<Integer> maskFactory(boolean[] bits) {\n-        return vspecies().maskFactory(bits);\n+    AbstractMask<Integer> maskFactory(VectorPayloadMF payload) {\n+        return vspecies().maskFactory(payload);\n@@ -127,1 +124,1 @@\n-    IntVector vOp(FVOp f) {\n+    IntVector vOpMF(FVOp f) {\n@@ -132,1 +129,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -137,1 +135,1 @@\n-    IntVector vOp(VectorMask<Integer> m, FVOp f) {\n+    IntVector vOpMF(VectorMask<Integer> m, FVOp f) {\n@@ -139,1 +137,2 @@\n-        boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n+        VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+        long mOffset = mbits.multiFieldOffset();\n@@ -141,1 +140,1 @@\n-            if (mbits[i]) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n@@ -145,1 +144,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -157,1 +157,1 @@\n-    IntVector uOp(FUnOp f);\n+    IntVector uOpMF(FUnOp f);\n@@ -160,5 +160,8 @@\n-    IntVector uOpTemplate(FUnOp f) {\n-        int[] vec = vec();\n-        int[] res = new int[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec[i]);\n+    IntVector uOpTemplateMF(FUnOp f) {\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            int v = U.getInt(vec, vOffset + i * Integer.BYTES);\n+            U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(i, v));\n@@ -166,1 +169,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -171,1 +175,1 @@\n-    IntVector uOp(VectorMask<Integer> m,\n+    IntVector uOpMF(VectorMask<Integer> m,\n@@ -175,1 +179,1 @@\n-    IntVector uOpTemplate(VectorMask<Integer> m,\n+    IntVector uOpTemplateMF(VectorMask<Integer> m,\n@@ -178,1 +182,1 @@\n-            return uOpTemplate(f);\n+            return uOpTemplateMF(f);\n@@ -180,5 +184,11 @@\n-        int[] vec = vec();\n-        int[] res = new int[length()];\n-        boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec[i]) : vec[i];\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                int v = U.getInt(vec, vOffset + i * Integer.BYTES);\n+                U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(i, v));\n+            }\n@@ -186,1 +196,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -198,1 +209,1 @@\n-    IntVector bOp(Vector<Integer> o,\n+    IntVector bOpMF(Vector<Integer> o,\n@@ -202,1 +213,1 @@\n-    IntVector bOpTemplate(Vector<Integer> o,\n+    IntVector bOpTemplateMF(Vector<Integer> o,\n@@ -204,5 +215,9 @@\n-        int[] res = new int[length()];\n-        int[] vec1 = this.vec();\n-        int[] vec2 = ((IntVector)o).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i]);\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((IntVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            int v1 = U.getInt(vec1, vOffset + i * Integer.BYTES);\n+            int v2 = U.getInt(vec2, vOffset + i * Integer.BYTES);\n+            U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(i, v1, v2));\n@@ -210,1 +225,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -215,1 +231,1 @@\n-    IntVector bOp(Vector<Integer> o,\n+    IntVector bOpMF(Vector<Integer> o,\n@@ -220,1 +236,1 @@\n-    IntVector bOpTemplate(Vector<Integer> o,\n+    IntVector bOpTemplateMF(Vector<Integer> o,\n@@ -224,1 +240,1 @@\n-            return bOpTemplate(o, f);\n+            return bOpTemplateMF(o, f);\n@@ -226,6 +242,13 @@\n-        int[] res = new int[length()];\n-        int[] vec1 = this.vec();\n-        int[] vec2 = ((IntVector)o).vec();\n-        boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((IntVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                int v1 = U.getInt(vec1, vOffset + i * Integer.BYTES);\n+                int v2 = U.getInt(vec2, vOffset + i * Integer.BYTES);\n+                U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(i, v1, v2));\n+            }\n@@ -233,1 +256,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -245,1 +269,1 @@\n-    IntVector tOp(Vector<Integer> o1,\n+    IntVector tOpMF(Vector<Integer> o1,\n@@ -250,1 +274,1 @@\n-    IntVector tOpTemplate(Vector<Integer> o1,\n+    IntVector tOpTemplateMF(Vector<Integer> o1,\n@@ -253,6 +277,11 @@\n-        int[] res = new int[length()];\n-        int[] vec1 = this.vec();\n-        int[] vec2 = ((IntVector)o1).vec();\n-        int[] vec3 = ((IntVector)o2).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i], vec3[i]);\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((IntVector)o1).vec();\n+        VectorPayloadMF vec3 = ((IntVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            int v1 = U.getInt(vec1, vOffset + i * Integer.BYTES);\n+            int v2 = U.getInt(vec2, vOffset + i * Integer.BYTES);\n+            int v3 = U.getInt(vec3, vOffset + i * Integer.BYTES);\n+            U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(i, v1, v2, v3));\n@@ -260,1 +289,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -265,1 +295,1 @@\n-    IntVector tOp(Vector<Integer> o1,\n+    IntVector tOpMF(Vector<Integer> o1,\n@@ -271,1 +301,1 @@\n-    IntVector tOpTemplate(Vector<Integer> o1,\n+    IntVector tOpTemplateMF(Vector<Integer> o1,\n@@ -276,1 +306,1 @@\n-            return tOpTemplate(o1, o2, f);\n+            return tOpTemplateMF(o1, o2, f);\n@@ -278,7 +308,15 @@\n-        int[] res = new int[length()];\n-        int[] vec1 = this.vec();\n-        int[] vec2 = ((IntVector)o1).vec();\n-        int[] vec3 = ((IntVector)o2).vec();\n-        boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i], vec3[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((IntVector)o1).vec();\n+        VectorPayloadMF vec3 = ((IntVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                int v1 = U.getInt(vec1, vOffset + i * Integer.BYTES);\n+                int v2 = U.getInt(vec2, vOffset + i * Integer.BYTES);\n+                int v3 = U.getInt(vec3, vOffset + i * Integer.BYTES);\n+                U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(i, v1, v2, v3));\n+            }\n@@ -286,1 +324,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -293,1 +332,1 @@\n-    int rOp(int v, VectorMask<Integer> m, FBinOp f);\n+    int rOpMF(int v, VectorMask<Integer> m, FBinOp f);\n@@ -297,1 +336,1 @@\n-    int rOpTemplate(int v, VectorMask<Integer> m, FBinOp f) {\n+    int rOpTemplateMF(int v, VectorMask<Integer> m, FBinOp f) {\n@@ -299,1 +338,1 @@\n-            return rOpTemplate(v, f);\n+            return rOpTemplateMF(v, f);\n@@ -301,4 +340,8 @@\n-        int[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = mbits[i] ? f.apply(i, v, vec[i]) : v;\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            int v1 = U.getInt(vec, vOffset + i * Integer.BYTES);\n+            v = U.getBoolean(mbits, mOffset + i) ? f.apply(i, v, v1) : v;\n@@ -311,4 +354,7 @@\n-    int rOpTemplate(int v, FBinOp f) {\n-        int[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = f.apply(i, v, vec[i]);\n+    int rOpTemplateMF(int v, FBinOp f) {\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            int v1 = U.getInt(vec, vOffset + i * Integer.BYTES);\n+            v = f.apply(i, v, v1);\n@@ -329,1 +375,1 @@\n-    <M> IntVector ldOp(M memory, int offset,\n+    <M> IntVector ldOpMF(M memory, int offset,\n@@ -331,4 +377,8 @@\n-        \/\/dummy; no vec = vec();\n-        int[] res = new int[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                int.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(memory, offset, i));\n@@ -336,1 +386,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -342,1 +393,1 @@\n-    <M> IntVector ldOp(M memory, int offset,\n+    <M> IntVector ldOpMF(M memory, int offset,\n@@ -345,6 +396,10 @@\n-        \/\/int[] vec = vec();\n-        int[] res = new int[length()];\n-        boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(int.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(memory, offset, i));\n@@ -353,1 +408,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -364,1 +420,1 @@\n-    IntVector ldLongOp(MemorySegment memory, long offset,\n+    IntVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -366,4 +422,8 @@\n-        \/\/dummy; no vec = vec();\n-        int[] res = new int[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                int.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(memory, offset, i));\n@@ -371,1 +431,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -377,1 +438,1 @@\n-    IntVector ldLongOp(MemorySegment memory, long offset,\n+    IntVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -380,6 +441,10 @@\n-        \/\/int[] vec = vec();\n-        int[] res = new int[length()];\n-        boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(int.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putInt(tpayload, vOffset + i * Integer.BYTES, f.apply(memory, offset, i));\n@@ -388,1 +453,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -402,1 +468,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -404,3 +470,5 @@\n-        int[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getInt(vec, vOffset + i * Integer.BYTES));\n@@ -411,1 +479,1 @@\n-    @ForceInline\n+   @ForceInline\n@@ -413,1 +481,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -416,5 +484,8 @@\n-        int[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getInt(vec, vOffset + i * Integer.BYTES));\n@@ -425,0 +496,1 @@\n+\n@@ -432,1 +504,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -434,3 +506,5 @@\n-        int[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getInt(vec, vOffset + i * Integer.BYTES));\n@@ -443,1 +517,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -446,5 +520,8 @@\n-        int[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getInt(vec, vOffset + i * Integer.BYTES));\n@@ -469,1 +546,1 @@\n-    AbstractMask<Integer> bTest(int cond,\n+    AbstractMask<Integer> bTestMF(int cond,\n@@ -472,5 +549,12 @@\n-        int[] vec1 = vec();\n-        int[] vec2 = ((IntVector)o).vec();\n-        boolean[] bits = new boolean[length()];\n-        for (int i = 0; i < length(); i++){\n-            bits[i] = f.apply(cond, i, vec1[i], vec2[i]);\n+        int length = vspecies().length();\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((IntVector)o).vec();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF mbits = VectorPayloadMF.newMaskInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        mbits = U.makePrivateBuffer(mbits);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            int v1 = U.getInt(vec1, vOffset + i * Integer.BYTES);\n+            int v2 = U.getInt(vec2, vOffset + i * Integer.BYTES);\n+            U.putBoolean(mbits, mOffset + i, f.apply(cond, i, v1, v2));\n@@ -478,1 +562,2 @@\n-        return maskFactory(bits);\n+        mbits = U.finishPrivateBuffer(mbits);\n+        return maskFactory(mbits);\n@@ -565,1 +650,1 @@\n-                                ((bits_, s_) -> s_.rvOp(i -> bits_)));\n+                                ((bits_, s_) -> s_.rvOpMF(i -> bits_)));\n@@ -725,1 +810,1 @@\n-                    v0.uOp(m, (i, a) -> (int) -a);\n+                    v0.uOpMF(m, (i, a) -> (int) -a);\n@@ -727,1 +812,1 @@\n-                    v0.uOp(m, (i, a) -> (int) Math.abs(a));\n+                    v0.uOpMF(m, (i, a) -> (int) Math.abs(a));\n@@ -729,1 +814,1 @@\n-                    v0.uOp(m, (i, a) -> (int) Integer.bitCount(a));\n+                    v0.uOpMF(m, (i, a) -> (int) Integer.bitCount(a));\n@@ -731,1 +816,1 @@\n-                    v0.uOp(m, (i, a) -> (int) Integer.numberOfTrailingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> (int) Integer.numberOfTrailingZeros(a));\n@@ -733,1 +818,1 @@\n-                    v0.uOp(m, (i, a) -> (int) Integer.numberOfLeadingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> (int) Integer.numberOfLeadingZeros(a));\n@@ -735,1 +820,1 @@\n-                    v0.uOp(m, (i, a) -> (int) Integer.reverse(a));\n+                    v0.uOpMF(m, (i, a) -> (int) Integer.reverse(a));\n@@ -737,1 +822,1 @@\n-                    v0.uOp(m, (i, a) -> (int) Integer.reverseBytes(a));\n+                    v0.uOpMF(m, (i, a) -> (int) Integer.reverseBytes(a));\n@@ -787,1 +872,1 @@\n-            BIN_IMPL.find(op, opc, IntVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, IntVector::binaryOperationsMF));\n@@ -847,1 +932,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(a + b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a + b));\n@@ -849,1 +934,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(a - b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a - b));\n@@ -851,1 +936,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(a * b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a * b));\n@@ -853,1 +938,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(a \/ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a \/ b));\n@@ -855,1 +940,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)Math.max(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)Math.max(a, b));\n@@ -857,1 +942,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)Math.min(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)Math.min(a, b));\n@@ -859,1 +944,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(a & b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a & b));\n@@ -861,1 +946,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(a | b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a | b));\n@@ -863,1 +948,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (int)(a ^ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a ^ b));\n@@ -865,1 +950,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (int)(a << n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (int)(a << n));\n@@ -867,1 +952,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (int)(a >> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (int)(a >> n));\n@@ -869,1 +954,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (int)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (int)((a & LSHR_SETUP_MASK) >>> n));\n@@ -871,1 +956,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -873,1 +958,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -875,1 +960,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> Integer.compress(a, n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> Integer.compress(a, n));\n@@ -877,1 +962,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> Integer.expand(a, n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> Integer.expand(a, n));\n@@ -882,0 +967,39 @@\n+    private static BinaryOperation<IntVector, VectorMask<Integer>> binaryOperationsMF(int opc_) {\n+        switch (opc_) {\n+            case VECTOR_OP_ADD: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a + b));\n+            case VECTOR_OP_SUB: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a - b));\n+            case VECTOR_OP_MUL: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a * b));\n+            case VECTOR_OP_DIV: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a \/ b));\n+            case VECTOR_OP_MAX: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)Math.max(a, b));\n+            case VECTOR_OP_MIN: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)Math.min(a, b));\n+            case VECTOR_OP_AND: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a & b));\n+            case VECTOR_OP_OR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a | b));\n+            case VECTOR_OP_XOR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (int)(a ^ b));\n+            case VECTOR_OP_LSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (int)(a << n));\n+            case VECTOR_OP_RSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (int)(a >> n));\n+            case VECTOR_OP_URSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (int)((a & LSHR_SETUP_MASK) >>> n));\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+            case VECTOR_OP_COMPRESS_BITS: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> Integer.compress(a, n));\n+            case VECTOR_OP_EXPAND_BITS: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> Integer.expand(a, n));\n+            default: return null;\n+        }\n+    }\n+\n+\n@@ -1046,1 +1170,1 @@\n-                    v.uOp(m, (i, a) -> (int)(a << n));\n+                    v.uOpMF(m, (i, a) -> (int)(a << n));\n@@ -1048,1 +1172,1 @@\n-                    v.uOp(m, (i, a) -> (int)(a >> n));\n+                    v.uOpMF(m, (i, a) -> (int)(a >> n));\n@@ -1050,1 +1174,1 @@\n-                    v.uOp(m, (i, a) -> (int)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOpMF(m, (i, a) -> (int)((a & LSHR_SETUP_MASK) >>> n));\n@@ -1052,1 +1176,1 @@\n-                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateLeft(a, (int)n));\n@@ -1054,1 +1178,1 @@\n-                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateRight(a, (int)n));\n@@ -2034,1 +2158,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2056,1 +2180,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2185,1 +2309,1 @@\n-            (v0, v1, m_) -> v0.bOp(v1, m_, (i, a, b) -> b));\n+            (v0, v1, m_) -> v0.bOpMF(v1, m_, (i, a, b) -> b));\n@@ -2392,1 +2516,1 @@\n-            (v1, s_, m_) -> v1.uOp((i, a) -> {\n+            (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2424,1 +2548,1 @@\n-                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                   (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2452,1 +2576,1 @@\n-                (v0, s_, m_) -> v0.uOp((i, a) -> {\n+                (v0, s_, m_) -> v0.uOpMF((i, a) -> {\n@@ -2460,1 +2584,1 @@\n-                (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2802,1 +2926,1 @@\n-                    toBits(v.rOp((int)0, m, (i, a, b) -> (int)(a + b)));\n+                    toBits(v.rOpMF((int)0, m, (i, a, b) -> (int)(a + b)));\n@@ -2804,1 +2928,1 @@\n-                    toBits(v.rOp((int)1, m, (i, a, b) -> (int)(a * b)));\n+                    toBits(v.rOpMF((int)1, m, (i, a, b) -> (int)(a * b)));\n@@ -2806,1 +2930,1 @@\n-                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (int) Math.min(a, b)));\n+                    toBits(v.rOpMF(MAX_OR_INF, m, (i, a, b) -> (int) Math.min(a, b)));\n@@ -2808,1 +2932,1 @@\n-                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (int) Math.max(a, b)));\n+                    toBits(v.rOpMF(MIN_OR_INF, m, (i, a, b) -> (int) Math.max(a, b)));\n@@ -2810,1 +2934,1 @@\n-                    toBits(v.rOp((int)-1, m, (i, a, b) -> (int)(a & b)));\n+                    toBits(v.rOpMF((int)-1, m, (i, a, b) -> (int)(a & b)));\n@@ -2812,1 +2936,1 @@\n-                    toBits(v.rOp((int)0, m, (i, a, b) -> (int)(a | b)));\n+                    toBits(v.rOpMF((int)0, m, (i, a, b) -> (int)(a | b)));\n@@ -2814,1 +2938,1 @@\n-                    toBits(v.rOp((int)0, m, (i, a, b) -> (int)(a ^ b)));\n+                    toBits(v.rOpMF((int)0, m, (i, a, b) -> (int)(a ^ b)));\n@@ -2955,1 +3079,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset);\n+        return vsp.dummyVectorMF().fromArray0(a, offset);\n@@ -2986,1 +3110,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -2990,1 +3114,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3048,1 +3172,1 @@\n-            s.vOp(n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(n -> c[idx + iMap[idy+n]]));\n@@ -3098,1 +3222,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, indexMap, mapOffset, m);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, indexMap, mapOffset, m);\n@@ -3140,1 +3264,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset).maybeSwap(bo);\n@@ -3196,1 +3320,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n+            return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3200,1 +3324,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3230,1 +3354,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3232,0 +3356,1 @@\n+\n@@ -3319,1 +3444,1 @@\n-            -> v.stOp(arr, off,\n+            -> v.stOpMF(arr, off,\n@@ -3442,1 +3567,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -3459,1 +3584,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+            (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -3494,1 +3619,1 @@\n-            s.vOp(vm, n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(vm, n -> c[idx + iMap[idy+n]]));\n@@ -3509,1 +3634,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, IntVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, IntVector::memorySegmentGet);\n@@ -3525,1 +3650,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, vm, IntVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, vm, IntVector::memorySegmentGet);\n@@ -3544,1 +3669,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3561,1 +3686,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -3592,1 +3717,1 @@\n-            -> v.stOp(arr, off, vm,\n+            -> v.stOpMF(arr, off, vm,\n@@ -3609,1 +3734,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, IntVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, IntVector::memorySegmentSet);\n@@ -3626,1 +3751,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, vm, IntVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, vm, IntVector::memorySegmentSet);\n@@ -3847,1 +3972,1 @@\n-                    (bits_, s_) -> s_.rvOp(i -> bits_));\n+                    (bits_, s_) -> s_.rvOpMF(i -> bits_));\n@@ -3898,1 +4023,1 @@\n-            return dummyVector().fromArray0(va, 0);\n+            return dummyVectorMF().fromArray0(va, 0);\n@@ -3913,2 +4038,2 @@\n-        IntVector dummyVector() {\n-            return (IntVector) super.dummyVector();\n+        IntVector dummyVectorMF() {\n+            return (IntVector) super.dummyVectorMF();\n@@ -3920,1 +4045,1 @@\n-        IntVector rvOp(RVOp f) {\n+        IntVector rvOpMF(RVOp f) {\n@@ -3926,1 +4051,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3929,1 +4055,1 @@\n-        IntVector vOp(FVOp f) {\n+        IntVector vOpMF(FVOp f) {\n@@ -3934,1 +4060,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3937,1 +4064,1 @@\n-        IntVector vOp(VectorMask<Integer> m, FVOp f) {\n+        IntVector vOpMF(VectorMask<Integer> m, FVOp f) {\n@@ -3939,1 +4066,2 @@\n-            boolean[] mbits = ((AbstractMask<Integer>)m).getBits();\n+            VectorPayloadMF mbits = ((AbstractMask<Integer>)m).getBits();\n+            long mOffset = mbits.multiFieldOffset();\n@@ -3941,1 +4069,1 @@\n-                if (mbits[i]) {\n+                if (U.getBoolean(mbits, mOffset + i)) {\n@@ -3945,1 +4073,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3950,1 +4079,1 @@\n-        <M> IntVector ldOp(M memory, int offset,\n+        <M> IntVector ldOpMF(M memory, int offset,\n@@ -3952,1 +4081,1 @@\n-            return dummyVector().ldOp(memory, offset, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, f);\n@@ -3957,1 +4086,1 @@\n-        <M> IntVector ldOp(M memory, int offset,\n+        <M> IntVector ldOpMF(M memory, int offset,\n@@ -3960,1 +4089,1 @@\n-            return dummyVector().ldOp(memory, offset, m, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, m, f);\n@@ -3963,0 +4092,1 @@\n+\n@@ -3965,1 +4095,1 @@\n-        IntVector ldLongOp(MemorySegment memory, long offset,\n+        IntVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -3967,1 +4097,1 @@\n-            return dummyVector().ldLongOp(memory, offset, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, f);\n@@ -3972,1 +4102,1 @@\n-        IntVector ldLongOp(MemorySegment memory, long offset,\n+        IntVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -3975,1 +4105,1 @@\n-            return dummyVector().ldLongOp(memory, offset, m, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, m, f);\n@@ -3980,2 +4110,2 @@\n-        <M> void stOp(M memory, int offset, FStOp<M> f) {\n-            dummyVector().stOp(memory, offset, f);\n+        <M> void stOpMF(M memory, int offset, FStOp<M> f) {\n+            dummyVectorMF().stOpMF(memory, offset, f);\n@@ -3986,2 +4116,2 @@\n-        <M> void stOp(M memory, int offset,\n-                      AbstractMask<Integer> m,\n+        <M> void stOpMF(M memory, int offset,\n+                     AbstractMask<Integer> m,\n@@ -3989,1 +4119,1 @@\n-            dummyVector().stOp(memory, offset, m, f);\n+            dummyVectorMF().stOpMF(memory, offset, m, f);\n@@ -3992,0 +4122,1 @@\n+\n@@ -3994,2 +4125,2 @@\n-        void stLongOp(MemorySegment memory, long offset, FStLongOp f) {\n-            dummyVector().stLongOp(memory, offset, f);\n+        void stLongOpMF(MemorySegment memory, long offset, FStLongOp f) {\n+            dummyVectorMF().stLongOpMF(memory, offset, f);\n@@ -4000,1 +4131,1 @@\n-        void stLongOp(MemorySegment memory, long offset,\n+        void stLongOpMF(MemorySegment memory, long offset,\n@@ -4003,1 +4134,1 @@\n-            dummyVector().stLongOp(memory, offset, m, f);\n+            dummyVectorMF().stLongOpMF(memory, offset, m, f);\n@@ -4018,1 +4149,1 @@\n-                return IntMaxVector.ZERO;\n+               return IntMaxVector.ZERO;\n@@ -4056,0 +4187,10 @@\n+\n+        @Override\n+        Object iotaArray() {\n+            int laneCount = laneCount();\n+            int [] init = new int[laneCount];\n+            for (int i = 0; i < laneCount; i++) {\n+                init[i] = (int)i;\n+            }\n+           return init;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":375,"deletions":234,"binary":false,"changes":609,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Long128Vector extends LongVector {\n+value class Long128Vector extends LongVector {\n@@ -57,2 +59,7 @@\n-    Long128Vector(long[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128L.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF128L payload;\n+\n+    Long128Vector(Object value) {\n+        this.payload = (VectorPayloadMF128L) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Long128Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Long128Vector(Object v) {\n-        this((long[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Long128Vector ZERO = new Long128Vector(new long[VLENGTH]);\n-    static final Long128Vector IOTA = new Long128Vector(VSPECIES.iotaArray());\n+    static final Long128Vector ZERO = new Long128Vector(VectorPayloadMF.newVectorInstanceFactory(long.class, 2, false));\n+    static final Long128Vector IOTA = new Long128Vector(VectorPayloadMF.createVectPayloadInstanceL(VLENGTH, (long[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    long[] vec() {\n-        return (long[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -131,2 +133,2 @@\n-    Long128Mask maskFromArray(boolean[] bits) {\n-        return new Long128Mask(bits);\n+    Long128Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Long128Mask(payload);\n@@ -152,1 +154,1 @@\n-    Long128Shuffle shuffleFromBytes(byte[] reorder) { return new Long128Shuffle(reorder); }\n+    Long128Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Long128Shuffle(indexes); }\n@@ -165,1 +167,1 @@\n-    Long128Vector vectorFactory(long[] vec) {\n+    Long128Vector vectorFactory(VectorPayloadMF vec) {\n@@ -185,2 +187,2 @@\n-    Long128Vector uOp(FUnOp f) {\n-        return (Long128Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Long128Vector uOpMF(FUnOp f) {\n+        return (Long128Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -191,1 +193,1 @@\n-    Long128Vector uOp(VectorMask<Long> m, FUnOp f) {\n+    Long128Vector uOpMF(VectorMask<Long> m, FUnOp f) {\n@@ -193,1 +195,1 @@\n-            super.uOpTemplate((Long128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Long128Mask)m, f);  \/\/ specialize\n@@ -200,2 +202,2 @@\n-    Long128Vector bOp(Vector<Long> v, FBinOp f) {\n-        return (Long128Vector) super.bOpTemplate((Long128Vector)v, f);  \/\/ specialize\n+    Long128Vector bOpMF(Vector<Long> v, FBinOp f) {\n+        return (Long128Vector) super.bOpTemplateMF((Long128Vector)v, f);  \/\/ specialize\n@@ -206,1 +208,1 @@\n-    Long128Vector bOp(Vector<Long> v,\n+    Long128Vector bOpMF(Vector<Long> v,\n@@ -209,2 +211,2 @@\n-            super.bOpTemplate((Long128Vector)v, (Long128Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Long128Vector)v, (Long128Mask)m,\n+                                f);  \/\/ specialize\n@@ -217,1 +219,1 @@\n-    Long128Vector tOp(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n+    Long128Vector tOpMF(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n@@ -219,2 +221,2 @@\n-            super.tOpTemplate((Long128Vector)v1, (Long128Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Long128Vector)v1, (Long128Vector)v2,\n+                                f);  \/\/ specialize\n@@ -225,1 +227,1 @@\n-    Long128Vector tOp(Vector<Long> v1, Vector<Long> v2,\n+    Long128Vector tOpMF(Vector<Long> v1, Vector<Long> v2,\n@@ -228,2 +230,2 @@\n-            super.tOpTemplate((Long128Vector)v1, (Long128Vector)v2,\n-                              (Long128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Long128Vector)v1, (Long128Vector)v2,\n+                                (Long128Mask)m, f);  \/\/ specialize\n@@ -234,2 +236,2 @@\n-    long rOp(long v, VectorMask<Long> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    long rOpMF(long v, VectorMask<Long> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -512,6 +514,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    long[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getLong(vecpayload, start_offset + ix * Long.BYTES);\n+                             });\n@@ -531,1 +534,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -535,3 +538,6 @@\n-                                    long[] res = v.vec().clone();\n-                                    res[ix] = (long)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putLong(tpayload, start_offset + ix * Long.BYTES, (long)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -543,1 +549,1 @@\n-    static final class Long128Mask extends AbstractMask<Long> {\n+    static final value class Long128Mask extends AbstractMask<Long> {\n@@ -547,2 +553,2 @@\n-        Long128Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Long128Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF16Z) payload;\n@@ -551,3 +557,2 @@\n-        Long128Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF16Z payload;\n@@ -555,2 +560,2 @@\n-        Long128Mask(boolean val) {\n-            super(prepare(val));\n+        Long128Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF16Z)(prepare(payload, offset, VSPECIES));\n@@ -559,6 +564,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Long128Mask(boolean val) {\n+            this.payload = (VectorPayloadMF16Z)(prepare(val, VSPECIES));\n@@ -567,5 +568,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -583,22 +579,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Long128Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Long128Mask(res);\n-        }\n-\n-        Long128Mask bOp(VectorMask<Long> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Long128Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Long128Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -615,27 +591,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -662,1 +611,1 @@\n-            return (Long128Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Long128Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -675,3 +624,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Long128Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long128Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long128Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -685,3 +634,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Long128Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long128Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long128Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -695,3 +644,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long128Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long128Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long128Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -706,1 +655,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Long128Mask) m).trueCountHelper());\n@@ -713,1 +662,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Long128Mask) m).firstTrueHelper());\n@@ -720,1 +669,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Long128Mask) m).lastTrueHelper());\n@@ -730,1 +679,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Long128Mask) m).toLongHelper());\n@@ -740,1 +689,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Long128Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -750,1 +699,1 @@\n-                                         (m, __) -> anyTrueHelper(((Long128Mask)m).getBits()));\n+                                         (m, __) -> ((Long128Mask) m).anyTrueHelper());\n@@ -758,1 +707,1 @@\n-                                         (m, __) -> allTrueHelper(((Long128Mask)m).getBits()));\n+                                         (m, __) -> ((Long128Mask) m).allTrueHelper());\n@@ -775,1 +724,1 @@\n-    static final class Long128Shuffle extends AbstractShuffle<Long> {\n+    static final value class Long128Shuffle extends AbstractShuffle<Long> {\n@@ -779,3 +728,2 @@\n-        Long128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF16B payload;\n@@ -783,2 +731,4 @@\n-        public Long128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long128Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF16B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -787,2 +737,2 @@\n-        public Long128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Long128Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF16B)(prepare(indexes, i, VSPECIES));\n@@ -792,1 +742,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF16B)(prepare(fn, VSPECIES));\n+        }\n+        public Long128Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF16B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -829,6 +790,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -836,0 +800,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Long256Vector extends LongVector {\n+value class Long256Vector extends LongVector {\n@@ -57,2 +59,7 @@\n-    Long256Vector(long[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256L.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF256L payload;\n+\n+    Long256Vector(Object value) {\n+        this.payload = (VectorPayloadMF256L) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Long256Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Long256Vector(Object v) {\n-        this((long[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Long256Vector ZERO = new Long256Vector(new long[VLENGTH]);\n-    static final Long256Vector IOTA = new Long256Vector(VSPECIES.iotaArray());\n+    static final Long256Vector ZERO = new Long256Vector(VectorPayloadMF.newVectorInstanceFactory(long.class, 4, false));\n+    static final Long256Vector IOTA = new Long256Vector(VectorPayloadMF.createVectPayloadInstanceL(VLENGTH, (long[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    long[] vec() {\n-        return (long[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -131,2 +133,2 @@\n-    Long256Mask maskFromArray(boolean[] bits) {\n-        return new Long256Mask(bits);\n+    Long256Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Long256Mask(payload);\n@@ -152,1 +154,1 @@\n-    Long256Shuffle shuffleFromBytes(byte[] reorder) { return new Long256Shuffle(reorder); }\n+    Long256Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Long256Shuffle(indexes); }\n@@ -165,1 +167,1 @@\n-    Long256Vector vectorFactory(long[] vec) {\n+    Long256Vector vectorFactory(VectorPayloadMF vec) {\n@@ -185,2 +187,2 @@\n-    Long256Vector uOp(FUnOp f) {\n-        return (Long256Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Long256Vector uOpMF(FUnOp f) {\n+        return (Long256Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -191,1 +193,1 @@\n-    Long256Vector uOp(VectorMask<Long> m, FUnOp f) {\n+    Long256Vector uOpMF(VectorMask<Long> m, FUnOp f) {\n@@ -193,1 +195,1 @@\n-            super.uOpTemplate((Long256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Long256Mask)m, f);  \/\/ specialize\n@@ -200,2 +202,2 @@\n-    Long256Vector bOp(Vector<Long> v, FBinOp f) {\n-        return (Long256Vector) super.bOpTemplate((Long256Vector)v, f);  \/\/ specialize\n+    Long256Vector bOpMF(Vector<Long> v, FBinOp f) {\n+        return (Long256Vector) super.bOpTemplateMF((Long256Vector)v, f);  \/\/ specialize\n@@ -206,1 +208,1 @@\n-    Long256Vector bOp(Vector<Long> v,\n+    Long256Vector bOpMF(Vector<Long> v,\n@@ -209,2 +211,2 @@\n-            super.bOpTemplate((Long256Vector)v, (Long256Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Long256Vector)v, (Long256Mask)m,\n+                                f);  \/\/ specialize\n@@ -217,1 +219,1 @@\n-    Long256Vector tOp(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n+    Long256Vector tOpMF(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n@@ -219,2 +221,2 @@\n-            super.tOpTemplate((Long256Vector)v1, (Long256Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Long256Vector)v1, (Long256Vector)v2,\n+                                f);  \/\/ specialize\n@@ -225,1 +227,1 @@\n-    Long256Vector tOp(Vector<Long> v1, Vector<Long> v2,\n+    Long256Vector tOpMF(Vector<Long> v1, Vector<Long> v2,\n@@ -228,2 +230,2 @@\n-            super.tOpTemplate((Long256Vector)v1, (Long256Vector)v2,\n-                              (Long256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Long256Vector)v1, (Long256Vector)v2,\n+                                (Long256Mask)m, f);  \/\/ specialize\n@@ -234,2 +236,2 @@\n-    long rOp(long v, VectorMask<Long> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    long rOpMF(long v, VectorMask<Long> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -514,6 +516,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    long[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getLong(vecpayload, start_offset + ix * Long.BYTES);\n+                             });\n@@ -535,1 +538,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -539,3 +542,6 @@\n-                                    long[] res = v.vec().clone();\n-                                    res[ix] = (long)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putLong(tpayload, start_offset + ix * Long.BYTES, (long)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -547,1 +553,1 @@\n-    static final class Long256Mask extends AbstractMask<Long> {\n+    static final value class Long256Mask extends AbstractMask<Long> {\n@@ -551,2 +557,2 @@\n-        Long256Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Long256Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32Z) payload;\n@@ -555,3 +561,2 @@\n-        Long256Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32Z payload;\n@@ -559,2 +564,2 @@\n-        Long256Mask(boolean val) {\n-            super(prepare(val));\n+        Long256Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(payload, offset, VSPECIES));\n@@ -563,6 +568,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Long256Mask(boolean val) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(val, VSPECIES));\n@@ -571,5 +572,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -587,22 +583,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Long256Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Long256Mask(res);\n-        }\n-\n-        Long256Mask bOp(VectorMask<Long> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Long256Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Long256Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -619,27 +595,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -666,1 +615,1 @@\n-            return (Long256Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Long256Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -679,3 +628,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Long256Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long256Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long256Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -689,3 +638,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Long256Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long256Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long256Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -699,3 +648,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long256Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long256Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long256Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -710,1 +659,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Long256Mask) m).trueCountHelper());\n@@ -717,1 +666,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Long256Mask) m).firstTrueHelper());\n@@ -724,1 +673,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Long256Mask) m).lastTrueHelper());\n@@ -734,1 +683,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Long256Mask) m).toLongHelper());\n@@ -744,1 +693,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Long256Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -754,1 +703,1 @@\n-                                         (m, __) -> anyTrueHelper(((Long256Mask)m).getBits()));\n+                                         (m, __) -> ((Long256Mask) m).anyTrueHelper());\n@@ -762,1 +711,1 @@\n-                                         (m, __) -> allTrueHelper(((Long256Mask)m).getBits()));\n+                                         (m, __) -> ((Long256Mask) m).allTrueHelper());\n@@ -779,1 +728,1 @@\n-    static final class Long256Shuffle extends AbstractShuffle<Long> {\n+    static final value class Long256Shuffle extends AbstractShuffle<Long> {\n@@ -783,3 +732,2 @@\n-        Long256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32B payload;\n@@ -787,2 +735,4 @@\n-        public Long256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long256Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -791,2 +741,2 @@\n-        public Long256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Long256Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, i, VSPECIES));\n@@ -796,1 +746,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF32B)(prepare(fn, VSPECIES));\n+        }\n+        public Long256Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -833,6 +794,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -840,0 +804,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Long512Vector extends LongVector {\n+value class Long512Vector extends LongVector {\n@@ -57,2 +59,7 @@\n-    Long512Vector(long[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512L.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF512L payload;\n+\n+    Long512Vector(Object value) {\n+        this.payload = (VectorPayloadMF512L) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Long512Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Long512Vector(Object v) {\n-        this((long[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Long512Vector ZERO = new Long512Vector(new long[VLENGTH]);\n-    static final Long512Vector IOTA = new Long512Vector(VSPECIES.iotaArray());\n+    static final Long512Vector ZERO = new Long512Vector(VectorPayloadMF.newVectorInstanceFactory(long.class, 8, false));\n+    static final Long512Vector IOTA = new Long512Vector(VectorPayloadMF.createVectPayloadInstanceL(VLENGTH, (long[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    long[] vec() {\n-        return (long[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -131,2 +133,2 @@\n-    Long512Mask maskFromArray(boolean[] bits) {\n-        return new Long512Mask(bits);\n+    Long512Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Long512Mask(payload);\n@@ -152,1 +154,1 @@\n-    Long512Shuffle shuffleFromBytes(byte[] reorder) { return new Long512Shuffle(reorder); }\n+    Long512Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Long512Shuffle(indexes); }\n@@ -165,1 +167,1 @@\n-    Long512Vector vectorFactory(long[] vec) {\n+    Long512Vector vectorFactory(VectorPayloadMF vec) {\n@@ -185,2 +187,2 @@\n-    Long512Vector uOp(FUnOp f) {\n-        return (Long512Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Long512Vector uOpMF(FUnOp f) {\n+        return (Long512Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -191,1 +193,1 @@\n-    Long512Vector uOp(VectorMask<Long> m, FUnOp f) {\n+    Long512Vector uOpMF(VectorMask<Long> m, FUnOp f) {\n@@ -193,1 +195,1 @@\n-            super.uOpTemplate((Long512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Long512Mask)m, f);  \/\/ specialize\n@@ -200,2 +202,2 @@\n-    Long512Vector bOp(Vector<Long> v, FBinOp f) {\n-        return (Long512Vector) super.bOpTemplate((Long512Vector)v, f);  \/\/ specialize\n+    Long512Vector bOpMF(Vector<Long> v, FBinOp f) {\n+        return (Long512Vector) super.bOpTemplateMF((Long512Vector)v, f);  \/\/ specialize\n@@ -206,1 +208,1 @@\n-    Long512Vector bOp(Vector<Long> v,\n+    Long512Vector bOpMF(Vector<Long> v,\n@@ -209,2 +211,2 @@\n-            super.bOpTemplate((Long512Vector)v, (Long512Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Long512Vector)v, (Long512Mask)m,\n+                                f);  \/\/ specialize\n@@ -217,1 +219,1 @@\n-    Long512Vector tOp(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n+    Long512Vector tOpMF(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n@@ -219,2 +221,2 @@\n-            super.tOpTemplate((Long512Vector)v1, (Long512Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Long512Vector)v1, (Long512Vector)v2,\n+                                f);  \/\/ specialize\n@@ -225,1 +227,1 @@\n-    Long512Vector tOp(Vector<Long> v1, Vector<Long> v2,\n+    Long512Vector tOpMF(Vector<Long> v1, Vector<Long> v2,\n@@ -228,2 +230,2 @@\n-            super.tOpTemplate((Long512Vector)v1, (Long512Vector)v2,\n-                              (Long512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Long512Vector)v1, (Long512Vector)v2,\n+                                (Long512Mask)m, f);  \/\/ specialize\n@@ -234,2 +236,2 @@\n-    long rOp(long v, VectorMask<Long> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    long rOpMF(long v, VectorMask<Long> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -518,6 +520,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    long[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getLong(vecpayload, start_offset + ix * Long.BYTES);\n+                             });\n@@ -543,1 +546,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -547,3 +550,6 @@\n-                                    long[] res = v.vec().clone();\n-                                    res[ix] = (long)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putLong(tpayload, start_offset + ix * Long.BYTES, (long)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -555,1 +561,1 @@\n-    static final class Long512Mask extends AbstractMask<Long> {\n+    static final value class Long512Mask extends AbstractMask<Long> {\n@@ -559,2 +565,2 @@\n-        Long512Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Long512Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64Z) payload;\n@@ -563,3 +569,2 @@\n-        Long512Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64Z payload;\n@@ -567,2 +572,2 @@\n-        Long512Mask(boolean val) {\n-            super(prepare(val));\n+        Long512Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(payload, offset, VSPECIES));\n@@ -571,6 +576,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Long512Mask(boolean val) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(val, VSPECIES));\n@@ -579,5 +580,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -595,22 +591,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Long512Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Long512Mask(res);\n-        }\n-\n-        Long512Mask bOp(VectorMask<Long> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Long512Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Long512Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -627,27 +603,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -674,1 +623,1 @@\n-            return (Long512Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Long512Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -687,3 +636,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Long512Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long512Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long512Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -697,3 +646,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Long512Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long512Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long512Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -707,3 +656,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long512Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long512Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long512Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -718,1 +667,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Long512Mask) m).trueCountHelper());\n@@ -725,1 +674,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Long512Mask) m).firstTrueHelper());\n@@ -732,1 +681,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Long512Mask) m).lastTrueHelper());\n@@ -742,1 +691,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Long512Mask) m).toLongHelper());\n@@ -752,1 +701,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Long512Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -762,1 +711,1 @@\n-                                         (m, __) -> anyTrueHelper(((Long512Mask)m).getBits()));\n+                                         (m, __) -> ((Long512Mask) m).anyTrueHelper());\n@@ -770,1 +719,1 @@\n-                                         (m, __) -> allTrueHelper(((Long512Mask)m).getBits()));\n+                                         (m, __) -> ((Long512Mask) m).allTrueHelper());\n@@ -787,1 +736,1 @@\n-    static final class Long512Shuffle extends AbstractShuffle<Long> {\n+    static final value class Long512Shuffle extends AbstractShuffle<Long> {\n@@ -791,3 +740,2 @@\n-        Long512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64B payload;\n@@ -795,2 +743,4 @@\n-        public Long512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long512Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -799,2 +749,2 @@\n-        public Long512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Long512Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, i, VSPECIES));\n@@ -804,1 +754,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF64B)(prepare(fn, VSPECIES));\n+        }\n+        public Long512Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -841,6 +802,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -848,0 +812,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Long64Vector extends LongVector {\n+value class Long64Vector extends LongVector {\n@@ -57,2 +59,7 @@\n-    Long64Vector(long[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64L.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF64L payload;\n+\n+    Long64Vector(Object value) {\n+        this.payload = (VectorPayloadMF64L) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Long64Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Long64Vector(Object v) {\n-        this((long[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Long64Vector ZERO = new Long64Vector(new long[VLENGTH]);\n-    static final Long64Vector IOTA = new Long64Vector(VSPECIES.iotaArray());\n+    static final Long64Vector ZERO = new Long64Vector(VectorPayloadMF.newVectorInstanceFactory(long.class, 1, false));\n+    static final Long64Vector IOTA = new Long64Vector(VectorPayloadMF.createVectPayloadInstanceL(VLENGTH, (long[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    long[] vec() {\n-        return (long[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -131,2 +133,2 @@\n-    Long64Mask maskFromArray(boolean[] bits) {\n-        return new Long64Mask(bits);\n+    Long64Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Long64Mask(payload);\n@@ -152,1 +154,1 @@\n-    Long64Shuffle shuffleFromBytes(byte[] reorder) { return new Long64Shuffle(reorder); }\n+    Long64Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Long64Shuffle(indexes); }\n@@ -165,1 +167,1 @@\n-    Long64Vector vectorFactory(long[] vec) {\n+    Long64Vector vectorFactory(VectorPayloadMF vec) {\n@@ -185,2 +187,2 @@\n-    Long64Vector uOp(FUnOp f) {\n-        return (Long64Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Long64Vector uOpMF(FUnOp f) {\n+        return (Long64Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -191,1 +193,1 @@\n-    Long64Vector uOp(VectorMask<Long> m, FUnOp f) {\n+    Long64Vector uOpMF(VectorMask<Long> m, FUnOp f) {\n@@ -193,1 +195,1 @@\n-            super.uOpTemplate((Long64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Long64Mask)m, f);  \/\/ specialize\n@@ -200,2 +202,2 @@\n-    Long64Vector bOp(Vector<Long> v, FBinOp f) {\n-        return (Long64Vector) super.bOpTemplate((Long64Vector)v, f);  \/\/ specialize\n+    Long64Vector bOpMF(Vector<Long> v, FBinOp f) {\n+        return (Long64Vector) super.bOpTemplateMF((Long64Vector)v, f);  \/\/ specialize\n@@ -206,1 +208,1 @@\n-    Long64Vector bOp(Vector<Long> v,\n+    Long64Vector bOpMF(Vector<Long> v,\n@@ -209,2 +211,2 @@\n-            super.bOpTemplate((Long64Vector)v, (Long64Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Long64Vector)v, (Long64Mask)m,\n+                                f);  \/\/ specialize\n@@ -217,1 +219,1 @@\n-    Long64Vector tOp(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n+    Long64Vector tOpMF(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n@@ -219,2 +221,2 @@\n-            super.tOpTemplate((Long64Vector)v1, (Long64Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Long64Vector)v1, (Long64Vector)v2,\n+                                f);  \/\/ specialize\n@@ -225,1 +227,1 @@\n-    Long64Vector tOp(Vector<Long> v1, Vector<Long> v2,\n+    Long64Vector tOpMF(Vector<Long> v1, Vector<Long> v2,\n@@ -228,2 +230,2 @@\n-            super.tOpTemplate((Long64Vector)v1, (Long64Vector)v2,\n-                              (Long64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Long64Vector)v1, (Long64Vector)v2,\n+                                (Long64Mask)m, f);  \/\/ specialize\n@@ -234,2 +236,2 @@\n-    long rOp(long v, VectorMask<Long> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    long rOpMF(long v, VectorMask<Long> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -511,6 +513,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    long[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getLong(vecpayload, start_offset + ix * Long.BYTES);\n+                             });\n@@ -529,1 +532,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -533,3 +536,6 @@\n-                                    long[] res = v.vec().clone();\n-                                    res[ix] = (long)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putLong(tpayload, start_offset + ix * Long.BYTES, (long)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -541,1 +547,1 @@\n-    static final class Long64Mask extends AbstractMask<Long> {\n+    static final value class Long64Mask extends AbstractMask<Long> {\n@@ -545,2 +551,2 @@\n-        Long64Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Long64Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF8Z) payload;\n@@ -549,3 +555,2 @@\n-        Long64Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF8Z payload;\n@@ -553,2 +558,2 @@\n-        Long64Mask(boolean val) {\n-            super(prepare(val));\n+        Long64Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF8Z)(prepare(payload, offset, VSPECIES));\n@@ -557,6 +562,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Long64Mask(boolean val) {\n+            this.payload = (VectorPayloadMF8Z)(prepare(val, VSPECIES));\n@@ -565,5 +566,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -581,22 +577,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Long64Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Long64Mask(res);\n-        }\n-\n-        Long64Mask bOp(VectorMask<Long> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Long64Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Long64Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -613,27 +589,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -660,1 +609,1 @@\n-            return (Long64Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Long64Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -673,3 +622,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Long64Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long64Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long64Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -683,3 +632,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Long64Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long64Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long64Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -693,3 +642,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long64Mask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long64Mask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Long64Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -704,1 +653,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Long64Mask) m).trueCountHelper());\n@@ -711,1 +660,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Long64Mask) m).firstTrueHelper());\n@@ -718,1 +667,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Long64Mask) m).lastTrueHelper());\n@@ -728,1 +677,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Long64Mask) m).toLongHelper());\n@@ -738,1 +687,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Long64Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -748,1 +697,1 @@\n-                                         (m, __) -> anyTrueHelper(((Long64Mask)m).getBits()));\n+                                         (m, __) -> ((Long64Mask) m).anyTrueHelper());\n@@ -756,1 +705,1 @@\n-                                         (m, __) -> allTrueHelper(((Long64Mask)m).getBits()));\n+                                         (m, __) -> ((Long64Mask) m).allTrueHelper());\n@@ -773,1 +722,1 @@\n-    static final class Long64Shuffle extends AbstractShuffle<Long> {\n+    static final value class Long64Shuffle extends AbstractShuffle<Long> {\n@@ -777,3 +726,2 @@\n-        Long64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF8B payload;\n@@ -781,2 +729,4 @@\n-        public Long64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Long64Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF8B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -785,2 +735,2 @@\n-        public Long64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Long64Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF8B)(prepare(indexes, i, VSPECIES));\n@@ -790,1 +740,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF8B)(prepare(fn, VSPECIES));\n+        }\n+        public Long64Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF8B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -827,6 +788,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -834,0 +798,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class LongMaxVector extends LongVector {\n+value class LongMaxVector extends LongVector {\n@@ -57,2 +59,7 @@\n-    LongMaxVector(long[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMFMaxL.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMFMaxL payload;\n+\n+    LongMaxVector(Object value) {\n+        this.payload = (VectorPayloadMFMaxL) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as LongMaxVector::new,\n-    \/\/ stored into species.vectorFactory.\n-    LongMaxVector(Object v) {\n-        this((long[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final LongMaxVector ZERO = new LongMaxVector(new long[VLENGTH]);\n-    static final LongMaxVector IOTA = new LongMaxVector(VSPECIES.iotaArray());\n+    static final LongMaxVector ZERO = new LongMaxVector(VectorPayloadMF.newVectorInstanceFactory(long.class, 0, true));\n+    static final LongMaxVector IOTA = new LongMaxVector(VectorPayloadMF.createVectPayloadInstanceL(VLENGTH, (long[])(VSPECIES.iotaArray()), true));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    long[] vec() {\n-        return (long[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -131,2 +133,2 @@\n-    LongMaxMask maskFromArray(boolean[] bits) {\n-        return new LongMaxMask(bits);\n+    LongMaxMask maskFromPayload(VectorPayloadMF payload) {\n+        return new LongMaxMask(payload);\n@@ -152,1 +154,1 @@\n-    LongMaxShuffle shuffleFromBytes(byte[] reorder) { return new LongMaxShuffle(reorder); }\n+    LongMaxShuffle shuffleFromBytes(VectorPayloadMF indexes) { return new LongMaxShuffle(indexes); }\n@@ -165,1 +167,1 @@\n-    LongMaxVector vectorFactory(long[] vec) {\n+    LongMaxVector vectorFactory(VectorPayloadMF vec) {\n@@ -185,2 +187,2 @@\n-    LongMaxVector uOp(FUnOp f) {\n-        return (LongMaxVector) super.uOpTemplate(f);  \/\/ specialize\n+    LongMaxVector uOpMF(FUnOp f) {\n+        return (LongMaxVector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -191,1 +193,1 @@\n-    LongMaxVector uOp(VectorMask<Long> m, FUnOp f) {\n+    LongMaxVector uOpMF(VectorMask<Long> m, FUnOp f) {\n@@ -193,1 +195,1 @@\n-            super.uOpTemplate((LongMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((LongMaxMask)m, f);  \/\/ specialize\n@@ -200,2 +202,2 @@\n-    LongMaxVector bOp(Vector<Long> v, FBinOp f) {\n-        return (LongMaxVector) super.bOpTemplate((LongMaxVector)v, f);  \/\/ specialize\n+    LongMaxVector bOpMF(Vector<Long> v, FBinOp f) {\n+        return (LongMaxVector) super.bOpTemplateMF((LongMaxVector)v, f);  \/\/ specialize\n@@ -206,1 +208,1 @@\n-    LongMaxVector bOp(Vector<Long> v,\n+    LongMaxVector bOpMF(Vector<Long> v,\n@@ -209,2 +211,2 @@\n-            super.bOpTemplate((LongMaxVector)v, (LongMaxMask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((LongMaxVector)v, (LongMaxMask)m,\n+                                f);  \/\/ specialize\n@@ -217,1 +219,1 @@\n-    LongMaxVector tOp(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n+    LongMaxVector tOpMF(Vector<Long> v1, Vector<Long> v2, FTriOp f) {\n@@ -219,2 +221,2 @@\n-            super.tOpTemplate((LongMaxVector)v1, (LongMaxVector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((LongMaxVector)v1, (LongMaxVector)v2,\n+                                f);  \/\/ specialize\n@@ -225,1 +227,1 @@\n-    LongMaxVector tOp(Vector<Long> v1, Vector<Long> v2,\n+    LongMaxVector tOpMF(Vector<Long> v1, Vector<Long> v2,\n@@ -228,2 +230,2 @@\n-            super.tOpTemplate((LongMaxVector)v1, (LongMaxVector)v2,\n-                              (LongMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((LongMaxVector)v1, (LongMaxVector)v2,\n+                                (LongMaxMask)m, f);  \/\/ specialize\n@@ -234,2 +236,2 @@\n-    long rOp(long v, VectorMask<Long> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    long rOpMF(long v, VectorMask<Long> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -511,6 +513,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    long[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getLong(vecpayload, start_offset + ix * Long.BYTES);\n+                             });\n@@ -529,1 +532,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -533,3 +536,6 @@\n-                                    long[] res = v.vec().clone();\n-                                    res[ix] = (long)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putLong(tpayload, start_offset + ix * Long.BYTES, (long)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -541,1 +547,1 @@\n-    static final class LongMaxMask extends AbstractMask<Long> {\n+    static final value class LongMaxMask extends AbstractMask<Long> {\n@@ -545,2 +551,2 @@\n-        LongMaxMask(boolean[] bits) {\n-            this(bits, 0);\n+        LongMaxMask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxLZ) payload;\n@@ -549,3 +555,2 @@\n-        LongMaxMask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxLZ payload;\n@@ -553,2 +558,2 @@\n-        LongMaxMask(boolean val) {\n-            super(prepare(val));\n+        LongMaxMask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMFMaxLZ)(prepare(payload, offset, VSPECIES));\n@@ -557,6 +562,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        LongMaxMask(boolean val) {\n+            this.payload = (VectorPayloadMFMaxLZ)(prepare(val, VSPECIES));\n@@ -565,5 +566,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -581,22 +577,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        LongMaxMask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new LongMaxMask(res);\n-        }\n-\n-        LongMaxMask bOp(VectorMask<Long> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((LongMaxMask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new LongMaxMask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -613,27 +589,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -660,1 +609,1 @@\n-            return (LongMaxMask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (LongMaxMask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -673,3 +622,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, LongMaxMask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, LongMaxMask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (LongMaxMask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -683,3 +632,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, LongMaxMask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, LongMaxMask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (LongMaxMask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -693,3 +642,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, LongMaxMask.class, null, long.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, LongMaxMask.class, null,\n+                                          long.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (LongMaxMask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -704,1 +653,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((LongMaxMask) m).trueCountHelper());\n@@ -711,1 +660,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((LongMaxMask) m).firstTrueHelper());\n@@ -718,1 +667,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((LongMaxMask) m).lastTrueHelper());\n@@ -728,1 +677,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((LongMaxMask) m).toLongHelper());\n@@ -738,1 +687,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((LongMaxMask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -748,1 +697,1 @@\n-                                         (m, __) -> anyTrueHelper(((LongMaxMask)m).getBits()));\n+                                         (m, __) -> ((LongMaxMask) m).anyTrueHelper());\n@@ -756,1 +705,1 @@\n-                                         (m, __) -> allTrueHelper(((LongMaxMask)m).getBits()));\n+                                         (m, __) -> ((LongMaxMask) m).allTrueHelper());\n@@ -773,1 +722,1 @@\n-    static final class LongMaxShuffle extends AbstractShuffle<Long> {\n+    static final value class LongMaxShuffle extends AbstractShuffle<Long> {\n@@ -777,3 +726,2 @@\n-        LongMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxLB payload;\n@@ -781,2 +729,4 @@\n-        public LongMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        LongMaxShuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxLB) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -785,2 +735,2 @@\n-        public LongMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public LongMaxShuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMFMaxLB)(prepare(indexes, i, VSPECIES));\n@@ -790,1 +740,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMFMaxLB)(prepare(fn, VSPECIES));\n+        }\n+        public LongMaxShuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMFMaxLB)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -827,6 +788,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, true);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -834,0 +798,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -51,6 +51,2 @@\n-@SuppressWarnings(\"cast\")  \/\/ warning: redundant cast\n-public abstract class LongVector extends AbstractVector<Long> {\n-\n-    LongVector(long[] vec) {\n-        super(vec);\n-    }\n+@SuppressWarnings({\"cast\"})  \/\/ warning: redundant cast\n+public abstract value class LongVector extends AbstractVector<Long> {\n@@ -59,0 +55,4 @@\n+    \/**\n+     * Default Constructor for abstract vector.\n+     *\/\n+    public LongVector() {}\n@@ -96,3 +96,0 @@\n-    \/*package-private*\/\n-    abstract long[] vec();\n-\n@@ -103,1 +100,1 @@\n-     * It is an error if the array is aliased elsewhere.\n+     * It is an error if the vec is aliased elsewhere.\n@@ -106,1 +103,1 @@\n-    abstract LongVector vectorFactory(long[] vec);\n+    abstract LongVector vectorFactory(VectorPayloadMF vec);\n@@ -115,2 +112,2 @@\n-    AbstractMask<Long> maskFactory(boolean[] bits) {\n-        return vspecies().maskFactory(bits);\n+    AbstractMask<Long> maskFactory(VectorPayloadMF payload) {\n+        return vspecies().maskFactory(payload);\n@@ -127,1 +124,1 @@\n-    LongVector vOp(FVOp f) {\n+    LongVector vOpMF(FVOp f) {\n@@ -132,1 +129,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -137,1 +135,1 @@\n-    LongVector vOp(VectorMask<Long> m, FVOp f) {\n+    LongVector vOpMF(VectorMask<Long> m, FVOp f) {\n@@ -139,1 +137,2 @@\n-        boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n+        VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+        long mOffset = mbits.multiFieldOffset();\n@@ -141,1 +140,1 @@\n-            if (mbits[i]) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n@@ -145,1 +144,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -157,1 +157,1 @@\n-    LongVector uOp(FUnOp f);\n+    LongVector uOpMF(FUnOp f);\n@@ -160,5 +160,8 @@\n-    LongVector uOpTemplate(FUnOp f) {\n-        long[] vec = vec();\n-        long[] res = new long[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec[i]);\n+    LongVector uOpTemplateMF(FUnOp f) {\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            long v = U.getLong(vec, vOffset + i * Long.BYTES);\n+            U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(i, v));\n@@ -166,1 +169,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -171,1 +175,1 @@\n-    LongVector uOp(VectorMask<Long> m,\n+    LongVector uOpMF(VectorMask<Long> m,\n@@ -175,1 +179,1 @@\n-    LongVector uOpTemplate(VectorMask<Long> m,\n+    LongVector uOpTemplateMF(VectorMask<Long> m,\n@@ -178,1 +182,1 @@\n-            return uOpTemplate(f);\n+            return uOpTemplateMF(f);\n@@ -180,5 +184,11 @@\n-        long[] vec = vec();\n-        long[] res = new long[length()];\n-        boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec[i]) : vec[i];\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                long v = U.getLong(vec, vOffset + i * Long.BYTES);\n+                U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(i, v));\n+            }\n@@ -186,1 +196,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -198,1 +209,1 @@\n-    LongVector bOp(Vector<Long> o,\n+    LongVector bOpMF(Vector<Long> o,\n@@ -202,1 +213,1 @@\n-    LongVector bOpTemplate(Vector<Long> o,\n+    LongVector bOpTemplateMF(Vector<Long> o,\n@@ -204,5 +215,9 @@\n-        long[] res = new long[length()];\n-        long[] vec1 = this.vec();\n-        long[] vec2 = ((LongVector)o).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i]);\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((LongVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            long v1 = U.getLong(vec1, vOffset + i * Long.BYTES);\n+            long v2 = U.getLong(vec2, vOffset + i * Long.BYTES);\n+            U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(i, v1, v2));\n@@ -210,1 +225,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -215,1 +231,1 @@\n-    LongVector bOp(Vector<Long> o,\n+    LongVector bOpMF(Vector<Long> o,\n@@ -220,1 +236,1 @@\n-    LongVector bOpTemplate(Vector<Long> o,\n+    LongVector bOpTemplateMF(Vector<Long> o,\n@@ -224,1 +240,1 @@\n-            return bOpTemplate(o, f);\n+            return bOpTemplateMF(o, f);\n@@ -226,6 +242,13 @@\n-        long[] res = new long[length()];\n-        long[] vec1 = this.vec();\n-        long[] vec2 = ((LongVector)o).vec();\n-        boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((LongVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                long v1 = U.getLong(vec1, vOffset + i * Long.BYTES);\n+                long v2 = U.getLong(vec2, vOffset + i * Long.BYTES);\n+                U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(i, v1, v2));\n+            }\n@@ -233,1 +256,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -245,1 +269,1 @@\n-    LongVector tOp(Vector<Long> o1,\n+    LongVector tOpMF(Vector<Long> o1,\n@@ -250,1 +274,1 @@\n-    LongVector tOpTemplate(Vector<Long> o1,\n+    LongVector tOpTemplateMF(Vector<Long> o1,\n@@ -253,6 +277,11 @@\n-        long[] res = new long[length()];\n-        long[] vec1 = this.vec();\n-        long[] vec2 = ((LongVector)o1).vec();\n-        long[] vec3 = ((LongVector)o2).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i], vec3[i]);\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((LongVector)o1).vec();\n+        VectorPayloadMF vec3 = ((LongVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            long v1 = U.getLong(vec1, vOffset + i * Long.BYTES);\n+            long v2 = U.getLong(vec2, vOffset + i * Long.BYTES);\n+            long v3 = U.getLong(vec3, vOffset + i * Long.BYTES);\n+            U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(i, v1, v2, v3));\n@@ -260,1 +289,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -265,1 +295,1 @@\n-    LongVector tOp(Vector<Long> o1,\n+    LongVector tOpMF(Vector<Long> o1,\n@@ -271,1 +301,1 @@\n-    LongVector tOpTemplate(Vector<Long> o1,\n+    LongVector tOpTemplateMF(Vector<Long> o1,\n@@ -276,1 +306,1 @@\n-            return tOpTemplate(o1, o2, f);\n+            return tOpTemplateMF(o1, o2, f);\n@@ -278,7 +308,15 @@\n-        long[] res = new long[length()];\n-        long[] vec1 = this.vec();\n-        long[] vec2 = ((LongVector)o1).vec();\n-        long[] vec3 = ((LongVector)o2).vec();\n-        boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i], vec3[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((LongVector)o1).vec();\n+        VectorPayloadMF vec3 = ((LongVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                long v1 = U.getLong(vec1, vOffset + i * Long.BYTES);\n+                long v2 = U.getLong(vec2, vOffset + i * Long.BYTES);\n+                long v3 = U.getLong(vec3, vOffset + i * Long.BYTES);\n+                U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(i, v1, v2, v3));\n+            }\n@@ -286,1 +324,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -293,1 +332,1 @@\n-    long rOp(long v, VectorMask<Long> m, FBinOp f);\n+    long rOpMF(long v, VectorMask<Long> m, FBinOp f);\n@@ -297,1 +336,1 @@\n-    long rOpTemplate(long v, VectorMask<Long> m, FBinOp f) {\n+    long rOpTemplateMF(long v, VectorMask<Long> m, FBinOp f) {\n@@ -299,1 +338,1 @@\n-            return rOpTemplate(v, f);\n+            return rOpTemplateMF(v, f);\n@@ -301,4 +340,8 @@\n-        long[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = mbits[i] ? f.apply(i, v, vec[i]) : v;\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            long v1 = U.getLong(vec, vOffset + i * Long.BYTES);\n+            v = U.getBoolean(mbits, mOffset + i) ? f.apply(i, v, v1) : v;\n@@ -311,4 +354,7 @@\n-    long rOpTemplate(long v, FBinOp f) {\n-        long[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = f.apply(i, v, vec[i]);\n+    long rOpTemplateMF(long v, FBinOp f) {\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            long v1 = U.getLong(vec, vOffset + i * Long.BYTES);\n+            v = f.apply(i, v, v1);\n@@ -329,1 +375,1 @@\n-    <M> LongVector ldOp(M memory, int offset,\n+    <M> LongVector ldOpMF(M memory, int offset,\n@@ -331,4 +377,8 @@\n-        \/\/dummy; no vec = vec();\n-        long[] res = new long[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                long.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(memory, offset, i));\n@@ -336,1 +386,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -342,1 +393,1 @@\n-    <M> LongVector ldOp(M memory, int offset,\n+    <M> LongVector ldOpMF(M memory, int offset,\n@@ -345,6 +396,10 @@\n-        \/\/long[] vec = vec();\n-        long[] res = new long[length()];\n-        boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(long.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(memory, offset, i));\n@@ -353,1 +408,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -364,1 +420,1 @@\n-    LongVector ldLongOp(MemorySegment memory, long offset,\n+    LongVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -366,4 +422,8 @@\n-        \/\/dummy; no vec = vec();\n-        long[] res = new long[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                long.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(memory, offset, i));\n@@ -371,1 +431,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -377,1 +438,1 @@\n-    LongVector ldLongOp(MemorySegment memory, long offset,\n+    LongVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -380,6 +441,10 @@\n-        \/\/long[] vec = vec();\n-        long[] res = new long[length()];\n-        boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(long.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putLong(tpayload, vOffset + i * Long.BYTES, f.apply(memory, offset, i));\n@@ -388,1 +453,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -402,1 +468,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -404,3 +470,5 @@\n-        long[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getLong(vec, vOffset + i * Long.BYTES));\n@@ -411,1 +479,1 @@\n-    @ForceInline\n+   @ForceInline\n@@ -413,1 +481,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -416,5 +484,8 @@\n-        long[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getLong(vec, vOffset + i * Long.BYTES));\n@@ -425,0 +496,1 @@\n+\n@@ -432,1 +504,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -434,3 +506,5 @@\n-        long[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getLong(vec, vOffset + i * Long.BYTES));\n@@ -443,1 +517,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -446,5 +520,8 @@\n-        long[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getLong(vec, vOffset + i * Long.BYTES));\n@@ -469,1 +546,1 @@\n-    AbstractMask<Long> bTest(int cond,\n+    AbstractMask<Long> bTestMF(int cond,\n@@ -472,5 +549,12 @@\n-        long[] vec1 = vec();\n-        long[] vec2 = ((LongVector)o).vec();\n-        boolean[] bits = new boolean[length()];\n-        for (int i = 0; i < length(); i++){\n-            bits[i] = f.apply(cond, i, vec1[i], vec2[i]);\n+        int length = vspecies().length();\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((LongVector)o).vec();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF mbits = VectorPayloadMF.newMaskInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        mbits = U.makePrivateBuffer(mbits);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            long v1 = U.getLong(vec1, vOffset + i * Long.BYTES);\n+            long v2 = U.getLong(vec2, vOffset + i * Long.BYTES);\n+            U.putBoolean(mbits, mOffset + i, f.apply(cond, i, v1, v2));\n@@ -478,1 +562,2 @@\n-        return maskFactory(bits);\n+        mbits = U.finishPrivateBuffer(mbits);\n+        return maskFactory(mbits);\n@@ -565,1 +650,1 @@\n-                                ((bits_, s_) -> s_.rvOp(i -> bits_)));\n+                                ((bits_, s_) -> s_.rvOpMF(i -> bits_)));\n@@ -683,1 +768,1 @@\n-                    v0.uOp(m, (i, a) -> (long) -a);\n+                    v0.uOpMF(m, (i, a) -> (long) -a);\n@@ -685,1 +770,1 @@\n-                    v0.uOp(m, (i, a) -> (long) Math.abs(a));\n+                    v0.uOpMF(m, (i, a) -> (long) Math.abs(a));\n@@ -687,1 +772,1 @@\n-                    v0.uOp(m, (i, a) -> (long) Long.bitCount(a));\n+                    v0.uOpMF(m, (i, a) -> (long) Long.bitCount(a));\n@@ -689,1 +774,1 @@\n-                    v0.uOp(m, (i, a) -> (long) Long.numberOfTrailingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> (long) Long.numberOfTrailingZeros(a));\n@@ -691,1 +776,1 @@\n-                    v0.uOp(m, (i, a) -> (long) Long.numberOfLeadingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> (long) Long.numberOfLeadingZeros(a));\n@@ -693,1 +778,1 @@\n-                    v0.uOp(m, (i, a) -> (long) Long.reverse(a));\n+                    v0.uOpMF(m, (i, a) -> (long) Long.reverse(a));\n@@ -695,1 +780,1 @@\n-                    v0.uOp(m, (i, a) -> (long) Long.reverseBytes(a));\n+                    v0.uOpMF(m, (i, a) -> (long) Long.reverseBytes(a));\n@@ -745,1 +830,1 @@\n-            BIN_IMPL.find(op, opc, LongVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, LongVector::binaryOperationsMF));\n@@ -805,1 +890,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(a + b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a + b));\n@@ -807,1 +892,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(a - b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a - b));\n@@ -809,1 +894,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(a * b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a * b));\n@@ -811,1 +896,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(a \/ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a \/ b));\n@@ -813,1 +898,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)Math.max(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)Math.max(a, b));\n@@ -815,1 +900,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)Math.min(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)Math.min(a, b));\n@@ -817,1 +902,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(a & b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a & b));\n@@ -819,1 +904,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(a | b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a | b));\n@@ -821,1 +906,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (long)(a ^ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a ^ b));\n@@ -823,1 +908,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (long)(a << n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (long)(a << n));\n@@ -825,1 +910,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (long)(a >> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (long)(a >> n));\n@@ -827,1 +912,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (long)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (long)((a & LSHR_SETUP_MASK) >>> n));\n@@ -829,1 +914,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -831,1 +916,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -833,1 +918,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> Long.compress(a, n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> Long.compress(a, n));\n@@ -835,1 +920,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> Long.expand(a, n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> Long.expand(a, n));\n@@ -840,0 +925,39 @@\n+    private static BinaryOperation<LongVector, VectorMask<Long>> binaryOperationsMF(int opc_) {\n+        switch (opc_) {\n+            case VECTOR_OP_ADD: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a + b));\n+            case VECTOR_OP_SUB: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a - b));\n+            case VECTOR_OP_MUL: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a * b));\n+            case VECTOR_OP_DIV: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a \/ b));\n+            case VECTOR_OP_MAX: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)Math.max(a, b));\n+            case VECTOR_OP_MIN: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)Math.min(a, b));\n+            case VECTOR_OP_AND: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a & b));\n+            case VECTOR_OP_OR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a | b));\n+            case VECTOR_OP_XOR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (long)(a ^ b));\n+            case VECTOR_OP_LSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (long)(a << n));\n+            case VECTOR_OP_RSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (long)(a >> n));\n+            case VECTOR_OP_URSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (long)((a & LSHR_SETUP_MASK) >>> n));\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+            case VECTOR_OP_COMPRESS_BITS: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> Long.compress(a, n));\n+            case VECTOR_OP_EXPAND_BITS: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> Long.expand(a, n));\n+            default: return null;\n+        }\n+    }\n+\n+\n@@ -959,1 +1083,1 @@\n-                    v.uOp(m, (i, a) -> (long)(a << n));\n+                    v.uOpMF(m, (i, a) -> (long)(a << n));\n@@ -961,1 +1085,1 @@\n-                    v.uOp(m, (i, a) -> (long)(a >> n));\n+                    v.uOpMF(m, (i, a) -> (long)(a >> n));\n@@ -963,1 +1087,1 @@\n-                    v.uOp(m, (i, a) -> (long)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOpMF(m, (i, a) -> (long)((a & LSHR_SETUP_MASK) >>> n));\n@@ -965,1 +1089,1 @@\n-                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateLeft(a, (int)n));\n@@ -967,1 +1091,1 @@\n-                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateRight(a, (int)n));\n@@ -1947,1 +2071,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -1969,1 +2093,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2072,1 +2196,1 @@\n-            (v0, v1, m_) -> v0.bOp(v1, m_, (i, a, b) -> b));\n+            (v0, v1, m_) -> v0.bOpMF(v1, m_, (i, a, b) -> b));\n@@ -2258,1 +2382,1 @@\n-            (v1, s_, m_) -> v1.uOp((i, a) -> {\n+            (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2290,1 +2414,1 @@\n-                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                   (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2318,1 +2442,1 @@\n-                (v0, s_, m_) -> v0.uOp((i, a) -> {\n+                (v0, s_, m_) -> v0.uOpMF((i, a) -> {\n@@ -2326,1 +2450,1 @@\n-                (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2668,1 +2792,1 @@\n-                    toBits(v.rOp((long)0, m, (i, a, b) -> (long)(a + b)));\n+                    toBits(v.rOpMF((long)0, m, (i, a, b) -> (long)(a + b)));\n@@ -2670,1 +2794,1 @@\n-                    toBits(v.rOp((long)1, m, (i, a, b) -> (long)(a * b)));\n+                    toBits(v.rOpMF((long)1, m, (i, a, b) -> (long)(a * b)));\n@@ -2672,1 +2796,1 @@\n-                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (long) Math.min(a, b)));\n+                    toBits(v.rOpMF(MAX_OR_INF, m, (i, a, b) -> (long) Math.min(a, b)));\n@@ -2674,1 +2798,1 @@\n-                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (long) Math.max(a, b)));\n+                    toBits(v.rOpMF(MIN_OR_INF, m, (i, a, b) -> (long) Math.max(a, b)));\n@@ -2676,1 +2800,1 @@\n-                    toBits(v.rOp((long)-1, m, (i, a, b) -> (long)(a & b)));\n+                    toBits(v.rOpMF((long)-1, m, (i, a, b) -> (long)(a & b)));\n@@ -2678,1 +2802,1 @@\n-                    toBits(v.rOp((long)0, m, (i, a, b) -> (long)(a | b)));\n+                    toBits(v.rOpMF((long)0, m, (i, a, b) -> (long)(a | b)));\n@@ -2680,1 +2804,1 @@\n-                    toBits(v.rOp((long)0, m, (i, a, b) -> (long)(a ^ b)));\n+                    toBits(v.rOpMF((long)0, m, (i, a, b) -> (long)(a ^ b)));\n@@ -2816,1 +2940,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset);\n+        return vsp.dummyVectorMF().fromArray0(a, offset);\n@@ -2847,1 +2971,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -2851,1 +2975,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -2901,1 +3025,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -2927,1 +3051,1 @@\n-            s.vOp(n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(n -> c[idx + iMap[idy+n]]));\n@@ -2977,1 +3101,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, indexMap, mapOffset, m);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, indexMap, mapOffset, m);\n@@ -3019,1 +3143,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset).maybeSwap(bo);\n@@ -3075,1 +3199,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n+            return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3079,1 +3203,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3109,1 +3233,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3111,0 +3235,1 @@\n+\n@@ -3190,1 +3315,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -3217,1 +3342,1 @@\n-            -> v.stOp(arr, off,\n+            -> v.stOpMF(arr, off,\n@@ -3340,1 +3465,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -3357,1 +3482,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+            (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -3383,1 +3508,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -3410,1 +3535,1 @@\n-            s.vOp(vm, n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(vm, n -> c[idx + iMap[idy+n]]));\n@@ -3425,1 +3550,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, LongVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, LongVector::memorySegmentGet);\n@@ -3441,1 +3566,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, vm, LongVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, vm, LongVector::memorySegmentGet);\n@@ -3460,1 +3585,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3477,1 +3602,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -3499,1 +3624,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -3527,1 +3652,1 @@\n-            -> v.stOp(arr, off, vm,\n+            -> v.stOpMF(arr, off, vm,\n@@ -3544,1 +3669,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, LongVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, LongVector::memorySegmentSet);\n@@ -3561,1 +3686,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, vm, LongVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, vm, LongVector::memorySegmentSet);\n@@ -3782,1 +3907,1 @@\n-                    (bits_, s_) -> s_.rvOp(i -> bits_));\n+                    (bits_, s_) -> s_.rvOpMF(i -> bits_));\n@@ -3824,1 +3949,1 @@\n-            return dummyVector().fromArray0(va, 0);\n+            return dummyVectorMF().fromArray0(va, 0);\n@@ -3839,2 +3964,2 @@\n-        LongVector dummyVector() {\n-            return (LongVector) super.dummyVector();\n+        LongVector dummyVectorMF() {\n+            return (LongVector) super.dummyVectorMF();\n@@ -3846,1 +3971,1 @@\n-        LongVector rvOp(RVOp f) {\n+        LongVector rvOpMF(RVOp f) {\n@@ -3852,1 +3977,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3855,1 +3981,1 @@\n-        LongVector vOp(FVOp f) {\n+        LongVector vOpMF(FVOp f) {\n@@ -3860,1 +3986,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3863,1 +3990,1 @@\n-        LongVector vOp(VectorMask<Long> m, FVOp f) {\n+        LongVector vOpMF(VectorMask<Long> m, FVOp f) {\n@@ -3865,1 +3992,2 @@\n-            boolean[] mbits = ((AbstractMask<Long>)m).getBits();\n+            VectorPayloadMF mbits = ((AbstractMask<Long>)m).getBits();\n+            long mOffset = mbits.multiFieldOffset();\n@@ -3867,1 +3995,1 @@\n-                if (mbits[i]) {\n+                if (U.getBoolean(mbits, mOffset + i)) {\n@@ -3871,1 +3999,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -3876,1 +4005,1 @@\n-        <M> LongVector ldOp(M memory, int offset,\n+        <M> LongVector ldOpMF(M memory, int offset,\n@@ -3878,1 +4007,1 @@\n-            return dummyVector().ldOp(memory, offset, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, f);\n@@ -3883,1 +4012,1 @@\n-        <M> LongVector ldOp(M memory, int offset,\n+        <M> LongVector ldOpMF(M memory, int offset,\n@@ -3886,1 +4015,1 @@\n-            return dummyVector().ldOp(memory, offset, m, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, m, f);\n@@ -3889,0 +4018,1 @@\n+\n@@ -3891,1 +4021,1 @@\n-        LongVector ldLongOp(MemorySegment memory, long offset,\n+        LongVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -3893,1 +4023,1 @@\n-            return dummyVector().ldLongOp(memory, offset, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, f);\n@@ -3898,1 +4028,1 @@\n-        LongVector ldLongOp(MemorySegment memory, long offset,\n+        LongVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -3901,1 +4031,1 @@\n-            return dummyVector().ldLongOp(memory, offset, m, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, m, f);\n@@ -3906,2 +4036,2 @@\n-        <M> void stOp(M memory, int offset, FStOp<M> f) {\n-            dummyVector().stOp(memory, offset, f);\n+        <M> void stOpMF(M memory, int offset, FStOp<M> f) {\n+            dummyVectorMF().stOpMF(memory, offset, f);\n@@ -3912,2 +4042,2 @@\n-        <M> void stOp(M memory, int offset,\n-                      AbstractMask<Long> m,\n+        <M> void stOpMF(M memory, int offset,\n+                     AbstractMask<Long> m,\n@@ -3915,1 +4045,1 @@\n-            dummyVector().stOp(memory, offset, m, f);\n+            dummyVectorMF().stOpMF(memory, offset, m, f);\n@@ -3918,0 +4048,1 @@\n+\n@@ -3920,2 +4051,2 @@\n-        void stLongOp(MemorySegment memory, long offset, FStLongOp f) {\n-            dummyVector().stLongOp(memory, offset, f);\n+        void stLongOpMF(MemorySegment memory, long offset, FStLongOp f) {\n+            dummyVectorMF().stLongOpMF(memory, offset, f);\n@@ -3926,1 +4057,1 @@\n-        void stLongOp(MemorySegment memory, long offset,\n+        void stLongOpMF(MemorySegment memory, long offset,\n@@ -3929,1 +4060,1 @@\n-            dummyVector().stLongOp(memory, offset, m, f);\n+            dummyVectorMF().stLongOpMF(memory, offset, m, f);\n@@ -3944,1 +4075,1 @@\n-                return LongMaxVector.ZERO;\n+               return LongMaxVector.ZERO;\n@@ -3982,0 +4113,10 @@\n+\n+        @Override\n+        Object iotaArray() {\n+            int laneCount = laneCount();\n+            long [] init = new long[laneCount];\n+            for (int i = 0; i < laneCount; i++) {\n+                init[i] = (long)i;\n+            }\n+           return init;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":379,"deletions":238,"binary":false,"changes":617,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Short128Vector extends ShortVector {\n+value class Short128Vector extends ShortVector {\n@@ -57,2 +59,7 @@\n-    Short128Vector(short[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128S.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF128S payload;\n+\n+    Short128Vector(Object value) {\n+        this.payload = (VectorPayloadMF128S) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Short128Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Short128Vector(Object v) {\n-        this((short[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Short128Vector ZERO = new Short128Vector(new short[VLENGTH]);\n-    static final Short128Vector IOTA = new Short128Vector(VSPECIES.iotaArray());\n+    static final Short128Vector ZERO = new Short128Vector(VectorPayloadMF.newVectorInstanceFactory(short.class, 8, false));\n+    static final Short128Vector IOTA = new Short128Vector(VectorPayloadMF.createVectPayloadInstanceS(VLENGTH, (short[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    short[] vec() {\n-        return (short[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Short128Mask maskFromArray(boolean[] bits) {\n-        return new Short128Mask(bits);\n+    Short128Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Short128Mask(payload);\n@@ -157,1 +159,1 @@\n-    Short128Shuffle shuffleFromBytes(byte[] reorder) { return new Short128Shuffle(reorder); }\n+    Short128Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Short128Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Short128Vector vectorFactory(short[] vec) {\n+    Short128Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Short128Vector uOp(FUnOp f) {\n-        return (Short128Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Short128Vector uOpMF(FUnOp f) {\n+        return (Short128Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Short128Vector uOp(VectorMask<Short> m, FUnOp f) {\n+    Short128Vector uOpMF(VectorMask<Short> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Short128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Short128Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Short128Vector bOp(Vector<Short> v, FBinOp f) {\n-        return (Short128Vector) super.bOpTemplate((Short128Vector)v, f);  \/\/ specialize\n+    Short128Vector bOpMF(Vector<Short> v, FBinOp f) {\n+        return (Short128Vector) super.bOpTemplateMF((Short128Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Short128Vector bOp(Vector<Short> v,\n+    Short128Vector bOpMF(Vector<Short> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Short128Vector)v, (Short128Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Short128Vector)v, (Short128Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Short128Vector tOp(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n+    Short128Vector tOpMF(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Short128Vector)v1, (Short128Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Short128Vector)v1, (Short128Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Short128Vector tOp(Vector<Short> v1, Vector<Short> v2,\n+    Short128Vector tOpMF(Vector<Short> v1, Vector<Short> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Short128Vector)v1, (Short128Vector)v2,\n-                              (Short128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Short128Vector)v1, (Short128Vector)v2,\n+                                (Short128Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    short rOp(short v, VectorMask<Short> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    short rOpMF(short v, VectorMask<Short> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -528,6 +530,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    short[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getShort(vecpayload, start_offset + ix * Short.BYTES);\n+                             });\n@@ -553,1 +556,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -557,3 +560,6 @@\n-                                    short[] res = v.vec().clone();\n-                                    res[ix] = (short)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putShort(tpayload, start_offset + ix * Short.BYTES, (short)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -565,1 +571,1 @@\n-    static final class Short128Mask extends AbstractMask<Short> {\n+    static final value class Short128Mask extends AbstractMask<Short> {\n@@ -569,2 +575,2 @@\n-        Short128Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Short128Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64Z) payload;\n@@ -573,3 +579,2 @@\n-        Short128Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64Z payload;\n@@ -577,2 +582,2 @@\n-        Short128Mask(boolean val) {\n-            super(prepare(val));\n+        Short128Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(payload, offset, VSPECIES));\n@@ -581,6 +586,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Short128Mask(boolean val) {\n+            this.payload = (VectorPayloadMF64Z)(prepare(val, VSPECIES));\n@@ -589,5 +590,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -605,22 +601,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Short128Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Short128Mask(res);\n-        }\n-\n-        Short128Mask bOp(VectorMask<Short> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Short128Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Short128Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -637,27 +613,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -684,1 +633,1 @@\n-            return (Short128Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Short128Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -697,3 +646,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Short128Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short128Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short128Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -707,3 +656,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Short128Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short128Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short128Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -717,3 +666,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short128Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short128Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short128Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -728,1 +677,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Short128Mask) m).trueCountHelper());\n@@ -735,1 +684,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Short128Mask) m).firstTrueHelper());\n@@ -742,1 +691,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Short128Mask) m).lastTrueHelper());\n@@ -752,1 +701,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Short128Mask) m).toLongHelper());\n@@ -762,1 +711,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Short128Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -772,1 +721,1 @@\n-                                         (m, __) -> anyTrueHelper(((Short128Mask)m).getBits()));\n+                                         (m, __) -> ((Short128Mask) m).anyTrueHelper());\n@@ -780,1 +729,1 @@\n-                                         (m, __) -> allTrueHelper(((Short128Mask)m).getBits()));\n+                                         (m, __) -> ((Short128Mask) m).allTrueHelper());\n@@ -797,1 +746,1 @@\n-    static final class Short128Shuffle extends AbstractShuffle<Short> {\n+    static final value class Short128Shuffle extends AbstractShuffle<Short> {\n@@ -801,3 +750,2 @@\n-        Short128Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF64B payload;\n@@ -805,2 +753,4 @@\n-        public Short128Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short128Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF64B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -809,2 +759,2 @@\n-        public Short128Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Short128Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, i, VSPECIES));\n@@ -814,1 +764,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF64B)(prepare(fn, VSPECIES));\n+        }\n+        public Short128Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF64B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -851,6 +812,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -858,0 +822,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Short256Vector extends ShortVector {\n+value class Short256Vector extends ShortVector {\n@@ -57,2 +59,7 @@\n-    Short256Vector(short[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256S.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF256S payload;\n+\n+    Short256Vector(Object value) {\n+        this.payload = (VectorPayloadMF256S) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Short256Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Short256Vector(Object v) {\n-        this((short[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Short256Vector ZERO = new Short256Vector(new short[VLENGTH]);\n-    static final Short256Vector IOTA = new Short256Vector(VSPECIES.iotaArray());\n+    static final Short256Vector ZERO = new Short256Vector(VectorPayloadMF.newVectorInstanceFactory(short.class, 16, false));\n+    static final Short256Vector IOTA = new Short256Vector(VectorPayloadMF.createVectPayloadInstanceS(VLENGTH, (short[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    short[] vec() {\n-        return (short[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Short256Mask maskFromArray(boolean[] bits) {\n-        return new Short256Mask(bits);\n+    Short256Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Short256Mask(payload);\n@@ -157,1 +159,1 @@\n-    Short256Shuffle shuffleFromBytes(byte[] reorder) { return new Short256Shuffle(reorder); }\n+    Short256Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Short256Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Short256Vector vectorFactory(short[] vec) {\n+    Short256Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Short256Vector uOp(FUnOp f) {\n-        return (Short256Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Short256Vector uOpMF(FUnOp f) {\n+        return (Short256Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Short256Vector uOp(VectorMask<Short> m, FUnOp f) {\n+    Short256Vector uOpMF(VectorMask<Short> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Short256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Short256Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Short256Vector bOp(Vector<Short> v, FBinOp f) {\n-        return (Short256Vector) super.bOpTemplate((Short256Vector)v, f);  \/\/ specialize\n+    Short256Vector bOpMF(Vector<Short> v, FBinOp f) {\n+        return (Short256Vector) super.bOpTemplateMF((Short256Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Short256Vector bOp(Vector<Short> v,\n+    Short256Vector bOpMF(Vector<Short> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Short256Vector)v, (Short256Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Short256Vector)v, (Short256Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Short256Vector tOp(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n+    Short256Vector tOpMF(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Short256Vector)v1, (Short256Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Short256Vector)v1, (Short256Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Short256Vector tOp(Vector<Short> v1, Vector<Short> v2,\n+    Short256Vector tOpMF(Vector<Short> v1, Vector<Short> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Short256Vector)v1, (Short256Vector)v2,\n-                              (Short256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Short256Vector)v1, (Short256Vector)v2,\n+                                (Short256Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    short rOp(short v, VectorMask<Short> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    short rOpMF(short v, VectorMask<Short> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -536,6 +538,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    short[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getShort(vecpayload, start_offset + ix * Short.BYTES);\n+                             });\n@@ -569,1 +572,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -573,3 +576,6 @@\n-                                    short[] res = v.vec().clone();\n-                                    res[ix] = (short)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putShort(tpayload, start_offset + ix * Short.BYTES, (short)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -581,1 +587,1 @@\n-    static final class Short256Mask extends AbstractMask<Short> {\n+    static final value class Short256Mask extends AbstractMask<Short> {\n@@ -585,2 +591,2 @@\n-        Short256Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Short256Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF128Z) payload;\n@@ -589,3 +595,2 @@\n-        Short256Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF128Z payload;\n@@ -593,2 +598,2 @@\n-        Short256Mask(boolean val) {\n-            super(prepare(val));\n+        Short256Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF128Z)(prepare(payload, offset, VSPECIES));\n@@ -597,6 +602,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Short256Mask(boolean val) {\n+            this.payload = (VectorPayloadMF128Z)(prepare(val, VSPECIES));\n@@ -605,5 +606,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -621,22 +617,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Short256Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Short256Mask(res);\n-        }\n-\n-        Short256Mask bOp(VectorMask<Short> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Short256Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Short256Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -653,27 +629,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -700,1 +649,1 @@\n-            return (Short256Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Short256Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -713,3 +662,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Short256Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short256Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short256Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -723,3 +672,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Short256Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short256Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short256Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -733,3 +682,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short256Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short256Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short256Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -744,1 +693,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Short256Mask) m).trueCountHelper());\n@@ -751,1 +700,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Short256Mask) m).firstTrueHelper());\n@@ -758,1 +707,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Short256Mask) m).lastTrueHelper());\n@@ -768,1 +717,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Short256Mask) m).toLongHelper());\n@@ -778,1 +727,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Short256Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -788,1 +737,1 @@\n-                                         (m, __) -> anyTrueHelper(((Short256Mask)m).getBits()));\n+                                         (m, __) -> ((Short256Mask) m).anyTrueHelper());\n@@ -796,1 +745,1 @@\n-                                         (m, __) -> allTrueHelper(((Short256Mask)m).getBits()));\n+                                         (m, __) -> ((Short256Mask) m).allTrueHelper());\n@@ -813,1 +762,1 @@\n-    static final class Short256Shuffle extends AbstractShuffle<Short> {\n+    static final value class Short256Shuffle extends AbstractShuffle<Short> {\n@@ -817,3 +766,2 @@\n-        Short256Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF128B payload;\n@@ -821,2 +769,4 @@\n-        public Short256Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short256Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF128B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -825,2 +775,2 @@\n-        public Short256Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Short256Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF128B)(prepare(indexes, i, VSPECIES));\n@@ -830,1 +780,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF128B)(prepare(fn, VSPECIES));\n+        }\n+        public Short256Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF128B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -867,6 +828,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -874,0 +838,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Short512Vector extends ShortVector {\n+value class Short512Vector extends ShortVector {\n@@ -57,2 +59,7 @@\n-    Short512Vector(short[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512S.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF512S payload;\n+\n+    Short512Vector(Object value) {\n+        this.payload = (VectorPayloadMF512S) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Short512Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Short512Vector(Object v) {\n-        this((short[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Short512Vector ZERO = new Short512Vector(new short[VLENGTH]);\n-    static final Short512Vector IOTA = new Short512Vector(VSPECIES.iotaArray());\n+    static final Short512Vector ZERO = new Short512Vector(VectorPayloadMF.newVectorInstanceFactory(short.class, 32, false));\n+    static final Short512Vector IOTA = new Short512Vector(VectorPayloadMF.createVectPayloadInstanceS(VLENGTH, (short[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    short[] vec() {\n-        return (short[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Short512Mask maskFromArray(boolean[] bits) {\n-        return new Short512Mask(bits);\n+    Short512Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Short512Mask(payload);\n@@ -157,1 +159,1 @@\n-    Short512Shuffle shuffleFromBytes(byte[] reorder) { return new Short512Shuffle(reorder); }\n+    Short512Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Short512Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Short512Vector vectorFactory(short[] vec) {\n+    Short512Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Short512Vector uOp(FUnOp f) {\n-        return (Short512Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Short512Vector uOpMF(FUnOp f) {\n+        return (Short512Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Short512Vector uOp(VectorMask<Short> m, FUnOp f) {\n+    Short512Vector uOpMF(VectorMask<Short> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Short512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Short512Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Short512Vector bOp(Vector<Short> v, FBinOp f) {\n-        return (Short512Vector) super.bOpTemplate((Short512Vector)v, f);  \/\/ specialize\n+    Short512Vector bOpMF(Vector<Short> v, FBinOp f) {\n+        return (Short512Vector) super.bOpTemplateMF((Short512Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Short512Vector bOp(Vector<Short> v,\n+    Short512Vector bOpMF(Vector<Short> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Short512Vector)v, (Short512Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Short512Vector)v, (Short512Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Short512Vector tOp(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n+    Short512Vector tOpMF(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Short512Vector)v1, (Short512Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Short512Vector)v1, (Short512Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Short512Vector tOp(Vector<Short> v1, Vector<Short> v2,\n+    Short512Vector tOpMF(Vector<Short> v1, Vector<Short> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Short512Vector)v1, (Short512Vector)v2,\n-                              (Short512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Short512Vector)v1, (Short512Vector)v2,\n+                                (Short512Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    short rOp(short v, VectorMask<Short> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    short rOpMF(short v, VectorMask<Short> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -552,6 +554,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    short[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getShort(vecpayload, start_offset + ix * Short.BYTES);\n+                             });\n@@ -601,1 +604,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -605,3 +608,6 @@\n-                                    short[] res = v.vec().clone();\n-                                    res[ix] = (short)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putShort(tpayload, start_offset + ix * Short.BYTES, (short)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -613,1 +619,1 @@\n-    static final class Short512Mask extends AbstractMask<Short> {\n+    static final value class Short512Mask extends AbstractMask<Short> {\n@@ -617,2 +623,2 @@\n-        Short512Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Short512Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF256Z) payload;\n@@ -621,3 +627,2 @@\n-        Short512Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF256Z payload;\n@@ -625,2 +630,2 @@\n-        Short512Mask(boolean val) {\n-            super(prepare(val));\n+        Short512Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF256Z)(prepare(payload, offset, VSPECIES));\n@@ -629,6 +634,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Short512Mask(boolean val) {\n+            this.payload = (VectorPayloadMF256Z)(prepare(val, VSPECIES));\n@@ -637,5 +638,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -653,22 +649,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Short512Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Short512Mask(res);\n-        }\n-\n-        Short512Mask bOp(VectorMask<Short> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Short512Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Short512Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -685,27 +661,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -732,1 +681,1 @@\n-            return (Short512Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Short512Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -745,3 +694,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Short512Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short512Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short512Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -755,3 +704,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Short512Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short512Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short512Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -765,3 +714,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short512Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short512Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short512Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -776,1 +725,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Short512Mask) m).trueCountHelper());\n@@ -783,1 +732,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Short512Mask) m).firstTrueHelper());\n@@ -790,1 +739,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Short512Mask) m).lastTrueHelper());\n@@ -800,1 +749,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Short512Mask) m).toLongHelper());\n@@ -810,1 +759,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Short512Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -820,1 +769,1 @@\n-                                         (m, __) -> anyTrueHelper(((Short512Mask)m).getBits()));\n+                                         (m, __) -> ((Short512Mask) m).anyTrueHelper());\n@@ -828,1 +777,1 @@\n-                                         (m, __) -> allTrueHelper(((Short512Mask)m).getBits()));\n+                                         (m, __) -> ((Short512Mask) m).allTrueHelper());\n@@ -845,1 +794,1 @@\n-    static final class Short512Shuffle extends AbstractShuffle<Short> {\n+    static final value class Short512Shuffle extends AbstractShuffle<Short> {\n@@ -849,3 +798,2 @@\n-        Short512Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF256B payload;\n@@ -853,2 +801,4 @@\n-        public Short512Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short512Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF256B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -857,2 +807,2 @@\n-        public Short512Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Short512Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF256B)(prepare(indexes, i, VSPECIES));\n@@ -862,1 +812,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF256B)(prepare(fn, VSPECIES));\n+        }\n+        public Short512Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF256B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -899,6 +860,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -906,0 +870,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class Short64Vector extends ShortVector {\n+value class Short64Vector extends ShortVector {\n@@ -57,2 +59,7 @@\n-    Short64Vector(short[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64S.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF64S payload;\n+\n+    Short64Vector(Object value) {\n+        this.payload = (VectorPayloadMF64S) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as Short64Vector::new,\n-    \/\/ stored into species.vectorFactory.\n-    Short64Vector(Object v) {\n-        this((short[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final Short64Vector ZERO = new Short64Vector(new short[VLENGTH]);\n-    static final Short64Vector IOTA = new Short64Vector(VSPECIES.iotaArray());\n+    static final Short64Vector ZERO = new Short64Vector(VectorPayloadMF.newVectorInstanceFactory(short.class, 4, false));\n+    static final Short64Vector IOTA = new Short64Vector(VectorPayloadMF.createVectPayloadInstanceS(VLENGTH, (short[])(VSPECIES.iotaArray()), false));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    short[] vec() {\n-        return (short[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    Short64Mask maskFromArray(boolean[] bits) {\n-        return new Short64Mask(bits);\n+    Short64Mask maskFromPayload(VectorPayloadMF payload) {\n+        return new Short64Mask(payload);\n@@ -157,1 +159,1 @@\n-    Short64Shuffle shuffleFromBytes(byte[] reorder) { return new Short64Shuffle(reorder); }\n+    Short64Shuffle shuffleFromBytes(VectorPayloadMF indexes) { return new Short64Shuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    Short64Vector vectorFactory(short[] vec) {\n+    Short64Vector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    Short64Vector uOp(FUnOp f) {\n-        return (Short64Vector) super.uOpTemplate(f);  \/\/ specialize\n+    Short64Vector uOpMF(FUnOp f) {\n+        return (Short64Vector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    Short64Vector uOp(VectorMask<Short> m, FUnOp f) {\n+    Short64Vector uOpMF(VectorMask<Short> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((Short64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((Short64Mask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    Short64Vector bOp(Vector<Short> v, FBinOp f) {\n-        return (Short64Vector) super.bOpTemplate((Short64Vector)v, f);  \/\/ specialize\n+    Short64Vector bOpMF(Vector<Short> v, FBinOp f) {\n+        return (Short64Vector) super.bOpTemplateMF((Short64Vector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    Short64Vector bOp(Vector<Short> v,\n+    Short64Vector bOpMF(Vector<Short> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((Short64Vector)v, (Short64Mask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((Short64Vector)v, (Short64Mask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    Short64Vector tOp(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n+    Short64Vector tOpMF(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((Short64Vector)v1, (Short64Vector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((Short64Vector)v1, (Short64Vector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    Short64Vector tOp(Vector<Short> v1, Vector<Short> v2,\n+    Short64Vector tOpMF(Vector<Short> v1, Vector<Short> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((Short64Vector)v1, (Short64Vector)v2,\n-                              (Short64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((Short64Vector)v1, (Short64Vector)v2,\n+                                (Short64Mask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    short rOp(short v, VectorMask<Short> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    short rOpMF(short v, VectorMask<Short> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -524,6 +526,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    short[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getShort(vecpayload, start_offset + ix * Short.BYTES);\n+                             });\n@@ -545,1 +548,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -549,3 +552,6 @@\n-                                    short[] res = v.vec().clone();\n-                                    res[ix] = (short)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putShort(tpayload, start_offset + ix * Short.BYTES, (short)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -557,1 +563,1 @@\n-    static final class Short64Mask extends AbstractMask<Short> {\n+    static final value class Short64Mask extends AbstractMask<Short> {\n@@ -561,2 +567,2 @@\n-        Short64Mask(boolean[] bits) {\n-            this(bits, 0);\n+        Short64Mask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32Z) payload;\n@@ -565,3 +571,2 @@\n-        Short64Mask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32Z payload;\n@@ -569,2 +574,2 @@\n-        Short64Mask(boolean val) {\n-            super(prepare(val));\n+        Short64Mask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(payload, offset, VSPECIES));\n@@ -573,6 +578,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        Short64Mask(boolean val) {\n+            this.payload = (VectorPayloadMF32Z)(prepare(val, VSPECIES));\n@@ -581,5 +582,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -597,22 +593,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        Short64Mask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new Short64Mask(res);\n-        }\n-\n-        Short64Mask bOp(VectorMask<Short> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((Short64Mask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new Short64Mask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -629,27 +605,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -676,1 +625,1 @@\n-            return (Short64Mask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Short64Mask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -689,3 +638,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Short64Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short64Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short64Mask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -699,3 +648,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Short64Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short64Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short64Mask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -709,3 +658,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short64Mask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short64Mask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (Short64Mask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -720,1 +669,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((Short64Mask) m).trueCountHelper());\n@@ -727,1 +676,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((Short64Mask) m).firstTrueHelper());\n@@ -734,1 +683,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((Short64Mask) m).lastTrueHelper());\n@@ -744,1 +693,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((Short64Mask) m).toLongHelper());\n@@ -754,1 +703,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((Short64Mask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -764,1 +713,1 @@\n-                                         (m, __) -> anyTrueHelper(((Short64Mask)m).getBits()));\n+                                         (m, __) -> ((Short64Mask) m).anyTrueHelper());\n@@ -772,1 +721,1 @@\n-                                         (m, __) -> allTrueHelper(((Short64Mask)m).getBits()));\n+                                         (m, __) -> ((Short64Mask) m).allTrueHelper());\n@@ -789,1 +738,1 @@\n-    static final class Short64Shuffle extends AbstractShuffle<Short> {\n+    static final value class Short64Shuffle extends AbstractShuffle<Short> {\n@@ -793,3 +742,2 @@\n-        Short64Shuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMF32B payload;\n@@ -797,2 +745,4 @@\n-        public Short64Shuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        Short64Shuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF32B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -801,2 +751,2 @@\n-        public Short64Shuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public Short64Shuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, i, VSPECIES));\n@@ -806,1 +756,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF32B)(prepare(fn, VSPECIES));\n+        }\n+        public Short64Shuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMF32B)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -843,6 +804,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -850,0 +814,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class ShortMaxVector extends ShortVector {\n+value class ShortMaxVector extends ShortVector {\n@@ -57,2 +59,7 @@\n-    ShortMaxVector(short[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMFMaxS.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMFMaxS payload;\n+\n+    ShortMaxVector(Object value) {\n+        this.payload = (VectorPayloadMFMaxS) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as ShortMaxVector::new,\n-    \/\/ stored into species.vectorFactory.\n-    ShortMaxVector(Object v) {\n-        this((short[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,2 @@\n-    static final ShortMaxVector ZERO = new ShortMaxVector(new short[VLENGTH]);\n-    static final ShortMaxVector IOTA = new ShortMaxVector(VSPECIES.iotaArray());\n+    static final ShortMaxVector ZERO = new ShortMaxVector(VectorPayloadMF.newVectorInstanceFactory(short.class, 0, true));\n+    static final ShortMaxVector IOTA = new ShortMaxVector(VectorPayloadMF.createVectPayloadInstanceS(VLENGTH, (short[])(VSPECIES.iotaArray()), true));\n@@ -74,1 +81,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +120,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    short[] vec() {\n-        return (short[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -136,2 +138,2 @@\n-    ShortMaxMask maskFromArray(boolean[] bits) {\n-        return new ShortMaxMask(bits);\n+    ShortMaxMask maskFromPayload(VectorPayloadMF payload) {\n+        return new ShortMaxMask(payload);\n@@ -157,1 +159,1 @@\n-    ShortMaxShuffle shuffleFromBytes(byte[] reorder) { return new ShortMaxShuffle(reorder); }\n+    ShortMaxShuffle shuffleFromBytes(VectorPayloadMF indexes) { return new ShortMaxShuffle(indexes); }\n@@ -170,1 +172,1 @@\n-    ShortMaxVector vectorFactory(short[] vec) {\n+    ShortMaxVector vectorFactory(VectorPayloadMF vec) {\n@@ -190,2 +192,2 @@\n-    ShortMaxVector uOp(FUnOp f) {\n-        return (ShortMaxVector) super.uOpTemplate(f);  \/\/ specialize\n+    ShortMaxVector uOpMF(FUnOp f) {\n+        return (ShortMaxVector) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -196,1 +198,1 @@\n-    ShortMaxVector uOp(VectorMask<Short> m, FUnOp f) {\n+    ShortMaxVector uOpMF(VectorMask<Short> m, FUnOp f) {\n@@ -198,1 +200,1 @@\n-            super.uOpTemplate((ShortMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplateMF((ShortMaxMask)m, f);  \/\/ specialize\n@@ -205,2 +207,2 @@\n-    ShortMaxVector bOp(Vector<Short> v, FBinOp f) {\n-        return (ShortMaxVector) super.bOpTemplate((ShortMaxVector)v, f);  \/\/ specialize\n+    ShortMaxVector bOpMF(Vector<Short> v, FBinOp f) {\n+        return (ShortMaxVector) super.bOpTemplateMF((ShortMaxVector)v, f);  \/\/ specialize\n@@ -211,1 +213,1 @@\n-    ShortMaxVector bOp(Vector<Short> v,\n+    ShortMaxVector bOpMF(Vector<Short> v,\n@@ -214,2 +216,2 @@\n-            super.bOpTemplate((ShortMaxVector)v, (ShortMaxMask)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF((ShortMaxVector)v, (ShortMaxMask)m,\n+                                f);  \/\/ specialize\n@@ -222,1 +224,1 @@\n-    ShortMaxVector tOp(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n+    ShortMaxVector tOpMF(Vector<Short> v1, Vector<Short> v2, FTriOp f) {\n@@ -224,2 +226,2 @@\n-            super.tOpTemplate((ShortMaxVector)v1, (ShortMaxVector)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF((ShortMaxVector)v1, (ShortMaxVector)v2,\n+                                f);  \/\/ specialize\n@@ -230,1 +232,1 @@\n-    ShortMaxVector tOp(Vector<Short> v1, Vector<Short> v2,\n+    ShortMaxVector tOpMF(Vector<Short> v1, Vector<Short> v2,\n@@ -233,2 +235,2 @@\n-            super.tOpTemplate((ShortMaxVector)v1, (ShortMaxVector)v2,\n-                              (ShortMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplateMF((ShortMaxVector)v1, (ShortMaxVector)v2,\n+                                (ShortMaxMask)m, f);  \/\/ specialize\n@@ -239,2 +241,2 @@\n-    short rOp(short v, VectorMask<Short> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    short rOpMF(short v, VectorMask<Short> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -521,6 +523,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    short[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.getShort(vecpayload, start_offset + ix * Short.BYTES);\n+                             });\n@@ -539,1 +542,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -543,3 +546,6 @@\n-                                    short[] res = v.vec().clone();\n-                                    res[ix] = (short)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.putShort(tpayload, start_offset + ix * Short.BYTES, (short)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -551,1 +557,1 @@\n-    static final class ShortMaxMask extends AbstractMask<Short> {\n+    static final value class ShortMaxMask extends AbstractMask<Short> {\n@@ -555,2 +561,2 @@\n-        ShortMaxMask(boolean[] bits) {\n-            this(bits, 0);\n+        ShortMaxMask(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxSZ) payload;\n@@ -559,3 +565,2 @@\n-        ShortMaxMask(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxSZ payload;\n@@ -563,2 +568,2 @@\n-        ShortMaxMask(boolean val) {\n-            super(prepare(val));\n+        ShortMaxMask(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMFMaxSZ)(prepare(payload, offset, VSPECIES));\n@@ -567,6 +572,2 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        ShortMaxMask(boolean val) {\n+            this.payload = (VectorPayloadMFMaxSZ)(prepare(val, VSPECIES));\n@@ -575,5 +576,0 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n-        }\n@@ -591,22 +587,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        ShortMaxMask uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new ShortMaxMask(res);\n-        }\n-\n-        ShortMaxMask bOp(VectorMask<Short> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = ((ShortMaxMask)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new ShortMaxMask(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -623,27 +599,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -670,1 +619,1 @@\n-            return (ShortMaxMask)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (ShortMaxMask) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -683,3 +632,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, ShortMaxMask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, ShortMaxMask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (ShortMaxMask) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -693,3 +642,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, ShortMaxMask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, ShortMaxMask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (ShortMaxMask) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -703,3 +652,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, ShortMaxMask.class, null, short.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, ShortMaxMask.class, null,\n+                                          short.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> (ShortMaxMask) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -714,1 +663,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> ((ShortMaxMask) m).trueCountHelper());\n@@ -721,1 +670,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> ((ShortMaxMask) m).firstTrueHelper());\n@@ -728,1 +677,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> ((ShortMaxMask) m).lastTrueHelper());\n@@ -738,1 +687,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> ((ShortMaxMask) m).toLongHelper());\n@@ -748,1 +697,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> (((ShortMaxMask) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -758,1 +707,1 @@\n-                                         (m, __) -> anyTrueHelper(((ShortMaxMask)m).getBits()));\n+                                         (m, __) -> ((ShortMaxMask) m).anyTrueHelper());\n@@ -766,1 +715,1 @@\n-                                         (m, __) -> allTrueHelper(((ShortMaxMask)m).getBits()));\n+                                         (m, __) -> ((ShortMaxMask) m).allTrueHelper());\n@@ -783,1 +732,1 @@\n-    static final class ShortMaxShuffle extends AbstractShuffle<Short> {\n+    static final value class ShortMaxShuffle extends AbstractShuffle<Short> {\n@@ -787,3 +736,2 @@\n-        ShortMaxShuffle(byte[] reorder) {\n-            super(VLENGTH, reorder);\n-        }\n+        @NullRestricted\n+        private final VectorPayloadMFMaxSB payload;\n@@ -791,2 +739,4 @@\n-        public ShortMaxShuffle(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        ShortMaxShuffle(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMFMaxSB) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -795,2 +745,2 @@\n-        public ShortMaxShuffle(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public ShortMaxShuffle(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMFMaxSB)(prepare(indexes, i, VSPECIES));\n@@ -800,1 +750,12 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMFMaxSB)(prepare(fn, VSPECIES));\n+        }\n+        public ShortMaxShuffle(int[] indexes) {\n+            this.payload = (VectorPayloadMFMaxSB)(prepare(indexes, 0, VSPECIES));\n+        }\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -837,6 +798,9 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, true);\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -844,0 +808,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":113,"deletions":148,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -51,6 +51,2 @@\n-@SuppressWarnings(\"cast\")  \/\/ warning: redundant cast\n-public abstract class ShortVector extends AbstractVector<Short> {\n-\n-    ShortVector(short[] vec) {\n-        super(vec);\n-    }\n+@SuppressWarnings({\"cast\"})  \/\/ warning: redundant cast\n+public abstract value class ShortVector extends AbstractVector<Short> {\n@@ -59,0 +55,4 @@\n+    \/**\n+     * Default Constructor for abstract vector.\n+     *\/\n+    public ShortVector() {}\n@@ -96,3 +96,0 @@\n-    \/*package-private*\/\n-    abstract short[] vec();\n-\n@@ -103,1 +100,1 @@\n-     * It is an error if the array is aliased elsewhere.\n+     * It is an error if the vec is aliased elsewhere.\n@@ -106,1 +103,1 @@\n-    abstract ShortVector vectorFactory(short[] vec);\n+    abstract ShortVector vectorFactory(VectorPayloadMF vec);\n@@ -115,2 +112,2 @@\n-    AbstractMask<Short> maskFactory(boolean[] bits) {\n-        return vspecies().maskFactory(bits);\n+    AbstractMask<Short> maskFactory(VectorPayloadMF payload) {\n+        return vspecies().maskFactory(payload);\n@@ -127,1 +124,1 @@\n-    ShortVector vOp(FVOp f) {\n+    ShortVector vOpMF(FVOp f) {\n@@ -132,1 +129,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -137,1 +135,1 @@\n-    ShortVector vOp(VectorMask<Short> m, FVOp f) {\n+    ShortVector vOpMF(VectorMask<Short> m, FVOp f) {\n@@ -139,1 +137,2 @@\n-        boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n+        VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+        long mOffset = mbits.multiFieldOffset();\n@@ -141,1 +140,1 @@\n-            if (mbits[i]) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n@@ -145,1 +144,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -157,1 +157,1 @@\n-    ShortVector uOp(FUnOp f);\n+    ShortVector uOpMF(FUnOp f);\n@@ -160,5 +160,8 @@\n-    ShortVector uOpTemplate(FUnOp f) {\n-        short[] vec = vec();\n-        short[] res = new short[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec[i]);\n+    ShortVector uOpTemplateMF(FUnOp f) {\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            short v = U.getShort(vec, vOffset + i * Short.BYTES);\n+            U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(i, v));\n@@ -166,1 +169,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -171,1 +175,1 @@\n-    ShortVector uOp(VectorMask<Short> m,\n+    ShortVector uOpMF(VectorMask<Short> m,\n@@ -175,1 +179,1 @@\n-    ShortVector uOpTemplate(VectorMask<Short> m,\n+    ShortVector uOpTemplateMF(VectorMask<Short> m,\n@@ -178,1 +182,1 @@\n-            return uOpTemplate(f);\n+            return uOpTemplateMF(f);\n@@ -180,5 +184,11 @@\n-        short[] vec = vec();\n-        short[] res = new short[length()];\n-        boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec[i]) : vec[i];\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                short v = U.getShort(vec, vOffset + i * Short.BYTES);\n+                U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(i, v));\n+            }\n@@ -186,1 +196,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -198,1 +209,1 @@\n-    ShortVector bOp(Vector<Short> o,\n+    ShortVector bOpMF(Vector<Short> o,\n@@ -202,1 +213,1 @@\n-    ShortVector bOpTemplate(Vector<Short> o,\n+    ShortVector bOpTemplateMF(Vector<Short> o,\n@@ -204,5 +215,9 @@\n-        short[] res = new short[length()];\n-        short[] vec1 = this.vec();\n-        short[] vec2 = ((ShortVector)o).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i]);\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((ShortVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            short v1 = U.getShort(vec1, vOffset + i * Short.BYTES);\n+            short v2 = U.getShort(vec2, vOffset + i * Short.BYTES);\n+            U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(i, v1, v2));\n@@ -210,1 +225,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -215,1 +231,1 @@\n-    ShortVector bOp(Vector<Short> o,\n+    ShortVector bOpMF(Vector<Short> o,\n@@ -220,1 +236,1 @@\n-    ShortVector bOpTemplate(Vector<Short> o,\n+    ShortVector bOpTemplateMF(Vector<Short> o,\n@@ -224,1 +240,1 @@\n-            return bOpTemplate(o, f);\n+            return bOpTemplateMF(o, f);\n@@ -226,6 +242,13 @@\n-        short[] res = new short[length()];\n-        short[] vec1 = this.vec();\n-        short[] vec2 = ((ShortVector)o).vec();\n-        boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((ShortVector)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                short v1 = U.getShort(vec1, vOffset + i * Short.BYTES);\n+                short v2 = U.getShort(vec2, vOffset + i * Short.BYTES);\n+                U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(i, v1, v2));\n+            }\n@@ -233,1 +256,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -245,1 +269,1 @@\n-    ShortVector tOp(Vector<Short> o1,\n+    ShortVector tOpMF(Vector<Short> o1,\n@@ -250,1 +274,1 @@\n-    ShortVector tOpTemplate(Vector<Short> o1,\n+    ShortVector tOpTemplateMF(Vector<Short> o1,\n@@ -253,6 +277,11 @@\n-        short[] res = new short[length()];\n-        short[] vec1 = this.vec();\n-        short[] vec2 = ((ShortVector)o1).vec();\n-        short[] vec3 = ((ShortVector)o2).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i], vec3[i]);\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((ShortVector)o1).vec();\n+        VectorPayloadMF vec3 = ((ShortVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            short v1 = U.getShort(vec1, vOffset + i * Short.BYTES);\n+            short v2 = U.getShort(vec2, vOffset + i * Short.BYTES);\n+            short v3 = U.getShort(vec3, vOffset + i * Short.BYTES);\n+            U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(i, v1, v2, v3));\n@@ -260,1 +289,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -265,1 +295,1 @@\n-    ShortVector tOp(Vector<Short> o1,\n+    ShortVector tOpMF(Vector<Short> o1,\n@@ -271,1 +301,1 @@\n-    ShortVector tOpTemplate(Vector<Short> o1,\n+    ShortVector tOpTemplateMF(Vector<Short> o1,\n@@ -276,1 +306,1 @@\n-            return tOpTemplate(o1, o2, f);\n+            return tOpTemplateMF(o1, o2, f);\n@@ -278,7 +308,15 @@\n-        short[] res = new short[length()];\n-        short[] vec1 = this.vec();\n-        short[] vec2 = ((ShortVector)o1).vec();\n-        short[] vec3 = ((ShortVector)o2).vec();\n-        boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i], vec3[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = ((ShortVector)o1).vec();\n+        VectorPayloadMF vec3 = ((ShortVector)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                short v1 = U.getShort(vec1, vOffset + i * Short.BYTES);\n+                short v2 = U.getShort(vec2, vOffset + i * Short.BYTES);\n+                short v3 = U.getShort(vec3, vOffset + i * Short.BYTES);\n+                U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(i, v1, v2, v3));\n+            }\n@@ -286,1 +324,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -293,1 +332,1 @@\n-    short rOp(short v, VectorMask<Short> m, FBinOp f);\n+    short rOpMF(short v, VectorMask<Short> m, FBinOp f);\n@@ -297,1 +336,1 @@\n-    short rOpTemplate(short v, VectorMask<Short> m, FBinOp f) {\n+    short rOpTemplateMF(short v, VectorMask<Short> m, FBinOp f) {\n@@ -299,1 +338,1 @@\n-            return rOpTemplate(v, f);\n+            return rOpTemplateMF(v, f);\n@@ -301,4 +340,8 @@\n-        short[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = mbits[i] ? f.apply(i, v, vec[i]) : v;\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            short v1 = U.getShort(vec, vOffset + i * Short.BYTES);\n+            v = U.getBoolean(mbits, mOffset + i) ? f.apply(i, v, v1) : v;\n@@ -311,4 +354,7 @@\n-    short rOpTemplate(short v, FBinOp f) {\n-        short[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = f.apply(i, v, vec[i]);\n+    short rOpTemplateMF(short v, FBinOp f) {\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            short v1 = U.getShort(vec, vOffset + i * Short.BYTES);\n+            v = f.apply(i, v, v1);\n@@ -329,1 +375,1 @@\n-    <M> ShortVector ldOp(M memory, int offset,\n+    <M> ShortVector ldOpMF(M memory, int offset,\n@@ -331,4 +377,8 @@\n-        \/\/dummy; no vec = vec();\n-        short[] res = new short[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                short.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(memory, offset, i));\n@@ -336,1 +386,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -342,1 +393,1 @@\n-    <M> ShortVector ldOp(M memory, int offset,\n+    <M> ShortVector ldOpMF(M memory, int offset,\n@@ -345,6 +396,10 @@\n-        \/\/short[] vec = vec();\n-        short[] res = new short[length()];\n-        boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(short.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(memory, offset, i));\n@@ -353,1 +408,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -364,1 +420,1 @@\n-    ShortVector ldLongOp(MemorySegment memory, long offset,\n+    ShortVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -366,4 +422,8 @@\n-        \/\/dummy; no vec = vec();\n-        short[] res = new short[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                short.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(memory, offset, i));\n@@ -371,1 +431,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -377,1 +438,1 @@\n-    ShortVector ldLongOp(MemorySegment memory, long offset,\n+    ShortVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -380,6 +441,10 @@\n-        \/\/short[] vec = vec();\n-        short[] res = new short[length()];\n-        boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory(short.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.putShort(tpayload, vOffset + i * Short.BYTES, f.apply(memory, offset, i));\n@@ -388,1 +453,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -402,1 +468,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -404,3 +470,5 @@\n-        short[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getShort(vec, vOffset + i * Short.BYTES));\n@@ -411,1 +479,1 @@\n-    @ForceInline\n+   @ForceInline\n@@ -413,1 +481,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -416,5 +484,8 @@\n-        short[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getShort(vec, vOffset + i * Short.BYTES));\n@@ -425,0 +496,1 @@\n+\n@@ -432,1 +504,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -434,3 +506,5 @@\n-        short[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.getShort(vec, vOffset + i * Short.BYTES));\n@@ -443,1 +517,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -446,5 +520,8 @@\n-        short[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.getShort(vec, vOffset + i * Short.BYTES));\n@@ -469,1 +546,1 @@\n-    AbstractMask<Short> bTest(int cond,\n+    AbstractMask<Short> bTestMF(int cond,\n@@ -472,5 +549,12 @@\n-        short[] vec1 = vec();\n-        short[] vec2 = ((ShortVector)o).vec();\n-        boolean[] bits = new boolean[length()];\n-        for (int i = 0; i < length(); i++){\n-            bits[i] = f.apply(cond, i, vec1[i], vec2[i]);\n+        int length = vspecies().length();\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = ((ShortVector)o).vec();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF mbits = VectorPayloadMF.newMaskInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        mbits = U.makePrivateBuffer(mbits);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            short v1 = U.getShort(vec1, vOffset + i * Short.BYTES);\n+            short v2 = U.getShort(vec2, vOffset + i * Short.BYTES);\n+            U.putBoolean(mbits, mOffset + i, f.apply(cond, i, v1, v2));\n@@ -478,1 +562,2 @@\n-        return maskFactory(bits);\n+        mbits = U.finishPrivateBuffer(mbits);\n+        return maskFactory(mbits);\n@@ -565,1 +650,1 @@\n-                                ((bits_, s_) -> s_.rvOp(i -> bits_)));\n+                                ((bits_, s_) -> s_.rvOpMF(i -> bits_)));\n@@ -725,1 +810,1 @@\n-                    v0.uOp(m, (i, a) -> (short) -a);\n+                    v0.uOpMF(m, (i, a) -> (short) -a);\n@@ -727,1 +812,1 @@\n-                    v0.uOp(m, (i, a) -> (short) Math.abs(a));\n+                    v0.uOpMF(m, (i, a) -> (short) Math.abs(a));\n@@ -729,1 +814,1 @@\n-                    v0.uOp(m, (i, a) -> (short) bitCount(a));\n+                    v0.uOpMF(m, (i, a) -> (short) bitCount(a));\n@@ -731,1 +816,1 @@\n-                    v0.uOp(m, (i, a) -> (short) numberOfTrailingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> (short) numberOfTrailingZeros(a));\n@@ -733,1 +818,1 @@\n-                    v0.uOp(m, (i, a) -> (short) numberOfLeadingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> (short) numberOfLeadingZeros(a));\n@@ -735,1 +820,1 @@\n-                    v0.uOp(m, (i, a) -> reverse(a));\n+                    v0.uOpMF(m, (i, a) -> reverse(a));\n@@ -737,1 +822,1 @@\n-                    v0.uOp(m, (i, a) -> (short) Short.reverseBytes(a));\n+                    v0.uOpMF(m, (i, a) -> (short) Short.reverseBytes(a));\n@@ -787,1 +872,1 @@\n-            BIN_IMPL.find(op, opc, ShortVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, ShortVector::binaryOperationsMF));\n@@ -847,1 +932,35 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(a + b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a + b));\n+            case VECTOR_OP_SUB: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a - b));\n+            case VECTOR_OP_MUL: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a * b));\n+            case VECTOR_OP_DIV: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a \/ b));\n+            case VECTOR_OP_MAX: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)Math.max(a, b));\n+            case VECTOR_OP_MIN: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)Math.min(a, b));\n+            case VECTOR_OP_AND: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a & b));\n+            case VECTOR_OP_OR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a | b));\n+            case VECTOR_OP_XOR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a ^ b));\n+            case VECTOR_OP_LSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (short)(a << n));\n+            case VECTOR_OP_RSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (short)(a >> n));\n+            case VECTOR_OP_URSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (short)((a & LSHR_SETUP_MASK) >>> n));\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+            default: return null;\n+        }\n+    }\n+\n+    private static BinaryOperation<ShortVector, VectorMask<Short>> binaryOperationsMF(int opc_) {\n+        switch (opc_) {\n+            case VECTOR_OP_ADD: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a + b));\n@@ -849,1 +968,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(a - b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a - b));\n@@ -851,1 +970,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(a * b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a * b));\n@@ -853,1 +972,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(a \/ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a \/ b));\n@@ -855,1 +974,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)Math.max(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)Math.max(a, b));\n@@ -857,1 +976,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)Math.min(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)Math.min(a, b));\n@@ -859,1 +978,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(a & b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a & b));\n@@ -861,1 +980,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(a | b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a | b));\n@@ -863,1 +982,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> (short)(a ^ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> (short)(a ^ b));\n@@ -865,1 +984,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (short)(a << n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (short)(a << n));\n@@ -867,1 +986,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (short)(a >> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (short)(a >> n));\n@@ -869,1 +988,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (short)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> (short)((a & LSHR_SETUP_MASK) >>> n));\n@@ -871,1 +990,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -873,1 +992,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -878,0 +997,1 @@\n+\n@@ -1042,1 +1162,1 @@\n-                    v.uOp(m, (i, a) -> (short)(a << n));\n+                    v.uOpMF(m, (i, a) -> (short)(a << n));\n@@ -1044,1 +1164,1 @@\n-                    v.uOp(m, (i, a) -> (short)(a >> n));\n+                    v.uOpMF(m, (i, a) -> (short)(a >> n));\n@@ -1046,1 +1166,1 @@\n-                    v.uOp(m, (i, a) -> (short)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOpMF(m, (i, a) -> (short)((a & LSHR_SETUP_MASK) >>> n));\n@@ -1048,1 +1168,1 @@\n-                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateLeft(a, (int)n));\n@@ -1050,1 +1170,1 @@\n-                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateRight(a, (int)n));\n@@ -2050,1 +2170,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2072,1 +2192,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2201,1 +2321,1 @@\n-            (v0, v1, m_) -> v0.bOp(v1, m_, (i, a, b) -> b));\n+            (v0, v1, m_) -> v0.bOpMF(v1, m_, (i, a, b) -> b));\n@@ -2408,1 +2528,1 @@\n-            (v1, s_, m_) -> v1.uOp((i, a) -> {\n+            (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2440,1 +2560,1 @@\n-                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                   (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2468,1 +2588,1 @@\n-                (v0, s_, m_) -> v0.uOp((i, a) -> {\n+                (v0, s_, m_) -> v0.uOpMF((i, a) -> {\n@@ -2476,1 +2596,1 @@\n-                (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2818,1 +2938,1 @@\n-                    toBits(v.rOp((short)0, m, (i, a, b) -> (short)(a + b)));\n+                    toBits(v.rOpMF((short)0, m, (i, a, b) -> (short)(a + b)));\n@@ -2820,1 +2940,1 @@\n-                    toBits(v.rOp((short)1, m, (i, a, b) -> (short)(a * b)));\n+                    toBits(v.rOpMF((short)1, m, (i, a, b) -> (short)(a * b)));\n@@ -2822,1 +2942,1 @@\n-                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> (short) Math.min(a, b)));\n+                    toBits(v.rOpMF(MAX_OR_INF, m, (i, a, b) -> (short) Math.min(a, b)));\n@@ -2824,1 +2944,1 @@\n-                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> (short) Math.max(a, b)));\n+                    toBits(v.rOpMF(MIN_OR_INF, m, (i, a, b) -> (short) Math.max(a, b)));\n@@ -2826,1 +2946,1 @@\n-                    toBits(v.rOp((short)-1, m, (i, a, b) -> (short)(a & b)));\n+                    toBits(v.rOpMF((short)-1, m, (i, a, b) -> (short)(a & b)));\n@@ -2828,1 +2948,1 @@\n-                    toBits(v.rOp((short)0, m, (i, a, b) -> (short)(a | b)));\n+                    toBits(v.rOpMF((short)0, m, (i, a, b) -> (short)(a | b)));\n@@ -2830,1 +2950,1 @@\n-                    toBits(v.rOp((short)0, m, (i, a, b) -> (short)(a ^ b)));\n+                    toBits(v.rOpMF((short)0, m, (i, a, b) -> (short)(a ^ b)));\n@@ -2978,1 +3098,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset);\n+        return vsp.dummyVectorMF().fromArray0(a, offset);\n@@ -3009,1 +3129,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3013,1 +3133,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3053,1 +3173,1 @@\n-        return vsp.vOp(n -> a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(n -> a[offset + indexMap[mapOffset + n]]);\n@@ -3099,1 +3219,1 @@\n-        return vsp.vOp(m, n -> a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(m, n -> a[offset + indexMap[mapOffset + n]]);\n@@ -3124,1 +3244,1 @@\n-        return vsp.dummyVector().fromCharArray0(a, offset);\n+        return vsp.dummyVectorMF().fromCharArray0(a, offset);\n@@ -3157,1 +3277,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromCharArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3161,1 +3281,1 @@\n-        return vsp.dummyVector().fromCharArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromCharArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3202,1 +3322,1 @@\n-        return vsp.vOp(n -> (short) a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(n -> (short) a[offset + indexMap[mapOffset + n]]);\n@@ -3249,1 +3369,1 @@\n-        return vsp.vOp(m, n -> (short) a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(m, n -> (short) a[offset + indexMap[mapOffset + n]]);\n@@ -3289,1 +3409,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset).maybeSwap(bo);\n@@ -3345,1 +3465,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n+            return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -3349,1 +3469,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -3379,1 +3499,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3381,0 +3501,1 @@\n+\n@@ -3452,1 +3573,1 @@\n-        stOp(a, offset,\n+        stOpMF(a, offset,\n@@ -3494,1 +3615,1 @@\n-        stOp(a, offset, m,\n+        stOpMF(a, offset, m,\n@@ -3527,1 +3648,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3604,1 +3725,1 @@\n-        stOp(a, offset,\n+        stOpMF(a, offset,\n@@ -3649,1 +3770,1 @@\n-        stOp(a, offset, m,\n+        stOpMF(a, offset, m,\n@@ -3728,1 +3849,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -3745,1 +3866,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+            (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -3761,1 +3882,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -3778,1 +3899,1 @@\n-                (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+                (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -3793,1 +3914,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, ShortVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, ShortVector::memorySegmentGet);\n@@ -3809,1 +3930,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, vm, ShortVector::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, vm, ShortVector::memorySegmentGet);\n@@ -3828,1 +3949,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -3845,1 +3966,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -3860,1 +3981,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, ShortVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, ShortVector::memorySegmentSet);\n@@ -3877,1 +3998,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, vm, ShortVector::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, vm, ShortVector::memorySegmentSet);\n@@ -3895,1 +4016,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -4132,1 +4253,1 @@\n-                    (bits_, s_) -> s_.rvOp(i -> bits_));\n+                    (bits_, s_) -> s_.rvOpMF(i -> bits_));\n@@ -4183,1 +4304,1 @@\n-            return dummyVector().fromArray0(va, 0);\n+            return dummyVectorMF().fromArray0(va, 0);\n@@ -4198,2 +4319,2 @@\n-        ShortVector dummyVector() {\n-            return (ShortVector) super.dummyVector();\n+        ShortVector dummyVectorMF() {\n+            return (ShortVector) super.dummyVectorMF();\n@@ -4205,1 +4326,1 @@\n-        ShortVector rvOp(RVOp f) {\n+        ShortVector rvOpMF(RVOp f) {\n@@ -4211,1 +4332,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -4214,1 +4336,1 @@\n-        ShortVector vOp(FVOp f) {\n+        ShortVector vOpMF(FVOp f) {\n@@ -4219,1 +4341,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -4222,1 +4345,1 @@\n-        ShortVector vOp(VectorMask<Short> m, FVOp f) {\n+        ShortVector vOpMF(VectorMask<Short> m, FVOp f) {\n@@ -4224,1 +4347,2 @@\n-            boolean[] mbits = ((AbstractMask<Short>)m).getBits();\n+            VectorPayloadMF mbits = ((AbstractMask<Short>)m).getBits();\n+            long mOffset = mbits.multiFieldOffset();\n@@ -4226,1 +4350,1 @@\n-                if (mbits[i]) {\n+                if (U.getBoolean(mbits, mOffset + i)) {\n@@ -4230,1 +4354,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -4235,1 +4360,1 @@\n-        <M> ShortVector ldOp(M memory, int offset,\n+        <M> ShortVector ldOpMF(M memory, int offset,\n@@ -4237,1 +4362,1 @@\n-            return dummyVector().ldOp(memory, offset, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, f);\n@@ -4242,1 +4367,1 @@\n-        <M> ShortVector ldOp(M memory, int offset,\n+        <M> ShortVector ldOpMF(M memory, int offset,\n@@ -4245,1 +4370,1 @@\n-            return dummyVector().ldOp(memory, offset, m, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, m, f);\n@@ -4248,0 +4373,1 @@\n+\n@@ -4250,1 +4376,1 @@\n-        ShortVector ldLongOp(MemorySegment memory, long offset,\n+        ShortVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -4252,1 +4378,1 @@\n-            return dummyVector().ldLongOp(memory, offset, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, f);\n@@ -4257,1 +4383,1 @@\n-        ShortVector ldLongOp(MemorySegment memory, long offset,\n+        ShortVector ldLongOpMF(MemorySegment memory, long offset,\n@@ -4260,1 +4386,1 @@\n-            return dummyVector().ldLongOp(memory, offset, m, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, m, f);\n@@ -4265,2 +4391,2 @@\n-        <M> void stOp(M memory, int offset, FStOp<M> f) {\n-            dummyVector().stOp(memory, offset, f);\n+        <M> void stOpMF(M memory, int offset, FStOp<M> f) {\n+            dummyVectorMF().stOpMF(memory, offset, f);\n@@ -4271,2 +4397,2 @@\n-        <M> void stOp(M memory, int offset,\n-                      AbstractMask<Short> m,\n+        <M> void stOpMF(M memory, int offset,\n+                     AbstractMask<Short> m,\n@@ -4274,1 +4400,1 @@\n-            dummyVector().stOp(memory, offset, m, f);\n+            dummyVectorMF().stOpMF(memory, offset, m, f);\n@@ -4277,0 +4403,1 @@\n+\n@@ -4279,2 +4406,2 @@\n-        void stLongOp(MemorySegment memory, long offset, FStLongOp f) {\n-            dummyVector().stLongOp(memory, offset, f);\n+        void stLongOpMF(MemorySegment memory, long offset, FStLongOp f) {\n+            dummyVectorMF().stLongOpMF(memory, offset, f);\n@@ -4285,1 +4412,1 @@\n-        void stLongOp(MemorySegment memory, long offset,\n+        void stLongOpMF(MemorySegment memory, long offset,\n@@ -4288,1 +4415,1 @@\n-            dummyVector().stLongOp(memory, offset, m, f);\n+            dummyVectorMF().stLongOpMF(memory, offset, m, f);\n@@ -4303,1 +4430,1 @@\n-                return ShortMaxVector.ZERO;\n+               return ShortMaxVector.ZERO;\n@@ -4341,0 +4468,10 @@\n+\n+        @Override\n+        Object iotaArray() {\n+            int laneCount = laneCount();\n+            short [] init = new short[laneCount];\n+            for (int i = 0; i < laneCount; i++) {\n+                init[i] = (short)i;\n+            }\n+           return init;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":379,"deletions":242,"binary":false,"changes":621,"status":"modified"},{"patch":"@@ -1174,2 +1174,2 @@\n-@SuppressWarnings(\"exports\")\n-public abstract class Vector<E> extends jdk.internal.vm.vector.VectorSupport.Vector<E> {\n+@SuppressWarnings({\"exports\", \"missing-explicit-ctor\"})\n+public abstract value class Vector<E> extends jdk.internal.vm.vector.VectorSupport.Vector<E> {\n@@ -1177,5 +1177,4 @@\n-    \/\/ This type is sealed within its package.\n-    \/\/ Users cannot roll their own vector types.\n-    Vector(Object bits) {\n-        super(bits);\n-    }\n+    \/**\n+     * Default Constructor for abstract vector.\n+     *\/\n+    public Vector() {}\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Vector.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,2 +133,6 @@\n-public abstract class VectorMask<E> extends jdk.internal.vm.vector.VectorSupport.VectorMask<E> {\n-    VectorMask(boolean[] bits) { super(bits); }\n+public abstract value class VectorMask<E> extends jdk.internal.vm.vector.VectorSupport.VectorMask<E> {\n+\n+    \/**\n+     * Default Constructor for abstract VectorMask.\n+     *\/\n+    public VectorMask() {}\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorMask.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,4 +135,5 @@\n-public abstract class VectorShuffle<E> extends jdk.internal.vm.vector.VectorSupport.VectorShuffle<E> {\n-    VectorShuffle(byte[] reorder) {\n-        super(reorder);\n-    }\n+public abstract value class VectorShuffle<E> extends jdk.internal.vm.vector.VectorSupport.VectorShuffle<E> {\n+    \/**\n+     * Default Constructor for abstract VectorShuffle.\n+     *\/\n+    public VectorShuffle() {}\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShuffle.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -51,6 +51,2 @@\n-@SuppressWarnings(\"cast\")  \/\/ warning: redundant cast\n-public abstract class $abstractvectortype$ extends AbstractVector<$Boxtype$> {\n-\n-    $abstractvectortype$($type$[] vec) {\n-        super(vec);\n-    }\n+@SuppressWarnings({\"cast\"})  \/\/ warning: redundant cast\n+public abstract value class $abstractvectortype$ extends AbstractVector<$Boxtype$> {\n@@ -63,0 +59,4 @@\n+    \/**\n+     * Default Constructor for abstract vector.\n+     *\/\n+    public $abstractvectortype$() {}\n@@ -100,3 +100,0 @@\n-    \/*package-private*\/\n-    abstract $type$[] vec();\n-\n@@ -107,1 +104,1 @@\n-     * It is an error if the array is aliased elsewhere.\n+     * It is an error if the vec is aliased elsewhere.\n@@ -110,1 +107,1 @@\n-    abstract $abstractvectortype$ vectorFactory($type$[] vec);\n+    abstract $abstractvectortype$ vectorFactory(VectorPayloadMF vec);\n@@ -119,2 +116,2 @@\n-    AbstractMask<$Boxtype$> maskFactory(boolean[] bits) {\n-        return vspecies().maskFactory(bits);\n+    AbstractMask<$Boxtype$> maskFactory(VectorPayloadMF payload) {\n+        return vspecies().maskFactory(payload);\n@@ -131,1 +128,1 @@\n-    $abstractvectortype$ vOp(FVOp f) {\n+    $abstractvectortype$ vOpMF(FVOp f) {\n@@ -136,1 +133,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -141,1 +139,1 @@\n-    $abstractvectortype$ vOp(VectorMask<$Boxtype$> m, FVOp f) {\n+    $abstractvectortype$ vOpMF(VectorMask<$Boxtype$> m, FVOp f) {\n@@ -143,1 +141,2 @@\n-        boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        long mOffset = mbits.multiFieldOffset();\n@@ -145,1 +144,1 @@\n-            if (mbits[i]) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n@@ -149,1 +148,2 @@\n-        return vectorFactory(res);\n+        VectorPayloadMF vec_mf = vspecies().createVectorMF(res);\n+        return vectorFactory(vec_mf);\n@@ -161,1 +161,1 @@\n-    $abstractvectortype$ uOp(FUnOp f);\n+    $abstractvectortype$ uOpMF(FUnOp f);\n@@ -164,5 +164,8 @@\n-    $abstractvectortype$ uOpTemplate(FUnOp f) {\n-        $type$[] vec = vec();\n-        $type$[] res = new $type$[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec[i]);\n+    $abstractvectortype$ uOpTemplateMF(FUnOp f) {\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            $type$ v = U.get$Type$(vec, vOffset + i * $Boxtype$.BYTES);\n+            U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(i, v));\n@@ -170,1 +173,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -175,1 +179,1 @@\n-    $abstractvectortype$ uOp(VectorMask<$Boxtype$> m,\n+    $abstractvectortype$ uOpMF(VectorMask<$Boxtype$> m,\n@@ -179,1 +183,1 @@\n-    $abstractvectortype$ uOpTemplate(VectorMask<$Boxtype$> m,\n+    $abstractvectortype$ uOpTemplateMF(VectorMask<$Boxtype$> m,\n@@ -182,1 +186,1 @@\n-            return uOpTemplate(f);\n+            return uOpTemplateMF(f);\n@@ -184,5 +188,11 @@\n-        $type$[] vec = vec();\n-        $type$[] res = new $type$[length()];\n-        boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec[i]) : vec[i];\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                $type$ v = U.get$Type$(vec, vOffset + i * $Boxtype$.BYTES);\n+                U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(i, v));\n+            }\n@@ -190,1 +200,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -202,1 +213,1 @@\n-    $abstractvectortype$ bOp(Vector<$Boxtype$> o,\n+    $abstractvectortype$ bOpMF(Vector<$Boxtype$> o,\n@@ -206,1 +217,1 @@\n-    $abstractvectortype$ bOpTemplate(Vector<$Boxtype$> o,\n+    $abstractvectortype$ bOpTemplateMF(Vector<$Boxtype$> o,\n@@ -208,5 +219,9 @@\n-        $type$[] res = new $type$[length()];\n-        $type$[] vec1 = this.vec();\n-        $type$[] vec2 = (($abstractvectortype$)o).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i]);\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = (($abstractvectortype$)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            $type$ v1 = U.get$Type$(vec1, vOffset + i * $Boxtype$.BYTES);\n+            $type$ v2 = U.get$Type$(vec2, vOffset + i * $Boxtype$.BYTES);\n+            U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(i, v1, v2));\n@@ -214,1 +229,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -219,1 +235,1 @@\n-    $abstractvectortype$ bOp(Vector<$Boxtype$> o,\n+    $abstractvectortype$ bOpMF(Vector<$Boxtype$> o,\n@@ -224,1 +240,1 @@\n-    $abstractvectortype$ bOpTemplate(Vector<$Boxtype$> o,\n+    $abstractvectortype$ bOpTemplateMF(Vector<$Boxtype$> o,\n@@ -228,1 +244,1 @@\n-            return bOpTemplate(o, f);\n+            return bOpTemplateMF(o, f);\n@@ -230,6 +246,13 @@\n-        $type$[] res = new $type$[length()];\n-        $type$[] vec1 = this.vec();\n-        $type$[] vec2 = (($abstractvectortype$)o).vec();\n-        boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = (($abstractvectortype$)o).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                $type$ v1 = U.get$Type$(vec1, vOffset + i * $Boxtype$.BYTES);\n+                $type$ v2 = U.get$Type$(vec2, vOffset + i * $Boxtype$.BYTES);\n+                U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(i, v1, v2));\n+            }\n@@ -237,1 +260,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -249,1 +273,1 @@\n-    $abstractvectortype$ tOp(Vector<$Boxtype$> o1,\n+    $abstractvectortype$ tOpMF(Vector<$Boxtype$> o1,\n@@ -254,1 +278,1 @@\n-    $abstractvectortype$ tOpTemplate(Vector<$Boxtype$> o1,\n+    $abstractvectortype$ tOpTemplateMF(Vector<$Boxtype$> o1,\n@@ -257,6 +281,11 @@\n-        $type$[] res = new $type$[length()];\n-        $type$[] vec1 = this.vec();\n-        $type$[] vec2 = (($abstractvectortype$)o1).vec();\n-        $type$[] vec3 = (($abstractvectortype$)o2).vec();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(i, vec1[i], vec2[i], vec3[i]);\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = (($abstractvectortype$)o1).vec();\n+        VectorPayloadMF vec3 = (($abstractvectortype$)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            $type$ v1 = U.get$Type$(vec1, vOffset + i * $Boxtype$.BYTES);\n+            $type$ v2 = U.get$Type$(vec2, vOffset + i * $Boxtype$.BYTES);\n+            $type$ v3 = U.get$Type$(vec3, vOffset + i * $Boxtype$.BYTES);\n+            U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(i, v1, v2, v3));\n@@ -264,1 +293,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -269,1 +299,1 @@\n-    $abstractvectortype$ tOp(Vector<$Boxtype$> o1,\n+    $abstractvectortype$ tOpMF(Vector<$Boxtype$> o1,\n@@ -275,1 +305,1 @@\n-    $abstractvectortype$ tOpTemplate(Vector<$Boxtype$> o1,\n+    $abstractvectortype$ tOpTemplateMF(Vector<$Boxtype$> o1,\n@@ -280,1 +310,1 @@\n-            return tOpTemplate(o1, o2, f);\n+            return tOpTemplateMF(o1, o2, f);\n@@ -282,7 +312,15 @@\n-        $type$[] res = new $type$[length()];\n-        $type$[] vec1 = this.vec();\n-        $type$[] vec2 = (($abstractvectortype$)o1).vec();\n-        $type$[] vec3 = (($abstractvectortype$)o2).vec();\n-        boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i], vec3[i]) : vec1[i];\n+        VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        VectorPayloadMF vec1 = this.vec();\n+        VectorPayloadMF vec2 = (($abstractvectortype$)o1).vec();\n+        VectorPayloadMF vec3 = (($abstractvectortype$)o2).vec();\n+        VectorPayloadMF tpayload = U.makePrivateBuffer(vec1);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                $type$ v1 = U.get$Type$(vec1, vOffset + i * $Boxtype$.BYTES);\n+                $type$ v2 = U.get$Type$(vec2, vOffset + i * $Boxtype$.BYTES);\n+                $type$ v3 = U.get$Type$(vec3, vOffset + i * $Boxtype$.BYTES);\n+                U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(i, v1, v2, v3));\n+            }\n@@ -290,1 +328,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -297,1 +336,1 @@\n-    $type$ rOp($type$ v, VectorMask<$Boxtype$> m, FBinOp f);\n+    $type$ rOpMF($type$ v, VectorMask<$Boxtype$> m, FBinOp f);\n@@ -301,1 +340,1 @@\n-    $type$ rOpTemplate($type$ v, VectorMask<$Boxtype$> m, FBinOp f) {\n+    $type$ rOpTemplateMF($type$ v, VectorMask<$Boxtype$> m, FBinOp f) {\n@@ -303,1 +342,1 @@\n-            return rOpTemplate(v, f);\n+            return rOpTemplateMF(v, f);\n@@ -305,4 +344,8 @@\n-        $type$[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = mbits[i] ? f.apply(i, v, vec[i]) : v;\n+        VectorPayloadMF vec = this.vec();\n+        VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            $type$ v1 = U.get$Type$(vec, vOffset + i * $Boxtype$.BYTES);\n+            v = U.getBoolean(mbits, mOffset + i) ? f.apply(i, v, v1) : v;\n@@ -315,4 +358,7 @@\n-    $type$ rOpTemplate($type$ v, FBinOp f) {\n-        $type$[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            v = f.apply(i, v, vec[i]);\n+    $type$ rOpTemplateMF($type$ v, FBinOp f) {\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            $type$ v1 = U.get$Type$(vec, vOffset + i * $Boxtype$.BYTES);\n+            v = f.apply(i, v, v1);\n@@ -333,1 +379,1 @@\n-    <M> $abstractvectortype$ ldOp(M memory, int offset,\n+    <M> $abstractvectortype$ ldOpMF(M memory, int offset,\n@@ -335,4 +381,8 @@\n-        \/\/dummy; no vec = vec();\n-        $type$[] res = new $type$[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                $type$.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(memory, offset, i));\n@@ -340,1 +390,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -346,1 +397,1 @@\n-    <M> $abstractvectortype$ ldOp(M memory, int offset,\n+    <M> $abstractvectortype$ ldOpMF(M memory, int offset,\n@@ -349,6 +400,10 @@\n-        \/\/$type$[] vec = vec();\n-        $type$[] res = new $type$[length()];\n-        boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory($type$.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(memory, offset, i));\n@@ -357,1 +412,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -368,1 +424,1 @@\n-    $abstractvectortype$ ldLongOp(MemorySegment memory, long offset,\n+    $abstractvectortype$ ldLongOpMF(MemorySegment memory, long offset,\n@@ -370,4 +426,8 @@\n-        \/\/dummy; no vec = vec();\n-        $type$[] res = new $type$[length()];\n-        for (int i = 0; i < res.length; i++) {\n-            res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload =\n+            U.makePrivateBuffer(VectorPayloadMF.newVectorInstanceFactory(\n+                $type$.class, length, is_max_species));\n+        long vOffset = this.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(memory, offset, i));\n@@ -375,1 +435,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -381,1 +442,1 @@\n-    $abstractvectortype$ ldLongOp(MemorySegment memory, long offset,\n+    $abstractvectortype$ ldLongOpMF(MemorySegment memory, long offset,\n@@ -384,6 +445,10 @@\n-        \/\/$type$[] vec = vec();\n-        $type$[] res = new $type$[length()];\n-        boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n-        for (int i = 0; i < res.length; i++) {\n-            if (mbits[i]) {\n-                res[i] = f.apply(memory, offset, i);\n+        int length = vspecies().length();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF tpayload = VectorPayloadMF.newVectorInstanceFactory($type$.class, length, is_max_species);\n+        tpayload = U.makePrivateBuffer(tpayload);\n+        VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                U.put$Type$(tpayload, vOffset + i * $Boxtype$.BYTES, f.apply(memory, offset, i));\n@@ -392,1 +457,2 @@\n-        return vectorFactory(res);\n+        tpayload = U.finishPrivateBuffer(tpayload);\n+        return vectorFactory(tpayload);\n@@ -406,1 +472,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -408,3 +474,5 @@\n-        $type$[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.get$Type$(vec, vOffset + i * $Boxtype$.BYTES));\n@@ -415,1 +483,1 @@\n-    @ForceInline\n+   @ForceInline\n@@ -417,1 +485,1 @@\n-    <M> void stOp(M memory, int offset,\n+    <M> void stOpMF(M memory, int offset,\n@@ -420,5 +488,8 @@\n-        $type$[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.get$Type$(vec, vOffset + i * $Boxtype$.BYTES));\n@@ -429,0 +500,1 @@\n+\n@@ -436,1 +508,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -438,3 +510,5 @@\n-        $type$[] vec = vec();\n-        for (int i = 0; i < vec.length; i++) {\n-            f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        long vOffset = this.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            f.apply(memory, offset, i, U.get$Type$(vec, vOffset + i * $Boxtype$.BYTES));\n@@ -447,1 +521,1 @@\n-    void stLongOp(MemorySegment memory, long offset,\n+    void stLongOpMF(MemorySegment memory, long offset,\n@@ -450,5 +524,8 @@\n-        $type$[] vec = vec();\n-        boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n-        for (int i = 0; i < vec.length; i++) {\n-            if (mbits[i]) {\n-                f.apply(memory, offset, i, vec[i]);\n+        VectorPayloadMF vec = vec();\n+        VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        int length = vspecies().length();\n+        for (int i = 0; i < length; i++) {\n+            if (U.getBoolean(mbits, mOffset + i)) {\n+                f.apply(memory, offset, i, U.get$Type$(vec, vOffset + i * $Boxtype$.BYTES));\n@@ -473,1 +550,1 @@\n-    AbstractMask<$Boxtype$> bTest(int cond,\n+    AbstractMask<$Boxtype$> bTestMF(int cond,\n@@ -476,5 +553,12 @@\n-        $type$[] vec1 = vec();\n-        $type$[] vec2 = (($abstractvectortype$)o).vec();\n-        boolean[] bits = new boolean[length()];\n-        for (int i = 0; i < length(); i++){\n-            bits[i] = f.apply(cond, i, vec1[i], vec2[i]);\n+        int length = vspecies().length();\n+        VectorPayloadMF vec1 = vec();\n+        VectorPayloadMF vec2 = (($abstractvectortype$)o).vec();\n+        boolean is_max_species = ((AbstractSpecies)vspecies()).is_max_species();\n+        VectorPayloadMF mbits = VectorPayloadMF.newMaskInstanceFactory(vspecies().elementType(), length, is_max_species);\n+        mbits = U.makePrivateBuffer(mbits);\n+        long vOffset = this.multiFieldOffset();\n+        long mOffset = mbits.multiFieldOffset();\n+        for (int i = 0; i < length; i++) {\n+            $type$ v1 = U.get$Type$(vec1, vOffset + i * $Boxtype$.BYTES);\n+            $type$ v2 = U.get$Type$(vec2, vOffset + i * $Boxtype$.BYTES);\n+            U.putBoolean(mbits, mOffset + i, f.apply(cond, i, v1, v2));\n@@ -482,1 +566,2 @@\n-        return maskFactory(bits);\n+        mbits = U.finishPrivateBuffer(mbits);\n+        return maskFactory(mbits);\n@@ -580,1 +665,1 @@\n-                        ((bits_, s_) -> s_.rvOp(i -> bits_)));\n+                        ((bits_, s_) -> s_.rvOpMF(i -> bits_)));\n@@ -584,1 +669,1 @@\n-                                ((bits_, s_) -> s_.rvOp(i -> bits_)));\n+                                ((bits_, s_) -> s_.rvOpMF(i -> bits_)));\n@@ -751,1 +836,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) -a);\n+                    v0.uOpMF(m, (i, a) -> ($type$) -a);\n@@ -753,1 +838,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.abs(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.abs(a));\n@@ -757,1 +842,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) $Boxtype$.bitCount(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) $Boxtype$.bitCount(a));\n@@ -759,1 +844,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) $Boxtype$.numberOfTrailingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) $Boxtype$.numberOfTrailingZeros(a));\n@@ -761,1 +846,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) $Boxtype$.numberOfLeadingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) $Boxtype$.numberOfLeadingZeros(a));\n@@ -763,1 +848,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) $Boxtype$.reverse(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) $Boxtype$.reverse(a));\n@@ -766,1 +851,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) bitCount(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) bitCount(a));\n@@ -768,1 +853,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) numberOfTrailingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) numberOfTrailingZeros(a));\n@@ -770,1 +855,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) numberOfLeadingZeros(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) numberOfLeadingZeros(a));\n@@ -772,1 +857,1 @@\n-                    v0.uOp(m, (i, a) -> reverse(a));\n+                    v0.uOpMF(m, (i, a) -> reverse(a));\n@@ -777,1 +862,1 @@\n-                    v0.uOp(m, (i, a) -> a);\n+                    v0.uOpMF(m, (i, a) -> a);\n@@ -780,1 +865,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) $Boxtype$.reverseBytes(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) $Boxtype$.reverseBytes(a));\n@@ -786,1 +871,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.sin(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.sin(a));\n@@ -788,1 +873,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.cos(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.cos(a));\n@@ -790,1 +875,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.tan(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.tan(a));\n@@ -792,1 +877,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.asin(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.asin(a));\n@@ -794,1 +879,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.acos(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.acos(a));\n@@ -796,1 +881,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.atan(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.atan(a));\n@@ -798,1 +883,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.exp(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.exp(a));\n@@ -800,1 +885,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.log(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.log(a));\n@@ -802,1 +887,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.log10(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.log10(a));\n@@ -804,1 +889,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.sqrt(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.sqrt(a));\n@@ -806,1 +891,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.cbrt(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.cbrt(a));\n@@ -808,1 +893,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.sinh(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.sinh(a));\n@@ -810,1 +895,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.cosh(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.cosh(a));\n@@ -812,1 +897,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.tanh(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.tanh(a));\n@@ -814,1 +899,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.expm1(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.expm1(a));\n@@ -816,1 +901,1 @@\n-                    v0.uOp(m, (i, a) -> ($type$) Math.log1p(a));\n+                    v0.uOpMF(m, (i, a) -> ($type$) Math.log1p(a));\n@@ -871,1 +956,1 @@\n-            BIN_IMPL.find(op, opc, $abstractvectortype$::binaryOperations));\n+            BIN_IMPL.find(op, opc, $abstractvectortype$::binaryOperationsMF));\n@@ -942,1 +1027,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(a + b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a + b));\n@@ -944,1 +1029,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(a - b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a - b));\n@@ -946,1 +1031,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(a * b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a * b));\n@@ -948,1 +1033,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(a \/ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a \/ b));\n@@ -950,1 +1035,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)Math.max(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)Math.max(a, b));\n@@ -952,1 +1037,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)Math.min(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)Math.min(a, b));\n@@ -955,1 +1040,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(a & b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a & b));\n@@ -957,1 +1042,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(a | b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a | b));\n@@ -959,1 +1044,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$)(a ^ b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a ^ b));\n@@ -961,1 +1046,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> ($type$)(a << n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> ($type$)(a << n));\n@@ -963,1 +1048,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> ($type$)(a >> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> ($type$)(a >> n));\n@@ -965,1 +1050,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> ($type$)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> ($type$)((a & LSHR_SETUP_MASK) >>> n));\n@@ -967,1 +1052,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n@@ -969,1 +1054,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -972,1 +1057,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> $Boxtype$.compress(a, n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> $Boxtype$.compress(a, n));\n@@ -974,1 +1059,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> $Boxtype$.expand(a, n));\n+                    v0.bOpMF(v1, vm, (i, a, n) -> $Boxtype$.expand(a, n));\n@@ -979,1 +1064,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n@@ -981,1 +1066,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$) Math.atan2(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$) Math.atan2(a, b));\n@@ -983,1 +1068,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$) Math.pow(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$) Math.pow(a, b));\n@@ -985,1 +1070,1 @@\n-                    v0.bOp(v1, vm, (i, a, b) -> ($type$) Math.hypot(a, b));\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$) Math.hypot(a, b));\n@@ -991,0 +1076,53 @@\n+    private static BinaryOperation<$abstractvectortype$, VectorMask<$Boxtype$>> binaryOperationsMF(int opc_) {\n+        switch (opc_) {\n+            case VECTOR_OP_ADD: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a + b));\n+            case VECTOR_OP_SUB: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a - b));\n+            case VECTOR_OP_MUL: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a * b));\n+            case VECTOR_OP_DIV: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a \/ b));\n+            case VECTOR_OP_MAX: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)Math.max(a, b));\n+            case VECTOR_OP_MIN: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)Math.min(a, b));\n+#if[BITWISE]\n+            case VECTOR_OP_AND: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a & b));\n+            case VECTOR_OP_OR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a | b));\n+            case VECTOR_OP_XOR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$)(a ^ b));\n+            case VECTOR_OP_LSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> ($type$)(a << n));\n+            case VECTOR_OP_RSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> ($type$)(a >> n));\n+            case VECTOR_OP_URSHIFT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> ($type$)((a & LSHR_SETUP_MASK) >>> n));\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n+#if[intOrLong]\n+            case VECTOR_OP_COMPRESS_BITS: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> $Boxtype$.compress(a, n));\n+            case VECTOR_OP_EXPAND_BITS: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, n) -> $Boxtype$.expand(a, n));\n+#end[intOrLong]\n+#end[BITWISE]\n+#if[FP]\n+            case VECTOR_OP_OR: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n+            case VECTOR_OP_ATAN2: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$) Math.atan2(a, b));\n+            case VECTOR_OP_POW: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$) Math.pow(a, b));\n+            case VECTOR_OP_HYPOT: return (v0, v1, vm) ->\n+                    v0.bOpMF(v1, vm, (i, a, b) -> ($type$) Math.hypot(a, b));\n+#end[FP]\n+            default: return null;\n+        }\n+    }\n+\n+\n@@ -1170,1 +1308,1 @@\n-                    v.uOp(m, (i, a) -> ($type$)(a << n));\n+                    v.uOpMF(m, (i, a) -> ($type$)(a << n));\n@@ -1172,1 +1310,1 @@\n-                    v.uOp(m, (i, a) -> ($type$)(a >> n));\n+                    v.uOpMF(m, (i, a) -> ($type$)(a >> n));\n@@ -1174,1 +1312,1 @@\n-                    v.uOp(m, (i, a) -> ($type$)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOpMF(m, (i, a) -> ($type$)((a & LSHR_SETUP_MASK) >>> n));\n@@ -1176,1 +1314,1 @@\n-                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateLeft(a, (int)n));\n@@ -1178,1 +1316,1 @@\n-                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n+                    v.uOpMF(m, (i, a) -> rotateRight(a, (int)n));\n@@ -1297,1 +1435,1 @@\n-                    v0.tOp(v1_, v2_, m, (i, a, b, c) -> Math.fma(a, b, c));\n+                    v0.tOpMF(v1_, v2_, m, (i, a, b, c) -> Math.fma(a, b, c));\n@@ -2420,1 +2558,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2442,1 +2580,1 @@\n-                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                    = v0.bTestMF(cond, v1, (cond_, i, a, b)\n@@ -2575,1 +2713,1 @@\n-            (v0, v1, m_) -> v0.bOp(v1, m_, (i, a, b) -> b));\n+            (v0, v1, m_) -> v0.bOpMF(v1, m_, (i, a, b) -> b));\n@@ -2784,1 +2922,1 @@\n-            (v1, s_, m_) -> v1.uOp((i, a) -> {\n+            (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2816,1 +2954,1 @@\n-                   (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                   (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -2844,1 +2982,1 @@\n-                (v0, s_, m_) -> v0.uOp((i, a) -> {\n+                (v0, s_, m_) -> v0.uOpMF((i, a) -> {\n@@ -2852,1 +2990,1 @@\n-                (v1, s_, m_) -> v1.uOp((i, a) -> {\n+                (v1, s_, m_) -> v1.uOpMF((i, a) -> {\n@@ -3323,1 +3461,1 @@\n-                    toBits(v.rOp(($type$)0, m, (i, a, b) -> ($type$)(a + b)));\n+                    toBits(v.rOpMF(($type$)0, m, (i, a, b) -> ($type$)(a + b)));\n@@ -3325,1 +3463,1 @@\n-                    toBits(v.rOp(($type$)1, m, (i, a, b) -> ($type$)(a * b)));\n+                    toBits(v.rOpMF(($type$)1, m, (i, a, b) -> ($type$)(a * b)));\n@@ -3327,1 +3465,1 @@\n-                    toBits(v.rOp(MAX_OR_INF, m, (i, a, b) -> ($type$) Math.min(a, b)));\n+                    toBits(v.rOpMF(MAX_OR_INF, m, (i, a, b) -> ($type$) Math.min(a, b)));\n@@ -3329,1 +3467,1 @@\n-                    toBits(v.rOp(MIN_OR_INF, m, (i, a, b) -> ($type$) Math.max(a, b)));\n+                    toBits(v.rOpMF(MIN_OR_INF, m, (i, a, b) -> ($type$) Math.max(a, b)));\n@@ -3332,1 +3470,1 @@\n-                    toBits(v.rOp(($type$)-1, m, (i, a, b) -> ($type$)(a & b)));\n+                    toBits(v.rOpMF(($type$)-1, m, (i, a, b) -> ($type$)(a & b)));\n@@ -3334,1 +3472,1 @@\n-                    toBits(v.rOp(($type$)0, m, (i, a, b) -> ($type$)(a | b)));\n+                    toBits(v.rOpMF(($type$)0, m, (i, a, b) -> ($type$)(a | b)));\n@@ -3336,1 +3474,1 @@\n-                    toBits(v.rOp(($type$)0, m, (i, a, b) -> ($type$)(a ^ b)));\n+                    toBits(v.rOpMF(($type$)0, m, (i, a, b) -> ($type$)(a ^ b)));\n@@ -3549,1 +3687,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset);\n+        return vsp.dummyVectorMF().fromArray0(a, offset);\n@@ -3580,1 +3718,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3584,1 +3722,1 @@\n-        return vsp.dummyVector().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3625,1 +3763,1 @@\n-        return vsp.vOp(n -> a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(n -> a[offset + indexMap[mapOffset + n]]);\n@@ -3645,1 +3783,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -3677,1 +3815,1 @@\n-            s.vOp(n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(n -> c[idx + iMap[idy+n]]));\n@@ -3725,1 +3863,1 @@\n-        return vsp.vOp(m, n -> a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(m, n -> a[offset + indexMap[mapOffset + n]]);\n@@ -3739,1 +3877,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, indexMap, mapOffset, m);\n+            return vsp.dummyVectorMF().fromArray0(a, offset, indexMap, mapOffset, m);\n@@ -3767,1 +3905,1 @@\n-        return vsp.dummyVector().fromCharArray0(a, offset);\n+        return vsp.dummyVectorMF().fromCharArray0(a, offset);\n@@ -3800,1 +3938,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromCharArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3804,1 +3942,1 @@\n-        return vsp.dummyVector().fromCharArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromCharArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -3845,1 +3983,1 @@\n-        return vsp.vOp(n -> (short) a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(n -> (short) a[offset + indexMap[mapOffset + n]]);\n@@ -3892,1 +4030,1 @@\n-        return vsp.vOp(m, n -> (short) a[offset + indexMap[mapOffset + n]]);\n+        return vsp.vOpMF(m, n -> (short) a[offset + indexMap[mapOffset + n]]);\n@@ -3922,1 +4060,1 @@\n-        return vsp.dummyVector().fromBooleanArray0(a, offset);\n+        return vsp.dummyVectorMF().fromBooleanArray0(a, offset);\n@@ -3959,1 +4097,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m, OFFSET_IN_RANGE);\n+            return vsp.dummyVectorMF().fromBooleanArray0(a, offset, m, OFFSET_IN_RANGE);\n@@ -3963,1 +4101,1 @@\n-        return vsp.dummyVector().fromBooleanArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n+        return vsp.dummyVectorMF().fromBooleanArray0(a, offset, m, OFFSET_OUT_OF_RANGE);\n@@ -4004,1 +4142,1 @@\n-        return vsp.vOp(n -> (byte) (a[offset + indexMap[mapOffset + n]] ? 1 : 0));\n+        return vsp.vOpMF(n -> (byte) (a[offset + indexMap[mapOffset + n]] ? 1 : 0));\n@@ -4051,1 +4189,1 @@\n-        return vsp.vOp(m, n -> (byte) (a[offset + indexMap[mapOffset + n]] ? 1 : 0));\n+        return vsp.vOpMF(m, n -> (byte) (a[offset + indexMap[mapOffset + n]] ? 1 : 0));\n@@ -4091,1 +4229,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset).maybeSwap(bo);\n@@ -4151,1 +4289,1 @@\n-            return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n+            return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_IN_RANGE).maybeSwap(bo);\n@@ -4155,1 +4293,1 @@\n-        return vsp.dummyVector().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n+        return vsp.dummyVectorMF().fromMemorySegment0(ms, offset, m, OFFSET_OUT_OF_RANGE).maybeSwap(bo);\n@@ -4185,1 +4323,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -4187,0 +4325,1 @@\n+\n@@ -4259,1 +4398,1 @@\n-        stOp(a, offset,\n+        stOpMF(a, offset,\n@@ -4279,1 +4418,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -4312,1 +4451,1 @@\n-            -> v.stOp(arr, off,\n+            -> v.stOpMF(arr, off,\n@@ -4356,1 +4495,1 @@\n-        stOp(a, offset, m,\n+        stOpMF(a, offset, m,\n@@ -4404,1 +4543,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -4481,1 +4620,1 @@\n-        stOp(a, offset,\n+        stOpMF(a, offset,\n@@ -4526,1 +4665,1 @@\n-        stOp(a, offset, m,\n+        stOpMF(a, offset, m,\n@@ -4565,1 +4704,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -4648,1 +4787,1 @@\n-        stOp(a, offset,\n+        stOpMF(a, offset,\n@@ -4696,1 +4835,1 @@\n-        stOp(a, offset, m,\n+        stOpMF(a, offset, m,\n@@ -4775,1 +4914,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -4792,1 +4931,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+            (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -4820,1 +4959,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -4853,1 +4992,1 @@\n-            s.vOp(vm, n -> c[idx + iMap[idy+n]]));\n+            s.vOpMF(vm, n -> c[idx + iMap[idy+n]]));\n@@ -4869,1 +5008,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -4886,1 +5025,1 @@\n-                (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+                (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -4903,1 +5042,1 @@\n-            (arr, off, s) -> s.ldOp(arr, (int) off,\n+            (arr, off, s) -> s.ldOpMF(arr, (int) off,\n@@ -4920,1 +5059,1 @@\n-            (arr, off, s, vm) -> s.ldOp(arr, (int) off, vm,\n+            (arr, off, s, vm) -> s.ldOpMF(arr, (int) off, vm,\n@@ -4935,1 +5074,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, $abstractvectortype$::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, $abstractvectortype$::memorySegmentGet);\n@@ -4951,1 +5090,1 @@\n-                    return s.ldLongOp((MemorySegment) msp, off, vm, $abstractvectortype$::memorySegmentGet);\n+                    return s.ldLongOpMF((MemorySegment) msp, off, vm, $abstractvectortype$::memorySegmentGet);\n@@ -4970,1 +5109,1 @@\n-            -> v.stOp(arr, (int) off,\n+            -> v.stOpMF(arr, (int) off,\n@@ -4987,1 +5126,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -5011,1 +5150,1 @@\n-        IntVector vix;\n+        IntVector vix = null;\n@@ -5045,1 +5184,1 @@\n-            -> v.stOp(arr, off, vm,\n+            -> v.stOpMF(arr, off, vm,\n@@ -5068,1 +5207,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -5082,1 +5221,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, $abstractvectortype$::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, $abstractvectortype$::memorySegmentSet);\n@@ -5099,1 +5238,1 @@\n-                    v.stLongOp((MemorySegment) msp, off, vm, $abstractvectortype$::memorySegmentSet);\n+                    v.stLongOpMF((MemorySegment) msp, off, vm, $abstractvectortype$::memorySegmentSet);\n@@ -5118,1 +5257,1 @@\n-            -> v.stOp(arr, (int) off, vm,\n+            -> v.stOpMF(arr, (int) off, vm,\n@@ -5390,1 +5529,1 @@\n-                    (bits_, s_) -> s_.rvOp(i -> bits_));\n+                    (bits_, s_) -> s_.rvOpMF(i -> bits_));\n@@ -5448,1 +5587,1 @@\n-            return dummyVector().fromArray0(va, 0);\n+            return dummyVectorMF().fromArray0(va, 0);\n@@ -5463,2 +5602,2 @@\n-        $abstractvectortype$ dummyVector() {\n-            return ($abstractvectortype$) super.dummyVector();\n+        $abstractvectortype$ dummyVectorMF() {\n+            return ($abstractvectortype$) super.dummyVectorMF();\n@@ -5470,1 +5609,1 @@\n-        $abstractvectortype$ rvOp(RVOp f) {\n+        $abstractvectortype$ rvOpMF(RVOp f) {\n@@ -5476,1 +5615,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -5479,1 +5619,1 @@\n-        $Type$Vector vOp(FVOp f) {\n+        $Type$Vector vOpMF(FVOp f) {\n@@ -5484,1 +5624,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -5487,1 +5628,1 @@\n-        $Type$Vector vOp(VectorMask<$Boxtype$> m, FVOp f) {\n+        $Type$Vector vOpMF(VectorMask<$Boxtype$> m, FVOp f) {\n@@ -5489,1 +5630,2 @@\n-            boolean[] mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+            VectorPayloadMF mbits = ((AbstractMask<$Boxtype$>)m).getBits();\n+            long mOffset = mbits.multiFieldOffset();\n@@ -5491,1 +5633,1 @@\n-                if (mbits[i]) {\n+                if (U.getBoolean(mbits, mOffset + i)) {\n@@ -5495,1 +5637,2 @@\n-            return dummyVector().vectorFactory(res);\n+            VectorPayloadMF vec_mf = createVectorMF(res);\n+            return dummyVectorMF().vectorFactory(vec_mf);\n@@ -5500,1 +5643,1 @@\n-        <M> $abstractvectortype$ ldOp(M memory, int offset,\n+        <M> $abstractvectortype$ ldOpMF(M memory, int offset,\n@@ -5502,1 +5645,1 @@\n-            return dummyVector().ldOp(memory, offset, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, f);\n@@ -5507,1 +5650,1 @@\n-        <M> $abstractvectortype$ ldOp(M memory, int offset,\n+        <M> $abstractvectortype$ ldOpMF(M memory, int offset,\n@@ -5510,1 +5653,1 @@\n-            return dummyVector().ldOp(memory, offset, m, f);\n+            return dummyVectorMF().ldOpMF(memory, offset, m, f);\n@@ -5513,0 +5656,1 @@\n+\n@@ -5515,1 +5659,1 @@\n-        $abstractvectortype$ ldLongOp(MemorySegment memory, long offset,\n+        $abstractvectortype$ ldLongOpMF(MemorySegment memory, long offset,\n@@ -5517,1 +5661,1 @@\n-            return dummyVector().ldLongOp(memory, offset, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, f);\n@@ -5522,1 +5666,1 @@\n-        $abstractvectortype$ ldLongOp(MemorySegment memory, long offset,\n+        $abstractvectortype$ ldLongOpMF(MemorySegment memory, long offset,\n@@ -5525,1 +5669,1 @@\n-            return dummyVector().ldLongOp(memory, offset, m, f);\n+            return dummyVectorMF().ldLongOpMF(memory, offset, m, f);\n@@ -5530,2 +5674,2 @@\n-        <M> void stOp(M memory, int offset, FStOp<M> f) {\n-            dummyVector().stOp(memory, offset, f);\n+        <M> void stOpMF(M memory, int offset, FStOp<M> f) {\n+            dummyVectorMF().stOpMF(memory, offset, f);\n@@ -5536,2 +5680,2 @@\n-        <M> void stOp(M memory, int offset,\n-                      AbstractMask<$Boxtype$> m,\n+        <M> void stOpMF(M memory, int offset,\n+                     AbstractMask<$Boxtype$> m,\n@@ -5539,1 +5683,1 @@\n-            dummyVector().stOp(memory, offset, m, f);\n+            dummyVectorMF().stOpMF(memory, offset, m, f);\n@@ -5542,0 +5686,1 @@\n+\n@@ -5544,2 +5689,2 @@\n-        void stLongOp(MemorySegment memory, long offset, FStLongOp f) {\n-            dummyVector().stLongOp(memory, offset, f);\n+        void stLongOpMF(MemorySegment memory, long offset, FStLongOp f) {\n+            dummyVectorMF().stLongOpMF(memory, offset, f);\n@@ -5550,1 +5695,1 @@\n-        void stLongOp(MemorySegment memory, long offset,\n+        void stLongOpMF(MemorySegment memory, long offset,\n@@ -5553,1 +5698,1 @@\n-            dummyVector().stLongOp(memory, offset, m, f);\n+            dummyVectorMF().stLongOpMF(memory, offset, m, f);\n@@ -5568,1 +5713,1 @@\n-                return $Type$MaxVector.ZERO;\n+               return $Type$MaxVector.ZERO;\n@@ -5606,0 +5751,10 @@\n+\n+        @Override\n+        Object iotaArray() {\n+            int laneCount = laneCount();\n+            $type$ [] init = new $type$[laneCount];\n+            for (int i = 0; i < laneCount; i++) {\n+                init[i] = ($type$)i;\n+            }\n+           return init;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":446,"deletions":291,"binary":false,"changes":737,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +34,1 @@\n+import jdk.internal.vm.annotation.NullRestricted;\n@@ -42,1 +44,1 @@\n-final class $vectortype$ extends $abstractvectortype$ {\n+value class $vectortype$ extends $abstractvectortype$ {\n@@ -57,2 +59,7 @@\n-    $vectortype$($type$[] v) {\n-        super(v);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF$bits$$Boxinitials$.class);\n+\n+    @NullRestricted\n+    private final VectorPayloadMF$bits$$Boxinitials$ payload;\n+\n+    $vectortype$(Object value) {\n+        this.payload = (VectorPayloadMF$bits$$Boxinitials$) value;\n@@ -61,4 +68,4 @@\n-    \/\/ For compatibility as $vectortype$::new,\n-    \/\/ stored into species.vectorFactory.\n-    $vectortype$(Object v) {\n-        this(($type$[]) v);\n+    @ForceInline\n+    @Override\n+    final VectorPayloadMF vec() {\n+        return payload;\n@@ -67,2 +74,7 @@\n-    static final $vectortype$ ZERO = new $vectortype$(new $type$[VLENGTH]);\n-    static final $vectortype$ IOTA = new $vectortype$(VSPECIES.iotaArray());\n+#if[!Max]\n+    static final $vectortype$ ZERO = new $vectortype$(VectorPayloadMF.newVectorInstanceFactory($type$.class, $numLanes$, false));\n+    static final $vectortype$ IOTA = new $vectortype$(VectorPayloadMF.createVectPayloadInstance$Boxinitials$(VLENGTH, ($type$[])(VSPECIES.iotaArray()), false));\n+#else[!Max]\n+    static final $vectortype$ ZERO = new $vectortype$(VectorPayloadMF.newVectorInstanceFactory($type$.class, $numLanes$, true));\n+    static final $vectortype$ IOTA = new $vectortype$(VectorPayloadMF.createVectPayloadInstance$Boxinitials$(VLENGTH, ($type$[])(VSPECIES.iotaArray()), true));\n+#end[!Max]\n@@ -74,1 +86,1 @@\n-        VSPECIES.dummyVector();\n+        VSPECIES.dummyVectorMF();\n@@ -113,7 +125,2 @@\n-    \/*package-private*\/\n-    final @Override\n-    $type$[] vec() {\n-        return ($type$[])getPayload();\n-    }\n-\n-    \/\/ Virtualized constructors\n+    @Override\n+    public final long multiFieldOffset() { return MFOFFSET; }\n@@ -138,2 +145,2 @@\n-    $masktype$ maskFromArray(boolean[] bits) {\n-        return new $masktype$(bits);\n+    $masktype$ maskFromPayload(VectorPayloadMF payload) {\n+        return new $masktype$(payload);\n@@ -159,1 +166,1 @@\n-    $shuffletype$ shuffleFromBytes(byte[] reorder) { return new $shuffletype$(reorder); }\n+    $shuffletype$ shuffleFromBytes(VectorPayloadMF indexes) { return new $shuffletype$(indexes); }\n@@ -172,1 +179,1 @@\n-    $vectortype$ vectorFactory($type$[] vec) {\n+    $vectortype$ vectorFactory(VectorPayloadMF vec) {\n@@ -192,2 +199,2 @@\n-    $vectortype$ uOp(FUnOp f) {\n-        return ($vectortype$) super.uOpTemplate(f);  \/\/ specialize\n+    $vectortype$ uOpMF(FUnOp f) {\n+        return ($vectortype$) super.uOpTemplateMF(f);  \/\/ specialize\n@@ -198,1 +205,1 @@\n-    $vectortype$ uOp(VectorMask<$Boxtype$> m, FUnOp f) {\n+    $vectortype$ uOpMF(VectorMask<$Boxtype$> m, FUnOp f) {\n@@ -200,1 +207,1 @@\n-            super.uOpTemplate(($masktype$)m, f);  \/\/ specialize\n+            super.uOpTemplateMF(($masktype$)m, f);  \/\/ specialize\n@@ -207,2 +214,2 @@\n-    $vectortype$ bOp(Vector<$Boxtype$> v, FBinOp f) {\n-        return ($vectortype$) super.bOpTemplate(($vectortype$)v, f);  \/\/ specialize\n+    $vectortype$ bOpMF(Vector<$Boxtype$> v, FBinOp f) {\n+        return ($vectortype$) super.bOpTemplateMF(($vectortype$)v, f);  \/\/ specialize\n@@ -213,1 +220,1 @@\n-    $vectortype$ bOp(Vector<$Boxtype$> v,\n+    $vectortype$ bOpMF(Vector<$Boxtype$> v,\n@@ -216,2 +223,2 @@\n-            super.bOpTemplate(($vectortype$)v, ($masktype$)m,\n-                              f);  \/\/ specialize\n+            super.bOpTemplateMF(($vectortype$)v, ($masktype$)m,\n+                                f);  \/\/ specialize\n@@ -224,1 +231,1 @@\n-    $vectortype$ tOp(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, FTriOp f) {\n+    $vectortype$ tOpMF(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, FTriOp f) {\n@@ -226,2 +233,2 @@\n-            super.tOpTemplate(($vectortype$)v1, ($vectortype$)v2,\n-                              f);  \/\/ specialize\n+            super.tOpTemplateMF(($vectortype$)v1, ($vectortype$)v2,\n+                                f);  \/\/ specialize\n@@ -232,1 +239,1 @@\n-    $vectortype$ tOp(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2,\n+    $vectortype$ tOpMF(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2,\n@@ -235,2 +242,2 @@\n-            super.tOpTemplate(($vectortype$)v1, ($vectortype$)v2,\n-                              ($masktype$)m, f);  \/\/ specialize\n+            super.tOpTemplateMF(($vectortype$)v1, ($vectortype$)v2,\n+                                ($masktype$)m, f);  \/\/ specialize\n@@ -241,2 +248,2 @@\n-    $type$ rOp($type$ v, VectorMask<$Boxtype$> m, FBinOp f) {\n-        return super.rOpTemplate(v, m, f);  \/\/ specialize\n+    $type$ rOpMF($type$ v, VectorMask<$Boxtype$> m, FBinOp f) {\n+        return super.rOpTemplateMF(v, m, f);  \/\/ specialize\n@@ -563,2 +570,3 @@\n-                     $type$[] vecarr = vec.vec();\n-                     return (long)$Type$.$type$To$Bitstype$Bits(vecarr[ix]);\n+                         VectorPayloadMF vecpayload = vec.vec();\n+                         long start_offset = vecpayload.multiFieldOffset();\n+                         return (long)$Type$.$type$To$Bitstype$Bits(U.get$Type$(vecpayload, start_offset + ix * $Boxtype$.BYTES));\n@@ -612,3 +620,6 @@\n-                                    $type$[] res = v.vec().clone();\n-                                    res[ix] = $Type$.$bitstype$BitsTo$Type$(($bitstype$)bits);\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.put$Type$(tpayload, start_offset + ix * $Boxtype$.BYTES, $Type$.$bitstype$BitsTo$Type$(($bitstype$)bits));\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -711,6 +722,7 @@\n-                                VCLASS, ETYPE, VLENGTH,\n-                                this, i,\n-                                (vec, ix) -> {\n-                                    $type$[] vecarr = vec.vec();\n-                                    return (long)vecarr[ix];\n-                                });\n+                             VCLASS, ETYPE, VLENGTH,\n+                             this, i,\n+                             (vec, ix) -> {\n+                                 VectorPayloadMF vecpayload = vec.vec();\n+                                 long start_offset = vecpayload.multiFieldOffset();\n+                                 return (long)U.get$Type$(vecpayload, start_offset + ix * $Boxtype$.BYTES);\n+                             });\n@@ -811,1 +823,1 @@\n-        return VectorSupport.insert(\n+       return VectorSupport.insert(\n@@ -815,3 +827,6 @@\n-                                    $type$[] res = v.vec().clone();\n-                                    res[ix] = ($type$)bits;\n-                                    return v.vectorFactory(res);\n+                                    VectorPayloadMF vec = v.vec();\n+                                    VectorPayloadMF tpayload = U.makePrivateBuffer(vec);\n+                                    long start_offset = tpayload.multiFieldOffset();\n+                                    U.put$Type$(tpayload, start_offset + ix * $Boxtype$.BYTES, ($type$)bits);\n+                                    tpayload = U.finishPrivateBuffer(tpayload);\n+                                    return v.vectorFactory(tpayload);\n@@ -824,1 +839,1 @@\n-    static final class $masktype$ extends AbstractMask<$Boxtype$> {\n+    static final value class $masktype$ extends AbstractMask<$Boxtype$> {\n@@ -828,2 +843,3 @@\n-        $masktype$(boolean[] bits) {\n-            this(bits, 0);\n+#if[Max]\n+        $masktype$(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$$Boxbitsinitials$Z) payload;\n@@ -832,2 +848,5 @@\n-        $masktype$(boolean[] bits, int offset) {\n-            super(prepare(bits, offset));\n+        @NullRestricted\n+        private final VectorPayloadMF$vectorsizeinbytes$$Boxbitsinitials$Z payload;\n+\n+        $masktype$(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$$Boxbitsinitials$Z)(prepare(payload, offset, VSPECIES));\n@@ -837,1 +856,5 @@\n-            super(prepare(val));\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$$Boxbitsinitials$Z)(prepare(val, VSPECIES));\n+        }\n+#else[Max]\n+        $masktype$(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$Z) payload;\n@@ -840,6 +863,5 @@\n-        private static boolean[] prepare(boolean[] bits, int offset) {\n-            boolean[] newBits = new boolean[VSPECIES.laneCount()];\n-            for (int i = 0; i < newBits.length; i++) {\n-                newBits[i] = bits[offset + i];\n-            }\n-            return newBits;\n+        @NullRestricted\n+        private final VectorPayloadMF$vectorsizeinbytes$Z payload;\n+\n+        $masktype$(VectorPayloadMF payload, int offset) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$Z)(prepare(payload, offset, VSPECIES));\n@@ -848,4 +870,2 @@\n-        private static boolean[] prepare(boolean val) {\n-            boolean[] bits = new boolean[VSPECIES.laneCount()];\n-            Arrays.fill(bits, val);\n-            return bits;\n+        $masktype$(boolean val) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$Z)(prepare(val, VSPECIES));\n@@ -853,0 +873,2 @@\n+#end[Max]\n+\n@@ -864,22 +886,2 @@\n-        boolean[] getBits() {\n-            return (boolean[])getPayload();\n-        }\n-\n-        @Override\n-        $masktype$ uOp(MUnOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i]);\n-            }\n-            return new $masktype$(res);\n-        }\n-\n-        $masktype$ bOp(VectorMask<$Boxtype$> m, MBinOp f) {\n-            boolean[] res = new boolean[vspecies().laneCount()];\n-            boolean[] bits = getBits();\n-            boolean[] mbits = (($masktype$)m).getBits();\n-            for (int i = 0; i < res.length; i++) {\n-                res[i] = f.apply(i, bits[i], mbits[i]);\n-            }\n-            return new $masktype$(res);\n+        final VectorPayloadMF getBits() {\n+            return payload;\n@@ -896,27 +898,0 @@\n-        \/**\n-         * Helper function for lane-wise mask conversions.\n-         * This function kicks in after intrinsic failure.\n-         *\/\n-        @ForceInline\n-        private final <E>\n-        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {\n-            if (length() != dsp.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-            boolean[] maskArray = toArray();\n-            return  dsp.maskFactory(maskArray).check(dsp);\n-        }\n-\n-        @Override\n-        @ForceInline\n-        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n-            if (length() != species.laneCount())\n-                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n-\n-            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n-                this.getClass(), ETYPE, VLENGTH,\n-                species.maskType(), species.elementType(), VLENGTH,\n-                this, species,\n-                (m, s) -> s.maskFactory(m.toArray()).check(s));\n-        }\n-\n@@ -943,1 +918,1 @@\n-            return ($masktype$)VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return ($masktype$) VectorSupport.compressExpandOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -956,3 +931,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, $masktype$.class, null, $bitstype$.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, $masktype$.class, null,\n+                                          $bitstype$.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> ($masktype$) m1.bOpMF(m2, (i, a, b) -> a & b));\n@@ -966,3 +941,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, $masktype$.class, null, $bitstype$.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, $masktype$.class, null,\n+                                          $bitstype$.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> ($masktype$) m1.bOpMF(m2, (i, a, b) -> a | b));\n@@ -976,3 +951,3 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, $masktype$.class, null, $bitstype$.class, VLENGTH,\n-                                          this, m, null,\n-                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, $masktype$.class, null,\n+                                          $bitstype$.class, VLENGTH, this, m, null,\n+                                          (m1, m2, vm) -> ($masktype$) m1.bOpMF(m2, (i, a, b) -> a ^ b));\n@@ -987,1 +962,1 @@\n-                                                      (m) -> trueCountHelper(m.getBits()));\n+                                                            (m) -> (($masktype$) m).trueCountHelper());\n@@ -994,1 +969,1 @@\n-                                                      (m) -> firstTrueHelper(m.getBits()));\n+                                                            (m) -> (($masktype$) m).firstTrueHelper());\n@@ -1001,1 +976,1 @@\n-                                                      (m) -> lastTrueHelper(m.getBits()));\n+                                                            (m) -> (($masktype$) m).lastTrueHelper());\n@@ -1011,1 +986,1 @@\n-                                                      (m) -> toLongHelper(m.getBits()));\n+                                                      (m) -> (($masktype$) m).toLongHelper());\n@@ -1021,1 +996,1 @@\n-                                         this, i, (m, idx) -> (m.getBits()[idx] ? 1L : 0L)) == 1L;\n+                                         this, i, (m, idx) -> ((($masktype$) m).laneIsSetHelper(idx) ? 1L : 0L)) == 1L;\n@@ -1031,1 +1006,1 @@\n-                                         (m, __) -> anyTrueHelper((($masktype$)m).getBits()));\n+                                         (m, __) -> (($masktype$) m).anyTrueHelper());\n@@ -1039,1 +1014,1 @@\n-                                         (m, __) -> allTrueHelper((($masktype$)m).getBits()));\n+                                         (m, __) -> (($masktype$) m).allTrueHelper());\n@@ -1054,3 +1029,9 @@\n-        static boolean[] maskLowerHalf() {\n-            boolean[] a = new boolean[VLENGTH];\n-            int len = a.length >> 1;\n+        static VectorPayloadMF maskLowerHalf() {\n+#if[Max]\n+            VectorPayloadMF newObj = VectorPayloadMF.newMaskInstanceFactory(ETYPE, VLENGTH, true);\n+#else[Max]\n+            VectorPayloadMF newObj = VectorPayloadMF.newMaskInstanceFactory(ETYPE, VLENGTH, false);\n+#end[Max]\n+            newObj = U.makePrivateBuffer(newObj);\n+            long mf_offset = newObj.multiFieldOffset();\n+            int len = VLENGTH >> 1;\n@@ -1058,1 +1039,1 @@\n-                a[i] = true;\n+                U.putBoolean(newObj, mf_offset + i, true);\n@@ -1060,1 +1041,2 @@\n-            return a;\n+            newObj = U.finishPrivateBuffer(newObj);\n+            return newObj;\n@@ -1071,1 +1053,1 @@\n-    static final class $shuffletype$ extends AbstractShuffle<$Boxtype$> {\n+    static final value class $shuffletype$ extends AbstractShuffle<$Boxtype$> {\n@@ -1075,2 +1057,8 @@\n-        $shuffletype$(byte[] reorder) {\n-            super(VLENGTH, reorder);\n+#if[Max]\n+        @NullRestricted\n+        private final VectorPayloadMF$vectorsizeinbytes$$Boxbitsinitials$B payload;\n+\n+        $shuffletype$(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$$Boxbitsinitials$B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n@@ -1079,2 +1067,2 @@\n-        public $shuffletype$(int[] reorder) {\n-            super(VLENGTH, reorder);\n+        public $shuffletype$(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$$Boxbitsinitials$B)(prepare(indexes, i, VSPECIES));\n@@ -1083,2 +1071,18 @@\n-        public $shuffletype$(int[] reorder, int i) {\n-            super(VLENGTH, reorder, i);\n+        public $shuffletype$(IntUnaryOperator fn) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$$Boxbitsinitials$B)(prepare(fn, VSPECIES));\n+        }\n+        public $shuffletype$(int[] indexes) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$$Boxbitsinitials$B)(prepare(indexes, 0, VSPECIES));\n+        }\n+#else[Max]\n+        @NullRestricted\n+        private final VectorPayloadMF$vectorsizeinbytes$B payload;\n+\n+        $shuffletype$(VectorPayloadMF payload) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$B) payload;\n+            assert(VLENGTH == payload.length());\n+            assert(indexesInRange(payload));\n+        }\n+\n+        public $shuffletype$(int[] indexes, int i) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$B)(prepare(indexes, i, VSPECIES));\n@@ -1088,1 +1092,13 @@\n-            super(VLENGTH, fn);\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$B)(prepare(fn, VSPECIES));\n+        }\n+        public $shuffletype$(int[] indexes) {\n+            this.payload = (VectorPayloadMF$vectorsizeinbytes$B)(prepare(indexes, 0, VSPECIES));\n+        }\n+#end[Max]\n+\n+\n+\n+        @ForceInline\n+        @Override\n+        protected final VectorPayloadMF indices() {\n+            return payload;\n@@ -1125,6 +1141,13 @@\n-            byte[] reorder1 = reorder();\n-            byte[] reorder2 = s.reorder();\n-            byte[] r = new byte[reorder1.length];\n-            for (int i = 0; i < reorder1.length; i++) {\n-                int ssi = reorder2[i];\n-                r[i] = reorder1[ssi];  \/\/ throws on exceptional index\n+            VectorPayloadMF indices1 = indices();\n+            VectorPayloadMF indices2 = s.indices();\n+#if[Max]\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, true);\n+#else[Max]\n+            VectorPayloadMF r = VectorPayloadMF.newShuffleInstanceFactory(ETYPE, VLENGTH, false);\n+#end[Max]\n+            r = U.makePrivateBuffer(r);\n+            long offset = r.multiFieldOffset();\n+            for (int i = 0; i < VLENGTH; i++) {\n+                int ssi = U.getByte(indices2, offset + i * Byte.BYTES);\n+                int si = U.getByte(indices1, offset + ssi * Byte.BYTES);\n+                U.putByte(r, offset + i * Byte.BYTES, (byte) si);\n@@ -1132,0 +1155,1 @@\n+            r = U.finishPrivateBuffer(r);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":178,"deletions":154,"binary":false,"changes":332,"status":"modified"},{"patch":"@@ -216,0 +216,3 @@\n+# lworld+vector\n+compiler\/vectorapi\/VectorReinterpretTest.java\n+compiler\/vectorapi\/reshape\/TestVectorReinterpret.java\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -403,1 +403,1 @@\n-    @IR(failOn = {CALL_UNSAFE, ALLOC})\n+    @IR(failOn = {CALL_UNSAFE})\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/AllBitsSetVectorMatchRuleTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/Test8259353.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/Test8278948.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/Test8303508.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestIntrinsicBailOut.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestLongVectorNeg.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @enablePreview\n@@ -44,0 +45,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestLoopStoreVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestMaskedMacroLogicVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestNoInline.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestRawOopAtSafepoint.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestReverseByteTransforms.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestReverseByteTransformsSVE.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorCompressExpandBits.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorInsertByte.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+ * @enablePreview\n@@ -141,1 +142,1 @@\n-}\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorMaskTrueCount.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorMulAddSub.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShiftImm.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShuffleIota.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShuffleIotaByte.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorAbsDiffTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorBoxExpandTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCastShape128Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCastShape64Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCompareWithImmTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @enablePreview\n@@ -260,1 +261,1 @@\n-}\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCompareWithZeroTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+* @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFPtoIntCastTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFusedMultiplyAddSubTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorGatherScatterTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorLogicalOpIdentityTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCastTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+ * @enablePreview\n@@ -60,0 +61,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskLoadStoreTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskedNotTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMemoryAlias.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @enablePreview\n@@ -53,0 +54,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorRebracket128Test.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorReinterpretTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorReplicateLongSpecialImmTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorReverseBytesTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX1.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX2.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX512.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX512BW.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX512DQ.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastNeon.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastSVE.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorReinterpret.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AddTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/CovarOverrideTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/MethodOverideTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/MismatchTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @enablePreview\n@@ -42,0 +43,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/PreferredSpeciesTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/UnalignedHeapTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector128ConversionTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector256ConversionTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector512ConversionTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector64ConversionTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorHash.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n@@ -50,0 +51,1 @@\n+ * @enablePreview\n@@ -62,0 +64,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorMaxConversionTests.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorReshapeTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorRuns.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}