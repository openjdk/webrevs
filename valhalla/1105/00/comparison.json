{"files":[{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm.annotation;\n+\n+import java.lang.annotation.*;\n+\n+\/**\n+ * Annotation to indicate the compiler that the ACC_STRICT flag should be set to\n+ * the annotated field. Internal and experimental use only\n+ *\/\n+@Target(ElementType.FIELD)\n+@Retention(RetentionPolicy.SOURCE)\n+public @interface Strict {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/Strict.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -254,0 +254,1 @@\n+    public final Type strictType;\n@@ -627,0 +628,1 @@\n+        strictType = enterSyntheticAnnotation(\"jdk.internal.vm.annotation.Strict\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -389,0 +389,7 @@\n+            if (!c.type.isErroneous()\n+                    && toAnnotate.kind == VAR\n+                    && toAnnotate.owner.kind == TYP\n+                    && types.isSameType(c.type, syms.strictType)) {\n+                toAnnotate.flags_field |= Flags.STRICT;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -539,0 +539,34 @@\n+\n+        \/\/ testing experimental @Strict annotation\n+        String[] previousOptions = getCompileOptions();\n+        try {\n+            String[] testOptions = {\"--add-exports\", \"java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"};\n+            setCompileOptions(testOptions);\n+            for (String source : List.of(\n+                    \"\"\"\n+                    import jdk.internal.vm.annotation.Strict;\n+                    class Test {\n+                        @Strict int i;\n+                    }\n+                    \"\"\",\n+                    \"\"\"\n+                    import jdk.internal.vm.annotation.Strict;\n+                    class Test {\n+                        @Strict final int i = 0;\n+                    }\n+                    \"\"\"\n+            )) {\n+                File dir = assertOK(true, source);\n+                for (final File fileEntry : dir.listFiles()) {\n+                    ClassFile classFile = ClassFile.read(fileEntry);\n+                    for (Field field : classFile.fields) {\n+                        if (!field.access_flags.is(Flags.STATIC)) {\n+                            Set<String> fieldFlags = field.access_flags.getFieldFlags();\n+                            Assert.check(fieldFlags.contains(\"ACC_STRICT\"));\n+                        }\n+                    }\n+                }\n+            }\n+        } finally {\n+            setCompileOptions(previousOptions);\n+        }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}