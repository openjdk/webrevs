{"files":[{"patch":"@@ -150,17 +150,0 @@\n-objArrayHandle oopFactory::copy_flatArray_to_objArray(flatArrayHandle array, TRAPS) {\n-  int len = array->length();\n-  FlatArrayKlass* vak = FlatArrayKlass::cast(array->klass());\n-  objArrayOop oarray = new_objectArray(array->length(), CHECK_(objArrayHandle()));\n-  objArrayHandle oarrayh(THREAD, oarray);\n-  vak->copy_array(array(), 0, oarrayh(), 0, len, CHECK_(objArrayHandle()));\n-  return oarrayh;\n-}\n-\n-objArrayHandle  oopFactory::ensure_objArray(oop array, TRAPS) {\n-  if (array != nullptr && array->is_flatArray()) {\n-    return copy_flatArray_to_objArray(flatArrayHandle(THREAD, flatArrayOop(array)), THREAD);\n-  } else {\n-    return objArrayHandle(THREAD, objArrayOop(array));\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -69,4 +69,0 @@\n-  \/\/ Helper conversions from value to obj array...\n-  static objArrayHandle  copy_flatArray_to_objArray(flatArrayHandle array, TRAPS);\n-  static objArrayHandle  ensure_objArray(oop array, TRAPS); \/\/ copy into new objArray if not already an objArray\n-\n","filename":"src\/hotspot\/share\/memory\/oopFactory.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3529,1 +3529,3 @@\n-    objArrayHandle args = oopFactory::ensure_objArray(JNIHandles::resolve(args0), CHECK_NULL);\n+    objArrayHandle args(THREAD, (objArrayOop)JNIHandles::resolve(args0));\n+    assert(args() == nullptr || !args->is_flatArray(), \"args are never flat or are they???\");\n+\n@@ -3549,1 +3551,2 @@\n-  objArrayHandle args = oopFactory::ensure_objArray(JNIHandles::resolve(args0), CHECK_NULL);\n+  objArrayHandle args(THREAD, (objArrayOop)JNIHandles::resolve(args0));\n+  assert(args() == nullptr || !args->is_flatArray(), \"args are never flat or are they???\");\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test DirectMethodTest\n+ * @summary Test arguments to JVM_InvokeMethod not flattened into an args array.\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.value\n+ *          java.base\/jdk.internal.vm.annotation\n+ *          java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @enablePreview\n+ * @compile --source 25 DirectMethodTest.java\n+ * @run main\/othervm -Djdk.reflect.useNativeAccessorOnly=true -XX:+UseArrayFlattening -XX:+UseFieldFlattening -XX:+UseAtomicValueFlattening -XX:+UseNullableValueFlattening DirectMethodTest\n+ * @run main\/othervm -Djdk.reflect.useNativeAccessorOnly=true -XX:-UseArrayFlattening -XX:+UseAtomicValueFlattening -XX:+UseNullableValueFlattening DirectMethodTest\n+\n+ *\/\n+\n+import java.lang.reflect.Array;\n+import java.lang.reflect.Method;\n+import jdk.internal.value.ValueClass;\n+\n+public class DirectMethodTest {\n+\n+    public int method1(int i, int j, int k) {\n+        System.out.println(\"i = \" + i + \" j = \" + j + \" k = \" + k);\n+        return i + j * k;\n+    }\n+\n+    public static void printFlat(Object[] array) {\n+        if (!ValueClass.isFlatArray(array)) {\n+            System.out.println(\"not flat \" + array);\n+        } else {\n+            System.out.println(\"yay flat \" + array);\n+        }\n+    }\n+\n+    static value class SmallValue {\n+        byte b;\n+        short s;\n+\n+        SmallValue(short i) { b = 0; s = i; }\n+    }\n+\n+    public int method2(SmallValue i, SmallValue j, SmallValue k) {\n+        System.out.println(\"i = \" + i + \" j = \" + j + \" k = \" + k);\n+        return i.s + j.s * k.s;\n+    }\n+\n+    static final int ARRAY_SIZE = 3;\n+\n+    public static void main(java.lang.String[] unused) throws Exception {\n+        DirectMethodTest d = new DirectMethodTest();\n+\n+        Method m = DirectMethodTest.class.getMethod(\"method1\", int.class, int.class, int.class);\n+        Integer[] intarray = new Integer[]{1, 2, 3};  \/\/ is this flattened?\n+        printFlat(intarray);\n+        Object[] array = (Object[])Array.newInstance(Integer.class, 3);\n+        printFlat(array);\n+        array = ValueClass.newNullableAtomicArray(Integer.class, ARRAY_SIZE);\n+        printFlat(array);\n+        System.out.println(\"value is \" + m.invoke(d, 1, 2, 3));\n+\n+        Method m2 = DirectMethodTest.class.getMethod(\"method2\", SmallValue.class, SmallValue.class, SmallValue.class);\n+        Object[] smallValueArray = (Object[])Array.newInstance(SmallValue.class, ARRAY_SIZE);\n+        printFlat(smallValueArray);\n+        smallValueArray = ValueClass.newNullableAtomicArray(SmallValue.class, ARRAY_SIZE);\n+        printFlat(smallValueArray);\n+        System.out.println(\"value is \" + m2.invoke(d, new SmallValue((short)1), new SmallValue((short)2), new SmallValue((short)3)));\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/DirectMethodTest.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}