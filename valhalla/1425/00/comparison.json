{"files":[{"patch":"@@ -44,8 +44,33 @@\n- * <em>Note:<\/em> It is the responsibility of the caller to make sure\n- * arguments are checked before methods of this class are\n- * called. While some rudimentary checks are performed on the input,\n- * the checks are best effort and when performance is an overriding\n- * priority, as when methods of this class are optimized by the\n- * runtime compiler, some or all checks (if any) may be elided. Hence,\n- * the caller must not rely on the checks and corresponding\n- * exceptions!\n+ * <h2><a id=\"undefined-behavior\">Undefined Behavior<\/a><\/h2>\n+ * For performance reasons, {@code Unsafe} is allowed to work outside the\n+ * restrictions enforced by the JVM. As a result, it is the responsibility of\n+ * the caller to ensure that an invocation of an {@code Unsafe} method is\n+ * conformant, and failure to do so will result in undefined behavior. When a\n+ * program exhibits undefined behavior, there is no restrictions on its\n+ * behaviors. Such behaviors may include but not be limited to:\n+ *\n+ * <ul>\n+ * <li>Crashing the VM.\n+ * <li>Corruption of the heap or JVM memory.\n+ * <li>Nonsensical variable value. E.g. an {@code int} may appear to be\n+ * simultaneously 0 and 1.\n+ * <li>Impossible code execution. E.g. the branches of an {@code if} are\n+ * both executed or both not executed.\n+ * <li>Wiping out the hard drive.\n+ * <\/ul>\n+ *\n+ * Some methods (e.g. {@link #getInt}) exhibit undefined behavior if they\n+ * are invoked at runtime with illegal arguments. This means that they will\n+ * never exhibit undefined behavior if they are not actually reachable at\n+ * runtime. On the other hands, other methods (e.g.\n+ * {@link #makePrivateBuffer(Object)}) exhibit undefined behavior if they are\n+ * used incorrectly, even if the invocation may not be reachable at runtime.\n+ * <p>\n+ * For methods exhibiting undefined behavior if they are invoked at runtime\n+ * with illegal arguments, undefined behavior may time travel. That is, if a\n+ * control path may eventually reach an invocation of an {@code Unsafe} method\n+ * with illegal arguments, the symptoms of undefined behavior may be present\n+ * even before the invocation of the {@code Unsafe} method.\n+ * <p>\n+ * By default, usage of all methods in this class exhibits undefined behavior,\n+ * unless otherwise explicitly specified.\n@@ -384,2 +409,24 @@\n-     * and contents is exactly the given value instance.  The return object\n-     * is in the larval state that can be updated using the unsafe put operation.\n+     * and contents is exactly the given value instance. The return object is\n+     * in the larval state that can be updated using the unsafe put operation.\n+     * <p>\n+     * This method mimics the operation of the bytecode {@code new}, allowing\n+     * the creation of a value object without the conventional Java procedure\n+     * and bypassing the bytecode verifier regarding larval objects. As a\n+     * result, it is the responsibility of the caller to ensure that this\n+     * method is used in a conformant manner. This method exhibits\n+     * {@linkplain Unsafe undefined behavior} unless all the following\n+     * conditions are true:\n+     * <ul>\n+     * <li>The argument must be a value object at runtime.\n+     * <li>The return object must be assigned to a local variable that is\n+     * effectively final as well as definitely assigned to with the return\n+     * value of this method. The object must also be not assigned to another\n+     * local variable.\n+     * <li>The return object can only be used as the first argument passed to\n+     * {@code Unsafe::putXXX} or to {@link #finishPrivateBuffer(Object)}, any\n+     * other usage, such as loading from or returning it, is illegal. The only\n+     * exception is the implicit check cast inserted by the compiler on the\n+     * return value of this method. Explicit check casts are not allowed.\n+     * <\/ul>\n+     * Illegal usage of this method exhibits undefined behavior even if the\n+     * illegal statements are never actually reached at runtime.\n@@ -395,0 +442,13 @@\n+     * <p>\n+     * This method mimics the action of passing a larval object to a do-nothing\n+     * constructor to obtain a non-larval object. This method exhibits\n+     * {@linkplain Unsafe undefined behavior} unless all the following\n+     * conditions are true:\n+     * <ul>\n+     * <li>The argument must be a larval value object created by\n+     * {@link #makePrivateBuffer(Object)}.\n+     * <li>After the invocation of this method, the variable that holds the\n+     * argument passed into this method must not be used.\n+     * <\/ul>\n+     * Illegal usage of this method exhibits undefined behavior even if the\n+     * illegal statements are never actually reached at runtime.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":70,"deletions":10,"binary":false,"changes":80,"status":"modified"}]}