{"files":[{"patch":"@@ -32,1 +32,1 @@\n-DISABLED_WARNINGS_java += initialization\n+# DISABLED_WARNINGS_java +=\n","filename":"make\/modules\/java.base\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -281,6 +281,0 @@\n-        \/**\n-         * Warn about code in identity classes that wouldn't be allowed in early\n-         * construction due to a this dependency.\n-         *\/\n-        INITIALIZATION(\"initialization\"),\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1191,1 +1191,0 @@\n-                boolean addedSuperInIdentityClass = false;\n@@ -1200,1 +1199,0 @@\n-                            addedSuperInIdentityClass = true;\n@@ -1250,3 +1248,1 @@\n-                            if (!addedSuperInIdentityClass || !allowValueClasses) {\n-                                break;\n-                            }\n+                            break;\n@@ -1256,1 +1252,1 @@\n-                        CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(localEnv, addedSuperInIdentityClass && allowValueClasses);\n+                        CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(localEnv);\n@@ -1273,3 +1269,1 @@\n-        boolean warningsOnly;\n-\n-        CtorPrologueVisitor(Env<AttrContext> localEnv, boolean warningsOnly) {\n+        CtorPrologueVisitor(Env<AttrContext> localEnv) {\n@@ -1278,1 +1272,0 @@\n-            this.warningsOnly = warningsOnly;\n@@ -1311,4 +1304,0 @@\n-            reportPrologueError(tree, sym, false);\n-        }\n-\n-        private void reportPrologueError(JCTree tree, Symbol sym, boolean hasInit) {\n@@ -1316,10 +1305,1 @@\n-            if (!warningsOnly) {\n-                if (hasInit) {\n-                    log.error(tree, Errors.CantAssignInitializedBeforeCtorCalled(sym));\n-                } else {\n-                    log.error(tree, Errors.CantRefBeforeCtorCalled(sym));\n-                }\n-            } else if (allowValueClasses) {\n-                \/\/ issue lint warning\n-                localEnv.info.lint.logIfEnabled(tree, LintWarnings.WouldNotBeAllowedInPrologue(sym));\n-            }\n+            log.error(tree, Errors.CantRefBeforeCtorCalled(sym));\n@@ -1421,1 +1401,1 @@\n-                        reportPrologueError(tree, sym);\n+                        log.error(tree, Errors.CantRefBeforeCtorCalled(sym));\n@@ -1426,1 +1406,1 @@\n-                        reportPrologueError(tree, sym, true);\n+                        log.error(tree, Errors.CantAssignInitializedBeforeCtorCalled(sym));\n@@ -1600,1 +1580,1 @@\n-                        if (allowValueClasses && v.owner.kind == TYP && !v.isStatic()) {\n+                        if (v.owner.kind == TYP && !v.isStatic() && v.isStrict()) {\n@@ -1602,1 +1582,1 @@\n-                            CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(initEnv, !v.isStrict());\n+                            CtorPrologueVisitor ctorPrologueVisitor = new CtorPrologueVisitor(initEnv);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":8,"deletions":28,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -4323,5 +4323,0 @@\n-# 0: symbol or name\n-# lint: initialization\n-compiler.warn.would.not.be.allowed.in.prologue=\\\n-    reference to {0} would not be allowed in the prologue phase\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -222,4 +222,0 @@\n-javac.opt.Xlint.desc.initialization=\\\n-    Warn about code in identity classes that wouldn''t be allowed in early\\n\\\n-\\                         construction due to a this dependency.\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+\n+\n@@ -190,1 +192,0 @@\n-        Symbol.ClassSymbol currentClassSym = (Symbol.ClassSymbol)(types.erasure(currentClass)).tsym;\n@@ -198,3 +199,1 @@\n-                       ident.name == names._super &&\n-                               (tree.type.tsym == currentClass.tsym ||\n-                                currentClassSym.isSubClass(tree.type.tsym, types));\n+                       ident.name == names._super;\n@@ -207,1 +206,2 @@\n-                Symbol.ClassSymbol selectedClassSym = (Symbol.ClassSymbol)(selectedType).tsym;\n+                Symbol.ClassSymbol currentClassSym = (Symbol.ClassSymbol)((Type.ClassType)types.erasure(currentClass)).tsym;\n+                Symbol.ClassSymbol selectedClassSym = (Symbol.ClassSymbol)((Type.ClassType)selectedType).tsym;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -169,2 +169,0 @@\n- * <tr><th scope=\"row\">{@code initialization}       <td>code in identity classes that wouldn't be allowed in early\n- *                                                      construction due to a this dependency.\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -604,3 +604,0 @@\n-    -   `initialization`: Warns about code in identity classes that wouldn't be\n-        allowed in early construction due to a `this` dependency.\n-\n","filename":"src\/jdk.compiler\/share\/man\/javac.md","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5,10 +5,0 @@\n- * @enablePreview\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n@@ -16,2 +6,1 @@\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyAssignments\n+ * @enablePreview\n@@ -166,1 +155,1 @@\n-        @IgnoreMethod\n+\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,22 +1,22 @@\n-EarlyAssignments.java:42:26: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:43:21: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:44:26: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:45:34: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:47:36: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:51:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:55:21: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:59:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:77:13: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:78:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:79:25: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:80:31: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:130:17: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:135:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:140:29: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:145:22: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:150:28: compiler.err.cant.ref.before.ctor.called: x\n-EarlyAssignments.java:159:13: compiler.err.cant.assign.initialized.before.ctor.called: x\n-EarlyAssignments.java:168:13: compiler.err.cant.assign.val.to.var: final, x\n-EarlyAssignments.java:179:13: compiler.err.cant.ref.before.ctor.called: this\n-EarlyAssignments.java:179:18: compiler.err.cant.ref.before.ctor.called: EarlyAssignments.Inner8\n-EarlyAssignments.java:188:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:31:26: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:32:21: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:33:26: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:34:34: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:36:36: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:40:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:44:21: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:48:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:66:13: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:67:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:68:25: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:69:31: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:119:17: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:124:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:129:29: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:134:22: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:139:28: compiler.err.cant.ref.before.ctor.called: x\n+EarlyAssignments.java:148:13: compiler.err.cant.assign.initialized.before.ctor.called: x\n+EarlyAssignments.java:157:13: compiler.err.cant.assign.val.to.var: final, x\n+EarlyAssignments.java:168:13: compiler.err.cant.ref.before.ctor.called: this\n+EarlyAssignments.java:168:18: compiler.err.cant.ref.before.ctor.called: EarlyAssignments.Inner8\n+EarlyAssignments.java:177:17: compiler.err.cant.ref.before.ctor.called: x\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignments.out","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -5,9 +5,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n@@ -15,2 +6,0 @@\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyIndirectOuterCapture\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyIndirectOuterCapture.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -5,9 +5,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n@@ -15,2 +6,0 @@\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyInnerAccessErrorMessageTest\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTest.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-EarlyInnerAccessErrorMessageTest.java:22:34: compiler.err.cant.ref.before.ctor.called: x\n+EarlyInnerAccessErrorMessageTest.java:11:34: compiler.err.cant.ref.before.ctor.called: x\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyInnerAccessErrorMessageTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLambdaReturn\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLambdaReturn\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLambdaReturn.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5,9 +5,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n@@ -15,2 +6,0 @@\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalClass\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClass.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-EarlyLocalClass.java:22:37: compiler.err.cant.ref.before.ctor.called: hashCode()\n+EarlyLocalClass.java:11:37: compiler.err.cant.ref.before.ctor.called: hashCode()\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalClass.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest1\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest1\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest1.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest2\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest2\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest2.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest3\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest3\n@@ -40,1 +28,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest3.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest4\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest4\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest4.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest5\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest5\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest5.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest6\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest6\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest6.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest7\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest7\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest7.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main EarlyLocalTest8\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester EarlyLocalTest8\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLocalTest8.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface ErrorExpected {}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/ErrorExpected.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface IgnoreMethod {}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/IgnoreMethod.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,228 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.io.PrintWriter;\n-import java.io.IOException;\n-\n-import java.io.IOException;\n-import java.nio.file.DirectoryStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.stream.Stream;\n-\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.charset.Charset;\n-\n-import javax.tools.Diagnostic;\n-import javax.tools.DiagnosticListener;\n-import javax.tools.JavaFileObject;\n-import javax.tools.SimpleJavaFileObject;\n-\n-import com.sun.tools.javac.code.Attribute;\n-import com.sun.tools.javac.comp.Attr;\n-import com.sun.tools.javac.comp.AttrContext;\n-import com.sun.tools.javac.comp.CompileStates;\n-import com.sun.tools.javac.comp.Env;\n-import com.sun.tools.javac.comp.Modules;\n-import com.sun.tools.javac.file.JavacFileManager;\n-import com.sun.tools.javac.file.PathFileObject;\n-import com.sun.tools.javac.main.JavaCompiler;\n-import com.sun.tools.javac.tree.JCTree;\n-import com.sun.tools.javac.tree.JCTree.*;\n-import com.sun.tools.javac.tree.TreeInfo;\n-import com.sun.tools.javac.util.Assert;\n-import com.sun.tools.javac.util.Context;\n-import com.sun.tools.javac.util.DiagnosticSource;\n-import com.sun.tools.javac.util.JCDiagnostic;\n-import com.sun.tools.javac.util.List;\n-import com.sun.tools.javac.util.ListBuffer;\n-import com.sun.tools.javac.util.Log;\n-import com.sun.tools.javac.util.Options;\n-\n-public class InitializationWarningTester {\n-    Context context;\n-    Options options;\n-    MyJavaCompiler javaCompiler;\n-    JavacFileManager javacFileManager;\n-    PrintWriter errOut;\n-    DiagnosticListener<JavaFileObject> diagnosticListener;\n-\n-    public static void main(String... args) throws Throwable {\n-        String testSrc = System.getProperty(\"test.src\");\n-        Path baseDir = Paths.get(testSrc);\n-        InitializationWarningTester tester = new InitializationWarningTester();\n-        Assert.check(args.length > 0, \"no args, ending\");\n-        tester.test(baseDir, args[0]);\n-    }\n-\n-    java.util.List<String> compilationOutput = new ArrayList<>();\n-\n-    public InitializationWarningTester() {\n-        context = new Context();\n-        diagnosticListener = new DiagnosticListener<JavaFileObject>() {\n-            public void report(Diagnostic<? extends JavaFileObject> message) {\n-                if (!ignoreDiagnostics &&\n-                    (message.getCode().contains(warningKey) ||\n-                     message.getCode().contains(errorKey1) ||\n-                     message.getCode().contains(errorKey2))) {\n-                    if ((message.getCode().contains(errorKey1) ||\n-                            message.getCode().contains(errorKey2)) &&\n-                            !errorExpected) {\n-                        throw new AssertionError(\"error key not expected \" + message);\n-                    }\n-                    JCDiagnostic diagnostic = (JCDiagnostic) message;\n-                    String msgData = ((PathFileObject)diagnostic.getDiagnosticSource().getFile()).getShortName() +\n-                            \":\" + diagnostic.getLineNumber() + \":\" + diagnostic.getColumnNumber() + \": \" + diagnostic.getCode() + \": \" +\n-                            diagnostic.getArgs()[0];\n-                    compilationOutput.add(msgData);\n-                }\n-            }\n-        };\n-        context.put(DiagnosticListener.class, diagnosticListener);\n-        JavacFileManager.preRegister(context);\n-        MyAttr.preRegister(context, this);\n-        options = Options.instance(context);\n-        options.put(\"--enable-preview\", \"--enable-preview\");\n-        options.put(\"--source\", Integer.toString(Runtime.version().feature()));\n-        options.put(\"-Xlint:initialization\", \"-Xlint:initialization\");\n-        javaCompiler = new MyJavaCompiler(context);\n-        javacFileManager = new JavacFileManager(context, false, Charset.defaultCharset());\n-    }\n-\n-    static final String errorKey1 = \"compiler.err.cant.ref.before.ctor.called\";\n-    static final String errorKey2 = \"compiler.err.cant.assign.initialized.before.ctor.called\";\n-    static final String warningKey = \"compiler.warn.would.not.be.allowed.in.prologue\";\n-\n-    void test(Path baseDir, String className) throws Throwable {\n-        DirectoryStream<Path> paths = null;\n-        try {\n-            paths = Files.newDirectoryStream(baseDir,\n-                    p -> (!Files.isDirectory(p) &&\n-                            (p.endsWith(className + \".java\") ||\n-                            p.endsWith(className + \".out\"))\n-                    )\n-            );\n-        } catch (IOException e) {\n-            throw new AssertionError(\"Error accessing directory: \" + e.getMessage());\n-        }\n-\n-        Path javaFile = null;\n-        Path goldenFile = null;\n-        for (Path p: paths) {\n-            if (p.toString().endsWith(\"java\")) {\n-                javaFile = p;\n-            } else if (p.toString().endsWith(\"out\")) {\n-                goldenFile = p;\n-            }\n-        }\n-        \/\/ compile\n-        javaCompiler.compile(com.sun.tools.javac.util.List.of(javacFileManager.getJavaFileObject(javaFile)));\n-        if (goldenFile != null) {\n-            java.util.List<String> goldenFileContent = Files.readAllLines(goldenFile);\n-            goldenFileContent = goldenFileContent.stream()\n-                    .filter(s -> s.contains(errorKey1) || s.contains(errorKey2))\n-                    .collect(Collectors.toList());\n-            Assert.check(goldenFileContent.size() == compilationOutput.size(), \"compilation output length mismatch\");\n-            for (int i = 0; i < goldenFileContent.size(); i++) {\n-                String goldenLine = goldenFileContent.get(i);\n-                String warningLine = compilationOutput.get(i);\n-                if (warningLine.contains(warningKey)) {\n-                    goldenLine = goldenLine.replace(errorKey1, warningKey);\n-                    goldenLine = goldenLine.replace(errorKey2, warningKey);\n-                }\n-                Assert.check(warningLine.equals(goldenLine), \"error for line \" + warningLine);\n-            }\n-        } else {\n-            Assert.check(compilationOutput.size() == 0);\n-        }\n-    }\n-\n-    static class MyJavaCompiler extends JavaCompiler {\n-        MyJavaCompiler(Context context) {\n-            super(context);\n-            \/\/ do not generate code\n-            this.shouldStopPolicyIfNoError = CompileStates.CompileState.LOWER;\n-        }\n-    }\n-\n-    \/\/ ignore diagnostics\n-    boolean ignoreDiagnostics = false;\n-    \/\/ even when compiling with warnings on, an error will be produced\n-    boolean errorExpected = false;\n-\n-    static class MyAttr extends Attr {\n-        InitializationWarningTester tester;\n-        static void preRegister(Context context, InitializationWarningTester tester) {\n-            context.put(attrKey, (com.sun.tools.javac.util.Context.Factory<Attr>) c -> new MyAttr(c, tester));\n-        }\n-\n-        MyAttr(Context context, InitializationWarningTester tester) {\n-            super(context);\n-            this.tester = tester;\n-        }\n-\n-        @Override\n-        public void visitMethodDef(JCMethodDecl tree) {\n-            boolean previousIgnoreDiags = tester.ignoreDiagnostics;\n-            boolean previousErrExpected = tester.errorExpected;\n-            try {\n-                if (TreeInfo.isConstructor(tree)) {\n-                    \/\/ remove the super constructor call if it is a no arguments invocation\n-                    List<Attribute.Compound> attributes = tree.sym.getDeclarationAttributes();\n-                    for (Attribute.Compound attribute : attributes) {\n-                        if (attribute.toString().equals(\"@IgnoreMethod\")) {\n-                            tester.ignoreDiagnostics = true;\n-                        } else if (attribute.toString().equals(\"@ErrorExpected\")) {\n-                            tester.errorExpected = true;\n-                        }\n-                    }\n-                    if (TreeInfo.hasAnyConstructorCall(tree) && !tester.errorExpected) {\n-                        ListBuffer<JCStatement> newStats = new ListBuffer<>();\n-                        for (JCStatement statement : tree.body.stats) {\n-                            if (statement instanceof JCExpressionStatement expressionStatement &&\n-                                    expressionStatement.expr instanceof JCMethodInvocation methodInvocation) {\n-                                if (TreeInfo.isConstructorCall(methodInvocation) && methodInvocation.args.isEmpty()) {\n-                                    continue;\n-                                }\n-                            }\n-                            newStats.add(statement);\n-                        }\n-                        tree.body.stats = newStats.toList();\n-                    }\n-                }\n-                super.visitMethodDef(tree);\n-            } finally {\n-                tester.ignoreDiagnostics = previousIgnoreDiags;\n-                tester.errorExpected = previousErrExpected;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/InitializationWarningTester.java","additions":0,"deletions":228,"binary":false,"changes":228,"status":"deleted"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main LambdaLocalEarlyCrash\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester LambdaLocalEarlyCrash\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/LambdaLocalEarlyCrash.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main LambdaOuterCapture\n- * @build InitializationWarningTester\n- * @run main InitializationWarningTester LambdaOuterCapture\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/LambdaOuterCapture.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5,10 +5,0 @@\n- * @enablePreview\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n@@ -16,2 +6,1 @@\n- * @build ErrorExpected InitializationWarningTester\n- * @run main InitializationWarningTester SuperInitFails\n+ * @enablePreview\n@@ -113,1 +102,1 @@\n-    @ErrorExpected\n+\n@@ -164,1 +153,1 @@\n-    @ErrorExpected\n+\n@@ -168,1 +157,1 @@\n-    @ErrorExpected\n+\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,35 +1,35 @@\n-SuperInitFails.java:68:9: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:73:13: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:78:14: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:83:28: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:88:29: compiler.err.cant.ref.before.ctor.called: hashCode()\n-SuperInitFails.java:110:33: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:115:14: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:119:20: compiler.err.not.encl.class: java.lang.Object\n-SuperInitFails.java:123:23: compiler.err.cant.ref.before.ctor.called: spliterator()\n-SuperInitFails.java:130:22: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:136:9: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n-SuperInitFails.java:144:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record1\n-SuperInitFails.java:149:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record2\n-SuperInitFails.java:166:50: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:170:15: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n-SuperInitFails.java:179:13: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:183:17: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:187:24: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:191:18: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:197:32: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:217:25: compiler.err.return.before.superclass.initialized\n-SuperInitFails.java:222:33: compiler.err.ctor.calls.not.allowed.here\n-SuperInitFails.java:227:29: compiler.err.redundant.superclass.init\n-SuperInitFails.java:240:41: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:241:16: compiler.err.cant.ref.before.ctor.called: x\n-SuperInitFails.java:250:35: compiler.err.cant.ref.before.ctor.called: this\n-SuperInitFails.java:44:13: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:48:14: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:52:14: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:56:13: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:60:33: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:64:32: compiler.err.call.must.only.appear.in.ctor\n-SuperInitFails.java:94:18: compiler.err.ctor.calls.not.allowed.here\n-SuperInitFails.java:100:13: compiler.err.return.before.superclass.initialized\n-SuperInitFails.java:161:18: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:57:9: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:62:13: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:67:14: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:72:28: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:77:29: compiler.err.cant.ref.before.ctor.called: hashCode()\n+SuperInitFails.java:99:33: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:104:14: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:108:20: compiler.err.not.encl.class: java.lang.Object\n+SuperInitFails.java:112:23: compiler.err.cant.ref.before.ctor.called: spliterator()\n+SuperInitFails.java:119:22: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:125:9: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n+SuperInitFails.java:133:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record1\n+SuperInitFails.java:138:9: compiler.err.non.canonical.constructor.invoke.another.constructor: SuperInitFails.Record2\n+SuperInitFails.java:155:50: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:159:15: compiler.err.cant.ref.before.ctor.called: SuperInitFails\n+SuperInitFails.java:168:13: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:172:17: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:176:24: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:180:18: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:186:32: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:206:25: compiler.err.return.before.superclass.initialized\n+SuperInitFails.java:211:33: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:216:29: compiler.err.redundant.superclass.init\n+SuperInitFails.java:229:41: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:230:16: compiler.err.cant.ref.before.ctor.called: x\n+SuperInitFails.java:239:35: compiler.err.cant.ref.before.ctor.called: this\n+SuperInitFails.java:33:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:37:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:41:14: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:45:13: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:49:33: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:53:32: compiler.err.call.must.only.appear.in.ctor\n+SuperInitFails.java:83:18: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:89:13: compiler.err.return.before.superclass.initialized\n+SuperInitFails.java:150:18: compiler.err.call.must.only.appear.in.ctor\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.out","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -27,12 +27,0 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jlink\n- *          jdk.compiler\/com.sun.tools.javac.code\n- *          jdk.compiler\/com.sun.tools.javac.comp\n- *          jdk.compiler\/com.sun.tools.javac.file\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.compiler\/com.sun.tools.javac.tree\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @run main SuperInitGood\n- * @build InitializationWarningTester IgnoreMethod\n- * @run main InitializationWarningTester SuperInitGood\n@@ -59,1 +47,0 @@\n-        @IgnoreMethod\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGood.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.warn.would.not.be.allowed.in.prologue\n-\/\/ options: -Xlint:initialization --enable-preview -source ${jdk.version}\n-\n-public class InitializationWarning {\n-    Object o = null;\n-\n-    InitializationWarning(Object oo) {\n-        this.o = oo;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InitializationWarning.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"}]}