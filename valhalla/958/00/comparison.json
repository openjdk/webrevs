{"files":[{"patch":"@@ -304,8 +304,0 @@\n-static bool is_vector_payload(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayload_klass());\n-}\n-\n-static bool is_vector_payload_mf(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayloadMF_klass());\n-}\n-\n@@ -315,5 +307,0 @@\n-  if (is_vector_payload_mf(vk)) {\n-     assert(field_count() == nfields, \"\");\n-  } else if (is_vector_payload(vk)) {\n-     assert(field_value(0)->as_InlineType()->field_count() == nfields, \"\");\n-  }\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -856,0 +856,6 @@\n+  if (iklass && iklass->is_inlinetype()) {\n+    \/\/ Value object has two additional inputs before the non-static fields\n+    sfpt->add_req(_igvn.intcon(1));\n+    sfpt->add_req(_igvn.intcon(alloc->_larval ? 1 : 0));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1254,1 +1254,1 @@\n-      if (Opcode() == Op_LoadN) {\n+      if (Opcode() == Op_LoadN && !base->is_VectorBox()) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -322,4 +322,12 @@\n-  ciInlineKlass* payload = vk->declared_nonstatic_field_at(0)->type()->as_inline_klass();\n-  Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, true);\n-  payload_value->as_InlineType()->set_field_value(0, vect);\n-  payload_value = gvn.transform(payload_value);\n+  ciField* payload_field = vk->declared_nonstatic_field_at(0);\n+  ciInlineKlass* payload = payload_field->type()->as_inline_klass();\n+  InlineTypeNode* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, true);\n+  payload_value->set_field_value(0, vect);\n+  \/\/ Allocate a buffer and store the vector value to it if the payload is not flattened.\n+  if (!payload_field->is_flat()) {\n+    Node* payload_klass = kit.makecon(TypeKlassPtr::make(payload));\n+    Node* payload_oop = kit.new_instance(payload_klass, nullptr, nullptr, true);\n+    payload_value->store(&kit, payload_oop, payload_oop, payload);\n+    payload_value->set_oop(payload_oop);\n+  }\n+  payload_value = gvn.transform(payload_value)->as_InlineType();\n@@ -332,1 +340,0 @@\n-\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"}]}