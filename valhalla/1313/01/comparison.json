{"files":[{"patch":"@@ -25,0 +25,1 @@\n+#include \"oops\/access.hpp\"\n@@ -93,0 +94,1 @@\n+#include \"runtime\/keepStackGCProcessed.hpp\"\n@@ -1941,3 +1943,4 @@\n-class CollectOops : public BasicOopIterateClosure {\n- public:\n-  GrowableArray<Handle>* array;\n+\/\/ Collect Object oops but not value objects...loaded from heap\n+class CollectObjectOops : public BasicOopIterateClosure {\n+  public:\n+  GrowableArray<Handle>* _array;\n@@ -1945,7 +1948,2 @@\n-  jobjectArray create_jni_result(JNIEnv* env, TRAPS) {\n-    objArrayHandle result_array =\n-        oopFactory::new_objArray_handle(vmClasses::Object_klass(), array->length(), CHECK_NULL);\n-    for (int i = 0 ; i < array->length(); i++) {\n-      result_array->obj_at_put(i, array->at(i)());\n-    }\n-    return (jobjectArray)JNIHandles::make_local(THREAD, result_array());\n+  CollectObjectOops() {\n+      _array = new GrowableArray<Handle>(128);\n@@ -1956,1 +1954,0 @@\n-    \/\/ Value might be oop, but JLS can't see as Object, just iterate through it...\n@@ -1960,1 +1957,13 @@\n-      array->append(oh);\n+      _array->append(oh);\n+    }\n+  }\n+\n+  template <class T> inline void add_oop(T* p) { add_oop(HeapAccess<>::oop_load(p)); }\n+  void do_oop(oop* o) { add_oop(o); }\n+  void do_oop(narrowOop* v) { add_oop(v); }\n+\n+  jobjectArray create_jni_result(JNIEnv* env, TRAPS) {\n+    objArrayHandle result_array =\n+        oopFactory::new_objArray_handle(vmClasses::Object_klass(), _array->length(), CHECK_NULL);\n+    for (int i = 0 ; i < _array->length(); i++) {\n+      result_array->obj_at_put(i, _array->at(i)());\n@@ -1962,0 +1971,1 @@\n+    return (jobjectArray)JNIHandles::make_local(THREAD, result_array());\n@@ -1963,0 +1973,1 @@\n+};\n@@ -1964,2 +1975,12 @@\n-  void do_oop(oop* o) { add_oop(HeapAccess<>::oop_load(o)); }\n-  void do_oop(narrowOop* v) { add_oop(HeapAccess<>::oop_load(v)); }\n+\/\/ Collect Object oops but not value objects...loaded from frames\n+class CollectFrameObjectOops : public BasicOopIterateClosure {\n+ public:\n+  CollectObjectOops _collect;\n+\n+  template <class T> inline void add_oop(T* p) { _collect.add_oop(RawAccess<>::oop_load(p)); }\n+  void do_oop(oop* o) { add_oop(o); }\n+  void do_oop(narrowOop* v) { add_oop(v); }\n+\n+  jobjectArray create_jni_result(JNIEnv* env, TRAPS) {\n+    return _collect.create_jni_result(env, THREAD);\n+  }\n@@ -1968,0 +1989,1 @@\n+\/\/ Collect Object oops for the given oop, iterate through value objects\n@@ -1971,3 +1993,1 @@\n-  GrowableArray<Handle>* array = new GrowableArray<Handle>(128);\n-  CollectOops collectOops;\n-  collectOops.array = array;\n+  CollectObjectOops collectOops;\n@@ -1978,0 +1998,1 @@\n+\/\/ Collect Object oops for the given frame deep, iterate through value objects\n@@ -1979,0 +2000,1 @@\n+  KeepStackGCProcessedMark ksgcpm(THREAD);\n@@ -1980,4 +2002,2 @@\n-  GrowableArray<Handle>* array = new GrowableArray<Handle>(128);\n-  CollectOops collectOops;\n-  collectOops.array = array;\n-  StackFrameStream sfs(thread, false \/* update *\/, true \/* process_frames *\/);\n+  CollectFrameObjectOops collectOops;\n+  StackFrameStream sfs(thread, true \/* update *\/, true \/* process_frames *\/);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":41,"deletions":21,"binary":false,"changes":62,"status":"modified"}]}