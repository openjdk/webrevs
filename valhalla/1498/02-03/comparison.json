{"files":[{"patch":"@@ -1078,1 +1078,2 @@\n-\/\/ Pre-load class referred to in non-static null-free instance field. These fields trigger MANDATORY loading\n+\/\/ Pre-load class referred to in non-static null-free instance field. These fields trigger MANDATORY loading.\n+\/\/ Some pre-loading does not fail fatally\n@@ -1084,1 +1085,1 @@\n-  Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n+  InstanceKlass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n@@ -1094,1 +1095,1 @@\n-  Klass* k = ik->get_inline_type_field_klass_or_null(field_index);\n+  InstanceKlass* k = ik->get_inline_type_field_klass_or_null(field_index);\n@@ -1096,1 +1097,1 @@\n-    \/\/ oops, the app has substituted a different version of k!\n+    \/\/ oops, the app has substituted a different version of k! Does not fail fatally\n@@ -1109,19 +1110,1 @@\n-  if (real_k->access_flags().is_identity_class()) {\n-    assert(real_k->is_instance_klass(), \"Sanity check\");\n-    ResourceMark rm(THREAD);\n-    THROW_MSG_(vmSymbols::java_lang_IncompatibleClassChangeError(),\n-              err_msg(\"Class %s expects class %s to be a value class, but it is an identity class\",\n-              ik->name()->as_C_string(),\n-              InstanceKlass::cast(real_k)->external_name()),\n-              false);\n-  }\n-\n-  if (real_k->is_abstract()) {\n-    assert(real_k->is_instance_klass(), \"Sanity check\");\n-    ResourceMark rm(THREAD);\n-    THROW_MSG_(vmSymbols::java_lang_IncompatibleClassChangeError(),\n-              err_msg(\"Class %s expects class %s to be concrete value type, but it is an abstract class\",\n-              ik->name()->as_C_string(),\n-              InstanceKlass::cast(real_k)->external_name()),\n-              false);\n-  }\n+  real_k->check_null_free_field(ik, CHECK_false);\n@@ -1140,1 +1123,1 @@\n-    Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n+    InstanceKlass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n@@ -1146,1 +1129,1 @@\n-    Klass* k = ik->get_inline_type_field_klass_or_null(field_index);\n+    InstanceKlass* k = ik->get_inline_type_field_klass_or_null(field_index);\n@@ -1201,0 +1184,1 @@\n+          \/\/ Pending exceptions are cleared so we can fail silently\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":9,"deletions":25,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -3594,0 +3594,20 @@\n+void InstanceKlass::check_null_free_field(InstanceKlass* ik, TRAPS) {\n+  if (access_flags().is_identity_class()) {\n+    assert(is_instance_klass(), \"Sanity check\");\n+    ResourceMark rm(THREAD);\n+    THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+              err_msg(\"Class %s expects class %s to be a value class, but it is an identity class\",\n+              ik->name()->as_C_string(),\n+              external_name()));\n+  }\n+\n+  if (is_abstract()) {\n+    assert(is_instance_klass(), \"Sanity check\");\n+    ResourceMark rm(THREAD);\n+    THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+              err_msg(\"Class %s expects class %s to be concrete value type, but it is an abstract class\",\n+              ik->name()->as_C_string(),\n+              external_name()));\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -595,0 +595,3 @@\n+  \/\/ Check if this klass can be null-free\n+  void check_null_free_field(InstanceKlass* ik, TRAPS);\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}