{"files":[{"patch":"@@ -1078,0 +1078,73 @@\n+\/\/ Pre-load inline class\n+bool SystemDictionary::preload_from_null_free_field(InstanceKlass* ik, Handle class_loader, Symbol* sig, int field_index, TRAPS) {\n+  TempNewSymbol name = Signature::strip_envelope(sig);\n+  log_info(class, preload)(\"Preloading class %s during loading of shared class %s. Cause: a null-free non-static field is declared with this type\",\n+                           name->as_C_string(), ik->name()->as_C_string());\n+  Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n+                                                                               class_loader, false, CHECK_false);\n+  if (HAS_PENDING_EXCEPTION) {\n+    log_warning(class, preload)(\"Preloading of class %s during loading of class %s (cause: null-free non-static field) failed: %s\",\n+                                name->as_C_string(), ik->name()->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+    return false; \/\/ Exception is still pending\n+  }\n+\n+  Klass* k = ik->get_inline_type_field_klass_or_null(field_index);\n+  if (real_k != k) {\n+    \/\/ oops, the app has substituted a different version of k!\n+    log_warning(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: null-free non-static field) failed : app substituted a different version of %s\",\n+                                name->as_C_string(), ik->name()->as_C_string(), k->name()->as_C_string());\n+    return false;\n+  }\n+  log_info(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: null-free non-static field) succeeded\",\n+                           name->as_C_string(), ik->name()->as_C_string());\n+\n+  assert(real_k != nullptr, \"Sanity check\");\n+  if (real_k->access_flags().is_identity_class()) {\n+    assert(real_k->is_instance_klass(), \"Sanity check\");\n+    ResourceMark rm(THREAD);\n+    THROW_MSG_(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+              err_msg(\"Class %s expects class %s to be a value class, but it is an identity class\",\n+              ik->name()->as_C_string(),\n+              InstanceKlass::cast(real_k)->external_name()),\n+              false);\n+  }\n+\n+  if (real_k->is_abstract()) {\n+    assert(real_k->is_instance_klass(), \"Sanity check\");\n+    ResourceMark rm(THREAD);\n+    THROW_MSG_(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+              err_msg(\"Class %s expects class %s to be concrete value type, but it is an abstract class\",\n+              ik->name()->as_C_string(),\n+              InstanceKlass::cast(real_k)->external_name()),\n+              false);\n+  }\n+\n+  return true;\n+}\n+\n+\n+void SystemDictionary::try_preload_from_loadable_descriptors(InstanceKlass* ik, Handle class_loader, Symbol* sig, int field_index, TRAPS) {\n+  TempNewSymbol name = Signature::strip_envelope(sig);\n+  if (name != ik->name() && ik->is_class_in_loadable_descriptors_attribute(sig)) {\n+    log_info(class, preload)(\"Preloading class %s during loading of shared class %s. Cause: field type in LoadableDescriptors attribute\",\n+                              name->as_C_string(), ik->name()->as_C_string());\n+    Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n+                                                                                 class_loader, false, THREAD);\n+    if (HAS_PENDING_EXCEPTION) {\n+      CLEAR_PENDING_EXCEPTION;\n+    }\n+\n+    Klass* k = ik->get_inline_type_field_klass_or_null(field_index);\n+    if (real_k != k) {\n+      \/\/ oops, the app has substituted a different version of k!\n+      log_warning(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) failed : app substituted a different version of %s\",\n+                                  name->as_C_string(), ik->name()->as_C_string(), k->name()->as_C_string());\n+      return;\n+    } else if (real_k != nullptr) {\n+      log_info(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) succeeded\",\n+                                name->as_C_string(), ik->name()->as_C_string());\n+    }\n+  }\n+}\n+\n+\n@@ -1104,0 +1177,1 @@\n+\n@@ -1105,0 +1179,2 @@\n+      int field_index = fs.index();\n+\n@@ -1106,10 +1182,3 @@\n-        \/\/ Pre-load inline class\n-        TempNewSymbol name = Signature::strip_envelope(sig);\n-        log_info(class, preload)(\"Preloading class %s during loading of shared class %s. Cause: field type in LoadableDescriptors attribute\", name->as_C_string(), ik->name()->as_C_string());\n-        Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n-          class_loader, false, CHECK_NULL);\n-        Klass* k = ik->get_inline_type_field_klass_or_null(fs.index());\n-        if (real_k != k) {\n-          \/\/ oops, the app has substituted a different version of k!\n-          log_warning(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) failed : %s\",\n-                                      name->as_C_string(), ik->name()->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+        bool check = preload_from_null_free_field(ik, class_loader, sig, field_index, CHECK_NULL);\n+        if (!check) {\n+          ik->set_shared_loading_failed();\n@@ -1117,3 +1186,0 @@\n-        } else if (real_k != nullptr) {\n-            log_info(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) succeeded\",\n-                                     name->as_C_string(), ik->name()->as_C_string());\n@@ -1122,20 +1188,1 @@\n-        TempNewSymbol name = Signature::strip_envelope(sig);\n-        if (name != ik->name() && ik->is_class_in_loadable_descriptors_attribute(sig)) {\n-          log_info(class, preload)(\"Preloading class %s during loading of shared class %s. Cause: field type in LoadableDescriptors attribute\",\n-                                   name->as_C_string(), ik->name()->as_C_string());\n-          Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n-            class_loader, false, THREAD);\n-          if (HAS_PENDING_EXCEPTION) {\n-            CLEAR_PENDING_EXCEPTION;\n-          }\n-          Klass* k = ik->get_inline_type_field_klass_or_null(fs.index());\n-          if (real_k != k) {\n-            \/\/ oops, the app has substituted a different version of k!\n-            log_warning(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) failed : %s\",\n-                                        name->as_C_string(), ik->name()->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n-            return nullptr;\n-          } else if (real_k != nullptr) {\n-            log_info(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) succeeded\",\n-                                     name->as_C_string(), ik->name()->as_C_string());\n-          }\n-        }\n+          try_preload_from_loadable_descriptors(ik, class_loader, sig, field_index, CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":80,"deletions":33,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+  static bool preload_from_null_free_field(InstanceKlass* ik, Handle class_loader, Symbol* sig, int field_index, TRAPS);\n+  static void try_preload_from_loadable_descriptors(InstanceKlass* ik, Handle class_loader, Symbol* sig, int field_index, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,0 @@\n-runtime\/cds\/appcds\/RewriteBytecodesInlineTest.java 8361082 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}