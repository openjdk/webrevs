{"files":[{"patch":"@@ -6172,1 +6172,2 @@\n-          THROW_MSG(vmSymbols::java_lang_ClassCircularityError(), err_msg(\"Class %s cannot have a null-free non-static field of its own type\", _class_name->as_C_string()));\n+          THROW_MSG(vmSymbols::java_lang_ClassCircularityError(),\n+                    err_msg(\"Class %s cannot have a null-free non-static field of its own type\", _class_name->as_C_string()));\n@@ -6174,2 +6175,7 @@\n-        log_info(class, preload)(\"Preloading class %s during loading of class %s. Cause: a null-free non-static field is declared with this type\", s->as_C_string(), _class_name->as_C_string());\n-        Klass* klass = SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name, s, Handle(THREAD, _loader_data->class_loader()), false, THREAD);\n+        log_info(class, preload)(\"Preloading class %s during loading of class %s. \\\n+                                  Cause: a null-free non-static field is declared with this type\",\n+                                  s->as_C_string(), _class_name->as_C_string());\n+        Klass* klass = SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name, s,\n+                                                                                    Handle(THREAD,\n+                                                                                    _loader_data->class_loader()),\n+                                                                                    false, THREAD);\n@@ -6177,2 +6183,4 @@\n-          log_warning(class, preload)(\"Preloading of class %s during loading of class %s (cause: null-free non-static field) failed: %s\",\n-                                      s->as_C_string(), _class_name->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+          log_warning(class, preload)(\"Preloading of class %s during loading of class %s \\\n+                                      (cause: null-free non-static field) failed: %s\",\n+                                      s->as_C_string(), _class_name->as_C_string(),\n+                                      PENDING_EXCEPTION->klass()->name()->as_C_string());\n@@ -6200,1 +6208,3 @@\n-        log_info(class, preload)(\"Preloading of class %s during loading of class %s (cause: null-free non-static field) succeeded\", s->as_C_string(), _class_name->as_C_string());\n+        log_info(class, preload)(\"Preloading of class %s during loading of class %s \\\n+                                 (cause: null-free non-static field) succeeded\",\n+                                 s->as_C_string(), _class_name->as_C_string());\n@@ -6206,1 +6216,3 @@\n-          log_info(class, preload)(\"Preloading class %s during loading of class %s. Cause: field type in LoadableDescriptors attribute\", name->as_C_string(), _class_name->as_C_string());\n+          log_info(class, preload)(\"Preloading class %s during loading of class %s. \\\n+                                   Cause: field type in LoadableDescriptors attribute\",\n+                                   name->as_C_string(), _class_name->as_C_string());\n@@ -6208,1 +6220,3 @@\n-          Klass* klass = SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name, name, Handle(THREAD, loader), false, THREAD);\n+          Klass* klass = SystemDictionary::resolve_with_circularity_detection_or_fail(_class_name, name,\n+                                                                                      Handle(THREAD, loader),\n+                                                                                      false, THREAD);\n@@ -6212,1 +6226,3 @@\n-              log_info(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in LoadableDescriptors attribute) succeeded\", name->as_C_string(), _class_name->as_C_string());\n+              log_info(class, preload)(\"Preloading of class %s during loading of class %s \\\n+                                       (cause: field type in LoadableDescriptors attribute) succeeded\",\n+                                       name->as_C_string(), _class_name->as_C_string());\n@@ -6215,1 +6231,3 @@\n-              log_warning(class, preload)(\"Preloading class %s during loading of class %s (cause: field type in LoadableDescriptors attribute) but loaded class is not a value class\", name->as_C_string(), _class_name->as_C_string());\n+              log_warning(class, preload)(\"Preloading class %s during loading of class %s \\\n+                                          (cause: field type in LoadableDescriptors attribute) but loaded class is not a value class\",\n+                                          name->as_C_string(), _class_name->as_C_string());\n@@ -6218,2 +6236,4 @@\n-            log_warning(class, preload)(\"Preloading of class %s during loading of class %s (cause: field type in LoadableDescriptors attribute) failed : %s\",\n-                                          name->as_C_string(), _class_name->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+            log_warning(class, preload)(\"Preloading of class %s during loading of class %s \\\n+                                        (cause: field type in LoadableDescriptors attribute) failed : %s\",\n+                                        name->as_C_string(), _class_name->as_C_string(),\n+                                        PENDING_EXCEPTION->klass()->name()->as_C_string());\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":32,"deletions":12,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1078,0 +1078,69 @@\n+\/\/ Pre-load class referred to in non-static null-free instance field. These fields trigger MANDATORY loading.\n+\/\/ Some pre-loading does not fail fatally\n+bool SystemDictionary::preload_from_null_free_field(InstanceKlass* ik, Handle class_loader, Symbol* sig, int field_index, TRAPS) {\n+  TempNewSymbol name = Signature::strip_envelope(sig);\n+  log_info(class, preload)(\"Preloading class %s during loading of shared class %s. \\\n+                           Cause: a null-free non-static field is declared with this type\",\n+                           name->as_C_string(), ik->name()->as_C_string());\n+  InstanceKlass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n+                                                                               class_loader, false, CHECK_false);\n+  if (HAS_PENDING_EXCEPTION) {\n+    log_warning(class, preload)(\"Preloading of class %s during loading of class %s \\\n+                                (cause: null-free non-static field) failed: %s\",\n+                                name->as_C_string(), ik->name()->as_C_string(),\n+                                PENDING_EXCEPTION->klass()->name()->as_C_string());\n+    return false; \/\/ Exception is still pending\n+  }\n+\n+  InstanceKlass* k = ik->get_inline_type_field_klass_or_null(field_index);\n+  if (real_k != k) {\n+    \/\/ oops, the app has substituted a different version of k! Does not fail fatally\n+    log_warning(class, preload)(\"Preloading of class %s during loading of shared class %s \\\n+                                (cause: null-free non-static field) failed : \\\n+                                app substituted a different version of %s\",\n+                                name->as_C_string(), ik->name()->as_C_string(),\n+                                k->name()->as_C_string());\n+    return false;\n+  }\n+  log_info(class, preload)(\"Preloading of class %s during loading of shared class %s \\\n+                           (cause: null-free non-static field) succeeded\",\n+                           name->as_C_string(), ik->name()->as_C_string());\n+\n+  assert(real_k != nullptr, \"Sanity check\");\n+  real_k->check_null_free_field(ik, CHECK_false);\n+\n+  return true;\n+}\n+\n+\/\/ Tries to pre-load classes referred to in non-static nullable instance fields if they are found in the\n+\/\/ loadable descriptors attribute. If loading fails, we can fail silently.\n+void SystemDictionary::try_preload_from_loadable_descriptors(InstanceKlass* ik, Handle class_loader, Symbol* sig, int field_index, TRAPS) {\n+  TempNewSymbol name = Signature::strip_envelope(sig);\n+  if (name != ik->name() && ik->is_class_in_loadable_descriptors_attribute(sig)) {\n+    log_info(class, preload)(\"Preloading class %s during loading of shared class %s. \\\n+                             Cause: field type in LoadableDescriptors attribute\",\n+                             name->as_C_string(), ik->name()->as_C_string());\n+    InstanceKlass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n+                                                                                 class_loader, false, THREAD);\n+    if (HAS_PENDING_EXCEPTION) {\n+      CLEAR_PENDING_EXCEPTION;\n+    }\n+\n+    InstanceKlass* k = ik->get_inline_type_field_klass_or_null(field_index);\n+    if (real_k != k) {\n+      \/\/ oops, the app has substituted a different version of k!\n+      log_warning(class, preload)(\"Preloading of class %s during loading of shared class %s \\\n+                                  (cause: field type in LoadableDescriptors attribute) failed : \\\n+                                  app substituted a different version of %s\",\n+                                  name->as_C_string(), ik->name()->as_C_string(),\n+                                  k->name()->as_C_string());\n+      return;\n+    } else if (real_k != nullptr) {\n+      log_info(class, preload)(\"Preloading of class %s during loading of shared class %s \\\n+                               (cause: field type in LoadableDescriptors attribute) succeeded\",\n+                                name->as_C_string(), ik->name()->as_C_string());\n+    }\n+  }\n+}\n+\n+\n@@ -1104,0 +1173,1 @@\n+\n@@ -1105,0 +1175,2 @@\n+      int field_index = fs.index();\n+\n@@ -1106,10 +1178,3 @@\n-        \/\/ Pre-load inline class\n-        TempNewSymbol name = Signature::strip_envelope(sig);\n-        log_info(class, preload)(\"Preloading class %s during loading of shared class %s. Cause: field type in LoadableDescriptors attribute\", name->as_C_string(), ik->name()->as_C_string());\n-        Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n-          class_loader, false, CHECK_NULL);\n-        Klass* k = ik->get_inline_type_field_klass_or_null(fs.index());\n-        if (real_k != k) {\n-          \/\/ oops, the app has substituted a different version of k!\n-          log_warning(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) failed : %s\",\n-                                      name->as_C_string(), ik->name()->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n+        bool check = preload_from_null_free_field(ik, class_loader, sig, field_index, CHECK_NULL);\n+        if (!check) {\n+          ik->set_shared_loading_failed();\n@@ -1117,3 +1182,0 @@\n-        } else if (real_k != nullptr) {\n-            log_info(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) succeeded\",\n-                                     name->as_C_string(), ik->name()->as_C_string());\n@@ -1122,20 +1184,2 @@\n-        TempNewSymbol name = Signature::strip_envelope(sig);\n-        if (name != ik->name() && ik->is_class_in_loadable_descriptors_attribute(sig)) {\n-          log_info(class, preload)(\"Preloading class %s during loading of shared class %s. Cause: field type in LoadableDescriptors attribute\",\n-                                   name->as_C_string(), ik->name()->as_C_string());\n-          Klass* real_k = SystemDictionary::resolve_with_circularity_detection_or_fail(ik->name(), name,\n-            class_loader, false, THREAD);\n-          if (HAS_PENDING_EXCEPTION) {\n-            CLEAR_PENDING_EXCEPTION;\n-          }\n-          Klass* k = ik->get_inline_type_field_klass_or_null(fs.index());\n-          if (real_k != k) {\n-            \/\/ oops, the app has substituted a different version of k!\n-            log_warning(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) failed : %s\",\n-                                        name->as_C_string(), ik->name()->as_C_string(), PENDING_EXCEPTION->klass()->name()->as_C_string());\n-            return nullptr;\n-          } else if (real_k != nullptr) {\n-            log_info(class, preload)(\"Preloading of class %s during loading of shared class %s (cause: field type in LoadableDescriptors attribute) succeeded\",\n-                                     name->as_C_string(), ik->name()->as_C_string());\n-          }\n-        }\n+          \/\/ Pending exceptions are cleared so we can fail silently\n+          try_preload_from_loadable_descriptors(ik, class_loader, sig, field_index, CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":77,"deletions":33,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+  static bool preload_from_null_free_field(InstanceKlass* ik, Handle class_loader, Symbol* sig, int field_index, TRAPS);\n+  static void try_preload_from_loadable_descriptors(InstanceKlass* ik, Handle class_loader, Symbol* sig, int field_index, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3594,0 +3594,20 @@\n+void InstanceKlass::check_null_free_field(InstanceKlass* ik, TRAPS) {\n+  if (access_flags().is_identity_class()) {\n+    assert(is_instance_klass(), \"Sanity check\");\n+    ResourceMark rm(THREAD);\n+    THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+              err_msg(\"Class %s expects class %s to be a value class, but it is an identity class\",\n+              ik->name()->as_C_string(),\n+              external_name()));\n+  }\n+\n+  if (is_abstract()) {\n+    assert(is_instance_klass(), \"Sanity check\");\n+    ResourceMark rm(THREAD);\n+    THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+              err_msg(\"Class %s expects class %s to be concrete value type, but it is an abstract class\",\n+              ik->name()->as_C_string(),\n+              external_name()));\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -595,0 +595,3 @@\n+  \/\/ Check if this klass can be null-free\n+  void check_null_free_field(InstanceKlass* ik, TRAPS);\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -136,1 +136,0 @@\n-runtime\/cds\/appcds\/RewriteBytecodesInlineTest.java 8361082 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}