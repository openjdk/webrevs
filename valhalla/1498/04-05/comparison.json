{"files":[{"patch":"@@ -6190,1 +6190,1 @@\n-        klass->check_null_free_field(_class_name, CHECK);\n+        InstanceKlass::can_be_annotated_with_NullRestricted(klass, _class_name, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1110,1 +1110,1 @@\n-  real_k->check_null_free_field(ik->name(), CHECK_false);\n+  InstanceKlass::can_be_annotated_with_NullRestricted(real_k, ik->name(), CHECK_false);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3594,3 +3594,3 @@\n-void InstanceKlass::check_null_free_field(Symbol* container_klass_name, TRAPS) {\n-  if (access_flags().is_identity_class()) {\n-    assert(is_instance_klass(), \"Sanity check\");\n+void InstanceKlass::can_be_annotated_with_NullRestricted(InstanceKlass* type, Symbol* container_klass_name, TRAPS) {\n+  assert(type->is_instance_klass(), \"Sanity check\");\n+  if (type->access_flags().is_identity_class()) {\n@@ -3601,1 +3601,1 @@\n-              external_name()));\n+              type->external_name()));\n@@ -3604,2 +3604,1 @@\n-  if (is_abstract()) {\n-    assert(is_instance_klass(), \"Sanity check\");\n+  if (type->is_abstract()) {\n@@ -3610,1 +3609,1 @@\n-              external_name()));\n+              type->external_name()));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -596,1 +596,1 @@\n-  void check_null_free_field(Symbol* container_klass_name, TRAPS);\n+  static void can_be_annotated_with_NullRestricted(InstanceKlass* type, Symbol* container_klass_name, TRAPS);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}