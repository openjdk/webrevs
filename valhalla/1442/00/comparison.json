{"files":[{"patch":"@@ -620,1 +620,0 @@\n-        \/\/ TODO 8350865 Should we add the membar to the CastI2N and give it a type?\n@@ -622,2 +621,5 @@\n-        \/\/ Prevent the CastI2N from floating below a safepoint\n-        kit->insert_mem_bar(Op_MemBarVolatile, value);\n+\n+        \/\/ Similar to CheckCastPP nodes with raw input, CastI2N nodes require special handling in 'PhaseCFG::schedule_late' to ensure the\n+        \/\/ register allocator does not move the CastI2N below a safepoint. This is necessary to avoid having the raw pointer span a safepoint,\n+        \/\/ making it opaque to the GC. Unlike CheckCastPPs, which need extra handling in 'Scheduling::ComputeRegisterAntidependencies' due to\n+        \/\/ scalarization, CastI2N nodes are always used by a load if scalarization happens which inherently keeps them pinned above the safepoint.\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8260034 8260225 8260283 8261037 8261874 8262128 8262831 8306986\n+ * @bug 8260034 8260225 8260283 8261037 8261874 8262128 8262831 8306986 8355299\n@@ -35,0 +35,2 @@\n+ * @run main\/othervm -Xbatch -XX:+UseNullableValueFlattening -XX:+UseAtomicValueFlattening -XX:+UseNonAtomicValueFlattening\n+ *                   compiler.valhalla.inlinetypes.TestGenerated\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}