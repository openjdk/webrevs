{"files":[{"patch":"@@ -46,1 +46,1 @@\n-value class MyValue1_ArrayAccessDeopt {\n+value class MyValue1ArrayAccessDeopt {\n@@ -56,1 +56,1 @@\n-    public static void test2(Object[] va, MyValue1_ArrayAccessDeopt vt) {\n+    public static void test2(Object[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -60,2 +60,2 @@\n-    public static void test3(MyValue1_ArrayAccessDeopt[] va, Object vt) {\n-        va[0] = (MyValue1_ArrayAccessDeopt)vt;\n+    public static void test3(MyValue1ArrayAccessDeopt[] va, Object vt) {\n+        va[0] = (MyValue1ArrayAccessDeopt)vt;\n@@ -64,1 +64,1 @@\n-    public static void test4(MyValue1_ArrayAccessDeopt[] va, MyValue1_ArrayAccessDeopt vt) {\n+    public static void test4(MyValue1ArrayAccessDeopt[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -68,1 +68,1 @@\n-    public static void test5(Object[] va, MyValue1_ArrayAccessDeopt vt) {\n+    public static void test5(Object[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -72,2 +72,2 @@\n-    public static void test6(MyValue1_ArrayAccessDeopt[] va, Object vt) {\n-        va[0] = (MyValue1_ArrayAccessDeopt)Objects.requireNonNull(vt);\n+    public static void test6(MyValue1ArrayAccessDeopt[] va, Object vt) {\n+        va[0] = (MyValue1ArrayAccessDeopt)Objects.requireNonNull(vt);\n@@ -76,1 +76,1 @@\n-    public static void test7(MyValue1_ArrayAccessDeopt[] va, MyValue1_ArrayAccessDeopt vt) {\n+    public static void test7(MyValue1ArrayAccessDeopt[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -80,1 +80,1 @@\n-    public static void test8(MyValue1_ArrayAccessDeopt[] va, MyValue1_ArrayAccessDeopt vt) {\n+    public static void test8(MyValue1ArrayAccessDeopt[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -84,1 +84,1 @@\n-    public static void test9(MyValue1_ArrayAccessDeopt[] va, MyValue1_ArrayAccessDeopt vt) {\n+    public static void test9(MyValue1ArrayAccessDeopt[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -92,1 +92,1 @@\n-    public static void test11(MyValue1_ArrayAccessDeopt[] va) {\n+    public static void test11(MyValue1ArrayAccessDeopt[] va) {\n@@ -107,3 +107,3 @@\n-            MyValue1_ArrayAccessDeopt[] va = (MyValue1_ArrayAccessDeopt[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1_ArrayAccessDeopt.class, 1, new MyValue1_ArrayAccessDeopt());\n-            MyValue1_ArrayAccessDeopt[] vaB = new MyValue1_ArrayAccessDeopt[1];\n-            MyValue1_ArrayAccessDeopt vt = new MyValue1_ArrayAccessDeopt();\n+            MyValue1ArrayAccessDeopt[] va = (MyValue1ArrayAccessDeopt[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1ArrayAccessDeopt.class, 1, new MyValue1ArrayAccessDeopt());\n+            MyValue1ArrayAccessDeopt[] vaB = new MyValue1ArrayAccessDeopt[1];\n+            MyValue1ArrayAccessDeopt vt = new MyValue1ArrayAccessDeopt();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayAccessDeopt.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-value class MyValue_ArrayRematWithProp  {\n+value class MyValueArrayRematWithProp  {\n@@ -49,1 +49,1 @@\n-    static final MyValue_ArrayRematWithProp DEFAULT = new MyValue_ArrayRematWithProp();\n+    static final MyValueArrayRematWithProp DEFAULT = new MyValueArrayRematWithProp();\n@@ -54,4 +54,4 @@\n-    static final boolean FLAT0 = ValueClass.isFlatArray(new MyValue_ArrayRematWithProp[1]);\n-    static final boolean FLAT1 = ValueClass.isFlatArray(ValueClass.newNullRestrictedAtomicArray(MyValue_ArrayRematWithProp.class, 1, MyValue_ArrayRematWithProp.DEFAULT));\n-    static final boolean FLAT2 = ValueClass.isFlatArray(ValueClass.newNullableAtomicArray(MyValue_ArrayRematWithProp.class, 1));\n-    static final boolean FLAT3 = ValueClass.isFlatArray(ValueClass.newNullRestrictedNonAtomicArray(MyValue_ArrayRematWithProp.class, 1, MyValue_ArrayRematWithProp.DEFAULT));\n+    static final boolean FLAT0 = ValueClass.isFlatArray(new MyValueArrayRematWithProp[1]);\n+    static final boolean FLAT1 = ValueClass.isFlatArray(ValueClass.newNullRestrictedAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT));\n+    static final boolean FLAT2 = ValueClass.isFlatArray(ValueClass.newNullableAtomicArray(MyValueArrayRematWithProp.class, 1));\n+    static final boolean FLAT3 = ValueClass.isFlatArray(ValueClass.newNullRestrictedNonAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT));\n@@ -59,4 +59,4 @@\n-    static final boolean ATOMIC0 = ValueClass.isAtomicArray(new MyValue_ArrayRematWithProp[1]);\n-    static final boolean ATOMIC1 = ValueClass.isAtomicArray(ValueClass.newNullRestrictedAtomicArray(MyValue_ArrayRematWithProp.class, 1, MyValue_ArrayRematWithProp.DEFAULT));\n-    static final boolean ATOMIC2 = ValueClass.isAtomicArray(ValueClass.newNullableAtomicArray(MyValue_ArrayRematWithProp.class, 1));\n-    static final boolean ATOMIC3 = ValueClass.isAtomicArray(ValueClass.newNullRestrictedNonAtomicArray(MyValue_ArrayRematWithProp.class, 1, MyValue_ArrayRematWithProp.DEFAULT));\n+    static final boolean ATOMIC0 = ValueClass.isAtomicArray(new MyValueArrayRematWithProp[1]);\n+    static final boolean ATOMIC1 = ValueClass.isAtomicArray(ValueClass.newNullRestrictedAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT));\n+    static final boolean ATOMIC2 = ValueClass.isAtomicArray(ValueClass.newNullableAtomicArray(MyValueArrayRematWithProp.class, 1));\n+    static final boolean ATOMIC3 = ValueClass.isAtomicArray(ValueClass.newNullRestrictedNonAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT));\n@@ -66,5 +66,5 @@\n-        MyValue_ArrayRematWithProp[] array0 = { MyValue_ArrayRematWithProp.DEFAULT };\n-        MyValue_ArrayRematWithProp[] array1 = (MyValue_ArrayRematWithProp[])ValueClass.newNullRestrictedAtomicArray(MyValue_ArrayRematWithProp.class, 1, MyValue_ArrayRematWithProp.DEFAULT);\n-        MyValue_ArrayRematWithProp[] array2 = (MyValue_ArrayRematWithProp[])ValueClass.newNullableAtomicArray(MyValue_ArrayRematWithProp.class, 1);\n-        array2[0] = MyValue_ArrayRematWithProp.DEFAULT;\n-        MyValue_ArrayRematWithProp[] array3 = (MyValue_ArrayRematWithProp[])ValueClass.newNullRestrictedNonAtomicArray(MyValue_ArrayRematWithProp.class, 1, MyValue_ArrayRematWithProp.DEFAULT);\n+        MyValueArrayRematWithProp[] array0 = { MyValueArrayRematWithProp.DEFAULT };\n+        MyValueArrayRematWithProp[] array1 = (MyValueArrayRematWithProp[])ValueClass.newNullRestrictedAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT);\n+        MyValueArrayRematWithProp[] array2 = (MyValueArrayRematWithProp[])ValueClass.newNullableAtomicArray(MyValueArrayRematWithProp.class, 1);\n+        array2[0] = MyValueArrayRematWithProp.DEFAULT;\n+        MyValueArrayRematWithProp[] array3 = (MyValueArrayRematWithProp[])ValueClass.newNullRestrictedNonAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT);\n@@ -74,4 +74,4 @@\n-            Asserts.assertEquals(array0[0], MyValue_ArrayRematWithProp.DEFAULT);\n-            Asserts.assertEquals(array1[0], MyValue_ArrayRematWithProp.DEFAULT);\n-            Asserts.assertEquals(array2[0], MyValue_ArrayRematWithProp.DEFAULT);\n-            Asserts.assertEquals(array3[0], MyValue_ArrayRematWithProp.DEFAULT);\n+            Asserts.assertEquals(array0[0], MyValueArrayRematWithProp.DEFAULT);\n+            Asserts.assertEquals(array1[0], MyValueArrayRematWithProp.DEFAULT);\n+            Asserts.assertEquals(array2[0], MyValueArrayRematWithProp.DEFAULT);\n+            Asserts.assertEquals(array3[0], MyValueArrayRematWithProp.DEFAULT);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayRematerializationWithProperties.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-interface MyInterface_BimorphicInlining {\n-    public MyInterface_BimorphicInlining hash(MyInterface_BimorphicInlining arg);\n+interface MyInterfaceBimorphicInlining {\n+    public MyInterfaceBimorphicInlining hash(MyInterfaceBimorphicInlining arg);\n@@ -51,1 +51,1 @@\n-value class TestValue1_BimorphicInlining implements MyInterface_BimorphicInlining {\n+value class TestValue1BimorphicInlining implements MyInterfaceBimorphicInlining {\n@@ -54,1 +54,1 @@\n-    public TestValue1_BimorphicInlining(int x) {\n+    public TestValue1BimorphicInlining(int x) {\n@@ -58,2 +58,2 @@\n-    public TestValue1_BimorphicInlining hash(MyInterface_BimorphicInlining arg) {\n-        return new TestValue1_BimorphicInlining(x + ((TestValue1_BimorphicInlining)arg).x);\n+    public TestValue1BimorphicInlining hash(MyInterfaceBimorphicInlining arg) {\n+        return new TestValue1BimorphicInlining(x + ((TestValue1BimorphicInlining)arg).x);\n@@ -63,1 +63,1 @@\n-value class TestValue2_BimorphicInlining implements MyInterface_BimorphicInlining {\n+value class TestValue2BimorphicInlining implements MyInterfaceBimorphicInlining {\n@@ -66,1 +66,1 @@\n-    public TestValue2_BimorphicInlining(int x) {\n+    public TestValue2BimorphicInlining(int x) {\n@@ -70,2 +70,2 @@\n-    public TestValue2_BimorphicInlining hash(MyInterface_BimorphicInlining arg) {\n-        return new TestValue2_BimorphicInlining(x + ((TestValue2_BimorphicInlining)arg).x);\n+    public TestValue2BimorphicInlining hash(MyInterfaceBimorphicInlining arg) {\n+        return new TestValue2BimorphicInlining(x + ((TestValue2BimorphicInlining)arg).x);\n@@ -75,1 +75,1 @@\n-class TestClass_BimorphicInlining implements MyInterface_BimorphicInlining {\n+class TestClassBimorphicInlining implements MyInterfaceBimorphicInlining {\n@@ -78,1 +78,1 @@\n-    public TestClass_BimorphicInlining(int x) {\n+    public TestClassBimorphicInlining(int x) {\n@@ -82,2 +82,2 @@\n-    public MyInterface_BimorphicInlining hash(MyInterface_BimorphicInlining arg) {\n-        return new TestClass_BimorphicInlining(x + ((TestClass_BimorphicInlining)arg).x);\n+    public MyInterfaceBimorphicInlining hash(MyInterfaceBimorphicInlining arg) {\n+        return new TestClassBimorphicInlining(x + ((TestClassBimorphicInlining)arg).x);\n@@ -89,2 +89,2 @@\n-    public static MyInterface_BimorphicInlining test1(MyInterface_BimorphicInlining i1, MyInterface_BimorphicInlining i2) {\n-        MyInterface_BimorphicInlining result = i1.hash(i2);\n+    public static MyInterfaceBimorphicInlining test1(MyInterfaceBimorphicInlining i1, MyInterfaceBimorphicInlining i2) {\n+        MyInterfaceBimorphicInlining result = i1.hash(i2);\n@@ -95,2 +95,2 @@\n-    public static MyInterface_BimorphicInlining test2(MyInterface_BimorphicInlining i1, MyInterface_BimorphicInlining i2) {\n-        MyInterface_BimorphicInlining result = i1.hash(i2);\n+    public static MyInterfaceBimorphicInlining test2(MyInterfaceBimorphicInlining i1, MyInterfaceBimorphicInlining i2) {\n+        MyInterfaceBimorphicInlining result = i1.hash(i2);\n@@ -101,2 +101,2 @@\n-    public static MyInterface_BimorphicInlining test3(MyInterface_BimorphicInlining i1, MyInterface_BimorphicInlining i2) {\n-        MyInterface_BimorphicInlining result = i1.hash(i2);\n+    public static MyInterfaceBimorphicInlining test3(MyInterfaceBimorphicInlining i1, MyInterfaceBimorphicInlining i2) {\n+        MyInterfaceBimorphicInlining result = i1.hash(i2);\n@@ -107,2 +107,2 @@\n-    public static MyInterface_BimorphicInlining test4(MyInterface_BimorphicInlining i1, MyInterface_BimorphicInlining i2) {\n-        MyInterface_BimorphicInlining result = i1.hash(i2);\n+    public static MyInterfaceBimorphicInlining test4(MyInterfaceBimorphicInlining i1, MyInterfaceBimorphicInlining i2) {\n+        MyInterfaceBimorphicInlining result = i1.hash(i2);\n@@ -115,3 +115,3 @@\n-        TestClass_BimorphicInlining  testObject = new TestClass_BimorphicInlining(rand.nextInt());\n-        TestValue1_BimorphicInlining TestValue1_BimorphicInlining = new TestValue1_BimorphicInlining(rand.nextInt());\n-        TestValue2_BimorphicInlining TestValue2_BimorphicInlining = new TestValue2_BimorphicInlining(rand.nextInt());\n+        TestClassBimorphicInlining  testObject = new TestClassBimorphicInlining(rand.nextInt());\n+        TestValue1BimorphicInlining TestValue1BimorphicInlining = new TestValue1BimorphicInlining(rand.nextInt());\n+        TestValue2BimorphicInlining TestValue2BimorphicInlining = new TestValue2BimorphicInlining(rand.nextInt());\n@@ -121,1 +121,1 @@\n-            MyInterface_BimorphicInlining arg, res;\n+            MyInterfaceBimorphicInlining arg, res;\n@@ -124,1 +124,1 @@\n-            arg = rare ? TestValue1_BimorphicInlining : testObject;\n+            arg = rare ? TestValue1BimorphicInlining : testObject;\n@@ -126,1 +126,1 @@\n-            Asserts.assertEQ(rare ? ((TestValue1_BimorphicInlining)res).x : ((TestClass_BimorphicInlining)res).x, 2 * (rare ? TestValue1_BimorphicInlining.x : testObject.x), \"test1 failed\");\n+            Asserts.assertEQ(rare ? ((TestValue1BimorphicInlining)res).x : ((TestClassBimorphicInlining)res).x, 2 * (rare ? TestValue1BimorphicInlining.x : testObject.x), \"test1 failed\");\n@@ -128,1 +128,1 @@\n-            arg = rare ? testObject : TestValue1_BimorphicInlining;\n+            arg = rare ? testObject : TestValue1BimorphicInlining;\n@@ -130,1 +130,1 @@\n-            Asserts.assertEQ(rare ? ((TestClass_BimorphicInlining)res).x : ((TestValue1_BimorphicInlining)res).x, 2 * (rare ? testObject.x : TestValue1_BimorphicInlining.x), \"test2 failed\");\n+            Asserts.assertEQ(rare ? ((TestClassBimorphicInlining)res).x : ((TestValue1BimorphicInlining)res).x, 2 * (rare ? testObject.x : TestValue1BimorphicInlining.x), \"test2 failed\");\n@@ -132,1 +132,1 @@\n-            arg = rare ? TestValue1_BimorphicInlining : TestValue2_BimorphicInlining;\n+            arg = rare ? TestValue1BimorphicInlining : TestValue2BimorphicInlining;\n@@ -134,1 +134,1 @@\n-            Asserts.assertEQ(rare ? ((TestValue1_BimorphicInlining)res).x : ((TestValue2_BimorphicInlining)res).x, 2 * (rare ? TestValue1_BimorphicInlining.x : TestValue2_BimorphicInlining.x), \"test3 failed\");\n+            Asserts.assertEQ(rare ? ((TestValue1BimorphicInlining)res).x : ((TestValue2BimorphicInlining)res).x, 2 * (rare ? TestValue1BimorphicInlining.x : TestValue2BimorphicInlining.x), \"test3 failed\");\n@@ -136,1 +136,1 @@\n-            arg = rare ? TestValue2_BimorphicInlining : TestValue1_BimorphicInlining;\n+            arg = rare ? TestValue2BimorphicInlining : TestValue1BimorphicInlining;\n@@ -138,1 +138,1 @@\n-            Asserts.assertEQ(rare ? ((TestValue2_BimorphicInlining)res).x : ((TestValue1_BimorphicInlining)res).x, 2 * (rare ? TestValue2_BimorphicInlining.x : TestValue1_BimorphicInlining.x), \"test4 failed\");\n+            Asserts.assertEQ(rare ? ((TestValue2BimorphicInlining)res).x : ((TestValue1BimorphicInlining)res).x, 2 * (rare ? TestValue2BimorphicInlining.x : TestValue1BimorphicInlining.x), \"test4 failed\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBimorphicInlining.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-value class Point_BufferTearingC1 {\n+value class PointBufferTearingC1 {\n@@ -48,1 +48,1 @@\n-    public Point_BufferTearingC1(int x, int y) {\n+    public PointBufferTearingC1(int x, int y) {\n@@ -53,1 +53,1 @@\n-    public static final Point_BufferTearingC1 DEFAULT = new Point_BufferTearingC1(0, 0);\n+    public static final PointBufferTearingC1 DEFAULT = new PointBufferTearingC1(0, 0);\n@@ -58,1 +58,1 @@\n-    public Point_BufferTearingC1 a, b;\n+    public PointBufferTearingC1 a, b;\n@@ -60,1 +60,1 @@\n-    public Rect(Point_BufferTearingC1 a, Point_BufferTearingC1 b) {\n+    public Rect(PointBufferTearingC1 a, PointBufferTearingC1 b) {\n@@ -65,1 +65,1 @@\n-    public static final Rect DEFAULT = new Rect(Point_BufferTearingC1.DEFAULT, Point_BufferTearingC1.DEFAULT);\n+    public static final Rect DEFAULT = new Rect(PointBufferTearingC1.DEFAULT, PointBufferTearingC1.DEFAULT);\n@@ -70,2 +70,2 @@\n-    public static Point_BufferTearingC1[] points = (Point_BufferTearingC1[])ValueClass.newNullRestrictedNonAtomicArray(Point_BufferTearingC1.class, 1, Point_BufferTearingC1.DEFAULT);\n-    public static Rect rect = new Rect(new Point_BufferTearingC1(1, 1), new Point_BufferTearingC1(2, 2));\n+    public static PointBufferTearingC1[] points = (PointBufferTearingC1[])ValueClass.newNullRestrictedNonAtomicArray(PointBufferTearingC1.class, 1, PointBufferTearingC1.DEFAULT);\n+    public static Rect rect = new Rect(new PointBufferTearingC1(1, 1), new PointBufferTearingC1(2, 2));\n@@ -75,1 +75,1 @@\n-        points[0] = new Point_BufferTearingC1(1, 1);\n+        points[0] = new PointBufferTearingC1(1, 1);\n@@ -90,2 +90,2 @@\n-        points[0] = new Point_BufferTearingC1(iter, iter);\n-        rect = new Rect(new Point_BufferTearingC1(iter, iter), new Point_BufferTearingC1(iter + 1, iter + 1));\n+        points[0] = new PointBufferTearingC1(iter, iter);\n+        rect = new Rect(new PointBufferTearingC1(iter, iter), new PointBufferTearingC1(iter + 1, iter + 1));\n@@ -104,1 +104,1 @@\n-            if (((Point_BufferTearingC1)ref1).x == 0 || ((Point_BufferTearingC1)ref1).y == 0) {\n+            if (((PointBufferTearingC1)ref1).x == 0 || ((PointBufferTearingC1)ref1).y == 0) {\n@@ -108,1 +108,1 @@\n-            if (((Point_BufferTearingC1)ref2).x == 0 || ((Point_BufferTearingC1)ref2).y == 0) {\n+            if (((PointBufferTearingC1)ref2).x == 0 || ((PointBufferTearingC1)ref2).y == 0) {\n@@ -112,1 +112,1 @@\n-            if (((Point_BufferTearingC1)ref3).x == 0 || ((Point_BufferTearingC1)ref3).y == 0) {\n+            if (((PointBufferTearingC1)ref3).x == 0 || ((PointBufferTearingC1)ref3).y == 0) {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearingC1.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1365,1 +1365,1 @@\n-    value class MyValue58_1 extends MyAbstract58 {\n+    value class MyValue58A extends MyAbstract58 {\n@@ -1369,1 +1369,1 @@\n-    value class MyValue58_2 extends MyAbstract58 {\n+    value class MyValue58B extends MyAbstract58 {\n@@ -1374,1 +1374,1 @@\n-    value class MyValue58_3 extends MyAbstract58 {\n+    value class MyValue58C extends MyAbstract58 {\n@@ -1385,4 +1385,4 @@\n-    public MyValue58_3 test58(MyValue58_1 arg1, MyValue58_2 arg2, MyValue58_3 arg3) {\n-        Asserts.assertEQ(arg1, new MyValue58_1());\n-        Asserts.assertEQ(arg2, new MyValue58_2());\n-        Asserts.assertEQ(arg3, new MyValue58_3());\n+    public MyValue58C test58(MyValue58A arg1, MyValue58B arg2, MyValue58C arg3) {\n+        Asserts.assertEQ(arg1, new MyValue58A());\n+        Asserts.assertEQ(arg2, new MyValue58B());\n+        Asserts.assertEQ(arg3, new MyValue58C());\n@@ -1394,1 +1394,1 @@\n-        Asserts.assertEQ(test58(new MyValue58_1(), new MyValue58_2(), new MyValue58_3()), new MyValue58_3());\n+        Asserts.assertEQ(test58(new MyValue58A(), new MyValue58B(), new MyValue58C()), new MyValue58C());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-    static interface RefPoint_Access {\n+    static interface RefPointAccess {\n@@ -371,1 +371,1 @@\n-    static value class RefPoint implements RefPoint_Access {\n+    static value class RefPoint implements RefPointAccess {\n@@ -408,1 +408,1 @@\n-    static class RefPoint_Access_Impl1 implements RefPoint_Access {\n+    static class RefPointAccessImpl1 implements RefPointAccess {\n@@ -426,1 +426,1 @@\n-    static class RefPoint_Access_Impl2 implements RefPoint_Access {\n+    static class RefPointAccessImpl2 implements RefPointAccess {\n@@ -444,3 +444,3 @@\n-    static RefPoint_Access refPoint_Access_impls[] = {\n-        new RefPoint_Access_Impl1(),\n-        new RefPoint_Access_Impl2(),\n+    static RefPointAccess refPoint_Access_impls[] = {\n+        new RefPointAccessImpl1(),\n+        new RefPointAccessImpl2(),\n@@ -450,3 +450,3 @@\n-    static int next_RefPoint_Access = 0;\n-    static RefPoint_Access get_RefPoint_Access() {\n-        int i = next_RefPoint_Access ++;\n+    static int next_RefPointAccess = 0;\n+    static RefPointAccess get_RefPointAccess() {\n+        int i = next_RefPointAccess ++;\n@@ -1470,1 +1470,1 @@\n-    public int test61(RefPoint_Access rpa, RefPoint rp2) {\n+    public int test61(RefPointAccess rpa, RefPoint rp2) {\n@@ -1478,1 +1478,1 @@\n-            RefPoint_Access rpa = get_RefPoint_Access();\n+            RefPointAccess rpa = get_RefPointAccess();\n@@ -1488,1 +1488,1 @@\n-    public int test62(RefPoint_Access rpa, RefPoint rp2) {\n+    public int test62(RefPointAccess rpa, RefPoint rp2) {\n@@ -1496,1 +1496,1 @@\n-            RefPoint_Access rpa = get_RefPoint_Access();\n+            RefPointAccess rpa = get_RefPointAccess();\n@@ -1509,1 +1509,1 @@\n-    public int test63(RefPoint_Access rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n+    public int test63(RefPointAccess rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n@@ -1517,1 +1517,1 @@\n-            RefPoint_Access rpa = get_RefPoint_Access();\n+            RefPointAccess rpa = get_RefPointAccess();\n@@ -1535,1 +1535,1 @@\n-    public int test64(RefPoint_Access rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n+    public int test64(RefPointAccess rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n@@ -1541,1 +1541,1 @@\n-    public static int test64_helper(RefPoint_Access rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n+    public static int test64_helper(RefPointAccess rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n@@ -1549,1 +1549,1 @@\n-            RefPoint_Access rpa = get_RefPoint_Access();\n+            RefPointAccess rpa = get_RefPointAccess();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @Test_DeadAllocRem\n+ * @TestDeadAllocRem\n@@ -27,1 +27,1 @@\n- * @summary Test_DeadAllocRem removal of an already dead AllocateNode with not-yet removed proj outputs.\n+ * @summary TestDeadAllocRem removal of an already dead AllocateNode with not-yet removed proj outputs.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xbatch compiler.valhalla.inlinetypes.Test_DeadAllocRemDeadAllocationRemoval\n+ * @run main\/othervm -Xbatch compiler.valhalla.inlinetypes.TestDeadAllocRemDeadAllocationRemoval\n@@ -43,1 +43,1 @@\n-        Test_DeadAllocRem Test_DeadAllocRem = new Test_DeadAllocRem();\n+        TestDeadAllocRem TestDeadAllocRem = new TestDeadAllocRem();\n@@ -45,1 +45,1 @@\n-            Test_DeadAllocRem.Test_DeadAllocRem();\n+            TestDeadAllocRem.TestDeadAllocRem();\n@@ -51,1 +51,1 @@\n-value class MyValue_DeadAllocRem {\n+value class MyValueDeadAllocRem {\n@@ -58,1 +58,1 @@\n-class Test_DeadAllocRem {\n+class TestDeadAllocRem {\n@@ -69,1 +69,1 @@\n-    public static MyValue_DeadAllocRem OFld=new MyValue_DeadAllocRem();\n+    public static MyValueDeadAllocRem OFld=new MyValueDeadAllocRem();\n@@ -82,1 +82,1 @@\n-    public void Test_DeadAllocRem() {\n+    public void TestDeadAllocRem() {\n@@ -86,1 +86,1 @@\n-        vMeth(Test_DeadAllocRem.iFld);\n+        vMeth(TestDeadAllocRem.iFld);\n@@ -91,1 +91,1 @@\n-                Test_DeadAllocRem.dArrFld[(int)(d3)] = -7;\n+                TestDeadAllocRem.dArrFld[(int)(d3)] = -7;\n@@ -95,6 +95,6 @@\n-                        Test_DeadAllocRem.instanceCount = i22;\n-                        Test_DeadAllocRem.iFld -= (int)Test_DeadAllocRem.OFld.fFld1;\n-                        Test_DeadAllocRem.instanceCount >>= MyValue_DeadAllocRem.instanceCount;\n-                        i22 = (int)Test_DeadAllocRem.OFld.fFld1;\n-                        Test_DeadAllocRem.bFld1 = false;\n-                        Test_DeadAllocRem.iArrFld[(int)(d3 - 1)] &= i23;\n+                        TestDeadAllocRem.instanceCount = i22;\n+                        TestDeadAllocRem.iFld -= (int)TestDeadAllocRem.OFld.fFld1;\n+                        TestDeadAllocRem.instanceCount >>= MyValueDeadAllocRem.instanceCount;\n+                        i22 = (int)TestDeadAllocRem.OFld.fFld1;\n+                        TestDeadAllocRem.bFld1 = false;\n+                        TestDeadAllocRem.iArrFld[(int)(d3 - 1)] &= i23;\n@@ -103,1 +103,1 @@\n-                        Test_DeadAllocRem.iFld |= (int)MyValue_DeadAllocRem.instanceCount;\n+                        TestDeadAllocRem.iFld |= (int)MyValueDeadAllocRem.instanceCount;\n@@ -105,1 +105,1 @@\n-                    Test_DeadAllocRem.iFld -= (int)Test_DeadAllocRem.instanceCount;\n+                    TestDeadAllocRem.iFld -= (int)TestDeadAllocRem.instanceCount;\n@@ -111,2 +111,2 @@\n-                        Test_DeadAllocRem.iArrFld[i25 + 1] += (int)MyValue_DeadAllocRem.instanceCount;\n-                        i22 += (i25 - Test_DeadAllocRem.instanceCount);\n+                        TestDeadAllocRem.iArrFld[i25 + 1] += (int)MyValueDeadAllocRem.instanceCount;\n+                        i22 += (i25 - TestDeadAllocRem.instanceCount);\n@@ -115,3 +115,3 @@\n-                    Test_DeadAllocRem.instanceCount -= 2;\n-                    Test_DeadAllocRem.dFld = i22;\n-                    Test_DeadAllocRem.iFld += (int)(((d3 * by) + by) - i24);\n+                    TestDeadAllocRem.instanceCount -= 2;\n+                    TestDeadAllocRem.dFld = i22;\n+                    TestDeadAllocRem.iFld += (int)(((d3 * by) + by) - i24);\n@@ -121,1 +121,1 @@\n-                    Test_DeadAllocRem.OFld = new MyValue_DeadAllocRem();\n+                    TestDeadAllocRem.OFld = new MyValueDeadAllocRem();\n@@ -124,2 +124,2 @@\n-                    Test_DeadAllocRem.OFld = new MyValue_DeadAllocRem();\n-                    MyValue_DeadAllocRem.instanceCount += (long)d3;\n+                    TestDeadAllocRem.OFld = new MyValueDeadAllocRem();\n+                    MyValueDeadAllocRem.instanceCount += (long)d3;\n@@ -128,1 +128,1 @@\n-                    MyValue_DeadAllocRem.instanceCount += (long)(d3 * d3);\n+                    MyValueDeadAllocRem.instanceCount += (long)(d3 * d3);\n@@ -131,1 +131,1 @@\n-                    Test_DeadAllocRem.dFld -= i25;\n+                    TestDeadAllocRem.dFld -= i25;\n@@ -134,2 +134,2 @@\n-                        i24 = (78 \/ Test_DeadAllocRem.iFld);\n-                        Test_DeadAllocRem.iFld = (-5836 \/ Test_DeadAllocRem.iArrFld[(int)(d3 + 1)]);\n+                        i24 = (78 \/ TestDeadAllocRem.iFld);\n+                        TestDeadAllocRem.iFld = (-5836 \/ TestDeadAllocRem.iArrFld[(int)(d3 + 1)]);\n@@ -140,1 +140,1 @@\n-                    if (Test_DeadAllocRem.bFld1) continue;\n+                    if (TestDeadAllocRem.bFld1) continue;\n@@ -145,2 +145,2 @@\n-                        i24 = (Test_DeadAllocRem.iArrFld[(int)(d3)] % -1067487586);\n-                        Test_DeadAllocRem.iArrFld[(int)(d3)] = (-208 % i24);\n+                        i24 = (TestDeadAllocRem.iArrFld[(int)(d3)] % -1067487586);\n+                        TestDeadAllocRem.iArrFld[(int)(d3)] = (-208 % i24);\n@@ -153,4 +153,4 @@\n-        System.out.println(\"i23 i24 Test_DeadAllocRem.OFld.fFld1 = \" + i23 + \",\" + i24 + \",\" + Float.floatToIntBits(Test_DeadAllocRem.OFld.fFld1));\n-        System.out.println(\"MyValue_DeadAllocRem = \" + MyValue_DeadAllocRem.instanceCount);\n-        System.out.println(\"Test_DeadAllocRem.instanceCount Test_DeadAllocRem.dFld Test_DeadAllocRem.bFld1 = \" + Test_DeadAllocRem.instanceCount + \",\" + Double.doubleToLongBits(Test_DeadAllocRem.dFld) + \",\" + (Test_DeadAllocRem.bFld1 ? 1 : 0));\n-        System.out.println(\"MyValue_DeadAllocRem = \" + MyValue_DeadAllocRem.instanceCount);\n+        System.out.println(\"i23 i24 TestDeadAllocRem.OFld.fFld1 = \" + i23 + \",\" + i24 + \",\" + Float.floatToIntBits(TestDeadAllocRem.OFld.fFld1));\n+        System.out.println(\"MyValueDeadAllocRem = \" + MyValueDeadAllocRem.instanceCount);\n+        System.out.println(\"TestDeadAllocRem.instanceCount TestDeadAllocRem.dFld TestDeadAllocRem.bFld1 = \" + TestDeadAllocRem.instanceCount + \",\" + Double.doubleToLongBits(TestDeadAllocRem.dFld) + \",\" + (TestDeadAllocRem.bFld1 ? 1 : 0));\n+        System.out.println(\"MyValueDeadAllocRem = \" + MyValueDeadAllocRem.instanceCount);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeadAllocationRemoval.java","additions":38,"deletions":38,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-    static value class MyValue5_3 {\n+    static value class MyValue5C {\n@@ -309,1 +309,1 @@\n-        public MyValue5_3(byte x) {\n+        public MyValue5C(byte x) {\n@@ -315,1 +315,1 @@\n-    static value class MyValue5_2 {\n+    static value class MyValue5B {\n@@ -317,1 +317,1 @@\n-        MyValue5_3 val;\n+        MyValue5C val;\n@@ -319,1 +319,1 @@\n-        public MyValue5_2(byte x, MyValue5_3 val) {\n+        public MyValue5B(byte x, MyValue5C val) {\n@@ -326,1 +326,1 @@\n-    static value class MyValue5_1 {\n+    static value class MyValue5A {\n@@ -328,1 +328,1 @@\n-        MyValue5_2 val;\n+        MyValue5B val;\n@@ -330,1 +330,1 @@\n-        public MyValue5_1(byte x, MyValue5_2 val) {\n+        public MyValue5A(byte x, MyValue5B val) {\n@@ -340,1 +340,1 @@\n-        MyValue5_1 val;\n+        MyValue5A val;\n@@ -342,1 +342,1 @@\n-        public MyValue5(byte x, MyValue5_1 val) {\n+        public MyValue5(byte x, MyValue5A val) {\n@@ -588,1 +588,1 @@\n-    static final MyValue5 VAL5 = new MyValue5((byte)42, new MyValue5_1((byte)43, new MyValue5_2((byte)44, new MyValue5_3((byte)45))));\n+    static final MyValue5 VAL5 = new MyValue5((byte)42, new MyValue5A((byte)43, new MyValue5B((byte)44, new MyValue5C((byte)45))));\n@@ -790,3 +790,3 @@\n-        MyValue5 val1 = new MyValue5(x, new MyValue5_1(x, new MyValue5_2(x, new MyValue5_3(x))));\n-        MyValue5 val2 = new MyValue5(x, new MyValue5_1(x, new MyValue5_2(x, null)));\n-        MyValue5 val3 = new MyValue5(x, new MyValue5_1(x, null));\n+        MyValue5 val1 = new MyValue5(x, new MyValue5A(x, new MyValue5B(x, new MyValue5C(x))));\n+        MyValue5 val2 = new MyValue5(x, new MyValue5A(x, new MyValue5B(x, null)));\n+        MyValue5 val3 = new MyValue5(x, new MyValue5A(x, null));\n@@ -1058,3 +1058,3 @@\n-            MyValue5_3 val5_3 = useNull_3 ? null : new MyValue5_3((byte)i);\n-            MyValue5_2 val5_2 = useNull_2 ? null : new MyValue5_2((byte)i, val5_3);\n-            MyValue5_1 val5_1 = useNull_1 ? null : new MyValue5_1((byte)i, val5_2);\n+            MyValue5C val5_3 = useNull_3 ? null : new MyValue5C((byte)i);\n+            MyValue5B val5_2 = useNull_2 ? null : new MyValue5B((byte)i, val5_3);\n+            MyValue5A val5_1 = useNull_1 ? null : new MyValue5A((byte)i, val5_2);\n@@ -1357,3 +1357,3 @@\n-        MyValue5 val1 = new MyValue5(x, new MyValue5_1(x, new MyValue5_2(x, new MyValue5_3(x))));\n-        MyValue5 val2 = new MyValue5(x, new MyValue5_1(x, new MyValue5_2(x, null)));\n-        MyValue5 val3 = new MyValue5(x, new MyValue5_1(x, null));\n+        MyValue5 val1 = new MyValue5(x, new MyValue5A(x, new MyValue5B(x, new MyValue5C(x))));\n+        MyValue5 val2 = new MyValue5(x, new MyValue5A(x, new MyValue5B(x, null)));\n+        MyValue5 val3 = new MyValue5(x, new MyValue5A(x, null));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFieldNullMarkers.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-value class MyValue1_FlatArrayThreshold {\n+value class MyValue1FlatArrayThreshold {\n@@ -52,1 +52,1 @@\n-    public MyValue1_FlatArrayThreshold(Object o1, Object o2) {\n+    public MyValue1FlatArrayThreshold(Object o1, Object o2) {\n@@ -60,1 +60,1 @@\n-    public static MyValue1_FlatArrayThreshold test1(MyValue1_FlatArrayThreshold[] va, MyValue1_FlatArrayThreshold vt) {\n+    public static MyValue1FlatArrayThreshold test1(MyValue1FlatArrayThreshold[] va, MyValue1FlatArrayThreshold vt) {\n@@ -65,1 +65,1 @@\n-    public static MyValue1_FlatArrayThreshold test2(MyValue1_FlatArrayThreshold[] va, MyValue1_FlatArrayThreshold vt) {\n+    public static MyValue1FlatArrayThreshold test2(MyValue1FlatArrayThreshold[] va, MyValue1FlatArrayThreshold vt) {\n@@ -70,1 +70,1 @@\n-    public static Object test3(Object[] va, MyValue1_FlatArrayThreshold vt) {\n+    public static Object test3(Object[] va, MyValue1FlatArrayThreshold vt) {\n@@ -75,1 +75,1 @@\n-    public static Object test4(Object[] va, MyValue1_FlatArrayThreshold vt) {\n+    public static Object test4(Object[] va, MyValue1FlatArrayThreshold vt) {\n@@ -80,2 +80,2 @@\n-    public static MyValue1_FlatArrayThreshold test5(MyValue1_FlatArrayThreshold[] va, Object vt) {\n-        va[0] = (MyValue1_FlatArrayThreshold)vt;\n+    public static MyValue1FlatArrayThreshold test5(MyValue1FlatArrayThreshold[] va, Object vt) {\n+        va[0] = (MyValue1FlatArrayThreshold)vt;\n@@ -85,2 +85,2 @@\n-    public static MyValue1_FlatArrayThreshold test6(MyValue1_FlatArrayThreshold[] va, Object vt) {\n-        va[0] = (MyValue1_FlatArrayThreshold)vt;\n+    public static MyValue1FlatArrayThreshold test6(MyValue1FlatArrayThreshold[] va, Object vt) {\n+        va[0] = (MyValue1FlatArrayThreshold)vt;\n@@ -96,3 +96,3 @@\n-        MyValue1_FlatArrayThreshold vt = new MyValue1_FlatArrayThreshold(new Integer(42), new Integer(43));\n-        MyValue1_FlatArrayThreshold[] va = (MyValue1_FlatArrayThreshold[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1_FlatArrayThreshold.class, 2, new MyValue1_FlatArrayThreshold(null, null));\n-        MyValue1_FlatArrayThreshold[] vaB = new MyValue1_FlatArrayThreshold[2];\n+        MyValue1FlatArrayThreshold vt = new MyValue1FlatArrayThreshold(new Integer(42), new Integer(43));\n+        MyValue1FlatArrayThreshold[] va = (MyValue1FlatArrayThreshold[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1FlatArrayThreshold.class, 2, new MyValue1FlatArrayThreshold(null, null));\n+        MyValue1FlatArrayThreshold[] vaB = new MyValue1FlatArrayThreshold[2];\n@@ -101,1 +101,1 @@\n-            MyValue1_FlatArrayThreshold result1 = test1(va, vt);\n+            MyValue1FlatArrayThreshold result1 = test1(va, vt);\n@@ -105,1 +105,1 @@\n-            MyValue1_FlatArrayThreshold result2 = test2(va, vt);\n+            MyValue1FlatArrayThreshold result2 = test2(va, vt);\n@@ -111,1 +111,1 @@\n-            MyValue1_FlatArrayThreshold result3 = (MyValue1_FlatArrayThreshold)test3(va, vt);\n+            MyValue1FlatArrayThreshold result3 = (MyValue1FlatArrayThreshold)test3(va, vt);\n@@ -114,1 +114,1 @@\n-            result3 = (MyValue1_FlatArrayThreshold)test3(vaB, vt);\n+            result3 = (MyValue1FlatArrayThreshold)test3(vaB, vt);\n@@ -117,1 +117,1 @@\n-            MyValue1_FlatArrayThreshold result4 = (MyValue1_FlatArrayThreshold)test4(va, vt);\n+            MyValue1FlatArrayThreshold result4 = (MyValue1FlatArrayThreshold)test4(va, vt);\n@@ -120,1 +120,1 @@\n-            result4 = (MyValue1_FlatArrayThreshold)test4(vaB, null);\n+            result4 = (MyValue1FlatArrayThreshold)test4(vaB, null);\n@@ -123,1 +123,1 @@\n-            MyValue1_FlatArrayThreshold result5 = test5(va, vt);\n+            MyValue1FlatArrayThreshold result5 = test5(va, vt);\n@@ -127,1 +127,1 @@\n-            MyValue1_FlatArrayThreshold result6 = test6(va, vt);\n+            MyValue1FlatArrayThreshold result6 = test6(va, vt);\n@@ -133,1 +133,1 @@\n-            MyValue1_FlatArrayThreshold result7 = (MyValue1_FlatArrayThreshold)test7(va, vt);\n+            MyValue1FlatArrayThreshold result7 = (MyValue1FlatArrayThreshold)test7(va, vt);\n@@ -136,1 +136,1 @@\n-            result7 = (MyValue1_FlatArrayThreshold)test7(vaB, null);\n+            result7 = (MyValue1FlatArrayThreshold)test7(vaB, null);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayThreshold.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-value class MyValue1_Generated {\n+value class MyValue1Generated {\n@@ -62,1 +62,1 @@\n-value class MyValue2_Generated {\n+value class MyValue2Generated {\n@@ -69,1 +69,1 @@\n-value class MyValue3_Generated {\n+value class MyValue3Generated {\n@@ -75,1 +75,1 @@\n-value class MyValue4_Generated {\n+value class MyValue4Generated {\n@@ -81,1 +81,1 @@\n-    public MyValue4_Generated val;\n+    public MyValue4Generated val;\n@@ -83,1 +83,1 @@\n-    public MyValue4Wrapper(MyValue4_Generated val) {\n+    public MyValue4Wrapper(MyValue4Generated val) {\n@@ -89,1 +89,1 @@\n-value class MyValue5_Generated {\n+value class MyValue5Generated {\n@@ -93,1 +93,1 @@\n-value class MyValue6_Generated {\n+value class MyValue6Generated {\n@@ -108,2 +108,2 @@\n-    MyValue1_Generated test2(MyValue1_Generated[] array) {\n-        MyValue1_Generated res = new MyValue1_Generated();\n+    MyValue1Generated test2(MyValue1Generated[] array) {\n+        MyValue1Generated res = new MyValue1Generated();\n@@ -119,1 +119,1 @@\n-    void test3(MyValue1_Generated[] array) {\n+    void test3(MyValue1Generated[] array) {\n@@ -121,1 +121,1 @@\n-            array[i] = new MyValue1_Generated();\n+            array[i] = new MyValue1Generated();\n@@ -128,1 +128,1 @@\n-    void test4(MyValue1_Generated[] array) {\n+    void test4(MyValue1Generated[] array) {\n@@ -132,1 +132,1 @@\n-    int test5(MyValue1_Generated[] array) {\n+    int test5(MyValue1Generated[] array) {\n@@ -139,1 +139,1 @@\n-    MyValue1_Generated f4 = new MyValue1_Generated();\n+    MyValue1Generated f4 = new MyValue1Generated();\n@@ -149,1 +149,1 @@\n-    MyValue2_Generated f5;\n+    MyValue2Generated f5;\n@@ -152,10 +152,10 @@\n-        MyValue2_Generated[] array1 = (MyValue2_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue2_Generated.class, 6, new MyValue2_Generated());\n-        array1[0] = new MyValue2_Generated();\n-        array1[1] = new MyValue2_Generated();\n-        array1[2] = new MyValue2_Generated();\n-        array1[3] = new MyValue2_Generated();\n-        array1[4] = new MyValue2_Generated();\n-        array1[5] = new MyValue2_Generated();\n-\n-        MyValue2_Generated h = new MyValue2_Generated();\n-        MyValue2_Generated n = new MyValue2_Generated();\n+        MyValue2Generated[] array1 = (MyValue2Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue2Generated.class, 6, new MyValue2Generated());\n+        array1[0] = new MyValue2Generated();\n+        array1[1] = new MyValue2Generated();\n+        array1[2] = new MyValue2Generated();\n+        array1[3] = new MyValue2Generated();\n+        array1[4] = new MyValue2Generated();\n+        array1[5] = new MyValue2Generated();\n+\n+        MyValue2Generated h = new MyValue2Generated();\n+        MyValue2Generated n = new MyValue2Generated();\n@@ -178,1 +178,1 @@\n-    boolean test8(MyValue1_Generated[] array) {\n+    boolean test8(MyValue1Generated[] array) {\n@@ -183,1 +183,1 @@\n-        MyValue1_Generated[] array = (MyValue1_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1_Generated.class, 1, new MyValue1_Generated());\n+        MyValue1Generated[] array = (MyValue1Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1Generated.class, 1, new MyValue1Generated());\n@@ -195,1 +195,1 @@\n-    void test10(MyValue3_Generated[] array) {\n+    void test10(MyValue3Generated[] array) {\n@@ -202,1 +202,1 @@\n-    void test11(MyValue3_Generated[] array) {\n+    void test11(MyValue3Generated[] array) {\n@@ -209,1 +209,1 @@\n-    MyValue4_Generated[] d = (MyValue4_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4_Generated.class, 1, new MyValue4_Generated());\n+    MyValue4Generated[] d = (MyValue4Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4Generated.class, 1, new MyValue4Generated());\n@@ -212,1 +212,1 @@\n-    MyValue4_Generated e = new MyValue4_Generated();\n+    MyValue4Generated e = new MyValue4Generated();\n@@ -216,1 +216,1 @@\n-        MyValue4_Generated i = new MyValue4_Generated();\n+        MyValue4Generated i = new MyValue4Generated();\n@@ -218,1 +218,1 @@\n-            MyValue4_Generated[] k = (MyValue4_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4_Generated.class, 0, new MyValue4_Generated());\n+            MyValue4Generated[] k = (MyValue4Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4Generated.class, 0, new MyValue4Generated());\n@@ -223,1 +223,1 @@\n-                MyValue4_Generated m = new MyValue4_Generated();\n+                MyValue4Generated m = new MyValue4Generated();\n@@ -235,1 +235,1 @@\n-    MyValue5_Generated test13_c;\n+    MyValue5Generated test13_c;\n@@ -238,1 +238,1 @@\n-    MyValue5_Generated test13_t = new MyValue5_Generated();\n+    MyValue5Generated test13_t = new MyValue5Generated();\n@@ -240,1 +240,1 @@\n-    void test13(MyValue5_Generated[] array) {\n+    void test13(MyValue5Generated[] array) {\n@@ -248,1 +248,1 @@\n-            MyValue5_Generated[] array2 = (MyValue5_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue5_Generated.class, 1, new MyValue5_Generated());\n+            MyValue5Generated[] array2 = (MyValue5Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue5Generated.class, 1, new MyValue5Generated());\n@@ -254,1 +254,1 @@\n-    void test14(boolean b, MyValue4_Generated val) {\n+    void test14(boolean b, MyValue4Generated val) {\n@@ -257,1 +257,1 @@\n-                val = new MyValue4_Generated();\n+                val = new MyValue4Generated();\n@@ -259,1 +259,1 @@\n-            MyValue4_Generated[] array = (MyValue4_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4_Generated.class, 1, new MyValue4_Generated());\n+            MyValue4Generated[] array = (MyValue4Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4Generated.class, 1, new MyValue4Generated());\n@@ -270,1 +270,1 @@\n-        MyValue4_Generated val = new MyValue4_Generated();\n+        MyValue4Generated val = new MyValue4Generated();\n@@ -273,1 +273,1 @@\n-                MyValue4_Generated[] array = (MyValue4_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4_Generated.class, 1, new MyValue4_Generated());\n+                MyValue4Generated[] array = (MyValue4Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4Generated.class, 1, new MyValue4Generated());\n@@ -283,1 +283,1 @@\n-        MyValue4_Generated val = new MyValue4_Generated();\n+        MyValue4Generated val = new MyValue4Generated();\n@@ -293,1 +293,1 @@\n-    static MyValue6_Generated test17Field = new MyValue6_Generated();\n+    static MyValue6Generated test17Field = new MyValue6Generated();\n@@ -297,1 +297,1 @@\n-            MyValue6_Generated val = new MyValue6_Generated();\n+            MyValue6Generated val = new MyValue6Generated();\n@@ -312,1 +312,1 @@\n-    MyValue1_Generated test19Field = new MyValue1_Generated();\n+    MyValue1Generated test19Field = new MyValue1Generated();\n@@ -316,1 +316,1 @@\n-            MyValue1_Generated val = new MyValue1_Generated();\n+            MyValue1Generated val = new MyValue1Generated();\n@@ -326,7 +326,7 @@\n-        MyValue1_Generated[] array2 = (MyValue1_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1_Generated.class, 10, new MyValue1_Generated());\n-        MyValue1_Generated[] array3 = (MyValue1_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1_Generated.class, 1, new MyValue1_Generated());\n-        array3[0] = new MyValue1_Generated();\n-        MyValue3_Generated[] array4 = (MyValue3_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue3_Generated.class, 1, new MyValue3_Generated());\n-        array4[0] = new MyValue3_Generated();\n-        MyValue5_Generated[] array5 = (MyValue5_Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue5_Generated.class, 1, new MyValue5_Generated());\n-        array5[0] = new MyValue5_Generated();\n+        MyValue1Generated[] array2 = (MyValue1Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1Generated.class, 10, new MyValue1Generated());\n+        MyValue1Generated[] array3 = (MyValue1Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1Generated.class, 1, new MyValue1Generated());\n+        array3[0] = new MyValue1Generated();\n+        MyValue3Generated[] array4 = (MyValue3Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue3Generated.class, 1, new MyValue3Generated());\n+        array4[0] = new MyValue3Generated();\n+        MyValue5Generated[] array5 = (MyValue5Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue5Generated.class, 1, new MyValue5Generated());\n+        array5[0] = new MyValue5Generated();\n@@ -349,1 +349,1 @@\n-            t.test14(false, new MyValue4_Generated());\n+            t.test14(false, new MyValue4Generated());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-value class MyValue_IsSubstReresolution {\n+value class MyValueIsSubstReresolution {\n@@ -41,1 +41,1 @@\n-    public MyValue_IsSubstReresolution(int x) {\n+    public MyValueIsSubstReresolution(int x) {\n@@ -49,1 +49,1 @@\n-        MyValue_IsSubstReresolution vt = new MyValue_IsSubstReresolution(42);\n+        MyValueIsSubstReresolution vt = new MyValueIsSubstReresolution(42);\n@@ -54,2 +54,2 @@\n-        MyValue_IsSubstReresolution vt1 = new MyValue_IsSubstReresolution(42);\n-        MyValue_IsSubstReresolution vt2 = new MyValue_IsSubstReresolution(43);\n+        MyValueIsSubstReresolution vt1 = new MyValueIsSubstReresolution(42);\n+        MyValueIsSubstReresolution vt2 = new MyValueIsSubstReresolution(43);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIsSubstitutableReresolution.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  java -cp $ASMTOOLS org.openjdk.asmtools.Main jdec MyValue1_Mismatch.class MyValue2_Mismatch.class MyValue3_Mismatch.class MyValue4_Mismatch.class MyValue5_Mismatch.class MyValue6_Mismatch.class MyValue7_Mismatch.class Verifiable.class B.class I3.class I4.class E.class G.class J.class K.class L.class P.class Q.class R.class S.class TestMismatchHandlingHelper.class > TestMismatchHandling.jcod\n+  java -cp $ASMTOOLS org.openjdk.asmtools.Main jdec MyValue1Mismatch.class MyValue2Mismatch.class MyValue3Mismatch.class MyValue4Mismatch.class MyValue5Mismatch.class MyValue6Mismatch.class MyValue7Mismatch.class Verifiable.class B.class I3.class I4.class E.class G.class J.class K.class L.class P.class Q.class R.class S.class TestMismatchHandlingHelper.class > TestMismatchHandling.jcod\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-class compiler\/valhalla\/inlinetypes\/MyValue1_Mismatch {\n+class compiler\/valhalla\/inlinetypes\/MyValue1Mismatch {\n@@ -8,1 +8,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1_Mismatch\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #2\n@@ -106,2 +106,2 @@\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue1_Mismatch\n-class compiler\/valhalla\/inlinetypes\/MyValue2_Mismatch {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue2Mismatch {\n@@ -114,1 +114,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2_Mismatch\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #2\n@@ -212,2 +212,2 @@\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue2_Mismatch\n-class compiler\/valhalla\/inlinetypes\/MyValue3_Mismatch {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue3Mismatch {\n@@ -220,1 +220,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3_Mismatch\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #2\n@@ -318,2 +318,2 @@\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue3_Mismatch\n-class compiler\/valhalla\/inlinetypes\/MyValue4_Mismatch {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue4Mismatch {\n@@ -326,1 +326,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue4_Mismatch\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue4Mismatch\"; \/\/ #2\n@@ -344,1 +344,1 @@\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue4_Mismatch;\"; \/\/ #20\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue4Mismatch;\"; \/\/ #20\n@@ -451,2 +451,2 @@\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue4_Mismatch\n-class compiler\/valhalla\/inlinetypes\/MyValue5_Mismatch {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue4Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue5Mismatch {\n@@ -459,1 +459,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue5_Mismatch\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue5Mismatch\"; \/\/ #2\n@@ -479,1 +479,1 @@\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue5_Mismatch;\"; \/\/ #22\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue5Mismatch;\"; \/\/ #22\n@@ -587,2 +587,2 @@\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue5_Mismatch\n-class compiler\/valhalla\/inlinetypes\/MyValue6_Mismatch {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue5Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue6Mismatch {\n@@ -595,1 +595,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue6_Mismatch\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue6Mismatch\"; \/\/ #2\n@@ -615,1 +615,1 @@\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue6_Mismatch;\"; \/\/ #22\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue6Mismatch;\"; \/\/ #22\n@@ -723,2 +723,2 @@\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue6_Mismatch\n-class compiler\/valhalla\/inlinetypes\/MyValue7_Mismatch {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue6Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue7Mismatch {\n@@ -731,1 +731,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7_Mismatch\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #2\n@@ -829,1 +829,1 @@\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue7_Mismatch\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\n@@ -887,1 +887,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #10\n@@ -894,1 +894,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1_Mismatch;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #17\n@@ -898,1 +898,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue1_Mismatch;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #21\n@@ -983,1 +983,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #6\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #6\n@@ -987,1 +987,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #10\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #10\n@@ -1033,1 +1033,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #8\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #8\n@@ -1037,1 +1037,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #12\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #12\n@@ -1086,1 +1086,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #10\n@@ -1095,1 +1095,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #19\n@@ -1099,1 +1099,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #23\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #23\n@@ -1189,1 +1189,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #10\n@@ -1200,1 +1200,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #21\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #21\n@@ -1204,1 +1204,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #25\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #25\n@@ -1295,1 +1295,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #10\n@@ -1302,1 +1302,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #17\n@@ -1306,1 +1306,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #21\n@@ -1395,1 +1395,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #10\n@@ -1402,1 +1402,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #17\n@@ -1406,1 +1406,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #21\n@@ -1495,1 +1495,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #10\n@@ -1504,1 +1504,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #19\n@@ -1508,1 +1508,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;\"; \/\/ #23\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #23\n@@ -1598,1 +1598,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -1607,1 +1607,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #19\n@@ -1611,1 +1611,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #23\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #23\n@@ -1701,1 +1701,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -1708,1 +1708,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #17\n@@ -1712,1 +1712,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #21\n@@ -1801,1 +1801,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -1808,1 +1808,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #17\n@@ -1812,1 +1812,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #21\n@@ -1901,1 +1901,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -1910,1 +1910,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #19\n@@ -1914,1 +1914,1 @@\n-    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #23\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #23\n@@ -2002,1 +2002,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1_Mismatch\"; \/\/ #8\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #8\n@@ -2009,1 +2009,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1_Mismatch;\"; \/\/ #15\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #15\n@@ -2020,1 +2020,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2_Mismatch\"; \/\/ #26\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #26\n@@ -2026,1 +2026,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #32\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #32\n@@ -2044,1 +2044,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3_Mismatch\"; \/\/ #50\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #50\n@@ -2050,1 +2050,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;\"; \/\/ #56\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #56\n@@ -2065,1 +2065,1 @@\n-    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue4_Mismatch;\"; \/\/ #71\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue4Mismatch;\"; \/\/ #71\n@@ -2083,1 +2083,1 @@\n-    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue5_Mismatch;\"; \/\/ #89\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue5Mismatch;\"; \/\/ #89\n@@ -2100,1 +2100,1 @@\n-    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue6_Mismatch;\"; \/\/ #106\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue6Mismatch;\"; \/\/ #106\n@@ -2103,1 +2103,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue6_Mismatch\"; \/\/ #109\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue6Mismatch\"; \/\/ #109\n@@ -2105,1 +2105,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7_Mismatch\"; \/\/ #111\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #111\n@@ -2111,1 +2111,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #117\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #117\n@@ -2618,1 +2618,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #10\n@@ -2625,1 +2625,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1_Mismatch;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #17\n@@ -2712,1 +2712,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #10\n@@ -2719,1 +2719,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1_Mismatch;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #17\n@@ -2802,1 +2802,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #6\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #6\n@@ -2846,1 +2846,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #8\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #8\n@@ -2893,1 +2893,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #10\n@@ -2902,1 +2902,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #19\n@@ -2990,1 +2990,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #10\n@@ -3001,1 +3001,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2_Mismatch;\"; \/\/ #21\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #21\n@@ -3090,1 +3090,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #10\n@@ -3099,1 +3099,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #19\n@@ -3183,1 +3183,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3_Mismatch;\"; \/\/ #6\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #6\n@@ -3235,1 +3235,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue4_Mismatch\"; \/\/ #16\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue4Mismatch\"; \/\/ #16\n@@ -3237,1 +3237,1 @@\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue4_Mismatch;\"; \/\/ #18\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue4Mismatch;\"; \/\/ #18\n@@ -3241,1 +3241,1 @@\n-    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue4_Mismatch;\"; \/\/ #22\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue4Mismatch;\"; \/\/ #22\n@@ -3355,1 +3355,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue5_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue5Mismatch\"; \/\/ #10\n@@ -3357,1 +3357,1 @@\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue5_Mismatch;\"; \/\/ #12\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue5Mismatch;\"; \/\/ #12\n@@ -3363,1 +3363,1 @@\n-    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue5_Mismatch;\"; \/\/ #18\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue5Mismatch;\"; \/\/ #18\n@@ -3459,1 +3459,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue6_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue6Mismatch\"; \/\/ #10\n@@ -3461,1 +3461,1 @@\n-    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue6_Mismatch;\"; \/\/ #12\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue6Mismatch;\"; \/\/ #12\n@@ -3467,1 +3467,1 @@\n-    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue6_Mismatch;\"; \/\/ #18\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue6Mismatch;\"; \/\/ #18\n@@ -3559,1 +3559,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #6\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #6\n@@ -3623,1 +3623,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7_Mismatch\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -3632,1 +3632,1 @@\n-    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7_Mismatch;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #19\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.jcod","additions":95,"deletions":95,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-value class MyValue1_Mismatch {\n+value class MyValue1Mismatch {\n@@ -36,1 +36,1 @@\n-value class MyValue2_Mismatch {\n+value class MyValue2Mismatch {\n@@ -46,1 +46,1 @@\n-value class MyValue3_Mismatch {\n+value class MyValue3Mismatch {\n@@ -56,1 +56,1 @@\n-value class MyValue4_Mismatch {\n+value class MyValue4Mismatch {\n@@ -65,2 +65,2 @@\n-    static MyValue4_Mismatch make() {\n-        return new MyValue4_Mismatch();\n+    static MyValue4Mismatch make() {\n+        return new MyValue4Mismatch();\n@@ -74,1 +74,1 @@\n-value class MyValue5_Mismatch implements Verifiable {\n+value class MyValue5Mismatch implements Verifiable {\n@@ -84,2 +84,2 @@\n-    static MyValue5_Mismatch make() {\n-        return new MyValue5_Mismatch();\n+    static MyValue5Mismatch make() {\n+        return new MyValue5Mismatch();\n@@ -89,1 +89,1 @@\n-value class MyValue6_Mismatch implements Verifiable {\n+value class MyValue6Mismatch implements Verifiable {\n@@ -99,2 +99,2 @@\n-    static MyValue6_Mismatch make() {\n-        return new MyValue6_Mismatch();\n+    static MyValue6Mismatch make() {\n+        return new MyValue6Mismatch();\n@@ -104,1 +104,1 @@\n-value class MyValue7_Mismatch {\n+value class MyValue7Mismatch {\n@@ -115,1 +115,1 @@\n-    public MyValue1_Mismatch method(MyValue1_Mismatch arg) {\n+    public MyValue1Mismatch method(MyValue1Mismatch arg) {\n@@ -123,1 +123,1 @@\n-    public MyValue1_Mismatch method(MyValue1_Mismatch arg) {\n+    public MyValue1Mismatch method(MyValue1Mismatch arg) {\n@@ -131,1 +131,1 @@\n-    public MyValue1_Mismatch method(MyValue1_Mismatch arg) {\n+    public MyValue1Mismatch method(MyValue1Mismatch arg) {\n@@ -138,1 +138,1 @@\n-    public MyValue2_Mismatch method(MyValue2_Mismatch arg);\n+    public MyValue2Mismatch method(MyValue2Mismatch arg);\n@@ -142,1 +142,1 @@\n-    public MyValue2_Mismatch method(MyValue2_Mismatch arg);\n+    public MyValue2Mismatch method(MyValue2Mismatch arg);\n@@ -146,1 +146,1 @@\n-    public MyValue2_Mismatch method(MyValue2_Mismatch arg);\n+    public MyValue2Mismatch method(MyValue2Mismatch arg);\n@@ -150,1 +150,1 @@\n-    public MyValue2_Mismatch method(MyValue2_Mismatch arg);\n+    public MyValue2Mismatch method(MyValue2Mismatch arg);\n@@ -156,1 +156,1 @@\n-    public MyValue2_Mismatch method(MyValue2_Mismatch arg) {\n+    public MyValue2Mismatch method(MyValue2Mismatch arg) {\n@@ -164,1 +164,1 @@\n-    public MyValue2_Mismatch method(MyValue2_Mismatch arg) {\n+    public MyValue2Mismatch method(MyValue2Mismatch arg) {\n@@ -173,1 +173,1 @@\n-    public MyValue2_Mismatch method(MyValue2_Mismatch arg) {\n+    public MyValue2Mismatch method(MyValue2Mismatch arg) {\n@@ -181,1 +181,1 @@\n-    public MyValue2_Mismatch method(MyValue2_Mismatch arg) {\n+    public MyValue2Mismatch method(MyValue2Mismatch arg) {\n@@ -188,1 +188,1 @@\n-    public MyValue3_Mismatch method(MyValue3_Mismatch arg);\n+    public MyValue3Mismatch method(MyValue3Mismatch arg);\n@@ -193,1 +193,1 @@\n-    public MyValue3_Mismatch method(MyValue3_Mismatch arg) {\n+    public MyValue3Mismatch method(MyValue3Mismatch arg) {\n@@ -200,1 +200,1 @@\n-    public MyValue3_Mismatch method(MyValue3_Mismatch arg) {\n+    public MyValue3Mismatch method(MyValue3Mismatch arg) {\n@@ -208,1 +208,1 @@\n-    public MyValue3_Mismatch method(MyValue3_Mismatch arg) {\n+    public MyValue3Mismatch method(MyValue3Mismatch arg) {\n@@ -216,1 +216,1 @@\n-    public MyValue3_Mismatch method(MyValue3_Mismatch arg) {\n+    public MyValue3Mismatch method(MyValue3Mismatch arg) {\n@@ -225,1 +225,1 @@\n-    public MyValue4_Mismatch method(boolean warmup) {\n+    public MyValue4Mismatch method(boolean warmup) {\n@@ -229,1 +229,1 @@\n-            MyValue4_Mismatch res = MyValue4_Mismatch.make();\n+            MyValue4Mismatch res = MyValue4Mismatch.make();\n@@ -240,1 +240,1 @@\n-    public MyValue5_Mismatch method(boolean warmup) {\n+    public MyValue5Mismatch method(boolean warmup) {\n@@ -244,1 +244,1 @@\n-            return MyValue5_Mismatch.make();\n+            return MyValue5Mismatch.make();\n@@ -250,1 +250,1 @@\n-    public MyValue6_Mismatch method(boolean warmup) {\n+    public MyValue6Mismatch method(boolean warmup) {\n@@ -254,1 +254,1 @@\n-            return MyValue6_Mismatch.make();\n+            return MyValue6Mismatch.make();\n@@ -260,1 +260,1 @@\n-    default MyValue7_Mismatch method(MyValue7_Mismatch arg) {\n+    default MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -267,1 +267,1 @@\n-    public MyValue7_Mismatch method(MyValue7_Mismatch arg) {\n+    public MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -274,1 +274,1 @@\n-    MyValue7_Mismatch method(MyValue7_Mismatch arg) {\n+    MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -282,1 +282,1 @@\n-    MyValue7_Mismatch method(MyValue7_Mismatch arg) {\n+    MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -290,1 +290,1 @@\n-    public MyValue7_Mismatch method(MyValue7_Mismatch arg) {\n+    public MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -302,5 +302,5 @@\n-        a1.method(new MyValue1_Mismatch()).verify();\n-        a2.method(new MyValue1_Mismatch()).verify();\n-        a3.method(new MyValue1_Mismatch()).verify();\n-        a4.method(new MyValue1_Mismatch()).verify();\n-        a5.method(new MyValue1_Mismatch()).verify();\n+        a1.method(new MyValue1Mismatch()).verify();\n+        a2.method(new MyValue1Mismatch()).verify();\n+        a3.method(new MyValue1Mismatch()).verify();\n+        a4.method(new MyValue1Mismatch()).verify();\n+        a5.method(new MyValue1Mismatch()).verify();\n@@ -308,3 +308,3 @@\n-        b1.method(new MyValue1_Mismatch()).verify();\n-        b2.method(new MyValue1_Mismatch()).verify();\n-        c.method(new MyValue1_Mismatch()).verify();\n+        b1.method(new MyValue1Mismatch()).verify();\n+        b2.method(new MyValue1Mismatch()).verify();\n+        c.method(new MyValue1Mismatch()).verify();\n@@ -320,13 +320,13 @@\n-        i11.method(new MyValue2_Mismatch()).verify();\n-        i12.method(new MyValue2_Mismatch()).verify();\n-        i13.method(new MyValue2_Mismatch()).verify();\n-        i14.method(new MyValue2_Mismatch()).verify();\n-        i15.method(new MyValue2_Mismatch()).verify();\n-        i16.method(new MyValue2_Mismatch()).verify();\n-        i21.method(new MyValue2_Mismatch()).verify();\n-        i22.method(new MyValue2_Mismatch()).verify();\n-        i23.method(new MyValue2_Mismatch()).verify();\n-        i24.method(new MyValue2_Mismatch()).verify();\n-        i25.method(new MyValue2_Mismatch()).verify();\n-        i26.method(new MyValue2_Mismatch()).verify();\n-        d.method(new MyValue2_Mismatch()).verify();\n+        i11.method(new MyValue2Mismatch()).verify();\n+        i12.method(new MyValue2Mismatch()).verify();\n+        i13.method(new MyValue2Mismatch()).verify();\n+        i14.method(new MyValue2Mismatch()).verify();\n+        i15.method(new MyValue2Mismatch()).verify();\n+        i16.method(new MyValue2Mismatch()).verify();\n+        i21.method(new MyValue2Mismatch()).verify();\n+        i22.method(new MyValue2Mismatch()).verify();\n+        i23.method(new MyValue2Mismatch()).verify();\n+        i24.method(new MyValue2Mismatch()).verify();\n+        i25.method(new MyValue2Mismatch()).verify();\n+        i26.method(new MyValue2Mismatch()).verify();\n+        d.method(new MyValue2Mismatch()).verify();\n@@ -334,13 +334,13 @@\n-        i31.method(new MyValue2_Mismatch()).verify();\n-        i32.method(new MyValue2_Mismatch()).verify();\n-        i33.method(new MyValue2_Mismatch()).verify();\n-        i34.method(new MyValue2_Mismatch()).verify();\n-        i35.method(new MyValue2_Mismatch()).verify();\n-        i36.method(new MyValue2_Mismatch()).verify();\n-        i41.method(new MyValue2_Mismatch()).verify();\n-        i42.method(new MyValue2_Mismatch()).verify();\n-        i43.method(new MyValue2_Mismatch()).verify();\n-        i44.method(new MyValue2_Mismatch()).verify();\n-        i45.method(new MyValue2_Mismatch()).verify();\n-        i46.method(new MyValue2_Mismatch()).verify();\n-        e.method(new MyValue2_Mismatch()).verify();\n+        i31.method(new MyValue2Mismatch()).verify();\n+        i32.method(new MyValue2Mismatch()).verify();\n+        i33.method(new MyValue2Mismatch()).verify();\n+        i34.method(new MyValue2Mismatch()).verify();\n+        i35.method(new MyValue2Mismatch()).verify();\n+        i36.method(new MyValue2Mismatch()).verify();\n+        i41.method(new MyValue2Mismatch()).verify();\n+        i42.method(new MyValue2Mismatch()).verify();\n+        i43.method(new MyValue2Mismatch()).verify();\n+        i44.method(new MyValue2Mismatch()).verify();\n+        i45.method(new MyValue2Mismatch()).verify();\n+        i46.method(new MyValue2Mismatch()).verify();\n+        e.method(new MyValue2Mismatch()).verify();\n@@ -355,4 +355,4 @@\n-        i51.method(new MyValue3_Mismatch()).verify();\n-        i52.method(new MyValue3_Mismatch()).verify();\n-        i53.method(new MyValue3_Mismatch()).verify();\n-        h.method(new MyValue3_Mismatch()).verify();\n+        i51.method(new MyValue3Mismatch()).verify();\n+        i52.method(new MyValue3Mismatch()).verify();\n+        i53.method(new MyValue3Mismatch()).verify();\n+        h.method(new MyValue3Mismatch()).verify();\n@@ -360,6 +360,6 @@\n-        j1.method(new MyValue3_Mismatch()).verify();\n-        j2.method(new MyValue3_Mismatch()).verify();\n-        j3.method(new MyValue3_Mismatch()).verify();\n-        j4.method(new MyValue3_Mismatch()).verify();\n-        j5.method(new MyValue3_Mismatch()).verify();\n-        k.method(new MyValue3_Mismatch()).verify();\n+        j1.method(new MyValue3Mismatch()).verify();\n+        j2.method(new MyValue3Mismatch()).verify();\n+        j3.method(new MyValue3Mismatch()).verify();\n+        j4.method(new MyValue3Mismatch()).verify();\n+        j5.method(new MyValue3Mismatch()).verify();\n+        k.method(new MyValue3Mismatch()).verify();\n@@ -391,3 +391,3 @@\n-        f.method(new MyValue2_Mismatch());\n-        g.method(new MyValue2_Mismatch());\n-        l.method(new MyValue3_Mismatch());\n+        f.method(new MyValue2Mismatch());\n+        g.method(new MyValue2Mismatch());\n+        l.method(new MyValue3Mismatch());\n@@ -414,4 +414,4 @@\n-        i61.method(new MyValue7_Mismatch()).verify();\n-        i62.method(new MyValue7_Mismatch()).verify();\n-        i63.method(new MyValue7_Mismatch()).verify();\n-        p.method(new MyValue7_Mismatch()).verify();\n+        i61.method(new MyValue7Mismatch()).verify();\n+        i62.method(new MyValue7Mismatch()).verify();\n+        i63.method(new MyValue7Mismatch()).verify();\n+        p.method(new MyValue7Mismatch()).verify();\n@@ -419,6 +419,6 @@\n-        q1.method(new MyValue7_Mismatch()).verify();\n-        q2.method(new MyValue7_Mismatch()).verify();\n-        q3.method(new MyValue7_Mismatch()).verify();\n-        q4.method(new MyValue7_Mismatch()).verify();\n-        q5.method(new MyValue7_Mismatch()).verify();\n-        r.method(new MyValue7_Mismatch()).verify();\n+        q1.method(new MyValue7Mismatch()).verify();\n+        q2.method(new MyValue7Mismatch()).verify();\n+        q3.method(new MyValue7Mismatch()).verify();\n+        q4.method(new MyValue7Mismatch()).verify();\n+        q5.method(new MyValue7Mismatch()).verify();\n+        r.method(new MyValue7Mismatch()).verify();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandlingGenerator.java","additions":97,"deletions":97,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-value class MyValue_NativeClone {\n+value class MyValueNativeClone {\n@@ -48,1 +48,1 @@\n-    public MyValue_NativeClone(int x) {\n+    public MyValueNativeClone(int x) {\n@@ -69,1 +69,1 @@\n-        MyValue_NativeClone vt = new MyValue_NativeClone(42);\n+        MyValueNativeClone vt = new MyValueNativeClone(42);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNativeClone.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-interface MyInterface_NestmateAccess {\n+interface MyInterfaceNestmateAccess {\n@@ -55,1 +55,1 @@\n-value class MyValue_NestmateAccess implements MyInterface_NestmateAccess {\n+value class MyValueNestmateAccess implements MyInterfaceNestmateAccess {\n@@ -64,1 +64,1 @@\n-class Test1_NestmateAccess {\n+class Test1NestmateAccess {\n@@ -67,1 +67,1 @@\n-    private MyValue_NestmateAccess vt;\n+    private MyValueNestmateAccess vt;\n@@ -69,1 +69,1 @@\n-    public Test1_NestmateAccess(final MyValue_NestmateAccess vt) {\n+    public Test1NestmateAccess(final MyValueNestmateAccess vt) {\n@@ -73,2 +73,2 @@\n-    public MyInterface_NestmateAccess test() {\n-        return new MyInterface_NestmateAccess() {\n+    public MyInterfaceNestmateAccess test() {\n+        return new MyInterfaceNestmateAccess() {\n@@ -76,1 +76,1 @@\n-            private int x = (Test1_NestmateAccess.this).vt.hash();\n+            private int x = (Test1NestmateAccess.this).vt.hash();\n@@ -84,1 +84,1 @@\n-\/\/ Same as Test1_NestmateAccess but outer class is a value class\n+\/\/ Same as Test1NestmateAccess but outer class is a value class\n@@ -86,1 +86,1 @@\n-value class Test2_NestmateAccess {\n+value class Test2NestmateAccess {\n@@ -89,1 +89,1 @@\n-    private MyValue_NestmateAccess vt;\n+    private MyValueNestmateAccess vt;\n@@ -91,1 +91,1 @@\n-    public Test2_NestmateAccess(final MyValue_NestmateAccess vt) {\n+    public Test2NestmateAccess(final MyValueNestmateAccess vt) {\n@@ -95,3 +95,3 @@\n-    public MyInterface_NestmateAccess test() {\n-        return new MyInterface_NestmateAccess() {\n-            \/\/ Delayed flattened load of Test2_NestmateAccess.this.\n+    public MyInterfaceNestmateAccess test() {\n+        return new MyInterfaceNestmateAccess() {\n+            \/\/ Delayed flattened load of Test2NestmateAccess.this.\n@@ -99,1 +99,1 @@\n-            private int x = (Test2_NestmateAccess.this).vt.hash();\n+            private int x = (Test2NestmateAccess.this).vt.hash();\n@@ -108,2 +108,2 @@\n-class Test3_NestmateAccess {\n-    private MyValue_NestmateAccess vt;\n+class Test3NestmateAccess {\n+    private MyValueNestmateAccess vt;\n@@ -111,2 +111,2 @@\n-    public MyInterface_NestmateAccess test(MyValue_NestmateAccess init) {\n-        return new MyInterface_NestmateAccess() {\n+    public MyInterfaceNestmateAccess test(MyValueNestmateAccess init) {\n+        return new MyInterfaceNestmateAccess() {\n@@ -114,1 +114,1 @@\n-            private MyValue_NestmateAccess tmp = (vt = init);\n+            private MyValueNestmateAccess tmp = (vt = init);\n@@ -122,3 +122,3 @@\n-\/\/ Same as Test1_NestmateAccess but with static field\n-class Test4_NestmateAccess {\n-    private static MyValue_NestmateAccess vt = null;\n+\/\/ Same as Test1NestmateAccess but with static field\n+class Test4NestmateAccess {\n+    private static MyValueNestmateAccess vt = null;\n@@ -126,1 +126,1 @@\n-    public Test4_NestmateAccess(final MyValue_NestmateAccess vt) {\n+    public Test4NestmateAccess(final MyValueNestmateAccess vt) {\n@@ -130,2 +130,2 @@\n-    public MyInterface_NestmateAccess test() {\n-        return new MyInterface_NestmateAccess() {\n+    public MyInterfaceNestmateAccess test() {\n+        return new MyInterfaceNestmateAccess() {\n@@ -133,1 +133,1 @@\n-            private int x = (Test4_NestmateAccess.this).vt.hash();\n+            private int x = (Test4NestmateAccess.this).vt.hash();\n@@ -141,1 +141,1 @@\n-\/\/ Same as Test2_NestmateAccess but with static field\n+\/\/ Same as Test2NestmateAccess but with static field\n@@ -143,2 +143,2 @@\n-value class Test5_NestmateAccess {\n-    private static MyValue_NestmateAccess vt;\n+value class Test5NestmateAccess {\n+    private static MyValueNestmateAccess vt;\n@@ -146,1 +146,1 @@\n-    public Test5_NestmateAccess(final MyValue_NestmateAccess vt) {\n+    public Test5NestmateAccess(final MyValueNestmateAccess vt) {\n@@ -150,3 +150,3 @@\n-    public MyInterface_NestmateAccess test() {\n-        return new MyInterface_NestmateAccess() {\n-            \/\/ Delayed flattened load of Test5_NestmateAccess.this.\n+    public MyInterfaceNestmateAccess test() {\n+        return new MyInterfaceNestmateAccess() {\n+            \/\/ Delayed flattened load of Test5NestmateAccess.this.\n@@ -154,1 +154,1 @@\n-            private int x = (Test5_NestmateAccess.this).vt.hash();\n+            private int x = (Test5NestmateAccess.this).vt.hash();\n@@ -162,3 +162,3 @@\n-\/\/ Same as Test3_NestmateAccess but with static field\n-class Test6_NestmateAccess {\n-    private static MyValue_NestmateAccess vt;\n+\/\/ Same as Test3NestmateAccess but with static field\n+class Test6NestmateAccess {\n+    private static MyValueNestmateAccess vt;\n@@ -166,2 +166,2 @@\n-    public MyInterface_NestmateAccess test(MyValue_NestmateAccess init) {\n-        return new MyInterface_NestmateAccess() {\n+    public MyInterfaceNestmateAccess test(MyValueNestmateAccess init) {\n+        return new MyInterfaceNestmateAccess() {\n@@ -169,1 +169,1 @@\n-            private MyValue_NestmateAccess tmp = (vt = init);\n+            private MyValueNestmateAccess tmp = (vt = init);\n@@ -177,1 +177,1 @@\n-\/\/ Same as Test6_NestmateAccess but outer class is a value class\n+\/\/ Same as Test6NestmateAccess but outer class is a value class\n@@ -179,2 +179,2 @@\n-value class Test7_NestmateAccess {\n-    private static MyValue_NestmateAccess vt;\n+value class Test7NestmateAccess {\n+    private static MyValueNestmateAccess vt;\n@@ -182,2 +182,2 @@\n-    public MyInterface_NestmateAccess test(MyValue_NestmateAccess init) {\n-        return new MyInterface_NestmateAccess() {\n+    public MyInterfaceNestmateAccess test(MyValueNestmateAccess init) {\n+        return new MyInterfaceNestmateAccess() {\n@@ -185,1 +185,1 @@\n-            private MyValue_NestmateAccess tmp = (vt = init);\n+            private MyValueNestmateAccess tmp = (vt = init);\n@@ -196,1 +196,1 @@\n-        Test1_NestmateAccess t1 = new Test1_NestmateAccess(new MyValue_NestmateAccess());\n+        Test1NestmateAccess t1 = new Test1NestmateAccess(new MyValueNestmateAccess());\n@@ -200,1 +200,1 @@\n-        Test2_NestmateAccess t2 = new Test2_NestmateAccess(new MyValue_NestmateAccess());\n+        Test2NestmateAccess t2 = new Test2NestmateAccess(new MyValueNestmateAccess());\n@@ -204,2 +204,2 @@\n-        Test3_NestmateAccess t3 = new Test3_NestmateAccess();\n-        res = t3.test(new MyValue_NestmateAccess()).hash();\n+        Test3NestmateAccess t3 = new Test3NestmateAccess();\n+        res = t3.test(new MyValueNestmateAccess()).hash();\n@@ -208,1 +208,1 @@\n-        Test4_NestmateAccess t4 = new Test4_NestmateAccess(new MyValue_NestmateAccess());\n+        Test4NestmateAccess t4 = new Test4NestmateAccess(new MyValueNestmateAccess());\n@@ -212,1 +212,1 @@\n-        Test5_NestmateAccess t5 = new Test5_NestmateAccess(new MyValue_NestmateAccess());\n+        Test5NestmateAccess t5 = new Test5NestmateAccess(new MyValueNestmateAccess());\n@@ -216,2 +216,2 @@\n-        Test6_NestmateAccess t6 = new Test6_NestmateAccess();\n-        res = t6.test(new MyValue_NestmateAccess()).hash();\n+        Test6NestmateAccess t6 = new Test6NestmateAccess();\n+        res = t6.test(new MyValueNestmateAccess()).hash();\n@@ -220,2 +220,2 @@\n-        Test7_NestmateAccess t7 = new Test7_NestmateAccess();\n-        res = t7.test(new MyValue_NestmateAccess()).hash();\n+        Test7NestmateAccess t7 = new Test7NestmateAccess();\n+        res = t7.test(new MyValueNestmateAccess()).hash();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNestmateAccess.java","additions":58,"deletions":58,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-interface MyInterface_NewAcmp {\n+interface MyInterfaceNewAcmp {\n@@ -54,1 +54,1 @@\n-abstract value class MyAbstract_NewAcmp implements MyInterface_NewAcmp {\n+abstract value class MyAbstractNewAcmp implements MyInterfaceNewAcmp {\n@@ -58,1 +58,1 @@\n-value class MyValue1_NewAcmp extends MyAbstract_NewAcmp {\n+value class MyValue1NewAcmp extends MyAbstractNewAcmp {\n@@ -61,1 +61,1 @@\n-    MyValue1_NewAcmp(int x) {\n+    MyValue1NewAcmp(int x) {\n@@ -65,2 +65,2 @@\n-    static MyValue1_NewAcmp createDefault() {\n-        return new MyValue1_NewAcmp(0);\n+    static MyValue1NewAcmp createDefault() {\n+        return new MyValue1NewAcmp(0);\n@@ -69,2 +69,2 @@\n-    static MyValue1_NewAcmp setX(MyValue1_NewAcmp v, int x) {\n-        return new MyValue1_NewAcmp(x);\n+    static MyValue1NewAcmp setX(MyValue1NewAcmp v, int x) {\n+        return new MyValue1NewAcmp(x);\n@@ -74,1 +74,1 @@\n-value class MyValue2_NewAcmp extends MyAbstract_NewAcmp {\n+value class MyValue2NewAcmp extends MyAbstractNewAcmp {\n@@ -77,1 +77,1 @@\n-    MyValue2_NewAcmp(int x) {\n+    MyValue2NewAcmp(int x) {\n@@ -81,2 +81,2 @@\n-    static MyValue2_NewAcmp createDefault() {\n-        return new MyValue2_NewAcmp(0);\n+    static MyValue2NewAcmp createDefault() {\n+        return new MyValue2NewAcmp(0);\n@@ -85,2 +85,2 @@\n-    static MyValue2_NewAcmp setX(MyValue2_NewAcmp v, int x) {\n-        return new MyValue2_NewAcmp(x);\n+    static MyValue2NewAcmp setX(MyValue2NewAcmp v, int x) {\n+        return new MyValue2NewAcmp(x);\n@@ -90,1 +90,1 @@\n-class MyObject_NewAcmp extends MyAbstract_NewAcmp {\n+class MyObjectNewAcmp extends MyAbstractNewAcmp {\n@@ -131,1 +131,1 @@\n-    public boolean testEq02_1(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testEq02_1(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -135,1 +135,1 @@\n-    public boolean testEq02_2(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testEq02_2(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -139,1 +139,1 @@\n-    public boolean testEq02_3(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testEq02_3(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -143,1 +143,1 @@\n-    public boolean testEq03_1(MyValue1_NewAcmp v, Object u) {\n+    public boolean testEq03_1(MyValue1NewAcmp v, Object u) {\n@@ -147,1 +147,1 @@\n-    public boolean testEq03_2(MyValue1_NewAcmp v, Object u) {\n+    public boolean testEq03_2(MyValue1NewAcmp v, Object u) {\n@@ -151,1 +151,1 @@\n-    public boolean testEq03_3(MyValue1_NewAcmp v, Object u) {\n+    public boolean testEq03_3(MyValue1NewAcmp v, Object u) {\n@@ -155,1 +155,1 @@\n-    public boolean testEq04_1(Object u, MyValue1_NewAcmp v) {\n+    public boolean testEq04_1(Object u, MyValue1NewAcmp v) {\n@@ -159,1 +159,1 @@\n-    public boolean testEq04_2(Object u, MyValue1_NewAcmp v) {\n+    public boolean testEq04_2(Object u, MyValue1NewAcmp v) {\n@@ -163,1 +163,1 @@\n-    public boolean testEq04_3(Object u, MyValue1_NewAcmp v) {\n+    public boolean testEq04_3(Object u, MyValue1NewAcmp v) {\n@@ -167,1 +167,1 @@\n-    public boolean testEq05_1(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testEq05_1(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -171,1 +171,1 @@\n-    public boolean testEq05_2(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testEq05_2(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -175,1 +175,1 @@\n-    public boolean testEq05_3(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testEq05_3(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -179,1 +179,1 @@\n-    public boolean testEq06_1(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testEq06_1(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -183,1 +183,1 @@\n-    public boolean testEq06_2(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testEq06_2(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -187,1 +187,1 @@\n-    public boolean testEq06_3(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testEq06_3(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -191,1 +191,1 @@\n-    public boolean testEq07_1(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testEq07_1(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -195,1 +195,1 @@\n-    public boolean testEq07_2(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testEq07_2(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -199,1 +199,1 @@\n-    public boolean testEq07_3(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testEq07_3(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -203,1 +203,1 @@\n-    public boolean testEq08_1(MyValue1_NewAcmp v, Object u) {\n+    public boolean testEq08_1(MyValue1NewAcmp v, Object u) {\n@@ -207,1 +207,1 @@\n-    public boolean testEq08_2(MyValue1_NewAcmp v, Object u) {\n+    public boolean testEq08_2(MyValue1NewAcmp v, Object u) {\n@@ -211,1 +211,1 @@\n-    public boolean testEq08_3(MyValue1_NewAcmp v, Object u) {\n+    public boolean testEq08_3(MyValue1NewAcmp v, Object u) {\n@@ -215,1 +215,1 @@\n-    public boolean testEq09_1(Object u, MyValue1_NewAcmp v) {\n+    public boolean testEq09_1(Object u, MyValue1NewAcmp v) {\n@@ -219,1 +219,1 @@\n-    public boolean testEq09_2(Object u, MyValue1_NewAcmp v) {\n+    public boolean testEq09_2(Object u, MyValue1NewAcmp v) {\n@@ -223,1 +223,1 @@\n-    public boolean testEq09_3(Object u, MyValue1_NewAcmp v) {\n+    public boolean testEq09_3(Object u, MyValue1NewAcmp v) {\n@@ -227,1 +227,1 @@\n-    public boolean testEq10_1(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testEq10_1(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -231,1 +231,1 @@\n-    public boolean testEq10_2(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testEq10_2(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -235,1 +235,1 @@\n-    public boolean testEq10_3(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testEq10_3(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -239,1 +239,1 @@\n-    public boolean testEq11_1(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testEq11_1(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -243,1 +243,1 @@\n-    public boolean testEq11_2(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testEq11_2(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -247,1 +247,1 @@\n-    public boolean testEq11_3(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testEq11_3(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -251,1 +251,1 @@\n-    public boolean testEq12_1(MyObject_NewAcmp o1, MyObject_NewAcmp o2) {\n+    public boolean testEq12_1(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -255,1 +255,1 @@\n-    public boolean testEq12_2(MyObject_NewAcmp o1, MyObject_NewAcmp o2) {\n+    public boolean testEq12_2(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -259,1 +259,1 @@\n-    public boolean testEq12_3(MyObject_NewAcmp o1, MyObject_NewAcmp o2) {\n+    public boolean testEq12_3(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -263,1 +263,1 @@\n-    public boolean testEq13_1(Object u, MyObject_NewAcmp o) {\n+    public boolean testEq13_1(Object u, MyObjectNewAcmp o) {\n@@ -267,1 +267,1 @@\n-    public boolean testEq13_2(Object u, MyObject_NewAcmp o) {\n+    public boolean testEq13_2(Object u, MyObjectNewAcmp o) {\n@@ -271,1 +271,1 @@\n-    public boolean testEq13_3(Object u, MyObject_NewAcmp o) {\n+    public boolean testEq13_3(Object u, MyObjectNewAcmp o) {\n@@ -275,1 +275,1 @@\n-    public boolean testEq14_1(MyObject_NewAcmp o, Object u) {\n+    public boolean testEq14_1(MyObjectNewAcmp o, Object u) {\n@@ -279,1 +279,1 @@\n-    public boolean testEq14_2(MyObject_NewAcmp o, Object u) {\n+    public boolean testEq14_2(MyObjectNewAcmp o, Object u) {\n@@ -283,1 +283,1 @@\n-    public boolean testEq14_3(MyObject_NewAcmp o, Object u) {\n+    public boolean testEq14_3(MyObjectNewAcmp o, Object u) {\n@@ -311,1 +311,1 @@\n-    public boolean testEq17_1(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq17_1(Object[] a, MyValue1NewAcmp v) {\n@@ -315,1 +315,1 @@\n-    public boolean testEq17_2(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq17_2(Object[] a, MyValue1NewAcmp v) {\n@@ -319,1 +319,1 @@\n-    public boolean testEq17_3(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq17_3(Object[] a, MyValue1NewAcmp v) {\n@@ -323,1 +323,1 @@\n-    public boolean testEq18_1(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testEq18_1(MyValue1NewAcmp v, Object[] a) {\n@@ -327,1 +327,1 @@\n-    public boolean testEq18_2(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testEq18_2(MyValue1NewAcmp v, Object[] a) {\n@@ -331,1 +331,1 @@\n-    public boolean testEq18_3(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testEq18_3(MyValue1NewAcmp v, Object[] a) {\n@@ -335,1 +335,1 @@\n-    public boolean testEq19_1(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq19_1(Object[] a, MyValue1NewAcmp v) {\n@@ -339,1 +339,1 @@\n-    public boolean testEq19_2(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq19_2(Object[] a, MyValue1NewAcmp v) {\n@@ -343,1 +343,1 @@\n-    public boolean testEq19_3(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq19_3(Object[] a, MyValue1NewAcmp v) {\n@@ -347,1 +347,1 @@\n-    public boolean testEq20_1(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testEq20_1(MyValue1NewAcmp v, Object[] a) {\n@@ -351,1 +351,1 @@\n-    public boolean testEq20_2(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testEq20_2(MyValue1NewAcmp v, Object[] a) {\n@@ -355,1 +355,1 @@\n-    public boolean testEq20_3(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testEq20_3(MyValue1NewAcmp v, Object[] a) {\n@@ -359,1 +359,1 @@\n-    public boolean testEq21_1(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testEq21_1(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -363,1 +363,1 @@\n-    public boolean testEq21_2(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testEq21_2(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -367,1 +367,1 @@\n-    public boolean testEq21_3(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testEq21_3(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -372,1 +372,1 @@\n-    public boolean testEq21_4(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testEq21_4(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -377,1 +377,1 @@\n-    public boolean testEq21_5(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testEq21_5(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -382,1 +382,1 @@\n-    public boolean testEq21_6(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testEq21_6(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -386,1 +386,1 @@\n-    public boolean testEq21_7(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testEq21_7(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -390,1 +390,1 @@\n-    public boolean testEq21_8(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testEq21_8(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -394,1 +394,1 @@\n-    public boolean testEq21_9(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testEq21_9(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -399,1 +399,1 @@\n-    public boolean testEq21_10(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testEq21_10(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -404,1 +404,1 @@\n-    public boolean testEq21_11(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testEq21_11(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -409,1 +409,1 @@\n-    public boolean testEq21_12(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testEq21_12(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -413,1 +413,1 @@\n-    public boolean testEq22_1(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testEq22_1(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -417,1 +417,1 @@\n-    public boolean testEq22_2(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testEq22_2(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -421,1 +421,1 @@\n-    public boolean testEq22_3(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testEq22_3(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -425,1 +425,1 @@\n-    public boolean testEq22_4(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testEq22_4(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -429,1 +429,1 @@\n-    public boolean testEq22_5(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testEq22_5(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -433,1 +433,1 @@\n-    public boolean testEq22_6(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testEq22_6(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -437,1 +437,1 @@\n-    public boolean testEq23_1(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq23_1(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -441,1 +441,1 @@\n-    public boolean testEq23_2(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq23_2(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -445,1 +445,1 @@\n-    public boolean testEq23_3(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq23_3(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -449,1 +449,1 @@\n-    public boolean testEq23_4(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq23_4(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -453,1 +453,1 @@\n-    public boolean testEq23_5(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq23_5(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -457,1 +457,1 @@\n-    public boolean testEq23_6(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq23_6(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -461,1 +461,1 @@\n-    public boolean testEq24_1(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testEq24_1(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -465,1 +465,1 @@\n-    public boolean testEq24_2(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testEq24_2(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -469,1 +469,1 @@\n-    public boolean testEq24_3(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testEq24_3(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -473,1 +473,1 @@\n-    public boolean testEq24_4(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testEq24_4(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -477,1 +477,1 @@\n-    public boolean testEq24_5(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testEq24_5(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -481,1 +481,1 @@\n-    public boolean testEq24_6(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testEq24_6(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -485,1 +485,1 @@\n-    public boolean testEq25_1(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq25_1(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -489,1 +489,1 @@\n-    public boolean testEq25_2(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq25_2(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -493,1 +493,1 @@\n-    public boolean testEq25_3(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq25_3(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -497,1 +497,1 @@\n-    public boolean testEq25_4(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq25_4(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -501,1 +501,1 @@\n-    public boolean testEq25_5(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq25_5(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -505,1 +505,1 @@\n-    public boolean testEq25_6(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testEq25_6(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -509,1 +509,1 @@\n-    public boolean testEq26_1(MyInterface_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testEq26_1(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -513,1 +513,1 @@\n-    public boolean testEq26_2(MyInterface_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testEq26_2(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -517,1 +517,1 @@\n-    public boolean testEq26_3(MyInterface_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testEq26_3(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -521,1 +521,1 @@\n-    public boolean testEq26_4(MyAbstract_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testEq26_4(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -525,1 +525,1 @@\n-    public boolean testEq26_5(MyAbstract_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testEq26_5(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -529,1 +529,1 @@\n-    public boolean testEq26_6(MyAbstract_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testEq26_6(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -533,1 +533,1 @@\n-    public boolean testEq27_1(MyObject_NewAcmp o, MyInterface_NewAcmp u) {\n+    public boolean testEq27_1(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -537,1 +537,1 @@\n-    public boolean testEq27_2(MyObject_NewAcmp o, MyInterface_NewAcmp u) {\n+    public boolean testEq27_2(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -541,1 +541,1 @@\n-    public boolean testEq27_3(MyObject_NewAcmp o, MyInterface_NewAcmp u) {\n+    public boolean testEq27_3(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -545,1 +545,1 @@\n-    public boolean testEq27_4(MyObject_NewAcmp o, MyAbstract_NewAcmp u) {\n+    public boolean testEq27_4(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -549,1 +549,1 @@\n-    public boolean testEq27_5(MyObject_NewAcmp o, MyAbstract_NewAcmp u) {\n+    public boolean testEq27_5(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -553,1 +553,1 @@\n-    public boolean testEq27_6(MyObject_NewAcmp o, MyAbstract_NewAcmp u) {\n+    public boolean testEq27_6(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -557,1 +557,1 @@\n-    public boolean testEq28_1(MyInterface_NewAcmp[] a, MyInterface_NewAcmp u) {\n+    public boolean testEq28_1(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -561,1 +561,1 @@\n-    public boolean testEq28_2(MyInterface_NewAcmp[] a, MyInterface_NewAcmp u) {\n+    public boolean testEq28_2(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -565,1 +565,1 @@\n-    public boolean testEq28_3(MyInterface_NewAcmp[] a, MyInterface_NewAcmp u) {\n+    public boolean testEq28_3(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -569,1 +569,1 @@\n-    public boolean testEq28_4(MyAbstract_NewAcmp[] a, MyAbstract_NewAcmp u) {\n+    public boolean testEq28_4(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -573,1 +573,1 @@\n-    public boolean testEq28_5(MyAbstract_NewAcmp[] a, MyAbstract_NewAcmp u) {\n+    public boolean testEq28_5(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -577,1 +577,1 @@\n-    public boolean testEq28_6(MyAbstract_NewAcmp[] a, MyAbstract_NewAcmp u) {\n+    public boolean testEq28_6(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -581,1 +581,1 @@\n-    public boolean testEq29_1(MyInterface_NewAcmp u, MyInterface_NewAcmp[] a) {\n+    public boolean testEq29_1(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -585,1 +585,1 @@\n-    public boolean testEq29_2(MyInterface_NewAcmp u, MyInterface_NewAcmp[] a) {\n+    public boolean testEq29_2(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -589,1 +589,1 @@\n-    public boolean testEq29_3(MyInterface_NewAcmp u, MyInterface_NewAcmp[] a) {\n+    public boolean testEq29_3(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -593,1 +593,1 @@\n-    public boolean testEq29_4(MyAbstract_NewAcmp u, MyAbstract_NewAcmp[] a) {\n+    public boolean testEq29_4(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -597,1 +597,1 @@\n-    public boolean testEq29_5(MyAbstract_NewAcmp u, MyAbstract_NewAcmp[] a) {\n+    public boolean testEq29_5(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -601,1 +601,1 @@\n-    public boolean testEq29_6(MyAbstract_NewAcmp u, MyAbstract_NewAcmp[] a) {\n+    public boolean testEq29_6(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -605,1 +605,1 @@\n-    public boolean testEq30_1(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq30_1(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -609,1 +609,1 @@\n-    public boolean testEq30_2(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq30_2(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -613,1 +613,1 @@\n-    public boolean testEq30_3(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq30_3(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -617,1 +617,1 @@\n-    public boolean testEq30_4(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq30_4(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -621,1 +621,1 @@\n-    public boolean testEq30_5(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq30_5(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -625,1 +625,1 @@\n-    public boolean testEq30_6(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq30_6(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -629,1 +629,1 @@\n-    public boolean testEq31_1(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testEq31_1(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -633,1 +633,1 @@\n-    public boolean testEq31_2(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testEq31_2(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -637,1 +637,1 @@\n-    public boolean testEq31_3(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testEq31_3(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -641,1 +641,1 @@\n-    public boolean testEq31_4(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testEq31_4(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -645,1 +645,1 @@\n-    public boolean testEq31_5(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testEq31_5(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -649,1 +649,1 @@\n-    public boolean testEq31_6(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testEq31_6(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -653,1 +653,1 @@\n-    public boolean testEq32_1(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq32_1(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -657,1 +657,1 @@\n-    public boolean testEq32_2(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq32_2(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -661,1 +661,1 @@\n-    public boolean testEq32_3(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq32_3(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -665,1 +665,1 @@\n-    public boolean testEq32_4(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq32_4(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -669,1 +669,1 @@\n-    public boolean testEq32_5(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq32_5(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -673,1 +673,1 @@\n-    public boolean testEq32_6(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testEq32_6(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -677,1 +677,1 @@\n-    public boolean testEq33_1(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testEq33_1(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -681,1 +681,1 @@\n-    public boolean testEq33_2(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testEq33_2(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -685,1 +685,1 @@\n-    public boolean testEq33_3(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testEq33_3(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -689,1 +689,1 @@\n-    public boolean testEq33_4(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testEq33_4(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -693,1 +693,1 @@\n-    public boolean testEq33_5(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testEq33_5(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -697,1 +697,1 @@\n-    public boolean testEq33_6(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testEq33_6(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -704,1 +704,1 @@\n-    public boolean testNull01_1(MyValue1_NewAcmp v) {\n+    public boolean testNull01_1(MyValue1NewAcmp v) {\n@@ -708,1 +708,1 @@\n-    public boolean testNull01_2(MyValue1_NewAcmp v) {\n+    public boolean testNull01_2(MyValue1NewAcmp v) {\n@@ -712,1 +712,1 @@\n-    public boolean testNull01_3(MyValue1_NewAcmp v) {\n+    public boolean testNull01_3(MyValue1NewAcmp v) {\n@@ -716,1 +716,1 @@\n-    public boolean testNull01_4(MyValue1_NewAcmp v) {\n+    public boolean testNull01_4(MyValue1NewAcmp v) {\n@@ -720,1 +720,1 @@\n-    public boolean testNull02_1(MyValue1_NewAcmp v) {\n+    public boolean testNull02_1(MyValue1NewAcmp v) {\n@@ -724,1 +724,1 @@\n-    public boolean testNull02_2(MyValue1_NewAcmp v) {\n+    public boolean testNull02_2(MyValue1NewAcmp v) {\n@@ -728,1 +728,1 @@\n-    public boolean testNull02_3(MyValue1_NewAcmp v) {\n+    public boolean testNull02_3(MyValue1NewAcmp v) {\n@@ -732,1 +732,1 @@\n-    public boolean testNull02_4(MyValue1_NewAcmp v) {\n+    public boolean testNull02_4(MyValue1NewAcmp v) {\n@@ -768,1 +768,1 @@\n-    public boolean testNull05_1(MyObject_NewAcmp o) {\n+    public boolean testNull05_1(MyObjectNewAcmp o) {\n@@ -772,1 +772,1 @@\n-    public boolean testNull05_2(MyObject_NewAcmp o) {\n+    public boolean testNull05_2(MyObjectNewAcmp o) {\n@@ -776,1 +776,1 @@\n-    public boolean testNull05_3(MyObject_NewAcmp o) {\n+    public boolean testNull05_3(MyObjectNewAcmp o) {\n@@ -780,1 +780,1 @@\n-    public boolean testNull05_4(MyObject_NewAcmp o) {\n+    public boolean testNull05_4(MyObjectNewAcmp o) {\n@@ -784,1 +784,1 @@\n-    public boolean testNull06_1(MyObject_NewAcmp o) {\n+    public boolean testNull06_1(MyObjectNewAcmp o) {\n@@ -788,1 +788,1 @@\n-    public boolean testNull06_2(MyObject_NewAcmp o) {\n+    public boolean testNull06_2(MyObjectNewAcmp o) {\n@@ -792,1 +792,1 @@\n-    public boolean testNull06_3(MyObject_NewAcmp o) {\n+    public boolean testNull06_3(MyObjectNewAcmp o) {\n@@ -796,1 +796,1 @@\n-    public boolean testNull06_4(MyObject_NewAcmp o) {\n+    public boolean testNull06_4(MyObjectNewAcmp o) {\n@@ -800,1 +800,1 @@\n-    public boolean testNull07_1(MyInterface_NewAcmp u) {\n+    public boolean testNull07_1(MyInterfaceNewAcmp u) {\n@@ -804,1 +804,1 @@\n-    public boolean testNull07_2(MyInterface_NewAcmp u) {\n+    public boolean testNull07_2(MyInterfaceNewAcmp u) {\n@@ -808,1 +808,1 @@\n-    public boolean testNull07_3(MyInterface_NewAcmp u) {\n+    public boolean testNull07_3(MyInterfaceNewAcmp u) {\n@@ -812,1 +812,1 @@\n-    public boolean testNull07_4(MyInterface_NewAcmp u) {\n+    public boolean testNull07_4(MyInterfaceNewAcmp u) {\n@@ -816,1 +816,1 @@\n-    public boolean testNull07_5(MyAbstract_NewAcmp u) {\n+    public boolean testNull07_5(MyAbstractNewAcmp u) {\n@@ -820,1 +820,1 @@\n-    public boolean testNull07_6(MyAbstract_NewAcmp u) {\n+    public boolean testNull07_6(MyAbstractNewAcmp u) {\n@@ -824,1 +824,1 @@\n-    public boolean testNull07_7(MyAbstract_NewAcmp u) {\n+    public boolean testNull07_7(MyAbstractNewAcmp u) {\n@@ -828,1 +828,1 @@\n-    public boolean testNull07_8(MyAbstract_NewAcmp u) {\n+    public boolean testNull07_8(MyAbstractNewAcmp u) {\n@@ -832,1 +832,1 @@\n-    public boolean testNull08_1(MyInterface_NewAcmp u) {\n+    public boolean testNull08_1(MyInterfaceNewAcmp u) {\n@@ -836,1 +836,1 @@\n-    public boolean testNull08_2(MyInterface_NewAcmp u) {\n+    public boolean testNull08_2(MyInterfaceNewAcmp u) {\n@@ -840,1 +840,1 @@\n-    public boolean testNull08_3(MyInterface_NewAcmp u) {\n+    public boolean testNull08_3(MyInterfaceNewAcmp u) {\n@@ -844,1 +844,1 @@\n-    public boolean testNull08_4(MyInterface_NewAcmp u) {\n+    public boolean testNull08_4(MyInterfaceNewAcmp u) {\n@@ -848,1 +848,1 @@\n-    public boolean testNull08_5(MyAbstract_NewAcmp u) {\n+    public boolean testNull08_5(MyAbstractNewAcmp u) {\n@@ -852,1 +852,1 @@\n-    public boolean testNull08_6(MyAbstract_NewAcmp u) {\n+    public boolean testNull08_6(MyAbstractNewAcmp u) {\n@@ -856,1 +856,1 @@\n-    public boolean testNull08_7(MyAbstract_NewAcmp u) {\n+    public boolean testNull08_7(MyAbstractNewAcmp u) {\n@@ -860,1 +860,1 @@\n-    public boolean testNull08_8(MyAbstract_NewAcmp u) {\n+    public boolean testNull08_8(MyAbstractNewAcmp u) {\n@@ -893,1 +893,1 @@\n-    public boolean testNotEq02_1(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testNotEq02_1(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -897,1 +897,1 @@\n-    public boolean testNotEq02_2(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testNotEq02_2(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -901,1 +901,1 @@\n-    public boolean testNotEq02_3(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testNotEq02_3(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -905,1 +905,1 @@\n-    public boolean testNotEq03_1(MyValue1_NewAcmp v, Object u) {\n+    public boolean testNotEq03_1(MyValue1NewAcmp v, Object u) {\n@@ -909,1 +909,1 @@\n-    public boolean testNotEq03_2(MyValue1_NewAcmp v, Object u) {\n+    public boolean testNotEq03_2(MyValue1NewAcmp v, Object u) {\n@@ -913,1 +913,1 @@\n-    public boolean testNotEq03_3(MyValue1_NewAcmp v, Object u) {\n+    public boolean testNotEq03_3(MyValue1NewAcmp v, Object u) {\n@@ -917,1 +917,1 @@\n-    public boolean testNotEq04_1(Object u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq04_1(Object u, MyValue1NewAcmp v) {\n@@ -921,1 +921,1 @@\n-    public boolean testNotEq04_2(Object u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq04_2(Object u, MyValue1NewAcmp v) {\n@@ -925,1 +925,1 @@\n-    public boolean testNotEq04_3(Object u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq04_3(Object u, MyValue1NewAcmp v) {\n@@ -929,1 +929,1 @@\n-    public boolean testNotEq05_1(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testNotEq05_1(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -933,1 +933,1 @@\n-    public boolean testNotEq05_2(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testNotEq05_2(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -937,1 +937,1 @@\n-    public boolean testNotEq05_3(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testNotEq05_3(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -941,1 +941,1 @@\n-    public boolean testNotEq06_1(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testNotEq06_1(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -945,1 +945,1 @@\n-    public boolean testNotEq06_2(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testNotEq06_2(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -949,1 +949,1 @@\n-    public boolean testNotEq06_3(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testNotEq06_3(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -953,1 +953,1 @@\n-    public boolean testNotEq07_1(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testNotEq07_1(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -957,1 +957,1 @@\n-    public boolean testNotEq07_2(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testNotEq07_2(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -961,1 +961,1 @@\n-    public boolean testNotEq07_3(MyValue1_NewAcmp v1, MyValue1_NewAcmp v2) {\n+    public boolean testNotEq07_3(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -965,1 +965,1 @@\n-    public boolean testNotEq08_1(MyValue1_NewAcmp v, Object u) {\n+    public boolean testNotEq08_1(MyValue1NewAcmp v, Object u) {\n@@ -969,1 +969,1 @@\n-    public boolean testNotEq08_2(MyValue1_NewAcmp v, Object u) {\n+    public boolean testNotEq08_2(MyValue1NewAcmp v, Object u) {\n@@ -973,1 +973,1 @@\n-    public boolean testNotEq08_3(MyValue1_NewAcmp v, Object u) {\n+    public boolean testNotEq08_3(MyValue1NewAcmp v, Object u) {\n@@ -977,1 +977,1 @@\n-    public boolean testNotEq09_1(Object u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq09_1(Object u, MyValue1NewAcmp v) {\n@@ -981,1 +981,1 @@\n-    public boolean testNotEq09_2(Object u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq09_2(Object u, MyValue1NewAcmp v) {\n@@ -985,1 +985,1 @@\n-    public boolean testNotEq09_3(Object u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq09_3(Object u, MyValue1NewAcmp v) {\n@@ -989,1 +989,1 @@\n-    public boolean testNotEq10_1(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testNotEq10_1(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -993,1 +993,1 @@\n-    public boolean testNotEq10_2(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testNotEq10_2(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -997,1 +997,1 @@\n-    public boolean testNotEq10_3(MyObject_NewAcmp o, MyValue1_NewAcmp v) {\n+    public boolean testNotEq10_3(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -1001,1 +1001,1 @@\n-    public boolean testNotEq11_1(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testNotEq11_1(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -1005,1 +1005,1 @@\n-    public boolean testNotEq11_2(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testNotEq11_2(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -1009,1 +1009,1 @@\n-    public boolean testNotEq11_3(MyValue1_NewAcmp v, MyObject_NewAcmp o) {\n+    public boolean testNotEq11_3(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -1013,1 +1013,1 @@\n-    public boolean testNotEq12_1(MyObject_NewAcmp o1, MyObject_NewAcmp o2) {\n+    public boolean testNotEq12_1(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -1017,1 +1017,1 @@\n-    public boolean testNotEq12_2(MyObject_NewAcmp o1, MyObject_NewAcmp o2) {\n+    public boolean testNotEq12_2(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -1021,1 +1021,1 @@\n-    public boolean testNotEq12_3(MyObject_NewAcmp o1, MyObject_NewAcmp o2) {\n+    public boolean testNotEq12_3(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -1025,1 +1025,1 @@\n-    public boolean testNotEq13_1(Object u, MyObject_NewAcmp o) {\n+    public boolean testNotEq13_1(Object u, MyObjectNewAcmp o) {\n@@ -1029,1 +1029,1 @@\n-    public boolean testNotEq13_2(Object u, MyObject_NewAcmp o) {\n+    public boolean testNotEq13_2(Object u, MyObjectNewAcmp o) {\n@@ -1033,1 +1033,1 @@\n-    public boolean testNotEq13_3(Object u, MyObject_NewAcmp o) {\n+    public boolean testNotEq13_3(Object u, MyObjectNewAcmp o) {\n@@ -1037,1 +1037,1 @@\n-    public boolean testNotEq14_1(MyObject_NewAcmp o, Object u) {\n+    public boolean testNotEq14_1(MyObjectNewAcmp o, Object u) {\n@@ -1041,1 +1041,1 @@\n-    public boolean testNotEq14_2(MyObject_NewAcmp o, Object u) {\n+    public boolean testNotEq14_2(MyObjectNewAcmp o, Object u) {\n@@ -1045,1 +1045,1 @@\n-    public boolean testNotEq14_3(MyObject_NewAcmp o, Object u) {\n+    public boolean testNotEq14_3(MyObjectNewAcmp o, Object u) {\n@@ -1073,1 +1073,1 @@\n-    public boolean testNotEq17_1(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq17_1(Object[] a, MyValue1NewAcmp v) {\n@@ -1077,1 +1077,1 @@\n-    public boolean testNotEq17_2(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq17_2(Object[] a, MyValue1NewAcmp v) {\n@@ -1081,1 +1081,1 @@\n-    public boolean testNotEq17_3(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq17_3(Object[] a, MyValue1NewAcmp v) {\n@@ -1085,1 +1085,1 @@\n-    public boolean testNotEq18_1(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testNotEq18_1(MyValue1NewAcmp v, Object[] a) {\n@@ -1089,1 +1089,1 @@\n-    public boolean testNotEq18_2(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testNotEq18_2(MyValue1NewAcmp v, Object[] a) {\n@@ -1093,1 +1093,1 @@\n-    public boolean testNotEq18_3(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testNotEq18_3(MyValue1NewAcmp v, Object[] a) {\n@@ -1097,1 +1097,1 @@\n-    public boolean testNotEq19_1(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq19_1(Object[] a, MyValue1NewAcmp v) {\n@@ -1101,1 +1101,1 @@\n-    public boolean testNotEq19_2(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq19_2(Object[] a, MyValue1NewAcmp v) {\n@@ -1105,1 +1105,1 @@\n-    public boolean testNotEq19_3(Object[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq19_3(Object[] a, MyValue1NewAcmp v) {\n@@ -1109,1 +1109,1 @@\n-    public boolean testNotEq20_1(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testNotEq20_1(MyValue1NewAcmp v, Object[] a) {\n@@ -1113,1 +1113,1 @@\n-    public boolean testNotEq20_2(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testNotEq20_2(MyValue1NewAcmp v, Object[] a) {\n@@ -1117,1 +1117,1 @@\n-    public boolean testNotEq20_3(MyValue1_NewAcmp v, Object[] a) {\n+    public boolean testNotEq20_3(MyValue1NewAcmp v, Object[] a) {\n@@ -1121,1 +1121,1 @@\n-    public boolean testNotEq21_1(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testNotEq21_1(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1125,1 +1125,1 @@\n-    public boolean testNotEq21_2(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testNotEq21_2(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1129,1 +1129,1 @@\n-    public boolean testNotEq21_3(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testNotEq21_3(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1134,1 +1134,1 @@\n-    public boolean testNotEq21_4(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testNotEq21_4(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1139,1 +1139,1 @@\n-    public boolean testNotEq21_5(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testNotEq21_5(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1144,1 +1144,1 @@\n-    public boolean testNotEq21_6(MyInterface_NewAcmp u1, MyInterface_NewAcmp u2) {\n+    public boolean testNotEq21_6(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1148,1 +1148,1 @@\n-    public boolean testNotEq21_7(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testNotEq21_7(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1152,1 +1152,1 @@\n-    public boolean testNotEq21_8(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testNotEq21_8(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1156,1 +1156,1 @@\n-    public boolean testNotEq21_9(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testNotEq21_9(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1161,1 +1161,1 @@\n-    public boolean testNotEq21_10(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testNotEq21_10(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1166,1 +1166,1 @@\n-    public boolean testNotEq21_11(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testNotEq21_11(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1171,1 +1171,1 @@\n-    public boolean testNotEq21_12(MyAbstract_NewAcmp u1, MyAbstract_NewAcmp u2) {\n+    public boolean testNotEq21_12(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1175,1 +1175,1 @@\n-    public boolean testNotEq22_1(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testNotEq22_1(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1179,1 +1179,1 @@\n-    public boolean testNotEq22_2(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testNotEq22_2(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1183,1 +1183,1 @@\n-    public boolean testNotEq22_3(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testNotEq22_3(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1187,1 +1187,1 @@\n-    public boolean testNotEq22_4(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq22_4(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1191,1 +1191,1 @@\n-    public boolean testNotEq22_5(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq22_5(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1195,1 +1195,1 @@\n-    public boolean testNotEq22_6(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq22_6(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1199,1 +1199,1 @@\n-    public boolean testNotEq23_1(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq23_1(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1203,1 +1203,1 @@\n-    public boolean testNotEq23_2(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq23_2(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1207,1 +1207,1 @@\n-    public boolean testNotEq23_3(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq23_3(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1211,1 +1211,1 @@\n-    public boolean testNotEq23_4(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq23_4(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1215,1 +1215,1 @@\n-    public boolean testNotEq23_5(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq23_5(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1219,1 +1219,1 @@\n-    public boolean testNotEq23_6(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq23_6(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1223,1 +1223,1 @@\n-    public boolean testNotEq24_1(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testNotEq24_1(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1227,1 +1227,1 @@\n-    public boolean testNotEq24_2(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testNotEq24_2(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1231,1 +1231,1 @@\n-    public boolean testNotEq24_3(MyValue1_NewAcmp v, MyInterface_NewAcmp u) {\n+    public boolean testNotEq24_3(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1235,1 +1235,1 @@\n-    public boolean testNotEq24_4(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq24_4(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1239,1 +1239,1 @@\n-    public boolean testNotEq24_5(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq24_5(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1243,1 +1243,1 @@\n-    public boolean testNotEq24_6(MyValue1_NewAcmp v, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq24_6(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1247,1 +1247,1 @@\n-    public boolean testNotEq25_1(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq25_1(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1251,1 +1251,1 @@\n-    public boolean testNotEq25_2(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq25_2(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1255,1 +1255,1 @@\n-    public boolean testNotEq25_3(MyInterface_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq25_3(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1259,1 +1259,1 @@\n-    public boolean testNotEq25_4(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq25_4(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1263,1 +1263,1 @@\n-    public boolean testNotEq25_5(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq25_5(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1267,1 +1267,1 @@\n-    public boolean testNotEq25_6(MyAbstract_NewAcmp u, MyValue1_NewAcmp v) {\n+    public boolean testNotEq25_6(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1271,1 +1271,1 @@\n-    public boolean testNotEq26_1(MyInterface_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testNotEq26_1(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -1275,1 +1275,1 @@\n-    public boolean testNotEq26_2(MyInterface_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testNotEq26_2(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -1279,1 +1279,1 @@\n-    public boolean testNotEq26_3(MyInterface_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testNotEq26_3(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -1283,1 +1283,1 @@\n-    public boolean testNotEq26_4(MyAbstract_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testNotEq26_4(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -1287,1 +1287,1 @@\n-    public boolean testNotEq26_5(MyAbstract_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testNotEq26_5(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -1291,1 +1291,1 @@\n-    public boolean testNotEq26_6(MyAbstract_NewAcmp u, MyObject_NewAcmp o) {\n+    public boolean testNotEq26_6(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -1295,1 +1295,1 @@\n-    public boolean testNotEq27_1(MyObject_NewAcmp o, MyInterface_NewAcmp u) {\n+    public boolean testNotEq27_1(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -1299,1 +1299,1 @@\n-    public boolean testNotEq27_2(MyObject_NewAcmp o, MyInterface_NewAcmp u) {\n+    public boolean testNotEq27_2(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -1303,1 +1303,1 @@\n-    public boolean testNotEq27_3(MyObject_NewAcmp o, MyInterface_NewAcmp u) {\n+    public boolean testNotEq27_3(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -1307,1 +1307,1 @@\n-    public boolean testNotEq27_4(MyObject_NewAcmp o, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq27_4(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -1311,1 +1311,1 @@\n-    public boolean testNotEq27_5(MyObject_NewAcmp o, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq27_5(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -1315,1 +1315,1 @@\n-    public boolean testNotEq27_6(MyObject_NewAcmp o, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq27_6(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -1319,1 +1319,1 @@\n-    public boolean testNotEq28_1(MyInterface_NewAcmp[] a, MyInterface_NewAcmp u) {\n+    public boolean testNotEq28_1(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -1323,1 +1323,1 @@\n-    public boolean testNotEq28_2(MyInterface_NewAcmp[] a, MyInterface_NewAcmp u) {\n+    public boolean testNotEq28_2(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -1327,1 +1327,1 @@\n-    public boolean testNotEq28_3(MyInterface_NewAcmp[] a, MyInterface_NewAcmp u) {\n+    public boolean testNotEq28_3(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -1331,1 +1331,1 @@\n-    public boolean testNotEq28_4(MyAbstract_NewAcmp[] a, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq28_4(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -1335,1 +1335,1 @@\n-    public boolean testNotEq28_5(MyAbstract_NewAcmp[] a, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq28_5(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -1339,1 +1339,1 @@\n-    public boolean testNotEq28_6(MyAbstract_NewAcmp[] a, MyAbstract_NewAcmp u) {\n+    public boolean testNotEq28_6(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -1343,1 +1343,1 @@\n-    public boolean testNotEq29_1(MyInterface_NewAcmp u, MyInterface_NewAcmp[] a) {\n+    public boolean testNotEq29_1(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -1347,1 +1347,1 @@\n-    public boolean testNotEq29_2(MyInterface_NewAcmp u, MyInterface_NewAcmp[] a) {\n+    public boolean testNotEq29_2(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -1351,1 +1351,1 @@\n-    public boolean testNotEq29_3(MyInterface_NewAcmp u, MyInterface_NewAcmp[] a) {\n+    public boolean testNotEq29_3(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -1355,1 +1355,1 @@\n-    public boolean testNotEq29_4(MyAbstract_NewAcmp u, MyAbstract_NewAcmp[] a) {\n+    public boolean testNotEq29_4(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -1359,1 +1359,1 @@\n-    public boolean testNotEq29_5(MyAbstract_NewAcmp u, MyAbstract_NewAcmp[] a) {\n+    public boolean testNotEq29_5(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -1363,1 +1363,1 @@\n-    public boolean testNotEq29_6(MyAbstract_NewAcmp u, MyAbstract_NewAcmp[] a) {\n+    public boolean testNotEq29_6(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -1367,1 +1367,1 @@\n-    public boolean testNotEq30_1(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq30_1(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1371,1 +1371,1 @@\n-    public boolean testNotEq30_2(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq30_2(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1375,1 +1375,1 @@\n-    public boolean testNotEq30_3(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq30_3(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1379,1 +1379,1 @@\n-    public boolean testNotEq30_4(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq30_4(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1383,1 +1383,1 @@\n-    public boolean testNotEq30_5(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq30_5(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1387,1 +1387,1 @@\n-    public boolean testNotEq30_6(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq30_6(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1391,1 +1391,1 @@\n-    public boolean testNotEq31_1(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testNotEq31_1(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1395,1 +1395,1 @@\n-    public boolean testNotEq31_2(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testNotEq31_2(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1399,1 +1399,1 @@\n-    public boolean testNotEq31_3(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testNotEq31_3(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1403,1 +1403,1 @@\n-    public boolean testNotEq31_4(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testNotEq31_4(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1407,1 +1407,1 @@\n-    public boolean testNotEq31_5(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testNotEq31_5(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1411,1 +1411,1 @@\n-    public boolean testNotEq31_6(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testNotEq31_6(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1415,1 +1415,1 @@\n-    public boolean testNotEq32_1(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq32_1(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1419,1 +1419,1 @@\n-    public boolean testNotEq32_2(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq32_2(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1423,1 +1423,1 @@\n-    public boolean testNotEq32_3(MyInterface_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq32_3(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1427,1 +1427,1 @@\n-    public boolean testNotEq32_4(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq32_4(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1431,1 +1431,1 @@\n-    public boolean testNotEq32_5(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq32_5(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1435,1 +1435,1 @@\n-    public boolean testNotEq32_6(MyAbstract_NewAcmp[] a, MyValue1_NewAcmp v) {\n+    public boolean testNotEq32_6(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1439,1 +1439,1 @@\n-    public boolean testNotEq33_1(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testNotEq33_1(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1443,1 +1443,1 @@\n-    public boolean testNotEq33_2(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testNotEq33_2(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1447,1 +1447,1 @@\n-    public boolean testNotEq33_3(MyValue1_NewAcmp v, MyInterface_NewAcmp[] a) {\n+    public boolean testNotEq33_3(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1451,1 +1451,1 @@\n-    public boolean testNotEq33_4(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testNotEq33_4(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1455,1 +1455,1 @@\n-    public boolean testNotEq33_5(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testNotEq33_5(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1459,1 +1459,1 @@\n-    public boolean testNotEq33_6(MyValue1_NewAcmp v, MyAbstract_NewAcmp[] a) {\n+    public boolean testNotEq33_6(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1465,1 +1465,1 @@\n-    public boolean testNotNull01_1(MyValue1_NewAcmp v) {\n+    public boolean testNotNull01_1(MyValue1NewAcmp v) {\n@@ -1469,1 +1469,1 @@\n-    public boolean testNotNull01_2(MyValue1_NewAcmp v) {\n+    public boolean testNotNull01_2(MyValue1NewAcmp v) {\n@@ -1473,1 +1473,1 @@\n-    public boolean testNotNull01_3(MyValue1_NewAcmp v) {\n+    public boolean testNotNull01_3(MyValue1NewAcmp v) {\n@@ -1477,1 +1477,1 @@\n-    public boolean testNotNull01_4(MyValue1_NewAcmp v) {\n+    public boolean testNotNull01_4(MyValue1NewAcmp v) {\n@@ -1481,1 +1481,1 @@\n-    public boolean testNotNull02_1(MyValue1_NewAcmp v) {\n+    public boolean testNotNull02_1(MyValue1NewAcmp v) {\n@@ -1485,1 +1485,1 @@\n-    public boolean testNotNull02_2(MyValue1_NewAcmp v) {\n+    public boolean testNotNull02_2(MyValue1NewAcmp v) {\n@@ -1489,1 +1489,1 @@\n-    public boolean testNotNull02_3(MyValue1_NewAcmp v) {\n+    public boolean testNotNull02_3(MyValue1NewAcmp v) {\n@@ -1493,1 +1493,1 @@\n-    public boolean testNotNull02_4(MyValue1_NewAcmp v) {\n+    public boolean testNotNull02_4(MyValue1NewAcmp v) {\n@@ -1529,1 +1529,1 @@\n-    public boolean testNotNull05_1(MyObject_NewAcmp o) {\n+    public boolean testNotNull05_1(MyObjectNewAcmp o) {\n@@ -1533,1 +1533,1 @@\n-    public boolean testNotNull05_2(MyObject_NewAcmp o) {\n+    public boolean testNotNull05_2(MyObjectNewAcmp o) {\n@@ -1537,1 +1537,1 @@\n-    public boolean testNotNull05_3(MyObject_NewAcmp o) {\n+    public boolean testNotNull05_3(MyObjectNewAcmp o) {\n@@ -1541,1 +1541,1 @@\n-    public boolean testNotNull05_4(MyObject_NewAcmp o) {\n+    public boolean testNotNull05_4(MyObjectNewAcmp o) {\n@@ -1545,1 +1545,1 @@\n-    public boolean testNotNull06_1(MyObject_NewAcmp o) {\n+    public boolean testNotNull06_1(MyObjectNewAcmp o) {\n@@ -1549,1 +1549,1 @@\n-    public boolean testNotNull06_2(MyObject_NewAcmp o) {\n+    public boolean testNotNull06_2(MyObjectNewAcmp o) {\n@@ -1553,1 +1553,1 @@\n-    public boolean testNotNull06_3(MyObject_NewAcmp o) {\n+    public boolean testNotNull06_3(MyObjectNewAcmp o) {\n@@ -1557,1 +1557,1 @@\n-    public boolean testNotNull06_4(MyObject_NewAcmp o) {\n+    public boolean testNotNull06_4(MyObjectNewAcmp o) {\n@@ -1561,1 +1561,1 @@\n-    public boolean testNotNull07_1(MyInterface_NewAcmp u) {\n+    public boolean testNotNull07_1(MyInterfaceNewAcmp u) {\n@@ -1565,1 +1565,1 @@\n-    public boolean testNotNull07_2(MyInterface_NewAcmp u) {\n+    public boolean testNotNull07_2(MyInterfaceNewAcmp u) {\n@@ -1569,1 +1569,1 @@\n-    public boolean testNotNull07_3(MyInterface_NewAcmp u) {\n+    public boolean testNotNull07_3(MyInterfaceNewAcmp u) {\n@@ -1573,1 +1573,1 @@\n-    public boolean testNotNull07_4(MyInterface_NewAcmp u) {\n+    public boolean testNotNull07_4(MyInterfaceNewAcmp u) {\n@@ -1577,1 +1577,1 @@\n-    public boolean testNotNull07_5(MyAbstract_NewAcmp u) {\n+    public boolean testNotNull07_5(MyAbstractNewAcmp u) {\n@@ -1581,1 +1581,1 @@\n-    public boolean testNotNull07_6(MyAbstract_NewAcmp u) {\n+    public boolean testNotNull07_6(MyAbstractNewAcmp u) {\n@@ -1585,1 +1585,1 @@\n-    public boolean testNotNull07_7(MyAbstract_NewAcmp u) {\n+    public boolean testNotNull07_7(MyAbstractNewAcmp u) {\n@@ -1589,1 +1589,1 @@\n-    public boolean testNotNull07_8(MyAbstract_NewAcmp u) {\n+    public boolean testNotNull07_8(MyAbstractNewAcmp u) {\n@@ -1593,1 +1593,1 @@\n-    public boolean testNotNull08_1(MyInterface_NewAcmp u) {\n+    public boolean testNotNull08_1(MyInterfaceNewAcmp u) {\n@@ -1597,1 +1597,1 @@\n-    public boolean testNotNull08_2(MyInterface_NewAcmp u) {\n+    public boolean testNotNull08_2(MyInterfaceNewAcmp u) {\n@@ -1601,1 +1601,1 @@\n-    public boolean testNotNull08_3(MyInterface_NewAcmp u) {\n+    public boolean testNotNull08_3(MyInterfaceNewAcmp u) {\n@@ -1605,1 +1605,1 @@\n-    public boolean testNotNull08_4(MyInterface_NewAcmp u) {\n+    public boolean testNotNull08_4(MyInterfaceNewAcmp u) {\n@@ -1609,1 +1609,1 @@\n-    public boolean testNotNull08_5(MyAbstract_NewAcmp u) {\n+    public boolean testNotNull08_5(MyAbstractNewAcmp u) {\n@@ -1613,1 +1613,1 @@\n-    public boolean testNotNull08_6(MyAbstract_NewAcmp u) {\n+    public boolean testNotNull08_6(MyAbstractNewAcmp u) {\n@@ -1617,1 +1617,1 @@\n-    public boolean testNotNull08_7(MyAbstract_NewAcmp u) {\n+    public boolean testNotNull08_7(MyAbstractNewAcmp u) {\n@@ -1621,1 +1621,1 @@\n-    public boolean testNotNull08_8(MyAbstract_NewAcmp u) {\n+    public boolean testNotNull08_8(MyAbstractNewAcmp u) {\n@@ -1635,1 +1635,1 @@\n-    public Object get(MyValue1_NewAcmp v) {\n+    public Object get(MyValue1NewAcmp v) {\n@@ -1639,2 +1639,2 @@\n-    public Object getNotNull(MyValue1_NewAcmp v) {\n-        return ((Object)v != null) ? v : MyValue1_NewAcmp.createDefault();\n+    public Object getNotNull(MyValue1NewAcmp v) {\n+        return ((Object)v != null) ? v : MyValue1NewAcmp.createDefault();\n@@ -1643,1 +1643,1 @@\n-    public Object get(MyObject_NewAcmp o) {\n+    public Object get(MyObjectNewAcmp o) {\n@@ -1647,2 +1647,2 @@\n-    public Object getNotNull(MyObject_NewAcmp o) {\n-        return (o != null) ? o : MyValue1_NewAcmp.createDefault();\n+    public Object getNotNull(MyObjectNewAcmp o) {\n+        return (o != null) ? o : MyValue1NewAcmp.createDefault();\n@@ -1734,1 +1734,1 @@\n-            if (args[i] == null && parameterTypes[0] == MyValue1_NewAcmp.class) {\n+            if (args[i] == null && parameterTypes[0] == MyValue1NewAcmp.class) {\n@@ -1756,1 +1756,1 @@\n-                    if (args[j] == null && parameterTypes[1] == MyValue1_NewAcmp.class) {\n+                    if (args[j] == null && parameterTypes[1] == MyValue1NewAcmp.class) {\n@@ -1781,2 +1781,2 @@\n-                           new MyObject_NewAcmp(),\n-                           MyValue1_NewAcmp.setX(MyValue1_NewAcmp.createDefault(), 42),\n+                           new MyObjectNewAcmp(),\n+                           MyValue1NewAcmp.setX(MyValue1NewAcmp.createDefault(), 42),\n@@ -1784,4 +1784,4 @@\n-                           new MyObject_NewAcmp[10],\n-                           MyValue1_NewAcmp.setX(MyValue1_NewAcmp.createDefault(), 0x42),\n-                           MyValue1_NewAcmp.setX(MyValue1_NewAcmp.createDefault(), 42),\n-                           MyValue2_NewAcmp.setX(MyValue2_NewAcmp.createDefault(), 42), };\n+                           new MyObjectNewAcmp[10],\n+                           MyValue1NewAcmp.setX(MyValue1NewAcmp.createDefault(), 0x42),\n+                           MyValue1NewAcmp.setX(MyValue1NewAcmp.createDefault(), 42),\n+                           MyValue2NewAcmp.setX(MyValue2NewAcmp.createDefault(), 42), };\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":363,"deletions":363,"binary":false,"changes":726,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-value class MyValue_OptKlassCmp {\n+value class MyValueOptKlassCmp {\n@@ -40,1 +40,1 @@\n-    public MyValue_OptKlassCmp(int x) {\n+    public MyValueOptKlassCmp(int x) {\n@@ -47,1 +47,1 @@\n-    public static boolean test1(MyValue_OptKlassCmp v1, MyValue_OptKlassCmp v2) {\n+    public static boolean test1(MyValueOptKlassCmp v1, MyValueOptKlassCmp v2) {\n@@ -51,1 +51,1 @@\n-    public static boolean test2(MyValue_OptKlassCmp v1, MyValue_OptKlassCmp v2) {\n+    public static boolean test2(MyValueOptKlassCmp v1, MyValueOptKlassCmp v2) {\n@@ -60,2 +60,2 @@\n-        MyValue_OptKlassCmp v1 = new MyValue_OptKlassCmp(0);\n-        MyValue_OptKlassCmp v2 = new MyValue_OptKlassCmp(1);\n+        MyValueOptKlassCmp v1 = new MyValueOptKlassCmp(0);\n+        MyValueOptKlassCmp v2 = new MyValueOptKlassCmp(1);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOptimizeKlassCmp.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-value class MyValue_StressRetBuf {\n+value class MyValueStressRetBuf {\n@@ -45,1 +45,1 @@\n-    public MyValue_StressRetBuf(Integer o) {\n+    public MyValueStressRetBuf(Integer o) {\n@@ -58,2 +58,2 @@\n-    public static MyValue_StressRetBuf callee() {\n-        return new MyValue_StressRetBuf(integer);\n+    public static MyValueStressRetBuf callee() {\n+        return new MyValueStressRetBuf(integer);\n@@ -65,1 +65,1 @@\n-            MyValue_StressRetBuf vt = callee();\n+            MyValueStressRetBuf vt = callee();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestStressReturnBuffering.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -321,1 +321,1 @@\n-value class MyValue_Tearing {\n+value class MyValueTearing {\n@@ -331,1 +331,1 @@\n-            Field xField = MyValue_Tearing.class.getDeclaredField(\"x\");\n+            Field xField = MyValueTearing.class.getDeclaredField(\"x\");\n@@ -333,1 +333,1 @@\n-            Field yField = MyValue_Tearing.class.getDeclaredField(\"y\");\n+            Field yField = MyValueTearing.class.getDeclaredField(\"y\");\n@@ -340,1 +340,1 @@\n-    static final MyValue_Tearing DEFAULT = new MyValue_Tearing((short)0, (short)0);\n+    static final MyValueTearing DEFAULT = new MyValueTearing((short)0, (short)0);\n@@ -342,1 +342,1 @@\n-    MyValue_Tearing(short x, short y) {\n+    MyValueTearing(short x, short y) {\n@@ -347,1 +347,1 @@\n-    MyValue_Tearing incrementAndCheck() {\n+    MyValueTearing incrementAndCheck() {\n@@ -349,1 +349,1 @@\n-        return new MyValue_Tearing((short)(x + 1), (short)(y + 1));\n+        return new MyValueTearing((short)(x + 1), (short)(y + 1));\n@@ -352,1 +352,1 @@\n-    MyValue_Tearing incrementAndCheckUnsafe() {\n+    MyValueTearing incrementAndCheckUnsafe() {\n@@ -354,1 +354,1 @@\n-        MyValue_Tearing vt = U.makePrivateBuffer(this);\n+        MyValueTearing vt = U.makePrivateBuffer(this);\n@@ -365,1 +365,1 @@\n-    volatile static MyValue_Tearing field1 = MyValue_Tearing.DEFAULT;\n+    volatile static MyValueTearing field1 = MyValueTearing.DEFAULT;\n@@ -368,1 +368,1 @@\n-    volatile MyValue_Tearing field2 = MyValue_Tearing.DEFAULT;\n+    volatile MyValueTearing field2 = MyValueTearing.DEFAULT;\n@@ -371,2 +371,2 @@\n-    static MyValue_Tearing field3 = new MyValue_Tearing((short)0, (short)0);\n-    MyValue_Tearing field4 = new MyValue_Tearing((short)0, (short)0);\n+    static MyValueTearing field3 = new MyValueTearing((short)0, (short)0);\n+    MyValueTearing field4 = new MyValueTearing((short)0, (short)0);\n@@ -375,2 +375,2 @@\n-    static final MyValue_Tearing[] array1 = (MyValue_Tearing[])ValueClass.newNullRestrictedAtomicArray(MyValue_Tearing.class, 1, MyValue_Tearing.DEFAULT);\n-    static final MyValue_Tearing[] array2 = (MyValue_Tearing[])ValueClass.newNullableAtomicArray(MyValue_Tearing.class, 1);\n+    static final MyValueTearing[] array1 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+    static final MyValueTearing[] array2 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n@@ -378,1 +378,1 @@\n-        array2[0] = new MyValue_Tearing((short)0, (short)0);\n+        array2[0] = new MyValueTearing((short)0, (short)0);\n@@ -380,1 +380,1 @@\n-    static final MyValue_Tearing[] array3 = new MyValue_Tearing[] { new MyValue_Tearing((short)0, (short)0) };\n+    static final MyValueTearing[] array3 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -383,2 +383,2 @@\n-    static MyValue_Tearing[] array4 = (MyValue_Tearing[])ValueClass.newNullRestrictedAtomicArray(MyValue_Tearing.class, 1, MyValue_Tearing.DEFAULT);\n-    static MyValue_Tearing[] array5 = (MyValue_Tearing[])ValueClass.newNullableAtomicArray(MyValue_Tearing.class, 1);\n+    static MyValueTearing[] array4 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+    static MyValueTearing[] array5 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n@@ -386,1 +386,1 @@\n-        array5[0] = new MyValue_Tearing((short)0, (short)0);\n+        array5[0] = new MyValueTearing((short)0, (short)0);\n@@ -388,1 +388,1 @@\n-    static MyValue_Tearing[] array6 = new MyValue_Tearing[] { new MyValue_Tearing((short)0, (short)0) };\n+    static MyValueTearing[] array6 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -391,2 +391,2 @@\n-    static Object[] array7 = (MyValue_Tearing[])ValueClass.newNullRestrictedAtomicArray(MyValue_Tearing.class, 1, MyValue_Tearing.DEFAULT);\n-    static Object[] array8 = (MyValue_Tearing[])ValueClass.newNullableAtomicArray(MyValue_Tearing.class, 1);\n+    static Object[] array7 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+    static Object[] array8 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n@@ -394,1 +394,1 @@\n-        array8[0] = new MyValue_Tearing((short)0, (short)0);\n+        array8[0] = new MyValueTearing((short)0, (short)0);\n@@ -396,1 +396,1 @@\n-    static Object[] array9 = new MyValue_Tearing[] { new MyValue_Tearing((short)0, (short)0) };\n+    static Object[] array9 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -399,2 +399,2 @@\n-    static volatile Object[] array10 = (MyValue_Tearing[])ValueClass.newNullRestrictedAtomicArray(MyValue_Tearing.class, 1, MyValue_Tearing.DEFAULT);\n-    static volatile Object[] array11 = (MyValue_Tearing[])ValueClass.newNullableAtomicArray(MyValue_Tearing.class, 1);\n+    static volatile Object[] array10 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+    static volatile Object[] array11 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n@@ -402,1 +402,1 @@\n-        array11[0] = new MyValue_Tearing((short)0, (short)0);\n+        array11[0] = new MyValueTearing((short)0, (short)0);\n@@ -404,1 +404,1 @@\n-    static volatile Object[] array12 = new MyValue_Tearing[] { new MyValue_Tearing((short)0, (short)0) };\n+    static volatile Object[] array12 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -410,1 +410,1 @@\n-            Class<?> clazz = MyValue_Tearing.class;\n+            Class<?> clazz = MyValueTearing.class;\n@@ -413,1 +413,1 @@\n-            MethodType mt = MethodType.methodType(MyValue_Tearing.class);\n+            MethodType mt = MethodType.methodType(MyValueTearing.class);\n@@ -433,4 +433,4 @@\n-                MyValue_Tearing[] localArray1 = (MyValue_Tearing[])ValueClass.newNullRestrictedAtomicArray(MyValue_Tearing.class, 1, MyValue_Tearing.DEFAULT);\n-                MyValue_Tearing[] localArray2 = (MyValue_Tearing[])ValueClass.newNullableAtomicArray(MyValue_Tearing.class, 1);\n-                localArray2[0] = new MyValue_Tearing((short)0, (short)0);\n-                MyValue_Tearing[] localArray3 = new MyValue_Tearing[] { new MyValue_Tearing((short)0, (short)0) };\n+                MyValueTearing[] localArray1 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+                MyValueTearing[] localArray2 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n+                localArray2[0] = new MyValueTearing((short)0, (short)0);\n+                MyValueTearing[] localArray3 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -464,6 +464,6 @@\n-                array7[0] = ((MyValue_Tearing)array7[0]).incrementAndCheck();\n-                array8[0] = ((MyValue_Tearing)array8[0]).incrementAndCheck();\n-                array9[0] = ((MyValue_Tearing)array9[0]).incrementAndCheck();\n-                array10[0] = ((MyValue_Tearing)array10[0]).incrementAndCheck();\n-                array11[0] = ((MyValue_Tearing)array11[0]).incrementAndCheck();\n-                array12[0] = ((MyValue_Tearing)array12[0]).incrementAndCheck();\n+                array7[0] = ((MyValueTearing)array7[0]).incrementAndCheck();\n+                array8[0] = ((MyValueTearing)array8[0]).incrementAndCheck();\n+                array9[0] = ((MyValueTearing)array9[0]).incrementAndCheck();\n+                array10[0] = ((MyValueTearing)array10[0]).incrementAndCheck();\n+                array11[0] = ((MyValueTearing)array11[0]).incrementAndCheck();\n+                array12[0] = ((MyValueTearing)array12[0]).incrementAndCheck();\n@@ -481,6 +481,6 @@\n-                array7[0] = ((MyValue_Tearing)array7[0]).incrementAndCheckUnsafe();\n-                array8[0] = ((MyValue_Tearing)array8[0]).incrementAndCheckUnsafe();\n-                array9[0] = ((MyValue_Tearing)array9[0]).incrementAndCheckUnsafe();\n-                array10[0] = ((MyValue_Tearing)array10[0]).incrementAndCheckUnsafe();\n-                array11[0] = ((MyValue_Tearing)array11[0]).incrementAndCheckUnsafe();\n-                array12[0] = ((MyValue_Tearing)array12[0]).incrementAndCheckUnsafe();\n+                array7[0] = ((MyValueTearing)array7[0]).incrementAndCheckUnsafe();\n+                array8[0] = ((MyValueTearing)array8[0]).incrementAndCheckUnsafe();\n+                array9[0] = ((MyValueTearing)array9[0]).incrementAndCheckUnsafe();\n+                array10[0] = ((MyValueTearing)array10[0]).incrementAndCheckUnsafe();\n+                array11[0] = ((MyValueTearing)array11[0]).incrementAndCheckUnsafe();\n+                array12[0] = ((MyValueTearing)array12[0]).incrementAndCheckUnsafe();\n@@ -489,16 +489,16 @@\n-                    test.field1 = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(test.field1);\n-                    test.field2 = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(test.field2);\n-                    test.field3 = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(test.field1);\n-                    test.field4 = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(test.field2);\n-                    array1[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(array1[0]);\n-                    array2[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(array2[0]);\n-                    array3[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(array3[0]);\n-                    array4[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(array4[0]);\n-                    array5[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(array5[0]);\n-                    array6[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact(array6[0]);\n-                    array7[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact((MyValue_Tearing)array7[0]);\n-                    array8[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact((MyValue_Tearing)array8[0]);\n-                    array9[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact((MyValue_Tearing)array9[0]);\n-                    array10[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact((MyValue_Tearing)array10[0]);\n-                    array11[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact((MyValue_Tearing)array11[0]);\n-                    array12[0] = (MyValue_Tearing)incrementAndCheck_mh.invokeExact((MyValue_Tearing)array12[0]);\n+                    test.field1 = (MyValueTearing)incrementAndCheck_mh.invokeExact(test.field1);\n+                    test.field2 = (MyValueTearing)incrementAndCheck_mh.invokeExact(test.field2);\n+                    test.field3 = (MyValueTearing)incrementAndCheck_mh.invokeExact(test.field1);\n+                    test.field4 = (MyValueTearing)incrementAndCheck_mh.invokeExact(test.field2);\n+                    array1[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array1[0]);\n+                    array2[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array2[0]);\n+                    array3[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array3[0]);\n+                    array4[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array4[0]);\n+                    array5[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array5[0]);\n+                    array6[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array6[0]);\n+                    array7[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array7[0]);\n+                    array8[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array8[0]);\n+                    array9[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array9[0]);\n+                    array10[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array10[0]);\n+                    array11[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array11[0]);\n+                    array12[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array12[0]);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTearing.java","additions":63,"deletions":63,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-value class MyValue1_UnexpectedMemBar {\n+value class MyValue1UnexpectedMemBar {\n@@ -76,1 +76,1 @@\n-    public MyValue1_UnexpectedMemBar(Integer i, int[] array) {\n+    public MyValue1UnexpectedMemBar(Integer i, int[] array) {\n@@ -82,1 +82,1 @@\n-value class MyValue2_UnexpectedMemBar {\n+value class MyValue2UnexpectedMemBar {\n@@ -92,1 +92,1 @@\n-    public MyValue2_UnexpectedMemBar(NonValueClass obj, int[] array) {\n+    public MyValue2UnexpectedMemBar(NonValueClass obj, int[] array) {\n@@ -102,2 +102,2 @@\n-        MyValue1_UnexpectedMemBar vt = new MyValue1_UnexpectedMemBar(i, array);\n-        vt = new MyValue1_UnexpectedMemBar(vt.i, vt.array);\n+        MyValue1UnexpectedMemBar vt = new MyValue1UnexpectedMemBar(i, array);\n+        vt = new MyValue1UnexpectedMemBar(vt.i, vt.array);\n@@ -109,2 +109,2 @@\n-        MyValue1_UnexpectedMemBar vt = new MyValue1_UnexpectedMemBar(i, array);\n-        vt = new MyValue1_UnexpectedMemBar(vt.i, vt.array);\n+        MyValue1UnexpectedMemBar vt = new MyValue1UnexpectedMemBar(i, array);\n+        vt = new MyValue1UnexpectedMemBar(vt.i, vt.array);\n@@ -116,2 +116,2 @@\n-        MyValue2_UnexpectedMemBar vt = new MyValue2_UnexpectedMemBar(obj, array);\n-        vt = new MyValue2_UnexpectedMemBar(vt.obj, vt.array);\n+        MyValue2UnexpectedMemBar vt = new MyValue2UnexpectedMemBar(obj, array);\n+        vt = new MyValue2UnexpectedMemBar(vt.obj, vt.array);\n@@ -123,2 +123,2 @@\n-        MyValue2_UnexpectedMemBar vt = new MyValue2_UnexpectedMemBar(obj, array);\n-        vt = new MyValue2_UnexpectedMemBar(vt.obj, vt.array);\n+        MyValue2UnexpectedMemBar vt = new MyValue2UnexpectedMemBar(obj, array);\n+        vt = new MyValue2UnexpectedMemBar(vt.obj, vt.array);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnexpectedMemBar.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-value class MyValue_UninitValueClass {\n-    static final MyValue_UninitValueClass EMPTY = new MyValue_UninitValueClass();\n+value class MyValueUninitValueClass {\n+    static final MyValueUninitValueClass EMPTY = new MyValueUninitValueClass();\n@@ -43,1 +43,1 @@\n-        MyValue_UninitValueClass unused = new MyValue_UninitValueClass();\n+        MyValueUninitValueClass unused = new MyValueUninitValueClass();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUninitializedValueClass.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-value class MyValue1_UnloadedInlineTypeArray {\n+value class MyValue1UnloadedInlineTypeArray {\n@@ -135,1 +135,1 @@\n-    private MyValue1_UnloadedInlineTypeArray() {\n+    private MyValue1UnloadedInlineTypeArray() {\n@@ -141,1 +141,1 @@\n-value class MyValue2_UnloadedInlineTypeArray {\n+value class MyValue2UnloadedInlineTypeArray {\n@@ -144,1 +144,1 @@\n-    public MyValue2_UnloadedInlineTypeArray(int n) {\n+    public MyValue2UnloadedInlineTypeArray(int n) {\n@@ -150,1 +150,1 @@\n-value class MyValue3_UnloadedInlineTypeArray {\n+value class MyValue3UnloadedInlineTypeArray {\n@@ -153,1 +153,1 @@\n-    public MyValue3_UnloadedInlineTypeArray(int n) {\n+    public MyValue3UnloadedInlineTypeArray(int n) {\n@@ -159,1 +159,1 @@\n-value class MyValue4_UnloadedInlineTypeArray {\n+value class MyValue4UnloadedInlineTypeArray {\n@@ -162,1 +162,1 @@\n-    public MyValue4_UnloadedInlineTypeArray(int n) {\n+    public MyValue4UnloadedInlineTypeArray(int n) {\n@@ -168,1 +168,1 @@\n-value class MyValue5_UnloadedInlineTypeArray {\n+value class MyValue5UnloadedInlineTypeArray {\n@@ -171,1 +171,1 @@\n-    public MyValue5_UnloadedInlineTypeArray(int n) {\n+    public MyValue5UnloadedInlineTypeArray(int n) {\n@@ -177,1 +177,1 @@\n-value class MyValue6_UnloadedInlineTypeArray {\n+value class MyValue6UnloadedInlineTypeArray {\n@@ -180,1 +180,1 @@\n-    public MyValue6_UnloadedInlineTypeArray(int n) {\n+    public MyValue6UnloadedInlineTypeArray(int n) {\n@@ -184,1 +184,1 @@\n-    public MyValue6_UnloadedInlineTypeArray(MyValue6_UnloadedInlineTypeArray v, MyValue6_UnloadedInlineTypeArray[] dummy) {\n+    public MyValue6UnloadedInlineTypeArray(MyValue6UnloadedInlineTypeArray v, MyValue6UnloadedInlineTypeArray[] dummy) {\n@@ -190,1 +190,1 @@\n-value class MyValue7_UnloadedInlineTypeArray {\n+value class MyValue7UnloadedInlineTypeArray {\n@@ -193,1 +193,1 @@\n-    public MyValue7_UnloadedInlineTypeArray(int n) {\n+    public MyValue7UnloadedInlineTypeArray(int n) {\n@@ -199,1 +199,1 @@\n-value class MyValue8_UnloadedInlineTypeArray {\n+value class MyValue8UnloadedInlineTypeArray {\n@@ -207,1 +207,1 @@\n-value class MyValue9_UnloadedInlineTypeArray {\n+value class MyValue9UnloadedInlineTypeArray {\n@@ -215,1 +215,1 @@\n-value class MyValue10_UnloadedInlineTypeArray {\n+value class MyValue10UnloadedInlineTypeArray {\n@@ -220,1 +220,1 @@\n-value class MyValue11_UnloadedInlineTypeArray {\n+value class MyValue11UnloadedInlineTypeArray {\n@@ -228,2 +228,2 @@\n-    static MyValue1_UnloadedInlineTypeArray[] target1() {\n-        return (MyValue1_UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue1_UnloadedInlineTypeArray.class, 10);\n+    static MyValue1UnloadedInlineTypeArray[] target1() {\n+        return (MyValue1UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue1UnloadedInlineTypeArray.class, 10);\n@@ -236,2 +236,2 @@\n-    static MyValue1_UnloadedInlineTypeArray[] target1Nullable() {\n-        return new MyValue1_UnloadedInlineTypeArray[10];\n+    static MyValue1UnloadedInlineTypeArray[] target1Nullable() {\n+        return new MyValue1UnloadedInlineTypeArray[10];\n@@ -244,1 +244,1 @@\n-    static int test2(MyValue2_UnloadedInlineTypeArray[] arr) {\n+    static int test2(MyValue2UnloadedInlineTypeArray[] arr) {\n@@ -261,2 +261,2 @@\n-        MyValue2_UnloadedInlineTypeArray[] arr = (MyValue2_UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue2_UnloadedInlineTypeArray.class, 2);\n-        arr[1] = new MyValue2_UnloadedInlineTypeArray(5678);\n+        MyValue2UnloadedInlineTypeArray[] arr = (MyValue2UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue2UnloadedInlineTypeArray.class, 2);\n+        arr[1] = new MyValue2UnloadedInlineTypeArray(5678);\n@@ -270,1 +270,1 @@\n-    static int test2Nullable(MyValue2_UnloadedInlineTypeArray[] arr) {\n+    static int test2Nullable(MyValue2UnloadedInlineTypeArray[] arr) {\n@@ -287,2 +287,2 @@\n-        MyValue2_UnloadedInlineTypeArray[] arr = new MyValue2_UnloadedInlineTypeArray[2];\n-        arr[1] = new MyValue2_UnloadedInlineTypeArray(5678);\n+        MyValue2UnloadedInlineTypeArray[] arr = new MyValue2UnloadedInlineTypeArray[2];\n+        arr[1] = new MyValue2UnloadedInlineTypeArray(5678);\n@@ -296,1 +296,1 @@\n-    static void test3(MyValue3_UnloadedInlineTypeArray[] arr) {\n+    static void test3(MyValue3UnloadedInlineTypeArray[] arr) {\n@@ -298,1 +298,1 @@\n-            arr[1] = new MyValue3_UnloadedInlineTypeArray(2345);\n+            arr[1] = new MyValue3UnloadedInlineTypeArray(2345);\n@@ -309,1 +309,1 @@\n-        MyValue3_UnloadedInlineTypeArray[] arr = (MyValue3_UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue3_UnloadedInlineTypeArray.class, 2);\n+        MyValue3UnloadedInlineTypeArray[] arr = (MyValue3UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue3UnloadedInlineTypeArray.class, 2);\n@@ -316,1 +316,1 @@\n-    static void test3Nullable(MyValue3_UnloadedInlineTypeArray[] arr) {\n+    static void test3Nullable(MyValue3UnloadedInlineTypeArray[] arr) {\n@@ -319,1 +319,1 @@\n-            arr[1] = new MyValue3_UnloadedInlineTypeArray(2345);\n+            arr[1] = new MyValue3UnloadedInlineTypeArray(2345);\n@@ -330,1 +330,1 @@\n-        MyValue3_UnloadedInlineTypeArray[] arr = new MyValue3_UnloadedInlineTypeArray[2];\n+        MyValue3UnloadedInlineTypeArray[] arr = new MyValue3UnloadedInlineTypeArray[2];\n@@ -338,1 +338,1 @@\n-    static MyValue4_UnloadedInlineTypeArray[] test4(boolean b) {\n+    static MyValue4UnloadedInlineTypeArray[] test4(boolean b) {\n@@ -341,2 +341,2 @@\n-            MyValue4_UnloadedInlineTypeArray[] arr = (MyValue4_UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue4_UnloadedInlineTypeArray.class, 10);\n-            arr[1] = new MyValue4_UnloadedInlineTypeArray(2345);\n+            MyValue4UnloadedInlineTypeArray[] arr = (MyValue4UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue4UnloadedInlineTypeArray.class, 10);\n+            arr[1] = new MyValue4UnloadedInlineTypeArray(2345);\n@@ -356,1 +356,1 @@\n-        MyValue4_UnloadedInlineTypeArray[] arr = null;\n+        MyValue4UnloadedInlineTypeArray[] arr = null;\n@@ -363,1 +363,1 @@\n-    static MyValue4_UnloadedInlineTypeArray[] test4Nullable(boolean b) {\n+    static MyValue4UnloadedInlineTypeArray[] test4Nullable(boolean b) {\n@@ -366,1 +366,1 @@\n-            MyValue4_UnloadedInlineTypeArray[] arr = new MyValue4_UnloadedInlineTypeArray[10];\n+            MyValue4UnloadedInlineTypeArray[] arr = new MyValue4UnloadedInlineTypeArray[10];\n@@ -368,1 +368,1 @@\n-            arr[1] = new MyValue4_UnloadedInlineTypeArray(2345);\n+            arr[1] = new MyValue4UnloadedInlineTypeArray(2345);\n@@ -382,1 +382,1 @@\n-        MyValue4_UnloadedInlineTypeArray[] arr = null;\n+        MyValue4UnloadedInlineTypeArray[] arr = null;\n@@ -395,2 +395,2 @@\n-            MyValue5_UnloadedInlineTypeArray[] arr = (MyValue5_UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue5_UnloadedInlineTypeArray.class, 10);\n-            arr[1] = new MyValue5_UnloadedInlineTypeArray(12345);\n+            MyValue5UnloadedInlineTypeArray[] arr = (MyValue5UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue5UnloadedInlineTypeArray.class, 10);\n+            arr[1] = new MyValue5UnloadedInlineTypeArray(12345);\n@@ -399,2 +399,2 @@\n-            MyValue5_UnloadedInlineTypeArray[] arr = new MyValue5_UnloadedInlineTypeArray[10];\n-            arr[1] = new MyValue5_UnloadedInlineTypeArray(22345);\n+            MyValue5UnloadedInlineTypeArray[] arr = new MyValue5UnloadedInlineTypeArray[10];\n+            arr[1] = new MyValue5UnloadedInlineTypeArray(22345);\n@@ -413,1 +413,1 @@\n-            MyValue5_UnloadedInlineTypeArray[] arr = null;\n+            MyValue5UnloadedInlineTypeArray[] arr = null;\n@@ -415,1 +415,1 @@\n-                arr = (MyValue5_UnloadedInlineTypeArray[])test5(1);\n+                arr = (MyValue5UnloadedInlineTypeArray[])test5(1);\n@@ -420,1 +420,1 @@\n-            MyValue5_UnloadedInlineTypeArray[] arr = null;\n+            MyValue5UnloadedInlineTypeArray[] arr = null;\n@@ -422,1 +422,1 @@\n-                arr = (MyValue5_UnloadedInlineTypeArray[])test5(2);\n+                arr = (MyValue5UnloadedInlineTypeArray[])test5(2);\n@@ -429,1 +429,1 @@\n-        return new MyValue6_UnloadedInlineTypeArray(new MyValue6_UnloadedInlineTypeArray(123), null);\n+        return new MyValue6UnloadedInlineTypeArray(new MyValue6UnloadedInlineTypeArray(123), null);\n@@ -434,1 +434,1 @@\n-        Asserts.assertEQ(n.toString(), \"compiler.valhalla.inlinetypes.MyValue6_UnloadedInlineTypeArray@\" + Integer.toHexString(n.hashCode()));\n+        Asserts.assertEQ(n.toString(), \"compiler.valhalla.inlinetypes.MyValue6UnloadedInlineTypeArray@\" + Integer.toHexString(n.hashCode()));\n@@ -437,1 +437,1 @@\n-    static int test7(MyValue7_UnloadedInlineTypeArray[][] arr) {\n+    static int test7(MyValue7UnloadedInlineTypeArray[][] arr) {\n@@ -454,2 +454,2 @@\n-        MyValue7_UnloadedInlineTypeArray[][] arr = { (MyValue7_UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue7_UnloadedInlineTypeArray.class, 2),\n-                             (MyValue7_UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue7_UnloadedInlineTypeArray.class, 2) };\n+        MyValue7UnloadedInlineTypeArray[][] arr = { (MyValue7UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue7UnloadedInlineTypeArray.class, 2),\n+                             (MyValue7UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue7UnloadedInlineTypeArray.class, 2) };\n@@ -459,1 +459,1 @@\n-        arr[0][1] = new MyValue7_UnloadedInlineTypeArray(5678);\n+        arr[0][1] = new MyValue7UnloadedInlineTypeArray(5678);\n@@ -467,1 +467,1 @@\n-    static int test7Nullable(MyValue7_UnloadedInlineTypeArray[][] arr) {\n+    static int test7Nullable(MyValue7UnloadedInlineTypeArray[][] arr) {\n@@ -485,1 +485,1 @@\n-        MyValue7_UnloadedInlineTypeArray[][] arr = new MyValue7_UnloadedInlineTypeArray[2][2];\n+        MyValue7UnloadedInlineTypeArray[][] arr = new MyValue7UnloadedInlineTypeArray[2][2];\n@@ -489,1 +489,1 @@\n-        arr[0][1] = new MyValue7_UnloadedInlineTypeArray(5678);\n+        arr[0][1] = new MyValue7UnloadedInlineTypeArray(5678);\n@@ -499,1 +499,1 @@\n-        MyValue8_UnloadedInlineTypeArray a[] = new MyValue8_UnloadedInlineTypeArray[0];\n+        MyValue8UnloadedInlineTypeArray a[] = new MyValue8UnloadedInlineTypeArray[0];\n@@ -502,1 +502,1 @@\n-        MyValue8_UnloadedInlineTypeArray b[] = (MyValue8_UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue8_UnloadedInlineTypeArray.class, 0);\n+        MyValue8UnloadedInlineTypeArray b[] = (MyValue8UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue8UnloadedInlineTypeArray.class, 0);\n@@ -507,1 +507,1 @@\n-        MyValue9_UnloadedInlineTypeArray a[][] = new MyValue9_UnloadedInlineTypeArray[10][0];\n+        MyValue9UnloadedInlineTypeArray a[][] = new MyValue9UnloadedInlineTypeArray[10][0];\n@@ -510,1 +510,1 @@\n-        a[0] = (MyValue9_UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue9_UnloadedInlineTypeArray.class, 0);\n+        a[0] = (MyValue9UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue9UnloadedInlineTypeArray.class, 0);\n@@ -514,2 +514,2 @@\n-    static void test10(MyValue10_UnloadedInlineTypeArray dummy) {\n-        MyValue10_UnloadedInlineTypeArray[][] a = { (MyValue10_UnloadedInlineTypeArray[])ValueClass.newNullRestrictedNonAtomicArray(MyValue10_UnloadedInlineTypeArray.class, 1, new MyValue10_UnloadedInlineTypeArray()) };\n+    static void test10(MyValue10UnloadedInlineTypeArray dummy) {\n+        MyValue10UnloadedInlineTypeArray[][] a = { (MyValue10UnloadedInlineTypeArray[])ValueClass.newNullRestrictedNonAtomicArray(MyValue10UnloadedInlineTypeArray.class, 1, new MyValue10UnloadedInlineTypeArray()) };\n@@ -520,2 +520,2 @@\n-    static void test11(MyValue10_UnloadedInlineTypeArray dummy) {\n-        MyValue11_UnloadedInlineTypeArray[][] a = new MyValue11_UnloadedInlineTypeArray[1][1];\n+    static void test11(MyValue10UnloadedInlineTypeArray dummy) {\n+        MyValue11UnloadedInlineTypeArray[][] a = new MyValue11UnloadedInlineTypeArray[1][1];\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java","additions":68,"deletions":68,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-value class MyValue1_UnloadedRetTypes {\n+value class MyValue1UnloadedRetTypes {\n@@ -53,1 +53,1 @@\n-    public MyValue1_UnloadedRetTypes(int x) {\n+    public MyValue1UnloadedRetTypes(int x) {\n@@ -59,2 +59,2 @@\n-    static MyValue1_UnloadedRetTypes test1(boolean b) {\n-        return b ? new MyValue1_UnloadedRetTypes(42) : null;\n+    static MyValue1UnloadedRetTypes test1(boolean b) {\n+        return b ? new MyValue1UnloadedRetTypes(42) : null;\n@@ -65,1 +65,1 @@\n-value class MyValue2_UnloadedRetTypes {\n+value class MyValue2UnloadedRetTypes {\n@@ -82,1 +82,1 @@\n-    public MyValue2_UnloadedRetTypes test2Virtual(boolean loadIt) {\n+    public MyValue2UnloadedRetTypes test2Virtual(boolean loadIt) {\n@@ -84,1 +84,1 @@\n-            return new MyValue2_UnloadedRetTypes();\n+            return new MyValue2UnloadedRetTypes();\n@@ -91,1 +91,1 @@\n-    public MyValue2_UnloadedRetTypes test2(boolean loadIt) {\n+    public MyValue2UnloadedRetTypes test2(boolean loadIt) {\n@@ -93,1 +93,1 @@\n-            return new MyValue2_UnloadedRetTypes();\n+            return new MyValue2UnloadedRetTypes();\n@@ -99,1 +99,1 @@\n-    public MyValue2_UnloadedRetTypes test2Virtual(boolean loadIt) {\n+    public MyValue2UnloadedRetTypes test2Virtual(boolean loadIt) {\n@@ -101,1 +101,1 @@\n-            return new MyValue2_UnloadedRetTypes();\n+            return new MyValue2UnloadedRetTypes();\n@@ -108,1 +108,1 @@\n-value class MyValue3_UnloadedRetTypes {\n+value class MyValue3UnloadedRetTypes {\n@@ -127,1 +127,1 @@\n-    public MyValue3_UnloadedRetTypes test3Virtual(boolean loadIt) {\n+    public MyValue3UnloadedRetTypes test3Virtual(boolean loadIt) {\n@@ -129,1 +129,1 @@\n-            return new MyValue3_UnloadedRetTypes();\n+            return new MyValue3UnloadedRetTypes();\n@@ -136,1 +136,1 @@\n-    public MyValue3_UnloadedRetTypes test3(boolean loadIt) {\n+    public MyValue3UnloadedRetTypes test3(boolean loadIt) {\n@@ -138,1 +138,1 @@\n-            return new MyValue3_UnloadedRetTypes();\n+            return new MyValue3UnloadedRetTypes();\n@@ -144,1 +144,1 @@\n-    public MyValue3_UnloadedRetTypes test3Virtual(boolean loadIt) {\n+    public MyValue3UnloadedRetTypes test3Virtual(boolean loadIt) {\n@@ -146,1 +146,1 @@\n-            return new MyValue3_UnloadedRetTypes();\n+            return new MyValue3UnloadedRetTypes();\n@@ -199,1 +199,1 @@\n-        Asserts.assertEquals(((MyValue1_UnloadedRetTypes)res).x, 42);\n+        Asserts.assertEquals(((MyValue1UnloadedRetTypes)res).x, 42);\n@@ -205,4 +205,4 @@\n-            Asserts.assertEquals(h2.test2(true), new MyValue2_UnloadedRetTypes());\n-            Asserts.assertEquals(h2Super.test2Virtual(true), new MyValue2_UnloadedRetTypes());\n-            Asserts.assertEquals(h3.test3(true), new MyValue3_UnloadedRetTypes());\n-            Asserts.assertEquals(h3Super.test3Virtual(true), new MyValue3_UnloadedRetTypes());\n+            Asserts.assertEquals(h2.test2(true), new MyValue2UnloadedRetTypes());\n+            Asserts.assertEquals(h2Super.test2Virtual(true), new MyValue2UnloadedRetTypes());\n+            Asserts.assertEquals(h3.test3(true), new MyValue3UnloadedRetTypes());\n+            Asserts.assertEquals(h3Super.test3Virtual(true), new MyValue3UnloadedRetTypes());\n@@ -210,6 +210,6 @@\n-        Asserts.assertEquals(test2(h2, true), new MyValue2_UnloadedRetTypes());\n-        Asserts.assertEquals(test2Virtual(h2, true), new MyValue2_UnloadedRetTypes());\n-        Asserts.assertEquals(test2Virtual(h2Super, true), new MyValue2_UnloadedRetTypes());\n-        Asserts.assertEquals(test3(h3, true), new MyValue3_UnloadedRetTypes());\n-        Asserts.assertEquals(test3Virtual(h3, true), new MyValue3_UnloadedRetTypes());\n-        Asserts.assertEquals(test3Virtual(h3Super, true), new MyValue3_UnloadedRetTypes());\n+        Asserts.assertEquals(test2(h2, true), new MyValue2UnloadedRetTypes());\n+        Asserts.assertEquals(test2Virtual(h2, true), new MyValue2UnloadedRetTypes());\n+        Asserts.assertEquals(test2Virtual(h2Super, true), new MyValue2UnloadedRetTypes());\n+        Asserts.assertEquals(test3(h3, true), new MyValue3UnloadedRetTypes());\n+        Asserts.assertEquals(test3Virtual(h3, true), new MyValue3UnloadedRetTypes());\n+        Asserts.assertEquals(test3Virtual(h3Super, true), new MyValue3UnloadedRetTypes());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedReturnTypes.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"}]}