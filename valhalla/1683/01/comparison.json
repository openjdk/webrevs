{"files":[{"patch":"@@ -48,2 +48,0 @@\n-import java.util.ArrayList;\n-import java.util.Collections;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/CorrectlyRestoreRfp.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/SimpleInlineType.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-StressUnstableIfTraps TestAcmpWithUnstableIf\n- * @run main\/othervm -XX:CompileCommand=compileonly,TestAcmpWithUnstableIf::test* -Xbatch\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:-StressUnstableIfTraps TestAcmpWithUnstableIf\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-StressUnstableIfTraps compiler.valhalla.inlinetypes.TestAcmpWithUnstableIf\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestAcmpWithUnstableIf::test* -Xbatch\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:-StressUnstableIfTraps compiler.valhalla.inlinetypes.TestAcmpWithUnstableIf\n@@ -37,0 +37,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestAcmpWithUnstableIf.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main TestArrayAccessDeopt\n+ * @run main compiler.valhalla.inlinetypes.TestArrayAccessDeopt\n@@ -35,1 +35,2 @@\n-import java.io.File;\n+package compiler.valhalla.inlinetypes;\n+\n@@ -38,1 +39,0 @@\n-import jdk.test.lib.Asserts;\n@@ -44,1 +44,0 @@\n-import jdk.internal.vm.annotation.NullRestricted;\n@@ -47,1 +46,1 @@\n-value class MyValue1 {\n+value class MyValue1ArrayAccessDeopt {\n@@ -57,1 +56,1 @@\n-    public static void test2(Object[] va, MyValue1 vt) {\n+    public static void test2(Object[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -61,2 +60,2 @@\n-    public static void test3(MyValue1[] va, Object vt) {\n-        va[0] = (MyValue1)vt;\n+    public static void test3(MyValue1ArrayAccessDeopt[] va, Object vt) {\n+        va[0] = (MyValue1ArrayAccessDeopt)vt;\n@@ -65,1 +64,1 @@\n-    public static void test4(MyValue1[] va, MyValue1 vt) {\n+    public static void test4(MyValue1ArrayAccessDeopt[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -69,1 +68,1 @@\n-    public static void test5(Object[] va, MyValue1 vt) {\n+    public static void test5(Object[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -73,2 +72,2 @@\n-    public static void test6(MyValue1[] va, Object vt) {\n-        va[0] = (MyValue1)Objects.requireNonNull(vt);\n+    public static void test6(MyValue1ArrayAccessDeopt[] va, Object vt) {\n+        va[0] = (MyValue1ArrayAccessDeopt)Objects.requireNonNull(vt);\n@@ -77,1 +76,1 @@\n-    public static void test7(MyValue1[] va, MyValue1 vt) {\n+    public static void test7(MyValue1ArrayAccessDeopt[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -81,1 +80,1 @@\n-    public static void test8(MyValue1[] va, MyValue1 vt) {\n+    public static void test8(MyValue1ArrayAccessDeopt[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -85,1 +84,1 @@\n-    public static void test9(MyValue1[] va, MyValue1 vt) {\n+    public static void test9(MyValue1ArrayAccessDeopt[] va, MyValue1ArrayAccessDeopt vt) {\n@@ -93,1 +92,1 @@\n-    public static void test11(MyValue1[] va) {\n+    public static void test11(MyValue1ArrayAccessDeopt[] va) {\n@@ -101,2 +100,2 @@\n-                            \"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,TestArrayAccessDeopt::test*\", \"-XX:-UseArrayLoadStoreProfile\",\n-                            \"-XX:+TraceDeoptimization\", \"-Xbatch\", \"-XX:-MonomorphicArrayCheck\", \"-Xmixed\", \"-XX:+ProfileInterpreter\", \"TestArrayAccessDeopt\", \"run\"};\n+                            \"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestArrayAccessDeopt::test*\", \"-XX:-UseArrayLoadStoreProfile\",\n+                            \"-XX:+TraceDeoptimization\", \"-Xbatch\", \"-XX:-MonomorphicArrayCheck\", \"-Xmixed\", \"-XX:+ProfileInterpreter\", \"compiler.valhalla.inlinetypes.TestArrayAccessDeopt\", \"run\"};\n@@ -108,3 +107,3 @@\n-            MyValue1[] va = (MyValue1[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1.class, 1, new MyValue1());\n-            MyValue1[] vaB = new MyValue1[1];\n-            MyValue1 vt = new MyValue1();\n+            MyValue1ArrayAccessDeopt[] va = (MyValue1ArrayAccessDeopt[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1ArrayAccessDeopt.class, 1, new MyValue1ArrayAccessDeopt());\n+            MyValue1ArrayAccessDeopt[] vaB = new MyValue1ArrayAccessDeopt[1];\n+            MyValue1ArrayAccessDeopt vt = new MyValue1ArrayAccessDeopt();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayAccessDeopt.java","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-import jdk.internal.vm.annotation.NullRestricted;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayCopyWithOops.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.vm.annotation.NullRestricted;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayNullMarkers.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-value class MyValue  {\n+value class MyValueArrayRematWithProp  {\n@@ -49,1 +49,1 @@\n-    static final MyValue DEFAULT = new MyValue();\n+    static final MyValueArrayRematWithProp DEFAULT = new MyValueArrayRematWithProp();\n@@ -54,4 +54,4 @@\n-    static final boolean FLAT0 = ValueClass.isFlatArray(new MyValue[1]);\n-    static final boolean FLAT1 = ValueClass.isFlatArray(ValueClass.newNullRestrictedAtomicArray(MyValue.class, 1, MyValue.DEFAULT));\n-    static final boolean FLAT2 = ValueClass.isFlatArray(ValueClass.newNullableAtomicArray(MyValue.class, 1));\n-    static final boolean FLAT3 = ValueClass.isFlatArray(ValueClass.newNullRestrictedNonAtomicArray(MyValue.class, 1, MyValue.DEFAULT));\n+    static final boolean FLAT0 = ValueClass.isFlatArray(new MyValueArrayRematWithProp[1]);\n+    static final boolean FLAT1 = ValueClass.isFlatArray(ValueClass.newNullRestrictedAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT));\n+    static final boolean FLAT2 = ValueClass.isFlatArray(ValueClass.newNullableAtomicArray(MyValueArrayRematWithProp.class, 1));\n+    static final boolean FLAT3 = ValueClass.isFlatArray(ValueClass.newNullRestrictedNonAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT));\n@@ -59,4 +59,4 @@\n-    static final boolean ATOMIC0 = ValueClass.isAtomicArray(new MyValue[1]);\n-    static final boolean ATOMIC1 = ValueClass.isAtomicArray(ValueClass.newNullRestrictedAtomicArray(MyValue.class, 1, MyValue.DEFAULT));\n-    static final boolean ATOMIC2 = ValueClass.isAtomicArray(ValueClass.newNullableAtomicArray(MyValue.class, 1));\n-    static final boolean ATOMIC3 = ValueClass.isAtomicArray(ValueClass.newNullRestrictedNonAtomicArray(MyValue.class, 1, MyValue.DEFAULT));\n+    static final boolean ATOMIC0 = ValueClass.isAtomicArray(new MyValueArrayRematWithProp[1]);\n+    static final boolean ATOMIC1 = ValueClass.isAtomicArray(ValueClass.newNullRestrictedAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT));\n+    static final boolean ATOMIC2 = ValueClass.isAtomicArray(ValueClass.newNullableAtomicArray(MyValueArrayRematWithProp.class, 1));\n+    static final boolean ATOMIC3 = ValueClass.isAtomicArray(ValueClass.newNullRestrictedNonAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT));\n@@ -66,5 +66,5 @@\n-        MyValue[] array0 = { MyValue.DEFAULT };\n-        MyValue[] array1 = (MyValue[])ValueClass.newNullRestrictedAtomicArray(MyValue.class, 1, MyValue.DEFAULT);\n-        MyValue[] array2 = (MyValue[])ValueClass.newNullableAtomicArray(MyValue.class, 1);\n-        array2[0] = MyValue.DEFAULT;\n-        MyValue[] array3 = (MyValue[])ValueClass.newNullRestrictedNonAtomicArray(MyValue.class, 1, MyValue.DEFAULT);\n+        MyValueArrayRematWithProp[] array0 = { MyValueArrayRematWithProp.DEFAULT };\n+        MyValueArrayRematWithProp[] array1 = (MyValueArrayRematWithProp[])ValueClass.newNullRestrictedAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT);\n+        MyValueArrayRematWithProp[] array2 = (MyValueArrayRematWithProp[])ValueClass.newNullableAtomicArray(MyValueArrayRematWithProp.class, 1);\n+        array2[0] = MyValueArrayRematWithProp.DEFAULT;\n+        MyValueArrayRematWithProp[] array3 = (MyValueArrayRematWithProp[])ValueClass.newNullRestrictedNonAtomicArray(MyValueArrayRematWithProp.class, 1, MyValueArrayRematWithProp.DEFAULT);\n@@ -74,4 +74,4 @@\n-            Asserts.assertEquals(array0[0], MyValue.DEFAULT);\n-            Asserts.assertEquals(array1[0], MyValue.DEFAULT);\n-            Asserts.assertEquals(array2[0], MyValue.DEFAULT);\n-            Asserts.assertEquals(array3[0], MyValue.DEFAULT);\n+            Asserts.assertEquals(array0[0], MyValueArrayRematWithProp.DEFAULT);\n+            Asserts.assertEquals(array1[0], MyValueArrayRematWithProp.DEFAULT);\n+            Asserts.assertEquals(array2[0], MyValueArrayRematWithProp.DEFAULT);\n+            Asserts.assertEquals(array3[0], MyValueArrayRematWithProp.DEFAULT);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayRematerializationWithProperties.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-interface MyInterface {\n-    public MyInterface hash(MyInterface arg);\n+interface MyInterfaceBimorphicInlining {\n+    public MyInterfaceBimorphicInlining hash(MyInterfaceBimorphicInlining arg);\n@@ -51,1 +51,1 @@\n-value class TestValue1 implements MyInterface {\n+value class TestValue1BimorphicInlining implements MyInterfaceBimorphicInlining {\n@@ -54,1 +54,1 @@\n-    public TestValue1(int x) {\n+    public TestValue1BimorphicInlining(int x) {\n@@ -58,2 +58,2 @@\n-    public TestValue1 hash(MyInterface arg) {\n-        return new TestValue1(x + ((TestValue1)arg).x);\n+    public TestValue1BimorphicInlining hash(MyInterfaceBimorphicInlining arg) {\n+        return new TestValue1BimorphicInlining(x + ((TestValue1BimorphicInlining)arg).x);\n@@ -63,1 +63,1 @@\n-value class TestValue2 implements MyInterface {\n+value class TestValue2BimorphicInlining implements MyInterfaceBimorphicInlining {\n@@ -66,1 +66,1 @@\n-    public TestValue2(int x) {\n+    public TestValue2BimorphicInlining(int x) {\n@@ -70,2 +70,2 @@\n-    public TestValue2 hash(MyInterface arg) {\n-        return new TestValue2(x + ((TestValue2)arg).x);\n+    public TestValue2BimorphicInlining hash(MyInterfaceBimorphicInlining arg) {\n+        return new TestValue2BimorphicInlining(x + ((TestValue2BimorphicInlining)arg).x);\n@@ -75,1 +75,1 @@\n-class TestClass implements MyInterface {\n+class TestClassBimorphicInlining implements MyInterfaceBimorphicInlining {\n@@ -78,1 +78,1 @@\n-    public TestClass(int x) {\n+    public TestClassBimorphicInlining(int x) {\n@@ -82,2 +82,2 @@\n-    public MyInterface hash(MyInterface arg) {\n-        return new TestClass(x + ((TestClass)arg).x);\n+    public MyInterfaceBimorphicInlining hash(MyInterfaceBimorphicInlining arg) {\n+        return new TestClassBimorphicInlining(x + ((TestClassBimorphicInlining)arg).x);\n@@ -89,2 +89,2 @@\n-    public static MyInterface test1(MyInterface i1, MyInterface i2) {\n-        MyInterface result = i1.hash(i2);\n+    public static MyInterfaceBimorphicInlining test1(MyInterfaceBimorphicInlining i1, MyInterfaceBimorphicInlining i2) {\n+        MyInterfaceBimorphicInlining result = i1.hash(i2);\n@@ -95,2 +95,2 @@\n-    public static MyInterface test2(MyInterface i1, MyInterface i2) {\n-        MyInterface result = i1.hash(i2);\n+    public static MyInterfaceBimorphicInlining test2(MyInterfaceBimorphicInlining i1, MyInterfaceBimorphicInlining i2) {\n+        MyInterfaceBimorphicInlining result = i1.hash(i2);\n@@ -101,2 +101,2 @@\n-    public static MyInterface test3(MyInterface i1, MyInterface i2) {\n-        MyInterface result = i1.hash(i2);\n+    public static MyInterfaceBimorphicInlining test3(MyInterfaceBimorphicInlining i1, MyInterfaceBimorphicInlining i2) {\n+        MyInterfaceBimorphicInlining result = i1.hash(i2);\n@@ -107,2 +107,2 @@\n-    public static MyInterface test4(MyInterface i1, MyInterface i2) {\n-        MyInterface result = i1.hash(i2);\n+    public static MyInterfaceBimorphicInlining test4(MyInterfaceBimorphicInlining i1, MyInterfaceBimorphicInlining i2) {\n+        MyInterfaceBimorphicInlining result = i1.hash(i2);\n@@ -115,3 +115,3 @@\n-        TestClass  testObject = new TestClass(rand.nextInt());\n-        TestValue1 testValue1 = new TestValue1(rand.nextInt());\n-        TestValue2 testValue2 = new TestValue2(rand.nextInt());\n+        TestClassBimorphicInlining  testObject = new TestClassBimorphicInlining(rand.nextInt());\n+        TestValue1BimorphicInlining TestValue1BimorphicInlining = new TestValue1BimorphicInlining(rand.nextInt());\n+        TestValue2BimorphicInlining TestValue2BimorphicInlining = new TestValue2BimorphicInlining(rand.nextInt());\n@@ -121,1 +121,1 @@\n-            MyInterface arg, res;\n+            MyInterfaceBimorphicInlining arg, res;\n@@ -124,1 +124,1 @@\n-            arg = rare ? testValue1 : testObject;\n+            arg = rare ? TestValue1BimorphicInlining : testObject;\n@@ -126,1 +126,1 @@\n-            Asserts.assertEQ(rare ? ((TestValue1)res).x : ((TestClass)res).x, 2 * (rare ? testValue1.x : testObject.x), \"test1 failed\");\n+            Asserts.assertEQ(rare ? ((TestValue1BimorphicInlining)res).x : ((TestClassBimorphicInlining)res).x, 2 * (rare ? TestValue1BimorphicInlining.x : testObject.x), \"test1 failed\");\n@@ -128,1 +128,1 @@\n-            arg = rare ? testObject : testValue1;\n+            arg = rare ? testObject : TestValue1BimorphicInlining;\n@@ -130,1 +130,1 @@\n-            Asserts.assertEQ(rare ? ((TestClass)res).x : ((TestValue1)res).x, 2 * (rare ? testObject.x : testValue1.x), \"test2 failed\");\n+            Asserts.assertEQ(rare ? ((TestClassBimorphicInlining)res).x : ((TestValue1BimorphicInlining)res).x, 2 * (rare ? testObject.x : TestValue1BimorphicInlining.x), \"test2 failed\");\n@@ -132,1 +132,1 @@\n-            arg = rare ? testValue1 : testValue2;\n+            arg = rare ? TestValue1BimorphicInlining : TestValue2BimorphicInlining;\n@@ -134,1 +134,1 @@\n-            Asserts.assertEQ(rare ? ((TestValue1)res).x : ((TestValue2)res).x, 2 * (rare ? testValue1.x : testValue2.x), \"test3 failed\");\n+            Asserts.assertEQ(rare ? ((TestValue1BimorphicInlining)res).x : ((TestValue2BimorphicInlining)res).x, 2 * (rare ? TestValue1BimorphicInlining.x : TestValue2BimorphicInlining.x), \"test3 failed\");\n@@ -136,1 +136,1 @@\n-            arg = rare ? testValue2 : testValue1;\n+            arg = rare ? TestValue2BimorphicInlining : TestValue1BimorphicInlining;\n@@ -138,1 +138,1 @@\n-            Asserts.assertEQ(rare ? ((TestValue2)res).x : ((TestValue1)res).x, 2 * (rare ? testValue2.x : testValue1.x), \"test4 failed\");\n+            Asserts.assertEQ(rare ? ((TestValue2BimorphicInlining)res).x : ((TestValue1BimorphicInlining)res).x, 2 * (rare ? TestValue2BimorphicInlining.x : TestValue1BimorphicInlining.x), \"test4 failed\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBimorphicInlining.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-value class Point {\n+value class PointBufferTearingC1 {\n@@ -48,1 +48,1 @@\n-    public Point(int x, int y) {\n+    public PointBufferTearingC1(int x, int y) {\n@@ -53,1 +53,1 @@\n-    public static final Point DEFAULT = new Point(0, 0);\n+    public static final PointBufferTearingC1 DEFAULT = new PointBufferTearingC1(0, 0);\n@@ -58,1 +58,1 @@\n-    public Point a, b;\n+    public PointBufferTearingC1 a, b;\n@@ -60,1 +60,1 @@\n-    public Rect(Point a, Point b) {\n+    public Rect(PointBufferTearingC1 a, PointBufferTearingC1 b) {\n@@ -65,1 +65,1 @@\n-    public static final Rect DEFAULT = new Rect(Point.DEFAULT, Point.DEFAULT);\n+    public static final Rect DEFAULT = new Rect(PointBufferTearingC1.DEFAULT, PointBufferTearingC1.DEFAULT);\n@@ -70,2 +70,2 @@\n-    public static Point[] points = (Point[])ValueClass.newNullRestrictedNonAtomicArray(Point.class, 1, Point.DEFAULT);\n-    public static Rect rect = new Rect(new Point(1, 1), new Point(2, 2));\n+    public static PointBufferTearingC1[] points = (PointBufferTearingC1[])ValueClass.newNullRestrictedNonAtomicArray(PointBufferTearingC1.class, 1, PointBufferTearingC1.DEFAULT);\n+    public static Rect rect = new Rect(new PointBufferTearingC1(1, 1), new PointBufferTearingC1(2, 2));\n@@ -75,1 +75,1 @@\n-        points[0] = new Point(1, 1);\n+        points[0] = new PointBufferTearingC1(1, 1);\n@@ -90,2 +90,2 @@\n-        points[0] = new Point(iter, iter);\n-        rect = new Rect(new Point(iter, iter), new Point(iter + 1, iter + 1));\n+        points[0] = new PointBufferTearingC1(iter, iter);\n+        rect = new Rect(new PointBufferTearingC1(iter, iter), new PointBufferTearingC1(iter + 1, iter + 1));\n@@ -104,1 +104,1 @@\n-            if (((Point)ref1).x == 0 || ((Point)ref1).y == 0) {\n+            if (((PointBufferTearingC1)ref1).x == 0 || ((PointBufferTearingC1)ref1).y == 0) {\n@@ -108,1 +108,1 @@\n-            if (((Point)ref2).x == 0 || ((Point)ref2).y == 0) {\n+            if (((PointBufferTearingC1)ref2).x == 0 || ((PointBufferTearingC1)ref2).y == 0) {\n@@ -112,1 +112,1 @@\n-            if (((Point)ref3).x == 0 || ((Point)ref3).y == 0) {\n+            if (((PointBufferTearingC1)ref3).x == 0 || ((PointBufferTearingC1)ref3).y == 0) {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearingC1.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n- *                               -XX:CompileCommand=compileonly,TestC2CCalls*::test*\n- *                               -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestC2CCalls*::test*\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestC2CCalls*::test*\n@@ -61,2 +61,2 @@\n- *                               -XX:CompileCommand=compileonly,TestC2CCalls*::test*\n- *                               -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestC2CCalls*::test*\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestC2CCalls*::test*\n@@ -76,2 +76,2 @@\n- *                              -XX:CompileCommand=compileonly,TestC2CCalls::test*\n- *                              -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n+ *                              -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestC2CCalls::test*\n+ *                              -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestC2CCalls*::test*\n@@ -91,2 +91,2 @@\n- *                               -XX:CompileCommand=compileonly,TestC2CCalls::test*\n- *                               -XX:CompileCommand=dontinline,TestC2CCalls*::test*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestC2CCalls::test*\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestC2CCalls*::test*\n@@ -535,1 +535,1 @@\n-            Collections.addAll(methods, TestC2CCalls.class.getDeclaredMethods());\n+            Collections.addAll(methods, compiler.valhalla.inlinetypes.TestC2CCalls.class.getDeclaredMethods());\n@@ -585,1 +585,1 @@\n-        \/\/ Polute call profile\n+        \/\/ Pollute call profile\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC2CCalls.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1365,1 +1365,1 @@\n-    value class MyValue58_1 extends MyAbstract58 {\n+    value class MyValue58A extends MyAbstract58 {\n@@ -1369,1 +1369,1 @@\n-    value class MyValue58_2 extends MyAbstract58 {\n+    value class MyValue58B extends MyAbstract58 {\n@@ -1374,1 +1374,1 @@\n-    value class MyValue58_3 extends MyAbstract58 {\n+    value class MyValue58C extends MyAbstract58 {\n@@ -1385,4 +1385,4 @@\n-    public MyValue58_3 test58(MyValue58_1 arg1, MyValue58_2 arg2, MyValue58_3 arg3) {\n-        Asserts.assertEQ(arg1, new MyValue58_1());\n-        Asserts.assertEQ(arg2, new MyValue58_2());\n-        Asserts.assertEQ(arg3, new MyValue58_3());\n+    public MyValue58C test58(MyValue58A arg1, MyValue58B arg2, MyValue58C arg3) {\n+        Asserts.assertEQ(arg1, new MyValue58A());\n+        Asserts.assertEQ(arg2, new MyValue58B());\n+        Asserts.assertEQ(arg3, new MyValue58C());\n@@ -1394,1 +1394,1 @@\n-        Asserts.assertEQ(test58(new MyValue58_1(), new MyValue58_2(), new MyValue58_3()), new MyValue58_3());\n+        Asserts.assertEQ(test58(new MyValue58A(), new MyValue58B(), new MyValue58C()), new MyValue58C());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.internal.value.ValueClass;\n@@ -366,1 +365,1 @@\n-    static interface RefPoint_Access {\n+    static interface RefPointAccess {\n@@ -372,1 +371,1 @@\n-    static value class RefPoint implements RefPoint_Access {\n+    static value class RefPoint implements RefPointAccess {\n@@ -409,1 +408,1 @@\n-    static class RefPoint_Access_Impl1 implements RefPoint_Access {\n+    static class RefPointAccessImpl1 implements RefPointAccess {\n@@ -427,1 +426,1 @@\n-    static class RefPoint_Access_Impl2 implements RefPoint_Access {\n+    static class RefPointAccessImpl2 implements RefPointAccess {\n@@ -445,3 +444,3 @@\n-    static RefPoint_Access refPoint_Access_impls[] = {\n-        new RefPoint_Access_Impl1(),\n-        new RefPoint_Access_Impl2(),\n+    static RefPointAccess refPoint_Access_impls[] = {\n+        new RefPointAccessImpl1(),\n+        new RefPointAccessImpl2(),\n@@ -451,3 +450,3 @@\n-    static int next_RefPoint_Access = 0;\n-    static RefPoint_Access get_RefPoint_Access() {\n-        int i = next_RefPoint_Access ++;\n+    static int next_RefPointAccess = 0;\n+    static RefPointAccess get_RefPointAccess() {\n+        int i = next_RefPointAccess ++;\n@@ -1471,1 +1470,1 @@\n-    public int test61(RefPoint_Access rpa, RefPoint rp2) {\n+    public int test61(RefPointAccess rpa, RefPoint rp2) {\n@@ -1479,1 +1478,1 @@\n-            RefPoint_Access rpa = get_RefPoint_Access();\n+            RefPointAccess rpa = get_RefPointAccess();\n@@ -1489,1 +1488,1 @@\n-    public int test62(RefPoint_Access rpa, RefPoint rp2) {\n+    public int test62(RefPointAccess rpa, RefPoint rp2) {\n@@ -1497,1 +1496,1 @@\n-            RefPoint_Access rpa = get_RefPoint_Access();\n+            RefPointAccess rpa = get_RefPointAccess();\n@@ -1510,1 +1509,1 @@\n-    public int test63(RefPoint_Access rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n+    public int test63(RefPointAccess rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n@@ -1518,1 +1517,1 @@\n-            RefPoint_Access rpa = get_RefPoint_Access();\n+            RefPointAccess rpa = get_RefPointAccess();\n@@ -1536,1 +1535,1 @@\n-    public int test64(RefPoint_Access rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n+    public int test64(RefPointAccess rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n@@ -1542,1 +1541,1 @@\n-    public static int test64_helper(RefPoint_Access rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n+    public static int test64_helper(RefPointAccess rpa, RefPoint rp1, RefPoint rp2, Number n1, RefPoint rp3, RefPoint rp4, Number n2) {\n@@ -1550,1 +1549,1 @@\n-            RefPoint_Access rpa = get_RefPoint_Access();\n+            RefPointAccess rpa = get_RefPointAccess();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @TestDeadAllocRem\n@@ -27,1 +27,1 @@\n- * @summary Test removal of an already dead AllocateNode with not-yet removed proj outputs.\n+ * @summary TestDeadAllocRem removal of an already dead AllocateNode with not-yet removed proj outputs.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xbatch TestDeadAllocationRemoval\n+ * @run main\/othervm -Xbatch compiler.valhalla.inlinetypes.TestDeadAllocRemDeadAllocationRemoval\n@@ -34,0 +34,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n@@ -41,1 +43,1 @@\n-        Test test = new Test();\n+        TestDeadAllocRem TestDeadAllocRem = new TestDeadAllocRem();\n@@ -43,1 +45,1 @@\n-            test.test();\n+            TestDeadAllocRem.TestDeadAllocRem();\n@@ -49,1 +51,1 @@\n-value class MyValue {\n+value class MyValueDeadAllocRem {\n@@ -56,1 +58,1 @@\n-class Test {\n+class TestDeadAllocRem {\n@@ -67,1 +69,1 @@\n-    public static MyValue OFld=new MyValue();\n+    public static MyValueDeadAllocRem OFld=new MyValueDeadAllocRem();\n@@ -80,1 +82,1 @@\n-    public void test() {\n+    public void TestDeadAllocRem() {\n@@ -84,1 +86,1 @@\n-        vMeth(Test.iFld);\n+        vMeth(TestDeadAllocRem.iFld);\n@@ -89,1 +91,1 @@\n-                Test.dArrFld[(int)(d3)] = -7;\n+                TestDeadAllocRem.dArrFld[(int)(d3)] = -7;\n@@ -93,6 +95,6 @@\n-                        Test.instanceCount = i22;\n-                        Test.iFld -= (int)Test.OFld.fFld1;\n-                        Test.instanceCount >>= MyValue.instanceCount;\n-                        i22 = (int)Test.OFld.fFld1;\n-                        Test.bFld1 = false;\n-                        Test.iArrFld[(int)(d3 - 1)] &= i23;\n+                        TestDeadAllocRem.instanceCount = i22;\n+                        TestDeadAllocRem.iFld -= (int)TestDeadAllocRem.OFld.fFld1;\n+                        TestDeadAllocRem.instanceCount >>= MyValueDeadAllocRem.instanceCount;\n+                        i22 = (int)TestDeadAllocRem.OFld.fFld1;\n+                        TestDeadAllocRem.bFld1 = false;\n+                        TestDeadAllocRem.iArrFld[(int)(d3 - 1)] &= i23;\n@@ -101,1 +103,1 @@\n-                        Test.iFld |= (int)MyValue.instanceCount;\n+                        TestDeadAllocRem.iFld |= (int)MyValueDeadAllocRem.instanceCount;\n@@ -103,1 +105,1 @@\n-                    Test.iFld -= (int)Test.instanceCount;\n+                    TestDeadAllocRem.iFld -= (int)TestDeadAllocRem.instanceCount;\n@@ -109,2 +111,2 @@\n-                        Test.iArrFld[i25 + 1] += (int)MyValue.instanceCount;\n-                        i22 += (i25 - Test.instanceCount);\n+                        TestDeadAllocRem.iArrFld[i25 + 1] += (int)MyValueDeadAllocRem.instanceCount;\n+                        i22 += (i25 - TestDeadAllocRem.instanceCount);\n@@ -113,3 +115,3 @@\n-                    Test.instanceCount -= 2;\n-                    Test.dFld = i22;\n-                    Test.iFld += (int)(((d3 * by) + by) - i24);\n+                    TestDeadAllocRem.instanceCount -= 2;\n+                    TestDeadAllocRem.dFld = i22;\n+                    TestDeadAllocRem.iFld += (int)(((d3 * by) + by) - i24);\n@@ -119,1 +121,1 @@\n-                    Test.OFld = new MyValue();\n+                    TestDeadAllocRem.OFld = new MyValueDeadAllocRem();\n@@ -122,2 +124,2 @@\n-                    Test.OFld = new MyValue();\n-                    MyValue.instanceCount += (long)d3;\n+                    TestDeadAllocRem.OFld = new MyValueDeadAllocRem();\n+                    MyValueDeadAllocRem.instanceCount += (long)d3;\n@@ -126,1 +128,1 @@\n-                    MyValue.instanceCount += (long)(d3 * d3);\n+                    MyValueDeadAllocRem.instanceCount += (long)(d3 * d3);\n@@ -129,1 +131,1 @@\n-                    Test.dFld -= i25;\n+                    TestDeadAllocRem.dFld -= i25;\n@@ -132,2 +134,2 @@\n-                        i24 = (78 \/ Test.iFld);\n-                        Test.iFld = (-5836 \/ Test.iArrFld[(int)(d3 + 1)]);\n+                        i24 = (78 \/ TestDeadAllocRem.iFld);\n+                        TestDeadAllocRem.iFld = (-5836 \/ TestDeadAllocRem.iArrFld[(int)(d3 + 1)]);\n@@ -138,1 +140,1 @@\n-                    if (Test.bFld1) continue;\n+                    if (TestDeadAllocRem.bFld1) continue;\n@@ -143,2 +145,2 @@\n-                        i24 = (Test.iArrFld[(int)(d3)] % -1067487586);\n-                        Test.iArrFld[(int)(d3)] = (-208 % i24);\n+                        i24 = (TestDeadAllocRem.iArrFld[(int)(d3)] % -1067487586);\n+                        TestDeadAllocRem.iArrFld[(int)(d3)] = (-208 % i24);\n@@ -151,4 +153,4 @@\n-        System.out.println(\"i23 i24 Test.OFld.fFld1 = \" + i23 + \",\" + i24 + \",\" + Float.floatToIntBits(Test.OFld.fFld1));\n-        System.out.println(\"MyValue = \" + MyValue.instanceCount);\n-        System.out.println(\"Test.instanceCount Test.dFld Test.bFld1 = \" + Test.instanceCount + \",\" + Double.doubleToLongBits(Test.dFld) + \",\" + (Test.bFld1 ? 1 : 0));\n-        System.out.println(\"MyValue = \" + MyValue.instanceCount);\n+        System.out.println(\"i23 i24 TestDeadAllocRem.OFld.fFld1 = \" + i23 + \",\" + i24 + \",\" + Float.floatToIntBits(TestDeadAllocRem.OFld.fFld1));\n+        System.out.println(\"MyValueDeadAllocRem = \" + MyValueDeadAllocRem.instanceCount);\n+        System.out.println(\"TestDeadAllocRem.instanceCount TestDeadAllocRem.dFld TestDeadAllocRem.bFld1 = \" + TestDeadAllocRem.instanceCount + \",\" + Double.doubleToLongBits(TestDeadAllocRem.dFld) + \",\" + (TestDeadAllocRem.bFld1 ? 1 : 0));\n+        System.out.println(\"MyValueDeadAllocRem = \" + MyValueDeadAllocRem.instanceCount);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeadAllocationRemoval.java","additions":40,"deletions":38,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -347,1 +347,1 @@\n-            \/\/ Check counters to make sure that we don't accidentially reexecute calls when deoptimizing\n+            \/\/ Check counters to make sure that we don't accidentally reexecute calls when deoptimizing\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import jdk.internal.value.ValueClass;\n@@ -307,1 +306,1 @@\n-    static value class MyValue5_3 {\n+    static value class MyValue5C {\n@@ -310,1 +309,1 @@\n-        public MyValue5_3(byte x) {\n+        public MyValue5C(byte x) {\n@@ -316,1 +315,1 @@\n-    static value class MyValue5_2 {\n+    static value class MyValue5B {\n@@ -318,1 +317,1 @@\n-        MyValue5_3 val;\n+        MyValue5C val;\n@@ -320,1 +319,1 @@\n-        public MyValue5_2(byte x, MyValue5_3 val) {\n+        public MyValue5B(byte x, MyValue5C val) {\n@@ -327,1 +326,1 @@\n-    static value class MyValue5_1 {\n+    static value class MyValue5A {\n@@ -329,1 +328,1 @@\n-        MyValue5_2 val;\n+        MyValue5B val;\n@@ -331,1 +330,1 @@\n-        public MyValue5_1(byte x, MyValue5_2 val) {\n+        public MyValue5A(byte x, MyValue5B val) {\n@@ -341,1 +340,1 @@\n-        MyValue5_1 val;\n+        MyValue5A val;\n@@ -343,1 +342,1 @@\n-        public MyValue5(byte x, MyValue5_1 val) {\n+        public MyValue5(byte x, MyValue5A val) {\n@@ -589,1 +588,1 @@\n-    static final MyValue5 VAL5 = new MyValue5((byte)42, new MyValue5_1((byte)43, new MyValue5_2((byte)44, new MyValue5_3((byte)45))));\n+    static final MyValue5 VAL5 = new MyValue5((byte)42, new MyValue5A((byte)43, new MyValue5B((byte)44, new MyValue5C((byte)45))));\n@@ -791,3 +790,3 @@\n-        MyValue5 val1 = new MyValue5(x, new MyValue5_1(x, new MyValue5_2(x, new MyValue5_3(x))));\n-        MyValue5 val2 = new MyValue5(x, new MyValue5_1(x, new MyValue5_2(x, null)));\n-        MyValue5 val3 = new MyValue5(x, new MyValue5_1(x, null));\n+        MyValue5 val1 = new MyValue5(x, new MyValue5A(x, new MyValue5B(x, new MyValue5C(x))));\n+        MyValue5 val2 = new MyValue5(x, new MyValue5A(x, new MyValue5B(x, null)));\n+        MyValue5 val3 = new MyValue5(x, new MyValue5A(x, null));\n@@ -1059,3 +1058,3 @@\n-            MyValue5_3 val5_3 = useNull_3 ? null : new MyValue5_3((byte)i);\n-            MyValue5_2 val5_2 = useNull_2 ? null : new MyValue5_2((byte)i, val5_3);\n-            MyValue5_1 val5_1 = useNull_1 ? null : new MyValue5_1((byte)i, val5_2);\n+            MyValue5C val5_3 = useNull_3 ? null : new MyValue5C((byte)i);\n+            MyValue5B val5_2 = useNull_2 ? null : new MyValue5B((byte)i, val5_3);\n+            MyValue5A val5_1 = useNull_1 ? null : new MyValue5A((byte)i, val5_2);\n@@ -1358,3 +1357,3 @@\n-        MyValue5 val1 = new MyValue5(x, new MyValue5_1(x, new MyValue5_2(x, new MyValue5_3(x))));\n-        MyValue5 val2 = new MyValue5(x, new MyValue5_1(x, new MyValue5_2(x, null)));\n-        MyValue5 val3 = new MyValue5(x, new MyValue5_1(x, null));\n+        MyValue5 val1 = new MyValue5(x, new MyValue5A(x, new MyValue5B(x, new MyValue5C(x))));\n+        MyValue5 val2 = new MyValue5(x, new MyValue5A(x, new MyValue5B(x, null)));\n+        MyValue5 val3 = new MyValue5(x, new MyValue5A(x, null));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFieldNullMarkers.java","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm -XX:-BackgroundCompilation TestFlatArrayAliasesCardMark\n+ * @run main\/othervm -XX:-BackgroundCompilation compiler.valhalla.inlinetypes.TestFlatArrayAliasesCardMark\n@@ -35,0 +35,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayAliasesCardMark.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- *                   TestFlatArrayThreshold\n+ *                   compiler.valhalla.inlinetypes.TestFlatArrayThreshold\n@@ -34,1 +34,1 @@\n- *                   TestFlatArrayThreshold\n+ *                   compiler.valhalla.inlinetypes.TestFlatArrayThreshold\n@@ -36,1 +36,1 @@\n- *                   TestFlatArrayThreshold\n+ *                   compiler.valhalla.inlinetypes.TestFlatArrayThreshold\n@@ -40,0 +40,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n@@ -46,1 +48,1 @@\n-value class MyValue1 {\n+value class MyValue1FlatArrayThreshold {\n@@ -50,1 +52,1 @@\n-    public MyValue1(Object o1, Object o2) {\n+    public MyValue1FlatArrayThreshold(Object o1, Object o2) {\n@@ -58,1 +60,1 @@\n-    public static MyValue1 test1(MyValue1[] va, MyValue1 vt) {\n+    public static MyValue1FlatArrayThreshold test1(MyValue1FlatArrayThreshold[] va, MyValue1FlatArrayThreshold vt) {\n@@ -63,1 +65,1 @@\n-    public static MyValue1 test2(MyValue1[] va, MyValue1 vt) {\n+    public static MyValue1FlatArrayThreshold test2(MyValue1FlatArrayThreshold[] va, MyValue1FlatArrayThreshold vt) {\n@@ -68,1 +70,1 @@\n-    public static Object test3(Object[] va, MyValue1 vt) {\n+    public static Object test3(Object[] va, MyValue1FlatArrayThreshold vt) {\n@@ -73,1 +75,1 @@\n-    public static Object test4(Object[] va, MyValue1 vt) {\n+    public static Object test4(Object[] va, MyValue1FlatArrayThreshold vt) {\n@@ -78,2 +80,2 @@\n-    public static MyValue1 test5(MyValue1[] va, Object vt) {\n-        va[0] = (MyValue1)vt;\n+    public static MyValue1FlatArrayThreshold test5(MyValue1FlatArrayThreshold[] va, Object vt) {\n+        va[0] = (MyValue1FlatArrayThreshold)vt;\n@@ -83,2 +85,2 @@\n-    public static MyValue1 test6(MyValue1[] va, Object vt) {\n-        va[0] = (MyValue1)vt;\n+    public static MyValue1FlatArrayThreshold test6(MyValue1FlatArrayThreshold[] va, Object vt) {\n+        va[0] = (MyValue1FlatArrayThreshold)vt;\n@@ -94,3 +96,3 @@\n-        MyValue1 vt = new MyValue1(new Integer(42), new Integer(43));\n-        MyValue1[] va = (MyValue1[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1.class, 2, new MyValue1(null, null));\n-        MyValue1[] vaB = new MyValue1[2];\n+        MyValue1FlatArrayThreshold vt = new MyValue1FlatArrayThreshold(new Integer(42), new Integer(43));\n+        MyValue1FlatArrayThreshold[] va = (MyValue1FlatArrayThreshold[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1FlatArrayThreshold.class, 2, new MyValue1FlatArrayThreshold(null, null));\n+        MyValue1FlatArrayThreshold[] vaB = new MyValue1FlatArrayThreshold[2];\n@@ -99,1 +101,1 @@\n-            MyValue1 result1 = test1(va, vt);\n+            MyValue1FlatArrayThreshold result1 = test1(va, vt);\n@@ -103,1 +105,1 @@\n-            MyValue1 result2 = test2(va, vt);\n+            MyValue1FlatArrayThreshold result2 = test2(va, vt);\n@@ -109,1 +111,1 @@\n-            MyValue1 result3 = (MyValue1)test3(va, vt);\n+            MyValue1FlatArrayThreshold result3 = (MyValue1FlatArrayThreshold)test3(va, vt);\n@@ -112,1 +114,1 @@\n-            result3 = (MyValue1)test3(vaB, vt);\n+            result3 = (MyValue1FlatArrayThreshold)test3(vaB, vt);\n@@ -115,1 +117,1 @@\n-            MyValue1 result4 = (MyValue1)test4(va, vt);\n+            MyValue1FlatArrayThreshold result4 = (MyValue1FlatArrayThreshold)test4(va, vt);\n@@ -118,1 +120,1 @@\n-            result4 = (MyValue1)test4(vaB, null);\n+            result4 = (MyValue1FlatArrayThreshold)test4(vaB, null);\n@@ -121,1 +123,1 @@\n-            MyValue1 result5 = test5(va, vt);\n+            MyValue1FlatArrayThreshold result5 = test5(va, vt);\n@@ -125,1 +127,1 @@\n-            MyValue1 result6 = test6(va, vt);\n+            MyValue1FlatArrayThreshold result6 = test6(va, vt);\n@@ -131,1 +133,1 @@\n-            MyValue1 result7 = (MyValue1)test7(va, vt);\n+            MyValue1FlatArrayThreshold result7 = (MyValue1FlatArrayThreshold)test7(va, vt);\n@@ -134,1 +136,1 @@\n-            result7 = (MyValue1)test7(vaB, null);\n+            result7 = (MyValue1FlatArrayThreshold)test7(vaB, null);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayThreshold.java","additions":28,"deletions":26,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-value class MyValue1 {\n+value class MyValue1Generated {\n@@ -62,1 +62,1 @@\n-value class MyValue2 {\n+value class MyValue2Generated {\n@@ -69,1 +69,1 @@\n-value class MyValue3 {\n+value class MyValue3Generated {\n@@ -75,1 +75,1 @@\n-value class MyValue4 {\n+value class MyValue4Generated {\n@@ -81,1 +81,1 @@\n-    public MyValue4 val;\n+    public MyValue4Generated val;\n@@ -83,1 +83,1 @@\n-    public MyValue4Wrapper(MyValue4 val) {\n+    public MyValue4Wrapper(MyValue4Generated val) {\n@@ -89,1 +89,1 @@\n-value class MyValue5 {\n+value class MyValue5Generated {\n@@ -93,1 +93,1 @@\n-value class MyValue6 {\n+value class MyValue6Generated {\n@@ -108,2 +108,2 @@\n-    MyValue1 test2(MyValue1[] array) {\n-        MyValue1 res = new MyValue1();\n+    MyValue1Generated test2(MyValue1Generated[] array) {\n+        MyValue1Generated res = new MyValue1Generated();\n@@ -119,1 +119,1 @@\n-    void test3(MyValue1[] array) {\n+    void test3(MyValue1Generated[] array) {\n@@ -121,1 +121,1 @@\n-            array[i] = new MyValue1();\n+            array[i] = new MyValue1Generated();\n@@ -128,1 +128,1 @@\n-    void test4(MyValue1[] array) {\n+    void test4(MyValue1Generated[] array) {\n@@ -132,1 +132,1 @@\n-    int test5(MyValue1[] array) {\n+    int test5(MyValue1Generated[] array) {\n@@ -139,1 +139,1 @@\n-    MyValue1 f4 = new MyValue1();\n+    MyValue1Generated f4 = new MyValue1Generated();\n@@ -149,1 +149,1 @@\n-    MyValue2 f5;\n+    MyValue2Generated f5;\n@@ -152,10 +152,10 @@\n-        MyValue2[] array1 = (MyValue2[])ValueClass.newNullRestrictedNonAtomicArray(MyValue2.class, 6, new MyValue2());\n-        array1[0] = new MyValue2();\n-        array1[1] = new MyValue2();\n-        array1[2] = new MyValue2();\n-        array1[3] = new MyValue2();\n-        array1[4] = new MyValue2();\n-        array1[5] = new MyValue2();\n-\n-        MyValue2 h = new MyValue2();\n-        MyValue2 n = new MyValue2();\n+        MyValue2Generated[] array1 = (MyValue2Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue2Generated.class, 6, new MyValue2Generated());\n+        array1[0] = new MyValue2Generated();\n+        array1[1] = new MyValue2Generated();\n+        array1[2] = new MyValue2Generated();\n+        array1[3] = new MyValue2Generated();\n+        array1[4] = new MyValue2Generated();\n+        array1[5] = new MyValue2Generated();\n+\n+        MyValue2Generated h = new MyValue2Generated();\n+        MyValue2Generated n = new MyValue2Generated();\n@@ -178,1 +178,1 @@\n-    boolean test8(MyValue1[] array) {\n+    boolean test8(MyValue1Generated[] array) {\n@@ -183,1 +183,1 @@\n-        MyValue1[] array = (MyValue1[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1.class, 1, new MyValue1());\n+        MyValue1Generated[] array = (MyValue1Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1Generated.class, 1, new MyValue1Generated());\n@@ -195,1 +195,1 @@\n-    void test10(MyValue3[] array) {\n+    void test10(MyValue3Generated[] array) {\n@@ -202,1 +202,1 @@\n-    void test11(MyValue3[] array) {\n+    void test11(MyValue3Generated[] array) {\n@@ -209,1 +209,1 @@\n-    MyValue4[] d = (MyValue4[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4.class, 1, new MyValue4());\n+    MyValue4Generated[] d = (MyValue4Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4Generated.class, 1, new MyValue4Generated());\n@@ -212,1 +212,1 @@\n-    MyValue4 e = new MyValue4();\n+    MyValue4Generated e = new MyValue4Generated();\n@@ -216,1 +216,1 @@\n-        MyValue4 i = new MyValue4();\n+        MyValue4Generated i = new MyValue4Generated();\n@@ -218,1 +218,1 @@\n-            MyValue4[] k = (MyValue4[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4.class, 0, new MyValue4());\n+            MyValue4Generated[] k = (MyValue4Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4Generated.class, 0, new MyValue4Generated());\n@@ -223,1 +223,1 @@\n-                MyValue4 m = new MyValue4();\n+                MyValue4Generated m = new MyValue4Generated();\n@@ -235,1 +235,1 @@\n-    MyValue5 test13_c;\n+    MyValue5Generated test13_c;\n@@ -238,1 +238,1 @@\n-    MyValue5 test13_t = new MyValue5();\n+    MyValue5Generated test13_t = new MyValue5Generated();\n@@ -240,1 +240,1 @@\n-    void test13(MyValue5[] array) {\n+    void test13(MyValue5Generated[] array) {\n@@ -248,1 +248,1 @@\n-            MyValue5[] array2 = (MyValue5[])ValueClass.newNullRestrictedNonAtomicArray(MyValue5.class, 1, new MyValue5());\n+            MyValue5Generated[] array2 = (MyValue5Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue5Generated.class, 1, new MyValue5Generated());\n@@ -254,1 +254,1 @@\n-    void test14(boolean b, MyValue4 val) {\n+    void test14(boolean b, MyValue4Generated val) {\n@@ -257,1 +257,1 @@\n-                val = new MyValue4();\n+                val = new MyValue4Generated();\n@@ -259,1 +259,1 @@\n-            MyValue4[] array = (MyValue4[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4.class, 1, new MyValue4());\n+            MyValue4Generated[] array = (MyValue4Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4Generated.class, 1, new MyValue4Generated());\n@@ -270,1 +270,1 @@\n-        MyValue4 val = new MyValue4();\n+        MyValue4Generated val = new MyValue4Generated();\n@@ -273,1 +273,1 @@\n-                MyValue4[] array = (MyValue4[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4.class, 1, new MyValue4());\n+                MyValue4Generated[] array = (MyValue4Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue4Generated.class, 1, new MyValue4Generated());\n@@ -283,1 +283,1 @@\n-        MyValue4 val = new MyValue4();\n+        MyValue4Generated val = new MyValue4Generated();\n@@ -293,1 +293,1 @@\n-    static MyValue6 test17Field = new MyValue6();\n+    static MyValue6Generated test17Field = new MyValue6Generated();\n@@ -297,1 +297,1 @@\n-            MyValue6 val = new MyValue6();\n+            MyValue6Generated val = new MyValue6Generated();\n@@ -312,1 +312,1 @@\n-    MyValue1 test19Field = new MyValue1();\n+    MyValue1Generated test19Field = new MyValue1Generated();\n@@ -316,1 +316,1 @@\n-            MyValue1 val = new MyValue1();\n+            MyValue1Generated val = new MyValue1Generated();\n@@ -326,7 +326,7 @@\n-        MyValue1[] array2 = (MyValue1[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1.class, 10, new MyValue1());\n-        MyValue1[] array3 = (MyValue1[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1.class, 1, new MyValue1());\n-        array3[0] = new MyValue1();\n-        MyValue3[] array4 = (MyValue3[])ValueClass.newNullRestrictedNonAtomicArray(MyValue3.class, 1, new MyValue3());\n-        array4[0] = new MyValue3();\n-        MyValue5[] array5 = (MyValue5[])ValueClass.newNullRestrictedNonAtomicArray(MyValue5.class, 1, new MyValue5());\n-        array5[0] = new MyValue5();\n+        MyValue1Generated[] array2 = (MyValue1Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1Generated.class, 10, new MyValue1Generated());\n+        MyValue1Generated[] array3 = (MyValue1Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue1Generated.class, 1, new MyValue1Generated());\n+        array3[0] = new MyValue1Generated();\n+        MyValue3Generated[] array4 = (MyValue3Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue3Generated.class, 1, new MyValue3Generated());\n+        array4[0] = new MyValue3Generated();\n+        MyValue5Generated[] array5 = (MyValue5Generated[])ValueClass.newNullRestrictedNonAtomicArray(MyValue5Generated.class, 1, new MyValue5Generated());\n+        array5[0] = new MyValue5Generated();\n@@ -349,1 +349,1 @@\n-            t.test14(false, new MyValue4());\n+            t.test14(false, new MyValue4Generated());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -457,1 +457,1 @@\n-    \/\/ Test copyOf intrinsic with allocated value object in it's debug information\n+    \/\/ Test copyOf intrinsic with allocated value object in its debug information\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-value class MyValue {\n+value class MyValueIsSubstReresolution {\n@@ -41,1 +41,1 @@\n-    public MyValue(int x) {\n+    public MyValueIsSubstReresolution(int x) {\n@@ -49,1 +49,1 @@\n-        MyValue vt = new MyValue(42);\n+        MyValueIsSubstReresolution vt = new MyValueIsSubstReresolution(42);\n@@ -54,2 +54,2 @@\n-        MyValue vt1 = new MyValue(42);\n-        MyValue vt2 = new MyValue(43);\n+        MyValueIsSubstReresolution vt1 = new MyValueIsSubstReresolution(42);\n+        MyValueIsSubstReresolution vt2 = new MyValueIsSubstReresolution(43);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIsSubstitutableReresolution.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-import static compiler.lib.ir_framework.IRNode.LOAD_OF_CLASS;\n@@ -61,1 +60,0 @@\n-import static compiler.lib.ir_framework.IRNode.STORE_OF_CLASS;\n@@ -1664,1 +1662,1 @@\n-    \/\/ Pass arguments via fields to avoid exzessive spilling leading to compilation bailouts\n+    \/\/ Pass arguments via fields to avoid excessive spilling leading to compilation bailouts\n@@ -2000,1 +1998,1 @@\n-    \/\/ Test convertion between an inline type and java.lang.Object without an allocation\n+    \/\/ Test conversion between an inline type and java.lang.Object without an allocation\n@@ -2120,1 +2118,1 @@\n-    \/\/ Tests for loading\/storing unkown values\n+    \/\/ Tests for loading\/storing unknown values\n@@ -2233,1 +2231,1 @@\n-    \/\/ Test flattened field with non-flattenend (but flattenable) inline type field\n+    \/\/ Test flattened field with non-flattened (but flattenable) inline type field\n@@ -2321,1 +2319,1 @@\n-    \/\/ Test check for null free array when storing to inline tpye array\n+    \/\/ Test check for null free array when storing to inline type array\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.lang.reflect.*;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLarvalState.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,TestLoopUnswitchingWithFlatArrayCheck::test TestLoopUnswitchingWithFlatArrayCheck\n+ * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,TestLoopUnswitchingWithFlatArrayCheck::test compiler.valhalla.inlinetypes.TestLoopUnswitchingWithFlatArrayCheck\n@@ -32,0 +32,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLoopUnswitchingWithFlatArrayCheck.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm -Xbatch TestMemBars\n+ * @run main\/othervm -Xbatch compiler.valhalla.inlinetypes.TestMemBars\n@@ -35,0 +35,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMemBars.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,2 @@\n- *                   -XX:CompileCommand=compileonly,TestMismatchHandling::test*\n- *                   TestMismatchHandling\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestMismatchHandling::test*\n+ *                   compiler.valhalla.inlinetypes.TestMismatchHandling\n@@ -42,1 +42,1 @@\n- *                   TestMismatchHandling\n+ *                   compiler.valhalla.inlinetypes.TestMismatchHandling\n@@ -46,1 +46,1 @@\n- *                   TestMismatchHandling\n+ *                   compiler.valhalla.inlinetypes.TestMismatchHandling\n@@ -51,1 +51,1 @@\n- *                   TestMismatchHandling\n+ *                   compiler.valhalla.inlinetypes.TestMismatchHandling\n@@ -56,1 +56,1 @@\n- *                   TestMismatchHandling\n+ *                   compiler.valhalla.inlinetypes.TestMismatchHandling\n@@ -60,1 +60,1 @@\n- *                   TestMismatchHandling\n+ *                   compiler.valhalla.inlinetypes.TestMismatchHandling\n@@ -63,1 +63,1 @@\n- *                   TestMismatchHandling\n+ *                   compiler.valhalla.inlinetypes.TestMismatchHandling\n@@ -77,2 +77,2 @@\n-  javac --enable-preview --source 22 TestMismatchHandlingGenerator.java\n-  java -cp $ASMTOOLS org.openjdk.asmtools.Main jdec MyValue1.class MyValue2.class MyValue3.class MyValue4.class MyValue5.class MyValue6.class MyValue7.class Verifiable.class B.class I3.class I4.class E.class G.class J.class K.class L.class P.class Q.class R.class S.class TestMismatchHandlingHelper.class > TestMismatchHandling.jcod\n+  javac --enable-preview --source 26 TestMismatchHandlingGenerator.java\n+  java -cp $ASMTOOLS org.openjdk.asmtools.Main jdec MyValue1Mismatch.class MyValue2Mismatch.class MyValue3Mismatch.class MyValue4Mismatch.class MyValue5Mismatch.class MyValue6Mismatch.class MyValue7Mismatch.class Verifiable.class B.class I3.class I4.class E.class G.class J.class K.class L.class P.class Q.class R.class S.class TestMismatchHandlingHelper.class > TestMismatchHandling.jcod\n@@ -88,0 +88,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,28 +1,1 @@\n-\/*\n- * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ ##################################### WARNING ########################################\n-\/\/ Generated file, don't modify manually. See TestMismatchHandling.java for instructions.\n-\/\/ ##################################### WARNING ########################################\n-\n-class MyValue1 {\n+class compiler\/valhalla\/inlinetypes\/MyValue1Mismatch {\n@@ -35,1 +8,1 @@\n-    Utf8 \"MyValue1\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #2\n@@ -93,3 +66,3 @@\n-                0  25;\n-                6  24;\n-                10  25;\n+                0  27;\n+                6  26;\n+                10  27;\n@@ -119,1 +92,1 @@\n-                0  31;\n+                0  33;\n@@ -133,2 +106,2 @@\n-} \/\/ end class MyValue1\n-class MyValue2 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue2Mismatch {\n@@ -141,1 +114,1 @@\n-    Utf8 \"MyValue2\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #2\n@@ -199,3 +172,3 @@\n-                0  35;\n-                6  34;\n-                10  35;\n+                0  37;\n+                6  36;\n+                10  37;\n@@ -225,1 +198,1 @@\n-                0  41;\n+                0  43;\n@@ -239,2 +212,2 @@\n-} \/\/ end class MyValue2\n-class MyValue3 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue3Mismatch {\n@@ -247,1 +220,1 @@\n-    Utf8 \"MyValue3\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #2\n@@ -305,3 +278,3 @@\n-                0  45;\n-                6  44;\n-                10  45;\n+                0  47;\n+                6  46;\n+                10  47;\n@@ -331,1 +304,1 @@\n-                0  51;\n+                0  53;\n@@ -345,2 +318,2 @@\n-} \/\/ end class MyValue3\n-class MyValue4 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue4Mismatch {\n@@ -353,1 +326,1 @@\n-    Utf8 \"MyValue4\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue4Mismatch\"; \/\/ #2\n@@ -371,1 +344,1 @@\n-    Utf8 \"()LMyValue4;\"; \/\/ #20\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue4Mismatch;\"; \/\/ #20\n@@ -414,3 +387,3 @@\n-                0  55;\n-                6  54;\n-                10  55;\n+                0  57;\n+                6  56;\n+                10  57;\n@@ -440,1 +413,1 @@\n-                0  61;\n+                0  63;\n@@ -464,1 +437,1 @@\n-                0  64;\n+                0  66;\n@@ -478,2 +451,2 @@\n-} \/\/ end class MyValue4\n-class MyValue5 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue4Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue5Mismatch {\n@@ -486,1 +459,1 @@\n-    Utf8 \"MyValue5\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue5Mismatch\"; \/\/ #2\n@@ -499,1 +472,1 @@\n-    Utf8 \"Verifiable\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/Verifiable\"; \/\/ #15\n@@ -506,1 +479,1 @@\n-    Utf8 \"()LMyValue5;\"; \/\/ #22\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue5Mismatch;\"; \/\/ #22\n@@ -550,3 +523,3 @@\n-                0  73;\n-                6  72;\n-                10  73;\n+                0  75;\n+                6  74;\n+                10  75;\n@@ -576,1 +549,1 @@\n-                0  80;\n+                0  82;\n@@ -600,1 +573,1 @@\n-                0  83;\n+                0  85;\n@@ -614,2 +587,2 @@\n-} \/\/ end class MyValue5\n-class MyValue6 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue5Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue6Mismatch {\n@@ -622,1 +595,1 @@\n-    Utf8 \"MyValue6\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue6Mismatch\"; \/\/ #2\n@@ -635,1 +608,1 @@\n-    Utf8 \"Verifiable\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/Verifiable\"; \/\/ #15\n@@ -642,1 +615,1 @@\n-    Utf8 \"()LMyValue6;\"; \/\/ #22\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue6Mismatch;\"; \/\/ #22\n@@ -686,3 +659,3 @@\n-                0  88;\n-                6  87;\n-                10  88;\n+                0  90;\n+                6  89;\n+                10  90;\n@@ -712,1 +685,1 @@\n-                0  95;\n+                0  97;\n@@ -736,1 +709,1 @@\n-                0  98;\n+                0  100;\n@@ -750,2 +723,2 @@\n-} \/\/ end class MyValue6\n-class MyValue7 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue6Mismatch\n+class compiler\/valhalla\/inlinetypes\/MyValue7Mismatch {\n@@ -758,1 +731,1 @@\n-    Utf8 \"MyValue7\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #2\n@@ -816,3 +789,3 @@\n-                0  103;\n-                6  102;\n-                10  103;\n+                0  105;\n+                6  104;\n+                10  105;\n@@ -842,1 +815,1 @@\n-                0  109;\n+                0  111;\n@@ -856,2 +829,2 @@\n-} \/\/ end class MyValue7\n-class Verifiable {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\n+class compiler\/valhalla\/inlinetypes\/Verifiable {\n@@ -864,1 +837,1 @@\n-    Utf8 \"Verifiable\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/Verifiable\"; \/\/ #2\n@@ -898,2 +871,2 @@\n-} \/\/ end class Verifiable\n-file \"B.class\" {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/Verifiable\n+class compiler\/valhalla\/inlinetypes\/B {\n@@ -908,1 +881,1 @@\n-    Utf8 \"A\"; \/\/ #4\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/A\"; \/\/ #4\n@@ -914,1 +887,1 @@\n-    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #10\n@@ -917,1 +890,1 @@\n-    Utf8 \"B\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/B\"; \/\/ #13\n@@ -921,1 +894,1 @@\n-    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #17\n@@ -925,1 +898,1 @@\n-    Utf8 \"LMyValue1;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #21\n@@ -955,1 +928,1 @@\n-                0  119;\n+                0  121;\n@@ -979,2 +952,2 @@\n-                0  122;\n-                4  123;\n+                0  124;\n+                4  125;\n@@ -998,2 +971,2 @@\n-} \/\/ end class B\n-class I3 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/B\n+class compiler\/valhalla\/inlinetypes\/I3 {\n@@ -1006,1 +979,1 @@\n-    Utf8 \"I3\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I3\"; \/\/ #2\n@@ -1010,1 +983,1 @@\n-    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #6\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #6\n@@ -1014,1 +987,1 @@\n-    Utf8 \"LMyValue2;\"; \/\/ #10\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #10\n@@ -1046,2 +1019,2 @@\n-} \/\/ end class I3\n-class I4 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/I3\n+class compiler\/valhalla\/inlinetypes\/I4 {\n@@ -1054,1 +1027,1 @@\n-    Utf8 \"I4\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I4\"; \/\/ #2\n@@ -1058,1 +1031,1 @@\n-    Utf8 \"I3\"; \/\/ #6\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I3\"; \/\/ #6\n@@ -1060,1 +1033,1 @@\n-    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #8\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #8\n@@ -1064,1 +1037,1 @@\n-    Utf8 \"LMyValue2;\"; \/\/ #12\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #12\n@@ -1097,2 +1070,2 @@\n-} \/\/ end class I4\n-class E {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/I4\n+class compiler\/valhalla\/inlinetypes\/E {\n@@ -1113,1 +1086,1 @@\n-    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #10\n@@ -1116,1 +1089,1 @@\n-    Utf8 \"E\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/E\"; \/\/ #13\n@@ -1118,1 +1091,1 @@\n-    Utf8 \"I4\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I4\"; \/\/ #15\n@@ -1122,1 +1095,1 @@\n-    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #19\n@@ -1126,1 +1099,1 @@\n-    Utf8 \"LMyValue2;\"; \/\/ #23\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #23\n@@ -1157,1 +1130,1 @@\n-                0  160;\n+                0  162;\n@@ -1181,2 +1154,2 @@\n-                0  163;\n-                4  164;\n+                0  165;\n+                4  166;\n@@ -1200,2 +1173,2 @@\n-} \/\/ end class E\n-class G {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/E\n+class compiler\/valhalla\/inlinetypes\/G {\n@@ -1216,1 +1189,1 @@\n-    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #10\n@@ -1219,1 +1192,1 @@\n-    Utf8 \"G\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/G\"; \/\/ #13\n@@ -1221,1 +1194,1 @@\n-    Utf8 \"I2\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I2\"; \/\/ #15\n@@ -1223,1 +1196,1 @@\n-    Utf8 \"I4\"; \/\/ #17\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I4\"; \/\/ #17\n@@ -1227,1 +1200,1 @@\n-    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #21\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #21\n@@ -1231,1 +1204,1 @@\n-    Utf8 \"LMyValue2;\"; \/\/ #25\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #25\n@@ -1263,1 +1236,1 @@\n-                0  177;\n+                0  179;\n@@ -1287,2 +1260,2 @@\n-                0  180;\n-                4  181;\n+                0  182;\n+                4  183;\n@@ -1306,2 +1279,2 @@\n-} \/\/ end class G\n-class J {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/G\n+class compiler\/valhalla\/inlinetypes\/J {\n@@ -1322,1 +1295,1 @@\n-    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #10\n@@ -1325,1 +1298,1 @@\n-    Utf8 \"J\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/J\"; \/\/ #13\n@@ -1329,1 +1302,1 @@\n-    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #17\n@@ -1333,1 +1306,1 @@\n-    Utf8 \"LMyValue3;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #21\n@@ -1363,1 +1336,1 @@\n-                0  197;\n+                0  199;\n@@ -1387,2 +1360,2 @@\n-                0  199;\n-                4  200;\n+                0  201;\n+                4  202;\n@@ -1406,2 +1379,2 @@\n-} \/\/ end class J\n-class K {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/J\n+class compiler\/valhalla\/inlinetypes\/K {\n@@ -1416,1 +1389,1 @@\n-    Utf8 \"J\"; \/\/ #4\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/J\"; \/\/ #4\n@@ -1422,1 +1395,1 @@\n-    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #10\n@@ -1425,1 +1398,1 @@\n-    Utf8 \"K\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/K\"; \/\/ #13\n@@ -1429,1 +1402,1 @@\n-    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #17\n@@ -1433,1 +1406,1 @@\n-    Utf8 \"LMyValue3;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #21\n@@ -1463,1 +1436,1 @@\n-                0  204;\n+                0  206;\n@@ -1487,2 +1460,2 @@\n-                0  207;\n-                4  208;\n+                0  209;\n+                4  210;\n@@ -1506,2 +1479,2 @@\n-} \/\/ end class K\n-file \"L.class\" {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/K\n+class compiler\/valhalla\/inlinetypes\/L {\n@@ -1516,1 +1489,1 @@\n-    Utf8 \"K\"; \/\/ #4\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/K\"; \/\/ #4\n@@ -1522,1 +1495,1 @@\n-    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #10\n@@ -1525,1 +1498,1 @@\n-    Utf8 \"L\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/L\"; \/\/ #13\n@@ -1527,1 +1500,1 @@\n-    Utf8 \"I5\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I5\"; \/\/ #15\n@@ -1531,1 +1504,1 @@\n-    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #19\n@@ -1535,1 +1508,1 @@\n-    Utf8 \"LMyValue3;\"; \/\/ #23\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #23\n@@ -1566,1 +1539,1 @@\n-                0  212;\n+                0  214;\n@@ -1590,2 +1563,2 @@\n-                0  215;\n-                4  216;\n+                0  217;\n+                4  218;\n@@ -1609,2 +1582,2 @@\n-} \/\/ end class L\n-class P {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/L\n+class compiler\/valhalla\/inlinetypes\/P {\n@@ -1625,1 +1598,1 @@\n-    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -1628,1 +1601,1 @@\n-    Utf8 \"P\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/P\"; \/\/ #13\n@@ -1630,1 +1603,1 @@\n-    Utf8 \"I6\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I6\"; \/\/ #15\n@@ -1634,1 +1607,1 @@\n-    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #19\n@@ -1638,1 +1611,1 @@\n-    Utf8 \"LMyValue7;\"; \/\/ #23\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #23\n@@ -1669,1 +1642,1 @@\n-                0  263;\n+                0  265;\n@@ -1693,2 +1666,2 @@\n-                0  266;\n-                4  267;\n+                0  268;\n+                4  269;\n@@ -1712,2 +1685,2 @@\n-} \/\/ end class P\n-class Q {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/P\n+class compiler\/valhalla\/inlinetypes\/Q {\n@@ -1728,1 +1701,1 @@\n-    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -1731,1 +1704,1 @@\n-    Utf8 \"Q\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/Q\"; \/\/ #13\n@@ -1735,1 +1708,1 @@\n-    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #17\n@@ -1739,1 +1712,1 @@\n-    Utf8 \"LMyValue7;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #21\n@@ -1769,1 +1742,1 @@\n-                0  271;\n+                0  273;\n@@ -1793,2 +1766,2 @@\n-                0  273;\n-                4  274;\n+                0  275;\n+                4  276;\n@@ -1812,2 +1785,2 @@\n-} \/\/ end class Q\n-class R {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/Q\n+class compiler\/valhalla\/inlinetypes\/R {\n@@ -1822,1 +1795,1 @@\n-    Utf8 \"Q\"; \/\/ #4\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/Q\"; \/\/ #4\n@@ -1828,1 +1801,1 @@\n-    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -1831,1 +1804,1 @@\n-    Utf8 \"R\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/R\"; \/\/ #13\n@@ -1835,1 +1808,1 @@\n-    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #17\n@@ -1839,1 +1812,1 @@\n-    Utf8 \"LMyValue7;\"; \/\/ #21\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #21\n@@ -1869,1 +1842,1 @@\n-                0  278;\n+                0  280;\n@@ -1893,2 +1866,2 @@\n-                0  281;\n-                4  282;\n+                0  283;\n+                4  284;\n@@ -1912,2 +1885,2 @@\n-} \/\/ end class R\n-class S {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/R\n+class compiler\/valhalla\/inlinetypes\/S {\n@@ -1922,1 +1895,1 @@\n-    Utf8 \"R\"; \/\/ #4\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/R\"; \/\/ #4\n@@ -1928,1 +1901,1 @@\n-    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -1931,1 +1904,1 @@\n-    Utf8 \"S\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/S\"; \/\/ #13\n@@ -1933,1 +1906,1 @@\n-    Utf8 \"I6\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I6\"; \/\/ #15\n@@ -1937,1 +1910,1 @@\n-    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #19\n@@ -1941,1 +1914,1 @@\n-    Utf8 \"LMyValue7;\"; \/\/ #23\n+    Utf8 \"Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #23\n@@ -1972,1 +1945,1 @@\n-                0  286;\n+                0  288;\n@@ -1996,2 +1969,2 @@\n-                0  289;\n-                4  290;\n+                0  291;\n+                4  292;\n@@ -2015,2 +1988,2 @@\n-} \/\/ end class S\n-class TestMismatchHandlingHelper {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/S\n+class compiler\/valhalla\/inlinetypes\/TestMismatchHandlingHelper {\n@@ -2029,1 +2002,1 @@\n-    Utf8 \"MyValue1\"; \/\/ #8\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #8\n@@ -2034,1 +2007,1 @@\n-    Utf8 \"A\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/A\"; \/\/ #13\n@@ -2036,1 +2009,1 @@\n-    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #15\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #15\n@@ -2042,1 +2015,1 @@\n-    Utf8 \"B\"; \/\/ #21\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/B\"; \/\/ #21\n@@ -2045,1 +2018,1 @@\n-    Utf8 \"C\"; \/\/ #24\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/C\"; \/\/ #24\n@@ -2047,1 +2020,1 @@\n-    Utf8 \"MyValue2\"; \/\/ #26\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #26\n@@ -2052,2 +2025,2 @@\n-    Utf8 \"I1\"; \/\/ #31\n-    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #32\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I1\"; \/\/ #31\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #32\n@@ -2057,1 +2030,1 @@\n-    Utf8 \"I2\"; \/\/ #36\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I2\"; \/\/ #36\n@@ -2060,1 +2033,1 @@\n-    Utf8 \"D\"; \/\/ #39\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/D\"; \/\/ #39\n@@ -2063,1 +2036,1 @@\n-    Utf8 \"I3\"; \/\/ #42\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I3\"; \/\/ #42\n@@ -2066,1 +2039,1 @@\n-    Utf8 \"I4\"; \/\/ #45\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I4\"; \/\/ #45\n@@ -2069,1 +2042,1 @@\n-    Utf8 \"E\"; \/\/ #48\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/E\"; \/\/ #48\n@@ -2071,1 +2044,1 @@\n-    Utf8 \"MyValue3\"; \/\/ #50\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #50\n@@ -2076,2 +2049,2 @@\n-    Utf8 \"I5\"; \/\/ #55\n-    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #56\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I5\"; \/\/ #55\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #56\n@@ -2081,1 +2054,1 @@\n-    Utf8 \"H\"; \/\/ #60\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/H\"; \/\/ #60\n@@ -2084,1 +2057,1 @@\n-    Utf8 \"J\"; \/\/ #63\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/J\"; \/\/ #63\n@@ -2087,1 +2060,1 @@\n-    Utf8 \"K\"; \/\/ #66\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/K\"; \/\/ #66\n@@ -2091,2 +2064,2 @@\n-    Utf8 \"M\"; \/\/ #70\n-    Utf8 \"(Z)LMyValue4;\"; \/\/ #71\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/M\"; \/\/ #70\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue4Mismatch;\"; \/\/ #71\n@@ -2109,2 +2082,2 @@\n-    Utf8 \"N\"; \/\/ #88\n-    Utf8 \"(Z)LMyValue5;\"; \/\/ #89\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/N\"; \/\/ #88\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue5Mismatch;\"; \/\/ #89\n@@ -2113,1 +2086,1 @@\n-    Utf8 \"Verifiable\"; \/\/ #92\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/Verifiable\"; \/\/ #92\n@@ -2116,1 +2089,1 @@\n-    Utf8 \"F\"; \/\/ #95\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/F\"; \/\/ #95\n@@ -2119,1 +2092,1 @@\n-    Utf8 \"G\"; \/\/ #98\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/G\"; \/\/ #98\n@@ -2122,1 +2095,1 @@\n-    Utf8 \"L\"; \/\/ #101\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/L\"; \/\/ #101\n@@ -2126,2 +2099,2 @@\n-    Utf8 \"O\"; \/\/ #105\n-    Utf8 \"(Z)LMyValue6;\"; \/\/ #106\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/O\"; \/\/ #105\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue6Mismatch;\"; \/\/ #106\n@@ -2130,1 +2103,1 @@\n-    Utf8 \"MyValue6\"; \/\/ #109\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue6Mismatch\"; \/\/ #109\n@@ -2132,1 +2105,1 @@\n-    Utf8 \"MyValue7\"; \/\/ #111\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #111\n@@ -2137,2 +2110,2 @@\n-    Utf8 \"I6\"; \/\/ #116\n-    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #117\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I6\"; \/\/ #116\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #117\n@@ -2142,1 +2115,1 @@\n-    Utf8 \"P\"; \/\/ #121\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/P\"; \/\/ #121\n@@ -2145,1 +2118,1 @@\n-    Utf8 \"Q\"; \/\/ #124\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/Q\"; \/\/ #124\n@@ -2148,1 +2121,1 @@\n-    Utf8 \"R\"; \/\/ #127\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/R\"; \/\/ #127\n@@ -2150,1 +2123,1 @@\n-    Utf8 \"TestMismatchHandlingHelper\"; \/\/ #129\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/TestMismatchHandlingHelper\"; \/\/ #129\n@@ -2154,1 +2127,1 @@\n-    Utf8 \"(LA;LA;LA;LA;LA;LB;LB;LC;)V\"; \/\/ #133\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/A;Lcompiler\/valhalla\/inlinetypes\/A;Lcompiler\/valhalla\/inlinetypes\/A;Lcompiler\/valhalla\/inlinetypes\/A;Lcompiler\/valhalla\/inlinetypes\/A;Lcompiler\/valhalla\/inlinetypes\/B;Lcompiler\/valhalla\/inlinetypes\/B;Lcompiler\/valhalla\/inlinetypes\/C;)V\"; \/\/ #133\n@@ -2156,1 +2129,1 @@\n-    Utf8 \"(LI1;LI1;LI1;LI1;LI1;LI1;LI2;LI2;LI2;LI2;LI2;LI2;LI3;LI3;LI3;LI3;LI3;LI3;LI4;LI4;LI4;LI4;LI4;LI4;LD;LE;)V\"; \/\/ #135\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/I1;Lcompiler\/valhalla\/inlinetypes\/I1;Lcompiler\/valhalla\/inlinetypes\/I1;Lcompiler\/valhalla\/inlinetypes\/I1;Lcompiler\/valhalla\/inlinetypes\/I1;Lcompiler\/valhalla\/inlinetypes\/I1;Lcompiler\/valhalla\/inlinetypes\/I2;Lcompiler\/valhalla\/inlinetypes\/I2;Lcompiler\/valhalla\/inlinetypes\/I2;Lcompiler\/valhalla\/inlinetypes\/I2;Lcompiler\/valhalla\/inlinetypes\/I2;Lcompiler\/valhalla\/inlinetypes\/I2;Lcompiler\/valhalla\/inlinetypes\/I3;Lcompiler\/valhalla\/inlinetypes\/I3;Lcompiler\/valhalla\/inlinetypes\/I3;Lcompiler\/valhalla\/inlinetypes\/I3;Lcompiler\/valhalla\/inlinetypes\/I3;Lcompiler\/valhalla\/inlinetypes\/I3;Lcompiler\/valhalla\/inlinetypes\/I4;Lcompiler\/valhalla\/inlinetypes\/I4;Lcompiler\/valhalla\/inlinetypes\/I4;Lcompiler\/valhalla\/inlinetypes\/I4;Lcompiler\/valhalla\/inlinetypes\/I4;Lcompiler\/valhalla\/inlinetypes\/I4;Lcompiler\/valhalla\/inlinetypes\/D;Lcompiler\/valhalla\/inlinetypes\/E;)V\"; \/\/ #135\n@@ -2158,1 +2131,1 @@\n-    Utf8 \"(LI5;LI5;LI5;LJ;LJ;LJ;LJ;LJ;LH;LK;)V\"; \/\/ #137\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/I5;Lcompiler\/valhalla\/inlinetypes\/I5;Lcompiler\/valhalla\/inlinetypes\/I5;Lcompiler\/valhalla\/inlinetypes\/J;Lcompiler\/valhalla\/inlinetypes\/J;Lcompiler\/valhalla\/inlinetypes\/J;Lcompiler\/valhalla\/inlinetypes\/J;Lcompiler\/valhalla\/inlinetypes\/J;Lcompiler\/valhalla\/inlinetypes\/H;Lcompiler\/valhalla\/inlinetypes\/K;)V\"; \/\/ #137\n@@ -2160,1 +2133,1 @@\n-    Utf8 \"(LM;Z)V\"; \/\/ #139\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/M;Z)V\"; \/\/ #139\n@@ -2163,1 +2136,1 @@\n-    Utf8 \"(LN;Z)V\"; \/\/ #142\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/N;Z)V\"; \/\/ #142\n@@ -2165,1 +2138,1 @@\n-    Utf8 \"(LF;LG;LL;)V\"; \/\/ #144\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/F;Lcompiler\/valhalla\/inlinetypes\/G;Lcompiler\/valhalla\/inlinetypes\/L;)V\"; \/\/ #144\n@@ -2167,1 +2140,1 @@\n-    Utf8 \"(LO;Z)LVerifiable;\"; \/\/ #146\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/O;Z)Lcompiler\/valhalla\/inlinetypes\/Verifiable;\"; \/\/ #146\n@@ -2169,1 +2142,1 @@\n-    Utf8 \"(LO;)V\"; \/\/ #148\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/O;)V\"; \/\/ #148\n@@ -2171,1 +2144,1 @@\n-    Utf8 \"(LI6;LI6;LI6;LQ;LQ;LQ;LQ;LQ;LP;LR;)V\"; \/\/ #150\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/I6;Lcompiler\/valhalla\/inlinetypes\/I6;Lcompiler\/valhalla\/inlinetypes\/I6;Lcompiler\/valhalla\/inlinetypes\/Q;Lcompiler\/valhalla\/inlinetypes\/Q;Lcompiler\/valhalla\/inlinetypes\/Q;Lcompiler\/valhalla\/inlinetypes\/Q;Lcompiler\/valhalla\/inlinetypes\/Q;Lcompiler\/valhalla\/inlinetypes\/P;Lcompiler\/valhalla\/inlinetypes\/R;)V\"; \/\/ #150\n@@ -2203,1 +2176,1 @@\n-                0  294;\n+                0  296;\n@@ -2241,9 +2214,9 @@\n-                0  300;\n-                14  301;\n-                28  302;\n-                42  303;\n-                56  304;\n-                71  306;\n-                86  307;\n-                101  308;\n-                116  309;\n+                0  302;\n+                14  303;\n+                28  304;\n+                42  305;\n+                56  306;\n+                71  308;\n+                86  309;\n+                101  310;\n+                116  311;\n@@ -2327,27 +2300,27 @@\n-                0  318;\n-                16  319;\n-                32  320;\n-                48  321;\n-                64  322;\n-                81  323;\n-                98  324;\n-                115  325;\n-                132  326;\n-                149  327;\n-                166  328;\n-                183  329;\n-                200  330;\n-                215  332;\n-                232  333;\n-                249  334;\n-                266  335;\n-                283  336;\n-                300  337;\n-                317  338;\n-                334  339;\n-                351  340;\n-                368  341;\n-                385  342;\n-                402  343;\n-                419  344;\n-                434  345;\n+                0  320;\n+                16  321;\n+                32  322;\n+                48  323;\n+                64  324;\n+                81  325;\n+                98  326;\n+                115  327;\n+                132  328;\n+                149  329;\n+                166  330;\n+                183  331;\n+                200  332;\n+                215  334;\n+                232  335;\n+                249  336;\n+                266  337;\n+                283  338;\n+                300  339;\n+                317  340;\n+                334  341;\n+                351  342;\n+                368  343;\n+                385  344;\n+                402  345;\n+                419  346;\n+                434  347;\n@@ -2396,11 +2369,11 @@\n-                0  353;\n-                16  354;\n-                32  355;\n-                48  356;\n-                63  358;\n-                77  359;\n-                92  360;\n-                107  361;\n-                122  362;\n-                137  363;\n-                152  364;\n+                0  355;\n+                16  356;\n+                32  357;\n+                48  358;\n+                63  360;\n+                77  361;\n+                92  362;\n+                107  363;\n+                122  364;\n+                137  365;\n+                152  366;\n@@ -2434,5 +2407,5 @@\n-                0  369;\n-                4  370;\n-                13  372;\n-                29  373;\n-                39  376;\n+                0  371;\n+                4  372;\n+                13  374;\n+                29  375;\n+                39  378;\n@@ -2471,4 +2444,4 @@\n-                0  381;\n-                6  382;\n-                10  383;\n-                16  385;\n+                0  383;\n+                6  384;\n+                10  385;\n+                16  387;\n@@ -2508,4 +2481,4 @@\n-                0  389;\n-                12  390;\n-                24  391;\n-                36  392;\n+                0  391;\n+                12  392;\n+                24  393;\n+                36  394;\n@@ -2535,1 +2508,1 @@\n-                0  397;\n+                0  399;\n@@ -2560,3 +2533,3 @@\n-                0  401;\n-                6  402;\n-                14  403;\n+                0  403;\n+                6  404;\n+                14  405;\n@@ -2605,11 +2578,11 @@\n-                0  412;\n-                16  413;\n-                32  414;\n-                48  415;\n-                63  417;\n-                77  418;\n-                92  419;\n-                107  420;\n-                122  421;\n-                137  422;\n-                152  423;\n+                0  414;\n+                16  415;\n+                32  416;\n+                48  417;\n+                63  419;\n+                77  420;\n+                92  421;\n+                107  422;\n+                122  423;\n+                137  424;\n+                152  425;\n@@ -2629,2 +2602,2 @@\n-} \/\/ end class TestMismatchHandlingHelper\n-class A {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/TestMismatchHandlingHelper\n+class compiler\/valhalla\/inlinetypes\/A {\n@@ -2645,1 +2618,1 @@\n-    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #10\n@@ -2648,1 +2621,1 @@\n-    Utf8 \"A\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/A\"; \/\/ #13\n@@ -2652,1 +2625,1 @@\n-    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #17\n@@ -2684,1 +2657,1 @@\n-                0  112;\n+                0  114;\n@@ -2708,2 +2681,2 @@\n-                0  114;\n-                4  115;\n+                0  116;\n+                4  117;\n@@ -2723,2 +2696,2 @@\n-} \/\/ end class A\n-class C {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/A\n+class compiler\/valhalla\/inlinetypes\/C {\n@@ -2733,1 +2706,1 @@\n-    Utf8 \"B\"; \/\/ #4\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/B\"; \/\/ #4\n@@ -2739,1 +2712,1 @@\n-    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue1Mismatch\"; \/\/ #10\n@@ -2742,1 +2715,1 @@\n-    Utf8 \"C\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/C\"; \/\/ #13\n@@ -2746,1 +2719,1 @@\n-    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #17\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue1Mismatch;\"; \/\/ #17\n@@ -2778,1 +2751,1 @@\n-                0  127;\n+                0  129;\n@@ -2802,2 +2775,2 @@\n-                0  130;\n-                4  131;\n+                0  132;\n+                4  133;\n@@ -2817,2 +2790,2 @@\n-} \/\/ end class C\n-class I1 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/C\n+class compiler\/valhalla\/inlinetypes\/I1 {\n@@ -2825,1 +2798,1 @@\n-    Utf8 \"I1\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I1\"; \/\/ #2\n@@ -2829,1 +2802,1 @@\n-    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #6\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #6\n@@ -2859,2 +2832,2 @@\n-} \/\/ end class I1\n-class I2 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/I1\n+class compiler\/valhalla\/inlinetypes\/I2 {\n@@ -2867,1 +2840,1 @@\n-    Utf8 \"I2\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I2\"; \/\/ #2\n@@ -2871,1 +2844,1 @@\n-    Utf8 \"I1\"; \/\/ #6\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I1\"; \/\/ #6\n@@ -2873,1 +2846,1 @@\n-    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #8\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #8\n@@ -2904,2 +2877,2 @@\n-} \/\/ end class I2\n-file \"D.class\" {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/I2\n+class compiler\/valhalla\/inlinetypes\/D {\n@@ -2920,1 +2893,1 @@\n-    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #10\n@@ -2923,1 +2896,1 @@\n-    Utf8 \"D\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/D\"; \/\/ #13\n@@ -2925,1 +2898,1 @@\n-    Utf8 \"I2\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I2\"; \/\/ #15\n@@ -2929,1 +2902,1 @@\n-    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #19\n@@ -2962,1 +2935,1 @@\n-                0  152;\n+                0  154;\n@@ -2986,2 +2959,2 @@\n-                0  155;\n-                4  156;\n+                0  157;\n+                4  158;\n@@ -3001,2 +2974,2 @@\n-} \/\/ end class D\n-file \"F.class\" {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/D\n+class compiler\/valhalla\/inlinetypes\/F {\n@@ -3017,1 +2990,1 @@\n-    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue2Mismatch\"; \/\/ #10\n@@ -3020,1 +2993,1 @@\n-    Utf8 \"F\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/F\"; \/\/ #13\n@@ -3022,1 +2995,1 @@\n-    Utf8 \"I2\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I2\"; \/\/ #15\n@@ -3024,1 +2997,1 @@\n-    Utf8 \"I4\"; \/\/ #17\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I4\"; \/\/ #17\n@@ -3028,1 +3001,1 @@\n-    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #21\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue2Mismatch;\"; \/\/ #21\n@@ -3062,1 +3035,1 @@\n-                0  169;\n+                0  171;\n@@ -3086,2 +3059,2 @@\n-                0  172;\n-                4  173;\n+                0  174;\n+                4  175;\n@@ -3101,2 +3074,2 @@\n-} \/\/ end class F\n-class H {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/F\n+class compiler\/valhalla\/inlinetypes\/H {\n@@ -3117,1 +3090,1 @@\n-    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue3Mismatch\"; \/\/ #10\n@@ -3120,1 +3093,1 @@\n-    Utf8 \"H\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/H\"; \/\/ #13\n@@ -3122,1 +3095,1 @@\n-    Utf8 \"I5\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I5\"; \/\/ #15\n@@ -3126,1 +3099,1 @@\n-    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #19\n@@ -3159,1 +3132,1 @@\n-                0  189;\n+                0  191;\n@@ -3183,2 +3156,2 @@\n-                0  192;\n-                4  193;\n+                0  194;\n+                4  195;\n@@ -3198,2 +3171,2 @@\n-} \/\/ end class H\n-class I5 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/H\n+class compiler\/valhalla\/inlinetypes\/I5 {\n@@ -3206,1 +3179,1 @@\n-    Utf8 \"I5\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I5\"; \/\/ #2\n@@ -3210,1 +3183,1 @@\n-    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #6\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue3Mismatch;\"; \/\/ #6\n@@ -3240,2 +3213,2 @@\n-} \/\/ end class I5\n-class M {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/I5\n+class compiler\/valhalla\/inlinetypes\/M {\n@@ -3256,1 +3229,1 @@\n-    Utf8 \"M\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/M\"; \/\/ #10\n@@ -3262,1 +3235,1 @@\n-    Utf8 \"MyValue4\"; \/\/ #16\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue4Mismatch\"; \/\/ #16\n@@ -3264,1 +3237,1 @@\n-    Utf8 \"()LMyValue4;\"; \/\/ #18\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue4Mismatch;\"; \/\/ #18\n@@ -3268,1 +3241,1 @@\n-    Utf8 \"(Z)LMyValue4;\"; \/\/ #22\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue4Mismatch;\"; \/\/ #22\n@@ -3309,2 +3282,2 @@\n-                0  220;\n-                4  221;\n+                0  222;\n+                4  223;\n@@ -3338,7 +3311,7 @@\n-                0  224;\n-                4  225;\n-                6  227;\n-                10  229;\n-                18  230;\n-                28  229;\n-                34  232;\n+                0  226;\n+                4  227;\n+                6  229;\n+                10  231;\n+                18  232;\n+                28  231;\n+                34  234;\n@@ -3366,2 +3339,2 @@\n-} \/\/ end class M\n-file \"N.class\" {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/M\n+class compiler\/valhalla\/inlinetypes\/N {\n@@ -3382,1 +3355,1 @@\n-    Utf8 \"MyValue5\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue5Mismatch\"; \/\/ #10\n@@ -3384,1 +3357,1 @@\n-    Utf8 \"()LMyValue5;\"; \/\/ #12\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue5Mismatch;\"; \/\/ #12\n@@ -3386,1 +3359,1 @@\n-    Utf8 \"N\"; \/\/ #14\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/N\"; \/\/ #14\n@@ -3390,1 +3363,1 @@\n-    Utf8 \"(Z)LMyValue5;\"; \/\/ #18\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue5Mismatch;\"; \/\/ #18\n@@ -3423,1 +3396,1 @@\n-                0  237;\n+                0  239;\n@@ -3448,3 +3421,3 @@\n-                0  239;\n-                4  240;\n-                6  242;\n+                0  241;\n+                4  242;\n+                6  244;\n@@ -3470,2 +3443,2 @@\n-} \/\/ end class N\n-file \"O.class\" {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/N\n+class compiler\/valhalla\/inlinetypes\/O {\n@@ -3486,1 +3459,1 @@\n-    Utf8 \"MyValue6\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue6Mismatch\"; \/\/ #10\n@@ -3488,1 +3461,1 @@\n-    Utf8 \"()LMyValue6;\"; \/\/ #12\n+    Utf8 \"()Lcompiler\/valhalla\/inlinetypes\/MyValue6Mismatch;\"; \/\/ #12\n@@ -3490,1 +3463,1 @@\n-    Utf8 \"O\"; \/\/ #14\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/O\"; \/\/ #14\n@@ -3494,1 +3467,1 @@\n-    Utf8 \"(Z)LMyValue6;\"; \/\/ #18\n+    Utf8 \"(Z)Lcompiler\/valhalla\/inlinetypes\/MyValue6Mismatch;\"; \/\/ #18\n@@ -3527,1 +3500,1 @@\n-                0  247;\n+                0  249;\n@@ -3552,3 +3525,3 @@\n-                0  249;\n-                4  250;\n-                6  252;\n+                0  251;\n+                4  252;\n+                6  254;\n@@ -3574,2 +3547,2 @@\n-} \/\/ end class O\n-class I6 {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/O\n+class compiler\/valhalla\/inlinetypes\/I6 {\n@@ -3582,1 +3555,1 @@\n-    Utf8 \"I6\"; \/\/ #2\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I6\"; \/\/ #2\n@@ -3586,1 +3559,1 @@\n-    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #6\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #6\n@@ -3620,1 +3593,1 @@\n-                0  259;\n+                0  261;\n@@ -3634,2 +3607,2 @@\n-} \/\/ end class I6\n-class P {\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/I6\n+class compiler\/valhalla\/inlinetypes\/P {\n@@ -3650,1 +3623,1 @@\n-    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/MyValue7Mismatch\"; \/\/ #10\n@@ -3653,1 +3626,1 @@\n-    Utf8 \"P\"; \/\/ #13\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/P\"; \/\/ #13\n@@ -3655,1 +3628,1 @@\n-    Utf8 \"I6\"; \/\/ #15\n+    Utf8 \"compiler\/valhalla\/inlinetypes\/I6\"; \/\/ #15\n@@ -3659,1 +3632,1 @@\n-    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #19\n+    Utf8 \"(Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;)Lcompiler\/valhalla\/inlinetypes\/MyValue7Mismatch;\"; \/\/ #19\n@@ -3692,1 +3665,1 @@\n-                0  263;\n+                0  265;\n@@ -3716,2 +3689,2 @@\n-                0  266;\n-                4  267;\n+                0  268;\n+                4  269;\n@@ -3731,1 +3704,1 @@\n-} \/\/ end class P\n+} \/\/ end class compiler\/valhalla\/inlinetypes\/P\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.jcod","additions":403,"deletions":430,"binary":false,"changes":833,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,3 @@\n-value class MyValue1 {\n+package compiler.valhalla.inlinetypes;\n+\n+value class MyValue1Mismatch {\n@@ -34,1 +36,1 @@\n-value class MyValue2 {\n+value class MyValue2Mismatch {\n@@ -44,1 +46,1 @@\n-value class MyValue3 {\n+value class MyValue3Mismatch {\n@@ -54,1 +56,1 @@\n-value class MyValue4 {\n+value class MyValue4Mismatch {\n@@ -63,2 +65,2 @@\n-    static MyValue4 make() {\n-        return new MyValue4();\n+    static MyValue4Mismatch make() {\n+        return new MyValue4Mismatch();\n@@ -72,1 +74,1 @@\n-value class MyValue5 implements Verifiable {\n+value class MyValue5Mismatch implements Verifiable {\n@@ -82,2 +84,2 @@\n-    static MyValue5 make() {\n-        return new MyValue5();\n+    static MyValue5Mismatch make() {\n+        return new MyValue5Mismatch();\n@@ -87,1 +89,1 @@\n-value class MyValue6 implements Verifiable {\n+value class MyValue6Mismatch implements Verifiable {\n@@ -97,2 +99,2 @@\n-    static MyValue6 make() {\n-        return new MyValue6();\n+    static MyValue6Mismatch make() {\n+        return new MyValue6Mismatch();\n@@ -102,1 +104,1 @@\n-value class MyValue7 {\n+value class MyValue7Mismatch {\n@@ -113,1 +115,1 @@\n-    public MyValue1 method(MyValue1 arg) {\n+    public MyValue1Mismatch method(MyValue1Mismatch arg) {\n@@ -121,1 +123,1 @@\n-    public MyValue1 method(MyValue1 arg) {\n+    public MyValue1Mismatch method(MyValue1Mismatch arg) {\n@@ -129,1 +131,1 @@\n-    public MyValue1 method(MyValue1 arg) {\n+    public MyValue1Mismatch method(MyValue1Mismatch arg) {\n@@ -136,1 +138,1 @@\n-    public MyValue2 method(MyValue2 arg);\n+    public MyValue2Mismatch method(MyValue2Mismatch arg);\n@@ -140,1 +142,1 @@\n-    public MyValue2 method(MyValue2 arg);\n+    public MyValue2Mismatch method(MyValue2Mismatch arg);\n@@ -144,1 +146,1 @@\n-    public MyValue2 method(MyValue2 arg);\n+    public MyValue2Mismatch method(MyValue2Mismatch arg);\n@@ -148,1 +150,1 @@\n-    public MyValue2 method(MyValue2 arg);\n+    public MyValue2Mismatch method(MyValue2Mismatch arg);\n@@ -154,1 +156,1 @@\n-    public MyValue2 method(MyValue2 arg) {\n+    public MyValue2Mismatch method(MyValue2Mismatch arg) {\n@@ -162,1 +164,1 @@\n-    public MyValue2 method(MyValue2 arg) {\n+    public MyValue2Mismatch method(MyValue2Mismatch arg) {\n@@ -171,1 +173,1 @@\n-    public MyValue2 method(MyValue2 arg) {\n+    public MyValue2Mismatch method(MyValue2Mismatch arg) {\n@@ -179,1 +181,1 @@\n-    public MyValue2 method(MyValue2 arg) {\n+    public MyValue2Mismatch method(MyValue2Mismatch arg) {\n@@ -186,1 +188,1 @@\n-    public MyValue3 method(MyValue3 arg);\n+    public MyValue3Mismatch method(MyValue3Mismatch arg);\n@@ -191,1 +193,1 @@\n-    public MyValue3 method(MyValue3 arg) {\n+    public MyValue3Mismatch method(MyValue3Mismatch arg) {\n@@ -198,1 +200,1 @@\n-    public MyValue3 method(MyValue3 arg) {\n+    public MyValue3Mismatch method(MyValue3Mismatch arg) {\n@@ -206,1 +208,1 @@\n-    public MyValue3 method(MyValue3 arg) {\n+    public MyValue3Mismatch method(MyValue3Mismatch arg) {\n@@ -214,1 +216,1 @@\n-    public MyValue3 method(MyValue3 arg) {\n+    public MyValue3Mismatch method(MyValue3Mismatch arg) {\n@@ -223,1 +225,1 @@\n-    public MyValue4 method(boolean warmup) {\n+    public MyValue4Mismatch method(boolean warmup) {\n@@ -227,1 +229,1 @@\n-            MyValue4 res = MyValue4.make();\n+            MyValue4Mismatch res = MyValue4Mismatch.make();\n@@ -238,1 +240,1 @@\n-    public MyValue5 method(boolean warmup) {\n+    public MyValue5Mismatch method(boolean warmup) {\n@@ -242,1 +244,1 @@\n-            return MyValue5.make();\n+            return MyValue5Mismatch.make();\n@@ -248,1 +250,1 @@\n-    public MyValue6 method(boolean warmup) {\n+    public MyValue6Mismatch method(boolean warmup) {\n@@ -252,1 +254,1 @@\n-            return MyValue6.make();\n+            return MyValue6Mismatch.make();\n@@ -258,1 +260,1 @@\n-    default MyValue7 method(MyValue7 arg) {\n+    default MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -265,1 +267,1 @@\n-    public MyValue7 method(MyValue7 arg) {\n+    public MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -272,1 +274,1 @@\n-    MyValue7 method(MyValue7 arg) {\n+    MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -280,1 +282,1 @@\n-    MyValue7 method(MyValue7 arg) {\n+    MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -288,1 +290,1 @@\n-    public MyValue7 method(MyValue7 arg) {\n+    public MyValue7Mismatch method(MyValue7Mismatch arg) {\n@@ -300,5 +302,5 @@\n-        a1.method(new MyValue1()).verify();\n-        a2.method(new MyValue1()).verify();\n-        a3.method(new MyValue1()).verify();\n-        a4.method(new MyValue1()).verify();\n-        a5.method(new MyValue1()).verify();\n+        a1.method(new MyValue1Mismatch()).verify();\n+        a2.method(new MyValue1Mismatch()).verify();\n+        a3.method(new MyValue1Mismatch()).verify();\n+        a4.method(new MyValue1Mismatch()).verify();\n+        a5.method(new MyValue1Mismatch()).verify();\n@@ -306,3 +308,3 @@\n-        b1.method(new MyValue1()).verify();\n-        b2.method(new MyValue1()).verify();\n-        c.method(new MyValue1()).verify();\n+        b1.method(new MyValue1Mismatch()).verify();\n+        b2.method(new MyValue1Mismatch()).verify();\n+        c.method(new MyValue1Mismatch()).verify();\n@@ -313,1 +315,1 @@\n-    \/\/ Loaded later, combine both hierachies and introduce a mismatch:\n+    \/\/ Loaded later, combine both hierarchies and introduce a mismatch:\n@@ -318,13 +320,13 @@\n-        i11.method(new MyValue2()).verify();\n-        i12.method(new MyValue2()).verify();\n-        i13.method(new MyValue2()).verify();\n-        i14.method(new MyValue2()).verify();\n-        i15.method(new MyValue2()).verify();\n-        i16.method(new MyValue2()).verify();\n-        i21.method(new MyValue2()).verify();\n-        i22.method(new MyValue2()).verify();\n-        i23.method(new MyValue2()).verify();\n-        i24.method(new MyValue2()).verify();\n-        i25.method(new MyValue2()).verify();\n-        i26.method(new MyValue2()).verify();\n-        d.method(new MyValue2()).verify();\n+        i11.method(new MyValue2Mismatch()).verify();\n+        i12.method(new MyValue2Mismatch()).verify();\n+        i13.method(new MyValue2Mismatch()).verify();\n+        i14.method(new MyValue2Mismatch()).verify();\n+        i15.method(new MyValue2Mismatch()).verify();\n+        i16.method(new MyValue2Mismatch()).verify();\n+        i21.method(new MyValue2Mismatch()).verify();\n+        i22.method(new MyValue2Mismatch()).verify();\n+        i23.method(new MyValue2Mismatch()).verify();\n+        i24.method(new MyValue2Mismatch()).verify();\n+        i25.method(new MyValue2Mismatch()).verify();\n+        i26.method(new MyValue2Mismatch()).verify();\n+        d.method(new MyValue2Mismatch()).verify();\n@@ -332,13 +334,13 @@\n-        i31.method(new MyValue2()).verify();\n-        i32.method(new MyValue2()).verify();\n-        i33.method(new MyValue2()).verify();\n-        i34.method(new MyValue2()).verify();\n-        i35.method(new MyValue2()).verify();\n-        i36.method(new MyValue2()).verify();\n-        i41.method(new MyValue2()).verify();\n-        i42.method(new MyValue2()).verify();\n-        i43.method(new MyValue2()).verify();\n-        i44.method(new MyValue2()).verify();\n-        i45.method(new MyValue2()).verify();\n-        i46.method(new MyValue2()).verify();\n-        e.method(new MyValue2()).verify();\n+        i31.method(new MyValue2Mismatch()).verify();\n+        i32.method(new MyValue2Mismatch()).verify();\n+        i33.method(new MyValue2Mismatch()).verify();\n+        i34.method(new MyValue2Mismatch()).verify();\n+        i35.method(new MyValue2Mismatch()).verify();\n+        i36.method(new MyValue2Mismatch()).verify();\n+        i41.method(new MyValue2Mismatch()).verify();\n+        i42.method(new MyValue2Mismatch()).verify();\n+        i43.method(new MyValue2Mismatch()).verify();\n+        i44.method(new MyValue2Mismatch()).verify();\n+        i45.method(new MyValue2Mismatch()).verify();\n+        i46.method(new MyValue2Mismatch()).verify();\n+        e.method(new MyValue2Mismatch()).verify();\n@@ -349,1 +351,1 @@\n-    \/\/ Loaded later, combines both hierachies and introduces a mismatch:\n+    \/\/ Loaded later, combines both hierarchies and introduces a mismatch:\n@@ -353,4 +355,4 @@\n-        i51.method(new MyValue3()).verify();\n-        i52.method(new MyValue3()).verify();\n-        i53.method(new MyValue3()).verify();\n-        h.method(new MyValue3()).verify();\n+        i51.method(new MyValue3Mismatch()).verify();\n+        i52.method(new MyValue3Mismatch()).verify();\n+        i53.method(new MyValue3Mismatch()).verify();\n+        h.method(new MyValue3Mismatch()).verify();\n@@ -358,6 +360,6 @@\n-        j1.method(new MyValue3()).verify();\n-        j2.method(new MyValue3()).verify();\n-        j3.method(new MyValue3()).verify();\n-        j4.method(new MyValue3()).verify();\n-        j5.method(new MyValue3()).verify();\n-        k.method(new MyValue3()).verify();\n+        j1.method(new MyValue3Mismatch()).verify();\n+        j2.method(new MyValue3Mismatch()).verify();\n+        j3.method(new MyValue3Mismatch()).verify();\n+        j4.method(new MyValue3Mismatch()).verify();\n+        j5.method(new MyValue3Mismatch()).verify();\n+        k.method(new MyValue3Mismatch()).verify();\n@@ -389,3 +391,3 @@\n-        f.method(new MyValue2());\n-        g.method(new MyValue2());\n-        l.method(new MyValue3());\n+        f.method(new MyValue2Mismatch());\n+        g.method(new MyValue2Mismatch());\n+        l.method(new MyValue3Mismatch());\n@@ -408,1 +410,1 @@\n-    \/\/ Loaded later, combines both hierachies and introduces a mismatch:\n+    \/\/ Loaded later, combines both hierarchies and introduces a mismatch:\n@@ -412,4 +414,4 @@\n-        i61.method(new MyValue7()).verify();\n-        i62.method(new MyValue7()).verify();\n-        i63.method(new MyValue7()).verify();\n-        p.method(new MyValue7()).verify();\n+        i61.method(new MyValue7Mismatch()).verify();\n+        i62.method(new MyValue7Mismatch()).verify();\n+        i63.method(new MyValue7Mismatch()).verify();\n+        p.method(new MyValue7Mismatch()).verify();\n@@ -417,6 +419,6 @@\n-        q1.method(new MyValue7()).verify();\n-        q2.method(new MyValue7()).verify();\n-        q3.method(new MyValue7()).verify();\n-        q4.method(new MyValue7()).verify();\n-        q5.method(new MyValue7()).verify();\n-        r.method(new MyValue7()).verify();\n+        q1.method(new MyValue7Mismatch()).verify();\n+        q2.method(new MyValue7Mismatch()).verify();\n+        q3.method(new MyValue7Mismatch()).verify();\n+        q4.method(new MyValue7Mismatch()).verify();\n+        q5.method(new MyValue7Mismatch()).verify();\n+        r.method(new MyValue7Mismatch()).verify();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandlingGenerator.java","additions":103,"deletions":101,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main TestMultidimArrays\n+ * @run main compiler.valhalla.inlinetypes.TestMultidimArrays\n@@ -31,2 +31,2 @@\n- *                   -XX:CompileCommand=compileonly,TestMultidimArrays::test*\n- *                   TestMultidimArrays\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestMultidimArrays::test*\n+ *                   compiler.valhalla.inlinetypes.TestMultidimArrays\n@@ -34,2 +34,2 @@\n- *                   -XX:CompileCommand=compileonly,TestMultidimArrays::test*\n- *                   TestMultidimArrays\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestMultidimArrays::test*\n+ *                   compiler.valhalla.inlinetypes.TestMultidimArrays\n@@ -38,2 +38,2 @@\n- *                   -XX:CompileCommand=compileonly,TestMultidimArrays::test*\n- *                   TestMultidimArrays\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestMultidimArrays::test*\n+ *                   compiler.valhalla.inlinetypes.TestMultidimArrays\n@@ -41,2 +41,2 @@\n- *                   -XX:CompileCommand=compileonly,TestMultidimArrays::test*\n- *                   TestMultidimArrays\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestMultidimArrays::test*\n+ *                   compiler.valhalla.inlinetypes.TestMultidimArrays\n@@ -45,0 +45,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMultidimArrays.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import java.lang.invoke.*;\n@@ -46,1 +45,1 @@\n-value class MyValue {\n+value class MyValueNativeClone {\n@@ -49,1 +48,1 @@\n-    public MyValue(int x) {\n+    public MyValueNativeClone(int x) {\n@@ -70,1 +69,1 @@\n-        MyValue vt = new MyValue(42);\n+        MyValueNativeClone vt = new MyValueNativeClone(42);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNativeClone.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.value.ValueClass;\n@@ -51,1 +50,1 @@\n-interface MyInterface {\n+interface MyInterfaceNestmateAccess {\n@@ -56,1 +55,1 @@\n-value class MyValue implements MyInterface {\n+value class MyValueNestmateAccess implements MyInterfaceNestmateAccess {\n@@ -65,1 +64,1 @@\n-class Test1 {\n+class Test1NestmateAccess {\n@@ -68,1 +67,1 @@\n-    private MyValue vt;\n+    private MyValueNestmateAccess vt;\n@@ -70,1 +69,1 @@\n-    public Test1(final MyValue vt) {\n+    public Test1NestmateAccess(final MyValueNestmateAccess vt) {\n@@ -74,2 +73,2 @@\n-    public MyInterface test() {\n-        return new MyInterface() {\n+    public MyInterfaceNestmateAccess test() {\n+        return new MyInterfaceNestmateAccess() {\n@@ -77,1 +76,1 @@\n-            private int x = (Test1.this).vt.hash();\n+            private int x = (Test1NestmateAccess.this).vt.hash();\n@@ -85,1 +84,1 @@\n-\/\/ Same as Test1 but outer class is a value class\n+\/\/ Same as Test1NestmateAccess but outer class is a value class\n@@ -87,1 +86,1 @@\n-value class Test2 {\n+value class Test2NestmateAccess {\n@@ -90,1 +89,1 @@\n-    private MyValue vt;\n+    private MyValueNestmateAccess vt;\n@@ -92,1 +91,1 @@\n-    public Test2(final MyValue vt) {\n+    public Test2NestmateAccess(final MyValueNestmateAccess vt) {\n@@ -96,3 +95,3 @@\n-    public MyInterface test() {\n-        return new MyInterface() {\n-            \/\/ Delayed flattened load of Test2.this.\n+    public MyInterfaceNestmateAccess test() {\n+        return new MyInterfaceNestmateAccess() {\n+            \/\/ Delayed flattened load of Test2NestmateAccess.this.\n@@ -100,1 +99,1 @@\n-            private int x = (Test2.this).vt.hash();\n+            private int x = (Test2NestmateAccess.this).vt.hash();\n@@ -109,2 +108,2 @@\n-class Test3 {\n-    private MyValue vt;\n+class Test3NestmateAccess {\n+    private MyValueNestmateAccess vt;\n@@ -112,2 +111,2 @@\n-    public MyInterface test(MyValue init) {\n-        return new MyInterface() {\n+    public MyInterfaceNestmateAccess test(MyValueNestmateAccess init) {\n+        return new MyInterfaceNestmateAccess() {\n@@ -115,1 +114,1 @@\n-            private MyValue tmp = (vt = init);\n+            private MyValueNestmateAccess tmp = (vt = init);\n@@ -123,3 +122,3 @@\n-\/\/ Same as Test1 but with static field\n-class Test4 {\n-    private static MyValue vt = null;\n+\/\/ Same as Test1NestmateAccess but with static field\n+class Test4NestmateAccess {\n+    private static MyValueNestmateAccess vt = null;\n@@ -127,1 +126,1 @@\n-    public Test4(final MyValue vt) {\n+    public Test4NestmateAccess(final MyValueNestmateAccess vt) {\n@@ -131,2 +130,2 @@\n-    public MyInterface test() {\n-        return new MyInterface() {\n+    public MyInterfaceNestmateAccess test() {\n+        return new MyInterfaceNestmateAccess() {\n@@ -134,1 +133,1 @@\n-            private int x = (Test4.this).vt.hash();\n+            private int x = (Test4NestmateAccess.this).vt.hash();\n@@ -142,1 +141,1 @@\n-\/\/ Same as Test2 but with static field\n+\/\/ Same as Test2NestmateAccess but with static field\n@@ -144,2 +143,2 @@\n-value class Test5 {\n-    private static MyValue vt;\n+value class Test5NestmateAccess {\n+    private static MyValueNestmateAccess vt;\n@@ -147,1 +146,1 @@\n-    public Test5(final MyValue vt) {\n+    public Test5NestmateAccess(final MyValueNestmateAccess vt) {\n@@ -151,3 +150,3 @@\n-    public MyInterface test() {\n-        return new MyInterface() {\n-            \/\/ Delayed flattened load of Test5.this.\n+    public MyInterfaceNestmateAccess test() {\n+        return new MyInterfaceNestmateAccess() {\n+            \/\/ Delayed flattened load of Test5NestmateAccess.this.\n@@ -155,1 +154,1 @@\n-            private int x = (Test5.this).vt.hash();\n+            private int x = (Test5NestmateAccess.this).vt.hash();\n@@ -163,3 +162,3 @@\n-\/\/ Same as Test3 but with static field\n-class Test6 {\n-    private static MyValue vt;\n+\/\/ Same as Test3NestmateAccess but with static field\n+class Test6NestmateAccess {\n+    private static MyValueNestmateAccess vt;\n@@ -167,2 +166,2 @@\n-    public MyInterface test(MyValue init) {\n-        return new MyInterface() {\n+    public MyInterfaceNestmateAccess test(MyValueNestmateAccess init) {\n+        return new MyInterfaceNestmateAccess() {\n@@ -170,1 +169,1 @@\n-            private MyValue tmp = (vt = init);\n+            private MyValueNestmateAccess tmp = (vt = init);\n@@ -178,1 +177,1 @@\n-\/\/ Same as Test6 but outer class is a value class\n+\/\/ Same as Test6NestmateAccess but outer class is a value class\n@@ -180,2 +179,2 @@\n-value class Test7 {\n-    private static MyValue vt;\n+value class Test7NestmateAccess {\n+    private static MyValueNestmateAccess vt;\n@@ -183,2 +182,2 @@\n-    public MyInterface test(MyValue init) {\n-        return new MyInterface() {\n+    public MyInterfaceNestmateAccess test(MyValueNestmateAccess init) {\n+        return new MyInterfaceNestmateAccess() {\n@@ -186,1 +185,1 @@\n-            private MyValue tmp = (vt = init);\n+            private MyValueNestmateAccess tmp = (vt = init);\n@@ -197,1 +196,1 @@\n-        Test1 t1 = new Test1(new MyValue());\n+        Test1NestmateAccess t1 = new Test1NestmateAccess(new MyValueNestmateAccess());\n@@ -201,1 +200,1 @@\n-        Test2 t2 = new Test2(new MyValue());\n+        Test2NestmateAccess t2 = new Test2NestmateAccess(new MyValueNestmateAccess());\n@@ -205,2 +204,2 @@\n-        Test3 t3 = new Test3();\n-        res = t3.test(new MyValue()).hash();\n+        Test3NestmateAccess t3 = new Test3NestmateAccess();\n+        res = t3.test(new MyValueNestmateAccess()).hash();\n@@ -209,1 +208,1 @@\n-        Test4 t4 = new Test4(new MyValue());\n+        Test4NestmateAccess t4 = new Test4NestmateAccess(new MyValueNestmateAccess());\n@@ -213,1 +212,1 @@\n-        Test5 t5 = new Test5(new MyValue());\n+        Test5NestmateAccess t5 = new Test5NestmateAccess(new MyValueNestmateAccess());\n@@ -217,2 +216,2 @@\n-        Test6 t6 = new Test6();\n-        res = t6.test(new MyValue()).hash();\n+        Test6NestmateAccess t6 = new Test6NestmateAccess();\n+        res = t6.test(new MyValueNestmateAccess()).hash();\n@@ -221,2 +220,2 @@\n-        Test7 t7 = new Test7();\n-        res = t7.test(new MyValue()).hash();\n+        Test7NestmateAccess t7 = new Test7NestmateAccess();\n+        res = t7.test(new MyValueNestmateAccess()).hash();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNestmateAccess.java","additions":58,"deletions":59,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import java.lang.invoke.*;\n@@ -46,2 +45,0 @@\n-import java.util.regex.Pattern;\n-import java.util.regex.Matcher;\n@@ -53,1 +50,1 @@\n-interface MyInterface {\n+interface MyInterfaceNewAcmp {\n@@ -57,1 +54,1 @@\n-abstract value class MyAbstract implements MyInterface {\n+abstract value class MyAbstractNewAcmp implements MyInterfaceNewAcmp {\n@@ -61,1 +58,1 @@\n-value class MyValue1 extends MyAbstract {\n+value class MyValue1NewAcmp extends MyAbstractNewAcmp {\n@@ -64,1 +61,1 @@\n-    MyValue1(int x) {\n+    MyValue1NewAcmp(int x) {\n@@ -68,2 +65,2 @@\n-    static MyValue1 createDefault() {\n-        return new MyValue1(0);\n+    static MyValue1NewAcmp createDefault() {\n+        return new MyValue1NewAcmp(0);\n@@ -72,2 +69,2 @@\n-    static MyValue1 setX(MyValue1 v, int x) {\n-        return new MyValue1(x);\n+    static MyValue1NewAcmp setX(MyValue1NewAcmp v, int x) {\n+        return new MyValue1NewAcmp(x);\n@@ -77,1 +74,1 @@\n-value class MyValue2 extends MyAbstract {\n+value class MyValue2NewAcmp extends MyAbstractNewAcmp {\n@@ -80,1 +77,1 @@\n-    MyValue2(int x) {\n+    MyValue2NewAcmp(int x) {\n@@ -84,2 +81,2 @@\n-    static MyValue2 createDefault() {\n-        return new MyValue2(0);\n+    static MyValue2NewAcmp createDefault() {\n+        return new MyValue2NewAcmp(0);\n@@ -88,2 +85,2 @@\n-    static MyValue2 setX(MyValue2 v, int x) {\n-        return new MyValue2(x);\n+    static MyValue2NewAcmp setX(MyValue2NewAcmp v, int x) {\n+        return new MyValue2NewAcmp(x);\n@@ -93,1 +90,1 @@\n-class MyObject extends MyAbstract {\n+class MyObjectNewAcmp extends MyAbstractNewAcmp {\n@@ -134,1 +131,1 @@\n-    public boolean testEq02_1(MyValue1 v1, MyValue1 v2) {\n+    public boolean testEq02_1(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -138,1 +135,1 @@\n-    public boolean testEq02_2(MyValue1 v1, MyValue1 v2) {\n+    public boolean testEq02_2(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -142,1 +139,1 @@\n-    public boolean testEq02_3(MyValue1 v1, MyValue1 v2) {\n+    public boolean testEq02_3(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -146,1 +143,1 @@\n-    public boolean testEq03_1(MyValue1 v, Object u) {\n+    public boolean testEq03_1(MyValue1NewAcmp v, Object u) {\n@@ -150,1 +147,1 @@\n-    public boolean testEq03_2(MyValue1 v, Object u) {\n+    public boolean testEq03_2(MyValue1NewAcmp v, Object u) {\n@@ -154,1 +151,1 @@\n-    public boolean testEq03_3(MyValue1 v, Object u) {\n+    public boolean testEq03_3(MyValue1NewAcmp v, Object u) {\n@@ -158,1 +155,1 @@\n-    public boolean testEq04_1(Object u, MyValue1 v) {\n+    public boolean testEq04_1(Object u, MyValue1NewAcmp v) {\n@@ -162,1 +159,1 @@\n-    public boolean testEq04_2(Object u, MyValue1 v) {\n+    public boolean testEq04_2(Object u, MyValue1NewAcmp v) {\n@@ -166,1 +163,1 @@\n-    public boolean testEq04_3(Object u, MyValue1 v) {\n+    public boolean testEq04_3(Object u, MyValue1NewAcmp v) {\n@@ -170,1 +167,1 @@\n-    public boolean testEq05_1(MyObject o, MyValue1 v) {\n+    public boolean testEq05_1(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -174,1 +171,1 @@\n-    public boolean testEq05_2(MyObject o, MyValue1 v) {\n+    public boolean testEq05_2(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -178,1 +175,1 @@\n-    public boolean testEq05_3(MyObject o, MyValue1 v) {\n+    public boolean testEq05_3(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -182,1 +179,1 @@\n-    public boolean testEq06_1(MyValue1 v, MyObject o) {\n+    public boolean testEq06_1(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -186,1 +183,1 @@\n-    public boolean testEq06_2(MyValue1 v, MyObject o) {\n+    public boolean testEq06_2(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -190,1 +187,1 @@\n-    public boolean testEq06_3(MyValue1 v, MyObject o) {\n+    public boolean testEq06_3(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -194,1 +191,1 @@\n-    public boolean testEq07_1(MyValue1 v1, MyValue1 v2) {\n+    public boolean testEq07_1(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -198,1 +195,1 @@\n-    public boolean testEq07_2(MyValue1 v1, MyValue1 v2) {\n+    public boolean testEq07_2(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -202,1 +199,1 @@\n-    public boolean testEq07_3(MyValue1 v1, MyValue1 v2) {\n+    public boolean testEq07_3(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -206,1 +203,1 @@\n-    public boolean testEq08_1(MyValue1 v, Object u) {\n+    public boolean testEq08_1(MyValue1NewAcmp v, Object u) {\n@@ -210,1 +207,1 @@\n-    public boolean testEq08_2(MyValue1 v, Object u) {\n+    public boolean testEq08_2(MyValue1NewAcmp v, Object u) {\n@@ -214,1 +211,1 @@\n-    public boolean testEq08_3(MyValue1 v, Object u) {\n+    public boolean testEq08_3(MyValue1NewAcmp v, Object u) {\n@@ -218,1 +215,1 @@\n-    public boolean testEq09_1(Object u, MyValue1 v) {\n+    public boolean testEq09_1(Object u, MyValue1NewAcmp v) {\n@@ -222,1 +219,1 @@\n-    public boolean testEq09_2(Object u, MyValue1 v) {\n+    public boolean testEq09_2(Object u, MyValue1NewAcmp v) {\n@@ -226,1 +223,1 @@\n-    public boolean testEq09_3(Object u, MyValue1 v) {\n+    public boolean testEq09_3(Object u, MyValue1NewAcmp v) {\n@@ -230,1 +227,1 @@\n-    public boolean testEq10_1(MyObject o, MyValue1 v) {\n+    public boolean testEq10_1(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -234,1 +231,1 @@\n-    public boolean testEq10_2(MyObject o, MyValue1 v) {\n+    public boolean testEq10_2(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -238,1 +235,1 @@\n-    public boolean testEq10_3(MyObject o, MyValue1 v) {\n+    public boolean testEq10_3(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -242,1 +239,1 @@\n-    public boolean testEq11_1(MyValue1 v, MyObject o) {\n+    public boolean testEq11_1(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -246,1 +243,1 @@\n-    public boolean testEq11_2(MyValue1 v, MyObject o) {\n+    public boolean testEq11_2(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -250,1 +247,1 @@\n-    public boolean testEq11_3(MyValue1 v, MyObject o) {\n+    public boolean testEq11_3(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -254,1 +251,1 @@\n-    public boolean testEq12_1(MyObject o1, MyObject o2) {\n+    public boolean testEq12_1(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -258,1 +255,1 @@\n-    public boolean testEq12_2(MyObject o1, MyObject o2) {\n+    public boolean testEq12_2(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -262,1 +259,1 @@\n-    public boolean testEq12_3(MyObject o1, MyObject o2) {\n+    public boolean testEq12_3(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -266,1 +263,1 @@\n-    public boolean testEq13_1(Object u, MyObject o) {\n+    public boolean testEq13_1(Object u, MyObjectNewAcmp o) {\n@@ -270,1 +267,1 @@\n-    public boolean testEq13_2(Object u, MyObject o) {\n+    public boolean testEq13_2(Object u, MyObjectNewAcmp o) {\n@@ -274,1 +271,1 @@\n-    public boolean testEq13_3(Object u, MyObject o) {\n+    public boolean testEq13_3(Object u, MyObjectNewAcmp o) {\n@@ -278,1 +275,1 @@\n-    public boolean testEq14_1(MyObject o, Object u) {\n+    public boolean testEq14_1(MyObjectNewAcmp o, Object u) {\n@@ -282,1 +279,1 @@\n-    public boolean testEq14_2(MyObject o, Object u) {\n+    public boolean testEq14_2(MyObjectNewAcmp o, Object u) {\n@@ -286,1 +283,1 @@\n-    public boolean testEq14_3(MyObject o, Object u) {\n+    public boolean testEq14_3(MyObjectNewAcmp o, Object u) {\n@@ -314,1 +311,1 @@\n-    public boolean testEq17_1(Object[] a, MyValue1 v) {\n+    public boolean testEq17_1(Object[] a, MyValue1NewAcmp v) {\n@@ -318,1 +315,1 @@\n-    public boolean testEq17_2(Object[] a, MyValue1 v) {\n+    public boolean testEq17_2(Object[] a, MyValue1NewAcmp v) {\n@@ -322,1 +319,1 @@\n-    public boolean testEq17_3(Object[] a, MyValue1 v) {\n+    public boolean testEq17_3(Object[] a, MyValue1NewAcmp v) {\n@@ -326,1 +323,1 @@\n-    public boolean testEq18_1(MyValue1 v, Object[] a) {\n+    public boolean testEq18_1(MyValue1NewAcmp v, Object[] a) {\n@@ -330,1 +327,1 @@\n-    public boolean testEq18_2(MyValue1 v, Object[] a) {\n+    public boolean testEq18_2(MyValue1NewAcmp v, Object[] a) {\n@@ -334,1 +331,1 @@\n-    public boolean testEq18_3(MyValue1 v, Object[] a) {\n+    public boolean testEq18_3(MyValue1NewAcmp v, Object[] a) {\n@@ -338,1 +335,1 @@\n-    public boolean testEq19_1(Object[] a, MyValue1 v) {\n+    public boolean testEq19_1(Object[] a, MyValue1NewAcmp v) {\n@@ -342,1 +339,1 @@\n-    public boolean testEq19_2(Object[] a, MyValue1 v) {\n+    public boolean testEq19_2(Object[] a, MyValue1NewAcmp v) {\n@@ -346,1 +343,1 @@\n-    public boolean testEq19_3(Object[] a, MyValue1 v) {\n+    public boolean testEq19_3(Object[] a, MyValue1NewAcmp v) {\n@@ -350,1 +347,1 @@\n-    public boolean testEq20_1(MyValue1 v, Object[] a) {\n+    public boolean testEq20_1(MyValue1NewAcmp v, Object[] a) {\n@@ -354,1 +351,1 @@\n-    public boolean testEq20_2(MyValue1 v, Object[] a) {\n+    public boolean testEq20_2(MyValue1NewAcmp v, Object[] a) {\n@@ -358,1 +355,1 @@\n-    public boolean testEq20_3(MyValue1 v, Object[] a) {\n+    public boolean testEq20_3(MyValue1NewAcmp v, Object[] a) {\n@@ -362,1 +359,1 @@\n-    public boolean testEq21_1(MyInterface u1, MyInterface u2) {\n+    public boolean testEq21_1(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -366,1 +363,1 @@\n-    public boolean testEq21_2(MyInterface u1, MyInterface u2) {\n+    public boolean testEq21_2(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -370,1 +367,1 @@\n-    public boolean testEq21_3(MyInterface u1, MyInterface u2) {\n+    public boolean testEq21_3(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -375,1 +372,1 @@\n-    public boolean testEq21_4(MyInterface u1, MyInterface u2) {\n+    public boolean testEq21_4(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -380,1 +377,1 @@\n-    public boolean testEq21_5(MyInterface u1, MyInterface u2) {\n+    public boolean testEq21_5(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -385,1 +382,1 @@\n-    public boolean testEq21_6(MyInterface u1, MyInterface u2) {\n+    public boolean testEq21_6(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -389,1 +386,1 @@\n-    public boolean testEq21_7(MyAbstract u1, MyAbstract u2) {\n+    public boolean testEq21_7(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -393,1 +390,1 @@\n-    public boolean testEq21_8(MyAbstract u1, MyAbstract u2) {\n+    public boolean testEq21_8(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -397,1 +394,1 @@\n-    public boolean testEq21_9(MyAbstract u1, MyAbstract u2) {\n+    public boolean testEq21_9(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -402,1 +399,1 @@\n-    public boolean testEq21_10(MyAbstract u1, MyAbstract u2) {\n+    public boolean testEq21_10(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -407,1 +404,1 @@\n-    public boolean testEq21_11(MyAbstract u1, MyAbstract u2) {\n+    public boolean testEq21_11(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -412,1 +409,1 @@\n-    public boolean testEq21_12(MyAbstract u1, MyAbstract u2) {\n+    public boolean testEq21_12(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -416,1 +413,1 @@\n-    public boolean testEq22_1(MyValue1 v, MyInterface u) {\n+    public boolean testEq22_1(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -420,1 +417,1 @@\n-    public boolean testEq22_2(MyValue1 v, MyInterface u) {\n+    public boolean testEq22_2(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -424,1 +421,1 @@\n-    public boolean testEq22_3(MyValue1 v, MyInterface u) {\n+    public boolean testEq22_3(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -428,1 +425,1 @@\n-    public boolean testEq22_4(MyValue1 v, MyAbstract u) {\n+    public boolean testEq22_4(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -432,1 +429,1 @@\n-    public boolean testEq22_5(MyValue1 v, MyAbstract u) {\n+    public boolean testEq22_5(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -436,1 +433,1 @@\n-    public boolean testEq22_6(MyValue1 v, MyAbstract u) {\n+    public boolean testEq22_6(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -440,1 +437,1 @@\n-    public boolean testEq23_1(MyInterface u, MyValue1 v) {\n+    public boolean testEq23_1(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -444,1 +441,1 @@\n-    public boolean testEq23_2(MyInterface u, MyValue1 v) {\n+    public boolean testEq23_2(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -448,1 +445,1 @@\n-    public boolean testEq23_3(MyInterface u, MyValue1 v) {\n+    public boolean testEq23_3(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -452,1 +449,1 @@\n-    public boolean testEq23_4(MyAbstract u, MyValue1 v) {\n+    public boolean testEq23_4(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -456,1 +453,1 @@\n-    public boolean testEq23_5(MyAbstract u, MyValue1 v) {\n+    public boolean testEq23_5(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -460,1 +457,1 @@\n-    public boolean testEq23_6(MyAbstract u, MyValue1 v) {\n+    public boolean testEq23_6(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -464,1 +461,1 @@\n-    public boolean testEq24_1(MyValue1 v, MyInterface u) {\n+    public boolean testEq24_1(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -468,1 +465,1 @@\n-    public boolean testEq24_2(MyValue1 v, MyInterface u) {\n+    public boolean testEq24_2(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -472,1 +469,1 @@\n-    public boolean testEq24_3(MyValue1 v, MyInterface u) {\n+    public boolean testEq24_3(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -476,1 +473,1 @@\n-    public boolean testEq24_4(MyValue1 v, MyAbstract u) {\n+    public boolean testEq24_4(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -480,1 +477,1 @@\n-    public boolean testEq24_5(MyValue1 v, MyAbstract u) {\n+    public boolean testEq24_5(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -484,1 +481,1 @@\n-    public boolean testEq24_6(MyValue1 v, MyAbstract u) {\n+    public boolean testEq24_6(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -488,1 +485,1 @@\n-    public boolean testEq25_1(MyInterface u, MyValue1 v) {\n+    public boolean testEq25_1(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -492,1 +489,1 @@\n-    public boolean testEq25_2(MyInterface u, MyValue1 v) {\n+    public boolean testEq25_2(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -496,1 +493,1 @@\n-    public boolean testEq25_3(MyInterface u, MyValue1 v) {\n+    public boolean testEq25_3(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -500,1 +497,1 @@\n-    public boolean testEq25_4(MyAbstract u, MyValue1 v) {\n+    public boolean testEq25_4(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -504,1 +501,1 @@\n-    public boolean testEq25_5(MyAbstract u, MyValue1 v) {\n+    public boolean testEq25_5(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -508,1 +505,1 @@\n-    public boolean testEq25_6(MyAbstract u, MyValue1 v) {\n+    public boolean testEq25_6(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -512,1 +509,1 @@\n-    public boolean testEq26_1(MyInterface u, MyObject o) {\n+    public boolean testEq26_1(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -516,1 +513,1 @@\n-    public boolean testEq26_2(MyInterface u, MyObject o) {\n+    public boolean testEq26_2(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -520,1 +517,1 @@\n-    public boolean testEq26_3(MyInterface u, MyObject o) {\n+    public boolean testEq26_3(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -524,1 +521,1 @@\n-    public boolean testEq26_4(MyAbstract u, MyObject o) {\n+    public boolean testEq26_4(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -528,1 +525,1 @@\n-    public boolean testEq26_5(MyAbstract u, MyObject o) {\n+    public boolean testEq26_5(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -532,1 +529,1 @@\n-    public boolean testEq26_6(MyAbstract u, MyObject o) {\n+    public boolean testEq26_6(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -536,1 +533,1 @@\n-    public boolean testEq27_1(MyObject o, MyInterface u) {\n+    public boolean testEq27_1(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -540,1 +537,1 @@\n-    public boolean testEq27_2(MyObject o, MyInterface u) {\n+    public boolean testEq27_2(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -544,1 +541,1 @@\n-    public boolean testEq27_3(MyObject o, MyInterface u) {\n+    public boolean testEq27_3(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -548,1 +545,1 @@\n-    public boolean testEq27_4(MyObject o, MyAbstract u) {\n+    public boolean testEq27_4(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -552,1 +549,1 @@\n-    public boolean testEq27_5(MyObject o, MyAbstract u) {\n+    public boolean testEq27_5(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -556,1 +553,1 @@\n-    public boolean testEq27_6(MyObject o, MyAbstract u) {\n+    public boolean testEq27_6(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -560,1 +557,1 @@\n-    public boolean testEq28_1(MyInterface[] a, MyInterface u) {\n+    public boolean testEq28_1(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -564,1 +561,1 @@\n-    public boolean testEq28_2(MyInterface[] a, MyInterface u) {\n+    public boolean testEq28_2(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -568,1 +565,1 @@\n-    public boolean testEq28_3(MyInterface[] a, MyInterface u) {\n+    public boolean testEq28_3(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -572,1 +569,1 @@\n-    public boolean testEq28_4(MyAbstract[] a, MyAbstract u) {\n+    public boolean testEq28_4(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -576,1 +573,1 @@\n-    public boolean testEq28_5(MyAbstract[] a, MyAbstract u) {\n+    public boolean testEq28_5(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -580,1 +577,1 @@\n-    public boolean testEq28_6(MyAbstract[] a, MyAbstract u) {\n+    public boolean testEq28_6(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -584,1 +581,1 @@\n-    public boolean testEq29_1(MyInterface u, MyInterface[] a) {\n+    public boolean testEq29_1(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -588,1 +585,1 @@\n-    public boolean testEq29_2(MyInterface u, MyInterface[] a) {\n+    public boolean testEq29_2(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -592,1 +589,1 @@\n-    public boolean testEq29_3(MyInterface u, MyInterface[] a) {\n+    public boolean testEq29_3(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -596,1 +593,1 @@\n-    public boolean testEq29_4(MyAbstract u, MyAbstract[] a) {\n+    public boolean testEq29_4(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -600,1 +597,1 @@\n-    public boolean testEq29_5(MyAbstract u, MyAbstract[] a) {\n+    public boolean testEq29_5(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -604,1 +601,1 @@\n-    public boolean testEq29_6(MyAbstract u, MyAbstract[] a) {\n+    public boolean testEq29_6(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -608,1 +605,1 @@\n-    public boolean testEq30_1(MyInterface[] a, MyValue1 v) {\n+    public boolean testEq30_1(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -612,1 +609,1 @@\n-    public boolean testEq30_2(MyInterface[] a, MyValue1 v) {\n+    public boolean testEq30_2(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -616,1 +613,1 @@\n-    public boolean testEq30_3(MyInterface[] a, MyValue1 v) {\n+    public boolean testEq30_3(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -620,1 +617,1 @@\n-    public boolean testEq30_4(MyAbstract[] a, MyValue1 v) {\n+    public boolean testEq30_4(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -624,1 +621,1 @@\n-    public boolean testEq30_5(MyAbstract[] a, MyValue1 v) {\n+    public boolean testEq30_5(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -628,1 +625,1 @@\n-    public boolean testEq30_6(MyAbstract[] a, MyValue1 v) {\n+    public boolean testEq30_6(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -632,1 +629,1 @@\n-    public boolean testEq31_1(MyValue1 v, MyInterface[] a) {\n+    public boolean testEq31_1(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -636,1 +633,1 @@\n-    public boolean testEq31_2(MyValue1 v, MyInterface[] a) {\n+    public boolean testEq31_2(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -640,1 +637,1 @@\n-    public boolean testEq31_3(MyValue1 v, MyInterface[] a) {\n+    public boolean testEq31_3(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -644,1 +641,1 @@\n-    public boolean testEq31_4(MyValue1 v, MyAbstract[] a) {\n+    public boolean testEq31_4(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -648,1 +645,1 @@\n-    public boolean testEq31_5(MyValue1 v, MyAbstract[] a) {\n+    public boolean testEq31_5(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -652,1 +649,1 @@\n-    public boolean testEq31_6(MyValue1 v, MyAbstract[] a) {\n+    public boolean testEq31_6(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -656,1 +653,1 @@\n-    public boolean testEq32_1(MyInterface[] a, MyValue1 v) {\n+    public boolean testEq32_1(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -660,1 +657,1 @@\n-    public boolean testEq32_2(MyInterface[] a, MyValue1 v) {\n+    public boolean testEq32_2(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -664,1 +661,1 @@\n-    public boolean testEq32_3(MyInterface[] a, MyValue1 v) {\n+    public boolean testEq32_3(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -668,1 +665,1 @@\n-    public boolean testEq32_4(MyAbstract[] a, MyValue1 v) {\n+    public boolean testEq32_4(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -672,1 +669,1 @@\n-    public boolean testEq32_5(MyAbstract[] a, MyValue1 v) {\n+    public boolean testEq32_5(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -676,1 +673,1 @@\n-    public boolean testEq32_6(MyAbstract[] a, MyValue1 v) {\n+    public boolean testEq32_6(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -680,1 +677,1 @@\n-    public boolean testEq33_1(MyValue1 v, MyInterface[] a) {\n+    public boolean testEq33_1(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -684,1 +681,1 @@\n-    public boolean testEq33_2(MyValue1 v, MyInterface[] a) {\n+    public boolean testEq33_2(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -688,1 +685,1 @@\n-    public boolean testEq33_3(MyValue1 v, MyInterface[] a) {\n+    public boolean testEq33_3(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -692,1 +689,1 @@\n-    public boolean testEq33_4(MyValue1 v, MyAbstract[] a) {\n+    public boolean testEq33_4(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -696,1 +693,1 @@\n-    public boolean testEq33_5(MyValue1 v, MyAbstract[] a) {\n+    public boolean testEq33_5(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -700,1 +697,1 @@\n-    public boolean testEq33_6(MyValue1 v, MyAbstract[] a) {\n+    public boolean testEq33_6(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -707,1 +704,1 @@\n-    public boolean testNull01_1(MyValue1 v) {\n+    public boolean testNull01_1(MyValue1NewAcmp v) {\n@@ -711,1 +708,1 @@\n-    public boolean testNull01_2(MyValue1 v) {\n+    public boolean testNull01_2(MyValue1NewAcmp v) {\n@@ -715,1 +712,1 @@\n-    public boolean testNull01_3(MyValue1 v) {\n+    public boolean testNull01_3(MyValue1NewAcmp v) {\n@@ -719,1 +716,1 @@\n-    public boolean testNull01_4(MyValue1 v) {\n+    public boolean testNull01_4(MyValue1NewAcmp v) {\n@@ -723,1 +720,1 @@\n-    public boolean testNull02_1(MyValue1 v) {\n+    public boolean testNull02_1(MyValue1NewAcmp v) {\n@@ -727,1 +724,1 @@\n-    public boolean testNull02_2(MyValue1 v) {\n+    public boolean testNull02_2(MyValue1NewAcmp v) {\n@@ -731,1 +728,1 @@\n-    public boolean testNull02_3(MyValue1 v) {\n+    public boolean testNull02_3(MyValue1NewAcmp v) {\n@@ -735,1 +732,1 @@\n-    public boolean testNull02_4(MyValue1 v) {\n+    public boolean testNull02_4(MyValue1NewAcmp v) {\n@@ -771,1 +768,1 @@\n-    public boolean testNull05_1(MyObject o) {\n+    public boolean testNull05_1(MyObjectNewAcmp o) {\n@@ -775,1 +772,1 @@\n-    public boolean testNull05_2(MyObject o) {\n+    public boolean testNull05_2(MyObjectNewAcmp o) {\n@@ -779,1 +776,1 @@\n-    public boolean testNull05_3(MyObject o) {\n+    public boolean testNull05_3(MyObjectNewAcmp o) {\n@@ -783,1 +780,1 @@\n-    public boolean testNull05_4(MyObject o) {\n+    public boolean testNull05_4(MyObjectNewAcmp o) {\n@@ -787,1 +784,1 @@\n-    public boolean testNull06_1(MyObject o) {\n+    public boolean testNull06_1(MyObjectNewAcmp o) {\n@@ -791,1 +788,1 @@\n-    public boolean testNull06_2(MyObject o) {\n+    public boolean testNull06_2(MyObjectNewAcmp o) {\n@@ -795,1 +792,1 @@\n-    public boolean testNull06_3(MyObject o) {\n+    public boolean testNull06_3(MyObjectNewAcmp o) {\n@@ -799,1 +796,1 @@\n-    public boolean testNull06_4(MyObject o) {\n+    public boolean testNull06_4(MyObjectNewAcmp o) {\n@@ -803,1 +800,1 @@\n-    public boolean testNull07_1(MyInterface u) {\n+    public boolean testNull07_1(MyInterfaceNewAcmp u) {\n@@ -807,1 +804,1 @@\n-    public boolean testNull07_2(MyInterface u) {\n+    public boolean testNull07_2(MyInterfaceNewAcmp u) {\n@@ -811,1 +808,1 @@\n-    public boolean testNull07_3(MyInterface u) {\n+    public boolean testNull07_3(MyInterfaceNewAcmp u) {\n@@ -815,1 +812,1 @@\n-    public boolean testNull07_4(MyInterface u) {\n+    public boolean testNull07_4(MyInterfaceNewAcmp u) {\n@@ -819,1 +816,1 @@\n-    public boolean testNull07_5(MyAbstract u) {\n+    public boolean testNull07_5(MyAbstractNewAcmp u) {\n@@ -823,1 +820,1 @@\n-    public boolean testNull07_6(MyAbstract u) {\n+    public boolean testNull07_6(MyAbstractNewAcmp u) {\n@@ -827,1 +824,1 @@\n-    public boolean testNull07_7(MyAbstract u) {\n+    public boolean testNull07_7(MyAbstractNewAcmp u) {\n@@ -831,1 +828,1 @@\n-    public boolean testNull07_8(MyAbstract u) {\n+    public boolean testNull07_8(MyAbstractNewAcmp u) {\n@@ -835,1 +832,1 @@\n-    public boolean testNull08_1(MyInterface u) {\n+    public boolean testNull08_1(MyInterfaceNewAcmp u) {\n@@ -839,1 +836,1 @@\n-    public boolean testNull08_2(MyInterface u) {\n+    public boolean testNull08_2(MyInterfaceNewAcmp u) {\n@@ -843,1 +840,1 @@\n-    public boolean testNull08_3(MyInterface u) {\n+    public boolean testNull08_3(MyInterfaceNewAcmp u) {\n@@ -847,1 +844,1 @@\n-    public boolean testNull08_4(MyInterface u) {\n+    public boolean testNull08_4(MyInterfaceNewAcmp u) {\n@@ -851,1 +848,1 @@\n-    public boolean testNull08_5(MyAbstract u) {\n+    public boolean testNull08_5(MyAbstractNewAcmp u) {\n@@ -855,1 +852,1 @@\n-    public boolean testNull08_6(MyAbstract u) {\n+    public boolean testNull08_6(MyAbstractNewAcmp u) {\n@@ -859,1 +856,1 @@\n-    public boolean testNull08_7(MyAbstract u) {\n+    public boolean testNull08_7(MyAbstractNewAcmp u) {\n@@ -863,1 +860,1 @@\n-    public boolean testNull08_8(MyAbstract u) {\n+    public boolean testNull08_8(MyAbstractNewAcmp u) {\n@@ -896,1 +893,1 @@\n-    public boolean testNotEq02_1(MyValue1 v1, MyValue1 v2) {\n+    public boolean testNotEq02_1(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -900,1 +897,1 @@\n-    public boolean testNotEq02_2(MyValue1 v1, MyValue1 v2) {\n+    public boolean testNotEq02_2(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -904,1 +901,1 @@\n-    public boolean testNotEq02_3(MyValue1 v1, MyValue1 v2) {\n+    public boolean testNotEq02_3(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -908,1 +905,1 @@\n-    public boolean testNotEq03_1(MyValue1 v, Object u) {\n+    public boolean testNotEq03_1(MyValue1NewAcmp v, Object u) {\n@@ -912,1 +909,1 @@\n-    public boolean testNotEq03_2(MyValue1 v, Object u) {\n+    public boolean testNotEq03_2(MyValue1NewAcmp v, Object u) {\n@@ -916,1 +913,1 @@\n-    public boolean testNotEq03_3(MyValue1 v, Object u) {\n+    public boolean testNotEq03_3(MyValue1NewAcmp v, Object u) {\n@@ -920,1 +917,1 @@\n-    public boolean testNotEq04_1(Object u, MyValue1 v) {\n+    public boolean testNotEq04_1(Object u, MyValue1NewAcmp v) {\n@@ -924,1 +921,1 @@\n-    public boolean testNotEq04_2(Object u, MyValue1 v) {\n+    public boolean testNotEq04_2(Object u, MyValue1NewAcmp v) {\n@@ -928,1 +925,1 @@\n-    public boolean testNotEq04_3(Object u, MyValue1 v) {\n+    public boolean testNotEq04_3(Object u, MyValue1NewAcmp v) {\n@@ -932,1 +929,1 @@\n-    public boolean testNotEq05_1(MyObject o, MyValue1 v) {\n+    public boolean testNotEq05_1(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -936,1 +933,1 @@\n-    public boolean testNotEq05_2(MyObject o, MyValue1 v) {\n+    public boolean testNotEq05_2(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -940,1 +937,1 @@\n-    public boolean testNotEq05_3(MyObject o, MyValue1 v) {\n+    public boolean testNotEq05_3(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -944,1 +941,1 @@\n-    public boolean testNotEq06_1(MyValue1 v, MyObject o) {\n+    public boolean testNotEq06_1(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -948,1 +945,1 @@\n-    public boolean testNotEq06_2(MyValue1 v, MyObject o) {\n+    public boolean testNotEq06_2(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -952,1 +949,1 @@\n-    public boolean testNotEq06_3(MyValue1 v, MyObject o) {\n+    public boolean testNotEq06_3(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -956,1 +953,1 @@\n-    public boolean testNotEq07_1(MyValue1 v1, MyValue1 v2) {\n+    public boolean testNotEq07_1(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -960,1 +957,1 @@\n-    public boolean testNotEq07_2(MyValue1 v1, MyValue1 v2) {\n+    public boolean testNotEq07_2(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -964,1 +961,1 @@\n-    public boolean testNotEq07_3(MyValue1 v1, MyValue1 v2) {\n+    public boolean testNotEq07_3(MyValue1NewAcmp v1, MyValue1NewAcmp v2) {\n@@ -968,1 +965,1 @@\n-    public boolean testNotEq08_1(MyValue1 v, Object u) {\n+    public boolean testNotEq08_1(MyValue1NewAcmp v, Object u) {\n@@ -972,1 +969,1 @@\n-    public boolean testNotEq08_2(MyValue1 v, Object u) {\n+    public boolean testNotEq08_2(MyValue1NewAcmp v, Object u) {\n@@ -976,1 +973,1 @@\n-    public boolean testNotEq08_3(MyValue1 v, Object u) {\n+    public boolean testNotEq08_3(MyValue1NewAcmp v, Object u) {\n@@ -980,1 +977,1 @@\n-    public boolean testNotEq09_1(Object u, MyValue1 v) {\n+    public boolean testNotEq09_1(Object u, MyValue1NewAcmp v) {\n@@ -984,1 +981,1 @@\n-    public boolean testNotEq09_2(Object u, MyValue1 v) {\n+    public boolean testNotEq09_2(Object u, MyValue1NewAcmp v) {\n@@ -988,1 +985,1 @@\n-    public boolean testNotEq09_3(Object u, MyValue1 v) {\n+    public boolean testNotEq09_3(Object u, MyValue1NewAcmp v) {\n@@ -992,1 +989,1 @@\n-    public boolean testNotEq10_1(MyObject o, MyValue1 v) {\n+    public boolean testNotEq10_1(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -996,1 +993,1 @@\n-    public boolean testNotEq10_2(MyObject o, MyValue1 v) {\n+    public boolean testNotEq10_2(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -1000,1 +997,1 @@\n-    public boolean testNotEq10_3(MyObject o, MyValue1 v) {\n+    public boolean testNotEq10_3(MyObjectNewAcmp o, MyValue1NewAcmp v) {\n@@ -1004,1 +1001,1 @@\n-    public boolean testNotEq11_1(MyValue1 v, MyObject o) {\n+    public boolean testNotEq11_1(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -1008,1 +1005,1 @@\n-    public boolean testNotEq11_2(MyValue1 v, MyObject o) {\n+    public boolean testNotEq11_2(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -1012,1 +1009,1 @@\n-    public boolean testNotEq11_3(MyValue1 v, MyObject o) {\n+    public boolean testNotEq11_3(MyValue1NewAcmp v, MyObjectNewAcmp o) {\n@@ -1016,1 +1013,1 @@\n-    public boolean testNotEq12_1(MyObject o1, MyObject o2) {\n+    public boolean testNotEq12_1(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -1020,1 +1017,1 @@\n-    public boolean testNotEq12_2(MyObject o1, MyObject o2) {\n+    public boolean testNotEq12_2(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -1024,1 +1021,1 @@\n-    public boolean testNotEq12_3(MyObject o1, MyObject o2) {\n+    public boolean testNotEq12_3(MyObjectNewAcmp o1, MyObjectNewAcmp o2) {\n@@ -1028,1 +1025,1 @@\n-    public boolean testNotEq13_1(Object u, MyObject o) {\n+    public boolean testNotEq13_1(Object u, MyObjectNewAcmp o) {\n@@ -1032,1 +1029,1 @@\n-    public boolean testNotEq13_2(Object u, MyObject o) {\n+    public boolean testNotEq13_2(Object u, MyObjectNewAcmp o) {\n@@ -1036,1 +1033,1 @@\n-    public boolean testNotEq13_3(Object u, MyObject o) {\n+    public boolean testNotEq13_3(Object u, MyObjectNewAcmp o) {\n@@ -1040,1 +1037,1 @@\n-    public boolean testNotEq14_1(MyObject o, Object u) {\n+    public boolean testNotEq14_1(MyObjectNewAcmp o, Object u) {\n@@ -1044,1 +1041,1 @@\n-    public boolean testNotEq14_2(MyObject o, Object u) {\n+    public boolean testNotEq14_2(MyObjectNewAcmp o, Object u) {\n@@ -1048,1 +1045,1 @@\n-    public boolean testNotEq14_3(MyObject o, Object u) {\n+    public boolean testNotEq14_3(MyObjectNewAcmp o, Object u) {\n@@ -1076,1 +1073,1 @@\n-    public boolean testNotEq17_1(Object[] a, MyValue1 v) {\n+    public boolean testNotEq17_1(Object[] a, MyValue1NewAcmp v) {\n@@ -1080,1 +1077,1 @@\n-    public boolean testNotEq17_2(Object[] a, MyValue1 v) {\n+    public boolean testNotEq17_2(Object[] a, MyValue1NewAcmp v) {\n@@ -1084,1 +1081,1 @@\n-    public boolean testNotEq17_3(Object[] a, MyValue1 v) {\n+    public boolean testNotEq17_3(Object[] a, MyValue1NewAcmp v) {\n@@ -1088,1 +1085,1 @@\n-    public boolean testNotEq18_1(MyValue1 v, Object[] a) {\n+    public boolean testNotEq18_1(MyValue1NewAcmp v, Object[] a) {\n@@ -1092,1 +1089,1 @@\n-    public boolean testNotEq18_2(MyValue1 v, Object[] a) {\n+    public boolean testNotEq18_2(MyValue1NewAcmp v, Object[] a) {\n@@ -1096,1 +1093,1 @@\n-    public boolean testNotEq18_3(MyValue1 v, Object[] a) {\n+    public boolean testNotEq18_3(MyValue1NewAcmp v, Object[] a) {\n@@ -1100,1 +1097,1 @@\n-    public boolean testNotEq19_1(Object[] a, MyValue1 v) {\n+    public boolean testNotEq19_1(Object[] a, MyValue1NewAcmp v) {\n@@ -1104,1 +1101,1 @@\n-    public boolean testNotEq19_2(Object[] a, MyValue1 v) {\n+    public boolean testNotEq19_2(Object[] a, MyValue1NewAcmp v) {\n@@ -1108,1 +1105,1 @@\n-    public boolean testNotEq19_3(Object[] a, MyValue1 v) {\n+    public boolean testNotEq19_3(Object[] a, MyValue1NewAcmp v) {\n@@ -1112,1 +1109,1 @@\n-    public boolean testNotEq20_1(MyValue1 v, Object[] a) {\n+    public boolean testNotEq20_1(MyValue1NewAcmp v, Object[] a) {\n@@ -1116,1 +1113,1 @@\n-    public boolean testNotEq20_2(MyValue1 v, Object[] a) {\n+    public boolean testNotEq20_2(MyValue1NewAcmp v, Object[] a) {\n@@ -1120,1 +1117,1 @@\n-    public boolean testNotEq20_3(MyValue1 v, Object[] a) {\n+    public boolean testNotEq20_3(MyValue1NewAcmp v, Object[] a) {\n@@ -1124,1 +1121,1 @@\n-    public boolean testNotEq21_1(MyInterface u1, MyInterface u2) {\n+    public boolean testNotEq21_1(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1128,1 +1125,1 @@\n-    public boolean testNotEq21_2(MyInterface u1, MyInterface u2) {\n+    public boolean testNotEq21_2(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1132,1 +1129,1 @@\n-    public boolean testNotEq21_3(MyInterface u1, MyInterface u2) {\n+    public boolean testNotEq21_3(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1137,1 +1134,1 @@\n-    public boolean testNotEq21_4(MyInterface u1, MyInterface u2) {\n+    public boolean testNotEq21_4(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1142,1 +1139,1 @@\n-    public boolean testNotEq21_5(MyInterface u1, MyInterface u2) {\n+    public boolean testNotEq21_5(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1147,1 +1144,1 @@\n-    public boolean testNotEq21_6(MyInterface u1, MyInterface u2) {\n+    public boolean testNotEq21_6(MyInterfaceNewAcmp u1, MyInterfaceNewAcmp u2) {\n@@ -1151,1 +1148,1 @@\n-    public boolean testNotEq21_7(MyAbstract u1, MyAbstract u2) {\n+    public boolean testNotEq21_7(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1155,1 +1152,1 @@\n-    public boolean testNotEq21_8(MyAbstract u1, MyAbstract u2) {\n+    public boolean testNotEq21_8(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1159,1 +1156,1 @@\n-    public boolean testNotEq21_9(MyAbstract u1, MyAbstract u2) {\n+    public boolean testNotEq21_9(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1164,1 +1161,1 @@\n-    public boolean testNotEq21_10(MyAbstract u1, MyAbstract u2) {\n+    public boolean testNotEq21_10(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1169,1 +1166,1 @@\n-    public boolean testNotEq21_11(MyAbstract u1, MyAbstract u2) {\n+    public boolean testNotEq21_11(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1174,1 +1171,1 @@\n-    public boolean testNotEq21_12(MyAbstract u1, MyAbstract u2) {\n+    public boolean testNotEq21_12(MyAbstractNewAcmp u1, MyAbstractNewAcmp u2) {\n@@ -1178,1 +1175,1 @@\n-    public boolean testNotEq22_1(MyValue1 v, MyInterface u) {\n+    public boolean testNotEq22_1(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1182,1 +1179,1 @@\n-    public boolean testNotEq22_2(MyValue1 v, MyInterface u) {\n+    public boolean testNotEq22_2(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1186,1 +1183,1 @@\n-    public boolean testNotEq22_3(MyValue1 v, MyInterface u) {\n+    public boolean testNotEq22_3(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1190,1 +1187,1 @@\n-    public boolean testNotEq22_4(MyValue1 v, MyAbstract u) {\n+    public boolean testNotEq22_4(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1194,1 +1191,1 @@\n-    public boolean testNotEq22_5(MyValue1 v, MyAbstract u) {\n+    public boolean testNotEq22_5(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1198,1 +1195,1 @@\n-    public boolean testNotEq22_6(MyValue1 v, MyAbstract u) {\n+    public boolean testNotEq22_6(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1202,1 +1199,1 @@\n-    public boolean testNotEq23_1(MyInterface u, MyValue1 v) {\n+    public boolean testNotEq23_1(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1206,1 +1203,1 @@\n-    public boolean testNotEq23_2(MyInterface u, MyValue1 v) {\n+    public boolean testNotEq23_2(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1210,1 +1207,1 @@\n-    public boolean testNotEq23_3(MyInterface u, MyValue1 v) {\n+    public boolean testNotEq23_3(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1214,1 +1211,1 @@\n-    public boolean testNotEq23_4(MyAbstract u, MyValue1 v) {\n+    public boolean testNotEq23_4(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1218,1 +1215,1 @@\n-    public boolean testNotEq23_5(MyAbstract u, MyValue1 v) {\n+    public boolean testNotEq23_5(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1222,1 +1219,1 @@\n-    public boolean testNotEq23_6(MyAbstract u, MyValue1 v) {\n+    public boolean testNotEq23_6(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1226,1 +1223,1 @@\n-    public boolean testNotEq24_1(MyValue1 v, MyInterface u) {\n+    public boolean testNotEq24_1(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1230,1 +1227,1 @@\n-    public boolean testNotEq24_2(MyValue1 v, MyInterface u) {\n+    public boolean testNotEq24_2(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1234,1 +1231,1 @@\n-    public boolean testNotEq24_3(MyValue1 v, MyInterface u) {\n+    public boolean testNotEq24_3(MyValue1NewAcmp v, MyInterfaceNewAcmp u) {\n@@ -1238,1 +1235,1 @@\n-    public boolean testNotEq24_4(MyValue1 v, MyAbstract u) {\n+    public boolean testNotEq24_4(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1242,1 +1239,1 @@\n-    public boolean testNotEq24_5(MyValue1 v, MyAbstract u) {\n+    public boolean testNotEq24_5(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1246,1 +1243,1 @@\n-    public boolean testNotEq24_6(MyValue1 v, MyAbstract u) {\n+    public boolean testNotEq24_6(MyValue1NewAcmp v, MyAbstractNewAcmp u) {\n@@ -1250,1 +1247,1 @@\n-    public boolean testNotEq25_1(MyInterface u, MyValue1 v) {\n+    public boolean testNotEq25_1(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1254,1 +1251,1 @@\n-    public boolean testNotEq25_2(MyInterface u, MyValue1 v) {\n+    public boolean testNotEq25_2(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1258,1 +1255,1 @@\n-    public boolean testNotEq25_3(MyInterface u, MyValue1 v) {\n+    public boolean testNotEq25_3(MyInterfaceNewAcmp u, MyValue1NewAcmp v) {\n@@ -1262,1 +1259,1 @@\n-    public boolean testNotEq25_4(MyAbstract u, MyValue1 v) {\n+    public boolean testNotEq25_4(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1266,1 +1263,1 @@\n-    public boolean testNotEq25_5(MyAbstract u, MyValue1 v) {\n+    public boolean testNotEq25_5(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1270,1 +1267,1 @@\n-    public boolean testNotEq25_6(MyAbstract u, MyValue1 v) {\n+    public boolean testNotEq25_6(MyAbstractNewAcmp u, MyValue1NewAcmp v) {\n@@ -1274,1 +1271,1 @@\n-    public boolean testNotEq26_1(MyInterface u, MyObject o) {\n+    public boolean testNotEq26_1(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -1278,1 +1275,1 @@\n-    public boolean testNotEq26_2(MyInterface u, MyObject o) {\n+    public boolean testNotEq26_2(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -1282,1 +1279,1 @@\n-    public boolean testNotEq26_3(MyInterface u, MyObject o) {\n+    public boolean testNotEq26_3(MyInterfaceNewAcmp u, MyObjectNewAcmp o) {\n@@ -1286,1 +1283,1 @@\n-    public boolean testNotEq26_4(MyAbstract u, MyObject o) {\n+    public boolean testNotEq26_4(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -1290,1 +1287,1 @@\n-    public boolean testNotEq26_5(MyAbstract u, MyObject o) {\n+    public boolean testNotEq26_5(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -1294,1 +1291,1 @@\n-    public boolean testNotEq26_6(MyAbstract u, MyObject o) {\n+    public boolean testNotEq26_6(MyAbstractNewAcmp u, MyObjectNewAcmp o) {\n@@ -1298,1 +1295,1 @@\n-    public boolean testNotEq27_1(MyObject o, MyInterface u) {\n+    public boolean testNotEq27_1(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -1302,1 +1299,1 @@\n-    public boolean testNotEq27_2(MyObject o, MyInterface u) {\n+    public boolean testNotEq27_2(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -1306,1 +1303,1 @@\n-    public boolean testNotEq27_3(MyObject o, MyInterface u) {\n+    public boolean testNotEq27_3(MyObjectNewAcmp o, MyInterfaceNewAcmp u) {\n@@ -1310,1 +1307,1 @@\n-    public boolean testNotEq27_4(MyObject o, MyAbstract u) {\n+    public boolean testNotEq27_4(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -1314,1 +1311,1 @@\n-    public boolean testNotEq27_5(MyObject o, MyAbstract u) {\n+    public boolean testNotEq27_5(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -1318,1 +1315,1 @@\n-    public boolean testNotEq27_6(MyObject o, MyAbstract u) {\n+    public boolean testNotEq27_6(MyObjectNewAcmp o, MyAbstractNewAcmp u) {\n@@ -1322,1 +1319,1 @@\n-    public boolean testNotEq28_1(MyInterface[] a, MyInterface u) {\n+    public boolean testNotEq28_1(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -1326,1 +1323,1 @@\n-    public boolean testNotEq28_2(MyInterface[] a, MyInterface u) {\n+    public boolean testNotEq28_2(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -1330,1 +1327,1 @@\n-    public boolean testNotEq28_3(MyInterface[] a, MyInterface u) {\n+    public boolean testNotEq28_3(MyInterfaceNewAcmp[] a, MyInterfaceNewAcmp u) {\n@@ -1334,1 +1331,1 @@\n-    public boolean testNotEq28_4(MyAbstract[] a, MyAbstract u) {\n+    public boolean testNotEq28_4(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -1338,1 +1335,1 @@\n-    public boolean testNotEq28_5(MyAbstract[] a, MyAbstract u) {\n+    public boolean testNotEq28_5(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -1342,1 +1339,1 @@\n-    public boolean testNotEq28_6(MyAbstract[] a, MyAbstract u) {\n+    public boolean testNotEq28_6(MyAbstractNewAcmp[] a, MyAbstractNewAcmp u) {\n@@ -1346,1 +1343,1 @@\n-    public boolean testNotEq29_1(MyInterface u, MyInterface[] a) {\n+    public boolean testNotEq29_1(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -1350,1 +1347,1 @@\n-    public boolean testNotEq29_2(MyInterface u, MyInterface[] a) {\n+    public boolean testNotEq29_2(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -1354,1 +1351,1 @@\n-    public boolean testNotEq29_3(MyInterface u, MyInterface[] a) {\n+    public boolean testNotEq29_3(MyInterfaceNewAcmp u, MyInterfaceNewAcmp[] a) {\n@@ -1358,1 +1355,1 @@\n-    public boolean testNotEq29_4(MyAbstract u, MyAbstract[] a) {\n+    public boolean testNotEq29_4(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -1362,1 +1359,1 @@\n-    public boolean testNotEq29_5(MyAbstract u, MyAbstract[] a) {\n+    public boolean testNotEq29_5(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -1366,1 +1363,1 @@\n-    public boolean testNotEq29_6(MyAbstract u, MyAbstract[] a) {\n+    public boolean testNotEq29_6(MyAbstractNewAcmp u, MyAbstractNewAcmp[] a) {\n@@ -1370,1 +1367,1 @@\n-    public boolean testNotEq30_1(MyInterface[] a, MyValue1 v) {\n+    public boolean testNotEq30_1(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1374,1 +1371,1 @@\n-    public boolean testNotEq30_2(MyInterface[] a, MyValue1 v) {\n+    public boolean testNotEq30_2(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1378,1 +1375,1 @@\n-    public boolean testNotEq30_3(MyInterface[] a, MyValue1 v) {\n+    public boolean testNotEq30_3(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1382,1 +1379,1 @@\n-    public boolean testNotEq30_4(MyAbstract[] a, MyValue1 v) {\n+    public boolean testNotEq30_4(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1386,1 +1383,1 @@\n-    public boolean testNotEq30_5(MyAbstract[] a, MyValue1 v) {\n+    public boolean testNotEq30_5(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1390,1 +1387,1 @@\n-    public boolean testNotEq30_6(MyAbstract[] a, MyValue1 v) {\n+    public boolean testNotEq30_6(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1394,1 +1391,1 @@\n-    public boolean testNotEq31_1(MyValue1 v, MyInterface[] a) {\n+    public boolean testNotEq31_1(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1398,1 +1395,1 @@\n-    public boolean testNotEq31_2(MyValue1 v, MyInterface[] a) {\n+    public boolean testNotEq31_2(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1402,1 +1399,1 @@\n-    public boolean testNotEq31_3(MyValue1 v, MyInterface[] a) {\n+    public boolean testNotEq31_3(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1406,1 +1403,1 @@\n-    public boolean testNotEq31_4(MyValue1 v, MyAbstract[] a) {\n+    public boolean testNotEq31_4(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1410,1 +1407,1 @@\n-    public boolean testNotEq31_5(MyValue1 v, MyAbstract[] a) {\n+    public boolean testNotEq31_5(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1414,1 +1411,1 @@\n-    public boolean testNotEq31_6(MyValue1 v, MyAbstract[] a) {\n+    public boolean testNotEq31_6(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1418,1 +1415,1 @@\n-    public boolean testNotEq32_1(MyInterface[] a, MyValue1 v) {\n+    public boolean testNotEq32_1(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1422,1 +1419,1 @@\n-    public boolean testNotEq32_2(MyInterface[] a, MyValue1 v) {\n+    public boolean testNotEq32_2(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1426,1 +1423,1 @@\n-    public boolean testNotEq32_3(MyInterface[] a, MyValue1 v) {\n+    public boolean testNotEq32_3(MyInterfaceNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1430,1 +1427,1 @@\n-    public boolean testNotEq32_4(MyAbstract[] a, MyValue1 v) {\n+    public boolean testNotEq32_4(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1434,1 +1431,1 @@\n-    public boolean testNotEq32_5(MyAbstract[] a, MyValue1 v) {\n+    public boolean testNotEq32_5(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1438,1 +1435,1 @@\n-    public boolean testNotEq32_6(MyAbstract[] a, MyValue1 v) {\n+    public boolean testNotEq32_6(MyAbstractNewAcmp[] a, MyValue1NewAcmp v) {\n@@ -1442,1 +1439,1 @@\n-    public boolean testNotEq33_1(MyValue1 v, MyInterface[] a) {\n+    public boolean testNotEq33_1(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1446,1 +1443,1 @@\n-    public boolean testNotEq33_2(MyValue1 v, MyInterface[] a) {\n+    public boolean testNotEq33_2(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1450,1 +1447,1 @@\n-    public boolean testNotEq33_3(MyValue1 v, MyInterface[] a) {\n+    public boolean testNotEq33_3(MyValue1NewAcmp v, MyInterfaceNewAcmp[] a) {\n@@ -1454,1 +1451,1 @@\n-    public boolean testNotEq33_4(MyValue1 v, MyAbstract[] a) {\n+    public boolean testNotEq33_4(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1458,1 +1455,1 @@\n-    public boolean testNotEq33_5(MyValue1 v, MyAbstract[] a) {\n+    public boolean testNotEq33_5(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1462,1 +1459,1 @@\n-    public boolean testNotEq33_6(MyValue1 v, MyAbstract[] a) {\n+    public boolean testNotEq33_6(MyValue1NewAcmp v, MyAbstractNewAcmp[] a) {\n@@ -1468,1 +1465,1 @@\n-    public boolean testNotNull01_1(MyValue1 v) {\n+    public boolean testNotNull01_1(MyValue1NewAcmp v) {\n@@ -1472,1 +1469,1 @@\n-    public boolean testNotNull01_2(MyValue1 v) {\n+    public boolean testNotNull01_2(MyValue1NewAcmp v) {\n@@ -1476,1 +1473,1 @@\n-    public boolean testNotNull01_3(MyValue1 v) {\n+    public boolean testNotNull01_3(MyValue1NewAcmp v) {\n@@ -1480,1 +1477,1 @@\n-    public boolean testNotNull01_4(MyValue1 v) {\n+    public boolean testNotNull01_4(MyValue1NewAcmp v) {\n@@ -1484,1 +1481,1 @@\n-    public boolean testNotNull02_1(MyValue1 v) {\n+    public boolean testNotNull02_1(MyValue1NewAcmp v) {\n@@ -1488,1 +1485,1 @@\n-    public boolean testNotNull02_2(MyValue1 v) {\n+    public boolean testNotNull02_2(MyValue1NewAcmp v) {\n@@ -1492,1 +1489,1 @@\n-    public boolean testNotNull02_3(MyValue1 v) {\n+    public boolean testNotNull02_3(MyValue1NewAcmp v) {\n@@ -1496,1 +1493,1 @@\n-    public boolean testNotNull02_4(MyValue1 v) {\n+    public boolean testNotNull02_4(MyValue1NewAcmp v) {\n@@ -1532,1 +1529,1 @@\n-    public boolean testNotNull05_1(MyObject o) {\n+    public boolean testNotNull05_1(MyObjectNewAcmp o) {\n@@ -1536,1 +1533,1 @@\n-    public boolean testNotNull05_2(MyObject o) {\n+    public boolean testNotNull05_2(MyObjectNewAcmp o) {\n@@ -1540,1 +1537,1 @@\n-    public boolean testNotNull05_3(MyObject o) {\n+    public boolean testNotNull05_3(MyObjectNewAcmp o) {\n@@ -1544,1 +1541,1 @@\n-    public boolean testNotNull05_4(MyObject o) {\n+    public boolean testNotNull05_4(MyObjectNewAcmp o) {\n@@ -1548,1 +1545,1 @@\n-    public boolean testNotNull06_1(MyObject o) {\n+    public boolean testNotNull06_1(MyObjectNewAcmp o) {\n@@ -1552,1 +1549,1 @@\n-    public boolean testNotNull06_2(MyObject o) {\n+    public boolean testNotNull06_2(MyObjectNewAcmp o) {\n@@ -1556,1 +1553,1 @@\n-    public boolean testNotNull06_3(MyObject o) {\n+    public boolean testNotNull06_3(MyObjectNewAcmp o) {\n@@ -1560,1 +1557,1 @@\n-    public boolean testNotNull06_4(MyObject o) {\n+    public boolean testNotNull06_4(MyObjectNewAcmp o) {\n@@ -1564,1 +1561,1 @@\n-    public boolean testNotNull07_1(MyInterface u) {\n+    public boolean testNotNull07_1(MyInterfaceNewAcmp u) {\n@@ -1568,1 +1565,1 @@\n-    public boolean testNotNull07_2(MyInterface u) {\n+    public boolean testNotNull07_2(MyInterfaceNewAcmp u) {\n@@ -1572,1 +1569,1 @@\n-    public boolean testNotNull07_3(MyInterface u) {\n+    public boolean testNotNull07_3(MyInterfaceNewAcmp u) {\n@@ -1576,1 +1573,1 @@\n-    public boolean testNotNull07_4(MyInterface u) {\n+    public boolean testNotNull07_4(MyInterfaceNewAcmp u) {\n@@ -1580,1 +1577,1 @@\n-    public boolean testNotNull07_5(MyAbstract u) {\n+    public boolean testNotNull07_5(MyAbstractNewAcmp u) {\n@@ -1584,1 +1581,1 @@\n-    public boolean testNotNull07_6(MyAbstract u) {\n+    public boolean testNotNull07_6(MyAbstractNewAcmp u) {\n@@ -1588,1 +1585,1 @@\n-    public boolean testNotNull07_7(MyAbstract u) {\n+    public boolean testNotNull07_7(MyAbstractNewAcmp u) {\n@@ -1592,1 +1589,1 @@\n-    public boolean testNotNull07_8(MyAbstract u) {\n+    public boolean testNotNull07_8(MyAbstractNewAcmp u) {\n@@ -1596,1 +1593,1 @@\n-    public boolean testNotNull08_1(MyInterface u) {\n+    public boolean testNotNull08_1(MyInterfaceNewAcmp u) {\n@@ -1600,1 +1597,1 @@\n-    public boolean testNotNull08_2(MyInterface u) {\n+    public boolean testNotNull08_2(MyInterfaceNewAcmp u) {\n@@ -1604,1 +1601,1 @@\n-    public boolean testNotNull08_3(MyInterface u) {\n+    public boolean testNotNull08_3(MyInterfaceNewAcmp u) {\n@@ -1608,1 +1605,1 @@\n-    public boolean testNotNull08_4(MyInterface u) {\n+    public boolean testNotNull08_4(MyInterfaceNewAcmp u) {\n@@ -1612,1 +1609,1 @@\n-    public boolean testNotNull08_5(MyAbstract u) {\n+    public boolean testNotNull08_5(MyAbstractNewAcmp u) {\n@@ -1616,1 +1613,1 @@\n-    public boolean testNotNull08_6(MyAbstract u) {\n+    public boolean testNotNull08_6(MyAbstractNewAcmp u) {\n@@ -1620,1 +1617,1 @@\n-    public boolean testNotNull08_7(MyAbstract u) {\n+    public boolean testNotNull08_7(MyAbstractNewAcmp u) {\n@@ -1624,1 +1621,1 @@\n-    public boolean testNotNull08_8(MyAbstract u) {\n+    public boolean testNotNull08_8(MyAbstractNewAcmp u) {\n@@ -1638,1 +1635,1 @@\n-    public Object get(MyValue1 v) {\n+    public Object get(MyValue1NewAcmp v) {\n@@ -1642,2 +1639,2 @@\n-    public Object getNotNull(MyValue1 v) {\n-        return ((Object)v != null) ? v : MyValue1.createDefault();\n+    public Object getNotNull(MyValue1NewAcmp v) {\n+        return ((Object)v != null) ? v : MyValue1NewAcmp.createDefault();\n@@ -1646,1 +1643,1 @@\n-    public Object get(MyObject o) {\n+    public Object get(MyObjectNewAcmp o) {\n@@ -1650,2 +1647,2 @@\n-    public Object getNotNull(MyObject o) {\n-        return (o != null) ? o : MyValue1.createDefault();\n+    public Object getNotNull(MyObjectNewAcmp o) {\n+        return (o != null) ? o : MyValue1NewAcmp.createDefault();\n@@ -1737,1 +1734,1 @@\n-            if (args[i] == null && parameterTypes[0] == MyValue1.class) {\n+            if (args[i] == null && parameterTypes[0] == MyValue1NewAcmp.class) {\n@@ -1759,1 +1756,1 @@\n-                    if (args[j] == null && parameterTypes[1] == MyValue1.class) {\n+                    if (args[j] == null && parameterTypes[1] == MyValue1NewAcmp.class) {\n@@ -1784,2 +1781,2 @@\n-                           new MyObject(),\n-                           MyValue1.setX(MyValue1.createDefault(), 42),\n+                           new MyObjectNewAcmp(),\n+                           MyValue1NewAcmp.setX(MyValue1NewAcmp.createDefault(), 42),\n@@ -1787,4 +1784,4 @@\n-                           new MyObject[10],\n-                           MyValue1.setX(MyValue1.createDefault(), 0x42),\n-                           MyValue1.setX(MyValue1.createDefault(), 42),\n-                           MyValue2.setX(MyValue2.createDefault(), 42), };\n+                           new MyObjectNewAcmp[10],\n+                           MyValue1NewAcmp.setX(MyValue1NewAcmp.createDefault(), 0x42),\n+                           MyValue1NewAcmp.setX(MyValue1NewAcmp.createDefault(), 42),\n+                           MyValue2NewAcmp.setX(MyValue2NewAcmp.createDefault(), 42), };\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":364,"deletions":367,"binary":false,"changes":731,"status":"modified"},{"patch":"@@ -2330,1 +2330,1 @@\n-    \/\/ Test that CastPP does not block sclarization in safepoints\n+    \/\/ Test that CastPP does not block scalarization in safepoints\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,3 +40,0 @@\n-import static compiler.lib.ir_framework.IRNode.LOAD_OF_CLASS;\n-import static compiler.lib.ir_framework.IRNode.STORE_OF_CLASS;\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention*::verify\n@@ -47,2 +47,2 @@\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                   -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                   -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention::callee\n+ *                   -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention*::verify\n@@ -61,2 +61,2 @@\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention*::verify\n@@ -76,2 +76,2 @@\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention*::verify\n@@ -90,2 +90,2 @@\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention*::verify\n@@ -104,2 +104,2 @@\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention*::verify\n@@ -119,2 +119,2 @@\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention*::verify\n@@ -134,2 +134,2 @@\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention*::verify\n@@ -149,2 +149,2 @@\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention::callee\n- *                               -XX:CompileCommand=dontinline,TestOopsInReturnConvention*::verify\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention::callee\n+ *                               -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestOopsInReturnConvention*::verify\n@@ -154,1 +154,0 @@\n-\n@@ -223,1 +222,1 @@\n-            Method m = TestOopsInReturnConvention.class.getDeclaredMethod(\"callee\", int.class, int.class, int.class, int.class, int.class, LargeValueWithOops.class);\n+            Method m = compiler.valhalla.inlinetypes.TestOopsInReturnConvention.class.getDeclaredMethod(\"callee\", int.class, int.class, int.class, int.class, int.class, LargeValueWithOops.class);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOopsInReturnConvention.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-value class MyValue {\n+value class MyValueOptKlassCmp {\n@@ -40,1 +40,1 @@\n-    public MyValue(int x) {\n+    public MyValueOptKlassCmp(int x) {\n@@ -47,1 +47,1 @@\n-    public static boolean test1(MyValue v1, MyValue v2) {\n+    public static boolean test1(MyValueOptKlassCmp v1, MyValueOptKlassCmp v2) {\n@@ -51,1 +51,1 @@\n-    public static boolean test2(MyValue v1, MyValue v2) {\n+    public static boolean test2(MyValueOptKlassCmp v1, MyValueOptKlassCmp v2) {\n@@ -60,2 +60,2 @@\n-        MyValue v1 = new MyValue(0);\n-        MyValue v2 = new MyValue(1);\n+        MyValueOptKlassCmp v1 = new MyValueOptKlassCmp(0);\n+        MyValueOptKlassCmp v2 = new MyValueOptKlassCmp(1);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOptimizeKlassCmp.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @run main\/othervm -XX:CompileCommand=dontinline,TestSafepointAtPollReturn::test* -XX:+UnlockDiagnosticVMOptions\n- *                   -XX:+SafepointALot -XX:-TieredCompilation -XX:+UseTLAB TestSafepointAtPollReturn\n+ * @run main\/othervm -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestSafepointAtPollReturn::test* -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+SafepointALot -XX:-TieredCompilation -XX:+UseTLAB compiler.valhalla.inlinetypes.TestSafepointAtPollReturn\n@@ -32,0 +32,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestSafepointAtPollReturn.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-value class MyValue {\n+value class MyValueStressRetBuf {\n@@ -45,1 +45,1 @@\n-    public MyValue(Integer o) {\n+    public MyValueStressRetBuf(Integer o) {\n@@ -58,2 +58,2 @@\n-    public static MyValue callee() {\n-        return new MyValue(integer);\n+    public static MyValueStressRetBuf callee() {\n+        return new MyValueStressRetBuf(integer);\n@@ -65,1 +65,1 @@\n-            MyValue vt = callee();\n+            MyValueStressRetBuf vt = callee();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestStressReturnBuffering.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-        \/\/ reader thread never observes an unitialized strict field.\n+        \/\/ reader thread never observes an uninitialized strict field.\n@@ -198,1 +198,1 @@\n-                \/\/ as fast a possible to increase the likelyhood of a race condition.\n+                \/\/ as fast a possible to increase the likelihood of a race condition.\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestStrictFieldBarriers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.reflect.Method;\n@@ -322,1 +321,1 @@\n-value class MyValue {\n+value class MyValueTearing {\n@@ -332,1 +331,1 @@\n-            Field xField = MyValue.class.getDeclaredField(\"x\");\n+            Field xField = MyValueTearing.class.getDeclaredField(\"x\");\n@@ -334,1 +333,1 @@\n-            Field yField = MyValue.class.getDeclaredField(\"y\");\n+            Field yField = MyValueTearing.class.getDeclaredField(\"y\");\n@@ -341,1 +340,1 @@\n-    static final MyValue DEFAULT = new MyValue((short)0, (short)0);\n+    static final MyValueTearing DEFAULT = new MyValueTearing((short)0, (short)0);\n@@ -343,1 +342,1 @@\n-    MyValue(short x, short y) {\n+    MyValueTearing(short x, short y) {\n@@ -348,1 +347,1 @@\n-    MyValue incrementAndCheck() {\n+    MyValueTearing incrementAndCheck() {\n@@ -350,1 +349,1 @@\n-        return new MyValue((short)(x + 1), (short)(y + 1));\n+        return new MyValueTearing((short)(x + 1), (short)(y + 1));\n@@ -353,1 +352,1 @@\n-    MyValue incrementAndCheckUnsafe() {\n+    MyValueTearing incrementAndCheckUnsafe() {\n@@ -355,1 +354,1 @@\n-        MyValue vt = U.makePrivateBuffer(this);\n+        MyValueTearing vt = U.makePrivateBuffer(this);\n@@ -366,1 +365,1 @@\n-    volatile static MyValue field1 = MyValue.DEFAULT;\n+    volatile static MyValueTearing field1 = MyValueTearing.DEFAULT;\n@@ -369,1 +368,1 @@\n-    volatile MyValue field2 = MyValue.DEFAULT;\n+    volatile MyValueTearing field2 = MyValueTearing.DEFAULT;\n@@ -372,2 +371,2 @@\n-    static MyValue field3 = new MyValue((short)0, (short)0);\n-    MyValue field4 = new MyValue((short)0, (short)0);\n+    static MyValueTearing field3 = new MyValueTearing((short)0, (short)0);\n+    MyValueTearing field4 = new MyValueTearing((short)0, (short)0);\n@@ -376,2 +375,2 @@\n-    static final MyValue[] array1 = (MyValue[])ValueClass.newNullRestrictedAtomicArray(MyValue.class, 1, MyValue.DEFAULT);\n-    static final MyValue[] array2 = (MyValue[])ValueClass.newNullableAtomicArray(MyValue.class, 1);\n+    static final MyValueTearing[] array1 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+    static final MyValueTearing[] array2 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n@@ -379,1 +378,1 @@\n-        array2[0] = new MyValue((short)0, (short)0);\n+        array2[0] = new MyValueTearing((short)0, (short)0);\n@@ -381,1 +380,1 @@\n-    static final MyValue[] array3 = new MyValue[] { new MyValue((short)0, (short)0) };\n+    static final MyValueTearing[] array3 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -384,2 +383,2 @@\n-    static MyValue[] array4 = (MyValue[])ValueClass.newNullRestrictedAtomicArray(MyValue.class, 1, MyValue.DEFAULT);\n-    static MyValue[] array5 = (MyValue[])ValueClass.newNullableAtomicArray(MyValue.class, 1);\n+    static MyValueTearing[] array4 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+    static MyValueTearing[] array5 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n@@ -387,1 +386,1 @@\n-        array5[0] = new MyValue((short)0, (short)0);\n+        array5[0] = new MyValueTearing((short)0, (short)0);\n@@ -389,1 +388,1 @@\n-    static MyValue[] array6 = new MyValue[] { new MyValue((short)0, (short)0) };\n+    static MyValueTearing[] array6 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -392,2 +391,2 @@\n-    static Object[] array7 = (MyValue[])ValueClass.newNullRestrictedAtomicArray(MyValue.class, 1, MyValue.DEFAULT);\n-    static Object[] array8 = (MyValue[])ValueClass.newNullableAtomicArray(MyValue.class, 1);\n+    static Object[] array7 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+    static Object[] array8 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n@@ -395,1 +394,1 @@\n-        array8[0] = new MyValue((short)0, (short)0);\n+        array8[0] = new MyValueTearing((short)0, (short)0);\n@@ -397,1 +396,1 @@\n-    static Object[] array9 = new MyValue[] { new MyValue((short)0, (short)0) };\n+    static Object[] array9 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -400,2 +399,2 @@\n-    static volatile Object[] array10 = (MyValue[])ValueClass.newNullRestrictedAtomicArray(MyValue.class, 1, MyValue.DEFAULT);\n-    static volatile Object[] array11 = (MyValue[])ValueClass.newNullableAtomicArray(MyValue.class, 1);\n+    static volatile Object[] array10 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+    static volatile Object[] array11 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n@@ -403,1 +402,1 @@\n-        array11[0] = new MyValue((short)0, (short)0);\n+        array11[0] = new MyValueTearing((short)0, (short)0);\n@@ -405,1 +404,1 @@\n-    static volatile Object[] array12 = new MyValue[] { new MyValue((short)0, (short)0) };\n+    static volatile Object[] array12 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -411,1 +410,1 @@\n-            Class<?> clazz = MyValue.class;\n+            Class<?> clazz = MyValueTearing.class;\n@@ -414,1 +413,1 @@\n-            MethodType mt = MethodType.methodType(MyValue.class);\n+            MethodType mt = MethodType.methodType(MyValueTearing.class);\n@@ -434,4 +433,4 @@\n-                MyValue[] localArray1 = (MyValue[])ValueClass.newNullRestrictedAtomicArray(MyValue.class, 1, MyValue.DEFAULT);\n-                MyValue[] localArray2 = (MyValue[])ValueClass.newNullableAtomicArray(MyValue.class, 1);\n-                localArray2[0] = new MyValue((short)0, (short)0);\n-                MyValue[] localArray3 = new MyValue[] { new MyValue((short)0, (short)0) };\n+                MyValueTearing[] localArray1 = (MyValueTearing[])ValueClass.newNullRestrictedAtomicArray(MyValueTearing.class, 1, MyValueTearing.DEFAULT);\n+                MyValueTearing[] localArray2 = (MyValueTearing[])ValueClass.newNullableAtomicArray(MyValueTearing.class, 1);\n+                localArray2[0] = new MyValueTearing((short)0, (short)0);\n+                MyValueTearing[] localArray3 = new MyValueTearing[] { new MyValueTearing((short)0, (short)0) };\n@@ -465,6 +464,6 @@\n-                array7[0] = ((MyValue)array7[0]).incrementAndCheck();\n-                array8[0] = ((MyValue)array8[0]).incrementAndCheck();\n-                array9[0] = ((MyValue)array9[0]).incrementAndCheck();\n-                array10[0] = ((MyValue)array10[0]).incrementAndCheck();\n-                array11[0] = ((MyValue)array11[0]).incrementAndCheck();\n-                array12[0] = ((MyValue)array12[0]).incrementAndCheck();\n+                array7[0] = ((MyValueTearing)array7[0]).incrementAndCheck();\n+                array8[0] = ((MyValueTearing)array8[0]).incrementAndCheck();\n+                array9[0] = ((MyValueTearing)array9[0]).incrementAndCheck();\n+                array10[0] = ((MyValueTearing)array10[0]).incrementAndCheck();\n+                array11[0] = ((MyValueTearing)array11[0]).incrementAndCheck();\n+                array12[0] = ((MyValueTearing)array12[0]).incrementAndCheck();\n@@ -482,6 +481,6 @@\n-                array7[0] = ((MyValue)array7[0]).incrementAndCheckUnsafe();\n-                array8[0] = ((MyValue)array8[0]).incrementAndCheckUnsafe();\n-                array9[0] = ((MyValue)array9[0]).incrementAndCheckUnsafe();\n-                array10[0] = ((MyValue)array10[0]).incrementAndCheckUnsafe();\n-                array11[0] = ((MyValue)array11[0]).incrementAndCheckUnsafe();\n-                array12[0] = ((MyValue)array12[0]).incrementAndCheckUnsafe();\n+                array7[0] = ((MyValueTearing)array7[0]).incrementAndCheckUnsafe();\n+                array8[0] = ((MyValueTearing)array8[0]).incrementAndCheckUnsafe();\n+                array9[0] = ((MyValueTearing)array9[0]).incrementAndCheckUnsafe();\n+                array10[0] = ((MyValueTearing)array10[0]).incrementAndCheckUnsafe();\n+                array11[0] = ((MyValueTearing)array11[0]).incrementAndCheckUnsafe();\n+                array12[0] = ((MyValueTearing)array12[0]).incrementAndCheckUnsafe();\n@@ -490,16 +489,16 @@\n-                    test.field1 = (MyValue)incrementAndCheck_mh.invokeExact(test.field1);\n-                    test.field2 = (MyValue)incrementAndCheck_mh.invokeExact(test.field2);\n-                    test.field3 = (MyValue)incrementAndCheck_mh.invokeExact(test.field1);\n-                    test.field4 = (MyValue)incrementAndCheck_mh.invokeExact(test.field2);\n-                    array1[0] = (MyValue)incrementAndCheck_mh.invokeExact(array1[0]);\n-                    array2[0] = (MyValue)incrementAndCheck_mh.invokeExact(array2[0]);\n-                    array3[0] = (MyValue)incrementAndCheck_mh.invokeExact(array3[0]);\n-                    array4[0] = (MyValue)incrementAndCheck_mh.invokeExact(array4[0]);\n-                    array5[0] = (MyValue)incrementAndCheck_mh.invokeExact(array5[0]);\n-                    array6[0] = (MyValue)incrementAndCheck_mh.invokeExact(array6[0]);\n-                    array7[0] = (MyValue)incrementAndCheck_mh.invokeExact((MyValue)array7[0]);\n-                    array8[0] = (MyValue)incrementAndCheck_mh.invokeExact((MyValue)array8[0]);\n-                    array9[0] = (MyValue)incrementAndCheck_mh.invokeExact((MyValue)array9[0]);\n-                    array10[0] = (MyValue)incrementAndCheck_mh.invokeExact((MyValue)array10[0]);\n-                    array11[0] = (MyValue)incrementAndCheck_mh.invokeExact((MyValue)array11[0]);\n-                    array12[0] = (MyValue)incrementAndCheck_mh.invokeExact((MyValue)array12[0]);\n+                    test.field1 = (MyValueTearing)incrementAndCheck_mh.invokeExact(test.field1);\n+                    test.field2 = (MyValueTearing)incrementAndCheck_mh.invokeExact(test.field2);\n+                    test.field3 = (MyValueTearing)incrementAndCheck_mh.invokeExact(test.field1);\n+                    test.field4 = (MyValueTearing)incrementAndCheck_mh.invokeExact(test.field2);\n+                    array1[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array1[0]);\n+                    array2[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array2[0]);\n+                    array3[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array3[0]);\n+                    array4[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array4[0]);\n+                    array5[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array5[0]);\n+                    array6[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact(array6[0]);\n+                    array7[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array7[0]);\n+                    array8[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array8[0]);\n+                    array9[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array9[0]);\n+                    array10[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array10[0]);\n+                    array11[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array11[0]);\n+                    array12[0] = (MyValueTearing)incrementAndCheck_mh.invokeExact((MyValueTearing)array12[0]);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTearing.java","additions":63,"deletions":64,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-import jdk.internal.value.ValueClass;\n-import jdk.internal.vm.annotation.LooselyConsistentValue;\n@@ -57,1 +55,0 @@\n-import jdk.test.lib.Utils;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTrivialMethods.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-value class MyValue1 {\n+value class MyValue1UnexpectedMemBar {\n@@ -76,1 +76,1 @@\n-    public MyValue1(Integer i, int[] array) {\n+    public MyValue1UnexpectedMemBar(Integer i, int[] array) {\n@@ -82,1 +82,1 @@\n-value class MyValue2 {\n+value class MyValue2UnexpectedMemBar {\n@@ -92,1 +92,1 @@\n-    public MyValue2(NonValueClass obj, int[] array) {\n+    public MyValue2UnexpectedMemBar(NonValueClass obj, int[] array) {\n@@ -102,2 +102,2 @@\n-        MyValue1 vt = new MyValue1(i, array);\n-        vt = new MyValue1(vt.i, vt.array);\n+        MyValue1UnexpectedMemBar vt = new MyValue1UnexpectedMemBar(i, array);\n+        vt = new MyValue1UnexpectedMemBar(vt.i, vt.array);\n@@ -109,2 +109,2 @@\n-        MyValue1 vt = new MyValue1(i, array);\n-        vt = new MyValue1(vt.i, vt.array);\n+        MyValue1UnexpectedMemBar vt = new MyValue1UnexpectedMemBar(i, array);\n+        vt = new MyValue1UnexpectedMemBar(vt.i, vt.array);\n@@ -116,2 +116,2 @@\n-        MyValue2 vt = new MyValue2(obj, array);\n-        vt = new MyValue2(vt.obj, vt.array);\n+        MyValue2UnexpectedMemBar vt = new MyValue2UnexpectedMemBar(obj, array);\n+        vt = new MyValue2UnexpectedMemBar(vt.obj, vt.array);\n@@ -123,2 +123,2 @@\n-        MyValue2 vt = new MyValue2(obj, array);\n-        vt = new MyValue2(vt.obj, vt.array);\n+        MyValue2UnexpectedMemBar vt = new MyValue2UnexpectedMemBar(obj, array);\n+        vt = new MyValue2UnexpectedMemBar(vt.obj, vt.array);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnexpectedMemBar.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,2 @@\n-value class MyValue {\n-    static final MyValue EMPTY = new MyValue();\n+value class MyValueUninitValueClass {\n+    static final MyValueUninitValueClass EMPTY = new MyValueUninitValueClass();\n@@ -43,1 +43,1 @@\n-        MyValue unused = new MyValue();\n+        MyValueUninitValueClass unused = new MyValueUninitValueClass();\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUninitializedValueClass.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @run main\/othervm -Xbatch -XX:CompileCommand=dontinline,TestUnloadedCastType::test*\n- *                   TestUnloadedCastType\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestUnloadedCastType::test*\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedCastType\n@@ -33,0 +33,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedCastType.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n- *                   -XX:CompileCommand=compileonly,TestUnloadedInlineTypeArray::test*\n- *                   TestUnloadedInlineTypeArray\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray::test*\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray\n@@ -47,2 +47,2 @@\n- *                   -XX:CompileCommand=compileonly,TestUnloadedInlineTypeArray::test*\n- *                   TestUnloadedInlineTypeArray\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray::test*\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray\n@@ -59,1 +59,1 @@\n- * @run main\/othervm -Xcomp TestUnloadedInlineTypeArray\n+ * @run main\/othervm -Xcomp compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray\n@@ -71,1 +71,1 @@\n- *                   TestUnloadedInlineTypeArray\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray\n@@ -83,2 +83,2 @@\n- *                   -XX:CompileCommand=compileonly,TestUnloadedInlineTypeArray::test*\n- *                   TestUnloadedInlineTypeArray\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray::test*\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray\n@@ -96,2 +96,2 @@\n- *                   -XX:CompileCommand=compileonly,TestUnloadedInlineTypeArray::test*\n- *                   TestUnloadedInlineTypeArray\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray::test*\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray\n@@ -109,1 +109,1 @@\n- *                   TestUnloadedInlineTypeArray\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray\n@@ -121,1 +121,1 @@\n- *                   TestUnloadedInlineTypeArray\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray\n@@ -124,0 +124,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n@@ -130,1 +132,1 @@\n-value class MyValue1 {\n+value class MyValue1UnloadedInlineTypeArray {\n@@ -133,1 +135,1 @@\n-    private MyValue1() {\n+    private MyValue1UnloadedInlineTypeArray() {\n@@ -139,1 +141,1 @@\n-value class MyValue2 {\n+value class MyValue2UnloadedInlineTypeArray {\n@@ -142,1 +144,1 @@\n-    public MyValue2(int n) {\n+    public MyValue2UnloadedInlineTypeArray(int n) {\n@@ -148,1 +150,1 @@\n-value class MyValue3 {\n+value class MyValue3UnloadedInlineTypeArray {\n@@ -151,1 +153,1 @@\n-    public MyValue3(int n) {\n+    public MyValue3UnloadedInlineTypeArray(int n) {\n@@ -157,1 +159,1 @@\n-value class MyValue4 {\n+value class MyValue4UnloadedInlineTypeArray {\n@@ -160,1 +162,1 @@\n-    public MyValue4(int n) {\n+    public MyValue4UnloadedInlineTypeArray(int n) {\n@@ -166,1 +168,1 @@\n-value class MyValue5 {\n+value class MyValue5UnloadedInlineTypeArray {\n@@ -169,1 +171,1 @@\n-    public MyValue5(int n) {\n+    public MyValue5UnloadedInlineTypeArray(int n) {\n@@ -175,1 +177,1 @@\n-value class MyValue6 {\n+value class MyValue6UnloadedInlineTypeArray {\n@@ -178,1 +180,1 @@\n-    public MyValue6(int n) {\n+    public MyValue6UnloadedInlineTypeArray(int n) {\n@@ -182,1 +184,1 @@\n-    public MyValue6(MyValue6 v, MyValue6[] dummy) {\n+    public MyValue6UnloadedInlineTypeArray(MyValue6UnloadedInlineTypeArray v, MyValue6UnloadedInlineTypeArray[] dummy) {\n@@ -188,1 +190,1 @@\n-value class MyValue7 {\n+value class MyValue7UnloadedInlineTypeArray {\n@@ -191,1 +193,1 @@\n-    public MyValue7(int n) {\n+    public MyValue7UnloadedInlineTypeArray(int n) {\n@@ -197,1 +199,1 @@\n-value class MyValue8 {\n+value class MyValue8UnloadedInlineTypeArray {\n@@ -200,1 +202,1 @@\n-        TestUnloadedInlineTypeArray.MyValue8_inited = true;\n+        compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray.MyValue8_inited = true;\n@@ -205,1 +207,1 @@\n-value class MyValue9 {\n+value class MyValue9UnloadedInlineTypeArray {\n@@ -208,1 +210,1 @@\n-        TestUnloadedInlineTypeArray.MyValue9_inited = true;\n+        compiler.valhalla.inlinetypes.TestUnloadedInlineTypeArray.MyValue9_inited = true;\n@@ -213,1 +215,1 @@\n-value class MyValue10 {\n+value class MyValue10UnloadedInlineTypeArray {\n@@ -218,1 +220,1 @@\n-value class MyValue11 {\n+value class MyValue11UnloadedInlineTypeArray {\n@@ -226,2 +228,2 @@\n-    static MyValue1[] target1() {\n-        return (MyValue1[])ValueClass.newNullableAtomicArray(MyValue1.class, 10);\n+    static MyValue1UnloadedInlineTypeArray[] target1() {\n+        return (MyValue1UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue1UnloadedInlineTypeArray.class, 10);\n@@ -234,2 +236,2 @@\n-    static MyValue1[] target1Nullable() {\n-        return new MyValue1[10];\n+    static MyValue1UnloadedInlineTypeArray[] target1Nullable() {\n+        return new MyValue1UnloadedInlineTypeArray[10];\n@@ -242,1 +244,1 @@\n-    static int test2(MyValue2[] arr) {\n+    static int test2(MyValue2UnloadedInlineTypeArray[] arr) {\n@@ -259,2 +261,2 @@\n-        MyValue2[] arr = (MyValue2[])ValueClass.newNullableAtomicArray(MyValue2.class, 2);\n-        arr[1] = new MyValue2(5678);\n+        MyValue2UnloadedInlineTypeArray[] arr = (MyValue2UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue2UnloadedInlineTypeArray.class, 2);\n+        arr[1] = new MyValue2UnloadedInlineTypeArray(5678);\n@@ -268,1 +270,1 @@\n-    static int test2Nullable(MyValue2[] arr) {\n+    static int test2Nullable(MyValue2UnloadedInlineTypeArray[] arr) {\n@@ -285,2 +287,2 @@\n-        MyValue2[] arr = new MyValue2[2];\n-        arr[1] = new MyValue2(5678);\n+        MyValue2UnloadedInlineTypeArray[] arr = new MyValue2UnloadedInlineTypeArray[2];\n+        arr[1] = new MyValue2UnloadedInlineTypeArray(5678);\n@@ -294,1 +296,1 @@\n-    static void test3(MyValue3[] arr) {\n+    static void test3(MyValue3UnloadedInlineTypeArray[] arr) {\n@@ -296,1 +298,1 @@\n-            arr[1] = new MyValue3(2345);\n+            arr[1] = new MyValue3UnloadedInlineTypeArray(2345);\n@@ -307,1 +309,1 @@\n-        MyValue3[] arr = (MyValue3[])ValueClass.newNullableAtomicArray(MyValue3.class, 2);\n+        MyValue3UnloadedInlineTypeArray[] arr = (MyValue3UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue3UnloadedInlineTypeArray.class, 2);\n@@ -314,1 +316,1 @@\n-    static void test3Nullable(MyValue3[] arr) {\n+    static void test3Nullable(MyValue3UnloadedInlineTypeArray[] arr) {\n@@ -317,1 +319,1 @@\n-            arr[1] = new MyValue3(2345);\n+            arr[1] = new MyValue3UnloadedInlineTypeArray(2345);\n@@ -328,1 +330,1 @@\n-        MyValue3[] arr = new MyValue3[2];\n+        MyValue3UnloadedInlineTypeArray[] arr = new MyValue3UnloadedInlineTypeArray[2];\n@@ -336,1 +338,1 @@\n-    static MyValue4[] test4(boolean b) {\n+    static MyValue4UnloadedInlineTypeArray[] test4(boolean b) {\n@@ -339,2 +341,2 @@\n-            MyValue4[] arr = (MyValue4[])ValueClass.newNullableAtomicArray(MyValue4.class, 10);\n-            arr[1] = new MyValue4(2345);\n+            MyValue4UnloadedInlineTypeArray[] arr = (MyValue4UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue4UnloadedInlineTypeArray.class, 10);\n+            arr[1] = new MyValue4UnloadedInlineTypeArray(2345);\n@@ -354,1 +356,1 @@\n-        MyValue4[] arr = null;\n+        MyValue4UnloadedInlineTypeArray[] arr = null;\n@@ -361,1 +363,1 @@\n-    static MyValue4[] test4Nullable(boolean b) {\n+    static MyValue4UnloadedInlineTypeArray[] test4Nullable(boolean b) {\n@@ -364,1 +366,1 @@\n-            MyValue4[] arr = new MyValue4[10];\n+            MyValue4UnloadedInlineTypeArray[] arr = new MyValue4UnloadedInlineTypeArray[10];\n@@ -366,1 +368,1 @@\n-            arr[1] = new MyValue4(2345);\n+            arr[1] = new MyValue4UnloadedInlineTypeArray(2345);\n@@ -380,1 +382,1 @@\n-        MyValue4[] arr = null;\n+        MyValue4UnloadedInlineTypeArray[] arr = null;\n@@ -393,2 +395,2 @@\n-            MyValue5[] arr = (MyValue5[])ValueClass.newNullableAtomicArray(MyValue5.class, 10);\n-            arr[1] = new MyValue5(12345);\n+            MyValue5UnloadedInlineTypeArray[] arr = (MyValue5UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue5UnloadedInlineTypeArray.class, 10);\n+            arr[1] = new MyValue5UnloadedInlineTypeArray(12345);\n@@ -397,2 +399,2 @@\n-            MyValue5[] arr = new MyValue5[10];\n-            arr[1] = new MyValue5(22345);\n+            MyValue5UnloadedInlineTypeArray[] arr = new MyValue5UnloadedInlineTypeArray[10];\n+            arr[1] = new MyValue5UnloadedInlineTypeArray(22345);\n@@ -411,1 +413,1 @@\n-            MyValue5[] arr = null;\n+            MyValue5UnloadedInlineTypeArray[] arr = null;\n@@ -413,1 +415,1 @@\n-                arr = (MyValue5[])test5(1);\n+                arr = (MyValue5UnloadedInlineTypeArray[])test5(1);\n@@ -418,1 +420,1 @@\n-            MyValue5[] arr = null;\n+            MyValue5UnloadedInlineTypeArray[] arr = null;\n@@ -420,1 +422,1 @@\n-                arr = (MyValue5[])test5(2);\n+                arr = (MyValue5UnloadedInlineTypeArray[])test5(2);\n@@ -427,1 +429,1 @@\n-        return new MyValue6(new MyValue6(123), null);\n+        return new MyValue6UnloadedInlineTypeArray(new MyValue6UnloadedInlineTypeArray(123), null);\n@@ -432,1 +434,1 @@\n-        Asserts.assertEQ(n.toString(), \"MyValue6@\" + Integer.toHexString(n.hashCode()));\n+        Asserts.assertEQ(n.toString(), \"compiler.valhalla.inlinetypes.MyValue6UnloadedInlineTypeArray@\" + Integer.toHexString(n.hashCode()));\n@@ -435,1 +437,1 @@\n-    static int test7(MyValue7[][] arr) {\n+    static int test7(MyValue7UnloadedInlineTypeArray[][] arr) {\n@@ -452,2 +454,2 @@\n-        MyValue7[][] arr = { (MyValue7[])ValueClass.newNullableAtomicArray(MyValue7.class, 2),\n-                             (MyValue7[])ValueClass.newNullableAtomicArray(MyValue7.class, 2) };\n+        MyValue7UnloadedInlineTypeArray[][] arr = { (MyValue7UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue7UnloadedInlineTypeArray.class, 2),\n+                             (MyValue7UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue7UnloadedInlineTypeArray.class, 2) };\n@@ -457,1 +459,1 @@\n-        arr[0][1] = new MyValue7(5678);\n+        arr[0][1] = new MyValue7UnloadedInlineTypeArray(5678);\n@@ -465,1 +467,1 @@\n-    static int test7Nullable(MyValue7[][] arr) {\n+    static int test7Nullable(MyValue7UnloadedInlineTypeArray[][] arr) {\n@@ -483,1 +485,1 @@\n-        MyValue7[][] arr = new MyValue7[2][2];\n+        MyValue7UnloadedInlineTypeArray[][] arr = new MyValue7UnloadedInlineTypeArray[2][2];\n@@ -487,1 +489,1 @@\n-        arr[0][1] = new MyValue7(5678);\n+        arr[0][1] = new MyValue7UnloadedInlineTypeArray(5678);\n@@ -497,1 +499,1 @@\n-        MyValue8 a[] = new MyValue8[0];\n+        MyValue8UnloadedInlineTypeArray a[] = new MyValue8UnloadedInlineTypeArray[0];\n@@ -500,1 +502,1 @@\n-        MyValue8 b[] = (MyValue8[])ValueClass.newNullableAtomicArray(MyValue8.class, 0);\n+        MyValue8UnloadedInlineTypeArray b[] = (MyValue8UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue8UnloadedInlineTypeArray.class, 0);\n@@ -505,1 +507,1 @@\n-        MyValue9 a[][] = new MyValue9[10][0];\n+        MyValue9UnloadedInlineTypeArray a[][] = new MyValue9UnloadedInlineTypeArray[10][0];\n@@ -508,1 +510,1 @@\n-        a[0] = (MyValue9[])ValueClass.newNullableAtomicArray(MyValue9.class, 0);\n+        a[0] = (MyValue9UnloadedInlineTypeArray[])ValueClass.newNullableAtomicArray(MyValue9UnloadedInlineTypeArray.class, 0);\n@@ -512,2 +514,2 @@\n-    static void test10(MyValue10 dummy) {\n-        MyValue10[][] a = { (MyValue10[])ValueClass.newNullRestrictedNonAtomicArray(MyValue10.class, 1, new MyValue10()) };\n+    static void test10(MyValue10UnloadedInlineTypeArray dummy) {\n+        MyValue10UnloadedInlineTypeArray[][] a = { (MyValue10UnloadedInlineTypeArray[])ValueClass.newNullRestrictedNonAtomicArray(MyValue10UnloadedInlineTypeArray.class, 1, new MyValue10UnloadedInlineTypeArray()) };\n@@ -518,2 +520,2 @@\n-    static void test11(MyValue10 dummy) {\n-        MyValue11[][] a = new MyValue11[1][1];\n+    static void test11(MyValue10UnloadedInlineTypeArray dummy) {\n+        MyValue11UnloadedInlineTypeArray[][] a = new MyValue11UnloadedInlineTypeArray[1][1];\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java","additions":84,"deletions":82,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.value.ValueClass;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- *                   TestUnloadedReturnTypes\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedReturnTypes\n@@ -37,1 +37,1 @@\n- *                   TestUnloadedReturnTypes\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedReturnTypes\n@@ -40,1 +40,1 @@\n- *                   TestUnloadedReturnTypes\n+ *                   compiler.valhalla.inlinetypes.TestUnloadedReturnTypes\n@@ -43,0 +43,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n@@ -48,1 +50,1 @@\n-value class MyValue1 {\n+value class MyValue1UnloadedRetTypes {\n@@ -51,1 +53,1 @@\n-    public MyValue1(int x) {\n+    public MyValue1UnloadedRetTypes(int x) {\n@@ -57,2 +59,2 @@\n-    static MyValue1 test1(boolean b) {\n-        return b ? new MyValue1(42) : null;\n+    static MyValue1UnloadedRetTypes test1(boolean b) {\n+        return b ? new MyValue1UnloadedRetTypes(42) : null;\n@@ -63,1 +65,1 @@\n-value class MyValue2 {\n+value class MyValue2UnloadedRetTypes {\n@@ -80,1 +82,1 @@\n-    public MyValue2 test2Virtual(boolean loadIt) {\n+    public MyValue2UnloadedRetTypes test2Virtual(boolean loadIt) {\n@@ -82,1 +84,1 @@\n-            return new MyValue2();\n+            return new MyValue2UnloadedRetTypes();\n@@ -89,1 +91,1 @@\n-    public MyValue2 test2(boolean loadIt) {\n+    public MyValue2UnloadedRetTypes test2(boolean loadIt) {\n@@ -91,1 +93,1 @@\n-            return new MyValue2();\n+            return new MyValue2UnloadedRetTypes();\n@@ -97,1 +99,1 @@\n-    public MyValue2 test2Virtual(boolean loadIt) {\n+    public MyValue2UnloadedRetTypes test2Virtual(boolean loadIt) {\n@@ -99,1 +101,1 @@\n-            return new MyValue2();\n+            return new MyValue2UnloadedRetTypes();\n@@ -106,1 +108,1 @@\n-value class MyValue3 {\n+value class MyValue3UnloadedRetTypes {\n@@ -125,1 +127,1 @@\n-    public MyValue3 test3Virtual(boolean loadIt) {\n+    public MyValue3UnloadedRetTypes test3Virtual(boolean loadIt) {\n@@ -127,1 +129,1 @@\n-            return new MyValue3();\n+            return new MyValue3UnloadedRetTypes();\n@@ -134,1 +136,1 @@\n-    public MyValue3 test3(boolean loadIt) {\n+    public MyValue3UnloadedRetTypes test3(boolean loadIt) {\n@@ -136,1 +138,1 @@\n-            return new MyValue3();\n+            return new MyValue3UnloadedRetTypes();\n@@ -142,1 +144,1 @@\n-    public MyValue3 test3Virtual(boolean loadIt) {\n+    public MyValue3UnloadedRetTypes test3Virtual(boolean loadIt) {\n@@ -144,1 +146,1 @@\n-            return new MyValue3();\n+            return new MyValue3UnloadedRetTypes();\n@@ -197,1 +199,1 @@\n-        Asserts.assertEquals(((MyValue1)res).x, 42);\n+        Asserts.assertEquals(((MyValue1UnloadedRetTypes)res).x, 42);\n@@ -203,4 +205,4 @@\n-            Asserts.assertEquals(h2.test2(true), new MyValue2());\n-            Asserts.assertEquals(h2Super.test2Virtual(true), new MyValue2());\n-            Asserts.assertEquals(h3.test3(true), new MyValue3());\n-            Asserts.assertEquals(h3Super.test3Virtual(true), new MyValue3());\n+            Asserts.assertEquals(h2.test2(true), new MyValue2UnloadedRetTypes());\n+            Asserts.assertEquals(h2Super.test2Virtual(true), new MyValue2UnloadedRetTypes());\n+            Asserts.assertEquals(h3.test3(true), new MyValue3UnloadedRetTypes());\n+            Asserts.assertEquals(h3Super.test3Virtual(true), new MyValue3UnloadedRetTypes());\n@@ -208,6 +210,6 @@\n-        Asserts.assertEquals(test2(h2, true), new MyValue2());\n-        Asserts.assertEquals(test2Virtual(h2, true), new MyValue2());\n-        Asserts.assertEquals(test2Virtual(h2Super, true), new MyValue2());\n-        Asserts.assertEquals(test3(h3, true), new MyValue3());\n-        Asserts.assertEquals(test3Virtual(h3, true), new MyValue3());\n-        Asserts.assertEquals(test3Virtual(h3Super, true), new MyValue3());\n+        Asserts.assertEquals(test2(h2, true), new MyValue2UnloadedRetTypes());\n+        Asserts.assertEquals(test2Virtual(h2, true), new MyValue2UnloadedRetTypes());\n+        Asserts.assertEquals(test2Virtual(h2Super, true), new MyValue2UnloadedRetTypes());\n+        Asserts.assertEquals(test3(h3, true), new MyValue3UnloadedRetTypes());\n+        Asserts.assertEquals(test3Virtual(h3, true), new MyValue3UnloadedRetTypes());\n+        Asserts.assertEquals(test3Virtual(h3Super, true), new MyValue3UnloadedRetTypes());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedReturnTypes.java","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main TestUnresolvedInlineClass\n+ * @run main compiler.valhalla.inlinetypes.TestUnresolvedInlineClass\n@@ -35,0 +35,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n@@ -50,1 +52,1 @@\n-            File unresolved = new File(TEST_CLASSES, \"SimpleInlineType.class\");\n+            File unresolved = new File(TEST_CLASSES, \"compiler\/valhalla\/inlinetypes\/SimpleInlineType.class\");\n@@ -56,1 +58,1 @@\n-            String[] arg = {\"--enable-preview\", \"-XX:+InlineTypePassFieldsAsArgs\", \"TestUnresolvedInlineClass\", \"run\"};\n+            String[] arg = {\"--enable-preview\", \"-XX:+InlineTypePassFieldsAsArgs\", \"compiler.valhalla.inlinetypes.TestUnresolvedInlineClass\", \"run\"};\n@@ -61,1 +63,1 @@\n-            oa.shouldContain(\"Preloading of class SimpleInlineType during linking of class TestUnresolvedInlineClass (cause: LoadableDescriptors attribute) failed\");\n+            oa.shouldContain(\"Preloading of class compiler\/valhalla\/inlinetypes\/SimpleInlineType during linking of class compiler\/valhalla\/inlinetypes\/TestUnresolvedInlineClass (cause: LoadableDescriptors attribute) failed\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedInlineClass.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import jdk.test.lib.Asserts;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueRematDuringTypeSharpening.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- *                   -Xbatch -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n+ *                   -Xbatch -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::*\n@@ -58,1 +58,1 @@\n- *                               -Xbatch -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -Xbatch -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::test*\n@@ -72,1 +72,1 @@\n- *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::test*\n@@ -87,1 +87,1 @@\n- *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::test*\n@@ -102,1 +102,1 @@\n- *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::test*\n@@ -116,1 +116,1 @@\n- *                               -Xcomp -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n+ *                               -Xcomp -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::*\n@@ -129,1 +129,1 @@\n- *                               -Xcomp -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -Xcomp -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::test*\n@@ -143,1 +143,1 @@\n- *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::test*\n@@ -158,1 +158,1 @@\n- *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::test*\n@@ -173,1 +173,1 @@\n- *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::test*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::test*\n@@ -188,1 +188,1 @@\n- *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::*\n@@ -202,1 +202,1 @@\n- *                               -XX:CompileCommand=compileonly,TestVirtualThreads*::*\n+ *                               -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestVirtualThreads*::*\n@@ -217,1 +217,0 @@\n-import jdk.test.lib.Asserts;\n@@ -446,1 +445,1 @@\n-    };\n+    }\n@@ -786,1 +785,1 @@\n-            Collections.addAll(methods, TestVirtualThreads.class.getDeclaredMethods());\n+            Collections.addAll(methods, compiler.valhalla.inlinetypes.TestVirtualThreads.class.getDeclaredMethods());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestVirtualThreads.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm -XX:CompileCommand=dontinline,TestWithSpeculativeTypes::*\n+ * @run main\/othervm -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestWithSpeculativeTypes::*\n@@ -32,1 +32,1 @@\n- *                   TestWithSpeculativeTypes\n+ *                   compiler.valhalla.inlinetypes.TestWithSpeculativeTypes\n@@ -35,0 +35,2 @@\n+package compiler.valhalla.inlinetypes;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithSpeculativeTypes.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+package compiler.valhalla.inlinetypes.bootstrap;\n+\n@@ -35,1 +37,1 @@\n-        Path source = Path.of(Utils.TEST_CLASSES).resolve(name);\n+        Path source = Path.of(Utils.TEST_CLASSES).resolve(\"compiler\/valhalla\/inlinetypes\/bootstrap\/\" + name);\n@@ -39,0 +41,3 @@\n+        System.out.println(\"TEST_CLASSES: \" + Utils.TEST_CLASSES);\n+        System.out.println(\"source: \" + source);\n+        System.out.println(\"target: \" + target);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/InstallBootstrapClasses.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+package compiler.valhalla.inlinetypes.bootstrap;\n+\n@@ -46,1 +48,1 @@\n- * @run main\/othervm InstallBootstrapClasses\n+ * @run main\/othervm compiler.valhalla.inlinetypes.bootstrap.InstallBootstrapClasses\n@@ -48,2 +50,2 @@\n- *                   -Xbatch -XX:-TieredCompilation -XX:CompileCommand=compileonly,TestBootClassloader::test*\n- *                   -XX:CompileCommand=inline,*::get* TestBootClassloader\n+ *                   -Xbatch -XX:-TieredCompilation -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.bootstrap.TestBootClassloader::test*\n+ *                   -XX:CompileCommand=inline,*::get* compiler.valhalla.inlinetypes.bootstrap.TestBootClassloader\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/TestBootClassloader.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+package compiler.valhalla.inlinetypes.bootstrap;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/ValueOnBootclasspath.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-class GetUnresolvedInlineFieldWrongSignature {\n+public class GetUnresolvedInlineFieldWrongSignature {\n@@ -79,1 +79,1 @@\n-    static void test13(Object holder) {\n+    public static void test13(Object holder) {\n@@ -86,1 +86,1 @@\n-    static void test15(Object holder) {\n+    public static void test15(Object holder) {\n@@ -93,1 +93,1 @@\n-    static Object test16(boolean warmup) {\n+    public static Object test16(boolean warmup) {\n@@ -101,1 +101,1 @@\n-    static Object test17(boolean warmup) {\n+    public static Object test17(boolean warmup) {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/hack\/GetUnresolvedInlineFieldWrongSignature.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}