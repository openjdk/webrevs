{"files":[{"patch":"@@ -90,54 +90,45 @@\n- import java.util.ArrayList;\n- import java.util.Collections;\n- import java.util.List;\n-\n- import jdk.internal.vm.annotation.ImplicitlyConstructible;\n- import jdk.internal.vm.annotation.LooselyConsistentValue;\n- import jdk.internal.vm.annotation.NullRestricted;\n-\n- import java.lang.reflect.Method;\n- import java.lang.reflect.Modifier;\n- import jdk.test.lib.Asserts;\n- import jdk.test.lib.process.OutputAnalyzer;\n- import jdk.test.lib.process.ProcessTools;\n-\n- public class TestLayoutFlags {\n-\n-   static class TestRunner {\n-     public static void main(String[] args) throws Exception {\n-       Class testClass = Class.forName(\"TestLayoutFlags\");\n-       Asserts.assertNotNull(testClass);\n-       Method[] testMethods = testClass.getMethods();\n-       for (Method test : testMethods) {\n-         if (test.getName().startsWith(\"test_\")) {\n-           Asserts.assertTrue(Modifier.isStatic(test.getModifiers()));\n-           Asserts.assertTrue(test.getReturnType().equals(Void.TYPE));\n-           System.out.println(\"Running \" + test.getName());\n-           test.invoke(null);\n-         }\n-       }\n-     }\n-   }\n-\n-   @ImplicitlyConstructible\n-   @LooselyConsistentValue\n-   static value class Value0 {\n-     byte b0 = 0;\n-     byte b1 = 0;\n-   }\n-\n-  static class Container0 {\n-     Value0 val0 = new Value0();\n-  }\n-\n-  static public void test_0() {\n-    Container0 c = new Container0();\n-  }\n-\n-  static public void check_0(FieldLayoutAnalyzer fla) {\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container0\");\n-    FieldLayoutAnalyzer.FieldBlock f0 = cl.getFieldFromName(\"val0\", false);\n-    if (useNullableAtomicFlat) {\n-      Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NULLABLE_FLAT, f0.layoutKind());\n-    } else {\n-      Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_FLAT, f0.layoutKind());\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestLayoutFlags {\n+\n+    static class TestRunner {\n+        public static void main(String[] args) throws Exception {\n+            Class testClass = Class.forName(\"TestLayoutFlags\");\n+            Asserts.assertNotNull(testClass);\n+            Method[] testMethods = testClass.getMethods();\n+            for (Method test : testMethods) {\n+                if (test.getName().startsWith(\"test_\")) {\n+                    Asserts.assertTrue(Modifier.isStatic(test.getModifiers()));\n+                    Asserts.assertTrue(test.getReturnType().equals(Void.TYPE));\n+                    System.out.println(\"Running \" + test.getName());\n+                    test.invoke(null);\n+                }\n+            }\n+        }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    static value class Value0 {\n+        byte b0 = 0;\n+        byte b1 = 0;\n+    }\n+\n+    static class Container0 {\n+        Value0 val0 = new Value0();\n+    }\n+\n+    static public void test_0() {\n+        Container0 c = new Container0();\n@@ -145,18 +136,18 @@\n-  }\n-\n-  static class Container1 {\n-    @NullRestricted\n-    volatile Value0 val0 = new Value0();\n-  }\n-\n-  static public void test_1() {\n-    Container1 c = new Container1();\n-  }\n-\n-  static public void check_1(FieldLayoutAnalyzer fla) {\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container1\");\n-    FieldLayoutAnalyzer.FieldBlock f0 = cl.getFieldFromName(\"val0\", false);\n-    if (useAtomicFlat) {\n-      Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.ATOMIC_FLAT, f0.layoutKind());\n-    } else {\n-      Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_FLAT, f0.layoutKind());\n+\n+    static public void check_0(FieldLayoutAnalyzer fla) {\n+        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container0\");\n+        FieldLayoutAnalyzer.FieldBlock f0 = cl.getFieldFromName(\"val0\", false);\n+        if (useNullableAtomicFlat) {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NULLABLE_FLAT, f0.layoutKind());\n+        } else {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_FLAT, f0.layoutKind());\n+        }\n+    }\n+\n+    static class Container1 {\n+        @NullRestricted\n+        volatile Value0 val0 = new Value0();\n+    }\n+\n+    static public void test_1() {\n+        Container1 c = new Container1();\n@@ -164,18 +155,9 @@\n-  }\n-\n-  static class Container2 {\n-    @NullRestricted\n-    Value0 val0 = new Value0();\n-  }\n-\n-  static public void test_2() {\n-    Container2 c = new Container2();\n-  }\n-\n-  static public void check_2(FieldLayoutAnalyzer fla) {\n-    FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container2\");\n-    FieldLayoutAnalyzer.FieldBlock f0 = cl.getFieldFromName(\"val0\", false);\n-    if (useNonAtomicFlat) {\n-      Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_ATOMIC_FLAT, f0.layoutKind());\n-    } else {\n-      Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_FLAT, f0.layoutKind());\n+\n+    static public void check_1(FieldLayoutAnalyzer fla) {\n+        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container1\");\n+        FieldLayoutAnalyzer.FieldBlock f0 = cl.getFieldFromName(\"val0\", false);\n+        if (useAtomicFlat) {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.ATOMIC_FLAT, f0.layoutKind());\n+        } else {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_FLAT, f0.layoutKind());\n+        }\n@@ -183,58 +165,4 @@\n-  }\n-\n-  static ProcessBuilder exec(String... args) throws Exception {\n-    List<String> argsList = new ArrayList<>();\n-    Collections.addAll(argsList, \"--enable-preview\");\n-    Collections.addAll(argsList, \"-Xint\");\n-    Collections.addAll(argsList, \"-XX:+UnlockDiagnosticVMOptions\");\n-    Collections.addAll(argsList, \"-XX:+PrintFieldLayout\");\n-    Collections.addAll(argsList, \"-Xshare:off\");\n-    Collections.addAll(argsList, \"-Xmx256m\");\n-    Collections.addAll(argsList, useNonAtomicFlat ? \"-XX:+NonAtomicValueFlattening\" : \"-XX:-NonAtomicValueFlattening\");\n-    Collections.addAll(argsList, useAtomicFlat ? \"-XX:+AtomicValueFlattening\" : \"-XX:-AtomicValueFlattening\");\n-    Collections.addAll(argsList, useNullableAtomicFlat ?  \"-XX:+NullableValueFlattening\" : \"-XX:-NullableValueFlattening\");\n-    Collections.addAll(argsList, \"-cp\", System.getProperty(\"java.class.path\") + System.getProperty(\"path.separator\") + \".\");\n-    Collections.addAll(argsList, args);\n-    return ProcessTools.createTestJavaProcessBuilder(argsList);\n-  }\n-\n-  static boolean useNonAtomicFlat;\n-  static boolean useAtomicFlat;\n-  static boolean useNullableAtomicFlat;\n-\n-  public static void main(String[] args) throws Exception {\n-\n-    switch(args[0]) {\n-      case \"0\": useNonAtomicFlat = false;\n-                useAtomicFlat = false;\n-                useNullableAtomicFlat = false;\n-                break;\n-      case \"1\": useNonAtomicFlat = false;\n-                useAtomicFlat = true;\n-                useNullableAtomicFlat = true;\n-                break;\n-      case \"2\": useNonAtomicFlat = false;\n-                useAtomicFlat = false;\n-                useNullableAtomicFlat = true;\n-                break;\n-      case \"3\": useNonAtomicFlat = false;\n-                useAtomicFlat = true;\n-                useNullableAtomicFlat = false;\n-                break;\n-      case \"4\": useNonAtomicFlat = true;\n-                useAtomicFlat = false;\n-                useNullableAtomicFlat = false;\n-                break;\n-      case \"5\": useNonAtomicFlat = true;\n-                useAtomicFlat = true;\n-                useNullableAtomicFlat = true;\n-                break;\n-      case \"6\": useNonAtomicFlat = true;\n-                useAtomicFlat = false;\n-                useNullableAtomicFlat = true;\n-                break;\n-      case \"7\": useNonAtomicFlat = true;\n-                useAtomicFlat = true;\n-                useNullableAtomicFlat = false;\n-                break;\n-      default: throw new RuntimeException(\"Unrecognized configuration\");\n+\n+    static class Container2 {\n+        @NullRestricted\n+        Value0 val0 = new Value0();\n@@ -243,2 +171,3 @@\n-    \/\/ Generate test classes\n-    TestLayoutFlags vct = new TestLayoutFlags();\n+    static public void test_2() {\n+        Container2 c = new Container2();\n+    }\n@@ -246,3 +175,9 @@\n-    \/\/ Execute the test runner in charge of loading all test classes\n-    ProcessBuilder pb = exec(\"TestLayoutFlags$TestRunner\");\n-    OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+    static public void check_2(FieldLayoutAnalyzer fla) {\n+        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container2\");\n+        FieldLayoutAnalyzer.FieldBlock f0 = cl.getFieldFromName(\"val0\", false);\n+        if (useNonAtomicFlat) {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_ATOMIC_FLAT, f0.layoutKind());\n+        } else {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_FLAT, f0.layoutKind());\n+        }\n+    }\n@@ -250,2 +185,14 @@\n-    if (out.getExitValue() != 0) {\n-      System.out.print(out.getOutput());\n+    static ProcessBuilder exec(String... args) throws Exception {\n+        List<String> argsList = new ArrayList<>();\n+        Collections.addAll(argsList, \"--enable-preview\");\n+        Collections.addAll(argsList, \"-Xint\");\n+        Collections.addAll(argsList, \"-XX:+UnlockDiagnosticVMOptions\");\n+        Collections.addAll(argsList, \"-XX:+PrintFieldLayout\");\n+        Collections.addAll(argsList, \"-Xshare:off\");\n+        Collections.addAll(argsList, \"-Xmx256m\");\n+        Collections.addAll(argsList, useNonAtomicFlat ? \"-XX:+NonAtomicValueFlattening\" : \"-XX:-NonAtomicValueFlattening\");\n+        Collections.addAll(argsList, useAtomicFlat ? \"-XX:+AtomicValueFlattening\" : \"-XX:-AtomicValueFlattening\");\n+        Collections.addAll(argsList, useNullableAtomicFlat ?  \"-XX:+NullableValueFlattening\" : \"-XX:-NullableValueFlattening\");\n+        Collections.addAll(argsList, \"-cp\", System.getProperty(\"java.class.path\") + System.getProperty(\"path.separator\") + \".\");\n+        Collections.addAll(argsList, args);\n+        return ProcessTools.createTestJavaProcessBuilder(argsList);\n@@ -253,17 +200,41 @@\n-    Asserts.assertEquals(out.getExitValue(), 0, \"Something went wrong while running the tests\");\n-\n-    \/\/ To help during test development\n-    System.out.print(out.getOutput());\n-\n-    \/\/ Get and parse the test output\n-    FieldLayoutAnalyzer.LogOutput lo = new FieldLayoutAnalyzer.LogOutput(out.asLines());\n-    FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo);\n-\n-    \/\/ Running tests verification method (check that tests produced the right configuration)\n-    Class testClass = TestLayoutFlags.class;\n-      Method[] testMethods = testClass.getMethods();\n-      for (Method test : testMethods) {\n-        if (test.getName().startsWith(\"check_\")) {\n-          Asserts.assertTrue(Modifier.isStatic(test.getModifiers()));\n-          Asserts.assertTrue(test.getReturnType().equals(Void.TYPE));\n-          test.invoke(null, fla);\n+\n+    static boolean useNonAtomicFlat;\n+    static boolean useAtomicFlat;\n+    static boolean useNullableAtomicFlat;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        switch(args[0]) {\n+            case \"0\": useNonAtomicFlat = false;\n+                        useAtomicFlat = false;\n+                        useNullableAtomicFlat = false;\n+                        break;\n+            case \"1\": useNonAtomicFlat = false;\n+                        useAtomicFlat = true;\n+                        useNullableAtomicFlat = true;\n+                        break;\n+            case \"2\": useNonAtomicFlat = false;\n+                        useAtomicFlat = false;\n+                        useNullableAtomicFlat = true;\n+                        break;\n+            case \"3\": useNonAtomicFlat = false;\n+                        useAtomicFlat = true;\n+                        useNullableAtomicFlat = false;\n+                        break;\n+            case \"4\": useNonAtomicFlat = true;\n+                        useAtomicFlat = false;\n+                        useNullableAtomicFlat = false;\n+                        break;\n+            case \"5\": useNonAtomicFlat = true;\n+                        useAtomicFlat = true;\n+                        useNullableAtomicFlat = true;\n+                        break;\n+            case \"6\": useNonAtomicFlat = true;\n+                        useAtomicFlat = false;\n+                        useNullableAtomicFlat = true;\n+                        break;\n+            case \"7\": useNonAtomicFlat = true;\n+                        useAtomicFlat = true;\n+                        useNullableAtomicFlat = false;\n+                        break;\n+            default: throw new RuntimeException(\"Unrecognized configuration\");\n@@ -271,1 +242,0 @@\n-      }\n@@ -273,3 +243,33 @@\n-    \/\/ Verify that all layouts are correct\n-    fla.check();\n-  }\n+        \/\/ Generate test classes\n+        TestLayoutFlags vct = new TestLayoutFlags();\n+\n+        \/\/ Execute the test runner in charge of loading all test classes\n+        ProcessBuilder pb = exec(\"TestLayoutFlags$TestRunner\");\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+\n+        if (out.getExitValue() != 0) {\n+            System.out.print(out.getOutput());\n+        }\n+        Asserts.assertEquals(out.getExitValue(), 0, \"Something went wrong while running the tests\");\n+\n+        \/\/ To help during test development\n+        System.out.print(out.getOutput());\n+\n+        \/\/ Get and parse the test output\n+        FieldLayoutAnalyzer.LogOutput lo = new FieldLayoutAnalyzer.LogOutput(out.asLines());\n+        FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo);\n+\n+        \/\/ Running tests verification method (check that tests produced the right configuration)\n+        Class testClass = TestLayoutFlags.class;\n+        Method[] testMethods = testClass.getMethods();\n+        for (Method test : testMethods) {\n+            if (test.getName().startsWith(\"check_\")) {\n+                Asserts.assertTrue(Modifier.isStatic(test.getModifiers()));\n+                Asserts.assertTrue(test.getReturnType().equals(Void.TYPE));\n+                test.invoke(null, fla);\n+            }\n+        }\n+\n+        \/\/ Verify that all layouts are correct\n+        fla.check();\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/TestLayoutFlags.java","additions":176,"deletions":176,"binary":false,"changes":352,"status":"modified"}]}