{"files":[{"patch":"@@ -251,1 +251,1 @@\n-  data_for_oop(obj, dst_temp, field_klass);  \/\/ danger, uses rscratch1\n+  payload_address(obj, dst_temp, field_klass);  \/\/ danger, uses rscratch1\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5641,1 +5641,1 @@\n-void MacroAssembler::first_field_offset(Register inline_klass, Register offset) {\n+void MacroAssembler::payload_offset(Register inline_klass, Register offset) {\n@@ -5643,1 +5643,1 @@\n-  ldrw(offset, Address(offset, InlineKlass::first_field_offset_offset()));\n+  ldrw(offset, Address(offset, InlineKlass::payload_offset_offset()));\n@@ -5646,2 +5646,2 @@\n-void MacroAssembler::data_for_oop(Register oop, Register data, Register inline_klass) {\n-  \/\/ ((address) (void*) o) + vk->first_field_offset();\n+void MacroAssembler::payload_address(Register oop, Register data, Register inline_klass) {\n+  \/\/ ((address) (void*) o) + vk->payload_offset();\n@@ -5649,1 +5649,1 @@\n-  first_field_offset(inline_klass, offset);\n+  payload_offset(inline_klass, offset);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -934,2 +934,2 @@\n-  void first_field_offset(Register inline_klass, Register offset);\n-  void data_for_oop(Register oop, Register data, Register inline_klass);\n+  void payload_offset(Register inline_klass, Register offset);\n+  void payload_address(Register oop, Register data, Register inline_klass);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3103,1 +3103,1 @@\n-        __ data_for_oop(r0, r0, inline_klass);\n+        __ payload_address(r0, r0, inline_klass);\n@@ -3347,1 +3347,1 @@\n-      __ data_for_oop(r0, r0, r4);\n+      __ payload_address(r0, r0, r4);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1286,1 +1286,1 @@\n-  data_for_oop(obj, dst_temp, field_klass);\n+  payload_addr(obj, dst_temp, field_klass);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6417,1 +6417,1 @@\n-void MacroAssembler::first_field_offset(Register inline_klass, Register offset) {\n+void MacroAssembler::payload_offset(Register inline_klass, Register offset) {\n@@ -6419,1 +6419,1 @@\n-  movl(offset, Address(offset, InlineKlass::first_field_offset_offset()));\n+  movl(offset, Address(offset, InlineKlass::payload_offset_offset()));\n@@ -6422,2 +6422,2 @@\n-void MacroAssembler::data_for_oop(Register oop, Register data, Register inline_klass) {\n-  \/\/ ((address) (void*) o) + vk->first_field_offset();\n+void MacroAssembler::payload_addr(Register oop, Register data, Register inline_klass) {\n+  \/\/ ((address) (void*) o) + vk->payload_offset();\n@@ -6425,1 +6425,1 @@\n-  first_field_offset(inline_klass, offset);\n+  payload_offset(inline_klass, offset);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -432,2 +432,2 @@\n-  void first_field_offset(Register inline_klass, Register offset);\n-  void data_for_oop(Register oop, Register data, Register inline_klass);\n+  void payload_offset(Register inline_klass, Register offset);\n+  void payload_addr(Register oop, Register data, Register inline_klass);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3536,1 +3536,1 @@\n-            __ data_for_oop(rax, rax, r8);\n+            __ payload_addr(rax, rax, r8);\n@@ -3791,1 +3791,1 @@\n-        __ data_for_oop(rax, rax, rdx);\n+        __ payload_addr(rax, rax, rdx);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1825,1 +1825,1 @@\n-    int offset = field->offset_in_bytes() - vk->first_field_offset();\n+    int offset = field->offset_in_bytes() - vk->payload_offset();\n@@ -1832,1 +1832,1 @@\n-        int null_marker_offset = field->null_marker_offset() - vk->first_field_offset();\n+        int null_marker_offset = field->null_marker_offset() - vk->payload_offset();\n@@ -1984,1 +1984,1 @@\n-            offset += pending_field_access()->offset() - field->holder()->as_inline_klass()->first_field_offset();\n+            offset += pending_field_access()->offset() - field->holder()->as_inline_klass()->payload_offset();\n@@ -1990,1 +1990,1 @@\n-            pending_load_indexed()->update(field, offset - field->holder()->as_inline_klass()->first_field_offset());\n+            pending_load_indexed()->update(field, offset - field->holder()->as_inline_klass()->payload_offset());\n@@ -2049,1 +2049,1 @@\n-                pending_load_indexed()->update(field, offset - field->holder()->as_inline_klass()->first_field_offset());\n+                pending_load_indexed()->update(field, offset - field->holder()->as_inline_klass()->payload_offset());\n@@ -2051,1 +2051,1 @@\n-                pending_field_access()->inc_offset(offset - field->holder()->as_inline_klass()->first_field_offset());\n+                pending_field_access()->inc_offset(offset - field->holder()->as_inline_klass()->payload_offset());\n@@ -2070,1 +2070,1 @@\n-                pending_load_indexed()->update(field, offset - field->holder()->as_inline_klass()->first_field_offset());\n+                pending_load_indexed()->update(field, offset - field->holder()->as_inline_klass()->payload_offset());\n@@ -2087,2 +2087,2 @@\n-                                      pending_field_access()->offset() + field->offset_in_bytes() - field->holder()->as_inline_klass()->first_field_offset(),\n-                                      new_instance, inline_klass->first_field_offset(), state_before);\n+                                      pending_field_access()->offset() + field->offset_in_bytes() - field->holder()->as_inline_klass()->payload_offset(),\n+                                      new_instance, inline_klass->payload_offset(), state_before);\n@@ -2091,1 +2091,1 @@\n-                  copy_inline_content(inline_klass, obj, field->offset_in_bytes(), new_instance, inline_klass->first_field_offset(), state_before);\n+                  copy_inline_content(inline_klass, obj, field->offset_in_bytes(), new_instance, inline_klass->payload_offset(), state_before);\n@@ -2143,1 +2143,1 @@\n-          copy_inline_content(inline_klass, val, inline_klass->first_field_offset(), obj, offset, state_before, field);\n+          copy_inline_content(inline_klass, val, inline_klass->payload_offset(), obj, offset, state_before, field);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1769,1 +1769,1 @@\n-        access_load_at(decorators, bt, value, LIR_OprFact::intConst(vk->first_field_offset()), payload);\n+        access_load_at(decorators, bt, value, LIR_OprFact::intConst(vk->payload_offset()), payload);\n@@ -1888,1 +1888,1 @@\n-    int elm_offset = obj_offset - elem_klass->first_field_offset() + sub_offset; \/\/ object header is not stored in array.\n+    int elm_offset = obj_offset - elem_klass->payload_offset() + sub_offset; \/\/ object header is not stored in array.\n@@ -2230,1 +2230,1 @@\n-    access_store_at(decorators, bt, dest, LIR_OprFact::intConst(vk->first_field_offset()), payload);\n+    access_store_at(decorators, bt, dest, LIR_OprFact::intConst(vk->payload_offset()), payload);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -181,3 +181,2 @@\n-  f(FlatArrayElementMaxOops) \\\n-  f(FlatArrayElementMaxSize) \\\n-  f(InlineFieldMaxFlatSize) \\\n+  f(UseFlatArray) \\\n+  f(UseFlatField) \\\n@@ -186,2 +185,2 @@\n-  f(AtomicFieldFlattening) \\\n-  f(NullableFieldFlattening)\n+  f(AtomicValueFlattening) \\\n+  f(NullableValueFlattening)\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-int ciInlineKlass::first_field_offset() const {\n-  GUARDED_VM_ENTRY(return to_InlineKlass()->first_field_offset();)\n+int ciInlineKlass::payload_offset() const {\n+  GUARDED_VM_ENTRY(return to_InlineKlass()->payload_offset();)\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  int first_field_offset() const;\n+  int payload_offset() const;\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-        int offset = field_offset + (flat_field->offset_in_bytes() - vk->first_field_offset());\n+        int offset = field_offset + (flat_field->offset_in_bytes() - vk->payload_offset());\n@@ -818,1 +818,1 @@\n-          int field_offset = fd->offset() - vk->first_field_offset();\n+          int field_offset = fd->offset() - vk->payload_offset();\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1078,1 +1078,1 @@\n-            int field_offset = fd->offset() - vk->first_field_offset();\n+            int field_offset = fd->offset() - vk->payload_offset();\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5482,1 +5482,1 @@\n-    vk->set_first_field_offset(_layout_info->_first_field_offset);\n+    vk->set_payload_offset(_layout_info->_payload_offset);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  int _first_field_offset;\n+  int _payload_offset;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    if (NullableFieldFlattening && vk->has_nullable_atomic_layout()) {\n+    if (NullableValueFlattening && vk->has_nullable_atomic_layout()) {\n@@ -401,1 +401,1 @@\n-    int nm_offset = block->inline_klass()->null_marker_offset() - block->inline_klass()->first_field_offset() + block->offset();\n+    int nm_offset = block->inline_klass()->null_marker_offset() - block->inline_klass()->payload_offset() + block->offset();\n@@ -726,1 +726,1 @@\n-  _first_field_offset(-1),\n+  _payload_offset(-1),\n@@ -1088,1 +1088,1 @@\n-    _first_field_offset = _layout->first_field_block()->offset();\n+    _payload_offset = _layout->first_field_block()->offset();\n@@ -1092,1 +1092,1 @@\n-    _first_field_offset = _layout->blocks()->size();\n+    _payload_offset = _layout->blocks()->size();\n@@ -1108,3 +1108,1 @@\n-    if (true) { \/\/ TODO: Use this workaround as long as C2 only supports LayoutKind::NON_ATOMIC_FLAT\n-    \/\/ if ((InlineFieldMaxFlatSize < 0 || _payload_size_in_bytes * BitsPerByte <= InlineFieldMaxFlatSize)\n-    \/\/      && (!_must_be_atomic || _is_naturally_atomic)) {\n+    if (NonAtomicValueFlattening && !AlwaysAtomicAccesses && (!_must_be_atomic || _is_naturally_atomic)) {\n@@ -1116,1 +1114,1 @@\n-    if (AtomicFieldFlattening) {\n+    if (AtomicValueFlattening) {\n@@ -1118,2 +1116,1 @@\n-      if (  atomic_size <= (int)MAX_ATOMIC_OP_SIZE\n-          && (InlineFieldMaxFlatSize < 0 || atomic_size * BitsPerByte <= InlineFieldMaxFlatSize)) {\n+      if (atomic_size <= (int)MAX_ATOMIC_OP_SIZE && UseFlatField) {\n@@ -1125,1 +1122,1 @@\n-    if (NullableFieldFlattening) {\n+    if (NullableValueFlattening) {\n@@ -1160,2 +1157,1 @@\n-      if (nullable_size <= (int)MAX_ATOMIC_OP_SIZE\n-        && (InlineFieldMaxFlatSize < 0 || nullable_size * BitsPerByte <= InlineFieldMaxFlatSize)) {\n+      if (nullable_size <= (int)MAX_ATOMIC_OP_SIZE && UseFlatField) {\n@@ -1192,1 +1188,1 @@\n-        _first_field_offset = _layout->first_field_block()->offset();\n+        _payload_offset = _layout->first_field_block()->offset();\n@@ -1227,1 +1223,1 @@\n-  int diff = offset - vklass->first_field_offset();\n+  int diff = offset - vklass->payload_offset();\n@@ -1300,1 +1296,1 @@\n-    _info->_first_field_offset = _first_field_offset;\n+    _info->_payload_offset = _payload_offset;\n@@ -1365,1 +1361,1 @@\n-      st.print_cr(\"First field offset = %d\", _first_field_offset);\n+      st.print_cr(\"First field offset = %d\", _payload_offset);\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-  int _first_field_offset;\n+  int _payload_offset;\n@@ -321,1 +321,1 @@\n-  int first_field_offset() const               { assert(_first_field_offset != -1, \"Uninitialized\"); return _first_field_offset; }\n+  int payload_offset() const               { assert(_payload_offset != -1, \"Uninitialized\"); return _payload_offset; }\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5534,1 +5534,1 @@\n-  if (Arguments::enable_preview() && NullableFieldFlattening && (InlineFieldMaxFlatSize >= 64 || InlineFieldMaxFlatSize < 0)) {\n+  if (Arguments::enable_preview() && NullableValueFlattening && UseFlatField) {\n@@ -5542,1 +5542,1 @@\n-  if (Arguments::enable_preview() && NullableFieldFlattening && (InlineFieldMaxFlatSize >= 64 || InlineFieldMaxFlatSize < 0)) {\n+  if (Arguments::enable_preview() && NullableValueFlattening && UseFlatField) {\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        int off = access.offset().opr().as_jint() + field->offset_in_bytes() - vk->first_field_offset();\n+        int off = access.offset().opr().as_jint() + field->offset_in_bytes() - vk->payload_offset();\n@@ -73,1 +73,1 @@\n-        int inner_off = field->offset_in_bytes() - vk->first_field_offset();\n+        int inner_off = field->offset_in_bytes() - vk->payload_offset();\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/modRefBarrierSetC1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        int field_offset = vt->field_offset(i) - vk->first_field_offset();\n+        int field_offset = vt->field_offset(i) - vk->payload_offset();\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/modRefBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-    const address dst_oop_addr_offset = ((address) dst) - md->first_field_offset();\n+    const address dst_oop_addr_offset = ((address) dst) - md->payload_offset();\n","filename":"src\/hotspot\/share\/gc\/shared\/modRefBarrierSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -502,1 +502,1 @@\n-    const address src_oop_addr_offset = ((address) src) - md->first_field_offset();\n+    const address src_oop_addr_offset = ((address) src) - md->payload_offset();\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -587,1 +587,1 @@\n-    int offset2 = offset + fd.offset() - vklass->first_field_offset();\n+    int offset2 = offset + fd.offset() - vklass->payload_offset();\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-  assert(element_klass->must_be_atomic() || (!InlineArrayAtomicAccess), \"Atomic by-default\");\n+  assert(element_klass->must_be_atomic() || (!AlwaysAtomicAccesses), \"Atomic by-default\");\n@@ -307,1 +307,1 @@\n-          vk->copy_payload_to_addr(src, vk->data_for_oop(buffer), fsk->layout_kind(), true);\n+          vk->copy_payload_to_addr(src, vk->payload_addr(buffer), fsk->layout_kind(), true);\n@@ -310,1 +310,1 @@\n-            vk->mark_payload_as_non_null(vk->data_for_oop(buffer));\n+            vk->mark_payload_as_non_null(vk->payload_addr(buffer));\n@@ -312,1 +312,1 @@\n-          vk->copy_payload_to_addr(vk->data_for_oop(buffer), dst, fdk->layout_kind(), true);\n+          vk->copy_payload_to_addr(vk->payload_addr(buffer), dst, fdk->layout_kind(), true);\n@@ -424,1 +424,1 @@\n-    oop obj = cast_to_oop((address)va->value_at_addr(index, layout_helper()) - vk->first_field_offset());\n+    oop obj = cast_to_oop((address)va->value_at_addr(index, layout_helper()) - vk->payload_offset());\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  const int oop_offset = element_klass()->first_field_offset();\n+  const int oop_offset = element_klass()->payload_offset();\n@@ -71,1 +71,1 @@\n-  const int oop_offset = element_klass()->first_field_offset();\n+  const int oop_offset = element_klass()->payload_offset();\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  set_first_field_offset(-1);\n+  set_payload_offset(-1);\n@@ -149,1 +149,1 @@\n-    case PAYLOAD:\n+    case BUFFERED:\n@@ -171,1 +171,1 @@\n-    case LayoutKind::PAYLOAD:\n+    case LayoutKind::BUFFERED:\n@@ -190,1 +190,1 @@\n-    case LayoutKind::PAYLOAD:\n+    case LayoutKind::BUFFERED:\n@@ -210,1 +210,1 @@\n-          HeapAccess<>::value_copy(data_for_oop(null_reset_value()), dst, this, lk);\n+          HeapAccess<>::value_copy(payload_addr(null_reset_value()), dst, this, lk);\n@@ -212,1 +212,1 @@\n-          HeapAccess<IS_DEST_UNINITIALIZED>::value_copy(data_for_oop(null_reset_value()), dst, this, lk);\n+          HeapAccess<IS_DEST_UNINITIALIZED>::value_copy(payload_addr(null_reset_value()), dst, this, lk);\n@@ -225,1 +225,1 @@\n-    case PAYLOAD:\n+    case BUFFERED:\n@@ -250,1 +250,1 @@\n-    case PAYLOAD:\n+    case BUFFERED:\n@@ -258,1 +258,1 @@\n-      copy_payload_to_addr((void*)((char*)(oopDesc*)obj_h() + offset), data_for_oop(res), lk, false);\n+      copy_payload_to_addr((void*)((char*)(oopDesc*)obj_h() + offset), payload_addr(res), lk, false);\n@@ -260,1 +260,1 @@\n-        if(is_payload_marked_as_null(data_for_oop(res))) {\n+        if(is_payload_marked_as_null(payload_addr(res))) {\n@@ -289,1 +289,1 @@\n-    src_addr = data_for_oop(null_reset_value());\n+    src_addr = payload_addr(null_reset_value());\n@@ -291,1 +291,1 @@\n-    src_addr = data_for_oop(src);\n+    src_addr = payload_addr(src);\n@@ -305,5 +305,0 @@\n-  \/\/ Too big\n-  int elem_bytes = payload_size_in_bytes();\n-  if ((FlatArrayElementMaxSize >= 0) && (elem_bytes > FlatArrayElementMaxSize)) {\n-    return false;\n-  }\n@@ -318,2 +313,2 @@\n-  \/\/ VM enforcing InlineArrayAtomicAccess only...\n-  if (InlineArrayAtomicAccess && (!is_naturally_atomic())) {\n+  \/\/ VM enforcing AlwaysAtomicAccess only...\n+  if (AlwaysAtomicAccesses && (!is_naturally_atomic())) {\n@@ -427,1 +422,1 @@\n-    int offset = base_off + fs.offset() - (base_off > 0 ? first_field_offset() : 0);\n+    int offset = base_off + fs.offset() - (base_off > 0 ? payload_offset() : 0);\n@@ -433,1 +428,1 @@\n-        field_null_marker_offset = base_off + fs.null_marker_offset() - (base_off > 0 ? first_field_offset() : 0);\n+        field_null_marker_offset = base_off + fs.null_marker_offset() - (base_off > 0 ? payload_offset() : 0);\n@@ -450,1 +445,1 @@\n-  int offset = base_off + size_helper()*HeapWordSize - (base_off > 0 ? first_field_offset() : 0);\n+  int offset = base_off + size_helper()*HeapWordSize - (base_off > 0 ? payload_offset() : 0);\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":17,"deletions":22,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  address adr_first_field_offset() const {\n+  address adr_payload_offset() const {\n@@ -126,1 +126,1 @@\n-    return ((address)_adr_inlineklass_fixed_block) + in_bytes(byte_offset_of(InlineKlassFixedBlock, _first_field_offset));\n+    return ((address)_adr_inlineklass_fixed_block) + in_bytes(byte_offset_of(InlineKlassFixedBlock, _payload_offset));\n@@ -169,2 +169,2 @@\n-  int first_field_offset() const {\n-    int offset = *(int*)adr_first_field_offset();\n+  int payload_offset() const {\n+    int offset = *(int*)adr_payload_offset();\n@@ -172,1 +172,1 @@\n-    return *(int*)adr_first_field_offset();\n+    return *(int*)adr_payload_offset();\n@@ -175,1 +175,1 @@\n-  void set_first_field_offset(int offset) { *(int*)adr_first_field_offset() = offset; }\n+  void set_payload_offset(int offset) { *(int*)adr_payload_offset() = offset; }\n@@ -197,1 +197,1 @@\n-  int null_marker_offset_in_payload() const { return null_marker_offset() - first_field_offset(); }\n+  int null_marker_offset_in_payload() const { return null_marker_offset() - payload_offset(); }\n@@ -260,1 +260,1 @@\n-  address data_for_oop(oop o) const;\n+  address payload_addr(oop o) const;\n@@ -277,1 +277,1 @@\n-  \/\/ of a null marker). Reminder: the PAYLOAD layout, used in values buffered in heap,\n+  \/\/ of a null marker). Reminder: the BUFFERED layout, used in values buffered in heap,\n@@ -334,2 +334,2 @@\n-  static ByteSize first_field_offset_offset() {\n-    return byte_offset_of(InlineKlassFixedBlock, _first_field_offset);\n+  static ByteSize payload_offset_offset() {\n+    return byte_offset_of(InlineKlassFixedBlock, _payload_offset);\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-inline address InlineKlass::data_for_oop(oop o) const {\n-  return ((address) (void*) o) + first_field_offset();\n+inline address InlineKlass::payload_addr(oop o) const {\n+  return ((address) (void*) o) + payload_offset();\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2077,1 +2077,1 @@\n-    return offset >= vk->first_field_offset() && offset < (vk->first_field_offset() + vk->payload_size_in_bytes());\n+    return offset >= vk->payload_offset() && offset < (vk->payload_offset() + vk->payload_size_in_bytes());\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-  int _first_field_offset;\n+  int _payload_offset;          \/\/ offset of the begining of the payload in a heap buffered instance\n@@ -162,1 +162,1 @@\n-                                \/\/ first_field_offset must be subtracted to get the offset from the beginning of the payload\n+                                \/\/ payload_offset must be subtracted to get the offset from the beginning of the payload\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,45 @@\n+\/\/ LayoutKind is an enum used to indicate which layout has been used for a given value field.\n+\/\/ Each layout has its own properties and its own access protocol that is detailed below.\n+\/\/\n+\/\/ REFERENCE : this layout uses a pointer to a heap allocated instance (no flattening).\n+\/\/             When used, field_flags().is_flat() is false . The field can be nullable or\n+\/\/             null-restricted, in the later case, field_flags().is_null_free_inline_type() is true.\n+\/\/             In case of a null-restricted field, putfield  and putstatic  must perform a null-check\n+\/\/             before writing a new value. Still for null-restricted fields, if getfield reads a null pointer\n+\/\/             from the receiver, it means that the field was not initialized yet, and getfield must substitute\n+\/\/             the null reference with the default value of the field's class.\n+\/\/ NON_ATOMIC_FLAT : this layout is the simplest form of flattening. Any field embedded inside the flat field\n+\/\/             can be accessed independently. The field is null-restricted, meaning putfield must perform a\n+\/\/             null-check before performing a field update.\n+\/\/ ATOMIC_FLAT : this flat layout is designed for atomic updates, with size and alignment that make use of\n+\/\/             atomic instructions possible. All accesses, reads and writes, must be performed atomically.\n+\/\/             The field is null-restricted, meaning putfield must perform a null-check before performing a\n+\/\/             field update.\n+\/\/ NULLABLE_ATOMIC_FLAT : this is the flat layout designed for JEP 401. It is designed for atomic updates,\n+\/\/             with size and alignment that make use of atomic instructions possible. All accesses, reads and\n+\/\/             writes, must be performed atomically. The layout includes a null marker which indicates if the\n+\/\/             field's value must be considered as null or not. The null marker is a byte, with the value zero\n+\/\/             meaning the field's value is null, and a non-zero value meaning the field's value is not null.\n+\/\/             A getfield must check the value of the null marker before returning a value. If the null marker\n+\/\/             is zero, getfield  must return the null reference, otherwise it returns the field's value read\n+\/\/             from the receiver. When a putfield writes a non-null value to such field, the update, including\n+\/\/             the field's value and the null marker, must be performed in a single atomic operation. If the\n+\/\/             source of the value is a heap allocated instance of the field's class, it is allowed to set the\n+\/\/             null marker to non-zero in the heap allocated instance before copying the value to the receiver\n+\/\/             (the BUFFERED layout used in heap allocated values guarantees that the space for the null marker\n+\/\/             is included, but has no meaning for the heap allocated instance which is always non-null, and that\n+\/\/             the whole payload is correctly aligned for atomic operations). When a putfield writes null to such\n+\/\/             field, the null marker must be set to zero. However, if the field contains oops, those oops must be\n+\/\/             cleared too in order to prevent memory leaks. In order to simplify such operation, value classes\n+\/\/             supporting a NULLABLE_ATOMIC_FLAT layout have a pre-allocated reset value instance, filled with\n+\/\/             zeros, which can be used to simply overwrite the whole flat field and reset everything (oops and\n+\/\/             null marker). The reset value instance is needed because the VM needs an instance guaranteed to\n+\/\/             always be filled with zeros, and the default value could have its null marker set to non-zero if\n+\/\/             it is used as a source to update a NULLABLE_ATOMIC_FLAT field.\n+\/\/ BUFFERED: this layout is only used in heap buffered instances of a value class. It is computed to be compatible\n+\/\/             to be compatible in size and alignment with all other flat layouts supported by the value class.\n+\/\/\n+\/\/\n+\/\/ IMPORTANT: The REFERENCE layout must always be associated with the numerical value zero, because the implementation\n+\/\/ of the lava.lang.invoke.MemberName class relies on this property.\n+\n@@ -30,1 +75,1 @@\n-  PAYLOAD              = 1,    \/\/ layout used in heap allocated standalone instances, probably temporary for the transition\n+  BUFFERED             = 1,    \/\/ layout used in heap allocated standalone instances\n","filename":"src\/hotspot\/share\/oops\/layoutKind.hpp","additions":46,"deletions":1,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -432,1 +432,1 @@\n-      int off_in_vt = field->offset_in_bytes() - vk->first_field_offset();\n+      int off_in_vt = field->offset_in_bytes() - vk->payload_offset();\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1756,1 +1756,1 @@\n-        field_offset += vk->first_field_offset();\n+        field_offset += vk->payload_offset();\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3520,1 +3520,1 @@\n-          field_offset += vk->first_field_offset();\n+          field_offset += vk->payload_offset();\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4111,1 +4111,1 @@\n-          int off_in_vt = field->offset_in_bytes() - vk->first_field_offset();\n+          int off_in_vt = field->offset_in_bytes() - vk->payload_offset();\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-      int flat_holder_offset = holder_offset + field_offset(i) - value->inline_klass()->first_field_offset();\n+      int flat_holder_offset = holder_offset + field_offset(i) - value->inline_klass()->payload_offset();\n@@ -241,1 +241,1 @@\n-      sub_offset += vt->inline_klass()->first_field_offset(); \/\/ Add header size\n+      sub_offset += vt->inline_klass()->payload_offset(); \/\/ Add header size\n@@ -602,1 +602,1 @@\n-    int offset = holder_offset + field_offset(i) - inline_klass()->first_field_offset();\n+    int offset = holder_offset + field_offset(i) - inline_klass()->payload_offset();\n@@ -604,1 +604,1 @@\n-      null_marker_offset = holder_offset + field_null_marker_offset(i) - inline_klass()->first_field_offset();\n+      null_marker_offset = holder_offset + field_null_marker_offset(i) - inline_klass()->payload_offset();\n@@ -673,1 +673,1 @@\n-    int inner_offset = field_offset(i) - inline_klass()->first_field_offset();\n+    int inner_offset = field_offset(i) - inline_klass()->payload_offset();\n@@ -676,1 +676,1 @@\n-      null_marker_offset = holder_offset + field_null_marker_offset(i) - inline_klass()->first_field_offset();\n+      null_marker_offset = holder_offset + field_null_marker_offset(i) - inline_klass()->payload_offset();\n@@ -760,1 +760,1 @@\n-  holder_offset -= inline_klass()->first_field_offset();\n+  holder_offset -= inline_klass()->payload_offset();\n@@ -1252,1 +1252,1 @@\n-  holder_offset -= vk->first_field_offset();\n+  holder_offset -= vk->payload_offset();\n@@ -1357,1 +1357,1 @@\n-        base = vt->as_InlineType()->is_loaded(phase, vk, base, offset - vt->type()->inline_klass()->first_field_offset());\n+        base = vt->as_InlineType()->is_loaded(phase, vk, base, offset - vt->type()->inline_klass()->payload_offset());\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -573,1 +573,1 @@\n-  offset -= vk->first_field_offset();\n+  offset -= vk->payload_offset();\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3655,1 +3655,1 @@\n-        int foffset = field_offset.get() + vk->first_field_offset();\n+        int foffset = field_offset.get() + vk->payload_offset();\n@@ -5599,1 +5599,1 @@\n-      ciField* field = vk->get_field_by_offset(field_offset + vk->first_field_offset(), false);\n+      ciField* field = vk->get_field_by_offset(field_offset + vk->payload_offset(), false);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -355,1 +355,1 @@\n-  return vk->first_field_offset();\n+  return vk->payload_offset();\n@@ -501,1 +501,1 @@\n-  vk->copy_payload_to_addr(vk->data_for_oop(vh()), vk->data_for_oop(new_value), LayoutKind::PAYLOAD, false);\n+  vk->copy_payload_to_addr(vk->payload_addr(vh()), vk->payload_addr(new_value), LayoutKind::BUFFERED, false);\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1551,1 +1551,1 @@\n-      offset -= InlineKlass::cast(vk)->first_field_offset(); \/\/ Adjust offset to omit oop header\n+      offset -= InlineKlass::cast(vk)->payload_offset(); \/\/ Adjust offset to omit oop header\n@@ -1650,1 +1650,1 @@\n-  int base_offset = arrayOopDesc::base_offset_in_bytes(T_FLAT_ELEMENT) - InlineKlass::cast(vk)->first_field_offset();\n+  int base_offset = arrayOopDesc::base_offset_in_bytes(T_FLAT_ELEMENT) - InlineKlass::cast(vk)->payload_offset();\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-        int field_offset = offset() - vk->first_field_offset();\n+        int field_offset = offset() - vk->payload_offset();\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -808,2 +808,2 @@\n-  product(intx, FlatArrayElementMaxSize, -1,                                \\\n-          \"Max size for flattening inline array elements, <0 no limit\")     \\\n+  product(bool, UseFlatArray, true,                                         \\\n+          \"Allow the VM to flatten arrays\")                                 \\\n@@ -811,2 +811,2 @@\n-  product(intx, InlineFieldMaxFlatSize, 128,                                \\\n-          \"Max size for flattening inline type fields, <0 no limit\")        \\\n+  product(bool, UseFlatField, true,                                         \\\n+          \"Allow the VM to flatten value fields\")                           \\\n@@ -814,1 +814,4 @@\n-  product(bool, NullableFieldFlattening, false,                             \\\n+  product(bool, NonAtomicValueFlattening, true,                             \\\n+          \"Allow the JVM to flatten some non-atomic null-free fields\")      \\\n+                                                                            \\\n+  product(bool, NullableValueFlattening, false,                             \\\n@@ -817,1 +820,1 @@\n-  product(bool, AtomicFieldFlattening, false,                               \\\n+  product(bool, AtomicValueFlattening, false,                               \\\n@@ -823,3 +826,0 @@\n-  product(bool, InlineArrayAtomicAccess, false,                             \\\n-          \"Atomic inline array accesses by-default, for all inline arrays\") \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1294,1 +1294,1 @@\n-      int fields_offset = offset + (class_cache_entry->offset(idx) - field_klass->first_field_offset());\n+      int fields_offset = offset + (class_cache_entry->offset(idx) - field_klass->payload_offset());\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1366,7 +1366,0 @@\n-\/\/ TEMP!!!!\n-\/\/ This should be removed after LW2 arrays are implemented (JDK-8220790).\n-\/\/ It's an alias to (EnableValhalla && (FlatArrayElementMaxSize != 0)),\n-\/\/ which is actually not 100% correct, but works for the current set of C1\/C2\n-\/\/ implementation and test cases.\n-#define UseFlatArray (EnableValhalla && (FlatArrayElementMaxSize != 0))\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-                         \"-XX:FlatArrayElementMaxSize=-1\",\n+                         \"-XX:+UseFlatArray\",\n@@ -47,1 +47,1 @@\n-                         \"-XX:InlineFieldMaxFlatSize=-1\",\n+                         \"-XX:+UseFlatField\",\n@@ -60,1 +60,1 @@\n-                         \"-XX:FlatArrayElementMaxSize=-1\",\n+                         \"-XX:+UseFlatArray\",\n@@ -62,1 +62,1 @@\n-                         \"-XX:InlineFieldMaxFlatSize=-1\",\n+                         \"-XX:+UseFlatField\",\n@@ -75,1 +75,1 @@\n-                         \"-XX:FlatArrayElementMaxSize=0\",\n+                         \"-XX:-UseFlatArray\",\n@@ -77,1 +77,1 @@\n-                         \"-XX:InlineFieldMaxFlatSize=-1\",\n+                         \"-XX:+UseFlatField\",\n@@ -91,2 +91,2 @@\n-                         \"-XX:FlatArrayElementMaxSize=0\",\n-                         \"-XX:InlineFieldMaxFlatSize=0\",\n+                         \"-XX:-UseFlatArray\",\n+                         \"-XX:-UseFlatField\",\n@@ -104,2 +104,2 @@\n-                         \"-XX:FlatArrayElementMaxSize=-1\",\n-                         \"-XX:InlineFieldMaxFlatSize=0\",\n+                         \"-XX:+UseFlatArray\",\n+                         \"-XX:-UseFlatField\",\n@@ -119,1 +119,1 @@\n-                         \"-XX:FlatArrayElementMaxSize=-1\",\n+                         \"-XX:+UseFlatArray\",\n@@ -121,1 +121,1 @@\n-                         \"-XX:InlineFieldMaxFlatSize=-1\",\n+                         \"-XX:+UseFlatField\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypes.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- *                   -Xbatch -XX:FlatArrayElementMaxSize=0\n+ *                   -Xbatch -XX:-UseFlatArray\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayCopyWithOops.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        scenarios[3].addFlags(\"--enable-preview\", \"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\", \"-XX:-UncommonNullCast\");\n+        scenarios[3].addFlags(\"--enable-preview\", \"-XX:-MonomorphicArrayCheck\", \"-XX:+UseFlatArray\", \"-XX:-UncommonNullCast\");\n@@ -146,1 +146,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -148,1 +148,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -768,1 +768,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -770,1 +770,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -1884,1 +1884,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -1886,1 +1886,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -1905,1 +1905,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -1907,1 +1907,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -1986,1 +1986,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -1989,1 +1989,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2447,1 +2447,1 @@\n-    @IR(applyIfAnd = {\"FlatArrayElementMaxSize\", \"= -1\", \"MonomorphicArrayCheck\", \"true\"},\n+    @IR(applyIfAnd = {\"UseFlatArray\", \"true\", \"MonomorphicArrayCheck\", \"true\"},\n@@ -2479,1 +2479,1 @@\n-    @IR(applyIfAnd = {\"FlatArrayElementMaxSize\", \"= -1\", \"MonomorphicArrayCheck\", \"true\"},\n+    @IR(applyIfAnd = {\"UseFlatArray\", \"true\", \"MonomorphicArrayCheck\", \"true\"},\n@@ -2512,1 +2512,1 @@\n-    @IR(applyIfAnd = {\"FlatArrayElementMaxSize\", \"= -1\", \"MonomorphicArrayCheck\", \"true\"},\n+    @IR(applyIfAnd = {\"UseFlatArray\", \"true\", \"MonomorphicArrayCheck\", \"true\"},\n@@ -2616,1 +2616,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -2618,1 +2618,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2689,1 +2689,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -2691,1 +2691,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2706,1 +2706,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2760,1 +2760,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -2762,1 +2762,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2830,1 +2830,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -2832,1 +2832,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2847,1 +2847,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -3063,1 +3063,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -3066,1 +3066,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -3102,1 +3102,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -698,1 +698,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -790,1 +790,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -824,1 +824,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:-UseFlatField -XX:-UseFlatArray\n@@ -50,1 +50,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:-UseFlatField -XX:-UseFlatArray\n@@ -54,1 +54,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:-UseFlatField -XX:-UseFlatArray\n@@ -58,1 +58,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:-UseFlatField -XX:-UseFlatArray\n@@ -64,1 +64,1 @@\n- * @run main\/othervm -XX:+NullableFieldFlattening\n+ * @run main\/othervm -XX:+NullableValueFlattening\n@@ -67,1 +67,1 @@\n- * @run main\/othervm -XX:+NullableFieldFlattening\n+ * @run main\/othervm -XX:+NullableValueFlattening\n@@ -71,1 +71,1 @@\n- * @run main\/othervm -XX:+NullableFieldFlattening\n+ * @run main\/othervm -XX:+NullableValueFlattening\n@@ -75,1 +75,1 @@\n- * @run main\/othervm -XX:+NullableFieldFlattening\n+ * @run main\/othervm -XX:+NullableValueFlattening\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearing.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:+UseFlatField -XX:+UseFlatArray\n@@ -36,1 +36,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:+UseFlatField -XX:+UseFlatArray\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearingC1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        scenarios[3].addFlags(\"-XX:FlatArrayElementMaxSize=0\");\n+        scenarios[3].addFlags(\"-XX:-UseFlatArray\");\n@@ -1337,1 +1337,1 @@\n-    static long expectedFlatArrayElementMaxSize = WHITE_BOX.getIntxVMFlag(\"FlatArrayElementMaxSize\");\n+    static boolean expectedUseFlatArray = WHITE_BOX.getBooleanVMFlag(\"UseFlatArray\");\n@@ -1341,2 +1341,2 @@\n-    public long test57() {\n-        return WHITE_BOX.getIntxVMFlag(\"FlatArrayElementMaxSize\");\n+    public boolean test57() {\n+        return WHITE_BOX.getBooleanVMFlag(\"UseFlatArray\");\n@@ -1347,1 +1347,1 @@\n-        Asserts.assertEQ(test57(), expectedFlatArrayElementMaxSize);\n+        Asserts.assertEQ(test57(), expectedUseFlatArray);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- *                   -XX:-InlineTypePassFieldsAsArgs -XX:-InlineTypeReturnedAsFields -XX:FlatArrayElementMaxSize=1\n+ *                   -XX:-InlineTypePassFieldsAsArgs -XX:-InlineTypeReturnedAsFields -XX:+UseFlatArray\n@@ -62,1 +62,1 @@\n- *                   -XX:-InlineTypePassFieldsAsArgs -XX:-InlineTypeReturnedAsFields -XX:FlatArrayElementMaxSize=1\n+ *                   -XX:-InlineTypePassFieldsAsArgs -XX:-InlineTypeReturnedAsFields -XX:+UseFlatArray\n@@ -67,1 +67,1 @@\n- *                   -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:FlatArrayElementMaxSize=-1\n+ *                   -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:+UseFlatArray\n@@ -72,1 +72,1 @@\n- *                   -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:FlatArrayElementMaxSize=-1\n+ *                   -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:+UseFlatArray\n@@ -77,1 +77,1 @@\n- *                   -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:FlatArrayElementMaxSize=-1 -XX:InlineFieldMaxFlatSize=0\n+ *                   -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:+UseFlatArray -XX:-UseFlatField\n@@ -82,1 +82,1 @@\n- *                   -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:FlatArrayElementMaxSize=-1 -XX:InlineFieldMaxFlatSize=0\n+ *                   -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields -XX:+UseFlatArray -XX:-UseFlatField\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run main\/othervm -Xbatch -XX:+NullableFieldFlattening -XX:+AtomicFieldFlattening\n+ * @run main\/othervm -Xbatch -XX:+NullableValueFlattening -XX:+AtomicValueFlattening\n@@ -45,1 +45,1 @@\n- * @run main\/othervm -Xbatch -XX:+NullableFieldFlattening -XX:+AtomicFieldFlattening\n+ * @run main\/othervm -Xbatch -XX:+NullableValueFlattening -XX:+AtomicValueFlattening\n@@ -48,1 +48,1 @@\n- * @run main\/othervm -Xbatch -XX:+NullableFieldFlattening -XX:+AtomicFieldFlattening\n+ * @run main\/othervm -Xbatch -XX:+NullableValueFlattening -XX:+AtomicValueFlattening\n@@ -51,1 +51,1 @@\n- * @run main\/othervm -Xbatch -XX:+NullableFieldFlattening -XX:+AtomicFieldFlattening\n+ * @run main\/othervm -Xbatch -XX:+NullableValueFlattening -XX:+AtomicValueFlattening\n@@ -54,1 +54,1 @@\n- * @run main\/othervm -Xbatch -XX:+NullableFieldFlattening -XX:+AtomicFieldFlattening\n+ * @run main\/othervm -Xbatch -XX:+NullableValueFlattening -XX:+AtomicValueFlattening\n@@ -57,1 +57,1 @@\n- * @run main\/othervm -Xbatch -XX:+NullableFieldFlattening -XX:+AtomicFieldFlattening\n+ * @run main\/othervm -Xbatch -XX:+NullableValueFlattening -XX:+AtomicValueFlattening\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFieldNullMarkers.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=1 -Xbatch\n+ * @run main\/othervm -XX:+UseFlatArray -Xbatch\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayThreshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-        Scenario flatArrayElementMaxSize1Scenario = new Scenario(1, \"-XX:FlatArrayElementMaxSize=1\");\n-        Scenario flatArrayElementMaxSize4Scenario = new Scenario(2, \"-XX:FlatArrayElementMaxSize=4\");\n+        Scenario flatArrayElementMaxSize1Scenario = new Scenario(1, \"-XX:-UseFlatArray\");\n+        Scenario flatArrayElementMaxSize4Scenario = new Scenario(2, \"-XX:-UseFlatArray\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatInArraysFolding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm -Xbatch -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -Xbatch -XX:-UseFlatArray\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- *                   -XX:InlineFieldMaxFlatSize=0\n+ *                   -XX:-UseFlatField\n@@ -101,1 +101,1 @@\n-                               \"-XX:InlineFieldMaxFlatSize=0\")\n+                               \"-XX:-UseFlatField\")\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestInlineFieldNonFlattened.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\");\n+        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:+UseFlatArray\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\");\n+        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:+UseFlatArray\");\n@@ -2343,1 +2343,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -2345,1 +2345,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2365,1 +2365,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"UseFlatArray\", \"true\"},\n@@ -2367,1 +2367,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"UseFlatArray\", \"true\"},\n@@ -2388,1 +2388,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"UseFlatArray\", \"true\"},\n@@ -2390,1 +2390,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"UseFlatArray\", \"true\"},\n@@ -2410,1 +2410,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -2412,1 +2412,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2434,1 +2434,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -2436,1 +2436,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2512,1 +2512,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -2581,1 +2581,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -2971,1 +2971,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"UseFlatArray\", \"true\"},\n@@ -2974,1 +2974,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"UseFlatArray\", \"true\"},\n@@ -3002,1 +3002,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIfAnd = {\"UseG1GC\", \"true\", \"UseFlatArray\", \"true\"},\n@@ -3005,1 +3005,1 @@\n-    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIfAnd = {\"UseG1GC\", \"false\", \"UseFlatArray\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:+UseFlatArray\",\n@@ -64,1 +64,1 @@\n-                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:+UseFlatArray\",\n@@ -68,1 +68,1 @@\n-                        \"-XX:InlineFieldMaxFlatSize=256\"),\n+                        \"-XX:+UseFlatField\"),\n@@ -70,1 +70,1 @@\n-                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:+UseFlatArray\",\n@@ -76,1 +76,1 @@\n-                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:+UseFlatArray\",\n@@ -84,1 +84,1 @@\n-                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:+UseFlatArray\",\n@@ -90,1 +90,1 @@\n-                        \"-XX:InlineFieldMaxFlatSize=256\"),\n+                        \"-XX:+UseFlatField\"),\n@@ -92,1 +92,1 @@\n-                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:+UseFlatArray\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -93,1 +93,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"false\"},\n@@ -2272,1 +2272,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -3141,1 +3141,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n@@ -3173,1 +3173,1 @@\n-    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+    @IR(applyIf = {\"UseFlatArray\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\");\n+        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:+UseFlatArray\");\n@@ -692,1 +692,1 @@\n-    @IR(applyIfAnd = {\"FlatArrayElementMaxSize\", \"= -1\", \"InlineTypePassFieldsAsArgs\", \"true\"},\n+    @IR(applyIfAnd = {\"UseFlatArray\", \"true\", \"InlineTypePassFieldsAsArgs\", \"true\"},\n@@ -694,1 +694,1 @@\n-    @IR(applyIfAnd = {\"FlatArrayElementMaxSize\", \"= 0\", \"InlineTypePassFieldsAsArgs\", \"false\"},\n+    @IR(applyIfAnd = {\"UseFlatArray\", \"false\", \"InlineTypePassFieldsAsArgs\", \"false\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        scenarios[3].addFlags(\"-XX:FlatArrayElementMaxSize=0\");\n+        scenarios[3].addFlags(\"-XX:-UseFlatArray\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm -Xcomp -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -Xcomp -XX:-UseFlatArray\n@@ -41,1 +41,1 @@\n- * @run main\/othervm -Xcomp -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -Xcomp -XX:-UseFlatArray\n@@ -46,1 +46,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:-UseFlatArray\n@@ -51,1 +51,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:-UseFlatArray\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-                new Scenario(1, \"-XX:InlineFieldMaxFlatSize=0\"),\n+                new Scenario(1, \"-XX:-UseFlatField\"),\n@@ -61,1 +61,1 @@\n-                new Scenario(3, \"-XX:InlineFieldMaxFlatSize=0\",\n+                new Scenario(3, \"-XX:-UseFlatField\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\");\n+        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:+UseFlatArray\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        nullableLayoutEnabled = arguments.contains(\"-XX:+NullableFieldFlattening\");\n+        nullableLayoutEnabled = arguments.contains(\"-XX:+NullableValueFlattening\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/AnnotationsTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=128 runtime.valhalla.inlinetypes.EmptyInlineTest\n+ * @run main\/othervm -XX:+UseFlatField runtime.valhalla.inlinetypes.EmptyInlineTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/EmptyInlineTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n- * @run main\/othervm -Xint -XX:FlatArrayElementMaxSize=-1 -XX:InlineFieldMaxFlatSize=-1 -XX:+AtomicFieldFlattening -XX:+NullableFieldFlattening runtime.valhalla.inlinetypes.FlatArraysTest\n- * @run main\/othervm -Xint -XX:FlatArrayElementMaxSize=0 -XX:+AtomicFieldFlattening -XX:+NullableFieldFlattening runtime.valhalla.inlinetypes.FlatArraysTest\n+ * @run main\/othervm -Xint -XX:+UseFlatArray -XX:+UseFlatField -XX:+AtomicValueFlattening -XX:+NullableValueFlattening runtime.valhalla.inlinetypes.FlatArraysTest\n+ * @run main\/othervm -Xint -XX:-UseFlatArray -XX:+AtomicValueFlattening -XX:+NullableValueFlattening runtime.valhalla.inlinetypes.FlatArraysTest\n@@ -419,1 +419,1 @@\n-    boolean useFlatArray = !arguments.contains(\"-XX:FlatArrayElementMaxSize=0\");\n+    boolean useFlatArray = !arguments.contains(\"-XX:-UseFlatArray\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/FlatArraysTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.FlattenableSemanticTest\n+ * @run main\/othervm -XX:+UseFlatField runtime.valhalla.inlinetypes.FlattenableSemanticTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/FlattenableSemanticTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n- * @run main\/othervm -XX:+UseSerialGC -Xmx128m -XX:InlineFieldMaxFlatSize=128\n+ * @run main\/othervm -XX:+UseSerialGC -Xmx128m -XX:+UseFlatField\n@@ -71,1 +71,1 @@\n- * @run main\/othervm -XX:+UseG1GC -Xmx128m -XX:InlineFieldMaxFlatSize=128\n+ * @run main\/othervm -XX:+UseG1GC -Xmx128m -XX:+UseFlatField\n@@ -87,1 +87,1 @@\n- * @run main\/othervm -XX:+UseParallelGC -Xmx128m -XX:InlineFieldMaxFlatSize=128\n+ * @run main\/othervm -XX:+UseParallelGC -Xmx128m -XX:+UseFlatField\n@@ -104,1 +104,1 @@\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:InlineFieldMaxFlatSize=160\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+UseFlatField\n@@ -121,1 +121,1 @@\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:InlineFieldMaxFlatSize=160\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+UseFlatField\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=-1 -XX:InlineFieldMaxFlatSize=-1 runtime.valhalla.inlinetypes.InlineTypeArray\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=0 runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @run main\/othervm -XX:+UseFlatArray -XX:+UseFlatField runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @run main\/othervm -XX:-UseFlatArray runtime.valhalla.inlinetypes.InlineTypeArray\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=-1 -XX:+UseCompressedOops\n+ * @run main\/othervm -XX:+UseFlatArray -XX:+UseCompressedOops\n@@ -50,1 +50,1 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=-1 -XX:-UseCompressedOops\n+ * @run main\/othervm -XX:+UseFlatArray -XX:-UseCompressedOops\n@@ -53,1 +53,1 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:+UseFlatArray\n@@ -56,1 +56,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UseFlatArray\n@@ -67,2 +67,2 @@\n-        if (WHITE_BOX.getIntxVMFlag(\"FlatArrayElementMaxSize\") != -1) {\n-            throw new IllegalStateException(\"FlatArrayElementMaxSize should be -1\");\n+        if (WHITE_BOX.getBooleanVMFlag(\"UseFlatArray\") != true) {\n+            throw new IllegalStateException(\"UseFlatArray should be true\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeDensity.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm -XX:+NullableFieldFlattening -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlineLayout NullableFlatFieldTest\n+ * @run main\/othervm -XX:+NullableValueFlattening -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlineLayout NullableFlatFieldTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/NullableFlatFieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xmx128m -XX:InlineFieldMaxFlatSize=32\n+ * @run main\/othervm -Xmx128m -XX:+UseFlatField\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldNullability.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.UninitializedInlineFieldsTest\n+ * @run main\/othervm -XX:+UseFlatField runtime.valhalla.inlinetypes.UninitializedInlineFieldsTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UninitializedInlineFieldsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run main\/othervm -Xint -XX:+NullableFieldFlattening -XX:FlatArrayElementMaxSize=-1 -XX:InlineFieldMaxFlatSize=-1 -XX:+PrintInlineLayout -XX:+NullableFieldFlattening runtime.valhalla.inlinetypes.UnsafeTest\n+ * @run main\/othervm -Xint -XX:+NullableValueFlattening -XX:+UseFlatArray -XX:+UseFlatField -XX:+PrintInlineLayout runtime.valhalla.inlinetypes.UnsafeTest\n@@ -161,1 +161,1 @@\n-    \/\/ Requires -XX:+NullableFieldFlattening\n+    \/\/ Requires -XX:+NullableValueFlattening\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UnsafeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- *                   -DSTEP_COUNT=10000 -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n+ *                   -DSTEP_COUNT=10000 -XX:+UseFlatField -XX:+UseFlatArray\n@@ -61,1 +61,1 @@\n- *                   -DSTEP_COUNT=10000 -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n+ *                   -DSTEP_COUNT=10000 -XX:+UseFlatField -XX:+UseFlatArray\n@@ -64,1 +64,1 @@\n- * @run main\/othervm -DSTEP_COUNT=10000000 -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -DSTEP_COUNT=10000000 -XX:+UseFlatField -XX:+UseFlatArray\n@@ -68,1 +68,1 @@\n- *                   -DTEAR_MODE=fieldonly -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n+ *                   -DTEAR_MODE=fieldonly -XX:+UseFlatField -XX:+UseFlatArray\n@@ -72,1 +72,1 @@\n- *                   -DTEAR_MODE=arrayonly -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n+ *                   -DTEAR_MODE=arrayonly -XX:+UseFlatField -XX:+UseFlatArray\n@@ -76,1 +76,1 @@\n- *                   -DTEAR_MODE=both -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n+ *                   -DTEAR_MODE=both -XX:+UseFlatField -XX:+UseFlatArray\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValueTearing.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=128 runtime.valhalla.inlinetypes.VolatileTest\n+ * @run main\/othervm -XX:+UseFlatField runtime.valhalla.inlinetypes.VolatileTest\n@@ -70,1 +70,1 @@\n-        atomicLayoutEnabled = arguments.contains(\"-XX:+AtomicFieldFlattening\");\n+        atomicLayoutEnabled = arguments.contains(\"-XX:+AtomicValueFlattening\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VolatileTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-    Collections.addAll(argsList, \"-XX:+NullableFieldFlattening\");\n+    Collections.addAll(argsList, \"-XX:+NullableValueFlattening\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/NullMarkersTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,276 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test id=TestLayoutFlags_0\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java TestLayoutFlags.java\n+ * @run main\/othervm TestLayoutFlags 0\n+ *\/\n+\n+ \/*\n+ * @test id=TestLayoutFlags_1\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java TestLayoutFlags.java\n+ * @run main\/othervm TestLayoutFlags 1\n+ *\/\n+\n+ \/* @test id=TestLayoutFlags_2\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java TestLayoutFlags.java\n+ * @run main\/othervm TestLayoutFlags 2\n+ *\/\n+\n+ \/* @test id=TestLayoutFlags_3\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java TestLayoutFlags.java\n+ * @run main\/othervm TestLayoutFlags 3\n+ *\/\n+\n+\/* @test id=TestLayoutFlags_4\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java TestLayoutFlags.java\n+ * @run main\/othervm TestLayoutFlags 4\n+ *\/\n+\n+\/* @test id=TestLayoutFlags_5\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java TestLayoutFlags.java\n+ * @run main\/othervm TestLayoutFlags 5\n+ *\/\n+\n+\/* @test id=TestLayoutFlags_6\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java TestLayoutFlags.java\n+ * @run main\/othervm TestLayoutFlags 6\n+ *\/\n+\n+\/* @test id=TestLayoutFlags_7\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @compile FieldLayoutAnalyzer.java TestLayoutFlags.java\n+ * @run main\/othervm TestLayoutFlags 7\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestLayoutFlags {\n+\n+    static class TestRunner {\n+        public static void main(String[] args) throws Exception {\n+            Class testClass = Class.forName(\"TestLayoutFlags\");\n+            Asserts.assertNotNull(testClass);\n+            Method[] testMethods = testClass.getMethods();\n+            for (Method test : testMethods) {\n+                if (test.getName().startsWith(\"test_\")) {\n+                    Asserts.assertTrue(Modifier.isStatic(test.getModifiers()));\n+                    Asserts.assertTrue(test.getReturnType().equals(Void.TYPE));\n+                    System.out.println(\"Running \" + test.getName());\n+                    test.invoke(null);\n+                }\n+            }\n+        }\n+    }\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    static value class Value0 {\n+        byte b0 = 0;\n+        byte b1 = 0;\n+    }\n+\n+    static class Container0 {\n+        Value0 val0 = new Value0();\n+    }\n+\n+    static public void test_0() {\n+        Container0 c = new Container0();\n+    }\n+\n+    static public void check_0(FieldLayoutAnalyzer fla) {\n+        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container0\");\n+        FieldLayoutAnalyzer.FieldBlock f0 = cl.getFieldFromName(\"val0\", false);\n+        if (useNullableAtomicFlat) {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NULLABLE_FLAT, f0.layoutKind());\n+        } else {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_FLAT, f0.layoutKind());\n+        }\n+    }\n+\n+    static class Container1 {\n+        @NullRestricted\n+        volatile Value0 val0 = new Value0();\n+    }\n+\n+    static public void test_1() {\n+        Container1 c = new Container1();\n+    }\n+\n+    static public void check_1(FieldLayoutAnalyzer fla) {\n+        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container1\");\n+        FieldLayoutAnalyzer.FieldBlock f0 = cl.getFieldFromName(\"val0\", false);\n+        if (useAtomicFlat) {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.ATOMIC_FLAT, f0.layoutKind());\n+        } else {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_FLAT, f0.layoutKind());\n+        }\n+    }\n+\n+    static class Container2 {\n+        @NullRestricted\n+        Value0 val0 = new Value0();\n+    }\n+\n+    static public void test_2() {\n+        Container2 c = new Container2();\n+    }\n+\n+    static public void check_2(FieldLayoutAnalyzer fla) {\n+        FieldLayoutAnalyzer.ClassLayout cl = fla.getClassLayoutFromName(\"TestLayoutFlags$Container2\");\n+        FieldLayoutAnalyzer.FieldBlock f0 = cl.getFieldFromName(\"val0\", false);\n+        if (useNonAtomicFlat) {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_ATOMIC_FLAT, f0.layoutKind());\n+        } else {\n+            Asserts.assertEquals(FieldLayoutAnalyzer.LayoutKind.NON_FLAT, f0.layoutKind());\n+        }\n+    }\n+\n+    static ProcessBuilder exec(String... args) throws Exception {\n+        List<String> argsList = new ArrayList<>();\n+        Collections.addAll(argsList, \"--enable-preview\");\n+        Collections.addAll(argsList, \"-Xint\");\n+        Collections.addAll(argsList, \"-XX:+UnlockDiagnosticVMOptions\");\n+        Collections.addAll(argsList, \"-XX:+PrintFieldLayout\");\n+        Collections.addAll(argsList, \"-Xshare:off\");\n+        Collections.addAll(argsList, \"-Xmx256m\");\n+        Collections.addAll(argsList, useNonAtomicFlat ? \"-XX:+NonAtomicValueFlattening\" : \"-XX:-NonAtomicValueFlattening\");\n+        Collections.addAll(argsList, useAtomicFlat ? \"-XX:+AtomicValueFlattening\" : \"-XX:-AtomicValueFlattening\");\n+        Collections.addAll(argsList, useNullableAtomicFlat ?  \"-XX:+NullableValueFlattening\" : \"-XX:-NullableValueFlattening\");\n+        Collections.addAll(argsList, \"-cp\", System.getProperty(\"java.class.path\") + System.getProperty(\"path.separator\") + \".\");\n+        Collections.addAll(argsList, args);\n+        return ProcessTools.createTestJavaProcessBuilder(argsList);\n+    }\n+\n+    static boolean useNonAtomicFlat;\n+    static boolean useAtomicFlat;\n+    static boolean useNullableAtomicFlat;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        switch(args[0]) {\n+            case \"0\": useNonAtomicFlat = false;\n+                        useAtomicFlat = false;\n+                        useNullableAtomicFlat = false;\n+                        break;\n+            case \"1\": useNonAtomicFlat = false;\n+                        useAtomicFlat = true;\n+                        useNullableAtomicFlat = true;\n+                        break;\n+            case \"2\": useNonAtomicFlat = false;\n+                        useAtomicFlat = false;\n+                        useNullableAtomicFlat = true;\n+                        break;\n+            case \"3\": useNonAtomicFlat = false;\n+                        useAtomicFlat = true;\n+                        useNullableAtomicFlat = false;\n+                        break;\n+            case \"4\": useNonAtomicFlat = true;\n+                        useAtomicFlat = false;\n+                        useNullableAtomicFlat = false;\n+                        break;\n+            case \"5\": useNonAtomicFlat = true;\n+                        useAtomicFlat = true;\n+                        useNullableAtomicFlat = true;\n+                        break;\n+            case \"6\": useNonAtomicFlat = true;\n+                        useAtomicFlat = false;\n+                        useNullableAtomicFlat = true;\n+                        break;\n+            case \"7\": useNonAtomicFlat = true;\n+                        useAtomicFlat = true;\n+                        useNullableAtomicFlat = false;\n+                        break;\n+            default: throw new RuntimeException(\"Unrecognized configuration\");\n+        }\n+\n+        \/\/ Generate test classes\n+        TestLayoutFlags vct = new TestLayoutFlags();\n+\n+        \/\/ Execute the test runner in charge of loading all test classes\n+        ProcessBuilder pb = exec(\"TestLayoutFlags$TestRunner\");\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+\n+        if (out.getExitValue() != 0) {\n+            System.out.print(out.getOutput());\n+        }\n+        Asserts.assertEquals(out.getExitValue(), 0, \"Something went wrong while running the tests\");\n+\n+        \/\/ To help during test development\n+        System.out.print(out.getOutput());\n+\n+        \/\/ Get and parse the test output\n+        FieldLayoutAnalyzer.LogOutput lo = new FieldLayoutAnalyzer.LogOutput(out.asLines());\n+        FieldLayoutAnalyzer fla =  FieldLayoutAnalyzer.createFieldLayoutAnalyzer(lo);\n+\n+        \/\/ Running tests verification method (check that tests produced the right configuration)\n+        Class testClass = TestLayoutFlags.class;\n+        Method[] testMethods = testClass.getMethods();\n+        for (Method test : testMethods) {\n+            if (test.getName().startsWith(\"check_\")) {\n+                Asserts.assertTrue(Modifier.isStatic(test.getModifiers()));\n+                Asserts.assertTrue(test.getReturnType().equals(Void.TYPE));\n+                test.invoke(null, fla);\n+            }\n+        }\n+\n+        \/\/ Verify that all layouts are correct\n+        fla.check();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/TestLayoutFlags.java","additions":276,"deletions":0,"binary":false,"changes":276,"status":"added"},{"patch":"@@ -321,2 +321,2 @@\n-    Collections.addAll(argsList, useAtomicFlat ? \"-XX:+AtomicFieldFlattening\" : \"-XX:-AtomicFieldFlattening\");\n-    Collections.addAll(argsList, useNullableAtomicFlat ?  \"-XX:+NullableFieldFlattening\" : \"-XX:-NullableFieldFlattening\");\n+    Collections.addAll(argsList, useAtomicFlat ? \"-XX:+AtomicValueFlattening\" : \"-XX:-AtomicValueFlattening\");\n+    Collections.addAll(argsList, useNullableAtomicFlat ?  \"-XX:+NullableValueFlattening\" : \"-XX:-NullableValueFlattening\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/field_layout\/ValueCompositionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @run junit\/othervm -XX:FlatArrayElementMaxSize=-1 ArrayElementVarHandleTest\n- * @run junit\/othervm -XX:FlatArrayElementMaxSize=0  ArrayElementVarHandleTest\n+ * @run junit\/othervm -XX:+UseFlatArray ArrayElementVarHandleTest\n+ * @run junit\/othervm -XX:-UseFlatArray  ArrayElementVarHandleTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/ArrayElementVarHandleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @run junit\/othervm -XX:InlineFieldMaxFlatSize=128 MHZeroValue\n- * @run junit\/othervm -XX:InlineFieldMaxFlatSize=0 MHZeroValue\n+ * @run junit\/othervm -XX:+UseFlatField MHZeroValue\n+ * @run junit\/othervm -XX:-UseFlatField MHZeroValue\n","filename":"test\/jdk\/valhalla\/valuetypes\/MHZeroValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run junit\/othervm -XX:FlatArrayElementMaxSize=0 NullRestrictedArraysTest\n+ * @run junit\/othervm -XX:-UseFlatArray NullRestrictedArraysTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedArraysTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run junit\/othervm -XX:InlineFieldMaxFlatSize=0 NullRestrictedTest\n+ * @run junit\/othervm -XX:-UseFlatField NullRestrictedTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/NullRestrictedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run junit\/othervm -Dvalue.bsm.salt=1 -XX:InlineFieldMaxFlatSize=0 ObjectMethods\n+ * @run junit\/othervm -Dvalue.bsm.salt=1 -XX:-UseFlatField ObjectMethods\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}