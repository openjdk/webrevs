{"files":[{"patch":"@@ -88,8 +88,0 @@\n-    \/**\n-     * This flag identifies the unique {@code \"\/packages\"} location, and\n-     * is used to determine the {@link LocationType} without additional\n-     * string comparison.\n-     *\n-     * <p>This flag is mutually exclusive with all other flags.\n-     *\/\n-    private static final int FLAGS_IS_PACKAGE_ROOT = 0x8;\n@@ -117,4 +109,3 @@\n-     *     <li>{@code \"\/packages\"} (special case): {@code FLAGS_IS_PACKAGE_ROOT}.\n-     *     <li>{@code \"\/packages\/xxx\"} (special case): Calculated elsewhere based\n-     *     on module entries.\n-     *     <li>In all other cases, flags are zero.\n+     *     <li>In all other cases, returned flags are zero (note that {@code\n+     *     \"\/packages\/xxx\"} entries may have flags, but these are calculated\n+     *     elsewhere).\n@@ -130,1 +121,2 @@\n-            throw new IllegalArgumentException(\"Package sub-directory flags handled separately: \" + name);\n+            throw new IllegalArgumentException(\n+                    \"Package sub-directory flags handled separately: \" + name);\n@@ -132,5 +124,7 @@\n-        String start = name.startsWith(MODULES_PREFIX + \"\/\") ? MODULES_PREFIX + \"\/\" : \"\/\";\n-        int idx = name.indexOf('\/', start.length());\n-        if (idx == -1) {\n-            \/\/ Special case for \"\/packages\" root, but otherwise, no flags.\n-            return name.equals(PACKAGES_PREFIX) ? FLAGS_IS_PACKAGE_ROOT : 0;\n+        \/\/ Find suffix for either '\/modules\/xxx\/suffix' or '\/xxx\/suffix' paths.\n+        int idx = name.startsWith(MODULES_PREFIX + \"\/\") ? MODULES_PREFIX.length() + 1 : 1;\n+        int suffixStart = name.indexOf('\/', idx);\n+        if (suffixStart == -1) {\n+            \/\/ No flags for '[\/modules]\/xxx' paths (esp. '\/modules', '\/packages').\n+            \/\/ '\/packages\/xxx' entries have flags, but not calculated here.\n+            return 0;\n@@ -138,2 +132,3 @@\n-        String prefix = name.substring(0, idx);\n-        String suffix = name.substring(idx);\n+        \/\/ Prefix is either '\/modules\/xxx' or '\/xxx', and suffix starts with '\/'.\n+        String prefix = name.substring(0, suffixStart);\n+        String suffix = name.substring(suffixStart);\n@@ -150,1 +145,1 @@\n-            \/\/ Edge case for things META-INF\/module-info.class etc.\n+            \/\/ Suffix is '\/META-INF\/xxx' and no preview version is even possible.\n@@ -474,6 +469,0 @@\n-\n-                \/\/ Temporary logic to handle package root classification until new\n-                \/\/ image reader code is committed which sets FLAGS_IS_PACKAGE_ROOT.\n-                \/\/ Base name is \"\/packages\" or \"\/modules\" (NOT \"packages\" and \"modules\").\n-                \/\/ TODO: Uncomment the FLAGS_IS_PACKAGE_ROOT test below.\n-                \/\/ return (getFlags() & FLAGS_IS_PACKAGE_ROOT) != 0\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageLocation.java","additions":16,"deletions":27,"binary":false,"changes":43,"status":"modified"}]}