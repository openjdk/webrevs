{"files":[{"patch":"@@ -40,0 +40,3 @@\n+    \/\/ Also defined in src\/java.base\/share\/native\/libjimage\/imageFile.hpp\n+\n+    \/** End of attribute stream marker. *\/\n@@ -41,0 +44,1 @@\n+    \/** String table offset of module name. *\/\n@@ -42,0 +46,1 @@\n+    \/** String table offset of resource path parent. *\/\n@@ -43,0 +48,1 @@\n+    \/** String table offset of resource path base. *\/\n@@ -44,0 +50,1 @@\n+    \/** String table offset of resource path extension. *\/\n@@ -45,0 +52,1 @@\n+    \/** Container byte offset of resource. *\/\n@@ -46,0 +54,1 @@\n+    \/** In-image byte size of the compressed resource. *\/\n@@ -47,0 +56,1 @@\n+    \/** In-memory byte size of the uncompressed resource. *\/\n@@ -48,0 +58,1 @@\n+    \/** Flags relating to preview mode resources. *\/\n@@ -49,0 +60,1 @@\n+    \/** Number of attribute kinds. *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageLocation.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,2 +37,6 @@\n-    \/\/ of location entries without string comparison. These may change\n-    \/\/ between jimage versions (they are checked during initialization).\n+    \/\/ of location entries without string comparison.\n+    \/\/ They are validated during initialization of ImageStringsWriter.\n+    \/\/\n+    \/\/ Adding new strings (with larger offsets) is possible without changing\n+    \/\/ the jimage version number, but any change to existing strings must be\n+    \/\/ accompanied by a jimage version number change.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageStrings.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    private static final int FLAGS_HAS_PREVIEW_VERSION = 0x1;\n+    private static final int FLAGS_PKG_HAS_PREVIEW_VERSION = 0x1;\n@@ -54,1 +54,1 @@\n-    private static final int FLAGS_HAS_NORMAL_VERSION = 0x2;\n+    private static final int FLAGS_PKG_HAS_NORMAL_VERSION = 0x2;\n@@ -57,1 +57,1 @@\n-    public static final int FLAGS_HAS_CONTENT = 0x4;\n+    public static final int FLAGS_PKG_HAS_RESOURCES = 0x4;\n@@ -74,2 +74,2 @@\n-    public static ModuleReference forPackage(String moduleName, boolean isPreview) {\n-        return new ModuleReference(moduleName, FLAGS_HAS_CONTENT | previewFlag(isPreview));\n+    public static ModuleReference forPackageIn(String moduleName, boolean isPreview) {\n+        return new ModuleReference(moduleName, FLAGS_PKG_HAS_RESOURCES | previewFlag(isPreview));\n@@ -83,1 +83,1 @@\n-    public static ModuleReference forEmptyPackage(String moduleName, boolean isPreview) {\n+    public static ModuleReference forEmptyPackageIn(String moduleName, boolean isPreview) {\n@@ -88,1 +88,1 @@\n-        return isPreview ? FLAGS_HAS_PREVIEW_VERSION : FLAGS_HAS_NORMAL_VERSION;\n+        return isPreview ? FLAGS_PKG_HAS_PREVIEW_VERSION : FLAGS_PKG_HAS_NORMAL_VERSION;\n@@ -118,1 +118,1 @@\n-     * under many modules, it only has content in one.\n+     * under many modules, it only has resources in one.\n@@ -120,2 +120,2 @@\n-    public boolean hasContent() {\n-        return ((flags & FLAGS_HAS_CONTENT) != 0);\n+    public boolean hasResources() {\n+        return ((flags & FLAGS_PKG_HAS_RESOURCES) != 0);\n@@ -129,1 +129,1 @@\n-        return (flags & FLAGS_HAS_PREVIEW_VERSION) != 0;\n+        return (flags & FLAGS_PKG_HAS_PREVIEW_VERSION) != 0;\n@@ -134,5 +134,1 @@\n-        return !hasNormalVersion(flags);\n-    }\n-\n-    private static boolean hasNormalVersion(int flags) {\n-        return (flags & FLAGS_HAS_NORMAL_VERSION) != 0;\n+        return (flags & FLAGS_PKG_HAS_NORMAL_VERSION) == 0;\n@@ -183,2 +179,2 @@\n-        int testFlags = (includeNormal ? FLAGS_HAS_NORMAL_VERSION : 0)\n-                + (includePreview ? FLAGS_HAS_PREVIEW_VERSION : 0);\n+        int testFlags = (includeNormal ? FLAGS_PKG_HAS_NORMAL_VERSION : 0)\n+                + (includePreview ? FLAGS_PKG_HAS_PREVIEW_VERSION : 0);\n@@ -201,1 +197,1 @@\n-                            buffer.get(idx) & (FLAGS_HAS_NORMAL_VERSION | FLAGS_HAS_PREVIEW_VERSION);\n+                            buffer.get(idx) & (FLAGS_PKG_HAS_NORMAL_VERSION | FLAGS_PKG_HAS_PREVIEW_VERSION);\n@@ -264,2 +260,2 @@\n-        if (refs.stream().filter(ModuleReference::hasContent).count() > 1) {\n-            throw new IllegalArgumentException(\"At most one reference can have content: \" + refs);\n+        if (refs.stream().filter(ModuleReference::hasResources).count() > 1) {\n+            throw new IllegalArgumentException(\"At most one reference can have resources: \" + refs);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ModuleReference.java","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -389,1 +389,1 @@\n-                    buff.putInt(mod.isEmpty ? 0 : ModuleReference.FLAGS_HAS_CONTENT);\n+                    buff.putInt(mod.isEmpty ? 0 : ModuleReference.FLAGS_PKG_HAS_RESOURCES);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageResourcesTree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+        \/\/ New strings can be reserved after existing strings without having to\n+        \/\/ change the jimage file version, but any change to existing entries\n+        \/\/ requires the jimage file version to be increased at the same time.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageStringsWriter.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}