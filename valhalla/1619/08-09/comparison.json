{"files":[{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.jimage;\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Path;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.function.Function;\n-\n-\/**\n- * Factory to get ImageReader\n- *\n- * @implNote This class needs to maintain JDK 8 source compatibility.\n- *\n- * It is used internally in the JDK to implement jimage\/jrtfs access,\n- * but also compiled and delivered as part of the jrtfs.jar to support access\n- * to the jimage file provided by the shipped JDK by tools running on JDK 8.\n- *\/\n-public class ImageReaderFactory {\n-    private ImageReaderFactory() {}\n-\n-    private static final String JAVA_HOME = System.getProperty(\"java.home\");\n-    private static final Path BOOT_MODULES_JIMAGE;\n-\n-    static {\n-        FileSystem fs;\n-        if (ImageReaderFactory.class.getClassLoader() == null) {\n-            try {\n-                fs = (FileSystem) Class.forName(\"sun.nio.fs.DefaultFileSystemProvider\")\n-                        .getMethod(\"theFileSystem\")\n-                        .invoke(null);\n-            } catch (Exception e) {\n-                throw new ExceptionInInitializerError(e);\n-            }\n-        } else {\n-            fs = FileSystems.getDefault();\n-        }\n-        BOOT_MODULES_JIMAGE = fs.getPath(JAVA_HOME, \"lib\", \"modules\");\n-    }\n-\n-    private static final Map<Path, ImageReader> readers = new ConcurrentHashMap<>();\n-\n-    \/**\n-     * Returns an {@code ImageReader} to read from the given image file\n-     *\/\n-    public static ImageReader get(Path jimage) throws IOException {\n-        Objects.requireNonNull(jimage);\n-        try {\n-            return readers.computeIfAbsent(jimage, OPENER);\n-        } catch (UncheckedIOException io) {\n-            throw io.getCause();\n-        }\n-    }\n-\n-    private static Function<Path, ImageReader> OPENER = new Function<Path, ImageReader>() {\n-        public ImageReader apply(Path path) {\n-            try {\n-                return ImageReader.open(path);\n-            } catch (IOException io) {\n-                throw new UncheckedIOException(io);\n-            }\n-        }\n-    };\n-\n-    \/**\n-     * Returns the {@code ImageReader} to read the image file in this\n-     * run-time image.\n-     *\n-     * @throws UncheckedIOException if an I\/O error occurs\n-     *\/\n-    public static ImageReader getImageReader() {\n-        try {\n-            return get(BOOT_MODULES_JIMAGE);\n-        } catch (IOException ioe) {\n-            throw new UncheckedIOException(ioe);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReaderFactory.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -37,2 +37,2 @@\n-import static jdk.internal.jimage.ModuleReference.forEmptyPackage;\n-import static jdk.internal.jimage.ModuleReference.forPackage;\n+import static jdk.internal.jimage.ModuleReference.forEmptyPackageIn;\n+import static jdk.internal.jimage.ModuleReference.forPackageIn;\n@@ -60,1 +60,1 @@\n-        ModuleReference ref = forEmptyPackage(\"module\", isPreview);\n+        ModuleReference ref = forEmptyPackageIn(\"module\", isPreview);\n@@ -63,1 +63,1 @@\n-        assertFalse(ref.hasContent());\n+        assertFalse(ref.hasResources());\n@@ -71,1 +71,1 @@\n-        ModuleReference ref = forPackage(\"module\", isPreview);\n+        ModuleReference ref = forPackageIn(\"module\", isPreview);\n@@ -74,1 +74,1 @@\n-        assertTrue(ref.hasContent());\n+        assertTrue(ref.hasResources());\n@@ -82,2 +82,2 @@\n-        ModuleReference emptyRef = forEmptyPackage(\"module\", true);\n-        ModuleReference resourceRef = forPackage(\"module\", isPreview);\n+        ModuleReference emptyRef = forEmptyPackageIn(\"module\", true);\n+        ModuleReference resourceRef = forPackageIn(\"module\", isPreview);\n@@ -87,1 +87,1 @@\n-        assertTrue(merged.hasContent());\n+        assertTrue(merged.hasResources());\n@@ -95,4 +95,4 @@\n-                forEmptyPackage(\"alpha\", true),\n-                forEmptyPackage(\"beta\", false).merge(forEmptyPackage(\"beta\", true)),\n-                forPackage(\"gamma\", false),\n-                forEmptyPackage(\"zeta\", false));\n+                forEmptyPackageIn(\"alpha\", true),\n+                forEmptyPackageIn(\"beta\", false).merge(forEmptyPackageIn(\"beta\", true)),\n+                forPackageIn(\"gamma\", false),\n+                forEmptyPackageIn(\"zeta\", false));\n@@ -122,2 +122,2 @@\n-                forPackage(\"first\", false),\n-                forEmptyPackage(\"alpha\", false));\n+                forPackageIn(\"first\", false),\n+                forEmptyPackageIn(\"alpha\", false));\n@@ -135,2 +135,2 @@\n-                forPackage(\"alpha\", false),\n-                forPackage(\"beta\", false));\n+                forPackageIn(\"alpha\", false),\n+                forPackageIn(\"beta\", false));\n@@ -141,1 +141,1 @@\n-        assertTrue(err.getMessage().contains(\"content\"));\n+        assertTrue(err.getMessage().contains(\"resources\"));\n@@ -148,2 +148,2 @@\n-                forEmptyPackage(\"alpha\", false),\n-                forEmptyPackage(\"beta\", true));\n+                forEmptyPackageIn(\"alpha\", false),\n+                forEmptyPackageIn(\"beta\", true));\n@@ -161,2 +161,2 @@\n-                forEmptyPackage(\"duplicate\", true),\n-                forEmptyPackage(\"duplicate\", false));\n+                forEmptyPackageIn(\"duplicate\", true),\n+                forEmptyPackageIn(\"duplicate\", false));\n@@ -208,4 +208,4 @@\n-                forEmptyPackage(\"normal.beta\", false),\n-                forPackage(\"preview.beta\", true),\n-                forEmptyPackage(\"preview.alpha\", true),\n-                forEmptyPackage(\"normal.alpha\", false));\n+                forEmptyPackageIn(\"normal.beta\", false),\n+                forPackageIn(\"preview.beta\", true),\n+                forEmptyPackageIn(\"preview.alpha\", true),\n+                forEmptyPackageIn(\"normal.alpha\", false));\n","filename":"test\/jdk\/jdk\/internal\/jimage\/ModuleReferenceTest.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"}]}