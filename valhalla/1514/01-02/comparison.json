{"files":[{"patch":"@@ -28,3 +28,5 @@\n- * @enablePreview\n- * @run main\/othervm -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening IsIdentityClassTest\n- * @run main\/othervm -XX:+UseArrayFlattening -XX:+UseNullableValueFlattening IsIdentityClassTest\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ * @run junit\/othervm IsIdentityClassTest\n+ * @run junit\/othervm --enable-preview -XX:-UseArrayFlattening -XX:-UseNullableValueFlattening IsIdentityClassTest\n+ * @run junit\/othervm --enable-preview -XX:+UseArrayFlattening -XX:+UseNullableValueFlattening IsIdentityClassTest\n@@ -33,6 +35,1 @@\n-\/*\n- * @test\n- * @summary Test that IsIdentityClass and modifiers return true for arrays not in preview.\n- * @library \/test\/lib\n- * @run main\/othervm IsIdentityClassTest\n- *\/\n+import org.junit.jupiter.api.Test;\n@@ -47,0 +44,1 @@\n+import jdk.internal.misc.PreviewFeatures;\n@@ -53,2 +51,10 @@\n-    static boolean UseArrayFlattening = false;\n-    static {\n+    private static void assertFalseIfPreview(boolean condition, String msg) {\n+        if (PreviewFeatures.isEnabled()) {\n+            assertFalse(condition, msg);\n+        } else {\n+            assertTrue(condition, msg);\n+        }\n+    }\n+\n+    @Test\n+    void testIsIdentityClass() {\n@@ -57,1 +63,1 @@\n-        UseArrayFlattening = !arguments.contains(\"-XX:-UseArrayFlattening\");\n+        boolean UseArrayFlattening = !arguments.contains(\"-XX:-UseArrayFlattening\");\n@@ -59,1 +65,0 @@\n-    }\n@@ -61,1 +66,0 @@\n-    static void testIsIdentityClass() {\n@@ -68,1 +72,1 @@\n-        assertFalse(Integer.class.isIdentity(), \"Integer is not an IDENTITY type\");\n+        assertFalseIfPreview(Integer.class.isIdentity(), \"Integer is not an IDENTITY type\");\n@@ -72,1 +76,2 @@\n-    static void testModifiers() {\n+    @Test\n+    void testModifiers() {\n@@ -74,1 +79,1 @@\n-        assertFalse(Modifier.isIdentity(imod), \"Modifier of Integer should not have IDENTITY set\");\n+        assertFalseIfPreview(Modifier.isIdentity(imod), \"Modifier of Integer should not have IDENTITY set\");\n@@ -79,1 +84,2 @@\n-    static void testAccessFlags() {\n+    @Test\n+    void testAccessFlags() {\n@@ -81,1 +87,1 @@\n-        assertFalse(iacc.contains(Modifier.IDENTITY), \"Access flags should not contain IDENTITY\");\n+        assertFalseIfPreview(iacc.contains(Modifier.IDENTITY), \"Access flags should not contain IDENTITY\");\n@@ -85,6 +91,0 @@\n-\n-    public static void main(String[] args) throws Exception {\n-        testIsIdentityClass();\n-        testModifiers();\n-        testAccessFlags();\n-    }\n","filename":"test\/jdk\/valhalla\/valuetypes\/IsIdentityClassTest.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"}]}