{"files":[{"patch":"@@ -3596,1 +3596,1 @@\n-  if (type->access_flags().is_identity_class()) {\n+  if (type->is_identity_class()) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -732,1 +732,1 @@\n-  bool is_identity_class() const        { return _access_flags.is_identity_class(); }\n+  bool is_identity_class() const        { assert(is_instance_klass(), \"only for instanceKlass\"); return _access_flags.is_identity_class(); }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n-  if (elmClass->is_identity_class()) {\n+  if (elmClass->is_array_klass() || elmClass->is_identity_class()) {\n@@ -1392,13 +1392,0 @@\n-JVM_ENTRY(jboolean, JVM_IsIdentityClass(JNIEnv *env, jclass cls))\n-  oop mirror = JNIHandles::resolve_non_null(cls);\n-  if (java_lang_Class::is_primitive(mirror)) {\n-    return JNI_FALSE;\n-  }\n-  Klass* k = java_lang_Class::as_Klass(mirror);\n-  if (EnableValhalla) {\n-    return k->is_array_klass() || k->is_identity_class();\n-  } else {\n-    return k->is_interface() ? JNI_FALSE : JNI_TRUE;\n-  }\n-JVM_END\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -416,1 +416,1 @@\n-  if (klass->is_identity_class()) {\n+  if (klass->is_array_klass() || klass->is_identity_class()) {\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -627,1 +627,9 @@\n-    public native boolean isIdentity();\n+    public boolean isIdentity() {\n+        if (isPrimitive()) {\n+            return false;\n+        } else if (PreviewFeatures.isEnabled()) {\n+           return isArray() || Modifier.isIdentity(modifiers);\n+        } else {\n+            return !isInterface();\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-    {\"isIdentity\",       \"()Z\",             (void *)&JVM_IsIdentityClass},\n","filename":"src\/java.base\/share\/native\/libjava\/Class.c","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test that IsIdentityClass and modifiers return true for arrays that can be flattened.\n+ * @library \/test\/lib\n+ * @enablePreview false\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.value\n+ * @run junit\/othervm IsIdentityClassTest\n+ * @run junit\/othervm --enable-preview IsIdentityClassTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.Modifier;\n+import java.util.Set;\n+\n+import jdk.internal.misc.PreviewFeatures;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+public class IsIdentityClassTest {\n+\n+    private static void assertFalseIfPreview(boolean condition, String msg) {\n+        assertEquals(!PreviewFeatures.isEnabled(), condition, msg);\n+    }\n+\n+    @Test\n+    void testIsIdentityClass() {\n+        assertFalseIfPreview(Integer.class.isIdentity(), \"Integer is not an IDENTITY type\");\n+        assertTrue(Integer[].class.isIdentity(), \"Arrays of inline types are IDENTITY types\");\n+    }\n+\n+    @Test\n+    void testModifiers() {\n+        int imod = Integer.class.getModifiers();\n+        assertFalseIfPreview(Modifier.isIdentity(imod), \"Modifier of Integer should not have IDENTITY set\");\n+        int amod = Integer[].class.getModifiers();\n+        assertEquals(PreviewFeatures.isPreviewEnabled(), Modifier.isIdentity(amod), \"Modifier of array should have IDENTITY set\");\n+    }\n+\n+    @Test\n+    void testAccessFlags() {\n+        if (PreviewFeatures.isEnabled()) {\n+            Set<AccessFlag> iacc = Integer.class.accessFlags();\n+            assertFalse(iacc.contains(AccessFlag.IDENTITY), \"Access flags should not contain IDENTITY\");\n+        }\n+Without --enable-preview (before Valhalla), there was no IDENTITY accessflag.\n+        Set<AccessFlag> aacc = Integer[].class.accessFlags();\n+        assertFalse(aacc.contains(Modifier.IDENTITY), \"Access flags of array of inline types should contain IDENTITY\");\n+    }\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/IsIdentityClassTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}